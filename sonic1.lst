00000000                            ;  =========================================================================
00000000                            ; |           Sonic the Hedgehog Disassembly for Sega Mega Drive            |
00000000                            ;  =========================================================================
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx, Stealth and Esrael L.G. Neto
00000000                            
00000000                            ; ===========================================================================
00000000                            
00000000                            	include	"_s1smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000001                  SourceDriver = 1 ; Please don't modify the value.
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000 =0000000C                  psgdelta	EQU 12
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =00000088                  smpsPitch10lo	EQU $88
00000000 =00000094                  smpsPitch09lo	EQU $94
00000000 =000000A0                  smpsPitch08lo	EQU $A0
00000000 =000000AC                  smpsPitch07lo	EQU $AC
00000000 =000000B8                  smpsPitch06lo	EQU $B8
00000000 =000000C4                  smpsPitch05lo	EQU $C4
00000000 =000000D0                  smpsPitch04lo	EQU $D0
00000000 =000000DC                  smpsPitch03lo	EQU $DC
00000000 =000000E8                  smpsPitch02lo	EQU $E8
00000000 =000000F4                  smpsPitch01lo	EQU $F4
00000000 =00000000                  smpsPitch00		EQU $00
00000000 =0000000C                  smpsPitch01hi	EQU $0C
00000000 =00000018                  smpsPitch02hi	EQU $18
00000000 =00000024                  smpsPitch03hi	EQU $24
00000000 =00000030                  smpsPitch04hi	EQU $30
00000000 =0000003C                  smpsPitch05hi	EQU $3C
00000000 =00000048                  smpsPitch06hi	EQU $48
00000000 =00000054                  smpsPitch07hi	EQU $54
00000000 =00000060                  smpsPitch08hi	EQU $60
00000000 =0000006C                  smpsPitch09hi	EQU $6C
00000000 =00000078                  smpsPitch10hi	EQU $78
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst		EQU	$80
00000000 =00000081                  nC0			EQU	$81
00000000 =00000082                  nCs0		EQU	$82
00000000 =00000083                  nD0			EQU	$83
00000000 =00000084                  nEb0		EQU	$84
00000000 =00000085                  nE0			EQU	$85
00000000 =00000086                  nF0			EQU	$86
00000000 =00000087                  nFs0		EQU	$87
00000000 =00000088                  nG0			EQU	$88
00000000 =00000089                  nAb0		EQU	$89
00000000 =0000008A                  nA0			EQU	$8A
00000000 =0000008B                  nBb0		EQU	$8B
00000000 =0000008C                  nB0			EQU	$8C
00000000 =0000008D                  nC1			EQU	$8D
00000000 =0000008E                  nCs1		EQU	$8E
00000000 =0000008F                  nD1			EQU	$8F
00000000 =00000090                  nEb1		EQU	$90
00000000 =00000091                  nE1			EQU	$91
00000000 =00000092                  nF1			EQU	$92
00000000 =00000093                  nFs1		EQU	$93
00000000 =00000094                  nG1			EQU	$94
00000000 =00000095                  nAb1		EQU	$95
00000000 =00000096                  nA1			EQU	$96
00000000 =00000097                  nBb1		EQU	$97
00000000 =00000098                  nB1			EQU	$98
00000000 =00000099                  nC2			EQU	$99
00000000 =0000009A                  nCs2		EQU	$9A
00000000 =0000009B                  nD2			EQU	$9B
00000000 =0000009C                  nEb2		EQU	$9C
00000000 =0000009D                  nE2			EQU	$9D
00000000 =0000009E                  nF2			EQU	$9E
00000000 =0000009F                  nFs2		EQU	$9F
00000000 =000000A0                  nG2			EQU	$A0
00000000 =000000A1                  nAb2		EQU	$A1
00000000 =000000A2                  nA2			EQU	$A2
00000000 =000000A3                  nBb2		EQU	$A3
00000000 =000000A4                  nB2			EQU	$A4
00000000 =000000A5                  nC3			EQU	$A5
00000000 =000000A6                  nCs3		EQU	$A6
00000000 =000000A7                  nD3			EQU	$A7
00000000 =000000A8                  nEb3		EQU	$A8
00000000 =000000A9                  nE3			EQU	$A9
00000000 =000000AA                  nF3			EQU	$AA
00000000 =000000AB                  nFs3		EQU	$AB
00000000 =000000AC                  nG3			EQU	$AC
00000000 =000000AD                  nAb3		EQU	$AD
00000000 =000000AE                  nA3			EQU	$AE
00000000 =000000AF                  nBb3		EQU	$AF
00000000 =000000B0                  nB3			EQU	$B0
00000000 =000000B1                  nC4			EQU	$B1
00000000 =000000B2                  nCs4		EQU	$B2
00000000 =000000B3                  nD4			EQU	$B3
00000000 =000000B4                  nEb4		EQU	$B4
00000000 =000000B5                  nE4			EQU	$B5
00000000 =000000B6                  nF4			EQU	$B6
00000000 =000000B7                  nFs4		EQU	$B7
00000000 =000000B8                  nG4			EQU	$B8
00000000 =000000B9                  nAb4		EQU	$B9
00000000 =000000BA                  nA4			EQU	$BA
00000000 =000000BB                  nBb4		EQU	$BB
00000000 =000000BC                  nB4			EQU	$BC
00000000 =000000BD                  nC5			EQU	$BD
00000000 =000000BE                  nCs5		EQU	$BE
00000000 =000000BF                  nD5			EQU	$BF
00000000 =000000C0                  nEb5		EQU	$C0
00000000 =000000C1                  nE5			EQU	$C1
00000000 =000000C2                  nF5			EQU	$C2
00000000 =000000C3                  nFs5		EQU	$C3
00000000 =000000C4                  nG5			EQU	$C4
00000000 =000000C5                  nAb5		EQU	$C5
00000000 =000000C6                  nA5			EQU	$C6
00000000 =000000C7                  nBb5		EQU	$C7
00000000 =000000C8                  nB5			EQU	$C8
00000000 =000000C9                  nC6			EQU	$C9
00000000 =000000CA                  nCs6		EQU	$CA
00000000 =000000CB                  nD6			EQU	$CB
00000000 =000000CC                  nEb6		EQU	$CC
00000000 =000000CD                  nE6			EQU	$CD
00000000 =000000CE                  nF6			EQU	$CE
00000000 =000000CF                  nFs6		EQU	$CF
00000000 =000000D0                  nG6			EQU	$D0
00000000 =000000D1                  nAb6		EQU	$D1
00000000 =000000D2                  nA6			EQU	$D2
00000000 =000000D3                  nBb6		EQU	$D3
00000000 =000000D4                  nB6			EQU	$D4
00000000 =000000D5                  nC7			EQU	$D5
00000000 =000000D6                  nCs7		EQU	$D6
00000000 =000000D7                  nD7			EQU	$D7
00000000 =000000D8                  nEb7		EQU	$D8
00000000 =000000D9                  nE7			EQU	$D9
00000000 =000000DA                  nF7			EQU	$DA
00000000 =000000DB                  nFs7		EQU	$DB
00000000 =000000DC                  nG7			EQU	$DC
00000000 =000000DD                  nAb7		EQU	$DD
00000000 =000000DE                  nA7			EQU	$DE
00000000 =000000DF                  nBb7		EQU	$DF
00000000                            ; SMPS2ASM uses nMaxPSG for songs from S1/S2 drivers.
00000000                            ; nMaxPSG1 and nMaxPSG2 are used only for songs from S3/S&K/S3D drivers.
00000000                            ; The use of psgdelta is intended to undo the effects of PSGPitchConvert
00000000                            ; and ensure that the ending note is indeed the maximum PSG frequency.
00000000 =000000C6                  nMaxPSG				EQU nA5
00000000 =000000D2                  nMaxPSG1			EQU nA5+psgdelta
00000000 =000000D2                  nMaxPSG2			EQU nA5+psgdelta
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG Flutter Equates
00000000 =00000000                  fTone_00	EQU	$00
00000000 =00000001                  fTone_01	EQU	$01
00000000 =00000002                  fTone_02	EQU	$02
00000000 =00000003                  fTone_03	EQU	$03
00000000 =00000004                  fTone_04	EQU	$04
00000000 =00000005                  fTone_05	EQU	$05
00000000 =00000006                  fTone_06	EQU	$06
00000000 =00000007                  fTone_07	EQU	$07
00000000 =00000008                  fTone_08	EQU	$08
00000000 =00000009                  fTone_09	EQU	$09
00000000 =00000007                  fTone_0A	EQU	$07
00000000 =00000005                  fTone_0B	EQU	$05
00000000 =00000000                  fTone_0C	EQU	$00
00000000                            ;fTone_0D	EQU	$00
00000000 =00000002                  sTone_01	EQU	$02
00000000 =00000002                  sTone_02	EQU	$02
00000000 =00000005                  sTone_03	EQU	$05
00000000 =00000003                  sTone_04	EQU	$03
00000000 =00000001                  sTone_05	EQU	$01
00000000 =00000003                  sTone_06	EQU	$03
00000000 =00000000                  sTone_07	EQU	$00	; SFX envelope, probably unused in S3K
00000000 =00000009                  sTone_08	EQU	$09
00000000 =00000005                  sTone_09	EQU	$05
00000000 =00000007                  sTone_0A	EQU	$07
00000000 =00000000                  sTone_0B	EQU	$00	; For FM volume envelopes
00000000 =00000009                  sTone_0C	EQU	$09
00000000 =00000000                  sTone_0D	EQU	$00	; This time it matches 100%
00000000 =00000002                  sTone_0E	EQU	$02	; Duplicate of 01
00000000 =00000002                  sTone_0F	EQU	$02	; Duplicate of 02
00000000 =00000000                  sTone_10	EQU	$00
00000000 =00000006                  sTone_11	EQU	$06
00000000 =00000001                  sTone_12	EQU	$01	; Duplicate of 05
00000000 =00000003                  sTone_13	EQU	$03	; Duplicate of 06
00000000 =00000000                  sTone_14	EQU	$00	; SFX envelope, probably unused in S3K
00000000 =00000009                  sTone_15	EQU	$09	; Duplicate of 08
00000000 =00000005                  sTone_16	EQU	$05	; Duplicate of 09
00000000 =00000007                  sTone_17	EQU	$07	; Duplicate of 0A
00000000 =00000000                  sTone_18	EQU	$00	; For FM volume envelopes
00000000 =00000009                  sTone_19	EQU	$09	; Duplicate of 0C
00000000 =00000002                  sTone_1A	EQU	$02
00000000 =00000009                  sTone_1B	EQU	$09	; Duplicate of 0C
00000000 =00000006                  sTone_1C	EQU	$06
00000000 =00000007                  sTone_1D	EQU	$07
00000000 =00000002                  sTone_1E	EQU	$02
00000000 =00000004                  sTone_1F	EQU	$04
00000000 =00000000                  sTone_20	EQU	$00	; This time it matches 100%
00000000 =00000009                  sTone_21	EQU	$09
00000000 =00000004                  sTone_22	EQU	$04
00000000 =00000007                  sTone_23	EQU	$07
00000000 =00000002                  sTone_24	EQU	$02
00000000 =00000009                  sTone_25	EQU	$09
00000000 =00000007                  sTone_26	EQU	$07
00000000 =00000003                  sTone_27	EQU	$03
00000000                            ;sTone_28	EQU	$09
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick equ $81
00000000 =00000082                  dSnare equ $82
00000000 =00000085                  dCrashCymbal equ $85
00000000 =00000088                  dHiTimpani equ $88
00000000 =00000089                  dMidTimpani equ $89
00000000 =0000008A                  dLowTimpani equ $8A
00000000 =0000008B                  dVLowTimpani equ $8B
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Conversion macros and functions
00000000                            
00000000                            ;conv0To256  macro val 
00000000                            	;if val<$01
00000000                            		;dc.b (256-val+$FF)&$FF
00000000                            	;else	
00000000                            		;dc.b (256-val)&$FF	
00000000                            	;endc
00000000                            	;endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000                            smpsHeaderStartSong macro ver
00000000                            SourceDriver set ver
00000000                            songStart set *
00000000                            	endm
00000000                            
00000000                            smpsHeaderStartSongConvert macro ver
00000000                            SourceDriver set ver
00000000                            songStart set *
00000000                            	endm
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	if songStart<>*
00000000                            		fatal "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endif
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            	if songStart<>*
00000000                            		fatal "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endif
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro div,mod
00000000                            	dc.b	div
00000000                            tempoDivider set div
00000000                            	dc.b    mod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if (narg=2)
00000000                            		dc.b	pitch
00000000                            		if (narg=3)
00000000                            			dc.b	vol
00000000                            		else
00000000                            			dc.b	$00
00000000                            		endif
00000000                            	else
00000000                            		dc.w	$00
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	if SourceDriver>=3
00000000                            		dc.b	(pitch-psgdelta)&$FF
00000000                            	else
00000000                            		dc.b	pitch
00000000                            	endif
00000000                            	dc.b	vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fatal "Using channel ID of FM6 ($06) in Sonic 1 or Sonic 2 drivers is unsupported. Change it to another channel."
00000000                            	endif
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	if (chanid&$80)<>0
00000000                            	if SourceDriver>=3
00000000                            		dc.b	(pitch-psgdelta)&$FF
00000000                            	else
00000000                            		dc.b	pitch
00000000                            	endif
00000000                            	else
00000000                            		dc.b	pitch
00000000                            	endif
00000000                            	dc.b	vol
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            smpsDetune macro val
00000000                            	smpsAlterNote val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000 =000000E6                  sVol	EQU $E6
00000000                            
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000 =000000E7                  smpsNA	EQU smpsNoAttack
00000000 =000000E7                  sNA	EQU smpsNoAttack
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            	dc.b	$E8,val
00000000                            	endm
00000000                            
00000000                            ; Add xx to channel pitch
00000000                            smpsAlterPitch macro val
00000000                            	dc.b	$E9,val
00000000                            	endm
00000000                            
00000000                            smpsChangeTransposition macro val
00000000                            	if SourceDriver>=3
00000000                            		dc.b	$FF,val
00000000                            	else
00000000                            		dc.b	$E9,val
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro val
00000000                            	dc.b	$EA
00000000                            	dc.b    val
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	fatal "Coord. Flag to set volume (instead of volume attenuation) does not exist in S1 or S2 drivers. Complain to Flamewing to add it."
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000 =000000EC                  spVol	EQU $EC
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            	dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	dc.b	$EF,voice
00000000                            	endm
00000000                            
00000000                            ; EFxx - Set Voice of FM channel to xx
00000000                            smpsFMvoice macro voice
00000000                            	dc.b	$EF,voice
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	if SourceDriver>=3
00000000                            		dc.b	wait+1,speed,change,(step*speed-1)&$FF
00000000                            	else
00000000                            		dc.b	wait,speed,change,step
00000000                            	endif
00000000                            	;dc.b	speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	dc.b	$E6,val1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; S1/S2 only coordination flag
00000000                            ; Sets D1L to maximum volume (minimum attenuation) and RR to maximum for operators 3 and 4 of FM1
00000000                            smpsWeirdD1LRR macro
00000000                            	dc.b	$F9
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set op1
00000000                            vcDT2 set op2
00000000                            vcDT3 set op3
00000000                            vcDT4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set op1
00000000                            vcCF2 set op2
00000000                            vcCF3 set op3
00000000                            vcCF4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set op1
00000000                            vcRS2 set op2
00000000                            vcRS3 set op3
00000000                            vcRS4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set op1
00000000                            vcAR2 set op2
00000000                            vcAR3 set op3
00000000                            vcAR4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set op1
00000000                            vcAM2 set op2
00000000                            vcAM3 set op3
00000000                            vcAM4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set op1
00000000                            vcD1R2 set op2
00000000                            vcD1R3 set op3
00000000                            vcD1R4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set op1
00000000                            vcD2R2 set op2
00000000                            vcD2R3 set op3
00000000                            vcD2R4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set op1
00000000                            vcDL2 set op2
00000000                            vcDL3 set op3
00000000                            vcDL4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set op1
00000000                            vcRR2 set op2
00000000                            vcRR3 set op3
00000000                            vcRR4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set op1
00000000                            vcTL2 set op2
00000000                            vcTL3 set op3
00000000                            vcTL4 set op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            	dc.b	(vcDT4<<4)+vcCF4, (vcDT3<<4)+vcCF3, (vcDT2<<4)+vcCF2, (vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4, (vcRS3<<6)+vcAR3, (vcRS2<<6)+vcAR2, (vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4, (vcAM3<<5)+vcD1R3, (vcAM2<<5)+vcD1R2, (vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4, vcD2R3, vcD2R2, vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4, (vcDL3<<4)+vcRR3, (vcDL2<<4)+vcRR2, (vcDL1<<4)+vcRR1
00000000                            	;dc.b	vcTL4|vcTLMask4, vcTL3|vcTLMask3, vcTL2|vcTLMask2, vcTL1|vcTLMask1
00000000                            	if vcAlgorithm=7
00000000                            		dc.b	op4|$80
00000000                            	else
00000000                            		dc.b	op4
00000000                            	endif
00000000                            
00000000                            	if vcAlgorithm>=4
00000000                            		dc.b    op3|$80
00000000                            	else
00000000                            		dc.b    op3
00000000                            	endif
00000000                            
00000000                            	if vcAlgorithm>=5
00000000                            		dc.b    op2|$80
00000000                            	else
00000000                            		dc.b    op2
00000000                            	endif
00000000                            		dc.b    op1|$80
00000000                            	endm
00000000                            
00000000                            
00000000                            	include	"Constants.asm"
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Constants
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000 =00006978                  Size_of_SegaPCM:		equ $6978
00000000                            
00000000                            ; VDP addressses
00000000 =00C00000                  vdp_data_port:		equ $C00000
00000000 =00C00004                  vdp_control_port:	equ $C00004
00000000 =00C00008                  vdp_counter:		equ $C00008
00000000                            
00000000 =00C00011                  psg_input:		equ $C00011
00000000                            
00000000                            ; Z80 addresses
00000000 =00A00000                  z80_ram:		equ $A00000	; start of Z80 RAM
00000000 =00A000EA                  z80_dac3_pitch:		equ $A000EA
00000000 =00A01FFD                  z80_dac_status:		equ $A01FFD
00000000 =00A01FFF                  z80_dac_sample:		equ $A01FFF
00000000 =00A02000                  z80_ram_end:		equ $A02000	; end of non-reserved Z80 RAM
00000000 =00A10001                  z80_version:		equ $A10001
00000000 =00A10002                  z80_port_1_data:	equ $A10002
00000000 =00A10008                  z80_port_1_control:	equ $A10008
00000000 =00A1000A                  z80_port_2_control:	equ $A1000A
00000000 =00A1000C                  z80_expansion_control:	equ $A1000C
00000000 =00A11100                  z80_bus_request:	equ $A11100
00000000 =00A11200                  z80_reset:		equ $A11200
00000000 =00A04000                  ym2612_a0:		equ $A04000
00000000 =00A04001                  ym2612_d0:		equ $A04001
00000000 =00A04002                  ym2612_a1:		equ $A04002
00000000 =00A04003                  ym2612_d1:		equ $A04003
00000000                            
00000000 =00A14000                  security_addr:		equ $A14000
00000000                            
00000000                            ; Sound driver constants
00000000 =00000000                  TrackPlaybackControl:	equ 0		; All tracks
00000000 =00000001                  TrackVoiceControl:	equ 1		; All tracks
00000000 =00000002                  TrackTempoDivider:	equ 2		; All tracks
00000000 =00000004                  TrackDataPointer:	equ 4		; All tracks (4 bytes)
00000000 =00000008                  TrackTranspose:		equ 8		; FM/PSG only (sometimes written to as a word, to include TrackVolume)
00000000 =00000009                  TrackVolume:		equ 9		; FM/PSG only
00000000 =0000000A                  TrackAMSFMSPan:		equ $A		; FM/DAC only
00000000 =0000000B                  TrackVoiceIndex:	equ $B		; FM/PSG only
00000000 =0000000C                  TrackVolEnvIndex:	equ $C		; PSG only
00000000 =0000000D                  TrackStackPointer:	equ $D		; All tracks
00000000 =0000000E                  TrackDurationTimeout:	equ $E		; All tracks
00000000 =0000000F                  TrackSavedDuration:	equ $F		; All tracks
00000000 =00000010                  TrackSavedDAC:		equ $10		; DAC only
00000000 =00000010                  TrackFreq:		equ $10		; FM/PSG only (2 bytes)
00000000 =00000012                  TrackNoteTimeout:	equ $12		; FM/PSG only
00000000 =00000013                  TrackNoteTimeoutMaster:equ $13		; FM/PSG only
00000000 =00000014                  TrackModulationPtr:	equ $14		; FM/PSG only (4 bytes)
00000000 =00000018                  TrackModulationWait:	equ $18		; FM/PSG only
00000000 =00000019                  TrackModulationSpeed:	equ $19		; FM/PSG only
00000000 =0000001A                  TrackModulationDelta:	equ $1A		; FM/PSG only
00000000 =0000001B                  TrackModulationSteps:	equ $1B		; FM/PSG only
00000000 =0000001C                  TrackModulationVal:	equ $1C		; FM/PSG only (2 bytes)
00000000 =0000001E                  TrackDetune:		equ $1E		; FM/PSG only
00000000 =0000001F                  TrackPSGNoise:		equ $1F		; PSG only
00000000 =0000001F                  TrackFeedbackAlgo:	equ $1F		; FM only
00000000 =00000020                  TrackVoicePtr:		equ $20		; FM SFX only (4 bytes)
00000000 =00000024                  TrackLoopCounters:	equ $24		; All tracks (multiple bytes)
00000000                            TrackGoSubStack:	equ TrackSz	; All tracks (multiple bytes. This constant won't get to be used because of an optimisation that just uses zTrackSz)
00000000                            
00000000 =00000030                  TrackSz:	equ $30
00000000                            
00000000                            ; VRAM data
00000000 =0000C000                  vram_fg:	equ $C000	; foreground namespace
00000000 =0000E000                  vram_bg:	equ $E000	; background namespace
00000000 =0000F000                  vram_sonic:	equ $F000	; Sonic graphics
00000000 =0000F800                  vram_sprites:	equ $F800	; sprite table
00000000 =0000FC00                  vram_hscroll:	equ $FC00	; horizontal scroll table
00000000                            
00000000                            ; Game modes
00000000                            id_Sega:	equ ptr_GM_Sega-GameModeArray	; $00
00000000                            id_Title:	equ ptr_GM_Title-GameModeArray	; $04
00000000                            id_Demo:	equ ptr_GM_Demo-GameModeArray	; $08
00000000                            id_Level:	equ ptr_GM_Level-GameModeArray	; $0C
00000000                            id_Special:	equ ptr_GM_Special-GameModeArray; $10
00000000                            id_Continue:	equ ptr_GM_Cont-GameModeArray	; $14
00000000                            id_Ending:	equ ptr_GM_Ending-GameModeArray	; $18
00000000                            id_Credits:	equ ptr_GM_Credits-GameModeArray; $1C
00000000                            
00000000                            ; Levels
00000000 =00000000                  id_GHZ:		equ 0
00000000 =00000001                  id_LZ:		equ 1
00000000 =00000002                  id_MZ:		equ 2
00000000 =00000003                  id_SLZ:		equ 3
00000000 =00000004                  id_SYZ:		equ 4
00000000 =00000005                  id_SBZ:		equ 5
00000000 =00000006                  id_EndZ:	equ 6
00000000 =00000007                  id_SS:		equ 7
00000000                            
00000000                            ; colors
00000000 =00000000                  cBlack:		equ $000		; color black
00000000 =00000EEE                  cWhite:		equ $EEE		; color white
00000000 =00000E00                  cBlue:		equ $E00		; color blue
00000000 =000000E0                  cGreen:		equ $0E0		; color green
00000000 =0000000E                  cRed:		equ $00E		; color red
00000000 =000000EE                  cYellow:	equ cGreen+cRed		; color yellow
00000000 =00000EE0                  cAqua:		equ cGreen+cBlue	; color aqua
00000000 =00000E0E                  cMagenta:	equ cBlue+cRed		; color magenta
00000000                            
00000000                            ; Joypad input
00000000 =00000080                  btnStart:	equ %10000000 ; Start button	($80)
00000000 =00000040                  btnA:		equ %01000000 ; A		($40)
00000000 =00000020                  btnC:		equ %00100000 ; C		($20)
00000000 =00000010                  btnB:		equ %00010000 ; B		($10)
00000000 =00000008                  btnR:		equ %00001000 ; Right		($08)
00000000 =00000004                  btnL:		equ %00000100 ; Left		($04)
00000000 =00000002                  btnDn:		equ %00000010 ; Down		($02)
00000000 =00000001                  btnUp:		equ %00000001 ; Up		($01)
00000000 =0000000F                  btnDir:		equ %00001111 ; Any direction	($0F)
00000000 =00000070                  btnABC:		equ %01110000 ; A, B or C	($70)
00000000 =00000007                  bitStart:	equ 7
00000000 =00000006                  bitA:		equ 6
00000000 =00000005                  bitC:		equ 5
00000000 =00000004                  bitB:		equ 4
00000000 =00000003                  bitR:		equ 3
00000000 =00000002                  bitL:		equ 2
00000000 =00000001                  bitDn:		equ 1
00000000 =00000000                  bitUp:		equ 0
00000000                            
00000000                            ; Object variables
00000000 =00000001                  obRender:	equ 1	; bitfield for x/y flip, display mode
00000000 =00000002                  obGfx:		equ 2	; palette line & VRAM setting (2 bytes)
00000000 =00000004                  obMap:		equ 4	; mappings address (4 bytes)
00000000 =00000008                  obX:		equ 8	; x-axis position (2-4 bytes)
00000000 =0000000A                  obScreenY:	equ $A	; y-axis position for screen-fixed items (2 bytes)
00000000 =0000000C                  obY:		equ $C	; y-axis position (2-4 bytes)
00000000 =00000010                  obVelX:		equ $10	; x-axis velocity (2 bytes)
00000000 =00000012                  obVelY:		equ $12	; y-axis velocity (2 bytes)
00000000 =00000020                  obInertia:	equ $20	; potential speed (2 bytes)
00000000 =00000016                  obHeight:	equ $16	; height/2
00000000 =00000017                  obWidth:	equ $17	; width/2
00000000 =00000018                  obPriority:	equ $18	; sprite stack priority -- 0 is front
00000000 =00000014                  obActWid:	equ $14	; action width
00000000 =0000001A                  obFrame:	equ $1A	; current frame displayed
00000000 =0000001B                  obAniFrame:	equ $1B	; current frame in animation script
00000000 =0000001C                  obAnim:		equ $1C	; current animation
00000000 =0000001D                  obNextAni:	equ $1D	; next animation
00000000 =0000001E                  obTimeFrame:	equ $1E	; time to next frame
00000000 =0000001F                  obDelayAni:	equ $1F	; time to delay animation
00000000 =00000020                  obColType:	equ $20	; collision response type
00000000 =00000021                  obColProp:	equ $21	; collision extra property
00000000 =00000022                  obStatus:	equ $22	; orientation or mode
00000000 =00000023                  obRespawnNo:	equ $23	; respawn list index number
00000000 =00000024                  obRoutine:	equ $24	; routine number
00000000 =00000025                  ob2ndRout:	equ $25	; secondary routine number
00000000 =00000026                  obAngle:	equ $26	; angle
00000000 =00000028                  obSubtype:	equ $28	; object subtype
00000000 =00000025                  obSolid:	equ ob2ndRout ; solid status flag
00000000                            
00000000                            ; Object variables used by Sonic
00000000 =00000030                  flashtime:	equ $30	; time between flashes after getting hit
00000000 =00000032                  invtime:	equ $32	; time left for invincibility
00000000 =00000034                  shoetime:	equ $34	; time left for speed shoes
00000000                            
00000000                            ; Object variables (Sonic 2 disassembly nomenclature)
00000000 =00000001                  render_flags:	equ 1	; bitfield for x/y flip, display mode
00000000 =00000002                  art_tile:	equ 2	; palette line & VRAM setting (2 bytes)
00000000 =00000004                  mappings:	equ 4	; mappings address (4 bytes)
00000000 =00000008                  x_pos:		equ 8	; x-axis position (2-4 bytes)
00000000 =0000000C                  y_pos:		equ $C	; y-axis position (2-4 bytes)
00000000 =00000010                  x_vel:		equ $10	; x-axis velocity (2 bytes)
00000000 =00000012                  y_vel:		equ $12	; y-axis velocity (2 bytes)
00000000 =00000016                  y_radius:	equ $16	; height/2
00000000 =00000017                  x_radius:	equ $17	; width/2
00000000 =00000018                  priority:	equ $18	; sprite stack priority -- 0 is front
00000000 =00000014                  width_pixels:	equ $14	; action width
00000000 =0000001A                  mapping_frame:	equ $1A	; current frame displayed
00000000 =0000001B                  anim_frame:	equ $1B	; current frame in animation script
00000000 =0000001C                  anim:		equ $1C	; current animation
00000000 =0000001D                  next_anim:	equ $1D	; next animation
00000000 =0000001E                  anim_frame_duration: equ $1E ; time to next frame
00000000 =00000020                  collision_flags: equ $20 ; collision response type
00000000 =00000021                  collision_property: equ $21 ; collision extra property
00000000 =00000022                  status:		equ $22	; orientation or mode
00000000 =00000023                  respawn_index:	equ $23	; respawn list index number
00000000 =00000024                  routine:	equ $24	; routine number
00000000 =00000025                  routine_secondary: equ $25 ; secondary routine number
00000000 =00000026                  angle:		equ $26	; angle
00000000 =00000028                  subtype:	equ $28	; object subtype
00000000                            
00000000                            ; Animation flags
00000000 =000000FF                  afEnd:		equ $FF	; return to beginning of animation
00000000 =000000FE                  afBack:		equ $FE	; go back (specified number) bytes
00000000 =000000FD                  afChange:	equ $FD	; run specified animation
00000000 =000000FC                  afRoutine:	equ $FC	; increment routine counter
00000000 =000000FB                  afReset:	equ $FB	; reset animation and 2nd object routine counter
00000000 =000000FA                  af2ndRoutine:	equ $FA	; increment 2nd routine counter
00000000                            
00000000                            ; Background music
00000000 =00000081                  bgm__First:	equ $81
00000000                            bgm_GHZ:	equ ((ptr_mus81-MusicIndex)/4)+bgm__First
00000000                            bgm_LZ:		equ ((ptr_mus82-MusicIndex)/4)+bgm__First
00000000                            bgm_MZ:		equ ((ptr_mus83-MusicIndex)/4)+bgm__First
00000000                            bgm_SLZ:	equ ((ptr_mus84-MusicIndex)/4)+bgm__First
00000000                            bgm_SYZ:	equ ((ptr_mus85-MusicIndex)/4)+bgm__First
00000000                            bgm_SBZ:	equ ((ptr_mus86-MusicIndex)/4)+bgm__First
00000000                            bgm_Invincible:	equ ((ptr_mus87-MusicIndex)/4)+bgm__First
00000000                            bgm_ExtraLife:	equ ((ptr_mus88-MusicIndex)/4)+bgm__First
00000000                            bgm_SS:		equ ((ptr_mus89-MusicIndex)/4)+bgm__First
00000000                            bgm_Title:	equ ((ptr_mus8A-MusicIndex)/4)+bgm__First
00000000                            bgm_Ending:	equ ((ptr_mus8B-MusicIndex)/4)+bgm__First
00000000                            bgm_Boss:	equ ((ptr_mus8C-MusicIndex)/4)+bgm__First
00000000                            bgm_FZ:		equ ((ptr_mus8D-MusicIndex)/4)+bgm__First
00000000                            bgm_GotThrough:	equ ((ptr_mus8E-MusicIndex)/4)+bgm__First
00000000                            bgm_GameOver:	equ ((ptr_mus8F-MusicIndex)/4)+bgm__First
00000000                            bgm_Continue:	equ ((ptr_mus90-MusicIndex)/4)+bgm__First
00000000                            bgm_Credits:	equ ((ptr_mus91-MusicIndex)/4)+bgm__First
00000000                            bgm_Drowning:	equ ((ptr_mus92-MusicIndex)/4)+bgm__First
00000000                            bgm_Emerald:	equ ((ptr_mus93-MusicIndex)/4)+bgm__First
00000000                            bgm_Pinch:		equ ((ptr_mus94-MusicIndex)/4)+bgm__First
00000000                            bgm_Seaside:	equ ((ptr_mus95-MusicIndex)/4)+bgm__First
00000000                            bgm_SBZ3:		equ ((ptr_mus96-MusicIndex)/4)+bgm__First
00000000                            bgm_Granada:	equ ((ptr_mus97-MusicIndex)/4)+bgm__First
00000000                            bgm__Last:	equ ((ptr_musend-MusicIndex-4)/4)+bgm__First
00000000                            
00000000                            ; Sound effects
00000000 =000000A0                  sfx__First:	equ $A0
00000000                            sfx_Jump:	equ ((ptr_sndA0-SoundIndex)/4)+sfx__First
00000000                            sfx_Lamppost:	equ ((ptr_sndA1-SoundIndex)/4)+sfx__First
00000000                            sfx_A2:		equ ((ptr_sndA2-SoundIndex)/4)+sfx__First
00000000                            sfx_Death:	equ ((ptr_sndA3-SoundIndex)/4)+sfx__First
00000000                            sfx_Skid:	equ ((ptr_sndA4-SoundIndex)/4)+sfx__First
00000000                            sfx_LRingBox:	equ ((ptr_sndA5-SoundIndex)/4)+sfx__First
00000000                            sfx_HitSpikes:	equ ((ptr_sndA6-SoundIndex)/4)+sfx__First
00000000                            sfx_Push:	equ ((ptr_sndA7-SoundIndex)/4)+sfx__First
00000000                            sfx_SSGoal:	equ ((ptr_sndA8-SoundIndex)/4)+sfx__First
00000000                            sfx_SSItem:	equ ((ptr_sndA9-SoundIndex)/4)+sfx__First
00000000                            sfx_Splash:	equ ((ptr_sndAA-SoundIndex)/4)+sfx__First
00000000                            sfx_FireShield:	equ ((ptr_FireShield-SoundIndex)/4)+sfx__First
00000000                            sfx_HitBoss:	equ ((ptr_sndAC-SoundIndex)/4)+sfx__First
00000000                            sfx_Bubble:	equ ((ptr_sndAD-SoundIndex)/4)+sfx__First
00000000                            sfx_Fireball:	equ ((ptr_sndAE-SoundIndex)/4)+sfx__First
00000000                            sfx_Shield:	equ ((ptr_sndAF-SoundIndex)/4)+sfx__First
00000000                            sfx_Saw:	equ ((ptr_sndB0-SoundIndex)/4)+sfx__First
00000000                            sfx_Electric:	equ ((ptr_sndB1-SoundIndex)/4)+sfx__First
00000000                            sfx_Drown:	equ ((ptr_sndB2-SoundIndex)/4)+sfx__First
00000000                            sfx_Flamethrower:equ ((ptr_sndB3-SoundIndex)/4)+sfx__First
00000000                            sfx_Bumper:	equ ((ptr_sndB4-SoundIndex)/4)+sfx__First
00000000                            sfx_Ring:	equ ((ptr_sndB5-SoundIndex)/4)+sfx__First
00000000                            sfx_SpikesMove:	equ ((ptr_sndB6-SoundIndex)/4)+sfx__First
00000000                            sfx_Rumbling:	equ ((ptr_sndB7-SoundIndex)/4)+sfx__First
00000000                            sfx_B8:		equ ((ptr_sndB8-SoundIndex)/4)+sfx__First
00000000                            sfx_Collapse:	equ ((ptr_sndB9-SoundIndex)/4)+sfx__First
00000000                            sfx_SSGlass:	equ ((ptr_sndBA-SoundIndex)/4)+sfx__First
00000000                            sfx_Door:	equ ((ptr_sndBB-SoundIndex)/4)+sfx__First
00000000                            sfx_Teleport:	equ ((ptr_sndBC-SoundIndex)/4)+sfx__First
00000000                            sfx_ChainStomp:	equ ((ptr_sndBD-SoundIndex)/4)+sfx__First
00000000                            sfx_Roll:	equ ((ptr_sndBE-SoundIndex)/4)+sfx__First
00000000                            sfx_Continue:	equ ((ptr_sndBF-SoundIndex)/4)+sfx__First
00000000                            sfx_Basaran:	equ ((ptr_sndC0-SoundIndex)/4)+sfx__First
00000000                            sfx_BreakItem:	equ ((ptr_sndC1-SoundIndex)/4)+sfx__First
00000000                            sfx_Warning:	equ ((ptr_sndC2-SoundIndex)/4)+sfx__First
00000000                            sfx_GiantRing:	equ ((ptr_sndC3-SoundIndex)/4)+sfx__First
00000000                            sfx_Bomb:	equ ((ptr_sndC4-SoundIndex)/4)+sfx__First
00000000                            sfx_Cash:	equ ((ptr_sndC5-SoundIndex)/4)+sfx__First
00000000                            sfx_RingLoss:	equ ((ptr_sndC6-SoundIndex)/4)+sfx__First
00000000                            sfx_ChainRise:	equ ((ptr_sndC7-SoundIndex)/4)+sfx__First
00000000                            sfx_Burning:	equ ((ptr_sndC8-SoundIndex)/4)+sfx__First
00000000                            sfx_Bonus:	equ ((ptr_sndC9-SoundIndex)/4)+sfx__First
00000000                            sfx_EnterSS:	equ ((ptr_sndCA-SoundIndex)/4)+sfx__First
00000000                            sfx_WallSmash:	equ ((ptr_sndCB-SoundIndex)/4)+sfx__First
00000000                            sfx_Spring:	equ ((ptr_sndCC-SoundIndex)/4)+sfx__First
00000000                            sfx_Switch:	equ ((ptr_sndCD-SoundIndex)/4)+sfx__First
00000000                            sfx_RingLeft:	equ ((ptr_sndCE-SoundIndex)/4)+sfx__First
00000000                            sfx_Signpost:	equ ((ptr_sndCF-SoundIndex)/4)+sfx__First
00000000                            sfx__Last:	equ ((ptr_sndend-SoundIndex-4)/4)+sfx__First
00000000                            
00000000                            ; Special sound effects
00000000 =000000D0                  spec__First:	equ $D0
00000000                            sfx_Waterfall:	equ ((ptr_sndD0-SpecSoundIndex)/4)+spec__First
00000000                            sfx_LightningShield:	equ ((ptr_sndD1-SpecSoundIndex)/4)+spec__First
00000000                            sfx_Peelout:	equ ((ptr_sndD2-SpecSoundIndex)/4)+spec__First
00000000                            sfx_PeeloutRelease:	equ ((ptr_sndD3-SpecSoundIndex)/4)+spec__First
00000000                            sfx_PeeloutStop:	equ ((ptr_sndD4-SpecSoundIndex)/4)+spec__First
00000000                            sfx_Spindash:	equ ((ptr_sndD5-SpecSoundIndex)/4)+spec__First
00000000                            spec__Last:	equ ((ptr_specend-SpecSoundIndex-4)/4)+spec__First
00000000                            
00000000 =000000E0                  flg__First:	equ $E0
00000000                            bgm_Fade:	equ ((ptr_flgE0-Sound_ExIndex)/4)+flg__First
00000000                            sfx_Sega:	equ ((ptr_flgE1-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Speedup:	equ ((ptr_flgE2-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Slowdown:	equ ((ptr_flgE3-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Stop:	equ ((ptr_flgE4-Sound_ExIndex)/4)+flg__First
00000000                            flg__Last:	equ ((ptr_flgend-Sound_ExIndex-4)/4)+flg__First
00000000                            
00000000                            ; Sonic frame IDs
00000000 =00000000                  fr_Null:	equ 0
00000000 =00000001                  fr_Stand:	equ 1
00000000 =00000002                  fr_Blink:	equ 2
00000000 =00000003                  fr_Wait1:	equ 3
00000000 =00000004                  fr_Wait2:	equ 4
00000000 =00000005                  fr_Wait3:	equ 5
00000000 =00000006                  fr_Wait4:	equ 6
00000000 =00000007                  fr_Wait5:	equ 7
00000000 =00000008                  fr_Wait6:	equ 8
00000000 =00000009                  fr_Wait7:	equ 9
00000000 =0000000A                  fr_Wait8:	equ $A
00000000 =0000000B                  fr_Wait9:	equ $B
00000000 =0000000C                  fr_LookUp1:	equ $C
00000000 =0000000D                  fr_LookUp2:	equ $D
00000000 =0000000E                  fr_Walk11:	equ $E
00000000 =0000000F                  fr_Walk12:	equ $F
00000000 =00000010                  fr_Walk13:	equ $10
00000000 =00000011                  fr_Walk14:	equ $11
00000000 =00000012                  fr_Walk15:	equ $12
00000000 =00000013                  fr_Walk16:	equ $13
00000000 =00000014                  fr_Walk17:	equ $14
00000000 =00000015                  fr_Walk18:	equ $15
00000000 =00000016                  fr_Walk21:	equ $16
00000000 =00000017                  fr_Walk22:	equ $17
00000000 =00000018                  fr_Walk23:	equ $18
00000000 =00000019                  fr_Walk24:	equ $19
00000000 =0000001A                  fr_Walk25:	equ $1A
00000000 =0000001B                  fr_Walk26:	equ $1B
00000000 =0000001C                  fr_Walk27:	equ $1C
00000000 =0000001D                  fr_Walk28:	equ $1D
00000000 =0000001E                  fr_Walk31:	equ $1E
00000000 =0000001F                  fr_Walk32:	equ $1F
00000000 =00000020                  fr_Walk33:	equ $20
00000000 =00000021                  fr_Walk34:	equ $21
00000000 =00000022                  fr_Walk35:	equ $22
00000000 =00000023                  fr_Walk36:	equ $23
00000000 =00000024                  fr_Walk37:	equ $24
00000000 =00000025                  fr_Walk38:	equ $25
00000000 =00000026                  fr_Walk41:	equ $26
00000000 =00000027                  fr_Walk42:	equ $27
00000000 =00000028                  fr_Walk43:	equ $28
00000000 =00000029                  fr_Walk44:	equ $29
00000000 =0000002A                  fr_Walk45:	equ $2A
00000000 =0000002B                  fr_Walk46:	equ $2B
00000000 =0000002C                  fr_Walk47:	equ $2C
00000000 =0000002D                  fr_Walk48:	equ $2D
00000000 =0000002E                  fr_Run11:	equ $2E
00000000 =0000002F                  fr_Run12:	equ $2F
00000000 =00000030                  fr_Run13:	equ $30
00000000 =00000031                  fr_Run14:	equ $31
00000000 =00000032                  fr_Run15:	equ $32
00000000 =00000033                  fr_Run16:	equ $33
00000000 =00000034                  fr_Run17:	equ $34
00000000 =00000035                  fr_Run18:	equ $35
00000000 =00000036                  fr_Run21:	equ $36
00000000 =00000037                  fr_Run22:	equ $37
00000000 =00000038                  fr_Run23:	equ $38
00000000 =00000039                  fr_Run24:	equ $39
00000000 =0000003A                  fr_Run25:	equ $3A
00000000 =0000003B                  fr_Run26:	equ $3B
00000000 =0000003C                  fr_Run27:	equ $3C
00000000 =0000003D                  fr_Run28:	equ $3D
00000000 =0000003E                  fr_Run31:	equ $3E
00000000 =0000003F                  fr_Run32:	equ $3F
00000000 =00000040                  fr_Run33:	equ $40
00000000 =00000041                  fr_Run34:	equ $41
00000000 =00000042                  fr_Run35:	equ $42
00000000 =00000043                  fr_Run36:	equ $43
00000000 =00000044                  fr_Run37:	equ $44
00000000 =00000045                  fr_Run38:	equ $45
00000000 =00000046                  fr_Run41:	equ $46
00000000 =00000047                  fr_Run42:	equ $47
00000000 =00000048                  fr_Run43:	equ $48
00000000 =00000049                  fr_Run44:	equ $49
00000000 =0000004A                  fr_Run45:	equ $4A
00000000 =0000004B                  fr_Run46:	equ $4B
00000000 =0000004C                  fr_Run47:	equ $4C
00000000 =0000004D                  fr_Run48:	equ $4D
00000000 =0000004E                  fr_peelout11:	equ $4E
00000000 =0000004F                  fr_peelout12:	equ $4F
00000000 =00000050                  fr_peelout13:	equ $50
00000000 =00000051                  fr_peelout14:	equ $51
00000000 =00000052                  fr_peelout21:	equ $52
00000000 =00000053                  fr_peelout22:	equ $53
00000000 =00000054                  fr_peelout23:	equ $54
00000000 =00000055                  fr_peelout24:	equ $55
00000000 =00000056                  fr_peelout31:	equ $56
00000000 =00000057                  fr_peelout32:	equ $57
00000000 =00000058                  fr_peelout33:	equ $58
00000000 =00000059                  fr_peelout34:	equ $59
00000000 =0000005A                  fr_peelout41:	equ $5A
00000000 =0000005B                  fr_peelout42:	equ $5B
00000000 =0000005C                  fr_peelout43:	equ $5C
00000000 =0000005D                  fr_peelout44:	equ $5D
00000000 =0000005E                  fr_Roll1:	equ $5E
00000000 =00000060                  fr_Roll2:	equ $60
00000000 =00000062                  fr_Roll3:	equ $62
00000000 =00000064                  fr_Roll4:	equ $64
00000000 =00000066                  fr_Roll5:	equ $66
00000000 =0000005F                  fr_Roll6:	equ $5F
00000000 =00000061                  fr_Roll7:	equ $61
00000000 =00000063                  fr_Roll8:	equ $63
00000000 =00000065                  fr_Roll9:	equ $65
00000000 =00000067                  fr_Warp1:	equ $67
00000000 =00000068                  fr_Warp2:	equ $68
00000000 =00000069                  fr_Warp3:	equ $69
00000000 =0000006A                  fr_Warp4:	equ $6A
00000000 =0000006B                  fr_Stop1:	equ $6B
00000000 =0000006C                  fr_Stop2:	equ $6C
00000000 =0000006D                  fr_Stop3:	equ $6D
00000000 =0000006E                  fr_Stop4:	equ $6E
00000000 =0000006F                  fr_Duck3:	equ $6F
00000000 =00000070                  fr_Duck2:	equ $70
00000000 =00000071                  fr_Duck:	equ $71
00000000 =00000072                  fr_Balance1:	equ $72
00000000 =00000073                  fr_Balance2:	equ $73
00000000 =00000074                  fr_Balance3:	equ $74
00000000 =00000075                  fr_Balance4:	equ $75
00000000 =00000076                  fr_Balance5:	equ $76
00000000 =00000077                  fr_Blank:		equ $77
00000000 =00000078                  fr_VHang1:		equ $78
00000000 =00000079                  fr_VHang2:		equ $79
00000000 =0000007A                  fr_VHang3:		equ $7A
00000000                            
00000000 =0000007C                  fr_Float1:	equ $7C
00000000 =0000007E                  fr_Float2:	equ $7E
00000000 =00000081                  fr_Float3:	equ $81
00000000 =00000082                  fr_Float4:	equ $82
00000000 =00000080                  fr_Float5:	equ $80
00000000 =0000007B                  fr_Float6:	equ $7B
00000000 =0000007D                  fr_float7:	equ $7D
00000000 =0000007F                  fr_float8:	equ $7F
00000000 =00000083                  fr_Spring:	equ $83
00000000 =00000084                  fr_Spring2:	equ $84
00000000 =00000085                  fr_Hang1:	equ $85
00000000 =00000086                  fr_Hang2:	equ $86
00000000 =00000087                  fr_Leap1:	equ $87
00000000 =00000088                  fr_Leap2:	equ $88
00000000 =00000089                  fr_Push1:	equ $89
00000000 =0000008A                  fr_Push2:	equ $8A
00000000 =0000008B                  fr_Push3:	equ $8B
00000000 =0000008C                  fr_Push4:	equ $8C
00000000 =0000008D                  fr_Push5:	equ $8D
00000000 =0000008E                  fr_Push6:	equ $8E
00000000 =0000008F                  fr_Push7:	equ $8F
00000000 =00000090                  fr_Push8:	equ $90
00000000 =00000091                  fr_Surf:	equ $91
00000000 =00000092                  fr_Burnt:	equ $92
00000000 =00000093                  fr_Drown:	equ $93
00000000 =00000094                  fr_Death:	equ $94
00000000 =00000095                  fr_GetAir:	equ $95
00000000 =00000096                  fr_Injury:	equ $96
00000000 =00000097                  fr_WaterSlide:	equ $97
00000000 =00000098                  fr_skele1:	equ $98
00000000 =00000099                  fr_skele2:	equ $99
00000000 =0000009A                  fr_skele3:	equ $9A
00000000 =0000009B                  fr_Spindash1	equ $9B
00000000 =0000009C                  fr_Spindash2	equ $9C
00000000 =0000009D                  fr_Spindash3	equ $9D
00000000 =0000009E                  fr_Spindash4	equ $9E
00000000 =0000009F                  fr_Spindash5	equ $9F
00000000 =000000A0                  fr_Spindash6	equ $A0
00000000 =000000A0                  fr_Spindash6	equ $A0
00000000                            	include	"Variables.asm"
00000000                            ; Variables (v) and Flags (f)
00000000                            
00000000 =FFFFFC00                  v_regbuffer:	equ $FFFFFC00	; stores registers d0-a7 during an error event ($40 bytes)
00000000 =FFFFFC40                  v_spbuffer:	equ $FFFFFC40	; stores most recent sp address (4 bytes)
00000000 =FFFFFC44                  v_errortype:	equ $FFFFFC44	; error type
00000000                            
00000000 =00FF0000                  v_256x256:	equ   $FF0000	; 256x256 tile mappings ($A400 bytes)
00000000 =FFFFA400                  v_lvllayout:	equ $FFFFA400	; level and background layouts ($400 bytes)
00000000 =FFFFA800                  v_bgscroll_buffer:	equ	$FFFFA800	; background scroll buffer ($200 bytes)
00000000 =FFFFAA00                  v_ngfx_buffer:	equ $FFFFAA00	; Nemesis graphics decompression buffer ($200 bytes)
00000000 =FFFFAC00                  v_spritequeue:	equ $FFFFAC00	; sprite display queue, in order of priority ($400 bytes)
00000000 =FFFFB000                  v_16x16:		equ $FFFFB000	; 16x16 tile mappings
00000000 =FFFFC800                  VDP_Command_Buffer:	equ $FFFFC800
00000000                            
00000000 =FFFFC8FC                  VDP_Command_Buffer_Slot:equ VDP_Command_Buffer+7*$12*2
00000000 =FFFFC800                  v_sgfx_buffer:	equ $FFFFC800	; buffered Sonic graphics ($17 cells) ($2E0 bytes)
00000000 =FFFFCB00                  v_tracksonic:	equ $FFFFCB00	; position tracking data for Sonic ($100 bytes)
00000000 =FFFFCC00                  v_hscrolltablebuffer:	equ $FFFFCC00 ; scrolling table data (actually $380 bytes, but $400 is reserved for it)
00000000 =FFFFD000                  v_objspace:	equ $FFFFD000	; object variable space ($40 bytes per object) ($2000 bytes)
00000000 =FFFFD000                  v_player:	equ v_objspace	; object variable space for Sonic ($40 bytes)
00000000 =FFFFD800                  v_lvlobjspace:	equ $FFFFD800	; level object variable space ($1800 bytes)
00000000 =FFFFF015                  v_palmuscounter:	equ $FFFFF015
00000000 =FFFFF000                  v_snddriver_ram:	equ $FFFFF000 ; start of RAM for the sound driver data ($5C0 bytes)
00000000                            
00000000                            ; =================================================================================
00000000                            ; From here on, until otherwise stated, all offsets are relative to v_snddriver_ram
00000000                            ; =================================================================================
00000000 =00000000                  v_startofvariables:	equ $000
00000000 =00000000                  v_sndprio:		equ $000	; sound priority (priority of new music/SFX must be higher or equal to this value or it won't play; bit 7 of priority being set prevents this value from changing)
00000000 =00000001                  v_main_tempo_timeout:	equ $001	; Counts down to zero; when zero, resets to next value and delays song by 1 frame
00000000 =00000002                  v_main_tempo:		equ $002	; Used for music only
00000000 =00000003                  f_pausemusic:		equ $003	; flag set to stop music when paused
00000000 =00000004                  v_fadeout_counter:	equ $004
00000000                            
00000000 =00000006                  v_fadeout_delay:	equ $006
00000000 =00000007                  v_communication_byte:	equ $007	; used in Ristar to sync with a boss' attacks; unused here
00000000 =00000008                  f_updating_dac:		equ $008	; $80 if updating DAC, $00 otherwise
00000000 =00000009                  v_sound_id:		equ $009	; sound or music copied from below
00000000 =0000000A                  v_soundqueue0:		equ $00A	; sound or music to play
00000000 =0000000B                  v_soundqueue1:		equ $00B	; special sound to play
00000000 =0000000C                  v_soundqueue2:		equ $00C	; unused sound to play
00000000                            
00000000 =0000000E                  f_voice_selector:	equ $00E	; $00 = use music voice pointer; $40 = use special voice pointer; $80 = use track voice pointer
00000000                            
00000000 =00000018                  v_voice_ptr:		equ $018	; voice data pointer (4 bytes)
00000000                            
00000000 =00000020                  v_special_voice_ptr:	equ $020	; voice data pointer for special SFX ($D0-$DF) (4 bytes)
00000000                            
00000000 =00000024                  f_fadein_flag:		equ $024	; Flag for fade in
00000000 =00000025                  v_fadein_delay:		equ $025
00000000 =00000026                  v_fadein_counter:	equ $026	; Timer for fade in/out
00000000 =00000027                  f_1up_playing:		equ $027	; flag indicating 1-up song is playing
00000000 =00000028                  v_tempo_mod:		equ $028	; music - tempo modifier
00000000 =00000029                  v_speeduptempo:		equ $029	; music - tempo modifier with speed shoes
00000000 =0000002A                  f_speedup:		equ $02A	; flag indicating whether speed shoes tempo is on ($80) or off ($00)
00000000 =0000002B                  v_ring_speaker:		equ $02B	; which speaker the "ring" sound is played in (00 = right; 01 = left)
00000000 =0000002C                  f_push_playing:		equ $02C	; if set, prevents further push sounds from playing
00000000                            
00000000 =00000040                  v_music_track_ram:	equ $040	; Start of music RAM
00000000                            
00000000 =00000040                  v_music_fmdac_tracks:	equ v_music_track_ram+TrackSz*0
00000000 =00000040                  v_music_dac_track:	equ v_music_fmdac_tracks+TrackSz*0
00000000 =00000070                  v_music_fm_tracks:	equ v_music_fmdac_tracks+TrackSz*1
00000000 =00000070                  v_music_fm1_track:	equ v_music_fm_tracks+TrackSz*0
00000000 =000000A0                  v_music_fm2_track:	equ v_music_fm_tracks+TrackSz*1
00000000 =000000D0                  v_music_fm3_track:	equ v_music_fm_tracks+TrackSz*2
00000000 =00000100                  v_music_fm4_track:	equ v_music_fm_tracks+TrackSz*3
00000000 =00000130                  v_music_fm5_track:	equ v_music_fm_tracks+TrackSz*4
00000000 =00000160                  v_music_fm6_track:	equ v_music_fm_tracks+TrackSz*5
00000000 =00000190                  v_music_fm_tracks_end:	equ v_music_fm_tracks+TrackSz*6
00000000 =00000190                  v_music_fmdac_tracks_end:	equ v_music_fm_tracks_end
00000000 =00000190                  v_music_psg_tracks:	equ v_music_fmdac_tracks_end
00000000 =00000190                  v_music_psg1_track:	equ v_music_psg_tracks+TrackSz*0
00000000 =000001C0                  v_music_psg2_track:	equ v_music_psg_tracks+TrackSz*1
00000000 =000001F0                  v_music_psg3_track:	equ v_music_psg_tracks+TrackSz*2
00000000 =00000220                  v_music_psg_tracks_end:	equ v_music_psg_tracks+TrackSz*3
00000000 =00000220                  v_music_track_ram_end:	equ v_music_psg_tracks_end
00000000                            
00000000 =00000220                  v_sfx_track_ram:	equ v_music_track_ram_end	; Start of SFX RAM, straight after the end of music RAM
00000000                            
00000000 =00000220                  v_sfx_fm_tracks:	equ v_sfx_track_ram+TrackSz*0
00000000 =00000220                  v_sfx_fm3_track:	equ v_sfx_fm_tracks+TrackSz*0
00000000 =00000250                  v_sfx_fm4_track:	equ v_sfx_fm_tracks+TrackSz*1
00000000 =00000280                  v_sfx_fm5_track:	equ v_sfx_fm_tracks+TrackSz*2
00000000 =000002B0                  v_sfx_fm_tracks_end:	equ v_sfx_fm_tracks+TrackSz*3
00000000 =000002B0                  v_sfx_psg_tracks:	equ v_sfx_fm_tracks_end
00000000 =000002B0                  v_sfx_psg1_track:	equ v_sfx_psg_tracks+TrackSz*0
00000000 =000002E0                  v_sfx_psg2_track:	equ v_sfx_psg_tracks+TrackSz*1
00000000 =00000310                  v_sfx_psg3_track:	equ v_sfx_psg_tracks+TrackSz*2
00000000 =00000340                  v_sfx_psg_tracks_end:	equ v_sfx_psg_tracks+TrackSz*3
00000000 =00000340                  v_sfx_track_ram_end:	equ v_sfx_psg_tracks_end
00000000                            
00000000 =00000340                  v_spcsfx_track_ram:	equ v_sfx_track_ram_end	; Start of special SFX RAM, straight after the end of SFX RAM
00000000                            
00000000 =00000340                  v_spcsfx_fm4_track:	equ v_spcsfx_track_ram+TrackSz*0
00000000 =00000370                  v_spcsfx_psg3_track:	equ v_spcsfx_track_ram+TrackSz*1
00000000 =000003A0                  v_spcsfx_track_ram_end:	equ v_spcsfx_track_ram+TrackSz*2
00000000                            
00000000 =000003A0                  v_1up_ram_copy:		equ v_spcsfx_track_ram_end
00000000                            
00000000                            ; =================================================================================
00000000                            ; From here on, no longer relative to sound driver RAM
00000000                            ; =================================================================================
00000000                            
00000000 =FFFFF600                  v_gamemode:	equ $FFFFF600	; game mode (00=Sega; 04=Title; 08=Demo; 0C=Level; 10=SS; 14=Cont; 18=End; 1C=Credit; +8C=PreLevel)
00000000 =FFFFF602                  v_jpadhold2:	equ $FFFFF602	; joypad input - held, duplicate
00000000 =FFFFF603                  v_jpadpress2:	equ $FFFFF603	; joypad input - pressed, duplicate
00000000 =FFFFF604                  v_jpadhold1:	equ $FFFFF604	; joypad input - held
00000000 =FFFFF605                  v_jpadpress1:	equ $FFFFF605	; joypad input - pressed
00000000                            
00000000 =FFFFF60C                  v_vdp_buffer1:	equ $FFFFF60C	; VDP instruction buffer (2 bytes)
00000000                            
00000000 =FFFFF614                  v_demolength:	equ $FFFFF614	; the length of a demo in frames (2 bytes)
00000000 =FFFFF616                  v_scrposy_dup:	equ $FFFFF616	; screen position y (duplicate) (2 bytes)
00000000 =FFFFF618                  v_bgscrposy_dup:	equ $FFFFF618	; background screen position y (duplicate) (2 bytes)
00000000 =FFFFF61A                  v_scrposx_dup:	equ $FFFFF61A	; screen position x (duplicate) (2 bytes)
00000000 =FFFFF61C                  v_bgscreenposx_dup_unused:	equ $FFFFF61C	; background screen position x (duplicate) (2 bytes)
00000000 =FFFFF61E                  v_bg3screenposy_dup_unused:	equ $FFFFF61E	; (2 bytes)
00000000 =FFFFF620                  v_bg3screenposx_dup_unused:	equ $FFFFF620	; (2 bytes)
00000000                            
00000000 =FFFFF624                  v_hbla_hreg:	equ $FFFFF624	; VDP H.interrupt register buffer (8Axx) (2 bytes)
00000000 =FFFFF625                  v_hbla_line:	equ $FFFFF625	; screen line where water starts and palette is changed by HBlank
00000000 =FFFFF626                  v_pfade_start:	equ $FFFFF626	; palette fading - start position in bytes
00000000 =FFFFF627                  v_pfade_size:	equ $FFFFF627	; palette fading - number of colors
00000000 =FFFFF62A                  v_vbla_routine:	equ $FFFFF62A	; VBlank - routine counter
00000000 =FFFFF62C                  v_spritecount:	equ $FFFFF62C	; number of sprites on-screen
00000000 =FFFFF632                  v_pcyc_num:	equ $FFFFF632	; palette cycling - current reference number (2 bytes)
00000000 =FFFFF634                  v_pcyc_time:	equ $FFFFF634	; palette cycling - time until the next change (2 bytes)
00000000 =FFFFF636                  v_random:	equ $FFFFF636	; pseudo random number buffer (4 bytes)
00000000 =FFFFF63A                  f_pause:		equ $FFFFF63A	; flag set to pause the game (2 bytes)
00000000 =FFFFF640                  v_vdp_buffer2:	equ $FFFFF640	; VDP instruction buffer (2 bytes)
00000000 =FFFFF644                  f_hbla_pal:	equ $FFFFF644	; flag set to change palette during HBlank (0000 = no; 0001 = change) (2 bytes)
00000000 =FFFFF646                  v_waterpos1:	equ $FFFFF646	; water height, actual (2 bytes)
00000000 =FFFFF648                  v_waterpos2:	equ $FFFFF648	; water height, ignoring sway (2 bytes)
00000000 =FFFFF64A                  v_waterpos3:	equ $FFFFF64A	; water height, next target (2 bytes)
00000000 =FFFFF64C                  f_water:		equ $FFFFF64C	; flag set for water
00000000 =FFFFF64D                  v_wtr_routine:	equ $FFFFF64D	; water event - routine counter
00000000 =FFFFF64E                  f_wtr_state:	equ $FFFFF64E	; water palette state when water is above/below the screen (00 = partly/all dry; 01 = all underwater)
00000000                            
00000000 =FFFFF650                  v_pal_buffer:	equ $FFFFF650	; palette data buffer (used for palette cycling) ($30 bytes)
00000000 =FFFFF680                  v_plc_buffer:	equ $FFFFF680	; pattern load cues buffer (maximum $10 PLCs) ($60 bytes)
00000000 =FFFFF6E0                  v_ptrnemcode:	equ $FFFFF6E0	; pointer for nemesis decompression code ($1502 or $150C) (4 bytes)
00000000                            
00000000 =FFFFF6F8                  f_plc_execute:	equ $FFFFF6F8	; flag set for pattern load cue execution (2 bytes)
00000000                            
00000000 =FFFFF700                  v_screenposx:	equ $FFFFF700	; screen position x (2 bytes)
00000000 =FFFFF704                  v_screenposy:	equ $FFFFF704	; screen position y (2 bytes)
00000000 =FFFFF708                  v_bgscreenposx:	equ $FFFFF708	; background screen position x (2 bytes)
00000000 =FFFFF70C                  v_bgscreenposy:	equ $FFFFF70C	; background screen position y (2 bytes)
00000000 =FFFFF710                  v_bg2screenposx:	equ $FFFFF710	; 2 bytes
00000000 =FFFFF714                  v_bg2screenposy:	equ $FFFFF714	; 2 bytes
00000000 =FFFFF718                  v_bg3screenposx:	equ $FFFFF718	; 2 bytes
00000000 =FFFFF71C                  v_bg3screenposy:	equ $FFFFF71C	; 2 bytes
00000000                            
00000000 =FFFFF720                  v_limitleft1:	equ $FFFFF720	; left level boundary (2 bytes)
00000000 =FFFFF722                  v_limitright1:	equ $FFFFF722	; right level boundary (2 bytes)
00000000 =FFFFF724                  v_limittop1:	equ $FFFFF724	; top level boundary (2 bytes)
00000000 =FFFFF726                  v_limitbtm1:	equ $FFFFF726	; bottom level boundary (2 bytes)
00000000 =FFFFF728                  v_limitleft2:	equ $FFFFF728	; left level boundary (2 bytes)
00000000 =FFFFF72A                  v_limitright2:	equ $FFFFF72A	; right level boundary (2 bytes)
00000000 =FFFFF72C                  v_limittop2:	equ $FFFFF72C	; top level boundary (2 bytes)
00000000 =FFFFF72E                  v_limitbtm2:	equ $FFFFF72E	; bottom level boundary (2 bytes)
00000000                            
00000000 =FFFFF732                  v_limitleft3:	equ $FFFFF732	; left level boundary, at the end of an act (2 bytes)
00000000                            
00000000 =FFFFF73A                  v_scrshiftx:	equ $FFFFF73A	; x-screen shift (new - last) * $100
00000000 =FFFFF73C                  v_scrshifty:	equ $FFFFF73C	; y-screen shift (new - last) * $100
00000000                            
00000000 =FFFFF73E                  v_lookshift:	equ $FFFFF73E	; screen shift when Sonic looks up/down (2 bytes)
00000000 =FFFFF742                  v_dle_routine:	equ $FFFFF742	; dynamic level event - routine counter
00000000 =FFFFF744                  f_nobgscroll:	equ $FFFFF744	; flag set to cancel background scrolling
00000000                            
00000000 =FFFFF74A                  v_fg_xblock:	equ	$FFFFF74A	; foreground x-block parity (for redraw)
00000000 =FFFFF74B                  v_fg_yblock:	equ	$FFFFF74B	; foreground y-block parity (for redraw)
00000000 =FFFFF74C                  v_bg1_xblock:	equ	$FFFFF74C	; background x-block parity (for redraw)
00000000 =FFFFF74D                  v_bg1_yblock:	equ	$FFFFF74D	; background y-block parity (for redraw)
00000000 =FFFFF74E                  v_bg2_xblock:	equ	$FFFFF74E	; secondary background x-block parity (for redraw)
00000000 =FFFFF74F                  v_bg2_yblock:	equ	$FFFFF74F	; secondary background y-block parity (unused)
00000000 =FFFFF750                  v_bg3_xblock:	equ	$FFFFF750	; teritary background x-block parity (for redraw)
00000000 =FFFFF751                  v_bg3_yblock:	equ	$FFFFF751	; teritary background y-block parity (unused)
00000000                            
00000000 =FFFFF754                  v_fg_scroll_flags:	equ $FFFFF754	; screen redraw flags for foreground
00000000 =FFFFF756                  v_bg1_scroll_flags:	equ $FFFFF756	; screen redraw flags for background 1
00000000 =FFFFF758                  v_bg2_scroll_flags:	equ $FFFFF758	; screen redraw flags for background 2
00000000 =FFFFF75A                  v_bg3_scroll_flags:	equ $FFFFF75A	; screen redraw flags for background 3
00000000 =FFFFF75C                  f_bgscrollvert:	equ $FFFFF75C	; flag for vertical background scrolling
00000000 =FFFFF760                  v_sonspeedmax:	equ $FFFFF760	; Sonic's maximum speed (2 bytes)
00000000 =FFFFF762                  v_sonspeedacc:	equ $FFFFF762	; Sonic's acceleration (2 bytes)
00000000 =FFFFF764                  v_sonspeeddec:	equ $FFFFF764	; Sonic's deceleration (2 bytes)
00000000 =FFFFF766                  v_sonframenum:	equ $FFFFF766	; frame to display for Sonic
00000000 =FFFFF767                  f_sonframechg:	equ $FFFFF767	; flag set to update Sonic's sprite frame
00000000 =FFFFF768                  v_anglebuffer:	equ $FFFFF768	; angle of collision block that Sonic or object is standing on
00000000                            
00000000 =FFFFF76C                  v_opl_routine:	equ $FFFFF76C	; ObjPosLoad - routine counter
00000000 =FFFFF76E                  v_opl_screen:	equ $FFFFF76E	; ObjPosLoad - screen variable
00000000 =FFFFF770                  v_opl_data:	equ $FFFFF770	; ObjPosLoad - data buffer ($10 bytes)
00000000                            
00000000 =FFFFF780                  v_ssangle:	equ $FFFFF780	; Special Stage angle (2 bytes)
00000000 =FFFFF782                  v_ssrotate:	equ $FFFFF782	; Special Stage rotation speed (2 bytes)
00000000 =FFFFF790                  v_btnpushtime1:	equ $FFFFF790	; button push duration - in level (2 bytes)
00000000 =FFFFF792                  v_btnpushtime2:	equ $FFFFF792	; button push duration - in demo (2 bytes)
00000000 =FFFFF794                  v_palchgspeed:	equ $FFFFF794	; palette fade/transition speed (0 is fastest) (2 bytes)
00000000 =FFFFF796                  v_collindex:	equ $FFFFF796	; ROM address for collision index of current level (4 bytes)
00000000 =FFFFF79A                  v_palss_num:	equ $FFFFF79A	; palette cycling in Special Stage - reference number (2 bytes)
00000000 =FFFFF79C                  v_palss_time:	equ $FFFFF79C	; palette cycling in Special Stage - time until next change (2 bytes)
00000000                            
00000000 =FFFFF7A0                  v_camera_pan:	equ $FFFFF7A0    ; Extended Camera - how far the camera/view is panned to the left or right of Sonic (2 bytes)
00000000                            
00000000 =FFFFF7A4                  v_obj31ypos:	equ $FFFFF7A4	; y-position of object 31 (MZ stomper) (2 bytes)
00000000 =FFFFF7A7                  v_bossstatus:	equ $FFFFF7A7	; status of boss and prison capsule (01 = boss defeated; 02 = prison opened)
00000000 =FFFFF7A8                  v_trackpos:	equ $FFFFF7A8	; position tracking reference number (2 bytes)
00000000 =FFFFF7A9                  v_trackbyte:	equ $FFFFF7A9	; low byte for position tracking
00000000 =FFFFF7AA                  f_lockscreen:	equ $FFFFF7AA	; flag set to lock screen during bosses
00000000 =FFFFF7AC                  v_256loop1:	equ $FFFFF7AC	; 256x256 level tile which contains a loop (GHZ/SLZ)
00000000 =FFFFF7AD                  v_256loop2:	equ $FFFFF7AD	; 256x256 level tile which contains a loop (GHZ/SLZ)
00000000 =FFFFF7AE                  v_256roll1:	equ $FFFFF7AE	; 256x256 level tile which contains a roll tunnel (GHZ)
00000000 =FFFFF7AF                  v_256roll2:	equ $FFFFF7AF	; 256x256 level tile which contains a roll tunnel (GHZ)
00000000 =FFFFF7B0                  v_lani0_frame:	equ $FFFFF7B0	; level graphics animation 0 - current frame
00000000 =FFFFF7B1                  v_lani0_time:	equ $FFFFF7B1	; level graphics animation 0 - time until next frame
00000000 =FFFFF7B2                  v_lani1_frame:	equ $FFFFF7B2	; level graphics animation 1 - current frame
00000000 =FFFFF7B3                  v_lani1_time:	equ $FFFFF7B3	; level graphics animation 1 - time until next frame
00000000 =FFFFF7B4                  v_lani2_frame:	equ $FFFFF7B4	; level graphics animation 2 - current frame
00000000 =FFFFF7B5                  v_lani2_time:	equ $FFFFF7B5	; level graphics animation 2 - time until next frame
00000000 =FFFFF7B6                  v_lani3_frame:	equ $FFFFF7B6	; level graphics animation 3 - current frame
00000000 =FFFFF7B7                  v_lani3_time:	equ $FFFFF7B7	; level graphics animation 3 - time until next frame
00000000 =FFFFF7B8                  v_lani4_frame:	equ $FFFFF7B8	; level graphics animation 4 - current frame
00000000 =FFFFF7B9                  v_lani4_time:	equ $FFFFF7B9	; level graphics animation 4 - time until next frame
00000000 =FFFFF7BA                  v_lani5_frame:	equ $FFFFF7BA	; level graphics animation 5 - current frame
00000000 =FFFFF7BB                  v_lani5_time:	equ $FFFFF7BB	; level graphics animation 5 - time until next frame
00000000 =FFFFF7BE                  v_gfxbigring:	equ $FFFFF7BE	; settings for giant ring graphics loading (2 bytes)
00000000 =FFFFF7C0                  f_conveyrev:	equ $FFFFF7C0	; flag set to reverse conveyor belts in LZ/SBZ
00000000 =FFFFF7C1                  v_obj63:		equ $FFFFF7C1	; object 63 (LZ/SBZ platforms) variables (6 bytes)
00000000 =FFFFF7C7                  f_wtunnelmode:	equ $FFFFF7C7	; LZ water tunnel mode
00000000 =FFFFF7C8                  f_lockmulti:	equ $FFFFF7C8	; flag set to lock controls, lock Sonic's position & animation
00000000 =FFFFF7C9                  f_wtunnelallow:	equ $FFFFF7C9	; LZ water tunnels (00 = enabled; 01 = disabled)
00000000 =FFFFF7CA                  f_jumponly:	equ $FFFFF7CA	; flag set to lock controls apart from jumping
00000000 =FFFFF7CB                  v_obj6B:		equ $FFFFF7CB	; object 6B (SBZ stomper) variable
00000000 =FFFFF7CC                  f_lockctrl:	equ $FFFFF7CC	; flag set to lock controls during ending sequence
00000000 =FFFFF7CD                  f_bigring:	equ $FFFFF7CD	; flag set when Sonic collects the giant ring
00000000 =FFFFF7D0                  v_itembonus:	equ $FFFFF7D0	; item bonus from broken enemies, blocks etc. (2 bytes)
00000000 =FFFFF7D2                  v_timebonus:	equ $FFFFF7D2	; time bonus at the end of an act (2 bytes)
00000000 =FFFFF7D4                  v_ringbonus:	equ $FFFFF7D4	; ring bonus at the end of an act (2 bytes)
00000000 =FFFFF7D6                  f_endactbonus:	equ $FFFFF7D6	; time/ring bonus update flag at the end of an act
00000000 =FFFFF7D7                  v_sonicend:	equ $FFFFF7D7	; routine counter for Sonic in the ending sequence
00000000 =FFFFF7D8                  v_lz_deform:	equ	$FFFFF7D8	; LZ deformtaion offset, in units of $80 (2 bytes)
00000000 =FFFFF7E0                  f_switch:	equ $FFFFF7E0	; flags set when Sonic stands on a switch ($10 bytes)
00000000 =FFFFF7F0                  v_scroll_block_1_size:	equ $FFFFF7F0	; (2 bytes)
00000000 =FFFFF7F2                  v_scroll_block_2_size:	equ $FFFFF7F2	; unused (2 bytes)
00000000 =FFFFF7F4                  v_scroll_block_3_size:	equ $FFFFF7F4	; unused (2 bytes)
00000000 =FFFFF7F6                  v_scroll_block_4_size:	equ $FFFFF7F6	; unused (2 bytes)
00000000                            
00000000 =FFFFF800                  v_spritetablebuffer:	equ $FFFFF800 ; sprite table ($280 bytes, last $80 bytes are overwritten by v_pal_water_dup)
00000000 =FFFFFA00                  v_pal_water_dup:	equ $FFFFFA00 ; duplicate underwater palette, used for transitions ($80 bytes)
00000000 =FFFFFA80                  v_pal_water:	equ $FFFFFA80	; main underwater palette ($80 bytes)
00000000 =FFFFFB00                  v_pal_dry:	equ $FFFFFB00	; main palette ($80 bytes)
00000000 =FFFFFB80                  v_pal_dry_dup:	equ $FFFFFB80	; duplicate palette, used for transitions ($80 bytes)
00000000 =FFFFFC00                  v_objstate:	equ $FFFFFC00	; object state list ($200 bytes)
00000000                            
00000000                            
00000000 =FFFFFE00                  v_systemstack:	equ $FFFFFE00
00000000 =FFFFFE02                  f_restart:	equ $FFFFFE02	; restart level flag (2 bytes)
00000000 =FFFFFE04                  v_framecount:	equ $FFFFFE04	; frame counter (adds 1 every frame) (2 bytes)
00000000 =FFFFFE05                  v_framebyte:	equ v_framecount+1; low byte for frame counter
00000000 =FFFFFE06                  v_debugitem:	equ $FFFFFE06	; debug item currently selected (NOT the object number of the item)
00000000 =FFFFFE08                  v_debuguse:	equ $FFFFFE08	; debug mode use & routine counter (when Sonic is a ring/item) (2 bytes)
00000000 =FFFFFE0A                  v_debugxspeed:	equ $FFFFFE0A	; debug mode - horizontal speed
00000000 =FFFFFE0B                  v_debugyspeed:	equ $FFFFFE0B	; debug mode - vertical speed
00000000 =FFFFFE0C                  v_vbla_count:	equ $FFFFFE0C	; vertical interrupt counter (adds 1 every VBlank) (4 bytes)
00000000 =FFFFFE0E                  v_vbla_word:	equ v_vbla_count+2 ; low word for vertical interrupt counter (2 bytes)
00000000 =FFFFFE0F                  v_vbla_byte:	equ v_vbla_word+1	; low byte for vertical interrupt counter
00000000 =FFFFFE10                  v_zone:		equ $FFFFFE10	; current zone number
00000000 =FFFFFE11                  v_act:		equ $FFFFFE11	; current act number
00000000 =FFFFFE12                  v_lives:		equ $FFFFFE12	; number of lives
00000000 =FFFFFE14                  v_air:		equ $FFFFFE14	; air remaining while underwater (2 bytes)
00000000 =FFFFFE15                  v_airbyte:	equ v_air+1	; low byte for air
00000000 =FFFFFE16                  v_lastspecial:	equ $FFFFFE16	; last special stage number
00000000 =FFFFFE18                  v_continues:	equ $FFFFFE18	; number of continues
00000000 =FFFFFE1A                  f_timeover:	equ $FFFFFE1A	; time over flag
00000000 =FFFFFE1B                  v_lifecount:	equ $FFFFFE1B	; lives counter value (for actual number, see "v_lives")
00000000 =FFFFFE1C                  f_lifecount:	equ $FFFFFE1C	; lives counter update flag
00000000 =FFFFFE1D                  f_ringcount:	equ $FFFFFE1D	; ring counter update flag
00000000 =FFFFFE1E                  f_timecount:	equ $FFFFFE1E	; time counter update flag
00000000 =FFFFFE1F                  f_scorecount:	equ $FFFFFE1F	; score counter update flag
00000000 =FFFFFE20                  v_rings:		equ $FFFFFE20	; rings (2 bytes)
00000000 =FFFFFE21                  v_ringbyte:	equ v_rings+1	; low byte for rings
00000000 =FFFFFE22                  v_time:		equ $FFFFFE22	; time (4 bytes)
00000000 =FFFFFE23                  v_timemin:	equ $FFFFFE23	; time - minutes
00000000 =FFFFFE24                  v_timesec:	equ $FFFFFE24	; time - seconds
00000000 =FFFFFE25                  v_timecent:	equ $FFFFFE25	; time - centiseconds
00000000 =FFFFFE26                  v_score:		equ $FFFFFE26	; score (4 bytes)
00000000 =FFFFFE2C                  v_shield:	equ $FFFFFE2C	; shield status (00 = no; 01 = yes)
00000000 =FFFFFE2D                  v_invinc:	equ $FFFFFE2D	; invinciblity status (00 = no; 01 = yes)
00000000 =FFFFFE2E                  v_shoes:		equ $FFFFFE2E	; speed shoes status (00 = no; 01 = yes)
00000000 =FFFFFE30                  v_lastlamp:	equ $FFFFFE30	; number of the last lamppost you hit
00000000 =FFFFFE32                  v_lamp_xpos:	equ v_lastlamp+2	; x-axis for Sonic to respawn at lamppost (2 bytes)
00000000 =FFFFFE34                  v_lamp_ypos:	equ v_lastlamp+4	; y-axis for Sonic to respawn at lamppost (2 bytes)
00000000 =FFFFFE36                  v_lamp_rings:	equ v_lastlamp+6	; rings stored at lamppost (2 bytes)
00000000 =FFFFFE38                  v_lamp_time:	equ v_lastlamp+8	; time stored at lamppost (2 bytes)
00000000 =FFFFFE3C                  v_lamp_dle:	equ v_lastlamp+$C	; dynamic level event routine counter at lamppost
00000000 =FFFFFE3E                  v_lamp_limitbtm:	equ v_lastlamp+$E	; level bottom boundary at lamppost (2 bytes)
00000000 =FFFFFE40                  v_lamp_scrx:	equ v_lastlamp+$10 ; x-axis screen at lamppost (2 bytes)
00000000 =FFFFFE42                  v_lamp_scry:	equ v_lastlamp+$12 ; y-axis screen at lamppost (2 bytes)
00000000                            
00000000 =FFFFFE50                  v_lamp_wtrpos:	equ v_lastlamp+$20 ; water position at lamppost (2 bytes)
00000000 =FFFFFE52                  v_lamp_wtrrout:	equ v_lastlamp+$22 ; water routine at lamppost
00000000 =FFFFFE53                  v_lamp_wtrstat:	equ v_lastlamp+$23 ; water state at lamppost
00000000 =FFFFFE54                  v_lamp_lives:	equ v_lastlamp+$24 ; lives counter at lamppost
00000000 =FFFFFE57                  v_emeralds:	equ $FFFFFE57	; number of chaos emeralds
00000000 =FFFFFE58                  v_emldlist:	equ $FFFFFE58	; which individual emeralds you have (00 = no; 01 = yes) (6 bytes)
00000000 =FFFFFE5E                  v_oscillate:	equ $FFFFFE5E	; values which oscillate - for swinging platforms, et al ($42 bytes)
00000000 =FFFFFEC0                  v_ani0_time:	equ $FFFFFEC0	; synchronised sprite animation 0 - time until next frame (used for synchronised animations)
00000000 =FFFFFEC1                  v_ani0_frame:	equ $FFFFFEC1	; synchronised sprite animation 0 - current frame
00000000 =FFFFFEC2                  v_ani1_time:	equ $FFFFFEC2	; synchronised sprite animation 1 - time until next frame
00000000 =FFFFFEC3                  v_ani1_frame:	equ $FFFFFEC3	; synchronised sprite animation 1 - current frame
00000000 =FFFFFEC4                  v_ani2_time:	equ $FFFFFEC4	; synchronised sprite animation 2 - time until next frame
00000000 =FFFFFEC5                  v_ani2_frame:	equ $FFFFFEC5	; synchronised sprite animation 2 - current frame
00000000 =FFFFFEC6                  v_ani3_time:	equ $FFFFFEC6	; synchronised sprite animation 3 - time until next frame
00000000 =FFFFFEC7                  v_ani3_frame:	equ $FFFFFEC7	; synchronised sprite animation 3 - current frame
00000000 =FFFFFEC8                  v_ani3_buf:	equ $FFFFFEC8	; synchronised sprite animation 3 - info buffer (2 bytes)
00000000 =FFFFFEC9                  v_ani4_frame:	equ $FFFFFEC9	; synchronised sprite animation 4 - current frame
00000000 =FFFFFEF0                  v_limittopdb:	equ $FFFFFEF0	; level upper boundary, buffered for debug mode (2 bytes)
00000000 =FFFFFEF2                  v_limitbtmdb:	equ $FFFFFEF2	; level bottom boundary, buffered for debug mode (2 bytes)
00000000                            
00000000 =FFFFFF10                  v_screenposx_dup:	equ $FFFFFF10	; screen position x (duplicate) (2 bytes)
00000000 =FFFFFF14                  v_screenposy_dup:	equ $FFFFFF14	; screen position y (duplicate) (2 bytes)
00000000 =FFFFFF18                  v_bgscreenposx_dup:	equ $FFFFFF18	; background screen position x (duplicate) (2 bytes)
00000000 =FFFFFF1C                  v_bgscreenposy_dup:	equ $FFFFFF1C	; background screen position y (duplicate) (2 bytes)
00000000 =FFFFFF20                  v_bg2screenposx_dup:	equ $FFFFFF20	; 2 bytes
00000000 =FFFFFF24                  v_bg2screenposy_dup:	equ $FFFFFF24	; 2 bytes
00000000 =FFFFFF28                  v_bg3screenposx_dup:	equ $FFFFFF28	; 2 bytes
00000000 =FFFFFF2C                  v_bg3screenposy_dup:	equ $FFFFFF2C	; 2 bytes
00000000 =FFFFFF30                  v_fg_scroll_flags_dup:	equ $FFFFFF30
00000000 =FFFFFF32                  v_bg1_scroll_flags_dup:	equ $FFFFFF32
00000000 =FFFFFF34                  v_bg2_scroll_flags_dup:	equ $FFFFFF34
00000000 =FFFFFF36                  v_bg3_scroll_flags_dup:	equ $FFFFFF36
00000000                            
00000000 =FFFFFF80                  v_levseldelay:	equ $FFFFFF80	; level select - time until change when up/down is held (2 bytes)
00000000 =FFFFFF82                  v_levselitem:	equ $FFFFFF82	; level select - item selected (2 bytes)
00000000 =FFFFFF84                  v_levselsound:	equ $FFFFFF84	; level select - sound selected (2 bytes)
00000000 =FFFFFFB0                  Title_screen_option:	equ $FFFFFFB0
00000000 =FFFFFFC0                  v_scorecopy:	equ $FFFFFFC0	; score, duplicate (4 bytes)
00000000 =FFFFFFC0                  v_scorelife:	equ $FFFFFFC0	; points required for an extra life (4 bytes) (JP1 only)
00000000 =FFFFFFE0                  f_levselcheat:	equ $FFFFFFE0	; level select cheat flag
00000000 =FFFFFFE1                  f_slomocheat:	equ $FFFFFFE1	; slow motion & frame advance cheat flag
00000000 =FFFFFFE2                  f_debugcheat:	equ $FFFFFFE2	; debug mode cheat flag
00000000 =FFFFFFE3                  f_creditscheat:	equ $FFFFFFE3	; hidden credits & press start cheat flag
00000000 =FFFFFFE4                  v_title_dcount:	equ $FFFFFFE4	; number of times the d-pad is pressed on title screen (2 bytes)
00000000 =FFFFFFE6                  v_title_ccount:	equ $FFFFFFE6	; number of times C is pressed on title screen (2 bytes)
00000000                            
00000000 =FFFFFFF0                  f_demo:		equ $FFFFFFF0	; demo mode flag (0 = no; 1 = yes; $8001 = ending) (2 bytes)
00000000 =FFFFFFF2                  v_demonum:	equ $FFFFFFF2	; demo level number (not the same as the level number) (2 bytes)
00000000 =FFFFFFF4                  v_creditsnum:	equ $FFFFFFF4	; credits index number (2 bytes)
00000000 =FFFFFFF8                  v_megadrive:	equ $FFFFFFF8	; Megadrive machine type
00000000 =FFFFFFFA                  f_debugmode:	equ $FFFFFFFA	; debug mode flag (sometimes 2 bytes)
00000000 =FFFFFFFC                  v_init:		equ $FFFFFFFC	; 'init' text string (4 bytes)
00000000                            
00000000 =FFFFF5C3                  f_emeraldm:	equ $FFFFF5C3
00000000 =FFFFF5C4                  v_tagwater:    	equ $FFFFF5C4   ; TIS  
00000000 =FFFFFF92                  v_watersplashpos:    equ $FFFFFF92    ; TIS  
00000000 =00000039                  f_spindash	= $39
00000000 =FFFFF5C6                  v_Saved_music:	equ $FFFFF5C6
00000000 =FFFFF5C8                  v_rshield:	equ $FFFFF5C8	; shield status (00 = no; 01 = yes)
00000000 =FFFFF5C9                  v_gshield:	equ $FFFFF5C9	; shield status (00 = no; 01 = yes)
00000000 =FFFFF5CA                  v_spshield:	equ $FFFFF5CA	; shield status (00 = no; 01 = yes)
00000000                            
00000000 =FFFFFF8C                  Options_menu_box:	equ  $FFFFFF8C
00000000 =FFFFFF8C                  Options_menu_box:	equ  $FFFFFF8C
00000000                            	include	"Macros.asm"
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; reads ASCII strings and passes them to character generator
00000000                            ; ---------------------------------------------------------------------------
00000000                            asc        macro str
00000000                            ct =    0                            ; accumulates the total num of characters
00000000                                rept narg                        ; repeat for every argumeny
00000000                            lc =        0                        ; the position in the string
00000000                            
00000000                                dc.b strlen(\str)-1                    ; put the string length before the string itself
00000000                                rept strlen(\str)                    ; repeat for each character in string
00000000                            cc         substr lc+1,lc+1,\str                ; get a single character into cc
00000000                            arg =        '\cc'                        ; convert it to a character
00000000                                        char.b arg                ; put the character into the ROM (as byte)
00000000                            
00000000                            lc =        lc+1                        ; go to the next character
00000000                            ct =        ct+1                        ; increment character count
00000000                                    endr
00000000                                shift
00000000                                endr
00000000                                endm
00000000                            
00000000                            ; translates ASCII character to proper hex value
00000000                            char        macro c
00000000                                if c=' '
00000000                                    dc.\0 0                        ; example 1: single letters
00000000                            
00000000                                elseif c='*'
00000000                                    dc.\0 $1A                        ; example 1: single letters
00000000                            
00000000                                elseif (c>='0')&(c<='9')
00000000                                    dc.\0 \c-'0'+$20                ; example 2: range of letters ; gem note: '0' = $30. it's the ascii representation
00000000                            
00000000                                elseif (c>='A')&(c<='Z')
00000000                                    dc.\0 \c-$41+$1E                ; example 2: range of letters ; gem note: '0' = $30. it's the ascii representation
00000000                            
00000000                                else
00000000                                    dc.\0 \c                    ; example 3: any other character
00000000                                endif
00000000                                endm	
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Align and pad
00000000                            ; input: length to align to, value to use as padding (default is 0)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            align:	macro
00000000                            	if (narg=1)
00000000                            	dcb.b \1-(*%\1),0
00000000                            	else
00000000                            	dcb.b \1-(*%\1),\2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Set a VRAM address via the VDP control port.
00000000                            ; input: 16-bit VRAM address, control port (default is ($C00004).l)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            locVRAM:	macro loc,controlport
00000000                            		if (narg=1)
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),(vdp_control_port).l
00000000                            		else
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),controlport
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA copy data from 68K (ROM/RAM) to the VRAM
00000000                            ; input: source, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            writeVRAM:	macro
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.l	#$94000000+(((\2>>1)&$FF00)<<8)+$9300+((\2>>1)&$FF),(a5)
00000000                            		move.l	#$96000000+(((\1>>1)&$FF00)<<8)+$9500+((\1>>1)&$FF),(a5)
00000000                            		move.w	#$9700+((((\1>>1)&$FF0000)>>16)&$7F),(a5)
00000000                            		move.w	#$4000+(\3&$3FFF),(a5)
00000000                            		move.w	#$80+((\3&$C000)>>14),(v_vdp_buffer2).w
00000000                            		move.w	(v_vdp_buffer2).w,(a5)
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA copy data from 68K (ROM/RAM) to the CRAM
00000000                            ; input: source, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            writeCRAM:	macro
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.l	#$94000000+(((\2>>1)&$FF00)<<8)+$9300+((\2>>1)&$FF),(a5)
00000000                            		move.l	#$96000000+(((\1>>1)&$FF00)<<8)+$9500+((\1>>1)&$FF),(a5)
00000000                            		move.w	#$9700+((((\1>>1)&$FF0000)>>16)&$7F),(a5)
00000000                            		move.w	#$C000+(\3&$3FFF),(a5)
00000000                            		move.w	#$80+((\3&$C000)>>14),(v_vdp_buffer2).w
00000000                            		move.w	(v_vdp_buffer2).w,(a5)
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA fill VRAM with a value
00000000                            ; input: value, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            fillVRAM:	macro value,length,loc
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.w	#$8F01,(a5)
00000000                            		move.l	#$94000000+((length&$FF00)<<8)+$9300+(length&$FF),(a5)
00000000                            		move.w	#$9780,(a5)
00000000                            		move.l	#$40000080+((loc&$3FFF)<<16)+((loc&$C000)>>14),(a5)
00000000                            		move.w	#value,(vdp_data_port).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Copy a tilemap from 68K (ROM/RAM) to the VRAM without using DMA
00000000                            ; input: source, destination, width [cells], height [cells]
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            copyTilemap:	macro source,loc,width,height
00000000                            		lea	(source).l,a1
00000000                            		move.l	#$40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14),d0
00000000                            		moveq	#width,d1
00000000                            		moveq	#height,d2
00000000                            		jsr	TilemapToVRAM
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; stop the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            stopZ80:	macro
00000000                            		move.w	#$100,(z80_bus_request).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; wait for Z80 to stop
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            waitZ80:	macro
00000000                            	@wait:	btst	#0,(z80_bus_request).l
00000000                            		bne.s	@wait
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; reset the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            resetZ80:	macro
00000000                            		move.w	#$100,(z80_reset).l
00000000                            		endm
00000000                            
00000000                            resetZ80a:	macro
00000000                            		move.w	#0,(z80_reset).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; start the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            startZ80:	macro
00000000                            		move.w	#0,(z80_bus_request).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; disable interrupts
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            disable_ints:	macro
00000000                            		move	#$2700,sr
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; enable interrupts
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            enable_ints:	macro
00000000                            		move	#$2300,sr
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; long conditional jumps
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            jhi:		macro loc
00000000                            		bls.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jcc:		macro loc
00000000                            		bcs.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jhs:		macro loc
00000000                            		jcc	loc
00000000                            		endm
00000000                            
00000000                            jls:		macro loc
00000000                            		bhi.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jcs:		macro loc
00000000                            		bcc.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jlo:		macro loc
00000000                            		jcs	loc
00000000                            		endm
00000000                            
00000000                            jeq:		macro loc
00000000                            		bne.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jne:		macro loc
00000000                            		beq.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jgt:		macro loc
00000000                            		ble.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jge:		macro loc
00000000                            		blt.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jle:		macro loc
00000000                            		bgt.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jlt:		macro loc
00000000                            		bge.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jpl:		macro loc
00000000                            		bmi.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jmi:		macro loc
00000000                            		bpl.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; check if object moves out of range
00000000                            ; input: location to jump to if out of range, x-axis pos (obX(a0) by default)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            out_of_range:	macro exit,pos
00000000                            		if (narg=2)
00000000                            		move.w	pos,d0		; get object position (if specified as not obX)
00000000                            		else
00000000                            		move.w	obX(a0),d0	; get object position
00000000                            		endc
00000000                            		andi.w	#$FF80,d0	; round down to nearest $80
00000000                            		move.w	(v_screenposx).w,d1 ; get screen position
00000000                            		subi.w	#128,d1
00000000                            		andi.w	#$FF80,d1
00000000                            		sub.w	d1,d0		; approx distance between object and screen
00000000                            		cmpi.w	#128+320+192,d0
00000000                            		bhi.\0	exit
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; play a sound effect or music
00000000                            ; input: track, terminate routine, branch or jump, move operand size
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            music:		macro track,terminate,branch,byte
00000000                            		  if OptimiseSound=1
00000000                            			move.b	#track,(v_snddriver_ram+v_playsnd1).l
00000000                            		    if terminate=1
00000000                            			rts
00000000                            		    endc
00000000                            		  else
00000000                            	 	    if byte=1
00000000                            			move.b	#track,d0
00000000                            		    else
00000000                            			move.w	#track,d0
00000000                            		    endc
00000000                            		    if branch=1
00000000                            		      if terminate=0
00000000                            			bsr.w	PlaySound
00000000                            		      else
00000000                            			bra.w	PlaySound
00000000                            		      endc
00000000                            		    else
00000000                            		      if terminate=0
00000000                            			jsr	(PlaySound).l
00000000                            		      else
00000000                            			jmp	(PlaySound).l
00000000                            		      endc
00000000                            		    endc
00000000                            		  endc
00000000                            		endm
00000000                            
00000000                            sfx:		macro track,terminate,branch,byte
00000000                            		  if OptimiseSound=1
00000000                            			move.b	#track,(v_snddriver_ram+v_playsnd2).l
00000000                            		    if terminate=1
00000000                            			rts
00000000                            		    endc
00000000                            		  else
00000000                            	 	    if byte=1
00000000                            			move.b	#track,d0
00000000                            		    else
00000000                            			move.w	#track,d0
00000000                            		    endc
00000000                            		    if branch=1
00000000                            		      if terminate=0
00000000                            			bsr.w	PlaySound_Special
00000000                            		      else
00000000                            			bra.w	PlaySound_Special
00000000                            		      endc
00000000                            		    else
00000000                            		      if terminate=0
00000000                            			jsr	(PlaySound_Special).l
00000000                            		      else
00000000                            			jmp	(PlaySound_Special).l
00000000                            		      endc
00000000                            		    endc
00000000                            		  endc
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; bankswitch between SRAM and ROM
00000000                            ; (remember to enable SRAM in the header first!)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            gotoSRAM:	macro
00000000                            		move.b  #1,($A130F1).l
00000000                            		endm
00000000                            
00000000                            gotoROM:	macro
00000000                            		move.b  #0,($A130F1).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; compare the size of an index with ZoneCount constant
00000000                            ; (should be used immediately after the index)
00000000                            ; input: index address, element size
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            zonewarning:	macro loc,elementsize
00000000                            	@end:
00000000                            		if (@end-loc)-(ZoneCount*elementsize)<>0
00000000                            		inform 1,"Size of \loc ($%h) does not match ZoneCount ($\#ZoneCount).",(@end-loc)/elementsize
00000000                            		endc
00000000                            		endm
00000000                            		endm
00000000                            
00000000 =00000000                  EnableSRAM:	equ 0	; change to 1 to enable SRAM
00000000 =00000001                  BackupSRAM:	equ 1
00000000 =00000003                  AddressSRAM:	equ 3	; 0 = odd+even; 2 = even only; 3 = odd only
00000000                            
00000000                            ; Change to 0 to build the original version of the game, dubbed REV00
00000000                            ; Change to 1 to build the later vesion, dubbed REV01, which includes various bugfixes and enhancements
00000000                            ; Change to 2 to build the version from Sonic Mega Collection, dubbed REVXB, which fixes the infamous "spike bug"
00000000 =00000002                  Revision:	equ 2
00000000                            
00000000 =00000006                  ZoneCount:	equ 6	; discrete zones are: GHZ, MZ, SYZ, LZ, SLZ, and SBZ
00000000                            
00000000 =00000000                  OptimiseSound:	equ 0	; change to 1 to optimise sound queuing
00000000                            
00000000                            ; ===========================================================================
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00                  Vectors:	dc.l v_systemstack&$FFFFFF	; Initial stack pointer value
00000004 0000 0000                  		dc.l EntryPoint			; Start of program
00000008 0000 0000                  		dc.l BusError			; Bus error
0000000C 0000 0000                  		dc.l AddressError		; Address error (4)
00000010 0000 0000                  		dc.l IllegalInstr		; Illegal instruction
00000014 0000 0000                  		dc.l ZeroDivide			; Division by zero
00000018 0000 0000                  		dc.l ChkInstr			; CHK exception
0000001C 0000 0000                  		dc.l TrapvInstr			; TRAPV exception (8)
00000020 0000 0000                  		dc.l PrivilegeViol		; Privilege violation
00000024 0000 0000                  		dc.l Trace				; TRACE exception
00000028 0000 0000                  		dc.l Line1010Emu		; Line-A emulator
0000002C 0000 0000                  		dc.l Line1111Emu		; Line-F emulator (12)
00000030 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000034 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000038 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
0000003C 0000 0000                  		dc.l ErrorExcept		; Unused (reserved) (16)
00000040 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000044 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000048 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
0000004C 0000 0000                  		dc.l ErrorExcept		; Unused (reserved) (20)
00000050 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000054 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000058 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
0000005C 0000 0000                  		dc.l ErrorExcept		; Unused (reserved) (24)
00000060 0000 0000                  		dc.l ErrorExcept		; Spurious exception
00000064 0000 0000                  		dc.l ErrorTrap			; IRQ level 1
00000068 0000 0000                  		dc.l ErrorTrap			; IRQ level 2
0000006C 0000 0000                  		dc.l ErrorTrap			; IRQ level 3 (28)
00000070 0000 0000                  		dc.l HBlank				; IRQ level 4 (horizontal retrace interrupt)
00000074 0000 0000                  		dc.l ErrorTrap			; IRQ level 5
00000078 0000 0000                  		dc.l VBlank				; IRQ level 6 (vertical retrace interrupt)
0000007C 0000 0000                  		dc.l ErrorTrap			; IRQ level 7 (32)
00000080 0000 0000                  		dc.l ErrorTrap			; TRAP #00 exception
00000084 0000 0000                  		dc.l ErrorTrap			; TRAP #01 exception
00000088 0000 0000                  		dc.l ErrorTrap			; TRAP #02 exception
0000008C 0000 0000                  		dc.l ErrorTrap			; TRAP #03 exception (36)
00000090 0000 0000                  		dc.l ErrorTrap			; TRAP #04 exception
00000094 0000 0000                  		dc.l ErrorTrap			; TRAP #05 exception
00000098 0000 0000                  		dc.l ErrorTrap			; TRAP #06 exception
0000009C 0000 0000                  		dc.l ErrorTrap			; TRAP #07 exception (40)
000000A0 0000 0000                  		dc.l ErrorTrap			; TRAP #08 exception
000000A4 0000 0000                  		dc.l ErrorTrap			; TRAP #09 exception
000000A8 0000 0000                  		dc.l ErrorTrap			; TRAP #10 exception
000000AC 0000 0000                  		dc.l ErrorTrap			; TRAP #11 exception (44)
000000B0 0000 0000                  		dc.l ErrorTrap			; TRAP #12 exception
000000B4 0000 0000                  		dc.l ErrorTrap			; TRAP #13 exception
000000B8 0000 0000                  		dc.l ErrorTrap			; TRAP #14 exception
000000BC 0000 0000                  		dc.l ErrorTrap			; TRAP #15 exception (48)
000000C0 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000C4 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000C8 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000CC 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000D0 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000D4 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000D8 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000DC 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000E0                            loc_E0:
000000E0                            		; Relocated code from Spik_Hurt. REVXB was a nasty hex-edit.
000000E0 2628 000C                  		move.l	obY(a0),d3
000000E4 3028 0012                  		move.w	obVelY(a0),d0
000000E8 48C0                       		ext.l	d0
000000EA E180                       		asl.l	#8,d0
000000EC 4EF9 0000 0000             		jmp	(loc_D5A2).l
000000F2                            
000000F2 0000                       		dc.w ErrorTrap
000000F4 0000 0000                  		dc.l ErrorTrap
000000F8 0000 0000                  		dc.l ErrorTrap
000000FC 0000 0000                  		dc.l ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b "SEGA MEGA DRIVE " ; Hardware system ID (Console name)
00000110 2843 2953 4547 4120 3139+  Date:		dc.b "(C)SEGA 1991.APR" ; Copyright holder and release date (generally year)
00000120 534F 4E49 4320 5355 4E56+  Title_Local:	dc.b "SONIC SUNVENTURE                                " ; Domestic name
00000150 534F 4E49 4320 5355 4E56+  Title_Int:	dc.b "SONIC SUNVENTURE                                " ; International name
00000180 474D 2030 3030 3034 3034+  			dc.b "GM 00004049-01" ; Serial/version number (Rev non-0)
0000018E 0000                       Checksum: dc.w $0
00000190 4A20 2020 2020 2020 2020+  		dc.b "J               " ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; Start address of ROM
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; End address of ROM
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; Start address of RAM
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; End address of RAM
000001B0 2020 2020                  		dc.l $20202020
000001B4 2020 2020                  		dc.l $20202020		; SRAM start ($200001)
000001B8 2020 2020                  		dc.l $20202020		; SRAM end ($20xxxx)
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b "                                                    " ; Notes (unused, anything can be put in this space, but it has to be 52 bytes.)
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b "JUE             " ; Region (Country code)
00000200                            EndOfHeader:
00000200                            
00000200                            ; ===========================================================================
00000200                            ; Crash/Freeze the 68000. Unlike Sonic 2, Sonic 1 uses the 68000 for playing music, so it stops too
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	(z80_port_1_control).l ; test port A & B control registers
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	(z80_expansion_control).l ; test port C control register
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	SkipSetup ; Skip the VDP and Z80 setup code if port A, B or C is ok...?
00000216 4BFA 0000                  		lea	SetupValues(pc),a5	; Load setup values array address.
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version (from $A10001)
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity	; If the console has no TMSS, skip the security stuff.
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1) ; move "SEGA" to TMSS register ($A14000)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0	; clear write-pending flag in VDP to prevent issues if the 68k has been reset in the middle of writing a command long word to the VDP.
00000236 7000                       		moveq	#0,d0	; clear d0
00000238 2C40                       		movea.l	d0,a6	; clear a6
0000023A 4E66                       		move.l	a6,usp	; set usp to $0
0000023C                            
0000023C 7217                       		moveq	#$17,d1
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248                            		
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the VRAM
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254                            
00000254 7425                       		moveq	#$25,d2
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C                            		
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)	; clear 4 bytes of RAM
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; repeat until the entire RAM is clear
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment mode
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C                            
0000026C 761F                       		moveq	#$1F,d3	; set repeat times
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)	; clear 2 palettes
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; repeat until the entire CRAM is clear
00000274 289D                       		move.l	(a5)+,(a4)	; set VDP to VSRAM write
00000276                            
00000276 7813                       		moveq	#$13,d4
00000278                            ClrVSRAMLoop:
00000278 2680                       		move.l	d0,(a3)	; clear 4 bytes of VSRAM.
0000027A 51CC FFFC                  		dbf	d4,ClrVSRAMLoop	; repeat until the entire VSRAM is clear
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop	; repeat for other channels
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear all registers
0000028E 46FC 2700                  		disable_ints
00000292                            
00000292                            SkipSetup:
00000292 6000                       		bra.s	GameProgram	; begin game
00000294                            
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; VDP register start number
00000296 3FFF                       		dc.w $3FFF		; size of RAM/4
00000298 0100                       		dc.w $100		; VDP register diff
0000029A                            
0000029A 00A0 0000                  		dc.l z80_ram		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l z80_bus_request	; Z80 bus request
000002A2 00A1 1200                  		dc.l z80_reset		; Z80 reset
000002A6 00C0 0000                  		dc.l vdp_data_port	; VDP data
000002AA 00C0 0004                  		dc.l vdp_control_port	; VDP control
000002AE                            
000002AE 04                         		dc.b 4			; VDP $80 - 8-colour mode
000002AF 14                         		dc.b $14		; VDP $81 - Megadrive mode, DMA enable
000002B0 30                         		dc.b ($C000>>10)	; VDP $82 - foreground nametable address
000002B1 3C                         		dc.b ($F000>>10)	; VDP $83 - window nametable address
000002B2 07                         		dc.b ($E000>>13)	; VDP $84 - background nametable address
000002B3 6C                         		dc.b ($D800>>9)		; VDP $85 - sprite table address
000002B4 00                         		dc.b 0			; VDP $86 - unused
000002B5 00                         		dc.b 0			; VDP $87 - background colour
000002B6 00                         		dc.b 0			; VDP $88 - unused
000002B7 00                         		dc.b 0			; VDP $89 - unused
000002B8 FF                         		dc.b 255		; VDP $8A - HBlank register
000002B9 00                         		dc.b 0			; VDP $8B - full screen scroll
000002BA 81                         		dc.b $81		; VDP $8C - 40 cell display
000002BB 37                         		dc.b ($DC00>>10)	; VDP $8D - hscroll table address
000002BC 00                         		dc.b 0			; VDP $8E - unused
000002BD 01                         		dc.b 1			; VDP $8F - VDP increment
000002BE 01                         		dc.b 1			; VDP $90 - 64 cell hscroll size
000002BF 00                         		dc.b 0			; VDP $91 - window h position
000002C0 00                         		dc.b 0			; VDP $92 - window v position
000002C1 FFFF                       		dc.w $FFFF		; VDP $93/94 - DMA length
000002C3 0000                       		dc.w 0			; VDP $95/96 - DMA source
000002C5 80                         		dc.b $80		; VDP $97 - DMA fill VRAM
000002C6 4000 0080                  		dc.l $40000080		; VRAM address 0
000002CA                            
000002CA AF                         		dc.b $AF		; xor	a
000002CB 01D9 1F                    		dc.b $01, $D9, $1F	; ld	bc,1fd9h
000002CE 1127 00                    		dc.b $11, $27, $00	; ld	de,0027h
000002D1 2126 00                    		dc.b $21, $26, $00	; ld	hl,0026h
000002D4 F9                         		dc.b $F9		; ld	sp,hl
000002D5 77                         		dc.b $77		; ld	(hl),a
000002D6 EDB0                       		dc.b $ED, $B0		; ldir
000002D8 DDE1                       		dc.b $DD, $E1		; pop	ix
000002DA FDE1                       		dc.b $FD, $E1		; pop	iy
000002DC ED47                       		dc.b $ED, $47		; ld	i,a
000002DE ED4F                       		dc.b $ED, $4F		; ld	r,a
000002E0 D1                         		dc.b $D1		; pop	de
000002E1 E1                         		dc.b $E1		; pop	hl
000002E2 F1                         		dc.b $F1		; pop	af
000002E3 08                         		dc.b $08		; ex	af,af'
000002E4 D9                         		dc.b $D9		; exx
000002E5 C1                         		dc.b $C1		; pop	bc
000002E6 D1                         		dc.b $D1		; pop	de
000002E7 E1                         		dc.b $E1		; pop	hl
000002E8 F1                         		dc.b $F1		; pop	af
000002E9 F9                         		dc.b $F9		; ld	sp,hl
000002EA F3                         		dc.b $F3		; di
000002EB ED56                       		dc.b $ED, $56		; im1
000002ED 36E9                       		dc.b $36, $E9		; ld	(hl),e9h
000002EF E9                         		dc.b $E9		; jp	(hl)
000002F0                            
000002F0 8104                       		dc.w $8104		; VDP display mode
000002F2 8F02                       		dc.w $8F02		; VDP increment
000002F4 C000 0000                  		dc.l $C0000000		; CRAM write mode
000002F8 4000 0010                  		dc.l $40000010		; VSRAM address 0
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	(vdp_control_port).l
00000306 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000030E 6700                       		beq.s	CheckSumCheck
00000310 0CB8 696E 6974 FFFC        		cmpi.l	#'init',(v_init).w ; has checksum routine already run?
00000318 6700 0000                  		beq.w	GameInit	; if yes, branch
0000031C                            
0000031C                            CheckSumCheck:
0000031C 207C 0000 0200             		movea.l	#EndOfHeader,a0	; start	checking bytes after the header	($200)
00000322 227C 0000 01A4             		movea.l	#RomEndLoc,a1	; stop at end of ROM
00000328 2011                       		move.l	(a1),d0
0000032A 7200                       		moveq	#0,d1
0000032C                            
0000032C                            	@loop:
0000032C D258                       		add.w	(a0)+,d1
0000032E B088                       		cmp.l	a0,d0
00000330 64FA                       		bhs.s	@loop
00000332 227C 0000 018E             		movea.l	#Checksum,a1	; read the checksum
00000338 B251                       		cmp.w	(a1),d1		; compare checksum in header to ROM
0000033A 6600 0000                  		bne.w	CheckSumError	; if they don't match, branch
0000033E                            
0000033E                            	CheckSumOk:
0000033E 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000342 7E00                       		moveq	#0,d7
00000344 3C3C 007F                  		move.w	#$7F,d6
00000348                            	@clearRAM:
00000348 2CC7                       		move.l	d7,(a6)+
0000034A 51CE FFFC                  		dbf	d6,@clearRAM	; clear RAM ($FE00-$FFFF)
0000034E                            
0000034E 1039 00A1 0001             		move.b	(z80_version).l,d0
00000354 0200 00C0                  		andi.b	#$C0,d0
00000358 11C0 FFF8                  		move.b	d0,(v_megadrive).w ; get region setting
0000035C 21FC 696E 6974 FFFC        		move.l	#'init',(v_init).w ; set flag so checksum won't run again
00000364                            
00000364                            GameInit:
00000364 4DF9 00FF 0000             		lea	($FF0000).l,a6
0000036A 7E00                       		moveq	#0,d7
0000036C 3C3C 3F7F                  		move.w	#$3F7F,d6
00000370                            	@clearRAM:
00000370 2CC7                       		move.l	d7,(a6)+
00000372 51CE FFFC                  		dbf	d6,@clearRAM	; clear RAM ($0000-$FDFF)
00000376 4EB9 0000 0000                     jsr	(InitDMAQueue).l	
0000037C 6100 0000                  		bsr.w	VDPSetupGame
00000380 6100 0000                  		bsr.w	SoundDriverLoad
00000384 6100 0000                  		bsr.w	JoypadInit
00000388 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; set Game Mode to Sega Screen
0000038E                            
0000038E                            MainGameLoop:
0000038E 1038 F600                  		move.b	(v_gamemode).w,d0 ; load Game Mode
00000392 0240 001C                  		andi.w	#$1C,d0	; limit Game Mode value to $1C max (change to a maximum of 7C to add more game modes)
00000396 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
0000039A 60F2                       		bra.s	MainGameLoop	; loop indefinitely
0000039C                            ; ===========================================================================
0000039C                            ; ---------------------------------------------------------------------------
0000039C                            ; Main game mode array
0000039C                            ; ---------------------------------------------------------------------------
0000039C                            
0000039C                            GameModeArray:
0000039C                            
0000039C 6000 0000                  ptr_GM_Sega:	bra.w	GM_Sega		; Sega Screen ($00)
000003A0                            
000003A0 6000 0000                  ptr_GM_Title:	bra.w	GM_Title	; Title	Screen ($04)
000003A4                            
000003A4 6000 0000                  ptr_GM_Demo:	bra.w	GM_Level	; Demo Mode ($08)
000003A8                            
000003A8 6000 0000                  ptr_GM_Level:	bra.w	GM_Level	; Normal Level ($0C)
000003AC                            
000003AC 6000 0000                  ptr_GM_Special:	bra.w	GM_Special	; Special Stage	($10)
000003B0                            
000003B0 6000 0000                  ptr_GM_Cont:	bra.w	GM_Continue	; Continue Screen ($14)
000003B4                            
000003B4 6000 0000                  ptr_GM_Ending:	bra.w	GM_Ending	; End of game sequence ($18)
000003B8                            
000003B8 6000 0000                  ptr_GM_Credits:	bra.w	GM_Credits	; Credits ($1C)
000003BC                            
000003BC 4E75                       		rts	
000003BE                            ; ===========================================================================
000003BE                            
000003BE                            CheckSumError:
000003BE 6100 0000                  		bsr.w	VDPSetupGame
000003C2 23FC C000 0000 00C0 0004   		move.l	#$C0000000,(vdp_control_port).l ; set VDP to CRAM write
000003CC 7E3F                       		moveq	#$3F,d7
000003CE                            
000003CE                            	@fillred:
000003CE 33FC 000E 00C0 0000        		move.w	#cRed,(vdp_data_port).l ; fill palette with red
000003D6 51CF FFF6                  		dbf	d7,@fillred	; repeat $3F more times
000003DA                            
000003DA                            	@endlessloop:
000003DA 60FE                       		bra.s	@endlessloop
000003DC                            ; ===========================================================================
000003DC                            
000003DC                            
000003DC                            ; ===========================================================================
000003DC                            
000003DC                            loc_43A:
000003DC 46FC 2700                  		disable_ints
000003E0 544F                       		addq.w	#2,sp
000003E2 21DF FC40                  		move.l	(sp)+,(v_spbuffer).w
000003E6 544F                       		addq.w	#2,sp
000003E8 48F8 FFFF FC00             		movem.l	d0-a7,(v_regbuffer).w
000003EE 6100 0000                  		bsr.w	ShowErrorMessage
000003F2 202F 0002                  		move.l	2(sp),d0
000003F6 6100 0000                  		bsr.w	ShowErrorValue
000003FA 2038 FC40                  		move.l	(v_spbuffer).w,d0
000003FE 6100 0000                  		bsr.w	ShowErrorValue
00000402 6000                       		bra.s	loc_478
00000404                            ; ===========================================================================
00000404                            
00000404                            loc_462:
00000404 46FC 2700                  		disable_ints
00000408 48F8 FFFF FC00             		movem.l	d0-a7,(v_regbuffer).w
0000040E 6100 0000                  		bsr.w	ShowErrorMessage
00000412 202F 0002                  		move.l	2(sp),d0
00000416 6100 0000                  		bsr.w	ShowErrorValue
0000041A                            
0000041A                            loc_478:
0000041A 6100 0000                  		bsr.w	ErrorWaitForC
0000041E 4CF8 FFFF FC00             		movem.l	(v_regbuffer).w,d0-a7
00000424 46FC 2300                  		enable_ints
00000428 4E73                       		rte	
0000042A                            
0000042A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000042A                            
0000042A                            
0000042A                            ShowErrorMessage:
0000042A 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0000043A 41F9 0000 0000             		lea	(Art_Text).l,a0
00000440 323C 027F                  		move.w	#$27F,d1
00000444                            	@loadgfx:
00000444 3C98                       		move.w	(a0)+,(a6)
00000446 51C9 FFFC                  		dbf	d1,@loadgfx
0000044A                            
0000044A 7000                       		moveq	#0,d0		; clear	d0
0000044C 1038 FC44                  		move.b	(v_errortype).w,d0 ; load error code
00000450 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
00000454 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
00000462 7212                       		moveq	#$12,d1		; number of characters (minus 1)
00000464                            
00000464                            	@showchars:
00000464 7000                       		moveq	#0,d0
00000466 1018                       		move.b	(a0)+,d0
00000468 0640 0790                  		addi.w	#$790,d0
0000046C 3C80                       		move.w	d0,(a6)
0000046E 51C9 FFF4                  		dbf	d1,@showchars	; repeat for number of characters
00000472 4E75                       		rts	
00000474                            ; End of function ShowErrorMessage
00000474                            
00000474                            ; ===========================================================================
00000474 0000 0000                  ErrorText:	dc.w @exception-ErrorText, @bus-ErrorText
00000478 0000 0000                  		dc.w @address-ErrorText, @illinstruct-ErrorText
0000047C 0000 0000                  		dc.w @zerodivide-ErrorText, @chkinstruct-ErrorText
00000480 0000 0000                  		dc.w @trapv-ErrorText, @privilege-ErrorText
00000484 0000 0000                  		dc.w @trace-ErrorText, @line1010-ErrorText
00000488 0000                       		dc.w @line1111-ErrorText
0000048A 4552 524F 5220 4558 4345+  @exception:	dc.b "ERROR EXCEPTION    "
0000049D 4255 5320 4552 524F 5220+  @bus:		dc.b "BUS ERROR          "
000004B0 4144 4452 4553 5320 4552+  @address:	dc.b "ADDRESS ERROR      "
000004C3 494C 4C45 4741 4C20 494E+  @illinstruct:	dc.b "ILLEGAL INSTRUCTION"
000004D6 4045 524F 2044 4956 4944+  @zerodivide:	dc.b "@ERO DIVIDE        "
000004E9 4348 4B20 494E 5354 5255+  @chkinstruct:	dc.b "CHK INSTRUCTION    "
000004FC 5452 4150 5620 494E 5354+  @trapv:		dc.b "TRAPV INSTRUCTION  "
0000050F 5052 4956 494C 4547 4520+  @privilege:	dc.b "PRIVILEGE VIOLATION"
00000522 5452 4143 4520 2020 2020+  @trace:		dc.b "TRACE              "
00000535 4C49 4E45 2031 3031 3020+  @line1010:	dc.b "LINE 1010 EMULATOR "
00000548 4C49 4E45 2031 3131 3120+  @line1111:	dc.b "LINE 1111 EMULATOR "
0000055C 00                         		even
0000055C                            
0000055C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000055C                            
0000055C                            
0000055C                            ShowErrorValue:
0000055C 3CBC 07CA                  		move.w	#$7CA,(a6)	; display "$" symbol
00000560 7407                       		moveq	#7,d2
00000562                            
00000562                            	@loop:
00000562 E998                       		rol.l	#4,d0
00000564 6100                       		bsr.s	@shownumber	; display 8 numbers
00000566 51CA FFFA                  		dbf	d2,@loop
0000056A 4E75                       		rts	
0000056C                            ; End of function ShowErrorValue
0000056C                            
0000056C                            
0000056C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000056C                            
0000056C                            
0000056C                            @shownumber:
0000056C 3200                       		move.w	d0,d1
0000056E 0241 000F                  		andi.w	#$F,d1
00000572 0C41 000A                  		cmpi.w	#$A,d1
00000576 6500                       		blo.s	@chars0to9
00000578 5E41                       		addq.w	#7,d1		; add 7 for characters A-F
0000057A                            
0000057A                            	@chars0to9:
0000057A 0641 07C0                  		addi.w	#$7C0,d1
0000057E 3C81                       		move.w	d1,(a6)
00000580 4E75                       		rts	
00000582                            ; End of function sub_5CA
00000582                            
00000582                            
00000582                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000582                            
00000582                            
00000582                            ErrorWaitForC:
00000582 6100 0000                  		bsr.w	ReadJoypads
00000586 0C38 0020 F605             		cmpi.b	#btnC,(v_jpadpress1).w ; is button C pressed?
0000058C 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
00000590 4E75                       		rts	
00000592                            ; End of function ErrorWaitForC
00000592                            
00000592                            ; ===========================================================================
00000592                            
00000592                            Art_Text:	incbin	"artunc\menutext.bin" ; text used in level select and debug mode
00000AB2                            		even
00000AB2                            
00000AB2                            ; ===========================================================================
00000AB2                            ; ---------------------------------------------------------------------------
00000AB2                            ; Vertical interrupt
00000AB2                            ; ---------------------------------------------------------------------------
00000AB2                            
00000AB2                            VBlank:
00000AB2 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000AB6 4A38 F62A                  		tst.b	(v_vbla_routine).w
00000ABA 6700                       		beq.s	VBla_00
00000ABC 3039 00C0 0004             		move.w	(vdp_control_port).l,d0
00000AC2 23FC 4000 0010 00C0 0004   		move.l	#$40000010,(vdp_control_port).l
00000ACC 23F8 F616 00C0 0000        		move.l	(v_scrposy_dup).w,(vdp_data_port).l ; send screen y-axis pos. to VSRAM
00000AD4 0838 0006 FFF8             		btst	#6,(v_megadrive).w ; is Megadrive PAL?
00000ADA 6700                       		beq.s	@notPAL		; if not, branch
00000ADC                            
00000ADC 303C 0700                  		move.w	#$700,d0
00000AE0                            	@waitPAL:
00000AE0 51C8 FFFE                  		dbf	d0,@waitPAL ; wait here in a loop doing nothing for a while...
00000AE4                            
00000AE4                            	@notPAL:
00000AE4 1038 F62A                  		move.b	(v_vbla_routine).w,d0
00000AE8 11FC 0000 F62A             		move.b	#0,(v_vbla_routine).w
00000AEE 31FC 0001 F644             		move.w	#1,(f_hbla_pal).w
00000AF4 0240 003E                  		andi.w	#$3E,d0
00000AF8 303B 0000                  		move.w	VBla_Index(pc,d0.w),d0
00000AFC 4EBB 0000                  		jsr	VBla_Index(pc,d0.w)
00000B00                            
00000B00                            VBla_Music:
00000B00 4EB9 0000 0000             		jsr		(UpdateMusic).l
00000B06                            
00000B06                            VBla_Exit:
00000B06 52B8 FE0C                  		addq.l	#1,(v_vbla_count).w
00000B0A 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000B0E 4E73                       		rte	
00000B10                            ; ===========================================================================
00000B10 0000 0000                  VBla_Index:	dc.w VBla_00-VBla_Index, VBla_02-VBla_Index
00000B14 0000 0000                  		dc.w VBla_04-VBla_Index, VBla_06-VBla_Index
00000B18 0000 0000                  		dc.w VBla_08-VBla_Index, VBla_0A-VBla_Index
00000B1C 0000 0000                  		dc.w VBla_0C-VBla_Index, VBla_0E-VBla_Index
00000B20 0000 0000                  		dc.w VBla_10-VBla_Index, VBla_12-VBla_Index
00000B24 0000 0000                  		dc.w VBla_14-VBla_Index, VBla_16-VBla_Index
00000B28 0000                       		dc.w VBla_0C-VBla_Index
00000B2A                            ; ===========================================================================
00000B2A                            
00000B2A                            VBla_00:
00000B2A 0C38 0000 F600             		cmpi.b	#$80+id_Level,(v_gamemode).w
00000B30 6700                       		beq.s	@islevel
00000B32 0C38 0000 F600             		cmpi.b	#id_Level,(v_gamemode).w ; is game on a level?
00000B38 6600 FFC6                  		bne.w	VBla_Music	; if not, branch
00000B3C                            
00000B3C                            	@islevel:
00000B3C 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ ?
00000B42 6600 FFBC                  		bne.w	VBla_Music	; if not, branch
00000B46                            
00000B46 3039 00C0 0004             		move.w	(vdp_control_port).l,d0
00000B4C 0838 0006 FFF8             		btst	#6,(v_megadrive).w ; is Megadrive PAL?
00000B52 6700                       		beq.s	@notPAL		; if not, branch
00000B54                            
00000B54 303C 0700                  		move.w	#$700,d0
00000B58                            	@waitPAL:
00000B58 51C8 FFFE                  		dbf	d0,@waitPAL
00000B5C                            
00000B5C                            	@notPAL:
00000B5C 31FC 0001 F644             		move.w	#1,(f_hbla_pal).w ; set HBlank flag
00000B62 33FC 0100 00A1 1100        		stopZ80
00000B6A 0839 0000 00A1 1100 66F6   		waitZ80
00000B74 4A38 F64E                  		tst.b	(f_wtr_state).w	; is water above top of screen?
00000B78 6600                       		bne.s	@waterabove 	; if yes, branch
00000B7A                            
00000B7A 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000B9E 6000                       		bra.s	@waterbelow
00000BA0                            
00000BA0                            @waterabove:
00000BA0 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000BC4                            
00000BC4                            	@waterbelow:
00000BC4 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000BC8 33FC 0000 00A1 1100        		startZ80
00000BD0 6000 FF2E                  		bra.w	VBla_Music
00000BD4                            ; ===========================================================================
00000BD4                            
00000BD4                            VBla_02:
00000BD4 6100 0000                  		bsr.w	sub_106E
00000BD8                            
00000BD8                            VBla_14:
00000BD8 4A78 F614                  		tst.w	(v_demolength).w
00000BDC 6700 0000                  		beq.w	@end
00000BE0 5378 F614                  		subq.w	#1,(v_demolength).w
00000BE4                            
00000BE4                            	@end:
00000BE4 4E75                       		rts	
00000BE6                            ; ===========================================================================
00000BE6                            
00000BE6                            VBla_04:
00000BE6 6100 0000                  		bsr.w	sub_106E
00000BEA 6100 0000                  		bsr.w	LoadTilesAsYouMove_BGOnly
00000BEE 6100 0000                  		bsr.w	sub_1642
00000BF2 4A78 F614                  		tst.w	(v_demolength).w
00000BF6 6700 0000                  		beq.w	@end
00000BFA 5378 F614                  		subq.w	#1,(v_demolength).w
00000BFE                            
00000BFE                            	@end:
00000BFE 4E75                       		rts	
00000C00                            ; ===========================================================================
00000C00                            
00000C00                            VBla_06:
00000C00 6100 0000                  		bsr.w	sub_106E
00000C04 4E75                       		rts	
00000C06                            ; ===========================================================================
00000C06                            
00000C06                            VBla_10:
00000C06 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is game on special stage?
00000C0C 6700 0000                  		beq.w	VBla_0A		; if yes, branch
00000C10                            
00000C10                            VBla_08:
00000C10 33FC 0100 00A1 1100        		stopZ80
00000C18 0839 0000 00A1 1100 66F6   		waitZ80
00000C22 6100 0000                  		bsr.w	ReadJoypads
00000C26 4A38 F64E                  		tst.b	(f_wtr_state).w
00000C2A 6600                       		bne.s	@waterabove
00000C2C                            
00000C2C 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000C50 6000                       		bra.s	@waterbelow
00000C52                            
00000C52                            @waterabove:
00000C52 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000C76                            
00000C76                            	@waterbelow:
00000C76 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000C7A                            
00000C7A 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000C9E 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000CC2 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000CC8                            
00000CC8                            	@nochg:
00000CC8 33FC 0000 00A1 1100        		startZ80
00000CD0 4CF8 00FF F700             		movem.l	(v_screenposx).w,d0-d7
00000CD6 48F8 00FF FF10             		movem.l	d0-d7,(v_screenposx_dup).w
00000CDC 4CF8 0003 F754             		movem.l	(v_fg_scroll_flags).w,d0-d1
00000CE2 48F8 0003 FF30             		movem.l	d0-d1,(v_fg_scroll_flags_dup).w
00000CE8 0C38 0060 F625             		cmpi.b	#96,(v_hbla_line).w
00000CEE 6400                       		bhs.s	Demo_Time
00000CF0 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000CF6 588F                       		addq.l	#4,sp
00000CF8 6000 FE0C                  		bra.w	VBla_Exit
00000CFC                            
00000CFC                            ; ---------------------------------------------------------------------------
00000CFC                            ; Subroutine to	run a demo for an amount of time
00000CFC                            ; ---------------------------------------------------------------------------
00000CFC                            
00000CFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000CFC                            
00000CFC                            
00000CFC                            Demo_Time:
00000CFC 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000D00 4EB9 0000 0000             		jsr	(AnimateLevelGfx).l
00000D06 4EB9 0000 0000             		jsr	(HUD_Update).l
00000D0C 6100 0000                  		bsr.w	ProcessDPLC2
00000D10 4A78 F614                  		tst.w	(v_demolength).w ; is there time left on the demo?
00000D14 6700 0000                  		beq.w	@end		; if not, branch
00000D18 5378 F614                  		subq.w	#1,(v_demolength).w ; subtract 1 from time left
00000D1C                            
00000D1C                            	@end:
00000D1C 4E75                       		rts	
00000D1E                            ; End of function Demo_Time
00000D1E                            
00000D1E                            ; ===========================================================================
00000D1E                            
00000D1E                            VBla_0A:
00000D1E 33FC 0100 00A1 1100        		stopZ80
00000D26 0839 0000 00A1 1100 66F6   		waitZ80
00000D30 6100 0000                  		bsr.w	ReadJoypads
00000D34 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000D58 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000D7C 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000DA0 33FC 0000 00A1 1100        		startZ80
00000DA8 6100 0000                  		bsr.w	PalCycle_SS
00000DAC 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000DB2                            	@nochg:
00000DB2 4A78 F614                  		tst.w	(v_demolength).w	; is there time left on the demo?
00000DB6 6700 0000                  		beq.w	@end	; if not, return
00000DBA 5378 F614                  		subq.w	#1,(v_demolength).w	; subtract 1 from time left in demo
00000DBE                            
00000DBE                            	@end:
00000DBE 4E75                       		rts	
00000DC0                            ; ===========================================================================
00000DC0                            
00000DC0                            VBla_0C:
00000DC0 33FC 0100 00A1 1100        		stopZ80
00000DC8 0839 0000 00A1 1100 66F6   		waitZ80
00000DD2 6100 0000                  		bsr.w	ReadJoypads
00000DD6 4A38 F64E                  		tst.b	(f_wtr_state).w
00000DDA 6600                       		bne.s	@waterabove
00000DDC                            
00000DDC 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000E00 6000                       		bra.s	@waterbelow
00000E02                            
00000E02                            @waterabove:
00000E02 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000E26                            
00000E26                            	@waterbelow:
00000E26 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000E2A 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000E4E 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000E72 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000E78                            
00000E78                            	@nochg:
00000E78 33FC 0000 00A1 1100        		startZ80
00000E80 4CF8 00FF F700             		movem.l	(v_screenposx).w,d0-d7
00000E86 48F8 00FF FF10             		movem.l	d0-d7,(v_screenposx_dup).w
00000E8C 4CF8 0003 F754             		movem.l	(v_fg_scroll_flags).w,d0-d1
00000E92 48F8 0003 FF30             		movem.l	d0-d1,(v_fg_scroll_flags_dup).w
00000E98 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000E9C 4EB9 0000 0000             		jsr	(AnimateLevelGfx).l
00000EA2 4EB9 0000 0000             		jsr	(HUD_Update).l
00000EA8 6100 0000                  		bsr.w	sub_1642
00000EAC 4E75                       		rts	
00000EAE                            ; ===========================================================================
00000EAE                            
00000EAE                            VBla_0E:
00000EAE 6100 0000                  		bsr.w	sub_106E
00000EB2 5238 F628                  		addq.b	#1,($FFFFF628).w
00000EB6 11FC 000E F62A             		move.b	#$E,(v_vbla_routine).w
00000EBC 4E75                       		rts	
00000EBE                            ; ===========================================================================
00000EBE                            
00000EBE                            VBla_12:
00000EBE 6100 0000                  		bsr.w	sub_106E
00000EC2 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000EC6 6000 0000                  		bra.w	sub_1642
00000ECA                            ; ===========================================================================
00000ECA                            
00000ECA                            Vbla_16:
00000ECA 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000ECE 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000EF2 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000F16 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000F1C                            
00000F1C                            	@nochg:
00000F1C 4A78 F614                  		tst.w	(v_demolength).w
00000F20 6700 0000                  		beq.w	@end
00000F24 5378 F614                  		subq.w	#1,(v_demolength).w
00000F28                            
00000F28                            	@end:
00000F28 4E75                       		rts	
00000F2A                            
00000F2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000F2A                            
00000F2A                            
00000F2A                            sub_106E:
00000F2A 33FC 0100 00A1 1100        		stopZ80
00000F32 0839 0000 00A1 1100 66F6   		waitZ80
00000F3C 6100 0000                  		bsr.w	ReadJoypads
00000F40 4A38 F64E                  		tst.b	(f_wtr_state).w ; is water above top of screen?
00000F44 6600                       		bne.s	@waterabove	; if yes, branch
00000F46 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000F6A 6000                       		bra.s	@waterbelow
00000F6C                            
00000F6C                            	@waterabove:
00000F6C 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000F90                            
00000F90                            	@waterbelow:
00000F90 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000FB4 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000FD8 33FC 0000 00A1 1100        		startZ80
00000FE0 4E75                       		rts	
00000FE2                            ; End of function sub_106E
00000FE2                            
00000FE2                            ; ---------------------------------------------------------------------------
00000FE2                            ; Horizontal interrupt
00000FE2                            ; ---------------------------------------------------------------------------
00000FE2                            
00000FE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000FE2                            
00000FE2                            
00000FE2                            HBlank:
00000FE2 46FC 2700                  		disable_ints
00000FE6 4A78 F644                  		tst.w	(f_hbla_pal).w	; is palette set to change?
00000FEA 6700                       		beq.s	@nochg		; if not, branch
00000FEC 31FC 0000 F644             		move.w	#0,(f_hbla_pal).w
00000FF2 48E7 00C0                  		movem.l	a0-a1,-(sp)
00000FF6 43F9 00C0 0000             		lea	(vdp_data_port).l,a1
00000FFC 41F8 FA80                  		lea	(v_pal_water).w,a0 ; get palette from RAM
00001000 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
00001008 2298                       		move.l	(a0)+,(a1)	; move palette to CRAM
0000100A 2298                       		move.l	(a0)+,(a1)
0000100C 2298                       		move.l	(a0)+,(a1)
0000100E 2298                       		move.l	(a0)+,(a1)
00001010 2298                       		move.l	(a0)+,(a1)
00001012 2298                       		move.l	(a0)+,(a1)
00001014 2298                       		move.l	(a0)+,(a1)
00001016 2298                       		move.l	(a0)+,(a1)
00001018 2298                       		move.l	(a0)+,(a1)
0000101A 2298                       		move.l	(a0)+,(a1)
0000101C 2298                       		move.l	(a0)+,(a1)
0000101E 2298                       		move.l	(a0)+,(a1)
00001020 2298                       		move.l	(a0)+,(a1)
00001022 2298                       		move.l	(a0)+,(a1)
00001024 2298                       		move.l	(a0)+,(a1)
00001026 2298                       		move.l	(a0)+,(a1)
00001028 2298                       		move.l	(a0)+,(a1)
0000102A 2298                       		move.l	(a0)+,(a1)
0000102C 2298                       		move.l	(a0)+,(a1)
0000102E 2298                       		move.l	(a0)+,(a1)
00001030 2298                       		move.l	(a0)+,(a1)
00001032 2298                       		move.l	(a0)+,(a1)
00001034 2298                       		move.l	(a0)+,(a1)
00001036 2298                       		move.l	(a0)+,(a1)
00001038 2298                       		move.l	(a0)+,(a1)
0000103A 2298                       		move.l	(a0)+,(a1)
0000103C 2298                       		move.l	(a0)+,(a1)
0000103E 2298                       		move.l	(a0)+,(a1)
00001040 2298                       		move.l	(a0)+,(a1)
00001042 2298                       		move.l	(a0)+,(a1)
00001044 2298                       		move.l	(a0)+,(a1)
00001046 2298                       		move.l	(a0)+,(a1)
00001048 337C 8ADF 0004             		move.w	#$8A00+223,4(a1) ; reset HBlank register
0000104E 4CDF 0300                  		movem.l	(sp)+,a0-a1
00001052 4A38 F64F                  		tst.b	($FFFFF64F).w
00001056 6600                       		bne.s	loc_119E
00001058                            
00001058                            	@nochg:
00001058 4E73                       		rte	
0000105A                            ; ===========================================================================
0000105A                            
0000105A                            loc_119E:
0000105A 4238 F64F                  		clr.b	($FFFFF64F).w
0000105E 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00001062 6100 FC98                  		bsr.w	Demo_Time	
00001066 4EB9 0000 0000             		jsr	(UpdateMusic).l
0000106C 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00001070 4E73                       		rte	
00001072                            ; End of function HBlank
00001072                            
00001072                            ; ---------------------------------------------------------------------------
00001072                            ; Subroutine to	initialise joypads
00001072                            ; ---------------------------------------------------------------------------
00001072                            
00001072                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001072                            
00001072                            
00001072                            JoypadInit:
00001072 33FC 0100 00A1 1100        		stopZ80
0000107A 0839 0000 00A1 1100 66F6   		waitZ80
00001084 7040                       		moveq	#$40,d0
00001086 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
0000108C 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
00001092 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (expansion/extra)
00001098 33FC 0000 00A1 1100        		startZ80
000010A0 4E75                       		rts	
000010A2                            ; End of function JoypadInit
000010A2                            
000010A2                            ; ---------------------------------------------------------------------------
000010A2                            ; Subroutine to	read joypad input, and send it to the RAM
000010A2                            ; ---------------------------------------------------------------------------
000010A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000010A2                            
000010A2                            
000010A2                            ReadJoypads:
000010A2 41F8 F604                  		lea	(v_jpadhold1).w,a0 ; address where joypad states are written
000010A6 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
000010AC 6100                       		bsr.s	@read		; do the first joypad
000010AE 5449                       		addq.w	#2,a1		; do the second	joypad
000010B0                            
000010B0                            	@read:
000010B0 12BC 0000                  		move.b	#0,(a1)
000010B4 4E71                       		nop	
000010B6 4E71                       		nop	
000010B8 1011                       		move.b	(a1),d0
000010BA E508                       		lsl.b	#2,d0
000010BC 0200 00C0                  		andi.b	#$C0,d0
000010C0 12BC 0040                  		move.b	#$40,(a1)
000010C4 4E71                       		nop	
000010C6 4E71                       		nop	
000010C8 1211                       		move.b	(a1),d1
000010CA 0201 003F                  		andi.b	#$3F,d1
000010CE 8001                       		or.b	d1,d0
000010D0 4600                       		not.b	d0
000010D2 1210                       		move.b	(a0),d1
000010D4 B101                       		eor.b	d0,d1
000010D6 10C0                       		move.b	d0,(a0)+
000010D8 C200                       		and.b	d0,d1
000010DA 10C1                       		move.b	d1,(a0)+
000010DC 4E75                       		rts	
000010DE                            ; End of function ReadJoypads
000010DE                            
000010DE                            
000010DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000010DE                            
000010DE                            
000010DE                            VDPSetupGame:
000010DE 41F9 00C0 0004             		lea	(vdp_control_port).l,a0
000010E4 43F9 00C0 0000             		lea	(vdp_data_port).l,a1
000010EA 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
000010F0 7E12                       		moveq	#$12,d7
000010F2                            
000010F2                            	@setreg:
000010F2 309A                       		move.w	(a2)+,(a0)
000010F4 51CF FFFC                  		dbf	d7,@setreg	; set the VDP registers
000010F8                            
000010F8 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
000010FE 31C0 F60C                  		move.w	d0,(v_vdp_buffer1).w
00001102 31FC 8ADF F624             		move.w	#$8A00+223,(v_hbla_hreg).w	; H-INT every 224th scanline
00001108 7000                       		moveq	#0,d0
0000110A 23FC C000 0000 00C0 0004   		move.l	#$C0000000,(vdp_control_port).l ; set VDP to CRAM write
00001114 3E3C 003F                  		move.w	#$3F,d7
00001118                            
00001118                            	@clrCRAM:
00001118 3280                       		move.w	d0,(a1)
0000111A 51CF FFFC                  		dbf	d7,@clrCRAM	; clear	the CRAM
0000111E                            
0000111E 42B8 F616                  		clr.l	(v_scrposy_dup).w
00001122 42B8 F61A                  		clr.l	(v_scrposx_dup).w
00001126 2F01                       		move.l	d1,-(sp)
00001128 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$FFFF,0
0000114A                            
0000114A                            	@waitforDMA:
0000114A 3215                       		move.w	(a5),d1
0000114C 0801 0001                  		btst	#1,d1		; is DMA (fillVRAM) still running?
00001150 66F8                       		bne.s	@waitforDMA	; if yes, branch
00001152                            
00001152 3ABC 8F02                  		move.w	#$8F02,(a5)	; set VDP increment size
00001156 221F                       		move.l	(sp)+,d1
00001158 4E75                       		rts	
0000115A                            ; End of function VDPSetupGame
0000115A                            
0000115A                            ; ===========================================================================
0000115A 8004                       VDPSetupArray:	dc.w $8004		; 8-colour mode
0000115C 8134                       		dc.w $8134		; enable V.interrupts, enable DMA
0000115E 8230                       		dc.w $8200+(vram_fg>>10) ; set foreground nametable address
00001160 8328                       		dc.w $8300+($A000>>10)	; set window nametable address
00001162 8407                       		dc.w $8400+(vram_bg>>13) ; set background nametable address
00001164 857C                       		dc.w $8500+(vram_sprites>>9) ; set sprite table address
00001166 8600                       		dc.w $8600		; unused
00001168 8700                       		dc.w $8700		; set background colour (palette entry 0)
0000116A 8800                       		dc.w $8800		; unused
0000116C 8900                       		dc.w $8900		; unused
0000116E 8A00                       		dc.w $8A00		; default H.interrupt register
00001170 8B00                       		dc.w $8B00		; full-screen vertical scrolling
00001172 8C81                       		dc.w $8C81		; 40-cell display mode
00001174 8D3F                       		dc.w $8D00+(vram_hscroll>>10) ; set background hscroll address
00001176 8E00                       		dc.w $8E00		; unused
00001178 8F02                       		dc.w $8F02		; set VDP increment size
0000117A 9001                       		dc.w $9001		; 64-cell hscroll size
0000117C 9100                       		dc.w $9100		; window horizontal position
0000117E 9200                       		dc.w $9200		; window vertical position
00001180                            
00001180                            ; ---------------------------------------------------------------------------
00001180                            ; Subroutine to	clear the screen
00001180                            ; ---------------------------------------------------------------------------
00001180                            
00001180                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001180                            
00001180                            
00001180                            ClearScreen:
00001180 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$FFF,vram_fg ; clear foreground namespace
000011A2                            
000011A2                            	@wait1:
000011A2 3215                       		move.w	(a5),d1
000011A4 0801 0001                  		btst	#1,d1
000011A8 66F8                       		bne.s	@wait1
000011AA                            
000011AA 3ABC 8F02                  		move.w	#$8F02,(a5)
000011AE 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$FFF,vram_bg ; clear background namespace
000011D0                            
000011D0                            	@wait2:
000011D0 3215                       		move.w	(a5),d1
000011D2 0801 0001                  		btst	#1,d1
000011D6 66F8                       		bne.s	@wait2
000011D8                            
000011D8 3ABC 8F02                  		move.w	#$8F02,(a5)
000011DC 42B8 F616                  		clr.l	(v_scrposy_dup).w
000011E0 42B8 F61A                  		clr.l	(v_scrposx_dup).w
000011E4                            
000011E4 43F8 F800                  		lea	(v_spritetablebuffer).w,a1
000011E8 7000                       		moveq	#0,d0
000011EA 323C 00A0                  		move.w	#($280/4),d1	; This should be ($280/4)-1, leading to a slight bug (first bit of v_pal_water is cleared)
000011EE                            
000011EE                            	@clearsprites:
000011EE 22C0                       		move.l	d0,(a1)+
000011F0 51C9 FFFC                  		dbf	d1,@clearsprites ; clear sprite table (in RAM)
000011F4                            
000011F4 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
000011F8 7000                       		moveq	#0,d0
000011FA 323C 0100                  		move.w	#($400/4),d1	; This should be ($400/4)-1, leading to a slight bug (first bit of the Sonic object's RAM is cleared)
000011FE                            
000011FE                            	@clearhscroll:
000011FE 22C0                       		move.l	d0,(a1)+
00001200 51C9 FFFC                  		dbf	d1,@clearhscroll ; clear hscroll table (in RAM)
00001204 4E75                       		rts	
00001206                            ; End of function ClearScreen
00001206                            
00001206                            ; ---------------------------------------------------------------------------
00001206                            ; Subroutine to	load the sound driver
00001206                            ; ---------------------------------------------------------------------------
00001206                            
00001206                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001206                            
00001206                            
00001206                            SoundDriverLoad:
00001206 4E71                       		nop	
00001208 33FC 0100 00A1 1100        		stopZ80
00001210 33FC 0100 00A1 1200        		resetZ80
00001218 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
0000121E 43F9 00A0 0000             		lea	(z80_ram).l,a1	; target Z80 RAM
00001224 6100 0000                  		bsr.w	KosDec		; decompress
00001228 33FC 0000 00A1 1200        		resetZ80a
00001230 4E71                       		nop	
00001232 4E71                       		nop	
00001234 4E71                       		nop	
00001236 4E71                       		nop	
00001238 33FC 0100 00A1 1200        		resetZ80
00001240 33FC 0000 00A1 1100        		startZ80
00001248 4E75                       		rts	
0000124A                            ; End of function SoundDriverLoad
0000124A                            
0000124A                            		include	"_incObj\sub PlaySound.asm"
0000124A                            ; ---------------------------------------------------------------------------
0000124A                            ; Subroutine to	play a music track
0000124A                            
0000124A                            ; input:
0000124A                            ;	d0 = track to play
0000124A                            ; ---------------------------------------------------------------------------
0000124A                            
0000124A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000124A                            
0000124A                            
0000124A                            PlaySound:
0000124A 11C0 F00A                  		move.b	d0,(v_snddriver_ram+v_soundqueue0).w
0000124E 4E75                       		rts	
00001250                            ; End of function PlaySound
00001250                            
00001250                            ; ---------------------------------------------------------------------------
00001250                            ; Subroutine to	play a sound effect
00001250                            ; ---------------------------------------------------------------------------
00001250                            
00001250                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001250                            
00001250                            
00001250                            PlaySound_Special:
00001250 11C0 F00B                  		move.b	d0,(v_snddriver_ram+v_soundqueue1).w
00001254 4E75                       		rts	
00001256                            ; End of function PlaySound_Special
00001256                            
00001256                            ; ===========================================================================
00001256                            ; ---------------------------------------------------------------------------
00001256                            ; Unused sound/music subroutine
00001256                            ; ---------------------------------------------------------------------------
00001256                            
00001256                            PlaySound_Unused:
00001256 11C0 F00C                  		move.b	d0,(v_snddriver_ram+v_soundqueue2).w
0000125A 4E75                       		rts	
0000125A 4E75                       		rts	
0000125C                            		include	"_inc\PauseGame.asm"
0000125C                            ; ---------------------------------------------------------------------------
0000125C                            ; Subroutine to	pause the game
0000125C                            ; ---------------------------------------------------------------------------
0000125C                            
0000125C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000125C                            
0000125C                            
0000125C                            PauseGame:
0000125C 4E71                       		nop	
0000125E 4A38 FE12                  		tst.b	(v_lives).w	; do you have any lives	left?
00001262 6700                       		beq.s	Unpause		; if not, branch
00001264 4A78 F63A                  		tst.w	(f_pause).w	; is game already paused?
00001268 6600                       		bne.s	Pause_StopGame	; if yes, branch
0000126A 0838 0007 F605             		btst	#bitStart,(v_jpadpress1).w ; is Start button pressed?
00001270 6700                       		beq.s	Pause_DoNothing	; if not, branch
00001272                            
00001272                            Pause_StopGame:
00001272 31FC 0001 F63A             		move.w	#1,(f_pause).w	; freeze time
00001278 11FC 0001 F003             		move.b	#1,(v_snddriver_ram+f_pausemusic).w ; pause music
0000127E                            
0000127E                            Pause_Loop:
0000127E 11FC 0010 F62A             		move.b	#$10,(v_vbla_routine).w
00001284 6100 0000                  		bsr.w	WaitForVBla
00001288 4A38 FFE1                  		tst.b	(f_slomocheat).w ; is slow-motion cheat on?
0000128C 6700                       		beq.s	Pause_ChkStart	; if not, branch
0000128E 0838 0006 F605             		btst	#bitA,(v_jpadpress1).w ; is button A pressed?
00001294 6700                       		beq.s	Pause_ChkBC	; if not, branch
00001296 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; set game mode to 4 (title screen)
0000129C 4E71                       		nop	
0000129E 6000                       		bra.s	Pause_EndMusic
000012A0                            ; ===========================================================================
000012A0                            
000012A0                            Pause_ChkBC:
000012A0 0838 0004 F604             		btst	#bitB,(v_jpadhold1).w ; is button B pressed?
000012A6 6600                       		bne.s	Pause_SlowMo	; if yes, branch
000012A8 0838 0005 F605             		btst	#bitC,(v_jpadpress1).w ; is button C pressed?
000012AE 6600                       		bne.s	Pause_SlowMo	; if yes, branch
000012B0                            
000012B0                            Pause_ChkStart:
000012B0 0838 0007 F605             		btst	#bitStart,(v_jpadpress1).w ; is Start button pressed?
000012B6 67C6                       		beq.s	Pause_Loop	; if not, branch
000012B8                            
000012B8                            Pause_EndMusic:
000012B8 11FC 0080 F003             		move.b	#$80,(v_snddriver_ram+f_pausemusic).w	; unpause the music
000012BE                            
000012BE                            Unpause:
000012BE 31FC 0000 F63A             		move.w	#0,(f_pause).w	; unpause the game
000012C4                            
000012C4                            Pause_DoNothing:
000012C4 4E75                       		rts	
000012C6                            ; ===========================================================================
000012C6                            
000012C6                            Pause_SlowMo:
000012C6 31FC 0001 F63A             		move.w	#1,(f_pause).w
000012CC 11FC 0080 F003             		move.b	#$80,(v_snddriver_ram+f_pausemusic).w	; Unpause the music
000012D2 4E75                       		rts	
000012D4                            ; End of function PauseGame
000012D4                            ; End of function PauseGame
000012D4                            
000012D4                            ; ---------------------------------------------------------------------------
000012D4                            ; Subroutine to	copy a tile map from RAM to VRAM namespace
000012D4                            
000012D4                            ; input:
000012D4                            ;	a1 = tile map address
000012D4                            ;	d0 = VRAM address
000012D4                            ;	d1 = width (cells)
000012D4                            ;	d2 = height (cells)
000012D4                            ; ---------------------------------------------------------------------------
000012D4                            
000012D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012D4                            
000012D4                            
000012D4                            TilemapToVRAM:
000012D4 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
000012DA 283C 0080 0000             		move.l	#$800000,d4
000012E0                            
000012E0                            	Tilemap_Line:
000012E0 2D40 0004                  		move.l	d0,4(a6)	; move d0 to VDP_control_port
000012E4 3601                       		move.w	d1,d3
000012E6                            
000012E6                            	Tilemap_Cell:
000012E6 3C99                       		move.w	(a1)+,(a6)	; write value to namespace
000012E8 51CB FFFC                  		dbf	d3,Tilemap_Cell	; next tile
000012EC D084                       		add.l	d4,d0		; goto next line
000012EE 51CA FFF0                  		dbf	d2,Tilemap_Line	; next line
000012F2 4E75                       		rts	
000012F4                            ; End of function TilemapToVRAM
000012F4                            
000012F4                            		include	"_inc\Nemesis Decompression.asm"
000012F4                            ; ==============================================================================
000012F4                            ; ------------------------------------------------------------------------------
000012F4                            ; Nemesis decompression routine
000012F4                            ; ------------------------------------------------------------------------------
000012F4                            ; Optimized by vladikcomper
000012F4                            ; ------------------------------------------------------------------------------
000012F4                             
000012F4                            NemDec_RAM:
000012F4 48E7 FFDE                      movem.l d0-a1/a3-a6,-(sp)
000012F8 47FA 0000                      lea NemDec_WriteRowToRAM(pc),a3
000012FC 6000                           bra.s   NemDec_Main
000012FE                             
000012FE                            ; ------------------------------------------------------------------------------
000012FE                            NemDec:
000012FE 48E7 FFDE                      movem.l d0-a1/a3-a6,-(sp)
00001302 49F9 00C0 0000                 lea $C00000,a4      ; load VDP Data Port     
00001308 47FA 0000                      lea NemPCD_WriteRowToVDP(pc),a3
0000130C                             
0000130C                            NemDec_Main:
0000130C 43F8 AA00                      lea $FFFFAA00,a1        ; load Nemesis decompression buffer
00001310 3418                           move.w  (a0)+,d2        ; get number of patterns
00001312 6A00                           bpl.s   @0          ; are we in Mode 0?
00001314 47EB 000A                      lea $A(a3),a3       ; if not, use Mode 1
00001318 E74A                       @0  lsl.w   #3,d2
0000131A 3A42                           movea.w d2,a5
0000131C 7607                           moveq   #7,d3
0000131E 7400                           moveq   #0,d2
00001320 7800                           moveq   #0,d4
00001322 6100 0000                      bsr.w   NemDec_BuildCodeTable
00001326 1A18                           move.b  (a0)+,d5        ; get first byte of compressed data
00001328 E145                           asl.w   #8,d5           ; shift up by a byte
0000132A 1A18                           move.b  (a0)+,d5        ; get second byte of compressed data
0000132C 3C3C 0010                      move.w  #$10,d6         ; set initial shift value
00001330 6100                           bsr.s   NemDec2
00001332 4CDF 7BFF                      movem.l (sp)+,d0-a1/a3-a6
00001336 4E75                           rts
00001338                             
00001338                            ; ---------------------------------------------------------------------------
00001338                            ; Part of the Nemesis decompressor, processes the actual compressed data
00001338                            ; ---------------------------------------------------------------------------
00001338                             
00001338                            NemDec2:
00001338 3E06                           move.w  d6,d7
0000133A 5147                           subq.w  #8,d7           ; get shift value
0000133C 3205                           move.w  d5,d1
0000133E EE69                           lsr.w   d7,d1           ; shift so that high bit of the code is in bit position 7
00001340 0C01 00FC                      cmpi.b  #%11111100,d1       ; are the high 6 bits set?
00001344 6400                           bcc.s   NemDec_InlineData   ; if they are, it signifies inline data
00001346 0241 00FF                      andi.w  #$FF,d1
0000134A D241                           add.w   d1,d1
0000134C 9C31 1000                      sub.b   (a1,d1.w),d6        ; ~~ subtract from shift value so that the next code is read next time around
00001350 0C46 0009                      cmpi.w  #9,d6           ; does a new byte need to be read?
00001354 6400                           bcc.s   @0          ; if not, branch
00001356 5046                           addq.w  #8,d6
00001358 E145                           asl.w   #8,d5
0000135A 1A18                           move.b  (a0)+,d5        ; read next byte
0000135C 1231 1001                  @0  move.b  1(a1,d1.w),d1
00001360 3001                           move.w  d1,d0
00001362 0241 000F                      andi.w  #$F,d1          ; get palette index for pixel
00001366 0240 00F0                      andi.w  #$F0,d0
0000136A                             
0000136A                            NemDec_GetRepeatCount:
0000136A E848                           lsr.w   #4,d0           ; get repeat count
0000136C                             
0000136C                            NemDec_WritePixel:
0000136C E98C                           lsl.l   #4,d4           ; shift up by a nybble
0000136E 8801                           or.b    d1,d4           ; write pixel
00001370 51CB 0000                      dbf d3,NemDec_WritePixelLoop; ~~
00001374 4ED3                           jmp (a3)            ; otherwise, write the row to its destination
00001376                            ; ---------------------------------------------------------------------------
00001376                             
00001376                            NemPCD_NewRow:
00001376 7800                           moveq   #0,d4           ; reset row
00001378 7607                           moveq   #7,d3           ; reset nybble counter
0000137A                             
0000137A                            NemDec_WritePixelLoop:
0000137A 51C8 FFF0                      dbf d0,NemDec_WritePixel
0000137E 60B8                           bra.s   NemDec2
00001380                            ; ---------------------------------------------------------------------------
00001380                             
00001380                            NemDec_InlineData:
00001380 5D46                           subq.w  #6,d6           ; 6 bits needed to signal inline data
00001382 0C46 0009                      cmpi.w  #9,d6
00001386 6400                           bcc.s   @0
00001388 5046                           addq.w  #8,d6
0000138A E145                           asl.w   #8,d5
0000138C 1A18                           move.b  (a0)+,d5
0000138E 5F46                       @0  subq.w  #7,d6           ; and 7 bits needed for the inline data itself
00001390 3205                           move.w  d5,d1
00001392 EC69                           lsr.w   d6,d1           ; shift so that low bit of the code is in bit position 0
00001394 3001                           move.w  d1,d0
00001396 0241 000F                      andi.w  #$F,d1          ; get palette index for pixel
0000139A 0240 0070                      andi.w  #$70,d0         ; high nybble is repeat count for pixel
0000139E 0C46 0009                      cmpi.w  #9,d6
000013A2 64C6                           bcc.s   NemDec_GetRepeatCount
000013A4 5046                           addq.w  #8,d6
000013A6 E145                           asl.w   #8,d5
000013A8 1A18                           move.b  (a0)+,d5
000013AA 60BE                           bra.s   NemDec_GetRepeatCount
000013AC                             
000013AC                            ; ---------------------------------------------------------------------------
000013AC                            ; Subroutines to output decompressed entry
000013AC                            ; Selected depending on current decompression mode
000013AC                            ; ---------------------------------------------------------------------------
000013AC                             
000013AC                            NemPCD_WriteRowToVDP:
000013AC                            loc_1502:
000013AC 2884                           move.l  d4,(a4)         ; write 8-pixel row
000013AE 534D                           subq.w  #1,a5
000013B0 380D                           move.w  a5,d4           ; have all the 8-pixel rows been written?
000013B2 66C2                           bne.s   NemPCD_NewRow         ; if not, branch
000013B4 4E75                           rts
000013B6                            ; ---------------------------------------------------------------------------
000013B6                             
000013B6                            NemPCD_WriteRowToVDP_XOR:
000013B6 B982                           eor.l   d4,d2           ; XOR the previous row by the current row
000013B8 2882                           move.l  d2,(a4)         ; and write the result
000013BA 534D                           subq.w  #1,a5
000013BC 380D                           move.w  a5,d4
000013BE 66B6                           bne.s   NemPCD_NewRow
000013C0 4E75                           rts
000013C2                            ; ---------------------------------------------------------------------------
000013C2                             
000013C2                            NemDec_WriteRowToRAM:
000013C2 28C4                           move.l  d4,(a4)+        ; write 8-pixel row
000013C4 534D                           subq.w  #1,a5
000013C6 380D                           move.w  a5,d4           ; have all the 8-pixel rows been written?
000013C8 66AC                           bne.s   NemPCD_NewRow         ; if not, branch
000013CA 4E75                           rts
000013CC                            ; ---------------------------------------------------------------------------
000013CC                             
000013CC                            NemDec_WriteRowToRAM_XOR:
000013CC B982                           eor.l   d4,d2           ; XOR the previous row by the current row
000013CE 28C2                           move.l  d2,(a4)+        ; and write the result
000013D0 534D                           subq.w  #1,a5
000013D2 380D                           move.w  a5,d4
000013D4 66A0                           bne.s   NemPCD_NewRow
000013D6 4E75                           rts
000013D8                             
000013D8                            ; ---------------------------------------------------------------------------
000013D8                            ; Part of the Nemesis decompressor, builds the code table (in RAM)
000013D8                            ; ---------------------------------------------------------------------------
000013D8                             
000013D8                            NemDec_BuildCodeTable:
000013D8 1018                           move.b  (a0)+,d0        ; read first byte
000013DA                             
000013DA                            @ChkEnd:
000013DA 0C00 00FF                      cmpi.b  #$FF,d0         ; has the end of the code table description been reached?
000013DE 6600                           bne.s   @NewPalIndex        ; if not, branch
000013E0 4E75                           rts
000013E2                            ; ---------------------------------------------------------------------------
000013E2                             
000013E2                            @NewPalIndex:
000013E2 3E00                           move.w  d0,d7
000013E4                             
000013E4                            @ItemLoop:
000013E4 1018                           move.b  (a0)+,d0        ; read next byte
000013E6 6BF2                           bmi.s   @ChkEnd         ; ~~
000013E8 1200                           move.b  d0,d1
000013EA 0247 000F                      andi.w  #$F,d7          ; get palette index
000013EE 0241 0070                      andi.w  #$70,d1         ; get repeat count for palette index
000013F2 8E41                           or.w    d1,d7           ; combine the two
000013F4 0240 000F                      andi.w  #$F,d0          ; get the length of the code in bits
000013F8 1200                           move.b  d0,d1
000013FA E149                           lsl.w   #8,d1
000013FC 8E41                           or.w    d1,d7           ; combine with palette index and repeat count to form code table entry
000013FE 7208                           moveq   #8,d1
00001400 9240                           sub.w   d0,d1           ; is the code 8 bits long?
00001402 6600                           bne.s   @ItemShortCode      ; if not, a bit of extra processing is needed
00001404 1018                           move.b  (a0)+,d0        ; get code
00001406 D040                           add.w   d0,d0           ; each code gets a word-sized entry in the table
00001408 3387 0000                      move.w  d7,(a1,d0.w)        ; store the entry for the code
0000140C 60D6                           bra.s   @ItemLoop       ; repeat
0000140E                            ; ---------------------------------------------------------------------------
0000140E                             
0000140E                            @ItemShortCode:
0000140E 1018                           move.b  (a0)+,d0        ; get code
00001410 E368                           lsl.w   d1,d0           ; shift so that high bit is in bit position 7
00001412 D040                           add.w   d0,d0           ; get index into code table
00001414 7A01                           moveq   #1,d5
00001416 E36D                           lsl.w   d1,d5
00001418 5345                           subq.w  #1,d5           ; d5 = 2^d1 - 1
0000141A 4DF1 0000                      lea (a1,d0.w),a6        ; ~~
0000141E                             
0000141E                            @ItemShortCodeLoop:
0000141E 3CC7                           move.w  d7,(a6)+        ; ~~ store entry
00001420 51CD FFFC                      dbf d5,@ItemShortCodeLoop   ; repeat for required number of entries
00001424 60BE                           bra.s   @ItemLoop
00001424 60BE                           bra.s   @ItemLoop
00001426                            
00001426                              
00001426                                pusho	; buffer local label symbol config
00001426                                opt ws+  ; change local label symbol to '.'
00001426                            
00001426                            ; ---------------------------------------------------------------------------
00001426                            ; MACRO ResetDMAQueue
00001426                            ; Clears the DMA queue, discarding all previously-queued DMAs.
00001426                            ; ---------------------------------------------------------------------------
00001426                            ; ROUTINE Process_DMA_Queue / ProcessDMAQueue
00001426                            ; Performs all queued DMA transfers and clears the DMA queue.
00001426                            ;
00001426                            ; Output:
00001426                            ; 	a1,a5	trashed
00001426                            ; ---------------------------------------------------------------------------
00001426                            ; ROUTINE InitDMAQueue
00001426                            ; Pre-initializes the DMA queue with VDP register numbers in alternating bytes.
00001426                            ; Must be called before the queue is used, and the queue expects that only it
00001426                            ; write to this region of RAM.
00001426                            ;
00001426                            ; Output:
00001426                            ; 	a0,d0,d1	trashed
00001426                            ; ---------------------------------------------------------------------------
00001426                            ; ROUTINE Add_To_DMA_Queue / QueueDMATransfer
00001426                            ; Queues a DMA with parameters given in registers.
00001426                            ;
00001426                            ; Options:
00001426                            ; 	AssumeSourceAddressInBytes (default 1)
00001426                            ; 	AssumeSourceAddressIsRAMSafe (default 0)
00001426                            ; 	UseRAMSourceSafeDMA (default 1&(AssumeSourceAddressIsRAMSafe=0))
00001426                            ; 	Use128kbSafeDMA (default 0)
00001426                            ; 	UseVIntSafeDMA (default 0)
00001426                            ; Input:
00001426                            ; 	d1	Source address (in bytes, or in words if AssumeSourceAddressInBytes is
00001426                            ; 		set to 0)
00001426                            ; 	d2	Destination address
00001426                            ; 	d3	Transfer length (in words)
00001426                            ; Output:
00001426                            ; 	d0,d1,d2,d3,a1	trashed
00001426                            ;
00001426                            ; With the default settings, runs in:
00001426                            ; * 48(11/0) cycles if queue is full (DMA discarded)
00001426                            ; * 184(29/9) cycles otherwise (DMA queued)
00001426                            ;
00001426                            ; With Use128kbSafeDMA = 1, runs in:
00001426                            ; * 48(11/0) cycles if queue is full at the start (DMA discarded)
00001426                            ; * 200(32/9) cycles if the DMA does not cross a 128kB boundary (DMA queued)
00001426                            ; * 226(38/9) cycles if the DMA crosses a 128kB boundary, and the first piece
00001426                            ;   fills the queue (second piece is discarded)
00001426                            ; * 338(56/17) cycles if the DMA crosses a 128kB boundary, and the queue has
00001426                            ;   space for both pieces (both pieces queued)
00001426                            ;
00001426                            ; Setting UseVIntSafeDMA to 1 adds 46(6/1) cycles to all times.
00001426                            ;
00001426                            ; Setting AssumeSourceAddressInBytes to 0 reduces all times by 10(1/0) cycles,
00001426                            ; but only if the DMA is not entirely discarded. However, all callers must be
00001426                            ; edited to make sure the adresss given is correct.
00001426                            ;
00001426                            ; Setting AssumeSourceAddressIsRAMSafe to 1, or UseRAMSourceSafeDMA to 0,
00001426                            ; reduces all times by 14(2/0) cycles, but only if the DMA is not entirely
00001426                            ; discarded. However, all callers must be edited to make sure the adresss given
00001426                            ; in the correct form. You can use the dmaSource function for that.
00001426                            ; ---------------------------------------------------------------------------
00001426                            ; MACRO QueueStaticDMA
00001426                            ; Directly queues a DMA on the spot. Requires all parameters to be known at
00001426                            ; assembly time; that is, no registers. Gives assembly errors when the DMA
00001426                            ; crosses a 128kB boundary, is at an odd ROM location, or is zero length.
00001426                            ;
00001426                            ; Options:
00001426                            ; 	UseVIntSafeDMA (default 0)
00001426                            ; Input:
00001426                            ; 	Source address (in bytes), transfer length (in bytes), destination address
00001426                            ; Output:
00001426                            ; 	d0,a1	trashed
00001426                            ;
00001426                            ; With the default settings, runs in:
00001426                            ; * 32(7/0) cycles if queue is full (DMA discarded)
00001426                            ; * 122(21/8) cycles otherwise (DMA queued)
00001426                            ;
00001426                            ; Setting UseVIntSafeDMA to 1 adds 46(6/1) cycles to both cases.
00001426                            ; ===========================================================================
00001426                            ; option: AssumeSourceAddressInBytes
00001426                            ;
00001426                            ; This option makes the function work as a drop-in replacement of the original
00001426                            ; functions. If you modify all callers to supply a position in words instead of
00001426                            ; bytes (i.e., divide source address by 2) you can set this to 0 to gain 10(1/0)
00001426 =00000001                  AssumeSourceAddressInBytes = 1
00001426                            ; ===========================================================================
00001426                            ; option: AssumeSourceAddressIsRAMSafe
00001426                            ;
00001426                            ; This option (which is disabled by default) makes the DMA queue assume that the
00001426                            ; source address is given to the function in a way that makes them safe to use
00001426                            ; with RAM sources. You need to edit all callers to ensure this.
00001426                            ; Enabling this option turns off UseRAMSourceSafeDMA, and saves 14(2/0).
00001426 =00000000                  AssumeSourceAddressIsRAMSafe = 0
00001426                            ; ===========================================================================
00001426                            ; option: UseRAMSourceSafeDMA
00001426                            ;
00001426                            ; This option (which is enabled by default) makes source addresses in RAM safe
00001426                            ; at the cost of 14(2/0). If you modify all callers so as to clear the top byte
00001426                            ; of source addresses (i.e., by ANDing them with $FFFFFF).
00001426 =00000001                  UseRAMSourceSafeDMA = 1&(AssumeSourceAddressIsRAMSafe=0)
00001426                            ; ===========================================================================
00001426                            ; option: Use128kbSafeDMA
00001426                            ;
00001426                            ; This option breaks DMA transfers that crosses a 128kB block into two. It is
00001426                            ; disabled by default because you can simply align the art in ROM and avoid the
00001426                            ; issue altogether. It is here so that you have a high-performance routine to do
00001426                            ; the job in situations where you can't align it in ROM.
00001426 =00000001                  Use128kbSafeDMA = 1
00001426                            ; ===========================================================================
00001426                            ; option UseVIntSafeDMA
00001426                            ;
00001426                            ; Option to mask interrupts while updating the DMA queue. This fixes many race
00001426                            ; conditions in the DMA funcion, but it costs 46(6/1) cycles. The better way to
00001426                            ; handle these race conditions would be to make unsafe callers (such as S3&K's
00001426                            ; KosM decoder) prevent these by masking off interrupts before calling and then
00001426                            ; restore interrupts after.
00001426 =00000000                  UseVIntSafeDMA = 0
00001426                            ; ===========================================================================
00001426                            
00001426                            
00001426                            ; Convenience macros, for increased maintainability of the code.
00001426 =00000027                  DMA = %100111
00001426 =00000021                  VRAM = %100001
00001426                            ; Like vdpComm, but starting from an address contained in a register
00001426 =00000001                  vdpCommReg_defined = 1
00001426                            vdpCommReg macro reg,type,rwd,clr
00001426                            	lsl.l	#2,\reg							; Move high bits into (word-swapped) position, accidentally moving everything else
00001426                            	if ((\type&\rwd)&3)<>0
00001426                            		addq.w	#((\type&\rwd)&3),\reg			; Add upper access type bits
00001426                            	endif
00001426                            	ror.w	#2,\reg							; Put upper access type bits into place, also moving all other bits into their correct (word-swapped) places
00001426                            	swap	\reg								; Put all bits in proper places
00001426                            	if \clr <> 0
00001426                            		andi.w	#3,\reg						; Strip whatever junk was in upper word of reg
00001426                            	endif
00001426                            	if ((\type&\rwd)&$FC)=$20
00001426                            		tas.b	\reg							; Add in the DMA flag -- tas fails on memory, but works on registers
00001426                            	elseif ((\type&\rwd)&$FC)<>0
00001426                            		ori.w	#(((\type&\rwd)&$FC)<<2),\reg	; Add in missing access type bits
00001426                            	endif
00001426                            	endm
00001426                            ; ---------------------------------------------------------------------------
00001426 =00000001                  intMacros_defined = 1
00001426                            enableInts macro
00001426                            	move	#$2300,sr
00001426                            	endm
00001426                            
00001426                            disableInts macro
00001426                            	move	#$2700,sr
00001426                            	endm
00001426                            ; ---------------------------------------------------------------------------
00001426 =00000001                  DMAEntry_defined = 1
00001426                                    rsreset
00001426 =00000000                  DMAEntry.Reg94:		rs.b	1
00001426                            			  
00001426 =00000001                  DMAEntry.Size:      rs.b    0
00001426 =00000001                  DMAEntry.SizeH:		rs.b	1
00001426 =00000002                  DMAEntry.Reg93:		rs.b	1
00001426 =00000003                  DMAEntry.Source:    rs.b    0
00001426 =00000003                  DMAEntry.SizeL:		rs.b	1
00001426 =00000004                  DMAEntry.Reg97:		rs.b	1
00001426 =00000005                  DMAEntry.SrcH:		rs.b	1
00001426 =00000006                  DMAEntry.Reg96:		rs.b	1
00001426 =00000007                  DMAEntry.SrcM:		rs.b	1
00001426 =00000008                  DMAEntry.Reg95:		rs.b	1
00001426 =00000009                  DMAEntry.SrcL:		rs.b	1
00001426 =0000000A                  DMAEntry.Command:	rs.l	1
00001426 =0000000E                  DMAEntry.len:   rs.w    0
00001426                            ; ---------------------------------------------------------------------------
00001426 =00000012                  QueueSlotCount = (VDP_Command_Buffer_Slot-VDP_Command_Buffer)/DMAEntry.len
00001426                            ; ---------------------------------------------------------------------------
00001426                            						
00001426                            										   
00001426                            									   
00001426                            	  
00001426                            																			 
00001426                            							  
00001426 =00000001                  QueueStaticDMA_defined = 1
00001426                            ; Expects source address and DMA length in bytes. Also, expects source, size, and dest to be known
00001426                            ; at assembly time. Gives errors if DMA starts at an odd address, transfers
00001426                            ; crosses a 128kB boundary, or has size 0.
00001426                            QueueStaticDMA macro src,length,dest
00001426                                local   len
00001426                            		if ((\src)&1)<>0
00001426                            			inform 3,"DMA queued from odd source \1!"
00001426                            		endif
00001426                            		if ((\length)&1)<>0
00001426                            			inform 3,"DMA an odd number of bytes \2!"
00001426                            		endif
00001426                            		if (\length)=0
00001426                            			inform 3,"DMA transferring 0 bytes (becomes a 128kB transfer). If you really mean it, pass 128kB instead."
00001426                            		endif
00001426                            		if (((\src)+(\length)-1)>>17)<>((\src)>>17)
00001426                            			inform 3,"DMA crosses a 128kB boundary. You should either split the DMA manually or align the source adequately."
00001426                            		endif
00001426                            	  
00001426                            	if UseVIntSafeDMA=1
00001426                            		move.w	sr,-(sp)										; Save current interrupt mask
00001426                            		disableInts												; Mask off interrupts
00001426                            	endif ; UseVIntSafeDMA=1
00001426                            	movea.w	(VDP_Command_Buffer_Slot).w,a1
00001426                            	cmpa.w	#VDP_Command_Buffer_Slot,a1
00001426                            	beq.s	.done												; Return if there's no more room in the buffer
00001426                            	len: = ((length>>1)&$7FFF)
00001426                                move.b	#(len>>8)&$FF,DMAEntry.SizeH(a1)		; Write top byte of size/2
00001426                            	move.l	#((len&$FF)<<24)|((src>>1)&$7FFFFF),d0	; Set d0 to bottom byte of size/2 and the low 3 bytes of source/2
00001426                            	movep.l	d0,DMAEntry.SizeL(a1)								; Write it all to the queue
00001426                            	lea	DMAEntry.Command(a1),a1									; Seek to correct RAM address to store VDP DMA command
00001426                            	move.l	#$40000080,(a1)+						; Write VDP DMA command for destination address
00001426                            	move.w	a1,(VDP_Command_Buffer_Slot).w						; Write next queue slot
00001426                            .done:
00001426                            	if UseVIntSafeDMA=1
00001426                            		move.w	(sp)+,sr										; Restore interrupts to previous state
00001426                            	endif ;UseVIntSafeDMA=1
00001426                            	endm
00001426                            
00001426                                
00001426                            
00001426                            ; ---------------------------------------------------------------------------
00001426                            ResetDMAQueue: macro
00001426                            	move.w	#VDP_Command_Buffer,(VDP_Command_Buffer_Slot).w
00001426                            	endm
00001426                            ; ===========================================================================
00001426                            
00001426                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001426                            
00001426                            ; sub_144E: DMA_68KtoVRAM: QueueCopyToVRAM: QueueVDPCommand:
00001426                            Add_To_DMA_Queue:
00001426                            QueueDMATransfer:
00001426 3278 C8FC                  	movea.w	(VDP_Command_Buffer_Slot).w,a1
0000142A B2FC C8FC                  	cmpa.w	#VDP_Command_Buffer_Slot,a1
0000142E 6700                       	beq.s	.done											; Return if there's no more room in the buffer
00001430                            
00001430 E289                       		lsr.l	#1,d1										; Source address is in words for the VDP registers
00001432 0881 0017                  		bclr.l	#23,d1										; Make sure bit 23 is clear (68k->VDP DMA flag)
00001436 03C9 0003                  	movep.l	d1,DMAEntry.Source(a1)							; Write source address; the useless top byte will be overwritten later
0000143A 7000                       	moveq	#0,d0											; We need a zero on d0
0000143C                            
0000143C                            		; Detect if transfer crosses 128KB boundary
0000143C                            		; Using sub+sub instead of move+add handles the following edge cases:
0000143C                            		; (1) d3.w = 0 => 128kB transfer
0000143C                            		;   (a) d1.w = 0 => no carry, don't split the DMA
0000143C                            		;   (b) d1.w != 0 => carry, need to split the DMA
0000143C                            		; (2) d3.w != 0
0000143C                            		;   (a) if there is carry on d1.w + d3.w
0000143C                            		;     (* ) if d1.w + d3.w = 0 => transfer comes entirely from current 128kB block, don't split the DMA
0000143C                            		;     (**) if d1.w + d3.w != 0 => need to split the DMA
0000143C                            		;   (b) if there is no carry on d1.w + d3.w => don't split the DMA
0000143C                            		; The reason this works is that carry on d1.w + d3.w means that
0000143C                            		; d1.w + d3.w >= $10000, whereas carry on (-d3.w) - (d1.w) means that
0000143C                            		; d1.w + d3.w > $10000.
0000143C 9043                       		sub.w	d3,d0										; Using sub instead of move and add allows checking edge cases
0000143E 9041                       		sub.w	d1,d0										; Does the transfer cross over to the next 128kB block?
00001440 6500                       		bcs.s	.doubletransfer								; Branch if yes
00001442                            	; It does not cross a 128kB boundary. So just finish writing it.
00001442 0789 0001                  	movep.w	d3,DMAEntry.Size(a1)							; Write DMA length, overwriting useless top byte of source address
00001446                            
00001446                            .finishxfer:
00001446                            	; Command to specify destination address and begin DMA
00001446 3002                       	move.w	d2,d0											; Use the fact that top word of d0 is zero to avoid clearing on vdpCommReg
00001452 43E9 000A                  	lea	DMAEntry.Command(a1),a1								; Seek to correct RAM address to store VDP DMA command
00001456 22C0                       	move.l	d0,(a1)+										; Write VDP DMA command for destination address
00001458 31C9 C8FC                  	move.w	a1,(VDP_Command_Buffer_Slot).w					; Write next queue slot
0000145C                            
0000145C                            .done:
0000145C 4E75                       	rts
0000145E                            ; ---------------------------------------------------------------------------
0000145E                            .doubletransfer:
0000145E                            		; We need to split the DMA into two parts, since it crosses a 128kB block
0000145E D043                       		add.w	d3,d0										; Set d0 to the number of words until end of current 128kB block
00001460 0189 0001                  		movep.w	d0,DMAEntry.Size(a1)						; Write DMA length of first part, overwriting useless top byte of source addres
00001464                            
00001464 B2FC C8EE                  		cmpa.w	#VDP_Command_Buffer_Slot-DMAEntry.len,a1	; Does the queue have enough space for both parts?
00001468 67DC                       		beq.s	.finishxfer									; Branch if not
0000146A                            
0000146A                            		; Get second transfer's source, destination, and length
0000146A 9640                       		sub.w	d0,d3										; Set d3 to the number of words remaining
0000146C D280                       		add.l	d0,d1										; Offset the source address of the second part by the length of the first part
0000146E D040                       		add.w	d0,d0										; Convert to number of bytes
00001470 D042                       		add.w	d2,d0										; Set d0 to the VRAM destination of the second part
00001472                            
00001472                            		; If we know top word of d2 is clear, the following vdpCommReg can be set to not
00001472                            		; clear it. There is, unfortunately, no faster way to clear it than this.
00001480 2342 000A                  		move.l	d2,DMAEntry.Command(a1)						; Write VDP DMA command for destination address of first part
00001484                            
00001484                            		; Do second transfer
00001484 03C9 0011                  		movep.l	d1,DMAEntry.len+DMAEntry.Source(a1)			; Write source address of second part; useless top byte will be overwritten later
00001488 0789 000F                  		movep.w	d3,DMAEntry.len+DMAEntry.Size(a1)			; Write DMA length of second part, overwriting useless top byte of source addres
0000148C                            
0000148C                            		; Command to specify destination address and begin DMA
00001496 43E9 0018                  		lea	DMAEntry.len+DMAEntry.Command(a1),a1			; Seek to correct RAM address to store VDP DMA command of second part
0000149A 22C0                       		move.l	d0,(a1)+									; Write VDP DMA command for destination address of second part
0000149C                            
0000149C 31C9 C8FC                  		move.w	a1,(VDP_Command_Buffer_Slot).w				; Write next queue slot
000014A0 4E75                       		rts
000014A2                            ; End of function QueueDMATransfer
000014A2                            ; ===========================================================================
000014A2                            
000014A2                            ; ---------------------------------------------------------------------------
000014A2                            ; Subroutine for issuing all VDP commands that were queued
000014A2                            ; (by earlier calls to QueueDMATransfer)
000014A2                            ; Resets the queue when it's done
000014A2                            ; ---------------------------------------------------------------------------
000014A2                            
000014A2                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000014A2                            
000014A2                            ; sub_14AC: CopyToVRAM: IssueVDPCommands: Process_DMA:
000014A2                            Process_DMA_Queue:
000014A2                            ProcessDMAQueue:
000014A2 3278 C8FC                  	movea.w	(VDP_Command_Buffer_Slot).w,a1
000014A6 4EE9 0000                  	jmp	.jump_table-VDP_Command_Buffer(a1)
000014AA                            ; ---------------------------------------------------------------------------
000014AA                            .jump_table:
000014AA 4E75                       	rts
000014AC                            	rept 6
000014AC                            		trap	#0											; Just in case
000014AC 4E40 4E40 4E40 4E40 4E40+  	endr
000014B8                            ; ---------------------------------------------------------------------------
000014B8 =00000001                      c: = 1
000014B8                            	rept QueueSlotCount
000014B8                            		lea	(vdp_control_port).l,a5
000014B8                            		lea	(VDP_Command_Buffer).w,a1
000014B8                            		if c<>QueueSlotCount
000014B8                            			bra.w	.jump0 - c*8
000014B8                            		endif
000014B8                                c: = c + 1
000015B0                            ; ---------------------------------------------------------------------------
000015B0                            	rept QueueSlotCount
000015B0                            		move.l	(a1)+,(a5)									; Transfer length
000015B0                            		move.l	(a1)+,(a5)									; Source address high
000015B0                            		move.l	(a1)+,(a5)									; Source address low + destination high
000015B0                            		move.w	(a1)+,(a5)									; Destination low, trigger DMA
000015B0 2A99 2A99 2A99 3A99 2A99+  	endr
00001640                            
00001640                            .jump0:
00001640 31FC C800 C8FC             	ResetDMAQueue
00001646 4E75                       	rts
00001648                            ; End of function ProcessDMAQueue
00001648                            ; ===========================================================================
00001648                            
00001648                            ; ---------------------------------------------------------------------------
00001648                            ; Subroutine for initializing the DMA queue.
00001648                            ; ---------------------------------------------------------------------------
00001648                            
00001648                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001648                            
00001648                            InitDMAQueue:
00001648 41F8 C800                  	lea	(VDP_Command_Buffer).w,a0
0000164C 7094                       	moveq	#-$6C,d0				; fast-store $94 (sign-extended) in d0
0000164E 223C 9397 9695             	move.l	#$93979695,d1
00001654 =00000000                      c: = 0
00001654                            	rept QueueSlotCount
00001654                            		move.b	d0,c + DMAEntry.Reg94(a0)
00001654                            		movep.l	d1,c + DMAEntry.Reg93(a0)
00001654                                c: = c + DMAEntry.len
00001654 1080 03C8 0002 1140 000E+  	endr
000016E2                            
000016E2 31FC C800 C8FC             	ResetDMAQueue
000016E8 4E75                       	rts
000016EA                            ; End of function ProcessDMAQueue
000016EA                            ; ===========================================================================
000016EA                            
000016EA                            
000016EA                                popo	; buffer local label symbol config
000016EA                            
000016EA                            
000016EA                            ; ---------------------------------------------------------------------------
000016EA                            ; Subroutine to load pattern load cues (aka to queue pattern load requests)
000016EA                            ; ---------------------------------------------------------------------------
000016EA                            
000016EA                            ; ARGUMENTS
000016EA                            ; d0 = index of PLC list
000016EA                            ; ---------------------------------------------------------------------------
000016EA                            
000016EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016EA                            
000016EA                            ; LoadPLC:
000016EA                            AddPLC:
000016EA 48E7 0060                  		movem.l	a1-a2,-(sp)
000016EE 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000016F4 D040                       		add.w	d0,d0
000016F6 3031 0000                  		move.w	(a1,d0.w),d0
000016FA 43F1 0000                  		lea	(a1,d0.w),a1		; jump to relevant PLC
000016FE 45F8 F680                  		lea	(v_plc_buffer).w,a2 ; PLC buffer space
00001702                            
00001702                            	@findspace:
00001702 4A92                       		tst.l	(a2)		; is space available in RAM?
00001704 6700                       		beq.s	@copytoRAM	; if yes, branch
00001706 5C4A                       		addq.w	#6,a2		; if not, try next space
00001708 60F8                       		bra.s	@findspace
0000170A                            ; ===========================================================================
0000170A                            
0000170A                            @copytoRAM:
0000170A 3019                       		move.w	(a1)+,d0	; get length of PLC
0000170C 6B00                       		bmi.s	@skip
0000170E                            
0000170E                            	@loop:
0000170E 24D9                       		move.l	(a1)+,(a2)+
00001710 34D9                       		move.w	(a1)+,(a2)+	; copy PLC to RAM
00001712 51C8 FFFA                  		dbf	d0,@loop	; repeat for length of PLC
00001716                            
00001716                            	@skip:
00001716 4CDF 0600                  		movem.l	(sp)+,a1-a2 ; a1=object
0000171A 4E75                       		rts	
0000171C                            ; End of function AddPLC
0000171C                            
0000171C                            
0000171C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000171C                            ; Queue pattern load requests, but clear the PLQ first
0000171C                            
0000171C                            ; ARGUMENTS
0000171C                            ; d0 = index of PLC list (see ArtLoadCues)
0000171C                            
0000171C                            ; NOTICE: This subroutine does not check for buffer overruns. The programmer
0000171C                            ;	  (or hacker) is responsible for making sure that no more than
0000171C                            ;	  16 load requests are copied into the buffer.
0000171C                            ;	  _________DO NOT PUT MORE THAN 16 LOAD REQUESTS IN A LIST!__________
0000171C                            ;         (or if you change the size of Plc_Buffer, the limit becomes (Plc_Buffer_Only_End-Plc_Buffer)/6)
0000171C                            
0000171C                            ; LoadPLC2:
0000171C                            NewPLC:
0000171C 48E7 0060                  		movem.l	a1-a2,-(sp)
00001720 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
00001726 D040                       		add.w	d0,d0
00001728 3031 0000                  		move.w	(a1,d0.w),d0
0000172C 43F1 0000                  		lea	(a1,d0.w),a1	; jump to relevant PLC
00001730 6100                       		bsr.s	ClearPLC	; erase any data in PLC buffer space
00001732 45F8 F680                  		lea	(v_plc_buffer).w,a2
00001736 3019                       		move.w	(a1)+,d0	; get length of PLC
00001738 6B00                       		bmi.s	@skip		; if it's negative, skip the next loop
0000173A                            
0000173A                            	@loop:
0000173A 24D9                       		move.l	(a1)+,(a2)+
0000173C 34D9                       		move.w	(a1)+,(a2)+	; copy PLC to RAM
0000173E 51C8 FFFA                  		dbf	d0,@loop		; repeat for length of PLC
00001742                            
00001742                            	@skip:
00001742 4CDF 0600                  		movem.l	(sp)+,a1-a2
00001746 4E75                       		rts	
00001748                            ; End of function NewPLC
00001748                            
00001748                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001748                            
00001748                            ; ---------------------------------------------------------------------------
00001748                            ; Subroutine to	clear the pattern load cues
00001748                            ; ---------------------------------------------------------------------------
00001748                            
00001748                            ; Clear the pattern load queue ($FFF680 - $FFF700)
00001748                            
00001748                            
00001748                            ClearPLC:
00001748 45F8 F680                  		lea	(v_plc_buffer).w,a2 ; PLC buffer space in RAM
0000174C 701F                       		moveq	#$1F,d0	; bytesToLcnt(v_plc_buffer_end-v_plc_buffer)
0000174E                            
0000174E                            	@loop:
0000174E 429A                       		clr.l	(a2)+
00001750 51C8 FFFC                  		dbf	d0,@loop
00001754 4E75                       		rts	
00001756                            ; End of function ClearPLC
00001756                            
00001756                            ; ---------------------------------------------------------------------------
00001756                            ; Subroutine to	use graphics listed in a pattern load cue
00001756                            ; ---------------------------------------------------------------------------
00001756                            
00001756                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001756                            
00001756                            
00001756                            RunPLC:
00001756 4AB8 F680                  		tst.l	(v_plc_buffer).w
0000175A 6700                       		beq.s	Rplc_Exit
0000175C 4A78 F6F8                  		tst.w	(f_plc_execute).w
00001760 6600                       		bne.s	Rplc_Exit
00001762 2078 F680                  		movea.l	(v_plc_buffer).w,a0
00001766 47F9 0000 13AC             		lea	(NemPCD_WriteRowToVDP).l,a3
0000176C 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
00001770 3418                       		move.w	(a0)+,d2
00001772 6A00                       		bpl.s	loc_160E
00001774 D6FC 000A                  		adda.w	#$A,a3
00001778                            
00001778                            loc_160E:
00001778 0242 7FFF                  		andi.w	#$7FFF,d2
0000177C 31C2 F6F8                  		move.w	d2,(f_plc_execute).w
00001780 6100 FC56                  		bsr.w	NemDec_BuildCodeTable
00001784 1A18                       		move.b	(a0)+,d5
00001786 E145                       		asl.w	#8,d5
00001788 1A18                       		move.b	(a0)+,d5
0000178A 7C10                       		moveq	#$10,d6
0000178C 7000                       		moveq	#0,d0
0000178E 21C8 F680                  		move.l	a0,(v_plc_buffer).w
00001792 21CB F6E0                  		move.l	a3,(v_ptrnemcode).w
00001796 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
0000179A 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
0000179E 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
000017A2 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000017A6 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000017AA                            
000017AA                            Rplc_Exit:
000017AA 4E75                       		rts	
000017AC                            ; End of function RunPLC
000017AC                            
000017AC                            
000017AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017AC                            
000017AC                            
000017AC                            sub_1642:
000017AC 4A78 F6F8                  		tst.w	(f_plc_execute).w
000017B0 6700 0000                  		beq.w	locret_16DA
000017B4 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
000017BA 7000                       		moveq	#0,d0
000017BC 3038 F684                  		move.w	($FFFFF684).w,d0
000017C0 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
000017C6 6000                       		bra.s	loc_1676
000017C8                            ; End of function sub_1642
000017C8                            
000017C8                            
000017C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017C8                            
000017C8                            
000017C8                            ; sub_165E:
000017C8                            ProcessDPLC2:
000017C8 4A78 F6F8                  		tst.w	(f_plc_execute).w
000017CC 6700                       		beq.s	locret_16DA
000017CE 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
000017D4 7000                       		moveq	#0,d0
000017D6 3038 F684                  		move.w	($FFFFF684).w,d0
000017DA 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
000017E0                            
000017E0                            loc_1676:
000017E0 49F9 00C0 0004             		lea	(vdp_control_port).l,a4
000017E6 E588                       		lsl.l	#2,d0
000017E8 E448                       		lsr.w	#2,d0
000017EA 0040 4000                  		ori.w	#$4000,d0
000017EE 4840                       		swap	d0
000017F0 2880                       		move.l	d0,(a4)
000017F2 594C                       		subq.w	#4,a4
000017F4 2078 F680                  		movea.l	(v_plc_buffer).w,a0
000017F8 2678 F6E0                  		movea.l	(v_ptrnemcode).w,a3
000017FC 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
00001800 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
00001804 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
00001808 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
0000180C 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
00001810 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
00001814                            
00001814                            loc_16AA:
00001814 3A7C 0008                  		movea.w	#8,a5
00001818 6100 FB5C                  		bsr.w	NemPCD_NewRow
0000181C 5378 F6F8                  		subq.w	#1,(f_plc_execute).w
00001820 6700                       		beq.s	loc_16DC
00001822 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
00001826 66EC                       		bne.s	loc_16AA
00001828 21C8 F680                  		move.l	a0,(v_plc_buffer).w
0000182C 21CB F6E0                  		move.l	a3,(v_ptrnemcode).w
00001830 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001834 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
00001838 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
0000183C 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001840 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001844                            
00001844                            locret_16DA:
00001844 4E75                       		rts	
00001846                            ; ===========================================================================
00001846                            
00001846                            loc_16DC:
00001846 41F8 F680                  		lea	(v_plc_buffer).w,a0
0000184A 7015                       		moveq	#$15,d0
0000184C                            
0000184C                            loc_16E2:
0000184C 20E8 0006                  		move.l	6(a0),(a0)+
00001850 51C8 FFFA                  		dbf	d0,loc_16E2
00001854 4E75                       		rts	
00001856                            ; End of function ProcessDPLC2
00001856                            
00001856                            ; ---------------------------------------------------------------------------
00001856                            ; Subroutine to	execute	the pattern load cue
00001856                            ; ---------------------------------------------------------------------------
00001856                            
00001856                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001856                            
00001856                            
00001856                            QuickPLC:
00001856 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
0000185C D040                       		add.w	d0,d0
0000185E 3031 0000                  		move.w	(a1,d0.w),d0
00001862 43F1 0000                  		lea	(a1,d0.w),a1
00001866 3219                       		move.w	(a1)+,d1	; get length of PLC
00001868                            
00001868                            	Qplc_Loop:
00001868 2059                       		movea.l	(a1)+,a0	; get art pointer
0000186A 7000                       		moveq	#0,d0
0000186C 3019                       		move.w	(a1)+,d0	; get VRAM address
0000186E E588                       		lsl.l	#2,d0
00001870 E448                       		lsr.w	#2,d0
00001872 0040 4000                  		ori.w	#$4000,d0
00001876 4840                       		swap	d0
00001878 23C0 00C0 0004             		move.l	d0,(vdp_control_port).l ; converted VRAM address to VDP format
0000187E 6100 FA7E                  		bsr.w	NemDec		; decompress
00001882 51C9 FFE4                  		dbf	d1,Qplc_Loop	; repeat for length of PLC
00001886 4E75                       		rts	
00001888                            ; End of function QuickPLC
00001888                            
00001888                            		include	"_inc\Enigma Decompression.asm"
00001888                            ; ---------------------------------------------------------------------------
00001888                            ; Enigma decompression algorithm
00001888                            
00001888                            ; input:
00001888                            ;	d0 = starting art tile (added to each 8x8 before writing to destination)
00001888                            ;	a0 = source address
00001888                            ;	a1 = destination address
00001888                            
00001888                            ; usage:
00001888                            ;	lea	(source).l,a0
00001888                            ;	lea	(destination).l,a1
00001888                            ;	move.w	#arttile,d0
00001888                            ;	bsr.w	EniDec
00001888                            
00001888                            ; See http://www.segaretro.org/Enigma_compression for format description
00001888                            ; ---------------------------------------------------------------------------
00001888                            
00001888                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001888                            
00001888                            
00001888                            EniDec:
00001888 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
0000188C 3640                       		movea.w	d0,a3		; store starting art tile
0000188E 1018                       		move.b	(a0)+,d0
00001890 4880                       		ext.w	d0
00001892 3A40                       		movea.w	d0,a5		; store number of bits in inline copy value
00001894 1818                       		move.b	(a0)+,d4
00001896 E70C                       		lsl.b	#3,d4		; store PCCVH flags bitfield
00001898 3458                       		movea.w	(a0)+,a2
0000189A D4CB                       		adda.w	a3,a2		; store incremental copy word
0000189C 3858                       		movea.w	(a0)+,a4
0000189E D8CB                       		adda.w	a3,a4		; store literal copy word
000018A0 1A18                       		move.b	(a0)+,d5
000018A2 E145                       		asl.w	#8,d5
000018A4 1A18                       		move.b	(a0)+,d5	; get first word in format list
000018A6 7C10                       		moveq	#16,d6		; initial shift value
000018A8                            ; loc_173E:
000018A8                            Eni_Loop:
000018A8 7007                       		moveq	#7,d0		; assume a format list entry is 7 bits
000018AA 3E06                       		move.w	d6,d7
000018AC 9E40                       		sub.w	d0,d7
000018AE 3205                       		move.w	d5,d1
000018B0 EE69                       		lsr.w	d7,d1
000018B2 0241 007F                  		andi.w	#$7F,d1		; get format list entry
000018B6 3401                       		move.w	d1,d2		; and copy it
000018B8 0C41 0040                  		cmpi.w	#$40,d1		; is the high bit of the entry set?
000018BC 6400                       		bhs.s	@sevenbitentry
000018BE 7006                       		moveq	#6,d0		; if it isn't, the entry is actually 6 bits
000018C0 E24A                       		lsr.w	#1,d2
000018C2                            ; loc_1758:
000018C2                            @sevenbitentry:
000018C2 6100 0000                  		bsr.w	EniDec_FetchByte
000018C6 0242 000F                  		andi.w	#$F,d2		; get repeat count
000018CA E849                       		lsr.w	#4,d1
000018CC D241                       		add.w	d1,d1
000018CE 4EFB 1000                  		jmp	EniDec_Index(pc,d1.w)
000018D2                            ; End of function EniDec
000018D2                            
000018D2                            ; ===========================================================================
000018D2                            ; loc_1768:
000018D2                            EniDec_00:
000018D2 32CA                       @loop:		move.w	a2,(a1)+	; copy incremental copy word
000018D4 524A                       		addq.w	#1,a2		; increment it
000018D6 51CA FFFA                  		dbf	d2,@loop	; repeat
000018DA 60CC                       		bra.s	Eni_Loop
000018DC                            ; ===========================================================================
000018DC                            ; loc_1772:
000018DC                            EniDec_01:
000018DC 32CC                       @loop:		move.w	a4,(a1)+	; copy literal copy word
000018DE 51CA FFFC                  		dbf	d2,@loop	; repeat
000018E2 60C4                       		bra.s	Eni_Loop
000018E4                            ; ===========================================================================
000018E4                            ; loc_177A:
000018E4                            EniDec_100:
000018E4 6100 0000                  		bsr.w	EniDec_FetchInlineValue
000018E8                            ; loc_177E:
000018E8 32C1                       @loop:		move.w	d1,(a1)+	; copy inline value
000018EA 51CA FFFC                  		dbf	d2,@loop	; repeat
000018EE                            
000018EE 60B8                       		bra.s	Eni_Loop
000018F0                            ; ===========================================================================
000018F0                            ; loc_1786:
000018F0                            EniDec_101:
000018F0 6100 0000                  		bsr.w	EniDec_FetchInlineValue
000018F4                            ; loc_178A:
000018F4 32C1                       @loop:		move.w	d1,(a1)+	; copy inline value
000018F6 5241                       		addq.w	#1,d1		; increment
000018F8 51CA FFFA                  		dbf	d2,@loop	; repeat
000018FC                            
000018FC 60AA                       		bra.s	Eni_Loop
000018FE                            ; ===========================================================================
000018FE                            ; loc_1794:
000018FE                            EniDec_110:
000018FE 6100 0000                  		bsr.w	EniDec_FetchInlineValue
00001902                            ; loc_1798:
00001902 32C1                       @loop:		move.w	d1,(a1)+	; copy inline value
00001904 5341                       		subq.w	#1,d1		; decrement
00001906 51CA FFFA                  		dbf	d2,@loop	; repeat
0000190A                            
0000190A 609C                       		bra.s	Eni_Loop
0000190C                            ; ===========================================================================
0000190C                            ; loc_17A2:
0000190C                            EniDec_111:
0000190C 0C42 000F                  		cmpi.w	#$F,d2
00001910 6700                       		beq.s	EniDec_Done
00001912                            ; loc_17A8:
00001912 6100 0000                  @loop:		bsr.w	EniDec_FetchInlineValue	; fetch new inline value
00001916 32C1                       		move.w	d1,(a1)+	; copy it
00001918 51CA FFF8                  		dbf	d2,@loop	; and repeat
0000191C                            
0000191C 608A                       		bra.s	Eni_Loop
0000191E                            ; ===========================================================================
0000191E                            ; loc_17B4:
0000191E                            EniDec_Index:
0000191E 60B2                       		bra.s	EniDec_00
00001920 60B0                       		bra.s	EniDec_00
00001922 60B8                       		bra.s	EniDec_01
00001924 60B6                       		bra.s	EniDec_01
00001926 60BC                       		bra.s	EniDec_100
00001928 60C6                       		bra.s	EniDec_101
0000192A 60D2                       		bra.s	EniDec_110
0000192C 60DE                       		bra.s	EniDec_111
0000192E                            ; ===========================================================================
0000192E                            ; loc_17C4:
0000192E                            EniDec_Done:
0000192E 5348                       		subq.w	#1,a0		; go back by one byte
00001930 0C46 0010                  		cmpi.w	#16,d6		; were we going to start on a completely new byte?
00001934 6600                       		bne.s	@notnewbyte	; if not, branch
00001936 5348                       		subq.w	#1,a0		; and another one if needed
00001938                            ; loc_17CE:
00001938                            @notnewbyte:
00001938 3008                       		move.w	a0,d0
0000193A E248                       		lsr.w	#1,d0		; are we on an odd byte?
0000193C 6400                       		bcc.s	@evenbyte	; if not, branch
0000193E 5248                       		addq.w	#1,a0		; ensure we're on an even byte
00001940                            ; loc_17D6:
00001940                            @evenbyte:
00001940 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
00001944 4E75                       		rts	
00001946                            
00001946                            ; ---------------------------------------------------------------------------
00001946                            ; Part of the Enigma decompressor
00001946                            ; Fetches an inline copy value and stores it in d1
00001946                            ; ---------------------------------------------------------------------------
00001946                            
00001946                            ; =============== S U B R O U T I N E =======================================
00001946                            
00001946                            ; loc_17DC:
00001946                            EniDec_FetchInlineValue:
00001946 360B                       		move.w	a3,d3		; copy starting art tile
00001948 1204                       		move.b	d4,d1		; copy PCCVH bitfield
0000194A D201                       		add.b	d1,d1		; is the priority bit set?
0000194C 6400                       		bcc.s	@skippriority	; if not, branch
0000194E 5346                       		subq.w	#1,d6
00001950 0D05                       		btst	d6,d5		; is the priority bit set in the inline render flags?
00001952 6700                       		beq.s	@skippriority	; if not, branch
00001954 0043 8000                  		ori.w	#$8000,d3	; otherwise set priority bit in art tile
00001958                            ; loc_17EE:
00001958                            @skippriority:
00001958 D201                       		add.b	d1,d1		; is the high palette line bit set?
0000195A 6400                       		bcc.s	@skiphighpal	; if not, branch
0000195C 5346                       		subq.w	#1,d6
0000195E 0D05                       		btst	d6,d5
00001960 6700                       		beq.s	@skiphighpal
00001962 0643 4000                  		addi.w	#$4000,d3	; set second palette line bit
00001966                            ; loc_17FC:
00001966                            @skiphighpal:
00001966 D201                       		add.b	d1,d1		; is the low palette line bit set?
00001968 6400                       		bcc.s	@skiplowpal	; if not, branch
0000196A 5346                       		subq.w	#1,d6
0000196C 0D05                       		btst	d6,d5
0000196E 6700                       		beq.s	@skiplowpal
00001970 0643 2000                  		addi.w	#$2000,d3	; set first palette line bit
00001974                            ; loc_180A:
00001974                            @skiplowpal:
00001974 D201                       		add.b	d1,d1		; is the vertical flip flag set?
00001976 6400                       		bcc.s	@skipyflip	; if not, branch
00001978 5346                       		subq.w	#1,d6
0000197A 0D05                       		btst	d6,d5
0000197C 6700                       		beq.s	@skipyflip
0000197E 0043 1000                  		ori.w	#$1000,d3	; set Y-flip bit
00001982                            ; loc_1818:
00001982                            @skipyflip:
00001982 D201                       		add.b	d1,d1		; is the horizontal flip flag set?
00001984 6400                       		bcc.s	@skipxflip	; if not, branch
00001986 5346                       		subq.w	#1,d6
00001988 0D05                       		btst	d6,d5
0000198A 6700                       		beq.s	@skipxflip
0000198C 0043 0800                  		ori.w	#$800,d3	; set X-flip bit
00001990                            ; loc_1826:
00001990                            @skipxflip:
00001990 3205                       		move.w	d5,d1
00001992 3E06                       		move.w	d6,d7
00001994 9E4D                       		sub.w	a5,d7		; subtract length in bits of inline copy value
00001996 6400                       		bcc.s	@enoughbits	; branch if a new word doesn't need to be read
00001998 3C07                       		move.w	d7,d6
0000199A 0646 0010                  		addi.w	#16,d6
0000199E 4447                       		neg.w	d7		; calculate bit deficit
000019A0 EF69                       		lsl.w	d7,d1		; and make space for that many bits
000019A2 1A10                       		move.b	(a0),d5		; get next byte
000019A4 EF3D                       		rol.b	d7,d5		; and rotate the required bits into the lowest positions
000019A6 DE47                       		add.w	d7,d7
000019A8 CA7B 7000                  		and.w	EniDec_Masks-2(pc,d7.w),d5
000019AC D245                       		add.w	d5,d1		; combine upper bits with lower bits
000019AE                            ; loc_1844:
000019AE                            @maskvalue:
000019AE 300D                       		move.w	a5,d0		; get length in bits of inline copy value
000019B0 D040                       		add.w	d0,d0
000019B2 C27B 0000                  		and.w	EniDec_Masks-2(pc,d0.w),d1	; mask value appropriately
000019B6 D243                       		add.w	d3,d1		; add starting art tile
000019B8 1A18                       		move.b	(a0)+,d5
000019BA E14D                       		lsl.w	#8,d5
000019BC 1A18                       		move.b	(a0)+,d5	; get next word
000019BE 4E75                       		rts	
000019C0                            ; ===========================================================================
000019C0                            ; loc_1856:
000019C0                            @enoughbits:
000019C0 6700                       		beq.s	@justenough	; if the word has been exactly exhausted, branch
000019C2 EE69                       		lsr.w	d7,d1	; get inline copy value
000019C4 300D                       		move.w	a5,d0
000019C6 D040                       		add.w	d0,d0
000019C8 C27B 0000                  		and.w	EniDec_Masks-2(pc,d0.w),d1	; and mask it appropriately
000019CC D243                       		add.w	d3,d1	; add starting art tile
000019CE 300D                       		move.w	a5,d0
000019D0 6000                       		bra.s	EniDec_FetchByte
000019D2                            ; ===========================================================================
000019D2                            ; loc_1868:
000019D2                            @justenough:
000019D2 7C10                       		moveq	#16,d6	; reset shift value
000019D4 60D8                       		bra.s	@maskvalue
000019D6                            ; ===========================================================================
000019D6                            ; word_186C:
000019D6                            EniDec_Masks:
000019D6 0001 0003 0007 000F        		dc.w	 1,    3,    7,   $F
000019DE 001F 003F 007F 00FF        		dc.w   $1F,  $3F,  $7F,  $FF
000019E6 01FF 03FF 07FF 0FFF        		dc.w  $1FF, $3FF, $7FF, $FFF
000019EE 1FFF 3FFF 7FFF FFFF        		dc.w $1FFF,$3FFF,$7FFF,$FFFF
000019F6                            
000019F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000019F6                            
000019F6                            ; sub_188C:
000019F6                            EniDec_FetchByte:
000019F6 9C40                       		sub.w	d0,d6	; subtract length of current entry from shift value so that next entry is read next time around
000019F8 0C46 0009                  		cmpi.w	#9,d6	; does a new byte need to be read?
000019FC 6400                       		bhs.s	@locret	; if not, branch
000019FE 5046                       		addq.w	#8,d6
00001A00 E145                       		asl.w	#8,d5
00001A02 1A18                       		move.b	(a0)+,d5
00001A04                            @locret:
00001A04 4E75                       		rts	
00001A06                            ; End of function EniDec_FetchByte
00001A06                            ; End of function EniDec_FetchByte
00001A06                            		include	"_inc\Kosinski Decompression.asm"
00001A06                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001A06                            ; ---------------------------------------------------------------------------
00001A06                            ; KOSINSKI DECOMPRESSION PROCEDURE
00001A06                            ; (sometimes called KOZINSKI decompression)
00001A06                            ;
00001A06                            ; ARGUMENTS:
00001A06                            ; a0 = source address
00001A06                            ; a1 = destination address
00001A06                            ;
00001A06                            ; For format explanation see http://info.sonicretro.org/Kosinski@compression
00001A06                            ; New faster version by written by vladikcomper, with additional improvements by
00001A06                            ; MarkeyJester and Flamewing
00001A06                            ; Converted to ASM68K by Beta Filter.
00001A06                            ; ---------------------------------------------------------------------------
00001A06 =00000001                  Kos_UseLUT: equ 1
00001A06 =00000003                  Kos_LoopUnroll: equ 3
00001A06 =00000001                  Kos_ExtremeUnrolling: equ 1
00001A06                            
00001A06                            Kos_RunBitStream macro
00001A06                                dbra    d2,@skip\@
00001A06                                moveq   #7,d2                   ; Set repeat count to 8.
00001A06                                move.b  d1,d0                   ; Use the remaining 8 bits.
00001A06                                not.w   d3                      ; Have all 16 bits been used up?
00001A06                                bne.s   @skip\@                   ; Branch if not.
00001A06                                move.b  (a0)+,d0                ; Get desc field low-byte.
00001A06                                move.b  (a0)+,d1                ; Get desc field hi-byte.
00001A06                                if Kos_UseLUT=1
00001A06                                move.b  (a4,d0.w),d0            ; Invert bit order...
00001A06                                move.b  (a4,d1.w),d1            ; ... for both bytes.
00001A06                                endif
00001A06                            @skip\@
00001A06                                endm
00001A06                            
00001A06                            Kos_ReadBit macro
00001A06                                if Kos_UseLUT=1
00001A06                                add.b   d0,d0                   ; Get a bit from the bitstream.
00001A06                                else
00001A06                                lsr.b   #1,d0                   ; Get a bit from the bitstream.
00001A06                                endif
00001A06                                endm
00001A06                            ; ===========================================================================
00001A06                            ; KozDec@193A:
00001A06                            KosDec:
00001A06 7E07                           moveq   #(1<<Kos_LoopUnroll)-1,d7
00001A08 7000                           moveq   #0,d0
00001A0A 7200                           moveq   #0,d1
00001A0C 49FA 0000                      lea KosDec_ByteMap(pc),a4       ; Load LUT pointer.
00001A10 1018                           move.b  (a0)+,d0                ; Get desc field low-byte.
00001A12 1218                           move.b  (a0)+,d1                ; Get desc field hi-byte.
00001A14 1034 0000                      move.b  (a4,d0.w),d0            ; Invert bit order...
00001A18 1234 1000                      move.b  (a4,d1.w),d1            ; ... for both bytes.
00001A1C 7407                           moveq   #7,d2                   ; Set repeat count to 8.
00001A1E 7600                           moveq   #0,d3                   ; d3 will be desc field switcher.
00001A20 6000                           bra.s   @FetchNewCode
00001A22                            ; ---------------------------------------------------------------------------
00001A22                            @FetchCodeLoop:
00001A22                                ; Code 1 (Uncompressed byte).
00001A3A 12D8                           move.b  (a0)+,(a1)+
00001A3C                            
00001A3C                            @FetchNewCode:
00001A3E 65E2                           bcs.s   @FetchCodeLoop          ; If code = 1, branch.
00001A40                            
00001A40                                ; Codes 00 and 01.
00001A40 7AFF                           moveq   #-1,d5
00001A42 4BD1                           lea (a1),a5
00001A5E 6500 0000                      bcs.w   @Code_01
00001A62                            
00001A62                                ; Code 00 (Dictionary ref. short).
00001A7C 6500                           bcs.s   @Copy45
00001A98 6500                           bcs.s   @Copy3
00001AB2 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001AB4 DAC5                           adda.w  d5,a5
00001AB6 12DD                           move.b  (a5)+,(a1)+
00001AB8 12DD                           move.b  (a5)+,(a1)+
00001ABA 6080                           bra.s   @FetchNewCode
00001ABC                            ; ---------------------------------------------------------------------------
00001ABC                            @Copy3:
00001AD4 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001AD6 DAC5                           adda.w  d5,a5
00001AD8 12DD                           move.b  (a5)+,(a1)+
00001ADA 12DD                           move.b  (a5)+,(a1)+
00001ADC 12DD                           move.b  (a5)+,(a1)+
00001ADE 6000 FF5C                      bra.w   @FetchNewCode
00001AE2                            ; ---------------------------------------------------------------------------
00001AE2                            @Copy45:
00001AFC 6500                           bcs.s   @Copy5
00001B16 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001B18 DAC5                           adda.w  d5,a5
00001B1A 12DD                           move.b  (a5)+,(a1)+
00001B1C 12DD                           move.b  (a5)+,(a1)+
00001B1E 12DD                           move.b  (a5)+,(a1)+
00001B20 12DD                           move.b  (a5)+,(a1)+
00001B22 6000 FF18                      bra.w   @FetchNewCode
00001B26                            ; ---------------------------------------------------------------------------
00001B26                            @Copy5:
00001B3E 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001B40 DAC5                           adda.w  d5,a5
00001B42 12DD                           move.b  (a5)+,(a1)+
00001B44 12DD                           move.b  (a5)+,(a1)+
00001B46 12DD                           move.b  (a5)+,(a1)+
00001B48 12DD                           move.b  (a5)+,(a1)+
00001B4A 12DD                           move.b  (a5)+,(a1)+
00001B4C 6000 FEEE                      bra.w   @FetchNewCode
00001B50                            ; ---------------------------------------------------------------------------
00001B50                            ; ---------------------------------------------------------------------------
00001B50                            @Code_01:
00001B50 7800                           moveq   #0,d4                   ; d4 will contain copy count.
00001B52                                ; Code 01 (Dictionary ref. long / special).
00001B6A 1C18                           move.b  (a0)+,d6                ; d6 = %LLLLLLLL.
00001B6C 1818                           move.b  (a0)+,d4                ; d4 = %HHHHHCCC.
00001B6E 1A04                           move.b  d4,d5                   ; d5 = %11111111 HHHHHCCC.
00001B70 EB4D                           lsl.w   #5,d5                   ; d5 = %111HHHHH CCC00000.
00001B72 1A06                           move.b  d6,d5                   ; d5 = %111HHHHH LLLLLLLL.
00001B74 C847                           and.w   d7,d4                   ; d4 = %00000CCC.
00001B76 6600                           bne.s   @StreamCopy             ; if CCC=0, branch.
00001B78                            
00001B78                                ; special mode (extended counter)
00001B78 1818                           move.b  (a0)+,d4                ; Read cnt
00001B7A 6700                           beq.s   @Quit                   ; If cnt=0, quit decompression.
00001B7C 5304                           subq.b  #1,d4
00001B7E 6700 FEBC                      beq.w   @FetchNewCode           ; If cnt=1, fetch a new code.
00001B82                            
00001B82 DAC5                           adda.w  d5,a5
00001B84 12DD                           move.b  (a5)+,(a1)+             ; Do 1 extra copy (to compensate +1 to copy counter).
00001B86 3C04                           move.w  d4,d6
00001B88 4646                           not.w   d6
00001B8A CC47                           and.w   d7,d6
00001B8C DC46                           add.w   d6,d6
00001B8E E64C                           lsr.w   #Kos_LoopUnroll,d4
00001B90 4EFB 6000                      jmp @largecopy(pc,d6.w)
00001B94                            ; ---------------------------------------------------------------------------
00001B94                            @largecopy:
00001B94                                rept (1<<Kos_LoopUnroll)
00001B94                                move.b  (a5)+,(a1)+
00001B94 12DD 12DD 12DD 12DD 12DD+      endr
00001BA4 51CC FFEE                      dbra    d4,@largecopy
00001BA8 6000 FE92                      bra.w   @FetchNewCode
00001BAC                            ; ---------------------------------------------------------------------------
00001BAC                            @StreamCopy:
00001BAC DAC5                           adda.w  d5,a5
00001BAE 12DD                           move.b  (a5)+,(a1)+             ; Do 1 extra copy (to compensate +1 to copy counter).
00001BB0 BF44                           eor.w   d7,d4
00001BB2 D844                           add.w   d4,d4
00001BB4 4EFB 4000                      jmp @mediumcopy(pc,d4.w)
00001BB8                            ; ---------------------------------------------------------------------------
00001BB8                            @mediumcopy:
00001BB8                                rept 8
00001BB8                                move.b  (a5)+,(a1)+
00001BB8 12DD 12DD 12DD 12DD 12DD+      endr
00001BC8 6000 FE72                      bra.w   @FetchNewCode
00001BCC                            ; ---------------------------------------------------------------------------
00001BCC                            @Quit:
00001BCC 4E75                           rts                             ; End of function KosDec.
00001BCE                            ; ===========================================================================
00001BCE                            KosDec_ByteMap:
00001BCE 0080 40C0 20A0 60E0 1090+      dc.b    $00,$80,$40,$C0,$20,$A0,$60,$E0,$10,$90,$50,$D0,$30,$B0,$70,$F0
00001BDE 0888 48C8 28A8 68E8 1898+      dc.b    $08,$88,$48,$C8,$28,$A8,$68,$E8,$18,$98,$58,$D8,$38,$B8,$78,$F8
00001BEE 0484 44C4 24A4 64E4 1494+      dc.b    $04,$84,$44,$C4,$24,$A4,$64,$E4,$14,$94,$54,$D4,$34,$B4,$74,$F4
00001BFE 0C8C 4CCC 2CAC 6CEC 1C9C+      dc.b    $0C,$8C,$4C,$CC,$2C,$AC,$6C,$EC,$1C,$9C,$5C,$DC,$3C,$BC,$7C,$FC
00001C0E 0282 42C2 22A2 62E2 1292+      dc.b    $02,$82,$42,$C2,$22,$A2,$62,$E2,$12,$92,$52,$D2,$32,$B2,$72,$F2
00001C1E 0A8A 4ACA 2AAA 6AEA 1A9A+      dc.b    $0A,$8A,$4A,$CA,$2A,$AA,$6A,$EA,$1A,$9A,$5A,$DA,$3A,$BA,$7A,$FA
00001C2E 0686 46C6 26A6 66E6 1696+      dc.b    $06,$86,$46,$C6,$26,$A6,$66,$E6,$16,$96,$56,$D6,$36,$B6,$76,$F6
00001C3E 0E8E 4ECE 2EAE 6EEE 1E9E+      dc.b    $0E,$8E,$4E,$CE,$2E,$AE,$6E,$EE,$1E,$9E,$5E,$DE,$3E,$BE,$7E,$FE
00001C4E 0181 41C1 21A1 61E1 1191+      dc.b    $01,$81,$41,$C1,$21,$A1,$61,$E1,$11,$91,$51,$D1,$31,$B1,$71,$F1
00001C5E 0989 49C9 29A9 69E9 1999+      dc.b    $09,$89,$49,$C9,$29,$A9,$69,$E9,$19,$99,$59,$D9,$39,$B9,$79,$F9
00001C6E 0585 45C5 25A5 65E5 1595+      dc.b    $05,$85,$45,$C5,$25,$A5,$65,$E5,$15,$95,$55,$D5,$35,$B5,$75,$F5
00001C7E 0D8D 4DCD 2DAD 6DED 1D9D+      dc.b    $0D,$8D,$4D,$CD,$2D,$AD,$6D,$ED,$1D,$9D,$5D,$DD,$3D,$BD,$7D,$FD
00001C8E 0383 43C3 23A3 63E3 1393+      dc.b    $03,$83,$43,$C3,$23,$A3,$63,$E3,$13,$93,$53,$D3,$33,$B3,$73,$F3
00001C9E 0B8B 4BCB 2BAB 6BEB 1B9B+      dc.b    $0B,$8B,$4B,$CB,$2B,$AB,$6B,$EB,$1B,$9B,$5B,$DB,$3B,$BB,$7B,$FB
00001CAE 0787 47C7 27A7 67E7 1797+      dc.b    $07,$87,$47,$C7,$27,$A7,$67,$E7,$17,$97,$57,$D7,$37,$B7,$77,$F7
00001CBE 0F8F 4FCF 2FAF 6FEF 1F9F+      dc.b    $0F,$8F,$4F,$CF,$2F,$AF,$6F,$EF,$1F,$9F,$5F,$DF,$3F,$BF,$7F,$FF
00001CCE                            ; ===========================================================================
00001CCE                            ; ===========================================================================
00001CCE                            
00001CCE                            		include	"_inc\PaletteCycle.asm"
00001CCE                            ; ---------------------------------------------------------------------------
00001CCE                            ; Palette cycling routine loading subroutine
00001CCE                            ; ---------------------------------------------------------------------------
00001CCE                            
00001CCE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CCE                            
00001CCE                            
00001CCE                            PaletteCycle:
00001CCE 7400                       		moveq	#0,d2
00001CD0 7000                       		moveq	#0,d0
00001CD2 1038 FE10                  		move.b	(v_zone).w,d0	; get level number
00001CD6 D040                       		add.w	d0,d0
00001CD8 303B 0000                  		move.w	PCycle_Index(pc,d0.w),d0
00001CDC 4EFB 0000                  		jmp	PCycle_Index(pc,d0.w) ; jump to relevant palette routine
00001CE0                            ; End of function PaletteCycle
00001CE0                            
00001CE0                            ; ===========================================================================
00001CE0                            ; ---------------------------------------------------------------------------
00001CE0                            ; Palette cycling routines
00001CE0                            ; ---------------------------------------------------------------------------
00001CE0 0000                       PCycle_Index:	dc.w PCycle_GHZ-PCycle_Index
00001CE2 0000                       		dc.w PCycle_LZ-PCycle_Index
00001CE4 0000                       		dc.w PCycle_MZ-PCycle_Index
00001CE6 0000                       		dc.w PalCycle_SLZ-PCycle_Index
00001CE8 0000                       		dc.w PalCycle_SYZ-PCycle_Index
00001CEA 0000                       		dc.w PalCycle_SBZ-PCycle_Index
00001CEC 0000                       		dc.w PCycle_GHZ-PCycle_Index	; Ending
00001CEE                            
00001CEE                            
00001CEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CEE                            
00001CEE                            
00001CEE                            PCycle_Title:
00001CEE 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001CF4 6000                       		bra.s	PCycGHZ_Go
00001CF6                            ; ===========================================================================
00001CF6                            
00001CF6                            PCycle_GHZ:
00001CF6 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001CFC                            
00001CFC                            PCycGHZ_Go:
00001CFC 5378 F634                  		subq.w	#1,(v_pcyc_time).w ; decrement timer
00001D00 6A00                       		bpl.s	PCycGHZ_Skip	; if time remains, branch
00001D02                            
00001D02 31FC 0003 F634             		move.w	#3,(v_pcyc_time).w ; reset timer to 5 frames
00001D08 3038 F632                  		move.w	(v_pcyc_num).w,d0 ; get cycle number
00001D0C 5278 F632                  		addq.w	#1,(v_pcyc_num).w ; increment cycle number
00001D10 0240 0003                  		andi.w	#3,d0		; if cycle > 3, reset to 0
00001D14 E748                       		lsl.w	#3,d0
00001D16 43F8 FB50                  		lea	(v_pal_dry+$50).w,a1
00001D1A 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001D1E 22B0 0004                  		move.l	4(a0,d0.w),(a1)	; copy palette data to RAM
00001D22                            
00001D22                            PCycGHZ_Skip:
00001D22 4E75                       		rts	
00001D24                            ; End of function PCycle_GHZ
00001D24                            
00001D24                            
00001D24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D24                            
00001D24                            
00001D24                            PCycle_LZ:
00001D24                            ; Waterfalls
00001D24 5378 F634                  		subq.w	#1,(v_pcyc_time).w ; decrement timer
00001D28 6A00                       		bpl.s	PCycLZ_Skip1	; if time remains, branch
00001D2A                            
00001D2A 31FC 0003 F634             		move.w	#3,(v_pcyc_time).w ; reset timer to 2 frames
00001D30 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001D34 5278 F632                  		addq.w	#1,(v_pcyc_num).w ; increment cycle number
00001D38 0240 0003                  		andi.w	#3,d0		; if cycle > 3, reset to 0
00001D3C E748                       		lsl.w	#3,d0
00001D3E 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001D44 0C38 0003 FE11             		cmpi.b	#3,(v_act).w	; check if level is SBZ3
00001D4A 6600                       		bne.s	PCycLZ_NotSBZ3
00001D4C 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	palette instead
00001D52                            
00001D52                            	PCycLZ_NotSBZ3:
00001D52 43F8 FB56                  		lea	(v_pal_dry+$56).w,a1
00001D56 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001D5A 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001D5E 43F8 FAD6                  		lea	(v_pal_water+$56).w,a1
00001D62 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001D66 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001D6A                            
00001D6A                            PCycLZ_Skip1:
00001D6A                            ; Conveyor belts
00001D6A                            		;move.w	(v_framecount).w,d0
00001D6A                            		;andi.w	#7,d0
00001D6A                            		;move.b	PCycLZ_Seq(pc,d0.w),d0 ; get byte from palette sequence
00001D6A                            		;beq.s	PCycLZ_Skip2	; if byte is 0, branch
00001D6A                            		;moveq	#1,d1
00001D6A                            		;tst.b	(f_conveyrev).w	; have conveyor belts been reversed?
00001D6A                            		;beq.s	PCycLZ_NoRev	; if not, branch
00001D6A                            		;neg.w	d1
00001D6A                            
00001D6A                            	;PCycLZ_NoRev:
00001D6A                            		;move.w	(v_pal_buffer).w,d0
00001D6A                            		;andi.w	#3,d0
00001D6A                            		;add.w	d1,d0
00001D6A                            		;cmpi.w	#3,d0
00001D6A                            		;bcs.s	loc_1A0A
00001D6A                            		;move.w	d0,d1
00001D6A                            		;moveq	#0,d0
00001D6A                            		;tst.w	d1
00001D6A                            		;bpl.s	loc_1A0A
00001D6A                            		;moveq	#2,d0
00001D6A                            
00001D6A                            ;loc_1A0A:
00001D6A                            		;move.w	d0,(v_pal_buffer).w
00001D6A                            		;add.w	d0,d0
00001D6A                            		;move.w	d0,d1
00001D6A                            		;add.w	d0,d0
00001D6A                            		;add.w	d1,d0
00001D6A                            		;lea	(Pal_LZCyc2).l,a0
00001D6A                            		;lea	(v_pal_dry+$76).w,a1
00001D6A                            		;move.l	(a0,d0.w),(a1)+
00001D6A                            		;move.w	4(a0,d0.w),(a1)
00001D6A                            		;lea	(Pal_LZCyc3).l,a0
00001D6A                            		;lea	(v_pal_water+$76).w,a1
00001D6A                            		;move.l	(a0,d0.w),(a1)+
00001D6A                            		;move.w	4(a0,d0.w),(a1)
00001D6A                            
00001D6A                            ;PCycLZ_Skip2:
00001D6A 4E75                       		rts	
00001D6C                            ; End of function PCycle_LZ
00001D6C                            
00001D6C                            ; ===========================================================================
00001D6C 0100 0001 0000 0100        PCycLZ_Seq:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001D74                            ; ===========================================================================
00001D74                            
00001D74                            PCycle_MZ:
00001D74 4E75                       		rts	
00001D76                            
00001D76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D76                            
00001D76                            
00001D76                            PalCycle_SLZ:
00001D76 5378 F634                  		subq.w	#1,(v_pcyc_time).w
00001D7A 6A00                       		bpl.s	locret_1A80
00001D7C 31FC 0007 F634             		move.w	#7,(v_pcyc_time).w
00001D82 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001D86 5240                       		addq.w	#1,d0
00001D88 0C40 0006                  		cmpi.w	#6,d0
00001D8C 6500                       		bcs.s	loc_1A60
00001D8E 7000                       		moveq	#0,d0
00001D90                            
00001D90                            loc_1A60:
00001D90 31C0 F632                  		move.w	d0,(v_pcyc_num).w
00001D94 3200                       		move.w	d0,d1
00001D96 D241                       		add.w	d1,d1
00001D98 D041                       		add.w	d1,d0
00001D9A D040                       		add.w	d0,d0
00001D9C 41F9 0000 0000             		lea	(Pal_SLZCyc).l,a0
00001DA2 43F8 FB56                  		lea	(v_pal_dry+$56).w,a1
00001DA6 32B0 0000                  		move.w	(a0,d0.w),(a1)
00001DAA 2370 0002 0004             		move.l	2(a0,d0.w),4(a1)
00001DB0                            
00001DB0                            locret_1A80:
00001DB0 4E75                       		rts	
00001DB2                            ; End of function PalCycle_SLZ
00001DB2                            
00001DB2                            
00001DB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DB2                            
00001DB2                            
00001DB2                            PalCycle_SYZ:
00001DB2 5378 F634                  		subq.w	#1,(v_pcyc_time).w
00001DB6 6A00                       		bpl.s	locret_1AC6
00001DB8 31FC 0005 F634             		move.w	#5,(v_pcyc_time).w
00001DBE 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001DC2 5278 F632                  		addq.w	#1,(v_pcyc_num).w
00001DC6 0240 0003                  		andi.w	#3,d0
00001DCA E548                       		lsl.w	#2,d0
00001DCC 3200                       		move.w	d0,d1
00001DCE D040                       		add.w	d0,d0
00001DD0 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001DD6 43F8 FB6E                  		lea	(v_pal_dry+$6E).w,a1
00001DDA 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001DDE 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001DE2 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001DE8 43F8 FB76                  		lea	(v_pal_dry+$76).w,a1
00001DEC 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001DF0 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001DF6                            
00001DF6                            locret_1AC6:
00001DF6 4E75                       		rts	
00001DF8                            ; End of function PalCycle_SYZ
00001DF8                            
00001DF8                            
00001DF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DF8                            
00001DF8                            
00001DF8                            PalCycle_SBZ:
00001DF8 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001DFE 4A38 FE11                  		tst.b	(v_act).w
00001E02 6700                       		beq.s	loc_1ADA
00001E04 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001E0A                            
00001E0A                            loc_1ADA:
00001E0A 43F8 F650                  		lea	(v_pal_buffer).w,a1
00001E0E 321A                       		move.w	(a2)+,d1
00001E10                            
00001E10                            loc_1AE0:
00001E10 5311                       		subq.b	#1,(a1)
00001E12 6B00                       		bmi.s	loc_1AEA
00001E14 5489                       		addq.l	#2,a1
00001E16 5C8A                       		addq.l	#6,a2
00001E18 6000                       		bra.s	loc_1B06
00001E1A                            ; ===========================================================================
00001E1A                            
00001E1A                            loc_1AEA:
00001E1A 12DA                       		move.b	(a2)+,(a1)+
00001E1C 1011                       		move.b	(a1),d0
00001E1E 5200                       		addq.b	#1,d0
00001E20 B01A                       		cmp.b	(a2)+,d0
00001E22 6500                       		bcs.s	loc_1AF6
00001E24 7000                       		moveq	#0,d0
00001E26                            
00001E26                            loc_1AF6:
00001E26 12C0                       		move.b	d0,(a1)+
00001E28 0240 000F                  		andi.w	#$F,d0
00001E2C D040                       		add.w	d0,d0
00001E2E 305A                       		movea.w	(a2)+,a0
00001E30 365A                       		movea.w	(a2)+,a3
00001E32 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001E36                            
00001E36                            loc_1B06:
00001E36 51C9 FFD8                  		dbf	d1,loc_1AE0
00001E3A 5378 F634                  		subq.w	#1,(v_pcyc_time).w
00001E3E 6A00                       		bpl.s	locret_1B64
00001E40 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001E46 31FC 0003 F634             		move.w	#3,(v_pcyc_time).w
00001E4C 4A38 FE11                  		tst.b	(v_act).w
00001E50 6700                       		beq.s	loc_1B2E
00001E52 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001E58 31FC 0002 F634             		move.w	#2,(v_pcyc_time).w
00001E5E                            
00001E5E                            loc_1B2E:
00001E5E 72FF                       		moveq	#-1,d1
00001E60 4A38 F7C0                  		tst.b	(f_conveyrev).w
00001E64 6700                       		beq.s	loc_1B38
00001E66 4441                       		neg.w	d1
00001E68                            
00001E68                            loc_1B38:
00001E68 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001E6C 0240 0003                  		andi.w	#3,d0
00001E70 D041                       		add.w	d1,d0
00001E72 0C40 0003                  		cmpi.w	#3,d0
00001E76 6500                       		bcs.s	loc_1B52
00001E78 3200                       		move.w	d0,d1
00001E7A 7000                       		moveq	#0,d0
00001E7C 4A41                       		tst.w	d1
00001E7E 6A00                       		bpl.s	loc_1B52
00001E80 7002                       		moveq	#2,d0
00001E82                            
00001E82                            loc_1B52:
00001E82 31C0 F632                  		move.w	d0,(v_pcyc_num).w
00001E86 D040                       		add.w	d0,d0
00001E88 43F8 FB58                  		lea	(v_pal_dry+$58).w,a1
00001E8C 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001E90 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001E94                            
00001E94                            locret_1B64:
00001E94 4E75                       		rts	
00001E96                            ; End of function PalCycle_SBZ
00001E96                            ; End of function PalCycle_SBZ
00001E96                            
00001E96                            Pal_TitleCyc:	incbin	"palette\Cycle - Title Screen Water.bin"
00001EB6                            Pal_GHZCyc:	incbin	"palette\Cycle - GHZ.bin"
00001ED6                            Pal_LZCyc1:	incbin	"palette\Cycle - LZ Waterfall.bin"
00001EF6                            Pal_LZCyc2:	incbin	"palette\Cycle - LZ Conveyor Belt.bin"
00001F08                            Pal_LZCyc3:	incbin	"palette\Cycle - LZ Conveyor Belt Underwater.bin"
00001F1A                            Pal_SBZ3Cyc1:	incbin	"palette\Cycle - SBZ3 Waterfall.bin"
00001F82                            Pal_SLZCyc:	incbin	"palette\Cycle - SLZ.bin"
00001FA6                            Pal_SYZCyc1:	incbin	"palette\Cycle - SYZ1.bin"
00001FC6                            Pal_SYZCyc2:	incbin	"palette\Cycle - SYZ2.bin"
00001FD6                            
00001FD6                            		include	"_inc\SBZ Palette Scripts.asm"
00001FD6                            ; ---------------------------------------------------------------------------
00001FD6                            ; Scrap Brain Zone palette cycling script
00001FD6                            ; ---------------------------------------------------------------------------
00001FD6                            
00001FD6                            mSBZp:	macro duration,colors,paladdress,ramaddress
00001FD6                            	dc.b duration, colors
00001FD6                            	dc.w paladdress, ramaddress
00001FD6                            	endm
00001FD6                            
00001FD6                            ; duration in frames, number of colors, palette address, RAM address
00001FD6                            
00001FD6                            Pal_SBZCycList1:
00001FD6 0000                       	dc.w ((end_SBZCycList1-Pal_SBZCycList1-2)/6)-1
00001FD8 0708 0000 FB50             	mSBZp	7,8,Pal_SBZCyc1,v_pal_dry+$50
00001FDE 0D08 0000 FB52             	mSBZp	$D,8,Pal_SBZCyc2,v_pal_dry+$52
00001FE4 0E08 0000 FB6E             	mSBZp	$E,8,Pal_SBZCyc3,v_pal_dry+$6E
00001FEA 0B08 0000 FB70             	mSBZp	$B,8,Pal_SBZCyc5,v_pal_dry+$70
00001FF0 0708 0000 FB72             	mSBZp	7,8,Pal_SBZCyc6,v_pal_dry+$72
00001FF6 1C10 0000 FB7E             	mSBZp	$1C,$10,Pal_SBZCyc7,v_pal_dry+$7E
00001FFC 0303 0000 FB78             	mSBZp	3,3,Pal_SBZCyc8,v_pal_dry+$78
00002002 0303 0000 FB7A             	mSBZp	3,3,Pal_SBZCyc8+2,v_pal_dry+$7A
00002008 0303 0000 FB7C             	mSBZp	3,3,Pal_SBZCyc8+4,v_pal_dry+$7C
0000200E                            end_SBZCycList1:
0000200E                            	even
0000200E                            
0000200E                            Pal_SBZCycList2:
0000200E 0000                       	dc.w ((end_SBZCycList2-Pal_SBZCycList2-2)/6)-1
00002010 0708 0000 FB50             	mSBZp	7,8,Pal_SBZCyc1,v_pal_dry+$50
00002016 0D08 0000 FB52             	mSBZp	$D,8,Pal_SBZCyc2,v_pal_dry+$52
0000201C 0908 0000 FB70             	mSBZp	9,8,Pal_SBZCyc9,v_pal_dry+$70
00002022 0708 0000 FB72             	mSBZp	7,8,Pal_SBZCyc6,v_pal_dry+$72
00002028 0303 0000 FB78             	mSBZp	3,3,Pal_SBZCyc8,v_pal_dry+$78
0000202E 0303 0000 FB7A             	mSBZp	3,3,Pal_SBZCyc8+2,v_pal_dry+$7A
00002034 0303 0000 FB7C             	mSBZp	3,3,Pal_SBZCyc8+4,v_pal_dry+$7C
0000203A                            end_SBZCycList2:
0000203A                            	even
0000203A                            	even
0000203A                            
0000203A                            Pal_SBZCyc1:	incbin	"palette\Cycle - SBZ 1.bin"
0000204A                            Pal_SBZCyc2:	incbin	"palette\Cycle - SBZ 2.bin"
0000205A                            Pal_SBZCyc3:	incbin	"palette\Cycle - SBZ 3.bin"
0000206A                            Pal_SBZCyc4:	incbin	"palette\Cycle - SBZ 4.bin"
00002076                            Pal_SBZCyc5:	incbin	"palette\Cycle - SBZ 5.bin"
00002086                            Pal_SBZCyc6:	incbin	"palette\Cycle - SBZ 6.bin"
00002096                            Pal_SBZCyc7:	incbin	"palette\Cycle - SBZ 7.bin"
000020B6                            Pal_SBZCyc8:	incbin	"palette\Cycle - SBZ 8.bin"
000020C0                            Pal_SBZCyc9:	incbin	"palette\Cycle - SBZ 9.bin"
000020D0                            Pal_SBZCyc10:	incbin	"palette\Cycle - SBZ 10.bin"
000020DC                            ; ---------------------------------------------------------------------------
000020DC                            ; Subroutine to	fade in from black
000020DC                            ; ---------------------------------------------------------------------------
000020DC                            
000020DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020DC                            
000020DC                            
000020DC                            PaletteFadeIn:
000020DC 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; set start position = 0; size = $40
000020E2                            
000020E2                            PalFadeIn_Alt:				; start position and size are already set
000020E2 7000                       		moveq	#0,d0
000020E4 41F8 FB00                  		lea	(v_pal_dry).w,a0
000020E8 1038 F626                  		move.b	(v_pfade_start).w,d0
000020EC D0C0                       		adda.w	d0,a0
000020EE 7200                       		moveq	#cBlack,d1
000020F0 1038 F627                  		move.b	(v_pfade_size).w,d0
000020F4                            
000020F4                            	@fill:
000020F4 30C1                       		move.w	d1,(a0)+
000020F6 51C8 FFFC                  		dbf	d0,@fill 	; fill palette with black
000020FA                            
000020FA 383C 0015                  		move.w	#$15,d4
000020FE                            
000020FE                            	@mainloop:
000020FE 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
00002104 6100 0000                  		bsr.w	WaitForVBla
00002108 6100                       		bsr.s	FadeIn_FromBlack
0000210A 6100 F64A                  		bsr.w	RunPLC
0000210E 51CC FFEE                  		dbf	d4,@mainloop
00002112 4E75                       		rts	
00002114                            ; End of function PaletteFadeIn
00002114                            
00002114                            
00002114                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002114                            
00002114                            
00002114                            FadeIn_FromBlack:
00002114 7000                       		moveq	#0,d0
00002116 41F8 FB00                  		lea	(v_pal_dry).w,a0
0000211A 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
0000211E 1038 F626                  		move.b	(v_pfade_start).w,d0
00002122 D0C0                       		adda.w	d0,a0
00002124 D2C0                       		adda.w	d0,a1
00002126 1038 F627                  		move.b	(v_pfade_size).w,d0
0000212A                            
0000212A                            	@addcolour:
0000212A 6100                       		bsr.s	FadeIn_AddColour ; increase colour
0000212C 51C8 FFFC                  		dbf	d0,@addcolour	; repeat for size of palette
00002130                            
00002130 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	; is level Labyrinth?
00002136 6600                       		bne.s	@exit		; if not, branch
00002138                            
00002138 7000                       		moveq	#0,d0
0000213A 41F8 FA80                  		lea	(v_pal_water).w,a0
0000213E 43F8 FA00                  		lea	(v_pal_water_dup).w,a1
00002142 1038 F626                  		move.b	(v_pfade_start).w,d0
00002146 D0C0                       		adda.w	d0,a0
00002148 D2C0                       		adda.w	d0,a1
0000214A 1038 F627                  		move.b	(v_pfade_size).w,d0
0000214E                            
0000214E                            	@addcolour2:
0000214E 6100                       		bsr.s	FadeIn_AddColour ; increase colour again
00002150 51C8 FFFC                  		dbf	d0,@addcolour2 ; repeat
00002154                            
00002154                            @exit:
00002154 4E75                       		rts	
00002156                            ; End of function FadeIn_FromBlack
00002156                            
00002156                            
00002156                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002156                            
00002156                            
00002156                            FadeIn_AddColour:
00002156                            @addblue:
00002156 3419                       		move.w	(a1)+,d2
00002158 3610                       		move.w	(a0),d3
0000215A B642                       		cmp.w	d2,d3		; is colour already at threshold level?
0000215C 6700                       		beq.s	@next		; if yes, branch
0000215E 3203                       		move.w	d3,d1
00002160 0641 0200                  		addi.w	#$200,d1	; increase blue	value
00002164 B242                       		cmp.w	d2,d1		; has blue reached threshold level?
00002166 6200                       		bhi.s	@addgreen	; if yes, branch
00002168 30C1                       		move.w	d1,(a0)+	; update palette
0000216A 4E75                       		rts	
0000216C                            ; ===========================================================================
0000216C                            
0000216C                            @addgreen:
0000216C 3203                       		move.w	d3,d1
0000216E 0641 0020                  		addi.w	#$20,d1		; increase green value
00002172 B242                       		cmp.w	d2,d1
00002174 6200                       		bhi.s	@addred
00002176 30C1                       		move.w	d1,(a0)+	; update palette
00002178 4E75                       		rts	
0000217A                            ; ===========================================================================
0000217A                            
0000217A                            @addred:
0000217A 5458                       		addq.w	#2,(a0)+	; increase red value
0000217C 4E75                       		rts	
0000217E                            ; ===========================================================================
0000217E                            
0000217E                            @next:
0000217E 5448                       		addq.w	#2,a0		; next colour
00002180 4E75                       		rts	
00002182                            ; End of function FadeIn_AddColour
00002182                            
00002182                            
00002182                            ; ---------------------------------------------------------------------------
00002182                            ; Subroutine to fade out to black
00002182                            ; ---------------------------------------------------------------------------
00002182                            
00002182                            
00002182                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002182                            
00002182                            
00002182                            PaletteFadeOut:
00002182 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; start position = 0; size = $40
00002188 383C 0015                  		move.w	#$15,d4
0000218C                            
0000218C                            	@mainloop:
0000218C 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
00002192 6100 0000                  		bsr.w	WaitForVBla
00002196 6100                       		bsr.s	FadeOut_ToBlack
00002198 6100 F5BC                  		bsr.w	RunPLC
0000219C 51CC FFEE                  		dbf	d4,@mainloop
000021A0 4E75                       		rts	
000021A2                            ; End of function PaletteFadeOut
000021A2                            
000021A2                            
000021A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021A2                            
000021A2                            
000021A2                            FadeOut_ToBlack:
000021A2 7000                       		moveq	#0,d0
000021A4 41F8 FB00                  		lea	(v_pal_dry).w,a0
000021A8 1038 F626                  		move.b	(v_pfade_start).w,d0
000021AC D0C0                       		adda.w	d0,a0
000021AE 1038 F627                  		move.b	(v_pfade_size).w,d0
000021B2                            
000021B2                            	@decolour:
000021B2 6100                       		bsr.s	FadeOut_DecColour ; decrease colour
000021B4 51C8 FFFC                  		dbf	d0,@decolour	; repeat for size of palette
000021B8                            
000021B8 7000                       		moveq	#0,d0
000021BA 41F8 FA80                  		lea	(v_pal_water).w,a0
000021BE 1038 F626                  		move.b	(v_pfade_start).w,d0
000021C2 D0C0                       		adda.w	d0,a0
000021C4 1038 F627                  		move.b	(v_pfade_size).w,d0
000021C8                            
000021C8                            	@decolour2:
000021C8 6100                       		bsr.s	FadeOut_DecColour
000021CA 51C8 FFFC                  		dbf	d0,@decolour2
000021CE 4E75                       		rts	
000021D0                            ; End of function FadeOut_ToBlack
000021D0                            
000021D0                            
000021D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021D0                            
000021D0                            
000021D0                            FadeOut_DecColour:
000021D0                            @dered:
000021D0 3410                       		move.w	(a0),d2
000021D2 6700                       		beq.s	@next
000021D4 3202                       		move.w	d2,d1
000021D6 0241 000E                  		andi.w	#$E,d1
000021DA 6700                       		beq.s	@degreen
000021DC 5558                       		subq.w	#2,(a0)+	; decrease red value
000021DE 4E75                       		rts	
000021E0                            ; ===========================================================================
000021E0                            
000021E0                            @degreen:
000021E0 3202                       		move.w	d2,d1
000021E2 0241 00E0                  		andi.w	#$E0,d1
000021E6 6700                       		beq.s	@deblue
000021E8 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
000021EC 4E75                       		rts	
000021EE                            ; ===========================================================================
000021EE                            
000021EE                            @deblue:
000021EE 3202                       		move.w	d2,d1
000021F0 0241 0E00                  		andi.w	#$E00,d1
000021F4 6700                       		beq.s	@next
000021F6 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
000021FA 4E75                       		rts	
000021FC                            ; ===========================================================================
000021FC                            
000021FC                            @next:
000021FC 5448                       		addq.w	#2,a0
000021FE 4E75                       		rts	
00002200                            ; End of function FadeOut_DecColour
00002200                            
00002200                            ; ---------------------------------------------------------------------------
00002200                            ; Subroutine to	fade in from white (Special Stage)
00002200                            ; ---------------------------------------------------------------------------
00002200                            
00002200                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002200                            
00002200                            
00002200                            PaletteWhiteIn:
00002200 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; start position = 0; size = $40
00002206 7000                       		moveq	#0,d0
00002208 41F8 FB00                  		lea	(v_pal_dry).w,a0
0000220C 1038 F626                  		move.b	(v_pfade_start).w,d0
00002210 D0C0                       		adda.w	d0,a0
00002212 323C 0EEE                  		move.w	#cWhite,d1
00002216 1038 F627                  		move.b	(v_pfade_size).w,d0
0000221A                            
0000221A                            	@fill:
0000221A 30C1                       		move.w	d1,(a0)+
0000221C 51C8 FFFC                  		dbf	d0,@fill 	; fill palette with white
00002220                            
00002220 383C 0015                  		move.w	#$15,d4
00002224                            
00002224                            	@mainloop:
00002224 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
0000222A 6100 0000                  		bsr.w	WaitForVBla
0000222E 6100                       		bsr.s	WhiteIn_FromWhite
00002230 6100 F524                  		bsr.w	RunPLC
00002234 51CC FFEE                  		dbf	d4,@mainloop
00002238 4E75                       		rts	
0000223A                            ; End of function PaletteWhiteIn
0000223A                            
0000223A                            
0000223A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000223A                            
0000223A                            
0000223A                            WhiteIn_FromWhite:
0000223A 7000                       		moveq	#0,d0
0000223C 41F8 FB00                  		lea	(v_pal_dry).w,a0
00002240 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
00002244 1038 F626                  		move.b	(v_pfade_start).w,d0
00002248 D0C0                       		adda.w	d0,a0
0000224A D2C0                       		adda.w	d0,a1
0000224C 1038 F627                  		move.b	(v_pfade_size).w,d0
00002250                            
00002250                            	@decolour:
00002250 6100                       		bsr.s	WhiteIn_DecColour ; decrease colour
00002252 51C8 FFFC                  		dbf	d0,@decolour	; repeat for size of palette
00002256                            
00002256 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	; is level Labyrinth?
0000225C 6600                       		bne.s	@exit		; if not, branch
0000225E 7000                       		moveq	#0,d0
00002260 41F8 FA80                  		lea	(v_pal_water).w,a0
00002264 43F8 FA00                  		lea	(v_pal_water_dup).w,a1
00002268 1038 F626                  		move.b	(v_pfade_start).w,d0
0000226C D0C0                       		adda.w	d0,a0
0000226E D2C0                       		adda.w	d0,a1
00002270 1038 F627                  		move.b	(v_pfade_size).w,d0
00002274                            
00002274                            	@decolour2:
00002274 6100                       		bsr.s	WhiteIn_DecColour
00002276 51C8 FFFC                  		dbf	d0,@decolour2
0000227A                            
0000227A                            	@exit:
0000227A 4E75                       		rts	
0000227C                            ; End of function WhiteIn_FromWhite
0000227C                            
0000227C                            
0000227C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000227C                            
0000227C                            
0000227C                            WhiteIn_DecColour:
0000227C                            @deblue:
0000227C 3419                       		move.w	(a1)+,d2
0000227E 3610                       		move.w	(a0),d3
00002280 B642                       		cmp.w	d2,d3
00002282 6700                       		beq.s	@next
00002284 3203                       		move.w	d3,d1
00002286 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
0000228A 6500                       		blo.s	@degreen
0000228C B242                       		cmp.w	d2,d1
0000228E 6500                       		blo.s	@degreen
00002290 30C1                       		move.w	d1,(a0)+
00002292 4E75                       		rts	
00002294                            ; ===========================================================================
00002294                            
00002294                            @degreen:
00002294 3203                       		move.w	d3,d1
00002296 0441 0020                  		subi.w	#$20,d1		; decrease green value
0000229A 6500                       		blo.s	@dered
0000229C B242                       		cmp.w	d2,d1
0000229E 6500                       		blo.s	@dered
000022A0 30C1                       		move.w	d1,(a0)+
000022A2 4E75                       		rts	
000022A4                            ; ===========================================================================
000022A4                            
000022A4                            @dered:
000022A4 5558                       		subq.w	#2,(a0)+	; decrease red value
000022A6 4E75                       		rts	
000022A8                            ; ===========================================================================
000022A8                            
000022A8                            @next:
000022A8 5448                       		addq.w	#2,a0
000022AA 4E75                       		rts	
000022AC                            ; End of function WhiteIn_DecColour
000022AC                            
000022AC                            ; ---------------------------------------------------------------------------
000022AC                            ; Subroutine to fade to white (Special Stage)
000022AC                            ; ---------------------------------------------------------------------------
000022AC                            
000022AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022AC                            
000022AC                            
000022AC                            PaletteWhiteOut:
000022AC 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; start position = 0; size = $40
000022B2 383C 0015                  		move.w	#$15,d4
000022B6                            
000022B6                            	@mainloop:
000022B6 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
000022BC 6100 0000                  		bsr.w	WaitForVBla
000022C0 6100                       		bsr.s	WhiteOut_ToWhite
000022C2 6100 F492                  		bsr.w	RunPLC
000022C6 51CC FFEE                  		dbf	d4,@mainloop
000022CA 4E75                       		rts	
000022CC                            ; End of function PaletteWhiteOut
000022CC                            
000022CC                            
000022CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022CC                            
000022CC                            
000022CC                            WhiteOut_ToWhite:
000022CC 7000                       		moveq	#0,d0
000022CE 41F8 FB00                  		lea	(v_pal_dry).w,a0
000022D2 1038 F626                  		move.b	(v_pfade_start).w,d0
000022D6 D0C0                       		adda.w	d0,a0
000022D8 1038 F627                  		move.b	(v_pfade_size).w,d0
000022DC                            
000022DC                            	@addcolour:
000022DC 6100                       		bsr.s	WhiteOut_AddColour
000022DE 51C8 FFFC                  		dbf	d0,@addcolour
000022E2                            
000022E2 7000                       		moveq	#0,d0
000022E4 41F8 FA80                  		lea	(v_pal_water).w,a0
000022E8 1038 F626                  		move.b	(v_pfade_start).w,d0
000022EC D0C0                       		adda.w	d0,a0
000022EE 1038 F627                  		move.b	(v_pfade_size).w,d0
000022F2                            
000022F2                            	@addcolour2:
000022F2 6100                       		bsr.s	WhiteOut_AddColour
000022F4 51C8 FFFC                  		dbf	d0,@addcolour2
000022F8 4E75                       		rts	
000022FA                            ; End of function WhiteOut_ToWhite
000022FA                            
000022FA                            
000022FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022FA                            
000022FA                            
000022FA                            WhiteOut_AddColour:
000022FA                            @addred:
000022FA 3410                       		move.w	(a0),d2
000022FC 0C42 0EEE                  		cmpi.w	#cWhite,d2
00002300 6700                       		beq.s	@next
00002302 3202                       		move.w	d2,d1
00002304 0241 000E                  		andi.w	#$E,d1
00002308 0C41 000E                  		cmpi.w	#cRed,d1
0000230C 6700                       		beq.s	@addgreen
0000230E 5458                       		addq.w	#2,(a0)+	; increase red value
00002310 4E75                       		rts	
00002312                            ; ===========================================================================
00002312                            
00002312                            @addgreen:
00002312 3202                       		move.w	d2,d1
00002314 0241 00E0                  		andi.w	#$E0,d1
00002318 0C41 00E0                  		cmpi.w	#cGreen,d1
0000231C 6700                       		beq.s	@addblue
0000231E 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
00002322 4E75                       		rts	
00002324                            ; ===========================================================================
00002324                            
00002324                            @addblue:
00002324 3202                       		move.w	d2,d1
00002326 0241 0E00                  		andi.w	#$E00,d1
0000232A 0C41 0E00                  		cmpi.w	#cBlue,d1
0000232E 6700                       		beq.s	@next
00002330 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
00002334 4E75                       		rts	
00002336                            ; ===========================================================================
00002336                            
00002336                            @next:
00002336 5448                       		addq.w	#2,a0
00002338 4E75                       		rts	
0000233A                            ; End of function WhiteOut_AddColour
0000233A                            
0000233A                            ; ---------------------------------------------------------------------------
0000233A                            ; Palette cycling routine - Sega logo
0000233A                            ; ---------------------------------------------------------------------------
0000233A                            
0000233A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000233A                            
0000233A                            
0000233A                            PalCycle_Sega:
0000233A 4A38 F635                  		tst.b	(v_pcyc_time+1).w
0000233E 6600                       		bne.s	loc_206A
00002340 43F8 FB20                  		lea	(v_pal_dry+$20).w,a1
00002344 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
0000234A 7205                       		moveq	#5,d1
0000234C 3038 F632                  		move.w	(v_pcyc_num).w,d0
00002350                            
00002350                            loc_2020:
00002350 6A00                       		bpl.s	loc_202A
00002352 5448                       		addq.w	#2,a0
00002354 5341                       		subq.w	#1,d1
00002356 5440                       		addq.w	#2,d0
00002358 60F6                       		bra.s	loc_2020
0000235A                            ; ===========================================================================
0000235A                            
0000235A                            loc_202A:
0000235A 3400                       		move.w	d0,d2
0000235C 0242 001E                  		andi.w	#$1E,d2
00002360 6600                       		bne.s	loc_2034
00002362 5440                       		addq.w	#2,d0
00002364                            
00002364                            loc_2034:
00002364 0C40 0060                  		cmpi.w	#$60,d0
00002368 6400                       		bhs.s	loc_203E
0000236A 3398 0000                  		move.w	(a0)+,(a1,d0.w)
0000236E                            
0000236E                            loc_203E:
0000236E 5440                       		addq.w	#2,d0
00002370 51C9 FFE8                  		dbf	d1,loc_202A
00002374                            
00002374 3038 F632                  		move.w	(v_pcyc_num).w,d0
00002378 5440                       		addq.w	#2,d0
0000237A 3400                       		move.w	d0,d2
0000237C 0242 001E                  		andi.w	#$1E,d2
00002380 6600                       		bne.s	loc_2054
00002382 5440                       		addq.w	#2,d0
00002384                            
00002384                            loc_2054:
00002384 0C40 0064                  		cmpi.w	#$64,d0
00002388 6D00                       		blt.s	loc_2062
0000238A 31FC 0401 F634             		move.w	#$401,(v_pcyc_time).w
00002390 70F4                       		moveq	#-$C,d0
00002392                            
00002392                            loc_2062:
00002392 31C0 F632                  		move.w	d0,(v_pcyc_num).w
00002396 7001                       		moveq	#1,d0
00002398 4E75                       		rts	
0000239A                            ; ===========================================================================
0000239A                            
0000239A                            loc_206A:
0000239A 5338 F634                  		subq.b	#1,(v_pcyc_time).w
0000239E 6A00                       		bpl.s	loc_20BC
000023A0 11FC 0004 F634             		move.b	#4,(v_pcyc_time).w
000023A6 3038 F632                  		move.w	(v_pcyc_num).w,d0
000023AA 0640 000C                  		addi.w	#$C,d0
000023AE 0C40 0030                  		cmpi.w	#$30,d0
000023B2 6500                       		blo.s	loc_2088
000023B4 7000                       		moveq	#0,d0
000023B6 4E75                       		rts	
000023B8                            ; ===========================================================================
000023B8                            
000023B8                            loc_2088:
000023B8 31C0 F632                  		move.w	d0,(v_pcyc_num).w
000023BC 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
000023C2 41F0 0000                  		lea	(a0,d0.w),a0
000023C6 43F8 FB04                  		lea	(v_pal_dry+$04).w,a1
000023CA 22D8                       		move.l	(a0)+,(a1)+
000023CC 22D8                       		move.l	(a0)+,(a1)+
000023CE 3298                       		move.w	(a0)+,(a1)
000023D0 43F8 FB20                  		lea	(v_pal_dry+$20).w,a1
000023D4 7000                       		moveq	#0,d0
000023D6 722C                       		moveq	#$2C,d1
000023D8                            
000023D8                            loc_20A8:
000023D8 3400                       		move.w	d0,d2
000023DA 0242 001E                  		andi.w	#$1E,d2
000023DE 6600                       		bne.s	loc_20B2
000023E0 5440                       		addq.w	#2,d0
000023E2                            
000023E2                            loc_20B2:
000023E2 3390 0000                  		move.w	(a0),(a1,d0.w)
000023E6 5440                       		addq.w	#2,d0
000023E8 51C9 FFEE                  		dbf	d1,loc_20A8
000023EC                            
000023EC                            loc_20BC:
000023EC 7001                       		moveq	#1,d0
000023EE 4E75                       		rts	
000023F0                            ; End of function PalCycle_Sega
000023F0                            
000023F0                            ; ===========================================================================
000023F0                            
000023F0                            Pal_Sega1:	incbin	"palette\Sega1.bin"
000023FC                            Pal_Sega2:	incbin	"palette\Sega2.bin"
0000242C                            
0000242C                            ; ---------------------------------------------------------------------------
0000242C                            ; Subroutines to load palettes
0000242C                            
0000242C                            ; input:
0000242C                            ;	d0 = index number for palette
0000242C                            ; ---------------------------------------------------------------------------
0000242C                            
0000242C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000242C                            
0000242C                            
0000242C                            ; ---------------------------------------------------------------------------
0000242C                            ; Subroutines to load pallets
0000242C                            ; ---------------------------------------------------------------------------
0000242C                            
0000242C                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000242C                            
0000242C                            PalLoad1:
0000242C 1238 FE11                  		move.b ($FFFFFE11),d1
00002430 43F9 0000 0000             		lea (PalPointers).l,a1
00002436 0C01 0000                  		cmp.b #0,d1
0000243A 6700 0000                  		beq.w PalLoad1_Continue
0000243E 43F9 0000 0000             		lea (PalPointers2).l,a1
00002444 0C01 0001                  		cmp.b #1,d1
00002448 6700 0000                  		beq.w PalLoad1_Continue
0000244C 43F9 0000 0000             		lea (PalPointers3).l,a1
00002452                            
00002452                            PalLoad1_Continue:
00002452 E748                       		lsl.w #3,d0
00002454 D2C0                       		adda.w d0,a1
00002456 2459                       		movea.l (a1)+,a2
00002458 3659                       		movea.w (a1)+,a3
0000245A D6FC 0080                  		adda.w #$80,a3
0000245E 3E19                       		move.w (a1)+,d7
00002460                            
00002460                            loc_2110:
00002460 26DA                       		move.l (a2)+,(a3)+
00002462 51CF FFFC                  		dbf d7,loc_2110
00002466 4E75                       		rts
00002468                             ; End of function PalLoad1
00002468                            
00002468                            
00002468                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00002468                            
00002468                            PalLoad2:
00002468 1238 FE11                  		move.b ($FFFFFE11),d1
0000246C 43F9 0000 0000             		lea (PalPointers).l,a1
00002472 0C01 0000                  		cmp.b #0,d1
00002476 6700 0000                  		beq.w PalLoad2_Continue
0000247A 43F9 0000 0000             		lea (PalPointers2).l,a1
00002480 0C01 0001                  		cmp.b #1,d1
00002484 6700 0000                  		beq.w PalLoad2_Continue
00002488 43F9 0000 0000             		lea (PalPointers3).l,a1
0000248E                            
0000248E                            
0000248E                            PalLoad2_Continue:
0000248E E748                       		lsl.w #3,d0
00002490 D2C0                       		adda.w d0,a1
00002492 2459                       		movea.l (a1)+,a2
00002494 3659                       		movea.w (a1)+,a3
00002496 3E19                       		move.w (a1)+,d7
00002498                            
00002498                            loc_2128:
00002498 26DA                       		move.l (a2)+,(a3)+
0000249A 51CF FFFC                  		dbf d7,loc_2128
0000249E 4E75                       		rts
000024A0                            ; End of function PalLoad2
000024A0                            
000024A0                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
000024A0                            
000024A0                            
000024A0                            PalLoad_Loop: ;Quick load - TIS
000024A0                                    
000024A0 34D9                               move.w    (a1)+,(a2)+              ;Copy pallete data to RAM
000024A2 51C8 FFFC                          dbf    d0,PalLoad_Loop               ;Loop d0 (length)
000024A6 4E75                               rts
000024A8                            
000024A8                            ; ---------------------------------------------------------------------------
000024A8                            ; Underwater pallet loading subroutine
000024A8                            ; ---------------------------------------------------------------------------
000024A8                            
000024A8                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000024A8                            
000024A8                            PalLoad3_Water:
000024A8 1238 FE11                  		move.b ($FFFFFE11),d1
000024AC 43F9 0000 0000             		lea (PalPointers).l,a1
000024B2 0C01 0000                  		cmp.b #0,d1
000024B6 6700 0000                  		beq.w PalLoad3_Continue
000024BA 43F9 0000 0000             		lea (PalPointers2).l,a1
000024C0 0C01 0001                  		cmp.b #1,d1
000024C4 6700 0000                  		beq.w PalLoad3_Continue
000024C8 43F9 0000 0000             		lea (PalPointers3).l,a1
000024CE                            
000024CE                            PalLoad3_Continue:
000024CE E748                       		lsl.w #3,d0
000024D0 D2C0                       		adda.w d0,a1
000024D2 2459                       		movea.l (a1)+,a2
000024D4 3659                       		movea.w (a1)+,a3
000024D6 96FC 0080                  		suba.w #$80,a3
000024DA 3E19                       		move.w (a1)+,d7
000024DC                            
000024DC                            loc_2144:
000024DC 26DA                       		move.l (a2)+,(a3)+
000024DE 51CF FFFC                  		dbf d7,loc_2144
000024E2 4E75                       		rts
000024E4                            ; End of function PalLoad3_Water
000024E4                            
000024E4                            
000024E4                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000024E4                            
000024E4                            
000024E4                            PalLoad4_Water:
000024E4 1238 FE11                  		move.b ($FFFFFE11),d1
000024E8 43F9 0000 0000             		lea (PalPointers).l,a1
000024EE 0C01 0000                  		cmp.b #0,d1
000024F2 6700 0000                  		beq.w PalLoad4_Continue
000024F6 43F9 0000 0000             		lea (PalPointers2).l,a1
000024FC 0C01 0001                  		cmp.b #1,d1
00002500 6700 0000                  		beq.w PalLoad4_Continue
00002504 43F9 0000 0000             		lea (PalPointers3).l,a1
0000250A                            
0000250A                            PalLoad4_Continue:
0000250A E748                       		lsl.w #3,d0
0000250C D2C0                       		adda.w d0,a1
0000250E 2459                       		movea.l (a1)+,a2
00002510 3659                       		movea.w (a1)+,a3
00002512 96FC 0100                  		suba.w #$100,a3
00002516 3E19                       		move.w (a1)+,d7
00002518                            loc_2160:
00002518 26DA                       		move.l (a2)+,(a3)+
0000251A 51CF FFFC                  		dbf d7,loc_2160
0000251E 4E75                       		rts
00002520                             ; End of function PalLoad4_Water
00002520                            
00002520                            ; ===========================================================================
00002520                            
00002520                            		include	"_inc\Palette Pointers.asm"
00002520                            ; ---------------------------------------------------------------------------
00002520                            ; Palette pointers
00002520                            ; ---------------------------------------------------------------------------
00002520                            
00002520                            palp:	macro paladdress,ramaddress,colors
00002520                            	dc.l paladdress
00002520                            	dc.w ramaddress, (colors>>1)-1
00002520                            	endm
00002520                            
00002520                            PalPointers:
00002520                            
00002520                            ; palette address, RAM address, colors
00002520                            
00002520 0000 0000 FB00 001F        ptr_Pal_SegaBG:		palp	Pal_SegaBG,v_pal_dry,$40		; 0 - Sega logo
00002528 0000 0000 FB00 001F        ptr_Pal_Title:		palp	Pal_Title,v_pal_dry,$40		; 1 - title screen
00002530 0000 0000 FB00 001F        ptr_Pal_LevelSel:	palp	Pal_LevelSel,v_pal_dry,$40		; 2 - level select
00002538 0000 0000 FB00 0007        ptr_Pal_Sonic:		palp	Pal_Sonic,v_pal_dry,$10		; 3 - Sonic
00002540                            Pal_Levels:
00002540 0000 0000 FB20 0017        ptr_Pal_GHZ:		palp	Pal_GHZ,v_pal_dry+$20, $30		; 4 - GHZ
00002548 0000 0000 FB20 0017        ptr_Pal_LZ:		palp	Pal_LZ,v_pal_dry+$20,$30		; 5 - LZ
00002550 0000 0000 FB20 0017        ptr_Pal_MZ:		palp	Pal_MZ,v_pal_dry+$20,$30		; 6 - MZ
00002558 0000 0000 FB20 0017        ptr_Pal_SLZ:		palp	Pal_SLZ,v_pal_dry+$20,$30		; 7 - SLZ
00002560 0000 0000 FB20 0017        ptr_Pal_SYZ:		palp	Pal_SYZ,v_pal_dry+$20,$30		; 8 - SYZ
00002568 0000 0000 FB20 0017        ptr_Pal_SBZ1:		palp	Pal_SBZ1,v_pal_dry+$20,$30		; 9 - SBZ1
00002570 0000 0000 FB00 001F        ptr_Pal_Special:	palp	Pal_Special,v_pal_dry,$40		; $A (10) - special stage
00002578 0000 0000 FB00 001F        ptr_Pal_LZWater:	palp	Pal_LZWater,v_pal_dry,$40		; $B (11) - LZ underwater
00002580 0000 0000 FB20 0017        ptr_Pal_SBZ3:		palp	Pal_SBZ3,v_pal_dry+$20,$30		; $C (12) - SBZ3
00002588 0000 0000 FB00 001F        ptr_Pal_SBZ3Water:	palp	Pal_SBZ3Water,v_pal_dry,$40		; $D (13) - SBZ3 underwater
00002590 0000 0000 FB20 0017        ptr_Pal_SBZ2:		palp	Pal_SBZ2,v_pal_dry+$20,$30		; $E (14) - SBZ2
00002598 0000 0000 FB00 0007        ptr_Pal_LZSonWater:	palp	Pal_LZSonWater,v_pal_dry,$10	; $F (15) - LZ Sonic underwater
000025A0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat:	palp	Pal_SBZ3SonWat,v_pal_dry,$10	; $10 (16) - SBZ3 Sonic underwater
000025A8 0000 0000 FB00 001F        ptr_Pal_SSResult:	palp	Pal_SSResult,v_pal_dry,$40		; $11 (17) - special stage results
000025B0 0000 0000 FB00 000F        ptr_Pal_Continue:	palp	Pal_Continue,v_pal_dry,$20		; $12 (18) - special stage results continue
000025B8 0000 0000 FB00 001F        ptr_Pal_Ending:		palp	Pal_Ending,v_pal_dry,$40		; $13 (19) - ending sequence
000025C0 0000 0000 FB00 001F        ptr_Pal_Options:		palp	Pal_Options,v_pal_dry,$40		; $14 (20) - options screen
000025C8 0000 0000 FB00 0007        ptr_Pal_Sonic2:		palp	Pal_Sonic2,v_pal_dry,$10		; $15 (20) - Sonic (Sonic 1)
000025D0 0000 0000 FB00 0007        ptr_Pal_Sonic3:		palp	Pal_Sonic3,v_pal_dry,$10		; $16 (21) - Sonic (Beta)
000025D8 0000 0000 FB00 0007        ptr_Pal_Sonic4:		palp	Pal_Sonic4,v_pal_dry,$10		; $17 (22) - Sonic (Midnight)
000025E0 0000 0000 FB00 0007        ptr_Pal_Sonic5:		palp	Pal_Sonic5,v_pal_dry,$10		; $18 (23) - Sonic (C2)
000025E8 0000 0000 FB00 0007        ptr_Pal_Sonic6:		palp	Pal_Sonic6,v_pal_dry,$10		; $19 (24) - Sonic (Crackers)
000025F0 0000 0000 FB00 0007        ptr_Pal_Sonic7:		palp	Pal_Sonic7,v_pal_dry,$10		; $1A (25) - Sonic (RHS)
000025F8 0000 0000 FB00 0007        ptr_Pal_Sonic8:		palp	Pal_Sonic8,v_pal_dry,$10		; $1B (26) - Sonic (Socket)
00002600 0000 0000 FB00 0007        ptr_Pal_Sonic9:		palp	Pal_Sonic9,v_pal_dry,$10		; $1C (27) - Sonic (Cringe)
00002608 0000 0000 FB00 0007        ptr_Pal_Sonic10:		palp	Pal_Sonic10,v_pal_dry,$10		; $1D (28) - Sonic (Darker)
00002610 0000 0000 FB00 0007        ptr_Pal_SonWater2:		palp	Pal_SonWater2,v_pal_dry,$10		; $15 (20) - Sonic Underwater (Sonic 1)
00002618 0000 0000 FB00 0007        ptr_Pal_SonWater3:		palp	Pal_SonWater3,v_pal_dry,$10		; $16 (21) - Sonic Underwater (Beta)
00002620 0000 0000 FB00 0007        ptr_Pal_SonWater4:		palp	Pal_SonWater4,v_pal_dry,$10		; $17 (22) - Sonic Underwater (Midnight)
00002628 0000 0000 FB00 0007        ptr_Pal_SonWater5:		palp	Pal_SonWater5,v_pal_dry,$10		; $18 (23) - Sonic Underwater (C2)
00002630 0000 0000 FB00 0007        ptr_Pal_SonWater6:		palp	Pal_SonWater6,v_pal_dry,$10		; $19 (24) - Sonic Underwater (Crackers)
00002638 0000 0000 FB00 0007        ptr_Pal_SonWater7:		palp	Pal_SonWater7,v_pal_dry,$10		; $1A (25) - Sonic Underwater (RHS)
00002640 0000 0000 FB00 0007        ptr_Pal_SonWater8:		palp	Pal_SonWater8,v_pal_dry,$10		; $1B (26) - Sonic Underwater (Socket)
00002648 0000 0000 FB00 0007        ptr_Pal_SonWater9:		palp	Pal_SonWater9,v_pal_dry,$10		; $1C (27) - Sonic Underwater (Cringe)
00002650 0000 0000 FB00 0007        ptr_Pal_SonWater10:		palp	Pal_SonWater10,v_pal_dry,$10		; $1D (28) - Sonic Underwater (Darker)
00002658 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat2:	palp	Pal_SBZ3SonWat2,v_pal_dry,$10		; $15 (20) - Sonic Underwater (Sonic 1)
00002660 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat3:	palp	Pal_SBZ3SonWat3,v_pal_dry,$10	; $16 (21) - Sonic Underwater (Beta)
00002668 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat4:	palp	Pal_SBZ3SonWat4,v_pal_dry,$10	; $17 (22) - Sonic Underwater (Midnight)
00002670 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat5:	palp	Pal_SBZ3SonWat5,v_pal_dry,$10	; $18 (23) - Sonic Underwater (C2)
00002678 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat6:	palp	Pal_SBZ3SonWat6,v_pal_dry,$10	; $19 (24) - Sonic Underwater (Crackers)
00002680 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat7:	palp	Pal_SBZ3SonWat7,v_pal_dry,$10	; $1A (25) - Sonic Underwater (RHS)
00002688 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat8:	palp	Pal_SBZ3SonWat8,v_pal_dry,$10	; $1B (26) - Sonic Underwater (Socket)
00002690 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat9:	palp	Pal_SBZ3SonWat9,v_pal_dry,$10	; $1C (27) - Sonic Underwater (Cringe)
00002698 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat10:	palp	Pal_SBZ3SonWat10,v_pal_dry,$10	; $1D (28) - Sonic Underwater (Darker)
000026A0                            			even
000026A0                            
000026A0                            PalPointers2:
000026A0                            
000026A0                            ; palette address, RAM address, colors
000026A0                            ; Note, Uses Duplicate entries to ensure they are in the correct place, but they are not needed in the IDs
000026A0 0000 0000 FB00 001F        ptr_Pal_SegaBG_D:		palp	Pal_SegaBG,v_pal_dry,$40		; 0 - Sega logo
000026A8 0000 0000 FB00 001F        ptr_Pal_Title_D:		palp	Pal_Title,v_pal_dry,$40		; 1 - title screen
000026B0 0000 0000 FB00 001F        ptr_Pal_LevelSel_D:	palp	Pal_LevelSel,v_pal_dry,$40		; 2 - level select
000026B8 0000 0000 FB00 0007        ptr_Pal_SonicD:		palp	Pal_Sonic,v_pal_dry,$10		; 3 - Sonic
000026C0                            Pal_Levels_2:
000026C0 0000 0000 FB20 0017        ptr_Pal_GHZ2:		palp	Pal_GHZ2,v_pal_dry+$20, $30		; 4 - GHZ
000026C8 0000 0000 FB20 0017        ptr_Pal_LZ2:		palp	Pal_LZ2,v_pal_dry+$20,$30		; 5 - LZ
000026D0 0000 0000 FB20 0017        ptr_Pal_MZ2:		palp	Pal_MZ2,v_pal_dry+$20,$30		; 6 - MZ
000026D8 0000 0000 FB20 0017        ptr_Pal_SLZ2:		palp	Pal_SLZ2,v_pal_dry+$20,$30		; 7 - SLZ
000026E0 0000 0000 FB20 0017        ptr_Pal_SYZ2:		palp	Pal_SYZ2,v_pal_dry+$20,$30		; 8 - SYZ
000026E8 0000 0000 FB20 0017        ptr_Pal_SBZ1_D:		palp	Pal_SBZ1,v_pal_dry+$20,$30		; 9 - SBZ1
000026F0 0000 0000 FB00 001F        ptr_Pal_Special_D:	palp	Pal_Special,v_pal_dry,$40		; $A (10) - special stage
000026F8 0000 0000 FB00 001F        ptr_Pal_LZWatr2:	palp	Pal_LZWatr2,v_pal_dry,$40		; $B (11) - LZ underwater
00002700 0000 0000 FB20 0017        ptr_Pal_SBZ3_D:		palp	Pal_SBZ3,v_pal_dry+$20,$30		; $C (12) - SBZ3
00002708 0000 0000 FB00 001F        ptr_Pal_SBZ3Water_D:	palp	Pal_SBZ3Water,v_pal_dry,$40		; $D (13) - SBZ3 underwater
00002710 0000 0000 FB20 0017        ptr_Pal_SBZ2_D:		palp	Pal_SBZ2,v_pal_dry+$20,$30		; $E (14) - SBZ2
00002718 0000 0000 FB00 0007        ptr_Pal_LZSonWatr2:	palp	Pal_LZSonWatr2,v_pal_dry,$10	; $F (15) - LZ Sonic underwater
00002720 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat_D:	palp	Pal_SBZ3SonWat,v_pal_dry,$10	; $10 (16) - SBZ3 Sonic underwater
00002728 0000 0000 FB00 001F        ptr_Pal_SSResult_D:	palp	Pal_SSResult,v_pal_dry,$40		; $11 (17) - special stage results
00002730 0000 0000 FB00 000F        ptr_Pal_Continue_D:	palp	Pal_Continue,v_pal_dry,$20		; $12 (18) - special stage results continue
00002738 0000 0000 FB00 001F        ptr_Pal_Options_D:		palp	Pal_Options,v_pal_dry,$40		; $13 (20) - options screen
00002740 0000 0000 FB00 001F        ptr_Pal_Ending_D:		palp	Pal_Ending,v_pal_dry,$40		; $14 (21) - ending sequence
00002748 0000 0000 FB00 0007        ptr_Pal_Sonic2_D:		palp	Pal_Sonic2,v_pal_dry,$10		; $15 (22) - Sonic (Sonic 1)
00002750 0000 0000 FB00 0007        ptr_Pal_Sonic3_D:		palp	Pal_Sonic3,v_pal_dry,$10		; $16 (23) - Sonic (Beta)
00002758 0000 0000 FB00 0007        ptr_Pal_Sonic4_D:		palp	Pal_Sonic4,v_pal_dry,$10		; $17 (24) - Sonic (Midnight)
00002760 0000 0000 FB00 0007        ptr_Pal_Sonic5_D:		palp	Pal_Sonic5,v_pal_dry,$10		; $18 (25) - Sonic (C2)
00002768 0000 0000 FB00 0007        ptr_Pal_Sonic6_D:		palp	Pal_Sonic6,v_pal_dry,$10		; $19 (26) - Sonic (Crackers)
00002770 0000 0000 FB00 0007        ptr_Pal_Sonic7_D:		palp	Pal_Sonic7,v_pal_dry,$10		; $1A (27) - Sonic (RHS)
00002778 0000 0000 FB00 0007        ptr_Pal_Sonic8_D:		palp	Pal_Sonic8,v_pal_dry,$10		; $1B (28) - Sonic (Socket)
00002780 0000 0000 FB00 0007        ptr_Pal_Sonic9_D:		palp	Pal_Sonic9,v_pal_dry,$10		; $1C (29) - Sonic (Cringe)
00002788 0000 0000 FB00 0007        ptr_Pal_Sonic10_D:		palp	Pal_Sonic10,v_pal_dry,$10		; $1D (30) - Sonic (Darker)
00002790 0000 0000 FB00 0007        ptr_Pal_SonWater2_D:		palp	Pal_SonWater2,v_pal_dry,$10		; $15 (31) - Sonic Underwater (Sonic 1)
00002798 0000 0000 FB00 0007        ptr_Pal_SonWater3_D:		palp	Pal_SonWater3,v_pal_dry,$10		; $16 (32) - Sonic Underwater (Beta)
000027A0 0000 0000 FB00 0007        ptr_Pal_SonWater4_D:		palp	Pal_SonWater4,v_pal_dry,$10		; $17 (33) - Sonic Underwater (Midnight)
000027A8 0000 0000 FB00 0007        ptr_Pal_SonWater5_D:		palp	Pal_SonWater5,v_pal_dry,$10		; $18 (34) - Sonic Underwater (C2)
000027B0 0000 0000 FB00 0007        ptr_Pal_SonWater6_D:		palp	Pal_SonWater6,v_pal_dry,$10		; $19 (35) - Sonic Underwater (Crackers)
000027B8 0000 0000 FB00 0007        ptr_Pal_SonWater7_D:		palp	Pal_SonWater7,v_pal_dry,$10		; $1A (36) - Sonic Underwater (RHS)
000027C0 0000 0000 FB00 0007        ptr_Pal_SonWater8_D:		palp	Pal_SonWater8,v_pal_dry,$10		; $1B (37) - Sonic Underwater (Socket)
000027C8 0000 0000 FB00 0007        ptr_Pal_SonWater9_D:		palp	Pal_SonWater9,v_pal_dry,$10		; $1C (38) - Sonic Underwater (Cringe)
000027D0 0000 0000 FB00 0007        ptr_Pal_SonWater10_D:		palp	Pal_SonWater10,v_pal_dry,$10		; $1D (39) - Sonic Underwater (Darker)
000027D8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat2D:	palp	Pal_SBZ3SonWat2,v_pal_dry,$10		; $15 (40) - Sonic Underwater (Sonic 1)
000027E0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat3D:	palp	Pal_SBZ3SonWat3,v_pal_dry,$10	; $16 (41) - Sonic Underwater (Beta)
000027E8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat4D:	palp	Pal_SBZ3SonWat4,v_pal_dry,$10	; $17 (42) - Sonic Underwater (Midnight)
000027F0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat5D:	palp	Pal_SBZ3SonWat5,v_pal_dry,$10	; $18 (43) - Sonic Underwater (C2)
000027F8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat6D:	palp	Pal_SBZ3SonWat6,v_pal_dry,$10	; $19 (44) - Sonic Underwater (Crackers)
00002800 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat7D:	palp	Pal_SBZ3SonWat7,v_pal_dry,$10	; $1A (45) - Sonic Underwater (RHS)
00002808 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat8D:	palp	Pal_SBZ3SonWat8,v_pal_dry,$10	; $1B (46) - Sonic Underwater (Socket)
00002810 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat9D:	palp	Pal_SBZ3SonWat9,v_pal_dry,$10	; $1C (47) - Sonic Underwater (Cringe)
00002818 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat10D:	palp	Pal_SBZ3SonWat10,v_pal_dry,$10	; $1D (48) - Sonic Underwater (Darker)
00002820                            			even
00002820                            			
00002820                            PalPointers3:
00002820                            			
00002820                            ; Note, Uses Duplicate entries to ensure they are in the correct place, but they are not needed in the IDs
00002820 0000 0000 FB00 001F        ptr_Pal_SegaBG_E:		palp	Pal_SegaBG,v_pal_dry,$40		; 0 - Sega logo
00002828 0000 0000 FB00 001F        ptr_Pal_Title_E:		palp	Pal_Title,v_pal_dry,$40		; 1 - title screen
00002830 0000 0000 FB00 001F        ptr_Pal_LevelSel_E:		palp	Pal_LevelSel,v_pal_dry,$40		; 2 - level select
00002838 0000 0000 FB00 0007        ptr_Pal_SonicE:			palp	Pal_Sonic,v_pal_dry,$10		; 3 - Sonic
00002840                            Pal_Levels_3:
00002840 0000 0000 FB20 0017        ptr_Pal_GHZ3:		palp	Pal_GHZ3,v_pal_dry+$20, $30		; 4 - GHZ
00002848 0000 0000 FB20 0017        ptr_Pal_LZ3:		palp	Pal_LZ3,v_pal_dry+$20,$30		; 5 - LZ
00002850 0000 0000 FB20 0017        ptr_Pal_MZ3:		palp	Pal_MZ3,v_pal_dry+$20,$30		; 6 - MZ
00002858 0000 0000 FB20 0017        ptr_Pal_SLZ3:		palp	Pal_SLZ3,v_pal_dry+$20,$30		; 7 - SLZ
00002860 0000 0000 FB20 0017        ptr_Pal_SYZ3:		palp	Pal_SYZ3,v_pal_dry+$20,$30		; 8 - SYZ
00002868 0000 0000 FB20 0017        ptr_Pal_SBZ1_E:		palp	Pal_SBZ1,v_pal_dry+$20,$30		; 9 - SBZ1
00002870 0000 0000 FB00 001F        ptr_Pal_Special_E:	palp	Pal_Special,v_pal_dry,$40		; $A (10) - special stage
00002878 0000 0000 FB00 001F        ptr_Pal_LZWatr3:	palp	Pal_LZWatr3,v_pal_dry,$40		; $B (11) - LZ underwater
00002880 0000 0000 FB20 0017        ptr_Pal_SBZ3_E:		palp	Pal_SBZ3,v_pal_dry+$20,$30		; $C (12) - SBZ3
00002888 0000 0000 FB00 001F        ptr_Pal_SBZ3Water_E:	palp	Pal_SBZ3Water,v_pal_dry,$40		; $D (13) - SBZ3 underwater
00002890 0000 0000 FB20 0017        ptr_Pal_SBZ2_E:		palp	Pal_SBZ2,v_pal_dry+$20,$30		; $E (14) - SBZ2
00002898 0000 0000 FB00 0007        ptr_Pal_LZSonWatr2E:	palp	Pal_LZSonWatr2,v_pal_dry,$10	; $F (15) - LZ Sonic underwater
000028A0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat_E:	palp	Pal_SBZ3SonWat,v_pal_dry,$10	; $10 (16) - SBZ3 Sonic underwater
000028A8 0000 0000 FB00 001F        ptr_Pal_SSResult_E:	palp	Pal_SSResult,v_pal_dry,$40		; $11 (17) - special stage results
000028B0 0000 0000 FB00 000F        ptr_Pal_Continue_E:	palp	Pal_Continue,v_pal_dry,$20		; $12 (18) - special stage results continue
000028B8 0000 0000 FB00 001F        ptr_Pal_Ending_E:		palp	Pal_Ending,v_pal_dry,$40		; $13 (19) - ending sequence
000028C0 0000 0000 FB00 001F        ptr_Pal_Options_E:		palp	Pal_Options,v_pal_dry,$40		; $14 (21) - options screen
000028C8 0000 0000 FB00 0007        ptr_Pal_Sonic2_E:		palp	Pal_Sonic2,v_pal_dry,$10		; $15 (22) - Sonic (Sonic 1)
000028D0 0000 0000 FB00 0007        ptr_Pal_Sonic3_E:		palp	Pal_Sonic3,v_pal_dry,$10		; $16 (23) - Sonic (Beta)
000028D8 0000 0000 FB00 0007        ptr_Pal_Sonic4_E:		palp	Pal_Sonic4,v_pal_dry,$10		; $17 (24) - Sonic (Midnight)
000028E0 0000 0000 FB00 0007        ptr_Pal_Sonic5_E:		palp	Pal_Sonic5,v_pal_dry,$10		; $18 (25) - Sonic (C2)
000028E8 0000 0000 FB00 0007        ptr_Pal_Sonic6_E:		palp	Pal_Sonic6,v_pal_dry,$10		; $19 (26) - Sonic (Crackers)
000028F0 0000 0000 FB00 0007        ptr_Pal_Sonic7_E:		palp	Pal_Sonic7,v_pal_dry,$10		; $1A (27) - Sonic (RHS)
000028F8 0000 0000 FB00 0007        ptr_Pal_Sonic8_E:		palp	Pal_Sonic8,v_pal_dry,$10		; $1B (28) - Sonic (Socket)
00002900 0000 0000 FB00 0007        ptr_Pal_Sonic9_E:		palp	Pal_Sonic9,v_pal_dry,$10		; $1C (29) - Sonic (Cringe)
00002908 0000 0000 FB00 0007        ptr_Pal_Sonic10_E:		palp	Pal_Sonic10,v_pal_dry,$10		; $1D (30) - Sonic (Darker)
00002910 0000 0000 FB00 0007        ptr_Pal_SonWater2_E:		palp	Pal_SonWater2,v_pal_dry,$10		; $15 (31) - Sonic Underwater (Sonic 1)
00002918 0000 0000 FB00 0007        ptr_Pal_SonWater3_E:		palp	Pal_SonWater3,v_pal_dry,$10		; $16 (32) - Sonic Underwater (Beta)
00002920 0000 0000 FB00 0007        ptr_Pal_SonWater4_E:		palp	Pal_SonWater4,v_pal_dry,$10		; $17 (33) - Sonic Underwater (Midnight)
00002928 0000 0000 FB00 0007        ptr_Pal_SonWater5_E:		palp	Pal_SonWater5,v_pal_dry,$10		; $18 (34) - Sonic Underwater (C2)
00002930 0000 0000 FB00 0007        ptr_Pal_SonWater6_E:		palp	Pal_SonWater6,v_pal_dry,$10		; $19 (35) - Sonic Underwater (Crackers)
00002938 0000 0000 FB00 0007        ptr_Pal_SonWater7_E:		palp	Pal_SonWater7,v_pal_dry,$10		; $1A (36) - Sonic Underwater (RHS)
00002940 0000 0000 FB00 0007        ptr_Pal_SonWater8_E:		palp	Pal_SonWater8,v_pal_dry,$10		; $1B (37) - Sonic Underwater (Socket)
00002948 0000 0000 FB00 0007        ptr_Pal_SonWater9_E:		palp	Pal_SonWater9,v_pal_dry,$10		; $1C (38) - Sonic Underwater (Cringe)
00002950 0000 0000 FB00 0007        ptr_Pal_SonWater10_E:		palp	Pal_SonWater10,v_pal_dry,$10		; $1D (39) - Sonic Underwater (Darker)
00002958 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat2E:	palp	Pal_SBZ3SonWat2,v_pal_dry,$10		; $15 (40) - Sonic Underwater (Sonic 1)
00002960 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat3E:	palp	Pal_SBZ3SonWat3,v_pal_dry,$10	; $16 (41) - Sonic Underwater (Beta)
00002968 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat4E:	palp	Pal_SBZ3SonWat4,v_pal_dry,$10	; $17 (42) - Sonic Underwater (Midnight)
00002970 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat5E:	palp	Pal_SBZ3SonWat5,v_pal_dry,$10	; $18 (43) - Sonic Underwater (C2)
00002978 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat6E:	palp	Pal_SBZ3SonWat6,v_pal_dry,$10	; $19 (44) - Sonic Underwater (Crackers)
00002980 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat7E:	palp	Pal_SBZ3SonWat7,v_pal_dry,$10	; $1A (45) - Sonic Underwater (RHS)
00002988 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat8E:	palp	Pal_SBZ3SonWat8,v_pal_dry,$10	; $1B (46) - Sonic Underwater (Socket)
00002990 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat9E:	palp	Pal_SBZ3SonWat9,v_pal_dry,$10	; $1C (47) - Sonic Underwater (Cringe)
00002998 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat10E:	palp	Pal_SBZ3SonWat10,v_pal_dry,$10	; $1D (48) - Sonic Underwater (Darker)
000029A0                            			even
000029A0                            
000029A0                            
000029A0 =00000000                  palid_SegaBG:		equ (ptr_Pal_SegaBG-PalPointers)/8
000029A0 =00000001                  palid_Title:		equ (ptr_Pal_Title-PalPointers)/8
000029A0 =00000002                  palid_LevelSel:		equ (ptr_Pal_LevelSel-PalPointers)/8
000029A0 =00000003                  palid_Sonic:		equ (ptr_Pal_Sonic-PalPointers)/8
000029A0 =00000004                  palid_GHZ:		equ (ptr_Pal_GHZ-PalPointers)/8
000029A0 =00000005                  palid_LZ:		equ (ptr_Pal_LZ-PalPointers)/8
000029A0 =00000006                  palid_MZ:		equ (ptr_Pal_MZ-PalPointers)/8
000029A0 =00000007                  palid_SLZ:		equ (ptr_Pal_SLZ-PalPointers)/8
000029A0 =00000008                  palid_SYZ:		equ (ptr_Pal_SYZ-PalPointers)/8
000029A0 =00000009                  palid_SBZ1:		equ (ptr_Pal_SBZ1-PalPointers)/8
000029A0 =0000000A                  palid_Special:		equ (ptr_Pal_Special-PalPointers)/8
000029A0 =0000000B                  palid_LZWater:		equ (ptr_Pal_LZWater-PalPointers)/8
000029A0 =0000000C                  palid_SBZ3:		equ (ptr_Pal_SBZ3-PalPointers)/8
000029A0 =0000000D                  palid_SBZ3Water:	equ (ptr_Pal_SBZ3Water-PalPointers)/8
000029A0 =0000000E                  palid_SBZ2:		equ (ptr_Pal_SBZ2-PalPointers)/8
000029A0 =0000000F                  palid_LZSonWater:	equ (ptr_Pal_LZSonWater-PalPointers)/8
000029A0 =00000010                  palid_SBZ3SonWat:	equ (ptr_Pal_SBZ3SonWat-PalPointers)/8
000029A0 =00000011                  palid_SSResult:		equ (ptr_Pal_SSResult-PalPointers)/8
000029A0 =00000012                  palid_Continue:		equ (ptr_Pal_Continue-PalPointers)/8
000029A0 =00000013                  palid_Ending:		equ (ptr_Pal_Ending-PalPointers)/8
000029A0 =00000014                  palid_Options:		equ (ptr_Pal_Options-PalPointers)/8
000029A0 =00000004                  palid_GHZ2:		equ (ptr_Pal_GHZ-PalPointers)/8
000029A0 =00000005                  palid_LZ2:		equ (ptr_Pal_LZ-PalPointers)/8
000029A0 =00000006                  palid_MZ2:		equ (ptr_Pal_MZ-PalPointers)/8
000029A0 =00000007                  palid_SLZ2:		equ (ptr_Pal_SLZ-PalPointers)/8
000029A0 =00000008                  palid_SYZ2:		equ (ptr_Pal_SYZ-PalPointers)/8
000029A0 =0000003B                  palid_LZWatr2:		equ (ptr_Pal_LZWatr2-PalPointers)/8
000029A0 =0000000F                  palid_LZSonWatr2:	equ (ptr_Pal_LZSonWater-PalPointers)/8
000029A0 =00000064                  palid_GHZ3:		equ (ptr_Pal_GHZ3-PalPointers)/8
000029A0 =00000065                  palid_LZ3:		equ (ptr_Pal_LZ3-PalPointers)/8
000029A0 =00000066                  palid_MZ3:		equ (ptr_Pal_MZ3-PalPointers)/8
000029A0 =00000067                  palid_SLZ3:		equ (ptr_Pal_SLZ3-PalPointers)/8
000029A0 =00000068                  palid_SYZ3:		equ (ptr_Pal_SYZ3-PalPointers)/8
000029A0 =0000006B                  palid_LZWatr3:		equ (ptr_Pal_LZWatr3-PalPointers)/8
000029A0 =0000000F                  palid_LZSonWatr3:	equ (ptr_Pal_LZSonWater-PalPointers)/8
000029A0 =00000015                  palid_Sonic2:		equ (ptr_Pal_Sonic2-PalPointers)/8
000029A0 =00000016                  palid_Sonic3:		equ (ptr_Pal_Sonic3-PalPointers)/8
000029A0 =00000017                  palid_Sonic4:		equ (ptr_Pal_Sonic4-PalPointers)/8
000029A0 =00000018                  palid_Sonic5:		equ (ptr_Pal_Sonic5-PalPointers)/8
000029A0 =00000019                  palid_Sonic6:		equ (ptr_Pal_Sonic6-PalPointers)/8
000029A0 =0000001A                  palid_Sonic7:		equ (ptr_Pal_Sonic7-PalPointers)/8
000029A0 =0000001B                  palid_Sonic8:		equ (ptr_Pal_Sonic8-PalPointers)/8
000029A0 =0000001C                  palid_Sonic9:		equ (ptr_Pal_Sonic9-PalPointers)/8
000029A0 =0000001D                  palid_Sonic10:		equ (ptr_Pal_Sonic10-PalPointers)/8
000029A0 =0000001E                  palid_SonWater2:		equ (ptr_Pal_SonWater2-PalPointers)/8
000029A0 =0000001F                  palid_SonWater3:		equ (ptr_Pal_SonWater3-PalPointers)/8
000029A0 =00000020                  palid_SonWater4:		equ (ptr_Pal_SonWater4-PalPointers)/8
000029A0 =00000021                  palid_SonWater5:		equ (ptr_Pal_SonWater5-PalPointers)/8
000029A0 =00000022                  palid_SonWater6:		equ (ptr_Pal_SonWater6-PalPointers)/8
000029A0 =00000023                  palid_SonWater7:		equ (ptr_Pal_SonWater7-PalPointers)/8
000029A0 =00000024                  palid_SonWater8:		equ (ptr_Pal_SonWater8-PalPointers)/8
000029A0 =00000025                  palid_SonWater9:		equ (ptr_Pal_SonWater9-PalPointers)/8
000029A0 =00000026                  palid_SonWater10:		equ (ptr_Pal_SonWater10-PalPointers)/8
000029A0 =00000027                  palid_SBZ3SonWat2:		equ (ptr_Pal_SBZ3SonWat2-PalPointers)/8
000029A0 =00000028                  palid_SBZ3SonWat3:		equ (ptr_Pal_SBZ3SonWat3-PalPointers)/8
000029A0 =00000029                  palid_SBZ3SonWat4:		equ (ptr_Pal_SBZ3SonWat4-PalPointers)/8
000029A0 =0000002A                  palid_SBZ3SonWat5:		equ (ptr_Pal_SBZ3SonWat5-PalPointers)/8
000029A0 =0000002B                  palid_SBZ3SonWat6:		equ (ptr_Pal_SBZ3SonWat6-PalPointers)/8
000029A0 =0000002C                  palid_SBZ3SonWat7:		equ (ptr_Pal_SBZ3SonWat7-PalPointers)/8
000029A0 =0000002D                  palid_SBZ3SonWat8:		equ (ptr_Pal_SBZ3SonWat8-PalPointers)/8
000029A0 =0000002E                  palid_SBZ3SonWat9:		equ (ptr_Pal_SBZ3SonWat9-PalPointers)/8
000029A0 =0000002F                  palid_SBZ3SonWat10:		equ (ptr_Pal_SBZ3SonWat10-PalPointers)/8
000029A0 =0000002F                  palid_SBZ3SonWat10:		equ (ptr_Pal_SBZ3SonWat10-PalPointers)/8
000029A0                            		
000029A0                            		;include	"_inc\Palette Pointers2.asm"
000029A0                            		
000029A0                            		;include	"_inc\Palette Pointers3.asm"
000029A0                            		
000029A0                            
000029A0                            ; ---------------------------------------------------------------------------
000029A0                            ; Palette data
000029A0                            ; ---------------------------------------------------------------------------
000029A0                            Pal_SegaBG:	incbin	"palette\Sega Background.bin"
00002A20                            Pal_Title:	incbin	"palette\Title Screen.bin"
00002AA0                            Pal_LevelSel:	incbin	"palette\Level Select.bin"
00002B20                            Pal_Sonic:	incbin	"palette\Sonic Pal\01 Default.bin"
00002B40                            Pal_GHZ:	incbin	"palette\Green Hill Zone.bin"
00002BA0                            Pal_GHZ2:	incbin	"palette\Green Hill Zone2.bin"
00002C00                            Pal_GHZ3:	incbin	"palette\Green Hill Zone3.bin"
00002C60                            Pal_LZ:		incbin	"palette\Labyrinth Zone.bin"
00002CC0                            Pal_LZ2:	incbin	"palette\Labyrinth Zone2.bin"
00002D20                            Pal_LZ3:	incbin	"palette\Labyrinth Zone3.bin"
00002D80                            Pal_LZWater:	incbin	"palette\Labyrinth Zone Underwater.bin"
00002E00                            Pal_LZWatr2:	incbin	"palette\Labyrinth Zone Underwater2.bin"
00002E80                            Pal_LZWatr3:	incbin	"palette\Labyrinth Zone Underwater3.bin"
00002F00                            Pal_MZ:		incbin	"palette\Marble Zone.bin"
00002F60                            Pal_MZ2:	incbin	"palette\Marble Zone2.bin"
00002FC0                            Pal_MZ3:	incbin	"palette\Marble Zone3.bin"
00003020                            Pal_SLZ:	incbin	"palette\Star Light Zone.bin"
00003080                            Pal_SLZ2:	incbin	"palette\Star Light Zone2.bin"
000030E0                            Pal_SLZ3:	incbin	"palette\Star Light Zone3.bin"
00003140                            Pal_SYZ:	incbin	"palette\Spring Yard Zone.bin"
000031A0                            Pal_SYZ2:	incbin	"palette\Spring Yard Zone2.bin"
00003200                            Pal_SYZ3:	incbin	"palette\Spring Yard Zone3.bin"
00003260                            Pal_SBZ1:	incbin	"palette\SBZ Act 1.bin"
000032C0                            Pal_SBZ2:	incbin	"palette\SBZ Act 2.bin"
00003320                            Pal_Special:	incbin	"palette\Special Stage.bin"
000033A0                            Pal_SBZ3:	incbin	"palette\SBZ Act 3.bin"
00003400                            Pal_SBZ3Water:	incbin	"palette\SBZ Act 3 Underwater.bin"
00003480                            Pal_LZSonWater:	incbin	"palette\Sonic - LZ Underwater.bin"
000034A0                            Pal_LZSonWatr2:	incbin	"palette\Sonic - LZ2 Underwater.bin"
000034C0                            Pal_SBZ3SonWat:	incbin	"palette\Sonic - SBZ3 Underwater.bin"
000034E0                            Pal_SSResult:	incbin	"palette\Special Stage Results.bin"
00003560                            Pal_Continue:	incbin	"palette\Special Stage Continue Bonus.bin"
000035A0                            Pal_Ending:	incbin	"palette\Ending.bin"
00003620                            Pal_Options:	incbin	"palette\Options.bin"
000036A0                            Pal_Sonic2:	incbin	"palette\Sonic Pal\02 Sonic 1.bin"
000036C0                            Pal_Sonic3:	incbin	"palette\Sonic Pal\03 Beta.bin"
000036E0                            Pal_Sonic4:	incbin	"palette\Sonic Pal\04 Midnight.bin"
00003700                            Pal_Sonic5:	incbin	"palette\Sonic Pal\05 C2.bin"
00003720                            Pal_Sonic6:	incbin	"palette\Sonic Pal\06 Clacker.bin"
00003740                            Pal_Sonic7:	incbin	"palette\Sonic Pal\07 Red Hot.bin"
00003760                            Pal_Sonic8:	incbin	"palette\Sonic Pal\08 Socket.bin"
00003780                            Pal_Sonic9:	incbin	"palette\Sonic Pal\09 Cringe.bin"
000037A0                            Pal_Sonic10:	incbin	"palette\Sonic Pal\10 Dark.bin"
000037C0                            Pal_SonWater2:	incbin	"palette\Sonic Pal\02 Sonic 1 Underwater.bin"
000037E0                            Pal_SonWater3:	incbin	"palette\Sonic Pal\03 Beta Underwater.bin"
00003800                            Pal_SonWater4:	incbin	"palette\Sonic Pal\04 Midnight Underwater.bin"
00003820                            Pal_SonWater5:	incbin	"palette\Sonic Pal\05 C2 Underwater.bin"
00003840                            Pal_SonWater6:	incbin	"palette\Sonic Pal\06 Clacker Underwater.bin"
00003860                            Pal_SonWater7:	incbin	"palette\Sonic Pal\07 Red Hot Underwater.bin"
00003880                            Pal_SonWater8:	incbin	"palette\Sonic Pal\08 Socket Underwater.bin"
000038A0                            Pal_SonWater9:	incbin	"palette\Sonic Pal\09 Cringe Underwater.bin"
000038C0                            Pal_SonWater10:	incbin	"palette\Sonic Pal\10 Dark Underwater.bin"
000038E0                            Pal_SBZ3SonWat2:	incbin	"palette\Sonic Pal\02 Sonic 1 SBZ3.bin"
00003900                            Pal_SBZ3SonWat3:	incbin	"palette\Sonic Pal\03 Beta SBZ3.bin"
00003920                            Pal_SBZ3SonWat4:	incbin	"palette\Sonic Pal\04 Midnight SBZ3.bin"
00003940                            Pal_SBZ3SonWat5:	incbin	"palette\Sonic Pal\05 C2 SBZ3.bin"
00003960                            Pal_SBZ3SonWat6:	incbin	"palette\Sonic Pal\06 Clacker SBZ3.bin"
00003980                            Pal_SBZ3SonWat7:	incbin	"palette\Sonic Pal\07 Red Hot SBZ3.bin"
000039A0                            Pal_SBZ3SonWat8:	incbin	"palette\Sonic Pal\08 Socket SBZ3.bin"
000039C0                            Pal_SBZ3SonWat9:	incbin	"palette\Sonic Pal\09 Cringe SBZ3.bin"
000039E0                            Pal_SBZ3SonWat10:	incbin	"palette\Sonic Pal\10 Dark SBZ3.bin"
00003A00                            ; ---------------------------------------------------------------------------
00003A00                            ; Subroutine to	wait for VBlank routines to complete
00003A00                            ; ---------------------------------------------------------------------------
00003A00                            
00003A00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003A00                            
00003A00                            
00003A00                            WaitForVBla:
00003A00 46FC 2300                  		enable_ints
00003A04                            
00003A04                            	@wait:
00003A04 4A38 F62A                  		tst.b	(v_vbla_routine).w ; has VBlank routine finished?
00003A08 66FA                       		bne.s	@wait		; if not, branch
00003A0A 4E75                       		rts	
00003A0C                            ; End of function WaitForVBla
00003A0C                            
00003A0C                            		include	"_incObj\sub RandomNumber.asm"
00003A0C                            ; ---------------------------------------------------------------------------
00003A0C                            ; Subroutine to	generate a pseudo-random number	in d0
00003A0C                            ; ---------------------------------------------------------------------------
00003A0C                            
00003A0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003A0C                            
00003A0C                            
00003A0C                            RandomNumber:
00003A0C 2238 F636                  		move.l	(v_random).w,d1
00003A10 6600                       		bne.s	@scramble	; if d1 is not 0, branch
00003A12 223C 2A6D 365A             		move.l	#$2A6D365A,d1	; if d1 is 0, use seed number
00003A18                            
00003A18                            	@scramble:
00003A18 2001                       		move.l	d1,d0
00003A1A E581                       		asl.l	#2,d1
00003A1C D280                       		add.l	d0,d1
00003A1E E781                       		asl.l	#3,d1
00003A20 D280                       		add.l	d0,d1
00003A22 3001                       		move.w	d1,d0
00003A24 4841                       		swap	d1
00003A26 D041                       		add.w	d1,d0
00003A28 3200                       		move.w	d0,d1
00003A2A 4841                       		swap	d1
00003A2C 21C1 F636                  		move.l	d1,(v_random).w
00003A30 4E75                       		rts	
00003A30 4E75                       		rts	
00003A32                            		include	"_incObj\sub CalcSine.asm"
00003A32                            ; ---------------------------------------------------------------------------
00003A32                            ; Subroutine calculate a sine
00003A32                            
00003A32                            ; input:
00003A32                            ;	d0 = angle
00003A32                            
00003A32                            ; output:
00003A32                            ;	d0 = sine
00003A32                            ;	d1 = cosine
00003A32                            ; ---------------------------------------------------------------------------
00003A32                            
00003A32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003A32                            
00003A32                            
00003A32                            CalcSine:
00003A32 0240 00FF                          andi.w  #$FF,d0
00003A36 5040                               addq.w  #8,d0
00003A38 D040                               add.w   d0,d0
00003A3A 323B 0000                          move.w  Sine_Data+($40*2)-16(pc,d0.w),d1
00003A3E 303B 0000                          move.w  Sine_Data-16(pc,d0.w),d0
00003A42 4E75                               rts
00003A44                            ; End of function CalcSine
00003A44                            
00003A44                            ; ===========================================================================
00003A44                            
00003A44                            Sine_Data:	incbin	"misc\sinewave.bin"	; values for a 360° sine wave
00003CC4                            
00003CC4                            ; ===========================================================================
00003CC4                            ; ===========================================================================
00003CC4                            		include	"_incObj\sub CalcAngle.asm"
00003CC4                            ; ---------------------------------------------------------------------------
00003CC4                            ; Subroutine calculate an angle
00003CC4                            
00003CC4                            ; input:
00003CC4                            ;	d1 = x-axis distance
00003CC4                            ;	d2 = y-axis distance
00003CC4                            
00003CC4                            ; output:
00003CC4                            ;	d0 = angle
00003CC4                            ; ---------------------------------------------------------------------------
00003CC4                            
00003CC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003CC4                            
00003CC4                            
00003CC4                            CalcAngle:
00003CC4 48E7 1800                  		movem.l	d3-d4,-(sp)
00003CC8 7600                       		moveq	#0,d3
00003CCA 7800                       		moveq	#0,d4
00003CCC 3601                       		move.w	d1,d3
00003CCE 3802                       		move.w	d2,d4
00003CD0 8843                       		or.w	d3,d4
00003CD2 6700                       		beq.s	loc_2D04
00003CD4 3802                       		move.w	d2,d4
00003CD6 4A43                       		tst.w	d3
00003CD8 6A00 0000                  		bpl.w	loc_2CC2
00003CDC 4443                       		neg.w	d3
00003CDE                            
00003CDE                            loc_2CC2:
00003CDE 4A44                       		tst.w	d4
00003CE0 6A00 0000                  		bpl.w	loc_2CCA
00003CE4 4444                       		neg.w	d4
00003CE6                            
00003CE6                            loc_2CCA:
00003CE6 B843                       		cmp.w	d3,d4
00003CE8 6400 0000                  		bcc.w	loc_2CDC
00003CEC E18C                       		lsl.l	#8,d4
00003CEE 88C3                       		divu.w	d3,d4
00003CF0 7000                       		moveq	#0,d0
00003CF2 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00003CF6 6000                       		bra.s	loc_2CE6
00003CF8                            ; ===========================================================================
00003CF8                            
00003CF8                            loc_2CDC:
00003CF8 E18B                       		lsl.l	#8,d3
00003CFA 86C4                       		divu.w	d4,d3
00003CFC 7040                       		moveq	#$40,d0
00003CFE 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00003D02                            
00003D02                            loc_2CE6:
00003D02 4A41                       		tst.w	d1
00003D04 6A00 0000                  		bpl.w	loc_2CF2
00003D08 4440                       		neg.w	d0
00003D0A 0640 0080                  		addi.w	#$80,d0
00003D0E                            
00003D0E                            loc_2CF2:
00003D0E 4A42                       		tst.w	d2
00003D10 6A00 0000                  		bpl.w	loc_2CFE
00003D14 4440                       		neg.w	d0
00003D16 0640 0100                  		addi.w	#$100,d0
00003D1A                            
00003D1A                            loc_2CFE:
00003D1A 4CDF 0018                  		movem.l	(sp)+,d3-d4
00003D1E 4E75                       		rts	
00003D20                            ; ===========================================================================
00003D20                            
00003D20                            loc_2D04:
00003D20 303C 0040                  		move.w	#$40,d0
00003D24 4CDF 0018                  		movem.l	(sp)+,d3-d4
00003D28 4E75                       		rts	
00003D2A                            ; End of function CalcAngle
00003D2A                            
00003D2A                            ; ===========================================================================
00003D2A                            
00003D2A                            Angle_Data:	incbin	"misc\angles.bin"
00003E2C                            
00003E2C                            ; ===========================================================================
00003E2C                            ; ===========================================================================
00003E2C                            
00003E2C                            ; ---------------------------------------------------------------------------
00003E2C                            ; Sega screen
00003E2C                            ; ---------------------------------------------------------------------------
00003E2C                            
00003E2C                            GM_Sega:
00003E34 6100 D912                  		bsr.w	ClearPLC
00003E38 6100 E348                  		bsr.w	PaletteFadeOut
00003E3C 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00003E42 3CBC 8004                  		move.w	#$8004,(a6)	; use 8-colour mode
00003E46 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00003E4A 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00003E4E 3CBC 8700                  		move.w	#$8700,(a6)	; set background colour (palette entry 0)
00003E52 3CBC 8B00                  		move.w	#$8B00,(a6)	; full-screen vertical scrolling
00003E56 4238 F64E                  		clr.b	(f_wtr_state).w
00003E5A 46FC 2700                  		disable_ints
00003E5E 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00003E62 0200 00BF                  		andi.b	#$BF,d0
00003E66 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00003E6C 6100 D312                  		bsr.w	ClearScreen
00003E7A 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
00003E80 6100 D47C                  		bsr.w	NemDec
00003E84 43F9 00FF 0000             		lea	($FF0000).l,a1
00003E8A 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
00003E90 303C 0000                  		move.w	#0,d0
00003E94 6100 D9F2                  		bsr.w	EniDec
00003E98                            
00003E98 43F9 00FF 0000 203C 6510+  		copyTilemap	$FF0000,$E510,$17,7
00003EAC 43F9 00FF 0180 203C 4000+  		copyTilemap	$FF0180,$C000,$27,$1B
00003EC0                            
00003EC0 4A38 FFF8                  			tst.b   (v_megadrive).w	; is console Japanese?
00003EC4 6B00                       			bmi.s   @loadpal
00003EC6 43F9 00FF 0A40 203C 453A+  			copyTilemap	$FF0A40,$C53A,2,1 ; hide "TM" with a white rectangle
00003EDA                            
00003EDA                            	@loadpal:
00003EDA 7000                       		moveq	#palid_SegaBG,d0
00003EDC 6100 E58A                  		bsr.w	PalLoad2	; load Sega logo palette
00003EE0 47F9 FFFF FB80                     lea        ($FFFFFB80).l,a3
00003EE6 7E3F                               moveq    #$3F,d7
00003EE8                             
00003EE8                                .loop:
00003EE8 36FC 0000                          move.w    #cBlack,(a3)+    ; move data to RAM
00003EEC 51CF FFFA                          dbf        d7,.loop
00003EF0 6100 E1EA                          bsr.w     PaletteFadeIn ; added to allow fade in			
00003EF4 31FC FFF6 F632             		move.w	#-$A,(v_pcyc_num).w
00003EFA 31FC 0000 F634             		move.w	#0,(v_pcyc_time).w
00003F00 31FC 0000 F662             		move.w	#0,(v_pal_buffer+$12).w
00003F06 31FC 0000 F660             		move.w	#0,(v_pal_buffer+$10).w
00003F0C 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00003F10 0000 0040                  		ori.b	#$40,d0
00003F14 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00003F1A                            
00003F1A                            Sega_WaitPal:
00003F1A 11FC 0002 F62A             		move.b	#2,(v_vbla_routine).w
00003F20 6100 FADE                  		bsr.w	WaitForVBla
00003F24 6100 E414                  		bsr.w	PalCycle_Sega
00003F28 66F0                       		bne.s	Sega_WaitPal
00003F2A                            
00003F32 11FC 0014 F62A             		move.b	#$14,(v_vbla_routine).w
00003F38 6100 FAC6                  		bsr.w	WaitForVBla
00003F3C 31FC 001E F614             		move.w	#$1E,(v_demolength).w
00003F42                            
00003F42                            Sega_WaitEnd:
00003F42 11FC 0002 F62A             		move.b	#2,(v_vbla_routine).w
00003F48 6100 FAB6                  		bsr.w	WaitForVBla
00003F4C 4A78 F614                  		tst.w	(v_demolength).w
00003F50 6700                       		beq.s	Sega_GotoTitle
00003F52 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; is Start button pressed?
00003F58 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
00003F5A                            
00003F5A                            Sega_GotoTitle:
00003F5A 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; go to title screen
00003F60 4E75                       		rts	
00003F62                            ; ===========================================================================
00003F62                            
00003F62                            ; ---------------------------------------------------------------------------
00003F62                            ; Title	screen
00003F62                            ; ---------------------------------------------------------------------------
00003F62                            
00003F62                            GM_Title:
00003F6A 6100 D7DC                  		bsr.w	ClearPLC
00003F6E 6100 E212                  		bsr.w	PaletteFadeOut
00003F72 46FC 2700                  		disable_ints
00003F76 6100 D28E                  		bsr.w	SoundDriverLoad
00003F7A 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00003F80 3CBC 8004                  		move.w	#$8004,(a6)	; 8-colour mode
00003F84 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00003F88 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00003F8C 3CBC 9001                  		move.w	#$9001,(a6)	; 64-cell hscroll size
00003F90 3CBC 9200                  		move.w	#$9200,(a6)	; window vertical position
00003F94 3CBC 8B03                  		move.w	#$8B03,(a6)
00003F98 3CBC 8720                  		move.w	#$8720,(a6)	; set background colour (palette line 2, entry 0)
00003F9C 4238 F64E                  		clr.b	(f_wtr_state).w
00003FA0 6100 D1DE                  		bsr.w	ClearScreen
00003FA4 4EB9 0000 0000             		jsr		SHC2022 
00003FAA                            
00003FAA 43F8 D000                  		lea	(v_objspace).w,a1
00003FAE 7000                       		moveq	#0,d0
00003FB0 323C 07FF                  		move.w	#$7FF,d1
00003FB4                            
00003FB4                            	Tit_ClrObj1:
00003FB4 22C0                       		move.l	d0,(a1)+
00003FB6 51C9 FFFC                  		dbf	d1,Tit_ClrObj1	; fill object space ($D000-$EFFF) with 0
00003FBA                            
00003FC4 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
00003FCA 6100 D332                  		bsr.w	NemDec
00003FD8 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
00003FDE 6100 D31E                  		bsr.w	NemDec
00003FE2 43F9 00FF 0000             		lea	($FF0000).l,a1
00003FE8 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
00003FEE 303C 0000                  		move.w	#0,d0
00003FF2 6100 D894                  		bsr.w	EniDec
00003FF6                            
00003FF6 43F9 00FF 0000 203C 4000+  		copyTilemap	$FF0000,$C000,$27,$1B
0000400A                            
0000400A 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
0000400E 7000                       		moveq	#cBlack,d0
00004010 323C 001F                  		move.w	#$1F,d1
00004014                            
00004014                            	Tit_ClrPal:
00004014 22C0                       		move.l	d0,(a1)+
00004016 51C9 FFFC                  		dbf	d1,Tit_ClrPal	; fill palette with 0 (black)
0000401A                            
0000401A 4EB9 0000 0000             		jsr		LoadPlayerPal
00004020 6100 E40A                  		bsr.w	PalLoad1
00004024 11FC 0000 D080             		move.b	#id_CreditsText,(v_objspace+$80).w ; load "SONIC TEAM PRESENTS" object
0000402A 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004030 4EB9 0000 0000             		jsr	(BuildSprites).l
00004036 6100 E0A4                  		bsr.w	PaletteFadeIn
0000403A 46FC 2700                  		disable_ints
00004048 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
0000404E 6100 D2AE                  		bsr.w	NemDec
0000405C 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
00004062 6100 D29A                  		bsr.w	NemDec
00004070 41F9 0000 0000             		lea (Nem_TitleMenu).l,a0 ; Load Menu Text/Characters pattern
00004076 6100 D286                  		bsr.w 	NemDec
0000407A 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00004088 4BF9 0000 0592             		lea	(Art_Text).l,a5	; load level select font
0000408E 323C 028F                  		move.w	#$28F,d1
00004092                            
00004092                            	Tit_LoadText:
00004092 3C9D                       		move.w	(a5)+,(a6)
00004094 51C9 FFFC                  		dbf	d1,Tit_LoadText	; load level select font
00004098                            
00004098 11FC 0000 FE30             		move.b	#0,(v_lastlamp).w ; clear lamppost counter
0000409E 31FC 0000 FE08             		move.w	#0,(v_debuguse).w ; disable debug item placement mode
000040A4 31FC 0000 FFF0             		move.w	#0,(f_demo).w	; disable debug mode
000040AA 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w ; unused variable
000040B0 31FC 0000 FE10             		move.w	#(id_GHZ<<8),(v_zone).w	; set level to GHZ (00)
000040B6 31FC 0000 F634             		move.w	#0,(v_pcyc_time).w ; disable palette cycling
000040BC 6100 0000                  		bsr.w	LevelSizeLoad
000040C0 6100 0000                  		bsr.w	DeformLayers
000040C4 43F8 B000                  		lea	(v_16x16).w,a1
000040C8 41F9 0000 0000             		lea	(Blk16_TS).l,a0 ; load	GHZ 16x16 mappings
000040CE 303C 0000                  		move.w	#0,d0
000040D2 6100 D7B4                  		bsr.w	EniDec
000040D6 41F9 0000 0000             		lea	(Blk256_TS).l,a0 ; load GHZ 256x256 mappings
000040DC 43F9 00FF 0000             		lea	(v_256x256).l,a1
000040E2 6100 D922                  		bsr.w	KosDec
000040E6 6100 0000                  		bsr.w	LevelLayoutLoad
000040EA 6100 E096                  		bsr.w	PaletteFadeOut
000040EE 46FC 2700                  		disable_ints
000040F2 6100 D08C                  		bsr.w	ClearScreen
000040F6 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
000040FC 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00004102 47F8 F708                  		lea	(v_bgscreenposx).w,a3
00004106 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
0000410A 343C 6000                  		move.w	#$6000,d2
0000410E 6100 0000                  		bsr.w	DrawChunks
00004112 43F9 00FF 0000             		lea	($FF0000).l,a1
00004118 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
0000411E 303C 0000                  		move.w	#0,d0
00004122 6100 D764                  		bsr.w	EniDec
00004126                            
00004126 43F9 00FF 0000 203C 4206+  		copyTilemap	$FF0000,$C206,$21,$15
0000413A                            
00004144 41F9 0000 0000             		lea	(Nem_TS_1st).l,a0 ; load title screen patterns
0000414A 6100 D1B2                  		bsr.w	NemDec
0000414E 7001                       		moveq	#palid_Title,d0	; load title screen palette
00004150 6100 E2DA                  		bsr.w	PalLoad1
0000415C 11FC 0000 FFFA             		move.b	#0,(f_debugmode).w ; disable debug mode
00004162 31FC 0900 F614             		move.w	#$900,(v_demolength).w ; run title screen for $178 frames
00004168 43F8 D080                  		lea	(v_objspace+$80).w,a1
0000416C 7000                       		moveq	#0,d0
0000416E 323C 0007                  		move.w	#7,d1
00004172                            
00004172                            	Tit_ClrObj2:
00004172 22C0                       		move.l	d0,(a1)+
00004174 51C9 FFFC                  		dbf	d1,Tit_ClrObj2
00004178                            
00004178 11FC 0000 D040             		move.b	#id_TitleSonic,(v_objspace+$40).w ; load big Sonic object
0000417E 11FC 0000 D080             		move.b	#id_PSBTM,(v_objspace+$80).w ; load "PRESS START BUTTON" object
00004184 4238 D0A4                  		clr.b	(v_objspace+$80+obRoutine).w ; The 'Mega Games 10' version of Sonic 1 added this line, to fix the 'PRESS START BUTTON' object not appearing
00004188                            
00004188 4A38 FFF8                  			tst.b   (v_megadrive).w	; is console Japanese?
0000418C 6A00                       			bpl.s   @isjap		; if yes, branch
0000418E                            
0000418E 11FC 0000 D0C0             		move.b	#id_PSBTM,(v_objspace+$C0).w ; load "TM" object
00004194 11FC 0003 D0DA             		move.b	#3,(v_objspace+$C0+obFrame).w
0000419A                            	@isjap:
0000419A 11FC 0000 D100             		move.b	#id_PSBTM,(v_objspace+$100).w ; load object which hides part of Sonic
000041A0 11FC 0002 D11A             		move.b	#2,(v_objspace+$100+obFrame).w
000041A6 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000041AC 6100 0000                  		bsr.w	DeformLayers
000041B0 4EB9 0000 0000             		jsr	(BuildSprites).l
000041B6 7000                       		moveq	#plcid_Main,d0
000041B8 6100 D562                  		bsr.w	NewPLC
000041BC 31FC 0000 FFE4             		move.w	#0,(v_title_dcount).w
000041C2 31FC 0000 FFE6             		move.w	#0,(v_title_ccount).w
000041C8 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
000041CC 0000 0040                  		ori.b	#$40,d0
000041D0 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
000041D6 6100 DF04                  		bsr.w	PaletteFadeIn
000041DA                            
000041DA                            Tit_MainLoop:
000041DA 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
000041E0 6100 F81E                  		bsr.w	WaitForVBla
000041E4 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000041EA 6100 0000                  		bsr.w	DeformLayers
000041EE 4EB9 0000 0000             		jsr	(BuildSprites).l
000041F4 6100 DAF8                  		bsr.w	PCycle_Title
000041F8 6100 D55C                  		bsr.w	RunPLC
000041FC 3038 D008                  		move.w	(v_objspace+obX).w,d0
00004200 5440                       		addq.w	#2,d0
00004202 31C0 D008                  		move.w	d0,(v_objspace+obX).w ; move Sonic to the right
00004206 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed $1C00 on x-axis?
0000420A 6500                       		blo.s	Tit_ChkRegion	; if not, branch
0000420C                            
0000420C 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00004212 4E75                       		rts	
00004214                            ; ===========================================================================
00004214                            
00004214                            Tit_ChkRegion:
00004214 4A38 FFF8                  		tst.b	(v_megadrive).w	; check	if the machine is US or	Japanese
00004218 6A00                       		bpl.s	Tit_RegionJap	; if Japanese, branch
0000421A                            
0000421A 41F9 0000 0000             		lea	(LevSelCode_US).l,a0 ; load US code
00004220 6000                       		bra.s	Tit_EnterCheat
00004222                            
00004222                            	Tit_RegionJap:
00004222 41F9 0000 0000             		lea	(LevSelCode_J).l,a0 ; load J code
00004228                            
00004228                            Tit_EnterCheat:
00004228 3038 FFE4                  		move.w	(v_title_dcount).w,d0
0000422C D0C0                       		adda.w	d0,a0
0000422E 1038 F605                  		move.b	(v_jpadpress1).w,d0 ; get button press
00004232 0200 000F                  		andi.b	#btnDir,d0	; read only UDLR buttons
00004236 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
00004238 6600                       		bne.s	Tit_ResetCheat	; if not, branch
0000423A 5278 FFE4                  		addq.w	#1,(v_title_dcount).w ; next button press
0000423E 4A00                       		tst.b	d0
00004240 6600                       		bne.s	Tit_CountC
00004242 41F8 FFE0                  		lea	(f_levselcheat).w,a0
00004246 3238 FFE6                  		move.w	(v_title_ccount).w,d1
0000424A E249                       		lsr.w	#1,d1
0000424C 0241 0003                  		andi.w	#3,d1
00004250 6700                       		beq.s	Tit_PlayRing
00004252 4A38 FFF8                  		tst.b	(v_megadrive).w
00004256 6A00                       		bpl.s	Tit_PlayRing
00004258 7201                       		moveq	#1,d1
0000425A 1181 1001                  		move.b	d1,1(a0,d1.w)	; cheat depends on how many times C is pressed
0000425E                            
0000425E                            	Tit_PlayRing:
0000425E 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
0000426C 6000                       		bra.s	Tit_CountC
0000426E                            ; ===========================================================================
0000426E                            
0000426E                            Tit_ResetCheat:
0000426E 4A00                       		tst.b	d0
00004270 6700                       		beq.s	Tit_CountC
00004272 0C78 0009 FFE4             		cmpi.w	#9,(v_title_dcount).w
00004278 6700                       		beq.s	Tit_CountC
0000427A 31FC 0000 FFE4             		move.w	#0,(v_title_dcount).w ; reset UDLR counter
00004280                            
00004280                            Tit_CountC:
00004280 1038 F605                  		move.b	(v_jpadpress1).w,d0
00004284 0200 0020                  		andi.b	#btnC,d0	; is C button pressed?
00004288                            
00004288                            loc_3230:
00004288 4A78 F614                  		tst.w	(v_demolength).w
0000428C 6700 0000                  		beq.w	GotoDemo
00004290 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; check if Start is pressed
00004296 6700 FF42                  		beq.w	Tit_MainLoop	; if not, branch
0000429A                            
0000429A                            Tit_ChkLevSel:
0000429A 4A38 FFE0                  		tst.b	(f_levselcheat).w ; check if level select code is on
0000429E 6700 0000                  		beq.w	@cont	; if not, play level
000042A2 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; check if A is pressed
000042A8 6700 0000                  		beq.w	@cont	; if not, play level
000042AC 6000 0000                  		bra.w	Tit_LevelSelect
000042B0                            
000042B0                            	@cont:		
000042B0 7400                       		moveq   #0,d2
000042B2 1438 FFB0                  		move.b   (Title_screen_option).w,d2   ; load the choice
000042B6 D442                       		add.w   d2,d2            ; multiply by 2
000042B8 343B 2000                  		move.w   Tit_Menu_Choice(pc,d2.w),d2
000042BC 4EFB 2000                  		jmp   Tit_Menu_Choice(pc,d2.w)   ; jump to the choice code
000042C0                            
000042C0                            ; ===========================================================================
000042C0                            Tit_Menu_Choice:
000042C0 0000                       		dc.w PlayLevel-Tit_Menu_Choice   ; 0
000042C2 0000                       		dc.w Menu_Options-Tit_Menu_Choice  ; 2
000042C4                            ; ===========================================================================
000042C4                            
000042C4                            Menu_Options:
000042C4 4EF9 0000 0000             	jmp	MenuScreen ; => OptionsMenu
000042CA 4E75                       	rts
000042CC                            
000042CC                            Tit_LevelSelect:	
000042CC 7002                       		moveq	#palid_LevelSel,d0
000042CE 6100 E198                  		bsr.w	PalLoad2	; load level select palette
000042D2 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
000042D6 7000                       		moveq	#0,d0
000042D8 323C 00DF                  		move.w	#$DF,d1
000042DC                            
000042DC                            	Tit_ClrScroll1:
000042DC 22C0                       		move.l	d0,(a1)+
000042DE 51C9 FFFC                  		dbf	d1,Tit_ClrScroll1 ; clear scroll data (in RAM)
000042E2                            
000042E2 21C0 F616                  		move.l	d0,(v_scrposy_dup).w
000042E6 46FC 2700                  		disable_ints
000042EA 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
000042FA 323C 03FF                  		move.w	#$3FF,d1
000042FE                            
000042FE                            	Tit_ClrScroll2:
000042FE 2C80                       		move.l	d0,(a6)
00004300 51C9 FFFC                  		dbf	d1,Tit_ClrScroll2 ; clear scroll data (in VRAM)
00004304                            
00004304 6100 0000                  		bsr.w	LevSelTextLoad
00004308                            
00004308                            ; ---------------------------------------------------------------------------
00004308                            ; Level	Select
00004308                            ; ---------------------------------------------------------------------------
00004308                            
00004308                            LevelSelect:
00004308 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
0000430E 6100 F6F0                  		bsr.w	WaitForVBla
00004312 6100 0000                  		bsr.w	LevSelControls
00004316 6100 D43E                  		bsr.w	RunPLC
0000431A 4AB8 F680                  		tst.l	(v_plc_buffer).w
0000431E 66E8                       		bne.s	LevelSelect
00004320 0238 00F0 F605             		andi.b	#btnABC+btnStart,(v_jpadpress1).w ; is A, B, C, or Start pressed?
00004326 67E0                       		beq.s	LevelSelect	; if not, branch
00004328 3038 FF82                  		move.w	(v_levselitem).w,d0
0000432C 0C40 0014                  		cmpi.w	#$14,d0		; have you selected item $14 (sound test)?
00004330 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
00004332 3038 FF84                  		move.w	(v_levselsound).w,d0
00004336 0640 0080                  		addi.w	#$80,d0
0000433A 0C40 009F                  		cmpi.w	#$9F,d0		; is sound $9F being played?
0000433E 6700                       		beq.s	LevSel_Ending	; if yes, branch
00004340 0C40 009E                  		cmpi.w	#$9E,d0		; is sound $9E being played?
00004344 6700                       		beq.s	LevSel_Credits	; if yes, branch
00004346                            
00004346                            LevSel_PlaySnd:
00004346 6100 CF08                  		bsr.w	PlaySound_Special
0000434A 60BC                       		bra.s	LevelSelect
0000434C                            ; ===========================================================================
0000434C                            
0000434C                            LevSel_Ending:
0000434C 11FC 0000 F600             		move.b	#id_Ending,(v_gamemode).w ; set screen mode to $18 (Ending)
00004352 31FC 0600 FE10             		move.w	#(id_EndZ<<8),(v_zone).w ; set level to 0600 (Ending)
00004358 4E75                       		rts	
0000435A                            ; ===========================================================================
0000435A                            
0000435A                            LevSel_Credits:
0000435A 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; set screen mode to $1C (Credits)
00004368 31FC 0000 FFF4             		move.w	#0,(v_creditsnum).w
0000436E 4E75                       		rts	
00004370                            ; ===========================================================================
00004370                            
00004370                            LevSel_Level_SS:
00004370 D040                       		add.w	d0,d0
00004372 303B 0000                  		move.w	LevSel_Ptrs(pc,d0.w),d0 ; load level number
00004376 6B00 FF90                  		bmi.w	LevelSelect
0000437A 0C40 0700                  		cmpi.w	#id_SS*$100,d0	; check	if level is 0700 (Special Stage)
0000437E 6600                       		bne.s	LevSel_Level	; if not, branch
00004380 11FC 0000 F600             		move.b	#id_Special,(v_gamemode).w ; set screen mode to $10 (Special Stage)
00004386 4278 FE10                  		clr.w	(v_zone).w	; clear	level
0000438A 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
00004390 7000                       		moveq	#0,d0
00004392 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
00004396 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
0000439A 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
0000439E 21FC 0000 1388 FFC0        			move.l	#5000,(v_scorelife).w ; extra life is awarded at 50000 points
000043A6 4E75                       		rts	
000043A8                            ; ===========================================================================
000043A8                            
000043A8                            LevSel_Level:
000043A8 0240 3FFF                  		andi.w	#$3FFF,d0
000043AC 31C0 FE10                  		move.w	d0,(v_zone).w	; set level number
000043B0                            
000043B0                            PlayLevel:
000043B0 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; set screen mode to $0C (level)
000043B6 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
000043BC 7000                       		moveq	#0,d0
000043BE 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
000043C2 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
000043C6 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
000043CA 11C0 FE16                  		move.b	d0,(v_lastspecial).w ; clear special stage number
000043CE 11C0 FE57                  		move.b	d0,(v_emeralds).w ; clear emeralds
000043D2 21C0 FE58                  		move.l	d0,(v_emldlist).w ; clear emeralds
000043D6 21C0 FE5C                  		move.l	d0,(v_emldlist+4).w ; clear emeralds
000043DA 11FC 0001 FE18             		move.b	#1,(v_continues).w ; set continues to 1
000043E0 21FC 0000 1388 FFC0        			move.l	#5000,(v_scorelife).w ; extra life is awarded at 50000 points
000043F0 4E75                       		rts	
000043F2                            ; ===========================================================================
000043F2                            ; ---------------------------------------------------------------------------
000043F2                            ; Level	select - level pointers
000043F2                            ; ---------------------------------------------------------------------------
000043F2                            		; correct level order
000043F2 0000                       		dc.b id_GHZ, 0
000043F4 0001                       		dc.b id_GHZ, 1
000043F6 0002                       		dc.b id_GHZ, 2
000043F8 0200                       		dc.b id_MZ, 0
000043FA 0201                       		dc.b id_MZ, 1
000043FC 0202                       		dc.b id_MZ, 2
000043FE 0400                       		dc.b id_SYZ, 0
00004400 0401                       		dc.b id_SYZ, 1
00004402 0402                       		dc.b id_SYZ, 2
00004404 0100                       		dc.b id_LZ, 0
00004406 0101                       		dc.b id_LZ, 1
00004408 0102                       		dc.b id_LZ, 2
0000440A 0300                       		dc.b id_SLZ, 0
0000440C 0301                       		dc.b id_SLZ, 1
0000440E 0302                       		dc.b id_SLZ, 2
00004410 0500                       		dc.b id_SBZ, 0
00004412 0501                       		dc.b id_SBZ, 1
00004414 0103                       		dc.b id_LZ, 3
00004416 0502                       		dc.b id_SBZ, 2
00004418 0700                       		dc.b id_SS, 0		; Special Stage
0000441A 8000                       		dc.w $8000		; Sound Test
0000441C                            		even
0000441C                            ; ---------------------------------------------------------------------------
0000441C                            ; Level	select codes
0000441C                            ; ---------------------------------------------------------------------------
0000441C 0102 0202 0408 00FF        		dc.b btnUp,btnDn,btnDn,btnDn,btnL,btnR,0,$FF
00004424                            		even
00004424                            
00004424 0102 0408 00FF             LevSelCode_US:	dc.b btnUp,btnDn,btnL,btnR,0,$FF
0000442A                            		even
0000442A                            ; ===========================================================================
0000442A                            
0000442A                            ; ---------------------------------------------------------------------------
0000442A                            ; Demo mode
0000442A                            ; ---------------------------------------------------------------------------
0000442A                            
0000442A                            GotoDemo:
0000442A 31FC 001E F614             		move.w	#$1E,(v_demolength).w
00004430                            
00004430                            loc_33B6:
00004430 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
00004436 6100 F5C8                  		bsr.w	WaitForVBla
0000443A 6100 0000                  		bsr.w	DeformLayers
0000443E 6100 D88E                  		bsr.w	PaletteCycle
00004442 6100 D312                  		bsr.w	RunPLC
00004446 3038 D008                  		move.w	(v_objspace+obX).w,d0
0000444A 5440                       		addq.w	#2,d0
0000444C 31C0 D008                  		move.w	d0,(v_objspace+obX).w
00004450 0C40 1C00                  		cmpi.w	#$1C00,d0
00004454 6500                       		blo.s	loc_33E4
00004456 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w
0000445C 4E75                       		rts	
0000445E                            ; ===========================================================================
0000445E                            
0000445E                            loc_33E4:
0000445E 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; is Start button pressed?
00004464 6600 FE34                  		bne.w	Tit_ChkLevSel	; if yes, branch
00004468 4A78 F614                  		tst.w	(v_demolength).w
0000446C 6600 FFC2                  		bne.w	loc_33B6
00004478 3038 FFF2                  		move.w	(v_demonum).w,d0 ; load	demo number
0000447C 0240 0007                  		andi.w	#7,d0
00004480 D040                       		add.w	d0,d0
00004482 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
00004486 31C0 FE10                  		move.w	d0,(v_zone).w
0000448A 5278 FFF2                  		addq.w	#1,(v_demonum).w ; add 1 to demo number
0000448E 0C78 0004 FFF2             		cmpi.w	#4,(v_demonum).w ; is demo number less than 4?
00004494 6500                       		blo.s	loc_3422	; if yes, branch
00004496 31FC 0000 FFF2             		move.w	#0,(v_demonum).w ; reset demo number to	0
0000449C                            
0000449C                            loc_3422:
0000449C 31FC 0001 FFF0             		move.w	#1,(f_demo).w	; turn demo mode on
000044A2 11FC 0000 F600             		move.b	#id_Demo,(v_gamemode).w ; set screen mode to 08 (demo)
000044A8 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
000044AC 6600                       		bne.s	Demo_Level	; if not, branch
000044AE 11FC 0000 F600             		move.b	#id_Special,(v_gamemode).w ; set screen mode to $10 (Special Stage)
000044B4 4278 FE10                  		clr.w	(v_zone).w	; clear	level number
000044B8 4238 FE16                  		clr.b	(v_lastspecial).w ; clear special stage number
000044BC                            
000044BC                            Demo_Level:
000044BC 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
000044C2 7000                       		moveq	#0,d0
000044C4 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
000044C8 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
000044CC 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
000044D0 21FC 0000 1388 FFC0        			move.l	#5000,(v_scorelife).w ; extra life is awarded at 50000 points
000044D8 4E75                       		rts	
000044DA                            ; ===========================================================================
000044DA                            ; ---------------------------------------------------------------------------
000044DA                            ; Levels used in demos
000044DA                            ; ---------------------------------------------------------------------------
000044DA                            Demo_Levels:	incbin	"misc\Demo Level Order - Intro.bin"
000044E2                            		even
000044E2                            
000044E2                            ; ---------------------------------------------------------------------------
000044E2                            ; Subroutine to	change what you're selecting in the level select
000044E2                            ; ---------------------------------------------------------------------------
000044E2                            
000044E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000044E2                            
000044E2                            
000044E2                            LevSelControls:
000044E2 1238 F605                  		move.b	(v_jpadpress1).w,d1
000044E6 0201 0003                  		andi.b	#btnUp+btnDn,d1	; is up/down pressed and held?
000044EA 6600                       		bne.s	LevSel_UpDown	; if yes, branch
000044EC 5378 FF80                  		subq.w	#1,(v_levseldelay).w ; subtract 1 from time to next move
000044F0 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
000044F2                            
000044F2                            LevSel_UpDown:
000044F2 31FC 000B FF80             		move.w	#$B,(v_levseldelay).w ; reset time delay
000044F8 1238 F604                  		move.b	(v_jpadhold1).w,d1
000044FC 0201 0003                  		andi.b	#btnUp+btnDn,d1	; is up/down pressed?
00004500 6700                       		beq.s	LevSel_SndTest	; if not, branch
00004502 3038 FF82                  		move.w	(v_levselitem).w,d0
00004506 0801 0000                  		btst	#bitUp,d1	; is up	pressed?
0000450A 6700                       		beq.s	LevSel_Down	; if not, branch
0000450C 5340                       		subq.w	#1,d0		; move up 1 selection
0000450E 6400                       		bhs.s	LevSel_Down
00004510 7014                       		moveq	#$14,d0		; if selection moves below 0, jump to selection	$14
00004512                            
00004512                            LevSel_Down:
00004512 0801 0001                  		btst	#bitDn,d1	; is down pressed?
00004516 6700                       		beq.s	LevSel_Refresh	; if not, branch
00004518 5240                       		addq.w	#1,d0		; move down 1 selection
0000451A 0C40 0015                  		cmpi.w	#$15,d0
0000451E 6500                       		blo.s	LevSel_Refresh
00004520 7000                       		moveq	#0,d0		; if selection moves above $14,	jump to	selection 0
00004522                            
00004522                            LevSel_Refresh:
00004522 31C0 FF82                  		move.w	d0,(v_levselitem).w ; set new selection
00004526 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
0000452A 4E75                       		rts	
0000452C                            ; ===========================================================================
0000452C                            
0000452C                            LevSel_SndTest:
0000452C 0C78 0014 FF82             		cmpi.w	#$14,(v_levselitem).w ; is item $14 selected?
00004532 6600                       		bne.s	LevSel_NoMove	; if not, branch
00004534 1238 F605                  		move.b	(v_jpadpress1).w,d1
00004538 0201 000C                  		andi.b	#btnR+btnL,d1	; is left/right	pressed?
0000453C 6700                       		beq.s	LevSel_NoMove	; if not, branch
0000453E 3038 FF84                  		move.w	(v_levselsound).w,d0
00004542 0801 0002                  		btst	#bitL,d1	; is left pressed?
00004546 6700                       		beq.s	LevSel_Right	; if not, branch
00004548 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
0000454A 6400                       		bhs.s	LevSel_Right
0000454C 705F                       		moveq	#$5F,d0		; if sound test	moves below 0, set to $4F
0000454E                            
0000454E                            LevSel_Right:
0000454E 0801 0003                  		btst	#bitR,d1	; is right pressed?
00004552 6700                       		beq.s	LevSel_Refresh2	; if not, branch
00004554 5240                       		addq.w	#1,d0		; add 1	to sound test
00004556 0C40 0050                  		cmpi.w	#$50,d0
0000455A 6500                       		blo.s	LevSel_Refresh2
0000455C 7000                       		moveq	#0,d0		; if sound test	moves above $4F, set to	0
0000455E                            
0000455E                            LevSel_Refresh2:
0000455E 31C0 FF84                  		move.w	d0,(v_levselsound).w ; set sound test number
00004562 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
00004566                            
00004566                            LevSel_NoMove:
00004566 4E75                       		rts	
00004568                            ; End of function LevSelControls
00004568                            
00004568                            ; ---------------------------------------------------------------------------
00004568                            ; Subroutine to load level select text
00004568                            ; ---------------------------------------------------------------------------
00004568                            
00004568                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004568                            
00004568                            
00004568                            LevSelTextLoad:
00004568                            
00004568 =62100003                  	textpos:	= ($40000000+(($E210&$3FFF)<<16)+(($E210&$C000)>>14))
00004568                            					; $E210 is a VRAM address
00004568                            
00004568 43F9 0000 0000             		lea	(LevelMenuText).l,a1
0000456E 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00004574 283C 6210 0003             		move.l	#textpos,d4	; text position on screen
0000457A 363C E680                  		move.w	#$E680,d3	; VRAM setting (4th palette, $680th tile)
0000457E 7214                       		moveq	#$14,d1		; number of lines of text
00004580                            
00004580                            	LevSel_DrawAll:
00004580 2D44 0004                  		move.l	d4,4(a6)
00004584 6100 0000                  		bsr.w	LevSel_ChgLine	; draw line of text
00004588 0684 0080 0000             		addi.l	#$800000,d4	; jump to next line
0000458E 51C9 FFF0                  		dbf	d1,LevSel_DrawAll
00004592                            
00004592 7000                       		moveq	#0,d0
00004594 3038 FF82                  		move.w	(v_levselitem).w,d0
00004598 3200                       		move.w	d0,d1
0000459A 283C 6210 0003             		move.l	#textpos,d4
000045A0 EF48                       		lsl.w	#7,d0
000045A2 4840                       		swap	d0
000045A4 D880                       		add.l	d0,d4
000045A6 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000045AC E749                       		lsl.w	#3,d1
000045AE 3001                       		move.w	d1,d0
000045B0 D241                       		add.w	d1,d1
000045B2 D240                       		add.w	d0,d1
000045B4 D2C1                       		adda.w	d1,a1
000045B6 363C C680                  		move.w	#$C680,d3	; VRAM setting (3rd palette, $680th tile)
000045BA 2D44 0004                  		move.l	d4,4(a6)
000045BE 6100 0000                  		bsr.w	LevSel_ChgLine	; recolour selected line
000045C2 363C E680                  		move.w	#$E680,d3
000045C6 0C78 0014 FF82             		cmpi.w	#$14,(v_levselitem).w
000045CC 6600                       		bne.s	LevSel_DrawSnd
000045CE 363C C680                  		move.w	#$C680,d3
000045D2                            
000045D2                            LevSel_DrawSnd:
000045DC 3038 FF84                  		move.w	(v_levselsound).w,d0
000045E0 0640 0080                  		addi.w	#$80,d0
000045E4 1400                       		move.b	d0,d2
000045E6 E808                       		lsr.b	#4,d0
000045E8 6100 0000                  		bsr.w	LevSel_ChgSnd	; draw 1st digit
000045EC 1002                       		move.b	d2,d0
000045EE 6100 0000                  		bsr.w	LevSel_ChgSnd	; draw 2nd digit
000045F2 4E75                       		rts	
000045F4                            ; End of function LevSelTextLoad
000045F4                            
000045F4                            
000045F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000045F4                            
000045F4                            
000045F4                            LevSel_ChgSnd:
000045F4 0240 000F                  		andi.w	#$F,d0
000045F8 0C00 000A                  		cmpi.b	#$A,d0		; is digit $A-$F?
000045FC 6500                       		blo.s	LevSel_Numb	; if not, branch
000045FE 5E00                       		addi.b	#7,d0		; use alpha characters
00004600                            
00004600                            	LevSel_Numb:
00004600 D043                       		add.w	d3,d0
00004602 3C80                       		move.w	d0,(a6)
00004604 4E75                       		rts	
00004606                            ; End of function LevSel_ChgSnd
00004606                            
00004606                            
00004606                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004606                            
00004606                            
00004606                            LevSel_ChgLine:
00004606 7417                       		moveq	#$17,d2		; number of characters per line
00004608                            
00004608                            	LevSel_LineLoop:
00004608 7000                       		moveq	#0,d0
0000460A 1019                       		move.b	(a1)+,d0	; get character
0000460C 6A00                       		bpl.s	LevSel_CharOk	; branch if valid
0000460E 3CBC 0000                  		move.w	#0,(a6)		; use blank character
00004612 51CA FFF4                  		dbf	d2,LevSel_LineLoop
00004616 4E75                       		rts	
00004618                            
00004618                            
00004618                            	LevSel_CharOk:
00004618 D043                       		add.w	d3,d0		; combine char with VRAM setting
0000461A 3C80                       		move.w	d0,(a6)		; send to VRAM
0000461C 51CA FFEA                  		dbf	d2,LevSel_LineLoop
00004620 4E75                       		rts	
00004622                            ; End of function LevSel_ChgLine
00004622                            
00004622                            ; ===========================================================================
00004622                            ; ---------------------------------------------------------------------------
00004622                            ; Level	select menu text
00004622                            ; ---------------------------------------------------------------------------
00004622                            		incbin	"misc\Level Select Text (JP1).bin"
0000481A                            		even
0000481A                            ; ---------------------------------------------------------------------------
0000481A                            ; Music	playlist
0000481A                            ; ---------------------------------------------------------------------------
0000481A                            MusicList:
0000481A 00                         		dc.b bgm_GHZ    ; GHZ1
0000481B 00                                 	dc.b bgm_LZ    ; GHZ2
0000481C 00                                 	dc.b bgm_LZ   ; GHZ3
0000481D 00                                 	dc.b bgm_LZ    ; GHZ4
0000481E 00                                 	dc.b bgm_Stop    ; LZ1
0000481F 00                                 	dc.b bgm_Stop   ; LZ2
00004820 00                                 	dc.b bgm_Stop    ; LZ3
00004821 00                                 	dc.b bgm_SBZ3    ; LZ4
00004822 00                                 	dc.b bgm_MZ    ; MZ1
00004823 00                                 	dc.b bgm_SBZ    ; MZ2
00004824 00                                 	dc.b bgm_SBZ    ; MZ3
00004825 00                                 	dc.b bgm_SBZ    ; MZ4
00004826 00                                 	dc.b bgm_LZ    ; SLZ1
00004827 00                                 	dc.b bgm_LZ    ; SLZ2
00004828 00                                 	dc.b bgm_LZ    ; SLZ3
00004829 00                                 	dc.b bgm_LZ    ; SLZ4
0000482A 00                                 	dc.b bgm_SYZ    ; SYZ1
0000482B 00                                 	dc.b bgm_SLZ    ; SYZ2
0000482C 00                                 	dc.b bgm_SLZ    ; SYZ3
0000482D 00                                 	dc.b bgm_SLZ    ; SYZ4
0000482E 00                                 	dc.b bgm_SBZ    ; SBZ1
0000482F 00                                 	dc.b bgm_SBZ    ; SBZ2
00004830 00                                 	dc.b bgm_FZ		; SBZ3
00004831 00                                 	dc.b bgm_SBZ    ; SBZ4
00004832 00                                 	dc.b bgm_GHZ    ; GHZ1
00004833 00                                 	dc.b bgm_GHZ    ; GHZ1
00004834 00                                 	dc.b bgm_GHZ    ; GHZ1
00004835 00                                 	dc.b bgm_GHZ    ; GHZ1
00004836                                    	even
00004836                            ; ===========================================================================
00004836                            
00004836                            ; ---------------------------------------------------------------------------
00004836                            ; Level
00004836                            ; ---------------------------------------------------------------------------
00004836                            
00004836                            GM_Level:
00004836 08F8 0007 F600             		bset	#7,(v_gamemode).w ; add $80 to screen mode (for pre level sequence)
0000483C 4A78 FFF0                  		tst.w	(f_demo).w
00004840 6B00                       		bmi.s	Level_NoMusicFade
0000484A                            
0000484A                            	Level_NoMusicFade:
0000484A 6100 CEFC                  		bsr.w	ClearPLC
0000484E 6100 D932                  		bsr.w	PaletteFadeOut
00004852 4A78 FFF0                  		tst.w	(f_demo).w	; is an ending sequence demo running?
00004856 6B00                       		bmi.s	Level_ClrRam	; if yes, branch
00004858 46FC 2700                  		disable_ints
00004866 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
0000486C 6100 CA90                  		bsr.w	NemDec
00004870 46FC 2300                  		enable_ints
00004874 7000                       		moveq	#0,d0
00004876 1038 FE10                  		move.b	(v_zone).w,d0
0000487A E948                       		lsl.w	#4,d0
0000487C 45F9 0000 0000             		lea	(LevelHeaders).l,a2
00004882 45F2 0000                  		lea	(a2,d0.w),a2
00004886 7000                       		moveq	#0,d0
00004888 1012                       		move.b	(a2),d0
0000488A 6700                       		beq.s	loc_37FC
0000488C 6100 CE5C                  		bsr.w	AddPLC		; load level patterns
00004890                            
00004890                            loc_37FC:
00004890 7000                       		moveq	#plcid_Main2,d0
00004892 6100 CE56                  		bsr.w	AddPLC		; load standard	patterns
00004896                            
00004896                            Level_ClrRam:
00004896 43F8 D000                  		lea	(v_objspace).w,a1
0000489A 7000                       		moveq	#0,d0
0000489C 323C 07FF                  		move.w	#$7FF,d1
000048A0                            
000048A0                            	Level_ClrObjRam:
000048A0 22C0                       		move.l	d0,(a1)+
000048A2 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
000048A6                            
000048A6 43F8 F628                  		lea	($FFFFF628).w,a1
000048AA 7000                       		moveq	#0,d0
000048AC 323C 0015                  		move.w	#$15,d1
000048B0                            
000048B0                            	Level_ClrVars1:
000048B0 22C0                       		move.l	d0,(a1)+
000048B2 51C9 FFFC                  		dbf	d1,Level_ClrVars1 ; clear misc variables
000048B6                            
000048B6 43F8 F700                  		lea	(v_screenposx).w,a1
000048BA 7000                       		moveq	#0,d0
000048BC 323C 003F                  		move.w	#$3F,d1
000048C0                            
000048C0                            	Level_ClrVars2:
000048C0 22C0                       		move.l	d0,(a1)+
000048C2 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
000048C6                            
000048C6 43F8 FE60                  		lea	(v_oscillate+2).w,a1
000048CA 7000                       		moveq	#0,d0
000048CC 323C 0047                  		move.w	#$47,d1
000048D0                            
000048D0                            	Level_ClrVars3:
000048D0 22C0                       		move.l	d0,(a1)+
000048D2 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
000048D6                            
000048D6 46FC 2700                  		disable_ints
000048DA 6100 C8A4                  		bsr.w	ClearScreen
000048DE 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
000048E4 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
000048E8 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
000048EC 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
000048F0 3CBC 857C                  		move.w	#$8500+(vram_sprites>>9),(a6) ; set sprite table address
000048F4 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
000048F8 3CBC 8004                  		move.w	#$8004,(a6)		; 8-colour mode
000048FC 3CBC 8720                  		move.w	#$8720,(a6)		; set background colour (line 3; colour 0)
00004900 31FC 8ADF F624             		move.w	#$8A00+223,(v_hbla_hreg).w ; set palette change position (for water)
00004906 3CB8 F624                  		move.w	(v_hbla_hreg).w,(a6)
0000490A 31FC C800 C8FC             		ResetDMAQueue	
00004910 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ?
00004916 6600                       		bne.s	Level_LoadPal	; if not, branch
00004918                            
00004918 3CBC 8014                  		move.w	#$8014,(a6)	; enable H-interrupts
0000491C 7000                       		moveq	#0,d0
0000491E 1038 FE11                  		move.b	(v_act).w,d0
00004922 D040                       		add.w	d0,d0
00004924 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
0000492A 3031 0000                  		move.w	(a1,d0.w),d0
0000492E 31C0 F646                  		move.w	d0,(v_waterpos1).w ; set water heights
00004932 31C0 F648                  		move.w	d0,(v_waterpos2).w
00004936 31C0 F64A                  		move.w	d0,(v_waterpos3).w
0000493A 4238 F64D                  		clr.b	(v_wtr_routine).w ; clear water routine counter
0000493E 4238 F64E                  		clr.b	(f_wtr_state).w	; clear	water state
00004942 11FC 0001 F64C             		move.b	#1,(f_water).w	; enable water
00004948                            
00004948                            Level_LoadPal:
00004948 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
0000494E 46FC 2300                  		move	#$2300,sr
00004952 4EB9 0000 0000             		jsr		LoadPlayerPal
00004958 6100 DB0E                  		bsr.w	PalLoad2	; load Sonic's pallet line
0000495C 0C38 0001 F64C             		cmp.b	#1,(f_water).w ; Is water enabled?
00004962 6600                       		bne.s	Level_GetBgm	; if not, branch
00004964 4EB9 0000 0000             		jsr		LoadPlayerWaterPal
0000496A 6100 DB3C                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
0000496E 4A38 FE30                  		tst.b	($FFFFFE30).w
00004972 6700                       		beq.s	Level_GetBgm
00004974 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
0000497A                            
0000497A                            	Level_GetBgm:
0000497A 4A78 FFF0                  		tst.w	(f_demo).w
0000497E 6B00                               	bmi.s	Level_SkipTtlCard
00004980 7000                               	moveq	#0,d0
00004982 3038 FE10                  		move.w	(v_zone).w,d0
00004986 E418                       		ror.b	#2,d0
00004988 EC48                       		lsr.w   #6,d0
0000498A 43F9 0000 481A                     	lea	(MusicList).l,a1 ; load    music playlist
00004990 1031 0000                          	move.b	(a1,d0.w),d0
00004994 11C0 F5C6                  		move.b	d0,((v_Saved_music)).w
00004998 6100 C8B0                          	bsr.w	PlaySound    ; play music
0000499C 11FC 0000 D080                     	move.b	#id_TitleCard,(v_objspace+$80).w ; load title card object
000049A2                            
000049A2                            
000049A2                            Level_TtlCardLoop:
000049A2 11FC 000C F62A             		move.b	#$C,(v_vbla_routine).w
000049A8 6100 F056                  		bsr.w	WaitForVBla
000049AC 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000049B2 4EB9 0000 0000             		jsr	(BuildSprites).l
000049B8 6100 CD9C                  		bsr.w	RunPLC
000049BC 3038 D108                  		move.w	(v_objspace+$108).w,d0
000049C0 B078 D130                  		cmp.w	(v_objspace+$130).w,d0 ; has title card sequence finished?
000049C4 66DC                       		bne.s	Level_TtlCardLoop ; if not, branch
000049C6 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are there any items in the pattern load cue?
000049CA 66D6                       		bne.s	Level_TtlCardLoop ; if yes, branch
000049CC 4EB9 0000 0000             		jsr	(Hud_Base).l	; load basic HUD gfx
000049D2                            
000049D2                            	Level_SkipTtlCard:
000049D2 4EB9 0000 0000             		jsr		LoadPlayerPal
000049D8 6100 DA52                  		bsr.w	PalLoad1	; load Sonic's palette
000049DC 6100 0000                  		bsr.w	LevelSizeLoad
000049E0 6100 0000                  		bsr.w	DeformLayers
000049E4 08F8 0002 F754             		bset	#2,(v_fg_scroll_flags).w
000049EA 6100 0000                  		bsr.w	LevelDataLoad ; load block mappings and palettes
000049EE 6100 0000                  		bsr.w	LoadTilesFromStart
000049F2 4EB9 0000 0000             		jsr	(FloorLog_Unk).l
000049F8 6100 0000                  		bsr.w	ColIndexLoad
000049FC 6100 0000                  		bsr.w	LZWaterFeatures
00004A00 11FC 0000 D000             		move.b	#id_SonicPlayer,(v_player).w ; load Sonic object
00004A06 4A78 FFF0                  		tst.w	(f_demo).w
00004A0A 6B00                       		bmi.s	Level_ChkDebug
00004A0C 11FC 0000 D040             		move.b	#id_HUD,(v_objspace+$40).w ; load HUD object
00004A12                            
00004A12                            Level_ChkDebug:
00004A12 4A38 FFE2                  		tst.b	(f_debugcheat).w ; has debug cheat been entered?
00004A16 6700                       		beq.s	Level_ChkWater	; if not, branch
00004A18 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is A button held?
00004A1E 6700                       		beq.s	Level_ChkWater	; if not, branch
00004A20 11FC 0001 FFFA             		move.b	#1,(f_debugmode).w ; enable debug mode
00004A26                            
00004A26                            Level_ChkWater:
00004A26 31FC 0000 F602             		move.w	#0,(v_jpadhold2).w
00004A2C 31FC 0000 F604             		move.w	#0,(v_jpadhold1).w
00004A32 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ?
00004A38 6600                       		bne.s	Level_LoadObj	; if not, branch
00004A3A 11FC 0000 D780             		move.b	#id_WaterSurface,(v_objspace+$780).w ; load water surface object
00004A40 31FC 0060 D788             		move.w	#$60,(v_objspace+$780+obX).w
00004A46 11FC 0000 D7C0             		move.b	#id_WaterSurface,(v_objspace+$7C0).w
00004A4C 31FC 0120 D7C8             		move.w	#$120,(v_objspace+$7C0+obX).w
00004A52                            
00004A52                            Level_LoadObj:
00004A52 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00004A58 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004A5E 4EB9 0000 0000             		jsr	(BuildSprites).l
00004A64 7000                       		moveq	#0,d0
00004A66 4A38 FE30                  		tst.b	(v_lastlamp).w	; are you starting from	a lamppost?
00004A6A 6600                       		bne.s	Level_SkipClr	; if yes, branch
00004A6C 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
00004A70 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
00004A74 11C0 FE1B                  		move.b	d0,(v_lifecount).w ; clear lives counter
00004A78                            
00004A78                            	Level_SkipClr:
00004A78 11C0 FE1A                  		move.b	d0,(f_timeover).w
00004A7C 11C0 FE2C                  		move.b	d0,(v_shield).w	; clear shield
00004A80 11C0 F5C8                  		move.b	d0,(v_rshield).w; clear red shield
00004A84 11C0 F5C9                  		move.b	d0,(v_gshield).w; clear gold shield
00004A88 11C0 F5CA                  		move.b	d0,(v_spshield).w; clear gold shield
00004A8C 11C0 FE2D                  		move.b	d0,(v_invinc).w	; clear invincibility
00004A90 11C0 FE2E                  		move.b	d0,(v_shoes).w	; clear speed shoes
00004A94 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00004A98 31C0 FE08                  		move.w	d0,(v_debuguse).w
00004A9C 31C0 FE02                  		move.w	d0,(f_restart).w
00004AA0 31C0 FE04                  		move.w	d0,(v_framecount).w
00004AA4 6100 0000                  		bsr.w	OscillateNumInit
00004AA8 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w ; update score counter
00004AAE 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w ; update rings counter
00004AB4 11FC 0001 FE1E             		move.b	#1,(f_timecount).w ; update time counter
00004ABA 31FC 0000 F790             		move.w	#0,(v_btnpushtime1).w
00004AC0 43F9 0000 0000             		lea	(DemoDataPtr).l,a1 ; load demo data
00004AC6 7000                       		moveq	#0,d0
00004AC8 1038 FE10                  		move.b	(v_zone).w,d0
00004ACC E548                       		lsl.w	#2,d0
00004ACE 2271 0000                  		movea.l	(a1,d0.w),a1
00004AD2 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
00004AD6 6A00                       		bpl.s	Level_Demo	; if yes, branch
00004AD8 43F9 0000 0000             		lea	(DemoEndDataPtr).l,a1 ; load ending demo data
00004ADE 3038 FFF4                  		move.w	(v_creditsnum).w,d0
00004AE2 5340                       		subq.w	#1,d0
00004AE4 E548                       		lsl.w	#2,d0
00004AE6 2271 0000                  		movea.l	(a1,d0.w),a1
00004AEA                            
00004AEA                            Level_Demo:
00004AEA 11E9 0001 F792             		move.b	1(a1),(v_btnpushtime2).w ; load key press duration
00004AF0 5338 F792                  		subq.b	#1,(v_btnpushtime2).w ; subtract 1 from duration
00004AF4 31FC 0708 F614             		move.w	#1800,(v_demolength).w
00004AFA 4A78 FFF0                  		tst.w	(f_demo).w
00004AFE 6A00                       		bpl.s	Level_ChkWaterPal
00004B00 31FC 021C F614             		move.w	#540,(v_demolength).w
00004B06 0C78 0004 FFF4             		cmpi.w	#4,(v_creditsnum).w
00004B0C 6600                       		bne.s	Level_ChkWaterPal
00004B0E 31FC 01FE F614             		move.w	#510,(v_demolength).w
00004B14                            
00004B14                            Level_ChkWaterPal:
00004B14 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ/SBZ3?
00004B1A 6600                       		bne.s	Level_Delay	; if not, branch
00004B1C 700B                       		moveq	#palid_LZWater,d0 ; palette $B (LZ underwater)
00004B1E 0C38 0003 FE11             		cmpi.b	#3,(v_act).w	; is level SBZ3?
00004B24 6600                       		bne.s	Level_WtrNotSbz	; if not, branch
00004B26 700D                       		moveq	#palid_SBZ3Water,d0 ; palette $D (SBZ3 underwater)
00004B28                            
00004B28                            	Level_WtrNotSbz:
00004B28 6100 D9BA                  		bsr.w	PalLoad4_Water
00004B2C                            
00004B2C                            Level_Delay:
00004B2C 323C 0003                  		move.w	#3,d1
00004B30                            
00004B30                            	Level_DelayLoop:
00004B30 11FC 0008 F62A             		move.b	#8,(v_vbla_routine).w
00004B36 6100 EEC8                  		bsr.w	WaitForVBla
00004B3A 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00004B3E                            
00004B3E 31FC 202F F626             		move.w	#$202F,(v_pfade_start).w ; fade in 2nd, 3rd & 4th palette lines
00004B44 6100 D59C                  		bsr.w	PalFadeIn_Alt
00004B48 4A78 FFF0                  		tst.w	(f_demo).w	; is an ending sequence demo running?
00004B4C 6B00                       		bmi.s	Level_ClrCardArt ; if yes, branch
00004B4E 5438 D0A4                  		addq.b	#2,(v_objspace+$80+obRoutine).w ; make title card move
00004B52 5838 D0E4                  		addq.b	#4,(v_objspace+$C0+obRoutine).w
00004B56 5838 D124                  		addq.b	#4,(v_objspace+$100+obRoutine).w
00004B5A 5838 D164                  		addq.b	#4,(v_objspace+$140+obRoutine).w
00004B5E 6000                       		bra.s	Level_StartGame
00004B60                            ; ===========================================================================
00004B60                            
00004B60                            Level_ClrCardArt:
00004B60 7000                       		moveq	#plcid_Explode,d0
00004B62 4EB9 0000 16EA             		jsr	(AddPLC).l	; load explosion gfx
00004B68 7000                       		moveq	#0,d0
00004B6A 1038 FE10                  		move.b	(v_zone).w,d0
00004B6E 0640 0000                  		addi.w	#plcid_GHZAnimals,d0
00004B72 4EB9 0000 16EA             		jsr	(AddPLC).l	; load animal gfx (level no. + $15)
00004B78                            
00004B78                            Level_StartGame:
00004B78 08B8 0007 F600             		bclr	#7,(v_gamemode).w ; subtract $80 from mode to end pre-level stuff
00004B7E                            
00004B7E                            ; ---------------------------------------------------------------------------
00004B7E                            ; Main level loop (when	all title card and loading sequences are finished)
00004B7E                            ; ---------------------------------------------------------------------------
00004B7E                            
00004B7E                            Level_MainLoop:
00004B7E 6100 C6DC                  		bsr.w	PauseGame
00004B82 11FC 0008 F62A             		move.b	#8,(v_vbla_routine).w
00004B88 6100 EE76                  		bsr.w	WaitForVBla
00004B8C 5278 FE04                  		addq.w	#1,(v_framecount).w ; add 1 to level timer
00004B90 6100 0000                  		bsr.w	MoveSonicInDemo
00004B94 6100 0000                  		bsr.w	LZWaterFeatures
00004B98 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004B9E 4A78 FE02                  			tst.w   (f_restart).w
00004BA2 6600 FC92                  			bne     GM_Level
00004BA6 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode being used?
00004BAA 6600                       		bne.s	Level_DoScroll	; if yes, branch
00004BAC 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; has Sonic just died?
00004BB2 6400                       		bhs.s	Level_SkipScroll ; if yes, branch
00004BB4                            
00004BB4                            	Level_DoScroll:
00004BB4 6100 0000                  		bsr.w	DeformLayers
00004BB8                            
00004BB8                            	Level_SkipScroll:
00004BB8 4EB9 0000 0000             		jsr	(BuildSprites).l
00004BBE 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00004BC4 6100 D108                  		bsr.w	PaletteCycle
00004BC8 6100 CB8C                  		bsr.w	RunPLC
00004BCC 6100 0000                  		bsr.w	OscillateNumDo
00004BD0 6100 0000                  		bsr.w	SynchroAnimate
00004BD4 6100 0000                  		bsr.w	SignpostArtLoad
00004BD8                            
00004BD8 0C38 0000 F600             		cmpi.b	#id_Demo,(v_gamemode).w
00004BDE 6700                       		beq.s	Level_ChkDemo	; if mode is 8 (demo), branch
00004BE0 0C38 0000 F600             		cmpi.b	#id_Level,(v_gamemode).w
00004BE6 6700 FF96                  		beq.w	Level_MainLoop	; if mode is $C (level), branch
00004BEA 4E75                       		rts	
00004BEC                            ; ===========================================================================
00004BEC                            
00004BEC                            Level_ChkDemo:
00004BEC 4A78 FE02                  		tst.w	(f_restart).w	; is level set to restart?
00004BF0 6600                       		bne.s	Level_EndDemo	; if yes, branch
00004BF2 4A78 F614                  		tst.w	(v_demolength).w ; is there time left on the demo?
00004BF6 6700                       		beq.s	Level_EndDemo	; if not, branch
00004BF8 0C38 0000 F600             		cmpi.b	#id_Demo,(v_gamemode).w
00004BFE 6700 FF7E                  		beq.w	Level_MainLoop	; if mode is 8 (demo), branch
00004C02 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00004C08 4E75                       		rts	
00004C0A                            ; ===========================================================================
00004C0A                            
00004C0A                            Level_EndDemo:
00004C0A 0C38 0000 F600             		cmpi.b	#id_Demo,(v_gamemode).w
00004C10 6600                       		bne.s	Level_FadeDemo	; if mode is 8 (demo), branch
00004C12 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00004C18 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on & not ending sequence?
00004C1C 6A00                       		bpl.s	Level_FadeDemo	; if yes, branch
00004C1E 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; go to credits
00004C24                            
00004C24                            Level_FadeDemo:
00004C24 31FC 003C F614             		move.w	#$3C,(v_demolength).w
00004C2A 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
00004C30 4278 F794                  		clr.w	(v_palchgspeed).w
00004C34                            
00004C34                            	Level_FDLoop:
00004C34 11FC 0008 F62A             		move.b	#8,(v_vbla_routine).w
00004C3A 6100 EDC4                  		bsr.w	WaitForVBla
00004C3E 6100 0000                  		bsr.w	MoveSonicInDemo
00004C42 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004C48 4EB9 0000 0000             		jsr	(BuildSprites).l
00004C4E 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00004C54 5378 F794                  		subq.w	#1,(v_palchgspeed).w
00004C58 6A00                       		bpl.s	loc_3BC8
00004C5A 31FC 0002 F794             		move.w	#2,(v_palchgspeed).w
00004C60 6100 D540                  		bsr.w	FadeOut_ToBlack
00004C64                            
00004C64                            loc_3BC8:
00004C64 4A78 F614                  		tst.w	(v_demolength).w
00004C68 66CA                       		bne.s	Level_FDLoop
00004C6A 4E75                       		rts	
00004C6C                            ; ===========================================================================
00004C6C                            
00004C6C                            		include	"_inc\LZWaterFeatures.asm"
00004C6C                            ; ---------------------------------------------------------------------------
00004C6C                            ; Subroutine to	do special water effects in Labyrinth Zone
00004C6C                            ; ---------------------------------------------------------------------------
00004C6C                            
00004C6C                            LZWaterFeatures:
00004C6C 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00004C72 6600                       		bne.s	@notlabyrinth	; if not, branch
00004C74 4A38 F744                  			tst.b   (f_nobgscroll).w
00004C78 6600                       			bne.s	@setheight
00004C7A 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; has Sonic just died?
00004C80 6400                       		bcc.s	@setheight	; if yes, skip other effects
00004C82                            
00004C82 6100 0000                  		bsr.w	LZWindTunnels
00004C86 6100 0000                  		bsr.w	LZWaterSlides
00004C8A 6100 0000                  		bsr.w	LZDynamicWater
00004C8E                            
00004C8E                            @setheight:
00004C8E 4238 F64E                  		clr.b	(f_wtr_state).w
00004C92 7000                       		moveq	#0,d0
00004C94 1038 FE60                  		move.b	(v_oscillate+2).w,d0
00004C98 E248                       		lsr.w	#1,d0
00004C9A D078 F648                  		add.w	(v_waterpos2).w,d0
00004C9E 31C0 F646                  		move.w	d0,(v_waterpos1).w
00004CA2 3038 F646                  		move.w	(v_waterpos1).w,d0
00004CA6 9078 F704                  		sub.w	(v_screenposy).w,d0
00004CAA 6400                       		bcc.s	@isbelow
00004CAC 4A40                       		tst.w	d0
00004CAE 6A00                       		bpl.s	@isbelow	; if water is below top of screen, branch
00004CB0                            
00004CB0 11FC 00DF F625             		move.b	#223,(v_hbla_line).w
00004CB6 11FC 0001 F64E             		move.b	#1,(f_wtr_state).w ; screen is all underwater
00004CBC                            
00004CBC                            	@isbelow:
00004CBC 0C40 00DF                  		cmpi.w	#223,d0		; is water within 223 pixels of top of screen?
00004CC0 6500                       		bcs.s	@isvisible	; if yes, branch
00004CC2 303C 00DF                  		move.w	#223,d0
00004CC6                            
00004CC6                            	@isvisible:
00004CC6 11C0 F625                  		move.b	d0,(v_hbla_line).w ; set water surface as on-screen
00004CCA                            
00004CCA                            @notlabyrinth:
00004CCA 4E75                       		rts	
00004CCC                            ; ===========================================================================
00004CCC                            ; ---------------------------------------------------------------------------
00004CCC                            ; Initial water heights
00004CCC                            ; ---------------------------------------------------------------------------
00004CCC 0420                       WaterHeight:	dc.w $420	; Labyrinth 1
00004CCE 0328                       		dc.w $328	; Labyrinth 2
00004CD0 0900                       		dc.w $900	; Labyrinth 3
00004CD2 0228                       		dc.w $228	; Scrap Brain 3
00004CD4                            		even
00004CD4                            ; ===========================================================================
00004CD4                            
00004CD4                            ; ---------------------------------------------------------------------------
00004CD4                            ; Labyrinth dynamic water routines
00004CD4                            ; ---------------------------------------------------------------------------
00004CD4                            
00004CD4                            LZDynamicWater:
00004CD4 7000                       		moveq	#0,d0
00004CD6 1038 FE11                  		move.b	(v_act).w,d0
00004CDA D040                       		add.w	d0,d0
00004CDC 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
00004CE0 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
00004CE4 7200                       		moveq	#0,d1
00004CE6 1238 F64C                  		move.b	(f_water).w,d1
00004CEA 3038 F64A                  		move.w	(v_waterpos3).w,d0
00004CEE 9078 F648                  		sub.w	(v_waterpos2).w,d0
00004CF2 6700                       		beq.s	@exit		; if water level is correct, branch
00004CF4 6400                       		bcc.s	@movewater	; if water level is too high, branch
00004CF6 4441                       		neg.w	d1		; set water to move up instead
00004CF8                            
00004CF8                            	@movewater:
00004CF8 D378 F648                  		add.w	d1,(v_waterpos2).w ; move water up/down
00004CFC                            
00004CFC                            	@exit:
00004CFC 4E75                       		rts	
00004CFE                            ; ===========================================================================
00004CFE 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
00004D00 0000                       		dc.w DynWater_LZ2-DynWater_Index
00004D02 0000                       		dc.w DynWater_LZ3-DynWater_Index
00004D04 0000                       		dc.w DynWater_SBZ3-DynWater_Index
00004D06                            ; ===========================================================================
00004D06                            
00004D06                            DynWater_LZ1:
00004D06 4E75                       		rts	
00004D08                            ; ===========================================================================
00004D08                            
00004D08                            DynWater_LZ2:
00004D08 3038 F700                  		move.w	(v_screenposx).w,d0
00004D0C 323C 0328                  		move.w	#$328,d1
00004D10 0C40 0500                  		cmpi.w	#$500,d0
00004D14 6500                       		bcs.s	@setwater
00004D16 323C 03C8                  		move.w	#$3C8,d1
00004D1A 0C40 0B00                  		cmpi.w	#$B00,d0
00004D1E 6500                       		bcs.s	@setwater
00004D20 323C 0428                  		move.w	#$428,d1
00004D24                            
00004D24                            	@setwater:
00004D24 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004D28 4E75                       		rts	
00004D2A                            ; ===========================================================================
00004D2A                            
00004D2A                            DynWater_LZ3:
00004D2A 3038 F700                  		move.w	(v_screenposx).w,d0
00004D2E 1438 F64D                  		move.b	(v_wtr_routine).w,d2
00004D32 6600                       		bne.s	@routine2
00004D34                            
00004D34 323C 0900                  		move.w	#$900,d1
00004D38 0C40 0600                  		cmpi.w	#$600,d0	; has screen reached position?
00004D3C 6500                       		bcs.s	@setwaterlz3	; if not, branch
00004D3E 0C78 03C0 D00C             		cmpi.w	#$3C0,(v_player+obY).w
00004D44 6500                       		bcs.s	@setwaterlz3
00004D46 0C78 0600 D00C             		cmpi.w	#$600,(v_player+obY).w ; is Sonic in a y-axis range?
00004D4C 6400                       		bcc.s	@setwaterlz3	; if not, branch
00004D4E                            
00004D4E 323C 04C8                  		move.w	#$4C8,d1	; set new water height
00004D52 11FC 004B A506             		move.b	#$4B,(v_lvllayout+$106).w ; update level layout
00004D58 11FC 0001 F64D             		move.b	#1,(v_wtr_routine).w ; use second routine next
00004D66                            
00004D66                            	@setwaterlz3:
00004D66 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004D6A 31C1 F648                  		move.w	d1,(v_waterpos2).w ; change water height instantly
00004D6E 4E75                       		rts	
00004D70                            ; ===========================================================================
00004D70                            
00004D70                            @routine2:
00004D70 5302                       		subq.b	#1,d2
00004D72 6600                       		bne.s	@routine3
00004D74 323C 04C8                  		move.w	#$4C8,d1
00004D78 0C40 0770                  		cmpi.w	#$770,d0
00004D7C 6500                       		bcs.s	@setwater2
00004D7E 323C 0308                  		move.w	#$308,d1
00004D82 0C40 1400                  		cmpi.w	#$1400,d0
00004D86 6500                       		bcs.s	@setwater2
00004D88 0C78 0508 F64A             		cmpi.w	#$508,(v_waterpos3).w
00004D8E 6700                       		beq.s	@sonicislow
00004D90 0C78 0600 D00C             		cmpi.w	#$600,(v_player+obY).w ; is Sonic below $600 y-axis?
00004D96 6400                       		bcc.s	@sonicislow	; if yes, branch
00004D98 0C78 0280 D00C             		cmpi.w	#$280,(v_player+obY).w
00004D9E 6400                       		bcc.s	@setwater2
00004DA0                            
00004DA0                            @sonicislow:
00004DA0 323C 0508                  		move.w	#$508,d1
00004DA4 31C1 F648                  		move.w	d1,(v_waterpos2).w
00004DA8 0C40 1770                  		cmpi.w	#$1770,d0
00004DAC 6500                       		bcs.s	@setwater2
00004DAE 11FC 0002 F64D             		move.b	#2,(v_wtr_routine).w
00004DB4                            
00004DB4                            	@setwater2:
00004DB4 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004DB8 4E75                       		rts	
00004DBA                            ; ===========================================================================
00004DBA                            
00004DBA                            @routine3:
00004DBA 5302                       		subq.b	#1,d2
00004DBC 6600                       		bne.s	@routine4
00004DBE 323C 0508                  		move.w	#$508,d1
00004DC2 0C40 1860                  		cmpi.w	#$1860,d0
00004DC6 6500                       		bcs.s	@setwater3
00004DC8 323C 0188                  		move.w	#$188,d1
00004DCC 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004DD0 6400                       		bcc.s	@loc_3DC6
00004DD2 B278 F648                  		cmp.w	(v_waterpos2).w,d1
00004DD6 6600                       		bne.s	@setwater3
00004DD8                            
00004DD8                            	@loc_3DC6:
00004DD8 11FC 0003 F64D             		move.b	#3,(v_wtr_routine).w
00004DDE                            
00004DDE                            	@setwater3:
00004DDE 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004DE2 4E75                       		rts	
00004DE4                            ; ===========================================================================
00004DE4                            
00004DE4                            @routine4:
00004DE4 5302                       		subq.b	#1,d2
00004DE6 6600                       		bne.s	@routine5
00004DE8 323C 0188                  		move.w	#$188,d1
00004DEC 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004DF0 6500                       		bcs.s	@setwater4
00004DF2 323C 0900                  		move.w	#$900,d1
00004DF6 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00004DFA 6500                       		bcs.s	@setwater4
00004DFC 11FC 0004 F64D             		move.b	#4,(v_wtr_routine).w
00004E02 31FC 0608 F64A             		move.w	#$608,(v_waterpos3).w
00004E08 31FC 07C0 F648             		move.w	#$7C0,(v_waterpos2).w
00004E0E 11FC 0001 F7E8             		move.b	#1,(f_switch+8).w
00004E14 4E75                       		rts	
00004E16                            ; ===========================================================================
00004E16                            
00004E16                            @setwater4:
00004E16 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004E1A 31C1 F648                  		move.w	d1,(v_waterpos2).w
00004E1E 4E75                       		rts	
00004E20                            ; ===========================================================================
00004E20                            
00004E20                            @routine5:
00004E20 0C40 1E00                  		cmpi.w	#$1E00,d0	; has screen passed final position?
00004E24 6500                       		bcs.s	@dontset	; if not, branch
00004E26 31FC 0128 F64A             		move.w	#$128,(v_waterpos3).w
00004E2C                            
00004E2C                            	@dontset:
00004E2C 4E75                       		rts	
00004E2E                            ; ===========================================================================
00004E2E                            
00004E2E                            DynWater_SBZ3:
00004E2E 323C 0228                  		move.w	#$228,d1
00004E32 0C78 0F00 F700             		cmpi.w	#$F00,(v_screenposx).w
00004E38 6500                       		bcs.s	@setwater
00004E3A 323C 04C8                  		move.w	#$4C8,d1
00004E3E                            
00004E3E                            	@setwater:
00004E3E 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004E42 4E75                       		rts
00004E44                            
00004E44                            ; ---------------------------------------------------------------------------
00004E44                            ; Labyrinth Zone "wind tunnels"	subroutine
00004E44                            ; ---------------------------------------------------------------------------
00004E44                            
00004E44                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004E44                            
00004E44                            
00004E44                            LZWindTunnels:
00004E44 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
00004E48 6600 0000                  		bne.w	@quit	; if yes, branch
00004E4C 45F9 0000 0000             		lea	(LZWind_Data+8).l,a2
00004E52 7000                       		moveq	#0,d0
00004E54 1038 FE11                  		move.b	(v_act).w,d0	; get act number
00004E58 E748                       		lsl.w	#3,d0		; multiply by 8
00004E5A D4C0                       		adda.w	d0,a2		; add to address for data
00004E5C 7200                       		moveq	#0,d1
00004E5E 4A38 FE11                  		tst.b	(v_act).w	; is act number 1?
00004E62 6600                       		bne.s	@notact1	; if not, branch
00004E64 7201                       		moveq	#1,d1
00004E66 514A                       		subq.w	#8,a2		; use different data for act 1
00004E68                            
00004E68                            	@notact1:
00004E68 43F8 D000                  		lea	(v_player).w,a1
00004E6C                            
00004E6C                            @chksonic:
00004E6C 3029 0008                  		move.w	obX(a1),d0
00004E70 B052                       		cmp.w	(a2),d0
00004E72 6500 0000                  		bcs.w	@chknext
00004E76 B06A 0004                  		cmp.w	4(a2),d0
00004E7A 6400 0000                  		bcc.w	@chknext
00004E7E 3429 000C                  		move.w	obY(a1),d2
00004E82 B46A 0002                  		cmp.w	2(a2),d2
00004E86 6500                       		bcs.s	@chknext
00004E88 B46A 0006                  		cmp.w	6(a2),d2
00004E8C 6400                       		bcc.s	@chknext	; branch if Sonic is outside a range
00004E8E 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00004E92 0200 003F                  		andi.b	#$3F,d0		; does VInt counter fall on 0, $40, $80 or $C0?
00004E96 6600                       		bne.s	@skipsound	; if not, branch
00004EA2                            
00004EA2                            	@skipsound:
00004EA2 4A38 F7C9                  		tst.b	(f_wtunnelallow).w ; are wind tunnels disabled?
00004EA6 6600 0000                  		bne.w	@quit	; if yes, branch
00004EAA 0C29 0004 0024             		cmpi.b	#4,obRoutine(a1) ; is Sonic hurt/dying?
00004EB0 6400                       		bcc.s	@clrquit	; if yes, branch
00004EB2 11FC 0001 F7C7             		move.b	#1,(f_wtunnelmode).w
00004EB8 0440 0080                  		subi.w	#$80,d0
00004EBC B052                       		cmp.w	(a2),d0
00004EBE 6400                       		bcc.s	@movesonic
00004EC0 7002                       		moveq	#2,d0
00004EC2 0C38 0001 FE11             		cmpi.b	#1,(v_act).w	; is act number 2?
00004EC8 6600                       		bne.s	@notact2	; if not, branch
00004ECA 4440                       		neg.w	d0
00004ECC                            
00004ECC                            	@notact2:
00004ECC D169 000C                  		add.w	d0,obY(a1)	; adjust Sonic's y-axis for curve of tunnel
00004ED0                            
00004ED0                            @movesonic:
00004ED0 5869 0008                  		addq.w	#4,obX(a1)
00004ED4 337C 0400 0010             		move.w	#$400,obVelX(a1) ; move Sonic horizontally
00004EDA 337C 0000 0012             		move.w	#0,obVelY(a1)
00004EE0 137C 0000 001C             		move.b	#id_Float2,obAnim(a1)	; use floating animation
00004EE6 08E9 0001 0022             		bset	#1,obStatus(a1)
00004EEC 0838 0000 F602             		btst	#0,(v_jpadhold2).w ; is up pressed?
00004EF2 6700                       		beq.s	@down		; if not, branch
00004EF4 5369 000C                  		subq.w	#1,obY(a1)	; move Sonic up on pole
00004EF8                            
00004EF8                            	@down:
00004EF8 0838 0001 F602             		btst	#1,(v_jpadhold2).w ; is down being pressed?
00004EFE 6700                       		beq.s	@end		; if not, branch
00004F00 5269 000C                  		addq.w	#1,obY(a1)	; move Sonic down on pole
00004F04                            
00004F04                            	@end:
00004F04 4E75                       		rts	
00004F06                            ; ===========================================================================
00004F06                            
00004F06                            @chknext:
00004F06 504A                       		addq.w	#8,a2		; use second set of values (act 1 only)
00004F08 51C9 FF62                  		dbf	d1,@chksonic	; on act 1, repeat for a second tunnel
00004F0C 4A38 F7C7                  		tst.b	(f_wtunnelmode).w ; is Sonic still in a tunnel?
00004F10 6700                       		beq.s	@quit		; if yes, branch
00004F12 137C 0000 001C             		move.b	#id_Walk,obAnim(a1)	; use walking animation
00004F18                            
00004F18                            @clrquit:
00004F18 4238 F7C7                  		clr.b	(f_wtunnelmode).w ; finish tunnel
00004F1C                            
00004F1C                            @quit:
00004F1C 4E75                       		rts	
00004F1E                            ; End of function LZWindTunnels
00004F1E                            
00004F1E                            ; ===========================================================================
00004F1E                            
00004F1E                            		;    left, top,  right, bottom boundaries
00004F1E 0A80 0300 0C10 0380        LZWind_Data:	dc.w $A80, $300, $C10,  $380 ; act 1 values (set 1)
00004F26 0F80 0100 1410 0180        		dc.w $F80, $100, $1410,	$180 ; act 1 values (set 2)
00004F2E 0460 0400 0710 0480        		dc.w $460, $400, $710,  $480 ; act 2 values
00004F36 0A20 0600 1610 06E0        		dc.w $A20, $600, $1610, $6E0 ; act 3 values
00004F3E 0C80 0600 13D0 0680        		dc.w $C80, $600, $13D0, $680 ; SBZ act 3 values
00004F46                            		even
00004F46                            
00004F46                            ; ---------------------------------------------------------------------------
00004F46                            ; Labyrinth Zone water slide subroutine
00004F46                            ; ---------------------------------------------------------------------------
00004F46                            
00004F46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004F46                            
00004F46                            
00004F46                            LZWaterSlides:
00004F46 43F8 D000                  		lea	(v_player).w,a1
00004F4A 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic jumping?
00004F50 6600                       		bne.s	loc_3F6A	; if not, branch
00004F52 3029 000C                  		move.w	obY(a1),d0
00004F56 E248                       		lsr.w	#1,d0
00004F58 0240 0380                  		andi.w	#$380,d0
00004F5C 1229 0008                  		move.b	obX(a1),d1
00004F60 0241 007F                  		andi.w	#$7F,d1
00004F64 D041                       		add.w	d1,d0
00004F66 45F8 A400                  		lea	(v_lvllayout).w,a2
00004F6A 1032 0000                  		move.b	(a2,d0.w),d0
00004F6E 45FA 0000                  		lea	Slide_Chunks_End(pc),a2
00004F72 7200                       		moveq	#Slide_Chunks_End-Slide_Chunks-1,d1
00004F74                            
00004F74                            loc_3F62:
00004F74 B022                       		cmp.b	-(a2),d0
00004F76 57C9 FFFC                  		dbeq	d1,loc_3F62
00004F7A 6700                       		beq.s	LZSlide_Move
00004F7C                            
00004F7C                            loc_3F6A:
00004F7C 4A38 F7CA                  		tst.b	(f_jumponly).w
00004F80 6700                       		beq.s	locret_3F7A
00004F82 337C 0005 003E             		move.w	#5,$3E(a1)
00004F88 4238 F7CA                  		clr.b	(f_jumponly).w
00004F8C                            
00004F8C                            locret_3F7A:
00004F8C 4E75                       		rts	
00004F8E                            ; ===========================================================================
00004F8E                            
00004F8E                            LZSlide_Move:
00004F8E 0C41 0003                  		cmpi.w	#3,d1
00004F92 6400                       		bcc.s	loc_3F84
00004F94 4E71                       		nop	
00004F96                            
00004F96                            loc_3F84:
00004F96 08A9 0000 0022             		bclr	#0,obStatus(a1)
00004F9C 103B 1000                  		move.b	Slide_Speeds(pc,d1.w),d0
00004FA0 1340 0020                  		move.b	d0,obInertia(a1)
00004FA4 6A00                       		bpl.s	loc_3F9A
00004FA6 08E9 0000 0022             		bset	#0,obStatus(a1)
00004FAC                            
00004FAC                            loc_3F9A:
00004FAC 4229 0021                  		clr.b	obInertia+1(a1)
00004FB0 137C 0000 001C             		move.b	#id_WaterSlide,obAnim(a1) ; use Sonic's "sliding" animation
00004FB6 11FC 0001 F7CA             		move.b	#1,(f_jumponly).w ; lock controls (except jumping)
00004FBC 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00004FC0 0200 001F                  		andi.b	#$1F,d0
00004FC4 6600                       		bne.s	locret_3FBE
00004FD0                            
00004FD0                            locret_3FBE:
00004FD0 4E75                       		rts	
00004FD2                            ; End of function LZWaterSlides
00004FD2                            
00004FD2                            ; ===========================================================================
00004FD2                            ; byte_3FC0:
00004FD2                            Slide_Speeds:
00004FD2 0AF5 0AF6 F5F4 0B          		dc.b $A, $F5, $A, $F6, $F5, $F4, $B
00004FDA 00                         		even
00004FDA                            
00004FDA                            Slide_Chunks:
00004FDA 54                         		dc.b $54 ;2, 7, 3, $4C, $4B, 8, 4
00004FDB                            ; byte_3FCF
00004FDB                            Slide_Chunks_End
00004FDC 00                         		even
00004FDC 00                         		even
00004FDC                            		include	"_inc\MoveSonicInDemo.asm"
00004FDC                            ; ---------------------------------------------------------------------------
00004FDC                            ; Subroutine to	move Sonic in demo mode
00004FDC                            ; ---------------------------------------------------------------------------
00004FDC                            
00004FDC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004FDC                            
00004FDC                            
00004FDC                            MoveSonicInDemo:
00004FDC 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
00004FE0 6600                       		bne.s	MDemo_On	; if yes, branch
00004FE2 4E75                       		rts	
00004FE4                            ; ===========================================================================
00004FE4                            
00004FE4                            ; This is an unused subroutine for recording a demo
00004FE4                            
00004FE4                            DemoRecorder:
00004FE4 43F9 0008 0000             		lea	($80000).l,a1
00004FEA 3038 F790                  		move.w	(v_btnpushtime1).w,d0
00004FEE D2C0                       		adda.w	d0,a1
00004FF0 1038 F604                  		move.b	(v_jpadhold1).w,d0
00004FF4 B011                       		cmp.b	(a1),d0
00004FF6 6600                       		bne.s	@next
00004FF8 5229 0001                  		addq.b	#1,1(a1)
00004FFC 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
00005002 6700                       		beq.s	@next
00005004 4E75                       		rts	
00005006                            
00005006                            	@next:
00005006 1340 0002                  		move.b	d0,2(a1)
0000500A 137C 0000 0003             		move.b	#0,3(a1)
00005010 5478 F790                  		addq.w	#2,(v_btnpushtime1).w
00005014 0278 03FF F790             		andi.w	#$3FF,(v_btnpushtime1).w
0000501A 4E75                       		rts	
0000501C                            ; ===========================================================================
0000501C                            
0000501C                            MDemo_On:
0000501C 4A38 F604                  		tst.b	(v_jpadhold1).w	; is start button pressed?
00005020 6A00                       		bpl.s	@dontquit	; if not, branch
00005022 4A78 FFF0                  		tst.w	(f_demo).w	; is this an ending sequence demo?
00005026 6B00                       		bmi.s	@dontquit	; if yes, branch
00005028 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; go to title screen
0000502E                            
0000502E                            	@dontquit:
0000502E 43F9 0000 0000             		lea	(DemoDataPtr).l,a1
00005034 7000                       		moveq	#0,d0
00005036 1038 FE10                  		move.b	(v_zone).w,d0
0000503A 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is this a special stage?
00005040 6600                       		bne.s	@notspecial	; if not, branch
00005042 7006                       		moveq	#6,d0		; use demo #6
00005044                            
00005044                            	@notspecial:
00005044 E548                       		lsl.w	#2,d0
00005046 2271 0000                  		movea.l	(a1,d0.w),a1	; fetch address for demo data
0000504A 4A78 FFF0                  		tst.w	(f_demo).w	; is this an ending sequence demo?
0000504E 6A00                       		bpl.s	@notcredits	; if not, branch
00005050 43F9 0000 0000             		lea	(DemoEndDataPtr).l,a1
00005056 3038 FFF4                  		move.w	(v_creditsnum).w,d0
0000505A 5340                       		subq.w	#1,d0
0000505C E548                       		lsl.w	#2,d0
0000505E 2271 0000                  		movea.l	(a1,d0.w),a1	; fetch address for credits demo
00005062                            
00005062                            	@notcredits:
00005062 3038 F790                  		move.w	(v_btnpushtime1).w,d0
00005066 D2C0                       		adda.w	d0,a1
00005068 1011                       		move.b	(a1),d0
0000506A 41F8 F604                  		lea	(v_jpadhold1).w,a0
0000506E 1200                       		move.b	d0,d1
00005070 7400                       			moveq	#0,d2
00005072 B500                       		eor.b	d2,d0
00005074 10C1                       		move.b	d1,(a0)+
00005076 C001                       		and.b	d1,d0
00005078 10C0                       		move.b	d0,(a0)+
0000507A 5338 F792                  		subq.b	#1,(v_btnpushtime2).w
0000507E 6400                       		bcc.s	@end
00005080 11E9 0003 F792             		move.b	3(a1),(v_btnpushtime2).w
00005086 5478 F790                  		addq.w	#2,(v_btnpushtime1).w
0000508A                            
0000508A                            	@end:
0000508A 4E75                       		rts	
0000508C                            ; End of function MoveSonicInDemo
0000508C                            
0000508C                            ; ===========================================================================
0000508C                            ; ---------------------------------------------------------------------------
0000508C                            ; Demo sequence	pointers
0000508C                            ; ---------------------------------------------------------------------------
0000508C 0000 0000                  DemoDataPtr:	dc.l Demo_GHZ		; demos run after the title screen
00005090 0000 0000                  		dc.l Demo_GHZ
00005094 0000 0000                  		dc.l Demo_MZ
00005098 0000 0000                  		dc.l Demo_MZ
0000509C 0000 0000                  		dc.l Demo_SYZ
000050A0 0000 0000                  		dc.l Demo_SYZ
000050A4 0000 0000                  		dc.l Demo_SS
000050A8 0000 0000                  		dc.l Demo_SS
000050AC                            
000050AC 0000 0000                  DemoEndDataPtr:	dc.l Demo_EndGHZ1	; demos run during the credits
000050B0 0000 0000                  		dc.l Demo_EndMZ
000050B4 0000 0000                  		dc.l Demo_EndSYZ
000050B8 0000 0000                  		dc.l Demo_EndLZ
000050BC 0000 0000                  		dc.l Demo_EndSLZ
000050C0 0000 0000                  		dc.l Demo_EndSBZ1
000050C4 0000 0000                  		dc.l Demo_EndSBZ2
000050C8 0000 0000                  		dc.l Demo_EndGHZ2
000050CC                            
000050CC 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
000050DC 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
000050EC 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
000050FC                            		even
000050FC                            		even
000050FC                            
000050FC                            ; ---------------------------------------------------------------------------
000050FC                            ; Collision index pointer loading subroutine
000050FC                            ; ---------------------------------------------------------------------------
000050FC                            
000050FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000050FC                            
000050FC                            
000050FC                            ColIndexLoad:
000050FC 7000                       		moveq	#0,d0
000050FE 1038 FE10                  		move.b	(v_zone).w,d0
00005102 E548                       		lsl.w	#2,d0
00005104 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),(v_collindex).w
0000510A 4E75                       		rts	
0000510C                            ; End of function ColIndexLoad
0000510C                            
0000510C                            ; ===========================================================================
0000510C                            ; ---------------------------------------------------------------------------
0000510C                            ; Collision index pointers
0000510C                            ; ---------------------------------------------------------------------------
0000510C 0000 0000                  ColPointers:	dc.l Col_GHZ
00005110 0000 0000                  		dc.l Col_LZ
00005114 0000 0000                  		dc.l Col_MZ
00005118 0000 0000                  		dc.l Col_SLZ
0000511C 0000 0000                  		dc.l Col_SYZ
00005120 0000 0000                  		dc.l Col_SBZ
00005124                            ;		dc.l Col_GHZ ; Pointer for Ending is missing by default.
00005124                            
00005124                            		include	"_inc\Oscillatory Routines.asm"
00005124                            ; ---------------------------------------------------------------------------
00005124                            ; Oscillating number subroutines
00005124                            ; ---------------------------------------------------------------------------
00005124                            
00005124                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005124                            
00005124                            ; Initialise the values
00005124                            
00005124                            OscillateNumInit:
00005124 43F8 FE5E                  		lea	(v_oscillate).w,a1
00005128 45F9 0000 0000             		lea	(@baselines).l,a2
0000512E 7220                       		moveq	#$20,d1
00005130                            
00005130                            	@loop:
00005130 32DA                       		move.w	(a2)+,(a1)+	; copy baseline values to RAM
00005132 51C9 FFFC                  		dbf	d1,@loop
00005136 4E75                       		rts	
00005138                            
00005138                            
00005138                            ; ===========================================================================
00005138 007C                       @baselines:	dc.w %0000000001111100	; oscillation direction bitfield
0000513A 0080 0000                  		dc.w $80, 0
0000513E 0080 0000                  		dc.w $80, 0
00005142 0080 0000                  		dc.w $80, 0
00005146 0080 0000                  		dc.w $80, 0
0000514A 0080 0000                  		dc.w $80, 0
0000514E 0080 0000                  		dc.w $80, 0
00005152 0080 0000                  		dc.w $80, 0
00005156 0080 0000                  		dc.w $80, 0
0000515A 0080 0000                  		dc.w $80, 0
0000515E 50F0 011E                  		dc.w $50F0, $11E
00005162 2080 00B4                  		dc.w $2080, $B4
00005166 3080 010E                  		dc.w $3080, $10E
0000516A 5080 01C2                  		dc.w $5080, $1C2
0000516E 7080 0276                  		dc.w $7080, $276
00005172 0080 0000                  		dc.w $80, 0
00005176 0080 0000                  		dc.w $80, 0
0000517A                            		even
0000517A                            
0000517A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000517A                            
0000517A                            ; Oscillate values
0000517A                            
0000517A                            OscillateNumDo:
0000517A 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; has Sonic just died?
00005180 6400                       		bcc.s	@end		; if yes, branch
00005182 43F8 FE5E                  		lea	(v_oscillate).w,a1
00005186 45F9 0000 0000             		lea	(@settings).l,a2
0000518C 3619                       		move.w	(a1)+,d3	; get oscillation direction bitfield
0000518E 720F                       		moveq	#$F,d1
00005190                            
00005190                            @loop:
00005190 341A                       		move.w	(a2)+,d2	; get frequency
00005192 381A                       		move.w	(a2)+,d4	; get amplitude
00005194 0303                       		btst	d1,d3		; check oscillation direction
00005196 6600                       		bne.s	@down		; branch if 1
00005198                            
00005198                            	@up:
00005198 3029 0002                  		move.w	2(a1),d0	; get current rate
0000519C D042                       		add.w	d2,d0		; add frequency
0000519E 3340 0002                  		move.w	d0,2(a1)
000051A2 D151                       		add.w	d0,0(a1)	; add rate to value
000051A4 B811                       		cmp.b	0(a1),d4
000051A6 6200                       		bhi.s	@next
000051A8 03C3                       		bset	d1,d3
000051AA 6000                       		bra.s	@next
000051AC                            
000051AC                            	@down:
000051AC 3029 0002                  		move.w	2(a1),d0
000051B0 9042                       		sub.w	d2,d0
000051B2 3340 0002                  		move.w	d0,2(a1)
000051B6 D151                       		add.w	d0,0(a1)
000051B8 B811                       		cmp.b	0(a1),d4
000051BA 6300                       		bls.s	@next
000051BC 0383                       		bclr	d1,d3
000051BE                            
000051BE                            	@next:
000051BE 5849                       		addq.w	#4,a1
000051C0 51C9 FFCE                  		dbf	d1,@loop
000051C4 31C3 FE5E                  		move.w	d3,(v_oscillate).w
000051C8                            
000051C8                            @end:
000051C8 4E75                       		rts	
000051CA                            ; End of function OscillateNumDo
000051CA                            
000051CA                            ; ===========================================================================
000051CA 0002 0010                  @settings:	dc.w 2,	$10	; frequency, amplitude
000051CE 0002 0018                  		dc.w 2,	$18
000051D2 0002 0020                  		dc.w 2,	$20
000051D6 0002 0030                  		dc.w 2,	$30
000051DA 0004 0020                  		dc.w 4,	$20
000051DE 0008 0008                  		dc.w 8,	8
000051E2 0008 0040                  		dc.w 8,	$40
000051E6 0004 0040                  		dc.w 4,	$40
000051EA 0002 0050                  		dc.w 2,	$50
000051EE 0002 0050                  		dc.w 2,	$50
000051F2 0002 0020                  		dc.w 2,	$20
000051F6 0003 0030                  		dc.w 3,	$30
000051FA 0005 0050                  		dc.w 5,	$50
000051FE 0007 0070                  		dc.w 7,	$70
00005202 0002 0010                  		dc.w 2,	$10
00005206 0002 0010                  		dc.w 2,	$10
0000520A                            		even
0000520A                            		even
0000520A                            
0000520A                            ; ---------------------------------------------------------------------------
0000520A                            ; Subroutine to	change synchronised animation variables (rings, giant rings)
0000520A                            ; ---------------------------------------------------------------------------
0000520A                            
0000520A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000520A                            
0000520A                            
0000520A                            SynchroAnimate:
0000520A                            
0000520A                            ; Used for GHZ spiked log
0000520A                            Sync1:
0000520A 5338 FEC0                  		subq.b	#1,(v_ani0_time).w ; has timer reached 0?
0000520E 6A00                       		bpl.s	Sync2		; if not, branch
00005210 11FC 000B FEC0             		move.b	#$B,(v_ani0_time).w ; reset timer
00005216 5338 FEC1                  		subq.b	#1,(v_ani0_frame).w ; next frame
0000521A 0238 0007 FEC1             		andi.b	#7,(v_ani0_frame).w ; max frame is 7
00005220                            
00005220                            ; Used for rings and giant rings
00005220                            Sync2:
00005220 5338 FEC2                  		subq.b	#1,(v_ani1_time).w
00005224 6A00                       		bpl.s	Sync3
00005226 11FC 0007 FEC2             		move.b	#7,(v_ani1_time).w
0000522C 5238 FEC3                  		addq.b	#1,(v_ani1_frame).w
00005230 0238 0003 FEC3             		andi.b	#3,(v_ani1_frame).w
00005236                            
00005236                            ; Used for nothing
00005236                            Sync3:
00005236 5338 FEC4                  		subq.b	#1,(v_ani2_time).w
0000523A 6A00                       		bpl.s	Sync4
0000523C 11FC 0007 FEC4             		move.b	#7,(v_ani2_time).w
00005242 5238 FEC5                  		addq.b	#1,(v_ani2_frame).w
00005246 0C38 0006 FEC5             		cmpi.b	#6,(v_ani2_frame).w
0000524C 6500                       		blo.s	Sync4
0000524E 11FC 0000 FEC5             		move.b	#0,(v_ani2_frame).w
00005254                            
00005254                            ; Used for bouncing rings
00005254                            Sync4:
00005254 4A38 FEC6                  		tst.b	(v_ani3_time).w
00005258 6700                       		beq.s	SyncEnd
0000525A 7000                       		moveq	#0,d0
0000525C 1038 FEC6                  		move.b	(v_ani3_time).w,d0
00005260 D078 FEC8                  		add.w	(v_ani3_buf).w,d0
00005264 31C0 FEC8                  		move.w	d0,(v_ani3_buf).w
00005268 EF58                       		rol.w	#7,d0
0000526A 0240 0003                  		andi.w	#3,d0
0000526E 11C0 FEC7                  		move.b	d0,(v_ani3_frame).w
00005272 5338 FEC6                  		subq.b	#1,(v_ani3_time).w
00005276                            
00005276                            SyncEnd:
00005276 4E75                       		rts	
00005278                            ; End of function SynchroAnimate
00005278                            
00005278                            ; ---------------------------------------------------------------------------
00005278                            ; End-of-act signpost pattern loading subroutine
00005278                            ; ---------------------------------------------------------------------------
00005278                            
00005278                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005278                            
00005278                            
00005278                            SignpostArtLoad:
00005278 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
0000527C 6600 0000                  		bne.w	@exit		; if yes, branch
00005280 0C38 0002 FE11             		cmpi.b	#2,(v_act).w	; is act number 02 (act 3)?
00005286 6700                       		beq.s	@exit		; if yes, branch
00005288                            
00005288 3038 F700                  		move.w	(v_screenposx).w,d0
0000528C 3238 F72A                  		move.w	(v_limitright2).w,d1
00005290 0441 0100                  		subi.w	#$100,d1
00005294 B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
00005296 6D00                       		blt.s	@exit		; if not, branch
00005298 4A38 FE1E                  		tst.b	(f_timecount).w
0000529C 6700                       		beq.s	@exit
0000529E B278 F728                  		cmp.w	(v_limitleft2).w,d1
000052A2 6700                       		beq.s	@exit
000052A4 31C1 F728                  		move.w	d1,(v_limitleft2).w ; move left boundary to current screen position
000052A8 7000                       		moveq	#plcid_Signpost,d0
000052AA 6000 C470                  		bra.w	NewPLC		; load signpost	patterns
000052AE                            
000052AE                            	@exit:
000052AE 4E75                       		rts	
000052B0                            ; End of function SignpostArtLoad
000052B0                            
000052B0                            ; ===========================================================================
000052B0                            Demo_GHZ:	incbin	"demodata\Intro - GHZ.bin"
00005330                            Demo_MZ:	incbin	"demodata\Intro - MZ.bin"
00005460                            Demo_SYZ:	incbin	"demodata\Intro - SYZ.bin"
000054E0                            Demo_SS:	incbin	"demodata\Intro - Special Stage.bin"
000055E0                            ; ===========================================================================
000055E0                            
000055E0                            ; ---------------------------------------------------------------------------
000055E0                            ; Special Stage
000055E0                            ; ---------------------------------------------------------------------------
000055E0                            
000055E0                            GM_Special:
000055E8 6100 CCC2                  		bsr.w	PaletteWhiteOut
000055EC 46FC 2700                  		disable_ints
000055F0 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
000055F6 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
000055FA 3CBC 8004                  		move.w	#$8004,(a6)	; 8-colour mode
000055FE 31FC 8AAF F624             		move.w	#$8A00+175,(v_hbla_hreg).w
00005604 3CBC 9011                  		move.w	#$9011,(a6)	; 128-cell hscroll size
00005608 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
0000560C 0200 00BF                  		andi.b	#$BF,d0
00005610 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00005616 6100 BB68                  		bsr.w	ClearScreen
0000561A 46FC 2300                  		enable_ints
0000561E 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$6FFF,$5000
00005640                            
00005640                            	SS_WaitForDMA:
00005640 3215                       		move.w	(a5),d1		; read control port ($C00004)
00005642 0801 0001                  		btst	#1,d1		; is DMA running?
00005646 66F8                       		bne.s	SS_WaitForDMA	; if yes, branch
00005648 3ABC 8F02                  		move.w	#$8F02,(a5)	; set VDP increment to 2 bytes
0000564C 6100 0000                  		bsr.w	SS_BGLoad
00005650 7000                       		moveq	#plcid_SpecialStage,d0
00005652 6100 C202                  		bsr.w	QuickPLC	; load special stage patterns
00005656                            
00005656 43F8 D000                  		lea	(v_objspace).w,a1
0000565A 7000                       		moveq	#0,d0
0000565C 323C 07FF                  		move.w	#$7FF,d1
00005660                            	SS_ClrObjRam:
00005660 22C0                       		move.l	d0,(a1)+
00005662 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
00005666                            
00005666 43F8 F700                  		lea	(v_screenposx).w,a1
0000566A 7000                       		moveq	#0,d0
0000566C 323C 003F                  		move.w	#$3F,d1
00005670                            	SS_ClrRam1:
00005670 22C0                       		move.l	d0,(a1)+
00005672 51C9 FFFC                  		dbf	d1,SS_ClrRam1	; clear	variables
00005676                            
00005676 43F8 FE60                  		lea	(v_oscillate+2).w,a1
0000567A 7000                       		moveq	#0,d0
0000567C 323C 0027                  		move.w	#$27,d1
00005680                            	SS_ClrRam2:
00005680 22C0                       		move.l	d0,(a1)+
00005682 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
00005686                            
00005686 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
0000568A 7000                       		moveq	#0,d0
0000568C 323C 007F                  		move.w	#$7F,d1
00005690                            	SS_ClrNemRam:
00005690 22C0                       		move.l	d0,(a1)+
00005692 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
00005696                            
00005696 4238 F64E                  		clr.b	(f_wtr_state).w
0000569A 4278 FE02                  		clr.w	(f_restart).w
0000569E 700A                       		moveq	#palid_Special,d0
000056A0 6100 CD8A                  		bsr.w	PalLoad1	; load special stage palette
000056A4 4EB9 0000 0000             		jsr	(SS_Load).l		; load SS layout data
000056AA 21FC 0000 0000 F700        		move.l	#0,(v_screenposx).w
000056B2 21FC 0000 0000 F704        		move.l	#0,(v_screenposy).w
000056BA 11FC 0000 D000             		move.b	#id_SonicSpecial,(v_player).w ; load special stage Sonic object
000056C0 6100 0000                  		bsr.w	PalCycle_SS
000056C4 4278 F780                  		clr.w	(v_ssangle).w	; set stage angle to "upright"
000056C8 31FC 0040 F782             		move.w	#$40,(v_ssrotate).w ; set stage rotation speed
000056D6 31FC 0000 F790             		move.w	#0,(v_btnpushtime1).w
000056DC 43F9 0000 508C             		lea	(DemoDataPtr).l,a1
000056E2 7006                       		moveq	#6,d0
000056E4 E548                       		lsl.w	#2,d0
000056E6 2271 0000                  		movea.l	(a1,d0.w),a1
000056EA 11E9 0001 F792             		move.b	1(a1),(v_btnpushtime2).w
000056F0 5338 F792                  		subq.b	#1,(v_btnpushtime2).w
000056F4 4278 FE20                  		clr.w	(v_rings).w
000056F8 4238 FE1B                  		clr.b	(v_lifecount).w
000056FC 31FC 0000 FE08             		move.w	#0,(v_debuguse).w
00005702 31FC 0708 F614             		move.w	#1800,(v_demolength).w
00005708 4A38 FFE2                  		tst.b	(f_debugcheat).w ; has debug cheat been entered?
0000570C 6700                       		beq.s	SS_NoDebug	; if not, branch
0000570E 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is A button pressed?
00005714 6700                       		beq.s	SS_NoDebug	; if not, branch
00005716 11FC 0001 FFFA             		move.b	#1,(f_debugmode).w ; enable debug mode
0000571C                            
0000571C                            	SS_NoDebug:
0000571C 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00005720 0000 0040                  		ori.b	#$40,d0
00005724 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
0000572A 6100 CAD4                  		bsr.w	PaletteWhiteIn
0000572E                            
0000572E                            ; ---------------------------------------------------------------------------
0000572E                            ; Main Special Stage loop
0000572E                            ; ---------------------------------------------------------------------------
0000572E                            
0000572E                            SS_MainLoop:
0000572E 6100 BB2C                  		bsr.w	PauseGame
00005732 11FC 000A F62A             		move.b	#$A,(v_vbla_routine).w
00005738 6100 E2C6                  		bsr.w	WaitForVBla
0000573C 6100 F89E                  		bsr.w	MoveSonicInDemo
00005740 31F8 F604 F602             		move.w	(v_jpadhold1).w,(v_jpadhold2).w
00005746 4EB9 0000 0000             		jsr	(ExecuteObjects).l
0000574C 4EB9 0000 0000             		jsr	(BuildSprites).l
00005752 4EB9 0000 0000             		jsr	(SS_ShowLayout).l
00005758 6100 0000                  		bsr.w	SS_BGAnimate
0000575C 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
00005760 6700                       		beq.s	SS_ChkEnd	; if not, branch
00005762 4A78 F614                  		tst.w	(v_demolength).w ; is there time left on the demo?
00005766 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
0000576A                            
0000576A                            	SS_ChkEnd:
0000576A 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is game mode $10 (special stage)?
00005770 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
00005774                            
00005774 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
00005778 6600 0000                  		bne.w	SS_ToLevel
0000577C 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; set screen mode to $0C (level)
00005782 0C78 0503 FE10             		cmpi.w	#(id_SBZ<<8)+3,(v_zone).w ; is level number higher than FZ?
00005788 6500                       		blo.s	SS_Finish	; if not, branch
0000578A 4278 FE10                  		clr.w	(v_zone).w	; set to GHZ1
0000578E                            
0000578E                            SS_Finish:
0000578E 31FC 003C F614             		move.w	#60,(v_demolength).w ; set delay time to 1 second
00005794 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
0000579A 4278 F794                  		clr.w	(v_palchgspeed).w
0000579E                            
0000579E                            	SS_FinLoop:
0000579E 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
000057A4 6100 E25A                  		bsr.w	WaitForVBla
000057A8 6100 F832                  		bsr.w	MoveSonicInDemo
000057AC 31F8 F604 F602             		move.w	(v_jpadhold1).w,(v_jpadhold2).w
000057B2 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000057B8 4EB9 0000 0000             		jsr	(BuildSprites).l
000057BE 4EB9 0000 0000             		jsr	(SS_ShowLayout).l
000057C4 6100 0000                  		bsr.w	SS_BGAnimate
000057C8 5378 F794                  		subq.w	#1,(v_palchgspeed).w
000057CC 6A00                       		bpl.s	loc_47D4
000057CE 31FC 0002 F794             		move.w	#2,(v_palchgspeed).w
000057D4 6100 CAF6                  		bsr.w	WhiteOut_ToWhite
000057D8                            
000057D8                            loc_47D4:
000057D8 4A78 F614                  		tst.w	(v_demolength).w
000057DC 66C0                       		bne.s	SS_FinLoop
000057DE                            
000057DE 46FC 2700                  		disable_ints
000057E2 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
000057E8 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
000057EC 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
000057F0 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
000057F4 6100 B98A                  		bsr.w	ClearScreen
00005802 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00005808 6100 BAF4                  		bsr.w	NemDec
0000580C 4EB9 0000 0000             		jsr	(Hud_Base).l
00005812 31FC C800 C8FC             		ResetDMAQueue	
00005818 46FC 2300                  		enable_ints
0000581C 7011                       		moveq	#palid_SSResult,d0
0000581E 6100 CC48                  		bsr.w	PalLoad2	; load results screen palette
00005822 7000                       		moveq	#plcid_Main,d0
00005824 6100 BEF6                  		bsr.w	NewPLC
00005828 7000                       		moveq	#plcid_SSResult,d0
0000582A 6100 BEBE                  		bsr.w	AddPLC		; load results screen patterns
0000582E 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w ; update score counter
00005834 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; update ring bonus counter
0000583A 3038 FE20                  		move.w	(v_rings).w,d0
0000583E C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00005842 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set rings bonus
00005850                            
00005850 43F8 D000                  		lea	(v_objspace).w,a1
00005854 7000                       		moveq	#0,d0
00005856 323C 07FF                  		move.w	#$7FF,d1
0000585A                            	SS_EndClrObjRam:
0000585A 22C0                       		move.l	d0,(a1)+
0000585C 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
00005860                            
00005860 11FC 0000 D5C0             		move.b	#id_SSResult,(v_objspace+$5C0).w ; load results screen object
00005866                            
00005866                            SS_NormalExit:
00005866 6100 B9F4                  		bsr.w	PauseGame
0000586A 11FC 000C F62A             		move.b	#$C,(v_vbla_routine).w
00005870 6100 E18E                  		bsr.w	WaitForVBla
00005874 4EB9 0000 0000             		jsr	(ExecuteObjects).l
0000587A 4EB9 0000 0000             		jsr	(BuildSprites).l
00005880 6100 BED4                  		bsr.w	RunPLC
00005884 4A78 FE02                  		tst.w	(f_restart).w
00005888 67DC                       		beq.s	SS_NormalExit
0000588A 4AB8 F680                  		tst.l	(v_plc_buffer).w
0000588E 66D6                       		bne.s	SS_NormalExit
00005898 6100 CA12                  		bsr.w	PaletteWhiteOut
0000589C 4E75                       		rts	
0000589E                            ; ===========================================================================
0000589E                            
0000589E                            SS_ToSegaScreen:
0000589E 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; goto Sega screen
000058A4 4E75                       		rts
000058A6                            
000058A6 0C38 0000 F600             SS_ToLevel:	cmpi.b	#id_Level,(v_gamemode).w
000058AC 67F0                       		beq.s	SS_ToSegaScreen
000058AE 4E75                       		rts
000058B0                            
000058B0                            ; ---------------------------------------------------------------------------
000058B0                            ; Special stage	background loading subroutine
000058B0                            ; ---------------------------------------------------------------------------
000058B0                            
000058B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000058B0                            
000058B0                            
000058B0                            SS_BGLoad:
000058B0 43F9 00FF 0000             		lea	($FF0000).l,a1
000058B6 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
000058BC 303C 4051                  		move.w	#$4051,d0
000058C0 6100 BFC6                  		bsr.w	EniDec
000058C4 263C 5000 0001             		move.l	#$50000001,d3
000058CA 45F9 00FF 0080             		lea	($FF0080).l,a2
000058D0 7E06                       		moveq	#6,d7
000058D2                            
000058D2                            loc_48BE:
000058D2 2003                       		move.l	d3,d0
000058D4 7C03                       		moveq	#3,d6
000058D6 7800                       		moveq	#0,d4
000058D8 0C47 0003                  		cmpi.w	#3,d7
000058DC 6400                       		bhs.s	loc_48CC
000058DE 7801                       		moveq	#1,d4
000058E0                            
000058E0                            loc_48CC:
000058E0 7A07                       		moveq	#7,d5
000058E2                            
000058E2                            loc_48CE:
000058E2 224A                       		movea.l	a2,a1
000058E4 0A04 0001                  		eori.b	#1,d4
000058E8 6600                       		bne.s	loc_48E2
000058EA 0C47 0006                  		cmpi.w	#6,d7
000058EE 6600                       		bne.s	loc_48F2
000058F0 43F9 00FF 0000             		lea	($FF0000).l,a1
000058F6                            
000058F6                            loc_48E2:
000058F6 48E7 F800                  		movem.l	d0-d4,-(sp)
000058FA 7207                       		moveq	#7,d1
000058FC 7407                       		moveq	#7,d2
000058FE 6100 B9D4                  		bsr.w	TilemapToVRAM
00005902 4CDF 001F                  		movem.l	(sp)+,d0-d4
00005906                            
00005906                            loc_48F2:
00005906 0680 0010 0000             		addi.l	#$100000,d0
0000590C 51CD FFD4                  		dbf	d5,loc_48CE
00005910 0680 0380 0000             		addi.l	#$3800000,d0
00005916 0A04 0001                  		eori.b	#1,d4
0000591A 51CE FFC4                  		dbf	d6,loc_48CC
0000591E 0683 1000 0000             		addi.l	#$10000000,d3
00005924 6A00                       		bpl.s	loc_491C
00005926 4843                       		swap	d3
00005928 0683 0000 C000             		addi.l	#$C000,d3
0000592E 4843                       		swap	d3
00005930                            
00005930                            loc_491C:
00005930 D4FC 0080                  		adda.w	#$80,a2
00005934 51CF FF9C                  		dbf	d7,loc_48BE
00005938 43F9 00FF 0000             		lea	($FF0000).l,a1
0000593E 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00005944 303C 4000                  		move.w	#$4000,d0
00005948 6100 BF3E                  		bsr.w	EniDec
0000594C 43F9 00FF 0000             		lea	($FF0000).l,a1
00005952 203C 4000 0003             		move.l	#$40000003,d0
00005958 723F                       		moveq	#$3F,d1
0000595A 741F                       		moveq	#$1F,d2
0000595C 6100 B976                  		bsr.w	TilemapToVRAM
00005960 43F9 00FF 0000             		lea	($FF0000).l,a1
00005966 203C 5000 0003             		move.l	#$50000003,d0
0000596C 723F                       		moveq	#$3F,d1
0000596E 743F                       		moveq	#$3F,d2
00005970 6100 B962                  		bsr.w	TilemapToVRAM
00005974 4E75                       		rts	
00005976                            ; End of function SS_BGLoad
00005976                            
00005976                            ; ---------------------------------------------------------------------------
00005976                            ; Palette cycling routine - special stage
00005976                            ; ---------------------------------------------------------------------------
00005976                            
00005976                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005976                            
00005976                            
00005976                            PalCycle_SS:
00005976 4A78 F63A                  		tst.w	(f_pause).w
0000597A 6600                       		bne.s	locret_49E6
0000597C 5378 F79C                  		subq.w	#1,(v_palss_time).w
00005980 6A00                       		bpl.s	locret_49E6
00005982 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00005988 3038 F79A                  		move.w	(v_palss_num).w,d0
0000598C 5278 F79A                  		addq.w	#1,(v_palss_num).w
00005990 0240 001F                  		andi.w	#$1F,d0
00005994 E548                       		lsl.w	#2,d0
00005996 41F9 0000 0000             		lea	(byte_4A3C).l,a0
0000599C D0C0                       		adda.w	d0,a0
0000599E 1018                       		move.b	(a0)+,d0
000059A0 6A00                       		bpl.s	loc_4992
000059A2 303C 01FF                  		move.w	#$1FF,d0
000059A6                            
000059A6                            loc_4992:
000059A6 31C0 F79C                  		move.w	d0,(v_palss_time).w
000059AA 7000                       		moveq	#0,d0
000059AC 1018                       		move.b	(a0)+,d0
000059AE 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
000059B2 43F9 0000 0000             		lea	(byte_4ABC).l,a1
000059B8 43F1 0000                  		lea	(a1,d0.w),a1
000059BC 303C 8200                  		move.w	#-$7E00,d0
000059C0 1019                       		move.b	(a1)+,d0
000059C2 3C80                       		move.w	d0,(a6)
000059C4 11D1 F616                  		move.b	(a1),(v_scrposy_dup).w
000059C8 303C 8400                  		move.w	#-$7C00,d0
000059CC 1018                       		move.b	(a0)+,d0
000059CE 3C80                       		move.w	d0,(a6)
000059D0 23FC 4000 0010 00C0 0004   		move.l	#$40000010,(vdp_control_port).l
000059DA 23F8 F616 00C0 0000        		move.l	(v_scrposy_dup).w,(vdp_data_port).l
000059E2 7000                       		moveq	#0,d0
000059E4 1018                       		move.b	(a0)+,d0
000059E6 6B00                       		bmi.s	loc_49E8
000059E8 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
000059EE D2C0                       		adda.w	d0,a1
000059F0 45F8 FB4E                  		lea	(v_pal_dry+$4E).w,a2
000059F4 24D9                       		move.l	(a1)+,(a2)+
000059F6 24D9                       		move.l	(a1)+,(a2)+
000059F8 24D9                       		move.l	(a1)+,(a2)+
000059FA                            
000059FA                            locret_49E6:
000059FA 4E75                       		rts	
000059FC                            ; ===========================================================================
000059FC                            
000059FC                            loc_49E8:
000059FC 3238 F79E                  		move.w	($FFFFF79E).w,d1
00005A00 0C40 008A                  		cmpi.w	#$8A,d0
00005A04 6500                       		blo.s	loc_49F4
00005A06 5241                       		addq.w	#1,d1
00005A08                            
00005A08                            loc_49F4:
00005A08 C2FC 002A                  		mulu.w	#$2A,d1
00005A0C 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
00005A12 D2C1                       		adda.w	d1,a1
00005A14 0240 007F                  		andi.w	#$7F,d0
00005A18 0880 0000                  		bclr	#0,d0
00005A1C 6700                       		beq.s	loc_4A18
00005A1E 45F8 FB6E                  		lea	(v_pal_dry+$6E).w,a2
00005A22 24D1                       		move.l	(a1),(a2)+
00005A24 24E9 0004                  		move.l	4(a1),(a2)+
00005A28 24E9 0008                  		move.l	8(a1),(a2)+
00005A2C                            
00005A2C                            loc_4A18:
00005A2C D2FC 000C                  		adda.w	#$C,a1
00005A30 45F8 FB5A                  		lea	(v_pal_dry+$5A).w,a2
00005A34 0C40 000A                  		cmpi.w	#$A,d0
00005A38 6500                       		blo.s	loc_4A2E
00005A3A 0440 000A                  		subi.w	#$A,d0
00005A3E 45F8 FB7A                  		lea	(v_pal_dry+$7A).w,a2
00005A42                            
00005A42                            loc_4A2E:
00005A42 3200                       		move.w	d0,d1
00005A44 D040                       		add.w	d0,d0
00005A46 D041                       		add.w	d1,d0
00005A48 D2C0                       		adda.w	d0,a1
00005A4A 24D9                       		move.l	(a1)+,(a2)+
00005A4C 34D9                       		move.w	(a1)+,(a2)+
00005A4E 4E75                       		rts	
00005A50                            ; End of function PalCycle_SS
00005A50                            
00005A50                            ; ===========================================================================
00005A50 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00005A60                            
00005A60 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00005A70 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00005A80 FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00005A90 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00005AA0 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00005AB0 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00005AC0 FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00005AD0                            		even
00005AD0 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00005ADE                            		even
00005ADE                            
00005ADE                            Pal_SSCyc1:	incbin	"palette\Cycle - Special Stage 1.bin"
00005B26                            		even
00005B26                            Pal_SSCyc2:	incbin	"palette\Cycle - Special Stage 2.bin"
00005BF8                            		even
00005BF8                            
00005BF8                            ; ---------------------------------------------------------------------------
00005BF8                            ; Subroutine to	make the special stage background animated
00005BF8                            ; ---------------------------------------------------------------------------
00005BF8                            
00005BF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005BF8                            
00005BF8                            
00005BF8                            SS_BGAnimate:
00005BF8 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00005BFC 6600                       		bne.s	loc_4BF6
00005BFE 31FC 0000 F70C             		move.w	#0,(v_bgscreenposy).w
00005C04 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00005C0A                            
00005C0A                            loc_4BF6:
00005C0A 0C40 0008                  		cmpi.w	#8,d0
00005C0E 6400                       		bhs.s	loc_4C4E
00005C10 0C40 0006                  		cmpi.w	#6,d0
00005C14 6600                       		bne.s	loc_4C10
00005C16 5278 F718                  		addq.w	#1,(v_bg3screenposx).w
00005C1A 5278 F70C                  		addq.w	#1,(v_bgscreenposy).w
00005C1E 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00005C24                            
00005C24                            loc_4C10:
00005C24 7000                       		moveq	#0,d0
00005C26 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00005C2A 4440                       		neg.w	d0
00005C2C 4840                       		swap	d0
00005C2E 43F9 0000 0000             		lea	(byte_4CCC).l,a1
00005C34 47F8 AA00                  		lea	(v_ngfx_buffer).w,a3
00005C38 7609                       		moveq	#9,d3
00005C3A                            
00005C3A                            loc_4C26:
00005C3A 302B 0002                  		move.w	2(a3),d0
00005C3E 6100 DDF2                  		bsr.w	CalcSine
00005C42 7400                       		moveq	#0,d2
00005C44 1419                       		move.b	(a1)+,d2
00005C46 C1C2                       		muls.w	d2,d0
00005C48 E080                       		asr.l	#8,d0
00005C4A 36C0                       		move.w	d0,(a3)+
00005C4C 1419                       		move.b	(a1)+,d2
00005C4E 4882                       		ext.w	d2
00005C50 D55B                       		add.w	d2,(a3)+
00005C52 51CB FFE6                  		dbf	d3,loc_4C26
00005C56 47F8 AA00                  		lea	(v_ngfx_buffer).w,a3
00005C5A 45F9 0000 0000             		lea	(byte_4CB8).l,a2
00005C60 6000                       		bra.s	loc_4C7E
00005C62                            ; ===========================================================================
00005C62                            
00005C62                            loc_4C4E:
00005C62 0C40 000C                  		cmpi.w	#$C,d0
00005C66 6600                       		bne.s	loc_4C74
00005C68 5378 F718                  		subq.w	#1,(v_bg3screenposx).w
00005C6C 47F8 AB00                  		lea	($FFFFAB00).w,a3
00005C70 243C 0001 8000             		move.l	#$18000,d2
00005C76 7206                       		moveq	#6,d1
00005C78                            
00005C78                            loc_4C64:
00005C78 2013                       		move.l	(a3),d0
00005C7A 9082                       		sub.l	d2,d0
00005C7C 26C0                       		move.l	d0,(a3)+
00005C7E 0482 0000 2000             		subi.l	#$2000,d2
00005C84 51C9 FFF2                  		dbf	d1,loc_4C64
00005C88                            
00005C88                            loc_4C74:
00005C88 47F8 AB00                  		lea	($FFFFAB00).w,a3
00005C8C 45F9 0000 0000             		lea	(byte_4CC4).l,a2
00005C92                            
00005C92                            loc_4C7E:
00005C92 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00005C96 3038 F718                  		move.w	(v_bg3screenposx).w,d0
00005C9A 4440                       		neg.w	d0
00005C9C 4840                       		swap	d0
00005C9E 7600                       		moveq	#0,d3
00005CA0 161A                       		move.b	(a2)+,d3
00005CA2 3438 F70C                  		move.w	(v_bgscreenposy).w,d2
00005CA6 4442                       		neg.w	d2
00005CA8 0242 00FF                  		andi.w	#$FF,d2
00005CAC E54A                       		lsl.w	#2,d2
00005CAE                            
00005CAE                            loc_4C9A:
00005CAE 301B                       		move.w	(a3)+,d0
00005CB0 544B                       		addq.w	#2,a3
00005CB2 7200                       		moveq	#0,d1
00005CB4 121A                       		move.b	(a2)+,d1
00005CB6 5341                       		subq.w	#1,d1
00005CB8                            
00005CB8                            loc_4CA4:
00005CB8 2380 2000                  		move.l	d0,(a1,d2.w)
00005CBC 5842                       		addq.w	#4,d2
00005CBE 0242 03FC                  		andi.w	#$3FC,d2
00005CC2 51C9 FFF4                  		dbf	d1,loc_4CA4
00005CC6 51CB FFE6                  		dbf	d3,loc_4C9A
00005CCA 4E75                       		rts	
00005CCC                            ; End of function SS_BGAnimate
00005CCC                            
00005CCC                            ; ===========================================================================
00005CCC 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00005CD8                            		even
00005CD8 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00005CE0                            		even
00005CE0 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00005CF4                            		even
00005CF4                            
00005CF4                            ; ===========================================================================
00005CF4                            
00005CF4                            ; ---------------------------------------------------------------------------
00005CF4                            ; Continue screen
00005CF4                            ; ---------------------------------------------------------------------------
00005CF4                            
00005CF4                            GM_Continue:
00005CF4 6100 C48C                  		bsr.w	PaletteFadeOut
00005CF8 46FC 2700                  		disable_ints
00005CFC 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00005D00 0200 00BF                  		andi.b	#$BF,d0
00005D04 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00005D0A 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00005D10 3CBC 8004                  		move.w	#$8004,(a6)	; 8 colour mode
00005D14 3CBC 8700                  		move.w	#$8700,(a6)	; background colour
00005D18 6100 B466                  		bsr.w	ClearScreen
00005D1C                            
00005D1C 43F8 D000                  		lea	(v_objspace).w,a1
00005D20 7000                       		moveq	#0,d0
00005D22 323C 07FF                  		move.w	#$7FF,d1
00005D26                            	Cont_ClrObjRam:
00005D26 22C0                       		move.l	d0,(a1)+
00005D28 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
00005D2C                            
00005D36 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00005D3C 6100 B5C0                  		bsr.w	NemDec
00005D4A 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00005D50 6100 B5AC                  		bsr.w	NemDec
00005D5E 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
00005D64 6100 B598                  		bsr.w	NemDec
00005D68 720A                       		moveq	#10,d1
00005D6A 4EB9 0000 0000             		jsr	(ContScrCounter).l	; run countdown	(start from 10)
00005D70 7012                       		moveq	#palid_Continue,d0
00005D72 6100 C6B8                  		bsr.w	PalLoad1	; load continue	screen palette
00005D7E 31FC 0293 F614             		move.w	#659,(v_demolength).w ; set time delay to 11 seconds
00005D84 42B8 F700                  		clr.l	(v_screenposx).w
00005D88 21FC 0100 0000 F704        		move.l	#$1000000,(v_screenposy).w
00005D90 11FC 0000 D000             		move.b	#id_ContSonic,(v_player).w ; load Sonic object
00005D96 11FC 0000 D040             		move.b	#id_ContScrItem,(v_objspace+$40).w ; load continue screen objects
00005D9C 11FC 0000 D080             		move.b	#id_ContScrItem,(v_objspace+$80).w
00005DA2 11FC 0003 D098             		move.b	#3,(v_objspace+$80+obPriority).w
00005DA8 11FC 0004 D09A             		move.b	#4,(v_objspace+$80+obFrame).w
00005DAE 11FC 0000 D0C0             		move.b	#id_ContScrItem,(v_objspace+$C0).w
00005DB4 11FC 0004 D0E4             		move.b	#4,(v_objspace+$C0+obRoutine).w
00005DBA 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00005DC0 4EB9 0000 0000             		jsr	(BuildSprites).l
00005DC6 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00005DCA 0000 0040                  		ori.b	#$40,d0
00005DCE 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00005DD4 6100 C306                  		bsr.w	PaletteFadeIn
00005DD8                            
00005DD8                            ; ---------------------------------------------------------------------------
00005DD8                            ; Continue screen main loop
00005DD8                            ; ---------------------------------------------------------------------------
00005DD8                            
00005DD8                            Cont_MainLoop:
00005DD8 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
00005DDE 6100 DC20                  		bsr.w	WaitForVBla
00005DE2 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
00005DE8 6400                       		bhs.s	loc_4DF2
00005DEA 46FC 2700                  		disable_ints
00005DEE 3238 F614                  		move.w	(v_demolength).w,d1
00005DF2 82FC 003C                  		divu.w	#$3C,d1
00005DF6 0281 0000 000F             		andi.l	#$F,d1
00005DFC 4EB9 0000 0000             		jsr	(ContScrCounter).l
00005E02 46FC 2300                  		enable_ints
00005E06                            
00005E06                            loc_4DF2:
00005E06 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00005E0C 4EB9 0000 0000             		jsr	(BuildSprites).l
00005E12 0C78 0180 D008             		cmpi.w	#$180,(v_player+obX).w ; has Sonic run off screen?
00005E18 6400                       		bhs.s	Cont_GotoLevel	; if yes, branch
00005E1A 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
00005E20 64B6                       		bhs.s	Cont_MainLoop
00005E22 4A78 F614                  		tst.w	(v_demolength).w
00005E26 6600 FFB0                  		bne.w	Cont_MainLoop
00005E2A 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00005E30 4E75                       		rts	
00005E32                            ; ===========================================================================
00005E32                            
00005E32                            Cont_GotoLevel:
00005E32 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; set screen mode to $0C (level)
00005E38 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
00005E3E 7000                       		moveq	#0,d0
00005E40 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
00005E44 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
00005E48 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
00005E4C 11C0 FE30                  		move.b	d0,(v_lastlamp).w ; clear lamppost count
00005E50 5338 FE18                  		subq.b	#1,(v_continues).w ; subtract 1 from continues
00005E54 4E75                       		rts	
00005E56                            ; ===========================================================================
00005E56                            
00005E56                            		include	"_incObj\80 Continue Screen Elements.asm"
00005E56                            ; ---------------------------------------------------------------------------
00005E56                            ; Object 80 - Continue screen elements
00005E56                            ; ---------------------------------------------------------------------------
00005E56                            
00005E56                            ContScrItem:
00005E56 7000                       		moveq	#0,d0
00005E58 1028 0024                  		move.b	$24(a0),d0
00005E5C 323B 0000                  		move.w	CSI_Index(pc,d0.w),d1
00005E60 4EFB 1000                  		jmp	CSI_Index(pc,d1.w)
00005E64                            ; ===========================================================================
00005E64 0000                       CSI_Index:	dc.w CSI_Main-CSI_Index
00005E66 0000                       		dc.w CSI_Display-CSI_Index
00005E68 0000                       		dc.w CSI_MakeMiniSonic-CSI_Index
00005E6A 0000                       		dc.w CSI_ChkDel-CSI_Index
00005E6C                            ; ===========================================================================
00005E6C                            
00005E6C                            CSI_Main:	; Routine 0
00005E6C 5428 0024                  		addq.b	#2,obRoutine(a0)
00005E70 217C 0000 0000 0004        		move.l	#Map_ContScr,obMap(a0)
00005E78 317C 8500 0002             		move.w	#$8500,obGfx(a0)
00005E7E 117C 0000 0001             		move.b	#0,obRender(a0)
00005E84 117C 003C 0014             		move.b	#$3C,obActWid(a0)
00005E8A 317C 0120 0008             		move.w	#$120,obX(a0)
00005E90 317C 00C0 000A             		move.w	#$C0,obScreenY(a0)
00005E96 31FC 0000 FE20             		move.w	#0,(v_rings).w	; clear rings
00005E9C                            
00005E9C                            CSI_Display:	; Routine 2
00005E9C 4EF9 0000 0000             		jmp	(DisplaySprite).l
00005EA2                            ; ===========================================================================
00005EA2                            
00005EA2                            	CSI_MiniSonicPos:
00005EA2 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
00005EB4 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
00005EC0                            
00005EC0                            CSI_MakeMiniSonic:
00005EC0                            		; Routine 4
00005EC0 2248                       		movea.l	a0,a1
00005EC2 45F9 0000 5EA2             		lea	(CSI_MiniSonicPos).l,a2
00005EC8 7200                       		moveq	#0,d1
00005ECA 1238 FE18                  		move.b	(v_continues).w,d1
00005ECE 5501                       		subq.b	#2,d1
00005ED0 6400                       		bcc.s	CSI_MoreThan1
00005ED2 4EF9 0000 0000             		jmp	(DeleteObject).l	; cancel if you have 0-1 continues
00005ED8                            
00005ED8                            	CSI_MoreThan1:
00005ED8 7601                       		moveq	#1,d3
00005EDA 0C01 000E                  		cmpi.b	#14,d1		; do you have fewer than 16 continues
00005EDE 6500                       		bcs.s	CSI_FewerThan16	; if yes, branch
00005EE0                            
00005EE0 7600                       		moveq	#0,d3
00005EE2 720E                       		moveq	#14,d1		; cap at 15 mini-Sonics
00005EE4                            
00005EE4                            	CSI_FewerThan16:
00005EE4 1401                       		move.b	d1,d2
00005EE6 0202 0001                  		andi.b	#1,d2
00005EEA                            
00005EEA                            CSI_MiniSonicLoop:
00005EEA 12BC 0000                  		move.b	#id_ContScrItem,0(a1) ; load mini-Sonic object
00005EEE 335A 0008                  		move.w	(a2)+,obX(a1)	; use above data for x-axis position
00005EF2 4A02                       		tst.b	d2		; do you have an even number of continues?
00005EF4 6700                       		beq.s	CSI_Even	; if yes, branch
00005EF6 0469 000A 0008             		subi.w	#$A,obX(a1)	; shift mini-Sonics slightly to the right
00005EFC                            
00005EFC                            	CSI_Even:
00005EFC 337C 00D0 000A             		move.w	#$D0,obScreenY(a1)
00005F02 137C 0006 001A             		move.b	#6,obFrame(a1)
00005F08 137C 0006 0024             		move.b	#6,obRoutine(a1)
00005F0E 237C 0000 0000 0004        		move.l	#Map_ContScr,obMap(a1)
00005F16 337C 8551 0002             		move.w	#$8551,obGfx(a1)
00005F1C 137C 0000 0001             		move.b	#0,obRender(a1)
00005F22 43E9 0040                  		lea	$40(a1),a1
00005F26 51C9 FFC2                  		dbf	d1,CSI_MiniSonicLoop ; repeat for number of continues
00005F2A                            
00005F2A 43E9 FFC0                  		lea	-$40(a1),a1
00005F2E 1343 0028                  		move.b	d3,obSubtype(a1)
00005F32                            
00005F32                            CSI_ChkDel:	; Routine 6
00005F32 4A28 0028                  		tst.b	obSubtype(a0)	; do you have 16 or more continues?
00005F36 6700                       		beq.s	CSI_Animate	; if yes, branch
00005F38 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; is Sonic running?
00005F3E 6500                       		bcs.s	CSI_Animate	; if not, branch
00005F40 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00005F44 0200 0001                  		andi.b	#1,d0
00005F48 6600                       		bne.s	CSI_Animate
00005F4A 4A78 D010                  		tst.w	(v_player+obVelX).w ; is Sonic running?
00005F4E 6600                       		bne.s	CSI_Delete	; if yes, goto delete
00005F50 4E75                       		rts	
00005F52                            
00005F52                            CSI_Animate:
00005F52 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00005F56 0200 000F                  		andi.b	#$F,d0
00005F5A 6600                       		bne.s	CSI_Display2
00005F5C 0868 0000 001A             		bchg	#0,obFrame(a0)
00005F62                            
00005F62                            	CSI_Display2:
00005F62 4EF9 0000 0000             		jmp	(DisplaySprite).l
00005F68                            ; ===========================================================================
00005F68                            
00005F68                            CSI_Delete:
00005F68 4EF9 0000 0000             		jmp	(DeleteObject).l
00005F68 4EF9 0000 0000             		jmp	(DeleteObject).l
00005F6E                            		include	"_incObj\81 Continue Screen Sonic.asm"
00005F6E                            ; ---------------------------------------------------------------------------
00005F6E                            ; Object 81 - Sonic on the continue screen
00005F6E                            ; ---------------------------------------------------------------------------
00005F6E                            
00005F6E                            ContSonic:
00005F6E 7000                       		moveq	#0,d0
00005F70 1028 0024                  		move.b	obRoutine(a0),d0
00005F74 323B 0000                  		move.w	CSon_Index(pc,d0.w),d1
00005F78 4EBB 1000                  		jsr	CSon_Index(pc,d1.w)
00005F7C 4EF9 0000 0000             		jmp	(DisplaySprite).l
00005F82                            ; ===========================================================================
00005F82 0000                       CSon_Index:	dc.w CSon_Main-CSon_Index
00005F84 0000                       		dc.w CSon_ChkLand-CSon_Index
00005F86 0000                       		dc.w CSon_Animate-CSon_Index
00005F88 0000                       		dc.w CSon_Run-CSon_Index
00005F8A                            ; ===========================================================================
00005F8A                            
00005F8A                            CSon_Main:	; Routine 0
00005F8A 5428 0024                  		addq.b	#2,obRoutine(a0)
00005F8E 317C 00A0 0008             		move.w	#$A0,obX(a0)
00005F94 317C 00C0 000C             		move.w	#$C0,obY(a0)
00005F9A 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
00005FA2 317C 0780 0002             		move.w	#$780,obGfx(a0)
00005FA8 117C 0004 0001             		move.b	#4,obRender(a0)
00005FAE 317C 0100 0018             		move.w	#$100,obPriority(a0)
00005FB4 117C 0000 001C             		move.b	#id_Float3,obAnim(a0) ; use "floating" animation
00005FBA 317C 0400 0012             		move.w	#$400,obVelY(a0) ; make Sonic fall from above
00005FC0                            
00005FC0                            CSon_ChkLand:	; Routine 2
00005FC0 0C68 01A0 000C             		cmpi.w	#$1A0,obY(a0)	; has Sonic landed yet?
00005FC6 6600                       		bne.s	CSon_ShowFall	; if not, branch
00005FC8                            
00005FC8 5428 0024                  		addq.b	#2,obRoutine(a0)
00005FCC 4268 0012                  		clr.w	obVelY(a0)	; stop Sonic falling
00005FD0 217C 0000 0000 0004        		move.l	#Map_ContScr,obMap(a0)
00005FD8 317C 8500 0002             		move.w	#$8500,obGfx(a0)
00005FDE 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
00005FE4 6000                       		bra.s	CSon_Animate
00005FE6                            
00005FE6                            CSon_ShowFall:
00005FE6 4EB9 0000 0000             		jsr	(SpeedToPos).l
00005FEC 4EB9 0000 0000             		jsr	(Sonic_Animate).l
00005FF2 4EF9 0000 0000             		jmp	(Sonic_LoadGfx).l
00005FF8                            ; ===========================================================================
00005FF8                            
00005FF8                            CSon_Animate:	; Routine 4
00005FF8 4A38 F605                  		tst.b	(v_jpadpress1).w ; is Start button pressed?
00005FFC 6B00                       		bmi.s	CSon_GetUp	; if yes, branch
00005FFE 43F9 0000 0000             		lea	(AniScript_CSon).l,a1
00006004 4EF9 0000 0000             		jmp	(AnimateSprite).l
0000600A                            
0000600A                            CSon_GetUp:
0000600A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000600E 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
00006016 317C 0780 0002             		move.w	#$780,obGfx(a0)
0000601C 117C 0000 001C             		move.b	#id_Float4,obAnim(a0) ; use "getting up" animation
00006022 4268 0020                  		clr.w	obInertia(a0)
00006026 5168 000C                  		subq.w	#8,obY(a0)
00006032                            
00006032                            CSon_Run:	; Routine 6
00006032 0C68 0800 0020             		cmpi.w	#$800,obInertia(a0) ; check Sonic's inertia
00006038 6600                       		bne.s	CSon_AddInertia	; if too low, branch
0000603A 317C 1000 0010             		move.w	#$1000,obVelX(a0) ; move Sonic to the right
00006040 6000                       		bra.s	CSon_ShowRun
00006042                            
00006042                            CSon_AddInertia:
00006042 0668 0020 0020             		addi.w	#$20,obInertia(a0) ; increase inertia
00006048                            
00006048                            CSon_ShowRun:
00006048 4EB9 0000 0000             		jsr	(SpeedToPos).l
0000604E 4EB9 0000 0000             		jsr	(Sonic_Animate).l
00006054 4EF9 0000 0000             		jmp	(Sonic_LoadGfx).l
00006054 4EF9 0000 0000             		jmp	(Sonic_LoadGfx).l
0000605A                            		include	"_anim\Continue Screen Sonic.asm"
0000605A                            ; ---------------------------------------------------------------------------
0000605A                            ; Animation script - Sonic on the continue screen
0000605A                            ; ---------------------------------------------------------------------------
0000605A 0000                       AniScript_CSon:	dc.w A_CSon_1-AniScript_CSon
0000605C 0401 0101 0102 0202 0303+  A_CSon_1:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, afEnd
00006068 00                         		even
00006068 00                         		even
00006068                            Map_ContScr:	include	"_maps\Continue Screen.asm"
00006068                            ; ---------------------------------------------------------------------------
00006068                            ; Sprite mappings - Continue screen
00006068                            ; ---------------------------------------------------------------------------
00006068                            Map_ContScr_internal:
00006068 0000                       		dc.w M_Cont_text-Map_ContScr_internal
0000606A 0000                       		dc.w M_Cont_Sonic1-Map_ContScr_internal
0000606C 0000                       		dc.w M_Cont_Sonic2-Map_ContScr_internal
0000606E 0000                       		dc.w M_Cont_Sonic3-Map_ContScr_internal
00006070 0000                       		dc.w M_Cont_oval-Map_ContScr_internal
00006072 0000                       		dc.w M_Cont_Mini1-Map_ContScr_internal
00006074 0000                       		dc.w M_Cont_Mini1-Map_ContScr_internal
00006076 0000                       		dc.w M_Cont_Mini2-Map_ContScr_internal
00006078 0B                         M_Cont_text:	dc.b $B
00006079 F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
0000607E F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
00006083 F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
00006088 F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
0000608D F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
00006092 F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
00006097 F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
0000609C F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
000060A1 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
000060A6 3805 2021 08               		dc.b $38, 5, $20, $21, 8
000060AB 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
000060B0 03                         M_Cont_Sonic1:	dc.b 3
000060B1 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
000060B6 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000060BB F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000060C0 03                         M_Cont_Sonic2:	dc.b 3
000060C1 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
000060C6 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000060CB F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000060D0 03                         M_Cont_Sonic3:	dc.b 3
000060D1 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
000060D6 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000060DB F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000060E0 02                         M_Cont_oval:	dc.b 2
000060E1 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
000060E6 6009 2800 00               		dc.b $60, 9, $28, 0, 0
000060EB 01                         M_Cont_Mini1:	dc.b 1
000060EC 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
000060F1 01                         M_Cont_Mini2:	dc.b 1
000060F2 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
000060F8 00                         		even
000060F8 00                         		even
000060F8                            
000060F8                            ; ===========================================================================
000060F8                            ; ---------------------------------------------------------------------------
000060F8                            ; Ending sequence in Green Hill	Zone
000060F8                            ; ---------------------------------------------------------------------------
000060F8                            
000060F8                            GM_Ending:
00006100 6100 C080                  		bsr.w	PaletteFadeOut
00006104                            
00006104 43F8 D000                  		lea	(v_objspace).w,a1
00006108 7000                       		moveq	#0,d0
0000610A 323C 07FF                  		move.w	#$7FF,d1
0000610E                            	End_ClrObjRam:
0000610E 22C0                       		move.l	d0,(a1)+
00006110 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
00006114                            
00006114 43F8 F628                  		lea	($FFFFF628).w,a1
00006118 7000                       		moveq	#0,d0
0000611A 323C 0015                  		move.w	#$15,d1
0000611E                            	End_ClrRam1:
0000611E 22C0                       		move.l	d0,(a1)+
00006120 51C9 FFFC                  		dbf	d1,End_ClrRam1	; clear	variables
00006124                            
00006124 43F8 F700                  		lea	(v_screenposx).w,a1
00006128 7000                       		moveq	#0,d0
0000612A 323C 003F                  		move.w	#$3F,d1
0000612E                            	End_ClrRam2:
0000612E 22C0                       		move.l	d0,(a1)+
00006130 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
00006134                            
00006134 43F8 FE60                  		lea	(v_oscillate+2).w,a1
00006138 7000                       		moveq	#0,d0
0000613A 323C 0047                  		move.w	#$47,d1
0000613E                            	End_ClrRam3:
0000613E 22C0                       		move.l	d0,(a1)+
00006140 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
00006144                            
00006144 46FC 2700                  		disable_ints
00006148 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
0000614C 0200 00BF                  		andi.b	#$BF,d0
00006150 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00006156 6100 B028                  		bsr.w	ClearScreen
0000615A 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00006160 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
00006164 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00006168 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
0000616C 3CBC 857C                  		move.w	#$8500+(vram_sprites>>9),(a6) ; set sprite table address
00006170 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
00006174 3CBC 8004                  		move.w	#$8004,(a6)		; 8-colour mode
00006178 3CBC 8720                  		move.w	#$8720,(a6)		; set background colour (line 3; colour 0)
0000617C 31FC 8ADF F624             		move.w	#$8A00+223,(v_hbla_hreg).w ; set palette change position (for water)
00006182 3CB8 F624                  		move.w	(v_hbla_hreg).w,(a6)
00006186 31FC 001E FE14             		move.w	#30,(v_air).w
0000618C 31FC 0600 FE10             		move.w	#id_EndZ<<8,(v_zone).w ; set level number to 0600 (extra flowers)
00006192 0C38 0000 FE57             		cmpi.b	#0,(v_emeralds).w ; do you have all 6 emeralds?
00006198 6700                       		beq.s	End_LoadData	; if yes, branch
0000619A 31FC 0601 FE10             		move.w	#(id_EndZ<<8)+1,(v_zone).w ; set level number to 0601 (no flowers)
000061A0                            
000061A0                            End_LoadData:
000061A0 7000                       		moveq	#plcid_Ending,d0
000061A2 6100 B6B2                  		bsr.w	QuickPLC	; load ending sequence patterns
000061A6 4EB9 0000 0000             		jsr	(Hud_Base).l
000061AC 6100 0000                  		bsr.w	LevelSizeLoad
000061B0 6100 0000                  		bsr.w	DeformLayers
000061B4 08F8 0002 F754             		bset	#2,(v_fg_scroll_flags).w
000061BA 6100 0000                  		bsr.w	LevelDataLoad
000061BE 6100 0000                  		bsr.w	LoadTilesFromStart
000061C2 21FC 0000 0000 F796        		move.l	#Col_GHZ,(v_collindex).w ; load collision index
000061CA 46FC 2300                  		enable_ints
000061CE 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
000061D4 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
000061D8 6100 B82C                  		bsr.w	KosDec
000061DC 4EB9 0000 0000             		jsr		LoadPlayerPal
000061E2 6100 C248                  		bsr.w	PalLoad1	; load Sonic's palette
000061EE 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is button A pressed?
000061F4 6700                       		beq.s	End_LoadSonic	; if not, branch
000061F6 11FC 0001 FFFA             		move.b	#1,(f_debugmode).w ; enable debug mode
000061FC                            
000061FC                            End_LoadSonic:
000061FC 11FC 0000 D000             		move.b	#id_SonicPlayer,(v_player).w ; load Sonic object
00006202 08F8 0000 D022             		bset	#0,(v_player+obStatus).w ; make Sonic face left
00006208 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock controls
0000620E 31FC 0400 F602             		move.w	#(btnL<<8),(v_jpadhold2).w ; move Sonic to the left
00006214 31FC F800 D020             		move.w	#$F800,(v_player+obInertia).w ; set Sonic's speed
0000621A 11FC 0000 D040             		move.b	#id_HUD,(v_objspace+$40).w ; load HUD object
00006220 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00006226 4EB9 0000 0000             		jsr	(ExecuteObjects).l
0000622C 4EB9 0000 0000             		jsr	(BuildSprites).l
00006232 7000                       		moveq	#0,d0
00006234 31C0 FE20                  		move.w	d0,(v_rings).w
00006238 21C0 FE22                  		move.l	d0,(v_time).w
0000623C 11C0 FE1B                  		move.b	d0,(v_lifecount).w
00006240 11C0 FE2C                  		move.b	d0,(v_shield).w
00006244 11C0 FE2D                  		move.b	d0,(v_invinc).w
00006248 11C0 FE2E                  		move.b	d0,(v_shoes).w
0000624C 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00006250 31C0 FE08                  		move.w	d0,(v_debuguse).w
00006254 31C0 FE02                  		move.w	d0,(f_restart).w
00006258 31C0 FE04                  		move.w	d0,(v_framecount).w
0000625C 6100 EEC6                  		bsr.w	OscillateNumInit
00006260 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w
00006266 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w
0000626C 11FC 0000 FE1E             		move.b	#0,(f_timecount).w
00006272 31FC 0708 F614             		move.w	#1800,(v_demolength).w
00006278 11FC 0018 F62A             		move.b	#$18,(v_vbla_routine).w
0000627E 6100 D780                  		bsr.w	WaitForVBla
00006282 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00006286 0000 0040                  		ori.b	#$40,d0
0000628A 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00006290 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
00006296 6100 BE44                  		bsr.w	PaletteFadeIn
0000629A                            
0000629A                            ; ---------------------------------------------------------------------------
0000629A                            ; Main ending sequence loop
0000629A                            ; ---------------------------------------------------------------------------
0000629A                            
0000629A                            End_MainLoop:
0000629A 6100 AFC0                  		bsr.w	PauseGame
0000629E 11FC 0018 F62A             		move.b	#$18,(v_vbla_routine).w
000062A4 6100 D75A                  		bsr.w	WaitForVBla
000062A8 5278 FE04                  		addq.w	#1,(v_framecount).w
000062AC 6100 0000                  		bsr.w	End_MoveSonic
000062B0 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000062B6 6100 0000                  		bsr.w	DeformLayers
000062BA 4EB9 0000 0000             		jsr	(BuildSprites).l
000062C0 4EB9 0000 0000             		jsr	(ObjPosLoad).l
000062C6 6100 BA06                  		bsr.w	PaletteCycle
000062CA 6100 EEAE                  		bsr.w	OscillateNumDo
000062CE 6100 EF3A                  		bsr.w	SynchroAnimate
000062D2 0C38 0000 F600             		cmpi.b	#id_Ending,(v_gamemode).w ; is game mode $18 (ending)?
000062D8 6700                       		beq.s	End_ChkEmerald	; if yes, branch
000062DA                            
000062DA 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; goto credits
000062E8 31FC 0000 FFF4             		move.w	#0,(v_creditsnum).w ; set credits index number to 0
000062EE 4E75                       		rts	
000062F0                            ; ===========================================================================
000062F0                            
000062F0                            End_ChkEmerald:
000062F0 4A78 FE02                  		tst.w	(f_restart).w	; has Sonic released the emeralds?
000062F4 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
000062F8                            
000062F8 4278 FE02                  		clr.w	(f_restart).w
000062FC 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
00006302 4278 F794                  		clr.w	(v_palchgspeed).w
00006306                            
00006306                            	End_AllEmlds:
00006306 6100 AF54                  		bsr.w	PauseGame
0000630A 11FC 0018 F62A             		move.b	#$18,(v_vbla_routine).w
00006310 6100 D6EE                  		bsr.w	WaitForVBla
00006314 5278 FE04                  		addq.w	#1,(v_framecount).w
00006318 6100 0000                  		bsr.w	End_MoveSonic
0000631C 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00006322 6100 0000                  		bsr.w	DeformLayers
00006326 4EB9 0000 0000             		jsr	(BuildSprites).l
0000632C 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00006332 6100 EE46                  		bsr.w	OscillateNumDo
00006336 6100 EED2                  		bsr.w	SynchroAnimate
0000633A 5378 F794                  		subq.w	#1,(v_palchgspeed).w
0000633E 6A00                       		bpl.s	End_SlowFade
00006340 31FC 0002 F794             		move.w	#2,(v_palchgspeed).w
00006346 6100 BF84                  		bsr.w	WhiteOut_ToWhite
0000634A                            
0000634A                            	End_SlowFade:
0000634A 4A78 FE02                  		tst.w	(f_restart).w
0000634E 6700 FFB6                  		beq.w	End_AllEmlds
00006352 4278 FE02                  		clr.w	(f_restart).w
00006356 31FC 2829 A480             		move.w	#$2829,(v_lvllayout+$80).w ; modify level layout
0000635C 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00006362 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00006368 47F8 F700                  		lea	(v_screenposx).w,a3
0000636C 49F8 A400                  		lea	(v_lvllayout).w,a4
00006370 343C 4000                  		move.w	#$4000,d2
00006374 6100 0000                  		bsr.w	DrawChunks
00006378 7013                       		moveq	#palid_Ending,d0
0000637A 6100 C0B0                  		bsr.w	PalLoad1	; load ending palette
0000637E 6100 BE80                  		bsr.w	PaletteWhiteIn
00006382 6000 FF16                  		bra.w	End_MainLoop
00006386                            
00006386                            ; ---------------------------------------------------------------------------
00006386                            ; Subroutine controlling Sonic on the ending sequence
00006386                            ; ---------------------------------------------------------------------------
00006386                            
00006386                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006386                            
00006386                            
00006386                            End_MoveSonic:
00006386 1038 F7D7                  		move.b	(v_sonicend).w,d0
0000638A 6600                       		bne.s	End_MoveSon2
0000638C 0C78 0090 D008             		cmpi.w	#$90,(v_player+obX).w ; has Sonic passed $90 on x-axis?
00006392 6400                       		bhs.s	End_MoveSonExit	; if not, branch
00006394                            
00006394 5438 F7D7                  		addq.b	#2,(v_sonicend).w
00006398 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock player's controls
0000639E 31FC 0800 F602             		move.w	#(btnR<<8),(v_jpadhold2).w ; move Sonic to the right
000063A4 4E75                       		rts	
000063A6                            ; ===========================================================================
000063A6                            
000063A6                            End_MoveSon2:
000063A6 5500                       		subq.b	#2,d0
000063A8 6600                       		bne.s	End_MoveSon3
000063AA 0C78 00A0 D008             		cmpi.w	#$A0,(v_player+obX).w ; has Sonic passed $A0 on x-axis?
000063B0 6500                       		blo.s	End_MoveSonExit	; if not, branch
000063B2                            
000063B2 5438 F7D7                  		addq.b	#2,(v_sonicend).w
000063B6 7000                       		moveq	#0,d0
000063B8 11C0 F7CC                  		move.b	d0,(f_lockctrl).w
000063BC 31C0 F602                  		move.w	d0,(v_jpadhold2).w ; stop Sonic moving
000063C0 31C0 D020                  		move.w	d0,(v_player+obInertia).w
000063C4 11FC 0081 F7C8             		move.b	#$81,(f_lockmulti).w ; lock controls & position
000063CA 11FC 0003 D01A             		move.b	#3,(v_player+obFrame).w
000063D0 31FC 0000 D01C             		move.w	#(id_Wait<<8)+id_Wait,(v_player+obAnim).w ; use "standing" animation
000063D6 11FC 0003 D01E             		move.b	#3,(v_player+obTimeFrame).w
000063DC 4E75                       		rts	
000063DE                            ; ===========================================================================
000063DE                            
000063DE                            End_MoveSon3:
000063DE 5500                       		subq.b	#2,d0
000063E0 6600                       		bne.s	End_MoveSonExit
000063E2 5438 F7D7                  		addq.b	#2,(v_sonicend).w
000063E6 31FC 00A0 D008             		move.w	#$A0,(v_player+obX).w
000063EC 11FC 0000 D000             		move.b	#id_EndSonic,(v_player).w ; load Sonic ending sequence object
000063F2 4278 D024                  		clr.w	(v_player+obRoutine).w
000063F6                            
000063F6                            End_MoveSonExit:
000063F6 4E75                       		rts	
000063F8                            ; End of function End_MoveSonic
000063F8                            
000063F8                            ; ===========================================================================
000063F8                            
000063F8                            		include	"_incObj\87 Ending Sequence Sonic.asm"
000063F8                            ; ---------------------------------------------------------------------------
000063F8                            ; Object 87 - Sonic on ending sequence
000063F8                            ; ---------------------------------------------------------------------------
000063F8                            
000063F8                            EndSonic:
000063F8 7000                       		moveq	#0,d0
000063FA 1028 0025                  		move.b	ob2ndRout(a0),d0
000063FE 323B 0000                  		move.w	ESon_Index(pc,d0.w),d1
00006402 4EBB 1000                  		jsr	ESon_Index(pc,d1.w)
00006406 4EF9 0000 0000             		jmp	(DisplaySprite).l
0000640C                            ; ===========================================================================
0000640C 0000 0000                  ESon_Index:	dc.w ESon_Main-ESon_Index, ESon_MakeEmeralds-ESon_Index
00006410 0000 0000                  		dc.w Obj87_Animate-ESon_Index,	Obj87_LookUp-ESon_Index
00006414 0000 0000                  		dc.w Obj87_ClrObjRam-ESon_Index, Obj87_Animate-ESon_Index
00006418 0000 0000                  		dc.w Obj87_MakeLogo-ESon_Index, Obj87_Animate-ESon_Index
0000641C 0000 0000                  		dc.w Obj87_Leap-ESon_Index, Obj87_Animate-ESon_Index
00006420                            
00006420 =00000030                  eson_time:	equ $30	; time to wait between events
00006420                            ; ===========================================================================
00006420                            
00006420                            ESon_Main:	; Routine 0
00006420 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all 6 emeralds?
00006426 6700                       		beq.s	ESon_Main2	; if yes, branch
00006428 0628 0010 0025             		addi.b	#$10,ob2ndRout(a0) ; else, skip emerald sequence
0000642E 317C 00D8 0030             		move.w	#216,eson_time(a0)
00006434 4E75                       		rts	
00006436                            ; ===========================================================================
00006436                            
00006436                            ESon_Main2:
00006436 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000643A 217C 0000 0000 0004        		move.l	#Map_ESon,obMap(a0)
00006442 317C 03E1 0002             		move.w	#$3E1,obGfx(a0)
00006448 117C 0004 0001             		move.b	#4,obRender(a0)
0000644E 4228 0022                  		clr.b	obStatus(a0)
00006452 317C 0100 0018             		move.w	#$100,obPriority(a0)
00006458 117C 0000 001A             		move.b	#0,obFrame(a0)
0000645E 317C 0050 0030             		move.w	#80,eson_time(a0) ; set duration for Sonic to pause
00006464                            
00006464                            ESon_MakeEmeralds:
00006464                            		; Routine 2
00006464 5368 0030                  		subq.w	#1,eson_time(a0) ; subtract 1 from duration
00006468 6600                       		bne.s	ESon_Wait
0000646A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000646E 317C 0001 001C             		move.w	#1,obAnim(a0)
00006474 11FC 0000 D400             		move.b	#id_EndChaos,(v_objspace+$400).w ; load chaos emeralds objects
0000647A                            
0000647A                            	ESon_Wait:
0000647A 4E75                       		rts	
0000647C                            ; ===========================================================================
0000647C                            
0000647C                            Obj87_LookUp:	; Routine 6
0000647C 0C79 2000 00FF D43C        		cmpi.w	#$2000,((v_objspace&$FFFFFF)+$400+$3C).l
00006484 6600                       		bne.s	locret_5480
00006486 31FC 0001 FE02             		move.w	#1,(f_restart).w ; set level to	restart	(causes	flash)
0000648C 317C 005A 0030             		move.w	#90,eson_time(a0)
00006492 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00006496                            
00006496                            locret_5480:
00006496 4E75                       		rts	
00006498                            ; ===========================================================================
00006498                            
00006498                            Obj87_ClrObjRam:
00006498                            		; Routine 8
00006498 5368 0030                  		subq.w	#1,eson_time(a0)
0000649C 6600                       		bne.s	ESon_Wait2
0000649E 43F8 D400                  		lea	(v_objspace+$400).w,a1
000064A2 323C 00FF                  		move.w	#$FF,d1
000064A6                            
000064A6                            Obj87_ClrLoop:
000064A6 4299                       		clr.l	(a1)+
000064A8 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
000064AC 31FC 0001 FE02             		move.w	#1,(f_restart).w
000064B2 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000064B6 117C 0001 001C             		move.b	#1,obAnim(a0)
000064BC 317C 003C 0030             		move.w	#60,eson_time(a0)
000064C2                            
000064C2                            ESon_Wait2:
000064C2 4E75                       		rts	
000064C4                            ; ===========================================================================
000064C4                            
000064C4                            Obj87_MakeLogo:	; Routine $C
000064C4 5368 0030                  		subq.w	#1,eson_time(a0)
000064C8 6600                       		bne.s	ESon_Wait3
000064CA 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000064CE 317C 00B4 0030             		move.w	#180,eson_time(a0)
000064D4 117C 0002 001C             		move.b	#2,obAnim(a0)
000064DA 11FC 0000 D400             		move.b	#id_EndSTH,(v_objspace+$400).w ; load "SONIC THE HEDGEHOG" object
000064E0                            
000064E0                            ESon_Wait3:
000064E0 4E75                       		rts	
000064E2                            ; ===========================================================================
000064E2                            
000064E2                            Obj87_Animate:	; Rountine 4, $A, $E, $12
000064E2 43F9 0000 0000             		lea	(AniScript_ESon).l,a1
000064E8 4EF9 0000 0000             		jmp	(AnimateSprite).l
000064EE                            ; ===========================================================================
000064EE                            
000064EE                            Obj87_Leap:	; Routine $10
000064EE 5368 0030                  		subq.w	#1,eson_time(a0)
000064F2 6600                       		bne.s	ESon_Wait4
000064F4 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000064F8 217C 0000 0000 0004        		move.l	#Map_ESon,obMap(a0)
00006500 317C 03E1 0002             		move.w	#$3E1,obGfx(a0)
00006506 117C 0004 0001             		move.b	#4,obRender(a0)
0000650C 4228 0022                  		clr.b	obStatus(a0)
00006510 317C 0100 0018             		move.w	#$100,obPriority(a0)
00006516 117C 0005 001A             		move.b	#5,obFrame(a0)
0000651C 117C 0002 001C             		move.b	#2,obAnim(a0)	; use "leaping"	animation
00006522 11FC 0000 D400             		move.b	#id_EndSTH,(v_objspace+$400).w ; load "SONIC THE HEDGEHOG" object
00006528 60B8                       		bra.s	Obj87_Animate
0000652A                            ; ===========================================================================
0000652A                            
0000652A                            ESon_Wait4:
0000652A 4E75                       		rts	
0000652A 4E75                       		rts	
0000652C                            		include "_anim\Ending Sequence Sonic.asm"
0000652C                            ; ---------------------------------------------------------------------------
0000652C                            ; Animation script - Sonic on the ending sequence
0000652C                            ; ---------------------------------------------------------------------------
0000652C 0000                       AniScript_ESon:	dc.w byte_551C-AniScript_ESon
0000652E 0000                       		dc.w byte_552A-AniScript_ESon
00006530 0000                       		dc.w byte_5534-AniScript_ESon
00006532 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
00006540 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
0000654A 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
00006552                            		even
00006552                            		even
00006552                            		include	"_incObj\88 Ending Sequence Emeralds.asm"
00006552                            ; ---------------------------------------------------------------------------
00006552                            ; Object 88 - chaos emeralds on	the ending sequence
00006552                            ; ---------------------------------------------------------------------------
00006552                            
00006552                            EndChaos:
00006552 7000                       		moveq	#0,d0
00006554 1028 0024                  		move.b	obRoutine(a0),d0
00006558 323B 0000                  		move.w	ECha_Index(pc,d0.w),d1
0000655C 4EBB 1000                  		jsr	ECha_Index(pc,d1.w)
00006560 4EF9 0000 0000             		jmp	(DisplaySprite).l
00006566                            ; ===========================================================================
00006566 0000                       ECha_Index:	dc.w ECha_Main-ECha_Index
00006568 0000                       		dc.w ECha_Move-ECha_Index
0000656A                            
0000656A =00000038                  echa_origX:	equ $38	; x-axis centre of emerald circle (2 bytes)
0000656A =0000003A                  echa_origY:	equ $3A	; y-axis centre of emerald circle (2 bytes)
0000656A =0000003C                  echa_radius:	equ $3C	; radius (2 bytes)
0000656A =0000003E                  echa_angle:	equ $3E	; angle for rotation (2 bytes)
0000656A                            ; ===========================================================================
0000656A                            
0000656A                            ECha_Main:	; Routine 0
0000656A 0C38 0002 D01A             		cmpi.b	#2,(v_player+obFrame).w
00006570 6700                       		beq.s	ECha_CreateEms
00006572 588F                       		addq.l	#4,sp
00006574 4E75                       		rts	
00006576                            ; ===========================================================================
00006576                            
00006576                            ECha_CreateEms:
00006576 3178 D008 0008             		move.w	(v_player+obX).w,obX(a0) ; match X position with Sonic
0000657C 3178 D00C 000C             		move.w	(v_player+obY).w,obY(a0) ; match Y position with Sonic
00006582 2248                       		movea.l	a0,a1
00006584 7600                       		moveq	#0,d3
00006586 7401                       		moveq	#1,d2
00006588 7205                       		moveq	#5,d1
0000658A                            
0000658A                            	ECha_LoadLoop:
0000658A 12BC 0000                  		move.b	#id_EndChaos,(a1) ; load chaos emerald object
0000658E 5429 0024                  		addq.b	#2,obRoutine(a1)
00006592 237C 0000 0000 0004        		move.l	#Map_ECha,obMap(a1)
0000659A 337C 03C5 0002             		move.w	#$3C5,obGfx(a1)
000065A0 137C 0004 0001             		move.b	#4,obRender(a1)
000065A6 337C 0080 0018             		move.w	#$80,obPriority(a1)
000065AC 3368 0008 0038             		move.w	obX(a0),echa_origX(a1)
000065B2 3368 000C 003A             		move.w	obY(a0),echa_origY(a1)
000065B8 1342 001C                  		move.b	d2,obAnim(a1)
000065BC 1342 001A                  		move.b	d2,obFrame(a1)
000065C0 5202                       		addq.b	#1,d2
000065C2 1343 0026                  		move.b	d3,obAngle(a1)
000065C6 0603 002A                  		addi.b	#$100/6,d3	; angle between each emerald
000065CA 43E9 0040                  		lea	$40(a1),a1
000065CE 51C9 FFBA                  		dbf	d1,ECha_LoadLoop ; repeat 5 more times
000065D2                            
000065D2                            ECha_Move:	; Routine 2
000065D2 3028 003E                  		move.w	echa_angle(a0),d0
000065D6 D168 0026                  		add.w	d0,obAngle(a0)
000065DA 1028 0026                  		move.b	obAngle(a0),d0
000065DE 4EB9 0000 3A32             		jsr	(CalcSine).l
000065E4 7800                       		moveq	#0,d4
000065E6 1828 003C                  		move.b	echa_radius(a0),d4
000065EA C3C4                       		muls.w	d4,d1
000065EC E081                       		asr.l	#8,d1
000065EE C1C4                       		muls.w	d4,d0
000065F0 E080                       		asr.l	#8,d0
000065F2 D268 0038                  		add.w	echa_origX(a0),d1
000065F6 D068 003A                  		add.w	echa_origY(a0),d0
000065FA 3141 0008                  		move.w	d1,obX(a0)
000065FE 3140 000C                  		move.w	d0,obY(a0)
00006602                            
00006602                            	ECha_Expand:
00006602 0C68 2000 003C             		cmpi.w	#$2000,echa_radius(a0)
00006608 6700                       		beq.s	ECha_Rotate
0000660A 0668 0020 003C             		addi.w	#$20,echa_radius(a0) ; expand circle of emeralds
00006610                            
00006610                            	ECha_Rotate:
00006610 0C68 2000 003E             		cmpi.w	#$2000,echa_angle(a0)
00006616 6700                       		beq.s	ECha_Rise
00006618 0668 0020 003E             		addi.w	#$20,echa_angle(a0) ; move emeralds around the centre
0000661E                            
0000661E                            	ECha_Rise:
0000661E 0C68 0140 003A             		cmpi.w	#$140,echa_origY(a0)
00006624 6700                       		beq.s	ECha_End
00006626 5368 003A                  		subq.w	#1,echa_origY(a0) ; make circle rise
0000662A                            
0000662A                            ECha_End:
0000662A 4E75                       		rts	
0000662A 4E75                       		rts	
0000662C                            		include	"_incObj\89 Ending Sequence STH.asm"
0000662C                            ; ---------------------------------------------------------------------------
0000662C                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
0000662C                            ; ---------------------------------------------------------------------------
0000662C                            
0000662C                            EndSTH:
0000662C 7000                       		moveq	#0,d0
0000662E 1028 0024                  		move.b	$24(a0),d0
00006632 323B 0000                  		move.w	ESth_Index(pc,d0.w),d1
00006636 4EBB 1000                  		jsr	ESth_Index(pc,d1.w)
0000663A 4EF9 0000 0000             		jmp	(DisplaySprite).l
00006640                            ; ===========================================================================
00006640 0000                       ESth_Index:	dc.w ESth_Main-ESth_Index
00006642 0000                       		dc.w ESth_Move-ESth_Index
00006644 0000                       		dc.w ESth_GotoCredits-ESth_Index
00006646                            
00006646 =00000030                  esth_time:	equ $30		; time until exit
00006646                            ; ===========================================================================
00006646                            
00006646                            ESth_Main:	; Routine 0
00006646 5428 0024                  		addq.b	#2,obRoutine(a0)
0000664A 317C FFE0 0008             		move.w	#-$20,obX(a0)	; object starts	outside	the level boundary
00006650 317C 00D8 000A             		move.w	#$D8,obScreenY(a0)
00006656 217C 0000 0000 0004        		move.l	#Map_ESTH,obMap(a0)
0000665E 317C 05C5 0002             		move.w	#$5C5,obGfx(a0)
00006664 117C 0000 0001             		move.b	#0,obRender(a0)
0000666A 317C 0000 0018             		move.w	#0,obPriority(a0)
00006670                            
00006670                            ESth_Move:	; Routine 2
00006670 0C68 00C0 0008             		cmpi.w	#$C0,obX(a0)	; has object reached $C0?
00006676 6700                       		beq.s	ESth_Delay	; if yes, branch
00006678 0668 0010 0008             		addi.w	#$10,obX(a0)	; move object to the right
0000667E 4E75                       		rts
00006680                            
00006680                            ESth_Delay:
00006680 5428 0024                  		addq.b	#2,obRoutine(a0)
00006684 317C 012C 0030             		move.w	#300,esth_time(a0) ; set duration for delay (5 seconds)
0000668A                            
0000668A                            ESth_GotoCredits:
0000668A                            		; Routine 4
0000668A 5368 0030                  		subq.w	#1,esth_time(a0) ; subtract 1 from duration
0000668E 6A00                       		bpl.s	ESth_Wait
00006690 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; exit to credits
00006696                            
00006696                            	ESth_Wait:
00006696 4E75                       		rts
00006698                            Map_ESon:	include	"_maps\Ending Sequence Sonic.asm"
00006698                            ; ---------------------------------------------------------------------------
00006698                            ; Sprite mappings - Sonic on the ending	sequence
00006698                            ; ---------------------------------------------------------------------------
00006698                            Map_ESon_internal:
00006698 0000                       		dc.w M_ESon_Hold1-Map_ESon_internal
0000669A 0000                       		dc.w M_ESon_Hold2-Map_ESon_internal
0000669C 0000                       		dc.w M_ESon_Up-Map_ESon_internal
0000669E 0000                       		dc.w M_ESon_Conf1-Map_ESon_internal
000066A0 0000                       		dc.w M_ESon_Conf2-Map_ESon_internal
000066A2 0000                       		dc.w M_ESon_Leap1-Map_ESon_internal
000066A4 0000                       		dc.w M_ESon_Leap2-Map_ESon_internal
000066A6 0000                       		dc.w M_ESon_Leap3-Map_ESon_internal
000066A8 02                         M_ESon_Hold1:	dc.b 2
000066A9 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
000066AE 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
000066B3 03                         M_ESon_Hold2:	dc.b 3
000066B4 FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
000066B9 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
000066BE 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
000066C3 02                         M_ESon_Up:	dc.b 2
000066C4 EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
000066C9 FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
000066CE 02                         M_ESon_Conf1:	dc.b 2
000066CF EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
000066D4 FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
000066D9 02                         M_ESon_Conf2:	dc.b 2
000066DA EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
000066DF FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
000066E4 03                         M_ESon_Leap1:	dc.b 3
000066E5 EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
000066EA EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
000066EF 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
000066F4 07                         M_ESon_Leap2:	dc.b 7
000066F5 B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
000066FA BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
000066FF BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
00006704 CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
00006709 DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
0000670E E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
00006713 EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
00006718 18                         M_ESon_Leap3:	dc.b $18
00006719 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
0000671E 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
00006723 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
00006728 980B 0098 30               		dc.b $98, $B, 0, $98, $30
0000672D A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
00006732 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
00006737 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
0000673C A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
00006741 B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
00006746 B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
0000674B A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
00006750 C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
00006755 C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
0000675A B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
0000675F B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
00006764 D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
00006769 D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
0000676E D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
00006773 E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
00006778 E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
0000677D D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
00006782 E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
00006787 F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
0000678C F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
00006792 00                         		even
00006792 00                         		even
00006792                            Map_ECha:	include	"_maps\Ending Sequence Emeralds.asm"
00006792                            ; --------------------------------------------------------------------------------
00006792                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00006792                            ; --------------------------------------------------------------------------------
00006792                            
00006792                            SME_0ZTmS:	
00006792 0000 0000                  		dc.w SME_0ZTmS_E-SME_0ZTmS, SME_0ZTmS_14-SME_0ZTmS	
00006796 0000 0000                  		dc.w SME_0ZTmS_1A-SME_0ZTmS, SME_0ZTmS_20-SME_0ZTmS	
0000679A 0000 0000                  		dc.w SME_0ZTmS_26-SME_0ZTmS, SME_0ZTmS_2C-SME_0ZTmS	
0000679E 0000                       		dc.w SME_0ZTmS_32-SME_0ZTmS	
000067A0 01                         SME_0ZTmS_E:	dc.b 1	
000067A1 F805 0000 F8               		dc.b $F8, 5, 0, 0, $F8	
000067A6 01                         SME_0ZTmS_14:	dc.b 1	
000067A7 F805 0004 F8               		dc.b $F8, 5, 0, 4, $F8	
000067AC 01                         SME_0ZTmS_1A:	dc.b 1	
000067AD F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
000067B2 01                         SME_0ZTmS_20:	dc.b 1	
000067B3 F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8	
000067B8 01                         SME_0ZTmS_26:	dc.b 1	
000067B9 F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8	
000067BE 01                         SME_0ZTmS_2C:	dc.b 1	
000067BF F805 0008 F8               		dc.b $F8, 5, 0, 8, $F8	
000067C4 01                         SME_0ZTmS_32:	dc.b 1	
000067C5 F805 000C F8               		dc.b $F8, 5, 0, $C, $F8	
000067CA                            		even
000067CA                            		even
000067CA                            Map_ESth:	include	"_maps\Ending Sequence STH.asm"
000067CA                            ; ---------------------------------------------------------------------------
000067CA                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
000067CA                            ; ---------------------------------------------------------------------------
000067CA                            Map_ESth_internal:
000067CA 0000                       		dc.w M_ESth_1-Map_ESth_internal
000067CC 03                         M_ESth_1:	dc.b 3
000067CD F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
000067D2 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
000067D7 F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
000067DC                            		even
000067DC                            		even
000067DC                            
000067DC                            ; ===========================================================================
000067DC                            ; ---------------------------------------------------------------------------
000067DC                            ; Credits ending sequence
000067DC                            ; ---------------------------------------------------------------------------
000067DC                            
000067DC                            GM_Credits:
000067DC                            		
000067DC 6100 AF6A                  		bsr.w	ClearPLC
000067E0 6100 B9A0                  		bsr.w	PaletteFadeOut
000067E4 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
000067EA 3CBC 8004                  		move.w	#$8004,(a6)	; use 8-colour mode
000067EE 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
000067F2 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
000067F6 3CBC 9001                  		move.w	#$9001,(a6)	; 64-cell hscroll size
000067FA 3CBC 9200                  		move.w	#$9200,(a6)	; window vertical position
000067FE 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
00006802 3CBC 8720                  		move.w	#$8720,(a6)	; set background colour (line 3; colour 0)
00006806 4238 F64E                  		clr.b	(f_wtr_state).w
0000680A 6100 A974                  		bsr.w	ClearScreen
0000680E                            
0000680E 43F8 D000                  		lea	(v_objspace).w,a1
00006812 7000                       		moveq	#0,d0
00006814 323C 07FF                  		move.w	#$7FF,d1
00006818                            	TryAg_ClrObjRam:
00006818 22C0                       		move.l	d0,(a1)+
0000681A 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
0000681E                            
0000681E 7000                       		moveq	#plcid_TryAgain,d0
00006820 6100 B034                  		bsr.w	QuickPLC	; load "TRY AGAIN" or "END" patterns
00006824                            
00006824 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
00006828 7000                       		moveq	#0,d0
0000682A 323C 001F                  		move.w	#$1F,d1
0000682E                            	TryAg_ClrPal:
0000682E 22C0                       		move.l	d0,(a1)+
00006830 51C9 FFFC                  		dbf	d1,TryAg_ClrPal ; fill palette with black
00006834                            
00006834 7013                       		moveq	#palid_Ending,d0
00006836 6100 BBF4                  		bsr.w	PalLoad1	; load ending palette
0000683A 4278 FBC0                  		clr.w	(v_pal_dry_dup+$40).w
0000683E 11FC 0000 D080             		move.b	#id_EndEggman,(v_objspace+$80).w ; load Eggman object
00006844 4EB9 0000 0000             		jsr	(ExecuteObjects).l
0000684A 4EB9 0000 0000             		jsr	(BuildSprites).l
00006850 31FC 0708 F614             		move.w	#1800,(v_demolength).w ; show screen for 30 seconds
00006856 6100 B884                  		bsr.w	PaletteFadeIn
0000685A                            
0000685A                            ; ---------------------------------------------------------------------------
0000685A                            ; "TRY AGAIN" and "END"	screen main loop
0000685A                            ; ---------------------------------------------------------------------------
0000685A                            TryAg_MainLoop:
0000685A 6100 AA00                  		bsr.w	PauseGame
0000685E 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
00006864 6100 D19A                  		bsr.w	WaitForVBla
00006868 4EB9 0000 0000             		jsr	(ExecuteObjects).l
0000686E 4EB9 0000 0000             		jsr	(BuildSprites).l
00006874 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; is Start button pressed?
0000687A 6600                       		bne.s	TryAg_Exit	; if yes, branch
0000687C 4A78 F614                  		tst.w	(v_demolength).w ; has 30 seconds elapsed?
00006880 6700                       		beq.s	TryAg_Exit	; if yes, branch
00006882 0C38 0000 F600             		cmpi.b	#id_Credits,(v_gamemode).w
00006888 67D0                       		beq.s	TryAg_MainLoop
0000688A                            
0000688A                            TryAg_Exit:
0000688A 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; goto Sega screen
00006890 4E75                       		rts	
00006892                            
00006892                            ; ===========================================================================
00006892                            
00006892                            		include	"_incObj\8B Try Again & End Eggman.asm"
00006892                            ; ---------------------------------------------------------------------------
00006892                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00006892                            ; ---------------------------------------------------------------------------
00006892                            
00006892                            EndEggman:
00006892 7000                       		moveq	#0,d0
00006894 1028 0024                  		move.b	obRoutine(a0),d0
00006898 323B 0000                  		move.w	EEgg_Index(pc,d0.w),d1
0000689C 4EBB 1000                  		jsr	EEgg_Index(pc,d1.w)
000068A0 4EF9 0000 0000             		jmp	(DisplaySprite).l
000068A6                            ; ===========================================================================
000068A6 0000                       EEgg_Index:	dc.w EEgg_Main-EEgg_Index
000068A8 0000                       		dc.w EEgg_Animate-EEgg_Index
000068AA 0000                       		dc.w EEgg_Juggle-EEgg_Index
000068AC 0000                       		dc.w EEgg_Wait-EEgg_Index
000068AE                            
000068AE =00000030                  eegg_time:	equ $30		; time between juggle motions
000068AE                            ; ===========================================================================
000068AE                            
000068AE                            EEgg_Main:	; Routine 0
000068AE 5428 0024                  		addq.b	#2,obRoutine(a0)
000068B2 317C 0120 0008             		move.w	#$120,obX(a0)
000068B8 317C 00F4 000A             		move.w	#$F4,obScreenY(a0)
000068BE 217C 0000 0000 0004        		move.l	#Map_EEgg,obMap(a0)
000068C6 317C 03E1 0002             		move.w	#$3E1,obGfx(a0)
000068CC 117C 0000 0001             		move.b	#0,obRender(a0)
000068D2 317C 0100 0018             		move.w	#$100,obPriority(a0)
000068D8 117C 0002 001C             		move.b	#2,obAnim(a0)	; use "END" animation
000068DE 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all 6 emeralds?
000068E4 6700                       		beq.s	EEgg_Animate	; if yes, branch
000068E6                            
000068E6 11FC 0000 D0C0             		move.b	#id_CreditsText,(v_objspace+$C0).w ; load credits object
000068EC 31FC 0009 FFF4             		move.w	#9,(v_creditsnum).w ; use "TRY AGAIN" text
000068F2 11FC 0000 D800             		move.b	#id_TryChaos,(v_objspace+$800).w ; load emeralds object on "TRY AGAIN" screen
000068F8 117C 0000 001C             		move.b	#0,obAnim(a0)	; use "TRY AGAIN" animation
000068FE                            
000068FE                            EEgg_Animate:	; Routine 2
000068FE 43F9 0000 0000             		lea	(Ani_EEgg).l,a1
00006904 4EF9 0000 0000             		jmp	(AnimateSprite).l
0000690A                            ; ===========================================================================
0000690A                            
0000690A                            EEgg_Juggle:	; Routine 4
0000690A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000690E 7002                       		moveq	#2,d0
00006910 0828 0000 001C             		btst	#0,obAnim(a0)
00006916 6700                       		beq.s	@noflip
00006918 4440                       		neg.w	d0
0000691A                            
0000691A                            	@noflip:
0000691A 43F8 D800                  		lea	(v_objspace+$800).w,a1 ; get RAM address for emeralds
0000691E 7205                       		moveq	#5,d1
00006920                            
00006920                            @emeraldloop:
00006920 1340 003E                  		move.b	d0,$3E(a1)
00006924 3400                       		move.w	d0,d2
00006926 E742                       		asl.w	#3,d2
00006928 D529 0026                  		add.b	d2,obAngle(a1)
0000692C 43E9 0040                  		lea	$40(a1),a1
00006930 51C9 FFEE                  		dbf	d1,@emeraldloop
00006934 5228 001A                  		addq.b	#1,obFrame(a0)
00006938 317C 0070 0030             		move.w	#112,eegg_time(a0)
0000693E                            
0000693E                            EEgg_Wait:	; Routine 6
0000693E 5368 0030                  		subq.w	#1,eegg_time(a0) ; decrement timer
00006942 6A00                       		bpl.s	@nochg		; branch if time remains
00006944 0868 0000 001C             		bchg	#0,obAnim(a0)
0000694A 117C 0002 0024             		move.b	#2,obRoutine(a0) ; goto EEgg_Animate next
00006950                            
00006950                            	@nochg:
00006950 4E75                       		rts	
00006950 4E75                       		rts	
00006952                            		include "_anim\Try Again & End Eggman.asm"
00006952                            ; ---------------------------------------------------------------------------
00006952                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00006952                            ; ---------------------------------------------------------------------------
00006952 0000                       Ani_EEgg:	dc.w @tryagain1-Ani_EEgg
00006954 0000                       		dc.w @tryagain2-Ani_EEgg
00006956 0000                       		dc.w @end-Ani_EEgg
00006958 0500 FC01                  @tryagain1:	dc.b 5,	0, afRoutine, 1
0000695C 0502 FC03                  @tryagain2:	dc.b 5,	2, afRoutine, 3
00006960 0704 0506 0504 0506 0504+  @end:		dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	afEnd
00006972                            		even
00006972                            		even
00006972                            		include	"_incObj\8C Try Again Emeralds.asm"
00006972                            ; ---------------------------------------------------------------------------
00006972                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00006972                            ; ---------------------------------------------------------------------------
00006972                            
00006972                            TryChaos:
00006972 7000                       		moveq	#0,d0
00006974 1028 0024                  		move.b	obRoutine(a0),d0
00006978 323B 0000                  		move.w	TCha_Index(pc,d0.w),d1
0000697C 4EBB 1000                  		jsr	TCha_Index(pc,d1.w)
00006980 4EF9 0000 0000             		jmp	(DisplaySprite).l
00006986                            ; ===========================================================================
00006986 0000                       TCha_Index:	dc.w TCha_Main-TCha_Index
00006988 0000                       		dc.w TCha_Move-TCha_Index
0000698A                            ; ===========================================================================
0000698A                            
0000698A                            TCha_Main:	; Routine 0
0000698A 2248                       		movea.l	a0,a1
0000698C 7400                       		moveq	#0,d2
0000698E 7600                       		moveq	#0,d3
00006990 7205                       		moveq	#5,d1
00006992 9238 FE57                  		sub.b	(v_emeralds).w,d1
00006996                            
00006996                            @makeemerald:
00006996 12BC 0000                  		move.b	#id_TryChaos,(a1) ; load emerald object
0000699A 5429 0024                  		addq.b	#2,obRoutine(a1)
0000699E 237C 0000 6792 0004        		move.l	#Map_ECha,obMap(a1)
000069A6 337C 03C5 0002             		move.w	#$3C5,obGfx(a1)
000069AC 137C 0000 0001             		move.b	#0,obRender(a1)
000069B2 337C 0080 0018             		move.w	#$80,obPriority(a1)
000069B8 337C 0104 0008             		move.w	#$104,obX(a1)
000069BE 337C 0120 0038             		move.w	#$120,$38(a1)
000069C4 337C 00EC 000A             		move.w	#$EC,obScreenY(a1)
000069CA 3369 000A 003A             		move.w	obScreenY(a1),$3A(a1)
000069D0 137C 001C 003C             		move.b	#$1C,$3C(a1)
000069D6 47F8 FE58                  		lea	(v_emldlist).w,a3
000069DA                            
000069DA                            	@chkemerald:
000069DA 7000                       		moveq	#0,d0
000069DC 1038 FE57                  		move.b	(v_emeralds).w,d0
000069E0 5340                       		subq.w	#1,d0
000069E2 6500                       		bcs.s	@loc_5B42
000069E4                            
000069E4                            	@chkloop:
000069E4 B433 0000                  		cmp.b	(a3,d0.w),d2
000069E8 6600                       		bne.s	@notgot
000069EA 5202                       		addq.b	#1,d2
000069EC 60EC                       		bra.s	@chkemerald
000069EE                            ; ===========================================================================
000069EE                            
000069EE                            	@notgot:
000069EE 51C8 FFF4                  		dbf	d0,@chkloop
000069F2                            
000069F2                            @loc_5B42:
000069F2 1342 001A                  		move.b	d2,obFrame(a1)
000069F6 5229 001A                  		addq.b	#1,obFrame(a1)
000069FA 5202                       		addq.b	#1,d2
000069FC 137C 0080 0026             		move.b	#$80,obAngle(a1)
00006A02 1343 001E                  		move.b	d3,obTimeFrame(a1)
00006A06 1343 001F                  		move.b	d3,obDelayAni(a1)
00006A0A 0643 000A                  		addi.w	#10,d3
00006A0E 43E9 0040                  		lea	$40(a1),a1
00006A12 51C9 FF82                  		dbf	d1,@makeemerald	; repeat 5 times
00006A16                            
00006A16                            TCha_Move:	; Routine 2
00006A16 4A68 003E                  		tst.w	$3E(a0)
00006A1A 6700                       		beq.s	locret_5BBA
00006A1C 4A28 001E                  		tst.b	obTimeFrame(a0)
00006A20 6700                       		beq.s	loc_5B78
00006A22 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00006A26 6600                       		bne.s	loc_5B80
00006A28                            
00006A28                            loc_5B78:
00006A28 3028 003E                  		move.w	$3E(a0),d0
00006A2C D168 0026                  		add.w	d0,obAngle(a0)
00006A30                            
00006A30                            loc_5B80:
00006A30 1028 0026                  		move.b	obAngle(a0),d0
00006A34 6700                       		beq.s	loc_5B8C
00006A36 0C00 0080                  		cmpi.b	#$80,d0
00006A3A 6600                       		bne.s	loc_5B96
00006A3C                            
00006A3C                            loc_5B8C:
00006A3C 4268 003E                  		clr.w	$3E(a0)
00006A40 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
00006A46                            
00006A46                            loc_5B96:
00006A46 4EB9 0000 3A32             		jsr	(CalcSine).l
00006A4C 7800                       		moveq	#0,d4
00006A4E 1828 003C                  		move.b	$3C(a0),d4
00006A52 C3C4                       		muls.w	d4,d1
00006A54 E081                       		asr.l	#8,d1
00006A56 C1C4                       		muls.w	d4,d0
00006A58 E080                       		asr.l	#8,d0
00006A5A D268 0038                  		add.w	$38(a0),d1
00006A5E D068 003A                  		add.w	$3A(a0),d0
00006A62 3141 0008                  		move.w	d1,obX(a0)
00006A66 3140 000A                  		move.w	d0,obScreenY(a0)
00006A6A                            
00006A6A                            locret_5BBA:
00006A6A 4E75                       		rts	
00006A6A 4E75                       		rts	
00006A6C                            Map_EEgg:	include	"_maps\Try Again & End Eggman.asm"
00006A6C                            ; ---------------------------------------------------------------------------
00006A6C                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
00006A6C                            ; ---------------------------------------------------------------------------
00006A6C                            Map_EEgg_internal:
00006A6C 0000                       		dc.w M_EEgg_Try1-Map_EEgg_internal
00006A6E 0000                       		dc.w M_EEgg_Try2-Map_EEgg_internal
00006A70 0000                       		dc.w M_EEgg_Try3-Map_EEgg_internal
00006A72 0000                       		dc.w M_EEgg_Try4-Map_EEgg_internal
00006A74 0000                       		dc.w M_EEgg_End1-Map_EEgg_internal
00006A76 0000                       		dc.w M_EEgg_End2-Map_EEgg_internal
00006A78 0000                       		dc.w M_EEgg_End3-Map_EEgg_internal
00006A7A 0000                       		dc.w M_EEgg_End4-Map_EEgg_internal
00006A7C 08                         M_EEgg_Try1:	dc.b 8
00006A7D E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00006A82 F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00006A87 E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00006A8C F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00006A91 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006A96 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006A9B 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006AA0 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006AA5 08                         M_EEgg_Try2:	dc.b 8
00006AA6 E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00006AAB F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00006AB0 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00006AB5 F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00006ABA 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006ABF 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006AC4 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006AC9 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006ACE 08                         M_EEgg_Try3:	dc.b 8
00006ACF E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00006AD4 F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00006AD9 E905 0800 00               		dc.b $E9, 5, 8,	0, 0
00006ADE F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00006AE3 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006AE8 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006AED 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006AF2 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006AF7 08                         M_EEgg_Try4:	dc.b 8
00006AF8 E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00006AFD F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
00006B02 E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
00006B07 F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
00006B0C 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006B11 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006B16 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006B1B 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006B20 0C                         M_EEgg_End1:	dc.b $C
00006B21 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
00006B26 F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
00006B2B 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
00006B30 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
00006B35 ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
00006B3A F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
00006B3F 0504 0835 00               		dc.b 5,	4, 8, $35, 0
00006B44 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
00006B49 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
00006B4E 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
00006B53 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006B58 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006B5D 0A                         M_EEgg_End2:	dc.b $A
00006B5E D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
00006B63 DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
00006B68 F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
00006B6D D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
00006B72 DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
00006B77 F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00006B7C 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006B81 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006B86 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00006B8B 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00006B90 0A                         M_EEgg_End3:	dc.b $A
00006B91 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
00006B96 E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00006B9B EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00006BA0 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
00006BA5 E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00006BAA EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00006BAF 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006BB4 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006BB9 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
00006BBE 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00006BC3 0C                         M_EEgg_End4:	dc.b $C
00006BC4 F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
00006BC9 FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
00006BCE 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
00006BD3 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
00006BD8 F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00006BDD FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
00006BE2 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
00006BE7 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00006BEC 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00006BF1 180C 0087 00               		dc.b $18, $C, 0, $87, 0
00006BF6 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006BFB 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006C00                            		even
00006C00                            		even
00006C00                            
00006C00                            ; ---------------------------------------------------------------------------
00006C00                            ; Ending sequence demos
00006C00                            ; ---------------------------------------------------------------------------
00006C00                            Demo_EndGHZ1:	incbin	"demodata\Ending - GHZ1.bin"
00006C2E                            		even
00006C2E                            Demo_EndMZ:	incbin	"demodata\Ending - MZ.bin"
00006C6E                            		even
00006C6E                            Demo_EndSYZ:	incbin	"demodata\Ending - SYZ.bin"
00006C9E                            		even
00006C9E                            Demo_EndLZ:	incbin	"demodata\Ending - LZ.bin"
00006CCE                            		even
00006CCE                            Demo_EndSLZ:	incbin	"demodata\Ending - SLZ.bin"
00006CEE                            		even
00006CEE                            Demo_EndSBZ1:	incbin	"demodata\Ending - SBZ1.bin"
00006D0E                            		even
00006D0E                            Demo_EndSBZ2:	incbin	"demodata\Ending - SBZ2.bin"
00006D3E                            		even
00006D3E                            Demo_EndGHZ2:	incbin	"demodata\Ending - GHZ2.bin"
00006D6E                            		even
00006D6E                            
00006D6E                            		include	"_inc\LevelSizeLoad & BgScrollSpeed (JP1).asm"
00006D6E                            ; ---------------------------------------------------------------------------
00006D6E                            ; Subroutine to	load level boundaries and start	locations
00006D6E                            ; ---------------------------------------------------------------------------
00006D6E                            
00006D6E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D6E                            
00006D6E                            
00006D6E                            LevelSizeLoad:
00006D6E 7000                       		moveq	#0,d0
00006D70 11C0 F740                  		move.b	d0,($FFFFF740).w
00006D74 11C0 F741                  		move.b	d0,($FFFFF741).w
00006D78 11C0 F746                  		move.b	d0,($FFFFF746).w
00006D7C 11C0 F748                  		move.b	d0,($FFFFF748).w
00006D80 11C0 F742                  		move.b	d0,(v_dle_routine).w
00006D84 3038 FE10                  		move.w	(v_zone).w,d0
00006D88 ED08                       		lsl.b	#6,d0
00006D8A E848                       		lsr.w	#4,d0
00006D8C 3200                       		move.w	d0,d1
00006D8E D040                       		add.w	d0,d0
00006D90 D041                       		add.w	d1,d0
00006D92 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
00006D96 3018                       		move.w	(a0)+,d0
00006D98 31C0 F730                  		move.w	d0,($FFFFF730).w
00006D9C 2018                       		move.l	(a0)+,d0
00006D9E 21C0 F728                  		move.l	d0,(v_limitleft2).w
00006DA2 21C0 F720                  		move.l	d0,(v_limitleft1).w
00006DA6 2018                       		move.l	(a0)+,d0
00006DA8 21C0 F72C                  		move.l	d0,(v_limittop2).w
00006DAC 21C0 F724                  		move.l	d0,(v_limittop1).w
00006DB0 3038 F728                  		move.w	(v_limitleft2).w,d0
00006DB4 0640 0240                  		addi.w	#$240,d0
00006DB8 31C0 F732                  		move.w	d0,(v_limitleft3).w
00006DBC 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
00006DC2 3018                       		move.w	(a0)+,d0
00006DC4 31C0 F73E                  		move.w	d0,(v_lookshift).w
00006DC8 31FC 00A0 F7A0             		move.w    #160,(v_camera_pan).w    ; reset the horizontal camera pan value to 160 pixels
00006DCE 6000 0000                  		bra.w	LevSz_ChkLamp
00006DD2                            
00006DD2                            ; ===========================================================================
00006DD2                            ; ---------------------------------------------------------------------------
00006DD2                            ; Level size array
00006DD2                            ; ---------------------------------------------------------------------------
00006DD2                            LevelSizeArray:
00006DD2                            		; GHZ
00006DD2 0004 0000 4470 0000 0400+  		dc.w $0004, $0000, $4470, $0000, $0400, $0060
00006DDE 0004 0000 2960 0000 0300+  		dc.w $0004, $0000, $2960, $0000, $0300, $0060
00006DEA 0004 0000 1360 0000 0400+  		dc.w $0004, $0000, $1360, $0000, $0400, $0060
00006DF6 0004 0000 7EC0 0000 0400+  		dc.w $0004, $0000, $7EC0, $0000, $0400, $0060
00006E02                            		; LZ
00006E02 0004 0000 19AF 0000 0530+  		dc.w $0004, $0000, $19AF, $0000, $0530, $0060
00006E0E 0004 0000 10AF 0000 0720+  		dc.w $0004, $0000, $10AF, $0000, $0720, $0060
00006E1A 0004 0000 202F FF00 0800+  		dc.w $0004, $0000, $202F, $FF00, $0800, $0060
00006E26 0004 0000 20BF 0000 0720+  		dc.w $0004, $0000, $20BF, $0000, $0720, $0060
00006E32                            		; MZ
00006E32 0004 0000 21C0 0000 0520+  		dc.w $0004, $0000, $21C0, $0000, $0520, $0060
00006E3E 0004 0000 17BF 0000 0520+  		dc.w $0004, $0000, $17BF, $0000, $0520, $0060
00006E4A 0004 0000 1800 0000 0720+  		dc.w $0004, $0000, $1800, $0000, $0720, $0060
00006E56 0004 0000 16BF 0000 0720+  		dc.w $0004, $0000, $16BF, $0000, $0720, $0060
00006E62                            		; SLZ
00006E62 0004 0000 1FBF 0000 0640+  		dc.w $0004, $0000, $1FBF, $0000, $0640, $0060
00006E6E 0004 0000 1FBF 0000 0640+  		dc.w $0004, $0000, $1FBF, $0000, $0640, $0060
00006E7A 0004 0000 2000 0000 0640+  		dc.w $0004, $0000, $2000, $0000, $0640, $0060
00006E86 0004 0000 3EC0 0000 0720+  		dc.w $0004, $0000, $3EC0, $0000, $0720, $0060
00006E92                            		; SYZ
00006E92 0004 0000 22C0 0000 0520+  		dc.w $0004, $0000, $22C0, $0000, $0520, $0060
00006E9E 0004 0000 28C0 0000 0520+  		dc.w $0004, $0000, $28C0, $0000, $0520, $0060
00006EAA 0004 0000 2C00 0000 0620+  		dc.w $0004, $0000, $2C00, $0000, $0620, $0060
00006EB6 0004 0000 2EC0 0000 0620+  		dc.w $0004, $0000, $2EC0, $0000, $0620, $0060
00006EC2                            		; SBZ
00006EC2 0004 0000 21C0 0000 0720+  		dc.w $0004, $0000, $21C0, $0000, $0720, $0060
00006ECE 0004 0000 1E40 0000 0800+  		dc.w $0004, $0000, $1E40, $0000, $0800, $0060
00006EDA 0004 2080 2460 0510 0510+  		dc.w $0004, $2080, $2460, $0510, $0510, $0060
00006EE6 0004 0000 3EC0 0000 0720+  		dc.w $0004, $0000, $3EC0, $0000, $0720, $0060
00006EF2                            		; Ending
00006EF2 0004 0000 0500 0110 0110+  		dc.w $0004, $0000, $0500, $0110, $0110, $0060
00006EFE 0004 0000 0DC0 0110 0110+  		dc.w $0004, $0000, $0DC0, $0110, $0110, $0060
00006F0A 0004 0000 2FFF 0000 0320+  		dc.w $0004, $0000, $2FFF, $0000, $0320, $0060
00006F16 0004 0000 2FFF 0000 0320+  		dc.w $0004, $0000, $2FFF, $0000, $0320, $0060
00006F22                            
00006F22                            ; ---------------------------------------------------------------------------
00006F22                            ; Ending start location array
00006F22                            ; ---------------------------------------------------------------------------
00006F22                            EndingStLocArray:
00006F22                            		include	"_inc\Start Location Array - Ending.asm"
00006F22                            ; ---------------------------------------------------------------------------
00006F22                            ; Ending start location array
00006F22                            ; ---------------------------------------------------------------------------
00006F22                            
00006F22                            		incbin	"startpos\ghz1 (Credits demo 1).bin"
00006F26                            		incbin	"startpos\mz2 (Credits demo).bin"
00006F2A                            		incbin	"startpos\syz3 (Credits demo).bin"
00006F2E                            		incbin	"startpos\lz3 (Credits demo).bin"
00006F32                            		incbin	"startpos\slz3 (Credits demo).bin"
00006F36                            		incbin	"startpos\sbz1 (Credits demo).bin"
00006F3A                            		incbin	"startpos\sbz2 (Credits demo).bin"
00006F3E                            		incbin	"startpos\ghz1 (Credits demo 2).bin"
00006F42                            		even
00006F42                            		even
00006F42                            
00006F42                            ; ===========================================================================
00006F42                            
00006F42                            LevSz_ChkLamp:
00006F42 4A38 FE30                  		tst.b	(v_lastlamp).w	; have any lampposts been hit?
00006F46 6700                       		beq.s	LevSz_StartLoc	; if not, branch
00006F48                            
00006F48 4EB9 0000 0000             		jsr	(Lamp_LoadInfo).l
00006F4E 3238 D008                  		move.w	(v_player+obX).w,d1
00006F52 3038 D00C                  		move.w	(v_player+obY).w,d0
00006F56 6000                       		bra.s	LevSz_SkipStartPos
00006F58                            ; ===========================================================================
00006F58                            
00006F58                            LevSz_StartLoc:
00006F58 3038 FE10                  		move.w	(v_zone).w,d0
00006F5C ED08                       		lsl.b	#6,d0
00006F5E E848                       		lsr.w	#4,d0
00006F60 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
00006F64 4A78 FFF0                  		tst.w	(f_demo).w	; is ending demo mode on?
00006F68 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
00006F6A                            
00006F6A 3038 FFF4                  		move.w	(v_creditsnum).w,d0
00006F6E 5340                       		subq.w	#1,d0
00006F70 E548                       		lsl.w	#2,d0
00006F72 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
00006F76                            
00006F76                            LevSz_SonicPos:
00006F76 7200                       		moveq	#0,d1
00006F78 3219                       		move.w	(a1)+,d1
00006F7A 31C1 D008                  		move.w	d1,(v_player+obX).w ; set Sonic's position on x-axis
00006F7E 7000                       		moveq	#0,d0
00006F80 3011                       		move.w	(a1),d0
00006F82 31C0 D00C                  		move.w	d0,(v_player+obY).w ; set Sonic's position on y-axis
00006F86                            
00006F86                            SetScreen:
00006F86                            	LevSz_SkipStartPos:
00006F86 4278 F7A8                  		clr.w (v_trackpos).w ; reset Sonic's position tracking index 
00006F8A 45F8 CB00                  		lea (v_tracksonic).w,a2 ; load the tracking array into a2 
00006F8E 743F                       		moveq #63,d2 ; begin a 64-step loop 
00006F90                            @looppoint: 
00006F90 34C1                       		move.w d1,(a2)+ ; fill in X 
00006F92 34C0                       		move.w d0,(a2)+ ; fill in Y 
00006F94 51CA FFFA                  		dbf d2,@looppoint ; loop	
00006F98 0441 00A0                  		subi.w	#160,d1		; is Sonic more than 160px from left edge?
00006F9C 6400                       		bcc.s	SetScr_WithinLeft ; if yes, branch
00006F9E 7200                       		moveq	#0,d1
00006FA0                            
00006FA0                            	SetScr_WithinLeft:
00006FA0 3438 F72A                  		move.w	(v_limitright2).w,d2
00006FA4 B242                       		cmp.w	d2,d1		; is Sonic inside the right edge?
00006FA6 6500                       		bcs.s	SetScr_WithinRight ; if yes, branch
00006FA8 3202                       		move.w	d2,d1
00006FAA                            
00006FAA                            	SetScr_WithinRight:
00006FAA 31C1 F700                  		move.w	d1,(v_screenposx).w ; set horizontal screen position
00006FAE                            
00006FAE 0440 0060                  		subi.w	#96,d0		; is Sonic within 96px of upper edge?
00006FB2 6400                       		bcc.s	SetScr_WithinTop ; if yes, branch
00006FB4 7000                       		moveq	#0,d0
00006FB6                            
00006FB6                            	SetScr_WithinTop:
00006FB6 B078 F72E                  		cmp.w	(v_limitbtm2).w,d0 ; is Sonic above the bottom edge?
00006FBA 6D00                       		blt.s	SetScr_WithinBottom ; if yes, branch
00006FBC 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00006FC0                            
00006FC0                            	SetScr_WithinBottom:
00006FC0 31C0 F704                  		move.w	d0,(v_screenposy).w ; set vertical screen position
00006FC4 6100 0000                  		bsr.w	BgScrollSpeed
00006FC8 7000                       		moveq	#0,d0
00006FCA 1038 FE10                  		move.b	(v_zone).w,d0
00006FCE E508                       		lsl.b	#2,d0
00006FD0 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),(v_256loop1).w
00006FD6 4E75                       		rts
00006FD8                            ; ===========================================================================
00006FD8                            ; ---------------------------------------------------------------------------
00006FD8                            ; Sonic start location array
00006FD8                            ; ---------------------------------------------------------------------------
00006FD8                            StartLocArray:	include	"_inc\Start Location Array - Levels.asm"
00006FD8                            ; ---------------------------------------------------------------------------
00006FD8                            ; Sonic start location array
00006FD8                            ; ---------------------------------------------------------------------------
00006FD8                            
00006FD8                            		incbin	"startpos\ghz1.bin"
00006FDC                            		incbin	"startpos\ghz2.bin"
00006FE0                            		incbin	"startpos\ghz3.bin"
00006FE4 0080 00A8                  		dc.w	$80,$A8
00006FE8                            
00006FE8                            		incbin	"startpos\lz1.bin"
00006FEC                            		incbin	"startpos\lz2.bin"
00006FF0                            		incbin	"startpos\lz3.bin"
00006FF4                            		incbin	"startpos\sbz3.bin"
00006FF8                            
00006FF8                            		incbin	"startpos\mz1.bin"
00006FFC                            		incbin	"startpos\mz2.bin"
00007000                            		incbin	"startpos\mz3.bin"
00007004 0080 00A8                  		dc.w	$80,$A8
00007008                            
00007008                            		incbin	"startpos\slz1.bin"
0000700C                            		incbin	"startpos\slz2.bin"
00007010                            		incbin	"startpos\slz3.bin"
00007014 0080 00A8                  		dc.w	$80,$A8
00007018                            
00007018                            		incbin	"startpos\syz1.bin"
0000701C                            		incbin	"startpos\syz2.bin"
00007020                            		incbin	"startpos\syz3.bin"
00007024 0080 00A8                  		dc.w	$80,$A8
00007028                            
00007028                            		incbin	"startpos\sbz1.bin"
0000702C                            		incbin	"startpos\sbz2.bin"
00007030                            		incbin	"startpos\fz.bin"
00007034 0080 00A8                  		dc.w	$80,$A8
00007038                            
00007038                            
00007038                            		incbin	"startpos\end1.bin"
0000703C                            		incbin	"startpos\end2.bin"
00007040 0080 00A8                  		dc.w	$80,$A8
00007044 0080 00A8                  		dc.w	$80,$A8
00007048                            
00007048                            		even
00007048                            		even
00007048                            
00007048                            ; ---------------------------------------------------------------------------
00007048                            ; Which	256x256	tiles contain loops or roll-tunnels
00007048                            ; ---------------------------------------------------------------------------
00007048                            
00007048                            LoopTileNums:
00007048                            
00007048                            ; 		loop	loop	tunnel	tunnel
00007048                            
00007048 B5C0 1F20                  	dc.b	$B5,	$C0,	$1F,	$20	; Green Hill
0000704C 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Labyrinth
00007050 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Marble
00007054 AAB4 7F7F                  	dc.b	$AA,	$B4,	$7F,	$7F	; Star Light
00007058 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Spring Yard
0000705C 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Scrap Brain
00007060 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Ending (Green Hill)
00007064                            
00007064                            		even
00007064                            
00007064                            ; ---------------------------------------------------------------------------
00007064                            ; Subroutine to	set scroll speed of some backgrounds
00007064                            ; ---------------------------------------------------------------------------
00007064                            
00007064                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007064                            
00007064                            
00007064                            BgScrollSpeed:
00007064 4A38 FE30                  		tst.b	(v_lastlamp).w
00007068 6600                       		bne.s	loc_6206
0000706A 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
0000706E 31C0 F714                  		move.w	d0,(v_bg2screenposy).w
00007072 31C1 F708                  		move.w	d1,(v_bgscreenposx).w
00007076 31C1 F710                  		move.w	d1,(v_bg2screenposx).w
0000707A 31C1 F718                  		move.w	d1,(v_bg3screenposx).w
0000707E                            
0000707E                            loc_6206:
0000707E 7400                       		moveq	#0,d2
00007080 1438 FE10                  		move.b	(v_zone).w,d2
00007084 D442                       		add.w	d2,d2
00007086 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
0000708A 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
0000708E                            ; End of function BgScrollSpeed
0000708E                            
0000708E                            ; ===========================================================================
0000708E 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
00007092 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
00007096 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
0000709A 0000                       		dc.w BgScroll_End-BgScroll_Index
0000709C                            ; ===========================================================================
0000709C                            
0000709C                            BgScroll_GHZ:
0000709C 42B8 F708                  		clr.l	(v_bgscreenposx).w
000070A0 42B8 F70C                  		clr.l	(v_bgscreenposy).w
000070A4 42B8 F714                  		clr.l	(v_bg2screenposy).w
000070A8 42B8 F71C                  		clr.l	(v_bg3screenposy).w
000070AC 45F8 A800                  		lea	($FFFFA800).w,a2
000070B0 429A                       		clr.l	(a2)+
000070B2 429A                       		clr.l	(a2)+
000070B4 429A                       		clr.l	(a2)+
000070B6 4E75                       		rts
000070B8                            ; ===========================================================================
000070B8                            
000070B8                            BgScroll_LZ:
000070B8 E280                       		asr.l	#1,d0
000070BA 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
000070BE 4E75                       		rts	
000070C0                            ; ===========================================================================
000070C0                            
000070C0                            BgScroll_MZ:
000070C0 4E75                       		rts	
000070C2                            ; ===========================================================================
000070C2                            
000070C2                            BgScroll_SLZ:
000070C2 E280                       		asr.l	#1,d0
000070C4 0640 00C0                  		addi.w	#$C0,d0
000070C8 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
000070CC 42B8 F708                  		clr.l	(v_bgscreenposx).w
000070D0 4E75                       		rts	
000070D2                            ; ===========================================================================
000070D2                            
000070D2                            BgScroll_SYZ:
000070D2 E980                       		asl.l	#4,d0
000070D4 2400                       		move.l	d0,d2
000070D6 E380                       		asl.l	#1,d0
000070D8 D082                       		add.l	d2,d0
000070DA E080                       		asr.l	#8,d0
000070DC 5240                       		addq.w	#1,d0
000070DE 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
000070E2 42B8 F708                  		clr.l	(v_bgscreenposx).w
000070E6 4E75                       		rts	
000070E8                            ; ===========================================================================
000070E8                            
000070E8                            BgScroll_SBZ:
000070E8 0240 07F8                  		andi.w	#$7F8,d0
000070EC E640                       		asr.w	#3,d0
000070EE 5240                       		addq.w	#1,d0
000070F0 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
000070F4 4E75                       		rts	
000070F6                            ; ===========================================================================
000070F6                            
000070F6                            BgScroll_End:
000070F6 3038 F700                  		move.w	(v_screenposx).w,d0
000070FA E240                       		asr.w	#1,d0
000070FC 31C0 F708                  		move.w	d0,(v_bgscreenposx).w
00007100 31C0 F710                  		move.w	d0,(v_bg2screenposx).w
00007104 E440                       		asr.w	#2,d0
00007106 3200                       		move.w	d0,d1
00007108 D040                       		add.w	d0,d0
0000710A D041                       		add.w	d1,d0
0000710C 31C0 F718                  		move.w	d0,(v_bg3screenposx).w
00007110 42B8 F70C                  		clr.l	(v_bgscreenposy).w
00007114 42B8 F714                  		clr.l	(v_bg2screenposy).w
00007118 42B8 F71C                  		clr.l	(v_bg3screenposy).w
0000711C 45F8 A800                  		lea	($FFFFA800).w,a2
00007120 429A                       		clr.l	(a2)+
00007122 429A                       		clr.l	(a2)+
00007124 429A                       		clr.l	(a2)+
00007126 4E75                       		rts
00007126 4E75                       		rts
00007128                            		include	"_inc\DeformLayers (JP1).asm"
00007128                            ; ---------------------------------------------------------------------------
00007128                            ; Background layer deformation subroutines
00007128                            ; ---------------------------------------------------------------------------
00007128                            
00007128                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007128                            
00007128                            
00007128                            DeformLayers:
00007128 4A38 F744                  		tst.b	(f_nobgscroll).w
0000712C 6700                       		beq.s	@bgscroll
0000712E 4E75                       		rts	
00007130                            ; ===========================================================================
00007130                            
00007130                            	@bgscroll:
00007130 4278 F754                  		clr.w	(v_fg_scroll_flags).w
00007134 4278 F756                  		clr.w	(v_bg1_scroll_flags).w
00007138 4278 F758                  		clr.w	(v_bg2_scroll_flags).w
0000713C 4278 F75A                  		clr.w	(v_bg3_scroll_flags).w
00007140 6100 0000                  		bsr.w	ScrollHoriz
00007144 6100 0000                  		bsr.w	ScrollVertical
00007148 6100 0000                  		bsr.w	DynamicLevelEvents
0000714C 31F8 F704 F616             		move.w	(v_screenposy).w,(v_scrposy_dup).w
00007152 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007158 7000                       		moveq	#0,d0
0000715A 1038 FE10                  		move.b	(v_zone).w,d0
0000715E D040                       		add.w	d0,d0
00007160 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
00007164 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
00007168                            ; End of function DeformLayers
00007168                            
00007168                            ; ===========================================================================
00007168                            ; ---------------------------------------------------------------------------
00007168                            ; Offset index for background layer deformation	code
00007168                            ; ---------------------------------------------------------------------------
00007168 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
0000716C 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
00007170 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
00007174 0000                       		dc.w Deform_GHZ-Deform_Index
00007176                            ; ---------------------------------------------------------------------------
00007176                            ; Green	Hill Zone background layer deformation code
00007176                            ; ---------------------------------------------------------------------------
00007176                            
00007176                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007176                            
00007176                            
00007176                            Deform_GHZ:
00007176                            	;cmpi.b    #id_Title,(v_gamemode).w
00007176                            	;beq.w    Deform_Title
00007176                            
00007176                            ;Deform_GHZ_Stage:
00007176                            	; block 3 - distant mountains
00007176 3838 F73A                  		move.w	(v_scrshiftx).w,d4
0000717A 48C4                       		ext.l	d4
0000717C EB84                       		asl.l	#5,d4
0000717E 2204                       		move.l	d4,d1
00007180 E384                       		asl.l	#1,d4
00007182 D881                       		add.l	d1,d4
00007184 7C00                       		moveq	#0,d6
00007186 6100 0000                  		bsr.w	BGScroll_Block3
0000718A                            	; block 2 - hills & waterfalls
0000718A 3838 F73A                  		move.w	(v_scrshiftx).w,d4
0000718E 48C4                       		ext.l	d4
00007190 EF84                       		asl.l	#7,d4
00007192 7C00                       		moveq	#0,d6
00007194 6100 0000                  		bsr.w	BGScroll_Block2
00007198                            	; calculate Y position
00007198 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
0000719C 3038 F704                  		move.w	(v_screenposy).w,d0
000071A0 0240 07FF                  		andi.w	#$7FF,d0
000071A4 EA48                       		lsr.w	#5,d0
000071A6 4440                       		neg.w	d0
000071A8 0640 0020                  		addi.w	#$20,d0
000071AC 6A00                       		bpl.s	@limitY
000071AE 7000                       		moveq	#0,d0
000071B0                            	@limitY:
000071B0 3800                       		move.w	d0,d4
000071B2 31C0 F618                  		move.w	d0,(v_bgscrposy_dup).w
000071B6 3038 F700                  		move.w	(v_screenposx).w,d0
000071BA 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w
000071C0 6600                       		bne.s	@notTitle
000071C2 7000                       		moveq	#0,d0	; reset foreground position in title screen
000071C4                            	@notTitle:
000071C4 4440                       		neg.w	d0
000071C6 4840                       		swap	d0
000071C8                            	; auto-scroll clouds
000071C8 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
000071CC 069A 0001 0000             		addi.l	#$10000,(a2)+
000071D2 069A 0000 C000             		addi.l	#$C000,(a2)+
000071D8 069A 0000 8000             		addi.l	#$8000,(a2)+
000071DE                            	; calculate background scroll	
000071DE 3038 A800                  		move.w	(v_bgscroll_buffer).w,d0
000071E2 D078 F718                  		add.w	(v_bg3screenposx).w,d0
000071E6 4440                       		neg.w	d0
000071E8 323C 001F                  		move.w	#$1F,d1
000071EC 9244                       		sub.w	d4,d1
000071EE 6500                       		bcs.s	@gotoCloud2
000071F0                            	@cloudLoop1:		; upper cloud (32px)
000071F0 22C0                       		move.l	d0,(a1)+
000071F2 51C9 FFFC                  		dbf	d1,@cloudLoop1
000071F6                            
000071F6                            	@gotoCloud2:
000071F6 3038 A804                  		move.w	(v_bgscroll_buffer+4).w,d0
000071FA D078 F718                  		add.w	(v_bg3screenposx).w,d0
000071FE 4440                       		neg.w	d0
00007200 323C 000F                  		move.w	#$F,d1
00007204                            	@cloudLoop2:		; middle cloud (16px)
00007204 22C0                       		move.l	d0,(a1)+
00007206 51C9 FFFC                  		dbf	d1,@cloudLoop2
0000720A                            
0000720A 3038 A808                  		move.w	(v_bgscroll_buffer+8).w,d0
0000720E D078 F718                  		add.w	(v_bg3screenposx).w,d0
00007212 4440                       		neg.w	d0
00007214 323C 000F                  		move.w	#$F,d1
00007218                            	@cloudLoop3:		; lower cloud (16px)
00007218 22C0                       		move.l	d0,(a1)+
0000721A 51C9 FFFC                  		dbf	d1,@cloudLoop3
0000721E                            
0000721E 323C 002F                  		move.w	#$2F,d1
00007222 3038 F718                  		move.w	(v_bg3screenposx).w,d0
00007226 4440                       		neg.w	d0
00007228                            	@mountainLoop:		; distant mountains (48px)
00007228 22C0                       		move.l	d0,(a1)+
0000722A 51C9 FFFC                  		dbf	d1,@mountainLoop
0000722E                            
0000722E 323C 0027                  		move.w	#$27,d1
00007232 3038 F710                  		move.w	(v_bg2screenposx).w,d0
00007236 4440                       		neg.w	d0
00007238                            	@hillLoop:			; hills & waterfalls (40px)
00007238 22C0                       		move.l	d0,(a1)+
0000723A 51C9 FFFC                  		dbf	d1,@hillLoop
0000723E                            
0000723E 3038 F710                  		move.w	(v_bg2screenposx).w,d0
00007242 3438 F700                  		move.w	(v_screenposx).w,d2
00007246 9440                       		sub.w	d0,d2
00007248 48C2                       		ext.l	d2
0000724A E182                       		asl.l	#8,d2
0000724C 85FC 0068                  		divs.w	#$68,d2
00007250 48C2                       		ext.l	d2
00007252 E182                       		asl.l	#8,d2
00007254 7600                       		moveq	#0,d3
00007256 3600                       		move.w	d0,d3
00007258 323C 0047                  		move.w	#$47,d1
0000725C D244                       		add.w	d4,d1
0000725E                            	@waterLoop:			; water deformation
0000725E 3003                       		move.w	d3,d0
00007260 4440                       		neg.w	d0
00007262 22C0                       		move.l	d0,(a1)+
00007264 4843                       		swap	d3
00007266 D682                       		add.l	d2,d3
00007268 4843                       		swap	d3
0000726A 51C9 FFF2                  		dbf	d1,@waterLoop
0000726E 4E75                       		rts
00007270                            ; End of function Deform_GHZ
00007270                            
00007270                            Deform_Title:
00007270 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007274 48C4                       		ext.l	d4
00007276 EB84                       		asl.l	#5,d4
00007278 2204                       		move.l	d4,d1
0000727A E384                       		asl.l	#1,d4
0000727C D881                       		add.l	d1,d4
0000727E 7A00                       		moveq	#0,d5
00007280 6100 0000                  		bsr.w	BGScroll_Block1
00007284 6100 0000                  		bsr.w	BGScroll_Block3
00007288 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
0000728C 3038 F704                  		move.w	(v_screenposy).w,d0
00007290 0240 07FF                  		andi.w	#$7FF,d0
00007294 EA48                       		lsr.w	#5,d0
00007296 4440                       		neg.w	d0
00007298 0640 0026                  		addi.w	#$26,d0
0000729C 31C0 F714                  		move.w	d0,(v_bg2screenposy).w
000072A0 3800                       		move.w	d0,d4
000072A2 6100 0000                  		bsr.w	BGScroll_Block3
000072A6 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
000072AC 323C 006F                  		move.w	#$6F,d1
000072B0 9244                       		sub.w	d4,d1
000072B2 3038 F700                  		move.w	(v_screenposx).w,d0
000072B6 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w
000072BC 6600                       		bne.s	loc_633C
000072BE 7000                       		moveq	#0,d0
000072C0                            
000072C0                            loc_633C:
000072C0 4440                       		neg.w	d0
000072C2 4840                       		swap	d0
000072C4 3038 F708                  		move.w	(v_bgscreenposx).w,d0
000072C8 4440                       		neg.w	d0
000072CA                            
000072CA                            loc_6346:
000072CA 22C0                       		move.l	d0,(a1)+
000072CC 51C9 FFFC                  		dbf	d1,loc_6346
000072D0 323C 0027                  		move.w	#$27,d1
000072D4 3038 F710                  		move.w	(v_bg2screenposx).w,d0
000072D8 4440                       		neg.w	d0
000072DA                            
000072DA                            loc_6356:
000072DA 22C0                       		move.l	d0,(a1)+
000072DC 51C9 FFFC                  		dbf	d1,loc_6356
000072E0 3038 F710                  		move.w	(v_bg2screenposx).w,d0
000072E4 0640 0000                  		addi.w	#0,d0
000072E8 3438 F700                  		move.w	(v_screenposx).w,d2
000072EC 0642 FE00                  		addi.w	#-$200,d2
000072F0 9440                       		sub.w	d0,d2
000072F2 48C2                       		ext.l	d2
000072F4 E182                       		asl.l	#8,d2
000072F6 85FC 0068                  		divs.w	#$68,d2
000072FA 48C2                       		ext.l	d2
000072FC E182                       		asl.l	#8,d2
000072FE 7600                       		moveq	#0,d3
00007300 3600                       		move.w	d0,d3
00007302 323C 0047                  		move.w	#$47,d1
00007306 D244                       		add.w	d4,d1
00007308                            
00007308                            loc_6384:
00007308 3003                       		move.w	d3,d0
0000730A 4440                       		neg.w	d0
0000730C 22C0                       		move.l	d0,(a1)+
0000730E 4843                       		swap	d3
00007310 D682                       		add.l	d2,d3
00007312 4843                       		swap	d3
00007314 51C9 FFF2                  		dbf	d1,loc_6384
00007318 4E75                       		rts	
0000731A                            
0000731A                            ; ===========================================================================
0000731A                            ; ---------------------------------------------------------------------------
0000731A                            ; Scroll routine for Labyrinth Zone - optimised by MarkeyJester
0000731A                            ; ---------------------------------------------------------------------------
0000731A                             
0000731A                            Deform_LZ:
0000731A 7007                       		moveq	#$07,d0					; prepare multiplication 100 / 2 for BG scrolling
0000731C 3838 F73A                  		move.w	(v_scrshiftx).w,d4			; load horizontal movement distance (Since last frame)
00007320 48C4                       		ext.l	d4					; extend to long-word signed
00007322 E1A4                       		asl.l	d0,d4					; align as fixed point 16, but divide by 2 for BG
00007324 3A38 F73C                  		move.w	(v_scrshifty).w,d5			; load vertical movement distance (Since last frame)
00007328 48C5                       		ext.l	d5					; extend to long-word signed
0000732A E1A5                       		asl.l	d0,d5					; align as fixed point 16, but divide by 2 for BG
0000732C 6100 0000                  		bsr.w	BGScroll_Block1				; adjust BG scroll positions (and set draw code direction flags)
00007330 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w		; set BG V-scroll position
00007336 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1			; load H-scroll buffer
0000733A 3038 F700                  		move.w	(v_screenposx).w,d0			; load FG X position
0000733E 4440                       		neg.w	d0					; reverse
00007340 4840                       		swap	d0					; send to upper word
00007342 3038 F708                  		move.w	(v_bgscreenposx).w,d0			; load BG X position
00007346 4440                       		neg.w	d0					; reverse
00007348 7600                       		moveq	#$00,d3					; clear d3
0000734A 1638 F7D8                  		move.b	(v_lz_deform).w,d3			; load wave-scroll timer
0000734E 0678 0080 F7D8             		addi.w	#$0080,(v_lz_deform).w			; increase wave-scroll timer
00007354 343C 00E0                  		move.w	#$00E0,d2				; prepare water-line count
00007358 3238 F646                  		move.w	(v_waterpos1).w,d1			; load water line position
0000735C 9278 F704                  		sub.w	(v_screenposy).w,d1			; minus FG Y position
00007360 6B00                       		bmi.s	DLZ_Water				; if the screen is already underwater, branch
00007362 B242                       		cmp.w	d2,d1					; is the water line below the screen?
00007364 6F00                       		ble.s	DLZ_NoWater				; if not, branch
00007366 3202                       		move.w	d2,d1					; set at maximum
00007368                             
00007368                            DLZ_NoWater:
00007368 9441                       		sub.w	d1,d2					; subtract from water-line count
0000736A D601                       		add.b	d1,d3					; advance scroll wave timer to correct amount
0000736C 5301                       		subq.b	#$01,d1					; decrease above water count
0000736E 6500                       		bcs.s	DLZ_Water				; if finished, branch
00007370                             
00007370                            DLZ_Above:
00007370 22C0                       		move.l	d0,(a1)+				; save scroll position to buffer
00007372 51C9 FFFC                  		dbf	d1,DLZ_Above				; repeat for all above water lines
00007376                             
00007376                            DLZ_Water:
00007376 5302                       		subq.b	#$01,d2					; decrease below water count
00007378 6500                       		bcs.s	DLZ_Finish				; if finished, branch
0000737A 3200                       		move.w	d0,d1					; copy BG position back to d1
0000737C 4840                       		swap	d0					; move FG position back to lower word in d0
0000737E 3803                       		move.w	d3,d4					; copy sroll timer for BG use
00007380 D638 F705                  		add.b	(v_screenposy+$01).w,d3			; add FG Y position
00007384 D838 F70D                  		add.b	(v_bgscreenposy+$01).w,d4			; add BG Y position
00007388 D643                       		add.w	d3,d3					; multiply by word size (2)
0000738A D844                       		add.w	d4,d4					; ''
0000738C 47F9 0000 0000             		lea	(DLZ_WaveBG).l,a3			; load beginning of BG wave data
00007392 D6C4                       		adda.w	d4,a3					; advance to correct starting point
00007394 1813                       		move.b	(a3),d4					; get current position byte
00007396 E404                       		asr.b	#$02,d4					; get only the position bits
00007398 4884                       		ext.w	d4					; extend to word
0000739A D244                       		add.w	d4,d1					; adjust BG's current position
0000739C 45FB 3000                  		lea	DLZ_WaveFG(pc,d3.w),a2			; load correct starting point of FG wave data
000073A0 1812                       		move.b	(a2),d4					; get current position byte
000073A2 E404                       		asr.b	#$02,d4					; get only the position bits
000073A4 4884                       		ext.w	d4					; extend to word
000073A6 D044                       		add.w	d4,d0					; adjust FG's current position
000073A8                             
000073A8                            DLZ_Below:
000073A8 D05A                       		add.w	(a2)+,d0				; alter FG horizontal position
000073AA 32C0                       		move.w	d0,(a1)+				; save to scroll buffer
000073AC D25B                       		add.w	(a3)+,d1				; alter BG horizontal position
000073AE 32C1                       		move.w	d1,(a1)+				; save to scroll buffer
000073B0 51CA FFF6                  		dbf	d2,DLZ_Below				; repeat for all below water lines
000073B4                             
000073B4                            DLZ_Finish:
000073B4 4E75                       		rts						; return
000073B6                             
000073B6                            ; ---------------------------------------------------------------------------
000073B6                            ; Scroll data for the FG
000073B6                            ; ---------------------------------------------------------------------------
000073B6                             
000073B6                            DLZ_WaveFG:
000073B6                            		rept	$02
000073B6                            		dc.w	$0001,$0400,$0401,$0800,$0801,$0C00,$0C00,$0C00,$0FFF,$0800,$0BFF,$0400,$07FF,$0000,$0000,$0000
000073B6                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000073B6                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000073B6                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000073B6                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000073B6                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000073B6                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000073B6                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000073B6                            		dc.w	$03FF,$FC00,$FFFF,$F800,$FBFF,$F400,$F400,$F400,$F401,$F800,$F801,$FC00,$FC01,$0000,$0000,$0000
000073B6                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000073B6                            		dc.w	$0001,$0400,$0401,$0800,$0801,$0C00,$0C00,$0C00,$0FFF,$0800,$0BFF,$0400,$07FF,$0000,$0000,$0000
000073B6                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000073B6                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000073B6                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000073B6                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000073B6                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000073B6 0001 0400 0401 0800 0801+  		endr
000077B6                             
000077B6                            ; ---------------------------------------------------------------------------
000077B6                            ; Scroll data for the BG
000077B6                            ; ---------------------------------------------------------------------------
000077B6                             
000077B6                            DLZ_WaveBG:	rept	$04
000077B6                            		dc.w	$FC01,$0000,$0000,$0000,$0000,$0000,$0001,$0400,$0400,$0400,$0400,$0401,$0800,$0800,$0800,$0800
000077B6                            		dc.w	$0800,$0800,$0801,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00
000077B6                            		dc.w	$0C01,$13FF,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0FFF
000077B6                            		dc.w	$0800,$0800,$0800,$0800,$0800,$0800,$0BFF,$0400,$0400,$0400,$0400,$07FF,$0000,$0000,$0000,$0000
000077B6                            		dc.w	$0000,$03FF,$FC00,$FC00,$FC00,$FC00,$FFFF,$F800,$F800,$F800,$F800,$FBFF,$F400,$F400,$F400,$F400
000077B6                            		dc.w	$F400,$F400,$F7FF,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000
000077B6                            		dc.w	$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F001
000077B6                            		dc.w	$F400,$F400,$F400,$F400,$F400,$F400,$F401,$F800,$F800,$F800,$F800,$F801,$FC00,$FC00,$FC00,$FC00
000077B6 FC01 0000 0000 0000 0000+  		endr
00007BB6                             
00007BB6                            ; ===========================================================================
00007BB6                            ; End of function Deform_LZ
00007BB6                            
00007BB6                            ; ---------------------------------------------------------------------------
00007BB6                            ; Marble Zone background layer deformation code
00007BB6                            ; ---------------------------------------------------------------------------
00007BB6                            
00007BB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007BB6                            
00007BB6                            
00007BB6                            Deform_MZ:
00007BB6                            	; block 1 - dungeon interior
00007BB6 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007BBA 48C4                       		ext.l	d4
00007BBC ED84                       		asl.l	#6,d4
00007BBE 2204                       		move.l	d4,d1
00007BC0 E384                       		asl.l	#1,d4
00007BC2 D881                       		add.l	d1,d4
00007BC4 7C02                       		moveq	#2,d6
00007BC6 6100 0000                  		bsr.w	BGScroll_Block1
00007BCA                            	; block 3 - mountains
00007BCA 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007BCE 48C4                       		ext.l	d4
00007BD0 ED84                       		asl.l	#6,d4
00007BD2 7C06                       		moveq	#6,d6
00007BD4 6100 0000                  		bsr.w	BGScroll_Block3
00007BD8                            	; block 2 - bushes & antique buildings
00007BD8 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007BDC 48C4                       		ext.l	d4
00007BDE EF84                       		asl.l	#7,d4
00007BE0 7C04                       		moveq	#4,d6
00007BE2 6100 0000                  		bsr.w	BGScroll_Block2
00007BE6                            	; calculate y-position of background
00007BE6 303C 0200                  		move.w	#$200,d0	; start with 512px, ignoring 2 chunks
00007BEA 3238 F704                  		move.w	(v_screenposy).w,d1
00007BEE 0441 01C8                  		subi.w	#$1C8,d1	; 0% scrolling when y <= 56px 
00007BF2 6500                       		bcs.s	@noYscroll
00007BF4 3401                       		move.w	d1,d2
00007BF6 D241                       		add.w	d1,d1
00007BF8 D242                       		add.w	d2,d1
00007BFA E441                       		asr.w	#2,d1
00007BFC D041                       		add.w	d1,d0
00007BFE                            	@noYscroll:
00007BFE 31C0 F714                  		move.w	d0,(v_bg2screenposy).w
00007C02 31C0 F71C                  		move.w	d0,(v_bg3screenposy).w
00007C06 6100 0000                  		bsr.w	BGScroll_YAbsolute
00007C0A 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007C10                            	; do something with redraw flags
00007C10 1038 F756                  		move.b	(v_bg1_scroll_flags).w,d0
00007C14 8038 F758                  		or.b	(v_bg2_scroll_flags).w,d0
00007C18 8138 F75A                  		or.b	d0,(v_bg3_scroll_flags).w
00007C1C 4238 F756                  		clr.b	(v_bg1_scroll_flags).w
00007C20 4238 F758                  		clr.b	(v_bg2_scroll_flags).w
00007C24                            	; calculate background scroll buffer
00007C24 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
00007C28 3438 F700                  		move.w	(v_screenposx).w,d2
00007C2C 4442                       		neg.w	d2
00007C2E 3002                       		move.w	d2,d0
00007C30 E440                       		asr.w	#2,d0
00007C32 9042                       		sub.w	d2,d0
00007C34 48C0                       		ext.l	d0
00007C36 E780                       		asl.l	#3,d0
00007C38 81FC 0005                  		divs.w	#5,d0
00007C3C 48C0                       		ext.l	d0
00007C3E E980                       		asl.l	#4,d0
00007C40 E180                       		asl.l	#8,d0
00007C42 7600                       		moveq	#0,d3
00007C44 3602                       		move.w	d2,d3
00007C46 E243                       		asr.w	#1,d3
00007C48 323C 0004                  		move.w	#4,d1
00007C4C                            	@cloudLoop:		
00007C4C 32C3                       		move.w	d3,(a1)+
00007C4E 4843                       		swap	d3
00007C50 D680                       		add.l	d0,d3
00007C52 4843                       		swap	d3
00007C54 51C9 FFF6                  		dbf	d1,@cloudLoop
00007C58                            
00007C58 3038 F718                  		move.w	(v_bg3screenposx).w,d0
00007C5C 4440                       		neg.w	d0
00007C5E 323C 0001                  		move.w	#1,d1
00007C62                            	@mountainLoop:		
00007C62 32C0                       		move.w	d0,(a1)+
00007C64 51C9 FFFC                  		dbf	d1,@mountainLoop
00007C68                            
00007C68 3038 F710                  		move.w	(v_bg2screenposx).w,d0
00007C6C 4440                       		neg.w	d0
00007C6E 323C 0008                  		move.w	#8,d1
00007C72                            	@bushLoop:		
00007C72 32C0                       		move.w	d0,(a1)+
00007C74 51C9 FFFC                  		dbf	d1,@bushLoop
00007C78                            
00007C78 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00007C7C 4440                       		neg.w	d0
00007C7E 323C 000F                  		move.w	#$F,d1
00007C82                            	@interiorLoop:		
00007C82 32C0                       		move.w	d0,(a1)+
00007C84 51C9 FFFC                  		dbf	d1,@interiorLoop
00007C88                            
00007C88 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
00007C8C 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
00007C90 0440 0200                  		subi.w	#$200,d0	; subtract 512px (unused 2 chunks)
00007C94 3400                       		move.w	d0,d2
00007C96 0C40 0100                  		cmpi.w	#$100,d0
00007C9A 6500                       		bcs.s	@limitY
00007C9C 303C 0100                  		move.w	#$100,d0
00007CA0                            	@limitY:
00007CA0 0240 01F0                  		andi.w	#$1F0,d0
00007CA4 E648                       		lsr.w	#3,d0
00007CA6 45F2 0000                  		lea	(a2,d0),a2
00007CAA 6000 0000                  		bra.w	Bg_Scroll_X
00007CAE                            ; End of function Deform_MZ
00007CAE                            
00007CAE                            ; ---------------------------------------------------------------------------
00007CAE                            ; Star Light Zone background layer deformation code
00007CAE                            ; ---------------------------------------------------------------------------
00007CAE                            
00007CAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007CAE                            
00007CAE                            
00007CAE                            Deform_SLZ:
00007CAE                            	; vertical scrolling
00007CAE 3A38 F73C                  		move.w	(v_scrshifty).w,d5
00007CB2 48C5                       		ext.l	d5
00007CB4 EF85                       		asl.l	#7,d5
00007CB6 6100 0000                  		bsr.w	Bg_Scroll_Y
00007CBA 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007CC0                            	; calculate background scroll buffer
00007CC0 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
00007CC4 3438 F700                  		move.w	(v_screenposx).w,d2
00007CC8 4442                       		neg.w	d2
00007CCA 3002                       		move.w	d2,d0
00007CCC E640                       		asr.w	#3,d0
00007CCE 9042                       		sub.w	d2,d0
00007CD0 48C0                       		ext.l	d0
00007CD2 E980                       		asl.l	#4,d0
00007CD4 81FC 001C                  		divs.w	#$1C,d0
00007CD8 48C0                       		ext.l	d0
00007CDA E980                       		asl.l	#4,d0
00007CDC E180                       		asl.l	#8,d0
00007CDE 7600                       		moveq	#0,d3
00007CE0 3602                       		move.w	d2,d3
00007CE2 323C 001B                  		move.w	#$1B,d1
00007CE6                            	@starLoop:		
00007CE6 32C3                       		move.w	d3,(a1)+
00007CE8 4843                       		swap	d3
00007CEA D680                       		add.l	d0,d3
00007CEC 4843                       		swap	d3
00007CEE 51C9 FFF6                  		dbf	d1,@starLoop
00007CF2                            
00007CF2 3002                       		move.w	d2,d0
00007CF4 E640                       		asr.w	#3,d0
00007CF6 3200                       		move.w	d0,d1
00007CF8 E241                       		asr.w	#1,d1
00007CFA D041                       		add.w	d1,d0
00007CFC 323C 0004                  		move.w	#4,d1
00007D00                            	@buildingLoop1:		; distant black buildings
00007D00 32C0                       		move.w	d0,(a1)+
00007D02 51C9 FFFC                  		dbf	d1,@buildingLoop1
00007D06                            
00007D06 3002                       		move.w	d2,d0
00007D08 E440                       		asr.w	#2,d0
00007D0A 323C 0004                  		move.w	#4,d1
00007D0E                            	@buildingLoop2:		; closer buildings
00007D0E 32C0                       		move.w	d0,(a1)+
00007D10 51C9 FFFC                  		dbf	d1,@buildingLoop2
00007D14                            
00007D14 3002                       		move.w	d2,d0
00007D16 E240                       		asr.w	#1,d0
00007D18 323C 001D                  		move.w	#$1D,d1
00007D1C                            	@bottomLoop:		; bottom part of background
00007D1C 32C0                       		move.w	d0,(a1)+
00007D1E 51C9 FFFC                  		dbf	d1,@bottomLoop
00007D22                            
00007D22 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
00007D26 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
00007D2A 3400                       		move.w	d0,d2
00007D2C 0440 00C0                  		subi.w	#$C0,d0
00007D30 0240 03F0                  		andi.w	#$3F0,d0
00007D34 E648                       		lsr.w	#3,d0
00007D36 45F2 0000                  		lea	(a2,d0),a2
00007D3A                            ;-------------------------------------------------------------------------------
00007D3A                            ;-------------------------------------------------------------------------------
00007D3A                            Bg_Scroll_X:
00007D3A 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00007D3E 323C 000E                  		move.w	#$E,d1
00007D42 3038 F700                  		move.w	(v_screenposx).w,d0
00007D46 4440                       		neg.w	d0
00007D48 4840                       		swap	d0
00007D4A 0242 000F                  		andi.w	#$F,d2
00007D4E D442                       		add.w	d2,d2
00007D50 301A                       		move.w	(a2)+,d0
00007D52 4EFB 2000                  		jmp	@pixelJump(pc,d2.w)		; skip pixels for first row
00007D56                            	@blockLoop:
00007D56 301A                       		move.w	(a2)+,d0
00007D58                            	@pixelJump:		
00007D58 22C0                       		move.l	d0,(a1)+
00007D5A 22C0                       		move.l	d0,(a1)+
00007D5C 22C0                       		move.l	d0,(a1)+
00007D5E 22C0                       		move.l	d0,(a1)+
00007D60 22C0                       		move.l	d0,(a1)+
00007D62 22C0                       		move.l	d0,(a1)+
00007D64 22C0                       		move.l	d0,(a1)+
00007D66 22C0                       		move.l	d0,(a1)+
00007D68 22C0                       		move.l	d0,(a1)+
00007D6A 22C0                       		move.l	d0,(a1)+
00007D6C 22C0                       		move.l	d0,(a1)+
00007D6E 22C0                       		move.l	d0,(a1)+
00007D70 22C0                       		move.l	d0,(a1)+
00007D72 22C0                       		move.l	d0,(a1)+
00007D74 22C0                       		move.l	d0,(a1)+
00007D76 22C0                       		move.l	d0,(a1)+
00007D78 51C9 FFDC                  		dbf	d1,@blockLoop
00007D7C 4E75                       		rts
00007D7E                            
00007D7E                            ; ---------------------------------------------------------------------------
00007D7E                            ; Spring Yard Zone background layer deformation	code
00007D7E                            ; ---------------------------------------------------------------------------
00007D7E                            
00007D7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D7E                            
00007D7E                            
00007D7E                            Deform_SYZ:
00007D7E                            	; vertical scrolling
00007D7E 3A38 F73C                  		move.w	(v_scrshifty).w,d5
00007D82 48C5                       		ext.l	d5
00007D84 E985                       		asl.l	#4,d5
00007D86 2205                       		move.l	d5,d1
00007D88 E385                       		asl.l	#1,d5
00007D8A DA81                       		add.l	d1,d5
00007D8C 6100 0000                  		bsr.w	Bg_Scroll_Y
00007D90 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007D96                            	; calculate background scroll buffer
00007D96 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
00007D9A 3438 F700                  		move.w	(v_screenposx).w,d2
00007D9E 4442                       		neg.w	d2
00007DA0 3002                       		move.w	d2,d0
00007DA2 E640                       		asr.w	#3,d0
00007DA4 9042                       		sub.w	d2,d0
00007DA6 48C0                       		ext.l	d0
00007DA8 E780                       		asl.l	#3,d0
00007DAA 81FC 0008                  		divs.w	#8,d0
00007DAE 48C0                       		ext.l	d0
00007DB0 E980                       		asl.l	#4,d0
00007DB2 E180                       		asl.l	#8,d0
00007DB4 7600                       		moveq	#0,d3
00007DB6 3602                       		move.w	d2,d3
00007DB8 E243                       		asr.w	#1,d3
00007DBA 323C 0007                  		move.w	#7,d1
00007DBE                            	@cloudLoop:		
00007DBE 32C3                       		move.w	d3,(a1)+
00007DC0 4843                       		swap	d3
00007DC2 D680                       		add.l	d0,d3
00007DC4 4843                       		swap	d3
00007DC6 51C9 FFF6                  		dbf	d1,@cloudLoop
00007DCA                            
00007DCA 3002                       		move.w	d2,d0
00007DCC E640                       		asr.w	#3,d0
00007DCE 323C 0004                  		move.w	#4,d1
00007DD2                            	@mountainLoop:		
00007DD2 32C0                       		move.w	d0,(a1)+
00007DD4 51C9 FFFC                  		dbf	d1,@mountainLoop
00007DD8                            
00007DD8 3002                       		move.w	d2,d0
00007DDA E440                       		asr.w	#2,d0
00007DDC 323C 0005                  		move.w	#5,d1
00007DE0                            	@buildingLoop:		
00007DE0 32C0                       		move.w	d0,(a1)+
00007DE2 51C9 FFFC                  		dbf	d1,@buildingLoop
00007DE6                            
00007DE6 3002                       		move.w	d2,d0
00007DE8 3202                       		move.w	d2,d1
00007DEA E241                       		asr.w	#1,d1
00007DEC 9041                       		sub.w	d1,d0
00007DEE 48C0                       		ext.l	d0
00007DF0 E980                       		asl.l	#4,d0
00007DF2 81FC 000E                  		divs.w	#$E,d0
00007DF6 48C0                       		ext.l	d0
00007DF8 E980                       		asl.l	#4,d0
00007DFA E180                       		asl.l	#8,d0
00007DFC 7600                       		moveq	#0,d3
00007DFE 3602                       		move.w	d2,d3
00007E00 E243                       		asr.w	#1,d3
00007E02 323C 000D                  		move.w	#$D,d1
00007E06                            	@bushLoop:		
00007E06 32C3                       		move.w	d3,(a1)+
00007E08 4843                       		swap	d3
00007E0A D680                       		add.l	d0,d3
00007E0C 4843                       		swap	d3
00007E0E 51C9 FFF6                  		dbf	d1,@bushLoop
00007E12                            
00007E12 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
00007E16 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
00007E1A 3400                       		move.w	d0,d2
00007E1C 0240 01F0                  		andi.w	#$1F0,d0
00007E20 E648                       		lsr.w	#3,d0
00007E22 45F2 0000                  		lea	(a2,d0),a2
00007E26 6000 FF12                  		bra.w	Bg_Scroll_X
00007E2A                            ; End of function Deform_SYZ
00007E2A                            
00007E2A                            ; ---------------------------------------------------------------------------
00007E2A                            ; Scrap	Brain Zone background layer deformation	code
00007E2A                            ; ---------------------------------------------------------------------------
00007E2A                            
00007E2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007E2A                            
00007E2A                            
00007E2A                            Deform_SBZ:
00007E2A 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007E2E 48C4                       		ext.l	d4
00007E30 ED84                       		asl.l	#6,d4
00007E32 3A38 F73C                  		move.w	(v_scrshifty).w,d5
00007E36 48C5                       		ext.l	d5
00007E38 E985                       		asl.l	#4,d5
00007E3A E385                       		asl.l	#1,d5
00007E3C 6100 0000                  		bsr.w	BGScroll_XY
00007E40 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007E46 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00007E4A 323C 00DF                  		move.w	#223,d1
00007E4E 3038 F700                  		move.w	(v_screenposx).w,d0
00007E52 4440                       		neg.w	d0
00007E54 4840                       		swap	d0
00007E56 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00007E5A 4440                       		neg.w	d0
00007E5C                            
00007E5C                            loc_6576:
00007E5C 22C0                       		move.l	d0,(a1)+
00007E5E 51C9 FFFC                  		dbf	d1,loc_6576
00007E62 4E75                       		rts	
00007E64                            ;-------------------------------------------------------------------------------
00007E64                            Deform_SBZ2:;loc_68A2:
00007E64 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007E68 48C4                       		ext.l	d4
00007E6A ED84                       		asl.l	#6,d4
00007E6C 3A38 F73C                  		move.w	(v_scrshifty).w,d5
00007E70 48C5                       		ext.l	d5
00007E72 E985                       		asl.l	#4,d5
00007E74 E385                       		asl.l	#1,d5
00007E76 6100 0000                  		bsr.w	BGScroll_XY
00007E7A 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007E80 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00007E84 323C 00DF                  		move.w	#223,d1
00007E88 3038 F700                  		move.w	(v_screenposx).w,d0
00007E8C 4440                       		neg.w	d0
00007E8E 4840                       		swap	d0
00007E90 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00007E94 4440                       		neg.w	d0
00007E96                            
00007E96                            loc_6577:
00007E96 22C0                       		move.l	d0,(a1)+
00007E98 51C9 FFFC                  		dbf	d1,loc_6577
00007E9C 4E75                       		rts	
00007E9E                            
00007E9E                            ; ---------------------------------------------------------------------------
00007E9E                            ; Subroutine to	scroll the level horizontally as Sonic moves
00007E9E                            ; ---------------------------------------------------------------------------
00007E9E                            
00007E9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007E9E                            
00007E9E                            
00007E9E                            ScrollHoriz:
00007E9E 3838 F700                  		move.w	(v_screenposx).w,d4 ; save old screen position
00007EA2 6100                       		bsr.s	MoveScreenHoriz
00007EA4 3038 F700                  		move.w	(v_screenposx).w,d0
00007EA8 0240 0010                  		andi.w	#$10,d0
00007EAC 1238 F74A                  		move.b	(v_fg_xblock).w,d1
00007EB0 B300                       		eor.b	d1,d0
00007EB2 6600                       		bne.s	@return
00007EB4 0A38 0010 F74A             		eori.b	#$10,(v_fg_xblock).w
00007EBA 3038 F700                  		move.w	(v_screenposx).w,d0
00007EBE 9044                       		sub.w	d4,d0		; compare new with old screen position
00007EC0 6A00                       		bpl.s	@scrollRight
00007EC2                            
00007EC2 08F8 0002 F754             		bset	#2,(v_fg_scroll_flags).w ; screen moves backward
00007EC8 4E75                       		rts	
00007ECA                            
00007ECA                            	@scrollRight:
00007ECA 08F8 0003 F754             		bset	#3,(v_fg_scroll_flags).w ; screen moves forward
00007ED0                            
00007ED0                            	@return:
00007ED0 4E75                       		rts	
00007ED2                            ; End of function ScrollHoriz
00007ED2                            
00007ED2                            
00007ED2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007ED2                            
00007ED2                            MoveScreenHoriz:
00007ED2 4A38 FF8B                  		tst.b	($FFFFFF8B).w
00007ED6 6700 0000                  		beq.w	@cont		
00007EDA 4EF9 0000 0000             		jmp	MoveScreenHorizEXT
00007EE0                            		
00007EE0                            	@cont:		
00007EE0 3238 C904                  		move.w	($FFFFC904).w,d1
00007EE4 6700                       		beq.s	@cont1
00007EE6 0441 0100                  		sub.w	#$100,d1
00007EEA 31C1 C904                  		move.w	d1,($FFFFC904).w
00007EEE 7200                       		moveq	#0,d1
00007EF0 1238 C904                  		move.b	($FFFFC904).w,d1
00007EF4 E509                       		lsl.b	#2,d1
00007EF6 5801                       		addq.b	#4,d1
00007EF8 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00007EFC 9001                       		sub.b	d1,d0
00007EFE 43F8 CB00                  		lea	($FFFFCB00).w,a1
00007F02 3031 0000                  		move.w	(a1,d0.w),d0
00007F06 0240 3FFF                  		and.w	#$3FFF,d0
00007F0A 6000                       		bra.s	@cont2
00007F0C                            		
00007F0C                            @cont1:
00007F0C 3038 D008                  		move.w	($FFFFD008).w,d0
00007F10                            		
00007F10                            @cont2:
00007F10 9078 F700                  		sub.w	($FFFFF700).w,d0
00007F14 0440 0090                          subi.w    #144,d0        ; is distance less than 144px?
00007F18 6500                               bcs.s    SH_BehindMid    ; if yes, branch
00007F1A 0440 0010                          subi.w    #16,d0        ; is distance more than 160px?
00007F1E 6400                               bcc.s    SH_AheadOfMid    ; if yes, branch
00007F20 4278 F73A                          clr.w    (v_scrshiftx).w
00007F24 4E75                               rts 
00007F26                            ; ===========================================================================
00007F26                            
00007F26                            SH_AheadOfMid:
00007F26 0C40 0010                          cmpi.w    #16,d0        ; is Sonic within 16px of middle area?
00007F2A 6500                               bcs.s    SH_Ahead16    ; if yes, branch
00007F2C 303C 0010                          move.w    #16,d0        ; set to 16 if greater
00007F30                            
00007F30                                SH_Ahead16:
00007F30 D078 F700                          add.w    (v_screenposx).w,d0
00007F34 B078 F72A                          cmp.w    (v_limitright2).w,d0
00007F38 6D00                               blt.s    SH_SetScreen
00007F3A 3038 F72A                          move.w    (v_limitright2).w,d0
00007F3E                            
00007F3E                            SH_SetScreen:
00007F3E 3200                               move.w    d0,d1
00007F40 9278 F700                          sub.w    (v_screenposx).w,d1
00007F44 E141                               asl.w    #8,d1
00007F46 31C0 F700                          move.w    d0,(v_screenposx).w ; set new screen position
00007F4A 31C1 F73A                          move.w    d1,(v_scrshiftx).w ; set distance for screen movement
00007F4E 4E75                               rts 
00007F50                            ; ===========================================================================
00007F50                            
00007F50                            SH_BehindMid:
00007F50 0C40 FFF0                  		cmpi.w	#-$10,d0
00007F54 6E00                       		bgt.s	@cont
00007F56 303C FFF0                  		move.w	#-$10,d0	
00007F5A                            		
00007F5A                            @cont:
00007F5A D078 F700                          add.w    (v_screenposx).w,d0
00007F5E B078 F728                          cmp.w    (v_limitleft2).w,d0
00007F62 6EDA                               bgt.s    SH_SetScreen
00007F64 3038 F728                          move.w    (v_limitleft2).w,d0
00007F68 60D4                               bra.s    SH_SetScreen
00007F6A                            ; End of function MoveScreenHoriz
00007F6A                            
00007F6A                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
00007F6A                            
00007F6A                            MoveScreenHorizEXT:
00007F6A 3238 C904                  		move.w	($FFFFC904).w,d1
00007F6E 6700                       		beq.s	@cont1
00007F70 0441 0100                  		sub.w	#$100,d1
00007F74 31C1 C904                  		move.w	d1,($FFFFC904).w
00007F78 7200                       		moveq	#0,d1
00007F7A 1238 C904                  		move.b	($FFFFC904).w,d1
00007F7E E509                       		lsl.b	#2,d1
00007F80 5801                       		addq.b	#4,d1
00007F82 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00007F86 9001                       		sub.b	d1,d0
00007F88 43F8 CB00                  		lea	($FFFFCB00).w,a1
00007F8C 3031 0000                  		move.w	(a1,d0.w),d0
00007F90 0240 3FFF                  		and.w	#$3FFF,d0
00007F94 6000                       		bra.s	@cont2
00007F96                            		
00007F96                            @cont1:
00007F96 3038 D008                  		move.w	($FFFFD008).w,d0
00007F9A                            		
00007F9A                            @cont2:
00007F9A 9078 F700                  		sub.w	($FFFFF700).w,d0
00007F9E 9078 F7A0                          sub.w    (v_camera_pan).w,d0    ; Horizontal camera pan value
00007FA2 6700                               beq.s    SHEXT_ProperlyFramed    ; if zero, branch
00007FA4 6500                               bcs.s    SHEXT_BehindMid    ; if less than, branch
00007FA6 6000                               bra.s    SHEXT_AheadOfMid    ; branch
00007FA8                            ; ===========================================================================
00007FA8                            
00007FA8                            SHEXT_ProperlyFramed:
00007FA8 4278 F73A                          clr.w    (v_scrshiftx).w
00007FAC 4E75                               rts 
00007FAE                            ; ===========================================================================
00007FAE                            
00007FAE                            SHEXT_AheadOfMid:
00007FAE 0C40 0010                          cmpi.w    #16,d0        ; is Sonic within 16px of middle area?
00007FB2 6D00                               blt.s    SHEXT_Ahead16    ; if yes, branch
00007FB4 303C 0010                          move.w    #16,d0        ; set to 16 if greater
00007FB8                            
00007FB8                            SHEXT_Ahead16:
00007FB8 D078 F700                          add.w    (v_screenposx).w,d0
00007FBC B078 F72A                          cmp.w    (v_limitright2).w,d0
00007FC0 6D00                               blt.s    SHEXT_SetScreen
00007FC2 3038 F72A                          move.w    (v_limitright2).w,d0
00007FC6                            
00007FC6                            SHEXT_SetScreen:
00007FC6 3200                               move.w    d0,d1
00007FC8 9278 F700                          sub.w    (v_screenposx).w,d1
00007FCC E141                               asl.w    #8,d1
00007FCE 31C0 F700                          move.w    d0,(v_screenposx).w ; set new screen position
00007FD2 31C1 F73A                          move.w    d1,(v_scrshiftx).w ; set distance for screen movement
00007FD6 4E75                               rts
00007FD8                            
00007FD8                            ; ===========================================================================
00007FD8                            
00007FD8                            SHEXT_BehindMid:
00007FD8 0C40 FFF0                          cmpi.w    #-16,d0        ; is Sonic within 16px of middle area?
00007FDC 6C00                               bge.s    SHEXT_Behind16    ; if no, branch
00007FDE 303C FFF0                          move.w    #-16,d0        ; set to -16 if less
00007FE2                            
00007FE2                            SHEXT_Behind16:
00007FE2 D078 F700                          add.w    (v_screenposx).w,d0
00007FE6 B078 F728                          cmp.w    (v_limitleft2).w,d0
00007FEA 6EDA                               bgt.s    SHEXT_SetScreen
00007FEC 3038 F728                          move.w    (v_limitleft2).w,d0
00007FF0 60D4                               bra.s    SHEXT_SetScreen
00007FF2                                  
00007FF2                            ; End of function MoveScreenHoriz
00007FF2                            
00007FF2                            
00007FF2                            ; ---------------------------------------------------------------------------
00007FF2                            ; Subroutine to	scroll the level vertically as Sonic moves
00007FF2                            ; ---------------------------------------------------------------------------
00007FF2                            
00007FF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007FF2                            
00007FF2                            
00007FF2                            ScrollVertical:
00007FF2 7200                       		moveq	#0,d1
00007FF4 3038 D00C                  		move.w	(v_player+obY).w,d0
00007FF8 9078 F704                  		sub.w	(v_screenposy).w,d0 ; Sonic's distance from top of screen
00007FFC 0838 0002 D022             		btst	#2,(v_player+obStatus).w ; is Sonic rolling?
00008002 6700                       		beq.s	SV_NotRolling	; if not, branch
00008004 5B40                       		subq.w	#5,d0
00008006                            
00008006                            	SV_NotRolling:
00008006 0838 0001 D022             		btst	#1,(v_player+obStatus).w ; is Sonic jumping?
0000800C 6700                       		beq.s	loc_664A	; if not, branch
0000800E                            
0000800E 0640 0020                  		addi.w	#32,d0
00008012 9078 F73E                  		sub.w	(v_lookshift).w,d0
00008016 6500                       		bcs.s	loc_6696
00008018 0440 0040                  		subi.w	#64,d0
0000801C 6400                       		bcc.s	loc_6696
0000801E 4A38 F75C                  		tst.b	(f_bgscrollvert).w
00008022 6600                       		bne.s	loc_66A8
00008024 6000                       		bra.s	loc_6656
00008026                            ; ===========================================================================
00008026                            
00008026                            loc_664A:
00008026 9078 F73E                  		sub.w	(v_lookshift).w,d0
0000802A 6600                       		bne.s	loc_665C
0000802C 4A38 F75C                  		tst.b	(f_bgscrollvert).w
00008030 6600                       		bne.s	loc_66A8
00008032                            
00008032                            loc_6656:
00008032 4278 F73C                  		clr.w	(v_scrshifty).w
00008036 4E75                       		rts	
00008038                            ; ===========================================================================
00008038                            
00008038                            loc_665C:
00008038 0C78 0060 F73E             		cmpi.w	#$60,(v_lookshift).w
0000803E 6600                       		bne.s	loc_6684
00008040 3238 D020                  		move.w	(v_player+obInertia).w,d1
00008044 6A00                       		bpl.s	loc_666C
00008046 4441                       		neg.w	d1
00008048                            
00008048                            loc_666C:
00008048 0C41 0800                  		cmpi.w	#$800,d1
0000804C 6400                       		bcc.s	loc_6696
0000804E 323C 0600                  		move.w	#$600,d1
00008052 0C40 0006                  		cmpi.w	#6,d0
00008056 6E00                       		bgt.s	loc_66F6
00008058 0C40 FFFA                  		cmpi.w	#-6,d0
0000805C 6D00                       		blt.s	loc_66C0
0000805E 6000                       		bra.s	loc_66AE
00008060                            ; ===========================================================================
00008060                            
00008060                            loc_6684:
00008060 323C 0200                  		move.w	#$200,d1
00008064 0C40 0002                  		cmpi.w	#2,d0
00008068 6E00                       		bgt.s	loc_66F6
0000806A 0C40 FFFE                  		cmpi.w	#-2,d0
0000806E 6D00                       		blt.s	loc_66C0
00008070 6000                       		bra.s	loc_66AE
00008072                            ; ===========================================================================
00008072                            
00008072                            loc_6696:
00008072 323C 1000                  		move.w	#$1000,d1
00008076 0C40 0010                  		cmpi.w	#$10,d0
0000807A 6E00                       		bgt.s	loc_66F6
0000807C 0C40 FFF0                  		cmpi.w	#-$10,d0
00008080 6D00                       		blt.s	loc_66C0
00008082 6000                       		bra.s	loc_66AE
00008084                            ; ===========================================================================
00008084                            
00008084                            loc_66A8:
00008084 7000                       		moveq	#0,d0
00008086 11C0 F75C                  		move.b	d0,(f_bgscrollvert).w
0000808A                            
0000808A                            loc_66AE:
0000808A 7200                       		moveq	#0,d1
0000808C 3200                       		move.w	d0,d1
0000808E D278 F704                  		add.w	(v_screenposy).w,d1
00008092 4A40                       		tst.w	d0
00008094 6A00 0000                  		bpl.w	loc_6700
00008098 6000 0000                  		bra.w	loc_66CC
0000809C                            ; ===========================================================================
0000809C                            
0000809C                            loc_66C0:
0000809C 4441                       		neg.w	d1
0000809E 48C1                       		ext.l	d1
000080A0 E181                       		asl.l	#8,d1
000080A2 D2B8 F704                  		add.l	(v_screenposy).w,d1
000080A6 4841                       		swap	d1
000080A8                            
000080A8                            loc_66CC:
000080A8 B278 F72C                  		cmp.w	(v_limittop2).w,d1
000080AC 6E00                       		bgt.s	loc_6724
000080AE 0C41 FF00                  		cmpi.w	#-$100,d1
000080B2 6E00                       		bgt.s	loc_66F0
000080B4 0241 07FF                  		andi.w	#$7FF,d1
000080B8 0278 07FF D00C             		andi.w	#$7FF,(v_player+obY).w
000080BE 0278 07FF F704             		andi.w	#$7FF,(v_screenposy).w
000080C4 0278 03FF F70C             		andi.w	#$3FF,(v_bgscreenposy).w
000080CA 6000                       		bra.s	loc_6724
000080CC                            ; ===========================================================================
000080CC                            
000080CC                            loc_66F0:
000080CC 3238 F72C                  		move.w	(v_limittop2).w,d1
000080D0 6000                       		bra.s	loc_6724
000080D2                            ; ===========================================================================
000080D2                            
000080D2                            loc_66F6:
000080D2 48C1                       		ext.l	d1
000080D4 E181                       		asl.l	#8,d1
000080D6 D2B8 F704                  		add.l	(v_screenposy).w,d1
000080DA 4841                       		swap	d1
000080DC                            
000080DC                            loc_6700:
000080DC B278 F72E                  		cmp.w	(v_limitbtm2).w,d1
000080E0 6D00                       		blt.s	loc_6724
000080E2 0441 0800                  		subi.w	#$800,d1
000080E6 6500                       		bcs.s	loc_6720
000080E8 0278 07FF D00C             		andi.w	#$7FF,(v_player+obY).w
000080EE 0478 0800 F704             		subi.w	#$800,(v_screenposy).w
000080F4 0278 03FF F70C             		andi.w	#$3FF,(v_bgscreenposy).w
000080FA 6000                       		bra.s	loc_6724
000080FC                            ; ===========================================================================
000080FC                            
000080FC                            loc_6720:
000080FC 3238 F72E                  		move.w	(v_limitbtm2).w,d1
00008100                            
00008100                            loc_6724:
00008100 3838 F704                  		move.w	(v_screenposy).w,d4
00008104 4841                       		swap	d1
00008106 2601                       		move.l	d1,d3
00008108 96B8 F704                  		sub.l	(v_screenposy).w,d3
0000810C E09B                       		ror.l	#8,d3
0000810E 31C3 F73C                  		move.w	d3,(v_scrshifty).w
00008112 21C1 F704                  		move.l	d1,(v_screenposy).w
00008116 3038 F704                  		move.w	(v_screenposy).w,d0
0000811A 0240 0010                  		andi.w	#$10,d0
0000811E 1238 F74B                  		move.b	(v_fg_yblock).w,d1
00008122 B300                       		eor.b	d1,d0
00008124 6600                       		bne.s	@return
00008126 0A38 0010 F74B             		eori.b	#$10,(v_fg_yblock).w
0000812C 3038 F704                  		move.w	(v_screenposy).w,d0
00008130 9044                       		sub.w	d4,d0
00008132 6A00                       		bpl.s	@scrollBottom
00008134 08F8 0000 F754             		bset	#0,(v_fg_scroll_flags).w
0000813A 4E75                       		rts	
0000813C                            ; ===========================================================================
0000813C                            
0000813C                            	@scrollBottom:
0000813C 08F8 0001 F754             		bset	#1,(v_fg_scroll_flags).w
00008142                            
00008142                            	@return:
00008142 4E75                       		rts	
00008144                            ; End of function ScrollVertical
00008144                            
00008144                            
00008144                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008144                            ; Scrolls background and sets redraw flags.
00008144                            ; d4 - background x offset * $10000
00008144                            ; d5 - background y offset * $10000
00008144                            
00008144                            BGScroll_XY:
00008144 2438 F708                  		move.l	(v_bgscreenposx).w,d2
00008148 2002                       		move.l	d2,d0
0000814A D084                       		add.l	d4,d0
0000814C 21C0 F708                  		move.l	d0,(v_bgscreenposx).w
00008150 2200                       		move.l	d0,d1
00008152 4841                       		swap	d1
00008154 0241 0010                  		andi.w	#$10,d1
00008158 1638 F74C                  		move.b	(v_bg1_xblock).w,d3
0000815C B701                       		eor.b	d3,d1
0000815E 6600                       		bne.s	BGScroll_YRelative	; no change in Y
00008160 0A38 0010 F74C             		eori.b	#$10,(v_bg1_xblock).w
00008166 9082                       		sub.l	d2,d0	; new - old
00008168 6A00                       		bpl.s	@scrollRight
0000816A 08F8 0002 F756             		bset	#2,(v_bg1_scroll_flags).w
00008170 6000                       		bra.s	BGScroll_YRelative
00008172                            	@scrollRight:
00008172 08F8 0003 F756             		bset	#3,(v_bg1_scroll_flags).w
00008178                            BGScroll_YRelative:
00008178 2638 F70C                  		move.l	(v_bgscreenposy).w,d3
0000817C 2003                       		move.l	d3,d0
0000817E D085                       		add.l	d5,d0
00008180 21C0 F70C                  		move.l	d0,(v_bgscreenposy).w
00008184 2200                       		move.l	d0,d1
00008186 4841                       		swap	d1
00008188 0241 0010                  		andi.w	#$10,d1
0000818C 1438 F74D                  		move.b	(v_bg1_yblock).w,d2
00008190 B501                       		eor.b	d2,d1
00008192 6600                       		bne.s	@return
00008194 0A38 0010 F74D             		eori.b	#$10,(v_bg1_yblock).w
0000819A 9083                       		sub.l	d3,d0
0000819C 6A00                       		bpl.s	@scrollBottom
0000819E 08F8 0000 F756             		bset	#0,(v_bg1_scroll_flags).w
000081A4 4E75                       		rts
000081A6                            	@scrollBottom:
000081A6 08F8 0001 F756             		bset	#1,(v_bg1_scroll_flags).w
000081AC                            	@return:
000081AC 4E75                       		rts
000081AE                            ; End of function BGScroll_XY
000081AE                            
000081AE                            Bg_Scroll_Y:
000081AE 2638 F70C                  		move.l	(v_bgscreenposy).w,d3
000081B2 2003                       		move.l	d3,d0
000081B4 D085                       		add.l	d5,d0
000081B6 21C0 F70C                  		move.l	d0,(v_bgscreenposy).w
000081BA 2200                       		move.l	d0,d1
000081BC 4841                       		swap	d1
000081BE 0241 0010                  		andi.w	#$10,d1
000081C2 1438 F74D                  		move.b	(v_bg1_yblock).w,d2
000081C6 B501                       		eor.b	d2,d1
000081C8 6600                       		bne.s	@return
000081CA 0A38 0010 F74D             		eori.b	#$10,(v_bg1_yblock).w
000081D0 9083                       		sub.l	d3,d0
000081D2 6A00                       		bpl.s	@scrollBottom
000081D4 08F8 0004 F756             		bset	#4,(v_bg1_scroll_flags).w
000081DA 4E75                       		rts
000081DC                            	@scrollBottom:
000081DC 08F8 0005 F756             		bset	#5,(v_bg1_scroll_flags).w
000081E2                            	@return:
000081E2 4E75                       		rts
000081E4                            
000081E4                            
000081E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000081E4                            
000081E4                            
000081E4                            BGScroll_YAbsolute:
000081E4 3638 F70C                  		move.w	(v_bgscreenposy).w,d3
000081E8 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
000081EC 3200                       		move.w	d0,d1
000081EE 0241 0010                  		andi.w	#$10,d1
000081F2 1438 F74D                  		move.b	(v_bg1_yblock).w,d2
000081F6 B501                       		eor.b	d2,d1
000081F8 6600                       		bne.s	@return
000081FA 0A38 0010 F74D             		eori.b	#$10,(v_bg1_yblock).w
00008200 9043                       		sub.w	d3,d0
00008202 6A00                       		bpl.s	@scrollBottom
00008204 08F8 0000 F756             		bset	#0,(v_bg1_scroll_flags).w
0000820A 4E75                       		rts
0000820C                            	@scrollBottom:
0000820C 08F8 0001 F756             		bset	#1,(v_bg1_scroll_flags).w
00008212                            	@return:
00008212 4E75                       		rts
00008214                            ; End of function BGScroll_YAbsolute
00008214                            
00008214                            
00008214                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008214                            ; d6 - bit to set for redraw
00008214                            
00008214                            BGScroll_Block1:
00008214 2438 F708                  		move.l	(v_bgscreenposx).w,d2
00008218 2002                       		move.l	d2,d0
0000821A D084                       		add.l	d4,d0
0000821C 21C0 F708                  		move.l	d0,(v_bgscreenposx).w
00008220 2200                       		move.l	d0,d1
00008222 4841                       		swap	d1
00008224 0241 0010                  		andi.w	#$10,d1
00008228 1638 F74C                  		move.b	(v_bg1_xblock).w,d3
0000822C B701                       		eor.b	d3,d1
0000822E 6600                       		bne.s	@return
00008230 0A38 0010 F74C             		eori.b	#$10,(v_bg1_xblock).w
00008236 9082                       		sub.l	d2,d0
00008238 6A00                       		bpl.s	@scrollRight
0000823A 0DF8 F756                  		bset	d6,(v_bg1_scroll_flags).w
0000823E 6000                       		bra.s	@return
00008240                            	@scrollRight:
00008240 5206                       		addq.b	#1,d6
00008242 0DF8 F756                  		bset	d6,(v_bg1_scroll_flags).w
00008246                            	@return:
00008246 4E75                       		rts
00008248                            ; End of function BGScroll_Block1
00008248                            
00008248                            
00008248                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008248                            
00008248                            
00008248                            BGScroll_Block2:
00008248 2438 F710                  		move.l	(v_bg2screenposx).w,d2
0000824C 2002                       		move.l	d2,d0
0000824E D084                       		add.l	d4,d0
00008250 21C0 F710                  		move.l	d0,(v_bg2screenposx).w
00008254 2200                       		move.l	d0,d1
00008256 4841                       		swap	d1
00008258 0241 0010                  		andi.w	#$10,d1
0000825C 1638 F74E                  		move.b	(v_bg2_xblock).w,d3
00008260 B701                       		eor.b	d3,d1
00008262 6600                       		bne.s	@return
00008264 0A38 0010 F74E             		eori.b	#$10,(v_bg2_xblock).w
0000826A 9082                       		sub.l	d2,d0
0000826C 6A00                       		bpl.s	@scrollRight
0000826E 0DF8 F758                  		bset	d6,(v_bg2_scroll_flags).w
00008272 6000                       		bra.s	@return
00008274                            	@scrollRight:
00008274 5206                       		addq.b	#1,d6
00008276 0DF8 F758                  		bset	d6,(v_bg2_scroll_flags).w
0000827A                            	@return:
0000827A 4E75                       		rts
0000827C                            ;-------------------------------------------------------------------------------
0000827C                            BGScroll_Block3:
0000827C 2438 F718                  		move.l	(v_bg3screenposx).w,d2
00008280 2002                       		move.l	d2,d0
00008282 D084                       		add.l	d4,d0
00008284 21C0 F718                  		move.l	d0,(v_bg3screenposx).w
00008288 2200                       		move.l	d0,d1
0000828A 4841                       		swap	d1
0000828C 0241 0010                  		andi.w	#$10,d1
00008290 1638 F750                  		move.b	(v_bg3_xblock).w,d3
00008294 B701                       		eor.b	d3,d1
00008296 6600                       		bne.s	@return
00008298 0A38 0010 F750             		eori.b	#$10,(v_bg3_xblock).w
0000829E 9082                       		sub.l	d2,d0
000082A0 6A00                       		bpl.s	@scrollRight
000082A2 0DF8 F75A                  		bset	d6,(v_bg3_scroll_flags).w
000082A6 6000                       		bra.s	@return
000082A8                            	@scrollRight:
000082A8 5206                       		addq.b	#1,d6
000082AA 0DF8 F75A                  		bset	d6,(v_bg3_scroll_flags).w
000082AE                            	@return:
000082AE 4E75                       		rts
000082AE 4E75                       		rts
000082B0                            
000082B0                            
000082B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000082B0                            
000082B0                            ; sub_6886:
000082B0                            LoadTilesAsYouMove_BGOnly:
000082B0 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
000082B6 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
000082BC 45F8 F756                  		lea	(v_bg1_scroll_flags).w,a2
000082C0 47F8 F708                  		lea	(v_bgscreenposx).w,a3
000082C4 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
000082C8 343C 6000                  		move.w	#$6000,d2
000082CC 6100 0000                  		bsr.w	DrawBGScrollBlock1
000082D0 45F8 F758                  		lea	(v_bg2_scroll_flags).w,a2
000082D4 47F8 F710                  		lea	(v_bg2screenposx).w,a3
000082D8 6000 0000                  		bra.w	DrawBGScrollBlock2
000082DC                            ; End of function sub_6886
000082DC                            
000082DC                            ; ---------------------------------------------------------------------------
000082DC                            ; Subroutine to	display	correct	tiles as you move
000082DC                            ; ---------------------------------------------------------------------------
000082DC                            
000082DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000082DC                            
000082DC                            
000082DC                            LoadTilesAsYouMove:
000082DC 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
000082E2 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
000082E8                            		; First, update the background
000082E8 45F8 FF32                  		lea	(v_bg1_scroll_flags_dup).w,a2	; Scroll block 1 scroll flags
000082EC 47F8 FF18                  		lea	(v_bgscreenposx_dup).w,a3	; Scroll block 1 X coordinate
000082F0 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
000082F4 343C 6000                  		move.w	#$6000,d2			; VRAM thing for selecting Plane B
000082F8 6100 0000                  		bsr.w	DrawBGScrollBlock1
000082FC 45F8 FF34                  		lea	(v_bg2_scroll_flags_dup).w,a2	; Scroll block 2 scroll flags
00008300 47F8 FF20                  		lea	(v_bg2screenposx_dup).w,a3	; Scroll block 2 X coordinate
00008304 6100 0000                  		bsr.w	DrawBGScrollBlock2
00008308                            		; REV01 added a third scroll block, though, technically,
00008308                            		; the RAM for it was already there in REV00
00008308 45F8 FF36                  		lea	(v_bg3_scroll_flags_dup).w,a2	; Scroll block 3 scroll flags
0000830C 47F8 FF28                  		lea	(v_bg3screenposx_dup).w,a3	; Scroll block 3 X coordinate
00008310 6100 0000                  		bsr.w	DrawBGScrollBlock3
00008314                            		; Then, update the foreground
00008314 45F8 FF30                  		lea	(v_fg_scroll_flags_dup).w,a2	; Foreground scroll flags
00008318 47F8 FF10                  		lea	(v_screenposx_dup).w,a3		; Foreground X coordinate
0000831C 49F8 A400                  		lea	(v_lvllayout).w,a4
00008320 343C 4000                  		move.w	#$4000,d2			; VRAM thing for selecting Plane A
00008324                            		; The FG's update function is inlined here
00008324 4A12                       		tst.b	(a2)
00008326 6700                       		beq.s	locret_6952	; If there are no flags set, nothing needs updating
00008328 0892 0000                  		bclr	#0,(a2)
0000832C 6700                       		beq.s	loc_6908
0000832E                            		; Draw new tiles at the top
0000832E 78F0                       		moveq	#-16,d4	; Y coordinate. Note that 16 is the size of a block in pixels
00008330 7AF0                       		moveq	#-16,d5 ; X coordinate
00008332 6100 0000                  		bsr.w	Calc_VRAM_Pos
00008336 78F0                       		moveq	#-16,d4 ; Y coordinate
00008338 7AF0                       		moveq	#-16,d5 ; X coordinate
0000833A 6100 0000                  		bsr.w	DrawBlocks_LR
0000833E                            
0000833E                            loc_6908:
0000833E 0892 0001                  		bclr	#1,(a2)
00008342 6700                       		beq.s	loc_6922
00008344                            		; Draw new tiles at the bottom
00008344 383C 00E0                  		move.w	#224,d4	; Start at bottom of the screen. Since this draws from top to bottom, we don't need 224+16
00008348 7AF0                       		moveq	#-16,d5
0000834A 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000834E 383C 00E0                  		move.w	#224,d4
00008352 7AF0                       		moveq	#-16,d5
00008354 6100 0000                  		bsr.w	DrawBlocks_LR
00008358                            
00008358                            loc_6922:
00008358 0892 0002                  		bclr	#2,(a2)
0000835C 6700                       		beq.s	loc_6938
0000835E                            		; Draw new tiles on the left
0000835E 78F0                       		moveq	#-16,d4
00008360 7AF0                       		moveq	#-16,d5
00008362 6100 0000                  		bsr.w	Calc_VRAM_Pos
00008366 78F0                       		moveq	#-16,d4
00008368 7AF0                       		moveq	#-16,d5
0000836A 6100 0000                  		bsr.w	DrawBlocks_TB
0000836E                            
0000836E                            loc_6938:
0000836E 0892 0003                  		bclr	#3,(a2)
00008372 6700                       		beq.s	locret_6952
00008374                            		; Draw new tiles on the right
00008374 78F0                       		moveq	#-16,d4
00008376 3A3C 0140                  		move.w	#320,d5
0000837A 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000837E 78F0                       		moveq	#-16,d4
00008380 3A3C 0140                  		move.w	#320,d5
00008384 6100 0000                  		bsr.w	DrawBlocks_TB
00008388                            
00008388                            locret_6952:
00008388 4E75                       		rts	
0000838A                            ; End of function LoadTilesAsYouMove
0000838A                            
0000838A                            
0000838A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000838A                            
0000838A                            ; sub_6954:
0000838A                            DrawBGScrollBlock1:
0000838A 4A12                       		tst.b	(a2)
0000838C 6700 0000                  		beq.w	locret_69F2
00008390 0892 0000                  		bclr	#0,(a2)
00008394 6700                       		beq.s	loc_6972
00008396                            		; Draw new tiles at the top
00008396 78F0                       		moveq	#-16,d4
00008398 7AF0                       		moveq	#-16,d5
0000839A 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000839E 78F0                       		moveq	#-16,d4
000083A0 7AF0                       		moveq	#-16,d5
000083A2 6100 0000                  			bsr.w	DrawBlocks_LR
000083A6                            
000083A6                            loc_6972:
000083A6 0892 0001                  		bclr	#1,(a2)
000083AA 6700                       		beq.s	loc_698E
000083AC                            		; Draw new tiles at the top
000083AC 383C 00E0                  		move.w	#224,d4
000083B0 7AF0                       		moveq	#-16,d5
000083B2 6100 0000                  		bsr.w	Calc_VRAM_Pos
000083B6 383C 00E0                  		move.w	#224,d4
000083BA 7AF0                       		moveq	#-16,d5
000083BC 6100 0000                  			bsr.w	DrawBlocks_LR
000083C0                            
000083C0                            loc_698E:
000083C0 0892 0002                  		bclr	#2,(a2)
000083C4                            
000083C4                            
000083C4 6700                       			beq.s	locj_6D56
000083C6                            			; Draw new tiles on the left
000083C6 78F0                       			moveq	#-16,d4
000083C8 7AF0                       			moveq	#-16,d5
000083CA 6100 0000                  			bsr.w	Calc_VRAM_Pos
000083CE 78F0                       			moveq	#-16,d4
000083D0 7AF0                       			moveq	#-16,d5
000083D2 6100 0000                  			bsr.w	DrawBlocks_TB
000083D6                            	locj_6D56:
000083D6                            
000083D6 0892 0003                  			bclr	#3,(a2)
000083DA 6700                       			beq.s	locj_6D70
000083DC                            			; Draw new tiles on the right
000083DC 78F0                       			moveq	#-16,d4
000083DE 3A3C 0140                  			move.w	#320,d5
000083E2 6100 0000                  			bsr.w	Calc_VRAM_Pos
000083E6 78F0                       			moveq	#-16,d4
000083E8 3A3C 0140                  			move.w	#320,d5
000083EC 6100 0000                  			bsr.w	DrawBlocks_TB
000083F0                            	locj_6D70:
000083F0                            
000083F0 0892 0004                  			bclr	#4,(a2)
000083F4 6700                       			beq.s	locj_6D88
000083F6                            			; Draw entire row at the top
000083F6 78F0                       			moveq	#-16,d4
000083F8 7A00                       			moveq	#0,d5
000083FA 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
000083FE 78F0                       			moveq	#-16,d4
00008400 7A00                       			moveq	#0,d5
00008402 7C1F                       			moveq	#(512/16)-1,d6
00008404 6100 0000                  			bsr.w	DrawBlocks_LR_3
00008408                            	locj_6D88:
00008408                            
00008408 0892 0005                  			bclr	#5,(a2)
0000840C 6700                       			beq.s	locret_69F2
0000840E                            			; Draw entire row at the bottom
0000840E 383C 00E0                  			move.w	#224,d4
00008412 7A00                       			moveq	#0,d5
00008414 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
00008418 383C 00E0                  			move.w	#224,d4
0000841C 7A00                       			moveq	#0,d5
0000841E 7C1F                       			moveq	#(512/16)-1,d6
00008420 6100 0000                  			bsr.w	DrawBlocks_LR_3
00008424                            
00008424                            locret_69F2:
00008424 4E75                       		rts	
00008426                            ; End of function DrawBGScrollBlock1
00008426                            
00008426                            
00008426                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008426                            
00008426                            ; Essentially, this draws everything that isn't scroll block 1
00008426                            ; sub_69F4:
00008426                            DrawBGScrollBlock2:
00008426                            
00008426 4A12                       			tst.b	(a2)
00008428 6700 0000                  			beq.w	locj_6DF2
0000842C 0C38 0005 FE10             			cmpi.b	#id_SBZ,(v_zone).w
00008432 6700 0000                  			beq.w	Draw_SBz
00008436 0892 0000                  			bclr	#0,(a2)
0000843A 6700                       			beq.s	locj_6DD2
0000843C                            			; Draw new tiles on the left
0000843C 383C 0070                  			move.w	#224/2,d4	; Draw the bottom half of the screen
00008440 7AF0                       			moveq	#-16,d5
00008442 6100 0000                  			bsr.w	Calc_VRAM_Pos
00008446 383C 0070                  			move.w	#224/2,d4
0000844A 7AF0                       			moveq	#-16,d5
0000844C 7C02                       			moveq	#3-1,d6		; Draw three rows... could this be a repurposed version of the above unused code?
0000844E 6100 0000                  			bsr.w	DrawBlocks_TB_2
00008452                            	locj_6DD2:
00008452 0892 0001                  			bclr	#1,(a2)
00008456 6700                       			beq.s	locj_6DF2
00008458                            			; Draw new tiles on the right
00008458 383C 0070                  			move.w	#224/2,d4
0000845C 3A3C 0140                  			move.w	#320,d5
00008460 6100 0000                  			bsr.w	Calc_VRAM_Pos
00008464 383C 0070                  			move.w	#224/2,d4
00008468 3A3C 0140                  			move.w	#320,d5
0000846C 7C02                       			moveq	#3-1,d6
0000846E 6100 0000                  			bsr.w	DrawBlocks_TB_2
00008472                            	locj_6DF2:
00008472 4E75                       			rts
00008474                            ;===============================================================================
00008474                            	locj_6DF4:
00008474 0000 0000 0006 0606 0606+  			dc.b $00,$00,$00,$00,$00,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$04
00008484 0404 0404 0404 0202 0202+  			dc.b $04,$04,$04,$04,$04,$04,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00008494 0200                       			dc.b $02,$00						
00008496                            ;===============================================================================
00008496                            	Draw_SBz:
00008496 78F0                       			moveq	#-16,d4
00008498 0892 0000                  			bclr	#0,(a2)
0000849C 6600                       			bne.s	locj_6E28
0000849E 0892 0001                  			bclr	#1,(a2)
000084A2 6700                       			beq.s	locj_6E72
000084A4 383C 00E0                  			move.w	#224,d4
000084A8                            	locj_6E28:
000084A8 41F9 0000 8475             			lea	(locj_6DF4+1).l,a0
000084AE 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
000084B2 D044                       			add.w	d4,d0
000084B4 0240 01F0                  			andi.w	#$1F0,d0
000084B8 E848                       			lsr.w	#4,d0
000084BA 1030 0000                  			move.b	(a0,d0.w),d0
000084BE 47F9 0000 0000             			lea	(locj_6FE4).l,a3
000084C4 3673 0000                  			movea.w	(a3,d0.w),a3
000084C8 6700                       			beq.s	locj_6E5E
000084CA 7AF0                       			moveq	#-16,d5
000084CC 48E7 0C00                  			movem.l	d4/d5,-(sp)
000084D0 6100 0000                  			bsr.w	Calc_VRAM_Pos
000084D4 4CDF 0030                  			movem.l	(sp)+,d4/d5
000084D8 6100 0000                  			bsr.w	DrawBlocks_LR
000084DC 6000                       			bra.s	locj_6E72
000084DE                            ;===============================================================================
000084DE                            	locj_6E5E:
000084DE 7A00                       			moveq	#0,d5
000084E0 48E7 0C00                  			movem.l	d4/d5,-(sp)
000084E4 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
000084E8 4CDF 0030                  			movem.l	(sp)+,d4/d5
000084EC 7C1F                       			moveq	#(512/16)-1,d6
000084EE 6100 0000                  			bsr.w	DrawBlocks_LR_3
000084F2                            	locj_6E72:
000084F2 4A12                       			tst.b	(a2)
000084F4 6600                       			bne.s	locj_6E78
000084F6 4E75                       			rts
000084F8                            ;===============================================================================			
000084F8                            	locj_6E78:
000084F8 78F0                       			moveq	#-16,d4
000084FA 7AF0                       			moveq	#-16,d5
000084FC 1012                       			move.b	(a2),d0
000084FE 0200 00A8                  			andi.b	#$A8,d0
00008502 6700                       			beq.s	locj_6E8C
00008504 E208                       			lsr.b	#1,d0
00008506 1480                       			move.b	d0,(a2)
00008508 3A3C 0140                  			move.w	#320,d5
0000850C                            	locj_6E8C:
0000850C 41F9 0000 8474             			lea	(locj_6DF4).l,a0
00008512 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008516 0240 01F0                  			andi.w	#$1F0,d0
0000851A E848                       			lsr.w	#4,d0
0000851C 41F0 0000                  			lea	(a0,d0.w),a0
00008520 6000 0000                  			bra.w	locj_6FEC						
00008524                            ;===============================================================================
00008524                            
00008524                            
00008524                            	; locj_6EA4:
00008524                            	DrawBGScrollBlock3:
00008524 4A12                       			tst.b	(a2)
00008526 6700 0000                  			beq.w	locj_6EF0
0000852A 0C38 0002 FE10             			cmpi.b	#id_MZ,(v_zone).w
00008530 6700 0000                  			beq.w	Draw_Mz
00008534 0892 0000                  			bclr	#0,(a2)
00008538 6700                       			beq.s	locj_6ED0
0000853A                            			; Draw new tiles on the left
0000853A 383C 0040                  			move.w	#$40,d4
0000853E 7AF0                       			moveq	#-16,d5
00008540 6100 0000                  			bsr.w	Calc_VRAM_Pos
00008544 383C 0040                  			move.w	#$40,d4
00008548 7AF0                       			moveq	#-16,d5
0000854A 7C02                       			moveq	#3-1,d6
0000854C 6100 0000                  			bsr.w	DrawBlocks_TB_2
00008550                            	locj_6ED0:
00008550 0892 0001                  			bclr	#1,(a2)
00008554 6700                       			beq.s	locj_6EF0
00008556                            			; Draw new tiles on the right
00008556 383C 0040                  			move.w	#$40,d4
0000855A 3A3C 0140                  			move.w	#320,d5
0000855E 6100 0000                  			bsr.w	Calc_VRAM_Pos
00008562 383C 0040                  			move.w	#$40,d4
00008566 3A3C 0140                  			move.w	#320,d5
0000856A 7C02                       			moveq	#3-1,d6
0000856C 6100 0000                  			bsr.w	DrawBlocks_TB_2
00008570                            	locj_6EF0:
00008570 4E75                       			rts
00008572                            	locj_6EF2:
00008572 0000 0000 0000 0606 0404+  			dc.b $00,$00,$00,$00,$00,$00,$06,$06,$04,$04,$04,$04,$04,$04,$04,$04
00008582 0402 0202 0202 0202 0202+  			dc.b $04,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00008592 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
000085A2 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
000085B2 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
000085C2 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
000085D2 0200                       			dc.b $02,$00
000085D4                            ;===============================================================================
000085D4                            	Draw_Mz:
000085D4 78F0                       			moveq	#-16,d4
000085D6 0892 0000                  			bclr	#0,(a2)
000085DA 6600                       			bne.s	locj_6F66
000085DC 0892 0001                  			bclr	#1,(a2)
000085E0 6700                       			beq.s	locj_6FAE
000085E2 383C 00E0                  			move.w	#224,d4
000085E6                            	locj_6F66:
000085E6 41F9 0000 8573             			lea	(locj_6EF2+1).l,a0
000085EC 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
000085F0 0440 0200                  			subi.w	#$200,d0
000085F4 D044                       			add.w	d4,d0
000085F6 0240 07F0                  			andi.w	#$7F0,d0
000085FA E848                       			lsr.w	#4,d0
000085FC 1030 0000                  			move.b	(a0,d0.w),d0
00008600 367B 0000                  			movea.w	locj_6FE4(pc,d0.w),a3
00008604 6700                       			beq.s	locj_6F9A
00008606 7AF0                       			moveq	#-16,d5
00008608 48E7 0C00                  			movem.l	d4/d5,-(sp)
0000860C 6100 0000                  			bsr.w	Calc_VRAM_Pos
00008610 4CDF 0030                  			movem.l	(sp)+,d4/d5
00008614 6100 0000                  			bsr.w	DrawBlocks_LR
00008618 6000                       			bra.s	locj_6FAE
0000861A                            ;===============================================================================
0000861A                            	locj_6F9A:
0000861A 7A00                       			moveq	#0,d5
0000861C 48E7 0C00                  			movem.l	d4/d5,-(sp)
00008620 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
00008624 4CDF 0030                  			movem.l	(sp)+,d4/d5
00008628 7C1F                       			moveq	#(512/16)-1,d6
0000862A 6100 0000                  			bsr.w	DrawBlocks_LR_3
0000862E                            	locj_6FAE:
0000862E 4A12                       			tst.b	(a2)
00008630 6600                       			bne.s	locj_6FB4
00008632 4E75                       			rts
00008634                            ;===============================================================================			
00008634                            	locj_6FB4:
00008634 78F0                       			moveq	#-16,d4
00008636 7AF0                       			moveq	#-16,d5
00008638 1012                       			move.b	(a2),d0
0000863A 0200 00A8                  			andi.b	#$A8,d0
0000863E 6700                       			beq.s	locj_6FC8
00008640 E208                       			lsr.b	#1,d0
00008642 1480                       			move.b	d0,(a2)
00008644 3A3C 0140                  			move.w	#320,d5
00008648                            	locj_6FC8:
00008648 41F9 0000 8572             			lea	(locj_6EF2).l,a0
0000864E 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008652 0440 0200                  			subi.w	#$200,d0
00008656 0240 07F0                  			andi.w	#$7F0,d0
0000865A E848                       			lsr.w	#4,d0
0000865C 41F0 0000                  			lea	(a0,d0.w),a0
00008660 6000 0000                  			bra.w	locj_6FEC
00008664                            ;===============================================================================			
00008664                            	locj_6FE4:
00008664 FF18 FF18 FF20 FF28        			dc.w v_bgscreenposx_dup, v_bgscreenposx_dup, v_bg2screenposx_dup, v_bg3screenposx_dup
0000866C                            	locj_6FEC:
0000866C 7C0F                       			moveq	#((224+16+16)/16)-1,d6
0000866E 2E3C 0080 0000             			move.l	#$800000,d7
00008674                            	locj_6FF4:			
00008674 7000                       			moveq	#0,d0
00008676 1018                       			move.b	(a0)+,d0
00008678 0112                       			btst	d0,(a2)
0000867A 6700                       			beq.s	locj_701C
0000867C 367B 00E6                  			move.w	locj_6FE4(pc,d0.w),a3
00008680 48E7 0C80                  			movem.l	d4/d5/a0,-(sp)
00008684 48E7 0C00                  			movem.l	d4/d5,-(sp)
00008688 6100 0000                  			bsr.w	GetBlockData
0000868C 4CDF 0030                  			movem.l	(sp)+,d4/d5
00008690 6100 0000                  			bsr.w	Calc_VRAM_Pos
00008694 6100 0000                  			bsr.w	DrawBlock
00008698 4CDF 0130                  			movem.l	(sp)+,d4/d5/a0
0000869C                            	locj_701C:
0000869C 0644 0010                  			addi.w	#16,d4
000086A0 51CE FFD2                  			dbf	d6,locj_6FF4
000086A4 4212                       			clr.b	(a2)
000086A6 4E75                       			rts			
000086A8                            
000086A8                            
000086A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000086A8                            
000086A8                            ; Don't be fooled by the name: this function's for drawing from left to right
000086A8                            ; when the camera's moving up or down
000086A8                            ; DrawTiles_LR:
000086A8                            DrawBlocks_LR:
000086A8 7C15                       		moveq	#((320+16+16)/16)-1,d6	; Draw the entire width of the screen + two extra columns
000086AA                            ; DrawTiles_LR_2:
000086AA                            DrawBlocks_LR_2:
000086AA 2E3C 0080 0000             		move.l	#$800000,d7	; Delta between rows of tiles
000086B0 2200                       		move.l	d0,d1
000086B2                            
000086B2                            	@loop:
000086B2 48E7 0C00                  		movem.l	d4-d5,-(sp)
000086B6 6100 0000                  		bsr.w	GetBlockData
000086BA 2001                       		move.l	d1,d0
000086BC 6100 0000                  		bsr.w	DrawBlock
000086C0 5801                       		addq.b	#4,d1		; Two tiles ahead
000086C2 0201 007F                  		andi.b	#$7F,d1		; Wrap around row
000086C6 4CDF 0030                  		movem.l	(sp)+,d4-d5
000086CA 0645 0010                  		addi.w	#16,d5		; Move X coordinate one block ahead
000086CE 51CE FFE2                  		dbf	d6,@loop
000086D2 4E75                       		rts
000086D4                            ; End of function DrawBlocks_LR
000086D4                            
000086D4                            ; DrawTiles_LR_3:
000086D4                            DrawBlocks_LR_3:
000086D4 2E3C 0080 0000             		move.l	#$800000,d7
000086DA 2200                       		move.l	d0,d1
000086DC                            
000086DC                            	@loop:
000086DC 48E7 0C00                  		movem.l	d4-d5,-(sp)
000086E0 6100 0000                  		bsr.w	GetBlockData_2
000086E4 2001                       		move.l	d1,d0
000086E6 6100 0000                  		bsr.w	DrawBlock
000086EA 5801                       		addq.b	#4,d1
000086EC 0201 007F                  		andi.b	#$7F,d1
000086F0 4CDF 0030                  		movem.l	(sp)+,d4-d5
000086F4 0645 0010                  		addi.w	#16,d5
000086F8 51CE FFE2                  		dbf	d6,@loop
000086FC 4E75                       		rts	
000086FE                            ; End of function DrawBlocks_LR_3
000086FE                            
000086FE                            
000086FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000086FE                            
000086FE                            ; Don't be fooled by the name: this function's for drawing from top to bottom
000086FE                            ; when the camera's moving left or right
000086FE                            ; DrawTiles_TB:
000086FE                            DrawBlocks_TB:
000086FE 7C0F                       		moveq	#((224+16+16)/16)-1,d6	; Draw the entire height of the screen + two extra rows
00008700                            ; DrawTiles_TB_2:
00008700                            DrawBlocks_TB_2:
00008700 2E3C 0080 0000             		move.l	#$800000,d7	; Delta between rows of tiles
00008706 2200                       		move.l	d0,d1
00008708                            
00008708                            	@loop:
00008708 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000870C 6100 0000                  		bsr.w	GetBlockData
00008710 2001                       		move.l	d1,d0
00008712 6100 0000                  		bsr.w	DrawBlock
00008716 0641 0100                  		addi.w	#$100,d1	; Two rows ahead
0000871A 0241 0FFF                  		andi.w	#$FFF,d1	; Wrap around plane
0000871E 4CDF 0030                  		movem.l	(sp)+,d4-d5
00008722 0644 0010                  		addi.w	#16,d4		; Move X coordinate one block ahead
00008726 51CE FFE0                  		dbf	d6,@loop
0000872A 4E75                       		rts	
0000872C                            ; End of function DrawBlocks_TB_2
0000872C                            
0000872C                            
0000872C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000872C                            
0000872C                            ; Draws a block's worth of tiles
0000872C                            ; Parameters:
0000872C                            ; a0 = Pointer to block metadata (block index and X/Y flip)
0000872C                            ; a1 = Pointer to block
0000872C                            ; a5 = Pointer to VDP command port
0000872C                            ; a6 = Pointer to VDP data port
0000872C                            ; d0 = VRAM command to access plane
0000872C                            ; d2 = VRAM plane A/B specifier
0000872C                            ; d7 = Plane row delta
0000872C                            ; DrawTiles:
0000872C                            DrawBlock:
0000872C 8042                       		or.w	d2,d0	; OR in that plane A/B specifier to the VRAM command
0000872E 4840                       		swap	d0
00008730 0810 0004                  		btst	#4,(a0)	; Check Y-flip bit
00008734 6600                       		bne.s	DrawFlipY
00008736 0810 0003                  		btst	#3,(a0)	; Check X-flip bit
0000873A 6600                       		bne.s	DrawFlipX
0000873C 2A80                       		move.l	d0,(a5)
0000873E 2C99                       		move.l	(a1)+,(a6)	; Write top two tiles
00008740 D087                       		add.l	d7,d0		; Next row
00008742 2A80                       		move.l	d0,(a5)
00008744 2C99                       		move.l	(a1)+,(a6)	; Write bottom two tiles
00008746 4E75                       		rts	
00008748                            ; ===========================================================================
00008748                            
00008748                            DrawFlipX:
00008748 2A80                       		move.l	d0,(a5)
0000874A 2819                       		move.l	(a1)+,d4
0000874C 0A84 0800 0800             		eori.l	#$8000800,d4	; Invert X-flip bits of each tile
00008752 4844                       		swap	d4		; Swap the tiles around
00008754 2C84                       		move.l	d4,(a6)		; Write top two tiles
00008756 D087                       		add.l	d7,d0		; Next row
00008758 2A80                       		move.l	d0,(a5)
0000875A 2819                       		move.l	(a1)+,d4
0000875C 0A84 0800 0800             		eori.l	#$8000800,d4
00008762 4844                       		swap	d4
00008764 2C84                       		move.l	d4,(a6)		; Write bottom two tiles
00008766 4E75                       		rts	
00008768                            ; ===========================================================================
00008768                            
00008768                            DrawFlipY:
00008768 0810 0003                  		btst	#3,(a0)
0000876C 6600                       		bne.s	DrawFlipXY
0000876E 2A80                       		move.l	d0,(a5)
00008770 2A19                       		move.l	(a1)+,d5
00008772 2819                       		move.l	(a1)+,d4
00008774 0A84 1000 1000             		eori.l	#$10001000,d4
0000877A 2C84                       		move.l	d4,(a6)
0000877C D087                       		add.l	d7,d0
0000877E 2A80                       		move.l	d0,(a5)
00008780 0A85 1000 1000             		eori.l	#$10001000,d5
00008786 2C85                       		move.l	d5,(a6)
00008788 4E75                       		rts	
0000878A                            ; ===========================================================================
0000878A                            
0000878A                            DrawFlipXY:
0000878A 2A80                       		move.l	d0,(a5)
0000878C 2A19                       		move.l	(a1)+,d5
0000878E 2819                       		move.l	(a1)+,d4
00008790 0A84 1800 1800             		eori.l	#$18001800,d4
00008796 4844                       		swap	d4
00008798 2C84                       		move.l	d4,(a6)
0000879A D087                       		add.l	d7,d0
0000879C 2A80                       		move.l	d0,(a5)
0000879E 0A85 1800 1800             		eori.l	#$18001800,d5
000087A4 4845                       		swap	d5
000087A6 2C85                       		move.l	d5,(a6)
000087A8 4E75                       		rts	
000087AA                            ; End of function DrawBlocks
000087AA                            
000087AA                            ; ===========================================================================
000087AA                            ; unused garbage
000087AA                            
000087AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000087AA                            
000087AA                            ; Gets address of block at a certain coordinate
000087AA                            ; Parameters:
000087AA                            ; a4 = Pointer to level layout
000087AA                            ; d4 = Relative Y coordinate
000087AA                            ; d5 = Relative X coordinate
000087AA                            ; Returns:
000087AA                            ; a0 = Address of block metadata
000087AA                            ; a1 = Address of block
000087AA                            ; DrawBlocks:
000087AA                            GetBlockData:
000087AA DA53                       			add.w	(a3),d5
000087AC                            	GetBlockData_2:
000087AC D86B 0004                  			add.w	4(a3),d4
000087B0 43F8 B000                  			lea	(v_16x16).w,a1
000087B4                            		; Turn Y coordinate into index into level layout
000087B4 3604                       		move.w	d4,d3
000087B6 E24B                       		lsr.w	#1,d3
000087B8 0243 0380                  		andi.w	#$380,d3
000087BC                            		; Turn X coordinate into index into level layout
000087BC E64D                       		lsr.w	#3,d5
000087BE 3005                       		move.w	d5,d0
000087C0 EA48                       		lsr.w	#5,d0
000087C2 0240 007F                  		andi.w	#$7F,d0
000087C6                            		; Get chunk from level layout
000087C6 D043                       		add.w	d3,d0
000087C8 76FF                       		moveq	#-1,d3
000087CA 1634 0000                  		move.b	(a4,d0.w),d3
000087CE 6700                       		beq.s	locret_6C1E	; If chunk 00, just return a pointer to the first block (expected to be empty)
000087D0                            		; Turn chunk ID into index into chunk table
000087D0 5303                       		subq.b	#1,d3
000087D2 0243 007F                  		andi.w	#$7F,d3
000087D6 EE5B                       		ror.w	#7,d3
000087D8                            		; Turn Y coordinate into index into chunk
000087D8 D844                       		add.w	d4,d4
000087DA 0244 01E0                  		andi.w	#$1E0,d4
000087DE                            		; Turn X coordinate into index into chunk
000087DE 0245 001E                  		andi.w	#$1E,d5
000087E2                            		; Get block metadata from chunk
000087E2 D644                       		add.w	d4,d3
000087E4 D645                       		add.w	d5,d3
000087E6 2043                       		movea.l	d3,a0
000087E8 3610                       		move.w	(a0),d3
000087EA                            		; Turn block ID into address
000087EA 0243 03FF                  		andi.w	#$3FF,d3
000087EE E74B                       		lsl.w	#3,d3
000087F0 D2C3                       		adda.w	d3,a1
000087F2                            
000087F2                            locret_6C1E:
000087F2 4E75                       		rts	
000087F4                            ; End of function GetBlockData
000087F4                            
000087F4                            
000087F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000087F4                            
000087F4                            ; Produces a VRAM plane access command from coordinates
000087F4                            ; Parameters:
000087F4                            ; d4 = Relative Y coordinate
000087F4                            ; d5 = Relative X coordinate
000087F4                            ; Returns VDP command in d0
000087F4                            Calc_VRAM_Pos:
000087F4 DA53                       			add.w	(a3),d5
000087F6                            	Calc_VRAM_Pos_2:
000087F6 D86B 0004                  			add.w	4(a3),d4
000087FA                            		; Floor the coordinates to the nearest pair of tiles (the size of a block).
000087FA                            		; Also note that this wraps the value to the size of the plane:
000087FA                            		; The plane is 64*8 wide, so wrap at $100, and it's 32*8 tall, so wrap at $200
000087FA 0244 00F0                  		andi.w	#$F0,d4
000087FE 0245 01F0                  		andi.w	#$1F0,d5
00008802                            		; Transform the adjusted coordinates into a VDP command
00008802 E94C                       		lsl.w	#4,d4
00008804 E44D                       		lsr.w	#2,d5
00008806 D845                       		add.w	d5,d4
00008808 7003                       		moveq	#3,d0	; Highest bits of plane VRAM address
0000880A 4840                       		swap	d0
0000880C 3004                       		move.w	d4,d0
0000880E 4E75                       		rts	
00008810                            ; End of function Calc_VRAM_Pos
00008810                            
00008810                            
00008810                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008810                            ; not used
00008810                            
00008810                            ; This is just like Calc_VRAM_Pos, but seemingly for an earlier
00008810                            ; VRAM layout: the only difference is the high bits of the
00008810                            ; plane's VRAM address, which are 10 instead of 11.
00008810                            ; Both the foreground and background are at $C000 and $E000
00008810                            ; respectively, so this one starting at $8000 makes no sense.
00008810                            ; sub_6C3C:
00008810                            Calc_VRAM_Pos_Unknown:
00008810 D86B 0004                  		add.w	4(a3),d4
00008814 DA53                       		add.w	(a3),d5
00008816 0244 00F0                  		andi.w	#$F0,d4
0000881A 0245 01F0                  		andi.w	#$1F0,d5
0000881E E94C                       		lsl.w	#4,d4
00008820 E44D                       		lsr.w	#2,d5
00008822 D845                       		add.w	d5,d4
00008824 7002                       		moveq	#2,d0
00008826 4840                       		swap	d0
00008828 3004                       		move.w	d4,d0
0000882A 4E75                       		rts	
0000882C                            ; End of function Calc_VRAM_Pos_Unknown
0000882C                            
0000882C                            ; ---------------------------------------------------------------------------
0000882C                            ; Subroutine to	load tiles as soon as the level	appears
0000882C                            ; ---------------------------------------------------------------------------
0000882C                            
0000882C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000882C                            
0000882C                            
0000882C                            LoadTilesFromStart:
0000882C 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00008832 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00008838 47F8 F700                  		lea	(v_screenposx).w,a3
0000883C 49F8 A400                  		lea	(v_lvllayout).w,a4
00008840 343C 4000                  		move.w	#$4000,d2
00008844 6100                       		bsr.s	DrawChunks
00008846 47F8 F708                  		lea	(v_bgscreenposx).w,a3
0000884A 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
0000884E 343C 6000                  		move.w	#$6000,d2
00008852 4A38 FE10                  			tst.b	(v_zone).w
00008856 6700 0000                  			beq.w	Draw_GHz_Bg
0000885A 0C38 0002 FE10             			cmpi.b	#id_MZ,(v_zone).w
00008860 6700 0000                  			beq.w	Draw_Mz_Bg
00008864 0C78 0500 FE10             			cmpi.w	#(id_SBZ<<8)+0,(v_zone).w
0000886A 6700 0000                  			beq.w	Draw_SBz_Bg
0000886E 0C38 0006 FE10             			cmpi.b	#id_EndZ,(v_zone).w
00008874 6700 0000                  			beq.w	Draw_GHz_Bg
00008878                            ; End of function LoadTilesFromStart
00008878                            
00008878                            
00008878                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008878                            
00008878                            
00008878                            DrawChunks:
00008878 78F0                       		moveq	#-16,d4
0000887A 7C0F                       		moveq	#((224+16+16)/16)-1,d6
0000887C                            
0000887C                            	@loop:
0000887C 48E7 0E00                  		movem.l	d4-d6,-(sp)
00008880 7A00                       		moveq	#0,d5
00008882 3204                       		move.w	d4,d1
00008884 6100 FF6E                  		bsr.w	Calc_VRAM_Pos
00008888 3801                       		move.w	d1,d4
0000888A 7A00                       		moveq	#0,d5
0000888C 7C1F                       		moveq	#(512/16)-1,d6
0000888E 6100 FE1A                  		bsr.w	DrawBlocks_LR_2
00008892 4CDF 0070                  		movem.l	(sp)+,d4-d6
00008896 0644 0010                  		addi.w	#16,d4
0000889A 51CE FFE0                  		dbf	d6,@loop
0000889E 4E75                       		rts	
000088A0                            ; End of function DrawChunks
000088A0                            
000088A0                            	Draw_GHz_Bg:
000088A0 7800                       			moveq	#0,d4
000088A2 7C0F                       			moveq	#((224+16+16)/16)-1,d6
000088A4                            	locj_7224:			
000088A4 48E7 0E00                  			movem.l	d4-d6,-(sp)
000088A8 41F9 0000 0000             			lea	(locj_724a),a0
000088AE 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
000088B2 D044                       			add.w	d4,d0
000088B4 0240 00F0                  			andi.w	#$F0,d0
000088B8 6100 0000                  			bsr.w	locj_72Ba
000088BC 4CDF 0070                  			movem.l	(sp)+,d4-d6
000088C0 0644 0010                  			addi.w	#16,d4
000088C4 51CE FFDE                  			dbf	d6,locj_7224
000088C8 4E75                       			rts
000088CA                            	locj_724a:
000088CA 0000 0000 0606 0604 0404+  			dc.b $00,$00,$00,$00,$06,$06,$06,$04,$04,$04,$00,$00,$00,$00,$00,$00
000088DA                            ;-------------------------------------------------------------------------------
000088DA                            	Draw_Mz_Bg:;locj_725a:
000088DA 78F0                       			moveq	#-16,d4
000088DC 7C0F                       			moveq	#((224+16+16)/16)-1,d6
000088DE                            	locj_725E:			
000088DE 48E7 0E00                  			movem.l	d4-d6,-(sp)
000088E2 41FA FC8F                  			lea	(locj_6EF2+1),a0
000088E6 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
000088EA 0440 0200                  			subi.w	#$200,d0
000088EE D044                       			add.w	d4,d0
000088F0 0240 07F0                  			andi.w	#$7F0,d0
000088F4 6100 0000                  			bsr.w	locj_72Ba
000088F8 4CDF 0070                  			movem.l	(sp)+,d4-d6
000088FC 0644 0010                  			addi.w	#16,d4
00008900 51CE FFDC                  			dbf	d6,locj_725E
00008904 4E75                       			rts
00008906                            ;-------------------------------------------------------------------------------
00008906                            	Draw_SBz_Bg:;locj_7288:
00008906 78F0                       			moveq	#-16,d4
00008908 7C0F                       			moveq	#((224+16+16)/16)-1,d6
0000890A                            	locj_728C:			
0000890A 48E7 0E00                  			movem.l	d4-d6,-(sp)
0000890E 41FA FB65                  			lea	(locj_6DF4+1),a0
00008912 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008916 D044                       			add.w	d4,d0
00008918 0240 01F0                  			andi.w	#$1F0,d0
0000891C 6100 0000                  			bsr.w	locj_72Ba
00008920 4CDF 0070                  			movem.l	(sp)+,d4-d6
00008924 0644 0010                  			addi.w	#16,d4
00008928 51CE FFE0                  			dbf	d6,locj_728C
0000892C 4E75                       			rts
0000892E                            ;-------------------------------------------------------------------------------
0000892E                            	locj_72B2:
0000892E F708 F708 F710 F718        			dc.w v_bgscreenposx, v_bgscreenposx, v_bg2screenposx, v_bg3screenposx
00008936                            	locj_72Ba:
00008936 E848                       			lsr.w	#4,d0
00008938 1030 0000                  			move.b	(a0,d0.w),d0
0000893C 367B 00F0                  			movea.w	locj_72B2(pc,d0.w),a3
00008940 6700                       			beq.s	locj_72da
00008942 7AF0                       			moveq	#-16,d5
00008944 48E7 0C00                  			movem.l	d4/d5,-(sp)
00008948 6100 FEAA                  			bsr.w	Calc_VRAM_Pos
0000894C 4CDF 0030                  			movem.l	(sp)+,d4/d5
00008950 6100 FD56                  			bsr.w	DrawBlocks_LR
00008954 6000                       			bra.s	locj_72EE
00008956                            	locj_72da:
00008956 7A00                       			moveq	#0,d5
00008958 48E7 0C00                  			movem.l	d4/d5,-(sp)
0000895C 6100 FE98                  			bsr.w	Calc_VRAM_Pos_2
00008960 4CDF 0030                  			movem.l	(sp)+,d4/d5
00008964 7C1F                       			moveq	#(512/16)-1,d6
00008966 6100 FD6C                  			bsr.w	DrawBlocks_LR_3
0000896A                            	locj_72EE:
0000896A 4E75                       			rts
0000896C                            
0000896C                            ; ---------------------------------------------------------------------------
0000896C                            ; Subroutine to load basic level data
0000896C                            ; ---------------------------------------------------------------------------
0000896C                            
0000896C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000896C                            
0000896C                            
0000896C                            LevelDataLoad:
0000896C 7000                       		moveq	#0,d0
0000896E 1038 FE10                  		move.b	(v_zone).w,d0
00008972 E948                       		lsl.w	#4,d0
00008974 45F9 0000 0000             		lea	(LevelHeaders).l,a2
0000897A 45F2 0000                  		lea	(a2,d0.w),a2
0000897E 2F0A                       		move.l	a2,-(sp)
00008980 588A                       		addq.l	#4,a2
00008982 205A                       		movea.l	(a2)+,a0
00008984 43F8 B000                  		lea	(v_16x16).w,a1	; RAM address for 16x16 mappings
00008988 303C 0000                  		move.w	#0,d0
0000898C 6100 8EFA                  		bsr.w	EniDec
00008990 205A                       		movea.l	(a2)+,a0
00008992 43F9 00FF 0000             		lea	(v_256x256).l,a1 ; RAM address for 256x256 mappings
00008998 6100 906C                  		bsr.w	KosDec
0000899C 6100 0000                  		bsr.w	LevelLayoutLoad
000089A0 301A                       		move.w	(a2)+,d0
000089A2 3012                       		move.w	(a2),d0
000089A4 0240 00FF                  		andi.w	#$FF,d0
000089A8 0C78 0103 FE10             		cmpi.w	#(id_LZ<<8)+3,(v_zone).w ; is level SBZ3 (LZ4) ?
000089AE 6600                       		bne.s	@notSBZ3	; if not, branch
000089B0 700C                       		moveq	#palid_SBZ3,d0	; use SB3 palette
000089B2                            
000089B2                            	@notSBZ3:
000089B2 0C78 0501 FE10             		cmpi.w	#(id_SBZ<<8)+1,(v_zone).w ; is level SBZ2?
000089B8 6700                       		beq.s	@isSBZorFZ	; if yes, branch
000089BA 0C78 0502 FE10             		cmpi.w	#(id_SBZ<<8)+2,(v_zone).w ; is level FZ?
000089C0 6600                       		bne.s	@normalpal	; if not, branch
000089C2                            
000089C2                            	@isSBZorFZ:
000089C2 700E                       		moveq	#palid_SBZ2,d0	; use SBZ2/FZ palette
000089C4                            
000089C4                            	@normalpal:
000089C4 6100 9A66                  		bsr.w	PalLoad1	; load palette (based on d0)
000089C8 245F                       		movea.l	(sp)+,a2
000089CA 584A                       		addq.w	#4,a2		; read number for 2nd PLC
000089CC 7000                       		moveq	#0,d0
000089CE 1012                       		move.b	(a2),d0
000089D0 6700                       		beq.s	@skipPLC	; if 2nd PLC is 0 (i.e. the ending sequence), branch
000089D2 6100 8D16                  		bsr.w	AddPLC		; load pattern load cues
000089D6                            
000089D6                            	@skipPLC:
000089D6 4E75                       		rts	
000089D8                            ; End of function LevelDataLoad
000089D8                            
000089D8                            ; ---------------------------------------------------------------------------
000089D8                            ; Level	layout loading subroutine
000089D8                            ; ---------------------------------------------------------------------------
000089D8                            
000089D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000089D8                            
000089D8                            
000089D8                            LevelLayoutLoad:
000089D8 47F8 A400                  		lea	(v_lvllayout).w,a3
000089DC 323C 01FF                  		move.w	#$1FF,d1
000089E0 7000                       		moveq	#0,d0
000089E2                            
000089E2                            LevLoad_ClrRam:
000089E2 26C0                       		move.l	d0,(a3)+
000089E4 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($A400-A7FF)
000089E8                            
000089E8 47F8 A400                  		lea	(v_lvllayout).w,a3 ; RAM address for level layout
000089EC 7200                       		moveq	#0,d1
000089EE 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
000089F2 47F8 A440                  		lea	(v_lvllayout+$40).w,a3 ; RAM address for background layout
000089F6 7202                       		moveq	#2,d1
000089F8                            ; End of function LevelLayoutLoad
000089F8                            
000089F8                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
000089F8                            
000089F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000089F8                            
000089F8                            
000089F8                            LevelLayoutLoad2:
000089F8 3038 FE10                  		move.w	(v_zone).w,d0
000089FC ED08                       		lsl.b	#6,d0
000089FE EA48                       		lsr.w	#5,d0
00008A00 3400                       		move.w	d0,d2
00008A02 D040                       		add.w	d0,d0
00008A04 D042                       		add.w	d2,d0
00008A06 D041                       		add.w	d1,d0
00008A08 43F9 0000 0000             		lea	(Level_Index).l,a1
00008A0E 3031 0000                  		move.w	(a1,d0.w),d0
00008A12 43F1 0000                  		lea	(a1,d0.w),a1
00008A16 7200                       		moveq	#0,d1
00008A18 3401                       		move.w	d1,d2
00008A1A 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
00008A1C 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
00008A1E                            
00008A1E                            LevLoad_NumRows:
00008A1E 3001                       		move.w	d1,d0
00008A20 204B                       		movea.l	a3,a0
00008A22                            
00008A22                            LevLoad_Row:
00008A22 10D9                       		move.b	(a1)+,(a0)+
00008A24 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
00008A28 47EB 0080                  		lea	$80(a3),a3	; do next row
00008A2C 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
00008A30 4E75                       		rts	
00008A32                            ; End of function LevelLayoutLoad2
00008A32                            
00008A32                            		include	"_inc\DynamicLevelEvents.asm"
00008A32                            ; ---------------------------------------------------------------------------
00008A32                            ; Dynamic level events
00008A32                            ; ---------------------------------------------------------------------------
00008A32                            
00008A32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008A32                            
00008A32                            
00008A32                            DynamicLevelEvents:
00008A32 7000                       		moveq	#0,d0
00008A34 1038 FE10                  		move.b	(v_zone).w,d0
00008A38 D040                       		add.w	d0,d0
00008A3A 303B 0000                  		move.w	DLE_Index(pc,d0.w),d0
00008A3E 4EBB 0000                  		jsr	DLE_Index(pc,d0.w) ; run level-specific events
00008A42 7202                       		moveq	#2,d1
00008A44 3038 F726                  		move.w	(v_limitbtm1).w,d0
00008A48 9078 F72E                  		sub.w	(v_limitbtm2).w,d0 ; has lower level boundary changed recently?
00008A4C 6700                       		beq.s	DLE_NoChg	; if not, branch
00008A4E 6400                       		bcc.s	loc_6DAC
00008A50                            
00008A50 4441                       		neg.w	d1
00008A52 3038 F704                  		move.w	(v_screenposy).w,d0
00008A56 B078 F726                  		cmp.w	(v_limitbtm1).w,d0
00008A5A 6300                       		bls.s	loc_6DA0
00008A5C 31C0 F72E                  		move.w	d0,(v_limitbtm2).w
00008A60 0278 FFFE F72E             		andi.w	#$FFFE,(v_limitbtm2).w
00008A66                            
00008A66                            loc_6DA0:
00008A66 D378 F72E                  		add.w	d1,(v_limitbtm2).w
00008A6A 11FC 0001 F75C             		move.b	#1,(f_bgscrollvert).w
00008A70                            
00008A70                            DLE_NoChg:
00008A70 4E75                       		rts	
00008A72                            ; ===========================================================================
00008A72                            
00008A72                            loc_6DAC:
00008A72 3038 F704                  		move.w	(v_screenposy).w,d0
00008A76 5040                       		addq.w	#8,d0
00008A78 B078 F72E                  		cmp.w	(v_limitbtm2).w,d0
00008A7C 6500                       		bcs.s	loc_6DC4
00008A7E 0838 0001 D022             		btst	#1,(v_player+obStatus).w
00008A84 6700                       		beq.s	loc_6DC4
00008A86 D241                       		add.w	d1,d1
00008A88 D241                       		add.w	d1,d1
00008A8A                            
00008A8A                            loc_6DC4:
00008A8A D378 F72E                  		add.w	d1,(v_limitbtm2).w
00008A8E 11FC 0001 F75C             		move.b	#1,(f_bgscrollvert).w
00008A94 4E75                       		rts	
00008A96                            ; End of function DynamicLevelEvents
00008A96                            
00008A96                            ; ===========================================================================
00008A96                            ; ---------------------------------------------------------------------------
00008A96                            ; Offset index for dynamic level events
00008A96                            ; ---------------------------------------------------------------------------
00008A96 0000 0000                  DLE_Index:	dc.w DLE_GHZ-DLE_Index, DLE_LZ-DLE_Index
00008A9A 0000 0000                  		dc.w DLE_MZ-DLE_Index, DLE_SLZ-DLE_Index
00008A9E 0000 0000                  		dc.w DLE_SYZ-DLE_Index, DLE_SBZ-DLE_Index
00008AA2 0000                       		dc.w DLE_Ending-DLE_Index
00008AA4                            ; ===========================================================================
00008AA4                            ; ---------------------------------------------------------------------------
00008AA4                            ; Green	Hill Zone dynamic level events
00008AA4                            ; ---------------------------------------------------------------------------
00008AA4                            
00008AA4                            DLE_GHZ:
00008AA4 7000                       		moveq	#0,d0
00008AA6 1038 FE11                  		move.b	(v_act).w,d0
00008AAA D040                       		add.w	d0,d0
00008AAC 303B 0000                  		move.w	DLE_GHZx(pc,d0.w),d0
00008AB0 4EFB 0000                  		jmp	DLE_GHZx(pc,d0.w)
00008AB4                            ; ===========================================================================
00008AB4 0000                       DLE_GHZx:	dc.w DLE_GHZ1-DLE_GHZx
00008AB6 0000                       		dc.w DLE_GHZ2-DLE_GHZx
00008AB8 0000                       		dc.w DLE_GHZ3-DLE_GHZx
00008ABA                            ; ===========================================================================
00008ABA                            
00008ABA                            DLE_GHZ1:
00008ABA 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w
00008AC0 6600                       		bne.s	gohere
00008AC2 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w ; set lower y-boundary
00008AC8 4E75                       		rts
00008ACA                            gohere:
00008ACA 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w ; set lower y-boundary
00008AD0 0C78 1680 F700             		cmpi.w	#$1680,(v_screenposx).w ; has the camera reached $1780 on x-axis?
00008AD6 6500                       		bcs.s	locret_6E08	; if not, branch
00008AD8 31FC 0720 F726             		move.w	#$720,(v_limitbtm1).w ; set lower y-boundary
00008ADE                            
00008ADE                            locret_6E08:
00008ADE 4E75                       		rts	
00008AE0                            ; ===========================================================================
00008AE0                            
00008AE0                            DLE_GHZ2:
00008AE0 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008AE6 0C78 0380 F700             		cmpi.w	#$380,(v_screenposx).w
00008AEC 6500                       		bcs.s	locret_6E3A
00008AEE 31FC 0310 F726             		move.w	#$310,(v_limitbtm1).w
00008AF4 0C78 0960 F700             		cmpi.w	#$960,(v_screenposx).w
00008AFA 6500                       		bcs.s	locret_6E3A
00008AFC 0C78 0280 F704             		cmpi.w	#$280,(v_screenposy).w
00008B02 6500                       		bcs.s	loc_6E9A
00008B04 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w
00008B0A 0C78 1200 F700             		cmpi.w	#$1200,(v_screenposx).w
00008B10 6400                       		bcc.s	loc_6E8F
00008B12 31FC 04C0 F726             		move.w	#$4C0,(v_limitbtm1).w
00008B18 31FC 04C0 F72E             		move.w	#$4C0,(v_limitbtm2).w
00008B1E                            
00008B1E                            loc_6E8F:
00008B1E 0C78 1200 F700             		cmpi.w	#$1200,(v_screenposx).w
00008B24 6400                       		bcc.s	loc_6E9A
00008B26                            
00008B26                            locret_6E3A:
00008B26 4E75                       		rts	
00008B28                            ; ===========================================================================
00008B28                            
00008B28                            loc_6E9A:
00008B28 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008B2E 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008B32 4E75                       		rts		
00008B34                            ; ===========================================================================
00008B34                            
00008B34                            DLE_GHZ3:
00008B34 7000                       		moveq	#0,d0
00008B36 1038 F742                  		move.b	(v_dle_routine).w,d0
00008B3A 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
00008B3E 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
00008B42                            ; ===========================================================================
00008B42 0000                       off_6E4A:	dc.w DLE_GHZ3main-off_6E4A
00008B44 0000                       		dc.w DLE_GHZ3boss-off_6E4A
00008B46 0000                       		dc.w DLE_GHZ3end-off_6E4A
00008B48                            ; ===========================================================================
00008B48                            
00008B48                            DLE_GHZ3main:
00008B48 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008B4E 0C78 0400 F700             		cmpi.w	#$400,(v_screenposx).w
00008B54 6500                       		bcs.s	locret_6E96
00008B56 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008B5C 0C78 0960 F700             		cmpi.w	#$960,(v_screenposx).w
00008B62 6500                       		bcs.s	locret_6E96
00008B64 0C78 0280 F704             		cmpi.w	#$280,(v_screenposy).w
00008B6A 6500                       		bcs.s	loc_6E98
00008B6C 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008B72 0C78 1380 F700             		cmpi.w	#$1380,(v_screenposx).w
00008B78 6400                       		bcc.s	loc_6E8E
00008B7A 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008B80 31FC 0300 F72E             		move.w	#$300,(v_limitbtm2).w
00008B86                            
00008B86                            loc_6E8E:
00008B86 0C78 1700 F700             		cmpi.w	#$1700,(v_screenposx).w
00008B8C 6400                       		bcc.s	loc_6E98
00008B8E                            
00008B8E                            locret_6E96:
00008B8E 4E75                       		rts	
00008B90                            ; ===========================================================================
00008B90                            
00008B90                            loc_6E98:
00008B90 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008B96 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008B9A 4E75                       		rts	
00008B9C                            ; ===========================================================================
00008B9C                            
00008B9C                            DLE_GHZ3boss:
00008B9C 0C78 0960 F700             		cmpi.w	#$960,(v_screenposx).w
00008BA2 6400                       		bcc.s	loc_6EB0
00008BA4 5538 F742                  		subq.b	#2,(v_dle_routine).w
00008BA8                            
00008BA8                            loc_6EB0:
00008BA8 0C78 1360 F700             		cmpi.w	#$1360,(v_screenposx).w
00008BAE 6500                       		bcs.s	locret_6EE8
00008BB0 6100 0000                  		bsr.w	FindFreeObj
00008BB4 6600                       		bne.s	loc_6ED0
00008BB6 12BC 0000                  		move.b	#id_BossGreenHill,0(a1) ; load GHZ boss	object
00008BBA 337C 1460 0008             		move.w	#$1460,obX(a1)
00008BC0 337C 0280 000C             		move.w	#$280,obY(a1)
00008BC6                            
00008BC6                            loc_6ED0:
00008BCE 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008BD4 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008BD8 7000                       		moveq	#plcid_Egg,d0
00008BDA 6000 8B0E                  		bra.w	AddPLC		; load boss patterns
00008BDE                            		
00008BDE                            ; ===========================================================================
00008BDE                            
00008BDE                            locret_6EE8:
00008BDE 4E75                       		rts	
00008BE0                            ; ===========================================================================
00008BE0                            
00008BE0                            DLE_GHZ3end:
00008BE0 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008BE6 337C 0280 000C             		move.w	#$280,obY(a1)
00008BEC 4E75                       		rts	
00008BEE                            ; ===========================================================================
00008BEE                            ; ---------------------------------------------------------------------------
00008BEE                            ; Labyrinth Zone dynamic level events
00008BEE                            ; ---------------------------------------------------------------------------
00008BEE                            
00008BEE                            DLE_LZ:
00008BEE 7000                       		moveq	#0,d0
00008BF0 1038 FE11                  		move.b	(v_act).w,d0
00008BF4 D040                       		add.w	d0,d0
00008BF6 303B 0000                  		move.w	DLE_LZx(pc,d0.w),d0
00008BFA 4EFB 0000                  		jmp	DLE_LZx(pc,d0.w)
00008BFE                            ; ===========================================================================
00008BFE 0000                       DLE_LZx:	dc.w DLE_LZ12-DLE_LZx
00008C00 0000                       		dc.w DLE_LZ12-DLE_LZx
00008C02 0000                       		dc.w DLE_LZ3-DLE_LZx
00008C04 0000                       		dc.w DLE_SBZ3-DLE_LZx
00008C06                            ; ===========================================================================
00008C06                            
00008C06                            DLE_LZ12:
00008C06 4E75                       		rts	
00008C08                            ; ===========================================================================
00008C08                            
00008C08                            DLE_LZ3:
00008C08 4A38 F7EF                  		tst.b	(f_switch+$F).w	; has switch $F	been pressed?
00008C0C 6700                       		beq.s	loc_6F28	; if not, branch
00008C0E 43F8 A506                  		lea	(v_lvllayout+$106).w,a1
00008C12 0C11 0007                  		cmpi.b	#7,(a1)
00008C16 6700                       		beq.s	loc_6F28
00008C18 12BC 0007                  		move.b	#7,(a1)		; modify level layout
00008C24                            
00008C24                            loc_6F28:
00008C24 4A38 F742                  		tst.b	(v_dle_routine).w
00008C28 6600                       		bne.s	locret_6F64
00008C2A 0C78 1CA0 F700             		cmpi.w	#$1CA0,(v_screenposx).w
00008C30 6500                       		bcs.s	locret_6F62
00008C32 0C78 0600 F704             		cmpi.w	#$600,(v_screenposy).w
00008C38 6400                       		bcc.s	locret_6F62
00008C3A 6100 0000                  		bsr.w	FindFreeObj
00008C3E 6600                       		bne.s	loc_6F4A
00008C40 12BC 0000                  		move.b	#id_BossLabyrinth,0(a1) ; load LZ boss object
00008C44                            
00008C44                            loc_6F4A:
00008C4C 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008C52 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008C56 7000                       		moveq	#plcid_Boss,d0
00008C58 6000 8A90                  		bra.w	AddPLC		; load boss patterns
00008C5C                            ; ===========================================================================
00008C5C                            
00008C5C                            locret_6F62:
00008C5C 4E75                       		rts	
00008C5E                            ; ===========================================================================
00008C5E                            
00008C5E                            locret_6F64:
00008C5E 4E75                       		rts	
00008C60                            ; ===========================================================================
00008C60                            
00008C60                            DLE_SBZ3:
00008C60 0C78 0D00 F700             		cmpi.w	#$D00,(v_screenposx).w
00008C66 6500                       		bcs.s	locret_6F8C
00008C68 0C78 0018 D00C             		cmpi.w	#$18,(v_player+obY).w ; has Sonic reached the top of the level?
00008C6E 6400                       		bcc.s	locret_6F8C	; if not, branch
00008C70 4238 FE30                  		clr.b	(v_lastlamp).w
00008C74 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
00008C7A 31FC 0502 FE10             		move.w	#(id_SBZ<<8)+2,(v_zone).w ; set level number to 0502 (FZ)
00008C80 11FC 0001 F7C8             		move.b	#1,(f_lockmulti).w ; freeze Sonic
00008C86                            
00008C86                            locret_6F8C:
00008C86 4E75                       		rts	
00008C88                            ; ===========================================================================
00008C88                            ; ---------------------------------------------------------------------------
00008C88                            ; Marble Zone dynamic level events
00008C88                            ; ---------------------------------------------------------------------------
00008C88                            
00008C88                            DLE_MZ:
00008C88 7000                       		moveq	#0,d0
00008C8A 1038 FE11                  		move.b	(v_act).w,d0
00008C8E D040                       		add.w	d0,d0
00008C90 303B 0000                  		move.w	DLE_MZx(pc,d0.w),d0
00008C94 4EFB 0000                  		jmp	DLE_MZx(pc,d0.w)
00008C98                            ; ===========================================================================
00008C98 0000                       DLE_MZx:	dc.w DLE_MZ1-DLE_MZx
00008C9A 0000                       		dc.w DLE_MZ2-DLE_MZx
00008C9C 0000                       		dc.w DLE_MZ3-DLE_MZx
00008C9E                            ; ===========================================================================
00008C9E                            
00008C9E                            DLE_MZ1:
00008C9E 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
00008CA4 0C78 1F40 F700             		cmpi.w	#$1F40,(v_screenposx).w
00008CAA 6500                       		bcs.s	locret_6FE8
00008CAC 31FC 0220 F726             		move.w	#$220,(v_limitbtm1).w
00008CB2                            
00008CB2                            locret_6FE8:
00008CB2 4E75                       		rts	
00008CB4                            
00008CB4                            ; ===========================================================================
00008CB4                            
00008CB4                            DLE_MZ2:
00008CB4 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
00008CBA 0C78 1700 F700             		cmpi.w	#$1700,(v_screenposx).w
00008CC0 6500                       		bcs.s	locret_6FE9
00008CC2 31FC 0110 F726             		move.w	#$110,(v_limitbtm1).w
00008CC8                            		
00008CC8                            locret_6FE9:
00008CC8 4E75                       		rts	
00008CCA                            ; ===========================================================================
00008CCA                            
00008CCA                            DLE_MZ3:
00008CCA 7000                       		moveq	#0,d0
00008CCC 1038 F742                  		move.b	(v_dle_routine).w,d0
00008CD0 303B 0000                  		move.w	off_7098(pc,d0.w),d0
00008CD4 4EFB 0000                  		jmp	off_7098(pc,d0.w)
00008CD8                            ; ===========================================================================
00008CD8 0000                       off_7098:	dc.w DLE_MZ3boss-off_7098
00008CDA 0000                       		dc.w DLE_MZ3end-off_7098
00008CDC                            ; ===========================================================================
00008CDC                            
00008CDC                            DLE_MZ3boss:
00008CDC 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008CE2 0C78 0E00 F700             		cmpi.w	#$0E00,(v_screenposx).w
00008CE8 6500                       		bcs.s	locret_70E8
00008CEA 31FC 0210 F726             		move.w	#$210,(v_limitbtm1).w
00008CF0 0C78 17F0 F700             		cmpi.w	#$17F0,(v_screenposx).w
00008CF6 6500                       		bcs.s	locret_70E8
00008CF8 6100 0000                  		bsr.w	FindFreeObj
00008CFC 6600                       		bne.s	loc_70D0
00008CFE 12BC 0000                  		move.b	#id_BossMarble,0(a1) ; load MZ boss object
00008D02 337C 19F0 0008             		move.w	#$19F0,obX(a1)
00008D08 337C 022C 000C             		move.w	#$22C,obY(a1)
00008D0E                            
00008D0E                            loc_70D0:
00008D16 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008D1C 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008D20 7000                       		moveq	#plcid_Boss,d0
00008D22 6000 89C6                  		bra.w	AddPLC		; load boss patterns
00008D26                            ; ===========================================================================
00008D26                            
00008D26                            locret_70E8:
00008D26 4E75                       		rts	
00008D28                            ; ===========================================================================
00008D28                            
00008D28                            DLE_MZ3end:
00008D28 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008D2E 4E75                       		rts	
00008D30                            		
00008D30                            ; ===========================================================================
00008D30                            ; ---------------------------------------------------------------------------
00008D30                            ; Star Light Zone dynamic level events
00008D30                            ; ---------------------------------------------------------------------------
00008D30                            
00008D30                            DLE_SLZ:
00008D30 7000                       		moveq	#0,d0
00008D32 1038 FE11                  		move.b	(v_act).w,d0
00008D36 D040                       		add.w	d0,d0
00008D38 303B 0000                  		move.w	DLE_SLZx(pc,d0.w),d0
00008D3C 4EFB 0000                  		jmp	DLE_SLZx(pc,d0.w)
00008D40                            ; ===========================================================================
00008D40 0000                       DLE_SLZx:	dc.w DLE_SLZ12-DLE_SLZx
00008D42 0000                       		dc.w DLE_SLZ12-DLE_SLZx
00008D44 0000                       		dc.w DLE_SLZ3-DLE_SLZx
00008D46                            ; ===========================================================================
00008D46                            
00008D46                            DLE_SLZ12:
00008D46 4E75                       		rts	
00008D48                            ; ===========================================================================
00008D48                            
00008D48                            DLE_SLZ3:
00008D48 7000                       		moveq	#0,d0
00008D4A 1038 F742                  		move.b	(v_dle_routine).w,d0
00008D4E 303B 0000                  		move.w	off_7118(pc,d0.w),d0
00008D52 4EFB 0000                  		jmp	off_7118(pc,d0.w)
00008D56                            ; ===========================================================================
00008D56 0000                       off_7118:	dc.w DLE_SLZ3main-off_7118
00008D58 0000                       		dc.w DLE_SLZ3boss-off_7118
00008D5A 0000                       		dc.w DLE_SLZ3end-off_7118
00008D5C                            ; ===========================================================================
00008D5C                            
00008D5C                            DLE_SLZ3main:
00008D5C 0C78 1E70 F700             		cmpi.w	#$1E70,(v_screenposx).w
00008D62 6500                       		bcs.s	locret_7130
00008D64 31FC 0210 F726             		move.w	#$210,(v_limitbtm1).w
00008D6A 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008D6E                            
00008D6E                            locret_7130:
00008D6E 4E75                       		rts	
00008D70                            ; ===========================================================================
00008D70                            
00008D70                            DLE_SLZ3boss:
00008D70 0C78 2000 F700             		cmpi.w	#$2000,(v_screenposx).w
00008D76 6500                       		bcs.s	locret_715C
00008D78 6100 0000                  		bsr.w	FindFreeObj
00008D7C 6600                       		bne.s	loc_7144
00008D7E 12BC 0000                  		move.b	#id_BossStarLight,(a1) ; load SLZ boss object
00008D82                            
00008D82                            loc_7144:
00008D8A 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008D90 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008D94 7000                       		moveq	#plcid_Boss,d0
00008D96 6000 8952                  		bra.w	AddPLC		; load boss patterns
00008D9A                            ; ===========================================================================
00008D9A                            
00008D9A                            locret_715C:
00008D9A 4E75                       		rts	
00008D9C                            ; ===========================================================================
00008D9C                            
00008D9C                            DLE_SLZ3end:
00008D9C 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008DA2 4E75                       		rts
00008DA4 4E75                       		rts
00008DA6                            ; ===========================================================================
00008DA6                            ; ---------------------------------------------------------------------------
00008DA6                            ; Spring Yard Zone dynamic level events
00008DA6                            ; ---------------------------------------------------------------------------
00008DA6                            
00008DA6                            DLE_SYZ:
00008DA6 7000                       		moveq	#0,d0
00008DA8 1038 FE11                  		move.b	(v_act).w,d0
00008DAC D040                       		add.w	d0,d0
00008DAE 303B 0000                  		move.w	DLE_SYZx(pc,d0.w),d0
00008DB2 4EFB 0000                  		jmp	DLE_SYZx(pc,d0.w)
00008DB6                            ; ===========================================================================
00008DB6 0000                       DLE_SYZx:	dc.w DLE_SYZ1-DLE_SYZx
00008DB8 0000                       		dc.w DLE_SYZ2-DLE_SYZx
00008DBA 0000                       		dc.w DLE_SYZ3-DLE_SYZx
00008DBC                            ; ===========================================================================
00008DBC                            
00008DBC                            DLE_SYZ1:
00008DBC 4E75                       		rts	
00008DBE                            ; ===========================================================================
00008DBE                            
00008DBE                            DLE_SYZ2:
00008DBE 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
00008DC4 0C78 25A0 F700             		cmpi.w	#$25A0,(v_screenposx).w
00008DCA 6500                       		bcs.s	locret_71A2
00008DCC 31FC 0420 F726             		move.w	#$420,(v_limitbtm1).w
00008DD2 0C78 04D0 D00C             		cmpi.w	#$4D0,(v_player+obY).w
00008DD8 6500                       		bcs.s	locret_71A2
00008DDA 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
00008DE0                            
00008DE0                            locret_71A2:
00008DE0 4E75                       		rts	
00008DE2                            ; ===========================================================================
00008DE2                            
00008DE2                            DLE_SYZ3:
00008DE2 7000                       		moveq	#0,d0
00008DE4 1038 F742                  		move.b	(v_dle_routine).w,d0
00008DE8 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
00008DEC 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
00008DF0                            ; ===========================================================================
00008DF0 0000                       off_71B2:	dc.w DLE_SYZ3main-off_71B2
00008DF2 0000                       		dc.w DLE_SYZ3boss-off_71B2
00008DF4 0000                       		dc.w DLE_SYZ3end-off_71B2
00008DF6                            ; ===========================================================================
00008DF6                            
00008DF6                            DLE_SYZ3main:
00008DF6 0C78 2AC0 F700             		cmpi.w	#$2AC0,(v_screenposx).w
00008DFC 6500                       		bcs.s	locret_71CE
00008DFE 6100 0000                  		bsr.w	FindFreeObj
00008E02 6600                       		bne.s	locret_71CE
00008E04 12BC 0000                  		move.b	#id_BossBlock,(a1) ; load blocks that boss picks up
00008E08 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008E0C                            
00008E0C                            locret_71CE:
00008E0C 4E75                       		rts	
00008E0E                            ; ===========================================================================
00008E0E                            
00008E0E                            DLE_SYZ3boss:
00008E0E 0C78 2C00 F700             		cmpi.w	#$2C00,(v_screenposx).w
00008E14 6500                       		bcs.s	locret_7200
00008E16 31FC 04CC F726             		move.w	#$4CC,(v_limitbtm1).w
00008E1C 6100 0000                  		bsr.w	FindFreeObj
00008E20 6600                       		bne.s	loc_71EC
00008E22 12BC 0000                  		move.b	#id_BossSpringYard,(a1) ; load SYZ boss	object
00008E26 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008E2A                            
00008E2A                            loc_71EC:
00008E32 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008E38 7000                       		moveq	#plcid_Boss,d0
00008E3A 6000 88AE                  		bra.w	AddPLC		; load boss patterns
00008E3E                            ; ===========================================================================
00008E3E                            
00008E3E                            locret_7200:
00008E3E 4E75                       		rts	
00008E40                            ; ===========================================================================
00008E40                            
00008E40                            DLE_SYZ3end:
00008E40 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008E46 4E75                       		rts	
00008E48                            ; ===========================================================================
00008E48                            ; ---------------------------------------------------------------------------
00008E48                            ; Scrap	Brain Zone dynamic level events
00008E48                            ; ---------------------------------------------------------------------------
00008E48                            
00008E48                            DLE_SBZ:
00008E48 7000                       		moveq	#0,d0
00008E4A 1038 FE11                  		move.b	(v_act).w,d0
00008E4E D040                       		add.w	d0,d0
00008E50 303B 0000                  		move.w	DLE_SBZx(pc,d0.w),d0
00008E54 4EFB 0000                  		jmp	DLE_SBZx(pc,d0.w)
00008E58                            ; ===========================================================================
00008E58 0000                       DLE_SBZx:	dc.w DLE_SBZ1-DLE_SBZx
00008E5A 0000                       		dc.w DLE_SBZ2-DLE_SBZx
00008E5C 0000                       		dc.w DLE_FZ-DLE_SBZx
00008E5E                            ; ===========================================================================
00008E5E                            
00008E5E                            DLE_SBZ1:
00008E5E 31FC 0720 F726             		move.w	#$720,(v_limitbtm1).w
00008E64 0C78 1880 F700             		cmpi.w	#$1880,(v_screenposx).w
00008E6A 6500                       		bcs.s	locret_7242
00008E6C 31FC 0620 F726             		move.w	#$620,(v_limitbtm1).w
00008E72 0C78 2000 F700             		cmpi.w	#$2000,(v_screenposx).w
00008E78 6500                       		bcs.s	locret_7242
00008E7A 31FC 02A0 F726             		move.w	#$2A0,(v_limitbtm1).w
00008E80                            
00008E80                            locret_7242:
00008E80 4E75                       		rts	
00008E82                            ; ===========================================================================
00008E82                            
00008E82                            DLE_SBZ2:
00008E82 7000                       		moveq	#0,d0
00008E84 1038 F742                  		move.b	(v_dle_routine).w,d0
00008E88 303B 0000                  		move.w	off_7252(pc,d0.w),d0
00008E8C 4EFB 0000                  		jmp	off_7252(pc,d0.w)
00008E90                            ; ===========================================================================
00008E90 0000                       off_7252:	dc.w DLE_SBZ2main-off_7252
00008E92 0000                       		dc.w DLE_SBZ2boss-off_7252
00008E94 0000                       		dc.w DLE_SBZ2boss2-off_7252
00008E96 0000                       		dc.w DLE_SBZ2end-off_7252
00008E98                            ; ===========================================================================
00008E98                            
00008E98                            DLE_SBZ2main:
00008E98 31FC 0800 F726             		move.w	#$800,(v_limitbtm1).w
00008E9E 0C78 1800 F700             		cmpi.w	#$1800,(v_screenposx).w
00008EA4 6500                       		bcs.s	locret_727A
00008EA6 31FC 0510 F726             		move.w	#$510,(v_limitbtm1).w
00008EAC 0C78 1E00 F700             		cmpi.w	#$1E00,(v_screenposx).w
00008EB2 6500                       		bcs.s	locret_727A
00008EB4 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008EB8                            
00008EB8                            locret_727A:
00008EB8 4E75                       		rts	
00008EBA                            ; ===========================================================================
00008EBA                            
00008EBA                            DLE_SBZ2boss:
00008EBA 0C78 1EB0 F700             		cmpi.w	#$1EB0,(v_screenposx).w
00008EC0 6500                       		bcs.s	locret_7298
00008EC2 6100 0000                  		bsr.w	FindFreeObj
00008EC6 6600                       		bne.s	locret_7298
00008EC8 12BC 0000                  		move.b	#id_FalseFloor,(a1) ; load collapsing block object
00008ECC 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008ED0 7000                       		moveq	#plcid_EggmanSBZ2,d0
00008ED2 6000 8816                  		bra.w	AddPLC		; load SBZ2 Eggman patterns
00008ED6                            ; ===========================================================================
00008ED6                            
00008ED6                            locret_7298:
00008ED6 4E75                       		rts	
00008ED8                            ; ===========================================================================
00008ED8                            
00008ED8                            DLE_SBZ2boss2:
00008ED8 0C78 1F60 F700             		cmpi.w	#$1F60,(v_screenposx).w
00008EDE 6500                       		bcs.s	loc_72B6
00008EE0 6100 0000                  		bsr.w	FindFreeObj
00008EE4 6600                       		bne.s	loc_72B0
00008EE6 12BC 0000                  		move.b	#id_ScrapEggman,(a1) ; load SBZ2 Eggman object
00008EEA 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008EEE                            
00008EEE                            loc_72B0:
00008EEE 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008EF4                            
00008EF4                            loc_72B6:
00008EF4 6000                       		bra.s	loc_72C2
00008EF6                            ; ===========================================================================
00008EF6                            
00008EF6                            DLE_SBZ2end:
00008EF6 0C78 2050 F700             		cmpi.w	#$2050,(v_screenposx).w
00008EFC 6500                       		bcs.s	loc_72C2
00008EFE 4E75                       		rts	
00008F00                            ; ===========================================================================
00008F00                            
00008F00                            loc_72C2:
00008F00 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008F06 4E75                       		rts	
00008F08                            ; ===========================================================================
00008F08                            
00008F08                            DLE_FZ:
00008F08 7000                       		moveq	#0,d0
00008F0A 1038 F742                  		move.b	(v_dle_routine).w,d0
00008F0E 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
00008F12 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
00008F16                            ; ===========================================================================
00008F16 0000 0000                  off_72D8:	dc.w DLE_FZmain-off_72D8, DLE_FZboss-off_72D8
00008F1A 0000 0000                  		dc.w DLE_FZend-off_72D8, locret_7322-off_72D8
00008F1E 0000                       		dc.w DLE_FZend2-off_72D8
00008F20                            ; ===========================================================================
00008F20                            
00008F20                            DLE_FZmain:
00008F20 0C78 2148 F700             		cmpi.w	#$2148,(v_screenposx).w
00008F26 6500                       		bcs.s	loc_72F4
00008F28 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008F2C 7000                       		moveq	#plcid_FZBoss,d0
00008F2E 6100 87BA                  		bsr.w	AddPLC		; load FZ boss patterns
00008F32                            
00008F32                            loc_72F4:
00008F32 60CC                       		bra.s	loc_72C2
00008F34                            ; ===========================================================================
00008F34                            
00008F34                            DLE_FZboss:
00008F34 0C78 2300 F700             		cmpi.w	#$2300,(v_screenposx).w
00008F3A 6500                       		bcs.s	loc_7312
00008F3C 6100 0000                  		bsr.w	FindFreeObj
00008F40 6600                       		bne.s	loc_7312
00008F42 12BC 0000                  		move.b	#id_BossFinal,(a1) ; load FZ boss object
00008F46 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008F4A 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008F50                            
00008F50                            loc_7312:
00008F50 60AE                       		bra.s	loc_72C2
00008F52                            ; ===========================================================================
00008F52                            
00008F52                            DLE_FZend:
00008F52 0C78 2450 F700             		cmpi.w	#$2450,(v_screenposx).w
00008F58 6500                       		bcs.s	loc_7320
00008F5A 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008F5E                            
00008F5E                            loc_7320:
00008F5E 60A0                       		bra.s	loc_72C2
00008F60                            ; ===========================================================================
00008F60                            
00008F60                            locret_7322:
00008F60 4E75                       		rts	
00008F62                            ; ===========================================================================
00008F62                            
00008F62                            DLE_FZend2:
00008F62 609C                       		bra.s	loc_72C2
00008F64                            ; ===========================================================================
00008F64                            ; ---------------------------------------------------------------------------
00008F64                            ; Ending sequence dynamic level events (empty)
00008F64                            ; ---------------------------------------------------------------------------
00008F64                            
00008F64                            DLE_Ending:
00008F64 4E75                       		rts	
00008F64 4E75                       		rts	
00008F66                            
00008F66                            		include	"_incObj\11 Bridge (part 1).asm"
00008F66                            ; ---------------------------------------------------------------------------
00008F66                            ; Object 11 - GHZ bridge
00008F66                            ; ---------------------------------------------------------------------------
00008F66                            
00008F66                            Bridge:
00008F66 7000                       		moveq	#0,d0
00008F68 1028 0024                  		move.b	obRoutine(a0),d0
00008F6C 323B 0000                  		move.w	Bri_Index(pc,d0.w),d1
00008F70 4EFB 1000                  		jmp	Bri_Index(pc,d1.w)
00008F74                            ; ===========================================================================
00008F74 0000 0000                  Bri_Index:	dc.w Bri_Main-Bri_Index, Bri_Action-Bri_Index
00008F78 0000 0000                  		dc.w Bri_Platform-Bri_Index, Bri_Delete-Bri_Index
00008F7C 0000 0000                  		dc.w Bri_Delete-Bri_Index, Bri_Display-Bri_Index
00008F80                            ; ===========================================================================
00008F80                            
00008F80                            Bri_Main:	; Routine 0
00008F80 5428 0024                  		addq.b	#2,obRoutine(a0)
00008F84 217C 0000 0000 0004        		move.l	#Map_Bri,obMap(a0)
00008F8C 317C 438E 0002             		move.w	#$438E,obGfx(a0)
00008F92 117C 0004 0001             		move.b	#4,obRender(a0)
00008F98 317C 0180 0018             		move.w	#$180,obPriority(a0)
00008F9E 117C 0080 0014             		move.b	#$80,obActWid(a0)
00008FA4 3428 000C                  		move.w	obY(a0),d2
00008FA8 3628 0008                  		move.w	obX(a0),d3
00008FAC 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00008FAE 45E8 0028                  		lea	obSubtype(a0),a2
00008FB2 7200                       		moveq	#0,d1
00008FB4 1212                       		move.b	(a2),d1		; copy bridge length to d1
00008FB6 14FC 0000                  		move.b	#0,(a2)+	; clear bridge length
00008FBA 3001                       		move.w	d1,d0
00008FBC E248                       		lsr.w	#1,d0
00008FBE E948                       		lsl.w	#4,d0
00008FC0 9640                       		sub.w	d0,d3		; d3 is position of leftmost log
00008FC2 5501                       		subq.b	#2,d1
00008FC4 6500                       		bcs.s	Bri_Action	; don't make more if bridge has only 1 log
00008FC6                            
00008FC6                            @buildloop:
00008FC6 6100 0000                  		bsr.w	FindFreeObj
00008FCA 6600                       		bne.s	Bri_Action
00008FCC 5228 0028                  		addq.b	#1,obSubtype(a0)
00008FD0 B668 0008                  		cmp.w	obX(a0),d3	; is this log the leftmost one?
00008FD4 6600                       		bne.s	@notleftmost	; if not, branch
00008FD6                            
00008FD6 0643 0010                  		addi.w	#$10,d3
00008FDA 3142 000C                  		move.w	d2,obY(a0)
00008FDE 3142 003C                  		move.w	d2,$3C(a0)
00008FE2 3A08                       		move.w	a0,d5
00008FE4 0445 D000                  		subi.w	#$D000,d5
00008FE8 EC4D                       		lsr.w	#6,d5
00008FEA 0245 007F                  		andi.w	#$7F,d5
00008FEE 14C5                       		move.b	d5,(a2)+
00008FF0 5228 0028                  		addq.b	#1,obSubtype(a0)
00008FF4                            
00008FF4                            	@notleftmost:
00008FF4 3A09                       		move.w	a1,d5
00008FF6 0445 D000                  		subi.w	#$D000,d5
00008FFA EC4D                       		lsr.w	#6,d5
00008FFC 0245 007F                  		andi.w	#$7F,d5
00009000 14C5                       		move.b	d5,(a2)+
00009002 137C 000A 0024             		move.b	#$A,obRoutine(a1)
00009008 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
0000900A 3342 000C                  		move.w	d2,obY(a1)
0000900E 3342 003C                  		move.w	d2,$3C(a1)
00009012 3343 0008                  		move.w	d3,obX(a1)
00009016 237C 0000 0000 0004        		move.l	#Map_Bri,obMap(a1)
0000901E 337C 438E 0002             		move.w	#$438E,obGfx(a1)
00009024 137C 0004 0001             		move.b	#4,obRender(a1)
0000902A 337C 0180 0018             		move.w	#$180,obPriority(a1)
00009030 137C 0008 0014             		move.b	#8,obActWid(a1)
00009036 0643 0010                  		addi.w	#$10,d3
0000903A 51C9 FF8A                  		dbf	d1,@buildloop ; repeat d1 times (length of bridge)
0000903E                            
0000903E                            Bri_Action:	; Routine 2
0000903E 6100                       		bsr.s	Bri_Solid
00009040 4A28 003E                  		tst.b	$3E(a0)
00009044 6700                       		beq.s	@display
00009046 5928 003E                  		subq.b	#4,$3E(a0)
0000904A 6100 0000                  		bsr.w	Bri_Bend
0000904E                            
0000904E                            	@display:
0000904E 6100 0000                  		bsr.w	DisplaySprite
00009052 6000 0000                  		bra.w	Bri_ChkDel
00009056                            
00009056                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009056                            
00009056                            
00009056                            Bri_Solid:
00009056 7200                       		moveq	#0,d1
00009058 1228 0028                  		move.b	obSubtype(a0),d1
0000905C E749                       		lsl.w	#3,d1
0000905E 3401                       		move.w	d1,d2
00009060 5041                       		addq.w	#8,d1
00009062 D442                       		add.w	d2,d2
00009064 43F8 D000                  		lea	(v_player).w,a1
00009068 4A69 0012                  		tst.w	obVelY(a1)
0000906C 6B00 0000                  		bmi.w	Plat_Exit
00009070 3029 0008                  		move.w	obX(a1),d0
00009074 9068 0008                  		sub.w	obX(a0),d0
00009078 D041                       		add.w	d1,d0
0000907A 6B00 0000                  		bmi.w	Plat_Exit
0000907E B042                       		cmp.w	d2,d0
00009080 6400 0000                  		bcc.w	Plat_Exit
00009084 6000                       		bra.s	Plat_NoXCheck
00009086                            ; End of function Bri_Solid
00009086                            ; End of function Bri_Solid
00009086                            
00009086                            ; ---------------------------------------------------------------------------
00009086                            ; Platform subroutine
00009086                            ; ---------------------------------------------------------------------------
00009086                            
00009086                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009086                            
00009086                            PlatformObject:
00009086 43F8 D000                  		lea	(v_player).w,a1
0000908A 4A69 0012                  		tst.w	obVelY(a1)	; is Sonic moving up/jumping?
0000908E 6B00 0000                  		bmi.w	Plat_Exit	; if yes, branch
00009092                            
00009092                            ;		perform x-axis range check
00009092 3029 0008                  		move.w	obX(a1),d0
00009096 9068 0008                  		sub.w	obX(a0),d0
0000909A D041                       		add.w	d1,d0
0000909C 6B00 0000                  		bmi.w	Plat_Exit
000090A0 D241                       		add.w	d1,d1
000090A2 B041                       		cmp.w	d1,d0
000090A4 6400 0000                  		bhs.w	Plat_Exit
000090A8                            
000090A8                            	Plat_NoXCheck:
000090A8 3028 000C                  		move.w	obY(a0),d0
000090AC 5140                       		subq.w	#8,d0
000090AE                            
000090AE                            Platform3:
000090AE                            ;		perform y-axis range check
000090AE 3429 000C                  		move.w	obY(a1),d2
000090B2 1229 0016                  		move.b	obHeight(a1),d1
000090B6 4881                       		ext.w	d1
000090B8 D242                       		add.w	d2,d1
000090BA 5841                       		addq.w	#4,d1
000090BC 9041                       		sub.w	d1,d0
000090BE 6200 0000                  		bhi.w	Plat_Exit
000090C2 0C40 FFF0                  		cmpi.w	#-$10,d0
000090C6 6500 0000                  		blo.w	Plat_Exit
000090CA                            
000090CA 4A38 F7C8                  		tst.b	(f_lockmulti).w
000090CE 6B00 0000                  		bmi.w	Plat_Exit
000090D2 0C29 0006 0024             		cmpi.b	#6,obRoutine(a1)
000090D8 6400 0000                  		bhs.w	Plat_Exit
000090DC D440                       		add.w	d0,d2
000090DE 5642                       		addq.w	#3,d2
000090E0 3342 000C                  		move.w	d2,obY(a1)
000090E4 5428 0024                  		addq.b	#2,obRoutine(a0)
000090E8                            
000090E8                            loc_74AE:
000090E8 0829 0003 0022             		btst	#3,obStatus(a1)
000090EE 6700                       		beq.s	loc_74DC
000090F0 7000                       		moveq	#0,d0
000090F2 1029 003D                  		move.b	$3D(a1),d0
000090F6 ED48                       		lsl.w	#6,d0
000090F8 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
000090FE 2440                       		movea.l	d0,a2
00009100 08AA 0003 0022             		bclr	#3,obStatus(a2)
00009106 422A 0025                  		clr.b	ob2ndRout(a2)
0000910A 0C2A 0004 0024             		cmpi.b	#4,obRoutine(a2)
00009110 6600                       		bne.s	loc_74DC
00009112 552A 0024                  		subq.b	#2,obRoutine(a2)
00009116                            
00009116                            loc_74DC:
00009116 3008                       		move.w	a0,d0
00009118 0440 D000                  		subi.w	#-$3000,d0
0000911C EC48                       		lsr.w	#6,d0
0000911E 0240 007F                  		andi.w	#$7F,d0
00009122 1340 003D                  		move.b	d0,$3D(a1)
00009126 137C 0000 0026             		move.b	#0,obAngle(a1)
0000912C 337C 0000 0012             		move.w	#0,obVelY(a1)
00009132 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
00009138 0829 0001 0022             		btst	#1,obStatus(a1)
0000913E 6700                       		beq.s	loc_7512
00009140 2F08                       		move.l	a0,-(sp)
00009142 2049                       		movea.l	a1,a0
00009144 4EB9 0000 0000             		jsr	(Sonic_ResetOnFloor).l
0000914A 205F                       		movea.l	(sp)+,a0
0000914C                            
0000914C                            loc_7512:
0000914C 08E9 0003 0022             		bset	#3,obStatus(a1)
00009152 08E8 0003 0022             		bset	#3,obStatus(a0)
00009158                            
00009158                            Plat_Exit:
00009158 4E75                       		rts	
0000915A                            ; End of function PlatformObject
0000915A                            
0000915A                            ; ---------------------------------------------------------------------------
0000915A                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
0000915A                            ; ---------------------------------------------------------------------------
0000915A                            
0000915A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000915A                            
0000915A                            
0000915A                            SlopeObject:
0000915A 43F8 D000                  		lea	(v_player).w,a1
0000915E 4A69 0012                  		tst.w	obVelY(a1)
00009162 6B00 FFF4                  		bmi.w	Plat_Exit
00009166 3029 0008                  		move.w	obX(a1),d0
0000916A 9068 0008                  		sub.w	obX(a0),d0
0000916E D041                       		add.w	d1,d0
00009170 6BE6                       		bmi.s	Plat_Exit
00009172 D241                       		add.w	d1,d1
00009174 B041                       		cmp.w	d1,d0
00009176 64E0                       		bhs.s	Plat_Exit
00009178 0828 0000 0001             		btst	#0,obRender(a0)
0000917E 6700                       		beq.s	loc_754A
00009180 4640                       		not.w	d0
00009182 D041                       		add.w	d1,d0
00009184                            
00009184                            loc_754A:
00009184 E248                       		lsr.w	#1,d0
00009186 7600                       		moveq	#0,d3
00009188 1632 0000                  		move.b	(a2,d0.w),d3
0000918C 3028 000C                  		move.w	obY(a0),d0
00009190 9043                       		sub.w	d3,d0
00009192 6000 FF1A                  		bra.w	Platform3
00009196                            ; End of function SlopeObject
00009196                            
00009196                            
00009196                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009196                            
00009196                            
00009196                            Swing_Solid:
00009196 43F8 D000                  		lea	(v_player).w,a1
0000919A 4A69 0012                  		tst.w	obVelY(a1)
0000919E 6B00 FFB8                  		bmi.w	Plat_Exit
000091A2 3029 0008                  		move.w	obX(a1),d0
000091A6 9068 0008                  		sub.w	obX(a0),d0
000091AA D041                       		add.w	d1,d0
000091AC 6B00 FFAA                  		bmi.w	Plat_Exit
000091B0 D241                       		add.w	d1,d1
000091B2 B041                       		cmp.w	d1,d0
000091B4 6400 FFA2                  		bhs.w	Plat_Exit
000091B8 3028 000C                  		move.w	obY(a0),d0
000091BC 9043                       		sub.w	d3,d0
000091BE 6000 FEEE                  		bra.w	Platform3
000091C2                            ; End of function Obj15_Solid
000091C2                            
000091C2                            ; ===========================================================================
000091C2                            
000091C2                            		include	"_incObj\11 Bridge (part 2).asm"
000091C2                            
000091C2                            Bri_Platform:	; Routine 4
000091C2 6100                       		bsr.s	Bri_WalkOff
000091C4 6100 0000                  		bsr.w	DisplaySprite
000091C8 6000 0000                  		bra.w	Bri_ChkDel
000091CC                            
000091CC                            ; ---------------------------------------------------------------------------
000091CC                            ; Subroutine allowing Sonic to walk off a bridge
000091CC                            ; ---------------------------------------------------------------------------
000091CC                            
000091CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000091CC                            
000091CC                            
000091CC                            Bri_WalkOff:
000091CC 7200                       		moveq	#0,d1
000091CE 1228 0028                  		move.b	obSubtype(a0),d1
000091D2 E749                       		lsl.w	#3,d1
000091D4 3401                       		move.w	d1,d2
000091D6 5041                       		addq.w	#8,d1
000091D8 6100                       		bsr.s	ExitPlatform2
000091DA 6400                       		bcc.s	locret_75BE
000091DC E848                       		lsr.w	#4,d0
000091DE 1140 003F                  		move.b	d0,$3F(a0)
000091E2 1028 003E                  		move.b	$3E(a0),d0
000091E6 0C00 0040                  		cmpi.b	#$40,d0
000091EA 6700                       		beq.s	loc_75B6
000091EC 5828 003E                  		addq.b	#4,$3E(a0)
000091F0                            
000091F0                            loc_75B6:
000091F0 6100 0000                  		bsr.w	Bri_Bend
000091F4 6100 0000                  		bsr.w	Bri_MoveSonic
000091F8                            
000091F8                            locret_75BE:
000091F8 4E75                       		rts	
000091FA                            ; End of function Bri_WalkOff
000091FA                            ; End of function Bri_WalkOff
000091FA                            
000091FA                            ; ---------------------------------------------------------------------------
000091FA                            ; Subroutine allowing Sonic to walk or jump off	a platform
000091FA                            ; ---------------------------------------------------------------------------
000091FA                            
000091FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000091FA                            
000091FA                            
000091FA                            ExitPlatform:
000091FA 3401                       		move.w	d1,d2
000091FC                            
000091FC                            ExitPlatform2:
000091FC D442                       		add.w	d2,d2
000091FE 43F8 D000                  		lea	(v_player).w,a1
00009202 0829 0001 0022             		btst	#1,obStatus(a1)
00009208 6600                       		bne.s	loc_75E0
0000920A 3029 0008                  		move.w	obX(a1),d0
0000920E 9068 0008                  		sub.w	obX(a0),d0
00009212 D041                       		add.w	d1,d0
00009214 6B00                       		bmi.s	loc_75E0
00009216 B042                       		cmp.w	d2,d0
00009218 6500                       		blo.s	locret_75F2
0000921A                            
0000921A                            loc_75E0:
0000921A 08A9 0003 0022             		bclr	#3,obStatus(a1)
00009220 117C 0002 0024             		move.b	#2,obRoutine(a0)
00009226 08A8 0003 0022             		bclr	#3,obStatus(a0)
0000922C                            
0000922C                            locret_75F2:
0000922C 4E75                       		rts	
0000922E                            ; End of function ExitPlatform
0000922E                            
0000922E                            		include	"_incObj\11 Bridge (part 3).asm"
0000922E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000922E                            
0000922E                            
0000922E                            Bri_MoveSonic:
0000922E 7000                       		moveq	#0,d0
00009230 1028 003F                  		move.b	$3F(a0),d0
00009234 1030 0029                  		move.b	$29(a0,d0.w),d0
00009238 ED48                       		lsl.w	#6,d0
0000923A 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00009240 2440                       		movea.l	d0,a2
00009242 43F8 D000                  		lea	(v_player).w,a1
00009246 302A 000C                  		move.w	obY(a2),d0
0000924A 5140                       		subq.w	#8,d0
0000924C 7200                       		moveq	#0,d1
0000924E 1229 0016                  		move.b	obHeight(a1),d1
00009252 9041                       		sub.w	d1,d0
00009254 3340 000C                  		move.w	d0,obY(a1)	; change Sonic's position on y-axis
00009258 4E75                       		rts	
0000925A                            ; End of function Bri_MoveSonic
0000925A                            
0000925A                            
0000925A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000925A                            
0000925A                            
0000925A                            Bri_Bend:
0000925A 1028 003E                  		move.b	$3E(a0),d0
0000925E 6100 A7D2                  		bsr.w	CalcSine
00009262 3800                       		move.w	d0,d4
00009264 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
0000926A 7000                       		moveq	#0,d0
0000926C 1028 0028                  		move.b	obSubtype(a0),d0
00009270 E948                       		lsl.w	#4,d0
00009272 7600                       		moveq	#0,d3
00009274 1628 003F                  		move.b	$3F(a0),d3
00009278 3403                       		move.w	d3,d2
0000927A D640                       		add.w	d0,d3
0000927C 7A00                       		moveq	#0,d5
0000927E 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00009284 1A35 3000                  		move.b	(a5,d3.w),d5
00009288 0243 000F                  		andi.w	#$F,d3
0000928C E94B                       		lsl.w	#4,d3
0000928E 47F4 3000                  		lea	(a4,d3.w),a3
00009292 45E8 0029                  		lea	$29(a0),a2
00009296                            
00009296                            loc_765C:
00009296 7000                       		moveq	#0,d0
00009298 101A                       		move.b	(a2)+,d0
0000929A ED48                       		lsl.w	#6,d0
0000929C 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
000092A2 2240                       		movea.l	d0,a1
000092A4 7000                       		moveq	#0,d0
000092A6 101B                       		move.b	(a3)+,d0
000092A8 5240                       		addq.w	#1,d0
000092AA C0C5                       		mulu.w	d5,d0
000092AC C0C4                       		mulu.w	d4,d0
000092AE 4840                       		swap	d0
000092B0 D069 003C                  		add.w	$3C(a1),d0
000092B4 3340 000C                  		move.w	d0,obY(a1)
000092B8 51CA FFDC                  		dbf	d2,loc_765C
000092BC 7000                       		moveq	#0,d0
000092BE 1028 0028                  		move.b	obSubtype(a0),d0
000092C2 7600                       		moveq	#0,d3
000092C4 1628 003F                  		move.b	$3F(a0),d3
000092C8 5203                       		addq.b	#1,d3
000092CA 9600                       		sub.b	d0,d3
000092CC 4403                       		neg.b	d3
000092CE 6B00                       		bmi.s	locret_76CA
000092D0 3403                       		move.w	d3,d2
000092D2 E94B                       		lsl.w	#4,d3
000092D4 47F4 3000                  		lea	(a4,d3.w),a3
000092D8 D6C2                       		adda.w	d2,a3
000092DA 5342                       		subq.w	#1,d2
000092DC 6500                       		bcs.s	locret_76CA
000092DE                            
000092DE                            loc_76A4:
000092DE 7000                       		moveq	#0,d0
000092E0 101A                       		move.b	(a2)+,d0
000092E2 ED48                       		lsl.w	#6,d0
000092E4 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
000092EA 2240                       		movea.l	d0,a1
000092EC 7000                       		moveq	#0,d0
000092EE 1023                       		move.b	-(a3),d0
000092F0 5240                       		addq.w	#1,d0
000092F2 C0C5                       		mulu.w	d5,d0
000092F4 C0C4                       		mulu.w	d4,d0
000092F6 4840                       		swap	d0
000092F8 D069 003C                  		add.w	$3C(a1),d0
000092FC 3340 000C                  		move.w	d0,obY(a1)
00009300 51CA FFDC                  		dbf	d2,loc_76A4
00009304                            
00009304                            locret_76CA:
00009304 4E75                       		rts	
00009306                            ; End of function Bri_Bend
00009306                            
00009306                            ; ===========================================================================
00009306                            ; ---------------------------------------------------------------------------
00009306                            ; GHZ bridge-bending data
00009306                            ; (Defines how the bridge bends	when Sonic walks across	it)
00009306                            ; ---------------------------------------------------------------------------
00009306                            Obj11_BendData:	incbin	"misc\ghzbend1.bin"
00009416                            		even
00009416                            Obj11_BendData2:incbin	"misc\ghzbend2.bin"
00009516                            		even
00009516                            
00009516                            ; ===========================================================================
00009516                            
00009516                            Bri_ChkDel:
00009534 4E75                       		rts	
00009536                            ; ===========================================================================
00009536                            
00009536                            @deletebridge:
00009536 7400                       		moveq	#0,d2
00009538 45E8 0028                  		lea	obSubtype(a0),a2 ; load bridge length
0000953C 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
0000953E 5302                       		subq.b	#1,d2		; subtract 1
00009540 6500                       		bcs.s	@delparent
00009542                            
00009542                            	@loop:
00009542 7000                       		moveq	#0,d0
00009544 101A                       		move.b	(a2)+,d0
00009546 ED48                       		lsl.w	#6,d0
00009548 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
0000954E 2240                       		movea.l	d0,a1
00009550 B048                       		cmp.w	a0,d0
00009552 6700                       		beq.s	@skipdel
00009554 6100 0000                  		bsr.w	DeleteChild
00009558                            
00009558                            	@skipdel:
00009558 51CA FFE8                  		dbf	d2,@loop ; repeat d2 times (bridge length)
0000955C                            
0000955C                            @delparent:
0000955C 6100 0000                  		bsr.w	DeleteObject
00009560 4E75                       		rts	
00009562                            ; ===========================================================================
00009562                            
00009562                            Bri_Delete:	; Routine 6, 8
00009562 6100 0000                  		bsr.w	DeleteObject
00009566 4E75                       		rts	
00009568                            ; ===========================================================================
00009568                            
00009568                            Bri_Display:	; Routine $A
00009568 6100 0000                  		bsr.w	DisplaySprite
0000956C 4E75                       		rts	
0000956C 4E75                       		rts	
0000956E                            Map_Bri:	include	"_maps\Bridge.asm"
0000956E                            ; ---------------------------------------------------------------------------
0000956E                            ; Sprite mappings - GHZ	bridge
0000956E                            ; ---------------------------------------------------------------------------
0000956E                            Map_Bri_internal:
0000956E 0000                       		dc.w M_Bri_Log-Map_Bri_internal
00009570 0000                       		dc.w M_Bri_Stump-Map_Bri_internal
00009572 0000                       		dc.w M_Bri_Rope-Map_Bri_internal
00009574 01                         M_Bri_Log:	dc.b 1
00009575 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; log
0000957A 02                         M_Bri_Stump:	dc.b 2
0000957B F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0	; stump & rope
00009580 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00009585 01                         M_Bri_Rope:	dc.b 1
00009586 FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8	; rope only
0000958C 00                         		even
0000958C 00                         		even
0000958C                            
0000958C                            		include	"_incObj\15 Swinging Platforms (part 1).asm"
0000958C                            ; ---------------------------------------------------------------------------
0000958C                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
0000958C                            ;	    - spiked ball on a chain (SBZ)
0000958C                            ; ---------------------------------------------------------------------------
0000958C                            
0000958C                            SwingingPlatform:
0000958C 7000                       		moveq	#0,d0
0000958E 1028 0024                  		move.b	obRoutine(a0),d0
00009592 323B 0000                  		move.w	Swing_Index(pc,d0.w),d1
00009596 4EFB 1000                  		jmp	Swing_Index(pc,d1.w)
0000959A                            ; ===========================================================================
0000959A 0000 0000                  Swing_Index:	dc.w Swing_Main-Swing_Index, Swing_SetSolid-Swing_Index
0000959E 0000 0000                  		dc.w Swing_Action2-Swing_Index,	Swing_Delete-Swing_Index
000095A2 0000 0000                  		dc.w Swing_Delete-Swing_Index, Swing_Display-Swing_Index
000095A6 0000                       		dc.w Swing_Action-Swing_Index
000095A8                            
000095A8 =0000003A                  swing_origX:	equ $3A		; original x-axis position
000095A8 =00000038                  swing_origY:	equ $38		; original y-axis position
000095A8                            ; ===========================================================================
000095A8                            
000095A8                            Swing_Main:	; Routine 0
000095A8 5428 0024                  		addq.b	#2,obRoutine(a0)
000095AC 217C 0000 0000 0004        		move.l	#Map_Swing_GHZ,obMap(a0) ; GHZ and MZ specific code
000095B4 317C 4380 0002             		move.w	#$4380,obGfx(a0)
000095BA 117C 0004 0001             		move.b	#4,obRender(a0)
000095C0 317C 0180 0018             		move.w	#$180,obPriority(a0)
000095C6 117C 0018 0014             		move.b	#$18,obActWid(a0)
000095CC 117C 0008 0016             		move.b	#8,obHeight(a0)
000095D2 3168 000C 0038             		move.w	obY(a0),swing_origY(a0)
000095D8 3168 0008 003A             		move.w	obX(a0),swing_origX(a0)
000095DE 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
000095E4 6600                       		bne.s	@notSLZ
000095E6                            
000095E6 217C 0000 0000 0004        		move.l	#Map_Swing_SLZ,obMap(a0) ; SLZ specific code
000095EE 317C 43DC 0002             		move.w	#$43DC,obGfx(a0)
000095F4 117C 0020 0014             		move.b	#$20,obActWid(a0)
000095FA 117C 0010 0016             		move.b	#$10,obHeight(a0)
00009600 117C 0099 0020             		move.b	#$99,obColType(a0)
00009606                            
00009606                            	@notSLZ:
00009606 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
0000960C 6600                       		bne.s	@length
0000960E                            
0000960E 217C 0000 0000 0004        		move.l	#Map_BBall,obMap(a0) ; SBZ specific code
00009616 317C 0391 0002             		move.w	#$391,obGfx(a0)
0000961C 117C 0018 0014             		move.b	#$18,obActWid(a0)
00009622 117C 0018 0016             		move.b	#$18,obHeight(a0)
00009628 117C 0086 0020             		move.b	#$86,obColType(a0)
0000962E 117C 000C 0024             		move.b	#$C,obRoutine(a0) ; goto Swing_Action next
00009634                            
00009634                            @length:
00009634 1810                       		move.b	0(a0),d4
00009636 7200                       		moveq	#0,d1
00009638 45E8 0028                  		lea	obSubtype(a0),a2 ; move chain length to a2
0000963C 1212                       		move.b	(a2),d1		; move a2 to d1
0000963E 3F01                       		move.w	d1,-(sp)
00009640 0241 000F                  		andi.w	#$F,d1
00009644 14FC 0000                  		move.b	#0,(a2)+
00009648 3601                       		move.w	d1,d3
0000964A E94B                       		lsl.w	#4,d3
0000964C 5003                       		addq.b	#8,d3
0000964E 1143 003C                  		move.b	d3,$3C(a0)
00009652 5103                       		subq.b	#8,d3
00009654 4A28 001A                  		tst.b	obFrame(a0)
00009658 6700                       		beq.s	@makechain
0000965A 5003                       		addq.b	#8,d3
0000965C 5341                       		subq.w	#1,d1
0000965E                            
0000965E                            @makechain:
0000965E 6100 0000                  		bsr.w	FindFreeObj
00009662 6600                       		bne.s	@fail
00009664 5228 0028                  		addq.b	#1,obSubtype(a0)
00009668 3A09                       		move.w	a1,d5
0000966A 0445 D000                  		subi.w	#$D000,d5
0000966E EC4D                       		lsr.w	#6,d5
00009670 0245 007F                  		andi.w	#$7F,d5
00009674 14C5                       		move.b	d5,(a2)+
00009676 137C 000A 0024             		move.b	#$A,obRoutine(a1) ; goto Swing_Display next
0000967C 1284                       		move.b	d4,0(a1)	; load swinging	object
0000967E 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
00009684 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0000968A 08A9 0006 0002             		bclr	#6,obGfx(a1)
00009690 137C 0004 0001             		move.b	#4,obRender(a1)
00009696 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000969C 137C 0008 0014             		move.b	#8,obActWid(a1)
000096A2 137C 0001 001A             		move.b	#1,obFrame(a1)
000096A8 1343 003C                  		move.b	d3,$3C(a1)
000096AC 0403 0010                  		subi.b	#$10,d3
000096B0 6400                       		bcc.s	@notanchor
000096B2 137C 0002 001A             		move.b	#2,obFrame(a1)
000096B8 337C 0180 0018             		move.w	#$180,obPriority(a1)
000096BE 08E9 0006 0002             		bset	#6,obGfx(a1)
000096C4                            
000096C4                            	@notanchor:
000096C4 51C9 FF98                  		dbf	d1,@makechain ; repeat d1 times (chain length)
000096C8                            
000096C8                            	@fail:
000096C8 3A08                       		move.w	a0,d5
000096CA 0445 D000                  		subi.w	#$D000,d5
000096CE EC4D                       		lsr.w	#6,d5
000096D0 0245 007F                  		andi.w	#$7F,d5
000096D4 14C5                       		move.b	d5,(a2)+
000096D6 317C 4080 0026             		move.w	#$4080,obAngle(a0)
000096DC 317C FE00 003E             		move.w	#-$200,$3E(a0)
000096E2 321F                       		move.w	(sp)+,d1
000096E4 0801 0004                  		btst	#4,d1		; is object type $1X ?
000096E8 6700                       		beq.s	@not1X	; if not, branch
000096EA 217C 0000 0000 0004        		move.l	#Map_GBall,obMap(a0) ; use GHZ ball mappings
000096F2 317C 43AA 0002             		move.w	#$43AA,obGfx(a0)
000096F8 117C 0001 001A             		move.b	#1,obFrame(a0)
000096FE 317C 0100 0018             		move.w	#$100,obPriority(a0)
00009704 117C 0081 0020             		move.b	#$81,obColType(a0) ; make object hurt when touched
0000970A                            
0000970A                            	@not1X:
0000970A 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; is zone SBZ?
00009710 6700                       		beq.s	Swing_Action	; if yes, branch
00009712                            
00009712                            Swing_SetSolid:	; Routine 2
00009712 7200                       		moveq	#0,d1
00009714 1228 0014                  		move.b	obActWid(a0),d1
00009718 7600                       		moveq	#0,d3
0000971A 1628 0016                  		move.b	obHeight(a0),d3
0000971E 6100 FA76                  		bsr.w	Swing_Solid
00009722                            
00009722                            Swing_Action:	; Routine $C
00009722 6100 0000                  		bsr.w	Swing_Move
00009726 6100 0000                  		bsr.w	DisplaySprite
0000972A 6000 0000                  		bra.w	Swing_ChkDel
0000972E                            ; ===========================================================================
0000972E                            
0000972E                            Swing_Action2:	; Routine 4
0000972E 7200                       		moveq	#0,d1
00009730 1228 0014                  		move.b	obActWid(a0),d1
00009734 6100 FAC4                  		bsr.w	ExitPlatform
00009738 3F28 0008                  		move.w	obX(a0),-(sp)
0000973C 6100 0000                  		bsr.w	Swing_Move
00009740 341F                       		move.w	(sp)+,d2
00009742 7600                       		moveq	#0,d3
00009744 1628 0016                  		move.b	obHeight(a0),d3
00009748 5203                       		addq.b	#1,d3
0000974A 6100 0000                  		bsr.w	MvSonicOnPtfm
0000974E 6100 0000                  		bsr.w	DisplaySprite
00009752 6000 0000                  		bra.w	Swing_ChkDel
00009756                            
00009756 4E75                       		rts
00009756 4E75                       		rts
00009758                            
00009758                            ; ---------------------------------------------------------------------------
00009758                            ; Subroutine to	change Sonic's position with a platform
00009758                            ; ---------------------------------------------------------------------------
00009758                            
00009758                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009758                            
00009758                            
00009758                            MvSonicOnPtfm:
00009758 43F8 D000                  		lea	(v_player).w,a1
0000975C 3028 000C                  		move.w	obY(a0),d0
00009760 9043                       		sub.w	d3,d0
00009762 6000                       		bra.s	MvSonic2
00009764                            ; End of function MvSonicOnPtfm
00009764                            
00009764                            ; ---------------------------------------------------------------------------
00009764                            ; Subroutine to	change Sonic's position with a platform
00009764                            ; ---------------------------------------------------------------------------
00009764                            
00009764                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009764                            
00009764                            
00009764                            MvSonicOnPtfm2:
00009764 43F8 D000                  		lea	(v_player).w,a1
00009768 3028 000C                  		move.w	obY(a0),d0
0000976C 0440 0009                  		subi.w	#9,d0
00009770                            
00009770                            MvSonic2:
00009770 4A38 F7C8                  		tst.b	(f_lockmulti).w
00009774 6B00                       		bmi.s	locret_7B62
00009776 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
0000977C 6400                       		bhs.s	locret_7B62
0000977E 4A78 FE08                  		tst.w	(v_debuguse).w
00009782 6600                       		bne.s	locret_7B62
00009784 7200                       		moveq	#0,d1
00009786 1229 0016                  		move.b	obHeight(a1),d1
0000978A 9041                       		sub.w	d1,d0
0000978C 3340 000C                  		move.w	d0,obY(a1)
00009790 9468 0008                  		sub.w	obX(a0),d2
00009794 9569 0008                  		sub.w	d2,obX(a1)
00009798                            
00009798                            locret_7B62:
00009798 4E75                       		rts	
0000979A                            ; End of function MvSonicOnPtfm2
0000979A                            
0000979A                            		include	"_incObj\15 Swinging Platforms (part 2).asm"
0000979A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000979A                            
0000979A                            
0000979A                            Swing_Move:
0000979A 1038 FE78                  		move.b	(v_oscillate+$1A).w,d0
0000979E 323C 0080                  		move.w	#$80,d1
000097A2 0828 0000 0022             		btst	#0,obStatus(a0)
000097A8 6700                       		beq.s	loc_7B78
000097AA 4440                       		neg.w	d0
000097AC D041                       		add.w	d1,d0
000097AE                            
000097AE                            loc_7B78:
000097AE 6000                       		bra.s	Swing_Move2
000097B0                            ; End of function Swing_Move
000097B0                            
000097B0                            
000097B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000097B0                            
000097B0                            
000097B0                            Obj48_Move:
000097B0 4A28 003D                  		tst.b	$3D(a0)
000097B4 6600                       		bne.s	loc_7B9C
000097B6 3028 003E                  		move.w	$3E(a0),d0
000097BA 5040                       		addq.w	#8,d0
000097BC 3140 003E                  		move.w	d0,$3E(a0)
000097C0 D168 0026                  		add.w	d0,obAngle(a0)
000097C4 0C40 0200                  		cmpi.w	#$200,d0
000097C8 6600                       		bne.s	loc_7BB6
000097CA 117C 0001 003D             		move.b	#1,$3D(a0)
000097D0 6000                       		bra.s	loc_7BB6
000097D2                            ; ===========================================================================
000097D2                            
000097D2                            loc_7B9C:
000097D2 3028 003E                  		move.w	$3E(a0),d0
000097D6 5140                       		subq.w	#8,d0
000097D8 3140 003E                  		move.w	d0,$3E(a0)
000097DC D168 0026                  		add.w	d0,obAngle(a0)
000097E0 0C40 FE00                  		cmpi.w	#-$200,d0
000097E4 6600                       		bne.s	loc_7BB6
000097E6 117C 0000 003D             		move.b	#0,$3D(a0)
000097EC                            
000097EC                            loc_7BB6:
000097EC 1028 0026                  		move.b	obAngle(a0),d0
000097F0                            ; End of function Obj48_Move
000097F0                            
000097F0                            
000097F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000097F0                            
000097F0                            
000097F0                            Swing_Move2:
000097F0 6100 A240                  		bsr.w	CalcSine
000097F4 3428 0038                  		move.w	$38(a0),d2
000097F8 3628 003A                  		move.w	$3A(a0),d3
000097FC 45E8 0028                  		lea	obSubtype(a0),a2
00009800 7C00                       		moveq	#0,d6
00009802 1C1A                       		move.b	(a2)+,d6
00009804                            
00009804                            loc_7BCE:
00009804 7800                       		moveq	#0,d4
00009806 181A                       		move.b	(a2)+,d4
00009808 ED4C                       		lsl.w	#6,d4
0000980A 0684 00FF D000             		addi.l	#v_objspace&$FFFFFF,d4
00009810 2244                       		movea.l	d4,a1
00009812 7800                       		moveq	#0,d4
00009814 1829 003C                  		move.b	$3C(a1),d4
00009818 2A04                       		move.l	d4,d5
0000981A C9C0                       		muls.w	d0,d4
0000981C E084                       		asr.l	#8,d4
0000981E CBC1                       		muls.w	d1,d5
00009820 E085                       		asr.l	#8,d5
00009822 D842                       		add.w	d2,d4
00009824 DA43                       		add.w	d3,d5
00009826 3344 000C                  		move.w	d4,obY(a1)
0000982A 3345 0008                  		move.w	d5,obX(a1)
0000982E 51CE FFD4                  		dbf	d6,loc_7BCE
00009832 4E75                       		rts	
00009834                            ; End of function Swing_Move2
00009834                            
00009834                            ; ===========================================================================
00009834                            
00009834                            Swing_ChkDel:
00009852 4E75                       		rts	
00009854                            ; ===========================================================================
00009854                            
00009854                            Swing_DelAll:
00009854 7400                       		moveq	#0,d2
00009856 45E8 0028                  		lea	obSubtype(a0),a2
0000985A 141A                       		move.b	(a2)+,d2
0000985C                            
0000985C                            Swing_DelLoop:
0000985C 7000                       		moveq	#0,d0
0000985E 101A                       		move.b	(a2)+,d0
00009860 ED48                       		lsl.w	#6,d0
00009862 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00009868 2240                       		movea.l	d0,a1
0000986A 6100 0000                  		bsr.w	DeleteChild
0000986E 51CA FFEC                  		dbf	d2,Swing_DelLoop ; repeat for length of	chain
00009872 4E75                       		rts	
00009874                            ; ===========================================================================
00009874                            
00009874                            Swing_Delete:	; Routine 6, 8
00009874 6100 0000                  		bsr.w	DeleteObject
00009878 4E75                       		rts	
0000987A                            ; ===========================================================================
0000987A                            
0000987A                            Swing_Display:	; Routine $A
0000987A 6000 0000                  		bra.w	DisplaySprite
0000987A 6000 0000                  		bra.w	DisplaySprite
0000987E                            Map_Swing_GHZ:	include	"_maps\Swinging Platforms (GHZ).asm"
0000987E                            ; ---------------------------------------------------------------------------
0000987E                            ; Sprite mappings - GHZ	and MZ swinging	platforms
0000987E                            ; ---------------------------------------------------------------------------
0000987E                            Map_Swing_GHZ_internal:
0000987E 0000                       		dc.w @block-Map_Swing_GHZ_internal
00009880 0000                       		dc.w @chain-Map_Swing_GHZ_internal
00009882 0000                       		dc.w @anchor-Map_Swing_GHZ_internal
00009884 02                         @block:		dc.b 2
00009885 F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
0000988A F809 0004 00               		dc.b $F8, 9, 0,	4, 0
0000988F 01                         @chain:		dc.b 1
00009890 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00009895 01                         @anchor:	dc.b 1
00009896 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000989C 00                         		even
0000989C 00                         		even
0000989C                            Map_Swing_SLZ:	include	"_maps\Swinging Platforms (SLZ).asm"
0000989C                            ; ---------------------------------------------------------------------------
0000989C                            ; Sprite mappings - SLZ	swinging platforms
0000989C                            ; ---------------------------------------------------------------------------
0000989C                            Map_Swing_SLZ_internal:
0000989C 0000                       		dc.w @block-Map_Swing_SLZ_internal
0000989E 0000                       		dc.w @chain-Map_Swing_SLZ_internal
000098A0 0000                       		dc.w @anchor-Map_Swing_SLZ_internal
000098A2 08                         @block:		dc.b 8
000098A3 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
000098A8 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
000098AD F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
000098B2 F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
000098B7 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
000098BC 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
000098C1 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
000098C6 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
000098CB 01                         @chain:		dc.b 1
000098CC F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
000098D1 01                         @anchor:	dc.b 1
000098D2 F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
000098D8 00                         		even
000098D8 00                         		even
000098D8                            		include	"_incObj\17 Spiked Pole Helix.asm"
000098D8                            ; ---------------------------------------------------------------------------
000098D8                            ; Object 17 - helix of spikes on a pole	(GHZ)
000098D8                            ; ---------------------------------------------------------------------------
000098D8                            
000098D8                            Helix:
000098D8 7000                       		moveq	#0,d0
000098DA 1028 0024                  		move.b	obRoutine(a0),d0
000098DE 323B 0000                  		move.w	Hel_Index(pc,d0.w),d1
000098E2 4EFB 1000                  		jmp	Hel_Index(pc,d1.w)
000098E6                            ; ===========================================================================
000098E6 0000                       Hel_Index:	dc.w Hel_Main-Hel_Index
000098E8 0000                       		dc.w Hel_Action-Hel_Index
000098EA 0000                       		dc.w Hel_Action-Hel_Index
000098EC 0000                       		dc.w Hel_Delete-Hel_Index
000098EE 0000                       		dc.w Hel_Display-Hel_Index
000098F0                            
000098F0 =0000003E                  hel_frame:	equ $3E		; start frame (different for each spike)
000098F0                            
000098F0                            ;		$29-38 are used for child object addresses
000098F0                            ; ===========================================================================
000098F0                            
000098F0                            Hel_Main:	; Routine 0
000098F0 5428 0024                  		addq.b	#2,obRoutine(a0)
000098F4 217C 0000 0000 0004        		move.l	#Map_Hel,obMap(a0)
000098FC 317C 4398 0002             		move.w	#$4398,obGfx(a0)
00009902 117C 0007 0022             		move.b	#7,obStatus(a0)
00009908 117C 0004 0001             		move.b	#4,obRender(a0)
0000990E 317C 0180 0018             		move.w	#$180,obPriority(a0)
00009914 117C 0008 0014             		move.b	#8,obActWid(a0)
0000991A 3428 000C                  		move.w	obY(a0),d2
0000991E 3628 0008                  		move.w	obX(a0),d3
00009922 1810                       		move.b	0(a0),d4
00009924 45E8 0028                  		lea	obSubtype(a0),a2 ; move helix length to a2
00009928 7200                       		moveq	#0,d1
0000992A 1212                       		move.b	(a2),d1		; move helix length to d1
0000992C 14FC 0000                  		move.b	#0,(a2)+	; clear subtype
00009930 3001                       		move.w	d1,d0
00009932 E248                       		lsr.w	#1,d0
00009934 E948                       		lsl.w	#4,d0
00009936 9640                       		sub.w	d0,d3		; d3 is x-axis position of leftmost spike
00009938 5501                       		subq.b	#2,d1
0000993A 6500                       		bcs.s	Hel_Action	; skip to action if length is only 1
0000993C 7C00                       		moveq	#0,d6
0000993E                            
0000993E                            Hel_Build:
0000993E 6100 0000                  		bsr.w	FindFreeObj
00009942 6600                       		bne.s	Hel_Action
00009944 5228 0028                  		addq.b	#1,obSubtype(a0)
00009948 3A09                       		move.w	a1,d5
0000994A 0445 D000                  		subi.w	#$D000,d5
0000994E EC4D                       		lsr.w	#6,d5
00009950 0245 007F                  		andi.w	#$7F,d5
00009954 14C5                       		move.b	d5,(a2)+	; copy child address to parent RAM
00009956 137C 0008 0024             		move.b	#8,obRoutine(a1)
0000995C 1284                       		move.b	d4,0(a1)
0000995E 3342 000C                  		move.w	d2,ObY(a1)
00009962 3343 0008                  		move.w	d3,obX(a1)
00009966 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
0000996C 337C 4398 0002             		move.w	#$4398,obGfx(a1)
00009972 137C 0004 0001             		move.b	#4,obRender(a1)
00009978 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000997E 137C 0008 0014             		move.b	#8,obActWid(a1)
00009984 1346 003E                  		move.b	d6,hel_frame(a1)
00009988 5206                       		addq.b	#1,d6
0000998A 0206 0007                  		andi.b	#7,d6
0000998E 0643 0010                  		addi.w	#$10,d3
00009992 B668 0008                  		cmp.w	obX(a0),d3	; is this spike in the centre?
00009996 6600                       		bne.s	Hel_NotCentre	; if not, branch
00009998                            
00009998 1146 003E                  		move.b	d6,hel_frame(a0) ; set parent spike frame
0000999C 5206                       		addq.b	#1,d6
0000999E 0206 0007                  		andi.b	#7,d6
000099A2 0643 0010                  		addi.w	#$10,d3		; skip to next spike
000099A6 5228 0028                  		addq.b	#1,obSubtype(a0)
000099AA                            
000099AA                            	Hel_NotCentre:
000099AA 51C9 FF92                  		dbf	d1,Hel_Build ; repeat d1 times (helix length)
000099AE                            
000099AE                            Hel_Action:	; Routine 2, 4
000099AE 6100 0000                  		bsr.w	Hel_RotateSpikes
000099B2 6100 0000                  		bsr.w	DisplaySprite
000099B6 6000 0000                  		bra.w	Hel_ChkDel
000099BA                            
000099BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000099BA                            
000099BA                            
000099BA                            Hel_RotateSpikes:
000099BA 1038 FEC1                  		move.b	(v_ani0_frame).w,d0
000099BE 117C 0000 0020             		move.b	#0,obColType(a0) ; make object harmless
000099C4 D028 003E                  		add.b	hel_frame(a0),d0
000099C8 0200 0007                  		andi.b	#7,d0
000099CC 1140 001A                  		move.b	d0,obFrame(a0)	; change current frame
000099D0 6600                       		bne.s	locret_7DA6
000099D2 117C 0084 0020             		move.b	#$84,obColType(a0) ; make object harmful
000099D8                            
000099D8                            locret_7DA6:
000099D8 4E75                       		rts	
000099DA                            ; End of function Hel_RotateSpikes
000099DA                            
000099DA                            ; ===========================================================================
000099DA                            
000099DA                            Hel_ChkDel:
000099F8 4E75                       		rts	
000099FA                            ; ===========================================================================
000099FA                            
000099FA                            Hel_DelAll:
000099FA 7400                       		moveq	#0,d2
000099FC 45E8 0028                  		lea	obSubtype(a0),a2 ; move helix length to a2
00009A00 141A                       		move.b	(a2)+,d2	; move helix length to d2
00009A02 5502                       		subq.b	#2,d2
00009A04 6500                       		bcs.s	Hel_Delete
00009A06                            
00009A06                            	Hel_DelLoop:
00009A06 7000                       		moveq	#0,d0
00009A08 101A                       		move.b	(a2)+,d0
00009A0A ED48                       		lsl.w	#6,d0
00009A0C 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00009A12 2240                       		movea.l	d0,a1		; get child address
00009A14 6100 0000                  		bsr.w	DeleteChild	; delete object
00009A18 51CA FFEC                  		dbf	d2,Hel_DelLoop ; repeat d2 times (helix length)
00009A1C                            
00009A1C                            Hel_Delete:	; Routine 6
00009A1C 6100 0000                  		bsr.w	DeleteObject
00009A20 4E75                       		rts	
00009A22                            ; ===========================================================================
00009A22                            
00009A22                            Hel_Display:	; Routine 8
00009A22 6100 FF96                  		bsr.w	Hel_RotateSpikes
00009A26 6000 0000                  		bra.w	DisplaySprite
00009A26 6000 0000                  		bra.w	DisplaySprite
00009A2A                            Map_Hel:	include	"_maps\Spiked Pole Helix.asm"
00009A2A                            ; ---------------------------------------------------------------------------
00009A2A                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00009A2A                            ; ---------------------------------------------------------------------------
00009A2A                            Map_Hel_internal:
00009A2A 0000                       		dc.w byte_7E08-Map_Hel_internal
00009A2C 0000                       		dc.w byte_7E0E-Map_Hel_internal
00009A2E 0000                       		dc.w byte_7E14-Map_Hel_internal
00009A30 0000                       		dc.w byte_7E1A-Map_Hel_internal
00009A32 0000                       		dc.w byte_7E20-Map_Hel_internal
00009A34 0000                       		dc.w byte_7E26-Map_Hel_internal
00009A36 0000                       		dc.w byte_7E2E-Map_Hel_internal
00009A38 0000                       		dc.w byte_7E2C-Map_Hel_internal
00009A3A 01                         byte_7E08:	dc.b 1
00009A3B F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC	; points straight up (harmful)
00009A40 01                         byte_7E0E:	dc.b 1
00009A41 F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8	; 45 degree
00009A46 01                         byte_7E14:	dc.b 1
00009A47 F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8	; 90 degree
00009A4C 01                         byte_7E1A:	dc.b 1
00009A4D FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8	; 45 degree
00009A52 01                         byte_7E20:	dc.b 1
00009A53 0001 000E FC               		dc.b 0,	1, 0, $E, $FC	; straight down
00009A58 01                         byte_7E26:	dc.b 1
00009A59 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD	; 45 degree
00009A5E 01                         byte_7E2C:	dc.b 1
00009A5F F4                         		dc.b $F4
00009A60                            byte_7E2E:	; reads the 0 below	; not visible
00009A60 0000 11FD                  		dc.b 0, 0,	$11, $FD ; 45 degree
00009A64                            		even
00009A64                            		even
00009A64                            		include	"_incObj\18 Platforms.asm"
00009A64                            ; ---------------------------------------------------------------------------
00009A64                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
00009A64                            ; ---------------------------------------------------------------------------
00009A64                            
00009A64                            BasicPlatform:
00009A64 7000                       		moveq	#0,d0
00009A66 1028 0024                  		move.b	obRoutine(a0),d0
00009A6A 323B 0000                  		move.w	Plat_Index(pc,d0.w),d1
00009A6E 4EFB 1000                  		jmp	Plat_Index(pc,d1.w)
00009A72                            ; ===========================================================================
00009A72 0000                       Plat_Index:	dc.w Plat_Main-Plat_Index
00009A74 0000                       		dc.w Plat_Solid-Plat_Index
00009A76 0000                       		dc.w Plat_Action2-Plat_Index
00009A78 0000                       		dc.w Plat_Delete-Plat_Index
00009A7A 0000                       		dc.w Plat_Action-Plat_Index
00009A7C                            ; ===========================================================================
00009A7C                            
00009A7C                            Plat_Main:	; Routine 0
00009A7C 5428 0024                  		addq.b	#2,obRoutine(a0)
00009A80 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00009A86 217C 0000 0000 0004        		move.l	#Map_Plat_GHZ,obMap(a0)
00009A8E 117C 0020 0014             		move.b	#$20,obActWid(a0)
00009A94 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w ; check if level is SYZ
00009A9A 6600                       		bne.s	@notSYZ
00009A9C                            
00009A9C 217C 0000 0000 0004        		move.l	#Map_Plat_SYZ,obMap(a0) ; SYZ specific code
00009AA4 117C 0020 0014             		move.b	#$20,obActWid(a0)
00009AAA                            
00009AAA                            	@notSYZ:
00009AAA 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
00009AB0 6600                       		bne.s	@notSLZ
00009AB2 217C 0000 0000 0004        		move.l	#Map_Plat_SLZ,obMap(a0) ; SLZ specific code
00009ABA 117C 0020 0014             		move.b	#$20,obActWid(a0)
00009AC0 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00009AC6 117C 0003 0028             		move.b	#3,obSubtype(a0)
00009ACC                            
00009ACC                            	@notSLZ:
00009ACC 117C 0004 0001             		move.b	#4,obRender(a0)
00009AD2 317C 0200 0018             		move.w	#$200,obPriority(a0)
00009AD8 3168 000C 002C             		move.w	obY(a0),$2C(a0)
00009ADE 3168 000C 0034             		move.w	obY(a0),$34(a0)
00009AE4 3168 0008 0032             		move.w	obX(a0),$32(a0)
00009AEA 317C 0080 0026             		move.w	#$80,obAngle(a0)
00009AF0 7200                       		moveq	#0,d1
00009AF2 1028 0028                  		move.b	obSubtype(a0),d0
00009AF6 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
00009AFA 6600                       		bne.s	@setframe	; if not, branch
00009AFC 5201                       		addq.b	#1,d1		; use frame #1
00009AFE 117C 0020 0014             		move.b	#$20,obActWid(a0) ; set width
00009B04                            
00009B04                            	@setframe:
00009B04 1141 001A                  		move.b	d1,obFrame(a0)	; set frame to d1
00009B08                            
00009B08                            Plat_Solid:	; Routine 2
00009B08 4A28 0038                  		tst.b	$38(a0)
00009B0C 6700                       		beq.s	loc_7EE0
00009B0E 5928 0038                  		subq.b	#4,$38(a0)
00009B12                            
00009B12                            	loc_7EE0:
00009B12 7200                       		moveq	#0,d1
00009B14 1228 0014                  		move.b	obActWid(a0),d1
00009B18 6100 F56C                  		bsr.w	PlatformObject
00009B1C                            
00009B1C                            Plat_Action:	; Routine 8
00009B1C 6100 0000                  		bsr.w	Plat_Move
00009B20 6100 0000                  		bsr.w	Plat_Nudge
00009B24 6100 0000                  		bsr.w	DisplaySprite
00009B28 6000 0000                  		bra.w	Plat_ChkDel
00009B2C                            ; ===========================================================================
00009B2C                            
00009B2C                            Plat_Action2:	; Routine 4
00009B2C 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
00009B32 6700                       		beq.s	loc_7F06
00009B34 5828 0038                  		addq.b	#4,$38(a0)
00009B38                            
00009B38                            	loc_7F06:
00009B38 7200                       		moveq	#0,d1
00009B3A 1228 0014                  		move.b	obActWid(a0),d1
00009B3E 6100 F6BA                  		bsr.w	ExitPlatform
00009B42 3F28 0008                  		move.w	obX(a0),-(sp)
00009B46 6100 0000                  		bsr.w	Plat_Move
00009B4A 6100 0000                  		bsr.w	Plat_Nudge
00009B4E 341F                       		move.w	(sp)+,d2
00009B50 6100 FC12                  		bsr.w	MvSonicOnPtfm2
00009B54 6100 0000                  		bsr.w	DisplaySprite
00009B58 6000 0000                  		bra.w	Plat_ChkDel
00009B5C                            
00009B5C 4E75                       		rts
00009B5E                            
00009B5E                            ; ---------------------------------------------------------------------------
00009B5E                            ; Subroutine to	move platform slightly when you	stand on it
00009B5E                            ; ---------------------------------------------------------------------------
00009B5E                            
00009B5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009B5E                            
00009B5E                            
00009B5E                            Plat_Nudge:
00009B5E 1028 0038                  		move.b	$38(a0),d0
00009B62 6100 9ECE                  		bsr.w	CalcSine
00009B66 323C 0400                  		move.w	#$400,d1
00009B6A C1C1                       		muls.w	d1,d0
00009B6C 4840                       		swap	d0
00009B6E D068 002C                  		add.w	$2C(a0),d0
00009B72 3140 000C                  		move.w	d0,obY(a0)
00009B76 4E75                       		rts	
00009B78                            ; End of function Plat_Nudge
00009B78                            
00009B78                            ; ---------------------------------------------------------------------------
00009B78                            ; Subroutine to	move platforms
00009B78                            ; ---------------------------------------------------------------------------
00009B78                            
00009B78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009B78                            
00009B78                            
00009B78                            Plat_Move:
00009B78 7000                       		moveq	#0,d0
00009B7A 1028 0028                  		move.b	obSubtype(a0),d0
00009B7E 0240 000F                  		andi.w	#$F,d0
00009B82 D040                       		add.w	d0,d0
00009B84 323B 0000                  		move.w	@index(pc,d0.w),d1
00009B88 4EFB 1000                  		jmp	@index(pc,d1.w)
00009B8C                            ; End of function Plat_Move
00009B8C                            
00009B8C                            ; ===========================================================================
00009B8C 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00009B90 0000 0000                  		dc.w @type02-@index, @type03-@index
00009B94 0000 0000                  		dc.w @type04-@index, @type05-@index
00009B98 0000 0000                  		dc.w @type06-@index, @type07-@index
00009B9C 0000 0000                  		dc.w @type08-@index, @type00-@index
00009BA0 0000 0000                  		dc.w @type0A-@index, @type0B-@index
00009BA4 0000                       		dc.w @type0C-@index
00009BA6                            ; ===========================================================================
00009BA6                            
00009BA6                            @type00:
00009BA6 4E75                       		rts			; platform 00 doesn't move
00009BA8                            ; ===========================================================================
00009BA8                            
00009BA8                            @type05:
00009BA8 3028 0032                  		move.w	$32(a0),d0
00009BAC 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009BB0 4401                       		neg.b	d1		; reverse platform-motion
00009BB2 0601 0040                  		addi.b	#$40,d1
00009BB6 6000                       		bra.s	@type01_move
00009BB8                            ; ===========================================================================
00009BB8                            
00009BB8                            @type01:
00009BB8 3028 0032                  		move.w	$32(a0),d0
00009BBC 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009BC0 0401 0040                  		subi.b	#$40,d1
00009BC4                            
00009BC4                            	@type01_move:
00009BC4 4881                       		ext.w	d1
00009BC6 D041                       		add.w	d1,d0
00009BC8 3140 0008                  		move.w	d0,obX(a0)	; change position on x-axis
00009BCC 6000 0000                  		bra.w	@chgmotion
00009BD0                            ; ===========================================================================
00009BD0                            
00009BD0                            @type0C:
00009BD0 3028 0034                  		move.w	$34(a0),d0
00009BD4 1238 FE6C                  		move.b	(v_oscillate+$E).w,d1 ; load platform-motion variable
00009BD8 4401                       		neg.b	d1		; reverse platform-motion
00009BDA 0601 0030                  		addi.b	#$30,d1
00009BDE 6000                       		bra.s	@type02_move
00009BE0                            ; ===========================================================================
00009BE0                            
00009BE0                            @type0B:
00009BE0 3028 0034                  		move.w	$34(a0),d0
00009BE4 1238 FE6C                  		move.b	(v_oscillate+$E).w,d1 ; load platform-motion variable
00009BE8 0401 0030                  		subi.b	#$30,d1
00009BEC 6000                       		bra.s	@type02_move
00009BEE                            ; ===========================================================================
00009BEE                            
00009BEE                            @type06:
00009BEE 3028 0034                  		move.w	$34(a0),d0
00009BF2 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009BF6 4401                       		neg.b	d1		; reverse platform-motion
00009BF8 0601 0040                  		addi.b	#$40,d1
00009BFC 6000                       		bra.s	@type02_move
00009BFE                            ; ===========================================================================
00009BFE                            
00009BFE                            @type02:
00009BFE 3028 0034                  		move.w	$34(a0),d0
00009C02 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009C06 0401 0040                  		subi.b	#$40,d1
00009C0A                            
00009C0A                            	@type02_move:
00009C0A 4881                       		ext.w	d1
00009C0C D041                       		add.w	d1,d0
00009C0E 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00009C12 6000 0000                  		bra.w	@chgmotion
00009C16                            ; ===========================================================================
00009C16                            
00009C16                            @type03:
00009C16 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00009C1A 6600                       		bne.s	@type03_wait	; if yes, branch
00009C1C 0828 0003 0022             		btst	#3,obStatus(a0)	; is Sonic standing on the platform?
00009C22 6700                       		beq.s	@type03_nomove	; if not, branch
00009C24 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
00009C2A                            
00009C2A                            	@type03_nomove:
00009C2A 4E75                       		rts	
00009C2C                            
00009C2C                            	@type03_wait:
00009C2C 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
00009C30 66F8                       		bne.s	@type03_nomove	; if time is > 0, branch
00009C32 317C 0020 003A             		move.w	#32,$3A(a0)
00009C38 5228 0028                  		addq.b	#1,obSubtype(a0) ; change to type 04 (falling)
00009C3C 4E75                       		rts	
00009C3E                            ; ===========================================================================
00009C3E                            
00009C3E                            @type04:
00009C3E 4A68 003A                  		tst.w	$3A(a0)
00009C42 6700                       		beq.s	@loc_8048
00009C44 5368 003A                  		subq.w	#1,$3A(a0)
00009C48 6600                       		bne.s	@loc_8048
00009C4A 0828 0003 0022             		btst	#3,obStatus(a0)
00009C50 6700                       		beq.s	@loc_8042
00009C52 08E9 0001 0022             		bset	#1,obStatus(a1)
00009C58 08A9 0003 0022             		bclr	#3,obStatus(a1)
00009C5E 137C 0002 0024             		move.b	#2,obRoutine(a1)
00009C64 08A8 0003 0022             		bclr	#3,obStatus(a0)
00009C6A 4228 0025                  		clr.b	$25(a0)
00009C6E 3368 0012 0012             		move.w	obVelY(a0),obVelY(a1)
00009C74                            
00009C74                            	@loc_8042:
00009C74 117C 0008 0024             		move.b	#8,obRoutine(a0)
00009C7A                            
00009C7A                            	@loc_8048:
00009C7A 2628 002C                  		move.l	$2C(a0),d3
00009C7E 3028 0012                  		move.w	obVelY(a0),d0
00009C82 48C0                       		ext.l	d0
00009C84 E180                       		asl.l	#8,d0
00009C86 D680                       		add.l	d0,d3
00009C88 2143 002C                  		move.l	d3,$2C(a0)
00009C8C 0668 0038 0012             		addi.w	#$38,obVelY(a0)
00009C92 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00009C96 0640 00E0                  		addi.w	#$E0,d0
00009C9A B068 002C                  		cmp.w	$2C(a0),d0
00009C9E 6400                       		bcc.s	@locret_8074
00009CA0 117C 0006 0024             		move.b	#6,obRoutine(a0)
00009CA6                            
00009CA6                            	@locret_8074:
00009CA6 4E75                       		rts	
00009CA8                            ; ===========================================================================
00009CA8                            
00009CA8                            @type07:
00009CA8 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00009CAC 6600                       		bne.s	@type07_wait	; if yes, branch
00009CAE 45F8 F7E0                  		lea	(f_switch).w,a2	; load switch statuses
00009CB2 7000                       		moveq	#0,d0
00009CB4 1028 0028                  		move.b	obSubtype(a0),d0 ; move object type ($x7) to d0
00009CB8 E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
00009CBA 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
00009CBE 6700                       		beq.s	@type07_nomove	; if not, branch
00009CC0 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00009CC6                            
00009CC6                            	@type07_nomove:
00009CC6 4E75                       		rts	
00009CC8                            
00009CC8                            	@type07_wait:
00009CC8 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00009CCC 66F8                       		bne.s	@type07_nomove	; if time is > 0, branch
00009CCE 5228 0028                  		addq.b	#1,obSubtype(a0) ; change to type 08
00009CD2 4E75                       		rts	
00009CD4                            ; ===========================================================================
00009CD4                            
00009CD4                            @type08:
00009CD4 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
00009CD8 3028 0034                  		move.w	$34(a0),d0
00009CDC 0440 0200                  		subi.w	#$200,d0
00009CE0 B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
00009CE4 6600                       		bne.s	@type08_nostop	; if not, branch
00009CE6 4228 0028                  		clr.b	obSubtype(a0)	; change to type 00 (stop moving)
00009CEA                            
00009CEA                            	@type08_nostop:
00009CEA 4E75                       		rts	
00009CEC                            ; ===========================================================================
00009CEC                            
00009CEC                            @type0A:
00009CEC 3028 0034                  		move.w	$34(a0),d0
00009CF0 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009CF4 0401 0040                  		subi.b	#$40,d1
00009CF8 4881                       		ext.w	d1
00009CFA E241                       		asr.w	#1,d1
00009CFC D041                       		add.w	d1,d0
00009CFE 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00009D02                            
00009D02                            @chgmotion:
00009D02 1178 FE78 0026             		move.b	(v_oscillate+$1A).w,$26(a0) ; update platform-movement variable
00009D08 4E75                       		rts	
00009D0A                            ; ===========================================================================
00009D0A                            
00009D0A                            Plat_ChkDel:
00009D26 4E75                       		rts	
00009D28                            ; ===========================================================================
00009D28                            
00009D28                            Plat_Delete:	; Routine 6
00009D28 6000 0000                  		bra.w	DeleteObject
00009D28 6000 0000                  		bra.w	DeleteObject
00009D2C                            Map_Plat_Unused:include	"_maps\Platforms (unused).asm"
00009D2C                            ; ---------------------------------------------------------------------------
00009D2C                            ; Sprite mappings - unused
00009D2C                            ; ---------------------------------------------------------------------------
00009D2C                            Map_Plat_Unused_internal:
00009D2C 0000                       		dc.w @small-Map_Plat_Unused_internal
00009D2E 0000                       		dc.w @large-Map_Plat_Unused_internal
00009D30 02                         @small:		dc.b 2
00009D31 F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
00009D36 F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
00009D3B 0A                         @large:		dc.b $A
00009D3C F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
00009D41 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
00009D46 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
00009D4B 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
00009D50 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
00009D55 F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
00009D5A 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
00009D5F 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
00009D64 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
00009D69 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
00009D6E                            		even
00009D6E                            		even
00009D6E                            Map_Plat_GHZ:	include	"_maps\Platforms (GHZ).asm"
00009D6E                            ; ---------------------------------------------------------------------------
00009D6E                            ; Sprite mappings - GHZ	platforms
00009D6E                            ; ---------------------------------------------------------------------------
00009D6E                            Map_Plat_GHZ_internal:
00009D6E 0000                       		dc.w @small-Map_Plat_GHZ_internal
00009D70 0000                       		dc.w @large-Map_Plat_GHZ_internal
00009D72 04                         @small:		dc.b 4
00009D73 F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
00009D78 F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
00009D7D F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
00009D82 F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
00009D87 0A                         @large:		dc.b $A
00009D88 F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
00009D8D 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
00009D92 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
00009D97 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
00009D9C 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
00009DA1 F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
00009DA6 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
00009DAB 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
00009DB0 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
00009DB5 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
00009DBA                            		even
00009DBA                            		even
00009DBA                            Map_Plat_SYZ:	include	"_maps\Platforms (SYZ).asm"
00009DBA                            ; ---------------------------------------------------------------------------
00009DBA                            ; Sprite mappings - SYZ	platforms
00009DBA                            ; ---------------------------------------------------------------------------
00009DBA                            Map_Plat_SYZ_internal:
00009DBA 0000                       		dc.w @platform-Map_Plat_SYZ_internal
00009DBC 03                         @platform:	dc.b 3
00009DBD F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
00009DC2 F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
00009DC7 F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
00009DCC                            		even
00009DCC                            		even
00009DCC                            Map_Plat_SLZ:	include	"_maps\Platforms (SLZ).asm"
00009DCC                            ; ---------------------------------------------------------------------------
00009DCC                            ; Sprite mappings - SLZ	platforms
00009DCC                            ; ---------------------------------------------------------------------------
00009DCC                            Map_Plat_SLZ_internal:
00009DCC 0000                       		dc.w @platform-Map_Plat_SLZ_internal
00009DCE 02                         @platform:	dc.b 2
00009DCF F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
00009DD4 F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
00009DDA 00                         		even
00009DDA 00                         		even
00009DDA                            Map_GBall:	include	"_maps\GHZ Ball.asm"
00009DDA                            ; ---------------------------------------------------------------------------
00009DDA                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00009DDA                            ; ---------------------------------------------------------------------------
00009DDA                            Map_GBall_internal:
00009DDA 0000                       		dc.w @shiny-Map_GBall_internal
00009DDC 0000                       		dc.w @check1-Map_GBall_internal
00009DDE 0000                       		dc.w @check2-Map_GBall_internal
00009DE0 0000                       		dc.w @check3-Map_GBall_internal
00009DE2 06                         @shiny:		dc.b 6
00009DE3 F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
00009DE8 F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
00009DED E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00009DF2 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00009DF7 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00009DFC 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00009E01 04                         @check1:	dc.b 4
00009E02 E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
00009E07 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
00009E0C 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
00009E11 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
00009E16 04                         @check2:	dc.b 4
00009E17 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00009E1C E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00009E21 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00009E26 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00009E2B 04                         @check3:	dc.b 4
00009E2C E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00009E31 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00009E36 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00009E3B 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00009E40                            		even
00009E40                            		even
00009E40                            		include	"_incObj\1A Collapsing Ledge (part 1).asm"
00009E40                            ; ---------------------------------------------------------------------------
00009E40                            ; Object 1A - GHZ collapsing ledge
00009E40                            ; ---------------------------------------------------------------------------
00009E40                            
00009E40                            CollapseLedge:
00009E40 7000                       		moveq	#0,d0
00009E42 1028 0024                  		move.b	obRoutine(a0),d0
00009E46 323B 0000                  		move.w	Ledge_Index(pc,d0.w),d1
00009E4A 4EFB 1000                  		jmp	Ledge_Index(pc,d1.w)
00009E4E                            ; ===========================================================================
00009E4E 0000 0000                  Ledge_Index:	dc.w Ledge_Main-Ledge_Index, Ledge_Touch-Ledge_Index
00009E52 0000 0000                  		dc.w Ledge_Collapse-Ledge_Index, Ledge_Display-Ledge_Index
00009E56 0000 0000                  		dc.w Ledge_Delete-Ledge_Index, Ledge_WalkOff-Ledge_Index
00009E5A                            
00009E5A =00000038                  ledge_timedelay:	equ $38		; time between touching the ledge and it collapsing
00009E5A =0000003A                  ledge_collapse_flag:	equ $3A		; collapse flag
00009E5A                            ; ===========================================================================
00009E5A                            
00009E5A                            Ledge_Main:	; Routine 0
00009E5A 5428 0024                  		addq.b	#2,obRoutine(a0)
00009E5E 217C 0000 0000 0004        		move.l	#Map_Ledge,obMap(a0)
00009E66 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00009E6C 0028 0004 0001             		ori.b	#4,obRender(a0)
00009E72 317C 0200 0018             		move.w	#$200,obPriority(a0)
00009E78 117C 0007 0038             		move.b	#7,ledge_timedelay(a0) ; set time delay for collapse
00009E7E 117C 0064 0014             		move.b	#$64,obActWid(a0)
00009E84 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
00009E8A 117C 0038 0016             		move.b	#$38,obHeight(a0)
00009E90 08E8 0004 0001             		bset	#4,obRender(a0)
00009E96                            
00009E96                            Ledge_Touch:	; Routine 2
00009E96 4A28 003A                  		tst.b	ledge_collapse_flag(a0)	; is ledge collapsing?
00009E9A 6700                       		beq.s	@slope		; if not, branch
00009E9C 4A28 0038                  		tst.b	ledge_timedelay(a0)	; has time reached zero?
00009EA0 6700 0000                  		beq.w	Ledge_Fragment	; if yes, branch
00009EA4 5328 0038                  		subq.b	#1,ledge_timedelay(a0) ; subtract 1 from time
00009EA8                            
00009EA8                            	@slope:
00009EA8 323C 0030                  		move.w	#$30,d1
00009EAC 45F9 0000 0000             		lea	(Ledge_SlopeData).l,a2
00009EB2 6100 F2A6                  		bsr.w	SlopeObject
00009EB6 6000 0000                  		bra.w	RememberState
00009EBA                            ; ===========================================================================
00009EBA                            
00009EBA                            Ledge_Collapse:	; Routine 4
00009EBA 4A28 0038                  		tst.b	ledge_timedelay(a0)
00009EBE 6700 0000                  		beq.w	loc_847A
00009EC2 117C 0001 003A             		move.b	#1,ledge_collapse_flag(a0)	; set collapse flag
00009EC8 5328 0038                  		subq.b	#1,ledge_timedelay(a0)
00009ECC                            
00009ECC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009ECC                            
00009ECC                            
00009ECC                            Ledge_WalkOff:	; Routine $A
00009ECC 323C 0030                  		move.w	#$30,d1
00009ED0 6100 F328                  		bsr.w	ExitPlatform
00009ED4 323C 0030                  		move.w	#$30,d1
00009ED8 45F9 0000 0000             		lea	(Ledge_SlopeData).l,a2
00009EDE 3428 0008                  		move.w	obX(a0),d2
00009EE2 6100 0000                  		bsr.w	SlopeObject2
00009EE6 6000 0000                  		bra.w	RememberState
00009EEA                            ; End of function Ledge_WalkOff
00009EEA                            
00009EEA                            ; ===========================================================================
00009EEA                            
00009EEA                            Ledge_Display:	; Routine 6
00009EEA 4A28 0038                  		tst.b	ledge_timedelay(a0)	; has time delay reached zero?
00009EEE 6700                       		beq.s	Ledge_TimeZero	; if yes, branch
00009EF0 4A28 003A                  		tst.b	ledge_collapse_flag(a0)	; is ledge collapsing?
00009EF4 6600 0000                  		bne.w	loc_82D0	; if yes, branch
00009EF8 5328 0038                  		subq.b	#1,ledge_timedelay(a0) ; subtract 1 from time
00009EFC 6000 0000                  		bra.w	DisplaySprite
00009F00                            ; ===========================================================================
00009F00                            
00009F00                            loc_82D0:
00009F00 5328 0038                  		subq.b	#1,ledge_timedelay(a0)
00009F04 6100 FFC6                  		bsr.w	Ledge_WalkOff
00009F08 43F8 D000                  		lea	(v_player).w,a1
00009F0C 0829 0003 0022             		btst	#3,obStatus(a1)
00009F12 6700                       		beq.s	loc_82FC
00009F14 4A28 0038                  		tst.b	ledge_timedelay(a0)
00009F18 6600                       		bne.s	locret_8308
00009F1A 08A9 0003 0022             		bclr	#3,obStatus(a1)
00009F20 08A9 0005 0022             		bclr	#5,obStatus(a1)
00009F26 137C 0001 001D             		move.b	#1,obNextAni(a1)
00009F2C                            
00009F2C                            loc_82FC:
00009F2C 117C 0000 003A             		move.b	#0,ledge_collapse_flag(a0)
00009F32 117C 0006 0024             		move.b	#6,obRoutine(a0) ; run "Ledge_Display" routine
00009F38                            
00009F38                            locret_8308:
00009F38 4E75                       		rts	
00009F3A                            ; ===========================================================================
00009F3A                            
00009F3A                            Ledge_TimeZero:
00009F3A 6100 0000                  		bsr.w	ObjectFall
00009F3E 6100 0000                  		bsr.w	DisplaySprite
00009F42 4A28 0001                  		tst.b	obRender(a0)
00009F46 6A00                       		bpl.s	Ledge_Delete
00009F48 4E75                       		rts	
00009F4A                            ; ===========================================================================
00009F4A                            
00009F4A                            Ledge_Delete:	; Routine 8
00009F4A 6100 0000                  		bsr.w	DeleteObject
00009F4E 4E75                       		rts	
00009F4E 4E75                       		rts	
00009F50                            		include	"_incObj\53 Collapsing Floors.asm"
00009F50                            ; ---------------------------------------------------------------------------
00009F50                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
00009F50                            ; ---------------------------------------------------------------------------
00009F50                            
00009F50                            CollapseFloor:
00009F50 7000                       		moveq	#0,d0
00009F52 1028 0024                  		move.b	obRoutine(a0),d0
00009F56 323B 0000                  		move.w	CFlo_Index(pc,d0.w),d1
00009F5A 4EFB 1000                  		jmp	CFlo_Index(pc,d1.w)
00009F5E                            ; ===========================================================================
00009F5E 0000 0000                  CFlo_Index:	dc.w CFlo_Main-CFlo_Index, CFlo_Touch-CFlo_Index
00009F62 0000 0000                  		dc.w CFlo_Collapse-CFlo_Index, CFlo_Display-CFlo_Index
00009F66 0000 0000                  		dc.w CFlo_Delete-CFlo_Index, CFlo_WalkOff-CFlo_Index
00009F6A                            
00009F6A =00000038                  cflo_timedelay:		equ $38
00009F6A =0000003A                  cflo_collapse_flag:	equ $3A
00009F6A                            ; ===========================================================================
00009F6A                            
00009F6A                            CFlo_Main:	; Routine 0
00009F6A 5428 0024                  		addq.b	#2,obRoutine(a0)
00009F6E 217C 0000 0000 0004        		move.l	#Map_CFlo,obMap(a0)
00009F76 317C 42B8 0002             		move.w	#$42B8,obGfx(a0)
00009F7C 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
00009F82 6600                       		bne.s	@notSLZ
00009F84                            
00009F84 317C 44E0 0002             		move.w	#$44E0,obGfx(a0) ; SLZ specific code
00009F8A 5428 001A                  		addq.b	#2,obFrame(a0)
00009F8E                            
00009F8E                            	@notSLZ:
00009F8E 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
00009F94 6600                       		bne.s	@notSBZ
00009F96 317C 43F5 0002             		move.w	#$43F5,obGfx(a0) ; SBZ specific code
00009F9C                            
00009F9C                            	@notSBZ:
00009F9C 0028 0004 0001             		ori.b	#4,obRender(a0)
00009FA2 317C 0200 0018             		move.w	#$200,obPriority(a0)
00009FA8 117C 0007 0038             		move.b	#7,cflo_timedelay(a0)
00009FAE 117C 0044 0014             		move.b	#$44,obActWid(a0)
00009FB4                            
00009FB4                            CFlo_Touch:	; Routine 2
00009FB4 4A28 003A                  		tst.b	cflo_collapse_flag(a0)	; has Sonic touched the	object?
00009FB8 6700                       		beq.s	@solid		; if not, branch
00009FBA 4A28 0038                  		tst.b	cflo_timedelay(a0)	; has time delay reached zero?
00009FBE 6700 0000                  		beq.w	CFlo_Fragment	; if yes, branch
00009FC2 5328 0038                  		subq.b	#1,cflo_timedelay(a0) ; subtract 1 from time
00009FC6                            
00009FC6                            	@solid:
00009FC6 323C 0020                  		move.w	#$20,d1
00009FCA 6100 F0BA                  		bsr.w	PlatformObject
00009FCE 4A28 0028                  		tst.b	obSubtype(a0)
00009FD2 6A00                       		bpl.s	@remstate
00009FD4 0829 0003 0022             		btst	#3,obStatus(a1)
00009FDA 6700                       		beq.s	@remstate
00009FDC 08A8 0000 0001             		bclr	#0,obRender(a0)
00009FE2 3029 0008                  		move.w	obX(a1),d0
00009FE6 9068 0008                  		sub.w	obX(a0),d0
00009FEA 6400                       		bcc.s	@remstate
00009FEC 08E8 0000 0001             		bset	#0,obRender(a0)
00009FF2                            
00009FF2                            	@remstate:
00009FF2 6000 0000                  		bra.w	RememberState
00009FF6                            ; ===========================================================================
00009FF6                            
00009FF6                            CFlo_Collapse:	; Routine 4
00009FF6 4A28 0038                  		tst.b	cflo_timedelay(a0)
00009FFA 6700 0000                  		beq.w	loc_8458
00009FFE 117C 0001 003A             		move.b	#1,cflo_collapse_flag(a0)	; set object as	"touched"
0000A004 5328 0038                  		subq.b	#1,cflo_timedelay(a0)
0000A008                            
0000A008                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A008                            
0000A008                            
0000A008                            CFlo_WalkOff:	; Routine $A
0000A008 323C 0020                  		move.w	#$20,d1
0000A00C 6100 F1EC                  		bsr.w	ExitPlatform
0000A010 3428 0008                  		move.w	obX(a0),d2
0000A014 6100 F74E                  		bsr.w	MvSonicOnPtfm2
0000A018 6000 0000                  		bra.w	RememberState
0000A01C                            ; End of function CFlo_WalkOff
0000A01C                            
0000A01C                            ; ===========================================================================
0000A01C                            
0000A01C                            CFlo_Display:	; Routine 6
0000A01C 4A28 0038                  		tst.b	cflo_timedelay(a0)	; has time delay reached zero?
0000A020 6700                       		beq.s	CFlo_TimeZero	; if yes, branch
0000A022 4A28 003A                  		tst.b	cflo_collapse_flag(a0)	; has Sonic touched the	object?
0000A026 6600 0000                  		bne.w	loc_8402	; if yes, branch
0000A02A 5328 0038                  		subq.b	#1,cflo_timedelay(a0); subtract 1 from time
0000A02E 6000 0000                  		bra.w	DisplaySprite
0000A032                            ; ===========================================================================
0000A032                            
0000A032                            loc_8402:
0000A032 5328 0038                  		subq.b	#1,cflo_timedelay(a0)
0000A036 6100 FFD0                  		bsr.w	CFlo_WalkOff
0000A03A 43F8 D000                  		lea	(v_player).w,a1
0000A03E 0829 0003 0022             		btst	#3,obStatus(a1)
0000A044 6700                       		beq.s	loc_842E
0000A046 4A28 0038                  		tst.b	cflo_timedelay(a0)
0000A04A 6600                       		bne.s	locret_843A
0000A04C 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000A052 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000A058 137C 0001 001D             		move.b	#1,obNextAni(a1)
0000A05E                            
0000A05E                            loc_842E:
0000A05E 117C 0000 003A             		move.b	#0,cflo_collapse_flag(a0)
0000A064 117C 0006 0024             		move.b	#6,obRoutine(a0) ; run "CFlo_Display" routine
0000A06A                            
0000A06A                            locret_843A:
0000A06A 4E75                       		rts	
0000A06C                            ; ===========================================================================
0000A06C                            
0000A06C                            CFlo_TimeZero:
0000A06C 6100 0000                  		bsr.w	ObjectFall
0000A070 6100 0000                  		bsr.w	DisplaySprite
0000A074 4A28 0001                  		tst.b	obRender(a0)
0000A078 6A00                       		bpl.s	CFlo_Delete
0000A07A 4E75                       		rts	
0000A07C                            ; ===========================================================================
0000A07C                            
0000A07C                            CFlo_Delete:	; Routine 8
0000A07C 6100 0000                  		bsr.w	DeleteObject
0000A080 4E75                       		rts	
0000A082                            ; ===========================================================================
0000A082                            
0000A082                            CFlo_Fragment:
0000A082 117C 0000 003A             		move.b	#0,cflo_collapse_flag(a0)
0000A088                            
0000A088                            loc_8458:
0000A088 49F9 0000 0000             		lea	(CFlo_Data2).l,a4
0000A08E 0828 0000 0028             		btst	#0,obSubtype(a0)
0000A094 6700                       		beq.s	loc_846C
0000A096 49F9 0000 0000             		lea	(CFlo_Data3).l,a4
0000A09C                            
0000A09C                            loc_846C:
0000A09C 7207                       		moveq	#7,d1
0000A09E 5228 001A                  		addq.b	#1,obFrame(a0)
0000A0A2 6000                       		bra.s	loc_8486
0000A0A2 6000                       		bra.s	loc_8486
0000A0A4                            
0000A0A4                            ; ===========================================================================
0000A0A4                            
0000A0A4                            Ledge_Fragment:
0000A0A4 117C 0000 003A             		move.b	#0,ledge_collapse_flag(a0)
0000A0AA                            
0000A0AA                            loc_847A:
0000A0AA 49F9 0000 0000             		lea	(CFlo_Data1).l,a4
0000A0B0 7218                       		moveq	#$18,d1
0000A0B2 5428 001A                  		addq.b	#2,obFrame(a0)
0000A0B6                            
0000A0B6                            loc_8486:
0000A0B6 7000                       		moveq	#0,d0
0000A0B8 1028 001A                  		move.b	obFrame(a0),d0
0000A0BC D040                       		add.w	d0,d0
0000A0BE 2668 0004                  		movea.l	obMap(a0),a3
0000A0C2 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000A0C6 524B                       		addq.w	#1,a3
0000A0C8 08E8 0005 0001             		bset	#5,obRender(a0)
0000A0CE 1810                       		move.b	0(a0),d4
0000A0D0 1A28 0001                  		move.b	obRender(a0),d5
0000A0D4 2248                       		movea.l	a0,a1
0000A0D6 137C 0006 0024             		move.b	#6,obRoutine(a1)
0000A0DC 1284                       		move.b	d4,0(a1)
0000A0DE 234B 0004                  		move.l	a3,obMap(a1)
0000A0E2 1345 0001                  		move.b	d5,obRender(a1)
0000A0E6 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000A0EC 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000A0F2 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0000A0F8 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0000A0FE 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
0000A104 135C 0038                  		move.b	(a4)+,ledge_timedelay(a1)
0000A108 5341                       		subq.w	#1,d1
0000A10A 43F8 D800                  		lea		(v_lvlobjspace).w,a1
0000A10E 303C 005F                  		move.w	#$5F,d0
0000A112                            ; ===========================================================================
0000A112                            
0000A112                            loc_84AA:
0000A112 4A11                       		tst.b	(a1)
0000A114 6700                       		beq.s	@cont		
0000A116 43E9 0040                  		lea		$40(a1),a1
0000A11A 51C8 FFF6                  		dbf		d0,loc_84AA	
0000A11E 6600                       		bne.s	loc_84F2	
0000A120                            	@cont:
0000A120 5A4B                       		addq.w	#5,a3
0000A122                            
0000A122                            loc_84B2:
0000A122 137C 0006 0024             		move.b	#6,obRoutine(a1)
0000A128 1284                       		move.b	d4,0(a1)
0000A12A 234B 0004                  		move.l	a3,obMap(a1)
0000A12E 1345 0001                  		move.b	d5,obRender(a1)
0000A132 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000A138 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000A13E 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0000A144 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0000A14A 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
0000A150 135C 0038                  		move.b	(a4)+,ledge_timedelay(a1)
0000A154 6100 0000                  		bsr.w	DisplaySprite1
0000A158                            
0000A158                            loc_84EE:
0000A158 51C9 FFB8                  		dbf	d1,loc_84AA
0000A15C                            
0000A15C                            loc_84F2:
0000A15C 6100 0000                  		bsr.w	DisplaySprite
0000A16A                            ; ===========================================================================
0000A16A                            ; ---------------------------------------------------------------------------
0000A16A                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
0000A16A                            ; ---------------------------------------------------------------------------
0000A16A 1C18 1410 1A16 120E 0A06+  CFlo_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
0000A17A 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
0000A184 1E16 0E06 1A12 0A02        CFlo_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
0000A18C 161E 1A12 060E 0A02        CFlo_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
0000A194                            
0000A194                            ; ---------------------------------------------------------------------------
0000A194                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
0000A194                            ; ---------------------------------------------------------------------------
0000A194                            
0000A194                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A194                            
0000A194                            
0000A194                            SlopeObject2:
0000A194 43F8 D000                  		lea	(v_player).w,a1
0000A198 0829 0003 0022             		btst	#3,obStatus(a1)
0000A19E 6700                       		beq.s	locret_856E
0000A1A0 3029 0008                  		move.w	obX(a1),d0
0000A1A4 9068 0008                  		sub.w	obX(a0),d0
0000A1A8 D041                       		add.w	d1,d0
0000A1AA E248                       		lsr.w	#1,d0
0000A1AC 0828 0000 0001             		btst	#0,obRender(a0)
0000A1B2 6700                       		beq.s	loc_854E
0000A1B4 4640                       		not.w	d0
0000A1B6 D041                       		add.w	d1,d0
0000A1B8                            
0000A1B8                            loc_854E:
0000A1B8 7200                       		moveq	#0,d1
0000A1BA 1232 0000                  		move.b	(a2,d0.w),d1
0000A1BE 3028 000C                  		move.w	obY(a0),d0
0000A1C2 9041                       		sub.w	d1,d0
0000A1C4 7200                       		moveq	#0,d1
0000A1C6 1229 0016                  		move.b	obHeight(a1),d1
0000A1CA 9041                       		sub.w	d1,d0
0000A1CC 3340 000C                  		move.w	d0,obY(a1)
0000A1D0 9468 0008                  		sub.w	obX(a0),d2
0000A1D4 9569 0008                  		sub.w	d2,obX(a1)
0000A1D8                            
0000A1D8                            locret_856E:
0000A1D8 4E75                       		rts	
0000A1DA                            ; End of function SlopeObject2
0000A1DA                            
0000A1DA                            ; ===========================================================================
0000A1DA                            ; ---------------------------------------------------------------------------
0000A1DA                            ; Collision data for GHZ collapsing ledge
0000A1DA                            ; ---------------------------------------------------------------------------
0000A1DA                            Ledge_SlopeData:
0000A1DA                            		incbin	"misc\GHZ Collapsing Ledge Heightmap.bin"
0000A20A                            		even
0000A20A                            
0000A20A                            Map_Ledge:	include	"_maps\Collapsing Ledge.asm"
0000A20A                            ; ---------------------------------------------------------------------------
0000A20A                            ; Sprite mappings - GHZ	collapsing ledge
0000A20A                            ; ---------------------------------------------------------------------------
0000A20A                            Map_Ledge_internal:
0000A20A 0000                       		dc.w @left-Map_Ledge_internal
0000A20C 0000                       		dc.w @right-Map_Ledge_internal
0000A20E 0000                       		dc.w @leftsmash-Map_Ledge_internal
0000A210 0000                       		dc.w @rightsmash-Map_Ledge_internal
0000A212 10                         @left:		dc.b $10
0000A213 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
0000A218 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
0000A21D E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
0000A222 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
0000A227 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000A22C D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
0000A231 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
0000A236 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
0000A23B F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000A240 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
0000A245 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
0000A24A 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000A24F 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
0000A254 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
0000A259 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
0000A25E 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000A263 10                         @right:		dc.b $10
0000A264 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
0000A269 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
0000A26E E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
0000A273 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
0000A278 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000A27D D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
0000A282 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
0000A287 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
0000A28C F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000A291 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
0000A296 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
0000A29B 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000A2A0 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
0000A2A5 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
0000A2AA 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
0000A2AF 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000A2B4 19                         @leftsmash:	dc.b $19
0000A2B5 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
0000A2BA C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
0000A2BF D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
0000A2C4 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
0000A2C9 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
0000A2CE E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
0000A2D3 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
0000A2D8 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
0000A2DD D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000A2E2 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
0000A2E7 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
0000A2EC F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
0000A2F1 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
0000A2F6 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
0000A2FB F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000A300 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
0000A305 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
0000A30A 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
0000A30F 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000A314 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
0000A319 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
0000A31E 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
0000A323 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
0000A328 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
0000A32D 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000A332 19                         @rightsmash:	dc.b $19
0000A333 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
0000A338 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
0000A33D D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
0000A342 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
0000A347 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
0000A34C E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
0000A351 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
0000A356 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
0000A35B D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000A360 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
0000A365 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
0000A36A F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
0000A36F F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
0000A374 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
0000A379 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000A37E F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
0000A383 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
0000A388 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
0000A38D 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000A392 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
0000A397 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
0000A39C 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
0000A3A1 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
0000A3A6 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
0000A3AB 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000A3B0                            		even
0000A3B0                            		even
0000A3B0                            Map_CFlo:	include	"_maps\Collapsing Floors.asm"
0000A3B0                            ; ---------------------------------------------------------------------------
0000A3B0                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
0000A3B0                            ; ---------------------------------------------------------------------------
0000A3B0                            Map_CFlo_internal:
0000A3B0 0000                       		dc.w byte_874E-Map_CFlo_internal
0000A3B2 0000                       		dc.w byte_8763-Map_CFlo_internal
0000A3B4 0000                       		dc.w byte_878C-Map_CFlo_internal
0000A3B6 0000                       		dc.w byte_87A1-Map_CFlo_internal
0000A3B8 04                         byte_874E:	dc.b 4
0000A3B9 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
0000A3BE 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
0000A3C3 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
0000A3C8 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
0000A3CD 08                         byte_8763:	dc.b 8
0000A3CE F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000A3D3 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
0000A3D8 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
0000A3DD F805 0000 10               		dc.b $F8, 5, 0,	0, $10
0000A3E2 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
0000A3E7 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
0000A3EC 0805 0000 00               		dc.b 8,	5, 0, 0, 0
0000A3F1 0805 0000 10               		dc.b 8,	5, 0, 0, $10
0000A3F6 04                         byte_878C:	dc.b 4
0000A3F7 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
0000A3FC 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
0000A401 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
0000A406 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
0000A40B 08                         byte_87A1:	dc.b 8
0000A40C F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000A411 F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
0000A416 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
0000A41B F805 0004 10               		dc.b $F8, 5, 0,	4, $10
0000A420 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
0000A425 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
0000A42A 0805 0008 00               		dc.b 8,	5, 0, 8, 0
0000A42F 0805 000C 10               		dc.b 8,	5, 0, $C, $10
0000A434                            		even
0000A434                            		even
0000A434                            
0000A434                            		include	"_incObj\1C Scenery.asm"
0000A434                            ; ---------------------------------------------------------------------------
0000A434                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
0000A434                            ; ---------------------------------------------------------------------------
0000A434                            
0000A434                            Scenery:
0000A434 7000                       		moveq	#0,d0
0000A436 1028 0024                  		move.b	obRoutine(a0),d0
0000A43A 323B 0000                  		move.w	Scen_Index(pc,d0.w),d1
0000A43E 4EFB 1000                  		jmp	Scen_Index(pc,d1.w)
0000A442                            ; ===========================================================================
0000A442 0000                       Scen_Index:	dc.w Scen_Main-Scen_Index
0000A444 0000                       		dc.w Scen_ChkDel-Scen_Index
0000A446                            ; ===========================================================================
0000A446                            
0000A446                            Scen_Main:	; Routine 0
0000A446 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A44A 7000                       		moveq	#0,d0
0000A44C 1028 0028                  		move.b	obSubtype(a0),d0 ; copy object subtype to d0
0000A450 C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
0000A454 43FB 0000                  		lea	Scen_Values(pc,d0.w),a1
0000A458 2159 0004                  		move.l	(a1)+,obMap(a0)
0000A45C 3159 0002                  		move.w	(a1)+,obGfx(a0)
0000A460 0028 0004 0001             		ori.b	#4,obRender(a0)
0000A466 1159 001A                  		move.b	(a1)+,obFrame(a0)
0000A46A 1159 0014                  		move.b	(a1)+,obActWid(a0)
0000A46E 1159 0018                  		move.b	(a1)+,obPriority(a0)
0000A472 3028 0018                  		move.w obPriority(a0),d0 
0000A476 E248                       		lsr.w #1,d0 
0000A478 0240 0380                  		andi.w #$380,d0 
0000A47C 3140 0018                  		move.w d0,obPriority(a0)		
0000A480 1159 0020                  		move.b	(a1)+,obColType(a0)
0000A484                            
0000A484                            Scen_ChkDel:	; Routine 2
0000A4A2 6000 0000                  		bra.w	DisplaySprite
0000A4A6                            ; ===========================================================================
0000A4A6                            ; ---------------------------------------------------------------------------
0000A4A6                            ; Variables for	object $1C are stored in an array
0000A4A6                            ; ---------------------------------------------------------------------------
0000A4A6 0000 0000                  Scen_Values:	dc.l Map_Scen		; mappings address
0000A4AA 44D8                       		dc.w $44D8		; VRAM setting
0000A4AC 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
0000A4B0 0000 0000                  		dc.l Map_Scen
0000A4B4 44D8                       		dc.w $44D8
0000A4B6 0008 0200                  		dc.b 0,	8, 2, 0
0000A4BA 0000 0000                  		dc.l Map_Scen
0000A4BE 44D8                       		dc.w $44D8
0000A4C0 0008 0200                  		dc.b 0,	8, 2, 0
0000A4C4 0000 956E                  		dc.l Map_Bri
0000A4C8 438E                       		dc.w $438E
0000A4CA 0110 0100                  		dc.b 1,	$10, 1,	0
0000A4CE                            		even
0000A4CE                            		even
0000A4CE                            Map_Scen:	include	"_maps\Scenery.asm"
0000A4CE                            ; ---------------------------------------------------------------------------
0000A4CE                            ; Sprite mappings - SLZ	lava thrower
0000A4CE                            ; ---------------------------------------------------------------------------
0000A4CE                            Map_Scen_internal:
0000A4CE 0000                       		dc.w byte_8858-Map_Scen_internal
0000A4D0 01                         byte_8858:	dc.b 1
0000A4D1 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000A4D6                            		even
0000A4D6                            		even
0000A4D6                            
0000A4D6                            		include	"_incObj\1D Unused Switch.asm"
0000A4D6                            ; ---------------------------------------------------------------------------
0000A4D6                            ; Object 1D - switch that activates when Sonic touches it
0000A4D6                            ; (this	is not used anywhere in	the game)
0000A4D6                            ; ---------------------------------------------------------------------------
0000A4D6                            
0000A4D6                            MagicSwitch:
0000A4D6 7000                       		moveq	#0,d0
0000A4D8 1028 0024                  		move.b	obRoutine(a0),d0
0000A4DC 323B 0000                  		move.w	Swi_Index(pc,d0.w),d1
0000A4E0 4EFB 1000                  		jmp	Swi_Index(pc,d1.w)
0000A4E4                            ; ===========================================================================
0000A4E4 0000                       Swi_Index:	dc.w Swi_Main-Swi_Index
0000A4E6 0000                       		dc.w Swi_Action-Swi_Index
0000A4E8 0000                       		dc.w Swi_Delete-Swi_Index
0000A4EA                            
0000A4EA =00000030                  swi_origY:	equ $30		; original y-axis position
0000A4EA                            ; ===========================================================================
0000A4EA                            
0000A4EA                            Swi_Main:	; Routine 0
0000A4EA 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A4EE 217C 0000 0000 0004        		move.l	#Map_Swi,obMap(a0)
0000A4F6 317C 4000 0002             		move.w	#$4000,obGfx(a0)
0000A4FC 117C 0004 0001             		move.b	#4,obRender(a0)
0000A502 3168 000C 0030             		move.w	obY(a0),swi_origY(a0) ; save position on y-axis
0000A508 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000A50E 317C 0280 0018             		move.w	#$280,obPriority(a0)
0000A514                            
0000A514                            Swi_Action:	; Routine 2
0000A514 3168 0030 000C             		move.w	swi_origY(a0),obY(a0) ; restore position on y-axis
0000A51A 323C 0010                  		move.w	#$10,d1
0000A51E 6100 0000                  		bsr.w	Swi_ChkTouch	; check if Sonic touches the switch
0000A522 6700                       		beq.s	Swi_ChkDel	; if not, branch
0000A524                            
0000A524 5468 000C                  		addq.w	#2,obY(a0)	; move object 2	pixels
0000A528 7001                       		moveq	#1,d0
0000A52A 31C0 F7E0                  		move.w	d0,(f_switch).w	; set switch 0 as "pressed"
0000A52E                            
0000A52E                            Swi_ChkDel:
0000A52E 6100 0000                  		bsr.w	DisplaySprite
0000A550 4E75                       		rts	
0000A552                            ; ===========================================================================
0000A552                            
0000A552                            Swi_Delete:	; Routine 4
0000A552 6100 0000                  		bsr.w	DeleteObject
0000A556 4E75                       		rts	
0000A558                            
0000A558                            ; ---------------------------------------------------------------------------
0000A558                            ; Subroutine to	check if Sonic touches the object
0000A558                            ; ---------------------------------------------------------------------------
0000A558                            
0000A558                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A558                            
0000A558                            
0000A558                            Swi_ChkTouch:
0000A558 43F8 D000                  		lea	(v_player).w,a1
0000A55C 3029 0008                  		move.w	obX(a1),d0
0000A560 9068 0008                  		sub.w	obX(a0),d0
0000A564 D041                       		add.w	d1,d0
0000A566 6B00                       		bmi.s	Swi_NoTouch
0000A568 D241                       		add.w	d1,d1
0000A56A B041                       		cmp.w	d1,d0
0000A56C 6400                       		bcc.s	Swi_NoTouch
0000A56E 3429 000C                  		move.w	obY(a1),d2
0000A572 1229 0016                  		move.b	obHeight(a1),d1
0000A576 4881                       		ext.w	d1
0000A578 D242                       		add.w	d2,d1
0000A57A 3028 000C                  		move.w	obY(a0),d0
0000A57E 0440 0010                  		subi.w	#$10,d0
0000A582 9041                       		sub.w	d1,d0
0000A584 6200                       		bhi.s	Swi_NoTouch
0000A586 0C40 FFF0                  		cmpi.w	#-$10,d0
0000A58A 6500                       		bcs.s	Swi_NoTouch
0000A58C 70FF                       		moveq	#-1,d0		; Sonic has touched it
0000A58E 4E75                       		rts	
0000A590                            ; ===========================================================================
0000A590                            
0000A590                            Swi_NoTouch:
0000A590 7000                       		moveq	#0,d0		; Sonic hasn't touched it
0000A592 4E75                       		rts	
0000A594                            ; End of function Swi_ChkTouch
0000A594                            ; End of function Swi_ChkTouch
0000A594                            Map_Swi:	include	"_maps\Unused Switch.asm"
0000A594                            ; ---------------------------------------------------------------------------
0000A594                            ; Sprite mappings - Unused switch thingy
0000A594                            ; ---------------------------------------------------------------------------
0000A594                            Map_Swi_internal:
0000A594 0000                       		dc.w byte_891E-Map_Swi_internal
0000A596 04                         byte_891E:	dc.b 4
0000A597 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
0000A59C 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
0000A5A1 E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
0000A5A6 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
0000A5AC 00                         		even
0000A5AC 00                         		even
0000A5AC                            
0000A5AC                            		include	"_incObj\2A SBZ Small Door.asm"
0000A5AC                            ; ---------------------------------------------------------------------------
0000A5AC                            ; Object 2A - small vertical door (SBZ)
0000A5AC                            ; ---------------------------------------------------------------------------
0000A5AC                            
0000A5AC                            AutoDoor:
0000A5AC 7000                       		moveq	#0,d0
0000A5AE 1028 0024                  		move.b	obRoutine(a0),d0
0000A5B2 323B 0000                  		move.w	ADoor_Index(pc,d0.w),d1
0000A5B6 4EFB 1000                  		jmp	ADoor_Index(pc,d1.w)
0000A5BA                            ; ===========================================================================
0000A5BA 0000                       ADoor_Index:	dc.w ADoor_Main-ADoor_Index
0000A5BC 0000                       		dc.w ADoor_OpenShut-ADoor_Index
0000A5BE                            ; ===========================================================================
0000A5BE                            
0000A5BE                            ADoor_Main:	; Routine 0
0000A5BE 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A5C2 217C 0000 0000 0004        		move.l	#Map_ADoor,obMap(a0)
0000A5CA 317C 42EA 0002             		move.w	#$42EA,obGfx(a0)
0000A5D0 0028 0004 0001             		ori.b	#4,obRender(a0)
0000A5D6 117C 0008 0014             		move.b	#8,obActWid(a0)
0000A5DC                            		;move.b	#4,obPriority(a0)
0000A5DC                            
0000A5DC                            ADoor_OpenShut:	; Routine 2
0000A5DC 323C 0040                  		move.w	#$40,d1		; set range for door detection
0000A5E0 4228 001C                  		clr.b	obAnim(a0)	; use "closing"	animation
0000A5E4 3038 D008                  		move.w	(v_player+obX).w,d0
0000A5E8 D041                       		add.w	d1,d0
0000A5EA B068 0008                  		cmp.w	obX(a0),d0
0000A5EE 6500                       		bcs.s	ADoor_Animate
0000A5F0 9041                       		sub.w	d1,d0
0000A5F2 9041                       		sub.w	d1,d0
0000A5F4 B068 0008                  		cmp.w	obX(a0),d0	; is Sonic > $40 pixels from door?
0000A5F8 6400                       		bcc.s	ADoor_Animate	; close door
0000A5FA D041                       		add.w	d1,d0
0000A5FC B068 0008                  		cmp.w	obX(a0),d0	; is Sonic left of the door?
0000A600 6400                       		bcc.s	loc_899A	; if yes, branch
0000A602 0828 0000 0022             		btst	#0,obStatus(a0)
0000A608 6600                       		bne.s	ADoor_Animate
0000A60A 6000                       		bra.s	ADoor_Open
0000A60C                            ; ===========================================================================
0000A60C                            
0000A60C                            loc_899A:
0000A60C 0828 0000 0022             		btst	#0,obStatus(a0)
0000A612 6700                       		beq.s	ADoor_Animate
0000A614                            
0000A614                            ADoor_Open:
0000A614 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "opening"	animation
0000A61A                            
0000A61A                            ADoor_Animate:
0000A61A 43F9 0000 0000             		lea	(Ani_ADoor).l,a1
0000A620 6100 0000                  		bsr.w	AnimateSprite
0000A624 4A28 001A                  		tst.b	obFrame(a0)	; is the door open?
0000A628 6600                       		bne.s	@remember	; if yes, branch
0000A62A 323C 0011                  		move.w	#$11,d1
0000A62E 343C 0020                  		move.w	#$20,d2
0000A632 3602                       		move.w	d2,d3
0000A634 5243                       		addq.w	#1,d3
0000A636 3828 0008                  		move.w	obX(a0),d4
0000A63A 6100 0000                  		bsr.w	SolidObject
0000A63E                            
0000A63E                            	@remember:
0000A63E 6000 0000                  		bra.w	RememberState
0000A63E 6000 0000                  		bra.w	RememberState
0000A642                            		include	"_anim\SBZ Small Door.asm"
0000A642                            ; ---------------------------------------------------------------------------
0000A642                            ; Animation script - doors (SBZ)
0000A642                            ; ---------------------------------------------------------------------------
0000A642 0000                       Ani_ADoor:	dc.w @close-Ani_ADoor
0000A644 0000                       		dc.w @open-Ani_ADoor
0000A646 0008 0706 0504 0302 0100+  @close:		dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, afBack, 1
0000A652 0000 0102 0304 0506 0708+  @open:		dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, afBack, 1
0000A65E                            		even
0000A65E                            		even
0000A65E                            Map_ADoor:	include	"_maps\SBZ Small Door.asm"
0000A65E                            ; --------------------------------------------------------------------------------
0000A65E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000A65E                            ; --------------------------------------------------------------------------------
0000A65E                            
0000A65E                            SME_YnmwF:	
0000A65E 0000 0000                  		dc.w SME_YnmwF_12-SME_YnmwF, SME_YnmwF_1D-SME_YnmwF	
0000A662 0000 0000                  		dc.w SME_YnmwF_28-SME_YnmwF, SME_YnmwF_33-SME_YnmwF	
0000A666 0000 0000                  		dc.w SME_YnmwF_3E-SME_YnmwF, SME_YnmwF_49-SME_YnmwF	
0000A66A 0000 0000                  		dc.w SME_YnmwF_54-SME_YnmwF, SME_YnmwF_5F-SME_YnmwF	
0000A66E 0000                       		dc.w SME_YnmwF_6A-SME_YnmwF	
0000A670 02                         SME_YnmwF_12:	dc.b 2	
0000A671 E007 0800 F8               		dc.b $E0, 7, 8, 0, $F8	
0000A676 0007 0800 F8               		dc.b 0, 7, 8, 0, $F8	
0000A67B 02                         SME_YnmwF_1D:	dc.b 2	
0000A67C DC07 0800 F8               		dc.b $DC, 7, 8, 0, $F8	
0000A681 0407 0800 F8               		dc.b 4, 7, 8, 0, $F8	
0000A686 02                         SME_YnmwF_28:	dc.b 2	
0000A687 D807 0800 F8               		dc.b $D8, 7, 8, 0, $F8	
0000A68C 0807 0800 F8               		dc.b 8, 7, 8, 0, $F8	
0000A691 02                         SME_YnmwF_33:	dc.b 2	
0000A692 D407 0800 F8               		dc.b $D4, 7, 8, 0, $F8	
0000A697 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8	
0000A69C 02                         SME_YnmwF_3E:	dc.b 2	
0000A69D D007 0800 F8               		dc.b $D0, 7, 8, 0, $F8	
0000A6A2 1007 0800 F8               		dc.b $10, 7, 8, 0, $F8	
0000A6A7 02                         SME_YnmwF_49:	dc.b 2	
0000A6A8 CC07 0800 F8               		dc.b $CC, 7, 8, 0, $F8	
0000A6AD 1407 0800 F8               		dc.b $14, 7, 8, 0, $F8	
0000A6B2 02                         SME_YnmwF_54:	dc.b 2	
0000A6B3 C807 0800 F8               		dc.b $C8, 7, 8, 0, $F8	
0000A6B8 1807 0800 F8               		dc.b $18, 7, 8, 0, $F8	
0000A6BD 02                         SME_YnmwF_5F:	dc.b 2	
0000A6BE C407 0800 F8               		dc.b $C4, 7, 8, 0, $F8	
0000A6C3 1C07 0800 F8               		dc.b $1C, 7, 8, 0, $F8	
0000A6C8 02                         SME_YnmwF_6A:	dc.b 2	
0000A6C9 C007 0800 F8               		dc.b $C0, 7, 8, 0, $F8	
0000A6CE 2007 0800 F8               		dc.b $20, 7, 8, 0, $F8	
0000A6D4 00                         		even
0000A6D4 00                         		even
0000A6D4                            
0000A6D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A6D4                            
0000A6D4                            
0000A6D4                            Obj44_SolidWall:
0000A6D4 6100 0000                  		bsr.w	Obj44_SolidWall2
0000A6D8 6700                       		beq.s	loc_8AA8
0000A6DA 6B00 0000                  		bmi.w	loc_8AC4
0000A6DE 4A40                       		tst.w	d0
0000A6E0 6700 0000                  		beq.w	loc_8A92
0000A6E4 6B00                       		bmi.s	loc_8A7C
0000A6E6 4A69 0010                  		tst.w	obVelX(a1)
0000A6EA 6B00                       		bmi.s	loc_8A92
0000A6EC 6000                       		bra.s	loc_8A82
0000A6EE                            ; ===========================================================================
0000A6EE                            
0000A6EE                            loc_8A7C:
0000A6EE 4A69 0010                  		tst.w	obVelX(a1)
0000A6F2 6A00                       		bpl.s	loc_8A92
0000A6F4                            
0000A6F4                            loc_8A82:
0000A6F4 9169 0008                  		sub.w	d0,obX(a1)
0000A6F8 337C 0000 0020             		move.w	#0,obInertia(a1)
0000A6FE 337C 0000 0010             		move.w	#0,obVelX(a1)
0000A704                            
0000A704                            loc_8A92:
0000A704 0829 0001 0022             		btst	#1,obStatus(a1)
0000A70A 6600                       		bne.s	loc_8AB6
0000A70C 08E9 0005 0022             		bset	#5,obStatus(a1)
0000A712 08E8 0005 0022             		bset	#5,obStatus(a0)
0000A718 4E75                       		rts	
0000A71A                            ; ===========================================================================
0000A71A                            
0000A71A                            loc_8AA8:
0000A71A 0828 0005 0022             		btst	#5,obStatus(a0)
0000A720 6700                       		beq.s	locret_8AC2
0000A722 337C 0000 001C             		move.w	#id_Run,obAnim(a1)
0000A728                            
0000A728                            loc_8AB6:
0000A728 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000A72E 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000A734                            
0000A734                            locret_8AC2:
0000A734 4E75                       		rts	
0000A736                            ; ===========================================================================
0000A736                            
0000A736                            loc_8AC4:
0000A736 4A69 0012                  		tst.w	obVelY(a1)
0000A73A 6A00                       		bpl.s	locret_8AD8
0000A73C 4A43                       		tst.w	d3
0000A73E 6A00                       		bpl.s	locret_8AD8
0000A740 9769 000C                  		sub.w	d3,obY(a1)
0000A744 337C 0000 0012             		move.w	#0,obVelY(a1)
0000A74A                            
0000A74A                            locret_8AD8:
0000A74A 4E75                       		rts	
0000A74C                            ; End of function Obj44_SolidWall
0000A74C                            
0000A74C                            
0000A74C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A74C                            
0000A74C                            
0000A74C                            Obj44_SolidWall2:
0000A74C 43F8 D000                  		lea	(v_player).w,a1
0000A750 3029 0008                  		move.w	obX(a1),d0
0000A754 9068 0008                  		sub.w	obX(a0),d0
0000A758 D041                       		add.w	d1,d0
0000A75A 6B00                       		bmi.s	loc_8B48
0000A75C 3601                       		move.w	d1,d3
0000A75E D643                       		add.w	d3,d3
0000A760 B043                       		cmp.w	d3,d0
0000A762 6200                       		bhi.s	loc_8B48
0000A764 1629 0016                  		move.b	obHeight(a1),d3
0000A768 4883                       		ext.w	d3
0000A76A D443                       		add.w	d3,d2
0000A76C 3629 000C                  		move.w	obY(a1),d3
0000A770 9668 000C                  		sub.w	obY(a0),d3
0000A774 D642                       		add.w	d2,d3
0000A776 6B00                       		bmi.s	loc_8B48
0000A778 3802                       		move.w	d2,d4
0000A77A D844                       		add.w	d4,d4
0000A77C B644                       		cmp.w	d4,d3
0000A77E 6400                       		bhs.s	loc_8B48
0000A780 4A38 F7C8                  		tst.b	(f_lockmulti).w
0000A784 6B00                       		bmi.s	loc_8B48
0000A786 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
0000A78C 6400                       		bhs.s	loc_8B48
0000A78E 4A78 FE08                  		tst.w	(v_debuguse).w
0000A792 6600                       		bne.s	loc_8B48
0000A794 3A00                       		move.w	d0,d5
0000A796 B240                       		cmp.w	d0,d1
0000A798 6400                       		bhs.s	loc_8B30
0000A79A D241                       		add.w	d1,d1
0000A79C 9041                       		sub.w	d1,d0
0000A79E 3A00                       		move.w	d0,d5
0000A7A0 4445                       		neg.w	d5
0000A7A2                            
0000A7A2                            loc_8B30:
0000A7A2 3203                       		move.w	d3,d1
0000A7A4 B443                       		cmp.w	d3,d2
0000A7A6 6400                       		bhs.s	loc_8B3C
0000A7A8 9644                       		sub.w	d4,d3
0000A7AA 3203                       		move.w	d3,d1
0000A7AC 4441                       		neg.w	d1
0000A7AE                            
0000A7AE                            loc_8B3C:
0000A7AE BA41                       		cmp.w	d1,d5
0000A7B0 6200                       		bhi.s	loc_8B44
0000A7B2 7801                       		moveq	#1,d4
0000A7B4 4E75                       		rts	
0000A7B6                            ; ===========================================================================
0000A7B6                            
0000A7B6                            loc_8B44:
0000A7B6 78FF                       		moveq	#-1,d4
0000A7B8 4E75                       		rts	
0000A7BA                            ; ===========================================================================
0000A7BA                            
0000A7BA                            loc_8B48:
0000A7BA 7800                       		moveq	#0,d4
0000A7BC 4E75                       		rts	
0000A7BE                            ; End of function Obj44_SolidWall2
0000A7BE                            
0000A7BE                            ; ===========================================================================
0000A7BE                            
0000A7BE                            		include	"_incObj\1E Ball Hog.asm"
0000A7BE                            ; ---------------------------------------------------------------------------
0000A7BE                            ; Object 1E - Ball Hog enemy (SBZ)
0000A7BE                            ; ---------------------------------------------------------------------------
0000A7BE                            
0000A7BE                            BallHog:
0000A7BE 7000                       		moveq	#0,d0
0000A7C0 1028 0024                  		move.b	obRoutine(a0),d0
0000A7C4 323B 0000                  		move.w	Hog_Index(pc,d0.w),d1
0000A7C8 4EFB 1000                  		jmp	Hog_Index(pc,d1.w)
0000A7CC                            ; ===========================================================================
0000A7CC 0000                       Hog_Index:	dc.w Hog_Main-Hog_Index
0000A7CE 0000                       		dc.w Hog_Action-Hog_Index
0000A7D0                            
0000A7D0 =00000032                  hog_launchflag:	equ $32		; 0 to launch a cannonball
0000A7D0                            ; ===========================================================================
0000A7D0                            
0000A7D0                            Hog_Main:	; Routine 0
0000A7D0 117C 0013 0016             		move.b	#$13,obHeight(a0)
0000A7D6 117C 0008 0017             		move.b	#8,obWidth(a0)
0000A7DC 217C 0000 0000 0004        		move.l	#Map_Hog,obMap(a0)
0000A7E4 317C 0302 0002             		move.w	#$302,obGfx(a0)
0000A7EA 117C 0004 0001             		move.b	#4,obRender(a0)
0000A7F0 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000A7F6 117C 0005 0020             		move.b	#5,obColType(a0)
0000A7FC 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A802 6100 0000                  		bsr.w	ObjectFall
0000A806 4EB9 0000 0000             		jsr	(ObjFloorDist).l	; find floor
0000A80C 4A41                       		tst.w	d1
0000A80E 6A00                       		bpl.s	@floornotfound
0000A810 D368 000C                  		add.w	d1,obY(a0)
0000A814 317C 0000 0012             		move.w	#0,obVelY(a0)
0000A81A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A81E                            
0000A81E                            	@floornotfound:
0000A81E 4E75                       		rts	
0000A820                            ; ===========================================================================
0000A820                            
0000A820                            Hog_Action:	; Routine 2
0000A820 43F9 0000 0000             		lea	(Ani_Hog).l,a1
0000A826 6100 0000                  		bsr.w	AnimateSprite
0000A82A 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)	; is final frame (01) displayed?
0000A830 6600                       		bne.s	@setlaunchflag	; if not, branch
0000A832 4A28 0032                  		tst.b	hog_launchflag(a0)	; is it	set to launch cannonball?
0000A836 6700                       		beq.s	@makeball	; if yes, branch
0000A838 6000                       		bra.s	@remember
0000A83A                            ; ===========================================================================
0000A83A                            
0000A83A                            @setlaunchflag:
0000A83A 4228 0032                  		clr.b	hog_launchflag(a0)	; set to launch	cannonball
0000A83E                            
0000A83E                            @remember:
0000A83E 6000 0000                  		bra.w	RememberState
0000A842                            ; ===========================================================================
0000A842                            
0000A842                            @makeball:
0000A842 117C 0001 0032             		move.b	#1,hog_launchflag(a0)
0000A848 6100 0000                  		bsr.w	FindFreeObj
0000A84C 6600                       		bne.s	@fail
0000A84E 12BC 0000                  		move.b	#id_Cannonball,0(a1) ; load cannonball object ($20)
0000A852 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000A858 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000A85E 337C FF00 0010             		move.w	#-$100,obVelX(a1) ; cannonball bounces to the left
0000A864 337C 0000 0012             		move.w	#0,obVelY(a1)
0000A86A 70FC                       		moveq	#-4,d0
0000A86C 0828 0000 0022             		btst	#0,obStatus(a0)	; is Ball Hog facing right?
0000A872 6700                       		beq.s	@noflip		; if not, branch
0000A874 4440                       		neg.w	d0
0000A876 4469 0010                  		neg.w	obVelX(a1)	; cannonball bounces to	the right
0000A87A                            
0000A87A                            	@noflip:
0000A87A D169 0008                  		add.w	d0,obX(a1)
0000A87E 0669 000C 000C             		addi.w	#$C,obY(a1)
0000A884 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1) ; copy object type from Ball Hog
0000A88A                            
0000A88A                            	@fail:
0000A88A 60B2                       		bra.s	@remember
0000A88A 60B2                       		bra.s	@remember
0000A88C                            		include	"_incObj\20 Cannonball.asm"
0000A88C                            ; ---------------------------------------------------------------------------
0000A88C                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
0000A88C                            ; ---------------------------------------------------------------------------
0000A88C                            
0000A88C                            Cannonball:
0000A88C 7000                       		moveq	#0,d0
0000A88E 1028 0024                  		move.b	obRoutine(a0),d0
0000A892 323B 0000                  		move.w	Cbal_Index(pc,d0.w),d1
0000A896 4EFB 1000                  		jmp	Cbal_Index(pc,d1.w)
0000A89A                            ; ===========================================================================
0000A89A 0000                       Cbal_Index:	dc.w Cbal_Main-Cbal_Index
0000A89C 0000                       		dc.w Cbal_Bounce-Cbal_Index
0000A89E                            
0000A89E =00000030                  cbal_time:	equ $30		; time until the cannonball explodes (2 bytes)
0000A89E                            ; ===========================================================================
0000A89E                            
0000A89E                            Cbal_Main:	; Routine 0
0000A89E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A8A2 117C 0007 0016             		move.b	#7,obHeight(a0)
0000A8A8 217C 0000 0000 0004        		move.l	#Map_Hog,obMap(a0)
0000A8B0 317C 2302 0002             		move.w	#$2302,obGfx(a0)
0000A8B6 117C 0004 0001             		move.b	#4,obRender(a0)
0000A8BC 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000A8C2 117C 0087 0020             		move.b	#$87,obColType(a0)
0000A8C8 117C 0008 0014             		move.b	#8,obActWid(a0)
0000A8CE 7000                       		moveq	#0,d0
0000A8D0 1028 0028                  		move.b	obSubtype(a0),d0 ; move subtype to d0
0000A8D4 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
0000A8D8 3140 0030                  		move.w	d0,cbal_time(a0) ; set explosion time
0000A8DC 117C 0004 001A             		move.b	#4,obFrame(a0)
0000A8E2                            
0000A8E2                            Cbal_Bounce:	; Routine 2
0000A8E2 4EB9 0000 0000             		jsr	(ObjectFall).l
0000A8E8 4A68 0012                  		tst.w	obVelY(a0)
0000A8EC 6B00                       		bmi.s	Cbal_ChkExplode
0000A8EE 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000A8F4 4A41                       		tst.w	d1		; has ball hit the floor?
0000A8F6 6A00                       		bpl.s	Cbal_ChkExplode	; if not, branch
0000A8F8                            
0000A8F8 D368 000C                  		add.w	d1,obY(a0)
0000A8FC 317C FD00 0012             		move.w	#-$300,obVelY(a0) ; bounce
0000A902 4A03                       		tst.b	d3
0000A904 6700                       		beq.s	Cbal_ChkExplode
0000A906 6B00                       		bmi.s	loc_8CA4
0000A908 4A68 0010                  		tst.w	obVelX(a0)
0000A90C 6A00                       		bpl.s	Cbal_ChkExplode
0000A90E 4468 0010                  		neg.w	obVelX(a0)
0000A912 6000                       		bra.s	Cbal_ChkExplode
0000A914                            ; ===========================================================================
0000A914                            
0000A914                            loc_8CA4:
0000A914 4A68 0010                  		tst.w	obVelX(a0)
0000A918 6B00                       		bmi.s	Cbal_ChkExplode
0000A91A 4468 0010                  		neg.w	obVelX(a0)
0000A91E                            
0000A91E                            Cbal_ChkExplode:
0000A91E 5368 0030                  		subq.w	#1,cbal_time(a0) ; subtract 1 from explosion time
0000A922 6A00                       		bpl.s	Cbal_Animate	; if time is > 0, branch
0000A924                            
0000A924                            	Cbal_Explode:
0000A924 10BC 0000                  		move.b	#id_MissileDissolve,0(a0)
0000A928 10BC 0000                  		move.b	#id_ExplosionBomb,0(a0)	; change object	to an explosion	($3F)
0000A92C 117C 0000 0024             		move.b	#0,obRoutine(a0) ; reset routine counter
0000A932 6000 0000                  		bra.w	ExplosionBomb	; jump to explosion code
0000A936                            ; ===========================================================================
0000A936                            
0000A936                            Cbal_Animate:
0000A936 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0000A93A 6A00                       		bpl.s	Cbal_Display
0000A93C 117C 0005 001E             		move.b	#5,obTimeFrame(a0) ; set frame duration to 5 frames
0000A942 0868 0000 001A             		bchg	#0,obFrame(a0)	; change frame
0000A948                            
0000A948                            Cbal_Display:
0000A948 6100 0000                  		bsr.w	DisplaySprite
0000A94C 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000A950 0640 00E0                  		addi.w	#$E0,d0
0000A954 B068 000C                  		cmp.w	obY(a0),d0	; has object fallen off	the level?
0000A958 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
0000A95C 4E75                       		rts	
0000A95C 4E75                       		rts	
0000A95E                            		include	"_incObj\24, 27 & 3F Explosions.asm"
0000A95E                            ; ---------------------------------------------------------------------------
0000A95E                            ; Object 24 - buzz bomber missile vanishing (unused?)
0000A95E                            ; ---------------------------------------------------------------------------
0000A95E                            
0000A95E                            MissileDissolve:
0000A95E 7000                       		moveq	#0,d0
0000A960 1028 0024                  		move.b	obRoutine(a0),d0
0000A964 323B 0000                  		move.w	MDis_Index(pc,d0.w),d1
0000A968 4EFB 1000                  		jmp	MDis_Index(pc,d1.w)
0000A96C                            ; ===========================================================================
0000A96C 0000                       MDis_Index:	dc.w MDis_Main-MDis_Index
0000A96E 0000                       		dc.w MDis_Animate-MDis_Index
0000A970                            ; ===========================================================================
0000A970                            
0000A970                            MDis_Main:	; Routine 0
0000A970 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A974 217C 0000 0000 0004        		move.l	#Map_MisDissolve,obMap(a0)
0000A97C 317C 041C 0002             		move.w	#$41C,obGfx(a0)
0000A982 117C 0004 0001             		move.b	#4,obRender(a0)
0000A988 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000A98E 117C 0000 0020             		move.b	#0,obColType(a0)
0000A994 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A99A 117C 0009 001E             		move.b	#9,obTimeFrame(a0)
0000A9A0 117C 0000 001A             		move.b	#0,obFrame(a0)
0000A9B0                            
0000A9B0                            MDis_Animate:	; Routine 2
0000A9B0 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0000A9B4 6A00                       		bpl.s	@display
0000A9B6 117C 0009 001E             		move.b	#9,obTimeFrame(a0) ; set frame duration to 9 frames
0000A9BC 5228 001A                  		addq.b	#1,obFrame(a0)	; next frame
0000A9C0 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)	; has animation completed?
0000A9C6 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000A9CA                            
0000A9CA                            	@display:
0000A9CA 6000 0000                  		bra.w	DisplaySprite
0000A9CE                            ; ===========================================================================
0000A9CE                            
0000A9CE                            ; ---------------------------------------------------------------------------
0000A9CE                            ; Object 27 - explosion	from a destroyed enemy or monitor
0000A9CE                            ; ---------------------------------------------------------------------------
0000A9CE                            
0000A9CE                            ExplosionItem:
0000A9CE 7000                       		moveq	#0,d0
0000A9D0 1028 0024                  		move.b	obRoutine(a0),d0
0000A9D4 323B 0000                  		move.w	ExItem_Index(pc,d0.w),d1
0000A9D8 4EFB 1000                  		jmp	ExItem_Index(pc,d1.w)
0000A9DC                            ; ===========================================================================
0000A9DC 0000                       ExItem_Index:	dc.w ExItem_Animal-ExItem_Index
0000A9DE 0000                       		dc.w ExItem_Main-ExItem_Index
0000A9E0 0000                       		dc.w ExItem_Animate-ExItem_Index
0000A9E2                            ; ===========================================================================
0000A9E2                            
0000A9E2                            ExItem_Animal:	; Routine 0
0000A9E2 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A9E6 6100 0000                  		bsr.w	FindFreeObj
0000A9EA 6600                       		bne.s	ExItem_Main
0000A9EC 12BC 0000                  		move.b	#id_Animals,0(a1) ; load animal object
0000A9F0 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000A9F6 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000A9FC 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
0000AA02                            
0000AA02                            ExItem_Main:	; Routine 2
0000AA02 5428 0024                  		addq.b	#2,obRoutine(a0)
0000AA06 217C 0000 0000 0004        		move.l	#Map_ExplodeItem,obMap(a0)
0000AA0E 317C 05A0 0002             		move.w	#$5A0,obGfx(a0)
0000AA14 117C 0004 0001             		move.b	#4,obRender(a0)
0000AA1A 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000AA20 117C 0000 0020             		move.b	#0,obColType(a0)
0000AA26 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000AA2C 117C 0007 001E             		move.b	#7,obTimeFrame(a0) ; set frame duration to 7 frames
0000AA32 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AA42                            
0000AA42                            ExItem_Animate:	; Routine 4 (2 for ExplosionBomb)
0000AA42 5528 001E                  		subq.b	#2,obTimeFrame(a0) ; subtract 1 from frame duration
0000AA46 6A00                       		bpl.s	@display
0000AA48 117C 0007 001E             		move.b	#7,obTimeFrame(a0) ; set frame duration to 7 frames
0000AA4E 5228 001A                  		addq.b	#1,obFrame(a0)	; next frame
0000AA52 0C28 0005 001A             		cmpi.b	#5,obFrame(a0)	; is the final frame (05) displayed?
0000AA58 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000AA5C                            
0000AA5C                            	@display:
0000AA5C 6000 0000                  		bra.w	DisplaySprite
0000AA60                            ; ===========================================================================
0000AA60                            ; ---------------------------------------------------------------------------
0000AA60                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
0000AA60                            ; ---------------------------------------------------------------------------
0000AA60                            
0000AA60                            ExplosionBomb:
0000AA60 7000                       		moveq	#0,d0
0000AA62 1028 0024                  		move.b	obRoutine(a0),d0
0000AA66 323B 0000                  		move.w	ExBom_Index(pc,d0.w),d1
0000AA6A 4EFB 1000                  		jmp	ExBom_Index(pc,d1.w)
0000AA6E                            ; ===========================================================================
0000AA6E 0000                       ExBom_Index:	dc.w ExBom_Main-ExBom_Index
0000AA70 FFD4                       		dc.w ExItem_Animate-ExBom_Index
0000AA72                            ; ===========================================================================
0000AA72                            
0000AA72                            ExBom_Main:	; Routine 0
0000AA72 5428 0024                  		addq.b	#2,obRoutine(a0)
0000AA76 217C 0000 0000 0004        		move.l	#Map_ExplodeBomb,obMap(a0)
0000AA7E 317C 05A0 0002             		move.w	#$5A0,obGfx(a0)
0000AA84 117C 0004 0001             		move.b	#4,obRender(a0)
0000AA8A 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000AA90 117C 0000 0020             		move.b	#0,obColType(a0)
0000AA96 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000AA9C 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000AAA2 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AAB2                            		include	"_anim\Ball Hog.asm"
0000AAB2                            ; ---------------------------------------------------------------------------
0000AAB2                            ; Animation script - doors (SBZ)
0000AAB2                            ; ---------------------------------------------------------------------------
0000AAB2 0000                       Ani_Hog:	dc.w @hog-Ani_Hog
0000AAB4 0900 0002 0203 0200 0002+  @hog:		dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, afEnd
0000AACC 00                         		even
0000AACC 00                         		even
0000AACC                            Map_Hog:	include	"_maps\Ball Hog.asm"
0000AACC                            ; --------------------------------------------------------------------------------
0000AACC                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000AACC                            ; --------------------------------------------------------------------------------
0000AACC                            
0000AACC                            SME_ZER01:	
0000AACC 0000 0000                  		dc.w SME_ZER01_C-SME_ZER01, SME_ZER01_17-SME_ZER01	
0000AAD0 0000 0000                  		dc.w SME_ZER01_22-SME_ZER01, SME_ZER01_2D-SME_ZER01	
0000AAD4 0000 0000                  		dc.w SME_ZER01_38-SME_ZER01, SME_ZER01_3E-SME_ZER01	
0000AAD8 02                         SME_ZER01_C:	dc.b 2	
0000AAD9 EF09 2000 F4               		dc.b $EF, 9, $20, 0, $F4	
0000AADE FF0A 2006 F4               		dc.b $FF, $A, $20, 6, $F4	
0000AAE3 02                         SME_ZER01_17:	dc.b 2	
0000AAE4 EF09 2000 F4               		dc.b $EF, 9, $20, 0, $F4	
0000AAE9 FF0A 200F F4               		dc.b $FF, $A, $20, $F, $F4	
0000AAEE 02                         SME_ZER01_22:	dc.b 2	
0000AAEF F409 2000 F4               		dc.b $F4, 9, $20, 0, $F4	
0000AAF4 0409 2018 F4               		dc.b 4, 9, $20, $18, $F4	
0000AAF9 02                         SME_ZER01_2D:	dc.b 2	
0000AAFA E409 2000 F4               		dc.b $E4, 9, $20, 0, $F4	
0000AAFF F40A 201E F4               		dc.b $F4, $A, $20, $1E, $F4	
0000AB04 01                         SME_ZER01_38:	dc.b 1	
0000AB05 F805 0027 F8               		dc.b $F8, 5, 0, $27, $F8	
0000AB0A 01                         SME_ZER01_3E:	dc.b 1	
0000AB0B F805 602B F8               		dc.b $F8, 5, $60, $2B, $F8	
0000AB10                            		even
0000AB10                            		even
0000AB10                            Map_MisDissolve:include	"_maps\Buzz Bomber Missile Dissolve.asm"
0000AB10                            ; ---------------------------------------------------------------------------
0000AB10                            ; Sprite mappings - buzz bomber missile vanishing
0000AB10                            ; ---------------------------------------------------------------------------
0000AB10                            Map_MisDissolve_internal:
0000AB10 0000                       		dc.w byte_8EAE-Map_MisDissolve_internal
0000AB12 0000                       		dc.w byte_8EB4-Map_MisDissolve_internal
0000AB14 0000                       		dc.w byte_8EBA-Map_MisDissolve_internal
0000AB16 0000                       		dc.w byte_8EC0-Map_MisDissolve_internal
0000AB18 01                         byte_8EAE:	dc.b 1
0000AB19 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0000AB1E 01                         byte_8EB4:	dc.b 1
0000AB1F F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0000AB24 01                         byte_8EBA:	dc.b 1
0000AB25 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0000AB2A 01                         byte_8EC0:	dc.b 1
0000AB2B F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
0000AB30                            		even
0000AB30                            		even
0000AB30                            		include	"_maps\Explosions.asm"
0000AB30                            ; ---------------------------------------------------------------------------
0000AB30                            ; Sprite mappings - explosion from a badnik or monitor
0000AB30                            ; ---------------------------------------------------------------------------
0000AB30 0000 0000                  Map_ExplodeItem:dc.w byte_8ED0-Map_ExplodeItem, byte_8ED6-Map_ExplodeItem
0000AB34 0000 0000                  		dc.w byte_8EDC-Map_ExplodeItem, byte_8EE2-Map_ExplodeItem
0000AB38 0000                       		dc.w byte_8EF7-Map_ExplodeItem
0000AB3A 01                         byte_8ED0:	dc.b 1
0000AB3B F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
0000AB40 01                         byte_8ED6:	dc.b 1
0000AB41 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
0000AB46 01                         byte_8EDC:	dc.b 1
0000AB47 F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
0000AB4C 04                         byte_8EE2:	dc.b 4
0000AB4D EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
0000AB52 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
0000AB57 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
0000AB5C FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
0000AB61 04                         byte_8EF7:	dc.b 4
0000AB62 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
0000AB67 EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
0000AB6C 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
0000AB71 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
0000AB76                            		even
0000AB76                            ; ---------------------------------------------------------------------------
0000AB76                            ; Sprite mappings - explosion from when	a boss is destroyed
0000AB76                            ; ---------------------------------------------------------------------------
0000AB76 FFC4                       Map_ExplodeBomb:dc.w byte_8ED0-Map_ExplodeBomb
0000AB78 0000                       		dc.w byte_8F16-Map_ExplodeBomb
0000AB7A 0000                       		dc.w byte_8F1C-Map_ExplodeBomb
0000AB7C FFD6                       		dc.w byte_8EE2-Map_ExplodeBomb
0000AB7E FFEB                       		dc.w byte_8EF7-Map_ExplodeBomb
0000AB80 01                         byte_8F16:	dc.b 1
0000AB81 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000AB86 01                         byte_8F1C:	dc.b 1
0000AB87 F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
0000AB8C                            		even
0000AB8C                            		even
0000AB8C                            
0000AB8C                            		include	"_incObj\28 Animals.asm"
0000AB8C                            ; ---------------------------------------------------------------------------
0000AB8C                            ; Object 28 - animals
0000AB8C                            ; ---------------------------------------------------------------------------
0000AB8C                            
0000AB8C                            Animals:
0000AB8C 7000                       		moveq	#0,d0
0000AB8E 1028 0024                  		move.b	obRoutine(a0),d0
0000AB92 323B 0000                  		move.w	Anml_Index(pc,d0.w),d1
0000AB96 4EFB 1000                  		jmp	Anml_Index(pc,d1.w)
0000AB9A                            ; ===========================================================================
0000AB9A 0000 0000                  Anml_Index:	dc.w Anml_Ending-Anml_Index, loc_912A-Anml_Index
0000AB9E 0000 0000                  		dc.w loc_9184-Anml_Index, loc_91C0-Anml_Index
0000ABA2 0000 0000                  		dc.w loc_9184-Anml_Index, loc_9184-Anml_Index
0000ABA6 0000 0000                  		dc.w loc_9184-Anml_Index, loc_91C0-Anml_Index
0000ABAA 0000 0000                  		dc.w loc_9184-Anml_Index, loc_9240-Anml_Index
0000ABAE 0000 0000                  		dc.w loc_9260-Anml_Index, loc_9260-Anml_Index
0000ABB2 0000 0000                  		dc.w loc_9280-Anml_Index, loc_92BA-Anml_Index
0000ABB6 0000 0000                  		dc.w loc_9314-Anml_Index, loc_9332-Anml_Index
0000ABBA 0000 0000                  		dc.w loc_9314-Anml_Index, loc_9332-Anml_Index
0000ABBE 0000 0000                  		dc.w loc_9314-Anml_Index, loc_9370-Anml_Index
0000ABC2 0000                       		dc.w loc_92D6-Anml_Index
0000ABC4                            
0000ABC4 0005 0203 0603 0405 0401+  Anml_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
0000ABD0                            
0000ABD0 FE00 FC00                  Anml_Variables:	dc.w $FE00, $FC00
0000ABD4 0000 0000                  		dc.l Map_Animal1
0000ABD8 FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
0000ABDC 0000 0000                  		dc.l Map_Animal2	; mappings address
0000ABE0 FE80 FD00                  		dc.w $FE80, $FD00
0000ABE4 0000 0000                  		dc.l Map_Animal1
0000ABE8 FEC0 FE80                  		dc.w $FEC0, $FE80
0000ABEC 0000 0000                  		dc.l Map_Animal2
0000ABF0 FE40 FD00                  		dc.w $FE40, $FD00
0000ABF4 0000 0000                  		dc.l Map_Animal3
0000ABF8 FD00 FC00                  		dc.w $FD00, $FC00
0000ABFC 0000 0000                  		dc.l Map_Animal2
0000AC00 FD80 FC80                  		dc.w $FD80, $FC80
0000AC04 0000 0000                  		dc.l Map_Animal3
0000AC08                            
0000AC08 FBC0 FC00 FBC0 FC00 FBC0+  Anml_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
0000AC18 FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
0000AC28 FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
0000AC34                            
0000AC34 0000 0000 0000 0000 0000+  Anml_EndMap:	dc.l Map_Animal2, Map_Animal2, Map_Animal2, Map_Animal1, Map_Animal1
0000AC48 0000 0000 0000 0000 0000+  		dc.l Map_Animal1, Map_Animal1, Map_Animal2, Map_Animal3, Map_Animal2
0000AC5C 0000 0000                  		dc.l Map_Animal3
0000AC60                            
0000AC60 05A5 05A5 05A5 0553 0553+  Anml_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
0000AC72 0565 05B3                  		dc.w $565, $5B3
0000AC76                            ; ===========================================================================
0000AC76                            
0000AC76                            Anml_Ending:	; Routine 0
0000AC76 4A28 0028                  		tst.b	obSubtype(a0)	; did animal come from a destroyed enemy?
0000AC7A 6700 0000                  		beq.w	Anml_FromEnemy	; if yes, branch
0000AC7E 7000                       		moveq	#0,d0
0000AC80 1028 0028                  		move.b	obSubtype(a0),d0 ; move object type to d0
0000AC84 D040                       		add.w	d0,d0		; multiply d0 by 2
0000AC86 1140 0024                  		move.b	d0,obRoutine(a0) ; move d0 to routine counter
0000AC8A 0440 0014                  		subi.w	#$14,d0
0000AC8E 317B 00D0 0002             		move.w	Anml_EndVram(pc,d0.w),obGfx(a0)
0000AC94 D040                       		add.w	d0,d0
0000AC96 217B 009C 0004             		move.l	Anml_EndMap(pc,d0.w),obMap(a0)
0000AC9C 43FA FF6A                  		lea	Anml_EndSpeed(pc),a1
0000ACA0 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
0000ACA6 3171 0000 0010             		move.w	(a1,d0.w),obVelX(a0)
0000ACAC 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
0000ACB2 3171 0002 0012             		move.w	2(a1,d0.w),obVelY(a0)
0000ACB8 117C 000C 0016             		move.b	#$C,obHeight(a0)
0000ACBE 117C 0004 0001             		move.b	#4,obRender(a0)
0000ACC4 08E8 0000 0001             		bset	#0,obRender(a0)
0000ACCA 317C 0300 0018             		move.w	#$300,obPriority(a0)
0000ACD0 117C 0008 0014             		move.b	#8,obActWid(a0)
0000ACD6 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000ACDC 6000 0000                  		bra.w	DisplaySprite
0000ACE0                            ; ===========================================================================
0000ACE0                            
0000ACE0                            Anml_FromEnemy:
0000ACE0 5428 0024                  		addq.b	#2,obRoutine(a0)
0000ACE4 6100 8D26                  		bsr.w	RandomNumber
0000ACE8 0240 0001                  		andi.w	#1,d0
0000ACEC 7200                       		moveq	#0,d1
0000ACEE 1238 FE10                  		move.b	(v_zone).w,d1
0000ACF2 D241                       		add.w	d1,d1
0000ACF4 D240                       		add.w	d0,d1
0000ACF6 43FA FECC                  		lea	Anml_VarIndex(pc),a1
0000ACFA 1031 1000                  		move.b	(a1,d1.w),d0
0000ACFE 1140 0030                  		move.b	d0,$30(a0)
0000AD02 E748                       		lsl.w	#3,d0
0000AD04 43FA FECA                  		lea	Anml_Variables(pc),a1
0000AD08 D2C0                       		adda.w	d0,a1
0000AD0A 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
0000AD0E 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
0000AD12 2159 0004                  		move.l	(a1)+,obMap(a0)	; load mappings
0000AD16 317C 0580 0002             		move.w	#$580,obGfx(a0)	; VRAM setting for 1st animal
0000AD1C 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
0000AD22 6700                       		beq.s	loc_90C0	; if yes, branch
0000AD24 317C 0592 0002             		move.w	#$592,obGfx(a0)	; VRAM setting for 2nd animal
0000AD2A                            
0000AD2A                            loc_90C0:
0000AD2A 117C 000C 0016             		move.b	#$C,obHeight(a0)
0000AD30 117C 0004 0001             		move.b	#4,obRender(a0)
0000AD36 08E8 0000 0001             		bset	#0,obRender(a0)
0000AD3C 317C 0300 0018             		move.w	#$300,obPriority(a0)
0000AD42 117C 0008 0014             		move.b	#8,obActWid(a0)
0000AD48 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000AD4E 117C 0002 001A             		move.b	#2,obFrame(a0)
0000AD54 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000AD5A 4A38 F7A7                  		tst.b	(v_bossstatus).w
0000AD5E 6600                       		bne.s	loc_911C
0000AD60 6100 0000                  		bsr.w	FindFreeObj
0000AD64 6600                       		bne.s	Anml_Display
0000AD66 12BC 0000                  		move.b	#id_Points,0(a1) ; load points object
0000AD6A 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000AD70 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000AD76 3028 003E                  		move.w	$3E(a0),d0
0000AD7A E248                       		lsr.w	#1,d0
0000AD7C 1340 001A                  		move.b	d0,obFrame(a1)
0000AD80                            
0000AD80                            Anml_Display:
0000AD80 6000 0000                  		bra.w	DisplaySprite
0000AD84                            ; ===========================================================================
0000AD84                            
0000AD84                            loc_911C:
0000AD84 117C 0012 0024             		move.b	#$12,obRoutine(a0)
0000AD8A 4268 0010                  		clr.w	obVelX(a0)
0000AD8E 6000 0000                  		bra.w	DisplaySprite
0000AD92                            ; ===========================================================================
0000AD92                            
0000AD92                            loc_912A:
0000AD92 4A28 0001                  		tst.b	obRender(a0)
0000AD96 6A00 0000                  		bpl.w	DeleteObject
0000AD9A 6100 0000                  		bsr.w	ObjectFall
0000AD9E 4A68 0012                  		tst.w	obVelY(a0)
0000ADA2 6B00                       		bmi.s	loc_9180
0000ADA4 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000ADAA 4A41                       		tst.w	d1
0000ADAC 6A00                       		bpl.s	loc_9180
0000ADAE D368 000C                  		add.w	d1,obY(a0)
0000ADB2 3168 0032 0010             		move.w	$32(a0),obVelX(a0)
0000ADB8 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000ADBE 117C 0001 001A             		move.b	#1,obFrame(a0)
0000ADC4 1028 0030                  		move.b	$30(a0),d0
0000ADC8 D000                       		add.b	d0,d0
0000ADCA 5800                       		addq.b	#4,d0
0000ADCC 1140 0024                  		move.b	d0,obRoutine(a0)
0000ADD0 4A38 F7A7                  		tst.b	(v_bossstatus).w
0000ADD4 6700                       		beq.s	loc_9180
0000ADD6 0838 0004 FE0F             		btst	#4,(v_vbla_byte).w
0000ADDC 6700                       		beq.s	loc_9180
0000ADDE 4468 0010                  		neg.w	obVelX(a0)
0000ADE2 0868 0000 0001             		bchg	#0,obRender(a0)
0000ADE8                            
0000ADE8                            loc_9180:
0000ADE8 6000 0000                  		bra.w	DisplaySprite
0000ADEC                            ; ===========================================================================
0000ADEC                            
0000ADEC                            loc_9184:
0000ADEC 6100 0000                  		bsr.w	ObjectFall
0000ADF0 117C 0001 001A             		move.b	#1,obFrame(a0)
0000ADF6 4A68 0012                  		tst.w	obVelY(a0)
0000ADFA 6B00                       		bmi.s	loc_91AE
0000ADFC 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AE02 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AE08 4A41                       		tst.w	d1
0000AE0A 6A00                       		bpl.s	loc_91AE
0000AE0C D368 000C                  		add.w	d1,obY(a0)
0000AE10 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AE16                            
0000AE16                            loc_91AE:
0000AE16 4A28 0028                  		tst.b	obSubtype(a0)
0000AE1A 6600                       		bne.s	loc_9224
0000AE1C 4A28 0001                  		tst.b	obRender(a0)
0000AE20 6A00 0000                  		bpl.w	DeleteObject
0000AE24 6000 0000                  		bra.w	DisplaySprite
0000AE28                            ; ===========================================================================
0000AE28                            
0000AE28                            loc_91C0:
0000AE28 6100 0000                  		bsr.w	SpeedToPos
0000AE2C 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000AE32 4A68 0012                  		tst.w	obVelY(a0)
0000AE36 6B00                       		bmi.s	loc_91FC
0000AE38 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AE3E 4A41                       		tst.w	d1
0000AE40 6A00                       		bpl.s	loc_91FC
0000AE42 D368 000C                  		add.w	d1,obY(a0)
0000AE46 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AE4C 4A28 0028                  		tst.b	obSubtype(a0)
0000AE50 6700                       		beq.s	loc_91FC
0000AE52 0C28 000A 0028             		cmpi.b	#$A,obSubtype(a0)
0000AE58 6700                       		beq.s	loc_91FC
0000AE5A 4468 0010                  		neg.w	obVelX(a0)
0000AE5E 0868 0000 0001             		bchg	#0,obRender(a0)
0000AE64                            
0000AE64                            loc_91FC:
0000AE64 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000AE68 6A00                       		bpl.s	loc_9212
0000AE6A 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000AE70 5228 001A                  		addq.b	#1,obFrame(a0)
0000AE74 0228 0001 001A             		andi.b	#1,obFrame(a0)
0000AE7A                            
0000AE7A                            loc_9212:
0000AE7A 4A28 0028                  		tst.b	obSubtype(a0)
0000AE7E 6600                       		bne.s	loc_9224
0000AE80 4A28 0001                  		tst.b	obRender(a0)
0000AE84 6A00 0000                  		bpl.w	DeleteObject
0000AE88 6000 0000                  		bra.w	DisplaySprite
0000AE8C                            ; ===========================================================================
0000AE8C                            
0000AE8C                            loc_9224:
0000AE8C 3028 0008                  		move.w	obX(a0),d0
0000AE90 9078 D008                  		sub.w	(v_player+obX).w,d0
0000AE94 6500                       		bcs.s	loc_923C
0000AE96 0440 0180                  		subi.w	#$180,d0
0000AE9A 6A00                       		bpl.s	loc_923C
0000AE9C 4A28 0001                  		tst.b	obRender(a0)
0000AEA0 6A00 0000                  		bpl.w	DeleteObject
0000AEA4                            
0000AEA4                            loc_923C:
0000AEA4 6000 0000                  		bra.w	DisplaySprite
0000AEA8                            ; ===========================================================================
0000AEA8                            
0000AEA8                            loc_9240:
0000AEA8 4A28 0001                  		tst.b	obRender(a0)
0000AEAC 6A00 0000                  		bpl.w	DeleteObject
0000AEB0 5368 0036                  		subq.w	#1,$36(a0)
0000AEB4 6600 0000                  		bne.w	loc_925C
0000AEB8 117C 0002 0024             		move.b	#2,obRoutine(a0)
0000AEBE 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000AEC4                            
0000AEC4                            loc_925C:
0000AEC4 6000 0000                  		bra.w	DisplaySprite
0000AEC8                            ; ===========================================================================
0000AEC8                            
0000AEC8                            loc_9260:
0000AEC8 6100 0000                  		bsr.w	sub_9404
0000AECC 6400                       		bcc.s	loc_927C
0000AECE 3168 0032 0010             		move.w	$32(a0),obVelX(a0)
0000AED4 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AEDA 117C 000E 0024             		move.b	#$E,obRoutine(a0)
0000AEE0 6000 FF46                  		bra.w	loc_91C0
0000AEE4                            ; ===========================================================================
0000AEE4                            
0000AEE4                            loc_927C:
0000AEE4 6000 FFA6                  		bra.w	loc_9224
0000AEE8                            ; ===========================================================================
0000AEE8                            
0000AEE8                            loc_9280:
0000AEE8 6100 0000                  		bsr.w	sub_9404
0000AEEC 6A00                       		bpl.s	loc_92B6
0000AEEE 4268 0010                  		clr.w	obVelX(a0)
0000AEF2 4268 0032                  		clr.w	$32(a0)
0000AEF6 6100 0000                  		bsr.w	SpeedToPos
0000AEFA 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000AF00 6100 0000                  		bsr.w	loc_93C4
0000AF04 6100 0000                  		bsr.w	loc_93EC
0000AF08 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000AF0C 6A00                       		bpl.s	loc_92B6
0000AF0E 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000AF14 5228 001A                  		addq.b	#1,obFrame(a0)
0000AF18 0228 0001 001A             		andi.b	#1,obFrame(a0)
0000AF1E                            
0000AF1E                            loc_92B6:
0000AF1E 6000 FF6C                  		bra.w	loc_9224
0000AF22                            ; ===========================================================================
0000AF22                            
0000AF22                            loc_92BA:
0000AF22 6100 0000                  		bsr.w	sub_9404
0000AF26 6A00                       		bpl.s	loc_9310
0000AF28 3168 0032 0010             		move.w	$32(a0),obVelX(a0)
0000AF2E 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AF34 117C 0004 0024             		move.b	#4,obRoutine(a0)
0000AF3A 6000 FEB0                  		bra.w	loc_9184
0000AF3E                            ; ===========================================================================
0000AF3E                            
0000AF3E                            loc_92D6:
0000AF3E 6100 0000                  		bsr.w	ObjectFall
0000AF42 117C 0001 001A             		move.b	#1,obFrame(a0)
0000AF48 4A68 0012                  		tst.w	obVelY(a0)
0000AF4C 6B00                       		bmi.s	loc_9310
0000AF4E 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AF54 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AF5A 4A41                       		tst.w	d1
0000AF5C 6A00                       		bpl.s	loc_9310
0000AF5E 4628 0029                  		not.b	$29(a0)
0000AF62 6600                       		bne.s	loc_9306
0000AF64 4468 0010                  		neg.w	obVelX(a0)
0000AF68 0868 0000 0001             		bchg	#0,obRender(a0)
0000AF6E                            
0000AF6E                            loc_9306:
0000AF6E D368 000C                  		add.w	d1,obY(a0)
0000AF72 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AF78                            
0000AF78                            loc_9310:
0000AF78 6000 FF12                  		bra.w	loc_9224
0000AF7C                            ; ===========================================================================
0000AF7C                            
0000AF7C                            loc_9314:
0000AF7C 6100 0000                  		bsr.w	sub_9404
0000AF80 6A00                       		bpl.s	loc_932E
0000AF82 4268 0010                  		clr.w	obVelX(a0)
0000AF86 4268 0032                  		clr.w	$32(a0)
0000AF8A 6100 0000                  		bsr.w	ObjectFall
0000AF8E 6100 0000                  		bsr.w	loc_93C4
0000AF92 6100 0000                  		bsr.w	loc_93EC
0000AF96                            
0000AF96                            loc_932E:
0000AF96 6000 FEF4                  		bra.w	loc_9224
0000AF9A                            ; ===========================================================================
0000AF9A                            
0000AF9A                            loc_9332:
0000AF9A 6100 0000                  		bsr.w	sub_9404
0000AF9E 6A00                       		bpl.s	loc_936C
0000AFA0 6100 0000                  		bsr.w	ObjectFall
0000AFA4 117C 0001 001A             		move.b	#1,obFrame(a0)
0000AFAA 4A68 0012                  		tst.w	obVelY(a0)
0000AFAE 6B00                       		bmi.s	loc_936C
0000AFB0 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AFB6 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AFBC 4A41                       		tst.w	d1
0000AFBE 6A00                       		bpl.s	loc_936C
0000AFC0 4468 0010                  		neg.w	obVelX(a0)
0000AFC4 0868 0000 0001             		bchg	#0,obRender(a0)
0000AFCA D368 000C                  		add.w	d1,obY(a0)
0000AFCE 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AFD4                            
0000AFD4                            loc_936C:
0000AFD4 6000 FEB6                  		bra.w	loc_9224
0000AFD8                            ; ===========================================================================
0000AFD8                            
0000AFD8                            loc_9370:
0000AFD8 6100 0000                  		bsr.w	sub_9404
0000AFDC 6A00                       		bpl.s	loc_93C0
0000AFDE 6100 0000                  		bsr.w	SpeedToPos
0000AFE2 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000AFE8 4A68 0012                  		tst.w	obVelY(a0)
0000AFEC 6B00                       		bmi.s	loc_93AA
0000AFEE 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AFF4 4A41                       		tst.w	d1
0000AFF6 6A00                       		bpl.s	loc_93AA
0000AFF8 4628 0029                  		not.b	$29(a0)
0000AFFC 6600                       		bne.s	loc_93A0
0000AFFE 4468 0010                  		neg.w	obVelX(a0)
0000B002 0868 0000 0001             		bchg	#0,obRender(a0)
0000B008                            
0000B008                            loc_93A0:
0000B008 D368 000C                  		add.w	d1,obY(a0)
0000B00C 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000B012                            
0000B012                            loc_93AA:
0000B012 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000B016 6A00                       		bpl.s	loc_93C0
0000B018 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000B01E 5228 001A                  		addq.b	#1,obFrame(a0)
0000B022 0228 0001 001A             		andi.b	#1,obFrame(a0)
0000B028                            
0000B028                            loc_93C0:
0000B028 6000 FE62                  		bra.w	loc_9224
0000B02C                            ; ===========================================================================
0000B02C                            
0000B02C                            loc_93C4:
0000B02C 117C 0001 001A             		move.b	#1,obFrame(a0)
0000B032 4A68 0012                  		tst.w	obVelY(a0)
0000B036 6B00                       		bmi.s	locret_93EA
0000B038 117C 0000 001A             		move.b	#0,obFrame(a0)
0000B03E 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000B044 4A41                       		tst.w	d1
0000B046 6A00                       		bpl.s	locret_93EA
0000B048 D368 000C                  		add.w	d1,obY(a0)
0000B04C 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000B052                            
0000B052                            locret_93EA:
0000B052 4E75                       		rts	
0000B054                            ; ===========================================================================
0000B054                            
0000B054                            loc_93EC:
0000B054 08E8 0000 0001             		bset	#0,obRender(a0)
0000B05A 3028 0008                  		move.w	obX(a0),d0
0000B05E 9078 D008                  		sub.w	(v_player+obX).w,d0
0000B062 6400                       		bcc.s	locret_9402
0000B064 08A8 0000 0001             		bclr	#0,obRender(a0)
0000B06A                            
0000B06A                            locret_9402:
0000B06A 4E75                       		rts	
0000B06C                            
0000B06C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B06C                            
0000B06C                            
0000B06C                            sub_9404:
0000B06C 3038 D008                  		move.w	(v_player+obX).w,d0
0000B070 9068 0008                  		sub.w	obX(a0),d0
0000B074 0440 00B8                  		subi.w	#$B8,d0
0000B078 4E75                       		rts	
0000B07A                            ; End of function sub_9404
0000B07A                            ; End of function sub_9404
0000B07A                            		include	"_incObj\29 Points.asm"
0000B07A                            ; ---------------------------------------------------------------------------
0000B07A                            ; Object 29 - points that appear when you destroy something
0000B07A                            ; ---------------------------------------------------------------------------
0000B07A                            
0000B07A                            Points:
0000B07A 7000                       		moveq	#0,d0
0000B07C 1028 0024                  		move.b	obRoutine(a0),d0
0000B080 323B 0000                  		move.w	Poi_Index(pc,d0.w),d1
0000B084 4EBB 1000                  		jsr	Poi_Index(pc,d1.w)
0000B088 6000 0000                  		bra.w	DisplaySprite
0000B08C                            ; ===========================================================================
0000B08C 0000                       Poi_Index:	dc.w Poi_Main-Poi_Index
0000B08E 0000                       		dc.w Poi_Slower-Poi_Index
0000B090                            ; ===========================================================================
0000B090                            
0000B090                            Poi_Main:	; Routine 0
0000B090 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B094 217C 0000 0000 0004        		move.l	#Map_Poi,obMap(a0)
0000B09C 317C 2565 0002             		move.w	#$2565,obGfx(a0)
0000B0A2 117C 0004 0001             		move.b	#4,obRender(a0)
0000B0A8 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000B0AE 117C 0008 0014             		move.b	#8,obActWid(a0)
0000B0B4 317C FD00 0012             		move.w	#-$300,obVelY(a0) ; move object upwards
0000B0BA                            
0000B0BA                            Poi_Slower:	; Routine 2
0000B0BA 4A68 0012                  		tst.w	obVelY(a0)	; is object moving?
0000B0BE 6A00 0000                  		bpl.w	DeleteObject	; if not, delete
0000B0C2 6100 0000                  		bsr.w	SpeedToPos
0000B0C6 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; reduce object	speed
0000B0CC 4E75                       		rts	
0000B0CC 4E75                       		rts	
0000B0CE                            Map_Animal1:	include	"_maps\Animals 1.asm"
0000B0CE                            ; ---------------------------------------------------------------------------
0000B0CE                            ; Sprite mappings - animals
0000B0CE                            ; ---------------------------------------------------------------------------
0000B0CE                            Map_Animal1_internal:
0000B0CE 0000                       		dc.w byte_9472-Map_Animal1_internal
0000B0D0 0000                       		dc.w byte_9478-Map_Animal1_internal
0000B0D2 0000                       		dc.w byte_946C-Map_Animal1_internal
0000B0D4 01                         byte_946C:	dc.b 1
0000B0D5 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000B0DA 01                         byte_9472:	dc.b 1
0000B0DB F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
0000B0E0 01                         byte_9478:	dc.b 1
0000B0E1 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
0000B0E6                            		even
0000B0E6                            		even
0000B0E6                            Map_Animal2:	include	"_maps\Animals 2.asm"
0000B0E6                            ; ---------------------------------------------------------------------------
0000B0E6                            ; Sprite mappings - animals
0000B0E6                            ; ---------------------------------------------------------------------------
0000B0E6                            Map_Animal2_internal:
0000B0E6 0000                       		dc.w byte_948A-Map_Animal2_internal
0000B0E8 0000                       		dc.w byte_9490-Map_Animal2_internal
0000B0EA 0000                       		dc.w byte_9484-Map_Animal2_internal
0000B0EC 01                         byte_9484:	dc.b 1
0000B0ED F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000B0F2 01                         byte_948A:	dc.b 1
0000B0F3 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
0000B0F8 01                         byte_9490:	dc.b 1
0000B0F9 FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
0000B0FE                            		even
0000B0FE                            		even
0000B0FE                            Map_Animal3:	include	"_maps\Animals 3.asm"
0000B0FE                            ; ---------------------------------------------------------------------------
0000B0FE                            ; Sprite mappings - animals
0000B0FE                            ; ---------------------------------------------------------------------------
0000B0FE                            Map_Animal3_internal:
0000B0FE 0000                       		dc.w byte_94A2-Map_Animal3_internal
0000B100 0000                       		dc.w byte_94A8-Map_Animal3_internal
0000B102 0000                       		dc.w byte_949C-Map_Animal3_internal
0000B104 01                         byte_949C:	dc.b 1
0000B105 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000B10A 01                         byte_94A2:	dc.b 1
0000B10B FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
0000B110 01                         byte_94A8:	dc.b 1
0000B111 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
0000B116                            		even
0000B116                            		even
0000B116                            Map_Poi:	include	"_maps\Points.asm"
0000B116                            ; --------------------------------------------------------------------------------
0000B116                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000B116                            ; --------------------------------------------------------------------------------
0000B116                            
0000B116                            SME_qLvsg:	
0000B116 0000 0000                  		dc.w SME_qLvsg_E-SME_qLvsg, SME_qLvsg_14-SME_qLvsg	
0000B11A 0000 0000                  		dc.w SME_qLvsg_1A-SME_qLvsg, SME_qLvsg_20-SME_qLvsg	
0000B11E 0000 0000                  		dc.w SME_qLvsg_26-SME_qLvsg, SME_qLvsg_2C-SME_qLvsg	
0000B122 0000                       		dc.w SME_qLvsg_37-SME_qLvsg	
0000B124 01                         SME_qLvsg_E:	dc.b 1	
0000B125 FC04 0000 F8               		dc.b $FC, 4, 0, 0, $F8	
0000B12A 01                         SME_qLvsg_14:	dc.b 1	
0000B12B FC04 0002 F8               		dc.b $FC, 4, 0, 2, $F8	
0000B130 01                         SME_qLvsg_1A:	dc.b 1	
0000B131 FC04 0004 F8               		dc.b $FC, 4, 0, 4, $F8	
0000B136 01                         SME_qLvsg_20:	dc.b 1	
0000B137 FC04 0006 F8               		dc.b $FC, 4, 0, 6, $F8	
0000B13C 01                         SME_qLvsg_26:	dc.b 1	
0000B13D FC00 0006 FC               		dc.b $FC, 0, 0, 6, $FC	
0000B142 02                         SME_qLvsg_2C:	dc.b 2	
0000B143 FC08 0006 F4               		dc.b $FC, 8, 0, 6, $F4	
0000B148 FC04 0007 01               		dc.b $FC, 4, 0, 7, 1	
0000B14D 02                         SME_qLvsg_37:	dc.b 2	
0000B14E FC08 0006 F4               		dc.b $FC, 8, 0, 6, $F4	
0000B153 FC04 0007 06               		dc.b $FC, 4, 0, 7, 6	
0000B158                            		even
0000B158                            		even
0000B158                            
0000B158                            		include	"_incObj\1F Crabmeat.asm"
0000B158                            ; ---------------------------------------------------------------------------
0000B158                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
0000B158                            ; ---------------------------------------------------------------------------
0000B158                            
0000B158                            Crabmeat:
0000B158 7000                       		moveq	#0,d0
0000B15A 1028 0024                  		move.b	obRoutine(a0),d0
0000B15E 323B 0000                  		move.w	Crab_Index(pc,d0.w),d1
0000B162 4EFB 1000                  		jmp	Crab_Index(pc,d1.w)
0000B166                            ; ===========================================================================
0000B166                            Crab_Index:
0000B166 0000                       ptr_Crab_Main:		dc.w Crab_Main-Crab_Index
0000B168 0000                       ptr_Crab_Action:	dc.w Crab_Action-Crab_Index
0000B16A 0000                       ptr_Crab_Delete:	dc.w Crab_Delete-Crab_Index
0000B16C 0000                       ptr_Crab_BallMain:	dc.w Crab_BallMain-Crab_Index
0000B16E 0000                       ptr_Crab_BallMove:	dc.w Crab_BallMove-Crab_Index
0000B170                            
0000B170 =00000000                  id_Crab_Main:		equ ptr_Crab_Main-Crab_Index	; 0
0000B170 =00000002                  id_Crab_Action:		equ ptr_Crab_Action-Crab_Index	; 2
0000B170 =00000004                  id_Crab_Delete:		equ ptr_Crab_Delete-Crab_Index	; 4
0000B170 =00000006                  id_Crab_BallMain:	equ ptr_Crab_BallMain-Crab_Index	; 6
0000B170 =00000008                  id_Crab_BallMove:	equ ptr_Crab_BallMove-Crab_Index	; 8
0000B170                            
0000B170 =00000030                  crab_timedelay:	equ $30
0000B170 =00000032                  crab_mode:	equ $32
0000B170                            ; ===========================================================================
0000B170                            
0000B170                            Crab_Main:	; Routine 0
0000B170 117C 0010 0016             		move.b	#$10,obHeight(a0)
0000B176 117C 0008 0017             		move.b	#8,obWidth(a0)
0000B17C 217C 0000 0000 0004        		move.l	#Map_Crab,obMap(a0)
0000B184 317C 0400 0002             		move.w	#$400,obGfx(a0)
0000B18A 117C 0004 0001             		move.b	#4,obRender(a0)
0000B190 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B196 117C 0006 0020             		move.b	#6,obColType(a0)
0000B19C 117C 0015 0014             		move.b	#$15,obActWid(a0)
0000B1A2 6100 0000                  		bsr.w	ObjectFall
0000B1A6 4EB9 0000 0000             		jsr	(ObjFloorDist).l	; find floor
0000B1AC 4A41                       		tst.w	d1
0000B1AE 6A00                       		bpl.s	@floornotfound
0000B1B0 D368 000C                  		add.w	d1,obY(a0)
0000B1B4 1143 0026                  		move.b	d3,obAngle(a0)
0000B1B8 317C 0000 0012             		move.w	#0,obVelY(a0)
0000B1BE 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B1C2                            
0000B1C2                            	@floornotfound:
0000B1C2 4E75                       		rts	
0000B1C4                            ; ===========================================================================
0000B1C4                            
0000B1C4                            Crab_Action:	; Routine 2
0000B1C4 7000                       		moveq	#0,d0
0000B1C6 1028 0025                  		move.b	ob2ndRout(a0),d0
0000B1CA 323B 0000                  		move.w	@index(pc,d0.w),d1
0000B1CE 4EBB 1000                  		jsr	@index(pc,d1.w)
0000B1D2 43F9 0000 0000             		lea	(Ani_Crab).l,a1
0000B1D8 6100 0000                  		bsr.w	AnimateSprite
0000B1DC 6000 0000                  		bra.w	RememberState
0000B1E0                            ; ===========================================================================
0000B1E0 0000                       @index:		dc.w @waittofire-@index
0000B1E2 0000                       		dc.w @walkonfloor-@index
0000B1E4                            ; ===========================================================================
0000B1E4                            
0000B1E4                            @waittofire:
0000B1E4 5368 0030                  		subq.w	#1,crab_timedelay(a0) ; subtract 1 from time delay
0000B1E8 6A00                       		bpl.s	@dontmove
0000B1EA 4A28 0001                  		tst.b	obRender(a0)
0000B1EE 6A00                       		bpl.s	@movecrab
0000B1F0 0868 0001 0032             		bchg	#1,crab_mode(a0)
0000B1F6 6600                       		bne.s	@fire
0000B1F8                            
0000B1F8                            	@movecrab:
0000B1F8 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000B1FC 317C 007F 0030             		move.w	#127,crab_timedelay(a0) ; set time delay to approx 2 seconds
0000B202 317C 0080 0010             		move.w	#$80,obVelX(a0)	; move Crabmeat	to the right
0000B208 6100 0000                  		bsr.w	Crab_SetAni
0000B20C 5600                       		addq.b	#3,d0
0000B20E 1140 001C                  		move.b	d0,obAnim(a0)
0000B212 0868 0000 0022             		bchg	#0,obStatus(a0)
0000B218 6600                       		bne.s	@noflip
0000B21A 4468 0010                  		neg.w	obVelX(a0)	; change direction
0000B21E                            
0000B21E                            	@dontmove:
0000B21E                            	@noflip:
0000B21E 4E75                       		rts	
0000B220                            ; ===========================================================================
0000B220                            
0000B220                            @fire:
0000B220 317C 003B 0030             		move.w	#59,crab_timedelay(a0)
0000B226 117C 0006 001C             		move.b	#6,obAnim(a0)	; use firing animation
0000B22C 6100 0000                  		bsr.w	FindFreeObj
0000B230 6600                       		bne.s	@failleft
0000B232 12BC 0000                  		move.b	#id_Crabmeat,0(a1) ; load left fireball
0000B236 137C 0006 0024             		move.b	#id_Crab_BallMain,obRoutine(a1)
0000B23C 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000B242 0469 0010 0008             		subi.w	#$10,obX(a1)
0000B248 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000B24E 337C FF00 0010             		move.w	#-$100,obVelX(a1)
0000B254                            
0000B254                            	@failleft:
0000B254 6100 0000                  		bsr.w	FindFreeObj
0000B258 6600                       		bne.s	@failright
0000B25A 12BC 0000                  		move.b	#id_Crabmeat,0(a1) ; load right fireball
0000B25E 137C 0006 0024             		move.b	#id_Crab_BallMain,obRoutine(a1)
0000B264 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000B26A 0669 0010 0008             		addi.w	#$10,obX(a1)
0000B270 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000B276 337C 0100 0010             		move.w	#$100,obVelX(a1)
0000B27C                            
0000B27C                            	@failright:
0000B27C 4E75                       		rts	
0000B27E                            ; ===========================================================================
0000B27E                            
0000B27E                            @walkonfloor:
0000B27E 5368 0030                  		subq.w	#1,crab_timedelay(a0)
0000B282 6B00                       		bmi.s	loc_966E
0000B284 6100 0000                  		bsr.w	SpeedToPos
0000B288 0868 0000 0032             		bchg	#0,crab_mode(a0)
0000B28E 6600                       		bne.s	loc_9654
0000B290 3628 0008                  		move.w	obX(a0),d3
0000B294 0643 0010                  		addi.w	#$10,d3
0000B298 0828 0000 0022             		btst	#0,obStatus(a0)
0000B29E 6700                       		beq.s	loc_9640
0000B2A0 0443 0020                  		subi.w	#$20,d3
0000B2A4                            
0000B2A4                            loc_9640:
0000B2A4 4EB9 0000 0000             		jsr	(ObjFloorDist2).l
0000B2AA 0C41 FFF8                  		cmpi.w	#-8,d1
0000B2AE 6D00                       		blt.s	loc_966E
0000B2B0 0C41 000C                  		cmpi.w	#$C,d1
0000B2B4 6C00                       		bge.s	loc_966E
0000B2B6 4E75                       		rts	
0000B2B8                            ; ===========================================================================
0000B2B8                            
0000B2B8                            loc_9654:
0000B2B8 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000B2BE D368 000C                  		add.w	d1,obY(a0)
0000B2C2 1143 0026                  		move.b	d3,obAngle(a0)
0000B2C6 6100 0000                  		bsr.w	Crab_SetAni
0000B2CA 5600                       		addq.b	#3,d0
0000B2CC 1140 001C                  		move.b	d0,obAnim(a0)
0000B2D0 4E75                       		rts	
0000B2D2                            ; ===========================================================================
0000B2D2                            
0000B2D2                            loc_966E:
0000B2D2 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000B2D6 317C 003B 0030             		move.w	#59,crab_timedelay(a0)
0000B2DC 317C 0000 0010             		move.w	#0,obVelX(a0)
0000B2E2 6100 0000                  		bsr.w	Crab_SetAni
0000B2E6 1140 001C                  		move.b	d0,obAnim(a0)
0000B2EA 4E75                       		rts	
0000B2EC                            ; ---------------------------------------------------------------------------
0000B2EC                            ; Subroutine to	set the	correct	animation for a	Crabmeat
0000B2EC                            ; ---------------------------------------------------------------------------
0000B2EC                            
0000B2EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B2EC                            
0000B2EC                            
0000B2EC                            Crab_SetAni:
0000B2EC 7000                       		moveq	#0,d0
0000B2EE 1628 0026                  		move.b	obAngle(a0),d3
0000B2F2 6B00                       		bmi.s	loc_96A4
0000B2F4 0C03 0006                  		cmpi.b	#6,d3
0000B2F8 6500                       		bcs.s	locret_96A2
0000B2FA 7001                       		moveq	#1,d0
0000B2FC 0828 0000 0022             		btst	#0,obStatus(a0)
0000B302 6600                       		bne.s	locret_96A2
0000B304 7002                       		moveq	#2,d0
0000B306                            
0000B306                            locret_96A2:
0000B306 4E75                       		rts	
0000B308                            ; ===========================================================================
0000B308                            
0000B308                            loc_96A4:
0000B308 0C03 00FA                  		cmpi.b	#-6,d3
0000B30C 6200                       		bhi.s	locret_96B6
0000B30E 7002                       		moveq	#2,d0
0000B310 0828 0000 0022             		btst	#0,obStatus(a0)
0000B316 6600                       		bne.s	locret_96B6
0000B318 7001                       		moveq	#1,d0
0000B31A                            
0000B31A                            locret_96B6:
0000B31A 4E75                       		rts	
0000B31C                            ; End of function Crab_SetAni
0000B31C                            
0000B31C                            ; ===========================================================================
0000B31C                            
0000B31C                            Crab_Delete:	; Routine 4
0000B31C 6100 0000                  		bsr.w	DeleteObject
0000B320 4E75                       		rts	
0000B322                            ; ===========================================================================
0000B322                            ; ---------------------------------------------------------------------------
0000B322                            ; Sub-object - missile that the	Crabmeat throws
0000B322                            ; ---------------------------------------------------------------------------
0000B322                            
0000B322                            Crab_BallMain:	; Routine 6
0000B322 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B326 217C 0000 0000 0004        		move.l	#Map_Crab,obMap(a0)
0000B32E 317C 0400 0002             		move.w	#$400,obGfx(a0)
0000B334 117C 0004 0001             		move.b	#4,obRender(a0)
0000B33A 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B340 117C 0087 0020             		move.b	#$87,obColType(a0)
0000B346 117C 0008 0014             		move.b	#8,obActWid(a0)
0000B34C 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000B352 117C 0007 001C             		move.b	#7,obAnim(a0)
0000B358                            
0000B358                            Crab_BallMove:	; Routine 8
0000B358 43F9 0000 0000             		lea	(Ani_Crab).l,a1
0000B35E 6100 0000                  		bsr.w	AnimateSprite
0000B362 6100 0000                  		bsr.w	ObjectFall
0000B366 6100 0000                  		bsr.w	DisplaySprite
0000B36A 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000B36E 0640 00E0                  		addi.w	#$E0,d0
0000B372 B068 000C                  		cmp.w	obY(a0),d0	; has object moved below the level boundary?
0000B376 6500                       		bcs.s	@delete		; if yes, branch
0000B378 4E75                       		rts	
0000B37A                            
0000B37A                            	@delete:
0000B37A 6000 0000                  		bra.w	DeleteObject
0000B37A 6000 0000                  		bra.w	DeleteObject
0000B37E                            		include	"_anim\Crabmeat.asm"
0000B37E                            ; ---------------------------------------------------------------------------
0000B37E                            ; Animation script - Crabmeat enemy
0000B37E                            ; ---------------------------------------------------------------------------
0000B37E 0000 0000 0000             Ani_Crab:	dc.w @stand-Ani_Crab, @standslope-Ani_Crab, @standsloperev-Ani_Crab
0000B384 0000 0000 0000             		dc.w @walk-Ani_Crab, @walkslope-Ani_Crab, @walksloperev-Ani_Crab
0000B38A 0000 0000                  		dc.w @firing-Ani_Crab, @ball-Ani_Crab
0000B38E 0F00 FF                    @stand:		dc.b $F, 0, afEnd
0000B392 00                         		even
0000B392 0F02 FF                    @standslope:	dc.b $F, 2, afEnd
0000B396 00                         		even
0000B396 0F22 FF                    @standsloperev:	dc.b $F, $22, afEnd
0000B39A 00                         		even
0000B39A 0F01 2100 FF               @walk:		dc.b $F, 1, $21, 0, afEnd
0000B3A0 00                         		even
0000B3A0 0F21 0302 FF               @walkslope:	dc.b $F, $21, 3, 2, afEnd
0000B3A6 00                         		even
0000B3A6 0F01 2322 FF               @walksloperev:	dc.b $F, 1, $23, $22, afEnd
0000B3AC 00                         		even
0000B3AC 0F04 FF                    @firing:	dc.b $F, 4, afEnd
0000B3B0 00                         		even
0000B3B0 0105 06FF                  @ball:		dc.b 1,	5, 6, afEnd
0000B3B4                            		even
0000B3B4                            		even
0000B3B4                            Map_Crab:	include	"_maps\Crabmeat.asm"
0000B3B4                            ; ---------------------------------------------------------------------------
0000B3B4                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000B3B4                            ; ---------------------------------------------------------------------------
0000B3B4                            Map_Crab_internal:
0000B3B4 0000                       		dc.w @stand-Map_Crab_internal
0000B3B6 0000                       		dc.w @walk-Map_Crab_internal
0000B3B8 0000                       		dc.w @slope1-Map_Crab_internal
0000B3BA 0000                       		dc.w @slope2-Map_Crab_internal
0000B3BC 0000                       		dc.w @firing-Map_Crab_internal
0000B3BE 0000                       		dc.w @ball1-Map_Crab_internal
0000B3C0 0000                       		dc.w @ball2-Map_Crab_internal
0000B3C2 04                         @stand:		dc.b 4
0000B3C3 F009 0000 E8               		dc.b $F0, 9, 0,	0, $E8	; standing/middle walking frame
0000B3C8 F009 0800 00               		dc.b $F0, 9, 8,	0, 0
0000B3CD 0005 0006 F0               		dc.b 0,	5, 0, 6, $F0
0000B3D2 0005 0806 00               		dc.b 0,	5, 8, 6, 0
0000B3D7 04                         @walk:		dc.b 4
0000B3D8 F009 000A E8               		dc.b $F0, 9, 0,	$A, $E8	; walking
0000B3DD F009 0010 00               		dc.b $F0, 9, 0,	$10, 0
0000B3E2 0005 0016 F0               		dc.b 0,	5, 0, $16, $F0
0000B3E7 0009 001A 00               		dc.b 0,	9, 0, $1A, 0
0000B3EC 04                         @slope1:	dc.b 4
0000B3ED EC09 0000 E8               		dc.b $EC, 9, 0,	0, $E8	; walking on slope
0000B3F2 EC09 0800 00               		dc.b $EC, 9, 8,	0, 0
0000B3F7 FC05 0806 00               		dc.b $FC, 5, 8,	6, 0
0000B3FC FC06 0020 F0               		dc.b $FC, 6, 0,	$20, $F0
0000B401 04                         @slope2:	dc.b 4
0000B402 EC09 000A E8               		dc.b $EC, 9, 0,	$A, $E8	; walking on slope
0000B407 EC09 0010 00               		dc.b $EC, 9, 0,	$10, 0
0000B40C FC09 0026 00               		dc.b $FC, 9, 0,	$26, 0
0000B411 FC06 002C F0               		dc.b $FC, 6, 0,	$2C, $F0
0000B416 06                         @firing:	dc.b 6
0000B417 F004 0032 F0               		dc.b $F0, 4, 0,	$32, $F0 ; firing projectiles
0000B41C F004 0832 00               		dc.b $F0, 4, 8,	$32, 0
0000B421 F809 0034 E8               		dc.b $F8, 9, 0,	$34, $E8
0000B426 F809 0834 00               		dc.b $F8, 9, 8,	$34, 0
0000B42B 0804 003A F0               		dc.b 8,	4, 0, $3A, $F0
0000B430 0804 083A 00               		dc.b 8,	4, 8, $3A, 0
0000B435 01                         @ball1:		dc.b 1
0000B436 F805 003C F8               		dc.b $F8, 5, 0,	$3C, $F8 ; projectile
0000B43B 01                         @ball2:		dc.b 1
0000B43C F805 0040 F8               		dc.b $F8, 5, 0,	$40, $F8 ; projectile
0000B442 00                         		even
0000B442 00                         		even
0000B442                            		include	"_incObj\06 Mozzietron.asm"
0000B442                            ; ===========================================================================
0000B442                            ; ---------------------------------------------------------------------------
0000B442                            ; Object 06 - Mozzietron enemy	(GHZ)
0000B442                            ; ---------------------------------------------------------------------------
0000B442                            
0000B442                            Mozzietron:					; XREF: Obj_Index
0000B442 7000                       		moveq	#0,d0
0000B444 1028 0024                  		move.b	$24(a0),d0
0000B448 323B 0000                  		move.w	MozIndex(pc,d0.w),d1
0000B44C 4EFB 1000                  		jmp	MozIndex(pc,d1.w)
0000B450                            ; ===========================================================================
0000B450 0000                       MozIndex:	dc.w MozMain-MozIndex
0000B452 0000                       		dc.w MozAction-MozIndex
0000B454 0000                       		dc.w MozDelete-MozIndex
0000B456                            ; ===========================================================================
0000B456                            
0000B456                            MozMain:				; XREF: MozIndex
0000B456 5428 0024                  		addq.b	#2,$24(a0)
0000B45A 217C 0000 0000 0004        		move.l	#Map_Mozzietron,4(a0)
0000B462 317C 0444 0002             		move.w	#$444,2(a0)
0000B468 117C 0004 0001             		move.b	#4,1(a0)
0000B46E 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B474 117C 0005 0020             		move.b	#5,$20(a0) ; hit box
0000B47A 117C 0018 0014             		move.b	#$18,obActWid(a0)
0000B480                            MozAction:				; XREF: MozIndex
0000B480 7000                       		moveq	#0,d0
0000B482 1028 0025                  		move.b	$25(a0),d0
0000B486 323B 0000                  		move.w	MozIndex2(pc,d0.w),d1
0000B48A 4EBB 1000                  		jsr	MozIndex2(pc,d1.w)
0000B48E 43F9 0000 0000             		lea	(Ani_Mozzietron).l,a1
0000B494 6100 0000                  		bsr.w	AnimateSprite
0000B498 6000 0000                  		bra.w	RememberState
0000B49C                            ; ===========================================================================
0000B49C 0000                       MozIndex2:	dc.w MozMove-MozIndex2
0000B49E 0000                       		dc.w MozChkNrSonic-MozIndex2
0000B4A0 0000                       		dc.w MozPinned-MozIndex2
0000B4A2                            ; ===========================================================================
0000B4A2                            
0000B4A2                            MozMove:				; XREF: MozIndex2
0000B4A2 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000B4A6 6A00                       		bpl.s	locret_986C	; if time remains, branch
0000B4A8 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
0000B4AE 6600                       		bne.s	MozFire	; if yes, branch
0000B4B0 5428 0025                  		addq.b	#2,$25(a0)
0000B4B4 317C 0064 0032             		move.w	#100,$32(a0)	; set time delay to just over 2	seconds
0000B4BA 317C 0100 0010             		move.w	#$100,$10(a0)	; move Buzz Bomber to the right
0000B4C0 117C 0000 001C             		move.b	#0,$1C(a0)	; use "flying" animation
0000B4C6 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000B4CC 6600                       		bne.s	locret_986C	; if not, branch
0000B4CE 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
0000B4D2                            
0000B4D2                            locret_986C:
0000B4D2 4E75                       		rts	
0000B4D4                            ; ===========================================================================
0000B4D4                            
0000B4D4                            MozFire:				; XREF: MozMove
0000B4D4 117C 0002 001C             		move.b	#2,$1C(a0)	; use "diving" animation
0000B4DA 6100 0000                  		bsr.w	ObjectFall
0000B4DE 4EB9 0000 0000             		jsr     ObjFloorDist ; check distance between object and floor
0000B4E4 4A41                       		tst.w	d1 ; is floor distance positive? 
0000B4E6 6A00                       		bpl.s   @return ; if yes, branch 
0000B4E8 303C 00B6                  		move.w    #$B6,d0
0000B4EC 4EB9 0000 1250             		jsr    (PlaySound_Special).l ;    play "spikes moving" sound
0000B4F2 117C 0004 0025             		move.b #4,$25(a0) ; set 2nd state to pinned
0000B4F8 D368 000C                  		add.w	d1,$C(a0) ; snap to the ground
0000B4FC 4268 0012                  		clr.w	$12(a0) ; clear Y Velocity 
0000B500 4228 0015                  		clr.b	$15(a0) ; $15(a0) is unused in this object, except this line
0000B504                            		@return:
0000B504 4E75                       	    		rts
0000B506                            		
0000B506                            
0000B506                            ; ===========================================================================
0000B506                            
0000B506                            MozPinned:
0000B506 4E75                               rts
0000B508                                    
0000B508                            ; ===========================================================================
0000B508                            
0000B508                            MozChkDel:				; XREF: Obj55_DropFly
0000B508 4A28 0001                  		tst.b	1(a0)
0000B50C 6A00 0000                  		bpl.w	DeleteObject
0000B510 4E75                       		rts	
0000B512                            ; ===========================================================================
0000B512                            
0000B512                            MozChkNrSonic:			; XREF: MozIndex2
0000B512                            ;		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000B512 6B00                       		bmi.s	MozChgDir
0000B514 6100 0000                  		bsr.w	SpeedToPos
0000B518 4A28 0034                  		tst.b	$34(a0)
0000B51C 6600                       		bne.s	locret_992A
0000B51E 3038 D008                  		move.w	($FFFFD008).w,d0
0000B522 9068 0008                  		sub.w	8(a0),d0
0000B526 6A00                       		bpl.s	MozSetNrSonic
0000B528 4440                       		neg.w	d0
0000B52A                            
0000B52A                            MozSetNrSonic:
0000B52A 0C40 0005                  		cmpi.w	#$05,d0		; is Buzz Bomber within	$05 pixels of Sonic?
0000B52E 6400                       		bcc.s	locret_992A	; if not, branch
0000B530 4A28 0001                  		tst.b	1(a0)
0000B534 6A00                       		bpl.s	locret_992A
0000B536 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
0000B53C 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
0000B542 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
0000B548 6000                       		bra.s	MozStop
0000B54A                            ; ===========================================================================
0000B54A                            
0000B54A                            MozChgDir:				; XREF: MozChkNrSonic
0000B54A 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
0000B550 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
0000B556 317C 003B 0032             		move.w	#59,$32(a0)
0000B55C                            
0000B55C                            MozStop:				; XREF: MozSetNrSonic
0000B55C 5528 0025                  		subq.b	#2,$25(a0)	; run "MozFire" routine
0000B560 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
0000B566 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
0000B56C                            
0000B56C                            locret_992A:
0000B56C 4E75                       		rts	
0000B56E                            ; ===========================================================================
0000B56E                            
0000B56E                            MozDelete:				; XREF: MozIndex
0000B56E 6100 0000                  		bsr.w	DeleteObject
0000B572 4E75                       		rts	
0000B572 4E75                       		rts	
0000B574                            		include	"_incObj\22 Buzz Bomber.asm"
0000B574                            ; ===========================================================================
0000B574                            ; ---------------------------------------------------------------------------
0000B574                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
0000B574                            ; ---------------------------------------------------------------------------
0000B574                            
0000B574                            BuzzBomber:
0000B574 7000                       		moveq	#0,d0
0000B576 1028 0024                  		move.b	obRoutine(a0),d0
0000B57A 323B 0000                  		move.w	Buzz_Index(pc,d0.w),d1
0000B57E 4EFB 1000                  		jmp	Buzz_Index(pc,d1.w)
0000B582                            ; ===========================================================================
0000B582 0000                       Buzz_Index:	dc.w Buzz_Main-Buzz_Index
0000B584 0000                       		dc.w Buzz_Action-Buzz_Index
0000B586 0000                       		dc.w Buzz_Delete-Buzz_Index
0000B588                            
0000B588 =00000032                  buzz_timedelay:	equ $32
0000B588 =00000034                  buzz_buzzstatus:	equ $34
0000B588 =0000003C                  buzz_parent:	equ $3C
0000B588                            ; ===========================================================================
0000B588                            
0000B588                            Buzz_Main:	; Routine 0
0000B588 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B58C 217C 0000 0000 0004        		move.l	#Map_Buzz,obMap(a0)
0000B594 317C 0444 0002             		move.w	#$444,obGfx(a0)
0000B59A 117C 0004 0001             		move.b	#4,obRender(a0)
0000B5A0 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B5A6 117C 0008 0020             		move.b	#8,obColType(a0)
0000B5AC 117C 0018 0014             		move.b	#$18,obActWid(a0)
0000B5B2                            
0000B5B2                            Buzz_Action:	; Routine 2
0000B5B2 7000                       		moveq	#0,d0
0000B5B4 1028 0025                  		move.b	ob2ndRout(a0),d0
0000B5B8 323B 0000                  		move.w	@index(pc,d0.w),d1
0000B5BC 4EBB 1000                  		jsr	@index(pc,d1.w)
0000B5C0 43F9 0000 0000             		lea	(Ani_Buzz).l,a1
0000B5C6 6100 0000                  		bsr.w	AnimateSprite
0000B5CA 6000 0000                  		bra.w	RememberState
0000B5CE                            ; ===========================================================================
0000B5CE 0000                       @index:		dc.w @move-@index
0000B5D0 0000                       		dc.w @chknearsonic-@index
0000B5D2                            ; ===========================================================================
0000B5D2                            
0000B5D2                            @move:
0000B5D2 5368 0032                  		subq.w	#1,buzz_timedelay(a0) ; subtract 1 from time delay
0000B5D6 6A00                       		bpl.s	@noflip		; if time remains, branch
0000B5D8 0828 0001 0034             		btst	#1,buzz_buzzstatus(a0) ; is Buzz Bomber near Sonic?
0000B5DE 6600                       		bne.s	@fire		; if yes, branch
0000B5E0 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000B5E4 317C 007F 0032             		move.w	#127,buzz_timedelay(a0) ; set time delay to just over 2 seconds
0000B5EA 317C 0400 0010             		move.w	#$400,obVelX(a0) ; move Buzz Bomber to the right
0000B5F0 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "flying" animation
0000B5F6 0828 0000 0022             		btst	#0,obStatus(a0)	; is Buzz Bomber facing	left?
0000B5FC 6600                       		bne.s	@noflip		; if not, branch
0000B5FE 4468 0010                  		neg.w	obVelX(a0)	; move Buzz Bomber to the left
0000B602                            
0000B602                            	@noflip:
0000B602 4E75                       		rts	
0000B604                            ; ===========================================================================
0000B604                            
0000B604                            	@fire:
0000B604 6100 0000                  		bsr.w	FindFreeObj
0000B608 6600                       		bne.s	@fail
0000B60A 12BC 0000                  		move.b	#id_Missile,0(a1) ; load missile object
0000B60E 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000B614 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000B61A 0669 001C 000C             		addi.w	#$1C,obY(a1)
0000B620 337C 0200 0012             		move.w	#$200,obVelY(a1) ; move missile downwards
0000B626 337C 0200 0010             		move.w	#$200,obVelX(a1) ; move missile to the right
0000B62C 303C 0018                  		move.w	#$18,d0
0000B630 0828 0000 0022             		btst	#0,obStatus(a0)	; is Buzz Bomber facing	left?
0000B636 6600                       		bne.s	@noflip2	; if not, branch
0000B638 4440                       		neg.w	d0
0000B63A 4469 0010                  		neg.w	obVelX(a1)	; move missile to the left
0000B63E                            
0000B63E                            	@noflip2:
0000B63E D169 0008                  		add.w	d0,obX(a1)
0000B642 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
0000B648 337C 000E 0032             		move.w	#$E,buzz_timedelay(a1)
0000B64E 2348 003C                  		move.l	a0,buzz_parent(a1)
0000B652 117C 0001 0034             		move.b	#1,buzz_buzzstatus(a0) ; set to "already fired" to prevent refiring
0000B658 317C 003B 0032             		move.w	#59,buzz_timedelay(a0)
0000B65E 117C 0002 001C             		move.b	#2,obAnim(a0)	; use "firing" animation
0000B664                            
0000B664                            	@fail:
0000B664 4E75                       		rts	
0000B666                            ; ===========================================================================
0000B666                            
0000B666                            @chknearsonic:
0000B666 5368 0032                  		subq.w	#1,buzz_timedelay(a0) ; subtract 1 from time delay
0000B66A 6B00                       		bmi.s	@chgdirection
0000B66C 6100 0000                  		bsr.w	SpeedToPos
0000B670 4A28 0034                  		tst.b	buzz_buzzstatus(a0)
0000B674 6600                       		bne.s	@keepgoing
0000B676 3038 D008                  		move.w	(v_player+obX).w,d0
0000B67A 9068 0008                  		sub.w	obX(a0),d0
0000B67E 6A00                       		bpl.s	@isleft
0000B680 4440                       		neg.w	d0
0000B682                            
0000B682                            	@isleft:
0000B682 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
0000B686 6400                       		bcc.s	@keepgoing	; if not, branch
0000B688 4A28 0001                  		tst.b	obRender(a0)
0000B68C 6A00                       		bpl.s	@keepgoing
0000B68E 117C 0002 0034             		move.b	#2,buzz_buzzstatus(a0) ; set Buzz Bomber to "near Sonic"
0000B694 317C 001D 0032             		move.w	#29,buzz_timedelay(a0) ; set time delay to half a second
0000B69A 6000                       		bra.s	@stop
0000B69C                            ; ===========================================================================
0000B69C                            
0000B69C                            	@chgdirection:
0000B69C 117C 0000 0034             		move.b	#0,buzz_buzzstatus(a0) ; set Buzz Bomber to "normal"
0000B6A2 0868 0000 0022             		bchg	#0,obStatus(a0)	; change direction
0000B6A8 317C 003B 0032             		move.w	#59,buzz_timedelay(a0)
0000B6AE                            
0000B6AE                            	@stop:
0000B6AE 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000B6B2 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop Buzz Bomber moving
0000B6B8 117C 0000 001C             		move.b	#0,obAnim(a0)	; use "hovering" animation
0000B6BE                            
0000B6BE                            @keepgoing:
0000B6BE 4E75                       		rts	
0000B6C0                            ; ===========================================================================
0000B6C0                            
0000B6C0                            Buzz_Delete:	; Routine 4
0000B6C0 6100 0000                  		bsr.w	DeleteObject
0000B6C4 4E75                       		rts	
0000B6C4 4E75                       		rts	
0000B6C6                            		include	"_incObj\23 Buzz Bomber Missile.asm"
0000B6C6                            ; ---------------------------------------------------------------------------
0000B6C6                            ; Object 23 - missile that Buzz	Bomber throws
0000B6C6                            ; ---------------------------------------------------------------------------
0000B6C6                            
0000B6C6                            Missile:
0000B6C6 7000                       		moveq	#0,d0
0000B6C8 1028 0024                  		move.b	obRoutine(a0),d0
0000B6CC 323B 0000                  		move.w	Msl_Index(pc,d0.w),d1
0000B6D0 4EFB 1000                  		jmp	Msl_Index(pc,d1.w)
0000B6D4                            ; ===========================================================================
0000B6D4 0000                       Msl_Index:	dc.w Msl_Main-Msl_Index
0000B6D6 0000                       		dc.w Msl_Animate-Msl_Index
0000B6D8 0000                       		dc.w Msl_FromBuzz-Msl_Index
0000B6DA 0000                       		dc.w Msl_Delete-Msl_Index
0000B6DC 0000                       		dc.w Msl_FromNewt-Msl_Index
0000B6DE                            
0000B6DE =0000003C                  msl_parent:	equ $3C
0000B6DE                            ; ===========================================================================
0000B6DE                            
0000B6DE                            Msl_Main:	; Routine 0
0000B6DE 5368 0032                  		subq.w	#1,$32(a0)
0000B6E2 6A00                       		bpl.s	Msl_ChkCancel
0000B6E4 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B6E8 217C 0000 0000 0004        		move.l	#Map_Missile,obMap(a0)
0000B6F0 317C 2444 0002             		move.w	#$2444,obGfx(a0)
0000B6F6 117C 0004 0001             		move.b	#4,obRender(a0)
0000B6FC 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B702 117C 0008 0014             		move.b	#8,obActWid(a0)
0000B708 0228 0003 0022             		andi.b	#3,obStatus(a0)
0000B70E 4A28 0028                  		tst.b	obSubtype(a0)	; was object created by	a Newtron?
0000B712 6700                       		beq.s	Msl_Animate	; if not, branch
0000B714                            
0000B714 117C 0008 0024             		move.b	#8,obRoutine(a0) ; run "Msl_FromNewt" routine
0000B71A 117C 0087 0020             		move.b	#$87,obColType(a0)
0000B720 117C 0001 001C             		move.b	#1,obAnim(a0)
0000B726 6000                       		bra.s	Msl_Animate2
0000B728                            ; ===========================================================================
0000B728                            
0000B728                            Msl_Animate:	; Routine 2
0000B728 6100                       		bsr.s	Msl_ChkCancel
0000B72A 43F9 0000 0000             		lea	(Ani_Missile).l,a1
0000B730 6100 0000                  		bsr.w	AnimateSprite
0000B734 6000 0000                  		bra.w	DisplaySprite
0000B738                            
0000B738                            ; ---------------------------------------------------------------------------
0000B738                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000B738                            ; destroyed, and if it has, then cancel	the missile
0000B738                            ; ---------------------------------------------------------------------------
0000B738                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B738                            
0000B738                            
0000B738                            Msl_ChkCancel:
0000B738 2268 003C                  		movea.l	msl_parent(a0),a1
0000B73C 0C11 0000                  		cmpi.b	#id_ExplosionItem,0(a1) ; has Buzz Bomber been destroyed?
0000B740 6700                       		beq.s	Msl_Delete	; if yes, branch
0000B742 4E75                       		rts	
0000B744                            ; End of function Msl_ChkCancel
0000B744                            
0000B744                            ; ===========================================================================
0000B744                            
0000B744                            Msl_FromBuzz:	; Routine 4
0000B744 0828 0007 0022             		btst	#7,obStatus(a0)
0000B74A 6600                       		bne.s	@explode
0000B74C 117C 0087 0020             		move.b	#$87,obColType(a0)
0000B752 117C 0001 001C             		move.b	#1,obAnim(a0)
0000B758 6100 0000                  		bsr.w	SpeedToPos
0000B75C 43F9 0000 0000             		lea	(Ani_Missile).l,a1
0000B762 6100 0000                  		bsr.w	AnimateSprite
0000B766 6100 0000                  		bsr.w	DisplaySprite
0000B76A 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000B76E 0640 00E0                  		addi.w	#$E0,d0
0000B772 B068 000C                  		cmp.w	obY(a0),d0	; has object moved below the level boundary?
0000B776 6500                       		bcs.s	Msl_Delete	; if yes, branch
0000B778 4E75                       		rts	
0000B77A                            ; ===========================================================================
0000B77A                            
0000B77A                            	@explode:
0000B77A 10BC 0000                  		move.b	#id_MissileDissolve,0(a0) ; change object to an explosion (Obj24)
0000B77E 117C 0000 0024             		move.b	#0,obRoutine(a0)
0000B784 6000 F1D8                  		bra.w	MissileDissolve
0000B788                            ; ===========================================================================
0000B788                            
0000B788                            Msl_Delete:	; Routine 6
0000B788 6100 0000                  		bsr.w	DeleteObject
0000B78C 4E75                       		rts	
0000B78E                            ; ===========================================================================
0000B78E                            
0000B78E                            Msl_FromNewt:	; Routine 8
0000B78E 4A28 0001                  		tst.b	obRender(a0)
0000B792 6AF4                       		bpl.s	Msl_Delete
0000B794 6100 0000                  		bsr.w	SpeedToPos
0000B798                            
0000B798                            Msl_Animate2:
0000B798 43F9 0000 0000             		lea	(Ani_Missile).l,a1
0000B79E 6100 0000                  		bsr.w	AnimateSprite
0000B7A2 6100 0000                  		bsr.w	DisplaySprite
0000B7A6 4E75                       		rts	
0000B7A6 4E75                       		rts	
0000B7A8                            		include	"_anim\Mozzietron.asm"
0000B7A8                            ; ---------------------------------------------------------------------------
0000B7A8                            ; Animation script - Buzz Bomber enemy
0000B7A8                            ; ---------------------------------------------------------------------------
0000B7A8 0000                       Ani_Mozzietron:	dc.w byte_9A1E-Ani_Mozzietron;0
0000B7AA 0000                       		dc.w byte_9A22-Ani_Mozzietron;1
0000B7AC 0000                       		dc.w byte_9A26-Ani_Mozzietron;2
0000B7AE 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000B7B2 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000B7B6 0502 0304 05FE 01          byte_9A26:	dc.b 5, 2, 3, 4, 5, $FE, 1
0000B7BE 00                         		even
0000B7BE 00                         		even
0000B7BE                            		include	"_anim\Buzz Bomber.asm"
0000B7BE                            ; ---------------------------------------------------------------------------
0000B7BE                            ; Animation script - Buzz Bomber enemy
0000B7BE                            ; ---------------------------------------------------------------------------
0000B7BE 0000                       Ani_Buzz:	dc.w @fly1-Ani_Buzz
0000B7C0 0000                       		dc.w @fly2-Ani_Buzz
0000B7C2 0000                       		dc.w @fires-Ani_Buzz
0000B7C4 0100 01FF                  @fly1:		dc.b 1,	0, 1, afEnd
0000B7C8 0102 03FF                  @fly2:		dc.b 1,	2, 3, afEnd
0000B7CC 0104 05FF                  @fires:		dc.b 1,	4, 5, afEnd
0000B7D0                            		even
0000B7D0                            		even
0000B7D0                            		include	"_anim\Buzz Bomber Missile.asm"
0000B7D0                            ; ---------------------------------------------------------------------------
0000B7D0                            ; Animation script - missile that Buzz Bomber throws
0000B7D0                            ; ---------------------------------------------------------------------------
0000B7D0 0000                       Ani_Missile:	dc.w @flare-Ani_Missile
0000B7D2 0000                       		dc.w @missile-Ani_Missile
0000B7D4 0700 01FC                  @flare:		dc.b 7,	0, 1, afRoutine
0000B7D8 0102 03FF                  @missile:	dc.b 1,	2, 3, afEnd
0000B7DC                            		even
0000B7DC                            		even
0000B7DC                            Map_Mozzietron:	include	"_maps\Mozzietron.asm"
0000B7DC                            ; --------------------------------------------------------------------------------
0000B7DC                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000B7DC                            ; --------------------------------------------------------------------------------
0000B7DC                            
0000B7DC                            SME_qvHIs:	
0000B7DC 0000 0000                  		dc.w SME_qvHIs_C-SME_qvHIs, SME_qvHIs_17-SME_qvHIs	
0000B7E0 0000 0000                  		dc.w SME_qvHIs_1D-SME_qvHIs, SME_qvHIs_28-SME_qvHIs	
0000B7E4 0000 0000                  		dc.w SME_qvHIs_38-SME_qvHIs, SME_qvHIs_4D-SME_qvHIs	
0000B7E8 02                         SME_qvHIs_C:	dc.b 2	
0000B7E9 FD0C 2000 F0               		dc.b $FD, $C, $20, 0, $F0	
0000B7EE ED09 2004 F8               		dc.b $ED, 9, $20, 4, $F8	
0000B7F3 01                         SME_qvHIs_17:	dc.b 1	
0000B7F4 F80D 200A F0               		dc.b $F8, $D, $20, $A, $F0	
0000B7F9 02                         SME_qvHIs_1D:	dc.b 2	
0000B7FA E90A 2012 F8               		dc.b $E9, $A, $20, $12, $F8	
0000B7FF F901 201B F0               		dc.b $F9, 1, $20, $1B, $F0	
0000B804 03                         SME_qvHIs_28:	dc.b 3	
0000B805 DF07 2025 FB               		dc.b $DF, 7, $20, $25, $FB	
0000B80A E700 2030 0B               		dc.b $E7, 0, $20, $30, $B	
0000B80F FF00 002D FB               		dc.b $FF, 0, 0, $2D, $FB	
0000B814 04                         SME_qvHIs_38:	dc.b 4	
0000B815 E509 201D F4               		dc.b $E5, 9, $20, $1D, $F4	
0000B81A F501 2023 FC               		dc.b $F5, 1, $20, $23, $FC	
0000B81F F500 202E F4               		dc.b $F5, 0, $20, $2E, $F4	
0000B824 F500 202F 04               		dc.b $F5, 0, $20, $2F, 4	
0000B829 04                         SME_qvHIs_4D:	dc.b 4	
0000B82A E509 201D F4               		dc.b $E5, 9, $20, $1D, $F4	
0000B82F F501 2023 FC               		dc.b $F5, 1, $20, $23, $FC	
0000B834 F500 202E F4               		dc.b $F5, 0, $20, $2E, $F4	
0000B839 F500 202F 04               		dc.b $F5, 0, $20, $2F, 4	
0000B83E                            		even
0000B83E                            		even
0000B83E                            Map_Buzz:	include	"_maps\Buzz Bomber.asm"
0000B83E                            ; --------------------------------------------------------------------------------
0000B83E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000B83E                            ; --------------------------------------------------------------------------------
0000B83E                            
0000B83E                            SME_yccqJ:	
0000B83E 0000 0000                  		dc.w SME_yccqJ_C-SME_yccqJ, SME_yccqJ_2B-SME_yccqJ	
0000B842 0000 0000                  		dc.w SME_yccqJ_4A-SME_yccqJ, SME_yccqJ_69-SME_yccqJ	
0000B846 0000 0000                  		dc.w SME_yccqJ_88-SME_yccqJ, SME_yccqJ_AC-SME_yccqJ	
0000B84A 06                         SME_yccqJ_C:	dc.b 6	
0000B84B F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B850 F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B855 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B85A 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B85F EE08 201A E9               		dc.b $EE, 8, $20, $1A, $E9	
0000B864 EE04 201D 01               		dc.b $EE, 4, $20, $1D, 1	
0000B869 06                         SME_yccqJ_2B:	dc.b 6	
0000B86A F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B86F F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B874 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B879 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B87E F108 201F EA               		dc.b $F1, 8, $20, $1F, $EA	
0000B883 F104 2022 02               		dc.b $F1, 4, $20, $22, 2	
0000B888 06                         SME_yccqJ_4A:	dc.b 6	
0000B889 F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B88E F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B893 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B898 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B89D EE08 201A E9               		dc.b $EE, 8, $20, $1A, $E9	
0000B8A2 EE04 201D 01               		dc.b $EE, 4, $20, $1D, 1	
0000B8A7 06                         SME_yccqJ_69:	dc.b 6	
0000B8A8 F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B8AD F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B8B2 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B8B7 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B8BC F108 201F EA               		dc.b $F1, 8, $20, $1F, $EA	
0000B8C1 F104 2022 02               		dc.b $F1, 4, $20, $22, 2	
0000B8C6 07                         SME_yccqJ_88:	dc.b 7	
0000B8C7 F40D 2000 EC               		dc.b $F4, $D, $20, 0, $EC	
0000B8CC 040C 2008 EC               		dc.b 4, $C, $20, 8, $EC	
0000B8D1 0C00 200C 04               		dc.b $C, 0, $20, $C, 4	
0000B8D6 EE04 201D 04               		dc.b $EE, 4, $20, $1D, 4	
0000B8DB 0C00 200E FC               		dc.b $C, 0, $20, $E, $FC	
0000B8E0 0C00 200D F4               		dc.b $C, 0, $20, $D, $F4	
0000B8E5 EE08 201A EC               		dc.b $EE, 8, $20, $1A, $EC	
0000B8EA 04                         SME_yccqJ_AC:	dc.b 4	
0000B8EB F40D 2000 EC               		dc.b $F4, $D, $20, 0, $EC	
0000B8F0 040C 2008 EC               		dc.b 4, $C, $20, 8, $EC	
0000B8F5 0C00 200C 04               		dc.b $C, 0, $20, $C, 4	
0000B8FA 0C04 200D F4               		dc.b $C, 4, $20, $D, $F4	
0000B900 00                         		even
0000B900 00                         		even
0000B900                            Map_Missile:	include	"_maps\Buzz Bomber Missile.asm"
0000B900                            ; ---------------------------------------------------------------------------
0000B900                            ; Sprite mappings - missile that Buzz Bomber throws
0000B900                            ; ---------------------------------------------------------------------------
0000B900                            Map_Missile_internal:
0000B900 0000                       		dc.w @Flare1-Map_Missile_internal
0000B902 0000                       		dc.w @Flare2-Map_Missile_internal
0000B904 0000                       		dc.w @Ball1-Map_Missile_internal
0000B906 0000                       		dc.w @Ball2-Map_Missile_internal
0000B908 01                         @Flare1:	dc.b 1
0000B909 F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8 ; buzz bomber firing flare
0000B90E 01                         @Flare2:	dc.b 1
0000B90F F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000B914 01                         @Ball1:		dc.b 1
0000B915 F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8 ; missile itself
0000B91A 01                         @Ball2:		dc.b 1
0000B91B F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000B920                            		even
0000B920                            		even
0000B920                            
0000B920                            		include	"_incObj\25 & 37 Rings.asm"
0000B920                            ; ---------------------------------------------------------------------------
0000B920                            ; Object 25 - rings
0000B920                            ; ---------------------------------------------------------------------------
0000B920                            
0000B920                            Rings:
0000B920 7000                       		moveq	#0,d0
0000B922 1028 0024                  		move.b	obRoutine(a0),d0
0000B926 323B 0000                  		move.w	Ring_Index(pc,d0.w),d1
0000B92A 4EFB 1000                  		jmp	Ring_Index(pc,d1.w)
0000B92E                            ; ===========================================================================
0000B92E                            Ring_Index:
0000B92E 0000                       ptr_Ring_Main:		dc.w Ring_Main-Ring_Index
0000B930 0000                       ptr_Ring_Animate:	dc.w Ring_Animate-Ring_Index
0000B932 0000                       ptr_Ring_Collect:	dc.w Ring_Collect-Ring_Index
0000B934 0000                       ptr_Ring_Sparkle:	dc.w Ring_Sparkle-Ring_Index
0000B936 0000                       ptr_Ring_Delete:	dc.w Ring_Delete-Ring_Index
0000B938 0000                       ptr_Ring_Attract:	dc.w Ring_Attract-Ring_Index
0000B93A 0000                       ptr_Ring_Collect1:	dc.w Ring_Collect-Ring_Index
0000B93C 0000                       ptr_Ring_Sparkle1:	dc.w Ring_Sparkle-Ring_Index
0000B93E 0000                       ptr_Ring_Delete1:	dc.w Ring_Delete-Ring_Index
0000B940                            
0000B940 =00000000                  id_Ring_Main:			equ ptr_Ring_Main-Ring_Index	; 0
0000B940 =00000002                  id_Ring_Animate:		equ ptr_Ring_Animate-Ring_Index	; 2
0000B940 =00000004                  id_Ring_Collect:		equ ptr_Ring_Collect-Ring_Index	; 4
0000B940 =00000006                  id_Ring_Sparkle:		equ ptr_Ring_Sparkle-Ring_Index	; 6
0000B940 =00000008                  id_Ring_Delete:			equ ptr_Ring_Delete-Ring_Index	; 8
0000B940 =0000000A                  id_Ring_Attract:		equ ptr_Ring_Attract-Ring_Index	; $A
0000B940 =00000004                  id_Ring_Collect1:		equ ptr_Ring_Collect-Ring_Index	; $C
0000B940 =00000006                  id_Ring_Sparkle1:		equ ptr_Ring_Sparkle-Ring_Index	; $E
0000B940 =00000008                  id_Ring_Delete1:		equ ptr_Ring_Delete-Ring_Index	; $10
0000B940                            ; ---------------------------------------------------------------------------
0000B940                            ; Distances between rings (format: horizontal, vertical)
0000B940                            ; ---------------------------------------------------------------------------
0000B940 1000                       Ring_PosData:	dc.b $10, 0		; horizontal tight
0000B942 1800                       		dc.b $18, 0		; horizontal normal
0000B944 2000                       		dc.b $20, 0		; horizontal wide
0000B946 0010                       		dc.b 0,	$10		; vertical tight
0000B948 0018                       		dc.b 0,	$18		; vertical normal
0000B94A 0020                       		dc.b 0,	$20		; vertical wide
0000B94C 1010                       		dc.b $10, $10		; diagonal
0000B94E 1818                       		dc.b $18, $18
0000B950 2020                       		dc.b $20, $20
0000B952 F010                       		dc.b $F0, $10
0000B954 E818                       		dc.b $E8, $18
0000B956 E020                       		dc.b $E0, $20
0000B958 1008                       		dc.b $10, 8
0000B95A 1810                       		dc.b $18, $10
0000B95C F008                       		dc.b $F0, 8
0000B95E E810                       		dc.b $E8, $10
0000B960                            ; ===========================================================================
0000B960                            
0000B960                            Ring_Main:	; Routine 0
0000B960 45F8 FC00                  		lea	(v_objstate).w,a2
0000B964 7000                       		moveq	#0,d0
0000B966 1028 0023                  		move.b	obRespawnNo(a0),d0
0000B96A 45F2 0002                  		lea	2(a2,d0.w),a2
0000B96E 1812                       		move.b	(a2),d4
0000B970 1228 0028                  		move.b	obSubtype(a0),d1
0000B974 1001                       		move.b	d1,d0
0000B976 0241 0007                  		andi.w	#7,d1
0000B97A 0C41 0007                  		cmpi.w	#7,d1
0000B97E 6600                       		bne.s	loc_9B80
0000B980 7206                       		moveq	#6,d1
0000B982                            
0000B982                            	loc_9B80:
0000B982 4841                       		swap	d1
0000B984 323C 0000                  		move.w	#0,d1
0000B988 E808                       		lsr.b	#4,d0
0000B98A D040                       		add.w	d0,d0
0000B98C 1A3B 00B2                  		move.b	Ring_PosData(pc,d0.w),d5 ; load ring spacing data
0000B990 4885                       		ext.w	d5
0000B992 1C3B 00AD                  		move.b	Ring_PosData+1(pc,d0.w),d6
0000B996 4886                       		ext.w	d6
0000B998 2248                       		movea.l	a0,a1
0000B99A 3428 0008                  		move.w	obX(a0),d2
0000B99E 3628 000C                  		move.w	obY(a0),d3
0000B9A2 E20C                       		lsr.b	#1,d4
0000B9A4 6500                       		bcs.s	loc_9C02
0000B9A6 0892 0007                  		bclr	#7,(a2)
0000B9AA 6000                       		bra.s	loc_9BBA
0000B9AC                            ; ===========================================================================
0000B9AC                            
0000B9AC                            Ring_MakeRings:
0000B9AC 4841                       		swap	d1
0000B9AE E20C                       		lsr.b	#1,d4
0000B9B0 6500                       		bcs.s	loc_9C02
0000B9B2 0892 0007                  		bclr	#7,(a2)
0000B9B6 6100 0000                  		bsr.w	FindFreeObj
0000B9BA 6600                       		bne.s	loc_9C0E
0000B9BC                            
0000B9BC                            loc_9BBA:
0000B9BC 12BC 0000                  		move.b	#id_Rings,0(a1)	; load ring object
0000B9C0 5429 0024                  		addq.b	#2,obRoutine(a1)
0000B9C4 3342 0008                  		move.w	d2,obX(a1)	; set x-axis position based on d2
0000B9C8 3368 0008 0032             		move.w	obX(a0),$32(a1)
0000B9CE 3343 000C                  		move.w	d3,obY(a1)	; set y-axis position based on d3
0000B9D2 237C 0000 0000 0004        		move.l	#Map_Ring,obMap(a1)
0000B9DA 337C 2798 0002             		move.w	#$2798,obGfx(a1)
0000B9E0 137C 0004 0001             		move.b	#4,obRender(a1)
0000B9E6 337C 0100 0018             		move.w	#$100,obPriority(a1)
0000B9EC 137C 0047 0020             		move.b	#$47,obColType(a1)
0000B9F2 137C 0008 0014             		move.b	#8,obActWid(a1)
0000B9F8 1368 0023 0023             		move.b	obRespawnNo(a0),obRespawnNo(a1)
0000B9FE 1341 0034                  		move.b	d1,$34(a1)
0000BA02                            
0000BA02                            loc_9C02:
0000BA02 5241                       		addq.w	#1,d1
0000BA04 D445                       		add.w	d5,d2		; add ring spacing value to d2
0000BA06 D646                       		add.w	d6,d3		; add ring spacing value to d3
0000BA08 4841                       		swap	d1
0000BA0A 51C9 FFA0                  		dbf	d1,Ring_MakeRings ; repeat for	number of rings
0000BA0E                            
0000BA0E                            loc_9C0E:
0000BA0E 0812 0000                  		btst	#0,(a2)
0000BA12 6600 0000                  		bne.w	DeleteObject
0000BA16                            
0000BA16                            Ring_Animate:	; Routine 2
0000BA16 4A38 F5C9                  		tst.b	(v_gshield).w
0000BA1A 6700                       		beq.s	@skip
0000BA1C 4A28 0001                  		tst.b	obRender(a0)
0000BA20 6A00                       		bpl.s	@skip
0000BA22                            		
0000BA22 43F8 D000                  		lea (v_player).w,a1
0000BA26                            		
0000BA26 3029 0008                  		move.w	obX(a1),d0	; load Sonic's x-axis position
0000BA2A 9068 0008                  		sub.w	obX(a0),d0
0000BA2E 6A00                       		bpl.s	@a1
0000BA30 4440                       		neg.w	d0
0000BA32                            		
0000BA32                            	@a1:
0000BA32 0C40 0040                  		cmpi.w	#$40,d0
0000BA36 6200                       		bhi.s	@skip
0000BA38                            		
0000BA38 3029 000C                  		move.w	obY(a1),d0	; load Sonic's y-axis position
0000BA3C 9068 000C                  		sub.w	obY(a0),d0
0000BA40 6A00                       		bpl.s	@a2
0000BA42 4440                       		neg.w	d0
0000BA44                            		
0000BA44                            	@a2:
0000BA44 0C40 0040                  		cmpi.w	#$40,d0
0000BA48 6200                       		bhi.s	@skip
0000BA4A                            		
0000BA4A 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0000BA50 45F8 FC00                  		lea	(v_objstate).w,a2
0000BA54 7000                       		moveq	#0,d0
0000BA56 1028 0023                  		move.b	obRespawnNo(a0),d0
0000BA5A 1228 0034                  		move.b	$34(a0),d1
0000BA5E 03F2 0002                  		bset	d1,2(a2,d0.w)
0000BA62                            		
0000BA62                            	@skip:
0000BA62 1178 FEC5 001A             		move.b	(v_ani2_frame).w,obFrame(a0) ; set frame
0000BA68 6100 0000                  		bsr.w	DisplaySprite
0000BA88 4E75                       		rts	
0000BA8A                            ; ===========================================================================
0000BA8A                            
0000BA8A                            Ring_Collect:	; Routine 4
0000BA8A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BA8E 117C 0000 0020             		move.b	#0,obColType(a0)
0000BA94 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000BA9A 6100 0000                  		bsr.w	CollectRing
0000BA9E 45F8 FC00                  		lea	(v_objstate).w,a2
0000BAA2 7000                       		moveq	#0,d0
0000BAA4 1028 0023                  		move.b	obRespawnNo(a0),d0
0000BAA8 1228 0034                  		move.b	$34(a0),d1
0000BAAC 03F2 0002                  		bset	d1,2(a2,d0.w)
0000BAB0                            
0000BAB0                            Ring_Sparkle:	; Routine 6
0000BAB0 43F9 0000 0000             		lea	(Ani_Ring).l,a1
0000BAB6 6100 0000                  		bsr.w	AnimateSprite
0000BABA 6000 0000                  		bra.w	DisplaySprite
0000BABE                            ; ===========================================================================
0000BABE                            
0000BABE                            Ring_Delete:	; Routine 8
0000BABE 6000 0000                  		bra.w	DeleteObject
0000BAC2                            
0000BAC2                            Ring_Attract:	; Routine $A
0000BAC2 4A38 F5C9                  		tst.b	(v_gshield).w
0000BAC6 6600                       		bne.s	@skip
0000BAC8 10BC 0000                  		move.b	#id_RingLoss,0(a0)
0000BACC 117C 0002 0024             		move.b	#2,obRoutine(a0)
0000BAD2 11FC 00FF FEC6             		move.b	#-1,(v_ani3_time).w
0000BAD8 6000                       		bra.s	@display
0000BADA                            		
0000BADA                            	@skip:
0000BADA 323C 0030                  		move.w	#$30,d1	; horizontal
0000BADE 3038 D008                  		move.w	(v_player+obX).w,d0
0000BAE2 B068 0008                  		cmp.w	obX(a0),d0
0000BAE6 6400                       		bcc.s	@a1
0000BAE8 4441                       		neg.w	d1
0000BAEA 4A68 0010                  		tst.w	obVelX(a0)
0000BAEE 6B00                       		bmi.s	@a2
0000BAF0 D241                       		add.w	d1,d1
0000BAF2 D241                       		add.w	d1,d1
0000BAF4 6000                       		bra.s	@a2
0000BAF6                            
0000BAF6                            	@a1:
0000BAF6 4A68 0010                  		tst.w	obVelX(a0)
0000BAFA 6A00                       		bpl.s	@a2
0000BAFC D241                       		add.w	d1,d1
0000BAFE D241                       		add.w	d1,d1
0000BB00                            
0000BB00                            	@a2:
0000BB00 D368 0010                  		add.w	d1,obVelX(a0)
0000BB04 323C 0030                  		move.w	#$30,d1	; vertical
0000BB08 3038 D00C                  		move.w	(v_player+obY).w,d0
0000BB0C B068 000C                  		cmp.w	obY(a0),d0
0000BB10 6400                       		bcc.s	@a3
0000BB12 4441                       		neg.w	d1
0000BB14 4A68 0012                  		tst.w	obVelY(a0)
0000BB18 6B00                       		bmi.s	@a4
0000BB1A D241                       		add.w	d1,d1
0000BB1C D241                       		add.w	d1,d1
0000BB1E 6000                       		bra.s	@a4
0000BB20                            
0000BB20                            	@a3:
0000BB20 4A68 0012                  		tst.w	obVelY(a0)
0000BB24 6A00                       		bpl.s	@a4
0000BB26 D241                       		add.w	d1,d1
0000BB28 D241                       		add.w	d1,d1
0000BB2A                            
0000BB2A                            	@a4:
0000BB2A D368 0012                  		add.w	d1,obVelY(a0)
0000BB2E 6100 0000                  		bsr.w	SpeedToPos
0000BB32                            		
0000BB32                            	@display:
0000BB32 1178 FEC3 001A             		move.b	(v_ani1_frame).w,obFrame(a0) ; set frame
0000BB38 6000 0000                  		bra.w	DisplaySprite
0000BB3C                            
0000BB3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BB3C                            
0000BB3C                            
0000BB3C                            CollectRing:
0000BB3C 5278 FE20                  		addq.w	#1,(v_rings).w	; add 1 to rings
0000BB40 0038 0001 FE1D             		ori.b	#1,(f_ringcount).w ; update the rings counter
0000BB46 303C 0000                  		move.w	#sfx_Ring,d0	; play ring sound
0000BB4A 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; do you have < 100 rings?
0000BB50 6500                       		bcs.s	@playsnd	; if yes, branch
0000BB52 08F8 0001 FE1B             		bset	#1,(v_lifecount).w ; update lives counter
0000BB58 6700                       		beq.s	@got100
0000BB5A 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; do you have < 200 rings?
0000BB60 6500                       		bcs.s	@playsnd	; if yes, branch
0000BB62 08F8 0002 FE1B             		bset	#2,(v_lifecount).w ; update lives counter
0000BB68 6600                       		bne.s	@playsnd
0000BB6A                            
0000BB6A                            	@got100:
0000BB6A 5238 FE12                  		addq.b	#1,(v_lives).w	; add 1 to the number of lives you have
0000BB6E 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update the lives counter
0000BB72 303C 0000                  		move.w	#bgm_ExtraLife,d0 ; play extra life music
0000BB76                            		
0000BB76                            
0000BB76                            	@playsnd:
0000BB76 4EF9 0000 1250             		jmp	(PlaySound_Special).l
0000BB7C                            ; End of function CollectRing
0000BB7C                            
0000BB7C                            ; ===========================================================================
0000BB7C                            ; ---------------------------------------------------------------------------
0000BB7C                            ; Object 37 - rings flying out of Sonic	when he's hit
0000BB7C                            ; ---------------------------------------------------------------------------
0000BB7C                            
0000BB7C                            RingLoss:
0000BB7C 7000                       		moveq	#0,d0
0000BB7E 1028 0024                  		move.b	obRoutine(a0),d0
0000BB82 323B 0000                  		move.w	RLoss_Index(pc,d0.w),d1
0000BB86 4EFB 1000                  		jmp	RLoss_Index(pc,d1.w)
0000BB8A                            ; ===========================================================================
0000BB8A 0000                       RLoss_Index:	dc.w RLoss_Count-RLoss_Index
0000BB8C 0000                       		dc.w RLoss_Bounce-RLoss_Index
0000BB8E 0000                       		dc.w RLoss_Collect-RLoss_Index
0000BB90 0000                       		dc.w RLoss_Sparkle-RLoss_Index
0000BB92 0000                       		dc.w RLoss_Delete-RLoss_Index
0000BB94                            ; ===========================================================================
0000BB94                            
0000BB94                            RLoss_Count:	; Routine 0
0000BB94 2248                       		movea.l	a0,a1
0000BB96 7A00                       		moveq	#0,d5
0000BB98 3A38 FE20                  		move.w	(v_rings).w,d5	; check number of rings you have
0000BB9C 47F9 0000 0000                     lea     SpillRingData,a3        ; load the address of the array in a3
0000BBA2 7018                               moveq   #24,d0                  ; lose a max of 24 rings
0000BBA4 45F8 D000                          lea     (v_player).w,a2    ; a2=character
0000BBA8 082A 0006 0022                     btst    #6,obStatus(a2)           ; is Sonic underwater?
0000BBAE 6700                               beq.s   @cont                       ; if not, branch
0000BBB0 47F9 0000 0000                     lea    SpillRingData_Water,a3        ; load the UNDERWATER address of the array in a3
0000BBB6 7010                               moveq   #16,d0                   ; lose a max of 16 rings underwater
0000BBB8                            @cont:
0000BBB8 BA40                               cmp.w   d0,d5
0000BBBA 6500                               bcs.s   @belowmax
0000BBBC 3A00                               move.w  d0,d5
0000BBBE                            
0000BBBE                            @belowmax:
0000BBBE 5345                               subq.w  #1,d5
0000BBC0 383C 0288                          move.w  #$288,d4
0000BBC4 6000                       		bra.s	@makerings
0000BBC6                            ; ===========================================================================
0000BBC6                            
0000BBC6                            	@loop:
0000BBC6 6100 0000                  		bsr.w	FindFreeObj
0000BBCA 6600 0000                  		bne.w	@resetcounter
0000BBCE                            
0000BBCE                            @makerings:
0000BBCE 12BC 0000                  		move.b	#id_RingLoss,0(a1) ; load bouncing ring object
0000BBD2 5429 0024                  		addq.b	#2,obRoutine(a1)
0000BBD6 137C 0008 0016             		move.b	#8,obHeight(a1)
0000BBDC 137C 0008 0017             		move.b	#8,obWidth(a1)
0000BBE2 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000BBE8 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000BBEE 237C 0000 0000 0004        		move.l	#Map_Ring,obMap(a1)
0000BBF6 337C 2798 0002             		move.w	#$2798,obGfx(a1)
0000BBFC 137C 0004 0001             		move.b	#4,obRender(a1)
0000BC02 137C 0047 0020             		move.b	#$47,obColType(a1)
0000BC08 137C 0008 0014             		move.b	#8,obActWid(a1)
0000BC0E 4A38 F64C                  		tst.b	($FFFFF64C).w		; Does the level have water?
0000BC12 6700                       		beq.s	@skiphalvingvel		; If not, branch and skip underwater checks
0000BC14 3C38 F646                  		move.w	($FFFFF646).w,d6	; Move water level to d6
0000BC18 BC68 000C                  		cmp.w	obY(a0),d6		; Is the ring object underneath the water level?
0000BC1C 6E00                       		bgt.s	@skiphalvingvel		; If not, branch and skip underwater commands
0000BC1E E240                       		asr.w	d0			; Half d0. Makes the ring's x_vel bounce to the left/right slower
0000BC20 E241                       		asr.w	d1			; Half d1. Makes the ring's y_vel bounce up/down slower
0000BC22                            @skiphalvingvel:
0000BC22 335B 0010                  		move.w  (a3)+,obVelX(a1)         ; move the data contained in the array to the x velocity and increment the address in a3
0000BC26 335B 0012                  		move.w  (a3)+,obVelY(a1)         ; move the data contained in the array to the y velocity and increment the address in a3	
0000BC2A 51CD FF9A                  		dbf	d5,@loop	; repeat for number of rings (max 31)
0000BC2E                            
0000BC2E                            @resetcounter:
0000BC2E 31FC 0000 FE20             		move.w	#0,(v_rings).w	; reset number of rings to zero
0000BC34 11FC 0080 FE1D             		move.b	#$80,(f_ringcount).w ; update ring counter
0000BC3A 11FC 0000 FE1B             		move.b	#0,(v_lifecount).w
0000BC40 70FF                               moveq   #-1,d0                  ; Move #-1 to d0
0000BC42 1140 001F                          move.b  d0,obDelayAni(a0)       ; Move d0 to new timer
0000BC46 11C0 FEC6                          move.b  d0,(v_ani3_time).w      ; Move d0 to old timer (for animated purposes)
0000BC54                            
0000BC54                            RLoss_Bounce:	; Routine 2
0000BC54 1178 FEC7 001A             		move.b	(v_ani3_frame).w,obFrame(a0)
0000BC5A 6100 0000                  		bsr.w	SpeedToPos
0000BC5E 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000BC64 4A38 F64C                  		tst.b	($FFFFF64C).w		; Does the level have water?
0000BC68 6700                       		beq.s	@skipbounceslow		; If not, branch and skip underwater checks
0000BC6A 3C38 F646                  		move.w	($FFFFF646).w,d6	; Move water level to d6
0000BC6E BC68 000C                  		cmp.w	obY(a0),d6		; Is the ring object underneath the water level?
0000BC72 6E00                       		bgt.s	@skipbounceslow		; If not, branch and skip underwater commands
0000BC74 0468 000E 0012             		subi.w	#$E,obVelY(a0)		; Reduce gravity by $E ($18-$E=$A), giving the underwater effect
0000BC7A                            	@skipbounceslow:
0000BC7A 6B00                       		bmi.s	@chkdel
0000BC7C 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000BC80 D007                       		add.b	d7,d0
0000BC82 0200 0003                  		andi.b	#3,d0
0000BC86 6600                       		bne.s	@chkdel
0000BC88 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000BC8E 4A41                       		tst.w	d1
0000BC90 6A00                       		bpl.s	@chkdel
0000BC92 D368 000C                  		add.w	d1,obY(a0)
0000BC96 3028 0012                  		move.w	obVelY(a0),d0
0000BC9A E440                       		asr.w	#2,d0
0000BC9C 9168 0012                  		sub.w	d0,obVelY(a0)
0000BCA0 4468 0012                  		neg.w	obVelY(a0)
0000BCA4                            
0000BCA4                            	@chkdel:
0000BCA4 5328 001F                  		subq.b  #1,obDelayAni(a0)  ; Subtract 1   ; RHS Ring Timer fix
0000BCA8 6700 0000                          beq.w   DeleteObject       ; If 0, delete ; RHS Ring Timer fix
0000BCAC 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000BCB0 0640 00E0                  		addi.w	#$E0,d0
0000BCB4 B068 000C                  		cmp.w	obY(a0),d0	   ; has object moved below level boundary?
0000BCB8 6500 0000                  		bcs.w	RLoss_Delete	   ; if yes, branch
0000BCBC 4A38 F5C9                  		tst.b	(v_gshield).w
0000BCC0 6700                       		beq.s	@skip
0000BCC2 4A28 0001                  		tst.b	obRender(a0)
0000BCC6 6A00                       		bpl.s	@skip
0000BCC8                            		
0000BCC8 43F8 D000                  		lea (v_player).w,a1
0000BCCC                            		
0000BCCC 3029 0008                  		move.w	obX(a1),d0	; load Sonic's x-axis position
0000BCD0 9068 0008                  		sub.w	obX(a0),d0
0000BCD4 6A00                       		bpl.s	@a1
0000BCD6 4440                       		neg.w	d0
0000BCD8                            		
0000BCD8                            	@a1:
0000BCD8 0C40 00A0                  		cmpi.w	#$A0,d0
0000BCDC 6200                       		bhi.s	@skip
0000BCDE                            		
0000BCDE 3029 000C                  		move.w	obY(a1),d0	; load Sonic's y-axis position
0000BCE2 9068 000C                  		sub.w	obY(a0),d0
0000BCE6 6A00                       		bpl.s	@a2
0000BCE8 4440                       		neg.w	d0
0000BCEA                            		
0000BCEA                            	@a2:
0000BCEA 0C40 00A0                  		cmpi.w	#$A0,d0
0000BCEE 6200                       		bhi.s	@skip
0000BCF0                            		
0000BCF0 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0000BCF6 10BC 0000                  		move.b	#id_Rings,0(a0)
0000BCFA                            		
0000BCFA                            	@skip:		
0000BCFA 43F8 AD80                          lea     v_spritequeue+$180,a1
0000BCFE D2FC 0080                          adda.w  #$80,a1
0000BD02 0C51 007E                          cmpi.w  #$7E,(a1)
0000BD06 6400                               bcc.s   @cont
0000BD08 5451                               addq.w  #2,(a1)
0000BD0A D2D1                               adda.w  (a1),a1
0000BD0C 3288                               move.w  a0,(a1)
0000BD0E                            		
0000BD0E                            	@cont:
0000BD0E 4E75                               rts		
0000BD10                            ; ===========================================================================
0000BD10                            
0000BD10                            RLoss_Collect:	; Routine 4
0000BD10 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BD14 117C 0000 0020             		move.b	#0,obColType(a0)
0000BD1A 6100 FE20                  		bsr.w	CollectRing
0000BD1E                            
0000BD1E                            RLoss_Sparkle:	; Routine 6
0000BD1E 43F9 0000 0000             		lea	(Ani_Ring).l,a1
0000BD24 6100 0000                  		bsr.w	AnimateSprite
0000BD28 43F8 AD80                  		lea     v_spritequeue+$180,a1
0000BD2C 0C51 007E                          cmpi.w  #$7E,(a1)
0000BD30 6400                               bcc.s   @cont
0000BD32 5451                               addq.w  #2,(a1)
0000BD34 D2D1                               adda.w  (a1),a1
0000BD36 3288                               move.w  a0,(a1)
0000BD38                            			
0000BD38                            	@cont:
0000BD38 4E75                               rts
0000BD3A                            ; ===========================================================================
0000BD3A                            
0000BD3A                            RLoss_Delete:	; Routine 8
0000BD3A 6000 0000                  		bra.w	DeleteObject
0000BD3E                            
0000BD3E                            ; ----------------------------------------------------------------------------------------------
0000BD3E                            ; Ring Spawn Array 
0000BD3E                            ; ----------------------------------------------------------------------------------------------
0000BD3E                            
0000BD3E FF3C FC14 00C4 FC14 FDC8+  SpillRingData:  dc.w    $FF3C,$FC14, $00C4,$FC14, $FDC8,$FCB0, $0238,$FCB0 ; 4
0000BD4E FCB0 FDC8 0350 FDC8 FC14+                  dc.w    $FCB0,$FDC8, $0350,$FDC8, $FC14,$FF3C, $03EC,$FF3C ; 8
0000BD5E FC14 00C4 03EC 00C4 FCB0+                  dc.w    $FC14,$00C4, $03EC,$00C4, $FCB0,$0238, $0350,$0238 ; 12
0000BD6E FDC8 0350 0238 0350 FF3C+                  dc.w    $FDC8,$0350, $0238,$0350, $FF3C,$03EC, $00C4,$03EC ; 16
0000BD7E FF9E FE0A 0062 FE0A FEE4+                  dc.w    $FF9E,$FE0A, $0062,$FE0A, $FEE4,$FE58, $011C,$FE58 ; 20
0000BD8E FE58 FEE4 01A8 FEE4 FE0A+                  dc.w    $FE58,$FEE4, $01A8,$FEE4, $FE0A,$FF9E, $01F6,$FF9E ; 24
0000BD9E FE0A 0062 01F6 0062 FE58+                  dc.w    $FE0A,$0062, $01F6,$0062, $FE58,$011C, $01A8,$011C ; 28
0000BDAE FEE4 01A8 011C 01A8 FF9E+                  dc.w    $FEE4,$01A8, $011C,$01A8, $FF9E,$0156, $0062,$0156 ; 32
0000BDBE                                            even
0000BDBE                            ; ===========================================================================
0000BDBE                            ; -------------------------------------------------------------------------------------
0000BDBE                            ; Ring Spawn Array - Underwater - same thing as I said above. Edit at your own risk!!!
0000BDBE                            ; -------------------------------------------------------------------------------------
0000BDBE                            
0000BDBE                            SpillRingData_Water:
0000BDBE FF9C FE08 0064 FE08 FEE4+  				dc.w    $FF9C,$FE08, $0064,$FE08, $FEE4,$FE58, $011C,$FE58 ; 4
0000BDCE FE58 FEE4 01A8 FEE4 FE08+                  dc.w    $FE58,$FEE4, $01A8,$FEE4, $FE08,$FF9C, $01F8,$FF9C ; 8
0000BDDE FE08 0060 01F8 0060 FE58+                  dc.w    $FE08,$0060, $01F8,$0060, $FE58,$011C, $01A8,$011C ; 12
0000BDEE FEE4 01A8 011C 01A8 FF9C+                  dc.w    $FEE4,$01A8, $011C,$01A8, $FF9C,$01F4, $0064,$01F4 ; 16
0000BDFE FFCE FF04 0032 FF04 FF72+                  dc.w    $FFCE,$FF04, $0032,$FF04, $FF72,$FF2C, $008E,$FF2C ; 20
0000BE0E FF2C FF72 00D4 FF72 FF04+                  dc.w    $FF2C,$FF72, $00D4,$FF72, $FF04,$FFCE, $00FC,$FFCE ; 24
0000BE1E FF04 0030 00FC 0030 FF2C+                  dc.w    $FF04,$0030, $00FC,$0030, $FF2C,$008E, $00D4,$008E ; 28
0000BE2E FF72 00D4 008E 00D4 FFCE+                  dc.w    $FF72,$00D4, $008E,$00D4, $FFCE,$00FA, $0032,$00FA ; 32
0000BE3E                                            even
0000BE3E                            ; ===========================================================================				
0000BE3E                            ; ===========================================================================				
0000BE3E                            		include	"_incObj\4B Giant Ring.asm"
0000BE3E                            ; ---------------------------------------------------------------------------
0000BE3E                            ; Object 4B - giant ring for entry to special stage
0000BE3E                            ; ---------------------------------------------------------------------------
0000BE3E                            
0000BE3E                            GiantRing:
0000BE3E 7000                       		moveq	#0,d0
0000BE40 1028 0024                  		move.b	obRoutine(a0),d0
0000BE44 323B 0000                  		move.w	GRing_Index(pc,d0.w),d1
0000BE48 4EFB 1000                  		jmp	GRing_Index(pc,d1.w)
0000BE4C                            ; ===========================================================================
0000BE4C 0000                       GRing_Index:	dc.w GRing_Main-GRing_Index
0000BE4E 0000                       		dc.w GRing_Animate-GRing_Index
0000BE50 0000                       		dc.w GRing_Collect-GRing_Index
0000BE52 0000                       		dc.w GRing_Delete-GRing_Index
0000BE54                            ; ===========================================================================
0000BE54                            
0000BE54                            GRing_Main:    ; Routine 0
0000BE54 217C 0000 0000 0004        		move.l	#Map_GRing,obMap(a0)
0000BE5C 317C 2400 0002             		move.w	#$2400,obGfx(a0)
0000BE62 0028 0004 0001             		ori.b	#4,obRender(a0)
0000BE68 117C 0040 0014             		move.b	#$40,obActWid(a0)
0000BE6E 4A28 0001                  		tst.b	obRender(a0)
0000BE72 6A00                       		bpl.s	GRing_Animate
0000BE74 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have 6 emeralds?
0000BE7A 6700 0000                  		beq.w	GRing_Delete    ; if yes, branch
0000BE7E 0C38 0002 F5C3             		cmpi.b	#2,(f_emeraldm).w    ;TIS Did you  hit the S-Monitor?
0000BE84 6700                       		beq.s	GRing_Okay    ; if yes, branch
0000BE86                            
0000BE86 4E75                       		rts    
0000BE88                            ; ===========================================================================
0000BE88                            
0000BE88                            GRing_Okay:
0000BE88 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BE8C 317C 0100 0018             		move.w	#$100,obPriority(a0)
0000BE92 117C 0052 0020             		move.b	#$52,obColType(a0)
0000BE98 31FC 0C40 F7BE             		move.w	#$C40,(v_gfxbigring).w	; Signal that Art_BigRing should be loaded ($C40 is the size of Art_BigRing)
0000BE9E                            
0000BE9E                            GRing_Animate:	; Routine 2
0000BE9E 1178 FEC3 001A             		move.b	(v_ani1_frame).w,obFrame(a0)
0000BEC2 6000 0000                  		bra.w	DisplaySprite
0000BEC6                            ; ===========================================================================
0000BEC6                            
0000BEC6                            GRing_Collect:	; Routine 4
0000BEC6 5528 0024                  		subq.b	#2,obRoutine(a0)
0000BECA 117C 0000 0020             		move.b	#0,obColType(a0)
0000BED0 6100 0000                  		bsr.w	FindFreeObj
0000BED4 6600 0000                  		bne.w	GRing_PlaySnd
0000BED8 12BC 0000                  		move.b	#id_RingFlash,0(a1) ; load giant ring flash object
0000BEDC 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000BEE2 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000BEE8 2348 003C                  		move.l	a0,$3C(a1)
0000BEEC 3038 D008                  		move.w	(v_player+obX).w,d0
0000BEF0 B068 0008                  		cmp.w	obX(a0),d0	; has Sonic come from the left?
0000BEF4 6500                       		bcs.s	GRing_PlaySnd	; if yes, branch
0000BEF6 08E9 0000 0001             		bset	#0,obRender(a1)	; reverse flash	object	
0000BEFC 11FC 0001 FE57             		move.b  #1,(v_emeralds).w
0000BF02 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0000BF08                            		
0000BF08                            GRing_PlaySnd:
0000BF12 608A                       		bra.s	GRing_Animate
0000BF14                            ; ===========================================================================
0000BF14                            
0000BF14                            GRing_Delete:	; Routine 6
0000BF14 6000 0000                  		bra.w	DeleteObject
0000BF14 6000 0000                  		bra.w	DeleteObject
0000BF18                            		include	"_incObj\7C Ring Flash.asm"
0000BF18                            ; ---------------------------------------------------------------------------
0000BF18                            ; Object 7C - flash effect when	you collect the	giant ring
0000BF18                            ; ---------------------------------------------------------------------------
0000BF18                            
0000BF18                            RingFlash:
0000BF18 7000                       		moveq	#0,d0
0000BF1A 1028 0024                  		move.b	obRoutine(a0),d0
0000BF1E 323B 0000                  		move.w	Flash_Index(pc,d0.w),d1
0000BF22 4EFB 1000                  		jmp	Flash_Index(pc,d1.w)
0000BF26                            ; ===========================================================================
0000BF26 0000                       Flash_Index:	dc.w Flash_Main-Flash_Index
0000BF28 0000                       		dc.w Flash_ChkDel-Flash_Index
0000BF2A 0000                       		dc.w Flash_Delete-Flash_Index
0000BF2C                            ; ===========================================================================
0000BF2C                            
0000BF2C                            Flash_Main:	; Routine 0
0000BF2C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BF30 217C 0000 0000 0004        		move.l	#Map_Flash,obMap(a0)
0000BF38 317C 2462 0002             		move.w	#$2462,obGfx(a0)
0000BF3E 0028 0004 0001             		ori.b	#4,obRender(a0)
0000BF44 317C 0000 0018             		move.w	#0,obPriority(a0)
0000BF4A 117C 0020 0014             		move.b	#$20,obActWid(a0)
0000BF50 117C 00FF 001A             		move.b	#$FF,obFrame(a0)
0000BF56                            
0000BF56                            Flash_ChkDel:	; Routine 2
0000BF56 6100                       		bsr.s	Flash_Collect
0000BF76 6000 0000                  		bra.w	DisplaySprite
0000BF7A                            
0000BF7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BF7A                            
0000BF7A                            
0000BF7A                            Flash_Collect:
0000BF7A 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000BF7E 6A00                       		bpl.s	locret_9F76
0000BF80 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000BF86 5228 001A                  		addq.b	#1,obFrame(a0)
0000BF8A 0C28 0008 001A             		cmpi.b	#8,obFrame(a0)	; has animation	finished?
0000BF90 6400                       		bcc.s	Flash_End	; if yes, branch
0000BF92 0C28 0003 001A             		cmpi.b	#3,obFrame(a0)	; is 3rd frame displayed?
0000BF98 6600                       		bne.s	locret_9F76	; if not, branch
0000BF9A 2268 003C                  		movea.l	$3C(a0),a1	; get parent object address
0000BF9E 137C 0006 0024             		move.b	#6,obRoutine(a1) ; delete parent object
0000BFA4 11FC 0000 D01C             		move.b	#id_Null,(v_player+obAnim).w ; make Sonic invisible
0000BFAA 11FC 0001 F7CD             		move.b	#1,(f_bigring).w ; stop	Sonic getting bonuses
0000BFB0 4238 FE2D                  		clr.b	(v_invinc).w	; remove invincibility
0000BFB4 4238 FE2C                  		clr.b	(v_shield).w	; remove shield
0000BFB8                            
0000BFB8                            locret_9F76:
0000BFB8 4E75                       		rts	
0000BFBA                            ; ===========================================================================
0000BFBA                            
0000BFBA                            Flash_End:
0000BFBA 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BFBE 31FC 0000 D000             		move.w	#0,(v_player).w ; remove Sonic object
0000BFC4 588F                       		addq.l	#4,sp
0000BFC6 4E75                       		rts	
0000BFC8                            ; End of function Flash_Collect
0000BFC8                            
0000BFC8                            ; ===========================================================================
0000BFC8                            
0000BFC8                            Flash_Delete:	; Routine 4
0000BFC8 6000 0000                  		bra.w	DeleteObject
0000BFC8 6000 0000                  		bra.w	DeleteObject
0000BFCC                            
0000BFCC                            		include	"_anim\Rings.asm"
0000BFCC                            ; ---------------------------------------------------------------------------
0000BFCC                            ; Animation script - ring
0000BFCC                            ; ---------------------------------------------------------------------------
0000BFCC 0000                       Ani_Ring:	dc.w @ring-Ani_Ring
0000BFCE 0706 0708 09FC             @ring:		dc.b 7,	6, 7, 8, 9, afRoutine
0000BFD4                            		even
0000BFD4                            		even
0000BFD4                            Map_Ring:		include	"_maps\Rings (JP1).asm"
0000BFD4                            ; --------------------------------------------------------------------------------
0000BFD4                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000BFD4                            ; --------------------------------------------------------------------------------
0000BFD4                            
0000BFD4                            SME_aSMQh:	
0000BFD4 0000 0000                  		dc.w SME_aSMQh_14-SME_aSMQh, SME_aSMQh_1A-SME_aSMQh	
0000BFD8 0000 0000                  		dc.w SME_aSMQh_20-SME_aSMQh, SME_aSMQh_26-SME_aSMQh	
0000BFDC 0000 0000                  		dc.w SME_aSMQh_2C-SME_aSMQh, SME_aSMQh_32-SME_aSMQh	
0000BFE0 0000 0000                  		dc.w SME_aSMQh_38-SME_aSMQh, SME_aSMQh_3E-SME_aSMQh	
0000BFE4 0000 0000                  		dc.w SME_aSMQh_44-SME_aSMQh, SME_aSMQh_4A-SME_aSMQh	
0000BFE8 01                         SME_aSMQh_14:	dc.b 1	
0000BFE9 F805 0000 F8               		dc.b $F8, 5, 0, 0, $F8	
0000BFEE 01                         SME_aSMQh_1A:	dc.b 1	
0000BFEF F805 0004 F8               		dc.b $F8, 5, 0, 4, $F8	
0000BFF4 01                         SME_aSMQh_20:	dc.b 1	
0000BFF5 F805 000A F8               		dc.b $F8, 5, 0, $A, $F8	
0000BFFA 01                         SME_aSMQh_26:	dc.b 1	
0000BFFB F801 0008 FC               		dc.b $F8, 1, 0, 8, $FC	
0000C000 01                         SME_aSMQh_2C:	dc.b 1	
0000C001 F805 080A F8               		dc.b $F8, 5, 8, $A, $F8	
0000C006 01                         SME_aSMQh_32:	dc.b 1	
0000C007 F805 0804 F8               		dc.b $F8, 5, 8, 4, $F8	
0000C00C 01                         SME_aSMQh_38:	dc.b 1	
0000C00D F805 0010 F8               		dc.b $F8, 5, 0, $10, $F8	
0000C012 01                         SME_aSMQh_3E:	dc.b 1	
0000C013 F805 1810 F8               		dc.b $F8, 5, $18, $10, $F8	
0000C018 01                         SME_aSMQh_44:	dc.b 1	
0000C019 F805 0810 F8               		dc.b $F8, 5, 8, $10, $F8	
0000C01E 01                         SME_aSMQh_4A:	dc.b 1	
0000C01F F805 1010 F8               		dc.b $F8, 5, $10, $10, $F8	
0000C024                            		even
0000C024                            		even
0000C024                            Map_GRing:	include	"_maps\Giant Ring.asm"
0000C024                            ; ---------------------------------------------------------------------------
0000C024                            ; Sprite mappings - giant ring
0000C024                            ; ---------------------------------------------------------------------------
0000C024                            Map_GRing_internal:
0000C024 0000                       		dc.w byte_9FDA-Map_GRing_internal
0000C026 0000                       		dc.w byte_A00D-Map_GRing_internal
0000C028 0000                       		dc.w byte_A036-Map_GRing_internal
0000C02A 0000                       		dc.w byte_A04B-Map_GRing_internal
0000C02C 0A                         byte_9FDA:	dc.b $A
0000C02D E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8	; ring front
0000C032 E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000C037 E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000C03C E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000C041 F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000C046 F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000C04B 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000C050 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000C055 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000C05A 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000C05F 08                         byte_A00D:	dc.b 8
0000C060 E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0 ; ring angle
0000C065 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000C06A E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000C06F F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000C074 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000C079 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000C07E 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000C083 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000C088 04                         byte_A036:	dc.b 4
0000C089 E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4 ; ring perpendicular
0000C08E E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000C093 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000C098 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000C09D 08                         byte_A04B:	dc.b 8
0000C09E E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0 ; ring angle
0000C0A3 E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000C0A8 E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000C0AD F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000C0B2 F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000C0B7 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000C0BC 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000C0C1 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000C0C6                            		even
0000C0C6                            		even
0000C0C6                            Map_Flash:	include	"_maps\Ring Flash.asm"
0000C0C6                            ; ---------------------------------------------------------------------------
0000C0C6                            ; Sprite mappings - flash effect when you collect the giant ring
0000C0C6                            ; ---------------------------------------------------------------------------
0000C0C6                            Map_Flash_internal:
0000C0C6 0000                       		dc.w byte_A084-Map_Flash_internal
0000C0C8 0000                       		dc.w byte_A08F-Map_Flash_internal
0000C0CA 0000                       		dc.w byte_A0A4-Map_Flash_internal
0000C0CC 0000                       		dc.w byte_A0B9-Map_Flash_internal
0000C0CE 0000                       		dc.w byte_A0CE-Map_Flash_internal
0000C0D0 0000                       		dc.w byte_A0E3-Map_Flash_internal
0000C0D2 0000                       		dc.w byte_A0F8-Map_Flash_internal
0000C0D4 0000                       		dc.w byte_A103-Map_Flash_internal
0000C0D6 02                         byte_A084:	dc.b 2
0000C0D7 E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000C0DC 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000C0E1 04                         byte_A08F:	dc.b 4
0000C0E2 E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000C0E7 E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000C0EC 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000C0F1 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000C0F6 04                         byte_A0A4:	dc.b 4
0000C0F7 E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000C0FC E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000C101 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000C106 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000C10B 04                         byte_A0B9:	dc.b 4
0000C10C E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000C111 E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000C116 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000C11B 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000C120 04                         byte_A0CE:	dc.b 4
0000C121 E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000C126 E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000C12B 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000C130 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000C135 04                         byte_A0E3:	dc.b 4
0000C136 E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000C13B E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000C140 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000C145 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000C14A 02                         byte_A0F8:	dc.b 2
0000C14B E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000C150 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000C155 04                         byte_A103:	dc.b 4
0000C156 E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000C15B E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000C160 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000C165 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000C16A                            		even
0000C16A                            		even
0000C16A                            		include	"_incObj\26 Monitor.asm"
0000C16A                            ; ---------------------------------------------------------------------------
0000C16A                            ; Object 26 - monitors
0000C16A                            ; ---------------------------------------------------------------------------
0000C16A                            
0000C16A                            Monitor:
0000C16A 7000                       		moveq	#0,d0
0000C16C 1028 0024                  		move.b	obRoutine(a0),d0
0000C170 323B 0000                  		move.w	Mon_Index(pc,d0.w),d1
0000C174 4EFB 1000                  		jmp	Mon_Index(pc,d1.w)
0000C178                            ; ===========================================================================
0000C178 0000                       Mon_Index:	dc.w Mon_Main-Mon_Index
0000C17A 0000                       		dc.w Mon_Solid-Mon_Index
0000C17C 0000                       		dc.w Mon_BreakOpen-Mon_Index
0000C17E 0000                       		dc.w Mon_Animate-Mon_Index
0000C180 0000                       		dc.w Mon_Display-Mon_Index
0000C182                            ; ===========================================================================
0000C182                            
0000C182                            Mon_Main:	; Routine 0
0000C182 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C186 117C 000E 0016             		move.b	#$E,obHeight(a0)
0000C18C 117C 000E 0017             		move.b	#$E,obWidth(a0)
0000C192 217C 0000 0000 0004        		move.l	#Map_Monitor,obMap(a0)
0000C19A 317C 0680 0002             		move.w	#$680,obGfx(a0)
0000C1A0 117C 0004 0001             		move.b	#4,obRender(a0)
0000C1A6 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000C1AC 117C 000F 0014             		move.b	#$F,obActWid(a0)
0000C1B2 45F8 FC00                  		lea	(v_objstate).w,a2
0000C1B6 7000                       		moveq	#0,d0
0000C1B8 1028 0023                  		move.b	obRespawnNo(a0),d0
0000C1BC 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000C1C2 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000C1C8 6700                       		beq.s	@notbroken	; if not, branch
0000C1CA 117C 0008 0024             		move.b	#8,obRoutine(a0) ; run "Mon_Display" routine
0000C1D0 117C 000B 001A             		move.b	#$B,obFrame(a0)	; use broken monitor frame
0000C1D6 4E75                       		rts	
0000C1D8                            ; ===========================================================================
0000C1D8                            
0000C1D8                            	@notbroken:
0000C1D8 117C 0046 0020             		move.b	#$46,obColType(a0)
0000C1DE 1168 0028 001C             		move.b	obSubtype(a0),obAnim(a0)
0000C1E4                            
0000C1E4                            Mon_Solid:	; Routine 2
0000C1E4 1028 0025                  		move.b	ob2ndRout(a0),d0 ; is monitor set to fall?
0000C1E8 6700                       		beq.s	@normal		; if not, branch
0000C1EA 5500                       		subq.b	#2,d0
0000C1EC 6600                       		bne.s	@fall
0000C1EE                            
0000C1EE                            		; 2nd Routine 2
0000C1EE 7200                       		moveq	#0,d1
0000C1F0 1228 0014                  		move.b	obActWid(a0),d1
0000C1F4 0641 000B                  		addi.w	#$B,d1
0000C1F8 6100 D000                  		bsr.w	ExitPlatform
0000C1FC 0829 0003 0022             		btst	#3,obStatus(a1) ; is Sonic on top of the monitor?
0000C202 6600 0000                  		bne.w	@ontop		; if yes, branch
0000C206 4228 0025                  		clr.b	ob2ndRout(a0)
0000C20A 6000 0000                  		bra.w	Mon_Animate
0000C20E                            ; ===========================================================================
0000C20E                            
0000C20E                            	@ontop:
0000C20E 363C 0010                  		move.w	#$10,d3
0000C212 3428 0008                  		move.w	obX(a0),d2
0000C216 6100 D540                  		bsr.w	MvSonicOnPtfm
0000C21A 6000 0000                  		bra.w	Mon_Animate
0000C21E                            ; ===========================================================================
0000C21E                            
0000C21E                            @fall:		; 2nd Routine 4
0000C21E 6100 0000                  		bsr.w	ObjectFall
0000C222 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000C228 4A41                       		tst.w	d1
0000C22A 6A00 0000                  		bpl.w	Mon_Animate
0000C22E D368 000C                  		add.w	d1,obY(a0)
0000C232 4268 0012                  		clr.w	obVelY(a0)
0000C236 4228 0025                  		clr.b	ob2ndRout(a0)
0000C23A 6000 0000                  		bra.w	Mon_Animate
0000C23E                            ; ===========================================================================
0000C23E                            
0000C23E                            @normal:	; 2nd Routine 0
0000C23E 323C 001A                  		move.w	#$1A,d1
0000C242 343C 000F                  		move.w	#$F,d2
0000C246 6100 0000                  		bsr.w	Mon_SolidSides
0000C24A 6700 0000                  		beq.w	loc_A25C
0000C24E 4A69 0012                  		tst.w	obVelY(a1)
0000C252 6B00                       		bmi.s	loc_A20A
0000C254 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1) ; is Sonic rolling?
0000C25A 6700                       		beq.s	loc_A25C	; if yes, branch
0000C25C 0C29 0000 001C             		cmpi.b	#id_SpinDash,obAnim(a1) ; is Sonic Spindashing?
0000C262 6700                       		beq.s	loc_A25C	; if yes, branch
0000C264 0C29 0000 001C             		cmpi.b	#id_Peelout,obAnim(a1) ; is Sonic Spindashing?
0000C26A 6700                       		beq.s	loc_A25C	; if yes, branch
0000C26C                            
0000C26C                            loc_A20A:
0000C26C 4A41                       		tst.w	d1
0000C26E 6A00                       		bpl.s	loc_A220
0000C270 9769 000C                  		sub.w	d3,obY(a1)
0000C274 6100 CE72                  		bsr.w	loc_74AE
0000C278 117C 0002 0025             		move.b	#2,ob2ndRout(a0)
0000C27E 6000 0000                  		bra.w	Mon_Animate
0000C282                            ; ===========================================================================
0000C282                            
0000C282                            loc_A220:
0000C282 4A40                       		tst.w	d0
0000C284 6700 0000                  		beq.w	loc_A246
0000C288 6B00                       		bmi.s	loc_A230
0000C28A 4A69 0010                  		tst.w	obVelX(a1)
0000C28E 6B00                       		bmi.s	loc_A246
0000C290 6000                       		bra.s	loc_A236
0000C292                            ; ===========================================================================
0000C292                            
0000C292                            loc_A230:
0000C292 4A69 0010                  		tst.w	obVelX(a1)
0000C296 6A00                       		bpl.s	loc_A246
0000C298                            
0000C298                            loc_A236:
0000C298 9169 0008                  		sub.w	d0,obX(a1)
0000C29C 337C 0000 0020             		move.w	#0,obInertia(a1)
0000C2A2 337C 0000 0010             		move.w	#0,obVelX(a1)
0000C2A8                            
0000C2A8                            loc_A246:
0000C2A8 0829 0001 0022             		btst	#1,obStatus(a1)
0000C2AE 6600                       		bne.s	loc_A26A
0000C2B0 08E9 0005 0022             		bset	#5,obStatus(a1)
0000C2B6 08E8 0005 0022             		bset	#5,obStatus(a0)
0000C2BC 6000                       		bra.s	Mon_Animate
0000C2BE                            ; ===========================================================================
0000C2BE                            
0000C2BE                            loc_A25C:
0000C2BE 0828 0005 0022             		btst	#5,obStatus(a0)
0000C2C4 6700                       		beq.s	Mon_Animate
0000C2C6 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1)	; is Sonic in his jumping/rolling animation?
0000C2CC 6700                       		beq.s	loc_A26A	; if so, branch
0000C2CE 337C 0001 001C             		move.w	#1,obAnim(a1)	; clear obAnim and set obNextAni to 1, putting Sonic in his walking animation
0000C2D4                            
0000C2D4                            loc_A26A:
0000C2D4 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000C2DA 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000C2E0                            
0000C2E0                            Mon_Animate:	; Routine 6
0000C2E0 43F9 0000 0000             		lea	(Ani_Monitor).l,a1
0000C2E6 6100 0000                  		bsr.w	AnimateSprite
0000C2EA                            
0000C2EA                            Mon_Display:	; Routine 8
0000C2EA 6100 0000                  		bsr.w	DisplaySprite
0000C30C 4E75                       		rts	
0000C30E                            ; ===========================================================================
0000C30E                            
0000C30E                            Mon_BreakOpen:	; Routine 4
0000C30E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C312 117C 0000 0020             		move.b	#0,obColType(a0)
0000C318 6100 0000                  		bsr.w	FindFreeObj
0000C31C 6600                       		bne.s	Mon_Explode
0000C31E 12BC 0000                  		move.b	#id_PowerUp,0(a1) ; load monitor contents object
0000C322 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000C328 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000C32E 1368 001C 001C             		move.b	obAnim(a0),obAnim(a1)
0000C334                            
0000C334                            Mon_Explode:
0000C334 6100 0000                  		bsr.w	FindFreeObj
0000C338 6600                       		bne.s	@fail
0000C33A 12BC 0000                  		move.b	#id_ExplosionItem,0(a1) ; load explosion object
0000C33E 5429 0024                  		addq.b	#2,obRoutine(a1) ; don't create an animal
0000C342 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000C348 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000C34E                            
0000C34E                            	@fail:
0000C34E 45F8 FC00                  		lea	(v_objstate).w,a2
0000C352 7000                       		moveq	#0,d0
0000C354 1028 0023                  		move.b	obRespawnNo(a0),d0
0000C358 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000C35E 117C 0009 001C             		move.b	#9,obAnim(a0)	; set monitor type to broken
0000C364 6000 0000                  		bra.w	DisplaySprite
0000C364 6000 0000                  		bra.w	DisplaySprite
0000C368                            		include	"_incObj\2E Monitor Content Power-Up.asm"
0000C368                            ; ---------------------------------------------------------------------------
0000C368                            ; Object 2E - contents of monitors
0000C368                            ; ---------------------------------------------------------------------------
0000C368                            
0000C368                            PowerUp:
0000C368 7000                       		moveq	#0,d0
0000C36A 1028 0024                  		move.b	obRoutine(a0),d0
0000C36E 323B 0000                  		move.w	Pow_Index(pc,d0.w),d1
0000C372 4EBB 1000                  		jsr	Pow_Index(pc,d1.w)
0000C376 6000 0000                  		bra.w	DisplaySprite
0000C37A                            ; ===========================================================================
0000C37A 0000                       Pow_Index:	dc.w Pow_Main-Pow_Index
0000C37C 0000                       		dc.w Pow_Move-Pow_Index
0000C37E 0000                       		dc.w Pow_Delete-Pow_Index
0000C380                            ; ===========================================================================
0000C380                            
0000C380                            Pow_Main:	; Routine 0
0000C380 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C384 317C 0680 0002             		move.w	#$680,obGfx(a0)
0000C38A 117C 0024 0001             		move.b	#$24,obRender(a0)
0000C390 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000C396 117C 0008 0014             		move.b	#8,obActWid(a0)
0000C39C 317C FD00 0012             		move.w	#-$300,obVelY(a0)
0000C3A2 7000                       		moveq	#0,d0
0000C3A4 1028 001C                  		move.b	obAnim(a0),d0	; get subtype
0000C3A8 5400                       		addq.b	#2,d0
0000C3AA 1140 001A                  		move.b	d0,obFrame(a0)	; use correct frame
0000C3AE 227C 0000 0000             		movea.l	#Map_Monitor,a1
0000C3B4 D000                       		add.b	d0,d0
0000C3B6 D2F1 0000                  		adda.w	(a1,d0.w),a1
0000C3BA 5249                       		addq.w	#1,a1
0000C3BC 2149 0004                  		move.l	a1,obMap(a0)
0000C3C0                            
0000C3C0                            Pow_Move:	; Routine 2
0000C3C0 4A68 0012                  		tst.w	obVelY(a0)	; is object moving?
0000C3C4 6A00 0000                  		bpl.w	Pow_Checks	; if not, branch
0000C3C8 6100 0000                  		bsr.w	SpeedToPos
0000C3CC 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; reduce object	speed
0000C3D2 4E75                       		rts	
0000C3D4                            ; ===========================================================================
0000C3D4                            
0000C3D4                            Pow_Checks:
0000C3D4 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C3D8 317C 001D 001E             		move.w	#29,obTimeFrame(a0) ; display icon for half a second
0000C3DE                            
0000C3DE                            Pow_ChkEggman:
0000C3DE 1028 001C                  		move.b	obAnim(a0),d0
0000C3E2 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000C3E6 6600                       		bne.s	Pow_ChkSonic
0000C3E8                            		
0000C3E8 4EF9 0000 0000             		jmp	Spik_Hurt
0000C3EE                            		
0000C3EE 4E75                       		rts
0000C3F0                            ; ===========================================================================
0000C3F0                            
0000C3F0                            Pow_ChkSonic:
0000C3F0 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000C3F4 6600                       		bne.s	Pow_ChkShoes
0000C3F6                            
0000C3F6                            	ExtraLife:
0000C3F6 5238 FE12                  		addq.b	#1,(v_lives).w	; add 1 to the number of lives you have
0000C3FA 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update the lives counter
0000C408                            
0000C408                            ; ===========================================================================
0000C408                            
0000C408                            Pow_ChkShoes:
0000C408 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000C40C 6600                       		bne.s	Pow_ChkShield
0000C40E                            
0000C40E 11FC 0001 FE2E             		move.b	#1,(v_shoes).w	; speed up the BG music
0000C414 31FC 04B0 D034             		move.w	#$4B0,(v_player+$34).w	; time limit for the power-up
0000C41A 31FC 0C00 F760             		move.w	#$C00,(v_sonspeedmax).w ; change Sonic's top speed
0000C420 31FC 0018 F762             		move.w	#$18,(v_sonspeedacc).w	; change Sonic's acceleration
0000C426 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w	; change Sonic's deceleration
0000C42C 4A38 F7AA                  		tst.b	(f_lockscreen).w ; is boss mode on?
0000C430 6600                       		bne.s	Pow_NoMus	; if yes, branch
0000C432 0C78 000C FE14             			cmpi.w	#$C,(v_air).w
0000C438 6300                       			bls.s	Pow_NoMus
0000C444                            ; ===========================================================================
0000C444                            
0000C444                            Pow_NoMus:
0000C444 4E75                       		rts	
0000C446                            ; ===========================================================================
0000C446                            
0000C446                            Pow_ChkShield:
0000C446 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000C44A 6600                       		bne.s	Pow_ChkInvinc
0000C44C                            
0000C44C 11FC 0000 F5C8             		move.b	#0,(v_rshield).w ; remove red shield
0000C452 11FC 0000 F5C9             		move.b	#0,(v_gshield).w ; remove g shield
0000C458 11FC 0000 F5CA             		move.b	#0,(v_spshield).w ; remove s shield
0000C45E 11FC 0001 FE2C             		move.b	#1,(v_shield).w	; give Sonic a shield
0000C464 11FC 0000 D180             		move.b	#id_ShieldItem,(v_objspace+$180).w ; load shield object ($38)
0000C474                            ; ===========================================================================
0000C474                            
0000C474                            Pow_ChkInvinc:
0000C474 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000C478 6600                       		bne.s	Pow_ChkRings
0000C47A                            
0000C47A 11FC 0001 FE2D             		move.b	#1,(v_invinc).w	; make Sonic invincible
0000C480 31FC 0560 D032             		move.w	#$560,(v_player+$32).w ; time limit for the power-up
0000C486 11FC 0000 D200             		move.b	#id_InvStars,(v_objspace+$200).w ; load stars object ($3801)
0000C48C 11FC 0001 D21C             		move.b	#1,(v_objspace+$200+obAnim).w
0000C492 11FC 0000 D240             		move.b	#id_InvStars,(v_objspace+$240).w ; load stars object ($3802)
0000C498 11FC 0002 D25C             		move.b	#2,(v_objspace+$240+obAnim).w
0000C49E 11FC 0000 D280             		move.b	#id_InvStars,(v_objspace+$280).w ; load stars object ($3803)
0000C4A4 11FC 0003 D29C             		move.b	#3,(v_objspace+$280+obAnim).w
0000C4AA 11FC 0000 D2C0             		move.b	#id_InvStars,(v_objspace+$2C0).w ; load stars object ($3804)
0000C4B0 11FC 0004 D2DC             		move.b	#4,(v_objspace+$2C0+obAnim).w
0000C4B6 4A38 F7AA                  		tst.b	(f_lockscreen).w ; is boss mode on?
0000C4BA 6600                       		bne.s	Pow_NoMusic	; if yes, branch
0000C4BC 0C78 000C FE14             			cmpi.w	#$C,(v_air).w
0000C4C2 6300                       			bls.s	Pow_NoMusic
0000C4CE                            ; ===========================================================================
0000C4CE                            
0000C4CE                            Pow_NoMusic:
0000C4CE 4E75                       		rts	
0000C4D0                            ; ===========================================================================
0000C4D0                            
0000C4D0                            Pow_ChkRings:
0000C4D0 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000C4D4 6600                       		bne.s	Pow_ChkS
0000C4D6                            
0000C4D6 0678 000A FE20             		addi.w	#10,(v_rings).w	; add 10 rings to the number of rings you have
0000C4DC 0038 0001 FE1D             		ori.b	#1,(f_ringcount).w ; update the ring counter
0000C4E2 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000C4E8 6500                       		bcs.s	Pow_RingSound
0000C4EA 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000C4F0 6700 FF04                  		beq.w	ExtraLife
0000C4F4 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C4FA 6500                       		bcs.s	Pow_RingSound
0000C4FC 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C502 6700 FEF2                  		beq.w	ExtraLife
0000C506                            
0000C506                            	Pow_RingSound:
0000C510                            ; ===========================================================================
0000C510                            
0000C510                            Pow_ChkS:
0000C510 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'?
0000C514 6600                       		bne.s	Pow_ChkSRing
0000C516                            		
0000C516 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all the emeralds?
0000C51C 6700                       		beq.s	PowS2	; if yes, branch
0000C51E 0404 003B                  		subi.b	#$3B,d4
0000C522 7000                       		moveq	#0,d0
0000C524 11FC 0000 F5C3             		move.b	#0,(f_emeraldm).w
0000C52A 11FC 0001 F5C3             		move.b	#1,(f_emeraldm).w
0000C530 6000                       		bra.s	PowSPlay
0000C532                            
0000C532                            PowS2:
0000C532 0678 0032 FE20             		addi.w	#50,(v_rings).w	; add 50 rings to the number of rings you have
0000C538 0038 0005 FE1D             		ori.b	#5,(f_ringcount).w ; update the ring counter
0000C53E 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000C544 6500                       		bcs.s	PowSPlay
0000C546 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000C54C 6700 FEA8                  		beq.w	ExtraLife
0000C550 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C556 6500                       		bcs.s	PowSPlay
0000C558 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C55E 6700 FE96                  		beq.w	ExtraLife	
0000C562                            
0000C562                            PowSPlay:
0000C56C                            
0000C56C                            		
0000C56C                            
0000C56C                            
0000C56C                            Pow_ChkSRing:
0000C56C 0C00 0008                  		cmpi.b	#8,d0		; does monitor contain 'S'?
0000C570 6600                       		bne.s	Pow_ChkRShield
0000C572                            
0000C572                            		
0000C572 0678 0014 FE20             		addi.w	#20,(v_rings).w	; add 20 rings to the number of rings you have
0000C578 0038 0002 FE1D             		ori.b	#2,(f_ringcount).w ; update the ring counter
0000C57E 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000C584 6500                       		bcs.s	Pow_ChkSRingSound
0000C586 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000C58C 6700 FE68                  		beq.w	ExtraLife
0000C590 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C596 6500                       		bcs.s	Pow_ChkSRingSound
0000C598 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C59E 6700 FE56                  		beq.w	ExtraLife	
0000C5A2                            
0000C5A2                            Pow_ChkSRingSound:
0000C5AC                            
0000C5AC                            
0000C5AC                            Pow_ChkRShield:
0000C5AC 0C00 000A                  		cmpi.b	#10,d0		; does monitor contain a g shield?
0000C5B0 6600                       		bne.s	Pow_ChkGShield
0000C5B2                            
0000C5B2 11FC 0000 FE2C             		move.b	#0,(v_shield).w ; remove shield
0000C5B8 11FC 0000 F5C9             		move.b	#0,(v_gshield).w ; remove g shield
0000C5BE 11FC 0000 F5CA             		move.b	#0,(v_spshield).w ; remove s shield
0000C5C4 11FC 0002 F5C8             		move.b	#2,(v_rshield).w ; give Sonic a red shield
0000C5CA 11FC 0000 D180             		move.b	#id_RShieldItem,(v_objspace+$180).w ; load red shield object ($38)
0000C5DA                            
0000C5DA                            Pow_ChkGShield:
0000C5DA 0C00 000B                  		cmpi.b	#11,d0		; does monitor contain a g shield?
0000C5DE 6600                       		bne.s	Pow_ChkSpShield
0000C5E0                            
0000C5E0                            
0000C5E0 11FC 0000 FE2C             		move.b	#0,(v_shield).w ; remove shield
0000C5E6 11FC 0000 F5C8             		move.b	#0,(v_rshield).w ; remove r shield
0000C5EC 11FC 0000 F5CA             		move.b	#0,(v_spshield).w ; remove s shield
0000C5F2 11FC 0001 F5C9             		move.b	#1,(v_gshield).w ; give Sonic a g shield
0000C5F8 11FC 0000 D180             		move.b	#id_GShieldItem,(v_objspace+$180).w ; load g shield object ($38)
0000C5FE                            		
0000C5FE 0678 0023 FE20             		addi.w	#35,(v_rings).w	; add 35 rings to the number of rings you have
0000C604 0038 0002 FE1D             		ori.b	#2,(f_ringcount).w ; update the ring counter
0000C60A 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000C610 6500                       		bcs.s	Pow_ChkGSound
0000C612 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000C618 6700 FDDC                  		beq.w	ExtraLife
0000C61C 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C622 6500                       		bcs.s	Pow_ChkGSound
0000C624 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C62A 6700 FDCA                  		beq.w	ExtraLife	
0000C62E                            
0000C62E                            Pow_ChkGSound:		
0000C638                            
0000C638                            Pow_ChkSpShield:
0000C638 0C00 000C                  		cmpi.b	#12,d0		; does monitor contain a g shield?
0000C63C 6600                       		bne.s	Pow_ChkEnd
0000C63E                            
0000C63E 11FC 0000 FE2C             		move.b	#0,(v_shield).w 		; remove shield
0000C644 11FC 0000 F5C8             		move.b	#0,(v_rshield).w 		; remove r shield
0000C64A 11FC 0000 F5C9             		move.b	#0,(v_gshield).w 		; remove g shield
0000C650 11FC 0001 F5CA             		move.b	#1,(v_spshield).w 		; give sonic a s shield
0000C656 11FC 0000 D180             		move.b	#id_SpShieldItem,(v_objspace+$180).w ; load s shield object ($38)	
0000C666 4E71                       		nop
0000C668                            
0000C668                            Pow_ChkEnd:
0000C668 4E75                       		rts
0000C66A                            ; ===========================================================================
0000C66A                            
0000C66A                            Pow_Delete:	; Routine 4
0000C66A 5368 001E                  		subq.w	#1,obTimeFrame(a0)
0000C66E 6B00 0000                  		bmi.w	DeleteObject	; delete after half a second
0000C672 4E75                       		rts	
0000C672 4E75                       		rts	
0000C674                            		include	"_incObj\26 Monitor (SolidSides subroutine).asm"
0000C674                            ; ---------------------------------------------------------------------------
0000C674                            ; Subroutine to	make the sides of a monitor solid
0000C674                            ; ---------------------------------------------------------------------------
0000C674                            
0000C674                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C674                            
0000C674                            
0000C674                            Mon_SolidSides:
0000C674 43F8 D000                  		lea	(v_player).w,a1
0000C678 3029 0008                  		move.w	obX(a1),d0
0000C67C 9068 0008                  		sub.w	obX(a0),d0
0000C680 D041                       		add.w	d1,d0
0000C682 6B00                       		bmi.s	loc_A4E6
0000C684 3601                       		move.w	d1,d3
0000C686 D643                       		add.w	d3,d3
0000C688 B043                       		cmp.w	d3,d0
0000C68A 6200                       		bhi.s	loc_A4E6
0000C68C 1629 0016                  		move.b	obHeight(a1),d3
0000C690 4883                       		ext.w	d3
0000C692 D443                       		add.w	d3,d2
0000C694 3629 000C                  		move.w	obY(a1),d3
0000C698 9668 000C                  		sub.w	obY(a0),d3
0000C69C D642                       		add.w	d2,d3
0000C69E 6B00                       		bmi.s	loc_A4E6
0000C6A0 D442                       		add.w	d2,d2
0000C6A2 B642                       		cmp.w	d2,d3
0000C6A4 6400                       		bcc.s	loc_A4E6
0000C6A6 4A38 F7C8                  		tst.b	(f_lockmulti).w
0000C6AA 6B00                       		bmi.s	loc_A4E6
0000C6AC 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
0000C6B2 6400                       		bcc.s	loc_A4E6
0000C6B4 4A78 FE08                  		tst.w	(v_debuguse).w
0000C6B8 6600                       		bne.s	loc_A4E6
0000C6BA B240                       		cmp.w	d0,d1
0000C6BC 6400                       		bcc.s	loc_A4DC
0000C6BE D241                       		add.w	d1,d1
0000C6C0 9041                       		sub.w	d1,d0
0000C6C2                            
0000C6C2                            loc_A4DC:
0000C6C2 0C43 0010                  		cmpi.w	#$10,d3
0000C6C6 6500                       		bcs.s	loc_A4EA
0000C6C8                            
0000C6C8                            loc_A4E2:
0000C6C8 7201                       		moveq	#1,d1
0000C6CA 4E75                       		rts	
0000C6CC                            ; ===========================================================================
0000C6CC                            
0000C6CC                            loc_A4E6:
0000C6CC 7200                       		moveq	#0,d1
0000C6CE 4E75                       		rts	
0000C6D0                            ; ===========================================================================
0000C6D0                            
0000C6D0                            loc_A4EA:
0000C6D0 7200                       		moveq	#0,d1
0000C6D2 1228 0014                  		move.b	obActWid(a0),d1
0000C6D6 5841                       		addq.w	#4,d1
0000C6D8 3401                       		move.w	d1,d2
0000C6DA D442                       		add.w	d2,d2
0000C6DC D269 0008                  		add.w	obX(a1),d1
0000C6E0 9268 0008                  		sub.w	obX(a0),d1
0000C6E4 6BE2                       		bmi.s	loc_A4E2
0000C6E6 B242                       		cmp.w	d2,d1
0000C6E8 64DE                       		bcc.s	loc_A4E2
0000C6EA 72FF                       		moveq	#-1,d1
0000C6EC 4E75                       		rts	
0000C6EE                            ; End of function Obj26_SolidSides
0000C6EE                            ; End of function Obj26_SolidSides
0000C6EE                            		include	"_anim\Monitor.asm"
0000C6EE                            ; ---------------------------------------------------------------------------
0000C6EE                            ; Animation script - monitors
0000C6EE                            ; ---------------------------------------------------------------------------
0000C6EE 0000 0000 0000             Ani_Monitor:	dc.w @static-Ani_Monitor, @eggman-Ani_Monitor, @sonic-Ani_Monitor
0000C6F4 0000 0000 0000             		dc.w @shoes-Ani_Monitor, @shield-Ani_Monitor, @invincible-Ani_Monitor
0000C6FA 0000 0000 0000             		dc.w @rings-Ani_Monitor, @s-Ani_Monitor, @goggles-Ani_Monitor
0000C700 0000 0000 0000             		dc.w @breaking-Ani_Monitor, @rshield-Ani_Monitor, @yshield-Ani_Monitor
0000C706 0000                       		dc.w @spshield-Ani_Monitor
0000C708                            		
0000C708 0100 0102 FF               @static:	dc.b 1,	0, 1, 2, afEnd
0000C70E 00                         		even
0000C70E 0100 0303 0103 0302 0303+  @eggman:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, afEnd
0000C71A 00                         		even
0000C71A 0100 0404 0104 0402 0404+  @sonic:		dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, afEnd
0000C726 00                         		even
0000C726 0100 0505 0105 0502 0505+  @shoes:		dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, afEnd
0000C732 00                         		even
0000C732 0100 0606 0106 0602 0606+  @shield:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, afEnd
0000C73E 00                         		even
0000C73E 0100 0707 0107 0702 0707+  @invincible:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, afEnd
0000C74A 00                         		even
0000C74A 0100 0808 0108 0802 0808+  @rings:		dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, afEnd
0000C756 00                         		even
0000C756 0100 0909 0109 0902 0909+  @s:		dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, afEnd
0000C762 00                         		even
0000C762 0100 0A0A 010A 0A02 0A0A+  @goggles:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, afEnd
0000C76E 00                         		even
0000C76E 0200 0102 0BFE 01          @breaking:	dc.b 2,	0, 1, 2, $B, afBack, 1
0000C776 00                         		even
0000C776 0100 0C0C 010C 0C02 0C0C+  @rshield:	dc.b 1,	0, $C, $C, 1, $C, $C, 2, $C, $C, afEnd
0000C782 00                         		even
0000C782 0100 0D0D 010D 0D02 0D0D+  @yshield:	dc.b 1,	0, $D, $D, 1, $D, $D, 2, $D, $D, afEnd
0000C78E 00                         		even
0000C78E 0100 0E0E 010E 0E02 0E0E+  @spshield:	dc.b 1,	0, $E, $E, 1, $E, $E, 2, $E, $E, afEnd
0000C79A 00                         		even
0000C79A 00                         		even
0000C79A                            Map_Monitor:	include	"_maps\Monitor.asm"
0000C79A                            ; --------------------------------------------------------------------------------
0000C79A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000C79A                            ; --------------------------------------------------------------------------------
0000C79A                            
0000C79A                            SME_VSEMD:	
0000C79A 0000 0000                  		dc.w SME_VSEMD_1E-SME_VSEMD, SME_VSEMD_24-SME_VSEMD	
0000C79E 0000 0000                  		dc.w SME_VSEMD_2F-SME_VSEMD, SME_VSEMD_3A-SME_VSEMD	
0000C7A2 0000 0000                  		dc.w SME_VSEMD_45-SME_VSEMD, SME_VSEMD_50-SME_VSEMD	
0000C7A6 0000 0000                  		dc.w SME_VSEMD_5B-SME_VSEMD, SME_VSEMD_66-SME_VSEMD	
0000C7AA 0000 0000                  		dc.w SME_VSEMD_71-SME_VSEMD, SME_VSEMD_7C-SME_VSEMD	
0000C7AE 0000 0000                  		dc.w SME_VSEMD_87-SME_VSEMD, SME_VSEMD_92-SME_VSEMD	
0000C7B2 0000 0000                  		dc.w SME_VSEMD_AC-SME_VSEMD, SME_VSEMD_B7-SME_VSEMD	
0000C7B6 0000                       		dc.w SME_VSEMD_C2-SME_VSEMD	
0000C7B8 01                         SME_VSEMD_1E:	dc.b 1	
0000C7B9 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C7BE 02                         SME_VSEMD_24:	dc.b 2	
0000C7BF F505 0010 F8               		dc.b $F5, 5, 0, $10, $F8	
0000C7C4 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C7C9 02                         SME_VSEMD_2F:	dc.b 2	
0000C7CA F505 0014 F8               		dc.b $F5, 5, 0, $14, $F8	
0000C7CF F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C7D4 02                         SME_VSEMD_3A:	dc.b 2	
0000C7D5 F505 0018 F8               		dc.b $F5, 5, 0, $18, $F8	
0000C7DA F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C7DF 02                         SME_VSEMD_45:	dc.b 2	
0000C7E0 F505 0154 F8               		dc.b $F5, 5, 1, $54, $F8	
0000C7E5 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C7EA 02                         SME_VSEMD_50:	dc.b 2	
0000C7EB F505 0024 F8               		dc.b $F5, 5, 0, $24, $F8	
0000C7F0 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C7F5 02                         SME_VSEMD_5B:	dc.b 2	
0000C7F6 F505 2028 F8               		dc.b $F5, 5, $20, $28, $F8	
0000C7FB F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C800 02                         SME_VSEMD_66:	dc.b 2	
0000C801 F505 002C F8               		dc.b $F5, 5, 0, $2C, $F8	
0000C806 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C80B 02                         SME_VSEMD_71:	dc.b 2	
0000C80C F505 2030 F8               		dc.b $F5, 5, $20, $30, $F8	
0000C811 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C816 02                         SME_VSEMD_7C:	dc.b 2	
0000C817 F505 0034 F8               		dc.b $F5, 5, 0, $34, $F8	
0000C81C F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C821 02                         SME_VSEMD_87:	dc.b 2	
0000C822 F505 0020 F8               		dc.b $F5, 5, 0, $20, $F8	
0000C827 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C82C 05                         SME_VSEMD_92:	dc.b 5	
0000C82D 010C 0038 F0               		dc.b 1, $C, 0, $38, $F0	
0000C832 0900 0003 F0               		dc.b 9, 0, 0, 3, $F0	
0000C837 0900 0007 F8               		dc.b 9, 0, 0, 7, $F8	
0000C83C 0900 000B 00               		dc.b 9, 0, 0, $B, 0	
0000C841 0900 000F 08               		dc.b 9, 0, 0, $F, 8	
0000C846 02                         SME_VSEMD_AC:	dc.b 2	
0000C847 F505 001C F8               		dc.b $F5, 5, 0, $1C, $F8	
0000C84C F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C851 02                         SME_VSEMD_B7:	dc.b 2	
0000C852 F505 2040 F8               		dc.b $F5, 5, $20, $40, $F8	
0000C857 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C85C 02                         SME_VSEMD_C2:	dc.b 2	
0000C85D F505 003C F8               		dc.b $F5, 5, 0, $3C, $F8	
0000C862 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C868 00                         		even
0000C868 00                         		even
0000C868                            
0000C868                            		include	"_incObj\0E Title Screen Sonic.asm"
0000C868                            ; ---------------------------------------------------------------------------
0000C868                            ; Object 0E - Sonic on the title screen
0000C868                            ; ---------------------------------------------------------------------------
0000C868                            
0000C868                            TitleSonic:
0000C868 7000                       		moveq	#0,d0
0000C86A 1028 0024                  		move.b	obRoutine(a0),d0
0000C86E 323B 0000                  		move.w	TSon_Index(pc,d0.w),d1
0000C872 4EFB 1000                  		jmp	TSon_Index(pc,d1.w)
0000C876                            ; ===========================================================================
0000C876 0000                       TSon_Index:	dc.w TSon_Main-TSon_Index
0000C878 0000                       		dc.w TSon_Delay-TSon_Index
0000C87A 0000                       		dc.w TSon_Move-TSon_Index
0000C87C 0000                       		dc.w TSon_Animate-TSon_Index
0000C87E                            ; ===========================================================================
0000C87E                            
0000C87E                            TSon_Main:	; Routine 0
0000C87E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C882 317C 00F0 0008             		move.w	#$F0,obX(a0)
0000C888 317C 00DE 000A             		move.w	#$DE,obScreenY(a0) ; position is fixed to screen
0000C88E 217C 0000 0000 0004        		move.l	#Map_TSon,obMap(a0)
0000C896 317C 2348 0002             		move.w	#$2348,obGfx(a0)
0000C89C 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000C8A2 117C 001D 001F             		move.b	#29,obDelayAni(a0) ; set time delay to 0.5 seconds
0000C8A8 43F9 0000 0000             		lea	(Ani_TSon).l,a1
0000C8AE 6100 0000                  		bsr.w	AnimateSprite
0000C8B2                            
0000C8B2                            TSon_Delay:	;Routine 2
0000C8B2 5328 001F                  		subq.b	#1,obDelayAni(a0) ; subtract 1 from time delay
0000C8B6 6A00                       		bpl.s	@wait		; if time remains, branch
0000C8B8 5428 0024                  		addq.b	#2,obRoutine(a0) ; go to next routine
0000C8BC 6000 0000                  		bra.w	DisplaySprite
0000C8C0                            
0000C8C0                            	@wait:
0000C8C0 4E75                       		rts	
0000C8C2                            ; ===========================================================================
0000C8C2                            
0000C8C2                            TSon_Move:	; Routine 4
0000C8C2 5168 000A                  		subq.w	#8,obScreenY(a0) ; move Sonic up
0000C8C6 0C68 0096 000A             		cmpi.w	#$96,obScreenY(a0) ; has Sonic reached final position?
0000C8CC 6600                       		bne.s	@display	; if not, branch
0000C8CE 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C8D2                            
0000C8D2                            	@display:
0000C8D2 6000 0000                  		bra.w	DisplaySprite
0000C8D6                            
0000C8D6 4E75                       		rts	
0000C8D8                            ; ===========================================================================
0000C8D8                            
0000C8D8                            TSon_Animate:	; Routine 6
0000C8D8 43F9 0000 0000             		lea	(Ani_TSon).l,a1
0000C8DE 6100 0000                  		bsr.w	AnimateSprite
0000C8E2 6000 0000                  		bra.w	DisplaySprite
0000C8E6                            
0000C8E6 4E75                       		rts	
0000C8E6 4E75                       		rts	
0000C8E8                            		include	"_incObj\0F Press Start and TM.asm"
0000C8E8                            ; ---------------------------------------------------------------------------
0000C8E8                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000C8E8                            ; ---------------------------------------------------------------------------
0000C8E8                            
0000C8E8                            PSBTM:
0000C8E8 7000                       		moveq	#0,d0
0000C8EA 1028 0024                  		move.b	obRoutine(a0),d0
0000C8EE 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000C8F2 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000C8F6 6000 0000                  		bra.w	DisplaySprite
0000C8FA                            ; ===========================================================================
0000C8FA 0000                       Obj0F_Index:	dc.w Obj0F_Init-Obj0F_Index	
0000C8FC 0000                       		dc.w Obj0F_Main-Obj0F_Index
0000C8FE 0000                       		dc.w MENURTS-Obj0F_Index	
0000C900                            ; ===========================================================================
0000C900                            Obj0F_Init:
0000C900 5428 0024                  	addq.b	#2,obRoutine(a0) ; => Obj0F_Main
0000C904 217C 0000 0000 0004            move.l   #Map_TitleMenu,4(a0)
0000C90C 317C 0101 0008                 move.w   #$101,8(a0)
0000C912 317C 0151 000A                 move.w   #$151,$A(a0)
0000C918 317C 0512 0002             	move.w	#$512,2(a0)
0000C91E 0238 0001 FFB0             	andi.b	#1,(Title_screen_option).w
0000C924 1178 FFB0 001A             	move.b	(Title_screen_option).w,mapping_frame(a0)
0000C92A                            
0000C92A                            
0000C92A                            Obj0F_Main:
0000C92A 7400                             moveq   #0,d2
0000C92C 1438 FFB0                        move.b   (Title_screen_option).w,d2
0000C930 1038 F605                        move.b   ($FFFFF605).w,d0
0000C934 0800 0000                        btst   #0,d0
0000C938 6700                             beq.s   MAIN2
0000C93A 5302                             subq.b   #1,d2
0000C93C 6400                             bcc.s   MAIN2
0000C93E 143C 0001                        move.b   #1,d2
0000C942                            
0000C942                            MAIN2:
0000C942 0800 0001                        btst   #1,d0
0000C946 6700                             beq.s   MAIN3
0000C948 5202                             addq.b   #1,d2
0000C94A 0C02 0002                        cmpi.b   #2,d2
0000C94E 6500                             blo.s   MAIN3
0000C950 7400                             moveq   #0,d2
0000C952                            
0000C952                            MAIN3:
0000C952 1142 001A                        move.b   d2,$1A(a0)
0000C956 11C2 FFB0                        move.b   d2,(Title_screen_option).w
0000C95A 0200 0003                        andi.b   #3,d0
0000C95E 6700                             beq.s   MENURTS   ; rts
0000C960 303C 00CD                        move.w   #$CD,d0 ; selection blip sound
0000C964 4EB8 1250                        jsr   PlaySound_Special
0000C968                            
0000C968                            MENURTS:
0000C968 4E75                             rts															 
0000C96A                            ; ===========================================================================
0000C96A                            
0000C96A                            Map_TitleMenu:
0000C96A                            		include "_maps\Title Screen Menu.asm"		
0000C96A                            ; --------------------------------------------------------------------------------
0000C96A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000C96A                            ; --------------------------------------------------------------------------------
0000C96A                            
0000C96A                            SME_g2Qfx:	
0000C96A 0000 0000                  		dc.w SME_g2Qfx_6-SME_g2Qfx, SME_g2Qfx_6B-SME_g2Qfx	
0000C96E 10                         SME_g2Qfx_6:	dc.b $10	
0000C96F E004 0020 F8               		dc.b $E0, 4, 0, $20, $F8	
0000C974 E000 000E 08               		dc.b $E0, 0, 0, $E, 8	
0000C979 E000 001F 10               		dc.b $E0, 0, 0, $1F, $10	
0000C97E E000 0021 18               		dc.b $E0, 0, 0, $21, $18	
0000C983 E000 0014 28               		dc.b $E0, 0, 0, $14, $28	
0000C988 E000 000E 30               		dc.b $E0, 0, 0, $E, $30	
0000C98D E000 001A 38               		dc.b $E0, 0, 0, $1A, $38	
0000C992 E000 0012 40               		dc.b $E0, 0, 0, $12, $40	
0000C997 F000 001C 04               		dc.b $F0, 0, 0, $1C, 4	
0000C99C F000 001D 0C               		dc.b $F0, 0, 0, $1D, $C	
0000C9A1 F000 0021 14               		dc.b $F0, 0, 0, $21, $14	
0000C9A6 F000 0016 1C               		dc.b $F0, 0, 0, $16, $1C	
0000C9AB F000 001C 24               		dc.b $F0, 0, 0, $1C, $24	
0000C9B0 F000 001B 2C               		dc.b $F0, 0, 0, $1B, $2C	
0000C9B5 F000 0020 34               		dc.b $F0, 0, 0, $20, $34	
0000C9BA E004 0028 E0               		dc.b $E0, 4, 0, $28, $E0	
0000C9BF 10                         SME_g2Qfx_6B:	dc.b $10	
0000C9C0 E004 0020 F8               		dc.b $E0, 4, 0, $20, $F8	
0000C9C5 E000 000E 08               		dc.b $E0, 0, 0, $E, 8	
0000C9CA E000 001F 10               		dc.b $E0, 0, 0, $1F, $10	
0000C9CF E000 0021 18               		dc.b $E0, 0, 0, $21, $18	
0000C9D4 E000 0014 28               		dc.b $E0, 0, 0, $14, $28	
0000C9D9 E000 000E 30               		dc.b $E0, 0, 0, $E, $30	
0000C9DE E000 001A 38               		dc.b $E0, 0, 0, $1A, $38	
0000C9E3 E000 0012 40               		dc.b $E0, 0, 0, $12, $40	
0000C9E8 F000 001C 04               		dc.b $F0, 0, 0, $1C, 4	
0000C9ED F000 001D 0C               		dc.b $F0, 0, 0, $1D, $C	
0000C9F2 F000 0021 14               		dc.b $F0, 0, 0, $21, $14	
0000C9F7 F000 0016 1C               		dc.b $F0, 0, 0, $16, $1C	
0000C9FC F000 001C 24               		dc.b $F0, 0, 0, $1C, $24	
0000CA01 F000 001B 2C               		dc.b $F0, 0, 0, $1B, $2C	
0000CA06 F000 0020 34               		dc.b $F0, 0, 0, $20, $34	
0000CA0B F004 0028 E0               		dc.b $F0, 4, 0, $28, $E0
0000CA10                            		even
0000CA10                            		even
0000CA10                            		even
0000CA10                            
0000CA10                            		include	"_anim\Title Screen Sonic.asm"
0000CA10                            ; ---------------------------------------------------------------------------
0000CA10                            ; Animation script - Sonic on the title screen
0000CA10                            ; ---------------------------------------------------------------------------
0000CA10 0000                       Ani_TSon:	dc.w byte_A706-Ani_TSon
0000CA12 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	afBack, 2
0000CA1E 00                         		even
0000CA1E 00                         		even
0000CA1E                            		include	"_anim\Press Start and TM.asm"
0000CA1E                            ; ---------------------------------------------------------------------------
0000CA1E                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000CA1E                            ; ---------------------------------------------------------------------------
0000CA1E 0000                       Ani_PSBTM:	dc.w @flash-Ani_PSBTM
0000CA20 1F00 01FF                  @flash:		dc.b $1F, 0, 1,	afEnd
0000CA24                            		even
0000CA24                            		even
0000CA24                            
0000CA24                            		include	"_incObj\sub AnimateSprite.asm"
0000CA24                            ; ---------------------------------------------------------------------------
0000CA24                            ; Subroutine to	animate	a sprite using an animation script
0000CA24                            ; ---------------------------------------------------------------------------
0000CA24                            
0000CA24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CA24                            
0000CA24                            
0000CA24                            AnimateSprite:
0000CA24 7000                       		moveq	#0,d0
0000CA26 1028 001C                  		move.b	obAnim(a0),d0	; move animation number	to d0
0000CA2A B028 001D                  		cmp.b	obNextAni(a0),d0 ; is animation set to restart?
0000CA2E 6700                       		beq.s	Anim_Run	; if not, branch
0000CA30                            
0000CA30 1140 001D                  		move.b	d0,obNextAni(a0) ; set to "no restart"
0000CA34 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset animation
0000CA3A 117C 0000 001E             		move.b	#0,obTimeFrame(a0) ; reset frame duration
0000CA40                            
0000CA40                            Anim_Run:
0000CA40 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0000CA44 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000CA46 D040                       		add.w	d0,d0
0000CA48 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000CA4C 1151 001E                  		move.b	(a1),obTimeFrame(a0) ; load frame duration
0000CA50 7200                       		moveq	#0,d1
0000CA52 1228 001B                  		move.b	obAniFrame(a0),d1 ; load current frame number
0000CA56 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000CA5A 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000CA5C                            
0000CA5C                            Anim_Next:
0000CA5C 1200                       		move.b	d0,d1
0000CA5E 0200 001F                  		andi.b	#$1F,d0
0000CA62 1140 001A                  		move.b	d0,obFrame(a0)	; load sprite number
0000CA66 1028 0022                  		move.b	obStatus(a0),d0
0000CA6A E719                       		rol.b	#3,d1
0000CA6C B101                       		eor.b	d0,d1
0000CA6E 0201 0003                  		andi.b	#3,d1
0000CA72 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0000CA78 8328 0001                  		or.b	d1,obRender(a0)
0000CA7C 5228 001B                  		addq.b	#1,obAniFrame(a0) ; next frame number
0000CA80                            
0000CA80                            Anim_Wait:
0000CA80 4E75                       		rts	
0000CA82                            ; ===========================================================================
0000CA82                            
0000CA82                            Anim_End_FF:
0000CA82 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000CA84 6600                       		bne.s	Anim_End_FE	; if not, branch
0000CA86 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; restart the animation
0000CA8C 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000CA90 60CA                       		bra.s	Anim_Next
0000CA92                            ; ===========================================================================
0000CA92                            
0000CA92                            Anim_End_FE:
0000CA92 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000CA94 6600                       		bne.s	Anim_End_FD	; if not, branch
0000CA96 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000CA9A 9128 001B                  		sub.b	d0,obAniFrame(a0) ; jump back d0 bytes in the script
0000CA9E 9200                       		sub.b	d0,d1
0000CAA0 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000CAA4 60B6                       		bra.s	Anim_Next
0000CAA6                            ; ===========================================================================
0000CAA6                            
0000CAA6                            Anim_End_FD:
0000CAA6 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000CAA8 6600                       		bne.s	Anim_End_FC	; if not, branch
0000CAAA 1171 1002 001C             		move.b	2(a1,d1.w),obAnim(a0) ; read next byte, run that animation
0000CAB0                            
0000CAB0                            Anim_End_FC:
0000CAB0 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000CAB2 6600                       		bne.s	Anim_End_FB	; if not, branch
0000CAB4 5428 0024                  		addq.b	#2,obRoutine(a0) ; jump to next routine
0000CAB8                            
0000CAB8                            Anim_End_FB:
0000CAB8 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000CABA 6600                       		bne.s	Anim_End_FA	; if not, branch
0000CABC 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset animation
0000CAC2 4228 0025                  		clr.b	ob2ndRout(a0)	; reset	2nd routine counter
0000CAC6                            
0000CAC6                            Anim_End_FA:
0000CAC6 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000CAC8 6600                       		bne.s	Anim_End	; if not, branch
0000CACA 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; jump to next routine
0000CACE                            
0000CACE                            Anim_End:
0000CACE 4E75                       		rts	
0000CAD0                            ; End of function AnimateSprite
0000CAD0                            ; End of function AnimateSprite
0000CAD0                            
0000CAD0                            Map_PSB:	include	"_maps\Press Start and TM.asm"
0000CAD0                            ; ---------------------------------------------------------------------------
0000CAD0                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000CAD0                            ; ---------------------------------------------------------------------------
0000CAD0                            Map_PSB_internal:
0000CAD0 0000                       		dc.w byte_A7CD-Map_PSB_internal
0000CAD2 0000                       		dc.w M_PSB_PSB-Map_PSB_internal
0000CAD4 0000                       		dc.w M_PSB_Limiter-Map_PSB_internal
0000CAD6 0000                       		dc.w M_PSB_TM-Map_PSB_internal
0000CAD8 06                         M_PSB_PSB:	dc.b 6			; "PRESS START BUTTON"
0000CAD9 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000CADE 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000CAE3 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000CAE8 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000CAED 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000CAF2 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000CAF7 1E                         M_PSB_Limiter:	dc.b $1E		; sprite line limiter
0000CAF8 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CAFD B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CB02 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CB07 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CB0C B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CB11 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CB16 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CB1B B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CB20 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CB25 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CB2A D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CB2F D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CB34 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CB39 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CB3E D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CB43 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CB48 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CB4D D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CB52 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CB57 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CB5C F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CB61 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CB66 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CB6B F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CB70 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CB75 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CB7A F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CB7F F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CB84 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CB89 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CB8E 01                         M_PSB_TM:	dc.b 1			; "TM"
0000CB8F FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000CB94                            		even
0000CB94                            		even
0000CB94                            Map_TSon:	include	"_maps\Title Screen Sonic.asm"
0000CB94                            ; ---------------------------------------------------------------------------
0000CB94                            ; Sprite mappings - Sonic on the title screen
0000CB94                            ; ---------------------------------------------------------------------------
0000CB94                            Map_TSon_internal:
0000CB94 0000                       		dc.w byte_A898-Map_TSon_internal
0000CB96 0000                       		dc.w byte_A8CB-Map_TSon_internal
0000CB98 0000                       		dc.w byte_A917-Map_TSon_internal
0000CB9A 0000                       		dc.w byte_A96D-Map_TSon_internal
0000CB9C 0000                       		dc.w byte_A9AF-Map_TSon_internal
0000CB9E 0000                       		dc.w byte_A9E7-Map_TSon_internal
0000CBA0 0000                       		dc.w byte_AA47-Map_TSon_internal
0000CBA2 0000                       		dc.w byte_AAB1-Map_TSon_internal
0000CBA4 0A                         byte_A898:	dc.b $A
0000CBA5 0808 0000 08               		dc.b 8,	8, 0, 0, 8
0000CBAA 100F 0003 08               		dc.b $10, $F, 0, 3, 8
0000CBAF 100F 0013 28               		dc.b $10, $F, 0, $13, $28
0000CBB4 300E 0023 08               		dc.b $30, $E, 0, $23, 8
0000CBB9 300E 002F 28               		dc.b $30, $E, 0, $2F, $28
0000CBBE 480D 003B 00               		dc.b $48, $D, 0, $3B, 0
0000CBC3 4809 0043 20               		dc.b $48, 9, 0,	$43, $20
0000CBC8 4800 0049 38               		dc.b $48, 0, 0,	$49, $38
0000CBCD 580C 004A 08               		dc.b $58, $C, 0, $4A, 8
0000CBD2 5800 004E 28               		dc.b $58, 0, 0,	$4E, $28
0000CBD7 0F                         byte_A8CB:	dc.b $F
0000CBD8 480E 01BD 20               		dc.b $48, $E, 1, $BD, $20
0000CBDD 3805 01C9 38               		dc.b $38, 5, 1,	$C9, $38
0000CBE2 4000 01CD 30               		dc.b $40, 0, 1,	$CD, $30
0000CBE7 4800 01CE 40               		dc.b $48, 0, 1,	$CE, $40
0000CBEC 6000 01CF 20               		dc.b $60, 0, 1,	$CF, $20
0000CBF1 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000CBF6 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000CBFB 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000CC00 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000CC05 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000CC0A 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000CC0F 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000CC14 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000CC19 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000CC1E 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000CC23 11                         byte_A917:	dc.b $11
0000CC24 380E 01BD 28               		dc.b $38, $E, 1, $BD, $28
0000CC29 2805 01C9 40               		dc.b $28, 5, 1,	$C9, $40
0000CC2E 3000 01CD 38               		dc.b $30, 0, 1,	$CD, $38
0000CC33 3800 01CE 48               		dc.b $38, 0, 1,	$CE, $48
0000CC38 5000 01CF 28               		dc.b $50, 0, 1,	$CF, $28
0000CC3D 200F 01A9 08               		dc.b $20, $F, 1, $A9, 8
0000CC42 2003 01B9 28               		dc.b $20, 3, 1,	$B9, $28
0000CC47 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000CC4C 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000CC51 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000CC56 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000CC5B 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000CC60 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000CC65 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000CC6A 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000CC6F 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000CC74 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000CC79 0D                         byte_A96D:	dc.b $D
0000CC7A 100F 00A3 08               		dc.b $10, $F, 0, $A3, 8
0000CC7F 0808 00B3 28               		dc.b 8,	8, 0, $B3, $28
0000CC84 100F 00B6 28               		dc.b $10, $F, 0, $B6, $28
0000CC89 1800 00C6 48               		dc.b $18, 0, 0,	$C6, $48
0000CC8E 2006 00C7 48               		dc.b $20, 6, 0,	$C7, $48
0000CC93 3800 00CD 48               		dc.b $38, 0, 0,	$CD, $48
0000CC98 300D 00CE 08               		dc.b $30, $D, 0, $CE, 8
0000CC9D 300E 00D6 28               		dc.b $30, $E, 0, $D6, $28
0000CCA2 400B 00E2 10               		dc.b $40, $B, 0, $E2, $10
0000CCA7 4808 00EE 28               		dc.b $48, 8, 0,	$EE, $28
0000CCAC 5001 00F1 08               		dc.b $50, 1, 0,	$F1, 8
0000CCB1 5004 00F3 28               		dc.b $50, 4, 0,	$F3, $28
0000CCB6 5800 00F5 28               		dc.b $58, 0, 0,	$F5, $28
0000CCBB 0B                         byte_A9AF:	dc.b $B
0000CCBC 080F 00F6 10               		dc.b 8,	$F, 0, $F6, $10
0000CCC1 080B 0106 30               		dc.b 8,	$B, 1, 6, $30
0000CCC6 1006 0112 48               		dc.b $10, 6, 1,	$12, $48
0000CCCB 280E 0118 18               		dc.b $28, $E, 1, $18, $18
0000CCD0 280E 0124 38               		dc.b $28, $E, 1, $24, $38
0000CCD5 2801 0130 10               		dc.b $28, 1, 1,	$30, $10
0000CCDA 400E 0132 10               		dc.b $40, $E, 1, $32, $10
0000CCDF 4006 013E 30               		dc.b $40, 6, 1,	$3E, $30
0000CCE4 4004 0144 40               		dc.b $40, 4, 1,	$44, $40
0000CCE9 4800 0146 40               		dc.b $48, 0, 1,	$46, $40
0000CCEE 5808 0147 18               		dc.b $58, 8, 1,	$47, $18
0000CCF3 13                         byte_A9E7:	dc.b $13
0000CCF4 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000CCF9 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000CCFE 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000CD03 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000CD08 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000CD0D 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000CD12 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000CD17 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000CD1C 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000CD21 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000CD26 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000CD2B 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000CD30 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000CD35 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000CD3A 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000CD3F 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000CD44 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000CD49 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000CD4E 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000CD53 15                         byte_AA47:	dc.b $15
0000CD54 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000CD59 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000CD5E 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000CD63 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000CD68 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000CD6D 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000CD72 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000CD77 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000CD7C 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000CD81 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000CD86 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000CD8B 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000CD90 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000CD95 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000CD9A 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000CD9F 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000CDA4 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000CDA9 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000CDAE 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000CDB3 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000CDB8 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000CDBD 16                         byte_AAB1:	dc.b $16
0000CDBE 1804 01F9 38               		dc.b $18, 4, 1,	$F9, $38
0000CDC3 2000 01FB 38               		dc.b $20, 0, 1,	$FB, $38
0000CDC8 2808 01FC 30               		dc.b $28, 8, 1,	$FC, $30
0000CDCD 3001 01FF 30               		dc.b $30, 1, 1,	$FF, $30
0000CDD2 300B 0201 38               		dc.b $30, $B, 2, 1, $38
0000CDD7 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000CDDC 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000CDE1 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000CDE6 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000CDEB 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000CDF0 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000CDF5 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000CDFA 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000CDFF 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000CE04 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000CE09 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000CE0E 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000CE13 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000CE18 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000CE1D 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000CE22 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000CE27 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000CE2C                            		even
0000CE2C                            		even
0000CE2C                            
0000CE2C                            		include	"_incObj\2B Chopper.asm"
0000CE2C                            ; ---------------------------------------------------------------------------
0000CE2C                            ; Object 2B - Chopper enemy (GHZ)
0000CE2C                            ; ---------------------------------------------------------------------------
0000CE2C                            
0000CE2C                            Chopper:
0000CE2C 7000                       		moveq	#0,d0
0000CE2E 1028 0024                  		move.b	obRoutine(a0),d0
0000CE32 323B 0000                  		move.w	Chop_Index(pc,d0.w),d1
0000CE36 4EBB 1000                  		jsr	Chop_Index(pc,d1.w)
0000CE3A 6000 0000                  		bra.w	RememberState
0000CE3E                            ; ===========================================================================
0000CE3E 0000                       Chop_Index:	dc.w Chop_Main-Chop_Index
0000CE40 0000                       		dc.w Chop_ChgSpeed-Chop_Index
0000CE42                            
0000CE42 =00000030                  chop_origY:	equ $30
0000CE42                            ; ===========================================================================
0000CE42                            
0000CE42                            Chop_Main:	; Routine 0
0000CE42 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CE46 217C 0000 0000 0004        		move.l	#Map_Chop,obMap(a0)
0000CE4E 317C 047B 0002             		move.w	#$47B,obGfx(a0)
0000CE54 117C 0004 0001             		move.b	#4,obRender(a0)
0000CE5A 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000CE60 117C 0009 0020             		move.b	#9,obColType(a0)
0000CE66 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000CE6C 317C F900 0012             		move.w	#-$700,obVelY(a0) ; set vertical speed
0000CE72 3168 000C 0030             		move.w	obY(a0),chop_origY(a0) ; save original position
0000CE78                            
0000CE78                            Chop_ChgSpeed:	; Routine 2
0000CE78 43F9 0000 0000             		lea	(Ani_Chop).l,a1
0000CE7E 6100 FBA4                  		bsr.w	AnimateSprite
0000CE82 6100 0000                  		bsr.w	SpeedToPos
0000CE86 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; reduce speed
0000CE8C 3028 0030                  		move.w	chop_origY(a0),d0
0000CE90 B068 000C                  		cmp.w	obY(a0),d0	; has Chopper returned to its original position?
0000CE94 6400                       		bcc.s	@chganimation	; if not, branch
0000CE96 3140 000C                  		move.w	d0,obY(a0)
0000CE9A 317C F900 0012             		move.w	#-$700,obVelY(a0) ; set vertical speed
0000CEA0                            
0000CEA0                            	@chganimation:
0000CEA0 117C 0001 001C             		move.b	#1,obAnim(a0)	; use fast animation
0000CEA6 0440 00C0                  		subi.w	#$C0,d0
0000CEAA B068 000C                  		cmp.w	obY(a0),d0
0000CEAE 6400                       		bcc.s	@nochg
0000CEB0 117C 0000 001C             		move.b	#0,obAnim(a0)	; use slow animation
0000CEB6 4A68 0012                  		tst.w	obVelY(a0)	; is Chopper at	its highest point?
0000CEBA 6B00                       		bmi.s	@nochg		; if not, branch
0000CEBC 117C 0002 001C             		move.b	#2,obAnim(a0)	; use stationary animation
0000CEC2                            
0000CEC2                            	@nochg:
0000CEC2 4E75                       		rts	
0000CEC2 4E75                       		rts	
0000CEC4                            		include	"_anim\Chopper.asm"
0000CEC4                            ; ---------------------------------------------------------------------------
0000CEC4                            ; Animation script - Chopper enemy
0000CEC4                            ; ---------------------------------------------------------------------------
0000CEC4 0000                       Ani_Chop:	dc.w @slow-Ani_Chop
0000CEC6 0000                       		dc.w @fast-Ani_Chop
0000CEC8 0000                       		dc.w @still-Ani_Chop
0000CECA 0700 01FF                  @slow:		dc.b 7,	0, 1, afEnd
0000CECE 0300 01FF                  @fast:		dc.b 3,	0, 1, afEnd
0000CED2 0700 FF                    @still:		dc.b 7,	0, afEnd
0000CED6 00                         		even
0000CED6 00                         		even
0000CED6                            Map_Chop:	include	"_maps\Chopper.asm"
0000CED6                            ; ---------------------------------------------------------------------------
0000CED6                            ; Sprite mappings - Chopper enemy (GHZ)
0000CED6                            ; ---------------------------------------------------------------------------
0000CED6                            Map_Chop_internal:
0000CED6 0000                       		dc.w @mouthshut-Map_Chop_internal
0000CED8 0000                       		dc.w @mouthopen-Map_Chop_internal
0000CEDA 01                         @mouthshut:	dc.b 1
0000CEDB F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0000CEE0 01                         @mouthopen:	dc.b 1
0000CEE1 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000CEE6                            		even
0000CEE6                            		even
0000CEE6                            		include	"_incObj\2C Jaws.asm"
0000CEE6                            ; ---------------------------------------------------------------------------
0000CEE6                            ; Object 2C - Jaws enemy (LZ)
0000CEE6                            ; ---------------------------------------------------------------------------
0000CEE6                            
0000CEE6                            Jaws:
0000CEE6 7000                       		moveq	#0,d0
0000CEE8 1028 0024                  		move.b	obRoutine(a0),d0
0000CEEC 323B 0000                  		move.w	Jaws_Index(pc,d0.w),d1
0000CEF0 4EFB 1000                  		jmp	Jaws_Index(pc,d1.w)
0000CEF4                            ; ===========================================================================
0000CEF4 0000                       Jaws_Index:	dc.w Jaws_Main-Jaws_Index
0000CEF6 0000                       		dc.w Jaws_Turn-Jaws_Index
0000CEF8                            
0000CEF8 =00000030                  jaws_timecount:	equ $30
0000CEF8 =00000032                  jaws_timedelay:	equ $32
0000CEF8                            ; ===========================================================================
0000CEF8                            
0000CEF8                            Jaws_Main:	; Routine 0
0000CEF8 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CEFC 217C 0000 0000 0004        		move.l	#Map_Jaws,obMap(a0)
0000CF04 317C 2486 0002             		move.w	#$2486,obGfx(a0)
0000CF0A 0028 0004 0001             		ori.b	#4,obRender(a0)
0000CF10 117C 000A 0020             		move.b	#$A,obColType(a0)
0000CF16 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000CF1C 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000CF22 7000                       		moveq	#0,d0
0000CF24 1028 0028                  		move.b	obSubtype(a0),d0 ; load object subtype number
0000CF28 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000CF2A 5340                       		subq.w	#1,d0
0000CF2C 3140 0030                  		move.w	d0,jaws_timecount(a0) ; set turn delay time
0000CF30 3140 0032                  		move.w	d0,jaws_timedelay(a0)
0000CF34 317C FFC0 0010             		move.w	#-$40,obVelX(a0) ; move Jaws to the left
0000CF3A 0828 0000 0022             		btst	#0,obStatus(a0)	; is Jaws facing left?
0000CF40 6700                       		beq.s	Jaws_Turn	; if yes, branch
0000CF42 4468 0010                  		neg.w	obVelX(a0)	; move Jaws to the right
0000CF46                            
0000CF46                            Jaws_Turn:	; Routine 2
0000CF46 5368 0030                  		subq.w	#1,jaws_timecount(a0) ; subtract 1 from turn delay time
0000CF4A 6A00                       		bpl.s	@animate	; if time remains, branch
0000CF4C 3168 0032 0030             		move.w	jaws_timedelay(a0),jaws_timecount(a0) ; reset turn delay time
0000CF52 4468 0010                  		neg.w	obVelX(a0)	; change speed direction
0000CF56 0868 0000 0022             		bchg	#0,obStatus(a0)	; change Jaws facing direction
0000CF5C 117C 0001 001D             		move.b	#1,obNextAni(a0) ; reset animation
0000CF62                            
0000CF62                            	@animate:
0000CF62 43F9 0000 0000             		lea	(Ani_Jaws).l,a1
0000CF68 6100 FABA                  		bsr.w	AnimateSprite
0000CF6C 6100 0000                  		bsr.w	SpeedToPos
0000CF70 6000 0000                  		bra.w	RememberState
0000CF70 6000 0000                  		bra.w	RememberState
0000CF74                            		include	"_anim\Jaws.asm"
0000CF74                            ; ---------------------------------------------------------------------------
0000CF74                            ; Animation script - Jaws enemy
0000CF74                            ; ---------------------------------------------------------------------------
0000CF74 0000                       Ani_Jaws:	dc.w @swim-Ani_Jaws
0000CF76 0700 0102 03FF             @swim:		dc.b 7,	0, 1, 2, 3, afEnd
0000CF7C                            		even
0000CF7C                            		even
0000CF7C                            Map_Jaws:	include	"_maps\Jaws.asm"
0000CF7C                            ; --------------------------------------------------------------------------------
0000CF7C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000CF7C                            ; --------------------------------------------------------------------------------
0000CF7C                            
0000CF7C                            SME_O5C0c:	
0000CF7C 0000 0000                  		dc.w SME_O5C0c_8-SME_O5C0c, SME_O5C0c_13-SME_O5C0c	
0000CF80 0000 0000                  		dc.w SME_O5C0c_1E-SME_O5C0c, SME_O5C0c_29-SME_O5C0c	
0000CF84 02                         SME_O5C0c_8:	dc.b 2	
0000CF85 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0	
0000CF8A F505 0018 10               		dc.b $F5, 5, 0, $18, $10	
0000CF8F 02                         SME_O5C0c_13:	dc.b 2	
0000CF90 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0	
0000CF95 F505 001C 10               		dc.b $F5, 5, 0, $1C, $10	
0000CF9A 02                         SME_O5C0c_1E:	dc.b 2	
0000CF9B F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0	
0000CFA0 F505 0018 10               		dc.b $F5, 5, 0, $18, $10	
0000CFA5 02                         SME_O5C0c_29:	dc.b 2	
0000CFA6 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0	
0000CFAB F505 001C 10               		dc.b $F5, 5, 0, $1C, $10	
0000CFB0                            		even
0000CFB0                            		even
0000CFB0                            		include	"_incObj\2D Burrobot.asm"
0000CFB0                            ; ---------------------------------------------------------------------------
0000CFB0                            ; Object 2D - Burrobot enemy (LZ)
0000CFB0                            ; ---------------------------------------------------------------------------
0000CFB0                            
0000CFB0                            Burrobot:
0000CFB0 7000                       		moveq	#0,d0
0000CFB2 1028 0024                  		move.b	obRoutine(a0),d0
0000CFB6 323B 0000                  		move.w	Burro_Index(pc,d0.w),d1
0000CFBA 4EFB 1000                  		jmp	Burro_Index(pc,d1.w)
0000CFBE                            ; ===========================================================================
0000CFBE 0000                       Burro_Index:	dc.w Burro_Main-Burro_Index
0000CFC0 0000                       		dc.w Burro_Action-Burro_Index
0000CFC2                            
0000CFC2 =00000030                  burro_timedelay:	equ $30		; time between direction changes
0000CFC2                            ; ===========================================================================
0000CFC2                            
0000CFC2                            Burro_Main:	; Routine 0
0000CFC2 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CFC6 117C 0013 0016             		move.b	#$13,obHeight(a0)
0000CFCC 117C 0008 0017             		move.b	#8,obWidth(a0)
0000CFD2 217C 0000 0000 0004        		move.l	#Map_Burro,obMap(a0)
0000CFDA 317C 04A6 0002             		move.w	#$4A6,obGfx(a0)
0000CFE0 0028 0004 0001             		ori.b	#4,obRender(a0)
0000CFE6 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000CFEC 117C 0005 0020             		move.b	#5,obColType(a0)
0000CFF2 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000CFF8 5C28 0025                  		addq.b	#6,ob2ndRout(a0) ; run "Burro_ChkSonic" routine
0000CFFC 117C 0002 001C             		move.b	#2,obAnim(a0)
0000D002                            
0000D002                            Burro_Action:	; Routine 2
0000D002 7000                       		moveq	#0,d0
0000D004 1028 0025                  		move.b	ob2ndRout(a0),d0
0000D008 323B 0000                  		move.w	@index(pc,d0.w),d1
0000D00C 4EBB 1000                  		jsr	@index(pc,d1.w)
0000D010 43F9 0000 0000             		lea	(Ani_Burro).l,a1
0000D016 6100 FA0C                  		bsr.w	AnimateSprite
0000D01A 6000 0000                  		bra.w	RememberState
0000D01E                            ; ===========================================================================
0000D01E 0000                       @index:		dc.w @changedir-@index
0000D020 0000                       		dc.w Burro_Move-@index
0000D022 0000                       		dc.w Burro_Jump-@index
0000D024 0000                       		dc.w Burro_ChkSonic-@index
0000D026                            ; ===========================================================================
0000D026                            
0000D026                            @changedir:
0000D026 5368 0030                  		subq.w	#1,burro_timedelay(a0)
0000D02A 6A00                       		bpl.s	@nochg
0000D02C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000D030 317C 00FF 0030             		move.w	#255,burro_timedelay(a0)
0000D036 317C 0080 0010             		move.w	#$80,obVelX(a0)
0000D03C 117C 0001 001C             		move.b	#1,obAnim(a0)
0000D042 0868 0000 0022             		bchg	#0,obStatus(a0)	; change direction the Burrobot	is facing
0000D048 6700                       		beq.s	@nochg
0000D04A 4468 0010                  		neg.w	obVelX(a0)	; change direction the Burrobot	is moving
0000D04E                            
0000D04E                            	@nochg:
0000D04E 4E75                       		rts	
0000D050                            ; ===========================================================================
0000D050                            
0000D050                            Burro_Move:
0000D050 5368 0030                  		subq.w	#1,burro_timedelay(a0)
0000D054 6B00                       		bmi.s	loc_AD84
0000D056 6100 0000                  		bsr.w	SpeedToPos
0000D05A 0868 0000 0032             		bchg	#0,$32(a0)
0000D060 6600                       		bne.s	loc_AD78
0000D062 3628 0008                  		move.w	obX(a0),d3
0000D066 0643 000C                  		addi.w	#$C,d3
0000D06A 0828 0000 0022             		btst	#0,obStatus(a0)
0000D070 6600                       		bne.s	loc_AD6A
0000D072 0443 0018                  		subi.w	#$18,d3
0000D076                            
0000D076                            loc_AD6A:
0000D076 4EB9 0000 0000             		jsr	(ObjFloorDist2).l
0000D07C 0C41 000C                  		cmpi.w	#$C,d1
0000D080 6C00                       		bge.s	loc_AD84
0000D082 4E75                       		rts	
0000D084                            ; ===========================================================================
0000D084                            
0000D084                            loc_AD78:
0000D084 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000D08A D368 000C                  		add.w	d1,obY(a0)
0000D08E 4E75                       		rts	
0000D090                            ; ===========================================================================
0000D090                            
0000D090                            loc_AD84:
0000D090 0838 0002 FE0F             		btst	#2,(v_vbla_byte).w
0000D096 6700                       		beq.s	loc_ADA4
0000D098 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000D09C 317C 003B 0030             		move.w	#59,burro_timedelay(a0)
0000D0A2 317C 0000 0010             		move.w	#0,obVelX(a0)
0000D0A8 117C 0000 001C             		move.b	#0,obAnim(a0)
0000D0AE 4E75                       		rts	
0000D0B0                            ; ===========================================================================
0000D0B0                            
0000D0B0                            loc_ADA4:
0000D0B0 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000D0B4 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000D0BA 117C 0002 001C             		move.b	#2,obAnim(a0)
0000D0C0 4E75                       		rts	
0000D0C2                            ; ===========================================================================
0000D0C2                            
0000D0C2                            Burro_Jump:
0000D0C2 6100 0000                  		bsr.w	SpeedToPos
0000D0C6 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000D0CC 6B00                       		bmi.s	locret_ADF0
0000D0CE 117C 0003 001C             		move.b	#3,obAnim(a0)
0000D0D4 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000D0DA 4A41                       		tst.w	d1
0000D0DC 6A00                       		bpl.s	locret_ADF0
0000D0DE D368 000C                  		add.w	d1,obY(a0)
0000D0E2 317C 0000 0012             		move.w	#0,obVelY(a0)
0000D0E8 117C 0001 001C             		move.b	#1,obAnim(a0)
0000D0EE 317C 00FF 0030             		move.w	#255,burro_timedelay(a0)
0000D0F4 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000D0F8 6100 0000                  		bsr.w	Burro_ChkSonic2
0000D0FC                            
0000D0FC                            locret_ADF0:
0000D0FC 4E75                       		rts	
0000D0FE                            ; ===========================================================================
0000D0FE                            
0000D0FE                            Burro_ChkSonic:
0000D0FE 343C 0060                  		move.w	#$60,d2
0000D102 6100 0000                  		bsr.w	Burro_ChkSonic2
0000D106 6400                       		bcc.s	locret_AE20
0000D108 3038 D00C                  		move.w	(v_player+obY).w,d0
0000D10C 9068 000C                  		sub.w	obY(a0),d0
0000D110 6400                       		bcc.s	locret_AE20
0000D112 0C40 FF80                  		cmpi.w	#-$80,d0
0000D116 6500                       		bcs.s	locret_AE20
0000D118 4A78 FE08                  		tst.w	(v_debuguse).w
0000D11C 6600                       		bne.s	locret_AE20
0000D11E 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000D122 3141 0010                  		move.w	d1,obVelX(a0)
0000D126 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000D12C                            
0000D12C                            locret_AE20:
0000D12C 4E75                       		rts	
0000D12E                            
0000D12E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D12E                            
0000D12E                            
0000D12E                            Burro_ChkSonic2:
0000D12E 323C 0080                  		move.w	#$80,d1
0000D132 08E8 0000 0022             		bset	#0,obStatus(a0)
0000D138 3038 D008                  		move.w	(v_player+obX).w,d0
0000D13C 9068 0008                  		sub.w	obX(a0),d0
0000D140 6400                       		bcc.s	loc_AE40
0000D142 4440                       		neg.w	d0
0000D144 4441                       		neg.w	d1
0000D146 08A8 0000 0022             		bclr	#0,obStatus(a0)
0000D14C                            
0000D14C                            loc_AE40:
0000D14C B042                       		cmp.w	d2,d0
0000D14E 4E75                       		rts	
0000D150                            ; End of function Burro_ChkSonic2
0000D150                            ; End of function Burro_ChkSonic2
0000D150                            		include	"_anim\Burrobot.asm"
0000D150                            ; ---------------------------------------------------------------------------
0000D150                            ; Animation script - Burrobot enemy
0000D150                            ; ---------------------------------------------------------------------------
0000D150 0000                       Ani_Burro:	dc.w @walk1-Ani_Burro
0000D152 0000                       		dc.w @walk2-Ani_Burro
0000D154 0000                       		dc.w @digging-Ani_Burro
0000D156 0000                       		dc.w @fall-Ani_Burro
0000D158 0300 06FF                  @walk1:		dc.b 3,	0, 6, afEnd
0000D15C 0300 01FF                  @walk2:		dc.b 3,	0, 1, afEnd
0000D160 0302 03FF                  @digging:	dc.b 3,	2, 3, afEnd
0000D164 0304 FF                    @fall:		dc.b 3,	4, afEnd
0000D168 00                         		even
0000D168 00                         		even
0000D168                            Map_Burro:	include	"_maps\Burrobot.asm"
0000D168                            ; --------------------------------------------------------------------------------
0000D168                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000D168                            ; --------------------------------------------------------------------------------
0000D168                            
0000D168                            SME_Ag_86:	
0000D168 0000 0000                  		dc.w SME_Ag_86_E-SME_Ag_86, SME_Ag_86_19-SME_Ag_86	
0000D16C 0000 0000                  		dc.w SME_Ag_86_24-SME_Ag_86, SME_Ag_86_2F-SME_Ag_86	
0000D170 0000 0000                  		dc.w SME_Ag_86_3A-SME_Ag_86, SME_Ag_86_45-SME_Ag_86	
0000D174 0000                       		dc.w SME_Ag_86_50-SME_Ag_86	
0000D176 02                         SME_Ag_86_E:	dc.b 2	
0000D177 EC0A 2000 F0               		dc.b $EC, $A, $20, 0, $F0	
0000D17C 0409 2009 F4               		dc.b 4, 9, $20, 9, $F4	
0000D181 02                         SME_Ag_86_19:	dc.b 2	
0000D182 EC0A 200F F0               		dc.b $EC, $A, $20, $F, $F0	
0000D187 0409 2018 F4               		dc.b 4, 9, $20, $18, $F4	
0000D18C 02                         SME_Ag_86_24:	dc.b 2	
0000D18D E80A 201E F4               		dc.b $E8, $A, $20, $1E, $F4	
0000D192 000A 2027 F4               		dc.b 0, $A, $20, $27, $F4	
0000D197 02                         SME_Ag_86_2F:	dc.b 2	
0000D198 E80A 2030 F4               		dc.b $E8, $A, $20, $30, $F4	
0000D19D 000A 2039 F4               		dc.b 0, $A, $20, $39, $F4	
0000D1A2 02                         SME_Ag_86_3A:	dc.b 2	
0000D1A3 E80A 200F F0               		dc.b $E8, $A, $20, $F, $F0	
0000D1A8 000A 2042 F4               		dc.b 0, $A, $20, $42, $F4	
0000D1AD 02                         SME_Ag_86_45:	dc.b 2	
0000D1AE F406 204B E8               		dc.b $F4, 6, $20, $4B, $E8	
0000D1B3 F40A 2051 F8               		dc.b $F4, $A, $20, $51, $F8	
0000D1B8 02                         SME_Ag_86_50:	dc.b 2	
0000D1B9 EC0A 200F F0               		dc.b $EC, $A, $20, $F, $F0	
0000D1BE 0409 2009 F4               		dc.b 4, 9, $20, 9, $F4	
0000D1C4 00                         		even
0000D1C4 00                         		even
0000D1C4                            
0000D1C4                            		include	"_incObj\2F MZ Large Grassy Platforms.asm"
0000D1C4                            ; ---------------------------------------------------------------------------
0000D1C4                            ; Object 2F - large grass-covered platforms (MZ)
0000D1C4                            ; ---------------------------------------------------------------------------
0000D1C4                            
0000D1C4                            LargeGrass:
0000D1C4 7000                       		moveq	#0,d0
0000D1C6 1028 0024                  		move.b	obRoutine(a0),d0
0000D1CA 323B 0000                  		move.w	LGrass_Index(pc,d0.w),d1
0000D1CE 4EFB 1000                  		jmp	LGrass_Index(pc,d1.w)
0000D1D2                            ; ===========================================================================
0000D1D2 0000                       LGrass_Index:	dc.w LGrass_Main-LGrass_Index
0000D1D4 0000                       		dc.w LGrass_Action-LGrass_Index
0000D1D6                            
0000D1D6 =0000002A                  lgrass_origX:	equ $2A
0000D1D6 =0000002C                  lgrass_origY:	equ $2C
0000D1D6                            
0000D1D6 0000                       LGrass_Data:	dc.w LGrass_Data1-LGrass_Data 	; collision angle data
0000D1D8 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000D1DA 0000                       		dc.w LGrass_Data3-LGrass_Data
0000D1DC 0140                       		dc.b 1,	$40
0000D1DE 0000                       		dc.w LGrass_Data2-LGrass_Data
0000D1E0 0220                       		dc.b 2,	$20
0000D1E2                            ; ===========================================================================
0000D1E2                            
0000D1E2                            LGrass_Main:	; Routine 0
0000D1E2 5428 0024                  		addq.b	#2,obRoutine(a0)
0000D1E6 217C 0000 0000 0004        		move.l	#Map_LGrass,obMap(a0)
0000D1EE 317C C000 0002             		move.w	#$C000,obGfx(a0)
0000D1F4 117C 0004 0001             		move.b	#4,obRender(a0)
0000D1FA 317C 0280 0018             		move.w	#$280,obPriority(a0)
0000D200 3168 000C 002C             		move.w	obY(a0),lgrass_origY(a0)
0000D206 3168 0008 002A             		move.w	obX(a0),lgrass_origX(a0)
0000D20C 7000                       		moveq	#0,d0
0000D20E 1028 0028                  		move.b	obSubtype(a0),d0
0000D212 E448                       		lsr.w	#2,d0
0000D214 0240 001C                  		andi.w	#$1C,d0
0000D218 43FB 00BC                  		lea	LGrass_Data(pc,d0.w),a1
0000D21C 3019                       		move.w	(a1)+,d0
0000D21E 45FB 00B6                  		lea	LGrass_Data(pc,d0.w),a2
0000D222 214A 0030                  		move.l	a2,$30(a0)
0000D226 1159 001A                  		move.b	(a1)+,obFrame(a0)
0000D22A 1151 0014                  		move.b	(a1),obActWid(a0)
0000D22E 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
0000D234 117C 0040 0016             		move.b	#$40,obHeight(a0)
0000D23A 08E8 0004 0001             		bset	#4,1(a0)
0000D240                            
0000D240                            LGrass_Action:	; Routine 2
0000D240 6100 0000                  		bsr.w	LGrass_Types
0000D244 4A28 0025                  		tst.b	ob2ndRout(a0)
0000D248 6700                       		beq.s	LGrass_Solid
0000D24A 7200                       		moveq	#0,d1
0000D24C 1228 0014                  		move.b	obActWid(a0),d1
0000D250 0641 000B                  		addi.w	#$B,d1
0000D254 6100 BFA4                  		bsr.w	ExitPlatform
0000D258 0829 0003 0022             		btst	#3,obStatus(a1)
0000D25E 6600 0000                  		bne.w	LGrass_Slope
0000D262 4228 0025                  		clr.b	ob2ndRout(a0)
0000D266 6000                       		bra.s	LGrass_Display
0000D268                            ; ===========================================================================
0000D268                            
0000D268                            LGrass_Slope:
0000D268 7200                       		moveq	#0,d1
0000D26A 1228 0014                  		move.b	obActWid(a0),d1
0000D26E 0641 000B                  		addi.w	#$B,d1
0000D272 2468 0030                  		movea.l	$30(a0),a2
0000D276 3428 0008                  		move.w	obX(a0),d2
0000D27A 6100 CF18                  		bsr.w	SlopeObject2
0000D27E 6000                       		bra.s	LGrass_Display
0000D280                            ; ===========================================================================
0000D280                            
0000D280                            LGrass_Solid:
0000D280 7200                       		moveq	#0,d1
0000D282 1228 0014                  		move.b	obActWid(a0),d1
0000D286 0641 000B                  		addi.w	#$B,d1
0000D28A 343C 0020                  		move.w	#$20,d2
0000D28E 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0000D294 6600                       		bne.s	loc_AF8E
0000D296 343C 0030                  		move.w	#$30,d2
0000D29A                            
0000D29A                            loc_AF8E:
0000D29A 2468 0030                  		movea.l	$30(a0),a2
0000D29E 6100 0000                  		bsr.w	SolidObject2F
0000D2A2                            
0000D2A2                            LGrass_Display:
0000D2A2 6100 0000                  		bsr.w	DisplaySprite
0000D2A6 6000 0000                  		bra.w	LGrass_ChkDel
0000D2AA                            
0000D2AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D2AA                            
0000D2AA                            
0000D2AA                            LGrass_Types:
0000D2AA 7000                       		moveq	#0,d0
0000D2AC 1028 0028                  		move.b	obSubtype(a0),d0
0000D2B0 0240 0007                  		andi.w	#7,d0
0000D2B4 D040                       		add.w	d0,d0
0000D2B6 323B 0000                  		move.w	LGrass_TypeIndex(pc,d0.w),d1
0000D2BA 4EFB 1000                  		jmp	LGrass_TypeIndex(pc,d1.w)
0000D2BE                            ; End of function LGrass_Types
0000D2BE                            
0000D2BE                            ; ===========================================================================
0000D2BE 0000                       LGrass_TypeIndex:dc.w LGrass_Type00-LGrass_TypeIndex
0000D2C0 0000                       		dc.w LGrass_Type01-LGrass_TypeIndex
0000D2C2 0000                       		dc.w LGrass_Type02-LGrass_TypeIndex
0000D2C4 0000                       		dc.w LGrass_Type03-LGrass_TypeIndex
0000D2C6 0000                       		dc.w LGrass_Type04-LGrass_TypeIndex
0000D2C8 0000                       		dc.w LGrass_Type05-LGrass_TypeIndex
0000D2CA                            ; ===========================================================================
0000D2CA                            
0000D2CA                            LGrass_Type00:
0000D2CA 4E75                       		rts			; type 00 platform doesn't move
0000D2CC                            ; ===========================================================================
0000D2CC                            
0000D2CC                            LGrass_Type01:
0000D2CC 1038 FE60                  		move.b	(v_oscillate+2).w,d0
0000D2D0 323C 0020                  		move.w	#$20,d1
0000D2D4 6000                       		bra.s	LGrass_Move
0000D2D6                            ; ===========================================================================
0000D2D6                            
0000D2D6                            LGrass_Type02:
0000D2D6 1038 FE64                  		move.b	(v_oscillate+6).w,d0
0000D2DA 323C 0030                  		move.w	#$30,d1
0000D2DE 6000                       		bra.s	LGrass_Move
0000D2E0                            ; ===========================================================================
0000D2E0                            
0000D2E0                            LGrass_Type03:
0000D2E0 1038 FE68                  		move.b	(v_oscillate+$A).w,d0
0000D2E4 323C 0040                  		move.w	#$40,d1
0000D2E8 6000                       		bra.s	LGrass_Move
0000D2EA                            ; ===========================================================================
0000D2EA                            
0000D2EA                            LGrass_Type04:
0000D2EA 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
0000D2EE 323C 0060                  		move.w	#$60,d1
0000D2F2                            
0000D2F2                            LGrass_Move:
0000D2F2 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D2F8 6700                       		beq.s	loc_AFF2
0000D2FA 4440                       		neg.w	d0
0000D2FC D041                       		add.w	d1,d0
0000D2FE                            
0000D2FE                            loc_AFF2:
0000D2FE 3228 002C                  		move.w	lgrass_origY(a0),d1
0000D302 9240                       		sub.w	d0,d1
0000D304 3141 000C                  		move.w	d1,obY(a0)	; update position on y-axis
0000D308 4E75                       		rts	
0000D30A                            ; ===========================================================================
0000D30A                            
0000D30A                            LGrass_Type05:
0000D30A 1028 0034                  		move.b	$34(a0),d0
0000D30E 4A28 0025                  		tst.b	ob2ndRout(a0)
0000D312 6600                       		bne.s	loc_B010
0000D314 5500                       		subq.b	#2,d0
0000D316 6400                       		bcc.s	loc_B01C
0000D318 7000                       		moveq	#0,d0
0000D31A 6000                       		bra.s	loc_B01C
0000D31C                            ; ===========================================================================
0000D31C                            
0000D31C                            loc_B010:
0000D31C 5800                       		addq.b	#4,d0
0000D31E 0C00 0040                  		cmpi.b	#$40,d0
0000D322 6500                       		bcs.s	loc_B01C
0000D324 103C 0040                  		move.b	#$40,d0
0000D328                            
0000D328                            loc_B01C:
0000D328 1140 0034                  		move.b	d0,$34(a0)
0000D32C 4EB9 0000 3A32             		jsr	(CalcSine).l
0000D332 E848                       		lsr.w	#4,d0
0000D334 3200                       		move.w	d0,d1
0000D336 D068 002C                  		add.w	lgrass_origY(a0),d0
0000D33A 3140 000C                  		move.w	d0,obY(a0)
0000D33E 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000D344 6600                       		bne.s	loc_B07A
0000D346 4A28 0035                  		tst.b	$35(a0)
0000D34A 6600                       		bne.s	loc_B07A
0000D34C 117C 0001 0035             		move.b	#1,$35(a0)
0000D352 6100 0000                  		bsr.w	FindNextFreeObj
0000D356 6600                       		bne.s	loc_B07A
0000D358 12BC 0000                  		move.b	#id_GrassFire,0(a1) ; load sitting flame object
0000D35C 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D362 3368 002C 002C             		move.w	lgrass_origY(a0),lgrass_origY(a1)
0000D368 5069 002C                  		addq.w	#8,lgrass_origY(a1)
0000D36C 5769 002C                  		subq.w	#3,lgrass_origY(a1)
0000D370 0469 0040 0008             		subi.w	#$40,obX(a1)
0000D376 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000D37C 2348 0038                  		move.l	a0,$38(a1)
0000D380 2448                       		movea.l	a0,a2
0000D382 6100                       		bsr.s	sub_B09C
0000D384                            
0000D384                            loc_B07A:
0000D384 7400                       		moveq	#0,d2
0000D386 45E8 0036                  		lea	$36(a0),a2
0000D38A 141A                       		move.b	(a2)+,d2
0000D38C 5302                       		subq.b	#1,d2
0000D38E 6500                       		bcs.s	locret_B09A
0000D390                            
0000D390                            loc_B086:
0000D390 7000                       		moveq	#0,d0
0000D392 101A                       		move.b	(a2)+,d0
0000D394 ED48                       		lsl.w	#6,d0
0000D396 0640 D000                  		addi.w	#$D000,d0
0000D39A 3240                       		movea.w	d0,a1
0000D39C 3341 003C                  		move.w	d1,$3C(a1)
0000D3A0 51CA FFEE                  		dbf	d2,loc_B086
0000D3A4                            
0000D3A4                            locret_B09A:
0000D3A4 4E75                       		rts	
0000D3A6                            
0000D3A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D3A6                            
0000D3A6                            
0000D3A6                            sub_B09C:
0000D3A6 45EA 0036                  		lea	$36(a2),a2
0000D3AA 7000                       		moveq	#0,d0
0000D3AC 1012                       		move.b	(a2),d0
0000D3AE 5212                       		addq.b	#1,(a2)
0000D3B0 45F2 0001                  		lea	1(a2,d0.w),a2
0000D3B4 3009                       		move.w	a1,d0
0000D3B6 0440 D000                  		subi.w	#$D000,d0
0000D3BA EC48                       		lsr.w	#6,d0
0000D3BC 0240 007F                  		andi.w	#$7F,d0
0000D3C0 1480                       		move.b	d0,(a2)
0000D3C2 4E75                       		rts	
0000D3C4                            ; End of function sub_B09C
0000D3C4                            
0000D3C4                            ; ===========================================================================
0000D3C4                            
0000D3C4                            LGrass_ChkDel:
0000D3C4 4A28 0035                  		tst.b	$35(a0)
0000D3C8 6700                       		beq.s	loc_B0C6
0000D3CA 4A28 0001                  		tst.b	obRender(a0)
0000D3CE 6A00                       		bpl.s	LGrass_DelFlames
0000D3D0                            
0000D3D0                            loc_B0C6:
0000D3EE 4E75                       		rts	
0000D3F0                            ; ===========================================================================
0000D3F0                            
0000D3F0                            LGrass_DelFlames:
0000D3F0 7400                       		moveq	#0,d2
0000D3F2                            
0000D3F2                            loc_B0E8:
0000D3F2 45E8 0036                  		lea	$36(a0),a2
0000D3F6 1412                       		move.b	(a2),d2
0000D3F8 421A                       		clr.b	(a2)+
0000D3FA 5302                       		subq.b	#1,d2
0000D3FC 6500                       		bcs.s	locret_B116
0000D3FE                            
0000D3FE                            loc_B0F4:
0000D3FE 7000                       		moveq	#0,d0
0000D400 1012                       		move.b	(a2),d0
0000D402 421A                       		clr.b	(a2)+
0000D404 ED48                       		lsl.w	#6,d0
0000D406 0640 D000                  		addi.w	#$D000,d0
0000D40A 3240                       		movea.w	d0,a1
0000D40C 6100 0000                  		bsr.w	DeleteChild
0000D410 51CA FFEC                  		dbf	d2,loc_B0F4
0000D414 117C 0000 0035             		move.b	#0,$35(a0)
0000D41A 117C 0000 0034             		move.b	#0,$34(a0)
0000D420                            
0000D420                            locret_B116:
0000D420 4E75                       		rts	
0000D422                            ; ===========================================================================
0000D422                            ; ---------------------------------------------------------------------------
0000D422                            ; Collision data for large moving platforms (MZ)
0000D422                            ; ---------------------------------------------------------------------------
0000D422                            LGrass_Data1:	incbin	"misc\mz_pfm1.bin"
0000D46E                            		even
0000D46E                            LGrass_Data2:	incbin	"misc\mz_pfm2.bin"
0000D49A                            		even
0000D49A                            LGrass_Data3:	incbin	"misc\mz_pfm3.bin"
0000D4E6                            		even
0000D4E6                            		even
0000D4E6                            		include	"_incObj\35 Burning Grass.asm"
0000D4E6                            ; ---------------------------------------------------------------------------
0000D4E6                            ; Object 35 - fireball that sits on the	floor (MZ)
0000D4E6                            ; (appears when	you walk on sinking platforms)
0000D4E6                            ; ---------------------------------------------------------------------------
0000D4E6                            
0000D4E6                            GrassFire:
0000D4E6 7000                       		moveq	#0,d0
0000D4E8 1028 0024                  		move.b	obRoutine(a0),d0
0000D4EC 323B 0000                  		move.w	GFire_Index(pc,d0.w),d1
0000D4F0 4EFB 1000                  		jmp	GFire_Index(pc,d1.w)
0000D4F4                            ; ===========================================================================
0000D4F4 0000                       GFire_Index:	dc.w GFire_Main-GFire_Index
0000D4F6 0000                       		dc.w loc_B238-GFire_Index
0000D4F8 0000                       		dc.w GFire_Move-GFire_Index
0000D4FA                            
0000D4FA =0000002A                  gfire_origX:	equ $2A
0000D4FA                            ; ===========================================================================
0000D4FA                            
0000D4FA                            GFire_Main:	; Routine 0
0000D4FA 5428 0024                  		addq.b	#2,obRoutine(a0)
0000D4FE 217C 0000 0000 0004        		move.l	#Map_Fire,obMap(a0)
0000D506 317C 0345 0002             		move.w	#$345,obGfx(a0)
0000D50C 3168 0008 002A             		move.w	obX(a0),gfire_origX(a0)
0000D512 117C 0004 0001             		move.b	#4,obRender(a0)
0000D518 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000D51E 117C 008B 0020             		move.b	#$8B,obColType(a0)
0000D524 117C 0008 0014             		move.b	#8,obActWid(a0)
0000D534 4A28 0028                  		tst.b	obSubtype(a0)
0000D538 6700                       		beq.s	loc_B238
0000D53A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000D53E 6000 0000                  		bra.w	GFire_Move
0000D542                            ; ===========================================================================
0000D542                            
0000D542                            loc_B238:	; Routine 2
0000D542 2268 0030                  		movea.l	$30(a0),a1
0000D546 3228 0008                  		move.w	obX(a0),d1
0000D54A 9268 002A                  		sub.w	gfire_origX(a0),d1
0000D54E 0641 000C                  		addi.w	#$C,d1
0000D552 3001                       		move.w	d1,d0
0000D554 E248                       		lsr.w	#1,d0
0000D556 1031 0000                  		move.b	(a1,d0.w),d0
0000D55A 4440                       		neg.w	d0
0000D55C D068 002C                  		add.w	$2C(a0),d0
0000D560 3400                       		move.w	d0,d2
0000D562 D068 003C                  		add.w	$3C(a0),d0
0000D566 3140 000C                  		move.w	d0,obY(a0)
0000D56A 0C41 0084                  		cmpi.w	#$84,d1
0000D56E 6400                       		bcc.s	loc_B2B0
0000D570 06A8 0001 0000 0008        		addi.l	#$10000,obX(a0)
0000D578 0C41 0080                  		cmpi.w	#$80,d1
0000D57C 6400                       		bcc.s	loc_B2B0
0000D57E 2028 0008                  		move.l	obX(a0),d0
0000D582 0680 0008 0000             		addi.l	#$80000,d0
0000D588 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000D58E 6600                       		bne.s	loc_B2B0
0000D590 6100 0000                  		bsr.w	FindNextFreeObj
0000D594 6600                       		bne.s	loc_B2B0
0000D596 12BC 0000                  		move.b	#id_GrassFire,0(a1)
0000D59A 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D5A0 3342 002C                  		move.w	d2,$2C(a1)
0000D5A4 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000D5AA 137C 0001 0028             		move.b	#1,obSubtype(a1)
0000D5B0 2468 0038                  		movea.l	$38(a0),a2
0000D5B4 6100 FDF0                  		bsr.w	sub_B09C
0000D5B8                            
0000D5B8                            loc_B2B0:
0000D5B8 6000                       		bra.s	GFire_Animate
0000D5BA                            ; ===========================================================================
0000D5BA                            
0000D5BA                            GFire_Move:	; Routine 4
0000D5BA 3028 002C                  		move.w	$2C(a0),d0
0000D5BE D068 003C                  		add.w	$3C(a0),d0
0000D5C2 3140 000C                  		move.w	d0,obY(a0)
0000D5C6                            
0000D5C6                            GFire_Animate:
0000D5C6 43F9 0000 0000             		lea	(Ani_GFire).l,a1
0000D5CC 6100 F456                  		bsr.w	AnimateSprite
0000D5D0 6000 0000                  		bra.w	DisplaySprite
0000D5D0 6000 0000                  		bra.w	DisplaySprite
0000D5D4                            		include	"_anim\Burning Grass.asm"
0000D5D4                            ; ---------------------------------------------------------------------------
0000D5D4                            ; Animation script - burning grass that sits on the floor (MZ)
0000D5D4                            ; ---------------------------------------------------------------------------
0000D5D4 0000                       Ani_GFire:	dc.w @burn-Ani_GFire
0000D5D6 0500 2001 21FF             @burn:		dc.b 5,	0, $20,	1, $21,	afEnd
0000D5DC                            		even
0000D5DC                            		even
0000D5DC                            Map_LGrass:	include	"_maps\MZ Large Grassy Platforms.asm"
0000D5DC                            ; ---------------------------------------------------------------------------
0000D5DC                            ; Sprite mappings - large moving grass-covered platforms (MZ)
0000D5DC                            ; ---------------------------------------------------------------------------
0000D5DC                            Map_LGrass_internal:
0000D5DC 0000                       		dc.w @wide-Map_LGrass_internal
0000D5DE 0000                       		dc.w @sloped-Map_LGrass_internal
0000D5E0 0000                       		dc.w @narrow-Map_LGrass_internal
0000D5E2 0D                         @wide:		dc.b $D
0000D5E3 D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0 ; wide platform
0000D5E8 F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000D5ED 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000D5F2 D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000D5F7 F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000D5FC F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000D601 D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000D606 D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000D60B F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000D610 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000D615 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000D61A D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000D61F F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000D624 0A                         @sloped:	dc.b $A
0000D625 D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0 ; sloped platform (catches fire)
0000D62A F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000D62F 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000D634 C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000D639 E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000D63E F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000D643 C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000D648 E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000D64D C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000D652 E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000D657 06                         @narrow:	dc.b 6
0000D658 D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0 ; narrow platform
0000D65D F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000D662 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000D667 D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000D66C F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000D671 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000D676                            		even
0000D676                            		even
0000D676                            Map_Fire:	include	"_maps\Fireballs.asm"
0000D676                            ; --------------------------------------------------------------------------------
0000D676                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000D676                            ; --------------------------------------------------------------------------------
0000D676                            
0000D676                            SME_gyvTV:	
0000D676 0000 0000                  		dc.w SME_gyvTV_C-SME_gyvTV, SME_gyvTV_12-SME_gyvTV	
0000D67A 0000 0000                  		dc.w SME_gyvTV_18-SME_gyvTV, SME_gyvTV_1E-SME_gyvTV	
0000D67E 0000 0000                  		dc.w SME_gyvTV_24-SME_gyvTV, SME_gyvTV_2A-SME_gyvTV	
0000D682 01                         SME_gyvTV_C:	dc.b 1	
0000D683 E807 6000 F8               		dc.b $E8, 7, $60, 0, $F8	
0000D688 01                         SME_gyvTV_12:	dc.b 1	
0000D689 E807 6008 F8               		dc.b $E8, 7, $60, 8, $F8	
0000D68E 01                         SME_gyvTV_18:	dc.b 1	
0000D68F F006 6010 F8               		dc.b $F0, 6, $60, $10, $F8	
0000D694 01                         SME_gyvTV_1E:	dc.b 1	
0000D695 F80D 6016 E8               		dc.b $F8, $D, $60, $16, $E8	
0000D69A 01                         SME_gyvTV_24:	dc.b 1	
0000D69B F80D 601E E8               		dc.b $F8, $D, $60, $1E, $E8	
0000D6A0 01                         SME_gyvTV_2A:	dc.b 1	
0000D6A1 F809 6026 F0               		dc.b $F8, 9, $60, $26, $F0	
0000D6A6                            		even
0000D6A6                            		even
0000D6A6                            		include	"_incObj\30 MZ Large Green Glass Blocks.asm"
0000D6A6                            ; ---------------------------------------------------------------------------
0000D6A6                            ; Object 30 - large green glass blocks (MZ)
0000D6A6                            ; ---------------------------------------------------------------------------
0000D6A6                            
0000D6A6                            GlassBlock:
0000D6A6 7000                       		moveq	#0,d0
0000D6A8 1028 0024                  		move.b	obRoutine(a0),d0
0000D6AC 323B 0000                  		move.w	Glass_Index(pc,d0.w),d1
0000D6B0 4EBB 1000                  		jsr	Glass_Index(pc,d1.w)
0000D6D2 6000 0000                  		bra.w	DisplaySprite
0000D6D6                            ; ===========================================================================
0000D6D6                            
0000D6D6                            Glass_Delete:
0000D6D6 6000 0000                  		bra.w	DeleteObject
0000D6DA                            ; ===========================================================================
0000D6DA 0000                       Glass_Index:	dc.w Glass_Main-Glass_Index
0000D6DC 0000                       		dc.w Glass_Block012-Glass_Index
0000D6DE 0000                       		dc.w Glass_Reflect012-Glass_Index
0000D6E0 0000                       		dc.w Glass_Block34-Glass_Index
0000D6E2 0000                       		dc.w Glass_Reflect34-Glass_Index
0000D6E4                            
0000D6E4 =00000032                  glass_dist:	equ $32		; distance block moves when switch is pressed
0000D6E4 =0000003C                  glass_parent:	equ $3C		; address of parent object
0000D6E4                            
0000D6E4 0200 00                    Glass_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000D6E7 0400 01                    		dc.b 4,	0, 1
0000D6EA 0600 02                    Glass_Vars2:	dc.b 6,	0, 2
0000D6ED 0800 01                    		dc.b 8,	0, 1
0000D6F0                            ; ===========================================================================
0000D6F0                            
0000D6F0                            Glass_Main:	; Routine 0
0000D6F0 45F9 0000 D6E4             		lea	(Glass_Vars1).l,a2
0000D6F6 7201                       		moveq	#1,d1
0000D6F8 117C 0048 0016             		move.b	#$48,obHeight(a0)
0000D6FE 0C28 0003 0028             		cmpi.b	#3,obSubtype(a0) ; is object type 0/1/2 ?
0000D704 6500                       		bcs.s	@IsType012	; if yes, branch
0000D706                            
0000D706 45F9 0000 D6EA             		lea	(Glass_Vars2).l,a2
0000D70C 7201                       		moveq	#1,d1
0000D70E 117C 0038 0016             		move.b	#$38,obHeight(a0)
0000D714                            
0000D714                            	@IsType012:
0000D714 2248                       		movea.l	a0,a1
0000D716 6000                       		bra.s	@Load		; load main object
0000D718                            ; ===========================================================================
0000D718                            
0000D718                            	@Repeat:
0000D718 6100 0000                  		bsr.w	FindNextFreeObj
0000D71C 6600                       		bne.s	@Fail
0000D71E                            
0000D71E                            @Load:
0000D71E 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000D722 12BC 0000                  		move.b	#id_GlassBlock,0(a1)
0000D726 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D72C 101A                       		move.b	(a2)+,d0
0000D72E 4880                       		ext.w	d0
0000D730 D068 000C                  		add.w	obY(a0),d0
0000D734 3340 000C                  		move.w	d0,obY(a1)
0000D738 237C 0000 0000 0004        		move.l	#Map_Glass,obMap(a1)
0000D740 337C C38E 0002             		move.w	#$C38E,obGfx(a1)
0000D746 137C 0004 0001             		move.b	#4,obRender(a1)
0000D74C 3369 000C 0030             		move.w	obY(a1),$30(a1)
0000D752 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000D758 137C 0020 0014             		move.b	#$20,obActWid(a1)
0000D75E 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000D764 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000D768 2348 003C                  		move.l	a0,glass_parent(a1)
0000D76C 51C9 FFAA                  		dbf	d1,@Repeat	; repeat once to load "reflection object"
0000D770                            
0000D770 137C 0010 0014             		move.b	#$10,obActWid(a1)
0000D776 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000D77C 5029 0028                  		addq.b	#8,obSubtype(a1)
0000D780 0229 000F 0028             		andi.b	#$F,obSubtype(a1)
0000D786                            
0000D786                            	@Fail:
0000D786 317C 0090 0032             		move.w	#$90,glass_dist(a0)
0000D78C 08E8 0004 0001             		bset	#4,obRender(a0)
0000D792                            
0000D792                            Glass_Block012:	; Routine 2
0000D792 6100 0000                  		bsr.w	Glass_Types
0000D796 323C 002B                  		move.w	#$2B,d1
0000D79A 343C 0048                  		move.w	#$48,d2
0000D79E 363C 0049                  		move.w	#$49,d3
0000D7A2 3828 0008                  		move.w	obX(a0),d4
0000D7A6 6000 0000                  		bra.w	SolidObject
0000D7AA                            ; ===========================================================================
0000D7AA                            
0000D7AA                            Glass_Reflect012:
0000D7AA                            		; Routine 4
0000D7AA 2268 003C                  		movea.l	$3C(a0),a1
0000D7AE 3169 0032 0032             		move.w	glass_dist(a1),glass_dist(a0)
0000D7B4 6000 0000                  		bra.w	Glass_Types
0000D7B8                            ; ===========================================================================
0000D7B8                            
0000D7B8                            Glass_Block34:	; Routine 6
0000D7B8 6100 0000                  		bsr.w	Glass_Types
0000D7BC 323C 002B                  		move.w	#$2B,d1
0000D7C0 343C 0038                  		move.w	#$38,d2
0000D7C4 363C 0039                  		move.w	#$39,d3
0000D7C8 3828 0008                  		move.w	obX(a0),d4
0000D7CC 6000 0000                  		bra.w	SolidObject
0000D7D0                            ; ===========================================================================
0000D7D0                            
0000D7D0                            Glass_Reflect34:
0000D7D0                            		; Routine 8
0000D7D0 2268 003C                  		movea.l	$3C(a0),a1
0000D7D4 3169 0032 0032             		move.w	glass_dist(a1),glass_dist(a0)
0000D7DA 3169 000C 0030             		move.w	obY(a1),$30(a0)
0000D7E0 6000 0000                  		bra.w	Glass_Types
0000D7E4                            
0000D7E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D7E4                            
0000D7E4                            
0000D7E4                            Glass_Types:
0000D7E4 7000                       		moveq	#0,d0
0000D7E6 1028 0028                  		move.b	obSubtype(a0),d0
0000D7EA 0240 0007                  		andi.w	#7,d0
0000D7EE D040                       		add.w	d0,d0
0000D7F0 323B 0000                  		move.w	Glass_TypeIndex(pc,d0.w),d1
0000D7F4 4EFB 1000                  		jmp	Glass_TypeIndex(pc,d1.w)
0000D7F8                            ; End of function Glass_Types
0000D7F8                            
0000D7F8                            ; ===========================================================================
0000D7F8 0000                       Glass_TypeIndex:dc.w Glass_Type00-Glass_TypeIndex
0000D7FA 0000                       		dc.w Glass_Type01-Glass_TypeIndex
0000D7FC 0000                       		dc.w Glass_Type02-Glass_TypeIndex
0000D7FE 0000                       		dc.w Glass_Type03-Glass_TypeIndex
0000D800 0000                       		dc.w Glass_Type04-Glass_TypeIndex
0000D802                            ; ===========================================================================
0000D802                            
0000D802                            Glass_Type00:
0000D802 4E75                       		rts	
0000D804                            ; ===========================================================================
0000D804                            
0000D804                            Glass_Type01:
0000D804 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D808 323C 0040                  		move.w	#$40,d1
0000D80C 6000                       		bra.s	loc_B514
0000D80E                            ; ===========================================================================
0000D80E                            
0000D80E                            Glass_Type02:
0000D80E 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D812 323C 0040                  		move.w	#$40,d1
0000D816 4440                       		neg.w	d0
0000D818 D041                       		add.w	d1,d0
0000D81A                            
0000D81A                            loc_B514:
0000D81A 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D820 6700                       		beq.s	loc_B526
0000D822 4440                       		neg.w	d0
0000D824 D041                       		add.w	d1,d0
0000D826 E208                       		lsr.b	#1,d0
0000D828 0640 0020                  		addi.w	#$20,d0
0000D82C                            
0000D82C                            loc_B526:
0000D82C 6000 0000                  		bra.w	loc_B5EE
0000D830                            ; ===========================================================================
0000D830                            
0000D830                            Glass_Type03:
0000D830 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D836 6700                       		beq.s	loc_B53E
0000D838 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D83C 0440 0010                  		subi.w	#$10,d0
0000D840 6000 0000                  		bra.w	loc_B5EE
0000D844                            ; ===========================================================================
0000D844                            
0000D844                            loc_B53E:
0000D844 0828 0003 0022             		btst	#3,obStatus(a0)
0000D84A 6600                       		bne.s	loc_B54E
0000D84C 08A8 0000 0034             		bclr	#0,$34(a0)
0000D852 6000                       		bra.s	loc_B582
0000D854                            ; ===========================================================================
0000D854                            
0000D854                            loc_B54E:
0000D854 4A28 0034                  		tst.b	$34(a0)
0000D858 6600                       		bne.s	loc_B582
0000D85A 117C 0001 0034             		move.b	#1,$34(a0)
0000D860 08E8 0000 0035             		bset	#0,$35(a0)
0000D866 6700                       		beq.s	loc_B582
0000D868 08E8 0007 0034             		bset	#7,$34(a0)
0000D86E 317C 0010 0036             		move.w	#$10,$36(a0)
0000D874 117C 000A 0038             		move.b	#$A,$38(a0)
0000D87A 0C68 0040 0032             		cmpi.w	#$40,glass_dist(a0)
0000D880 6600                       		bne.s	loc_B582
0000D882 317C 0040 0036             		move.w	#$40,$36(a0)
0000D888                            
0000D888                            loc_B582:
0000D888 4A28 0034                  		tst.b	$34(a0)
0000D88C 6A00                       		bpl.s	loc_B5AA
0000D88E 4A28 0038                  		tst.b	$38(a0)
0000D892 6700                       		beq.s	loc_B594
0000D894 5328 0038                  		subq.b	#1,$38(a0)
0000D898 6600                       		bne.s	loc_B5AA
0000D89A                            
0000D89A                            loc_B594:
0000D89A 4A68 0032                  		tst.w	glass_dist(a0)
0000D89E 6700                       		beq.s	loc_B5A4
0000D8A0 5368 0032                  		subq.w	#1,glass_dist(a0)
0000D8A4 5368 0036                  		subq.w	#1,$36(a0)
0000D8A8 6600                       		bne.s	loc_B5AA
0000D8AA                            
0000D8AA                            loc_B5A4:
0000D8AA 08A8 0007 0034             		bclr	#7,$34(a0)
0000D8B0                            
0000D8B0                            loc_B5AA:
0000D8B0 3028 0032                  		move.w	glass_dist(a0),d0
0000D8B4 6000                       		bra.s	loc_B5EE
0000D8B6                            ; ===========================================================================
0000D8B6                            
0000D8B6                            Glass_Type04:
0000D8B6 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D8BC 6700                       		beq.s	Glass_ChkSwitch
0000D8BE 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D8C2 0440 0010                  		subi.w	#$10,d0
0000D8C6 6000                       		bra.s	loc_B5EE
0000D8C8                            ; ===========================================================================
0000D8C8                            
0000D8C8                            Glass_ChkSwitch:
0000D8C8 4A28 0034                  		tst.b	$34(a0)
0000D8CC 6600                       		bne.s	loc_B5E0
0000D8CE 45F8 F7E0                  		lea	(f_switch).w,a2
0000D8D2 7000                       		moveq	#0,d0
0000D8D4 1028 0028                  		move.b	obSubtype(a0),d0 ; load object type number
0000D8D8 E848                       		lsr.w	#4,d0		; read only the	first nybble
0000D8DA 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000D8DE 6700                       		beq.s	loc_B5EA	; if not, branch
0000D8E0 117C 0001 0034             		move.b	#1,$34(a0)
0000D8E6                            
0000D8E6                            loc_B5E0:
0000D8E6 4A68 0032                  		tst.w	glass_dist(a0)
0000D8EA 6700                       		beq.s	loc_B5EA
0000D8EC 5568 0032                  		subq.w	#2,glass_dist(a0)
0000D8F0                            
0000D8F0                            loc_B5EA:
0000D8F0 3028 0032                  		move.w	glass_dist(a0),d0
0000D8F4                            
0000D8F4                            loc_B5EE:
0000D8F4 3228 0030                  		move.w	$30(a0),d1
0000D8F8 9240                       		sub.w	d0,d1
0000D8FA 3141 000C                  		move.w	d1,obY(a0)
0000D8FE 4E75                       		rts	
0000D8FE 4E75                       		rts	
0000D900                            Map_Glass:	include	"_maps\MZ Large Green Glass Blocks.asm"
0000D900                            ; --------------------------------------------------------------------------------
0000D900                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000D900                            ; --------------------------------------------------------------------------------
0000D900                            
0000D900                            SME_NEyTf:	
0000D900 0000 0000                  		dc.w SME_NEyTf_6-SME_NEyTf, SME_NEyTf_43-SME_NEyTf	
0000D904 0000                       		dc.w SME_NEyTf_4E-SME_NEyTf	
0000D906 0C                         SME_NEyTf_6:	dc.b $C	
0000D907 B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0	
0000D90C B80C 0800 00               		dc.b $B8, $C, 8, 0, 0	
0000D911 C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0	
0000D916 C00F 0804 00               		dc.b $C0, $F, 8, 4, 0	
0000D91B E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0	
0000D920 E00F 0804 00               		dc.b $E0, $F, 8, 4, 0	
0000D925 000F 0004 E0               		dc.b 0, $F, 0, 4, $E0	
0000D92A 000F 0804 00               		dc.b 0, $F, 8, 4, 0	
0000D92F 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0	
0000D934 200F 0804 00               		dc.b $20, $F, 8, 4, 0	
0000D939 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0	
0000D93E 400C 1800 00               		dc.b $40, $C, $18, 0, 0	
0000D943 02                         SME_NEyTf_43:	dc.b 2	
0000D944 0806 6014 F0               		dc.b 8, 6, $60, $14, $F0	
0000D949 0006 6014 00               		dc.b 0, 6, $60, $14, 0	
0000D94E 0A                         SME_NEyTf_4E:	dc.b $A	
0000D94F C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0	
0000D954 C80C 0800 00               		dc.b $C8, $C, 8, 0, 0	
0000D959 D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0	
0000D95E D00F 0804 00               		dc.b $D0, $F, 8, 4, 0	
0000D963 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0	
0000D968 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0	
0000D96D 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0	
0000D972 100F 0804 00               		dc.b $10, $F, 8, 4, 0	
0000D977 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0	
0000D97C 300C 1800 00               		dc.b $30, $C, $18, 0, 0	
0000D982 00                         		even
0000D982 00                         		even
0000D982                            		include	"_incObj\31 Chained Stompers.asm"
0000D982                            ; ---------------------------------------------------------------------------
0000D982                            ; Object 31 - stomping metal blocks on chains (MZ)
0000D982                            ; ---------------------------------------------------------------------------
0000D982                            
0000D982                            ChainStomp:
0000D982 7000                       		moveq	#0,d0
0000D984 1028 0024                  		move.b	obRoutine(a0),d0
0000D988 323B 0000                  		move.w	CStom_Index(pc,d0.w),d1
0000D98C 4EFB 1000                  		jmp	CStom_Index(pc,d1.w)
0000D990                            ; ===========================================================================
0000D990 0000                       CStom_Index:	dc.w CStom_Main-CStom_Index
0000D992 0000                       		dc.w loc_B798-CStom_Index
0000D994 0000                       		dc.w loc_B7FE-CStom_Index
0000D996 0000                       		dc.w CStom_Display2-CStom_Index
0000D998 0000                       		dc.w loc_B7E2-CStom_Index
0000D99A                            
0000D99A =0000003A                  CStom_switch:	equ $3A			; switch number for the current stomper
0000D99A                            
0000D99A 0000                       CStom_SwchNums:	dc.b 0,	0		; switch number, obj number
0000D99C 0100                       		dc.b 1,	0
0000D99E                            
0000D99E 0200 00                    CStom_Var:	dc.b 2,	0, 0		; routine number, y-position, frame number
0000D9A1 041C 01                    		dc.b 4,	$1C, 1
0000D9A4 08CC 03                    		dc.b 8,	$CC, 3
0000D9A7 06F0 02                    		dc.b 6,	$F0, 2
0000D9AA                            
0000D9AA 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000D9AE 5000 7800                  		dc.w $5000, $7800
0000D9B2 3800 5800                  		dc.w $3800, $5800
0000D9B6 B800                       		dc.w $B800
0000D9B8                            ; ===========================================================================
0000D9B8                            
0000D9B8                            CStom_Main:	; Routine 0
0000D9B8 7000                       		moveq	#0,d0
0000D9BA 1028 0028                  		move.b	obSubtype(a0),d0
0000D9BE 6A00                       		bpl.s	loc_B6CE
0000D9C0 0240 007F                  		andi.w	#$7F,d0
0000D9C4 D040                       		add.w	d0,d0
0000D9C6 45FB 00D2                  		lea	CStom_SwchNums(pc,d0.w),a2
0000D9CA 115A 003A                  		move.b	(a2)+,CStom_switch(a0)
0000D9CE 101A                       		move.b	(a2)+,d0
0000D9D0 1140 0028                  		move.b	d0,obSubtype(a0)
0000D9D4                            
0000D9D4                            loc_B6CE:
0000D9D4 0200 000F                  		andi.b	#$F,d0
0000D9D8 D040                       		add.w	d0,d0
0000D9DA 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000D9DE 4A40                       		tst.w	d0
0000D9E0 6600                       		bne.s	loc_B6E0
0000D9E2 3142 0032                  		move.w	d2,$32(a0)
0000D9E6                            
0000D9E6                            loc_B6E0:
0000D9E6 45F9 0000 D99E             		lea	(CStom_Var).l,a2
0000D9EC 2248                       		movea.l	a0,a1
0000D9EE 7203                       		moveq	#3,d1
0000D9F0 6000                       		bra.s	CStom_MakeStomper
0000D9F2                            ; ===========================================================================
0000D9F2                            
0000D9F2                            CStom_Loop:
0000D9F2 6100 0000                  		bsr.w	FindNextFreeObj
0000D9F6 6600 0000                  		bne.w	CStom_SetSize
0000D9FA                            
0000D9FA                            CStom_MakeStomper:
0000D9FA 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000D9FE 12BC 0000                  		move.b	#id_ChainStomp,0(a1)
0000DA02 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000DA08 101A                       		move.b	(a2)+,d0
0000DA0A 4880                       		ext.w	d0
0000DA0C D068 000C                  		add.w	obY(a0),d0
0000DA10 3340 000C                  		move.w	d0,obY(a1)
0000DA14 237C 0000 0000 0004        		move.l	#Map_CStom,obMap(a1)
0000DA1C 337C 0300 0002             		move.w	#$300,obGfx(a1)
0000DA22 137C 0004 0001             		move.b	#4,obRender(a1)
0000DA28 3369 000C 0030             		move.w	obY(a1),$30(a1)
0000DA2E 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000DA34 137C 0010 0014             		move.b	#$10,obActWid(a1)
0000DA3A 3342 0034                  		move.w	d2,$34(a1)
0000DA3E 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000DA44 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000DA48 0C29 0001 001A             		cmpi.b	#1,obFrame(a1)
0000DA4E 6600                       		bne.s	loc_B76A
0000DA50 5341                       		subq.w	#1,d1
0000DA52 1028 0028                  		move.b	obSubtype(a0),d0
0000DA56 0240 00F0                  		andi.w	#$F0,d0
0000DA5A 0C40 0020                  		cmpi.w	#$20,d0
0000DA5E 679A                       		beq.s	CStom_MakeStomper
0000DA60 137C 0038 0014             		move.b	#$38,obActWid(a1)
0000DA66 137C 0090 0020             		move.b	#$90,obColType(a1)
0000DA6C 5241                       		addq.w	#1,d1
0000DA6E                            
0000DA6E                            loc_B76A:
0000DA6E 2348 003C                  		move.l	a0,$3C(a1)
0000DA72 51C9 FF7E                  		dbf	d1,CStom_Loop
0000DA76                            
0000DA76 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000DA7C                            
0000DA7C                            CStom_SetSize:
0000DA7C 7000                       		moveq	#0,d0
0000DA7E 1028 0028                  		move.b	obSubtype(a0),d0
0000DA82 E648                       		lsr.w	#3,d0
0000DA84 0200 000E                  		andi.b	#$E,d0
0000DA88 45FB 0000                  		lea	CStom_Var2(pc,d0.w),a2
0000DA8C 115A 0014                  		move.b	(a2)+,obActWid(a0)
0000DA90 115A 001A                  		move.b	(a2)+,obFrame(a0)
0000DA94 6000                       		bra.s	loc_B798
0000DA96                            ; ===========================================================================
0000DA96 3800                       CStom_Var2:	dc.b $38, 0		; width, frame number
0000DA98 3009                       		dc.b $30, 9
0000DA9A 100A                       		dc.b $10, $A
0000DA9C                            ; ===========================================================================
0000DA9C                            
0000DA9C                            loc_B798:	; Routine 2
0000DA9C 6100 0000                  		bsr.w	CStom_Types
0000DAA0 31E8 000C F7A4             		move.w	obY(a0),(v_obj31ypos).w
0000DAA6 7200                       		moveq	#0,d1
0000DAA8 1228 0014                  		move.b	obActWid(a0),d1
0000DAAC 0641 000B                  		addi.w	#$B,d1
0000DAB0 343C 000C                  		move.w	#$C,d2
0000DAB4 363C 000D                  		move.w	#$D,d3
0000DAB8 3828 0008                  		move.w	obX(a0),d4
0000DABC 6100 0000                  		bsr.w	SolidObject
0000DAC0 0828 0003 0022             		btst	#3,obStatus(a0)
0000DAC6 6700                       		beq.s	CStom_Display
0000DAC8 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000DACE 6400                       		bcc.s	CStom_Display
0000DAD0 2448                       		movea.l	a0,a2
0000DAD2 41F8 D000                  		lea	(v_player).w,a0
0000DAD6 4EB9 0000 0000             		jsr	(KillSonic).l
0000DADC 204A                       		movea.l	a2,a0
0000DADE                            
0000DADE                            CStom_Display:
0000DADE 6100 0000                  		bsr.w	DisplaySprite
0000DAE2 6000 0000                  		bra.w	CStom_ChkDel
0000DAE6                            ; ===========================================================================
0000DAE6                            
0000DAE6                            loc_B7E2:	; Routine 8
0000DAE6 117C 0080 0016             		move.b	#$80,obHeight(a0)
0000DAEC 08E8 0004 0001             		bset	#4,obRender(a0)
0000DAF2 2268 003C                  		movea.l	$3C(a0),a1
0000DAF6 1029 0032                  		move.b	$32(a1),d0
0000DAFA EA08                       		lsr.b	#5,d0
0000DAFC 5600                       		addq.b	#3,d0
0000DAFE 1140 001A                  		move.b	d0,obFrame(a0)
0000DB02                            
0000DB02                            loc_B7FE:	; Routine 4
0000DB02 2268 003C                  		movea.l	$3C(a0),a1
0000DB06 7000                       		moveq	#0,d0
0000DB08 1029 0032                  		move.b	$32(a1),d0
0000DB0C D068 0030                  		add.w	$30(a0),d0
0000DB10 3140 000C                  		move.w	d0,obY(a0)
0000DB14                            
0000DB14                            CStom_Display2:	; Routine 6
0000DB14 6100 0000                  		bsr.w	DisplaySprite
0000DB18                            
0000DB18                            CStom_ChkDel:
0000DB36 4E75                       		rts	
0000DB38                            ; ===========================================================================
0000DB38                            
0000DB38                            CStom_Types:
0000DB38 1028 0028                  		move.b	obSubtype(a0),d0
0000DB3C 0240 000F                  		andi.w	#$F,d0
0000DB40 D040                       		add.w	d0,d0
0000DB42 323B 0000                  		move.w	CStom_TypeIndex(pc,d0.w),d1
0000DB46 4EFB 1000                  		jmp	CStom_TypeIndex(pc,d1.w)
0000DB4A                            ; ===========================================================================
0000DB4A 0000                       CStom_TypeIndex:dc.w CStom_Type00-CStom_TypeIndex
0000DB4C 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000DB4E 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000DB50 0000                       		dc.w CStom_Type03-CStom_TypeIndex
0000DB52 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000DB54 0000                       		dc.w CStom_Type03-CStom_TypeIndex
0000DB56 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000DB58                            ; ===========================================================================
0000DB58                            
0000DB58                            CStom_Type00:
0000DB58 45F8 F7E0                  		lea	(f_switch).w,a2	; load switch statuses
0000DB5C 7000                       		moveq	#0,d0
0000DB5E 1028 003A                  		move.b	CStom_switch(a0),d0 ; move number 0 or 1 to d0
0000DB62 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000DB66 6700                       		beq.s	loc_B8A8	; if not, branch
0000DB68 4A78 F7A4                  		tst.w	(v_obj31ypos).w
0000DB6C 6A00                       		bpl.s	loc_B872
0000DB6E 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000DB74 6700                       		beq.s	loc_B8A0
0000DB76                            
0000DB76                            loc_B872:
0000DB76 4A68 0032                  		tst.w	$32(a0)
0000DB7A 6700                       		beq.s	loc_B8A0
0000DB7C 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000DB80 0200 000F                  		andi.b	#$F,d0
0000DB84 6600                       		bne.s	loc_B892
0000DB86 4A28 0001                  		tst.b	1(a0)
0000DB8A 6A00                       		bpl.s	loc_B892
0000DB96                            
0000DB96                            loc_B892:
0000DB96 0468 0080 0032             		subi.w	#$80,$32(a0)
0000DB9C 6400                       		bcc.s	CStom_Restart
0000DB9E 317C 0000 0032             		move.w	#0,$32(a0)
0000DBA4                            
0000DBA4                            loc_B8A0:
0000DBA4 317C 0000 0012             		move.w	#0,obVelY(a0)
0000DBAA 6000                       		bra.s	CStom_Restart
0000DBAC                            ; ===========================================================================
0000DBAC                            
0000DBAC                            loc_B8A8:
0000DBAC 3228 0034                  		move.w	$34(a0),d1
0000DBB0 B268 0032                  		cmp.w	$32(a0),d1
0000DBB4 6700                       		beq.s	CStom_Restart
0000DBB6 3028 0012                  		move.w	obVelY(a0),d0
0000DBBA 0668 0070 0012             		addi.w	#$70,obVelY(a0)	; make object fall
0000DBC0 D168 0032                  		add.w	d0,$32(a0)
0000DBC4 B268 0032                  		cmp.w	$32(a0),d1
0000DBC8 6200                       		bhi.s	CStom_Restart
0000DBCA 3141 0032                  		move.w	d1,$32(a0)
0000DBCE 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop object falling
0000DBD4 4A28 0001                  		tst.b	obRender(a0)
0000DBD8 6A00                       		bpl.s	CStom_Restart
0000DBE4                            
0000DBE4                            CStom_Restart:
0000DBE4 7000                       		moveq	#0,d0
0000DBE6 1028 0032                  		move.b	$32(a0),d0
0000DBEA D068 0030                  		add.w	$30(a0),d0
0000DBEE 3140 000C                  		move.w	d0,obY(a0)
0000DBF2 4E75                       		rts	
0000DBF4                            ; ===========================================================================
0000DBF4                            
0000DBF4                            CStom_Type01:
0000DBF4 4A68 0036                  		tst.w	$36(a0)
0000DBF8 6700                       		beq.s	loc_B938
0000DBFA 4A68 0038                  		tst.w	$38(a0)
0000DBFE 6700                       		beq.s	loc_B902
0000DC00 5368 0038                  		subq.w	#1,$38(a0)
0000DC04 6000                       		bra.s	loc_B97C
0000DC06                            ; ===========================================================================
0000DC06                            
0000DC06                            loc_B902:
0000DC06 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000DC0A 0200 000F                  		andi.b	#$F,d0
0000DC0E 6600                       		bne.s	loc_B91C
0000DC10 4A28 0001                  		tst.b	obRender(a0)
0000DC14 6A00                       		bpl.s	loc_B91C
0000DC20                            
0000DC20                            loc_B91C:
0000DC20 0468 0080 0032             		subi.w	#$80,$32(a0)
0000DC26 6400                       		bcc.s	loc_B97C
0000DC28 317C 0000 0032             		move.w	#0,$32(a0)
0000DC2E 317C 0000 0012             		move.w	#0,obVelY(a0)
0000DC34 317C 0000 0036             		move.w	#0,$36(a0)
0000DC3A 6000                       		bra.s	loc_B97C
0000DC3C                            ; ===========================================================================
0000DC3C                            
0000DC3C                            loc_B938:
0000DC3C 3228 0034                  		move.w	$34(a0),d1
0000DC40 B268 0032                  		cmp.w	$32(a0),d1
0000DC44 6700                       		beq.s	loc_B97C
0000DC46 3028 0012                  		move.w	obVelY(a0),d0
0000DC4A 0668 0070 0012             		addi.w	#$70,obVelY(a0)	; make object fall
0000DC50 D168 0032                  		add.w	d0,$32(a0)
0000DC54 B268 0032                  		cmp.w	$32(a0),d1
0000DC58 6200                       		bhi.s	loc_B97C
0000DC5A 3141 0032                  		move.w	d1,$32(a0)
0000DC5E 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop object falling
0000DC64 317C 0001 0036             		move.w	#1,$36(a0)
0000DC6A 317C 003C 0038             		move.w	#$3C,$38(a0)
0000DC70 4A28 0001                  		tst.b	obRender(a0)
0000DC74 6A00                       		bpl.s	loc_B97C
0000DC80                            
0000DC80                            loc_B97C:
0000DC80 6000 FF62                  		bra.w	CStom_Restart
0000DC84                            ; ===========================================================================
0000DC84                            
0000DC84                            CStom_Type03:
0000DC84 3038 D008                  		move.w	(v_player+obX).w,d0
0000DC88 9068 0008                  		sub.w	obX(a0),d0
0000DC8C 6400                       		bcc.s	loc_B98C
0000DC8E 4440                       		neg.w	d0
0000DC90                            
0000DC90                            loc_B98C:
0000DC90 0C40 0090                  		cmpi.w	#$90,d0
0000DC94 6400                       		bcc.s	loc_B996
0000DC96 5228 0028                  		addq.b	#1,obSubtype(a0)
0000DC9A                            
0000DC9A                            loc_B996:
0000DC9A 6000 FF48                  		bra.w	CStom_Restart
0000DC9A 6000 FF48                  		bra.w	CStom_Restart
0000DC9E                            		include	"_incObj\45 Sideways Stomper.asm"
0000DC9E                            ; ---------------------------------------------------------------------------
0000DC9E                            ; Object 45 - spiked metal block from beta version (MZ)
0000DC9E                            ; ---------------------------------------------------------------------------
0000DC9E                            
0000DC9E                            SideStomp:
0000DC9E 7000                       		moveq	#0,d0
0000DCA0 1028 0024                  		move.b	obRoutine(a0),d0
0000DCA4 323B 0000                  		move.w	SStom_Index(pc,d0.w),d1
0000DCA8 4EFB 1000                  		jmp	SStom_Index(pc,d1.w)
0000DCAC                            ; ===========================================================================
0000DCAC 0000                       SStom_Index:	dc.w SStom_Main-SStom_Index
0000DCAE 0000                       		dc.w SStom_Solid-SStom_Index
0000DCB0 0000                       		dc.w loc_BA8E-SStom_Index
0000DCB2 0000                       		dc.w SStom_Display-SStom_Index
0000DCB4 0000                       		dc.w SStom_Pole-SStom_Index
0000DCB6                            
0000DCB6                            		;	routine		frame
0000DCB6                            		;		 xpos
0000DCB6 0204 00                    SStom_Var:	dc.b	2,  	 4,	0	; main block
0000DCB9 04E4 01                    		dc.b	4,	-$1C,	1	; spikes
0000DCBC 0834 03                    		dc.b	8,	 $34,	3	; pole
0000DCBF 0628 02                    		dc.b	6,	 $28,	2	; wall bracket
0000DCC2                            
0000DCC2                            ;word_B9BE:	; Note that this indicates three subtypes
0000DCC2 3800                       SStom_Len:	dc.w $3800	; short
0000DCC4 A000                       		dc.w $A000	; long
0000DCC6 5000                       		dc.w $5000	; medium
0000DCC8                            ; ===========================================================================
0000DCC8                            
0000DCC8                            SStom_Main:	; Routine 0
0000DCC8 7000                       		moveq	#0,d0
0000DCCA 1028 0028                  		move.b	obSubtype(a0),d0
0000DCCE D040                       		add.w	d0,d0
0000DCD0 343B 00F0                  		move.w	SStom_Len(pc,d0.w),d2
0000DCD4 45F9 0000 DCB6             		lea	(SStom_Var).l,a2
0000DCDA 2248                       		movea.l	a0,a1
0000DCDC 7203                       		moveq	#3,d1
0000DCDE 6000                       		bra.s	@load
0000DCE0                            
0000DCE0                            	@loop:
0000DCE0 6100 0000                  		bsr.w	FindNextFreeObj
0000DCE4 6600                       		bne.s	@fail
0000DCE6                            
0000DCE6                            	@load:
0000DCE6 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000DCEA 12BC 0000                  		move.b	#id_SideStomp,0(a1)
0000DCEE 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000DCF4 101A                       		move.b	(a2)+,d0
0000DCF6 4880                       		ext.w	d0
0000DCF8 D068 0008                  		add.w	obX(a0),d0
0000DCFC 3340 0008                  		move.w	d0,obX(a1)
0000DD00 237C 0000 0000 0004        		move.l	#Map_SStom,obMap(a1)
0000DD08 337C 0300 0002             		move.w	#$300,obGfx(a1)
0000DD0E 137C 0004 0001             		move.b	#4,obRender(a1)
0000DD14 3369 0008 0030             		move.w	obX(a1),$30(a1)
0000DD1A 3368 0008 003A             		move.w	obX(a0),$3A(a1)
0000DD20 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000DD26 137C 0020 0014             		move.b	#$20,obActWid(a1)
0000DD2C 3342 0034                  		move.w	d2,$34(a1)
0000DD30 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000DD36 0C12 0001                  		cmpi.b	#1,(a2)		; is subobject spikes?
0000DD3A 6600                       		bne.s	@notspikes	; if not, branch
0000DD3C 137C 0091 0020             		move.b	#$91,obColType(a1) ; use harmful collision type
0000DD42                            
0000DD42                            	@notspikes:
0000DD42 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000DD46 2348 003C                  		move.l	a0,$3C(a1)
0000DD4A 51C9 FF94                  		dbf	d1,@loop	; repeat 3 times
0000DD4E                            
0000DD4E 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000DD54                            
0000DD54                            	@fail:
0000DD54 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000DD5A                            
0000DD5A                            SStom_Solid:	; Routine 2
0000DD5A 3F28 0008                  		move.w	obX(a0),-(sp)
0000DD5E 6100 0000                  		bsr.w	SStom_Move
0000DD62 323C 0017                  		move.w	#$17,d1
0000DD66 343C 0020                  		move.w	#$20,d2
0000DD6A 363C 0020                  		move.w	#$20,d3
0000DD6E 381F                       		move.w	(sp)+,d4
0000DD70 6100 0000                  		bsr.w	SolidObject
0000DD74 6100 0000                  		bsr.w	DisplaySprite
0000DD78 6000 0000                  		bra.w	SStom_ChkDel
0000DD7C                            ; ===========================================================================
0000DD7C                            
0000DD7C                            SStom_Pole:	; Routine 8
0000DD7C 2268 003C                  		movea.l	$3C(a0),a1
0000DD80 1029 0032                  		move.b	$32(a1),d0
0000DD84 0600 0010                  		addi.b	#$10,d0
0000DD88 EA08                       		lsr.b	#5,d0
0000DD8A 5600                       		addq.b	#3,d0
0000DD8C 1140 001A                  		move.b	d0,obFrame(a0)
0000DD90                            
0000DD90                            loc_BA8E:	; Routine 4
0000DD90 2268 003C                  		movea.l	$3C(a0),a1
0000DD94 7000                       		moveq	#0,d0
0000DD96 1029 0032                  		move.b	$32(a1),d0
0000DD9A 4440                       		neg.w	d0
0000DD9C D068 0030                  		add.w	$30(a0),d0
0000DDA0 3140 0008                  		move.w	d0,obX(a0)
0000DDA4                            
0000DDA4                            SStom_Display:	; Routine 6
0000DDA4 6100 0000                  		bsr.w	DisplaySprite
0000DDA8                            
0000DDA8                            SStom_ChkDel:
0000DDC6 4E75                       		rts	
0000DDC8                            
0000DDC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DDC8                            
0000DDC8                            
0000DDC8                            SStom_Move:
0000DDC8 7000                       		moveq	#0,d0
0000DDCA 1028 0028                  		move.b	obSubtype(a0),d0
0000DDCE D040                       		add.w	d0,d0
0000DDD0 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000DDD4 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000DDD8                            ; End of function SStom_Move
0000DDD8                            
0000DDD8                            ; ===========================================================================
0000DDD8                            		; This indicates only two subtypes... that do the same thing
0000DDD8                            		; Compare to SStom_Len. This breaks subtype 02
0000DDD8 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000DDDA 0000                       		dc.w loc_BADA-off_BAD6
0000DDDC                            ; ===========================================================================
0000DDDC                            
0000DDDC                            loc_BADA:
0000DDDC 4A68 0036                  		tst.w	$36(a0)
0000DDE0 6700                       		beq.s	loc_BB08
0000DDE2 4A68 0038                  		tst.w	$38(a0)
0000DDE6 6700                       		beq.s	loc_BAEC
0000DDE8 5368 0038                  		subq.w	#1,$38(a0)
0000DDEC 6000                       		bra.s	loc_BB3C
0000DDEE                            ; ===========================================================================
0000DDEE                            
0000DDEE                            loc_BAEC:
0000DDEE 0468 0080 0032             		subi.w	#$80,$32(a0)
0000DDF4 6400                       		bcc.s	loc_BB3C
0000DDF6 317C 0000 0032             		move.w	#0,$32(a0)
0000DDFC 317C 0000 0010             		move.w	#0,obVelX(a0)
0000DE02 317C 0000 0036             		move.w	#0,$36(a0)
0000DE08 6000                       		bra.s	loc_BB3C
0000DE0A                            ; ===========================================================================
0000DE0A                            
0000DE0A                            loc_BB08:
0000DE0A 3228 0034                  		move.w	$34(a0),d1
0000DE0E B268 0032                  		cmp.w	$32(a0),d1
0000DE12 6700                       		beq.s	loc_BB3C
0000DE14 3028 0010                  		move.w	obVelX(a0),d0
0000DE18 0668 0070 0010             		addi.w	#$70,obVelX(a0)
0000DE1E D168 0032                  		add.w	d0,$32(a0)
0000DE22 B268 0032                  		cmp.w	$32(a0),d1
0000DE26 6200                       		bhi.s	loc_BB3C
0000DE28 3141 0032                  		move.w	d1,$32(a0)
0000DE2C 317C 0000 0010             		move.w	#0,obVelX(a0)
0000DE32 317C 0001 0036             		move.w	#1,$36(a0)
0000DE38 317C 003C 0038             		move.w	#$3C,$38(a0)
0000DE3E                            
0000DE3E                            loc_BB3C:
0000DE3E 7000                       		moveq	#0,d0
0000DE40 1028 0032                  		move.b	$32(a0),d0
0000DE44 4440                       		neg.w	d0
0000DE46 D068 0030                  		add.w	$30(a0),d0
0000DE4A 3140 0008                  		move.w	d0,obX(a0)
0000DE4E 4E75                       		rts	
0000DE4E 4E75                       		rts	
0000DE50                            Map_CStom:	include	"_maps\Chained Stompers.asm"
0000DE50                            ; ---------------------------------------------------------------------------
0000DE50                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000DE50                            ; ---------------------------------------------------------------------------
0000DE50                            Map_CStom_internal:
0000DE50 0000                       		dc.w @wideblock-Map_CStom_internal
0000DE52 0000                       		dc.w @spikes-Map_CStom_internal
0000DE54 0000                       		dc.w @ceiling-Map_CStom_internal
0000DE56 0000                       		dc.w @chain1-Map_CStom_internal
0000DE58 0000                       		dc.w @chain2-Map_CStom_internal
0000DE5A 0000                       		dc.w @chain3-Map_CStom_internal
0000DE5C 0000                       		dc.w @chain4-Map_CStom_internal
0000DE5E 0000                       		dc.w @chain5-Map_CStom_internal
0000DE60 0000                       		dc.w @chain5-Map_CStom_internal
0000DE62 0000                       		dc.w @mediumblock-Map_CStom_internal
0000DE64 0000                       		dc.w @smallblock-Map_CStom_internal
0000DE66 05                         @wideblock:	dc.b 5
0000DE67 F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000DE6C F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000DE71 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000DE76 F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000DE7B F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000DE80 05                         @spikes:	dc.b 5
0000DE81 F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000DE86 F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000DE8B F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000DE90 F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000DE95 F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000DE9A 01                         @ceiling:	dc.b 1
0000DE9B DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000DEA0 02                         @chain1:	dc.b 2
0000DEA1 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DEA6 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DEAB 04                         @chain2:	dc.b 4
0000DEAC E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DEB1 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DEB6 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DEBB 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DEC0 06                         @chain3:	dc.b 6
0000DEC1 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000DEC6 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000DECB E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DED0 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DED5 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DEDA 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DEDF 08                         @chain4:	dc.b 8
0000DEE0 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000DEE5 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000DEEA C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000DEEF D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000DEF4 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DEF9 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DEFE 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DF03 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DF08 0A                         @chain5:	dc.b $A
0000DF09 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000DF0E 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000DF13 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000DF18 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000DF1D C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000DF22 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000DF27 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DF2C F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DF31 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DF36 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DF3B 05                         @mediumblock:	dc.b 5
0000DF3C F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000DF41 F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000DF46 F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000DF4B F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000DF50 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000DF55 01                         @smallblock:	dc.b 1
0000DF56 EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000DF5C 00                         		even
0000DF5C 00                         		even
0000DF5C                            Map_SStom:	include	"_maps\Sideways Stomper.asm"
0000DF5C                            ; ---------------------------------------------------------------------------
0000DF5C                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000DF5C                            ; ---------------------------------------------------------------------------
0000DF5C                            Map_SStom_internal:
0000DF5C 0000                       		dc.w @block-Map_SStom_internal
0000DF5E 0000                       		dc.w @spikes-Map_SStom_internal
0000DF60 0000                       		dc.w @wallbracket-Map_SStom_internal
0000DF62 0000                       		dc.w @pole1-Map_SStom_internal
0000DF64 0000                       		dc.w @pole2-Map_SStom_internal
0000DF66 0000                       		dc.w @pole3-Map_SStom_internal
0000DF68 0000                       		dc.w @pole4-Map_SStom_internal
0000DF6A 0000                       		dc.w @pole5-Map_SStom_internal
0000DF6C 0000                       		dc.w @pole5-Map_SStom_internal
0000DF6E 03                         @block:		dc.b 3
0000DF6F E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4 ; main metal block
0000DF74 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000DF79 F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000DF7E 03                         @spikes:	dc.b 3
0000DF7F E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0 ; three spikes
0000DF84 FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000DF89 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000DF8E 01                         @wallbracket:	dc.b 1
0000DF8F F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC ; thing holding it to the wall
0000DF94 02                         @pole1:		dc.b 2
0000DF95 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0 ; poles of various lengths
0000DF9A F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DF9F 04                         @pole2:		dc.b 4
0000DFA0 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DFA5 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DFAA F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DFAF F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DFB4 06                         @pole3:		dc.b 6
0000DFB5 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DFBA F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DFBF F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DFC4 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DFC9 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000DFCE F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000DFD3 08                         @pole4:		dc.b 8
0000DFD4 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DFD9 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DFDE F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DFE3 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DFE8 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000DFED F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000DFF2 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000DFF7 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000DFFC 08                         @pole5:		dc.b 8		; Incorrect: this should be $A
0000DFFD F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000E002 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000E007 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000E00C F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000E011 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000E016 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000E01B F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000E020 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000E025 F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000E02A F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000E02F                            		; @pole6 should be here, but it isn't...
0000E030 00                         		even
0000E030 00                         		even
0000E030                            
0000E030                            		include	"_incObj\32 Button.asm"
0000E030                            ; ---------------------------------------------------------------------------
0000E030                            ; Object 32 - buttons (MZ, SYZ, LZ, SBZ)
0000E030                            ; ---------------------------------------------------------------------------
0000E030                            
0000E030                            Button:
0000E030 7000                       		moveq	#0,d0
0000E032 1028 0024                  		move.b	obRoutine(a0),d0
0000E036 323B 0000                  		move.w	But_Index(pc,d0.w),d1
0000E03A 4EFB 1000                  		jmp	But_Index(pc,d1.w)
0000E03E                            ; ===========================================================================
0000E03E 0000                       But_Index:	dc.w But_Main-But_Index
0000E040 0000                       		dc.w But_Pressed-But_Index
0000E042                            ; ===========================================================================
0000E042                            
0000E042                            But_Main:	; Routine 0
0000E042 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E046 217C 0000 0000 0004        		move.l	#Map_But,obMap(a0)
0000E04E 317C 4513 0002             		move.w	#$4513,obGfx(a0) ; MZ specific code
0000E054 0C38 0002 FE10             		cmpi.b	#id_MZ,(v_zone).w ; is level Marble Zone?
0000E05A 6700                       		beq.s	But_IsMZ	; if yes, branch
0000E05C                            
0000E05C 317C 0513 0002             		move.w	#$513,obGfx(a0)	; SYZ, LZ and SBZ specific code
0000E062                            
0000E062                            	But_IsMZ:
0000E062 117C 0004 0001             		move.b	#4,obRender(a0)
0000E068 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000E06E 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000E074 5668 000C                  		addq.w	#3,obY(a0)
0000E078                            
0000E078                            But_Pressed:	; Routine 2
0000E078 4A28 0001                  		tst.b	obRender(a0)
0000E07C 6A00                       		bpl.s	But_Display
0000E07E 323C 001B                  		move.w	#$1B,d1
0000E082 343C 0005                  		move.w	#5,d2
0000E086 363C 0005                  		move.w	#5,d3
0000E08A 3828 0008                  		move.w	obX(a0),d4
0000E08E 6100 0000                  		bsr.w	SolidObject
0000E092 08A8 0000 001A             		bclr	#0,obFrame(a0)	; use "unpressed" frame
0000E098 1028 0028                  		move.b	obSubtype(a0),d0
0000E09C 0240 000F                  		andi.w	#$F,d0
0000E0A0 47F8 F7E0                  		lea	(f_switch).w,a3
0000E0A4 47F3 0000                  		lea	(a3,d0.w),a3
0000E0A8 7600                       		moveq	#0,d3
0000E0AA 0828 0006 0028             		btst	#6,obSubtype(a0)
0000E0B0 6700                       		beq.s	loc_BDB2
0000E0B2 7607                       		moveq	#7,d3
0000E0B4                            
0000E0B4                            loc_BDB2:
0000E0B4 4A28 0028                  		tst.b	obSubtype(a0)
0000E0B8 6A00                       		bpl.s	loc_BDBE
0000E0BA 6100 0000                  		bsr.w	But_MZBlock
0000E0BE 6600                       		bne.s	loc_BDC8
0000E0C0                            
0000E0C0                            loc_BDBE:
0000E0C0 4A28 0025                  		tst.b	ob2ndRout(a0)
0000E0C4 6600                       		bne.s	loc_BDC8
0000E0C6 0793                       		bclr	d3,(a3)
0000E0C8 6000                       		bra.s	loc_BDDE
0000E0CA                            ; ===========================================================================
0000E0CA                            
0000E0CA                            loc_BDC8:
0000E0CA 4A13                       		tst.b	(a3)
0000E0CC 6600                       		bne.s	loc_BDD6
0000E0D8                            
0000E0D8                            loc_BDD6:
0000E0D8 07D3                       		bset	d3,(a3)
0000E0DA 08E8 0000 001A             		bset	#0,obFrame(a0)	; use "pressed"	frame
0000E0E0                            
0000E0E0                            loc_BDDE:
0000E0E0 0828 0005 0028             		btst	#5,obSubtype(a0)
0000E0E6 6700                       		beq.s	But_Display
0000E0E8 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000E0EC 6A00                       		bpl.s	But_Display
0000E0EE 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000E0F4 0868 0001 001A             		bchg	#1,obFrame(a0)
0000E0FA                            
0000E0FA                            But_Display:
0000E0FA 6100 0000                  		bsr.w	DisplaySprite
0000E11C 4E75                       		rts	
0000E11E                            ; ===========================================================================
0000E11E                            
0000E11E                            But_Delete:
0000E11E 6100 0000                  		bsr.w	DeleteObject
0000E122 4E75                       		rts	
0000E124                            
0000E124                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E124                            
0000E124                            
0000E124                            But_MZBlock:
0000E124 3F03                       		move.w	d3,-(sp)
0000E126 3428 0008                  		move.w	obX(a0),d2
0000E12A 3628 000C                  		move.w	obY(a0),d3
0000E12E 0442 0010                  		subi.w	#$10,d2
0000E132 5143                       		subq.w	#8,d3
0000E134 383C 0020                  		move.w	#$20,d4
0000E138 3A3C 0010                  		move.w	#$10,d5
0000E13C 43F8 D800                  		lea	(v_lvlobjspace).w,a1 ; begin checking object RAM
0000E140 3C3C 005F                  		move.w	#$5F,d6
0000E144                            
0000E144                            But_MZLoop:
0000E144 4A29 0001                  		tst.b	obRender(a1)
0000E148 6A00                       		bpl.s	loc_BE4E
0000E14A 0C11 0000                  		cmpi.b	#id_PushBlock,(a1) ; is the object a green MZ block?
0000E14E 6700                       		beq.s	loc_BE5E	; if yes, branch
0000E150                            
0000E150                            loc_BE4E:
0000E150 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000E154 51CE FFEE                  		dbf	d6,But_MZLoop	; repeat $5F times
0000E158                            
0000E158 361F                       		move.w	(sp)+,d3
0000E15A 7000                       		moveq	#0,d0
0000E15C                            
0000E15C                            locret_BE5A:
0000E15C 4E75                       		rts	
0000E15E                            ; ===========================================================================
0000E15E 1010                       But_MZData:	dc.b $10, $10
0000E160                            ; ===========================================================================
0000E160                            
0000E160                            loc_BE5E:
0000E160 7001                       		moveq	#1,d0
0000E162 0240 003F                  		andi.w	#$3F,d0
0000E166 D040                       		add.w	d0,d0
0000E168 45FB 00F2                  		lea	But_MZData-2(pc,d0.w),a2
0000E16C 121A                       		move.b	(a2)+,d1
0000E16E 4881                       		ext.w	d1
0000E170 3029 0008                  		move.w	obX(a1),d0
0000E174 9041                       		sub.w	d1,d0
0000E176 9042                       		sub.w	d2,d0
0000E178 6400                       		bcc.s	loc_BE80
0000E17A D241                       		add.w	d1,d1
0000E17C D041                       		add.w	d1,d0
0000E17E 6500                       		bcs.s	loc_BE84
0000E180 60CE                       		bra.s	loc_BE4E
0000E182                            ; ===========================================================================
0000E182                            
0000E182                            loc_BE80:
0000E182 B044                       		cmp.w	d4,d0
0000E184 62CA                       		bhi.s	loc_BE4E
0000E186                            
0000E186                            loc_BE84:
0000E186 121A                       		move.b	(a2)+,d1
0000E188 4881                       		ext.w	d1
0000E18A 3029 000C                  		move.w	obY(a1),d0
0000E18E 9041                       		sub.w	d1,d0
0000E190 9043                       		sub.w	d3,d0
0000E192 6400                       		bcc.s	loc_BE9A
0000E194 D241                       		add.w	d1,d1
0000E196 D041                       		add.w	d1,d0
0000E198 6500                       		bcs.s	loc_BE9E
0000E19A 60B4                       		bra.s	loc_BE4E
0000E19C                            ; ===========================================================================
0000E19C                            
0000E19C                            loc_BE9A:
0000E19C B045                       		cmp.w	d5,d0
0000E19E 62B0                       		bhi.s	loc_BE4E
0000E1A0                            
0000E1A0                            loc_BE9E:
0000E1A0 361F                       		move.w	(sp)+,d3
0000E1A2 7001                       		moveq	#1,d0
0000E1A4 4E75                       		rts	
0000E1A6                            ; End of function But_MZBlock
0000E1A6                            ; End of function But_MZBlock
0000E1A6                            Map_But:	include	"_maps\Button.asm"
0000E1A6                            ; ---------------------------------------------------------------------------
0000E1A6                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000E1A6                            ; ---------------------------------------------------------------------------
0000E1A6                            Map_But_internal:
0000E1A6 0000                       		dc.w byte_BEAC-Map_But_internal
0000E1A8 0000                       		dc.w byte_BEB7-Map_But_internal
0000E1AA 0000                       		dc.w byte_BEC2-Map_But_internal
0000E1AC 0000                       		dc.w byte_BEB7-Map_But_internal
0000E1AE 02                         byte_BEAC:	dc.b 2
0000E1AF F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000E1B4 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000E1B9 02                         byte_BEB7:	dc.b 2
0000E1BA F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000E1BF F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000E1C4 02                         byte_BEC2:	dc.b 2
0000E1C5 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000E1CA F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000E1CF F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000E1D4                            		even
0000E1D4                            		even
0000E1D4                            
0000E1D4                            		include	"_incObj\33 Pushable Blocks.asm"
0000E1D4                            ; ---------------------------------------------------------------------------
0000E1D4                            ; Object 33 - pushable blocks (MZ, LZ)
0000E1D4                            ; ---------------------------------------------------------------------------
0000E1D4                            
0000E1D4                            PushBlock:
0000E1D4 7000                       		moveq	#0,d0
0000E1D6 1028 0024                  		move.b	obRoutine(a0),d0
0000E1DA 323B 0000                  		move.w	PushB_Index(pc,d0.w),d1
0000E1DE 4EFB 1000                  		jmp	PushB_Index(pc,d1.w)
0000E1E2                            ; ===========================================================================
0000E1E2 0000                       PushB_Index:	dc.w PushB_Main-PushB_Index
0000E1E4 0000                       		dc.w loc_BF6E-PushB_Index
0000E1E6 0000                       		dc.w loc_C02C-PushB_Index
0000E1E8                            
0000E1E8 1000                       PushB_Var:	dc.b $10, 0	; object width,	frame number
0000E1EA 4001                       		dc.b $40, 1
0000E1EC                            ; ===========================================================================
0000E1EC                            
0000E1EC                            PushB_Main:	; Routine 0
0000E1EC 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E1F0 117C 000F 0016             		move.b	#$F,obHeight(a0)
0000E1F6 117C 000F 0017             		move.b	#$F,obWidth(a0)
0000E1FC 217C 0000 0000 0004        		move.l	#Map_Push,obMap(a0)
0000E204 317C 42B8 0002             		move.w	#$42B8,obGfx(a0) ; MZ specific code
0000E20A 0C38 0001 FE10             		cmpi.b	#1,(v_zone).w
0000E210 6600                       		bne.s	@notLZ
0000E212 317C 43DE 0002             		move.w	#$43DE,obGfx(a0) ; LZ specific code
0000E218                            
0000E218                            	@notLZ:
0000E218 117C 0004 0001             		move.b	#4,obRender(a0)
0000E21E 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000E224 3168 0008 0034             		move.w	obX(a0),$34(a0)
0000E22A 3168 000C 0036             		move.w	obY(a0),$36(a0)
0000E230 7000                       		moveq	#0,d0
0000E232 1028 0028                  		move.b	obSubtype(a0),d0
0000E236 D040                       		add.w	d0,d0
0000E238 0240 000E                  		andi.w	#$E,d0
0000E23C 45FB 00AA                  		lea	PushB_Var(pc,d0.w),a2
0000E240 115A 0014                  		move.b	(a2)+,obActWid(a0)
0000E244 115A 001A                  		move.b	(a2)+,obFrame(a0)
0000E248 4A28 0028                  		tst.b	obSubtype(a0)
0000E24C 6700                       		beq.s	@chkgone
0000E24E 317C C2B8 0002             		move.w	#$C2B8,obGfx(a0)
0000E254                            
0000E254                            	@chkgone:
0000E254 45F8 FC00                  		lea	(v_objstate).w,a2
0000E258 7000                       		moveq	#0,d0
0000E25A 1028 0023                  		move.b	obRespawnNo(a0),d0
0000E25E 6700                       		beq.s	loc_BF6E
0000E260 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000E266 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000E26C 6600 0000                  		bne.w	DeleteObject
0000E270                            
0000E270                            loc_BF6E:	; Routine 2
0000E270 4A28 0032                  		tst.b	$32(a0)
0000E274 6600 0000                  		bne.w	loc_C046
0000E278 7200                       		moveq	#0,d1
0000E27A 1228 0014                  		move.b	obActWid(a0),d1
0000E27E 0641 000B                  		addi.w	#$B,d1
0000E282 343C 0010                  		move.w	#$10,d2
0000E286 363C 0011                  		move.w	#$11,d3
0000E28A 3828 0008                  		move.w	obX(a0),d4
0000E28E 6100 0000                  		bsr.w	loc_C186
0000E292 0C78 0200 FE10             		cmpi.w	#(id_MZ<<8)+0,(v_zone).w ; is the level MZ act 1?
0000E298 6600                       		bne.s	loc_BFC6	; if not, branch
0000E29A 08A8 0007 0028             		bclr	#7,obSubtype(a0)
0000E2A0 3028 0008                  		move.w	obX(a0),d0
0000E2A4 0C40 0A20                  		cmpi.w	#$A20,d0
0000E2A8 6500                       		bcs.s	loc_BFC6
0000E2AA 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000E2AE 6400                       		bcc.s	loc_BFC6
0000E2B0 3038 F7A4                  		move.w	(v_obj31ypos).w,d0
0000E2B4 0440 001C                  		subi.w	#$1C,d0
0000E2B8 3140 000C                  		move.w	d0,obY(a0)
0000E2BC 08F8 0007 F7A4             		bset	#7,(v_obj31ypos).w
0000E2C2 08E8 0007 0028             		bset	#7,obSubtype(a0)
0000E2C8                            
0000E2C8                            	loc_BFC6:
0000E2E4 6000 0000                  		bra.w	DisplaySprite
0000E2E8                            ; ===========================================================================
0000E2E8                            
0000E2E8                            loc_ppppp:
0000E304 3168 0034 0008             		move.w	$34(a0),obX(a0)
0000E30A 3168 0036 000C             		move.w	$36(a0),obY(a0)
0000E310 117C 0004 0024             		move.b	#4,obRoutine(a0)
0000E316 6000                       		bra.s	loc_C02C
0000E318                            ; ===========================================================================
0000E318                            
0000E318                            loc_C016:
0000E318 45F8 FC00                  		lea	(v_objstate).w,a2
0000E31C 7000                       		moveq	#0,d0
0000E31E 1028 0023                  		move.b	obRespawnNo(a0),d0
0000E322 6700                       		beq.s	loc_C028
0000E324 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000E32A                            
0000E32A                            loc_C028:
0000E32A 6000 0000                  		bra.w	DeleteObject
0000E32E                            ; ===========================================================================
0000E32E                            
0000E32E                            loc_C02C:	; Routine 4
0000E32E 6100 0000                  		bsr.w	ChkPartiallyVisible
0000E332 6700                       		beq.s	locret_C044
0000E334 117C 0002 0024             		move.b	#2,obRoutine(a0)
0000E33A 4228 0032                  		clr.b	$32(a0)
0000E33E 4268 0010                  		clr.w	obVelX(a0)
0000E342 4268 0012                  		clr.w	obVelY(a0)
0000E346                            
0000E346                            locret_C044:
0000E346 4E75                       		rts	
0000E348                            ; ===========================================================================
0000E348                            
0000E348                            loc_C046:
0000E348 3F28 0008                  		move.w	obX(a0),-(sp)
0000E34C 0C28 0004 0025             		cmpi.b	#4,ob2ndRout(a0)
0000E352 6400                       		bcc.s	loc_C056
0000E354 6100 0000                  		bsr.w	SpeedToPos
0000E358                            
0000E358                            loc_C056:
0000E358 0828 0001 0022             		btst	#1,obStatus(a0)
0000E35E 6700                       		beq.s	loc_C0A0
0000E360 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000E366 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000E36C 4A41                       		tst.w	d1
0000E36E 6A00 0000                  		bpl.w	loc_C09E
0000E372 D368 000C                  		add.w	d1,obY(a0)
0000E376 4268 0012                  		clr.w	obVelY(a0)
0000E37A 08A8 0001 0022             		bclr	#1,obStatus(a0)
0000E380 3011                       		move.w	(a1),d0
0000E382 0240 03FF                  		andi.w	#$3FF,d0
0000E386 0C40 016A                  		cmpi.w	#$16A,d0
0000E38A 6500                       		bcs.s	loc_C09E
0000E38C 3028 0030                  		move.w	$30(a0),d0
0000E390 E640                       		asr.w	#3,d0
0000E392 3140 0010                  		move.w	d0,obVelX(a0)
0000E396 117C 0001 0032             		move.b	#1,$32(a0)
0000E39C 4268 000E                  		clr.w	$E(a0)
0000E3A0                            
0000E3A0                            loc_C09E:
0000E3A0 6000                       		bra.s	loc_C0E6
0000E3A2                            ; ===========================================================================
0000E3A2                            
0000E3A2                            loc_C0A0:
0000E3A2 4A68 0010                  		tst.w	obVelX(a0)
0000E3A6 6700 0000                  		beq.w	loc_C0D6
0000E3AA 6B00                       		bmi.s	loc_C0BC
0000E3AC 7600                       		moveq	#0,d3
0000E3AE 1628 0014                  		move.b	obActWid(a0),d3
0000E3B2 4EB9 0000 0000             		jsr	(ObjHitWallRight).l
0000E3B8 4A41                       		tst.w	d1		; has block touched a wall?
0000E3BA 6B00                       		bmi.s	PushB_StopPush	; if yes, branch
0000E3BC 6000                       		bra.s	loc_C0E6
0000E3BE                            ; ===========================================================================
0000E3BE                            
0000E3BE                            loc_C0BC:
0000E3BE 7600                       		moveq	#0,d3
0000E3C0 1628 0014                  		move.b	obActWid(a0),d3
0000E3C4 4643                       		not.w	d3
0000E3C6 4EB9 0000 0000             		jsr	(ObjHitWallLeft).l
0000E3CC 4A41                       		tst.w	d1		; has block touched a wall?
0000E3CE 6B00                       		bmi.s	PushB_StopPush	; if yes, branch
0000E3D0 6000                       		bra.s	loc_C0E6
0000E3D2                            ; ===========================================================================
0000E3D2                            
0000E3D2                            PushB_StopPush:
0000E3D2 4268 0010                  		clr.w	obVelX(a0)		; stop block moving
0000E3D6 6000                       		bra.s	loc_C0E6
0000E3D8                            ; ===========================================================================
0000E3D8                            
0000E3D8                            loc_C0D6:
0000E3D8 06A8 0000 2001 000C        		addi.l	#$2001,obY(a0)
0000E3E0 0C28 00A0 000F             		cmpi.b	#$A0,obY+3(a0)
0000E3E6 6400                       		bcc.s	loc_C104
0000E3E8                            
0000E3E8                            loc_C0E6:
0000E3E8 7200                       		moveq	#0,d1
0000E3EA 1228 0014                  		move.b	obActWid(a0),d1
0000E3EE 0641 000B                  		addi.w	#$B,d1
0000E3F2 343C 0010                  		move.w	#$10,d2
0000E3F6 363C 0011                  		move.w	#$11,d3
0000E3FA 381F                       		move.w	(sp)+,d4
0000E3FC 6100 0000                  		bsr.w	loc_C186
0000E400 6100                       		bsr.s	PushB_ChkLava
0000E402 6000 FEC4                  		bra.w	loc_BFC6
0000E406                            ; ===========================================================================
0000E406                            
0000E406                            loc_C104:
0000E406 381F                       		move.w	(sp)+,d4
0000E408 43F8 D000                  		lea	(v_player).w,a1
0000E40C 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000E412 08A8 0003 0022             		bclr	#3,obStatus(a0)
0000E418 6000 FECE                  		bra.w	loc_ppppp
0000E41C                            ; ===========================================================================
0000E41C                            
0000E41C                            PushB_ChkLava:
0000E41C 0C78 0201 FE10             		cmpi.w	#(id_MZ<<8)+1,(v_zone).w ; is the level MZ act 2?
0000E422 6600                       		bne.s	PushB_ChkLava2	; if not, branch
0000E424 343C FFE0                  		move.w	#-$20,d2
0000E428 0C68 0DD0 0008             		cmpi.w	#$DD0,obX(a0)
0000E42E 6700                       		beq.s	PushB_LoadLava
0000E430 0C68 0CC0 0008             		cmpi.w	#$CC0,obX(a0)
0000E436 6700                       		beq.s	PushB_LoadLava
0000E438 0C68 0BA0 0008             		cmpi.w	#$BA0,obX(a0)
0000E43E 6700                       		beq.s	PushB_LoadLava
0000E440 4E75                       		rts	
0000E442                            ; ===========================================================================
0000E442                            
0000E442                            PushB_ChkLava2:
0000E442 0C78 0202 FE10             		cmpi.w	#(id_MZ<<8)+2,(v_zone).w ; is the level MZ act 3?
0000E448 6600                       		bne.s	PushB_NoLava	; if not, branch
0000E44A 343C 0020                  		move.w	#$20,d2
0000E44E 0C68 0560 0008             		cmpi.w	#$560,obX(a0)
0000E454 6700                       		beq.s	PushB_LoadLava
0000E456 0C68 05C0 0008             		cmpi.w	#$5C0,obX(a0)
0000E45C 6700                       		beq.s	PushB_LoadLava
0000E45E                            
0000E45E                            PushB_NoLava:
0000E45E 4E75                       		rts	
0000E460                            ; ===========================================================================
0000E460                            
0000E460                            PushB_LoadLava:
0000E460 6100 0000                  		bsr.w	FindFreeObj
0000E464 6600                       		bne.s	locret_C184
0000E466 12BC 0000                  		move.b	#id_GeyserMaker,0(a1) ; load lava geyser object
0000E46A 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000E470 D569 0008                  		add.w	d2,obX(a1)
0000E474 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000E47A 0669 0010 000C             		addi.w	#$10,obY(a1)
0000E480 2348 003C                  		move.l	a0,$3C(a1)
0000E484                            
0000E484                            locret_C184:
0000E484 4E75                       		rts	
0000E486                            ; ===========================================================================
0000E486                            
0000E486                            loc_C186:
0000E486 1028 0025                  		move.b	ob2ndRout(a0),d0
0000E48A 6700 0000                  		beq.w	loc_C218
0000E48E 5500                       		subq.b	#2,d0
0000E490 6600                       		bne.s	loc_C1AA
0000E492 6100 AD66                  		bsr.w	ExitPlatform
0000E496 0829 0003 0022             		btst	#3,obStatus(a1)
0000E49C 6600                       		bne.s	loc_C1A4
0000E49E 4228 0025                  		clr.b	ob2ndRout(a0)
0000E4A2 4E75                       		rts	
0000E4A4                            ; ===========================================================================
0000E4A4                            
0000E4A4                            loc_C1A4:
0000E4A4 3404                       		move.w	d4,d2
0000E4A6 6000 B2B0                  		bra.w	MvSonicOnPtfm
0000E4AA                            ; ===========================================================================
0000E4AA                            
0000E4AA                            loc_C1AA:
0000E4AA 5500                       		subq.b	#2,d0
0000E4AC 6600                       		bne.s	loc_C1F2
0000E4AE 6100 0000                  		bsr.w	SpeedToPos
0000E4B2 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000E4B8 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000E4BE 4A41                       		tst.w	d1
0000E4C0 6A00 0000                  		bpl.w	locret_C1F0
0000E4C4 D368 000C                  		add.w	d1,obY(a0)
0000E4C8 4268 0012                  		clr.w	obVelY(a0)
0000E4CC 4228 0025                  		clr.b	ob2ndRout(a0)
0000E4D0 3011                       		move.w	(a1),d0
0000E4D2 0240 03FF                  		andi.w	#$3FF,d0
0000E4D6 0C40 016A                  		cmpi.w	#$16A,d0
0000E4DA 6500                       		bcs.s	locret_C1F0
0000E4DC 3028 0030                  		move.w	$30(a0),d0
0000E4E0 E640                       		asr.w	#3,d0
0000E4E2 3140 0010                  		move.w	d0,obVelX(a0)
0000E4E6 117C 0001 0032             		move.b	#1,$32(a0)
0000E4EC 4268 000E                  		clr.w	obY+2(a0)
0000E4F0                            
0000E4F0                            locret_C1F0:
0000E4F0 4E75                       		rts	
0000E4F2                            ; ===========================================================================
0000E4F2                            
0000E4F2                            loc_C1F2:
0000E4F2 6100 0000                  		bsr.w	SpeedToPos
0000E4F6 3028 0008                  		move.w	obX(a0),d0
0000E4FA 0240 000C                  		andi.w	#$C,d0
0000E4FE 6600 0000                  		bne.w	locret_C2E4
0000E502 0268 FFF0 0008             		andi.w	#-$10,obX(a0)
0000E508 3168 0010 0030             		move.w	obVelX(a0),$30(a0)
0000E50E 4268 0010                  		clr.w	obVelX(a0)
0000E512 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000E516 4E75                       		rts	
0000E518                            ; ===========================================================================
0000E518                            
0000E518                            loc_C218:
0000E518 6100 0000                  		bsr.w	Solid_ChkEnter
0000E51C 4A44                       		tst.w	d4
0000E51E 6700 0000                  		beq.w	locret_C2E4
0000E522 6B00 0000                  		bmi.w	locret_C2E4
0000E526 4A28 0032                  		tst.b	$32(a0)
0000E52A 6700                       		beq.s	loc_C230
0000E52C 6000 0000                  		bra.w	locret_C2E4
0000E530                            ; ===========================================================================
0000E530                            
0000E530                            loc_C230:
0000E530 4A40                       		tst.w	d0
0000E532 6700 0000                  		beq.w	locret_C2E4
0000E536 6B00                       		bmi.s	loc_C268
0000E538 0829 0000 0022             		btst	#0,obStatus(a1)
0000E53E 6600 0000                  		bne.w	locret_C2E4
0000E542 3F00                       		move.w	d0,-(sp)
0000E544 7600                       		moveq	#0,d3
0000E546 1628 0014                  		move.b	obActWid(a0),d3
0000E54A 4EB9 0000 0000             		jsr	(ObjHitWallRight).l
0000E550 301F                       		move.w	(sp)+,d0
0000E552 4A41                       		tst.w	d1
0000E554 6B00 0000                  		bmi.w	locret_C2E4
0000E558 06A8 0001 0000 0008        		addi.l	#$10000,obX(a0)
0000E560 7001                       		moveq	#1,d0
0000E562 323C 0040                  		move.w	#$40,d1
0000E566 6000                       		bra.s	loc_C294
0000E568                            ; ===========================================================================
0000E568                            
0000E568                            loc_C268:
0000E568 0829 0000 0022             		btst	#0,obStatus(a1)
0000E56E 6700                       		beq.s	locret_C2E4
0000E570 3F00                       		move.w	d0,-(sp)
0000E572 7600                       		moveq	#0,d3
0000E574 1628 0014                  		move.b	obActWid(a0),d3
0000E578 4643                       		not.w	d3
0000E57A 4EB9 0000 0000             		jsr	(ObjHitWallLeft).l
0000E580 301F                       		move.w	(sp)+,d0
0000E582 4A41                       		tst.w	d1
0000E584 6B00                       		bmi.s	locret_C2E4
0000E586 04A8 0001 0000 0008        		subi.l	#$10000,obX(a0)
0000E58E 70FF                       		moveq	#-1,d0
0000E590 323C FFC0                  		move.w	#-$40,d1
0000E594                            
0000E594                            loc_C294:
0000E594 43F8 D000                  		lea	(v_player).w,a1
0000E598 D169 0008                  		add.w	d0,obX(a1)
0000E59C 3341 0020                  		move.w	d1,obInertia(a1)
0000E5A0 337C 0000 0010             		move.w	#0,obVelX(a1)
0000E5A6 3F00                       		move.w	d0,-(sp)
0000E5B2 301F                       		move.w	(sp)+,d0
0000E5B4 4A28 0028                  		tst.b	obSubtype(a0)
0000E5B8 6B00                       		bmi.s	locret_C2E4
0000E5BA 3F00                       		move.w	d0,-(sp)
0000E5BC 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000E5C2 301F                       		move.w	(sp)+,d0
0000E5C4 0C41 0004                  		cmpi.w	#4,d1
0000E5C8 6F00                       		ble.s	loc_C2E0
0000E5CA 317C 0400 0010             		move.w	#$400,obVelX(a0)
0000E5D0 4A40                       		tst.w	d0
0000E5D2 6A00                       		bpl.s	loc_C2D8
0000E5D4 4468 0010                  		neg.w	obVelX(a0)
0000E5D8                            
0000E5D8                            loc_C2D8:
0000E5D8 117C 0006 0025             		move.b	#6,ob2ndRout(a0)
0000E5DE 6000                       		bra.s	locret_C2E4
0000E5E0                            ; ===========================================================================
0000E5E0                            
0000E5E0                            loc_C2E0:
0000E5E0 D368 000C                  		add.w	d1,obY(a0)
0000E5E4                            
0000E5E4                            locret_C2E4:
0000E5E4 4E75                       		rts	
0000E5E4 4E75                       		rts	
0000E5E6                            Map_Push:	include	"_maps\Pushable Blocks.asm"
0000E5E6                            ; ---------------------------------------------------------------------------
0000E5E6                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000E5E6                            ; ---------------------------------------------------------------------------
0000E5E6                            Map_Push_internal:
0000E5E6 0000                       		dc.w @single-Map_Push_internal
0000E5E8 0000                       		dc.w @four-Map_Push_internal
0000E5EA 01                         @single:	dc.b 1
0000E5EB F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000E5F0 04                         @four:		dc.b 4
0000E5F1 F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000E5F6 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000E5FB F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000E600 F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000E606 00                         		even
0000E606 00                         		even
0000E606                            
0000E606                            		include	"_incObj\34 Title Cards.asm"
0000E606                            ; ---------------------------------------------------------------------------
0000E606                            ; Object 34 - zone title cards
0000E606                            ; ---------------------------------------------------------------------------
0000E606                            
0000E606                            TitleCard:
0000E606 7000                       		moveq	#0,d0
0000E608 1028 0024                  		move.b	obRoutine(a0),d0
0000E60C 323B 0000                  		move.w	Card_Index(pc,d0.w),d1
0000E610 4EFB 1000                  		jmp	Card_Index(pc,d1.w)
0000E614                            ; ===========================================================================
0000E614 0000                       Card_Index:	dc.w Card_CheckSBZ3-Card_Index
0000E616 0000                       		dc.w Card_ChkPos-Card_Index
0000E618 0000                       		dc.w Card_Wait-Card_Index
0000E61A 0000                       		dc.w Card_Wait-Card_Index
0000E61C                            
0000E61C =00000030                  card_mainX:	equ $30		; position for card to display on
0000E61C =00000032                  card_finalX:	equ $32		; position for card to finish on
0000E61C                            ; ===========================================================================
0000E61C                            
0000E61C                            Card_CheckSBZ3:	; Routine 0
0000E61C 2248                       		movea.l	a0,a1
0000E61E 7000                       		moveq	#0,d0
0000E620 1038 FE10                  		move.b	(v_zone).w,d0
0000E624 0C78 0103 FE10             		cmpi.w	#(id_LZ<<8)+3,(v_zone).w ; check if level is SBZ 3
0000E62A 6600                       		bne.s	Card_CheckFZ
0000E62C 7001                       		moveq	#1,d0		; load title card number 6 (FZ)
0000E62E                            
0000E62E                            	Card_CheckFZ:
0000E62E 3400                       		move.w	d0,d2
0000E630 0C78 0502 FE10             		cmpi.w	#(id_SBZ<<8)+2,(v_zone).w ; check if level is FZ
0000E636 6600                       		bne.s	Card_LoadConfig
0000E638 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000E63A 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000E63C                            
0000E63C                            	Card_LoadConfig:
0000E63C 47F9 0000 0000             		lea	(Card_ConData).l,a3
0000E642 E948                       		lsl.w	#4,d0
0000E644 D6C0                       		adda.w	d0,a3
0000E646 45F9 0000 0000             		lea	(Card_ItemData).l,a2
0000E64C 7203                       		moveq	#3,d1
0000E64E                            
0000E64E                            Card_Loop:
0000E64E 12BC 0000                  		move.b	#id_TitleCard,0(a1)
0000E652 3353 0008                  		move.w	(a3),obX(a1)	; load start x-position
0000E656 335B 0032                  		move.w	(a3)+,card_finalX(a1) ; load finish x-position (same as start)
0000E65A 335B 0030                  		move.w	(a3)+,card_mainX(a1) ; load main x-position
0000E65E 335A 000A                  		move.w	(a2)+,obScreenY(a1)
0000E662 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000E666 101A                       		move.b	(a2)+,d0
0000E668 6600                       		bne.s	Card_ActNumber
0000E66A 1002                       		move.b	d2,d0
0000E66C                            
0000E66C                            	Card_ActNumber:
0000E66C 0C00 0007                  		cmpi.b	#7,d0
0000E670 6600                       		bne.s	Card_MakeSprite
0000E672 D038 FE11                  		add.b	(v_act).w,d0
0000E676 0C38 0003 FE11             		cmpi.b	#3,(v_act).w
0000E67C 6600                       		bne.s	Card_MakeSprite
0000E67E 5300                       		subq.b	#1,d0
0000E680                            
0000E680                            	Card_MakeSprite:
0000E680 1340 001A                  		move.b	d0,obFrame(a1)	; display frame	number d0
0000E684 237C 0000 0000 0004        		move.l	#Map_Card,obMap(a1)
0000E68C 337C 8580 0002             		move.w	#$8580,obGfx(a1)
0000E692 137C 0078 0014             		move.b	#$78,obActWid(a1)
0000E698 137C 0000 0001             		move.b	#0,obRender(a1)
0000E69E 337C 0000 0018             		move.w	#0,obPriority(a1)
0000E6A4 337C 003C 001E             		move.w	#60,obTimeFrame(a1) ; set time delay to 1 second
0000E6AA 43E9 0040                  		lea	$40(a1),a1	; next object
0000E6AE 51C9 FF9E                  		dbf	d1,Card_Loop	; repeat sequence another 3 times
0000E6B2                            
0000E6B2                            Card_ChkPos:	; Routine 2
0000E6B2 7210                       		moveq	#$10,d1		; set horizontal speed
0000E6B4 3028 0030                  		move.w	card_mainX(a0),d0
0000E6B8 B068 0008                  		cmp.w	obX(a0),d0	; has item reached the target position?
0000E6BC 6700                       		beq.s	Card_NoMove	; if yes, branch
0000E6BE 6C00                       		bge.s	Card_Move
0000E6C0 4441                       		neg.w	d1
0000E6C2                            
0000E6C2                            Card_Move:
0000E6C2 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E6C6                            
0000E6C6                            Card_NoMove:
0000E6C6 3028 0008                  		move.w	obX(a0),d0
0000E6CA 6B00                       		bmi.s	locret_C3D8
0000E6CC 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E6D0 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000E6D2 6000 0000                  		bra.w	DisplaySprite
0000E6D6                            ; ===========================================================================
0000E6D6                            
0000E6D6                            locret_C3D8:
0000E6D6 4E75                       		rts	
0000E6D8                            ; ===========================================================================
0000E6D8                            
0000E6D8                            Card_Wait:	; Routine 4/6
0000E6D8 4A68 001E                  		tst.w	obTimeFrame(a0)	; is time remaining zero?
0000E6DC 6700                       		beq.s	Card_ChkPos2	; if yes, branch
0000E6DE 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time
0000E6E2 6000 0000                  		bra.w	DisplaySprite
0000E6E6                            ; ===========================================================================
0000E6E6                            
0000E6E6                            Card_ChkPos2:
0000E6E6 4A28 0001                  		tst.b	obRender(a0)
0000E6EA 6A00                       		bpl.s	Card_ChangeArt
0000E6EC 7220                       		moveq	#$20,d1
0000E6EE 3028 0032                  		move.w	card_finalX(a0),d0
0000E6F2 B068 0008                  		cmp.w	obX(a0),d0	; has item reached the finish position?
0000E6F6 6700                       		beq.s	Card_ChangeArt	; if yes, branch
0000E6F8 6C00                       		bge.s	Card_Move2
0000E6FA 4441                       		neg.w	d1
0000E6FC                            
0000E6FC                            Card_Move2:
0000E6FC D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E700 3028 0008                  		move.w	obX(a0),d0
0000E704 6B00                       		bmi.s	locret_C412
0000E706 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E70A 6400                       		bcc.s	locret_C412	; if yes, branch
0000E70C 6000 0000                  		bra.w	DisplaySprite
0000E710                            ; ===========================================================================
0000E710                            
0000E710                            locret_C412:
0000E710 4E75                       		rts	
0000E712                            ; ===========================================================================
0000E712                            
0000E712                            Card_ChangeArt:
0000E712 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0)
0000E718 6600                       		bne.s	Card_Delete
0000E71A 7000                       		moveq	#plcid_Explode,d0
0000E71C 4EB9 0000 16EA             		jsr	(AddPLC).l	; load explosion patterns
0000E722 7000                       		moveq	#0,d0
0000E724 1038 FE10                  		move.b	(v_zone).w,d0
0000E728 0640 0000                  		addi.w	#plcid_GHZAnimals,d0
0000E72C 4EB9 0000 16EA             		jsr	(AddPLC).l	; load animal patterns
0000E732                            
0000E732                            Card_Delete:
0000E732 6000 0000                  		bra.w	DeleteObject
0000E736                            ; ===========================================================================
0000E736 00D0                       Card_ItemData:	dc.w $D0	; y-axis position
0000E738 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000E73A 00E4                       		dc.w $E4
0000E73C 0206                       		dc.b 2,	6
0000E73E 00EA                       		dc.w $EA
0000E740 0207                       		dc.b 2,	7
0000E742 00E0                       		dc.w $E0
0000E744 020A                       		dc.b 2,	$A
0000E746                            ; ---------------------------------------------------------------------------
0000E746                            ; Title	card configuration data
0000E746                            ; Format:
0000E746                            ; 4 bytes per item (YYYY XXXX)
0000E746                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000E746                            ; ---------------------------------------------------------------------------
0000E746 0000 0120 FEFC 013C 0414+  Card_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000E756 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000E766 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000E776 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000E786 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000E796 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000E7A6 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000E7B6                            ; ===========================================================================
0000E7B6                            ; ===========================================================================
0000E7B6                            		include	"_incObj\39 Game Over.asm"
0000E7B6                            ; ---------------------------------------------------------------------------
0000E7B6                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000E7B6                            ; ---------------------------------------------------------------------------
0000E7B6                            
0000E7B6                            GameOverCard:
0000E7B6 7000                       		moveq	#0,d0
0000E7B8 1028 0024                  		move.b	obRoutine(a0),d0
0000E7BC 323B 0000                  		move.w	Over_Index(pc,d0.w),d1
0000E7C0 4EFB 1000                  		jmp	Over_Index(pc,d1.w)
0000E7C4                            ; ===========================================================================
0000E7C4 0000                       Over_Index:	dc.w Over_ChkPLC-Over_Index
0000E7C6 0000                       		dc.w Over_Move-Over_Index
0000E7C8 0000                       		dc.w Over_Wait-Over_Index
0000E7CA                            ; ===========================================================================
0000E7CA                            
0000E7CA                            Over_ChkPLC:	; Routine 0
0000E7CA 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are the pattern load cues empty?
0000E7CE 6700                       		beq.s	Over_Main	; if yes, branch
0000E7D0 4E75                       		rts	
0000E7D2                            ; ===========================================================================
0000E7D2                            
0000E7D2                            Over_Main:
0000E7D2 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E7D6 317C 0050 0008             		move.w	#$50,obX(a0)	; set x-position
0000E7DC 0828 0000 001A             		btst	#0,obFrame(a0)	; is the object	"OVER"?
0000E7E2 6700                       		beq.s	Over_1stWord	; if not, branch
0000E7E4 317C 01F0 0008             		move.w	#$1F0,obX(a0)	; set x-position for "OVER"
0000E7EA                            
0000E7EA                            	Over_1stWord:
0000E7EA 317C 00F0 000A             		move.w	#$F0,obScreenY(a0)
0000E7F0 217C 0000 0000 0004        		move.l	#Map_Over,obMap(a0)
0000E7F8 317C 855E 0002             		move.w	#$855E,obGfx(a0)
0000E7FE 117C 0000 0001             		move.b	#0,obRender(a0)
0000E804 317C 0000 0018             		move.w	#0,obPriority(a0)
0000E80A                            
0000E80A                            Over_Move:	; Routine 2
0000E80A 7210                       		moveq	#$10,d1		; set horizontal speed
0000E80C 0C68 0120 0008             		cmpi.w	#$120,obX(a0)	; has item reached its target position?
0000E812 6700                       		beq.s	Over_SetWait	; if yes, branch
0000E814 6500                       		bcs.s	Over_UpdatePos
0000E816 4441                       		neg.w	d1
0000E818                            
0000E818                            	Over_UpdatePos:
0000E818 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E81C 6000 0000                  		bra.w	DisplaySprite
0000E820                            ; ===========================================================================
0000E820                            
0000E820                            Over_SetWait:
0000E820 317C 02D0 001E             		move.w	#720,obTimeFrame(a0) ; set time delay to 12 seconds
0000E826 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E82A 4E75                       		rts	
0000E82C                            ; ===========================================================================
0000E82C                            
0000E82C                            Over_Wait:	; Routine 4
0000E82C 1038 F605                  		move.b	(v_jpadpress1).w,d0
0000E830 0200 0070                  		andi.b	#btnABC,d0	; is button A, B or C pressed?
0000E834 6600                       		bne.s	Over_ChgMode	; if yes, branch
0000E836 0828 0000 001A             		btst	#0,obFrame(a0)
0000E83C 6600                       		bne.s	Over_Display
0000E83E 4A68 001E                  		tst.w	obTimeFrame(a0)	; has time delay reached zero?
0000E842 6700                       		beq.s	Over_ChgMode	; if yes, branch
0000E844 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000E848 6000 0000                  		bra.w	DisplaySprite
0000E84C                            ; ===========================================================================
0000E84C                            
0000E84C                            Over_ChgMode:
0000E84C 4A38 FE1A                  		tst.b	(f_timeover).w	; is time over flag set?
0000E850 6600                       		bne.s	Over_ResetLvl	; if yes, branch
0000E852 11FC 0000 F600             		move.b	#id_Continue,(v_gamemode).w ; set mode to $14 (continue screen)
0000E858 4A38 FE18                  		tst.b	(v_continues).w	; do you have any continues?
0000E85C 6600                       		bne.s	Over_Display	; if yes, branch
0000E85E 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; set mode to 0 (Sega screen)
0000E864 6000                       		bra.s	Over_Display
0000E866                            ; ===========================================================================
0000E866                            
0000E866                            Over_ResetLvl:
0000E866 42B8 FE38                  			clr.l	(v_lamp_time).w
0000E86A 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000E870                            
0000E870                            Over_Display:
0000E870 6000 0000                  		bra.w	DisplaySprite
0000E870 6000 0000                  		bra.w	DisplaySprite
0000E874                            		include	"_incObj\3A Got Through Card.asm"
0000E874                            ; ---------------------------------------------------------------------------
0000E874                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000E874                            ; ---------------------------------------------------------------------------
0000E874                            
0000E874                            GotThroughCard:
0000E874 7000                       		moveq	#0,d0
0000E876 1028 0024                  		move.b	obRoutine(a0),d0
0000E87A 323B 0000                  		move.w	Got_Index(pc,d0.w),d1
0000E87E 4EFB 1000                  		jmp	Got_Index(pc,d1.w)
0000E882                            ; ===========================================================================
0000E882 0000                       Got_Index:	dc.w Got_ChkPLC-Got_Index
0000E884 0000                       		dc.w Got_Move-Got_Index
0000E886 0000                       		dc.w Got_Wait-Got_Index
0000E888 0000                       		dc.w Got_TimeBonus-Got_Index
0000E88A 0000                       		dc.w Got_Wait-Got_Index
0000E88C 0000                       		dc.w Got_NextLevel-Got_Index
0000E88E 0000                       		dc.w Got_Wait-Got_Index
0000E890 0000                       		dc.w Got_Move2-Got_Index
0000E892 0000                       		dc.w loc_C766-Got_Index
0000E894                            
0000E894 =00000030                  got_mainX:	equ $30		; position for card to display on
0000E894 =00000032                  got_finalX:	equ $32		; position for card to finish on
0000E894                            ; ===========================================================================
0000E894                            
0000E894                            Got_ChkPLC:	; Routine 0
0000E894 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are the pattern load cues empty?
0000E898 6700                       		beq.s	Got_Main	; if yes, branch
0000E89A 4E75                       		rts	
0000E89C                            ; ===========================================================================
0000E89C                            
0000E89C                            Got_Main:
0000E89C 2248                       		movea.l	a0,a1
0000E89E 45F9 0000 0000             		lea	(Got_Config).l,a2
0000E8A4 7206                       		moveq	#6,d1
0000E8A6                            
0000E8A6                            Got_Loop:
0000E8A6 12BC 0000                  		move.b	#id_GotThroughCard,0(a1)
0000E8AA 3352 0008                  		move.w	(a2),obX(a1)	; load start x-position
0000E8AE 335A 0032                  		move.w	(a2)+,got_finalX(a1) ; load finish x-position (same as start)
0000E8B2 335A 0030                  		move.w	(a2)+,got_mainX(a1) ; load main x-position
0000E8B6 335A 000A                  		move.w	(a2)+,obScreenY(a1) ; load y-position
0000E8BA 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000E8BE 101A                       		move.b	(a2)+,d0
0000E8C0 0C00 0006                  		cmpi.b	#6,d0
0000E8C4 6600                       		bne.s	loc_C5CA
0000E8C6 D038 FE11                  		add.b	(v_act).w,d0	; add act number to frame number
0000E8CA                            
0000E8CA                            	loc_C5CA:
0000E8CA 1340 001A                  		move.b	d0,obFrame(a1)
0000E8CE 237C 0000 0000 0004        		move.l	#Map_Got,obMap(a1)
0000E8D6 337C 8580 0002             		move.w	#$8580,obGfx(a1)
0000E8DC 137C 0000 0001             		move.b	#0,obRender(a1)
0000E8E2 43E9 0040                  		lea	$40(a1),a1
0000E8E6 51C9 FFBE                  		dbf	d1,Got_Loop	; repeat 6 times
0000E8EA                            
0000E8EA                            Got_Move:	; Routine 2
0000E8EA 7210                       		moveq	#$10,d1		; set horizontal speed
0000E8EC 3028 0030                  		move.w	got_mainX(a0),d0
0000E8F0 B068 0008                  		cmp.w	obX(a0),d0	; has item reached its target position?
0000E8F4 6700                       		beq.s	loc_C61A	; if yes, branch
0000E8F6 6C00                       		bge.s	Got_ChgPos
0000E8F8 4441                       		neg.w	d1
0000E8FA                            
0000E8FA                            	Got_ChgPos:
0000E8FA D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E8FE                            
0000E8FE                            	loc_C5FE:
0000E8FE 3028 0008                  		move.w	obX(a0),d0
0000E902 6B00                       		bmi.s	locret_C60E
0000E904 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E908 6400                       		bcc.s	locret_C60E	; if yes, branch
0000E90A 6000 0000                  		bra.w	DisplaySprite
0000E90E                            ; ===========================================================================
0000E90E                            
0000E90E                            locret_C60E:
0000E90E 4E75                       		rts	
0000E910                            ; ===========================================================================
0000E910                            
0000E910                            loc_C610:
0000E910 117C 000E 0024             		move.b	#$E,obRoutine(a0)
0000E916 6000 0000                  		bra.w	Got_Move2
0000E91A                            ; ===========================================================================
0000E91A                            
0000E91A                            loc_C61A:
0000E91A 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000E920 67EE                       		beq.s	loc_C610
0000E922 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)
0000E928 66D4                       		bne.s	loc_C5FE
0000E92A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E92E 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000E934                            		;move.b	#id_SSRChaos,(v_objspace+$800).w ; load chaos emerald object
0000E934                            
0000E934                            Got_Wait:	; Routine 4, 8, $C
0000E934 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000E938 6600                       		bne.s	Got_Display
0000E93A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E93E                            
0000E93E                            Got_Display:
0000E93E 6000 0000                  		bra.w	DisplaySprite
0000E942                            ; ===========================================================================
0000E942                            
0000E942                            Got_TimeBonus:	; Routine 6
0000E942 6100 0000                  		bsr.w	DisplaySprite
0000E946 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; set time/ring bonus update flag
0000E94C 7000                       		moveq	#0,d0
0000E94E 4A78 F7D2                  		tst.w	(v_timebonus).w	; is time bonus	= zero?
0000E952 6700                       		beq.s	Got_RingBonus	; if yes, branch
0000E954 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000E958 0478 000A F7D2             		subi.w	#10,(v_timebonus).w ; subtract 10 from time bonus
0000E95E                            
0000E95E                            Got_RingBonus:
0000E95E 4A78 F7D4                  		tst.w	(v_ringbonus).w	; is ring bonus	= zero?
0000E962 6700                       		beq.s	Got_ChkBonus	; if yes, branch
0000E964 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000E968 0478 000A F7D4             		subi.w	#10,(v_ringbonus).w ; subtract 10 from ring bonus
0000E96E                            
0000E96E                            Got_ChkBonus:
0000E96E 4A40                       		tst.w	d0		; is there any bonus?
0000E970 6600                       		bne.s	Got_AddBonus	; if yes, branch
0000E97C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E980 0C78 0501 FE10             		cmpi.w	#(id_SBZ<<8)+1,(v_zone).w
0000E986 6600                       		bne.s	Got_SetDelay
0000E988 5828 0024                  		addq.b	#4,obRoutine(a0)
0000E98C                            
0000E98C                            Got_SetDelay:
0000E98C 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000E992                            
0000E992                            locret_C692:
0000E992 4E75                       		rts	
0000E994                            ; ===========================================================================
0000E994                            
0000E994                            Got_AddBonus:
0000E994 4EB9 0000 0000             		jsr	(AddPoints).l
0000E99A 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000E99E 0200 0003                  		andi.b	#3,d0
0000E9A2 66EE                       		bne.s	locret_C692
0000E9AE                            ; ===========================================================================
0000E9AE                            
0000E9AE                            Got_NextLevel:	; Routine $A
0000E9AE 11FC 0000 F5C2             		move.b  #0,($FFFFF5C2).w ; Clear victory animation flag
0000E9B4 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0000E9BA 1038 FE10                  		move.b	(v_zone).w,d0
0000E9BE 0240 0007                  		andi.w	#7,d0
0000E9C2 E748                       		lsl.w	#3,d0
0000E9C4 1238 FE11                  		move.b	(v_act).w,d1
0000E9C8 0241 0003                  		andi.w	#3,d1
0000E9CC D241                       		add.w	d1,d1
0000E9CE D041                       		add.w	d1,d0
0000E9D0 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000E9D4 31C0 FE10                  		move.w	d0,(v_zone).w	; set level number
0000E9D8 4A40                       		tst.w	d0
0000E9DA 6600                       		bne.s	Got_ChkSS
0000E9DC 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w
0000E9E2 6000                       		bra.s	Got_Display2
0000E9E4                            ; ===========================================================================
0000E9E4                            
0000E9E4                            Got_ChkSS:	
0000E9E4 4238 FE30                  		clr.b	(v_lastlamp).w	; clear	lamppost counter
0000E9E8 4A38 F5C3                  		tst.b	(f_emeraldm).w
0000E9EC 6700                       		beq.s	VBla_08A
0000E9EE 5238 FE57                  		addq.b	#1,(v_emeralds).w ; add 1 to number of emeralds
0000E9FC 6000                       		bra.s	Got_Display2
0000E9FE 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0000EA04                            		
0000EA04                            ; ===========================================================================
0000EA04                            
0000EA04                            VBla_08A:
0000EA04 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000EA0A                            
0000EA0A                            Got_Display2:
0000EA0A 6000 0000                  		bra.w	DisplaySprite
0000EA0E                            ; ===========================================================================
0000EA0E                            ; ---------------------------------------------------------------------------
0000EA0E                            ; Level	order array
0000EA0E                            ; ---------------------------------------------------------------------------
0000EA0E                            LevelOrder:
0000EA0E                            		; Green Hill Zone
0000EA0E 0001                       		dc.b id_GHZ, 1	; Act 2
0000EA10 0002                       		dc.b id_GHZ, 2	; Act 2
0000EA12 0200                       		dc.b id_MZ, 0	; Act 3
0000EA14 0000                       		dc.b 0, 0
0000EA16                            
0000EA16                            		; Labyrinth Zone
0000EA16 0101                       		dc.b id_LZ, 1	; Act 1
0000EA18 0102                       		dc.b id_LZ, 2	; Act 2
0000EA1A 0000                       		dc.b id_GHZ, 0 	; Act 3
0000EA1C 0502                       		dc.b id_SBZ, 2	; Scrap Brain Zone Act 3
0000EA1E                            
0000EA1E                            		; Marble Zone
0000EA1E 0201                       		dc.b id_MZ, 1	; Act 1
0000EA20 0202                       		dc.b id_MZ, 2	; Act 2
0000EA22 0502                       		dc.b id_SBZ, 2	; Act 3
0000EA24 0000                       		dc.b 0, 0
0000EA26                            
0000EA26                            		; Star Light Zone
0000EA26 0301                       		dc.b id_SLZ, 1	; Act 1
0000EA28 0302                       		dc.b id_SLZ, 2	; Act 2
0000EA2A 0500                       		dc.b id_SBZ, 0	; Act 3
0000EA2C 0000                       		dc.b 0, 0
0000EA2E                            
0000EA2E                            		; Spring Yard Zone
0000EA2E 0502                       		dc.b id_SBZ, 2	; Act 1
0000EA30 0402                       		dc.b id_SYZ, 2	; Act 2
0000EA32 0200                       		dc.b id_MZ,	 0	; Act 3
0000EA34 0000                       		dc.b 0, 0
0000EA36                            
0000EA36                            		; Scrap Brain Zone
0000EA36 0501                       		dc.b id_SBZ, 1	; Act 1
0000EA38 0103                       		dc.b id_LZ, 3	; Act 2
0000EA3A 0000                       		dc.b 0, 0	; Final Zone
0000EA3C 0000                       		dc.b 0, 0
0000EA3E                            		even
0000EA3E                            ; ===========================================================================
0000EA3E                            
0000EA3E                            Got_Move2:	; Routine $E
0000EA3E 7220                       		moveq	#$20,d1		; set horizontal speed
0000EA40 3028 0032                  		move.w	got_finalX(a0),d0
0000EA44 B068 0008                  		cmp.w	obX(a0),d0	; has item reached its finish position?
0000EA48 6700                       		beq.s	Got_SBZ2	; if yes, branch
0000EA4A 6C00                       		bge.s	Got_ChgPos2
0000EA4C 4441                       		neg.w	d1
0000EA4E                            
0000EA4E                            	Got_ChgPos2:
0000EA4E D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000EA52 3028 0008                  		move.w	obX(a0),d0
0000EA56 6B00                       		bmi.s	locret_C748
0000EA58 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000EA5C 6400                       		bcc.s	locret_C748	; if yes, branch
0000EA5E 6000 0000                  		bra.w	DisplaySprite
0000EA62                            ; ===========================================================================
0000EA62                            
0000EA62                            locret_C748:
0000EA62 4E75                       		rts	
0000EA64                            ; ===========================================================================
0000EA64                            
0000EA64                            Got_SBZ2:
0000EA64 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)
0000EA6A 6600 0000                  		bne.w	DeleteObject
0000EA6E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EA72 4238 F7CC                  		clr.b	(f_lockctrl).w	; unlock controls
0000EA76 11FC 0000 F5C2             		move.b  #0,($FFFFF5C2).w ; Clear victory animation flag
0000EA86                            ; ===========================================================================
0000EA86                            
0000EA86                            loc_C766:	; Routine $10
0000EA86 5478 F72A                  		addq.w	#2,(v_limitright2).w
0000EA8A 0C78 2100 F72A             		cmpi.w	#$2100,(v_limitright2).w
0000EA90 6700 0000                  		beq.w	DeleteObject
0000EA94 4E75                       		rts	
0000EA96                            ; ===========================================================================
0000EA96                            		;    x-start,	x-main,	y-main,
0000EA96                            		;				routine, frame number
0000EA96                            
0000EA96 0004 0124 00BC             Got_Config:	dc.w 4,		$124,	$BC			; "SONIC HAS"
0000EA9C 0200                       		dc.b 				2,	0
0000EA9E                            
0000EA9E FEE0 0120 00D0             		dc.w -$120,	$120,	$D0			; "PASSED"
0000EAA4 0201                       		dc.b 				2,	1
0000EAA6                            
0000EAA6 040C 014C 00D6             		dc.w $40C,	$14C,	$D6			; "ACT" 1/2/3
0000EAAC 0206                       		dc.b 				2,	6
0000EAAE                            
0000EAAE 0520 0120 0112             		dc.w $520,	$120,	$112			; score
0000EAB4 0202                       		dc.b 				2,	2
0000EAB6                            
0000EAB6 0540 0120 00F2             		dc.w $540,	$120,	$F2			; time bonus
0000EABC 0203                       		dc.b 				2,	3
0000EABE                            
0000EABE 0560 0120 0102             		dc.w $560,	$120,	$102			; ring bonus
0000EAC4 0204                       		dc.b 				2,	4
0000EAC6                            
0000EAC6 020C 014C 00CC             		dc.w $20C,	$14C,	$CC			; oval
0000EACC 0205                       		dc.b 				2,	5
0000EACC 0205                       		dc.b 				2,	5
0000EACE                            		include	"_incObj\7E Special Stage Results.asm"
0000EACE                            ; ---------------------------------------------------------------------------
0000EACE                            ; Object 7E - special stage results screen
0000EACE                            ; ---------------------------------------------------------------------------
0000EACE                            
0000EACE                            SSResult:
0000EACE 7000                       		moveq	#0,d0
0000EAD0 1028 0024                  		move.b	obRoutine(a0),d0
0000EAD4 323B 0000                  		move.w	SSR_Index(pc,d0.w),d1
0000EAD8 4EFB 1000                  		jmp	SSR_Index(pc,d1.w)
0000EADC                            ; ===========================================================================
0000EADC 0000                       SSR_Index:	dc.w SSR_ChkPLC-SSR_Index
0000EADE 0000                       		dc.w SSR_Move-SSR_Index
0000EAE0 0000                       		dc.w SSR_Wait-SSR_Index
0000EAE2 0000                       		dc.w SSR_RingBonus-SSR_Index
0000EAE4 0000                       		dc.w SSR_Wait-SSR_Index
0000EAE6 0000                       		dc.w SSR_Exit-SSR_Index
0000EAE8 0000                       		dc.w SSR_Wait-SSR_Index
0000EAEA 0000                       		dc.w SSR_Continue-SSR_Index
0000EAEC 0000                       		dc.w SSR_Wait-SSR_Index
0000EAEE 0000                       		dc.w SSR_Exit-SSR_Index
0000EAF0 0000                       		dc.w loc_C91A-SSR_Index
0000EAF2                            
0000EAF2 =00000030                  ssr_mainX:	equ $30		; position for card to display on
0000EAF2                            ; ===========================================================================
0000EAF2                            
0000EAF2                            SSR_ChkPLC:	; Routine 0
0000EAF2 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are the pattern load cues empty?
0000EAF6 6700                       		beq.s	SSR_Main	; if yes, branch
0000EAF8 4E75                       		rts	
0000EAFA                            ; ===========================================================================
0000EAFA                            
0000EAFA                            SSR_Main:
0000EAFA 2248                       		movea.l	a0,a1
0000EAFC 45F9 0000 0000             		lea	(SSR_Config).l,a2
0000EB02 7203                       		moveq	#3,d1
0000EB04 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; do you have 50 or more rings?
0000EB0A 6500                       		bcs.s	SSR_Loop	; if no, branch
0000EB0C 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000EB0E                            
0000EB0E                            	SSR_Loop:
0000EB0E 12BC 0000                  		move.b	#id_SSResult,0(a1)
0000EB12 335A 0008                  		move.w	(a2)+,obX(a1)	; load start x-position
0000EB16 335A 0030                  		move.w	(a2)+,ssr_mainX(a1) ; load main x-position
0000EB1A 335A 000A                  		move.w	(a2)+,obScreenY(a1) ; load y-position
0000EB1E 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000EB22 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000EB26 237C 0000 0000 0004        		move.l	#Map_SSR,obMap(a1)
0000EB2E 337C 8580 0002             		move.w	#$8580,obGfx(a1)
0000EB34 137C 0000 0001             		move.b	#0,obRender(a1)
0000EB3A 43E9 0040                  		lea	$40(a1),a1
0000EB3E 51C9 FFCE                  		dbf	d1,SSR_Loop	; repeat sequence 3 or 4 times
0000EB42                            
0000EB42 7007                       		moveq	#7,d0
0000EB44 1238 FE57                  		move.b	(v_emeralds).w,d1
0000EB48 6700                       		beq.s	loc_C842
0000EB4A 7000                       		moveq	#0,d0
0000EB4C 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000EB50 6600                       		bne.s	loc_C842	; if not, branch
0000EB52 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000EB54 317C 0018 0008             		move.w	#$18,obX(a0)
0000EB5A 317C 0118 0030             		move.w	#$118,ssr_mainX(a0) ; change position of text
0000EB60                            
0000EB60                            loc_C842:
0000EB60 1140 001A                  		move.b	d0,obFrame(a0)
0000EB64                            
0000EB64                            SSR_Move:	; Routine 2
0000EB64 7210                       		moveq	#$10,d1		; set horizontal speed
0000EB66 3028 0030                  		move.w	ssr_mainX(a0),d0
0000EB6A B068 0008                  		cmp.w	obX(a0),d0	; has item reached its target position?
0000EB6E 6700                       		beq.s	loc_C86C	; if yes, branch
0000EB70 6C00                       		bge.s	SSR_ChgPos
0000EB72 4441                       		neg.w	d1
0000EB74                            
0000EB74                            SSR_ChgPos:
0000EB74 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000EB78                            
0000EB78                            loc_C85A:
0000EB78 3028 0008                  		move.w	obX(a0),d0
0000EB7C 6B00                       		bmi.s	locret_C86A
0000EB7E 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000EB82 6400                       		bcc.s	locret_C86A	; if yes, branch
0000EB84 6000 0000                  		bra.w	DisplaySprite
0000EB88                            ; ===========================================================================
0000EB88                            
0000EB88                            locret_C86A:
0000EB88 4E75                       		rts	
0000EB8A                            ; ===========================================================================
0000EB8A                            
0000EB8A                            loc_C86C:
0000EB8A 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0000EB90 66E6                       		bne.s	loc_C85A
0000EB92 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EB96 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000EB9C 11FC 0000 D800             		move.b	#id_SSRChaos,(v_objspace+$800).w ; load chaos emerald object
0000EBA2                            
0000EBA2                            SSR_Wait:	; Routine 4, 8, $C, $10
0000EBA2 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000EBA6 6600                       		bne.s	SSR_Display
0000EBA8 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EBAC                            
0000EBAC                            SSR_Display:
0000EBAC 6000 0000                  		bra.w	DisplaySprite
0000EBB0                            ; ===========================================================================
0000EBB0                            
0000EBB0                            SSR_RingBonus:	; Routine 6
0000EBB0 6100 0000                  		bsr.w	DisplaySprite
0000EBB4 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; set ring bonus update flag
0000EBBA 4A78 F7D4                  		tst.w	(v_ringbonus).w	; is ring bonus	= zero?
0000EBBE 6700                       		beq.s	loc_C8C4	; if yes, branch
0000EBC0 0478 000A F7D4             		subi.w	#10,(v_ringbonus).w ; subtract 10 from ring bonus
0000EBC6 700A                       		moveq	#10,d0		; add 10 to score
0000EBC8 4EB9 0000 0000             		jsr	(AddPoints).l
0000EBCE 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000EBD2 0200 0003                  		andi.b	#3,d0
0000EBD6 6600                       		bne.s	locret_C8EA
0000EBE2                            ; ===========================================================================
0000EBE2                            
0000EBE2                            loc_C8C4:
0000EBEC 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EBF0 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000EBF6 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; do you have at least 50 rings?
0000EBFC 6500                       		bcs.s	locret_C8EA	; if not, branch
0000EBFE 317C 003C 001E             		move.w	#60,obTimeFrame(a0) ; set time delay to 1 second
0000EC04 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto "SSR_Continue" routine
0000EC08                            
0000EC08                            locret_C8EA:
0000EC08 4E75                       		rts	
0000EC0A                            ; ===========================================================================
0000EC0A                            
0000EC0A                            SSR_Exit:	; Routine $A, $12
0000EC0A 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000EC10 6000 0000                  		bra.w	DisplaySprite
0000EC14                            ; ===========================================================================
0000EC14                            
0000EC14                            SSR_Continue:	; Routine $E
0000EC14 11FC 0004 D6DA             		move.b	#4,(v_objspace+$6C0+obFrame).w
0000EC1A 11FC 0014 D6E4             		move.b	#$14,(v_objspace+$6C0+obRoutine).w
0000EC2A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EC2E 317C 0168 001E             		move.w	#360,obTimeFrame(a0) ; set time delay to 6 seconds
0000EC34 6000 0000                  		bra.w	DisplaySprite
0000EC38                            ; ===========================================================================
0000EC38                            
0000EC38                            loc_C91A:	; Routine $14
0000EC38 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000EC3C 0200 000F                  		andi.b	#$F,d0
0000EC40 6600                       		bne.s	SSR_Display2
0000EC42 0868 0000 001A             		bchg	#0,obFrame(a0)
0000EC48                            
0000EC48                            SSR_Display2:
0000EC48 6000 0000                  		bra.w	DisplaySprite
0000EC4C                            ; ===========================================================================
0000EC4C 0020 0120 00C4             SSR_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000EC52 0200                       		dc.b 2,	0		; rountine number, frame number
0000EC54 0320 0120 0118             		dc.w $320, $120, $118
0000EC5A 0201                       		dc.b 2,	1
0000EC5C 0360 0120 0128             		dc.w $360, $120, $128
0000EC62 0202                       		dc.b 2,	2
0000EC64 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000EC6A 0203                       		dc.b 2,	3
0000EC6C 03A0 0120 0138             		dc.w $3A0, $120, $138
0000EC72 0206                       		dc.b 2,	6
0000EC72 0206                       		dc.b 2,	6
0000EC74                            		include	"_incObj\7F SS Result Chaos Emeralds.asm"
0000EC74                            ; ---------------------------------------------------------------------------
0000EC74                            ; Object 7F - chaos emeralds from the special stage results screen
0000EC74                            ; ---------------------------------------------------------------------------
0000EC74                            
0000EC74                            SSRChaos:
0000EC74 7000                       		moveq	#0,d0
0000EC76 1028 0024                  		move.b	obRoutine(a0),d0
0000EC7A 323B 0000                  		move.w	SSRC_Index(pc,d0.w),d1
0000EC7E 4EFB 1000                  		jmp	SSRC_Index(pc,d1.w)
0000EC82                            ; ===========================================================================
0000EC82 0000                       SSRC_Index:	dc.w SSRC_Main-SSRC_Index
0000EC84 0000                       		dc.w SSRC_Flash-SSRC_Index
0000EC86                            
0000EC86                            ; ---------------------------------------------------------------------------
0000EC86                            ; X-axis positions for chaos emeralds
0000EC86                            ; ---------------------------------------------------------------------------
0000EC86 0110 0128 00F8 0140 00E0+  SSRC_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000EC92                            ; ===========================================================================
0000EC92                            
0000EC92                            SSRC_Main:	; Routine 0
0000EC92 2248                       		movea.l	a0,a1
0000EC94 45F9 0000 EC86             		lea	(SSRC_PosData).l,a2
0000EC9A 7400                       		moveq	#0,d2
0000EC9C 7200                       		moveq	#0,d1
0000EC9E 1238 FE57                  		move.b	(v_emeralds).w,d1 ; d1 is number of emeralds
0000ECA2 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000ECA4 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000ECA8                            
0000ECA8                            	SSRC_Loop:
0000ECA8 12BC 0000                  		move.b	#id_SSRChaos,0(a1)
0000ECAC 335A 0008                  		move.w	(a2)+,obX(a1)	; set x-position
0000ECB0 337C 00F0 000A             		move.w	#$F0,obScreenY(a1) ; set y-position
0000ECB6 47F8 FE58                  		lea	(v_emldlist).w,a3 ; check which emeralds you have
0000ECBA 1633 2000                  		move.b	(a3,d2.w),d3
0000ECBE 1343 001A                  		move.b	d3,obFrame(a1)
0000ECC2 1343 001C                  		move.b	d3,obAnim(a1)
0000ECC6 5202                       		addq.b	#1,d2
0000ECC8 5429 0024                  		addq.b	#2,obRoutine(a1)
0000ECCC 237C 0000 0000 0004        		move.l	#Map_SSRC,obMap(a1)
0000ECD4 337C 8541 0002             		move.w	#$8541,obGfx(a1)
0000ECDA 137C 0000 0001             		move.b	#0,obRender(a1)
0000ECE0 43E9 0040                  		lea	$40(a1),a1	; next object
0000ECE4 51C9 FFC2                  		dbf	d1,SSRC_Loop	; loop for d1 number of	emeralds
0000ECE8                            
0000ECE8                            SSRC_Flash:	; Routine 2
0000ECE8 1028 001A                  		move.b	obFrame(a0),d0
0000ECEC 117C 0006 001A             		move.b	#6,obFrame(a0)	; load 6th frame (blank)
0000ECF2 0C00 0006                  		cmpi.b	#6,d0
0000ECF6 6600                       		bne.s	SSRC_Display
0000ECF8 1168 001C 001A             		move.b	obAnim(a0),obFrame(a0) ; load visible frame
0000ECFE                            
0000ECFE                            	SSRC_Display:
0000ECFE 6000 0000                  		bra.w	DisplaySprite
0000ECFE 6000 0000                  		bra.w	DisplaySprite
0000ED02                            
0000ED02                            ; ---------------------------------------------------------------------------
0000ED02                            ; Sprite mappings - zone title cards
0000ED02                            ; ---------------------------------------------------------------------------
0000ED02 0000                       Map_Card:	dc.w M_Card_GHZ-Map_Card
0000ED04 0000                       		dc.w M_Card_LZ-Map_Card
0000ED06 0000                       		dc.w M_Card_MZ-Map_Card
0000ED08 0000                       		dc.w M_Card_SLZ-Map_Card
0000ED0A 0000                       		dc.w M_Card_SYZ-Map_Card
0000ED0C 0000                       		dc.w M_Card_SBZ-Map_Card
0000ED0E 0000                       		dc.w M_Card_Zone-Map_Card
0000ED10 0000                       		dc.w M_Card_Act1-Map_Card
0000ED12 0000                       		dc.w M_Card_Act2-Map_Card
0000ED14 0000                       		dc.w M_Card_Act3-Map_Card
0000ED16 0000                       		dc.w M_Card_Oval-Map_Card
0000ED18 0000                       		dc.w M_Card_FZ-Map_Card
0000ED1A 09                         M_Card_GHZ:	dc.b 9 			; GREEN HILL
0000ED1B F805 0018 B4               		dc.b $F8, 5, 0,	$18, $B4
0000ED20 F805 003A C4               		dc.b $F8, 5, 0,	$3A, $C4
0000ED25 F805 0010 D4               		dc.b $F8, 5, 0,	$10, $D4
0000ED2A F805 0010 E4               		dc.b $F8, 5, 0,	$10, $E4
0000ED2F F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000ED34 F805 001C 14               		dc.b $F8, 5, 0,	$1C, $14
0000ED39 F801 0020 24               		dc.b $F8, 1, 0,	$20, $24
0000ED3E F805 0026 2C               		dc.b $F8, 5, 0,	$26, $2C
0000ED43 F805 0026 3C               		dc.b $F8, 5, 0,	$26, $3C
0000ED48                            		even
0000ED48 09                         M_Card_LZ:	dc.b 9			; LABYRINTH
0000ED49 F805 0026 BC               		dc.b $F8, 5, 0,	$26, $BC
0000ED4E F805 0000 CC               		dc.b $F8, 5, 0,	0, $CC
0000ED53 F805 0004 DC               		dc.b $F8, 5, 0,	4, $DC
0000ED58 F805 004A EC               		dc.b $F8, 5, 0,	$4A, $EC
0000ED5D F805 003A FC               		dc.b $F8, 5, 0,	$3A, $FC
0000ED62 F801 0020 0C               		dc.b $F8, 1, 0,	$20, $C
0000ED67 F805 002E 14               		dc.b $F8, 5, 0,	$2E, $14
0000ED6C F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000ED71 F805 001C 34               		dc.b $F8, 5, 0,	$1C, $34
0000ED76                            		even
0000ED76 0B                         M_Card_MZ:	dc.b $B	;  MARBLE | SCRAP RUINS
0000ED77 F805 003E 80               		dc.b $F8, 5, 0, $3E, $80	; S
0000ED7C F805 0008 90               		dc.b $F8, 5, 0, 8, $90		; C
0000ED81 F805 003A A0               		dc.b $F8, 5, 0, $3A, $A0	; R
0000ED86 F805 0000 B0               		dc.b $F8, 5, 0, 0, $B0		; A
0000ED8B F805 0036 C0               		dc.b $F8, 5, 0, $36, $C0	; P
0000ED90 F800 0056 D0               		dc.b $F8, 0, 0, $56, $D0	; Space
0000ED95 F805 003A E0               		dc.b $F8, 5, 0, $3A, $E0	; R
0000ED9A F805 0046 F0               		dc.b $F8, 5, 0, $46, $F0	; U
0000ED9F F801 0020 00               		dc.b $F8, 1, 0, $20, $0	; I
0000EDA4 F805 002E 08               		dc.b $F8, 5, 0, $2E, $8	; N
0000EDA9 F805 003E 18               		dc.b $F8, 5, 0, $3E, $18	; S
0000EDAE 09                         M_Card_SLZ:	dc.b 9			; STAR LIGHT
0000EDAF F805 003E B4               		dc.b $F8, 5, 0,	$3E, $B4
0000EDB4 F805 0042 C4               		dc.b $F8, 5, 0,	$42, $C4
0000EDB9 F805 0000 D4               		dc.b $F8, 5, 0,	0, $D4
0000EDBE F805 003A E4               		dc.b $F8, 5, 0,	$3A, $E4
0000EDC3 F805 0026 04               		dc.b $F8, 5, 0,	$26, 4
0000EDC8 F801 0020 14               		dc.b $F8, 1, 0,	$20, $14
0000EDCD F805 0018 1C               		dc.b $F8, 5, 0,	$18, $1C
0000EDD2 F805 001C 2C               		dc.b $F8, 5, 0,	$1C, $2C
0000EDD7 F805 0042 3C               		dc.b $F8, 5, 0,	$42, $3C
0000EDDC                            		even
0000EDDC 0A                         M_Card_SYZ:	dc.b $A			; SPRING YARD
0000EDDD F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000EDE2 F805 0036 BC               		dc.b $F8, 5, 0,	$36, $BC
0000EDE7 F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000EDEC F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000EDF1 F805 002E E4               		dc.b $F8, 5, 0,	$2E, $E4
0000EDF6 F805 0018 F4               		dc.b $F8, 5, 0,	$18, $F4
0000EDFB F805 004A 14               		dc.b $F8, 5, 0,	$4A, $14
0000EE00 F805 0000 24               		dc.b $F8, 5, 0,	0, $24
0000EE05 F805 003A 34               		dc.b $F8, 5, 0,	$3A, $34
0000EE0A F805 000C 44               		dc.b $F8, 5, 0,	$C, $44
0000EE10 00                         		even
0000EE10 0A                         M_Card_SBZ:	dc.b $A			; SCRAP BRAIN
0000EE11 F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000EE16 F805 0008 BC               		dc.b $F8, 5, 0,	8, $BC
0000EE1B F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000EE20 F805 0000 DC               		dc.b $F8, 5, 0,	0, $DC
0000EE25 F805 0036 EC               		dc.b $F8, 5, 0,	$36, $EC
0000EE2A F805 0004 0C               		dc.b $F8, 5, 0,	4, $C
0000EE2F F805 003A 1C               		dc.b $F8, 5, 0,	$3A, $1C
0000EE34 F805 0000 2C               		dc.b $F8, 5, 0,	0, $2C
0000EE39 F801 0020 3C               		dc.b $F8, 1, 0,	$20, $3C
0000EE3E F805 002E 44               		dc.b $F8, 5, 0,	$2E, $44
0000EE44 00                         		even
0000EE44 04                         M_Card_Zone:	dc.b 4			; ZONE
0000EE45 F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000EE4A F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000EE4F F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000EE54 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000EE5A 00                         		even
0000EE5A 02                         M_Card_Act1:	dc.b 2			; ACT 1
0000EE5B 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000EE60 F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000EE65 02                         M_Card_Act2:	dc.b 2			; ACT 2
0000EE66 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000EE6B F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000EE70 02                         M_Card_Act3:	dc.b 2			; ACT 3
0000EE71 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000EE76 F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000EE7B 0D                         M_Card_Oval:	dc.b $D			; Oval
0000EE7C E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000EE81 E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000EE86 EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000EE8B F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000EE90 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000EE95 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000EE9A 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000EE9F FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000EEA4 EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000EEA9 F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000EEAE FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000EEB3 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000EEB8 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000EEBE 00                         		even
0000EEBE 05                         M_Card_FZ:	dc.b 5			; FINAL
0000EEBF F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000EEC4 F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000EEC9 F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000EECE F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000EED3 F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000EED8                            		even
0000EED8                            
0000EED8                            Map_Over:	include	"_maps\Game Over.asm"
0000EED8                            ; ---------------------------------------------------------------------------
0000EED8                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000EED8                            ; ---------------------------------------------------------------------------
0000EED8                            Map_Over_internal:
0000EED8 0000                       		dc.w byte_CBAC-Map_Over_internal
0000EEDA 0000                       		dc.w byte_CBB7-Map_Over_internal
0000EEDC 0000                       		dc.w byte_CBC2-Map_Over_internal
0000EEDE 0000                       		dc.w byte_CBCD-Map_Over_internal
0000EEE0 02                         byte_CBAC:	dc.b 2			; GAME
0000EEE1 F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000EEE6 F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000EEEB 02                         byte_CBB7:	dc.b 2			; OVER
0000EEEC F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000EEF1 F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000EEF6 02                         byte_CBC2:	dc.b 2			; TIME
0000EEF7 F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000EEFC F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000EF01 02                         byte_CBCD:	dc.b 2			; OVER
0000EF02 F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000EF07 F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000EF0C                            		even
0000EF0C                            		even
0000EF0C                            
0000EF0C                            ; ---------------------------------------------------------------------------
0000EF0C                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000EF0C                            ; ---------------------------------------------------------------------------
0000EF0C 0000                       Map_Got:	dc.w M_Got_SonicHas-Map_Got
0000EF0E 0000                       		dc.w M_Got_Passed-Map_Got
0000EF10 0000                       		dc.w M_Got_Score-Map_Got
0000EF12 0000                       		dc.w M_Got_TBonus-Map_Got
0000EF14 0000                       		dc.w M_Got_RBonus-Map_Got
0000EF16 FF6F                       		dc.w M_Card_Oval-Map_Got
0000EF18 FF4E                       		dc.w M_Card_Act1-Map_Got
0000EF1A FF59                       		dc.w M_Card_Act2-Map_Got
0000EF1C FF64                       		dc.w M_Card_Act3-Map_Got
0000EF1E 08                         M_Got_SonicHas:	dc.b 8			; SONIC HAS
0000EF1F F805 003E B8               		dc.b $F8, 5, 0,	$3E, $B8
0000EF24 F805 0032 C8               		dc.b $F8, 5, 0,	$32, $C8
0000EF29 F805 002E D8               		dc.b $F8, 5, 0,	$2E, $D8
0000EF2E F801 0020 E8               		dc.b $F8, 1, 0,	$20, $E8
0000EF33 F805 0008 F0               		dc.b $F8, 5, 0,	8, $F0
0000EF38 F805 001C 10               		dc.b $F8, 5, 0,	$1C, $10
0000EF3D F805 0000 20               		dc.b $F8, 5, 0,	0, $20
0000EF42 F805 003E 30               		dc.b $F8, 5, 0,	$3E, $30
0000EF47 06                         M_Got_Passed:	dc.b 6			; PASSED
0000EF48 F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000EF4D F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000EF52 F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000EF57 F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000EF5C F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000EF61 F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000EF66 06                         M_Got_Score:	dc.b 6			; SCORE
0000EF67 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000EF6C F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000EF71 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000EF76 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000EF7B F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000EF80 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000EF85 07                         M_Got_TBonus:	dc.b 7			; TIME BONUS
0000EF86 F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000EF8B F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000EF90 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000EF95 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000EF9A FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000EF9F F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000EFA4 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000EFA9 07                         M_Got_RBonus:	dc.b 7			; RING BONUS
0000EFAA F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000EFAF F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000EFB4 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000EFB9 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000EFBE FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000EFC3 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000EFC8 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000EFCE 00                         		even
0000EFCE                            ; ---------------------------------------------------------------------------
0000EFCE                            ; Sprite mappings - special stage results screen
0000EFCE                            ; ---------------------------------------------------------------------------
0000EFCE 0000                       Map_SSR:	dc.w M_SSR_Chaos-Map_SSR
0000EFD0 0000                       		dc.w M_SSR_Score-Map_SSR
0000EFD2 0000                       		dc.w byte_CD0D-Map_SSR
0000EFD4 FEAD                       		dc.w M_Card_Oval-Map_SSR
0000EFD6 0000                       		dc.w byte_CD31-Map_SSR
0000EFD8 0000                       		dc.w byte_CD46-Map_SSR
0000EFDA 0000                       		dc.w byte_CD5B-Map_SSR
0000EFDC 0000                       		dc.w byte_CD6B-Map_SSR
0000EFDE 0000                       		dc.w byte_CDA8-Map_SSR
0000EFE0 0D                         M_SSR_Chaos:	dc.b $D			; "CHAOS EMERALDS"
0000EFE1 F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000EFE6 F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000EFEB F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000EFF0 F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000EFF5 F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000EFFA F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000EFFF F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000F004 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000F009 F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000F00E F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000F013 F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000F018 F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000F01D F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000F022 06                         M_SSR_Score:	dc.b 6			; "SCORE"
0000F023 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000F028 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000F02D F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000F032 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000F037 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000F03C FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000F041 07                         byte_CD0D:	dc.b 7
0000F042 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000F047 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000F04C F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000F051 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000F056 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000F05B F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000F060 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000F065 04                         byte_CD31:	dc.b 4
0000F066 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000F06B F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000F070 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000F075 F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000F07A 04                         byte_CD46:	dc.b 4
0000F07B F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000F080 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000F085 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000F08A F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000F08F 03                         byte_CD5B:	dc.b 3
0000F090 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000F095 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000F09A F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000F09F 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000F0A0 F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000F0A5 F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000F0AA F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000F0AF F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000F0B4 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000F0B9 F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000F0BE F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000F0C3 F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000F0C8 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000F0CD F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000F0D2 F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000F0D7 F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000F0DC 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000F0DD F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000F0E2 F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000F0E7 F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000F0EC F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000F0F1 F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000F0F6 F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000F0FB F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000F100 F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000F105 F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000F10A F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000F10F F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000F114 F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000F119 F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000F11E F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000F123 F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000F128                            		even
0000F128                            
0000F128                            Map_SSRC:	include	"_maps\SS Result Chaos Emeralds.asm"
0000F128                            ; ---------------------------------------------------------------------------
0000F128                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000F128                            ; ---------------------------------------------------------------------------
0000F128                            Map_SSRC_internal:
0000F128 0000                       		dc.w byte_CE02-Map_SSRC_internal
0000F12A 0000                       		dc.w byte_CE08-Map_SSRC_internal
0000F12C 0000                       		dc.w byte_CE0E-Map_SSRC_internal
0000F12E 0000                       		dc.w byte_CE14-Map_SSRC_internal
0000F130 0000                       		dc.w byte_CE1A-Map_SSRC_internal
0000F132 0000                       		dc.w byte_CE20-Map_SSRC_internal
0000F134 0000                       		dc.w byte_CE26-Map_SSRC_internal
0000F136 01                         byte_CE02:	dc.b 1
0000F137 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000F13C 01                         byte_CE08:	dc.b 1
0000F13D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000F142 01                         byte_CE0E:	dc.b 1
0000F143 F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000F148 01                         byte_CE14:	dc.b 1
0000F149 F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000F14E 01                         byte_CE1A:	dc.b 1
0000F14F F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000F154 01                         byte_CE20:	dc.b 1
0000F155 F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000F15A 00                         byte_CE26:	dc.b 0			; Blank frame
0000F15C 00                         		even
0000F15C 00                         		even
0000F15C                            
0000F15C                            		include	"_incObj\36 Spikes.asm"
0000F15C                            ; ---------------------------------------------------------------------------
0000F15C                            ; Object 36 - spikes
0000F15C                            ; ---------------------------------------------------------------------------
0000F15C                            
0000F15C                            Spikes:
0000F15C 7000                       		moveq	#0,d0
0000F15E 1028 0024                  		move.b	obRoutine(a0),d0
0000F162 323B 0000                  		move.w	Spik_Index(pc,d0.w),d1
0000F166 4EFB 1000                  		jmp	Spik_Index(pc,d1.w)
0000F16A                            ; ===========================================================================
0000F16A 0000                       Spik_Index:	dc.w Spik_Main-Spik_Index
0000F16C 0000                       		dc.w Spik_Solid-Spik_Index
0000F16E                            
0000F16E =00000030                  spik_origX:	equ $30		; start X position
0000F16E =00000032                  spik_origY:	equ $32		; start Y position
0000F16E                            
0000F16E 0014                       Spik_Var:	dc.b 0,	$14		; frame	number,	object width
0000F170 0110                       		dc.b 1,	$10
0000F172 0204                       		dc.b 2,	4
0000F174 031C                       		dc.b 3,	$1C
0000F176 0440                       		dc.b 4,	$40
0000F178 0510                       		dc.b 5,	$10
0000F17A                            ; ===========================================================================
0000F17A                            
0000F17A                            Spik_Main:	; Routine 0
0000F17A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F17E 217C 0000 0000 0004        		move.l	#Map_Spike,obMap(a0)
0000F186 317C 051B 0002             		move.w	#$51B,obGfx(a0)
0000F18C 0028 0004 0001             		ori.b	#4,obRender(a0)
0000F192 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000F198 1028 0028                  		move.b	obSubtype(a0),d0
0000F19C 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
0000F1A2 0240 00F0                  		andi.w	#$F0,d0
0000F1A6 43F9 0000 F16E             		lea	(Spik_Var).l,a1
0000F1AC E648                       		lsr.w	#3,d0
0000F1AE D2C0                       		adda.w	d0,a1
0000F1B0 1159 001A                  		move.b	(a1)+,obFrame(a0)
0000F1B4 1159 0014                  		move.b	(a1)+,obActWid(a0)
0000F1B8 3168 0008 0030             		move.w	obX(a0),spik_origX(a0)
0000F1BE 3168 000C 0032             		move.w	obY(a0),spik_origY(a0)
0000F1C4                            
0000F1C4                            Spik_Solid:	; Routine 2
0000F1C4 6100 0000                  		bsr.w	Spik_Type0x	; make the object move
0000F1C8 343C 0004                  		move.w	#4,d2
0000F1CC 0C28 0005 001A             		cmpi.b	#5,obFrame(a0)	; is object type $5x ?
0000F1D2 6700                       		beq.s	Spik_SideWays	; if yes, branch
0000F1D4 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)	; is object type $1x ?
0000F1DA 6600                       		bne.s	Spik_Upright	; if not, branch
0000F1DC 343C 0014                  		move.w	#$14,d2
0000F1E0                            
0000F1E0                            ; Spikes types $1x and $5x face	sideways
0000F1E0                            
0000F1E0                            Spik_SideWays:
0000F1E0 323C 001B                  		move.w	#$1B,d1
0000F1E4 3602                       		move.w	d2,d3
0000F1E6 5243                       		addq.w	#1,d3
0000F1E8 3828 0008                  		move.w	obX(a0),d4
0000F1EC 6100 0000                  		bsr.w	SolidObject
0000F1F0 0828 0003 0022             		btst	#3,obStatus(a0)
0000F1F6 6600                       		bne.s	Spik_Display
0000F1F8 0C44 0001                  		cmpi.w	#1,d4
0000F1FC 6700                       		beq.s	Spik_Hurt
0000F1FE 6000                       		bra.s	Spik_Display
0000F200                            ; ===========================================================================
0000F200                            
0000F200                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000F200                            
0000F200                            Spik_Upright:
0000F200 7200                       		moveq	#0,d1
0000F202 1228 0014                  		move.b	obActWid(a0),d1
0000F206 0641 000B                  		addi.w	#$B,d1
0000F20A 343C 0010                  		move.w	#$10,d2
0000F20E 363C 0011                  		move.w	#$11,d3
0000F212 3828 0008                  		move.w	obX(a0),d4
0000F216 6100 0000                  		bsr.w	SolidObject
0000F21A 0828 0003 0022             		btst	#3,obStatus(a0)
0000F220 6600                       		bne.s	Spik_Hurt
0000F222 4A44                       		tst.w	d4
0000F224 6A00                       		bpl.s	Spik_Display
0000F226                            
0000F226                            Spik_Hurt:
0000F226 4A38 FE2D                  		tst.b	(v_invinc).w	; is Sonic invincible?
0000F22A 6600                       		bne.s	Spik_Display	; if yes, branch
0000F22C 4A78 D030                  		tst.w	(v_player+$30).w ; +++ is Sonic invulnerable?
0000F230 6600                       		bne.s	Spik_Display	; +++ if yes, branch
0000F232 2F08                       		move.l	a0,-(sp)
0000F234 2448                       		movea.l	a0,a2
0000F236 41F8 D000                  		lea	(v_player).w,a0
0000F23A 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0)
0000F240 6400                       		bcc.s	loc_CF20
0000F242                            		; This fixes the infamous "spike bug"
0000F242 4A68 0030                  		tst.w	flashtime(a0)	; Is Sonic flashing after being hurt?
0000F246 6600                       		bne.s	loc_CF20	; If so, skip getting hurt
0000F248 4EF9 0000 00E0             		jmp	(loc_E0).l	; This is a copy of the above code that was pushed aside for this
0000F24E                            loc_D5A2:
0000F24E 9680                       		sub.l	d0,d3
0000F250 2143 000C                  		move.l	d3,obY(a0)
0000F254 4EB9 0000 0000             		jsr	(HurtSonic).l
0000F25A                            
0000F25A                            loc_CF20:
0000F25A 205F                       		movea.l	(sp)+,a0
0000F25C                            
0000F25C                            Spik_Display:
0000F25C 6100 0000                  		bsr.w	DisplaySprite
0000F27E 4E75                       		rts	
0000F280                            ; ===========================================================================
0000F280                            
0000F280                            Spik_Type0x:
0000F280 7000                       		moveq	#0,d0
0000F282 1028 0028                  		move.b	obSubtype(a0),d0
0000F286 D040                       		add.w	d0,d0
0000F288 323B 0000                  		move.w	Spik_TypeIndex(pc,d0.w),d1
0000F28C 4EFB 1000                  		jmp	Spik_TypeIndex(pc,d1.w)
0000F290                            ; ===========================================================================
0000F290 0000                       Spik_TypeIndex:	dc.w Spik_Type00-Spik_TypeIndex
0000F292 0000                       		dc.w Spik_Type01-Spik_TypeIndex
0000F294 0000                       		dc.w Spik_Type02-Spik_TypeIndex
0000F296                            ; ===========================================================================
0000F296                            
0000F296                            Spik_Type00:
0000F296 4E75                       		rts			; don't move the object
0000F298                            ; ===========================================================================
0000F298                            
0000F298                            Spik_Type01:
0000F298 6100 0000                  		bsr.w	Spik_Wait
0000F29C 7000                       		moveq	#0,d0
0000F29E 1028 0034                  		move.b	$34(a0),d0
0000F2A2 D068 0032                  		add.w	spik_origY(a0),d0
0000F2A6 3140 000C                  		move.w	d0,obY(a0)	; move the object vertically
0000F2AA 4E75                       		rts	
0000F2AC                            ; ===========================================================================
0000F2AC                            
0000F2AC                            Spik_Type02:
0000F2AC 6100 0000                  		bsr.w	Spik_Wait
0000F2B0 7000                       		moveq	#0,d0
0000F2B2 1028 0034                  		move.b	$34(a0),d0
0000F2B6 D068 0030                  		add.w	spik_origX(a0),d0
0000F2BA 3140 0008                  		move.w	d0,obX(a0)	; move the object horizontally
0000F2BE 4E75                       		rts	
0000F2C0                            ; ===========================================================================
0000F2C0                            
0000F2C0                            Spik_Wait:
0000F2C0 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000F2C4 6700                       		beq.s	loc_CFA4	; if yes, branch
0000F2C6 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000F2CA 6600                       		bne.s	locret_CFE6
0000F2CC 4A28 0001                  		tst.b	obRender(a0)
0000F2D0 6A00                       		bpl.s	locret_CFE6
0000F2DC 6000                       		bra.s	locret_CFE6
0000F2DE                            ; ===========================================================================
0000F2DE                            
0000F2DE                            loc_CFA4:
0000F2DE 4A68 0036                  		tst.w	$36(a0)
0000F2E2 6700                       		beq.s	loc_CFC6
0000F2E4 0468 0800 0034             		subi.w	#$800,$34(a0)
0000F2EA 6400                       		bcc.s	locret_CFE6
0000F2EC 317C 0000 0034             		move.w	#0,$34(a0)
0000F2F2 317C 0000 0036             		move.w	#0,$36(a0)
0000F2F8 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000F2FE 6000                       		bra.s	locret_CFE6
0000F300                            ; ===========================================================================
0000F300                            
0000F300                            loc_CFC6:
0000F300 0668 0800 0034             		addi.w	#$800,$34(a0)
0000F306 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000F30C 6500                       		bcs.s	locret_CFE6
0000F30E 317C 2000 0034             		move.w	#$2000,$34(a0)
0000F314 317C 0001 0036             		move.w	#1,$36(a0)
0000F31A 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000F320                            
0000F320                            locret_CFE6:
0000F320 4E75                       		rts	
0000F320 4E75                       		rts	
0000F322                            Map_Spike:	include	"_maps\Spikes.asm"
0000F322                            ; --------------------------------------------------------------------------------
0000F322                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000F322                            ; --------------------------------------------------------------------------------
0000F322                            
0000F322                            SME_XgeaQ:	
0000F322 0000 0000                  		dc.w SME_XgeaQ_C-SME_XgeaQ, SME_XgeaQ_1C-SME_XgeaQ	
0000F326 0000 0000                  		dc.w SME_XgeaQ_2C-SME_XgeaQ, SME_XgeaQ_32-SME_XgeaQ	
0000F32A 0000 0000                  		dc.w SME_XgeaQ_42-SME_XgeaQ, SME_XgeaQ_61-SME_XgeaQ	
0000F32E 03                         SME_XgeaQ_C:	dc.b 3	
0000F32F F003 2004 EC               		dc.b $F0, 3, $20, 4, $EC	
0000F334 F003 2004 FC               		dc.b $F0, 3, $20, 4, $FC	
0000F339 F003 2004 0C               		dc.b $F0, 3, $20, 4, $C	
0000F33E 03                         SME_XgeaQ_1C:	dc.b 3	
0000F33F EC0C 2000 F0               		dc.b $EC, $C, $20, 0, $F0	
0000F344 FC0C 2000 F0               		dc.b $FC, $C, $20, 0, $F0	
0000F349 0C0C 2000 F0               		dc.b $C, $C, $20, 0, $F0	
0000F34E 01                         SME_XgeaQ_2C:	dc.b 1	
0000F34F F003 2004 FC               		dc.b $F0, 3, $20, 4, $FC	
0000F354 03                         SME_XgeaQ_32:	dc.b 3	
0000F355 F003 2004 E4               		dc.b $F0, 3, $20, 4, $E4	
0000F35A F003 2004 FC               		dc.b $F0, 3, $20, 4, $FC	
0000F35F F003 2004 14               		dc.b $F0, 3, $20, 4, $14	
0000F364 06                         SME_XgeaQ_42:	dc.b 6	
0000F365 F003 2004 C0               		dc.b $F0, 3, $20, 4, $C0	
0000F36A F003 2004 D8               		dc.b $F0, 3, $20, 4, $D8	
0000F36F F003 2004 F0               		dc.b $F0, 3, $20, 4, $F0	
0000F374 F003 2004 08               		dc.b $F0, 3, $20, 4, 8	
0000F379 F003 2004 20               		dc.b $F0, 3, $20, 4, $20	
0000F37E F003 2004 38               		dc.b $F0, 3, $20, 4, $38	
0000F383 01                         SME_XgeaQ_61:	dc.b 1	
0000F384 FC0C 2000 F0               		dc.b $FC, $C, $20, 0, $F0	
0000F38A 00                         		even
0000F38A 00                         		even
0000F38A                            		include	"_incObj\3B Purple Rock.asm"
0000F38A                            ; ---------------------------------------------------------------------------
0000F38A                            ; Object 3B - purple rock (GHZ)
0000F38A                            ; ---------------------------------------------------------------------------
0000F38A                            
0000F38A                            PurpleRock:
0000F38A 7000                       		moveq	#0,d0
0000F38C 1028 0024                  		move.b	obRoutine(a0),d0
0000F390 323B 0000                  		move.w	Rock_Index(pc,d0.w),d1
0000F394 4EFB 1000                  		jmp	Rock_Index(pc,d1.w)
0000F398                            ; ===========================================================================
0000F398 0000                       Rock_Index:	dc.w Rock_Main-Rock_Index
0000F39A 0000                       		dc.w Rock_Solid-Rock_Index
0000F39C                            ; ===========================================================================
0000F39C                            
0000F39C                            Rock_Main:	; Routine 0
0000F39C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F3A0 217C 0000 0000 0004        		move.l	#Map_PRock,obMap(a0)
0000F3A8 317C 63D0 0002             		move.w	#$63D0,obGfx(a0)
0000F3AE 117C 0004 0001             		move.b	#4,obRender(a0)
0000F3B4 117C 0013 0014             		move.b	#$13,obActWid(a0)
0000F3BA 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000F3C0                            
0000F3C0                            Rock_Solid:	; Routine 2
0000F3C0 323C 001B                  		move.w	#$1B,d1
0000F3C4 343C 0010                  		move.w	#$10,d2
0000F3C8 363C 0010                  		move.w	#$10,d3
0000F3CC 3828 0008                  		move.w	obX(a0),d4
0000F3D0 6100 0000                  		bsr.w	SolidObject
0000F3D4 6100 0000                  		bsr.w	DisplaySprite
0000F3F6 4E75                       		rts	
0000F3F6 4E75                       		rts	
0000F3F8                            		include	"_incObj\49 Waterfall Sound.asm"
0000F3F8                            ; ---------------------------------------------------------------------------
0000F3F8                            ; Object 49 - waterfall	sound effect (GHZ)
0000F3F8                            ; ---------------------------------------------------------------------------
0000F3F8                            
0000F3F8                            WaterSound:
0000F3F8 7000                       		moveq	#0,d0
0000F3FA 1028 0024                  		move.b	obRoutine(a0),d0
0000F3FE 323B 0000                  		move.w	WSnd_Index(pc,d0.w),d1
0000F402 4EFB 1000                  		jmp	WSnd_Index(pc,d1.w)
0000F406                            ; ===========================================================================
0000F406 0000                       WSnd_Index:	dc.w WSnd_Main-WSnd_Index
0000F408 0000                       		dc.w WSnd_PlaySnd-WSnd_Index
0000F40A                            ; ===========================================================================
0000F40A                            
0000F40A                            WSnd_Main:	; Routine 0
0000F40A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F40E 117C 0004 0001             		move.b	#4,obRender(a0)
0000F414                            
0000F414                            WSnd_PlaySnd:	; Routine 2
0000F414 1038 FE0F                  		move.b	(v_vbla_byte).w,d0 ; get low byte of VBlank counter
0000F418 0200 003F                  		andi.b	#$3F,d0
0000F41C 6600                       		bne.s	WSnd_ChkDel
0000F428                            
0000F428                            	WSnd_ChkDel:
0000F446 4E75                       		rts	
0000F446 4E75                       		rts	
0000F448                            Map_PRock:	include	"_maps\Purple Rock.asm"
0000F448                            ; ---------------------------------------------------------------------------
0000F448                            ; Sprite mappings - purple rock	(GHZ)
0000F448                            ; ---------------------------------------------------------------------------
0000F448                            Map_PRock_internal:
0000F448 0000                       		dc.w byte_D110-Map_PRock_internal
0000F44A 02                         byte_D110:	dc.b 2
0000F44B F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000F450 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000F456 00                         		even
0000F456 00                         		even
0000F456                            		include	"_incObj\3C Smashable Wall.asm"
0000F456                            ; ---------------------------------------------------------------------------
0000F456                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000F456                            ; ---------------------------------------------------------------------------
0000F456                            
0000F456                            SmashWall:
0000F456 7000                       		moveq	#0,d0
0000F458 1028 0024                  		move.b	obRoutine(a0),d0
0000F45C 323B 0000                  		move.w	Smash_Index(pc,d0.w),d1
0000F460 4EBB 1000                  		jsr	Smash_Index(pc,d1.w)
0000F464 6000 0000                  		bra.w	RememberState
0000F468                            ; ===========================================================================
0000F468 0000                       Smash_Index:	dc.w Smash_Main-Smash_Index
0000F46A 0000                       		dc.w Smash_Solid-Smash_Index
0000F46C 0000                       		dc.w Smash_FragMove-Smash_Index
0000F46E                            
0000F46E =00000030                  smash_speed:	equ $30		; Sonic's horizontal speed
0000F46E                            ; ===========================================================================
0000F46E                            
0000F46E                            Smash_Main:	; Routine 0
0000F46E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F472 217C 0000 0000 0004        		move.l	#Map_Smash,obMap(a0)
0000F47A 317C 450F 0002             		move.w	#$450F,obGfx(a0)
0000F480 117C 0004 0001             		move.b	#4,obRender(a0)
0000F486 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000F48C 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000F492 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
0000F498                            
0000F498                            Smash_Solid:	; Routine 2
0000F498 3178 D010 0030             		move.w	(v_player+obVelX).w,smash_speed(a0) ; load Sonic's horizontal speed
0000F49E 323C 001B                  		move.w	#$1B,d1
0000F4A2 343C 0020                  		move.w	#$20,d2
0000F4A6 363C 0020                  		move.w	#$20,d3
0000F4AA 3828 0008                  		move.w	obX(a0),d4
0000F4AE 6100 0000                  		bsr.w	SolidObject	
0000F4B2 4A04                       		tst.b	d4
0000F4B4 6E00 0000                  		bgt.w	@chkroll	
0000F4B8 6700 0000                  		beq.w	@donothing								
0000F4BC 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing against the wall?
0000F4C2 6700 0000                  		beq.w	@donothing	; if yes, branch
0000F4C6                            ; ===========================================================================
0000F4C6                            
0000F4C6                            @chkroll:
0000F4C6 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1) ; is Sonic rolling?
0000F4CC 6600                       		bne.s	@donothing	; if not, branch	
0000F4CE 3028 0030                  		move.w	smash_speed(a0),d0
0000F4D2 6A00                       		bpl.s	@chkspeed
0000F4D4 4440                       		neg.w	d0
0000F4D6                            
0000F4D6                            	@chkspeed:
0000F4D6 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000F4DA 6500                       		bcs.s	@donothing	; if not, branch	
0000F4DC                            		
0000F4DC                            	@continue:	
0000F4DC 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000F4E2 3368 0030 0010             		move.w	smash_speed(a0),obVelX(a1)
0000F4E8 49F9 0000 0000             		lea	(Smash_FragSpd1).l,a4 ;	use fragments that move	right
0000F4EE 3028 0008                  		move.w	obX(a0),d0
0000F4F2 B069 0008                  		cmp.w	obX(a1),d0	; is Sonic to the right	of the block?
0000F4F6 6500                       		bcs.s	@smash		; if yes, branch
0000F4F8 49F9 0000 0000             		lea	(Smash_FragSpd2).l,a4 ;	use fragments that move	left
0000F4FE                            
0000F4FE                            	@smash:
0000F4FE 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
0000F504 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000F50A 7206                       		moveq	#6,d1		; load 7 fragments
0000F50C 343C 0070                  		move.w	#$70,d2
0000F510 6100                       		bsr.s	SmashObject
0000F512                            
0000F512                            @donothing:
0000F512 4E75                       		rts	
0000F514                            
0000F514                            Smash_FragMove:	; Routine 4
0000F514 588F                       		addq.l	#4,sp
0000F516 6100 0000                  		bsr.w	SpeedToPos
0000F51A 0668 0070 0012             		addi.w	#$70,obVelY(a0)	; make fragment	fall faster
0000F520 4A28 0001                  		tst.b	obRender(a0)
0000F524 6A00 0000                  		bpl.w	DeleteObject
0000F528 6000 0000                  		bra.w	DisplaySprite
0000F52C                            
0000F52C                            
0000F52C                            
0000F52C                            		include	"_incObj\sub SmashObject.asm"
0000F52C                            ; ---------------------------------------------------------------------------
0000F52C                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000F52C                            ; ---------------------------------------------------------------------------
0000F52C                            
0000F52C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F52C                            
0000F52C                            
0000F52C                            SmashObject:
0000F52C 7000                       		moveq	#0,d0
0000F52E 1028 001A                  		move.b	obFrame(a0),d0
0000F532 D040                       		add.w	d0,d0
0000F534 2668 0004                  		movea.l	obMap(a0),a3
0000F538 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000F53C 524B                       		addq.w	#1,a3
0000F53E 08E8 0005 0001             		bset	#5,obRender(a0)
0000F544 1810                       		move.b	0(a0),d4
0000F546 1A28 0001                  		move.b	obRender(a0),d5
0000F54A 2248                       		movea.l	a0,a1
0000F54C 137C 0004 0024             		move.b	#4,obRoutine(a1)
0000F552 1284                       		move.b	d4,0(a1)
0000F554 234B 0004                  		move.l	a3,obMap(a1)
0000F558 1345 0001                  		move.b	d5,obRender(a1)
0000F55C 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000F562 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000F568 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0000F56E 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0000F574 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
0000F57A 335C 0010                  		move.w	(a4)+,obVelX(a1)
0000F57E 335C 0012                  		move.w	(a4)+,obVelY(a1)
0000F582 5341                       		subq.w #1,d1
0000F584 43F8 D800                  		lea (v_lvlobjspace).w,a1
0000F588 303C 005F                  		move.w #$5F,d0
0000F58C                            ; ===========================================================================
0000F58C                            
0000F58C                            Smash_Loop:
0000F58C 4A11                       		tst.b	(a1)
0000F58E 6700                       		beq.s	@cont
0000F590 43E9 0040                  		lea		$40(a1),a1
0000F594 51C8 FFF6                  		dbf 	d0,Smash_Loop 
0000F598 6600                       		bne.s	Smash_PlaySnd
0000F59A                            
0000F59A                            	@cont:
0000F59A 5A4B                       		addq.w #5,a3
0000F59C                            
0000F59C                            Smash_LoadFrag:				; XREF: SmashObject
0000F59C 137C 0004 0024             		move.b	#4,obRoutine(a1)
0000F5A2 1284                       		move.b	d4,0(a1)
0000F5A4 234B 0004                  		move.l	a3,obMap(a1)
0000F5A8 1345 0001                  		move.b	d5,obRender(a1)
0000F5AC 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000F5B2 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000F5B8 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0000F5BE 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0000F5C4 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
0000F5CA 335C 0010                  		move.w	(a4)+,obVelX(a1)
0000F5CE 335C 0012                  		move.w	(a4)+,obVelY(a1)
0000F5D2 51C9 FFB8                  		dbf	d1,Smash_Loop
0000F5D6                            
0000F5D6                            Smash_PlaySnd:
0000F5D6 303C 0000                  		move.w	#sfx_WallSmash,d0
0000F5DA 4EF9 0000 1250             		jmp	(PlaySound_Special).l ; play smashing sound
0000F5E0                            
0000F5E0                            ; End of function SmashObject
0000F5E0                            ; End of function SmashObject
0000F5E0                            
0000F5E0                            ; ===========================================================================
0000F5E0                            ; Smashed block	fragment speeds
0000F5E0                            ;
0000F5E0 0400 FB00                  Smash_FragSpd1:	dc.w $400, -$500	; x-move speed,	y-move speed
0000F5E4 0600 FF00                  		dc.w $600, -$100
0000F5E8 0600 0100                  		dc.w $600, $100
0000F5EC 0400 0500                  		dc.w $400, $500
0000F5F0 0600 FA00                  		dc.w $600, -$600
0000F5F4 0800 FE00                  		dc.w $800, -$200
0000F5F8 0800 0200                  		dc.w $800, $200
0000F5FC 0600 0600                  		dc.w $600, $600
0000F600                            
0000F600 FA00 FA00                  Smash_FragSpd2:	dc.w -$600, -$600
0000F604 F800 FE00                  		dc.w -$800, -$200
0000F608 F800 0200                  		dc.w -$800, $200
0000F60C FA00 0600                  		dc.w -$600, $600
0000F610 FC00 FB00                  		dc.w -$400, -$500
0000F614 FA00 FF00                  		dc.w -$600, -$100
0000F618 FA00 0100                  		dc.w -$600, $100
0000F61C FC00 0500                  		dc.w -$400, $500
0000F620                            
0000F620                            Map_Smash:	include	"_maps\Smashable Walls.asm"
0000F620                            ; ---------------------------------------------------------------------------
0000F620                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000F620                            ; ---------------------------------------------------------------------------
0000F620                            Map_Smash_internal:
0000F620 0000                       		dc.w @left-Map_Smash_internal
0000F622 0000                       		dc.w @middle-Map_Smash_internal
0000F624 0000                       		dc.w @right-Map_Smash_internal
0000F626 08                         @left:		dc.b 8
0000F627 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000F62C F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000F631 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000F636 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000F63B E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000F640 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000F645 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000F64A 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000F64F 08                         @middle:	dc.b 8
0000F650 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000F655 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000F65A 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000F65F 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000F664 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000F669 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000F66E 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000F673 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000F678 08                         @right:		dc.b 8
0000F679 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000F67E F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000F683 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000F688 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000F68D E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000F692 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000F697 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000F69C 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000F6A2 00                         		even
0000F6A2 00                         		even
0000F6A2                            
0000F6A2                            ; ---------------------------------------------------------------------------
0000F6A2                            ; Object code execution subroutine
0000F6A2                            ; ---------------------------------------------------------------------------
0000F6A2                            
0000F6A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F6A2                            
0000F6A2                            
0000F6A2                            
0000F6A2                            ExecuteObjects: ; XREF: GM_Title; et al
0000F6A2 41F8 D000                  		lea (v_objspace).w,a0 ; set address for object RAM
0000F6A6 7E7F                       		moveq #$7F,d7
0000F6A8 7000                       		moveq #0,d0
0000F6AA 0C38 0006 D024             		cmpi.b #6,(v_player+obRoutine).w
0000F6B0 6400                       		bcc.s loc_D362
0000F6B2                            
0000F6B2                            loc_D348:
0000F6B2 1010                       		move.b (a0),d0 ; load object number from RAM
0000F6B4 6700                       		beq.s loc_D358
0000F6B6 D040                       		add.w d0,d0
0000F6B8 D040                       		add.w d0,d0
0000F6BA 227B 0000                  		movea.l Obj_Index-4(pc,d0.w),a1
0000F6BE 4E91                       		jsr (a1) ; run the object's code
0000F6C0 7000                       		moveq #0,d0
0000F6C2                            
0000F6C2                            loc_D358:
0000F6C2 41E8 0040                  		lea $40(a0),a0 ; next object
0000F6C6 51CF FFEA                  		dbf d7,loc_D348
0000F6CA 4E75                       		rts
0000F6CC                            ; ===========================================================================
0000F6CC                            
0000F6CC                            loc_D362:
0000F6CC 7E1F                       		moveq #$1F,d7
0000F6CE 61E2                       		bsr.s loc_D348
0000F6D0 7E5F                       		moveq #$5F,d7
0000F6D2                            
0000F6D2                            loc_D368:
0000F6D2 7000                       		moveq #0,d0 ; Clear d0 quickly
0000F6D4 1010                       		move.b (a0),d0 ; get the object's ID
0000F6D6 6700                       		beq.s loc_D37C ; if it's obj00, skip it
0000F6D8 4A28 0001                  		tst.b obRender(a0) ; should we render it?
0000F6DC 6A00                       		bpl.s loc_D37C ; if not, skip it
0000F6DE 3028 0018                  		move.w obpriority(a0),d0 ; move object's priority to d0
0000F6E2 0828 0006 0001             		btst #6,obRender(a0) ; is the compound sprites flag set?
0000F6E8 6700                       		beq.s loc_D378 ; if not, branch
0000F6EA 303C 0200                  		move.w #$200,d0 ; move $200 to d0
0000F6EE                            
0000F6EE                            loc_D378:
0000F6EE 6100 0000                  		bsr.w DisplaySprite2
0000F6F2                            		
0000F6F2                            loc_D37C:
0000F6F2 41E8 0040                  		lea $40(a0),a0
0000F6F6 51CF FFDA                  		dbf d7,loc_D368
0000F6FA 4E75                       		rts
0000F6FC                            ; End of function ExecuteObjects
0000F6FC                            
0000F6FC                            ; ===========================================================================
0000F6FC                            ; ---------------------------------------------------------------------------
0000F6FC                            ; Object pointers
0000F6FC                            ; ---------------------------------------------------------------------------
0000F6FC                            Obj_Index:
0000F6FC                            		include	"_inc\Object Pointers.asm"
0000F6FC                            ; ---------------------------------------------------------------------------
0000F6FC                            ; Object pointers
0000F6FC                            ; ---------------------------------------------------------------------------
0000F6FC 0000 0000                  ptr_SonicPlayer:	dc.l SonicPlayer	; $01
0000F700 0000 0000                  ptr_Obj02:			dc.l ObjectFall
0000F704 0000 0000                  ptr_Obj03:			dc.l Obj03
0000F708 0000 0000                  ptr_GShieldItem:	dc.l GShieldItem
0000F70C 0000 0000                  ptr_Obj05:		dc.l Spindash_dust
0000F710 0000 B442                  ptr_Mozzietron:		dc.l Mozzietron
0000F714 0000 0000                  ptr_RShieldItem:	dc.l RShieldItem	
0000F718 0000 0000                  ptr_Splash:		dc.l Splash		; $08
0000F71C 0000 0000                  ptr_SonicSpecial:	dc.l SonicSpecial
0000F720 0000 0000                  ptr_DrownCount:		dc.l DrownCount
0000F724 0000 0000                  ptr_Pole:		dc.l Pole
0000F728 0000 0000                  ptr_FlapDoor:		dc.l FlapDoor
0000F72C 0000 0000                  ptr_Signpost:		dc.l Signpost
0000F730 0000 C868                  ptr_TitleSonic:		dc.l TitleSonic
0000F734 0000 C8E8                  ptr_PSBTM:		dc.l PSBTM
0000F738 0000 0000                  ptr_Obj10:		dc.l Obj10		; $10
0000F73C 0000 8F66                  ptr_Bridge:		dc.l Bridge
0000F740 0000 0000                  ptr_SpinningLight:	dc.l SpinningLight
0000F744 0000 0000                  ptr_LavaMaker:		dc.l LavaMaker
0000F748 0000 0000                  ptr_LavaBall:		dc.l LavaBall
0000F74C 0000 958C                  ptr_SwingingPlatform:	dc.l SwingingPlatform
0000F750 0000 0000                  ptr_Harpoon:		dc.l Harpoon
0000F754 0000 98D8                  ptr_Helix:		dc.l Helix
0000F758 0000 9A64                  ptr_BasicPlatform:	dc.l BasicPlatform	; $18
0000F75C 0000 0000                  ptr_InvStars:		dc.l InvStarsObj
0000F760 0000 9E40                  ptr_CollapseLedge:	dc.l CollapseLedge
0000F764 0000 0000                  ptr_WaterSurface:	dc.l WaterSurface
0000F768 0000 A434                  ptr_Scenery:		dc.l Scenery
0000F76C 0000 A4D6                  ptr_MagicSwitch:	dc.l MagicSwitch
0000F770 0000 A7BE                  ptr_BallHog:		dc.l BallHog
0000F774 0000 B158                  ptr_Crabmeat:		dc.l Crabmeat
0000F778 0000 A88C                  ptr_Cannonball:		dc.l Cannonball		; $20
0000F77C 0000 0000                  ptr_HUD:		dc.l HUD
0000F780 0000 B574                  ptr_BuzzBomber:		dc.l BuzzBomber
0000F784 0000 B6C6                  ptr_Missile:		dc.l Missile
0000F788 0000 A95E                  ptr_MissileDissolve:	dc.l MissileDissolve
0000F78C 0000 B920                  ptr_Rings:		dc.l Rings
0000F790 0000 C16A                  ptr_Monitor:		dc.l Monitor
0000F794 0000 A9CE                  ptr_ExplosionItem:	dc.l ExplosionItem
0000F798 0000 AB8C                  ptr_Animals:		dc.l Animals		; $28
0000F79C 0000 B07A                  ptr_Points:		dc.l Points
0000F7A0 0000 A5AC                  ptr_AutoDoor:		dc.l AutoDoor
0000F7A4 0000 CE2C                  ptr_Chopper:		dc.l Chopper
0000F7A8 0000 CEE6                  ptr_Jaws:		dc.l Jaws
0000F7AC 0000 CFB0                  ptr_Burrobot:		dc.l Burrobot
0000F7B0 0000 C368                  ptr_PowerUp:		dc.l PowerUp
0000F7B4 0000 D1C4                  ptr_LargeGrass:		dc.l LargeGrass
0000F7B8 0000 D6A6                  ptr_GlassBlock:		dc.l GlassBlock		; $30
0000F7BC 0000 D982                  ptr_ChainStomp:		dc.l ChainStomp
0000F7C0 0000 E030                  ptr_Button:		dc.l Button
0000F7C4 0000 E1D4                  ptr_PushBlock:		dc.l PushBlock
0000F7C8 0000 E606                  ptr_TitleCard:		dc.l TitleCard
0000F7CC 0000 D4E6                  ptr_GrassFire:		dc.l GrassFire
0000F7D0 0000 F15C                  ptr_Spikes:		dc.l Spikes
0000F7D4 0000 BB7C                  ptr_RingLoss:		dc.l RingLoss
0000F7D8 0000 0000                  ptr_ShieldItem:		dc.l ShieldItem		; $38
0000F7DC 0000 E7B6                  ptr_GameOverCard:	dc.l GameOverCard
0000F7E0 0000 E874                  ptr_GotThroughCard:	dc.l GotThroughCard
0000F7E4 0000 F38A                  ptr_PurpleRock:		dc.l PurpleRock
0000F7E8 0000 F456                  ptr_SmashWall:		dc.l SmashWall
0000F7EC 0000 0000                  ptr_BossGreenHill:	dc.l BossGreenHill
0000F7F0 0000 0000                  ptr_Prison:		dc.l Prison
0000F7F4 0000 AA60                  ptr_ExplosionBomb:	dc.l ExplosionBomb
0000F7F8 0000 0000                  ptr_MotoBug:		dc.l MotoBug		; $40
0000F7FC 0000 0000                  ptr_Springs:		dc.l Springs
0000F800 0000 0000                  ptr_Newtron:		dc.l Newtron
0000F804 0000 0000                  ptr_Roller:		dc.l Roller
0000F808 0000 0000                  ptr_EdgeWalls:		dc.l EdgeWalls
0000F80C 0000 DC9E                  ptr_SideStomp:		dc.l SideStomp
0000F810 0000 0000                  ptr_MarbleBrick:	dc.l MarbleBrick
0000F814 0000 0000                  ptr_Bumper:		dc.l Bumper
0000F818 0000 0000                  ptr_BossBall:		dc.l BossBall		; $48
0000F81C 0000 F3F8                  ptr_WaterSound:		dc.l WaterSound
0000F820 0000 0000                  ptr_VanishSonic:	dc.l VanishSonic
0000F824 0000 BE3E                  ptr_GiantRing:		dc.l GiantRing
0000F828 0000 0000                  ptr_GeyserMaker:	dc.l GeyserMaker
0000F82C 0000 0000                  ptr_LavaGeyser:		dc.l LavaGeyser
0000F830 0000 0000                  ptr_SpShieldItem:	dc.l SpShieldItem
0000F834 0000 0000                  ptr_Obj4F:		dc.l Obj4F
0000F838 0000 0000                  ptr_Yadrin:		dc.l Yadrin		; $50
0000F83C 0000 0000                  ptr_SmashBlock:		dc.l SmashBlock
0000F840 0000 0000                  ptr_MovingBlock:	dc.l MovingBlock
0000F844 0000 9F50                  ptr_CollapseFloor:	dc.l CollapseFloor
0000F848 0000 0000                  ptr_LavaTag:		dc.l LavaTag
0000F84C 0000 0000                  ptr_Basaran:		dc.l Basaran
0000F850 0000 0000                  ptr_FloatingBlock:	dc.l FloatingBlock
0000F854 0000 0000                  ptr_SpikeBall:		dc.l SpikeBall
0000F858 0000 0000                  ptr_BigSpikeBall:	dc.l BigSpikeBall	; $58
0000F85C 0000 0000                  ptr_Elevator:		dc.l Elevator
0000F860 0000 0000                  ptr_CirclingPlatform:	dc.l CirclingPlatform
0000F864 0000 0000                  ptr_Staircase:		dc.l Staircase
0000F868 0000 0000                  ptr_Pylon:		dc.l Pylon
0000F86C 0000 0000                  ptr_Fan:		dc.l Fan
0000F870 0000 0000                  ptr_Seesaw:		dc.l Seesaw
0000F874 0000 0000                  ptr_Bomb:		dc.l Bomb
0000F878 0000 0000                  ptr_Orbinaut:		dc.l Orbinaut		; $60
0000F87C 0000 0000                  ptr_LabyrinthBlock:	dc.l LabyrinthBlock
0000F880 0000 0000                  ptr_Gargoyle:		dc.l Gargoyle
0000F884 0000 0000                  ptr_LabyrinthConvey:	dc.l LabyrinthConvey
0000F888 0000 0000                  ptr_Bubble:		dc.l Bubble
0000F88C 0000 0000                  ptr_Waterfall:		dc.l Waterfall
0000F890 0000 0000                  ptr_Junction:		dc.l Junction
0000F894 0000 0000                  ptr_RunningDisc:	dc.l RunningDisc
0000F898 0000 0000                  ptr_Conveyor:		dc.l Conveyor		; $68
0000F89C 0000 0000                  ptr_SpinPlatform:	dc.l SpinPlatform
0000F8A0 0000 0000                  ptr_Saws:		dc.l Saws
0000F8A4 0000 0000                  ptr_ScrapStomp:		dc.l ScrapStomp
0000F8A8 0000 0000                  ptr_VanishPlatform:	dc.l VanishPlatform
0000F8AC 0000 0000                  ptr_Flamethrower:	dc.l Flamethrower
0000F8B0 0000 0000                  ptr_Electro:		dc.l Electro
0000F8B4 0000 0000                  ptr_SpinConvey:		dc.l SpinConvey
0000F8B8 0000 0000                  ptr_Girder:		dc.l Girder		; $70
0000F8BC 0000 0000                  ptr_Invisibarrier:	dc.l Invisibarrier
0000F8C0 0000 0000                  ptr_Teleport:		dc.l Teleport
0000F8C4 0000 0000                  ptr_BossMarble:		dc.l BossMarble
0000F8C8 0000 0000                  ptr_BossFire:		dc.l BossFire
0000F8CC 0000 0000                  ptr_BossSpringYard:	dc.l BossSpringYard
0000F8D0 0000 0000                  ptr_BossBlock:		dc.l BossBlock
0000F8D4 0000 0000                  ptr_BossLabyrinth:	dc.l BossLabyrinth
0000F8D8 0000 0000                  ptr_Caterkiller:	dc.l Caterkiller	; $78
0000F8DC 0000 0000                  ptr_Lamppost:		dc.l Lamppost
0000F8E0 0000 0000                  ptr_BossStarLight:	dc.l BossStarLight
0000F8E4 0000 0000                  ptr_BossSpikeball:	dc.l BossSpikeball
0000F8E8 0000 BF18                  ptr_RingFlash:		dc.l RingFlash
0000F8EC 0000 0000                  ptr_HiddenBonus:	dc.l HiddenBonus
0000F8F0 0000 EACE                  ptr_SSResult:		dc.l SSResult
0000F8F4 0000 EC74                  ptr_SSRChaos:		dc.l SSRChaos
0000F8F8 0000 5E56                  ptr_ContScrItem:	dc.l ContScrItem	; $80
0000F8FC 0000 5F6E                  ptr_ContSonic:		dc.l ContSonic
0000F900 0000 0000                  ptr_ScrapEggman:	dc.l ScrapEggman
0000F904 0000 0000                  ptr_FalseFloor:		dc.l FalseFloor
0000F908 0000 0000                  ptr_EggmanCylinder:	dc.l EggmanCylinder
0000F90C 0000 0000                  ptr_BossFinal:		dc.l BossFinal
0000F910 0000 0000                  ptr_BossPlasma:		dc.l BossPlasma
0000F914 0000 63F8                  ptr_EndSonic:		dc.l EndSonic
0000F918 0000 6552                  ptr_EndChaos:		dc.l EndChaos		; $88
0000F91C 0000 662C                  ptr_EndSTH:		dc.l EndSTH
0000F920 0000 0000                  ptr_CreditsText:	dc.l CreditsText
0000F924 0000 6892                  ptr_EndEggman:		dc.l EndEggman
0000F928 0000 6972                  ptr_TryChaos:		dc.l TryChaos
0000F92C                            
0000F92C                            NullObject:
0000F92C                            		;jmp	(DeleteObject).l	; It would be safer to have this instruction here, but instead it just falls through to ObjectFall
0000F92C                            
0000F92C =00000001                  id_SonicPlayer:		equ ((ptr_SonicPlayer-Obj_Index)/4)+1		; $01
0000F92C =00000002                  id_Obj02:		equ ((ptr_Obj02-Obj_Index)/4)+1
0000F92C =00000003                  id_Obj03:		equ ((ptr_Obj03-Obj_Index)/4)+1
0000F92C =00000004                  id_GShielditem:		equ ((ptr_GShieldItem-Obj_Index)/4)+1
0000F92C =00000005                  id_Obj05:		equ ((ptr_Obj05-Obj_Index)/4)+1
0000F92C =00000006                  id_Mozzietron:		equ ((ptr_Mozzietron-Obj_Index)/4)+1
0000F92C =00000007                  id_RShieldItem:		equ ((ptr_RShieldItem-Obj_Index)/4)+1	
0000F92C =00000008                  id_Splash:		equ ((ptr_Splash-Obj_Index)/4)+1		; $08
0000F92C =00000009                  id_SonicSpecial:	equ ((ptr_SonicSpecial-Obj_Index)/4)+1
0000F92C =0000000A                  id_DrownCount:		equ ((ptr_DrownCount-Obj_Index)/4)+1
0000F92C =0000000B                  id_Pole:		equ ((ptr_Pole-Obj_Index)/4)+1
0000F92C =0000000C                  id_FlapDoor:		equ ((ptr_FlapDoor-Obj_Index)/4)+1
0000F92C =0000000D                  id_Signpost:		equ ((ptr_Signpost-Obj_Index)/4)+1
0000F92C =0000000E                  id_TitleSonic:		equ ((ptr_TitleSonic-Obj_Index)/4)+1
0000F92C =0000000F                  id_PSBTM:		equ ((ptr_PSBTM-Obj_Index)/4)+1
0000F92C =00000010                  id_Obj10:		equ ((ptr_Obj10-Obj_Index)/4)+1			; $10
0000F92C =00000011                  id_Bridge:		equ ((ptr_Bridge-Obj_Index)/4)+1
0000F92C =00000012                  id_SpinningLight:	equ ((ptr_SpinningLight-Obj_Index)/4)+1
0000F92C =00000013                  id_LavaMaker:		equ ((ptr_LavaMaker-Obj_Index)/4)+1
0000F92C =00000014                  id_LavaBall:		equ ((ptr_LavaBall-Obj_Index)/4)+1
0000F92C =00000015                  id_SwingingPlatform:	equ ((ptr_SwingingPlatform-Obj_Index)/4)+1
0000F92C =00000016                  id_Harpoon:		equ ((ptr_Harpoon-Obj_Index)/4)+1
0000F92C =00000017                  id_Helix:		equ ((ptr_Helix-Obj_Index)/4)+1
0000F92C =00000018                  id_BasicPlatform:	equ ((ptr_BasicPlatform-Obj_Index)/4)+1		; $18
0000F92C =00000019                  id_InvStars:		equ ((ptr_InvStars-Obj_Index)/4)+1
0000F92C =0000001A                  id_CollapseLedge:	equ ((ptr_CollapseLedge-Obj_Index)/4)+1
0000F92C =0000001B                  id_WaterSurface:	equ ((ptr_WaterSurface-Obj_Index)/4)+1
0000F92C =0000001C                  id_Scenery:		equ ((ptr_Scenery-Obj_Index)/4)+1
0000F92C =0000001D                  id_MagicSwitch:		equ ((ptr_MagicSwitch-Obj_Index)/4)+1
0000F92C =0000001E                  id_BallHog:		equ ((ptr_BallHog-Obj_Index)/4)+1
0000F92C =0000001F                  id_Crabmeat:		equ ((ptr_Crabmeat-Obj_Index)/4)+1
0000F92C =00000020                  id_Cannonball:		equ ((ptr_Cannonball-Obj_Index)/4)+1		; $20
0000F92C =00000021                  id_HUD:			equ ((ptr_HUD-Obj_Index)/4)+1
0000F92C =00000022                  id_BuzzBomber:		equ ((ptr_BuzzBomber-Obj_Index)/4)+1
0000F92C =00000023                  id_Missile:		equ ((ptr_Missile-Obj_Index)/4)+1
0000F92C =00000024                  id_MissileDissolve:	equ ((ptr_MissileDissolve-Obj_Index)/4)+1
0000F92C =00000025                  id_Rings:		equ ((ptr_Rings-Obj_Index)/4)+1
0000F92C =00000026                  id_Monitor:		equ ((ptr_Monitor-Obj_Index)/4)+1
0000F92C =00000027                  id_ExplosionItem:	equ ((ptr_ExplosionItem-Obj_Index)/4)+1
0000F92C =00000028                  id_Animals:		equ ((ptr_Animals-Obj_Index)/4)+1		; $28
0000F92C =00000029                  id_Points:		equ ((ptr_Points-Obj_Index)/4)+1
0000F92C =0000002A                  id_AutoDoor:		equ ((ptr_AutoDoor-Obj_Index)/4)+1
0000F92C =0000002B                  id_Chopper:		equ ((ptr_Chopper-Obj_Index)/4)+1
0000F92C =0000002C                  id_Jaws:		equ ((ptr_Jaws-Obj_Index)/4)+1
0000F92C =0000002D                  id_Burrobot:		equ ((ptr_Burrobot-Obj_Index)/4)+1
0000F92C =0000002E                  id_PowerUp:		equ ((ptr_PowerUp-Obj_Index)/4)+1
0000F92C =0000002F                  id_LargeGrass:		equ ((ptr_LargeGrass-Obj_Index)/4)+1
0000F92C =00000030                  id_GlassBlock:		equ ((ptr_GlassBlock-Obj_Index)/4)+1		; $30
0000F92C =00000031                  id_ChainStomp:		equ ((ptr_ChainStomp-Obj_Index)/4)+1
0000F92C =00000032                  id_Button:		equ ((ptr_Button-Obj_Index)/4)+1
0000F92C =00000033                  id_PushBlock:		equ ((ptr_PushBlock-Obj_Index)/4)+1
0000F92C =00000034                  id_TitleCard:		equ ((ptr_TitleCard-Obj_Index)/4)+1
0000F92C =00000035                  id_GrassFire:		equ ((ptr_GrassFire-Obj_Index)/4)+1
0000F92C =00000036                  id_Spikes:		equ ((ptr_Spikes-Obj_Index)/4)+1
0000F92C =00000037                  id_RingLoss:		equ ((ptr_RingLoss-Obj_Index)/4)+1
0000F92C =00000038                  id_ShieldItem:		equ ((ptr_ShieldItem-Obj_Index)/4)+1		; $38
0000F92C =00000039                  id_GameOverCard:	equ ((ptr_GameOverCard-Obj_Index)/4)+1
0000F92C =0000003A                  id_GotThroughCard:	equ ((ptr_GotThroughCard-Obj_Index)/4)+1
0000F92C =0000003B                  id_PurpleRock:		equ ((ptr_PurpleRock-Obj_Index)/4)+1
0000F92C =0000003C                  id_SmashWall:		equ ((ptr_SmashWall-Obj_Index)/4)+1
0000F92C =0000003D                  id_BossGreenHill:	equ ((ptr_BossGreenHill-Obj_Index)/4)+1
0000F92C =0000003E                  id_Prison:		equ ((ptr_Prison-Obj_Index)/4)+1
0000F92C =0000003F                  id_ExplosionBomb:	equ ((ptr_ExplosionBomb-Obj_Index)/4)+1
0000F92C =00000040                  id_MotoBug:		equ ((ptr_MotoBug-Obj_Index)/4)+1		; $40
0000F92C =00000041                  id_Springs:		equ ((ptr_Springs-Obj_Index)/4)+1
0000F92C =00000042                  id_Newtron:		equ ((ptr_Newtron-Obj_Index)/4)+1
0000F92C =00000043                  id_Roller:		equ ((ptr_Roller-Obj_Index)/4)+1
0000F92C =00000044                  id_EdgeWalls:		equ ((ptr_EdgeWalls-Obj_Index)/4)+1
0000F92C =00000045                  id_SideStomp:		equ ((ptr_SideStomp-Obj_Index)/4)+1
0000F92C =00000046                  id_MarbleBrick:		equ ((ptr_MarbleBrick-Obj_Index)/4)+1
0000F92C =00000047                  id_Bumper:		equ ((ptr_Bumper-Obj_Index)/4)+1
0000F92C =00000048                  id_BossBall:		equ ((ptr_BossBall-Obj_Index)/4)+1		; $48
0000F92C =00000049                  id_WaterSound:		equ ((ptr_WaterSound-Obj_Index)/4)+1
0000F92C =0000004A                  id_VanishSonic:		equ ((ptr_VanishSonic-Obj_Index)/4)+1
0000F92C =0000004B                  id_GiantRing:		equ ((ptr_GiantRing-Obj_Index)/4)+1
0000F92C =0000004C                  id_GeyserMaker:		equ ((ptr_GeyserMaker-Obj_Index)/4)+1
0000F92C =0000004D                  id_LavaGeyser:		equ ((ptr_LavaGeyser-Obj_Index)/4)+1
0000F92C =0000004E                  id_SpShieldItem:		equ ((ptr_SpShieldItem-Obj_Index)/4)+1
0000F92C =0000004F                  id_Obj4F:		equ ((ptr_Obj4F-Obj_Index)/4)+1
0000F92C =00000050                  id_Yadrin:		equ ((ptr_Yadrin-Obj_Index)/4)+1		; $50
0000F92C =00000051                  id_SmashBlock:		equ ((ptr_SmashBlock-Obj_Index)/4)+1
0000F92C =00000052                  id_MovingBlock:		equ ((ptr_MovingBlock-Obj_Index)/4)+1
0000F92C =00000053                  id_CollapseFloor:	equ ((ptr_CollapseFloor-Obj_Index)/4)+1
0000F92C =00000054                  id_LavaTag:		equ ((ptr_LavaTag-Obj_Index)/4)+1
0000F92C =00000055                  id_Basaran:		equ ((ptr_Basaran-Obj_Index)/4)+1
0000F92C =00000056                  id_FloatingBlock:	equ ((ptr_FloatingBlock-Obj_Index)/4)+1
0000F92C =00000057                  id_SpikeBall:		equ ((ptr_SpikeBall-Obj_Index)/4)+1
0000F92C =00000058                  id_BigSpikeBall:	equ ((ptr_BigSpikeBall-Obj_Index)/4)+1		; $58
0000F92C =00000059                  id_Elevator:		equ ((ptr_Elevator-Obj_Index)/4)+1
0000F92C =0000005A                  id_CirclingPlatform:	equ ((ptr_CirclingPlatform-Obj_Index)/4)+1
0000F92C =0000005B                  id_Staircase:		equ ((ptr_Staircase-Obj_Index)/4)+1
0000F92C =0000005C                  id_Pylon:		equ ((ptr_Pylon-Obj_Index)/4)+1
0000F92C =0000005D                  id_Fan:			equ ((ptr_Fan-Obj_Index)/4)+1
0000F92C =0000005E                  id_Seesaw:		equ ((ptr_Seesaw-Obj_Index)/4)+1
0000F92C =0000005F                  id_Bomb:		equ ((ptr_Bomb-Obj_Index)/4)+1
0000F92C =00000060                  id_Orbinaut:		equ ((ptr_Orbinaut-Obj_Index)/4)+1		; $60
0000F92C =00000061                  id_LabyrinthBlock:	equ ((ptr_LabyrinthBlock-Obj_Index)/4)+1
0000F92C =00000062                  id_Gargoyle:		equ ((ptr_Gargoyle-Obj_Index)/4)+1
0000F92C =00000063                  id_LabyrinthConvey:	equ ((ptr_LabyrinthConvey-Obj_Index)/4)+1
0000F92C =00000064                  id_Bubble:		equ ((ptr_Bubble-Obj_Index)/4)+1
0000F92C =00000065                  id_Waterfall:		equ ((ptr_Waterfall-Obj_Index)/4)+1
0000F92C =00000066                  id_Junction:		equ ((ptr_Junction-Obj_Index)/4)+1
0000F92C =00000067                  id_RunningDisc:		equ ((ptr_RunningDisc-Obj_Index)/4)+1
0000F92C =00000068                  id_Conveyor:		equ ((ptr_Conveyor-Obj_Index)/4)+1		; $68
0000F92C =00000069                  id_SpinPlatform:	equ ((ptr_SpinPlatform-Obj_Index)/4)+1
0000F92C =0000006A                  id_Saws:		equ ((ptr_Saws-Obj_Index)/4)+1
0000F92C =0000006B                  id_ScrapStomp:		equ ((ptr_ScrapStomp-Obj_Index)/4)+1
0000F92C =0000006C                  id_VanishPlatform:	equ ((ptr_VanishPlatform-Obj_Index)/4)+1
0000F92C =0000006D                  id_Flamethrower:	equ ((ptr_Flamethrower-Obj_Index)/4)+1
0000F92C =0000006E                  id_Electro:		equ ((ptr_Electro-Obj_Index)/4)+1
0000F92C =0000006F                  id_SpinConvey:		equ ((ptr_SpinConvey-Obj_Index)/4)+1
0000F92C =00000070                  id_Girder:		equ ((ptr_Girder-Obj_Index)/4)+1		; $70
0000F92C =00000071                  id_Invisibarrier:	equ ((ptr_Invisibarrier-Obj_Index)/4)+1
0000F92C =00000072                  id_Teleport:		equ ((ptr_Teleport-Obj_Index)/4)+1
0000F92C =00000073                  id_BossMarble:		equ ((ptr_BossMarble-Obj_Index)/4)+1
0000F92C =00000074                  id_BossFire:		equ ((ptr_BossFire-Obj_Index)/4)+1
0000F92C =00000075                  id_BossSpringYard:	equ ((ptr_BossSpringYard-Obj_Index)/4)+1
0000F92C =00000076                  id_BossBlock:		equ ((ptr_BossBlock-Obj_Index)/4)+1
0000F92C =00000077                  id_BossLabyrinth:	equ ((ptr_BossLabyrinth-Obj_Index)/4)+1
0000F92C =00000078                  id_Caterkiller:		equ ((ptr_Caterkiller-Obj_Index)/4)+1		; $78
0000F92C =00000079                  id_Lamppost:		equ ((ptr_Lamppost-Obj_Index)/4)+1
0000F92C =0000007A                  id_BossStarLight:	equ ((ptr_BossStarLight-Obj_Index)/4)+1
0000F92C =0000007B                  id_BossSpikeball:	equ ((ptr_BossSpikeball-Obj_Index)/4)+1
0000F92C =0000007C                  id_RingFlash:		equ ((ptr_RingFlash-Obj_Index)/4)+1
0000F92C =0000007D                  id_HiddenBonus:		equ ((ptr_HiddenBonus-Obj_Index)/4)+1
0000F92C =0000007E                  id_SSResult:		equ ((ptr_SSResult-Obj_Index)/4)+1
0000F92C =0000007F                  id_SSRChaos:		equ ((ptr_SSRChaos-Obj_Index)/4)+1
0000F92C =00000080                  id_ContScrItem:		equ ((ptr_ContScrItem-Obj_Index)/4)+1		; $80
0000F92C =00000081                  id_ContSonic:		equ ((ptr_ContSonic-Obj_Index)/4)+1
0000F92C =00000082                  id_ScrapEggman:		equ ((ptr_ScrapEggman-Obj_Index)/4)+1
0000F92C =00000083                  id_FalseFloor:		equ ((ptr_FalseFloor-Obj_Index)/4)+1
0000F92C =00000084                  id_EggmanCylinder:	equ ((ptr_EggmanCylinder-Obj_Index)/4)+1
0000F92C =00000085                  id_BossFinal:		equ ((ptr_BossFinal-Obj_Index)/4)+1
0000F92C =00000086                  id_BossPlasma:		equ ((ptr_BossPlasma-Obj_Index)/4)+1
0000F92C =00000087                  id_EndSonic:		equ ((ptr_EndSonic-Obj_Index)/4)+1
0000F92C =00000088                  id_EndChaos:		equ ((ptr_EndChaos-Obj_Index)/4)+1		; $88
0000F92C =00000089                  id_EndSTH:		equ ((ptr_EndSTH-Obj_Index)/4)+1
0000F92C =0000008A                  id_CreditsText:		equ ((ptr_CreditsText-Obj_Index)/4)+1
0000F92C =0000008B                  id_EndEggman:		equ ((ptr_EndEggman-Obj_Index)/4)+1
0000F92C =0000008C                  id_TryChaos:		equ ((ptr_TryChaos-Obj_Index)/4)+1
0000F92C =0000008C                  id_TryChaos:		equ ((ptr_TryChaos-Obj_Index)/4)+1
0000F92C                            
0000F92C                            		include	"_incObj\sub ObjectFall.asm"
0000F92C                            ; ---------------------------------------------------------------------------
0000F92C                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000F92C                            ; ---------------------------------------------------------------------------
0000F92C                            
0000F92C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F92C                            
0000F92C                            
0000F92C                            ObjectFall:
0000F92C 0C28 0050 0012             		cmpi.b	#$50,obVelY(a0)
0000F932 6700                       		beq.s	@donothing
0000F934 3028 0010                  		move.w	obVelX(a0),d0
0000F938 48C0                       		ext.l	d0
0000F93A E188                       		lsl.l	#8,d0
0000F93C D1A8 0008                  		add.l	d0,obX(a0)
0000F940 0C68 0FC8 0012                     cmp.w   #$FC8,obVelY(a0)   ; check if Sonic's Y speed is lower than this value
0000F946 6F00                               ble.s   @skipline       ; if yes, branch
0000F948 317C 0FC8 0012                     move.w  #$FC8,obVelY(a0)    ; alter Sonic's Y speed
0000F94E                                @skipline:		
0000F94E 3028 0012                  		move.w	obVelY(a0),d0
0000F952 0668 0038 0012             		addi.w	#$38,obVelY(a0)	; increase vertical speed
0000F958 48C0                       		ext.l	d0
0000F95A E188                       		lsl.l	#8,d0
0000F95C D1A8 000C                  		add.l	d0,obY(a0)
0000F960 4E75                       		rts	
0000F962                            	
0000F962                            	@donothing:
0000F962 4E75                       		rts
0000F964                            
0000F964                            ; End of function ObjectFall
0000F964                            ; End of function ObjectFall
0000F964                            		include	"_incObj\sub SpeedToPos.asm"
0000F964                            ; ---------------------------------------------------------------------------
0000F964                            ; Subroutine translating object	speed to update	object position
0000F964                            ; ---------------------------------------------------------------------------
0000F964                            
0000F964                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F964                            
0000F964                            
0000F964                            SpeedToPos:
0000F964 4CA8 0005 0010             		movem.w	obVelX(a0),d0/d2
0000F96A E188                       		lsl.l	#8,d0
0000F96C D1A8 0008                  		add.l	d0,obX(a0)
0000F970 E18A                       		lsl.l	#8,d2
0000F972 D5A8 000C                  		add.l	d2,obY(a0)
0000F976 4E75                       		rts
0000F978                            ; End of function SpeedToPos
0000F978                            ; End of function SpeedToPos
0000F978                            		include	"_incObj\sub DisplaySprite.asm"
0000F978                            ; ---------------------------------------------------------------------------
0000F978                            ; Subroutine to    display    a sprite/object, when a0 is the    object RAM
0000F978                            ; ---------------------------------------------------------------------------
0000F978                            
0000F978                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
0000F978                            
0000F978                            
0000F978                            DisplaySprite:
0000F978 43F8 AC00                          lea    (v_spritequeue).w,a1
0000F97C D2E8 0018                          adda.w  obpriority(a0),a1 ; get sprite priority
0000F980 0C51 007E                          cmpi.w    #$7E,(a1)    ; is this part of the queue full?
0000F984 6400                               bcc.s    DSpr_Full    ; if yes, branch
0000F986 5451                               addq.w    #2,(a1)        ; increment sprite count
0000F988 D2D1                               adda.w    (a1),a1        ; jump to empty position
0000F98A 3288                               move.w    a0,(a1)        ; insert RAM address for object
0000F98C                            
0000F98C                                DSpr_Full:
0000F98C 4E75                               rts    
0000F98E                            
0000F98E                            ; End of function DisplaySprite
0000F98E                            
0000F98E                            
0000F98E                            ; ---------------------------------------------------------------------------
0000F98E                            ; Subroutine to    display    a 2nd sprite/object, when a1 is    the object RAM
0000F98E                            ; ---------------------------------------------------------------------------
0000F98E                            
0000F98E                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
0000F98E                            
0000F98E                            
0000F98E                            DisplaySprite1:
0000F98E 45F8 AC00                          lea    (v_spritequeue).w,a2
0000F992 D4E9 0018                          adda.w  obpriority(a1),a2
0000F996 0C52 007E                          cmpi.w    #$7E,(a2)
0000F99A 6400                               bcc.s    DSpr1_Full
0000F99C 5452                               addq.w    #2,(a2)
0000F99E D4D2                               adda.w    (a2),a2
0000F9A0 3489                               move.w    a1,(a2)
0000F9A2                            
0000F9A2                                DSpr1_Full:
0000F9A2 4E75                               rts    
0000F9A4                            
0000F9A4                            ; End of function DisplaySprite1
0000F9A4                            
0000F9A4                            ; ---------------------------------------------------------------------------
0000F9A4                            ; Subroutine to display a sprite/object, when a0 is the object RAM
0000F9A4                            ; and d0 is already (priority/2)&$380
0000F9A4                            ; ---------------------------------------------------------------------------
0000F9A4                            
0000F9A4                            ; loc_16530:
0000F9A4                            DisplaySprite2:
0000F9A4 43F8 AC00                      lea    (v_spritequeue).w,a1
0000F9A8 D2C0                           adda.w    d0,a1
0000F9AA 0C51 007E                      cmpi.w    #$7E,(a1)
0000F9AE 6400                           bhs.s    return_16542
0000F9B0 5451                           addq.w    #2,(a1)
0000F9B2 D2D1                           adda.w    (a1),a1
0000F9B4 3288                           move.w    a0,(a1)
0000F9B6                            
0000F9B6                            return_16542:
0000F9B6 4E75                           rts
0000F9B6 4E75                           rts
0000F9B8                            		include	"_incObj\sub DeleteObject.asm"
0000F9B8                            ; ---------------------------------------------------------------------------
0000F9B8                            ; Subroutine to	delete an object
0000F9B8                            ; ---------------------------------------------------------------------------
0000F9B8                            
0000F9B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F9B8                            
0000F9B8                            
0000F9B8                            DeleteObject:
0000F9B8 2248                       		movea.l	a0,a1		; move object RAM address to (a1)
0000F9BA                            
0000F9BA                            DeleteChild:				; child objects are already in (a1)
0000F9BA 7200                       		moveq	#0,d1
0000F9BC 700F                       		moveq	#$F,d0
0000F9BE                            
0000F9BE                            	DelObj_Loop:
0000F9BE 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000F9C0 51C8 FFFC                  		dbf	d0,DelObj_Loop	; repeat for length of object RAM
0000F9C4 4E75                       		rts	
0000F9C6                            
0000F9C6                            ; End of function DeleteObject
0000F9C6                            ; End of function DeleteObject
0000F9C6                            
0000F9C6                            ; ===========================================================================
0000F9C6 0000 0000                  BldSpr_ScrPos:	dc.l 0				; blank
0000F9CA 00FF F700                  		dc.l v_screenposx&$FFFFFF	; main screen x-position
0000F9CE 00FF F708                  		dc.l v_bgscreenposx&$FFFFFF	; background x-position	1
0000F9D2 00FF F718                  		dc.l v_bg3screenposx&$FFFFFF	; background x-position	2
0000F9D6                            ; ---------------------------------------------------------------------------
0000F9D6                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000F9D6                            ; ---------------------------------------------------------------------------
0000F9D6                            
0000F9D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F9D6                            
0000F9D6                            
0000F9D6                            BuildSprites:
0000F9D6 45F8 F800                  		lea	(v_spritetablebuffer).w,a2 ; set address for sprite table
0000F9DA 7A00                       		moveq	#0,d5
0000F9DC 49F8 AC00                  		lea	(v_spritequeue).w,a4
0000F9E0 7E07                       		moveq	#7,d7
0000F9E2                            
0000F9E2                            	@priorityLoop:
0000F9E2 4A54                       		tst.w	(a4)	; are there objects left to draw?
0000F9E4 6700 0000                  		beq.w	@nextPriority	; if not, branch
0000F9E8 7C02                       		moveq	#2,d6
0000F9EA                            
0000F9EA                            	@objectLoop:
0000F9EA 3074 6000                  		movea.w	(a4,d6.w),a0	; load object ID
0000F9EE 4A10                       		tst.b	(a0)		; if null, branch
0000F9F0 6700 0000                  		beq.w	@skipObject
0000F9F4 08A8 0007 0001             		bclr	#7,obRender(a0)		; set as not visible
0000F9FA                            
0000F9FA 1028 0001                  		move.b	obRender(a0),d0
0000F9FE 1800                       		move.b	d0,d4
0000FA00 0240 000C                  		andi.w	#$C,d0		; get drawing coordinates
0000FA04 6700                       		beq.s	@screenCoords	; branch if 0 (screen coordinates)
0000FA06 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000FA0A                            	; check object bounds
0000FA0A 7000                       		moveq	#0,d0
0000FA0C 1028 0014                  		move.b	obActWid(a0),d0
0000FA10 3628 0008                  		move.w	obX(a0),d3
0000FA14 9651                       		sub.w	(a1),d3
0000FA16 3203                       		move.w	d3,d1
0000FA18 D240                       		add.w	d0,d1
0000FA1A 6B00 0000                  		bmi.w	@skipObject	; left edge out of bounds
0000FA1E 3203                       		move.w	d3,d1
0000FA20 9240                       		sub.w	d0,d1
0000FA22 0C41 0140                  		cmpi.w	#320,d1
0000FA26 6C00                       		bge.s	@skipObject	; right edge out of bounds
0000FA28 0643 0080                  		addi.w	#128,d3		; VDP sprites start at 128px
0000FA2C                            
0000FA2C 0804 0004                  		btst	#4,d4		; is assume height flag on?
0000FA30 6700                       		beq.s	@assumeHeight	; if yes, branch
0000FA32 7000                       		moveq	#0,d0
0000FA34 1028 0016                  		move.b	obHeight(a0),d0
0000FA38 3428 000C                  		move.w	obY(a0),d2
0000FA3C 9469 0004                  		sub.w	4(a1),d2
0000FA40 3202                       		move.w	d2,d1
0000FA42 D240                       		add.w	d0,d1
0000FA44 6B00                       		bmi.s	@skipObject	; top edge out of bounds
0000FA46 3202                       		move.w	d2,d1
0000FA48 9240                       		sub.w	d0,d1
0000FA4A 0C41 00E0                  		cmpi.w	#224,d1
0000FA4E 6C00                       		bge.s	@skipObject
0000FA50 0642 0080                  		addi.w	#128,d2		; VDP sprites start at 128px
0000FA54 6000                       		bra.s	@drawObject
0000FA56                            ; ===========================================================================
0000FA56                            
0000FA56                            	@screenCoords:
0000FA56 3428 000A                  		move.w	$A(a0),d2	; special variable for screen Y
0000FA5A 3628 0008                  		move.w	obX(a0),d3
0000FA5E 6000                       		bra.s	@drawObject
0000FA60                            ; ===========================================================================
0000FA60                            
0000FA60                            	@assumeHeight:
0000FA60 3428 000C                  		move.w	obY(a0),d2
0000FA64 9469 0004                  		sub.w	obMap(a1),d2
0000FA68 0642 0080                  		addi.w	#$80,d2
0000FA6C 0C42 0060                  		cmpi.w	#$60,d2
0000FA70 6500                       		blo.s	@skipObject
0000FA72 0C42 0180                  		cmpi.w	#$180,d2
0000FA76 6400                       		bhs.s	@skipObject
0000FA78                            
0000FA78                            	@drawObject:
0000FA78 2268 0004                  		movea.l	obMap(a0),a1
0000FA7C 7200                       		moveq	#0,d1
0000FA7E 0804 0005                  		btst	#5,d4
0000FA82 6600                       		bne.s	@drawFrame
0000FA84 1228 001A                  		move.b	$1A(a0),d1
0000FA88 D241                       		add.w	d1,d1					; MJ: changed from byte to word (we want more than 7F sprites)
0000FA8A D2F1 1000                  		adda.w	(a1,d1.w),a1
0000FA8E 7200                       		moveq	#$00,d1					; MJ: clear d1 (because of our byte to word change)
0000FA90 1219                       		move.b	(a1)+,d1
0000FA92 5301                       		subq.b	#1,d1
0000FA94 6B00                       		bmi.s	@setVisible
0000FA96                            
0000FA96                            	@drawFrame:
0000FA96 6100 0000                  		bsr.w	BuildSpr_Draw	; write data from sprite pieces to buffer
0000FA9A                            
0000FA9A                            	@setVisible:
0000FA9A 08E8 0007 0001             		bset	#7,obRender(a0)		; set object as visible
0000FAA0                            
0000FAA0                            	@skipObject:
0000FAA0 5446                       		addq.w	#2,d6
0000FAA2 5554                       		subq.w	#2,(a4)			; number of objects left
0000FAA4 6600 FF44                  		bne.w	@objectLoop
0000FAA8                            
0000FAA8                            	@nextPriority:
0000FAA8 49EC 0080                  		lea	$80(a4),a4
0000FAAC 51CF FF34                  		dbf	d7,@priorityLoop
0000FAB0 11C5 F62C                  		move.b	d5,(v_spritecount).w
0000FAB4 0C05 0050                  		cmpi.b	#$50,d5
0000FAB8 6700                       		beq.s	@spriteLimit
0000FABA 24BC 0000 0000             		move.l	#0,(a2)
0000FAC0 4E75                       		rts	
0000FAC2                            ; ===========================================================================
0000FAC2                            
0000FAC2                            	@spriteLimit:
0000FAC2 157C 0000 FFFB             		move.b	#0,-5(a2)	; set last sprite link
0000FAC8 4E75                       		rts	
0000FACA                            ; End of function BuildSprites
0000FACA                            
0000FACA                            
0000FACA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FACA                            
0000FACA                            
0000FACA                            BuildSpr_Draw:
0000FACA 3668 0002                  		movea.w	obGfx(a0),a3
0000FACE 0804 0000                  		btst	#0,d4
0000FAD2 6600                       		bne.s	BuildSpr_FlipX
0000FAD4 0804 0001                  		btst	#1,d4
0000FAD8 6600 0000                  		bne.w	BuildSpr_FlipY
0000FADC                            ; End of function BuildSpr_Draw
0000FADC                            
0000FADC                            
0000FADC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FADC                            
0000FADC                            
0000FADC                            BuildSpr_Normal:
0000FADC 0C05 0050                  		cmpi.b	#$50,d5		; check sprite limit
0000FAE0 6700                       		beq.s	@return
0000FAE2 1019                       		move.b	(a1)+,d0	; get y-offset
0000FAE4 4880                       		ext.w	d0
0000FAE6 D042                       		add.w	d2,d0		; add y-position
0000FAE8 34C0                       		move.w	d0,(a2)+	; write to buffer
0000FAEA 14D9                       		move.b	(a1)+,(a2)+	; write sprite size
0000FAEC 5205                       		addq.b	#1,d5		; increase sprite counter
0000FAEE 14C5                       		move.b	d5,(a2)+	; set as sprite link
0000FAF0 1019                       		move.b	(a1)+,d0	; get art tile
0000FAF2 E148                       		lsl.w	#8,d0
0000FAF4 1019                       		move.b	(a1)+,d0
0000FAF6 D04B                       		add.w	a3,d0		; add art tile offset
0000FAF8 34C0                       		move.w	d0,(a2)+	; write to buffer
0000FAFA 1019                       		move.b	(a1)+,d0	; get x-offset
0000FAFC 4880                       		ext.w	d0
0000FAFE D043                       		add.w	d3,d0		; add x-position
0000FB00 0240 01FF                  		andi.w	#$1FF,d0	; keep within 512px
0000FB04 6600                       		bne.s	@writeX
0000FB06 5240                       		addq.w	#1,d0
0000FB08                            
0000FB08                            	@writeX:
0000FB08 34C0                       		move.w	d0,(a2)+	; write to buffer
0000FB0A 51C9 FFD0                  		dbf	d1,BuildSpr_Normal	; process next sprite piece
0000FB0E                            
0000FB0E                            	@return:
0000FB0E 4E75                       		rts	
0000FB10                            ; End of function BuildSpr_Normal
0000FB10                            
0000FB10                            ; ===========================================================================
0000FB10                            
0000FB10                            BuildSpr_FlipX:
0000FB10 0804 0001                  		btst	#1,d4		; is object also y-flipped?
0000FB14 6600 0000                  		bne.w	BuildSpr_FlipXY	; if yes, branch
0000FB18                            
0000FB18                            	@loop:
0000FB18 0C05 0050                  		cmpi.b	#$50,d5		; check sprite limit
0000FB1C 6700                       		beq.s	@return
0000FB1E 1019                       		move.b	(a1)+,d0	; y position
0000FB20 4880                       		ext.w	d0
0000FB22 D042                       		add.w	d2,d0
0000FB24 34C0                       		move.w	d0,(a2)+
0000FB26 1819                       		move.b	(a1)+,d4	; size
0000FB28 14C4                       		move.b	d4,(a2)+	
0000FB2A 5205                       		addq.b	#1,d5		; link
0000FB2C 14C5                       		move.b	d5,(a2)+
0000FB2E 1019                       		move.b	(a1)+,d0	; art tile
0000FB30 E148                       		lsl.w	#8,d0
0000FB32 1019                       		move.b	(a1)+,d0	
0000FB34 D04B                       		add.w	a3,d0
0000FB36 0A40 0800                  		eori.w	#$800,d0	; toggle flip-x in VDP
0000FB3A 34C0                       		move.w	d0,(a2)+	; write to buffer
0000FB3C 1019                       		move.b	(a1)+,d0	; get x-offset
0000FB3E 4880                       		ext.w	d0
0000FB40 4440                       		neg.w	d0			; negate it
0000FB42 D804                       		add.b	d4,d4		; calculate flipped position by size
0000FB44 0244 0018                  		andi.w	#$18,d4
0000FB48 5044                       		addq.w	#8,d4
0000FB4A 9044                       		sub.w	d4,d0
0000FB4C D043                       		add.w	d3,d0
0000FB4E 0240 01FF                  		andi.w	#$1FF,d0	; keep within 512px
0000FB52 6600                       		bne.s	@writeX
0000FB54 5240                       		addq.w	#1,d0
0000FB56                            
0000FB56                            	@writeX:
0000FB56 34C0                       		move.w	d0,(a2)+	; write to buffer
0000FB58 51C9 FFBE                  		dbf	d1,@loop		; process next sprite piece
0000FB5C                            
0000FB5C                            	@return:
0000FB5C 4E75                       		rts	
0000FB5E                            ; ===========================================================================
0000FB5E                            
0000FB5E                            BuildSpr_FlipY:
0000FB5E 0C05 0050                  		cmpi.b	#$50,d5		; check sprite limit
0000FB62 6700                       		beq.s	@return
0000FB64 1019                       		move.b	(a1)+,d0	; get y-offset
0000FB66 1811                       		move.b	(a1),d4		; get size
0000FB68 4880                       		ext.w	d0
0000FB6A 4440                       		neg.w	d0		; negate y-offset
0000FB6C E70C                       		lsl.b	#3,d4	; calculate flip offset
0000FB6E 0244 0018                  		andi.w	#$18,d4
0000FB72 5044                       		addq.w	#8,d4
0000FB74 9044                       		sub.w	d4,d0
0000FB76 D042                       		add.w	d2,d0	; add y-position
0000FB78 34C0                       		move.w	d0,(a2)+	; write to buffer
0000FB7A 14D9                       		move.b	(a1)+,(a2)+	; size
0000FB7C 5205                       		addq.b	#1,d5
0000FB7E 14C5                       		move.b	d5,(a2)+	; link
0000FB80 1019                       		move.b	(a1)+,d0	; art tile
0000FB82 E148                       		lsl.w	#8,d0
0000FB84 1019                       		move.b	(a1)+,d0
0000FB86 D04B                       		add.w	a3,d0
0000FB88 0A40 1000                  		eori.w	#$1000,d0	; toggle flip-y in VDP
0000FB8C 34C0                       		move.w	d0,(a2)+
0000FB8E 1019                       		move.b	(a1)+,d0	; x-position
0000FB90 4880                       		ext.w	d0
0000FB92 D043                       		add.w	d3,d0
0000FB94 0240 01FF                  		andi.w	#$1FF,d0
0000FB98 6600                       		bne.s	@writeX
0000FB9A 5240                       		addq.w	#1,d0
0000FB9C                            
0000FB9C                            	@writeX:
0000FB9C 34C0                       		move.w	d0,(a2)+	; write to buffer
0000FB9E 51C9 FFBE                  		dbf	d1,BuildSpr_FlipY	; process next sprite piece
0000FBA2                            
0000FBA2                            	@return:
0000FBA2 4E75                       		rts	
0000FBA4                            ; ===========================================================================
0000FBA4                            
0000FBA4                            BuildSpr_FlipXY:
0000FBA4 0C05 0050                  		cmpi.b	#$50,d5		; check sprite limit
0000FBA8 6700                       		beq.s	@return
0000FBAA 1019                       		move.b	(a1)+,d0	; calculated flipped y
0000FBAC 1811                       		move.b	(a1),d4
0000FBAE 4880                       		ext.w	d0
0000FBB0 4440                       		neg.w	d0
0000FBB2 E70C                       		lsl.b	#3,d4
0000FBB4 0244 0018                  		andi.w	#$18,d4
0000FBB8 5044                       		addq.w	#8,d4
0000FBBA 9044                       		sub.w	d4,d0
0000FBBC D042                       		add.w	d2,d0
0000FBBE 34C0                       		move.w	d0,(a2)+	; write to buffer
0000FBC0 1819                       		move.b	(a1)+,d4	; size
0000FBC2 14C4                       		move.b	d4,(a2)+	; link
0000FBC4 5205                       		addq.b	#1,d5
0000FBC6 14C5                       		move.b	d5,(a2)+	; art tile
0000FBC8 1019                       		move.b	(a1)+,d0
0000FBCA E148                       		lsl.w	#8,d0
0000FBCC 1019                       		move.b	(a1)+,d0
0000FBCE D04B                       		add.w	a3,d0
0000FBD0 0A40 1800                  		eori.w	#$1800,d0	; toggle flip-x/y in VDP
0000FBD4 34C0                       		move.w	d0,(a2)+
0000FBD6 1019                       		move.b	(a1)+,d0	; calculate flipped x
0000FBD8 4880                       		ext.w	d0
0000FBDA 4440                       		neg.w	d0
0000FBDC D804                       		add.b	d4,d4
0000FBDE 0244 0018                  		andi.w	#$18,d4
0000FBE2 5044                       		addq.w	#8,d4
0000FBE4 9044                       		sub.w	d4,d0
0000FBE6 D043                       		add.w	d3,d0
0000FBE8 0240 01FF                  		andi.w	#$1FF,d0
0000FBEC 6600                       		bne.s	@writeX
0000FBEE 5240                       		addq.w	#1,d0
0000FBF0                            
0000FBF0                            	@writeX:
0000FBF0 34C0                       		move.w	d0,(a2)+	; write to buffer
0000FBF2 51C9 FFB0                  		dbf	d1,BuildSpr_FlipXY	; process next sprite piece
0000FBF6                            
0000FBF6                            	@return:
0000FBF6 4E75                       		rts	
0000FBF8                            
0000FBF8                            		include	"_incObj\sub ChkObjectVisible.asm"
0000FBF8                            ; ---------------------------------------------------------------------------
0000FBF8                            ; Subroutine to	check if an object is off screen
0000FBF8                            
0000FBF8                            ; output:
0000FBF8                            ;	d0 = flag set if object is off screen
0000FBF8                            ; ---------------------------------------------------------------------------
0000FBF8                            
0000FBF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FBF8                            
0000FBF8                            
0000FBF8                            ChkObjectVisible:
0000FBF8 3028 0008                  		move.w	obX(a0),d0	; get object x-position
0000FBFC 9078 F700                  		sub.w	(v_screenposx).w,d0 ; subtract screen x-position
0000FC00 6B00                       		bmi.s	@offscreen
0000FC02 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000FC06 6C00                       		bge.s	@offscreen	; if not, branch
0000FC08                            
0000FC08 3228 000C                  		move.w	obY(a0),d1	; get object y-position
0000FC0C 9278 F704                  		sub.w	(v_screenposy).w,d1 ; subtract screen y-position
0000FC10 6B00                       		bmi.s	@offscreen
0000FC12 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000FC16 6C00                       		bge.s	@offscreen	; if not, branch
0000FC18                            
0000FC18 7000                       		moveq	#0,d0		; set flag to 0
0000FC1A 4E75                       		rts	
0000FC1C                            
0000FC1C                            	@offscreen:
0000FC1C 7001                       		moveq	#1,d0		; set flag to 1
0000FC1E 4E75                       		rts	
0000FC20                            ; End of function ChkObjectVisible
0000FC20                            
0000FC20                            ; ---------------------------------------------------------------------------
0000FC20                            ; Subroutine to	check if an object is off screen
0000FC20                            ; More precise than above subroutine, taking width into account
0000FC20                            
0000FC20                            ; output:
0000FC20                            ;	d0 = flag set if object is off screen
0000FC20                            ; ---------------------------------------------------------------------------
0000FC20                            
0000FC20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FC20                            
0000FC20                            
0000FC20                            ChkPartiallyVisible:
0000FC20 7200                       		moveq	#0,d1
0000FC22 1228 0014                  		move.b	obActWid(a0),d1
0000FC26 3028 0008                  		move.w	obX(a0),d0	; get object x-position
0000FC2A 9078 F700                  		sub.w	(v_screenposx).w,d0 ; subtract screen x-position
0000FC2E D041                       		add.w	d1,d0		; add object width
0000FC30 6B00                       		bmi.s	@offscreen2
0000FC32 D241                       		add.w	d1,d1
0000FC34 9041                       		sub.w	d1,d0
0000FC36 0C40 0140                  		cmpi.w	#320,d0
0000FC3A 6C00                       		bge.s	@offscreen2
0000FC3C                            
0000FC3C 3228 000C                  		move.w	obY(a0),d1
0000FC40 9278 F704                  		sub.w	(v_screenposy).w,d1
0000FC44 6B00                       		bmi.s	@offscreen2
0000FC46 0C41 00E0                  		cmpi.w	#224,d1
0000FC4A 6C00                       		bge.s	@offscreen2
0000FC4C                            
0000FC4C 7000                       		moveq	#0,d0
0000FC4E 4E75                       		rts	
0000FC50                            
0000FC50                            	@offscreen2:
0000FC50 7001                       		moveq	#1,d0
0000FC52 4E75                       		rts	
0000FC54                            ; End of function ChkPartiallyVisible
0000FC54                            ; End of function ChkPartiallyVisible
0000FC54                            
0000FC54                            ; ---------------------------------------------------------------------------
0000FC54                            ; Subroutine to	load a level's objects
0000FC54                            ; ---------------------------------------------------------------------------
0000FC54                            
0000FC54                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FC54                            
0000FC54                            
0000FC54                            ObjPosLoad:
0000FC54 7000                       		moveq	#0,d0
0000FC56 1038 F76C                  		move.b	(v_opl_routine).w,d0
0000FC5A 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000FC5E 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000FC62                            ; End of function ObjPosLoad
0000FC62                            
0000FC62                            ; ===========================================================================
0000FC62 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000FC64 0000                       		dc.w OPL_Next-OPL_Index
0000FC66                            ; ===========================================================================
0000FC66                            
0000FC66                            OPL_Main:
0000FC66 5438 F76C                  		addq.b	#2,(v_opl_routine).w
0000FC6A 3038 FE10                  		move.w	(v_zone).w,d0
0000FC6E ED08                       		lsl.b	#6,d0
0000FC70 E848                       		lsr.w	#4,d0
0000FC72 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000FC78 2248                       		movea.l	a0,a1
0000FC7A D0F0 0000                  		adda.w	(a0,d0.w),a0
0000FC7E 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FC82 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FC86 D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000FC8A 21C9 F778                  		move.l	a1,(v_opl_data+8).w
0000FC8E 21C9 F77C                  		move.l	a1,(v_opl_data+$C).w
0000FC92 45F8 FC00                  		lea	(v_objstate).w,a2
0000FC96 34FC 0101                  		move.w	#$101,(a2)+
0000FC9A 303C 005E                  		move.w	#$5E,d0
0000FC9E                            
0000FC9E                            OPL_ClrList:
0000FC9E 429A                       		clr.l	(a2)+
0000FCA0 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000FCA4                            
0000FCA4 45F8 FC00                  		lea	(v_objstate).w,a2
0000FCA8 7400                       		moveq	#0,d2
0000FCAA 3C38 F700                  		move.w	(v_screenposx).w,d6
0000FCAE 0446 0080                  		subi.w	#$80,d6
0000FCB2 6400                       		bhs.s	loc_D93C
0000FCB4 7C00                       		moveq	#0,d6
0000FCB6                            
0000FCB6                            loc_D93C:
0000FCB6 0246 FF80                  		andi.w	#$FF80,d6
0000FCBA 2078 F770                  		movea.l	(v_opl_data).w,a0
0000FCBE                            
0000FCBE                            loc_D944:
0000FCBE BC50                       		cmp.w	(a0),d6
0000FCC0 6300                       		bls.s	loc_D956
0000FCC2 4A28 0004                  		tst.b	4(a0)
0000FCC6 6A00                       		bpl.s	loc_D952
0000FCC8 1412                       		move.b	(a2),d2
0000FCCA 5212                       		addq.b	#1,(a2)
0000FCCC                            
0000FCCC                            loc_D952:
0000FCCC 5C48                       		addq.w	#6,a0
0000FCCE 60EE                       		bra.s	loc_D944
0000FCD0                            ; ===========================================================================
0000FCD0                            
0000FCD0                            loc_D956:
0000FCD0 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FCD4 2078 F774                  		movea.l	(v_opl_data+4).w,a0
0000FCD8 0446 0080                  		subi.w	#$80,d6
0000FCDC 6500                       		blo.s	loc_D976
0000FCDE                            
0000FCDE                            loc_D964:
0000FCDE BC50                       		cmp.w	(a0),d6
0000FCE0 6300                       		bls.s	loc_D976
0000FCE2 4A28 0004                  		tst.b	4(a0)
0000FCE6 6A00                       		bpl.s	loc_D972
0000FCE8 522A 0001                  		addq.b	#1,1(a2)
0000FCEC                            
0000FCEC                            loc_D972:
0000FCEC 5C48                       		addq.w	#6,a0
0000FCEE 60EE                       		bra.s	loc_D964
0000FCF0                            ; ===========================================================================
0000FCF0                            
0000FCF0                            loc_D976:
0000FCF0 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FCF4 31FC FFFF F76E             		move.w	#-1,(v_opl_screen).w
0000FCFA                            
0000FCFA                            OPL_Next:
0000FCFA 45F8 FC00                  		lea	(v_objstate).w,a2
0000FCFE 7400                       		moveq	#0,d2
0000FD00 3C38 F700                  		move.w	(v_screenposx).w,d6
0000FD04 0246 FF80                  		andi.w	#$FF80,d6
0000FD08 BC78 F76E                  		cmp.w	(v_opl_screen).w,d6
0000FD0C 6700 0000                  		beq.w	locret_DA3A
0000FD10 6C00                       		bge.s	loc_D9F6
0000FD12 31C6 F76E                  		move.w	d6,(v_opl_screen).w
0000FD16 2078 F774                  		movea.l	(v_opl_data+4).w,a0
0000FD1A 0446 0080                  		subi.w	#$80,d6
0000FD1E 6500                       		blo.s	loc_D9D2
0000FD20                            
0000FD20                            loc_D9A6:
0000FD20 BC68 FFFA                  		cmp.w	-6(a0),d6
0000FD24 6C00                       		bge.s	loc_D9D2
0000FD26 5D48                       		subq.w	#6,a0
0000FD28 4A28 0004                  		tst.b	4(a0)
0000FD2C 6A00                       		bpl.s	loc_D9BC
0000FD2E 532A 0001                  		subq.b	#1,1(a2)
0000FD32 142A 0001                  		move.b	1(a2),d2
0000FD36                            
0000FD36                            loc_D9BC:
0000FD36 6100 0000                  		bsr.w	loc_DA3C
0000FD3A 6600                       		bne.s	loc_D9C6
0000FD3C 5D48                       		subq.w	#6,a0
0000FD3E 60E0                       		bra.s	loc_D9A6
0000FD40                            ; ===========================================================================
0000FD40                            
0000FD40                            loc_D9C6:
0000FD40 4A28 0004                  		tst.b	4(a0)
0000FD44 6A00                       		bpl.s	loc_D9D0
0000FD46 522A 0001                  		addq.b	#1,1(a2)
0000FD4A                            
0000FD4A                            loc_D9D0:
0000FD4A 5C48                       		addq.w	#6,a0
0000FD4C                            
0000FD4C                            loc_D9D2:
0000FD4C 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FD50 2078 F770                  		movea.l	(v_opl_data).w,a0
0000FD54 0646 0300                  		addi.w	#$300,d6
0000FD58                            
0000FD58                            loc_D9DE:
0000FD58 BC68 FFFA                  		cmp.w	-6(a0),d6
0000FD5C 6E00                       		bgt.s	loc_D9F0
0000FD5E 4A28 FFFE                  		tst.b	-2(a0)
0000FD62 6A00                       		bpl.s	loc_D9EC
0000FD64 5312                       		subq.b	#1,(a2)
0000FD66                            
0000FD66                            loc_D9EC:
0000FD66 5D48                       		subq.w	#6,a0
0000FD68 60EE                       		bra.s	loc_D9DE
0000FD6A                            ; ===========================================================================
0000FD6A                            
0000FD6A                            loc_D9F0:
0000FD6A 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FD6E 4E75                       		rts	
0000FD70                            ; ===========================================================================
0000FD70                            
0000FD70                            loc_D9F6:
0000FD70 31C6 F76E                  		move.w	d6,(v_opl_screen).w
0000FD74 2078 F770                  		movea.l	(v_opl_data).w,a0
0000FD78 0646 0280                  		addi.w	#$280,d6
0000FD7C                            
0000FD7C                            loc_DA02:
0000FD7C BC50                       		cmp.w	(a0),d6
0000FD7E 6300                       		bls.s	loc_DA16
0000FD80 4A28 0004                  		tst.b	4(a0)
0000FD84 6A00                       		bpl.s	loc_DA10
0000FD86 1412                       		move.b	(a2),d2
0000FD88 5212                       		addq.b	#1,(a2)
0000FD8A                            
0000FD8A                            loc_DA10:
0000FD8A 6100 0000                  		bsr.w	loc_DA3C
0000FD8E 67EC                       		beq.s	loc_DA02
0000FD90                            
0000FD90                            loc_DA16:
0000FD90 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FD94 2078 F774                  		movea.l	(v_opl_data+4).w,a0
0000FD98 0446 0300                  		subi.w	#$300,d6
0000FD9C 6500                       		blo.s	loc_DA36
0000FD9E                            
0000FD9E                            loc_DA24:
0000FD9E BC50                       		cmp.w	(a0),d6
0000FDA0 6300                       		bls.s	loc_DA36
0000FDA2 4A28 0004                  		tst.b	4(a0)
0000FDA6 6A00                       		bpl.s	loc_DA32
0000FDA8 522A 0001                  		addq.b	#1,1(a2)
0000FDAC                            
0000FDAC                            loc_DA32:
0000FDAC 5C48                       		addq.w	#6,a0
0000FDAE 60EE                       		bra.s	loc_DA24
0000FDB0                            ; ===========================================================================
0000FDB0                            
0000FDB0                            loc_DA36:
0000FDB0 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FDB4                            
0000FDB4                            locret_DA3A:
0000FDB4 4E75                       		rts	
0000FDB6                            ; ===========================================================================
0000FDB6                            
0000FDB6                            loc_DA3C:
0000FDB6 4A28 0004                  		tst.b	4(a0)
0000FDBA 6A00                       		bpl.s	OPL_MakeItem
0000FDBC 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000FDC2 6700                       		beq.s	OPL_MakeItem
0000FDC4 5C48                       		addq.w	#6,a0
0000FDC6 7000                       		moveq	#0,d0
0000FDC8 4E75                       		rts	
0000FDCA                            ; ===========================================================================
0000FDCA                            
0000FDCA                            OPL_MakeItem:
0000FDCA 6100 0000                  		bsr.w	FindFreeObj
0000FDCE 6600                       		bne.s	locret_DA8A
0000FDD0 3358 0008                  		move.w	(a0)+,obX(a1)
0000FDD4 3018                       		move.w	(a0)+,d0
0000FDD6 3200                       		move.w	d0,d1
0000FDD8 0240 0FFF                  		andi.w	#$FFF,d0
0000FDDC 3340 000C                  		move.w	d0,obY(a1)
0000FDE0 E559                       		rol.w	#2,d1
0000FDE2 0201 0003                  		andi.b	#3,d1
0000FDE6 1341 0001                  		move.b	d1,obRender(a1)
0000FDEA 1341 0022                  		move.b	d1,obStatus(a1)
0000FDEE 1018                       		move.b	(a0)+,d0
0000FDF0 6A00                       		bpl.s	loc_DA80
0000FDF2 0200 007F                  		andi.b	#$7F,d0
0000FDF6 1342 0023                  		move.b	d2,obRespawnNo(a1)
0000FDFA                            
0000FDFA                            loc_DA80:
0000FDFA 1280                       		move.b	d0,0(a1)
0000FDFC 1358 0028                  		move.b	(a0)+,obSubtype(a1)
0000FE00 7000                       		moveq	#0,d0
0000FE02                            
0000FE02                            locret_DA8A:
0000FE02 4E75                       		rts	
0000FE04                            
0000FE04                            		include	"_incObj\sub FindFreeObj.asm"
0000FE04                            ; ---------------------------------------------------------------------------
0000FE04                            ; Subroutine to find a free object space
0000FE04                            
0000FE04                            ; output:
0000FE04                            ;	a1 = free position in object RAM
0000FE04                            ; ---------------------------------------------------------------------------
0000FE04                            
0000FE04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FE04                            
0000FE04                            
0000FE04                            FindFreeObj:
0000FE04 43F8 D800                  		lea	(v_objspace+$800).w,a1 ; start address for object RAM
0000FE08 303C 005F                  		move.w	#$5F,d0
0000FE0C                            
0000FE0C                            	FFree_Loop:
0000FE0C 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000FE0E 6700                       		beq.s	FFree_Found	; if yes, branch
0000FE10 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000FE14 51C8 FFF6                  		dbf	d0,FFree_Loop	; repeat $5F times
0000FE18                            
0000FE18                            	FFree_Found:
0000FE18 4E75                       		rts	
0000FE1A                            
0000FE1A                            ; End of function FindFreeObj
0000FE1A                            
0000FE1A                            
0000FE1A                            ; ---------------------------------------------------------------------------
0000FE1A                            ; Subroutine to find a free object space AFTER the current one
0000FE1A                            
0000FE1A                            ; output:
0000FE1A                            ;	a1 = free position in object RAM
0000FE1A                            ; ---------------------------------------------------------------------------
0000FE1A                            
0000FE1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FE1A                            
0000FE1A                            
0000FE1A                            FindNextFreeObj:
0000FE1A 2248                       		movea.l	a0,a1
0000FE1C 303C F000                  		move.w	#$F000,d0
0000FE20 9048                       		sub.w	a0,d0
0000FE22 EC48                       		lsr.w	#6,d0
0000FE24 5340                       		subq.w	#1,d0
0000FE26 6500                       		bcs.s	NFree_Found
0000FE28                            
0000FE28                            	NFree_Loop:
0000FE28 4A11                       		tst.b	(a1)
0000FE2A 6700                       		beq.s	NFree_Found
0000FE2C 43E9 0040                  		lea	$40(a1),a1
0000FE30 51C8 FFF6                  		dbf	d0,NFree_Loop
0000FE34                            
0000FE34                            	NFree_Found:
0000FE34 4E75                       		rts	
0000FE36                            
0000FE36                            ; End of function FindNextFreeObj
0000FE36                            ; End of function FindNextFreeObj
0000FE36                            		include	"_incObj\41 Springs.asm"
0000FE36                            ; ---------------------------------------------------------------------------
0000FE36                            ; Object 41 - springs
0000FE36                            ; ---------------------------------------------------------------------------
0000FE36                            
0000FE36                            Springs:
0000FE36 7000                       		moveq	#0,d0
0000FE38 1028 0024                  		move.b	obRoutine(a0),d0
0000FE3C 323B 0000                  		move.w	Spring_Index(pc,d0.w),d1
0000FE40 4EBB 1000                  		jsr	Spring_Index(pc,d1.w)
0000FE44 6100 FB32                  		bsr.w	DisplaySprite
0000FE66 4E75                       		rts	
0000FE68                            ; ===========================================================================
0000FE68 0000                       Spring_Index:	dc.w Spring_Main-Spring_Index
0000FE6A 0000                       		dc.w Spring_Up-Spring_Index
0000FE6C 0000                       		dc.w Spring_AniUp-Spring_Index
0000FE6E 0000                       		dc.w Spring_ResetUp-Spring_Index
0000FE70 0000                       		dc.w Spring_LR-Spring_Index
0000FE72 0000                       		dc.w Spring_AniLR-Spring_Index
0000FE74 0000                       		dc.w Spring_ResetLR-Spring_Index
0000FE76 0000                       		dc.w Spring_Dwn-Spring_Index
0000FE78 0000                       		dc.w Spring_AniDwn-Spring_Index
0000FE7A 0000                       		dc.w Spring_ResetDwn-Spring_Index
0000FE7C                            
0000FE7C =00000030                  spring_pow:	equ $30			; power of current spring
0000FE7C                            
0000FE7C F000                       Spring_Powers:	dc.w -$1000		; power	of red spring
0000FE7E F600                       		dc.w -$A00		; power	of yellow spring
0000FE80                            ; ===========================================================================
0000FE80                            
0000FE80                            Spring_Main:	; Routine 0
0000FE80 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FE84 217C 0000 0000 0004        		move.l	#Map_Spring,obMap(a0)
0000FE8C 317C 0523 0002             		move.w	#$523,obGfx(a0)
0000FE92 0028 0004 0001             		ori.b	#4,obRender(a0)
0000FE98 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000FE9E 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000FEA4 1028 0028                  		move.b	obSubtype(a0),d0
0000FEA8 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000FEAC 6700                       		beq.s	Spring_NotLR	; if not, branch
0000FEAE                            
0000FEAE 117C 0008 0024             		move.b	#8,obRoutine(a0) ; use "Spring_LR" routine
0000FEB4 117C 0001 001C             		move.b	#1,obAnim(a0)
0000FEBA 117C 0003 001A             		move.b	#3,obFrame(a0)
0000FEC0 317C 0533 0002             		move.w	#$533,obGfx(a0)
0000FEC6 117C 0008 0014             		move.b	#8,obActWid(a0)
0000FECC                            
0000FECC                            	Spring_NotLR:
0000FECC 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000FED0 6700                       		beq.s	Spring_NotDwn	; if not, branch
0000FED2                            
0000FED2 117C 000E 0024             		move.b	#$E,obRoutine(a0) ; use "Spring_Dwn" routine
0000FED8 08E8 0001 0022             		bset	#1,obStatus(a0)
0000FEDE                            
0000FEDE                            	Spring_NotDwn:
0000FEDE 0800 0001                  		btst	#1,d0
0000FEE2 6700                       		beq.s	loc_DB72
0000FEE4 08E8 0005 0002             		bset	#5,obGfx(a0)
0000FEEA                            
0000FEEA                            loc_DB72:
0000FEEA 0240 000F                  		andi.w	#$F,d0
0000FEEE 317B 008C 0030             		move.w	Spring_Powers(pc,d0.w),spring_pow(a0)
0000FEF4 4E75                       		rts	
0000FEF6                            ; ===========================================================================
0000FEF6                            
0000FEF6                            Spring_Up:	; Routine 2
0000FEF6 323C 001B                  		move.w	#$1B,d1
0000FEFA 343C 0008                  		move.w	#8,d2
0000FEFE 363C 0010                  		move.w	#$10,d3
0000FF02 3828 0008                  		move.w	obX(a0),d4
0000FF06 6100 0000                  		bsr.w	SolidObject
0000FF0A 4A28 0025                  		tst.b	obSolid(a0)	; is Sonic on top of the spring?
0000FF0E 6600                       		bne.s	Spring_BounceUp	; if yes, branch
0000FF10 4E75                       		rts	
0000FF12                            ; ===========================================================================
0000FF12                            
0000FF12                            Spring_BounceUp:
0000FF12 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FF16 5069 000C                  		addq.w	#8,obY(a1)
0000FF1A 3368 0030 0012             		move.w	spring_pow(a0),obVelY(a1) ; move Sonic upwards
0000FF20 08E9 0001 0022             		bset	#1,obStatus(a1)
0000FF26 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000FF2C 137C 0000 001C             		move.b	#id_Spring,obAnim(a1) ; use "bouncing" animation
0000FF32 137C 0002 0024             		move.b	#2,obRoutine(a1)
0000FF38 08A8 0003 0022             		bclr	#3,obStatus(a0)
0000FF3E 4228 0025                  		clr.b	obSolid(a0)
0000FF4C                            
0000FF4C                            Spring_AniUp:	; Routine 4
0000FF4C 43F9 0000 0000             		lea	(Ani_Spring).l,a1
0000FF52 6000 CAD0                  		bra.w	AnimateSprite
0000FF56                            ; ===========================================================================
0000FF56                            
0000FF56                            Spring_ResetUp:	; Routine 6
0000FF56 117C 0001 001D             		move.b	#1,obNextAni(a0) ; reset animation
0000FF5C 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto "Spring_Up" routine
0000FF60 4E75                       		rts	
0000FF62                            ; ===========================================================================
0000FF62                            
0000FF62                            Spring_LR:	; Routine 8
0000FF62 323C 0013                  		move.w	#$13,d1
0000FF66 343C 000E                  		move.w	#$E,d2
0000FF6A 363C 000F                  		move.w	#$F,d3
0000FF6E 3828 0008                  		move.w	obX(a0),d4
0000FF72 6100 0000                  		bsr.w	SolidObject
0000FF76 0C28 0002 0024             		cmpi.b	#2,obRoutine(a0)
0000FF7C 6600                       		bne.s	loc_DC0C
0000FF7E 117C 0008 0024             		move.b	#8,obRoutine(a0)
0000FF84                            
0000FF84                            loc_DC0C:
0000FF84 0828 0005 0022             		btst	#5,obStatus(a0)
0000FF8A 6600                       		bne.s	Spring_BounceLR
0000FF8C 4E75                       		rts	
0000FF8E                            ; ===========================================================================
0000FF8E                            
0000FF8E                            Spring_BounceLR:
0000FF8E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FF92 3368 0030 0010             		move.w	spring_pow(a0),obVelX(a1) ; move Sonic to the left
0000FF98 5069 0008                  		addq.w	#8,obX(a1)
0000FF9C 0828 0000 0022             		btst	#0,obStatus(a0)	; is object flipped?
0000FFA2 6600                       		bne.s	Spring_Flipped	; if yes, branch
0000FFA4 0469 0010 0008             		subi.w	#$10,obX(a1)
0000FFAA 4469 0010                  		neg.w	obVelX(a1)	; move Sonic to	the right
0000FFAE                            
0000FFAE                            	Spring_Flipped:
0000FFAE 337C 000F 003E             		move.w	#$F,$3E(a1)
0000FFB4 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
0000FFBA 0869 0000 0022             		bchg	#0,obStatus(a1)
0000FFC0 0829 0002 0022             		btst	#2,obStatus(a1)
0000FFC6 6600                       		bne.s	loc_DC56
0000FFC8 137C 0000 001C             		move.b	#id_Walk,obAnim(a1)	; use walking animation
0000FFCE                            
0000FFCE                            loc_DC56:
0000FFCE 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000FFD4 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000FFE4                            
0000FFE4                            Spring_AniLR:	; Routine $A
0000FFE4 4278 C904                  		clr.w ($FFFFC904).w	; clear screen delay counter
0000FFE8 43F9 0000 0000             		lea	(Ani_Spring).l,a1
0000FFEE 6000 CA34                  		bra.w	AnimateSprite
0000FFF2                            ; ===========================================================================
0000FFF2                            
0000FFF2                            Spring_ResetLR:	; Routine $C
0000FFF2 117C 0002 001D             		move.b	#2,obNextAni(a0) ; reset animation
0000FFF8 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto "Spring_LR" routine
0000FFFC 4E75                       		rts	
0000FFFE                            ; ===========================================================================
0000FFFE                            
0000FFFE                            Spring_Dwn:	; Routine $E
0000FFFE 323C 001B                  		move.w	#$1B,d1
00010002 343C 0008                  		move.w	#8,d2
00010006 363C 0010                  		move.w	#$10,d3
0001000A 3828 0008                  		move.w	obX(a0),d4
0001000E 6100 0000                  		bsr.w	SolidObject
00010012 0C28 0002 0024             		cmpi.b	#2,obRoutine(a0)
00010018 6600                       		bne.s	loc_DCA4
0001001A 117C 000E 0024             		move.b	#$E,obRoutine(a0)
00010020                            
00010020                            loc_DCA4:
00010020 4A28 0025                  		tst.b	obSolid(a0)
00010024 6600                       		bne.s	locret_DCAE
00010026 4A44                       		tst.w	d4
00010028 6B00                       		bmi.s	Spring_BounceDwn
0001002A                            
0001002A                            locret_DCAE:
0001002A 4E75                       		rts	
0001002C                            ; ===========================================================================
0001002C                            
0001002C                            Spring_BounceDwn:
0001002C 5428 0024                  		addq.b	#2,obRoutine(a0)
00010030 5169 000C                  		subq.w	#8,obY(a1)
00010034 3368 0030 0012             		move.w	spring_pow(a0),obVelY(a1)
0001003A 4469 0012                  		neg.w	obVelY(a1)	; move Sonic downwards
0001003E 08E9 0001 0022             		bset	#1,obStatus(a1)
00010044 08A9 0003 0022             		bclr	#3,obStatus(a1)
0001004A 137C 0002 0024             		move.b	#2,obRoutine(a1)
00010050 08A8 0003 0022             		bclr	#3,obStatus(a0)
00010056 4228 0025                  		clr.b	obSolid(a0)
00010064                            
00010064                            Spring_AniDwn:	; Routine $10
00010064 43F9 0000 0000             		lea	(Ani_Spring).l,a1
0001006A 6000 C9B8                  		bra.w	AnimateSprite
0001006E                            ; ===========================================================================
0001006E                            
0001006E                            Spring_ResetDwn:
0001006E                            		; Routine $12
0001006E 117C 0001 001D             		move.b	#1,obNextAni(a0) ; reset animation
00010074 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto "Spring_Dwn" routine
00010078 4E75                       		rts	
00010078 4E75                       		rts	
0001007A                            		include	"_anim\Springs.asm"
0001007A                            ; ---------------------------------------------------------------------------
0001007A                            ; Animation script - springs
0001007A                            ; ---------------------------------------------------------------------------
0001007A 0000                       Ani_Spring:	dc.w byte_DD02-Ani_Spring
0001007C 0000                       		dc.w byte_DD0E-Ani_Spring
0001007E 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, afRoutine
0001008A 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, afRoutine
00010096                            		even
00010096                            		even
00010096                            Map_Spring:	include	"_maps\Springs.asm"
00010096                            ; ---------------------------------------------------------------------------
00010096                            ; Sprite mappings - springs
00010096                            ; ---------------------------------------------------------------------------
00010096                            Map_Spring_internal:
00010096 0000                       		dc.w M_Spg_Up-Map_Spring_internal
00010098 0000                       		dc.w M_Spg_UpFlat-Map_Spring_internal
0001009A 0000                       		dc.w M_Spg_UpExt-Map_Spring_internal
0001009C 0000                       		dc.w M_Spg_Left-Map_Spring_internal
0001009E 0000                       		dc.w M_Spg_LeftFlat-Map_Spring_internal
000100A0 0000                       		dc.w M_Spg_LeftExt-Map_Spring_internal
000100A2 02                         M_Spg_Up:	dc.b 2			; facing up
000100A3 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
000100A8 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
000100AD 01                         M_Spg_UpFlat:	dc.b 1			; facing up, flattened
000100AE 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
000100B3 03                         M_Spg_UpExt:	dc.b 3			; facing up, extended
000100B4 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
000100B9 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
000100BE 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
000100C3 01                         M_Spg_Left:	dc.b 1			; facing left
000100C4 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
000100C9 01                         M_Spg_LeftFlat:	dc.b 1			; facing left, flattened
000100CA F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
000100CF 04                         M_Spg_LeftExt:	dc.b 4			; facing left, extended
000100D0 F003 0004 10               		dc.b $F0, 3, 0,	4, $10
000100D5 F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
000100DA F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
000100DF 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
000100E4                            		even
000100E4                            		even
000100E4                            
000100E4                            		include	"_incObj\42 Newtron.asm"
000100E4                            ; ---------------------------------------------------------------------------
000100E4                            ; Object 42 - Newtron enemy (GHZ)
000100E4                            ; ---------------------------------------------------------------------------
000100E4                            
000100E4                            Newtron:
000100E4 7000                       		moveq	#0,d0
000100E6 1028 0024                  		move.b	obRoutine(a0),d0
000100EA 323B 0000                  		move.w	Newt_Index(pc,d0.w),d1
000100EE 4EFB 1000                  		jmp	Newt_Index(pc,d1.w)
000100F2                            ; ===========================================================================
000100F2 0000                       Newt_Index:	dc.w Newt_Main-Newt_Index
000100F4 0000                       		dc.w Newt_Action-Newt_Index
000100F6 0000                       		dc.w Newt_Delete-Newt_Index
000100F8                            ; ===========================================================================
000100F8                            
000100F8                            Newt_Main:	; Routine 0
000100F8 5428 0024                  		addq.b	#2,obRoutine(a0)
000100FC 217C 0000 0000 0004        		move.l	#Map_Newt,obMap(a0)
00010104 317C 049B 0002             		move.w	#$49B,obGfx(a0)
0001010A 117C 0004 0001             		move.b	#4,obRender(a0)
00010110 317C 0200 0018             		move.w	#$200,obPriority(a0)
00010116 117C 0014 0014             		move.b	#$14,obActWid(a0)
0001011C 117C 0010 0016             		move.b	#$10,obHeight(a0)
00010122 117C 0008 0017             		move.b	#8,obWidth(a0)
00010128                            
00010128                            Newt_Action:	; Routine 2
00010128 7000                       		moveq	#0,d0
0001012A 1028 0025                  		move.b	ob2ndRout(a0),d0
0001012E 323B 0000                  		move.w	@index(pc,d0.w),d1
00010132 4EBB 1000                  		jsr	@index(pc,d1.w)
00010136 43F9 0000 0000             		lea	(Ani_Newt).l,a1
0001013C 6100 C8E6                  		bsr.w	AnimateSprite
00010140 6000 0000                  		bra.w	RememberState
00010144                            ; ===========================================================================
00010144 0000                       @index:		dc.w @chkdistance-@index
00010146 0000                       		dc.w @type00-@index
00010148 0000                       		dc.w @matchfloor-@index
0001014A 0000                       		dc.w @speed-@index
0001014C 0000                       		dc.w @type01-@index
0001014E                            ; ===========================================================================
0001014E                            
0001014E                            @chkdistance:
0001014E 08E8 0000 0022             		bset	#0,obStatus(a0)
00010154 3038 D008                  		move.w	(v_player+obX).w,d0
00010158 9068 0008                  		sub.w	obX(a0),d0
0001015C 6400                       		bcc.s	@sonicisright
0001015E 4440                       		neg.w	d0
00010160 08A8 0000 0022             		bclr	#0,obStatus(a0)
00010166                            
00010166                            	@sonicisright:
00010166 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0001016A 6400                       		bcc.s	@outofrange	; if not, branch
0001016C 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto @type00 next
00010170 117C 0001 001C             		move.b	#1,obAnim(a0)
00010176 4A28 0028                  		tst.b	obSubtype(a0)	; check	object type
0001017A 6700                       		beq.s	@istype00	; if type is 00, branch
0001017C                            
0001017C 317C 249B 0002             		move.w	#$249B,obGfx(a0)
00010182 117C 0008 0025             		move.b	#8,ob2ndRout(a0) ; goto @type01 next
00010188 117C 0004 001C             		move.b	#4,obAnim(a0)	; use different	animation
0001018E                            
0001018E                            	@outofrange:
0001018E                            	@istype00:
0001018E 4E75                       		rts	
00010190                            ; ===========================================================================
00010190                            
00010190                            @type00:
00010190 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)	; has "appearing" animation finished?
00010196 6400                       		bcc.s	@fall		; is yes, branch
00010198 08E8 0000 0022             		bset	#0,obStatus(a0)
0001019E 3038 D008                  		move.w	(v_player+obX).w,d0
000101A2 9068 0008                  		sub.w	obX(a0),d0
000101A6 6400                       		bcc.s	@sonicisright2
000101A8 08A8 0000 0022             		bclr	#0,obStatus(a0)
000101AE                            
000101AE                            	@sonicisright2:
000101AE 4E75                       		rts	
000101B0                            ; ===========================================================================
000101B0                            
000101B0                            	@fall:
000101B0 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)
000101B6 6600                       		bne.s	@loc_DE42
000101B8 117C 000C 0020             		move.b	#$C,obColType(a0)
000101BE                            
000101BE                            	@loc_DE42:
000101BE 6100 F76C                  		bsr.w	ObjectFall
000101C2 6100 0000                  		bsr.w	ObjFloorDist
000101C6 4A41                       		tst.w	d1		; has newtron hit the floor?
000101C8 6A00                       		bpl.s	@keepfalling	; if not, branch
000101CA                            
000101CA D368 000C                  		add.w	d1,obY(a0)
000101CE 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop newtron falling
000101D4 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000101D8 117C 0002 001C             		move.b	#2,obAnim(a0)
000101DE 0828 0005 0002             		btst	#5,obGfx(a0)
000101E4 6700                       		beq.s	@pppppppp
000101E6 5228 001C                  		addq.b	#1,obAnim(a0)
000101EA                            
000101EA                            	@pppppppp:
000101EA 117C 000D 0020             		move.b	#$D,obColType(a0)
000101F0 317C 0200 0010             		move.w	#$200,obVelX(a0) ; move newtron horizontally
000101F6 0828 0000 0022             		btst	#0,obStatus(a0)
000101FC 6600                       		bne.s	@keepfalling
000101FE 4468 0010                  		neg.w	obVelX(a0)
00010202                            
00010202                            	@keepfalling:
00010202 4E75                       		rts	
00010204                            ; ===========================================================================
00010204                            
00010204                            @matchfloor:
00010204 6100 F75E                  		bsr.w	SpeedToPos
00010208 6100 0000                  		bsr.w	ObjFloorDist
0001020C 0C41 FFF8                  		cmpi.w	#-8,d1
00010210 6D00                       		blt.s	@nextroutine
00010212 0C41 000C                  		cmpi.w	#$C,d1
00010216 6C00                       		bge.s	@nextroutine
00010218 D368 000C                  		add.w	d1,obY(a0)	; match	newtron's position with floor
0001021C 4E75                       		rts	
0001021E                            ; ===========================================================================
0001021E                            
0001021E                            	@nextroutine:
0001021E 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto @speed next
00010222 4E75                       		rts	
00010224                            ; ===========================================================================
00010224                            
00010224                            @speed:
00010224 6100 F73E                  		bsr.w	SpeedToPos
00010228 4E75                       		rts	
0001022A                            ; ===========================================================================
0001022A                            
0001022A                            @type01:
0001022A 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)
00010230 6600                       		bne.s	@firemissile
00010232 117C 000C 0020             		move.b	#$C,obColType(a0)
00010238                            
00010238                            	@firemissile:
00010238 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0001023E 6600                       		bne.s	@fail
00010240 4A28 0032                  		tst.b	$32(a0)
00010244 6600                       		bne.s	@fail
00010246 117C 0001 0032             		move.b	#1,$32(a0)
0001024C 6100 FBB6                  		bsr.w	FindFreeObj
00010250 6600                       		bne.s	@fail
00010252 12BC 0023                  		move.b	#id_Missile,0(a1) ; load missile object
00010256 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001025C 3368 000C 000C             		move.w	obY(a0),obY(a1)
00010262 5169 000C                  		subq.w	#8,obY(a1)
00010266 337C 0200 0010             		move.w	#$200,obVelX(a1)
0001026C 303C 0014                  		move.w	#$14,d0
00010270 0828 0000 0022             		btst	#0,obStatus(a0)
00010276 6600                       		bne.s	@noflip
00010278 4440                       		neg.w	d0
0001027A 4469 0010                  		neg.w	obVelX(a1)
0001027E                            
0001027E                            	@noflip:
0001027E D169 0008                  		add.w	d0,obX(a1)
00010282 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00010288 137C 0001 0028             		move.b	#1,obSubtype(a1)
0001028E                            
0001028E                            	@fail:
0001028E 4E75                       		rts	
00010290                            ; ===========================================================================
00010290                            
00010290                            Newt_Delete:	; Routine 4
00010290 6000 F726                  		bra.w	DeleteObject
00010290 6000 F726                  		bra.w	DeleteObject
00010294                            		include	"_anim\Newtron.asm"
00010294                            ; ---------------------------------------------------------------------------
00010294                            ; Animation script - Newtron enemy
00010294                            ; ---------------------------------------------------------------------------
00010294 0000                       Ani_Newt:	dc.w A_Newt_Blank-Ani_Newt
00010296 0000                       		dc.w A_Newt_Drop-Ani_Newt
00010298 0000                       		dc.w A_Newt_Fly1-Ani_Newt
0001029A 0000                       		dc.w A_Newt_Fly2-Ani_Newt
0001029C 0000                       		dc.w A_Newt_Fires-Ani_Newt
0001029E 0F0A FF                    A_Newt_Blank:	dc.b $F, $A, afEnd
000102A2 00                         		even
000102A2 1300 0103 0405 FE01        A_Newt_Drop:	dc.b $13, 0, 1,	3, 4, 5, afBack, 1
000102AA 0206 07FF                  A_Newt_Fly1:	dc.b 2,	6, 7, afEnd
000102AE 0208 09FF                  A_Newt_Fly2:	dc.b 2,	8, 9, afEnd
000102B2 1300 0101 0201 0100 FC     A_Newt_Fires:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, afRoutine
000102BC 00                         		even
000102BC 00                         		even
000102BC                            Map_Newt:	include	"_maps\Newtron.asm"
000102BC                            ; ---------------------------------------------------------------------------
000102BC                            ; Sprite mappings - Newtron enemy (GHZ)
000102BC                            ; ---------------------------------------------------------------------------
000102BC                            Map_Newt_internal:
000102BC 0000                       		dc.w M_Newt_Trans-Map_Newt_internal
000102BE 0000                       		dc.w M_Newt_Norm-Map_Newt_internal
000102C0 0000                       		dc.w M_Newt_Fires-Map_Newt_internal
000102C2 0000                       		dc.w M_Newt_Drop1-Map_Newt_internal
000102C4 0000                       		dc.w M_Newt_Drop2-Map_Newt_internal
000102C6 0000                       		dc.w M_Newt_Drop3-Map_Newt_internal
000102C8 0000                       		dc.w M_Newt_Fly1a-Map_Newt_internal
000102CA 0000                       		dc.w M_Newt_Fly1b-Map_Newt_internal
000102CC 0000                       		dc.w M_Newt_Fly2a-Map_Newt_internal
000102CE 0000                       		dc.w M_Newt_Fly2b-Map_Newt_internal
000102D0 0000                       		dc.w M_Newt_Blank-Map_Newt_internal
000102D2 03                         M_Newt_Trans:	dc.b 3
000102D3 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC	; partially visible
000102D8 F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
000102DD FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
000102E2 03                         M_Newt_Norm:	dc.b 3
000102E3 EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC ; visible
000102E8 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
000102ED FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
000102F2 03                         M_Newt_Fires:	dc.b 3
000102F3 EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC ; open mouth, firing
000102F8 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
000102FD FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
00010302 04                         M_Newt_Drop1:	dc.b 4
00010303 EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC ; dropping
00010308 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0001030D FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
00010312 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
00010317 03                         M_Newt_Drop2:	dc.b 3
00010318 F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0001031D FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
00010322 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
00010327 02                         M_Newt_Drop3:	dc.b 2
00010328 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0001032D F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
00010332 03                         M_Newt_Fly1a:	dc.b 3
00010333 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC ; flying
00010338 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0001033D FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
00010342 03                         M_Newt_Fly1b:	dc.b 3
00010343 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
00010348 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0001034D FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
00010352 03                         M_Newt_Fly2a:	dc.b 3
00010353 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
00010358 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0001035D FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
00010362 03                         M_Newt_Fly2b:	dc.b 3
00010363 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
00010368 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0001036D FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
00010372 00                         M_Newt_Blank:	dc.b 0
00010374 00                         		even
00010374 00                         		even
00010374                            		include	"_incObj\43 Roller.asm"
00010374                            ; ---------------------------------------------------------------------------
00010374                            ; Object 43 - Roller enemy (SYZ)
00010374                            ; ---------------------------------------------------------------------------
00010374                            
00010374                            Roller:
00010374 7000                       		moveq	#0,d0
00010376 1028 0024                  		move.b	obRoutine(a0),d0
0001037A 323B 0000                  		move.w	Roll_Index(pc,d0.w),d1
0001037E 4EFB 1000                  		jmp	Roll_Index(pc,d1.w)
00010382                            ; ===========================================================================
00010382 0000                       Roll_Index:	dc.w Roll_Main-Roll_Index
00010384 0000                       		dc.w Roll_Action-Roll_Index
00010386                            ; ===========================================================================
00010386                            
00010386                            Roll_Main:	; Routine 0
00010386 117C 000E 0016             		move.b	#$E,obHeight(a0)
0001038C 117C 0008 0017             		move.b	#8,obWidth(a0)
00010392 6100 F598                  		bsr.w	ObjectFall
00010396 6100 0000                  		bsr.w	ObjFloorDist
0001039A 4A41                       		tst.w	d1
0001039C 6A00                       		bpl.s	locret_E052
0001039E D368 000C                  		add.w	d1,obY(a0)	; match	roller's position with the floor
000103A2 317C 0000 0012             		move.w	#0,obVelY(a0)
000103A8 5428 0024                  		addq.b	#2,obRoutine(a0)
000103AC 217C 0000 0000 0004        		move.l	#Map_Roll,obMap(a0)
000103B4 317C 04B8 0002             		move.w	#$4B8,obGfx(a0)
000103BA 117C 0004 0001             		move.b	#4,obRender(a0)
000103C0 317C 0200 0018             		move.w	#$200,obPriority(a0)
000103C6 117C 0010 0014             		move.b	#$10,obActWid(a0)
000103CC                            
000103CC                            	locret_E052:
000103CC 4E75                       		rts	
000103CE                            ; ===========================================================================
000103CE                            
000103CE                            Roll_Action:	; Routine 2
000103CE 7000                       		moveq	#0,d0
000103D0 1028 0025                  		move.b	ob2ndRout(a0),d0
000103D4 323B 0000                  		move.w	Roll_Index2(pc,d0.w),d1
000103D8 4EBB 1000                  		jsr	Roll_Index2(pc,d1.w)
000103DC 43F9 0000 0000             		lea	(Ani_Roll).l,a1
000103E2 6100 C640                  		bsr.w	AnimateSprite
000103E6 3028 0008                  		move.w	obX(a0),d0
000103EA 0240 FF80                  		andi.w	#$FF80,d0
000103EE 3238 F700                  		move.w	(v_screenposx).w,d1
000103F2 0441 0080                  		subi.w	#$80,d1
000103F6 0241 FF80                  		andi.w	#$FF80,d1
000103FA 9041                       		sub.w	d1,d0
000103FC 0C40 0280                  		cmpi.w	#$280,d0
00010400 6E00 0000                  		bgt.w	Roll_ChkGone
00010404 6000 F572                  		bra.w	DisplaySprite
00010408                            ; ===========================================================================
00010408                            
00010408                            Roll_ChkGone:
00010408 45F8 FC00                  		lea	(v_objstate).w,a2
0001040C 7000                       		moveq	#0,d0
0001040E 1028 0023                  		move.b	obRespawnNo(a0),d0
00010412 6700                       		beq.s	Roll_Delete
00010414 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001041A                            
0001041A                            Roll_Delete:
0001041A 6000 F59C                  		bra.w	DeleteObject
0001041E                            ; ===========================================================================
0001041E 0000                       Roll_Index2:	dc.w Roll_RollChk-Roll_Index2
00010420 0000                       		dc.w Roll_RollNoChk-Roll_Index2
00010422 0000                       		dc.w Roll_ChkJump-Roll_Index2
00010424 0000                       		dc.w Roll_MatchFloor-Roll_Index2
00010426                            ; ===========================================================================
00010426                            
00010426                            Roll_RollChk:
00010426 3038 D008                  		move.w	(v_player+obX).w,d0
0001042A 0440 0100                  		subi.w	#$100,d0
0001042E 6500                       		bcs.s	loc_E0D2
00010430 9068 0008                  		sub.w	obX(a0),d0	; check	distance between Roller	and Sonic
00010434 6500                       		bcs.s	loc_E0D2
00010436 5828 0025                  		addq.b	#4,ob2ndRout(a0)
0001043A 117C 0002 001C             		move.b	#2,obAnim(a0)
00010440 317C 0700 0010             		move.w	#$700,obVelX(a0) ; move Roller horizontally
00010446 117C 008E 0020             		move.b	#$8E,obColType(a0) ; make Roller invincible
0001044C                            
0001044C                            loc_E0D2:
0001044C 588F                       		addq.l	#4,sp
0001044E 4E75                       		rts	
00010450                            ; ===========================================================================
00010450                            
00010450                            Roll_RollNoChk:
00010450 0C28 0002 001C             		cmpi.b	#2,obAnim(a0)
00010456 6700                       		beq.s	loc_E0F8
00010458 5368 0030                  		subq.w	#1,$30(a0)
0001045C 6A00                       		bpl.s	locret_E0F6
0001045E 117C 0001 001C             		move.b	#1,obAnim(a0)
00010464 317C 0700 0010             		move.w	#$700,obVelX(a0)
0001046A 117C 008E 0020             		move.b	#$8E,obColType(a0)
00010470                            
00010470                            locret_E0F6:
00010470 4E75                       		rts	
00010472                            ; ===========================================================================
00010472                            
00010472                            loc_E0F8:
00010472 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00010476 4E75                       		rts	
00010478                            ; ===========================================================================
00010478                            
00010478                            Roll_ChkJump:
00010478 6100 0000                  		bsr.w	Roll_Stop
0001047C 6100 F4E6                  		bsr.w	SpeedToPos
00010480 6100 0000                  		bsr.w	ObjFloorDist
00010484 0C41 FFF8                  		cmpi.w	#-8,d1
00010488 6D00                       		blt.s	Roll_Jump
0001048A 0C41 000C                  		cmpi.w	#$C,d1
0001048E 6C00                       		bge.s	Roll_Jump
00010490 D368 000C                  		add.w	d1,obY(a0)
00010494 4E75                       		rts	
00010496                            ; ===========================================================================
00010496                            
00010496                            Roll_Jump:
00010496 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001049A 08E8 0000 0032             		bset	#0,$32(a0)
000104A0 6700                       		beq.s	locret_E12E
000104A2 317C FA00 0012             		move.w	#-$600,obVelY(a0)	; move Roller vertically
000104A8                            
000104A8                            locret_E12E:
000104A8 4E75                       		rts	
000104AA                            ; ===========================================================================
000104AA                            
000104AA                            Roll_MatchFloor:
000104AA 6100 F480                  		bsr.w	ObjectFall
000104AE 4A68 0012                  		tst.w	obVelY(a0)
000104B2 6B00                       		bmi.s	locret_E150
000104B4 6100 0000                  		bsr.w	ObjFloorDist
000104B8 4A41                       		tst.w	d1
000104BA 6A00                       		bpl.s	locret_E150
000104BC D368 000C                  		add.w	d1,obY(a0)	; match	Roller's position with the floor
000104C0 5528 0025                  		subq.b	#2,ob2ndRout(a0)
000104C4 317C 0000 0012             		move.w	#0,obVelY(a0)
000104CA                            
000104CA                            locret_E150:
000104CA 4E75                       		rts	
000104CC                            
000104CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000104CC                            
000104CC                            
000104CC                            Roll_Stop:
000104CC 4A28 0032                  		tst.b	$32(a0)
000104D0 6B00                       		bmi.s	locret_E188
000104D2 3038 D008                  		move.w	(v_player+obX).w,d0
000104D6 0440 0030                  		subi.w	#$30,d0
000104DA 9068 0008                  		sub.w	obX(a0),d0
000104DE 6400                       		bcc.s	locret_E188
000104E0 117C 0000 001C             		move.b	#0,obAnim(a0)
000104E6 117C 000E 0020             		move.b	#$E,obColType(a0)
000104EC 4268 0010                  		clr.w	obVelX(a0)
000104F0 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
000104F6 117C 0002 0025             		move.b	#2,ob2ndRout(a0)
000104FC 08E8 0007 0032             		bset	#7,$32(a0)
00010502                            
00010502                            locret_E188:
00010502 4E75                       		rts	
00010504                            ; End of function Roll_Stop
00010504                            ; End of function Roll_Stop
00010504                            		include	"_anim\Roller.asm"
00010504                            ; ---------------------------------------------------------------------------
00010504                            ; Animation script - Roller enemy
00010504                            ; ---------------------------------------------------------------------------
00010504 0000                       Ani_Roll:	dc.w A_Roll_Unfold-Ani_Roll
00010506 0000                       		dc.w A_Roll_Fold-Ani_Roll
00010508 0000                       		dc.w A_Roll_Roll-Ani_Roll
0001050A 0F02 0100 FE01             A_Roll_Unfold:	dc.b $F, 2, 1, 0, afBack, 1
00010510 0F01 02FD 02               A_Roll_Fold:	dc.b $F, 1, 2, afChange, 2
00010516 00                         		even
00010516 0303 0402 FF               A_Roll_Roll:	dc.b 3,	3, 4, 2, afEnd
0001051C 00                         		even
0001051C 00                         		even
0001051C                            Map_Roll:	include	"_maps\Roller.asm"
0001051C                            ; --------------------------------------------------------------------------------
0001051C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001051C                            ; --------------------------------------------------------------------------------
0001051C                            
0001051C                            SME_q3BmU:	
0001051C 0000 0000                  		dc.w SME_q3BmU_A-SME_q3BmU, SME_q3BmU_15-SME_q3BmU	
00010520 0000 0000                  		dc.w SME_q3BmU_20-SME_q3BmU, SME_q3BmU_26-SME_q3BmU	
00010524 0000                       		dc.w SME_q3BmU_2C-SME_q3BmU	
00010526 02                         SME_q3BmU_A:	dc.b 2	
00010527 DE0E 0000 F0               		dc.b $DE, $E, 0, 0, $F0	
0001052C F60E 000C F0               		dc.b $F6, $E, 0, $C, $F0	
00010531 02                         SME_q3BmU_15:	dc.b 2	
00010532 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0	
00010537 FE0D 0018 F0               		dc.b $FE, $D, 0, $18, $F0	
0001053C 01                         SME_q3BmU_20:	dc.b 1	
0001053D F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0	
00010542 01                         SME_q3BmU_26:	dc.b 1	
00010543 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0	
00010548 01                         SME_q3BmU_2C:	dc.b 1	
00010549 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0	
0001054E                            		even
0001054E                            		even
0001054E                            
0001054E                            		include	"_incObj\44 GHZ Edge Walls.asm"
0001054E                            ; ---------------------------------------------------------------------------
0001054E                            ; Object 44 - edge walls (GHZ)
0001054E                            ; ---------------------------------------------------------------------------
0001054E                            
0001054E                            EdgeWalls:
0001054E 7000                       		moveq	#0,d0
00010550 1028 0024                  		move.b	obRoutine(a0),d0
00010554 323B 0000                  		move.w	Edge_Index(pc,d0.w),d1
00010558 4EFB 1000                  		jmp	Edge_Index(pc,d1.w)
0001055C                            ; ===========================================================================
0001055C 0000                       Edge_Index:	dc.w Edge_Main-Edge_Index
0001055E 0000                       		dc.w Edge_Solid-Edge_Index
00010560 0000                       		dc.w Edge_Display-Edge_Index
00010562                            ; ===========================================================================
00010562                            
00010562                            Edge_Main:	; Routine 0
00010562 5428 0024                  		addq.b	#2,obRoutine(a0)
00010566 217C 0000 0000 0004        		move.l	#Map_Edge,obMap(a0)
0001056E 317C 434C 0002             		move.w	#$434C,obGfx(a0)
00010574 0028 0004 0001             		ori.b	#4,obRender(a0)
0001057A 117C 0008 0014             		move.b	#8,obActWid(a0)
00010580 317C 0300 0018             		move.w	#$300,obPriority(a0)
00010586 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0) ; copy object type number to frame number
0001058C 08A8 0004 001A             		bclr	#4,obFrame(a0)	; clear	4th bit	(deduct	$10)
00010592 6700                       		beq.s	Edge_Solid	; make object solid if 4th bit = 0
00010594 5428 0024                  		addq.b	#2,obRoutine(a0)
00010598 6000                       		bra.s	Edge_Display	; don't make it solid if 4th bit = 1
0001059A                            ; ===========================================================================
0001059A                            
0001059A                            Edge_Solid:	; Routine 2
0001059A 323C 0013                  		move.w	#$13,d1
0001059E 343C 0028                  		move.w	#$28,d2
000105A2 6100 A130                  		bsr.w	Obj44_SolidWall
000105A6                            
000105A6                            Edge_Display:	; Routine 4
000105A6 6100 F3D0                  		bsr.w	DisplaySprite
000105C8 4E75                       		rts	
000105C8 4E75                       		rts	
000105CA                            Map_Edge:	include	"_maps\GHZ Edge Walls.asm"
000105CA                            ; ---------------------------------------------------------------------------
000105CA                            ; Sprite mappings - walls (GHZ)
000105CA                            ; ---------------------------------------------------------------------------
000105CA                            Map_Edge_internal:
000105CA 0000                       		dc.w M_Edge_Shadow-Map_Edge_internal
000105CC 0000                       		dc.w M_Edge_Light-Map_Edge_internal
000105CE 0000                       		dc.w M_Edge_Dark-Map_Edge_internal
000105D0 04                         M_Edge_Shadow:	dc.b 4
000105D1 E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8	; light with shadow
000105D6 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
000105DB 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
000105E0 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
000105E5 04                         M_Edge_Light:	dc.b 4
000105E6 E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8	; light with no shadow
000105EB F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
000105F0 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
000105F5 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
000105FA 04                         M_Edge_Dark:	dc.b 4
000105FB E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8	; all shadow
00010600 F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
00010605 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0001060A 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
00010610 00                         		even
00010610 00                         		even
00010610                            
00010610                            		include	"_incObj\13 Lava Ball Maker.asm"
00010610                            ; ---------------------------------------------------------------------------
00010610                            ; Object 13 - lava ball	maker (MZ, SLZ)
00010610                            ; ---------------------------------------------------------------------------
00010610                            
00010610                            LavaMaker:
00010610 7000                       		moveq	#0,d0
00010612 1028 0024                  		move.b	obRoutine(a0),d0
00010616 323B 0000                  		move.w	LavaM_Index(pc,d0.w),d1
0001061A 4EBB 1000                  		jsr	LavaM_Index(pc,d1.w)
0001061E 6000 0000                  		bra.w	LBall_ChkDel
00010622                            ; ===========================================================================
00010622 0000                       LavaM_Index:	dc.w LavaM_Main-LavaM_Index
00010624 0000                       		dc.w LavaM_MakeLava-LavaM_Index
00010626                            ; ---------------------------------------------------------------------------
00010626                            ;
00010626                            ; Lava ball production rates
00010626                            ;
00010626 1E3C 5A78 96B4             LavaM_Rates:	dc.b 30, 60, 90, 120, 150, 180
0001062C                            ; ===========================================================================
0001062C                            
0001062C                            LavaM_Main:	; Routine 0
0001062C 5428 0024                  		addq.b	#2,obRoutine(a0)
00010630 1028 0028                  		move.b	obSubtype(a0),d0
00010634 E848                       		lsr.w	#4,d0
00010636 0240 000F                  		andi.w	#$F,d0
0001063A 117B 00EA 001F             		move.b	LavaM_Rates(pc,d0.w),obDelayAni(a0)
00010640 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0) ; set time delay for lava balls
00010646 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
0001064C                            
0001064C                            LavaM_MakeLava:	; Routine 2
0001064C 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from time delay
00010650 6600                       		bne.s	LavaM_Wait	; if time still	remains, branch
00010652 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0) ; reset time delay
00010658 6100 F59E                  		bsr.w	ChkObjectVisible
0001065C 6600                       		bne.s	LavaM_Wait
0001065E 6100 F7A4                  		bsr.w	FindFreeObj
00010662 6600                       		bne.s	LavaM_Wait
00010664 12BC 0014                  		move.b	#id_LavaBall,0(a1) ; load lava ball object
00010668 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001066E 3368 000C 000C             		move.w	obY(a0),obY(a1)
00010674 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0001067A                            
0001067A                            	LavaM_Wait:
0001067A 4E75                       		rts	
0001067A 4E75                       		rts	
0001067C                            		include	"_incObj\14 Lava Ball.asm"
0001067C                            ; ---------------------------------------------------------------------------
0001067C                            ; Object 14 - lava balls (MZ, SLZ)
0001067C                            ; ---------------------------------------------------------------------------
0001067C                            
0001067C                            LavaBall:
0001067C 7000                       		moveq	#0,d0
0001067E 1028 0024                  		move.b	obRoutine(a0),d0
00010682 323B 0000                  		move.w	LBall_Index(pc,d0.w),d1
00010686 4EBB 1000                  		jsr	LBall_Index(pc,d1.w)
0001068A 6000 F2EC                  		bra.w	DisplaySprite
0001068E                            ; ===========================================================================
0001068E 0000                       LBall_Index:	dc.w LBall_Main-LBall_Index
00010690 0000                       		dc.w LBall_Action-LBall_Index
00010692 0000                       		dc.w LBall_Delete-LBall_Index
00010694                            
00010694 FC00 FB00 FA00 F900 FE00   LBall_Speeds:	dc.w -$400, -$500, -$600, -$700, -$200
0001069E 0200 FE00 0200 0000        		dc.w $200, -$200, $200,	0
000106A6                            ; ===========================================================================
000106A6                            
000106A6                            LBall_Main:	; Routine 0
000106A6 5428 0024                  		addq.b	#2,obRoutine(a0)
000106AA 117C 0008 0016             		move.b	#8,obHeight(a0)
000106B0 117C 0008 0017             		move.b	#8,obWidth(a0)
000106B6 217C 0000 D676 0004        		move.l	#Map_Fire,obMap(a0)
000106BE 317C 0345 0002             		move.w	#$345,obGfx(a0)
000106C4 0C38 0003 FE10             		cmpi.b	#3,(v_zone).w	; check if level is SLZ
000106CA 6600                       		bne.s	@notSLZ
000106CC 317C 0480 0002             		move.w	#$480,obGfx(a0)	; SLZ specific code
000106D2                            
000106D2                            	@notSLZ:
000106D2 117C 0004 0001             		move.b	#4,obRender(a0)
000106D8 317C 0180 0018             		move.w	#$180,obPriority(a0)
000106DE 117C 008B 0020             		move.b	#$8B,obColType(a0)
000106E4 3168 000C 0030             		move.w	obY(a0),$30(a0)
000106EA 4A28 0029                  		tst.b	$29(a0)
000106EE 6700                       		beq.s	@speed
000106F0 5428 0018                  		addq.b	#2,obPriority(a0)
000106F4                            
000106F4                            	@speed:
000106F4 7000                       		moveq	#0,d0
000106F6 1028 0028                  		move.b	obSubtype(a0),d0
000106FA D040                       		add.w	d0,d0
000106FC 317B 0096 0012             		move.w	LBall_Speeds(pc,d0.w),obVelY(a0) ; load object speed (vertical)
00010702 117C 0008 0014             		move.b	#8,obActWid(a0)
00010708 0C28 0006 0028             		cmpi.b	#6,obSubtype(a0) ; is object type below $6 ?
0001070E 6500                       		bcs.s	@sound		; if yes, branch
00010710                            
00010710 117C 0010 0014             		move.b	#$10,obActWid(a0)
00010716 117C 0002 001C             		move.b	#2,obAnim(a0)	; use horizontal animation
0001071C 3168 0012 0010             		move.w	obVelY(a0),obVelX(a0) ; set horizontal speed
00010722 317C 0000 0012             		move.w	#0,obVelY(a0)	; delete vertical speed
00010728                            
00010728                            	@sound:
00010732                            
00010732                            LBall_Action:	; Routine 2
00010732 7000                       		moveq	#0,d0
00010734 1028 0028                  		move.b	obSubtype(a0),d0
00010738 D040                       		add.w	d0,d0
0001073A 323B 0000                  		move.w	LBall_TypeIndex(pc,d0.w),d1
0001073E 4EBB 1000                  		jsr	LBall_TypeIndex(pc,d1.w)
00010742 6100 F220                  		bsr.w	SpeedToPos
00010746 43F9 0000 0000             		lea	(Ani_Fire).l,a1
0001074C 6100 C2D6                  		bsr.w	AnimateSprite
00010750                            
00010750                            LBall_ChkDel:
0001076E 4E75                       		rts	
00010770                            ; ===========================================================================
00010770 0000 0000                  LBall_TypeIndex:dc.w LBall_Type00-LBall_TypeIndex, LBall_Type00-LBall_TypeIndex
00010774 0000 0000                  		dc.w LBall_Type00-LBall_TypeIndex, LBall_Type00-LBall_TypeIndex
00010778 0000 0000                  		dc.w LBall_Type04-LBall_TypeIndex, LBall_Type05-LBall_TypeIndex
0001077C 0000 0000                  		dc.w LBall_Type06-LBall_TypeIndex, LBall_Type07-LBall_TypeIndex
00010780 0000                       		dc.w LBall_Type08-LBall_TypeIndex
00010782                            ; ===========================================================================
00010782                            ; lavaball types 00-03 fly up and fall back down
00010782                            
00010782                            LBall_Type00:
00010782 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase object's downward speed
00010788 3028 0030                  		move.w	$30(a0),d0
0001078C B068 000C                  		cmp.w	obY(a0),d0	; has object fallen back to its	original position?
00010790 6400                       		bcc.s	loc_E41E	; if not, branch
00010792 5428 0024                  		addq.b	#2,obRoutine(a0)	; goto "LBall_Delete" routine
00010796                            
00010796                            loc_E41E:
00010796 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001079C 4A68 0012                  		tst.w	obVelY(a0)
000107A0 6A00                       		bpl.s	locret_E430
000107A2 08E8 0001 0022             		bset	#1,obStatus(a0)
000107A8                            
000107A8                            locret_E430:
000107A8 4E75                       		rts	
000107AA                            ; ===========================================================================
000107AA                            ; lavaball type	04 flies up until it hits the ceiling
000107AA                            
000107AA                            LBall_Type04:
000107AA 08E8 0001 0022             		bset	#1,obStatus(a0)
000107B0 6100 0000                  		bsr.w	ObjHitCeiling
000107B4 4A41                       		tst.w	d1
000107B6 6A00                       		bpl.s	locret_E452
000107B8 117C 0008 0028             		move.b	#8,obSubtype(a0)
000107BE 117C 0001 001C             		move.b	#1,obAnim(a0)
000107C4 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop the object when it touches the ceiling
000107CA                            
000107CA                            locret_E452:
000107CA 4E75                       		rts	
000107CC                            ; ===========================================================================
000107CC                            ; lavaball type	05 falls down until it hits the	floor
000107CC                            
000107CC                            LBall_Type05:
000107CC 08A8 0001 0022             		bclr	#1,obStatus(a0)
000107D2 6100 0000                  		bsr.w	ObjFloorDist
000107D6 4A41                       		tst.w	d1
000107D8 6A00                       		bpl.s	locret_E474
000107DA 117C 0008 0028             		move.b	#8,obSubtype(a0)
000107E0 117C 0001 001C             		move.b	#1,obAnim(a0)
000107E6 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop the object when it touches the floor
000107EC                            
000107EC                            locret_E474:
000107EC 4E75                       		rts	
000107EE                            ; ===========================================================================
000107EE                            ; lavaball types 06-07 move sideways
000107EE                            
000107EE                            LBall_Type06:
000107EE 08E8 0000 0022             		bset	#0,obStatus(a0)
000107F4 76F8                       		moveq	#-8,d3
000107F6 6100 0000                  		bsr.w	ObjHitWallLeft
000107FA 4A41                       		tst.w	d1
000107FC 6A00                       		bpl.s	locret_E498
000107FE 117C 0008 0028             		move.b	#8,obSubtype(a0)
00010804 117C 0003 001C             		move.b	#3,obAnim(a0)
0001080A 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop object when it touches a	wall
00010810                            
00010810                            locret_E498:
00010810 4E75                       		rts	
00010812                            ; ===========================================================================
00010812                            
00010812                            LBall_Type07:
00010812 08A8 0000 0022             		bclr	#0,obStatus(a0)
00010818 7608                       		moveq	#8,d3
0001081A 6100 0000                  		bsr.w	ObjHitWallRight
0001081E 4A41                       		tst.w	d1
00010820 6A00                       		bpl.s	locret_E4BC
00010822 117C 0008 0028             		move.b	#8,obSubtype(a0)
00010828 117C 0003 001C             		move.b	#3,obAnim(a0)
0001082E 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop object when it touches a	wall
00010834                            
00010834                            locret_E4BC:
00010834 4E75                       		rts	
00010836                            ; ===========================================================================
00010836                            
00010836                            LBall_Type08:
00010836 4E75                       		rts	
00010838                            ; ===========================================================================
00010838                            
00010838                            LBall_Delete:
00010838 6000 F17E                  		bra.w	DeleteObject
00010838 6000 F17E                  		bra.w	DeleteObject
0001083C                            		include	"_anim\Fireballs.asm"
0001083C                            ; ---------------------------------------------------------------------------
0001083C                            ; Animation script - lava balls
0001083C                            ; ---------------------------------------------------------------------------
0001083C 0000                       Ani_Fire:	dc.w @vertical-Ani_Fire
0001083E 0000                       		dc.w @vertcollide-Ani_Fire
00010840 0000                       		dc.w @horizontal-Ani_Fire
00010842 0000                       		dc.w @horicollide-Ani_Fire
00010844 0500 2001 21FF             @vertical:	dc.b 5,	0, $20,	1, $21,	afEnd
0001084A 0502 FC                    @vertcollide:	dc.b 5,	2, afRoutine
0001084E 00                         		even
0001084E 0503 4304 44FF             @horizontal:	dc.b 5,	3, $43,	4, $44,	afEnd
00010854 0505 FC                    @horicollide:	dc.b 5,	5, afRoutine
00010858 00                         		even
00010858 00                         		even
00010858                            
00010858                            		include	"_incObj\6D Flamethrower.asm"
00010858                            ; ---------------------------------------------------------------------------
00010858                            ; Object 6D - flame thrower (SBZ)
00010858                            ; ---------------------------------------------------------------------------
00010858                            
00010858                            Flamethrower:
00010858 7000                       		moveq	#0,d0
0001085A 1028 0024                  		move.b	obRoutine(a0),d0
0001085E 323B 0000                  		move.w	Flame_Index(pc,d0.w),d1
00010862 4EFB 1000                  		jmp	Flame_Index(pc,d1.w)
00010866                            ; ===========================================================================
00010866 0000                       Flame_Index:	dc.w Flame_Main-Flame_Index
00010868 0000                       		dc.w Flame_Action-Flame_Index
0001086A                            ; ===========================================================================
0001086A                            
0001086A                            Flame_Main:	; Routine 0
0001086A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001086E 217C 0000 0000 0004        		move.l	#Map_Flame,obMap(a0)
00010876 317C 83D9 0002             		move.w	#$83D9,obGfx(a0)
0001087C 0028 0004 0001             		ori.b	#4,obRender(a0)
00010882 317C 0080 0018             		move.w	#$80,obPriority(a0)
00010888 3168 000C 0030             		move.w	obY(a0),$30(a0)	; store obY (gets overwritten later though)
0001088E 117C 000C 0014             		move.b	#$C,obActWid(a0)
00010894 1028 0028                  		move.b	obSubtype(a0),d0
00010898 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0001089C D040                       		add.w	d0,d0		; multiply by 2
0001089E 3140 0030                  		move.w	d0,$30(a0)
000108A2 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
000108A6 1028 0028                  		move.b	obSubtype(a0),d0
000108AA 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
000108AE EB48                       		lsl.w	#5,d0		; multiply by $20
000108B0 3140 0034                  		move.w	d0,$34(a0)	; set pause time
000108B4 117C 000A 0036             		move.b	#$A,$36(a0)
000108BA 0828 0001 0022             		btst	#1,obStatus(a0)
000108C0 6700                       		beq.s	Flame_Action
000108C2 117C 0002 001C             		move.b	#2,obAnim(a0)
000108C8 117C 0015 0036             		move.b	#$15,$36(a0)
000108CE                            
000108CE                            Flame_Action:	; Routine 2
000108CE 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
000108D2 6A00                       		bpl.s	loc_E57A	; if time remains, branch
000108D4 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
000108DA 0868 0000 001C             		bchg	#0,obAnim(a0)
000108E0 6700                       		beq.s	loc_E57A
000108E2 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
000108F2                            
000108F2                            loc_E57A:
000108F2 43F9 0000 0000             		lea	(Ani_Flame).l,a1
000108F8 6100 C12A                  		bsr.w	AnimateSprite
000108FC 117C 0000 0020             		move.b	#0,obColType(a0)
00010902 1028 0036                  		move.b	$36(a0),d0
00010906 B028 001A                  		cmp.b	obFrame(a0),d0
0001090A 6600                       		bne.s	Flame_ChkDel
0001090C 117C 00A3 0020             		move.b	#$A3,obColType(a0)
00010912                            
00010912                            Flame_ChkDel:
00010930 6000 F046                  		bra.w	DisplaySprite
00010930 6000 F046                  		bra.w	DisplaySprite
00010934                            		include	"_anim\Flamethrower.asm"
00010934                            ; ---------------------------------------------------------------------------
00010934                            ; Animation script - flamethrower (SBZ)
00010934                            ; ---------------------------------------------------------------------------
00010934 0000                       Ani_Flame:	dc.w @pipe1-Ani_Flame
00010936 0000                       		dc.w @pipe2-Ani_Flame
00010938 0000                       		dc.w @valve1-Ani_Flame
0001093A 0000                       		dc.w @valve2-Ani_Flame
0001093C 0300 0102 0304 0506 0708+  @pipe1:		dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, afBack, 2
0001094A 0009 0705 0301 00FE 01     @pipe2:		dc.b 0,	9, 7, 5, 3, 1, 0, afBack, 1
00010954 00                         		even
00010954 030B 0C0D 0E0F 1011 1213+  @valve1:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, afBack, 2
00010962 0014 1211 0F0D 0BFE 01     @valve2:	dc.b 0,	$14, $12, $11, $F, $D, $B, afBack, 1
0001096C 00                         		even
0001096C 00                         		even
0001096C                            Map_Flame:	include	"_maps\Flamethrower.asm"
0001096C                            ; ---------------------------------------------------------------------------
0001096C                            ; Sprite mappings - flame thrower (SBZ)
0001096C                            ; ---------------------------------------------------------------------------
0001096C                            Map_Flame_internal:
0001096C 0000                       		dc.w @pipe1-Map_Flame_internal
0001096E 0000                       		dc.w @pipe2-Map_Flame_internal
00010970 0000                       		dc.w @pipe3-Map_Flame_internal
00010972 0000                       		dc.w @pipe4-Map_Flame_internal
00010974 0000                       		dc.w @pipe5-Map_Flame_internal
00010976 0000                       		dc.w @pipe6-Map_Flame_internal
00010978 0000                       		dc.w @pipe7-Map_Flame_internal
0001097A 0000                       		dc.w @pipe8-Map_Flame_internal
0001097C 0000                       		dc.w @pipe9-Map_Flame_internal
0001097E 0000                       		dc.w @pipe10-Map_Flame_internal
00010980 0000                       		dc.w @pipe11-Map_Flame_internal
00010982 0000                       		dc.w @valve1-Map_Flame_internal
00010984 0000                       		dc.w @valve2-Map_Flame_internal
00010986 0000                       		dc.w @valve3-Map_Flame_internal
00010988 0000                       		dc.w @valve4-Map_Flame_internal
0001098A 0000                       		dc.w @valve5-Map_Flame_internal
0001098C 0000                       		dc.w @valve6-Map_Flame_internal
0001098E 0000                       		dc.w @valve7-Map_Flame_internal
00010990 0000                       		dc.w @valve8-Map_Flame_internal
00010992 0000                       		dc.w @valve9-Map_Flame_internal
00010994 0000                       		dc.w @valve10-Map_Flame_internal
00010996 0000                       		dc.w @valve11-Map_Flame_internal
00010998 01                         @pipe1:		dc.b 1
00010999 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB ; broken pipe style flamethrower
0001099E 02                         @pipe2:		dc.b 2
0001099F 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000109A4 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000109A9 02                         @pipe3:		dc.b 2
000109AA 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000109AF 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000109B4 03                         @pipe4:		dc.b 3
000109B5 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
000109BA 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000109BF 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000109C4 03                         @pipe5:		dc.b 3
000109C5 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000109CA 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000109CF 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000109D4 04                         @pipe6:		dc.b 4
000109D5 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
000109DA 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
000109DF 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000109E4 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000109E9 04                         @pipe7:		dc.b 4
000109EA 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
000109EF 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000109F4 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000109F9 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000109FE 05                         @pipe8:		dc.b 5
000109FF F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
00010A04 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010A09 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010A0E 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010A13 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010A18 05                         @pipe9:		dc.b 5
00010A19 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010A1E 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00010A23 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010A28 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010A2D 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010A32 06                         @pipe10:	dc.b 6
00010A33 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
00010A38 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
00010A3D 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010A42 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
00010A47 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010A4C 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010A51 06                         @pipe11:	dc.b 6
00010A52 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
00010A57 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010A5C 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
00010A61 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010A66 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010A6B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010A70 01                         @valve1:	dc.b 1
00010A71 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9 ; valve style flamethrower
00010A76 02                         @valve2:	dc.b 2
00010A77 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010A7C 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010A81 02                         @valve3:	dc.b 2
00010A82 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010A87 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010A8C 03                         @valve4:	dc.b 3
00010A8D 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010A92 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010A97 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010A9C 03                         @valve5:	dc.b 3
00010A9D 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010AA2 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010AA7 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010AAC 04                         @valve6:	dc.b 4
00010AAD 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010AB2 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010AB7 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010ABC 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010AC1 04                         @valve7:	dc.b 4
00010AC2 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00010AC7 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010ACC 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010AD1 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010AD6 05                         @valve8:	dc.b 5
00010AD7 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
00010ADC 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010AE1 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010AE6 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010AEB 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010AF0 05                         @valve9:	dc.b 5
00010AF1 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010AF6 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00010AFB 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010B00 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010B05 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010B0A 06                         @valve10:	dc.b 6
00010B0B E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
00010B10 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
00010B15 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010B1A 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
00010B1F 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010B24 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010B29 06                         @valve11:	dc.b 6
00010B2A E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
00010B2F F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010B34 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
00010B39 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010B3E 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010B43 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010B48                            		even
00010B48                            		even
00010B48                            
00010B48                            		include	"_incObj\46 MZ Bricks.asm"
00010B48                            ; ---------------------------------------------------------------------------
00010B48                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
00010B48                            ; ---------------------------------------------------------------------------
00010B48                            
00010B48                            MarbleBrick:
00010B48 7000                       		moveq	#0,d0
00010B4A 1028 0024                  		move.b	obRoutine(a0),d0
00010B4E 323B 0000                  		move.w	Brick_Index(pc,d0.w),d1
00010B52 4EFB 1000                  		jmp	Brick_Index(pc,d1.w)
00010B56                            ; ===========================================================================
00010B56 0000                       Brick_Index:	dc.w Brick_Main-Brick_Index
00010B58 0000                       		dc.w Brick_Action-Brick_Index
00010B5A                            
00010B5A =00000030                  brick_origY:	equ $30
00010B5A                            ; ===========================================================================
00010B5A                            
00010B5A                            Brick_Main:	; Routine 0
00010B5A 5428 0024                  		addq.b	#2,obRoutine(a0)
00010B5E 117C 000F 0016             		move.b	#$F,obHeight(a0)
00010B64 117C 000F 0017             		move.b	#$F,obWidth(a0)
00010B6A 217C 0000 0000 0004        		move.l	#Map_Brick,obMap(a0)
00010B72 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00010B78 117C 0004 0001             		move.b	#4,obRender(a0)
00010B7E 317C 0180 0018             		move.w	#$180,obPriority(a0)
00010B84 117C 0010 0014             		move.b	#$10,obActWid(a0)
00010B8A 3168 000C 0030             		move.w	obY(a0),brick_origY(a0)
00010B90 317C 05C0 0032             		move.w	#$5C0,$32(a0)
00010B96                            
00010B96                            Brick_Action:	; Routine 2
00010B96 4A28 0001                  		tst.b	obRender(a0)
00010B9A 6A00                       		bpl.s	@chkdel
00010B9C 7000                       		moveq	#0,d0
00010B9E 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00010BA2 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
00010BA6 D040                       		add.w	d0,d0
00010BA8 323B 0000                  		move.w	Brick_TypeIndex(pc,d0.w),d1
00010BAC 4EBB 1000                  		jsr	Brick_TypeIndex(pc,d1.w)
00010BB0 323C 001B                  		move.w	#$1B,d1
00010BB4 343C 0010                  		move.w	#$10,d2
00010BB8 363C 0011                  		move.w	#$11,d3
00010BBC 3828 0008                  		move.w	obX(a0),d4
00010BC0 6100 0000                  		bsr.w	SolidObject
00010BC4                            
00010BC4                            	@chkdel:
00010BE2 6000 ED94                  			bra.w	DisplaySprite
00010BE6                            ; ===========================================================================
00010BE6 0000                       Brick_TypeIndex:dc.w Brick_Type00-Brick_TypeIndex
00010BE8 0000                       		dc.w Brick_Type01-Brick_TypeIndex
00010BEA 0000                       		dc.w Brick_Type02-Brick_TypeIndex
00010BEC 0000                       		dc.w Brick_Type03-Brick_TypeIndex
00010BEE 0000                       		dc.w Brick_Type04-Brick_TypeIndex
00010BF0                            ; ===========================================================================
00010BF0                            
00010BF0                            Brick_Type00:
00010BF0 4E75                       		rts	
00010BF2                            ; ===========================================================================
00010BF2                            
00010BF2                            Brick_Type02:
00010BF2 3038 D008                  		move.w	(v_player+obX).w,d0
00010BF6 9068 0008                  		sub.w	obX(a0),d0
00010BFA 6400                       		bcc.s	loc_E888
00010BFC 4440                       		neg.w	d0
00010BFE                            
00010BFE                            loc_E888:
00010BFE 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
00010C02 6400                       		bcc.s	Brick_Type01	; if not, resume wobbling
00010C04 117C 0003 0028             		move.b	#3,obSubtype(a0)	; if yes, make the block fall
00010C0A                            
00010C0A                            Brick_Type01:
00010C0A 7000                       		moveq	#0,d0
00010C0C 1038 FE74                  		move.b	(v_oscillate+$16).w,d0
00010C10 0828 0003 0028             		btst	#3,obSubtype(a0)
00010C16 6700                       		beq.s	loc_E8A8
00010C18 4440                       		neg.w	d0
00010C1A 0640 0010                  		addi.w	#$10,d0
00010C1E                            
00010C1E                            loc_E8A8:
00010C1E 3228 0030                  		move.w	brick_origY(a0),d1
00010C22 9240                       		sub.w	d0,d1
00010C24 3141 000C                  		move.w	d1,obY(a0)	; update the block's position to make it wobble
00010C28 4E75                       		rts	
00010C2A                            ; ===========================================================================
00010C2A                            
00010C2A                            Brick_Type03:
00010C2A 6100 ED38                  		bsr.w	SpeedToPos
00010C2E 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase falling speed
00010C34 6100 0000                  		bsr.w	ObjFloorDist
00010C38 4A41                       		tst.w	d1		; has the block	hit the	floor?
00010C3A 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
00010C3E D368 000C                  		add.w	d1,obY(a0)
00010C42 4268 0012                  		clr.w	obVelY(a0)	; stop the block falling
00010C46 3168 000C 0030             		move.w	obY(a0),brick_origY(a0)
00010C4C 117C 0004 0028             		move.b	#4,obSubtype(a0)
00010C52 3011                       		move.w	(a1),d0
00010C54 0240 03FF                  		andi.w	#$3FF,d0
00010C58 0C40 016A                  			cmpi.w	#$16A,d0
00010C5C 6400                       		bcc.s	locret_E8EE
00010C5E 117C 0000 0028             		move.b	#0,obSubtype(a0)
00010C64                            
00010C64                            locret_E8EE:
00010C64 4E75                       		rts	
00010C66                            ; ===========================================================================
00010C66                            
00010C66                            Brick_Type04:
00010C66 7000                       		moveq	#0,d0
00010C68 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
00010C6C E648                       		lsr.w	#3,d0
00010C6E 3228 0030                  		move.w	brick_origY(a0),d1
00010C72 9240                       		sub.w	d0,d1
00010C74 3141 000C                  		move.w	d1,obY(a0)	; make the block wobble
00010C78 4E75                       		rts	
00010C78 4E75                       		rts	
00010C7A                            Map_Brick:	include	"_maps\MZ Bricks.asm"
00010C7A                            ; ---------------------------------------------------------------------------
00010C7A                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
00010C7A                            ; ---------------------------------------------------------------------------
00010C7A                            Map_Brick_internal:
00010C7A 0000                       		dc.w @brick-Map_Brick_internal
00010C7C 01                         @brick:		dc.b 1
00010C7D F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
00010C82                            		even
00010C82                            		even
00010C82                            
00010C82                            		include	"_incObj\12 Light.asm"
00010C82                            ; ---------------------------------------------------------------------------
00010C82                            ; Object 12 - lamp (SYZ)
00010C82                            ; ---------------------------------------------------------------------------
00010C82                            
00010C82                            SpinningLight:
00010C82 7000                       		moveq	#0,d0
00010C84 1028 0024                  		move.b	obRoutine(a0),d0
00010C88 323B 0000                  		move.w	Light_Index(pc,d0.w),d1
00010C8C 4EFB 1000                  		jmp	Light_Index(pc,d1.w)
00010C90                            ; ===========================================================================
00010C90 0000                       Light_Index:	dc.w Light_Main-Light_Index
00010C92 0000                       		dc.w Light_Animate-Light_Index
00010C94                            ; ===========================================================================
00010C94                            
00010C94                            Light_Main:	; Routine 0
00010C94 5428 0024                  		addq.b	#2,obRoutine(a0)
00010C98 217C 0000 0000 0004        		move.l	#Map_Light,obMap(a0)
00010CA0 317C 0000 0002             		move.w	#0,obGfx(a0)
00010CA6 117C 0004 0001             		move.b	#4,obRender(a0)
00010CAC 117C 0010 0014             		move.b	#$10,obActWid(a0)
00010CB2 317C 0300 0018             		move.w	#$300,obPriority(a0)
00010CB8                            
00010CB8                            Light_Animate:	; Routine 2
00010CB8 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00010CBC 6A00                       		bpl.s	@chkdel
00010CBE 117C 000C 001E             		move.b	#12,obTimeFrame(a0)
00010CC4 5228 001A                  		addq.b	#1,obFrame(a0)
00010CC8 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)
00010CCE 6500                       		bcs.s	@chkdel
00010CD0 117C 0000 001A             		move.b	#0,obFrame(a0)
00010CD6                            
00010CD6                            	@chkdel:
00010CF4 6000 EC82                  		bra.w	DisplaySprite
00010CF4 6000 EC82                  		bra.w	DisplaySprite
00010CF8                            Map_Light	include	"_maps\Light.asm"
00010CF8                            ; --------------------------------------------------------------------------------
00010CF8                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00010CF8                            ; --------------------------------------------------------------------------------
00010CF8                            
00010CF8                            SME_FBl1X:	
00010CF8 0000 0000                  		dc.w SME_FBl1X_8-SME_FBl1X, SME_FBl1X_22-SME_FBl1X	
00010CFC 0000 0000                  		dc.w SME_FBl1X_3C-SME_FBl1X, SME_FBl1X_5B-SME_FBl1X	
00010D00 05                         SME_FBl1X_8:	dc.b 5	
00010D01 E004 006D 00               		dc.b $E0, 4, 0, $6D, 0	
00010D06 E80C 006F F8               		dc.b $E8, $C, 0, $6F, $F8	
00010D0B F00C 0073 F8               		dc.b $F0, $C, 0, $73, $F8	
00010D10 F800 0090 00               		dc.b $F8, 0, 0, $90, 0	
00010D15 F800 0890 08               		dc.b $F8, 0, 8, $90, 8	
00010D1A 05                         SME_FBl1X_22:	dc.b 5	
00010D1B E004 0077 00               		dc.b $E0, 4, 0, $77, 0	
00010D20 E804 0079 00               		dc.b $E8, 4, 0, $79, 0	
00010D25 E800 007B 10               		dc.b $E8, 0, 0, $7B, $10	
00010D2A F008 007C F8               		dc.b $F0, 8, 0, $7C, $F8	
00010D2F F804 0091 00               		dc.b $F8, 4, 0, $91, 0	
00010D34 06                         SME_FBl1X_3C:	dc.b 6	
00010D35 E000 007F 00               		dc.b $E0, 0, 0, $7F, 0	
00010D3A E000 0078 08               		dc.b $E0, 0, 0, $78, 8	
00010D3F E80C 0080 F8               		dc.b $E8, $C, 0, $80, $F8	
00010D44 F00C 0084 F8               		dc.b $F0, $C, 0, $84, $F8	
00010D49 F800 0093 08               		dc.b $F8, 0, 0, $93, 8	
00010D4E F800 0091 00               		dc.b $F8, 0, 0, $91, 0	
00010D53 05                         SME_FBl1X_5B:	dc.b 5	
00010D54 E004 0088 00               		dc.b $E0, 4, 0, $88, 0	
00010D59 E808 008A F8               		dc.b $E8, 8, 0, $8A, $F8	
00010D5E F008 008D 00               		dc.b $F0, 8, 0, $8D, 0	
00010D63 F800 0094 00               		dc.b $F8, 0, 0, $94, 0	
00010D68 F800 0890 08               		dc.b $F8, 0, 8, $90, 8	
00010D6E 00                         		even
00010D6E 00                         		even
00010D6E                            		include	"_incObj\47 Bumper.asm"
00010D6E                            ; ---------------------------------------------------------------------------
00010D6E                            ; Object 47 - pinball bumper (SYZ)
00010D6E                            ; ---------------------------------------------------------------------------
00010D6E                            
00010D6E                            Bumper:
00010D6E 7000                       		moveq	#0,d0
00010D70 1028 0024                  		move.b	obRoutine(a0),d0
00010D74 323B 0000                  		move.w	Bump_Index(pc,d0.w),d1
00010D78 4EFB 1000                  		jmp	Bump_Index(pc,d1.w)
00010D7C                            ; ===========================================================================
00010D7C 0000                       Bump_Index:	dc.w Bump_Main-Bump_Index
00010D7E 0000                       		dc.w Bump_Hit-Bump_Index
00010D80                            ; ===========================================================================
00010D80                            
00010D80                            Bump_Main:	; Routine 0
00010D80 5428 0024                  		addq.b	#2,obRoutine(a0)
00010D84 217C 0000 0000 0004        		move.l	#Map_Bump,obMap(a0)
00010D8C 317C 0380 0002             		move.w	#$380,obGfx(a0)
00010D92 117C 0004 0001             		move.b	#4,obRender(a0)
00010D98 117C 0010 0014             		move.b	#$10,obActWid(a0)
00010D9E 317C 0080 0018             		move.w	#$80,obPriority(a0)
00010DA4 117C 00D7 0020             		move.b	#$D7,obColType(a0)
00010DAA                            
00010DAA                            Bump_Hit:	; Routine 2
00010DAA 4A28 0021                  		tst.b	obColProp(a0)	; has Sonic touched the	bumper?
00010DAE 6700 0000                  		beq.w	@display	; if not, branch
00010DB2 4228 0021                  		clr.b	obColProp(a0)
00010DB6 43F8 D000                  		lea	(v_player).w,a1
00010DBA 3228 0008                  		move.w	obX(a0),d1
00010DBE 3428 000C                  		move.w	obY(a0),d2
00010DC2 9269 0008                  		sub.w	obX(a1),d1
00010DC6 9469 000C                  		sub.w	obY(a1),d2
00010DCA 4EB9 0000 3CC4             		jsr	(CalcAngle).l
00010DD0 4EB9 0000 3A32             		jsr	(CalcSine).l
00010DD6 C3FC F900                  		muls.w	#-$700,d1
00010DDA E081                       		asr.l	#8,d1
00010DDC 3341 0010                  		move.w	d1,obVelX(a1)	; bounce Sonic away
00010DE0 C1FC F900                  		muls.w	#-$700,d0
00010DE4 E080                       		asr.l	#8,d0
00010DE6 3340 0012                  		move.w	d0,obVelY(a1)	; bounce Sonic away
00010DEA 08E9 0001 0022             		bset	#1,obStatus(a1)
00010DF0 08A9 0004 0022             		bclr	#4,obStatus(a1)
00010DF6 08A9 0005 0022             		bclr	#5,obStatus(a1)
00010DFC 4229 003C                  		clr.b	$3C(a1)
00010E00 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "hit" animation
00010E10 45F8 FC00                  		lea	(v_objstate).w,a2
00010E14 7000                       		moveq	#0,d0
00010E16 1028 0023                  		move.b	obRespawnNo(a0),d0
00010E1A 6700                       		beq.s	@addscore
00010E1C 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit 10 times?
00010E22 6400                       		bcc.s	@display	; if yes, Sonic	gets no	points
00010E24 5232 0002                  		addq.b	#1,2(a2,d0.w)
00010E28                            
00010E28                            	@addscore:
00010E28 7001                       		moveq	#1,d0
00010E2A 4EB9 0000 0000             		jsr	(AddPoints).l	; add 10 to score
00010E30 6100 EFD2                  		bsr.w	FindFreeObj
00010E34 6600                       		bne.s	@display
00010E36 12BC 0029                  		move.b	#id_Points,0(a1) ; load points object
00010E3A 3368 0008 0008             		move.w	obX(a0),obX(a1)
00010E40 3368 000C 000C             		move.w	obY(a0),obY(a1)
00010E46 137C 0004 001A             		move.b	#4,obFrame(a1)
00010E4C                            
00010E4C                            	@display:
00010E4C 43F9 0000 0000             		lea	(Ani_Bump).l,a1
00010E52 6100 BBD0                  		bsr.w	AnimateSprite
00010E72 6000 EB04                  		bra.w	DisplaySprite
00010E76                            ; ===========================================================================
00010E76                            
00010E76                            @resetcount:
00010E76 45F8 FC00                  		lea	(v_objstate).w,a2
00010E7A 7000                       		moveq	#0,d0
00010E7C 1028 0023                  		move.b	obRespawnNo(a0),d0
00010E80 6700                       		beq.s	@delete
00010E82 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010E88                            
00010E88                            	@delete:
00010E88 6000 EB2E                  		bra.w	DeleteObject
00010E88 6000 EB2E                  		bra.w	DeleteObject
00010E8C                            		include	"_anim\Bumper.asm"
00010E8C                            ; ---------------------------------------------------------------------------
00010E8C                            ; Animation script - flamethrower (SBZ)
00010E8C                            ; ---------------------------------------------------------------------------
00010E8C 0000                       Ani_Bump:	dc.w byte_EAF4-Ani_Bump
00010E8E 0000                       		dc.w byte_EAF8-Ani_Bump
00010E90 0F00 FF                    byte_EAF4:	dc.b $F, 0, afEnd
00010E94 00                         		even
00010E94 0301 0201 02FD 00          byte_EAF8:	dc.b 3,	1, 2, 1, 2, afChange, 0
00010E9C 00                         		even
00010E9C 00                         		even
00010E9C                            Map_Bump:	include	"_maps\Bumper.asm"
00010E9C                            ; ---------------------------------------------------------------------------
00010E9C                            ; Sprite mappings - pinball bumper (SYZ)
00010E9C                            ; ---------------------------------------------------------------------------
00010E9C                            Map_Bump_internal:
00010E9C 0000                       		dc.w @normal-Map_Bump_internal
00010E9E 0000                       		dc.w @bumped1-Map_Bump_internal
00010EA0 0000                       		dc.w @bumped2-Map_Bump_internal
00010EA2 02                         @normal:	dc.b 2
00010EA3 F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
00010EA8 F007 0800 00               		dc.b $F0, 7, 8,	0, 0
00010EAD 02                         @bumped1:	dc.b 2
00010EAE F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
00010EB3 F402 0808 04               		dc.b $F4, 2, 8,	8, 4
00010EB8 02                         @bumped2:	dc.b 2
00010EB9 F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
00010EBE F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
00010EC4 00                         		even
00010EC4 00                         		even
00010EC4                            
00010EC4                            		include	"_incObj\0D Signpost.asm" ; includes "GotThroughAct" subroutine
00010EC4                            ; ---------------------------------------------------------------------------
00010EC4                            ; Object 0D - signpost at the end of a level
00010EC4                            ; ---------------------------------------------------------------------------
00010EC4                            
00010EC4                            Signpost:
00010EC4 7000                       		moveq	#0,d0
00010EC6 1028 0024                  		move.b	obRoutine(a0),d0
00010ECA 323B 0000                  		move.w	Sign_Index(pc,d0.w),d1
00010ECE 4EBB 1000                  		jsr	Sign_Index(pc,d1.w)
00010ED2 43F9 0000 0000             		lea	(Ani_Sign).l,a1
00010ED8 6100 BB4A                  		bsr.w	AnimateSprite
00010EDC 6100 EA9A                  		bsr.w	DisplaySprite
00010EFE 4E75                       		rts	
00010F00                            ; ===========================================================================
00010F00 0000                       Sign_Index:	dc.w Sign_Main-Sign_Index
00010F02 0000                       		dc.w Sign_Touch-Sign_Index
00010F04 0000                       		dc.w Sign_Spin-Sign_Index
00010F06 0000                       		dc.w Sign_SonicRun-Sign_Index
00010F08 0000                       		dc.w Sign_Exit-Sign_Index
00010F0A                            
00010F0A =00000030                  spintime:	equ $30		; time for signpost to spin
00010F0A =00000032                  sparkletime:	equ $32		; time between sparkles
00010F0A =00000034                  sparkle_id:	equ $34		; counter to keep track of sparkles
00010F0A                            ; ===========================================================================
00010F0A                            
00010F0A                            Sign_Main:	; Routine 0
00010F0A 5428 0024                  		addq.b	#2,obRoutine(a0)
00010F0E 217C 0000 0000 0004        		move.l	#Map_Sign,obMap(a0)
00010F16 317C 0680 0002             		move.w	#$680,obGfx(a0)
00010F1C 117C 0004 0001             		move.b	#4,obRender(a0)
00010F22 117C 0018 0014             		move.b	#$18,obActWid(a0)
00010F28 317C 0200 0018             		move.w	#$200,obPriority(a0)
00010F2E                            
00010F2E                            Sign_Touch:	; Routine 2
00010F2E 3038 D008                  		move.w	(v_player+obX).w,d0
00010F32 9068 0008                  		sub.w	obX(a0),d0
00010F36 6500                       		bcs.s	@notouch
00010F38 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
00010F3C 6400                       		bcc.s	@notouch	; if not, branch
00010F3E 11FC 0001 F7AA             		move.b  #1,($FFFFF7AA).w ; Lock the screen
00010F4E 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
00010F52 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w ; lock screen position
00010F58 5428 0024                  		addq.b	#2,obRoutine(a0)
00010F5C 11FC 0001 F5C2             		move.b  #1,($FFFFF5C2).w ; Set victory animation flag
00010F62                            
00010F62                            	@notouch:
00010F62 4E75                       		rts	
00010F64                            	
00010F64                            ; ===========================================================================
00010F64                            
00010F64                            Sign_Spin:	; Routine 4
00010F64 5368 0030                  		subq.w	#1,spintime(a0)	; subtract 1 from spin time
00010F68 6A00                       		bpl.s	@chksparkle	; if time remains, branch
00010F6A 317C 003C 0030             		move.w	#60,spintime(a0) ; set spin cycle time to 1 second
00010F70 5228 001C                  		addq.b	#1,obAnim(a0)	; next spin cycle
00010F74 0C28 0003 001C             		cmpi.b	#3,obAnim(a0)	; have 3 spin cycles completed?
00010F7A 6600                       		bne.s	@chksparkle	; if not, branch
00010F7C 5428 0024                  		addq.b	#2,obRoutine(a0)
00010F80                            
00010F80                            	@chksparkle:
00010F80 5368 0032                  		subq.w	#1,sparkletime(a0) ; subtract 1 from time delay
00010F84 6A00                       		bpl.s	@fail		; if time remains, branch
00010F86 317C 000B 0032             		move.w	#$B,sparkletime(a0) ; set time between sparkles to $B frames
00010F8C 7000                       		moveq	#0,d0
00010F8E 1028 0034                  		move.b	sparkle_id(a0),d0 ; get sparkle id
00010F92 5428 0034                  		addq.b	#2,sparkle_id(a0) ; increment sparkle counter
00010F96 0228 000E 0034             		andi.b	#$E,sparkle_id(a0)
00010F9C 45FB 0000                  		lea	Sign_SparkPos(pc,d0.w),a2 ; load sparkle position data
00010FA0 6100 EE62                  		bsr.w	FindFreeObj
00010FA4 6600                       		bne.s	@fail
00010FA6 12BC 0025                  		move.b	#id_Rings,0(a1)	; load rings object
00010FAA 137C 0006 0024             		move.b	#id_Ring_Sparkle,obRoutine(a1) ; jump to ring sparkle subroutine
00010FB0 101A                       		move.b	(a2)+,d0
00010FB2 4880                       		ext.w	d0
00010FB4 D068 0008                  		add.w	obX(a0),d0
00010FB8 3340 0008                  		move.w	d0,obX(a1)
00010FBC 101A                       		move.b	(a2)+,d0
00010FBE 4880                       		ext.w	d0
00010FC0 D068 000C                  		add.w	obY(a0),d0
00010FC4 3340 000C                  		move.w	d0,obY(a1)
00010FC8 237C 0000 BFD4 0004        		move.l	#Map_Ring,obMap(a1)
00010FD0 337C 2798 0002             		move.w	#$2798,obGfx(a1)
00010FD6 137C 0004 0001             		move.b	#4,obRender(a1)
00010FDC 337C 0100 0018             		move.w	#$100,obPriority(a1)
00010FE2 137C 0008 0014             		move.b	#8,obActWid(a1)
00010FE8                            
00010FE8                            	@fail:
00010FE8 4E75                       		rts	
00010FEA                            ; ===========================================================================
00010FEA E8F0                       Sign_SparkPos:	dc.b -$18,-$10		; x-position, y-position
00010FEC 0808                       		dc.b	8,   8
00010FEE F000                       		dc.b -$10,   0
00010FF0 18F8                       		dc.b  $18,  -8
00010FF2 00F8                       		dc.b	0,  -8
00010FF4 1000                       		dc.b  $10,   0
00010FF6 E808                       		dc.b -$18,   8
00010FF8 1810                       		dc.b  $18, $10
00010FFA                            ; ===========================================================================
00010FFA                            
00010FFA                            Sign_SonicRun:	; Routine 6
00010FFA 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	on?
00010FFE 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
00011002 11FC 0001 F5C2             		move.b  #1,($FFFFF5C2).w ; Set victory animation flag
00011008                            		
00011008                            
00011008                            	loc_EC86:
00011008 5428 0024                  		addq.b	#2,obRoutine(a0)
0001100C                            
0001100C                            ; ---------------------------------------------------------------------------
0001100C                            ; Subroutine to	set up bonuses at the end of an	act
0001100C                            ; ---------------------------------------------------------------------------
0001100C                            
0001100C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001100C                            
0001100C                            
0001100C                            GotThroughAct:
0001100C 4A38 D5C0                  		tst.b	(v_objspace+$5C0).w
00011010 6600                       		bne.s	locret_ECEE
00011012 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w
00011018 4238 FE2D                  		clr.b	(v_invinc).w	; disable invincibility
0001101C 4238 FE2E                  		clr.b	(v_shoes).w	; clear speed shoes
00011020 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
00011024 11FC 003A D5C0             		move.b	#id_GotThroughCard,(v_objspace+$5C0).w
0001102A 7000                       		moveq	#plcid_TitleCard,d0
0001102C 4EB9 0000 171C             		jsr	(NewPLC).l	; load title card patterns
00011032 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w
00011038 7000                       		moveq	#0,d0
0001103A 1038 FE23                  		move.b	(v_timemin).w,d0
0001103E C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
00011042 7200                       		moveq	#0,d1
00011044 1238 FE24                  		move.b	(v_timesec).w,d1
00011048 D041                       		add.w	d1,d0		; add up your time
0001104A 80FC 000F                  		divu.w	#15,d0		; divide by 15
0001104E 7214                       		moveq	#$14,d1
00011050 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
00011052 6500                       		bcs.s	hastimebonus	; if not, branch
00011054 3001                       		move.w	d1,d0		; use minimum time bonus (0)
00011056                            
00011056                            	hastimebonus:
00011056 D040                       		add.w	d0,d0
00011058 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),(v_timebonus).w ; set time bonus
0001105E 3038 FE20                  		move.w	(v_rings).w,d0	; load number of rings
00011062 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
00011066 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set ring bonus
00011074 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w ; update rings counter
0001107A                            
0001107A                            locret_ECEE:
0001107A 4E75                       		rts	
0001107C                            
0001107C                            ; End of function GotThroughAct
0001107C                            
0001107C                            ; ===========================================================================
0001107C 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
00011090 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
000110A6                            ; ===========================================================================
000110A6                            
000110A6                            Sign_Exit:	; Routine 8
000110A6 4E75                       		rts	
000110A8                            
000110A8                            ; ---------------------------------------------------------------------------
000110A8                            ; Subroutine to	set up bonuses at the end of an	zone
000110A8                            ; ---------------------------------------------------------------------------
000110A8                            
000110A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000110A8                            
000110A8                            
000110A8                            GotThroughAct1:
000110A8 4A38 D5C0                  		tst.b	(v_objspace+$5C0).w
000110AC 6600                       		bne.s	locret_ECEE1
000110AE 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w
000110B4 4238 FE2D                  		clr.b	(v_invinc).w	; disable invincibility
000110B8 4238 FE2E                  		clr.b	(v_shoes).w	; clear speed shoes
000110BC 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
000110C0 11FC 003A D5C0             		move.b	#id_GotThroughCard,(v_objspace+$5C0).w
000110C6 7000                       		moveq	#plcid_TitleCard,d0
000110C8 4EB9 0000 171C             		jsr	(NewPLC).l	; load title card patterns
000110CE 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w
000110D4 7000                       		moveq	#0,d0
000110D6 1038 FE23                  		move.b	(v_timemin).w,d0
000110DA C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
000110DE 7200                       		moveq	#0,d1
000110E0 1238 FE24                  		move.b	(v_timesec).w,d1
000110E4 D041                       		add.w	d1,d0		; add up your time
000110E6 80FC 000F                  		divu.w	#15,d0		; divide by 15
000110EA 7214                       		moveq	#$14,d1
000110EC B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
000110EE 6500 0000                  		bcs.w	hastimebonus2	; if not, branch
000110F2 3001                       		move.w	d1,d0		; use minimum time bonus (0)
000110F4                            
000110F4                            	hastimebonus2:
000110F4 D040                       		add.w	d0,d0
000110F6 31FB 0000 F7D2             		move.w	TimeBonuses1(pc,d0.w),(v_timebonus).w ; set time bonus
000110FC 3038 FE20                  		move.w	(v_rings).w,d0	; load number of rings
00011100 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
00011104 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set ring bonus
00011112 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w ; update rings counter
00011118                            
00011118                            locret_ECEE1:
00011118 4E75                       		rts	
0001111A                            
0001111A                            ; End of function GotThroughAct		
0001111A                            
0001111A 1388 1388 03E8 01F4 0190+  TimeBonuses1:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0001112E 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0001112E 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
00011144                            		include	"_anim\Signpost.asm"
00011144                            ; ---------------------------------------------------------------------------
00011144                            ; Animation script - signpost
00011144                            ; ---------------------------------------------------------------------------
00011144 0000                       Ani_Sign:	dc.w @eggman-Ani_Sign
00011146 0000                       		dc.w @spin1-Ani_Sign
00011148 0000                       		dc.w @spin2-Ani_Sign
0001114A 0000                       		dc.w @sonic-Ani_Sign
0001114C 0F00 FF                    @eggman:	dc.b $F, 0, afEnd
00011150 00                         		even
00011150 0100 0102 03FF             @spin1:		dc.b 1,	0, 1, 2, 3, afEnd
00011156 0104 0102 03FF             @spin2:		dc.b 1,	4, 1, 2, 3, afEnd
0001115C 0F04 FF                    @sonic:		dc.b $F, 4, afEnd
00011160 00                         		even
00011160 00                         		even
00011160                            Map_Sign:	include	"_maps\Signpost.asm"
00011160                            ; --------------------------------------------------------------------------------
00011160                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00011160                            ; --------------------------------------------------------------------------------
00011160                            
00011160                            SME_KvSue:	
00011160 0000 0000                  		dc.w SME_KvSue_A-SME_KvSue, SME_KvSue_1F-SME_KvSue	
00011164 0000 0000                  		dc.w SME_KvSue_2F-SME_KvSue, SME_KvSue_3F-SME_KvSue	
00011168 0000                       		dc.w SME_KvSue_4F-SME_KvSue	
0001116A 04                         SME_KvSue_A:	dc.b 4	
0001116B F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8	
00011170 F00B 0800 00               		dc.b $F0, $B, 8, 0, 0	
00011175 1001 0038 FC               		dc.b $10, 1, 0, $38, $FC	
0001117A 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
0001117F 03                         SME_KvSue_1F:	dc.b 3	
00011180 F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0	
00011185 1001 0038 FC               		dc.b $10, 1, 0, $38, $FC	
0001118A 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
0001118F 03                         SME_KvSue_2F:	dc.b 3	
00011190 F003 001C FC               		dc.b $F0, 3, 0, $1C, $FC	
00011195 1001 0838 FC               		dc.b $10, 1, 8, $38, $FC	
0001119A 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
0001119F 03                         SME_KvSue_3F:	dc.b 3	
000111A0 F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0	
000111A5 1001 0838 FC               		dc.b $10, 1, 8, $38, $FC	
000111AA 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
000111AF 04                         SME_KvSue_4F:	dc.b 4	
000111B0 F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8	
000111B5 F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0	
000111BA 1001 0038 FC               		dc.b $10, 1, 0, $38, $FC	
000111BF 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
000111C4                            		even
000111C4                            		even
000111C4                            
000111C4                            		include	"_incObj\4C & 4D Lava Geyser Maker.asm"
000111C4                            ; ---------------------------------------------------------------------------
000111C4                            ; Object 4C - lava geyser / lavafall producer (MZ)
000111C4                            ; ---------------------------------------------------------------------------
000111C4                            
000111C4                            GeyserMaker:
000111C4 7000                       		moveq	#0,d0
000111C6 1028 0024                  		move.b	obRoutine(a0),d0
000111CA 323B 0000                  		move.w	GMake_Index(pc,d0.w),d1
000111CE 4EBB 1000                  		jsr	GMake_Index(pc,d1.w)
000111D2 6000 0000                  		bra.w	Geyser_ChkDel
000111D6                            ; ===========================================================================
000111D6 0000                       GMake_Index:	dc.w GMake_Main-GMake_Index
000111D8 0000                       		dc.w GMake_Wait-GMake_Index
000111DA 0000                       		dc.w GMake_ChkType-GMake_Index
000111DC 0000                       		dc.w GMake_MakeLava-GMake_Index
000111DE 0000                       		dc.w GMake_Display-GMake_Index
000111E0 0000                       		dc.w GMake_Delete-GMake_Index
000111E2                            
000111E2 =00000034                  gmake_time:	equ $34		; time delay (2 bytes)
000111E2 =00000032                  gmake_timer:	equ $32		; current time remaining (2 bytes)
000111E2 =0000003C                  gmake_parent:	equ $3C		; address of parent object
000111E2                            ; ===========================================================================
000111E2                            
000111E2                            GMake_Main:	; Routine 0
000111E2 5428 0024                  		addq.b	#2,obRoutine(a0)
000111E6 217C 0000 0000 0004        		move.l	#Map_Geyser,obMap(a0)
000111EE 317C E3A8 0002             		move.w	#$E3A8,obGfx(a0)
000111F4 117C 0004 0001             		move.b	#4,obRender(a0)
000111FA 317C 0080 0018             		move.w	#$80,obPriority(a0)
00011200 117C 0038 0014             		move.b	#$38,obActWid(a0)
00011206 317C 0078 0034             		move.w	#120,gmake_time(a0) ; set time delay to 2 seconds
0001120C                            
0001120C                            GMake_Wait:	; Routine 2
0001120C 5368 0032                  		subq.w	#1,gmake_timer(a0) ; decrement timer
00011210 6A00                       		bpl.s	@cancel		; if time remains, branch
00011212                            
00011212 3168 0034 0032             		move.w	gmake_time(a0),gmake_timer(a0) ; reset timer
00011218 3038 D00C                  		move.w	(v_player+obY).w,d0
0001121C 3228 000C                  		move.w	obY(a0),d1
00011220 B041                       		cmp.w	d1,d0
00011222 6400                       		bcc.s	@cancel
00011224 0441 0170                  		subi.w	#$170,d1
00011228 B041                       		cmp.w	d1,d0
0001122A 6500                       		bcs.s	@cancel
0001122C 5428 0024                  		addq.b	#2,obRoutine(a0) ; if Sonic is within range, goto GMake_ChkType
00011230                            
00011230                            	@cancel:
00011230 4E75                       		rts	
00011232                            ; ===========================================================================
00011232                            
00011232                            GMake_MakeLava:	; Routine 6
00011232 5428 0024                  		addq.b	#2,obRoutine(a0)
00011236 6100 EBE2                  		bsr.w	FindNextFreeObj
0001123A 6600                       		bne.s	@fail
0001123C 12BC 004D                  		move.b	#id_LavaGeyser,0(a1) ; load lavafall object
00011240 3368 0008 0008             		move.w	obX(a0),obX(a1)
00011246 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001124C 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
00011252 2348 003C                  		move.l	a0,gmake_parent(a1)
00011256                            
00011256                            	@fail:
00011256 117C 0001 001C             		move.b	#1,obAnim(a0)
0001125C 4A28 0028                  		tst.b	obSubtype(a0)	; is object type 0 (geyser) ?
00011260 6700                       		beq.s	@isgeyser	; if yes, branch
00011262 117C 0004 001C             		move.b	#4,obAnim(a0)
00011268 6000                       		bra.s	GMake_Display
0001126A                            ; ===========================================================================
0001126A                            
0001126A                            	@isgeyser:
0001126A 2268 003C                  		movea.l	gmake_parent(a0),a1 ; get parent object address
0001126E 08E9 0001 0022             		bset	#1,obStatus(a1)
00011274 337C FA80 0012             		move.w	#-$580,obVelY(a1)
0001127A 6000                       		bra.s	GMake_Display
0001127C                            ; ===========================================================================
0001127C                            
0001127C                            GMake_ChkType:	; Routine 4
0001127C 4A28 0028                  		tst.b	obSubtype(a0)	; is object type 00 (geyser) ?
00011280 6700                       		beq.s	GMake_Display	; if yes, branch
00011282 5428 0024                  		addq.b	#2,obRoutine(a0)
00011286 4E75                       		rts	
00011288                            ; ===========================================================================
00011288                            
00011288                            GMake_Display:	; Routine 8
00011288 43F9 0000 0000             		lea	(Ani_Geyser).l,a1
0001128E 6100 B794                  		bsr.w	AnimateSprite
00011292 6100 E6E4                  		bsr.w	DisplaySprite
00011296 4E75                       		rts	
00011298                            ; ===========================================================================
00011298                            
00011298                            GMake_Delete:	; Routine $A
00011298 117C 0000 001C             		move.b	#0,obAnim(a0)
0001129E 117C 0002 0024             		move.b	#2,obRoutine(a0)
000112A4 4A28 0028                  		tst.b	obSubtype(a0)
000112A8 6700 E70E                  		beq.w	DeleteObject
000112AC 4E75                       		rts	
000112AE                            
000112AE                            
000112AE                            ; ---------------------------------------------------------------------------
000112AE                            ; Object 4D - lava geyser / lavafall (MZ)
000112AE                            ; ---------------------------------------------------------------------------
000112AE                            
000112AE                            LavaGeyser:
000112AE 7000                       		moveq	#0,d0
000112B0 1028 0024                  		move.b	obRoutine(a0),d0
000112B4 323B 0000                  		move.w	Geyser_Index(pc,d0.w),d1
000112B8 4EBB 1000                  		jsr	Geyser_Index(pc,d1.w)
000112BC 6000 E6BA                  		bra.w	DisplaySprite
000112C0                            ; ===========================================================================
000112C0 0000                       Geyser_Index:	dc.w Geyser_Main-Geyser_Index
000112C2 0000                       		dc.w Geyser_Action-Geyser_Index
000112C4 0000                       		dc.w loc_EFFC-Geyser_Index
000112C6 0000                       		dc.w Geyser_Delete-Geyser_Index
000112C8                            
000112C8 FB00 0000                  Geyser_Speeds:	dc.w $FB00, 0
000112CC                            ; ===========================================================================
000112CC                            
000112CC                            Geyser_Main:	; Routine 0
000112CC 5428 0024                  		addq.b	#2,obRoutine(a0)
000112D0 3168 000C 0030             		move.w	obY(a0),$30(a0)
000112D6 4A28 0028                  		tst.b	obSubtype(a0)
000112DA 6700                       		beq.s	@isgeyser
000112DC 0468 0250 000C             		subi.w	#$250,obY(a0)
000112E2                            
000112E2                            	@isgeyser:
000112E2 7000                       		moveq	#0,d0
000112E4 1028 0028                  		move.b	obSubtype(a0),d0
000112E8 D040                       		add.w	d0,d0
000112EA 317B 00DC 0012             		move.w	Geyser_Speeds(pc,d0.w),obVelY(a0)
000112F0 2248                       		movea.l	a0,a1
000112F2 7201                       		moveq	#1,d1
000112F4 6100                       		bsr.s	@makelava
000112F6 6000                       		bra.s	@activate
000112F8                            ; ===========================================================================
000112F8                            
000112F8                            	@loop:
000112F8 6100 EB20                  		bsr.w	FindNextFreeObj
000112FC 6600                       		bne.s	@fail
000112FE                            
000112FE                            @makelava:
000112FE 12BC 004D                  		move.b	#id_LavaGeyser,0(a1)
00011302 237C 0000 0000 0004        		move.l	#Map_Geyser,obMap(a1)
0001130A 337C 63A8 0002             		move.w	#$63A8,obGfx(a1)
00011310 137C 0004 0001             		move.b	#4,obRender(a1)
00011316 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001131C 3368 0008 0008             		move.w	obX(a0),obX(a1)
00011322 3368 000C 000C             		move.w	obY(a0),obY(a1)
00011328 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0001132E 337C 0080 0018             		move.w	#$80,obPriority(a1)
00011334 137C 0005 001C             		move.b	#5,obAnim(a1)
0001133A 4A28 0028                  		tst.b	obSubtype(a0)
0001133E 6700                       		beq.s	@fail
00011340 137C 0002 001C             		move.b	#2,obAnim(a1)
00011346                            
00011346                            	@fail:
00011346 51C9 FFB0                  		dbf	d1,@loop
0001134A 4E75                       		rts	
0001134C                            ; ===========================================================================
0001134C                            
0001134C                            @activate:
0001134C 0669 0060 000C             		addi.w	#$60,obY(a1)
00011352 3368 0030 0030             		move.w	$30(a0),$30(a1)
00011358 0669 0060 0030             		addi.w	#$60,$30(a1)
0001135E 137C 0093 0020             		move.b	#$93,obColType(a1)
00011364 137C 0080 0016             		move.b	#$80,obHeight(a1)
0001136A 08E9 0004 0001             		bset	#4,obRender(a1)
00011370 5829 0024                  		addq.b	#4,obRoutine(a1)
00011374 2348 003C                  		move.l	a0,$3C(a1)
00011378 4A28 0028                  		tst.b	obSubtype(a0)
0001137C 6700                       		beq.s	@sound
0001137E 7200                       		moveq	#0,d1
00011380 6100 FF76                  		bsr.w	@loop
00011384 5429 0024                  		addq.b	#2,obRoutine(a1)
00011388 08E9 0004 0002             		bset	#4,obGfx(a1)
0001138E 0669 0100 000C             		addi.w	#$100,obY(a1)
00011394 337C 0000 0018             		move.w	#0,obPriority(a1)
0001139A 3368 0030 0030             		move.w	$30(a0),$30(a1)
000113A0 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
000113A6 117C 0000 0028             		move.b	#0,obSubtype(a0)
000113AC                            
000113AC                            	@sound:
000113B6                            
000113B6                            Geyser_Action:	; Routine 2
000113B6 7000                       		moveq	#0,d0
000113B8 1028 0028                  		move.b	obSubtype(a0),d0
000113BC D040                       		add.w	d0,d0
000113BE 323B 0000                  		move.w	Geyser_Types(pc,d0.w),d1
000113C2 4EBB 1000                  		jsr	Geyser_Types(pc,d1.w)
000113C6 6100 E59C                  		bsr.w	SpeedToPos
000113CA 43F9 0000 0000             		lea	(Ani_Geyser).l,a1
000113D0 6100 B652                  		bsr.w	AnimateSprite
000113D4                            
000113D4                            Geyser_ChkDel:
000113F2 4E75                       		rts	
000113F4                            ; ===========================================================================
000113F4 0000                       Geyser_Types:	dc.w Geyser_Type00-Geyser_Types
000113F6 0000                       		dc.w Geyser_Type01-Geyser_Types
000113F8                            ; ===========================================================================
000113F8                            
000113F8                            Geyser_Type00:
000113F8 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase object's falling speed
000113FE 3028 0030                  		move.w	$30(a0),d0
00011402 B068 000C                  		cmp.w	obY(a0),d0
00011406 6400                       		bcc.s	locret_EFDA
00011408 5828 0024                  		addq.b	#4,obRoutine(a0)
0001140C 2268 003C                  		movea.l	$3C(a0),a1
00011410 137C 0003 001C             		move.b	#3,obAnim(a1)
00011416                            
00011416                            locret_EFDA:
00011416 4E75                       		rts	
00011418                            ; ===========================================================================
00011418                            
00011418                            Geyser_Type01:
00011418 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase object's falling speed
0001141E 3028 0030                  		move.w	$30(a0),d0
00011422 B068 000C                  		cmp.w	obY(a0),d0
00011426 6400                       		bcc.s	locret_EFFA
00011428 5828 0024                  		addq.b	#4,obRoutine(a0)
0001142C 2268 003C                  		movea.l	$3C(a0),a1
00011430 137C 0001 001C             		move.b	#1,obAnim(a1)
00011436                            
00011436                            locret_EFFA:
00011436 4E75                       		rts	
00011438                            ; ===========================================================================
00011438                            
00011438                            loc_EFFC:	; Routine 4
00011438 2268 003C                  		movea.l	$3C(a0),a1
0001143C 0C29 0006 0024             		cmpi.b	#6,obRoutine(a1)
00011442 6700 0000                  		beq.w	Geyser_Delete
00011446 3029 000C                  		move.w	obY(a1),d0
0001144A 0640 0060                  		addi.w	#$60,d0
0001144E 3140 000C                  		move.w	d0,obY(a0)
00011452 9068 0030                  		sub.w	$30(a0),d0
00011456 4440                       		neg.w	d0
00011458 7208                       		moveq	#8,d1
0001145A 0C40 0040                  		cmpi.w	#$40,d0
0001145E 6C00                       		bge.s	loc_F026
00011460 720B                       		moveq	#$B,d1
00011462                            
00011462                            loc_F026:
00011462 0C40 0080                  		cmpi.w	#$80,d0
00011466 6F00                       		ble.s	loc_F02E
00011468 720E                       		moveq	#$E,d1
0001146A                            
0001146A                            loc_F02E:
0001146A 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0001146E 6A00                       		bpl.s	loc_F04C
00011470 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
00011476 5228 001B                  		addq.b	#1,obAniFrame(a0)
0001147A 0C28 0002 001B             		cmpi.b	#2,obAniFrame(a0)
00011480 6500                       		bcs.s	loc_F04C
00011482 117C 0000 001B             		move.b	#0,obAniFrame(a0)
00011488                            
00011488                            loc_F04C:
00011488 1028 001B                  		move.b	obAniFrame(a0),d0
0001148C D001                       		add.b	d1,d0
0001148E 1140 001A                  		move.b	d0,obFrame(a0)
00011492 6000 FF40                  		bra.w	Geyser_ChkDel
00011496                            ; ===========================================================================
00011496                            
00011496                            Geyser_Delete:	; Routine 6
00011496 6000 E520                  		bra.w	DeleteObject
00011496 6000 E520                  		bra.w	DeleteObject
0001149A                            		include	"_incObj\54 Lava Tag.asm"
0001149A                            ; ---------------------------------------------------------------------------
0001149A                            ; Object 54 - invisible	lava tag (MZ)
0001149A                            ; ---------------------------------------------------------------------------
0001149A                            
0001149A                            LavaTag:
0001149A 0C28 0002 0028             		cmpi.b	#2,obSubtype(a0)	;TIS
000114A0 6E00 0000                  		bgt	WaterTag	;TIS
000114A4 7000                       		moveq	#0,d0
000114A6 1028 0024                  		move.b	obRoutine(a0),d0
000114AA 323B 0000                  		move.w	LTag_Index(pc,d0.w),d1
000114AE 4EFB 1000                  		jmp	LTag_Index(pc,d1.w)
000114B2                            ; ===========================================================================
000114B2 0000                       LTag_Index:	dc.w LTag_Main-LTag_Index
000114B4 0000                       		dc.w LTag_ChkDel-LTag_Index
000114B6                            
000114B6 9694 95                    LTag_ColTypes:	dc.b $96, $94, $95
000114BA 00                         		even
000114BA                            ; ===========================================================================
000114BA                            
000114BA                            LTag_Main:	; Routine 0
000114BA 5428 0024                  		addq.b	#2,obRoutine(a0)
000114BE 7000                       		moveq	#0,d0
000114C0 1028 0028                  		move.b	obSubtype(a0),d0
000114C4 117B 00F0 0020             		move.b	LTag_ColTypes(pc,d0.w),obColType(a0)
000114CA 217C 0000 0000 0004        		move.l	#Map_LTag,obMap(a0)
000114D2 117C 0084 0001             		move.b	#$84,obRender(a0)
000114D8                            
000114D8                            LTag_ChkDel:	; Routine 2
000114D8 3028 0008                  		move.w	obX(a0),d0
000114DC 0240 FF80                  		andi.w	#$FF80,d0
000114E0 3238 F700                  		move.w	(v_screenposx).w,d1
000114E4 0441 0080                  		subi.w	#$80,d1
000114E8 0241 FF80                  		andi.w	#$FF80,d1
000114EC 9041                       		sub.w	d1,d0
000114EE 6B00 E4C8                  		bmi.w	DeleteObject
000114F2 0C40 0280                  		cmpi.w	#$280,d0
000114F6 6200 E4C0                  		bhi.w	DeleteObject
000114FA 4E75                       		rts
000114FC                            
000114FC                            
000114FC                            ; ---------------------------------------------------------------------------
000114FC                            ; Object 54a - invisible	water tag (MZ) - TIS
000114FC                            ; ---------------------------------------------------------------------------
000114FC                            
000114FC                            WaterTag:	
000114FC 7000                       		moveq	#0,d0
000114FE 1028 0024                  		move.b	obRoutine(a0),d0
00011502 323B 0000                  		move.w	WTag_Index(pc,d0.w),d1
00011506 4EFB 1000                  		jmp	WTag_Index(pc,d1.w)
0001150A                            ; ===========================================================================
0001150A 0000                       WTag_Index:	dc.w WTag_Main-WTag_Index
0001150C 0000                       		dc.w WTag_ChkDel-WTag_Index
0001150E                            
0001150E 9694 95                    WTag_ColTypes:	dc.b $96, $94, $95
00011512 00                         		even
00011512                            ; ===========================================================================
00011512                            
00011512                            
00011512                            WTag_Main:	; Routine 0
00011512 5428 0024                  		addq.b	#2,obRoutine(a0)
00011516 7000                       		moveq	#0,d0
00011518                            		;move.b	obSubtype(a0),d0
00011518                            		;move.b	WTag_ColTypes(pc,d0.w),obColType(a0)
00011518 0400 00F0                  		sub.b	#$F0,d0
0001151C 1178 0096 0020             		move.b	$96,obColType(a0)							
00011522                            		;move.l	#Map_LTag,obMap(a0)
00011522                            		;move.b	#$84,obRender(a0)
00011522                            
00011522                            WTag_ChkDel:	; Routine 2
00011522 3028 0008                  		move.w	obX(a0),d0
00011526 0240 FF80                  		andi.w	#$FF80,d0
0001152A 3238 F700                  		move.w	(v_screenposx).w,d1
0001152E 0441 0080                  		subi.w	#$80,d1
00011532 0241 FF80                  		andi.w	#$FF80,d1
00011536 9041                       		sub.w	d1,d0
00011538 6B00 E47E                  		bmi.w	DeleteObject
0001153C 0C40 0280                  		cmpi.w	#$280,d0
00011540 6200 E476                  		bhi.w	DeleteObject
00011544 4E75                       		rts
00011546                            
00011546                            
00011546                            Map_LTag:	include	"_maps\Lava Tag.asm"
00011546                            ; ---------------------------------------------------------------------------
00011546                            ; Sprite mappings - invisible lava tag (MZ)
00011546                            ; ---------------------------------------------------------------------------
00011546                            Map_LTag_internal:
00011546 0000                       		dc.w @0-Map_LTag_internal
00011548 00                         @0:		dc.b 0		; no sprite, because the tag is invisible!
0001154A 00                         		even
0001154A 00                         		even
0001154A                            		include	"_anim\Lava Geyser.asm"
0001154A                            ; ---------------------------------------------------------------------------
0001154A                            ; Animation script - geyser of lava (MZ)
0001154A                            ; ---------------------------------------------------------------------------
0001154A 0000                       Ani_Geyser:	dc.w @bubble1-Ani_Geyser
0001154C 0000                       		dc.w @bubble2-Ani_Geyser
0001154E 0000                       		dc.w @end-Ani_Geyser
00011550 0000                       		dc.w @bubble3-Ani_Geyser
00011552 0000                       		dc.w @blank-Ani_Geyser
00011554 0000                       		dc.w @bubble4-Ani_Geyser
00011556 0200 0100 0104 0504 05FC   @bubble1:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	afRoutine
00011560 0202 03FF                  @bubble2:	dc.b 2,	2, 3, afEnd
00011564 0206 07FF                  @end:		dc.b 2,	6, 7, afEnd
00011568 0202 0300 0100 01FC        @bubble3:	dc.b 2,	2, 3, 0, 1, 0, 1, afRoutine
00011570 0F13 FF                    @blank:		dc.b $F, $13, afEnd
00011574 00                         		even
00011574 0211 12FF                  @bubble4:	dc.b 2,	$11, $12, afEnd
00011578                            		even
00011578                            		even
00011578                            Map_Geyser:	include	"_maps\Lava Geyser.asm"
00011578                            ; ---------------------------------------------------------------------------
00011578                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
00011578                            ; ---------------------------------------------------------------------------
00011578                            Map_Geyser_internal:
00011578 0000                       		dc.w @bubble1-Map_Geyser_internal
0001157A 0000                       		dc.w @bubble2-Map_Geyser_internal
0001157C 0000                       		dc.w @bubble3-Map_Geyser_internal
0001157E 0000                       		dc.w @bubble4-Map_Geyser_internal
00011580 0000                       		dc.w @bubble5-Map_Geyser_internal
00011582 0000                       		dc.w @bubble6-Map_Geyser_internal
00011584 0000                       		dc.w @end1-Map_Geyser_internal
00011586 0000                       		dc.w @end2-Map_Geyser_internal
00011588 0000                       		dc.w @medcolumn1-Map_Geyser_internal
0001158A 0000                       		dc.w @medcolumn2-Map_Geyser_internal
0001158C 0000                       		dc.w @medcolumn3-Map_Geyser_internal
0001158E 0000                       		dc.w @shortcolumn1-Map_Geyser_internal
00011590 0000                       		dc.w @shortcolumn2-Map_Geyser_internal
00011592 0000                       		dc.w @shortcolumn3-Map_Geyser_internal
00011594 0000                       		dc.w @longcolumn1-Map_Geyser_internal
00011596 0000                       		dc.w @longcolumn2-Map_Geyser_internal
00011598 0000                       		dc.w @longcolumn3-Map_Geyser_internal
0001159A 0000                       		dc.w @bubble7-Map_Geyser_internal
0001159C 0000                       		dc.w @bubble8-Map_Geyser_internal
0001159E 0000                       		dc.w @blank-Map_Geyser_internal
000115A0 02                         @bubble1:	dc.b 2
000115A1 EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
000115A6 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
000115AB 02                         @bubble2:	dc.b 2
000115AC EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
000115B1 EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
000115B6 04                         @bubble3:	dc.b 4
000115B7 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
000115BC F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
000115C1 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
000115C6 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
000115CB 04                         @bubble4:	dc.b 4
000115CC EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
000115D1 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
000115D6 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
000115DB EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
000115E0 06                         @bubble5:	dc.b 6
000115E1 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
000115E6 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
000115EB F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
000115F0 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
000115F5 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
000115FA E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
000115FF 06                         @bubble6:	dc.b 6
00011600 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
00011605 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0001160A F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0001160F EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
00011614 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
00011619 E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
0001161E 02                         @end1:		dc.b 2
0001161F E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
00011624 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
00011629 02                         @end2:		dc.b 2
0001162A E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
0001162F E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
00011634 0A                         @medcolumn1:	dc.b $A
00011635 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0001163A 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0001163F B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00011644 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00011649 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0001164E D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00011653 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
00011658 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0001165D 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
00011662 100F 0840 00               		dc.b $10, $F, 8, $40, 0
00011667 0A                         @medcolumn2:	dc.b $A
00011668 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0001166D 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00011672 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00011677 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0001167C D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00011681 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00011686 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0001168B F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
00011690 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
00011695 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0001169A 0A                         @medcolumn3:	dc.b $A
0001169B 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
000116A0 900F 0860 00               		dc.b $90, $F, 8, $60, 0
000116A5 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
000116AA B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
000116AF D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
000116B4 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
000116B9 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
000116BE F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
000116C3 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
000116C8 100F 0860 00               		dc.b $10, $F, 8, $60, 0
000116CD 06                         @shortcolumn1:	dc.b 6
000116CE 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
000116D3 900F 0840 00               		dc.b $90, $F, 8, $40, 0
000116D8 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
000116DD B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
000116E2 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
000116E7 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
000116EC 06                         @shortcolumn2:	dc.b 6
000116ED 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
000116F2 900F 0850 00               		dc.b $90, $F, 8, $50, 0
000116F7 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
000116FC B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00011701 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00011706 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0001170B 06                         @shortcolumn3:	dc.b 6
0001170C 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00011711 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00011716 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0001171B B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00011720 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00011725 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0001172A 10                         @longcolumn1:	dc.b $10
0001172B 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00011730 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00011735 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0001173A B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0001173F D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00011744 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00011749 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0001174E F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
00011753 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
00011758 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0001175D 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
00011762 300F 0840 00               		dc.b $30, $F, 8, $40, 0
00011767 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
0001176C 500F 0840 00               		dc.b $50, $F, 8, $40, 0
00011771 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
00011776 700F 0840 00               		dc.b $70, $F, 8, $40, 0
0001177B 10                         @longcolumn2:	dc.b $10
0001177C 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00011781 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00011786 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0001178B B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00011790 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00011795 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0001179A F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0001179F F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
000117A4 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
000117A9 100F 0850 00               		dc.b $10, $F, 8, $50, 0
000117AE 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
000117B3 300F 0850 00               		dc.b $30, $F, 8, $50, 0
000117B8 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
000117BD 500F 0850 00               		dc.b $50, $F, 8, $50, 0
000117C2 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
000117C7 700F 0850 00               		dc.b $70, $F, 8, $50, 0
000117CC 10                         @longcolumn3:	dc.b $10
000117CD 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
000117D2 900F 0860 00               		dc.b $90, $F, 8, $60, 0
000117D7 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
000117DC B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
000117E1 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
000117E6 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
000117EB F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
000117F0 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
000117F5 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
000117FA 100F 0860 00               		dc.b $10, $F, 8, $60, 0
000117FF 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
00011804 300F 0860 00               		dc.b $30, $F, 8, $60, 0
00011809 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
0001180E 500F 0860 00               		dc.b $50, $F, 8, $60, 0
00011813 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
00011818 700F 0860 00               		dc.b $70, $F, 8, $60, 0
0001181D 06                         @bubble7:	dc.b 6
0001181E E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
00011823 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
00011828 E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
0001182D E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
00011832 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
00011837 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
0001183C 06                         @bubble8:	dc.b 6
0001183D E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
00011842 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
00011847 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
0001184C E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
00011851 D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
00011856 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
0001185B 00                         @blank:	dc.b 0
0001185C                            		even
0001185C                            		even
0001185C                            
0001185C                            		include	"_incObj\40 Moto Bug.asm" ; includes "_incObj\sub RememberState.asm"
0001185C                            ; ---------------------------------------------------------------------------
0001185C                            ; Object 40 - Moto Bug enemy (GHZ)
0001185C                            ; ---------------------------------------------------------------------------
0001185C                            
0001185C                            MotoBug:
0001185C 7000                       		moveq	#0,d0
0001185E 1028 0024                  		move.b	obRoutine(a0),d0
00011862 323B 0000                  		move.w	Moto_Index(pc,d0.w),d1
00011866 4EFB 1000                  		jmp	Moto_Index(pc,d1.w)
0001186A                            ; ===========================================================================
0001186A 0000                       Moto_Index:	dc.w Moto_Main-Moto_Index
0001186C 0000                       		dc.w Moto_Action-Moto_Index
0001186E 0000                       		dc.w Moto_Animate-Moto_Index
00011870 0000                       		dc.w Moto_Delete-Moto_Index
00011872                            ; ===========================================================================
00011872                            
00011872                            Moto_Main:	; Routine 0
00011872 217C 0000 0000 0004        		move.l	#Map_Moto,obMap(a0)
0001187A 317C 04F0 0002             		move.w	#$4F0,obGfx(a0)
00011880 117C 0004 0001             		move.b	#4,obRender(a0)
00011886 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001188C 117C 0014 0014             		move.b	#$14,obActWid(a0)
00011892 4A28 001C                  		tst.b	obAnim(a0)	; is object a smoke trail?
00011896 6600                       		bne.s	@smoke		; if yes, branch
00011898 117C 000E 0016             		move.b	#$E,obHeight(a0)
0001189E 117C 0008 0017             		move.b	#8,obWidth(a0)
000118A4 117C 000C 0020             		move.b	#$C,obColType(a0)
000118AA 6100 E080                  		bsr.w	ObjectFall
000118AE 4EB9 0000 0000             		jsr	(ObjFloorDist).l
000118B4 4A41                       		tst.w	d1
000118B6 6A00                       		bpl.s	@notonfloor
000118B8 D368 000C                  		add.w	d1,obY(a0)	; match	object's position with the floor
000118BC 317C 0000 0012             		move.w	#0,obVelY(a0)
000118C2 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Moto_Action next
000118C6 0868 0000 0022             		bchg	#0,obStatus(a0)
000118CC                            
000118CC                            	@notonfloor:
000118CC 4E75                       		rts	
000118CE                            ; ===========================================================================
000118CE                            
000118CE                            @smoke:
000118CE 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto Moto_Animate next
000118D2 6000 0000                  		bra.w	Moto_Animate
000118D6                            ; ===========================================================================
000118D6                            
000118D6                            Moto_Action:	; Routine 2
000118D6 7000                       		moveq	#0,d0
000118D8 1028 0025                  		move.b	ob2ndRout(a0),d0
000118DC 323B 0000                  		move.w	Moto_ActIndex(pc,d0.w),d1
000118E0 4EBB 1000                  		jsr	Moto_ActIndex(pc,d1.w)
000118E4 43F9 0000 0000             		lea	(Ani_Moto).l,a1
000118EA 6100 B138                  		bsr.w	AnimateSprite
000118EE                            
000118EE                            		include	"_incObj\sub RememberState.asm" ; Moto_Action terminates in this file
000118EE                            ; ---------------------------------------------------------------------------
000118EE                            ; Subroutine to remember whether an object is destroyed/collected
000118EE                            ; ---------------------------------------------------------------------------
000118EE                            
000118EE                            RememberState:
0001190C 6000 E06A                  		bra.w	DisplaySprite
00011910                            
00011910                            	@offscreen:
00011910 45F8 FC00                  		lea	(v_objstate).w,a2
00011914 7000                       		moveq	#0,d0
00011916 1028 0023                  		move.b	obRespawnNo(a0),d0
0001191A 6700                       		beq.s	@delete
0001191C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00011922                            
00011922                            	@delete:
00011922 6000 E094                  		bra.w	DeleteObject
00011922 6000 E094                  		bra.w	DeleteObject
00011926                            
00011926                            ; ===========================================================================
00011926 0000                       Moto_ActIndex:	dc.w @move-Moto_ActIndex
00011928 0000                       		dc.w @findfloor-Moto_ActIndex
0001192A                            
0001192A =00000030                  @time:		equ $30
0001192A =00000033                  @smokedelay:	equ $33
0001192A                            ; ===========================================================================
0001192A                            
0001192A                            @move:
0001192A 5368 0030                  		subq.w	#1,@time(a0)	; subtract 1 from pause	time
0001192E 6A00                       		bpl.s	@wait		; if time remains, branch
00011930 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00011934 317C FF00 0010             		move.w	#-$100,obVelX(a0) ; move object to the left
0001193A 117C 0001 001C             		move.b	#1,obAnim(a0)
00011940 0868 0000 0022             		bchg	#0,obStatus(a0)
00011946 6600                       		bne.s	@wait
00011948 4468 0010                  		neg.w	obVelX(a0)	; change direction
0001194C                            
0001194C                            	@wait:
0001194C 4E75                       		rts	
0001194E                            ; ===========================================================================
0001194E                            
0001194E                            @findfloor:
0001194E 6100 E014                  		bsr.w	SpeedToPos
00011952 4EB9 0000 0000             		jsr	(ObjFloorDist).l
00011958 0C41 FFF8                  		cmpi.w	#-8,d1
0001195C 6D00                       		blt.s	@pause
0001195E 0C41 000C                  		cmpi.w	#$C,d1
00011962 6C00                       		bge.s	@pause
00011964 D368 000C                  		add.w	d1,obY(a0)	; match	object's position with the floor
00011968 5328 0033                  		subq.b	#1,@smokedelay(a0)
0001196C 6A00                       		bpl.s	@nosmoke
0001196E 117C 000F 0033             		move.b	#$F,@smokedelay(a0)
00011974 6100 E48E                  		bsr.w	FindFreeObj
00011978 6600                       		bne.s	@nosmoke
0001197A 12BC 0040                  		move.b	#id_MotoBug,0(a1) ; load exhaust smoke object
0001197E 3368 0008 0008             		move.w	obX(a0),obX(a1)
00011984 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001198A 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00011990 137C 0002 001C             		move.b	#2,obAnim(a1)
00011996                            
00011996                            	@nosmoke:
00011996 4E75                       		rts	
00011998                            
00011998                            @pause:
00011998 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001199C 317C 003B 0030             		move.w	#59,@time(a0)	; set pause time to 1 second
000119A2 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop the object moving
000119A8 117C 0000 001C             		move.b	#0,obAnim(a0)
000119AE 4E75                       		rts	
000119B0                            ; ===========================================================================
000119B0                            
000119B0                            Moto_Animate:	; Routine 4
000119B0 43F9 0000 0000             		lea	(Ani_Moto).l,a1
000119B6 6100 B06C                  		bsr.w	AnimateSprite
000119BA 6000 DFBC                  		bra.w	DisplaySprite
000119BE                            ; ===========================================================================
000119BE                            
000119BE                            Moto_Delete:	; Routine 6
000119BE 6000 DFF8                  		bra.w	DeleteObject
000119BE 6000 DFF8                  		bra.w	DeleteObject
000119C2                            		include	"_anim\Moto Bug.asm"
000119C2                            ; ---------------------------------------------------------------------------
000119C2                            ; Animation script - Motobug enemy
000119C2                            ; ---------------------------------------------------------------------------
000119C2 0000                       Ani_Moto:	dc.w @stand-Ani_Moto
000119C4 0000                       		dc.w @walk-Ani_Moto
000119C6 0000                       		dc.w @smoke-Ani_Moto
000119C8                            
000119C8 0F02 FF                    @stand:		dc.b $F, 2, afEnd
000119CC 00                         		even
000119CC 0700 0100 02FF             @walk:		dc.b 7,	0, 1, 0, 2, afEnd
000119D2 0103 0603 0604 0604 0604+  @smoke:		dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, afRoutine
000119E0 00                         		even
000119E0 00                         		even
000119E0                            Map_Moto:	include	"_maps\Moto Bug.asm"
000119E0                            ; --------------------------------------------------------------------------------
000119E0                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000119E0                            ; --------------------------------------------------------------------------------
000119E0                            
000119E0                            SME_TTY9T:	
000119E0 0000 0000                  		dc.w SME_TTY9T_E-SME_TTY9T, SME_TTY9T_23-SME_TTY9T	
000119E4 0000 0000                  		dc.w SME_TTY9T_38-SME_TTY9T, SME_TTY9T_52-SME_TTY9T	
000119E8 0000 0000                  		dc.w SME_TTY9T_58-SME_TTY9T, SME_TTY9T_5E-SME_TTY9T	
000119EC 0000                       		dc.w SME_TTY9T_64-SME_TTY9T	
000119EE 04                         SME_TTY9T_E:	dc.b 4	
000119EF F00D 2000 EC               		dc.b $F0, $D, $20, 0, $EC	
000119F4 000C 2008 EC               		dc.b 0, $C, $20, 8, $EC	
000119F9 F801 200C 0C               		dc.b $F8, 1, $20, $C, $C	
000119FE 0808 200E F4               		dc.b 8, 8, $20, $E, $F4	
00011A03 04                         SME_TTY9T_23:	dc.b 4	
00011A04 F10D 2000 EC               		dc.b $F1, $D, $20, 0, $EC	
00011A09 010C 2008 EC               		dc.b 1, $C, $20, 8, $EC	
00011A0E F901 200C 0C               		dc.b $F9, 1, $20, $C, $C	
00011A13 0908 2011 F4               		dc.b 9, 8, $20, $11, $F4	
00011A18 05                         SME_TTY9T_38:	dc.b 5	
00011A19 F00D 2000 EC               		dc.b $F0, $D, $20, 0, $EC	
00011A1E 000C 2014 EC               		dc.b 0, $C, $20, $14, $EC	
00011A23 F801 200C 0C               		dc.b $F8, 1, $20, $C, $C	
00011A28 0804 2018 EC               		dc.b 8, 4, $20, $18, $EC	
00011A2D 0804 2012 FC               		dc.b 8, 4, $20, $12, $FC	
00011A32 01                         SME_TTY9T_52:	dc.b 1	
00011A33 FA00 001A 10               		dc.b $FA, 0, 0, $1A, $10	
00011A38 01                         SME_TTY9T_58:	dc.b 1	
00011A39 FA00 001B 10               		dc.b $FA, 0, 0, $1B, $10	
00011A3E 01                         SME_TTY9T_5E:	dc.b 1	
00011A3F FA00 001C 10               		dc.b $FA, 0, 0, $1C, $10	
00011A44 00                         SME_TTY9T_64:	dc.b 0	
00011A46 00                         		even
00011A46 00                         		even
00011A46                            		include	"_incObj\4F.asm"
00011A46                            ; ---------------------------------------------------------------------------
00011A46                            ; Object 4F - Splats
00011A46                            ; ---------------------------------------------------------------------------
00011A46                            
00011A46                            Obj4F:
00011A46 7000                                       moveq   #0,d0
00011A48 1028 0024                                  move.b  $24(a0),d0
00011A4C 323B 0000                                  move.w  ObjSplats_Index(pc,d0.w),d1
00011A50 4EFB 1000                                  jmp     ObjSplats_Index(pc,d1.w)
00011A54                            ; ---------------------------------------------------------------------------
00011A54 0000                       ObjSplats_Index:dc.w ObjSplats_Init-*
00011A56 0000                                       dc.w loc_D246-ObjSplats_Index
00011A58 0000                                       dc.w ObjSplats_Bounce-ObjSplats_Index
00011A5A 0000                                       dc.w loc_D2C8-ObjSplats_Index
00011A5C                            ; ---------------------------------------------------------------------------
00011A5C                            
00011A5C                            ObjSplats_Init:
00011A5C 5428 0024                                  addq.b  #2,$24(a0)
00011A60 217C 0000 0000 0004                        move.l  #Map_Splats,4(a0)
00011A68 317C 24E4 0002                             move.w  #$24E4,2(a0)
00011A6E 117C 0004 0001                             move.b  #4,1(a0)
00011A74 117C 0004 0014                             move.b  #4,obActWid(a0)
00011A7A 317C 0200 0018             				move.w	#$200,obPriority(a0)
00011A80 117C 0014 0016                             move.b  #$14,$16(a0)
00011A86 117C 0002 0020                             move.b  #2,$20(a0)
00011A8C 4A28 0028                                  tst.b   $28(a0)
00011A90 6700                                       beq.s   loc_D246
00011A92 343C 0300                                  move.w  #$300,d2
00011A96 6000                                       bra.s   ObjSplats_FaceRight
00011A98                            ; ---------------------------------------------------------------------------
00011A98                            
00011A98                            loc_D246:
00011A98 343C 00E0                                  move.w  #$E0,d2
00011A9C                            
00011A9C                            ObjSplats_FaceRight:
00011A9C 323C 0100                                  move.w  #$100,d1
00011AA0 08E8 0000 0001                             bset    #0,1(a0)
00011AA6 3038 D008                                  move.w  ($FFFFD008).w,d0
00011AAA 9068 0008                                  sub.w   8(a0),d0
00011AAE 6400                                       bcc.s   ObjSplats_Move
00011AB0 4440                                       neg.w   d0
00011AB2 4441                                       neg.w   d1
00011AB4 08A8 0000 0001                             bclr    #0,1(a0)
00011ABA                            
00011ABA                            ObjSplats_Move:
00011ABA B042                                       cmp.w   d2,d0
00011ABC 6400                                       bcc.s   ObjSplats_Bounce
00011ABE 3141 0010                                  move.w  d1,$10(a0)
00011AC2 5428 0024                                  addq.b  #2,$24(a0)
00011AC6                            
00011AC6                            ObjSplats_Bounce:
00011AC6 6100 DE64                                  bsr.w   ObjectFall
00011ACA 117C 0001 001A                             move.b  #1,$1A(a0)
00011AD0 4A68 0012                                  tst.w   $12(a0)
00011AD4 6B00                                       bmi.s   ObjSplats_Turn
00011AD6 117C 0000 001A                             move.b  #0,$1A(a0)
00011ADC 6100 0000                                  bsr.w   ObjFloorDist
00011AE0 4A41                                       tst.w   d1
00011AE2 6A00                                       bpl.s   ObjSplats_Turn
00011AE4 3011                                       move.w  (a1),d0
00011AE6 0240 03FF                                  andi.w  #$3FF,d0
00011AEA 0C40 02D2                                  cmpi.w  #$2D2,d0
00011AEE 6500                                       bcs.s   ObjSplats_Fall
00011AF0 5428 0024                                  addq.b  #2,$24(a0)
00011AF4 6000                                       bra.s   ObjSplats_Turn
00011AF6                            ; ---------------------------------------------------------------------------
00011AF6                            
00011AF6                            ObjSplats_Fall:
00011AF6 D368 000C                                  add.w   d1,$C(a0)
00011AFA 317C FC00 0012                             move.w  #$FC00,$12(a0)
00011B00                            
00011B00                            ObjSplats_Turn:
00011B00 6100 0000                                  bsr.w   Yad_ChkWall
00011B04 6700                                       beq.s   loc_D2C4
00011B06 4468 0010                                  neg.w   $10(a0)
00011B0A 0868 0000 0001                             bchg    #0,1(a0)
00011B10 0868 0000 0022                             bchg    #0,$22(a0)
00011B16                            
00011B16                            loc_D2C4:
00011B16 6000 FDD6                                  bra.w   RememberState
00011B1A                            ; ---------------------------------------------------------------------------
00011B1A                            
00011B1A                            loc_D2C8:
00011B1A 6100 DE10                                  bsr.w   ObjectFall
00011B1E 6100 DE58                                  bsr.w   DisplaySprite
00011B22 4A28 0001                                  tst.b   1(a0)
00011B26 6A00 DE90                                  bpl.w   DeleteObject
00011B2A 4E75                                       rts
00011B2A 4E75                                       rts
00011B2C                            Map_Splats:	include	"_maps\Splats.asm"
00011B2C 0000                       Map_Splats_internal:     dc.w unk_D310-*
00011B2E 0000                                       dc.w unk_D31B-Map_Splats_internal
00011B30 02                         unk_D310:       dc.b   2
00011B31 EC0B 0000 F40C 0800 0CF4                   dc.b $EC, $B, 0, 0, $F4, $C, 8, 0, $C, $F4
00011B3B 02                         unk_D31B:       dc.b   2
00011B3C EC0B 000F F40C 0400 1BFB                   dc.b $EC, $B, 0, $F, $F4, $C, 4, 0, $1B, $FB
00011B3C EC0B 000F F40C 0400 1BFB                   dc.b $EC, $B, 0, $F, $F4, $C, 4, 0, $1B, $FB
00011B46                            
00011B46                            		include	"_incObj\50 Yadrin.asm"
00011B46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011B46                            
00011B46                            
00011B46                            Yad_ChkWall:
00011B46 3038 FE04                  		move.w	(v_framecount).w,d0
00011B4A D047                       		add.w	d7,d0
00011B4C 0240 0003                  		andi.w	#3,d0
00011B50 6600                       		bne.s	loc_F836
00011B52 7600                       		moveq	#0,d3
00011B54 1628 0014                  		move.b	obActWid(a0),d3
00011B58 4A68 0010                  		tst.w	obVelX(a0)
00011B5C 6B00                       		bmi.s	loc_F82C
00011B5E 6100 0000                  		bsr.w	ObjHitWallRight
00011B62 4A41                       		tst.w	d1
00011B64 6A00                       		bpl.s	loc_F836
00011B66                            
00011B66                            loc_F828:
00011B66 7001                       		moveq	#1,d0
00011B68 4E75                       		rts	
00011B6A                            ; ===========================================================================
00011B6A                            
00011B6A                            loc_F82C:
00011B6A 4643                       		not.w	d3
00011B6C 6100 0000                  		bsr.w	ObjHitWallLeft
00011B70 4A41                       		tst.w	d1
00011B72 6BF2                       		bmi.s	loc_F828
00011B74                            
00011B74                            loc_F836:
00011B74 7000                       		moveq	#0,d0
00011B76 4E75                       		rts	
00011B78                            ; End of function Yad_ChkWall
00011B78                            
00011B78                            ; ===========================================================================
00011B78                            ; ---------------------------------------------------------------------------
00011B78                            ; Object 50 - Yadrin enemy (SYZ)
00011B78                            ; ---------------------------------------------------------------------------
00011B78                            
00011B78                            Yadrin:
00011B78 7000                       		moveq	#0,d0
00011B7A 1028 0024                  		move.b	obRoutine(a0),d0
00011B7E 323B 0000                  		move.w	Yad_Index(pc,d0.w),d1
00011B82 4EFB 1000                  		jmp	Yad_Index(pc,d1.w)
00011B86                            ; ===========================================================================
00011B86 0000                       Yad_Index:	dc.w Yad_Main-Yad_Index
00011B88 0000                       		dc.w Yad_Action-Yad_Index
00011B8A                            
00011B8A =00000030                  yad_timedelay:	equ $30
00011B8A                            ; ===========================================================================
00011B8A                            
00011B8A                            Yad_Main:	; Routine 0
00011B8A 217C 0000 0000 0004        		move.l	#Map_Yad,obMap(a0)
00011B92 317C 247B 0002             		move.w	#$247B,obGfx(a0)
00011B98 117C 0004 0001             		move.b	#4,obRender(a0)
00011B9E 317C 0200 0018             		move.w	#$200,obPriority(a0)
00011BA4 117C 0014 0014             		move.b	#$14,obActWid(a0)
00011BAA 117C 0011 0016             		move.b	#$11,obHeight(a0)
00011BB0 117C 0008 0017             		move.b	#8,obWidth(a0)
00011BB6 117C 00CC 0020             		move.b	#$CC,obColType(a0)
00011BBC 6100 DD6E                  		bsr.w	ObjectFall
00011BC0 6100 0000                  		bsr.w	ObjFloorDist
00011BC4 4A41                       		tst.w	d1
00011BC6 6A00                       		bpl.s	locret_F89E
00011BC8 D368 000C                  		add.w	d1,obY(a0)	; match	object's position with the floor
00011BCC 317C 0000 0012             		move.w	#0,obVelY(a0)
00011BD2 5428 0024                  		addq.b	#2,obRoutine(a0)
00011BD6 0868 0000 0022             		bchg	#0,obStatus(a0)
00011BDC                            
00011BDC                            	locret_F89E:
00011BDC 4E75                       		rts	
00011BDE                            ; ===========================================================================
00011BDE                            
00011BDE                            Yad_Action:	; Routine 2
00011BDE 7000                       		moveq	#0,d0
00011BE0 1028 0025                  		move.b	ob2ndRout(a0),d0
00011BE4 323B 0000                  		move.w	Yad_Index2(pc,d0.w),d1
00011BE8 4EBB 1000                  		jsr	Yad_Index2(pc,d1.w)
00011BEC 43F9 0000 0000             		lea	(Ani_Yad).l,a1
00011BF2 6100 AE30                  		bsr.w	AnimateSprite
00011BF6 6000 FCF6                  		bra.w	RememberState
00011BFA                            ; ===========================================================================
00011BFA 0000                       Yad_Index2:	dc.w Yad_Move-Yad_Index2
00011BFC 0000                       		dc.w Yad_FixToFloor-Yad_Index2
00011BFE                            ; ===========================================================================
00011BFE                            
00011BFE                            Yad_Move:
00011BFE 5368 0030                  		subq.w	#1,yad_timedelay(a0) ; subtract 1 from pause time
00011C02 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
00011C04 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00011C08 317C FF00 0010             		move.w	#-$100,obVelX(a0) ; move object
00011C0E 117C 0001 001C             		move.b	#1,obAnim(a0)
00011C14 0868 0000 0022             		bchg	#0,obStatus(a0)
00011C1A 6600                       		bne.s	locret_F8E2
00011C1C 4468 0010                  		neg.w	obVelX(a0)	; change direction
00011C20                            
00011C20                            	locret_F8E2:
00011C20 4E75                       		rts	
00011C22                            ; ===========================================================================
00011C22                            
00011C22                            Yad_FixToFloor:
00011C22 6100 DD40                  		bsr.w	SpeedToPos
00011C26 6100 0000                  		bsr.w	ObjFloorDist
00011C2A 0C41 FFF8                  		cmpi.w	#-8,d1
00011C2E 6D00                       		blt.s	Yad_Pause
00011C30 0C41 000C                  		cmpi.w	#$C,d1
00011C34 6C00                       		bge.s	Yad_Pause
00011C36 D368 000C                  		add.w	d1,obY(a0)	; match	object's position to the floor
00011C3A 6100 FF0A                  		bsr.w	Yad_ChkWall
00011C3E 6600                       		bne.s	Yad_Pause
00011C40 4E75                       		rts	
00011C42                            ; ===========================================================================
00011C42                            
00011C42                            Yad_Pause:
00011C42 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00011C46 317C 003B 0030             		move.w	#59,yad_timedelay(a0) ; set pause time to 1 second
00011C4C 317C 0000 0010             		move.w	#0,obVelX(a0)
00011C52 117C 0000 001C             		move.b	#0,obAnim(a0)
00011C58 4E75                       		rts	
00011C58 4E75                       		rts	
00011C5A                            		include	"_anim\Yadrin.asm"
00011C5A                            ; ---------------------------------------------------------------------------
00011C5A                            ; Animation script - Yadrin enemy
00011C5A                            ; ---------------------------------------------------------------------------
00011C5A 0000                       Ani_Yad:	dc.w @stand-Ani_Yad
00011C5C 0000                       		dc.w @walk-Ani_Yad
00011C5E                            
00011C5E 0800 FF                    @stand:		dc.b 8,	0, afEnd
00011C62 00                         		even
00011C62 0800 0002 0000 0101 0103+  @walk:		dc.b 8, 0, 0, 2, 0, 0, 1, 1, 1, 3, 1, 1, 1, afEnd
00011C70                            		even
00011C70                            		even
00011C70                            Map_Yad:	include	"_maps\Yadrin.asm"
00011C70                            ; --------------------------------------------------------------------------------
00011C70                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00011C70                            ; --------------------------------------------------------------------------------
00011C70                            
00011C70                            SME_4WhIu:	
00011C70 0000 0000                  		dc.w SME_4WhIu_C-SME_4WhIu, SME_4WhIu_3A-SME_4WhIu	
00011C74 0000 0000                  		dc.w SME_4WhIu_68-SME_4WhIu, SME_4WhIu_A5-SME_4WhIu	
00011C78 0000 0000                  		dc.w SME_4WhIu_E2-SME_4WhIu, SME_4WhIu_FC-SME_4WhIu	
00011C7C 09                         SME_4WhIu_C:	dc.b 9	
00011C7D F308 6000 F4               		dc.b $F3, 8, $60, 0, $F4	
00011C82 EB04 600F FC               		dc.b $EB, 4, $60, $F, $FC	
00011C87 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011C8C FB06 6003 EC               		dc.b $FB, 6, $60, 3, $EC	
00011C91 FB00 6009 FC               		dc.b $FB, 0, $60, 9, $FC	
00011C96 FB00 600C 04               		dc.b $FB, 0, $60, $C, 4	
00011C9B FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011CA0 F300 600A EC               		dc.b $F3, 0, $60, $A, $EC	
00011CA5 EB00 600D F4               		dc.b $EB, 0, $60, $D, $F4	
00011CAA 09                         SME_4WhIu_3A:	dc.b 9	
00011CAB F308 6037 EC               		dc.b $F3, 8, $60, $37, $EC	
00011CB0 FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011CB5 FB06 6003 EC               		dc.b $FB, 6, $60, 3, $EC	
00011CBA FB00 6009 FC               		dc.b $FB, 0, $60, 9, $FC	
00011CBF FB00 600C 04               		dc.b $FB, 0, $60, $C, 4	
00011CC4 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011CC9 F300 603A 04               		dc.b $F3, 0, $60, $3A, 4	
00011CCE EB04 603B F4               		dc.b $EB, 4, $60, $3B, $F4	
00011CD3 EB00 6022 04               		dc.b $EB, 0, $60, $22, 4	
00011CD8 0C                         SME_4WhIu_68:	dc.b $C	
00011CD9 EB04 600F FC               		dc.b $EB, 4, $60, $F, $FC	
00011CDE FB00 601D FC               		dc.b $FB, 0, $60, $1D, $FC	
00011CE3 FB00 6020 04               		dc.b $FB, 0, $60, $20, 4	
00011CE8 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011CED FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011CF2 F300 600A EC               		dc.b $F3, 0, $60, $A, $EC	
00011CF7 EB00 600D F4               		dc.b $EB, 0, $60, $D, $F4	
00011CFC FB01 6017 EC               		dc.b $FB, 1, $60, $17, $EC	
00011D01 FB01 601A F4               		dc.b $FB, 1, $60, $1A, $F4	
00011D06 F308 6000 F4               		dc.b $F3, 8, $60, 0, $F4	
00011D0B 0B00 6008 F4               		dc.b $B, 0, $60, 8, $F4	
00011D10 0B00 6005 EC               		dc.b $B, 0, $60, 5, $EC	
00011D15 0C                         SME_4WhIu_A5:	dc.b $C	
00011D16 F308 6037 EC               		dc.b $F3, 8, $60, $37, $EC	
00011D1B FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011D20 FB00 6009 FC               		dc.b $FB, 0, $60, 9, $FC	
00011D25 FB00 600C 04               		dc.b $FB, 0, $60, $C, 4	
00011D2A 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011D2F F300 603A 04               		dc.b $F3, 0, $60, $3A, 4	
00011D34 EB04 603B F4               		dc.b $EB, 4, $60, $3B, $F4	
00011D39 EB00 6022 04               		dc.b $EB, 0, $60, $22, 4	
00011D3E FB01 6017 EC               		dc.b $FB, 1, $60, $17, $EC	
00011D43 FB01 601A F4               		dc.b $FB, 1, $60, $1A, $F4	
00011D48 0B00 6005 EC               		dc.b $B, 0, $60, 5, $EC	
00011D4D 0B00 6008 F4               		dc.b $B, 0, $60, 8, $F4	
00011D52 05                         SME_4WhIu_E2:	dc.b 5	
00011D53 F409 0023 F4               		dc.b $F4, 9, 0, $23, $F4	
00011D58 040D 0029 EC               		dc.b 4, $D, 0, $29, $EC	
00011D5D EC04 000F FC               		dc.b $EC, 4, 0, $F, $FC	
00011D62 F402 0011 0C               		dc.b $F4, 2, 0, $11, $C	
00011D67 0409 0031 FC               		dc.b 4, 9, 0, $31, $FC	
00011D6C 05                         SME_4WhIu_FC:	dc.b 5	
00011D6D F409 0023 F4               		dc.b $F4, 9, 0, $23, $F4	
00011D72 040D 0029 EC               		dc.b 4, $D, 0, $29, $EC	
00011D77 EC04 000F FC               		dc.b $EC, 4, 0, $F, $FC	
00011D7C F402 0011 0C               		dc.b $F4, 2, 0, $11, $C	
00011D81 0409 0037 FC               		dc.b 4, 9, 0, $37, $FC	
00011D86                            		even
00011D86                            		even
00011D86                            
00011D86                            		include	"_incObj\sub SolidObject.asm"
00011D86                            ; ---------------------------------------------------------------------------
00011D86                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
00011D86                            ;
00011D86                            ; input:
00011D86                            ;	d1 = width
00011D86                            ;	d2 = height / 2 (when jumping)
00011D86                            ;	d3 = height / 2 (when walking)
00011D86                            ;	d4 = x-axis position
00011D86                            ; ---------------------------------------------------------------------------
00011D86                            
00011D86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011D86                            
00011D86                            
00011D86                            SolidObject:
00011D86 4A28 0025                  		tst.b	obSolid(a0)	; is Sonic standing on the object?
00011D8A 6700 0000                  		beq.w	Solid_ChkEnter	; if not, branch
00011D8E 3401                       		move.w	d1,d2
00011D90 D442                       		add.w	d2,d2
00011D92 43F8 D000                  		lea	(v_player).w,a1
00011D96 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011D9C 6600                       		bne.s	@leave		; if yes, branch
00011D9E 3029 0008                  		move.w	obX(a1),d0
00011DA2 9068 0008                  		sub.w	obX(a0),d0
00011DA6 D041                       		add.w	d1,d0
00011DA8 6B00                       		bmi.s	@leave		; if Sonic moves off the left, branch
00011DAA B042                       		cmp.w	d2,d0		; has Sonic moved off the right?
00011DAC 6500                       		bcs.s	@stand		; if not, branch
00011DAE                            
00011DAE                            	@leave:
00011DAE 08A9 0003 0022             		bclr	#3,obStatus(a1)	; clear Sonic's standing flag
00011DB4 08A8 0003 0022             		bclr	#3,obStatus(a0)	; clear object's standing flag
00011DBA 4228 0025                  		clr.b	obSolid(a0)
00011DBE 7800                       		moveq	#0,d4
00011DC0 4E75                       		rts	
00011DC2                            
00011DC2                            	@stand:
00011DC2 3404                       		move.w	d4,d2
00011DC4 4EB9 0000 9758             		jsr	MvSonicOnPtfm
00011DCA 7800                       		moveq	#0,d4
00011DCC 4E75                       		rts	
00011DCE                            ; ===========================================================================
00011DCE                            
00011DCE                            SolidObject71:
00011DCE 4A28 0025                  		tst.b	obSolid(a0)
00011DD2 6700 0000                  		beq.w	loc_FAD0
00011DD6 3401                       		move.w	d1,d2
00011DD8 D442                       		add.w	d2,d2
00011DDA 43F8 D000                  		lea	(v_player).w,a1
00011DDE 0829 0001 0022             		btst	#1,obStatus(a1)
00011DE4 6600                       		bne.s	@leave
00011DE6 3029 0008                  		move.w	obX(a1),d0
00011DEA 9068 0008                  		sub.w	obX(a0),d0
00011DEE D041                       		add.w	d1,d0
00011DF0 6B00                       		bmi.s	@leave
00011DF2 B042                       		cmp.w	d2,d0
00011DF4 6500                       		bcs.s	@stand
00011DF6                            
00011DF6                            	@leave:
00011DF6 08A9 0003 0022             		bclr	#3,obStatus(a1)
00011DFC 08A8 0003 0022             		bclr	#3,obStatus(a0)
00011E02 4228 0025                  		clr.b	obSolid(a0)
00011E06 7800                       		moveq	#0,d4
00011E08 4E75                       		rts	
00011E0A                            
00011E0A                            	@stand:
00011E0A 3404                       		move.w	d4,d2
00011E0C 4EB9 0000 9758             		jsr	MvSonicOnPtfm
00011E12 7800                       		moveq	#0,d4
00011E14 4E75                       		rts	
00011E16                            ; ===========================================================================
00011E16                            
00011E16                            SolidObject2F:
00011E16 43F8 D000                  		lea	(v_player).w,a1
00011E1A 4A28 0001                  		tst.b	obRender(a0)
00011E1E 6A00 0000                  		bpl.w	Solid_Ignore
00011E22 3029 0008                  		move.w	obX(a1),d0
00011E26 9068 0008                  		sub.w	obX(a0),d0
00011E2A D041                       		add.w	d1,d0
00011E2C 6B00 0000                  		bmi.w	Solid_Ignore
00011E30 3601                       		move.w	d1,d3
00011E32 D643                       		add.w	d3,d3
00011E34 B043                       		cmp.w	d3,d0
00011E36 6200 0000                  		bhi.w	Solid_Ignore
00011E3A 3A00                       		move.w	d0,d5
00011E3C 0828 0000 0001             		btst	#0,obRender(a0)	; is object horizontally flipped?
00011E42 6700                       		beq.s	@notflipped	; if not, branch
00011E44 4645                       		not.w	d5
00011E46 DA43                       		add.w	d3,d5
00011E48                            
00011E48                            	@notflipped:
00011E48 E24D                       		lsr.w	#1,d5
00011E4A 7600                       		moveq	#0,d3
00011E4C 1632 5000                  		move.b	(a2,d5.w),d3
00011E50 9612                       		sub.b	(a2),d3
00011E52 3A28 000C                  		move.w	obY(a0),d5
00011E56 9A43                       		sub.w	d3,d5
00011E58 1629 0016                  		move.b	obHeight(a1),d3
00011E5C 4883                       		ext.w	d3
00011E5E D443                       		add.w	d3,d2
00011E60 3629 000C                  		move.w	obY(a1),d3
00011E64 9645                       		sub.w	d5,d3
00011E66 5843                       		addq.w	#4,d3
00011E68 D642                       		add.w	d2,d3
00011E6A 6B00 0000                  		bmi.w	Solid_Ignore
00011E6E 3802                       		move.w	d2,d4
00011E70 D844                       		add.w	d4,d4
00011E72 B644                       		cmp.w	d4,d3
00011E74 6400 0000                  		bcc.w	Solid_Ignore
00011E78 6000 0000                  		bra.w	loc_FB0E
00011E7C                            ; ===========================================================================
00011E7C                            
00011E7C                            Solid_ChkEnter:
00011E7C 4A28 0001                  		tst.b	obRender(a0)
00011E80 6A00 0000                  		bpl.w	Solid_Ignore
00011E84                            
00011E84                            loc_FAD0:
00011E84 43F8 D000                  		lea	(v_player).w,a1
00011E88 3029 0008                  		move.w	obX(a1),d0
00011E8C 9068 0008                  		sub.w	obX(a0),d0
00011E90 D041                       		add.w	d1,d0
00011E92 6B00 0000                  		bmi.w	Solid_Ignore	; if Sonic moves off the left, branch
00011E96 3601                       		move.w	d1,d3
00011E98 D643                       		add.w	d3,d3
00011E9A B043                       		cmp.w	d3,d0		; has Sonic moved off the right?
00011E9C 6200 0000                  		bhi.w	Solid_Ignore	; if yes, branch
00011EA0 1629 0016                  		move.b	obHeight(a1),d3
00011EA4 4883                       		ext.w	d3
00011EA6 D443                       		add.w	d3,d2
00011EA8 3629 000C                  		move.w	obY(a1),d3
00011EAC 9668 000C                  		sub.w	obY(a0),d3
00011EB0 5843                       		addq.w	#4,d3
00011EB2 D642                       		add.w	d2,d3
00011EB4 6B00 0000                  		bmi.w	Solid_Ignore	; if Sonic moves above, branch
00011EB8 3802                       		move.w	d2,d4
00011EBA D844                       		add.w	d4,d4
00011EBC B644                       		cmp.w	d4,d3		; has Sonic moved below?
00011EBE 6400 0000                  		bcc.w	Solid_Ignore	; if yes, branch
00011EC2                            
00011EC2                            loc_FB0E:
00011EC2 4A38 F7C8                  		tst.b	(f_lockmulti).w	; are controls locked?
00011EC6 6B00 0000                  		bmi.w	Solid_Ignore	; if yes, branch
00011ECA 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; is Sonic dying?
00011ED0 6400 0000                  			bcc.w	Solid_Debug
00011ED4 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode being used?
00011ED8 6600 0000                  		bne.w	Solid_Debug	; if yes, branch
00011EDC 3A00                       		move.w	d0,d5
00011EDE B240                       		cmp.w	d0,d1		; is Sonic right of centre of object?
00011EE0 6400                       		bcc.s	@isright	; if yes, branch
00011EE2 D241                       		add.w	d1,d1
00011EE4 9041                       		sub.w	d1,d0
00011EE6 3A00                       		move.w	d0,d5
00011EE8 4445                       		neg.w	d5
00011EEA                            
00011EEA                            	@isright:
00011EEA 3203                       		move.w	d3,d1
00011EEC B443                       		cmp.w	d3,d2		; is Sonic below centre of object?
00011EEE 6400                       		bcc.s	@isbelow	; if yes, branch
00011EF0                            
00011EF0 5943                       		subq.w	#4,d3
00011EF2 9644                       		sub.w	d4,d3
00011EF4 3203                       		move.w	d3,d1
00011EF6 4441                       		neg.w	d1
00011EF8                            
00011EF8                            	@isbelow:
00011EF8 BA41                       		cmp.w	d1,d5
00011EFA 6200 0000                  		bhi.w	Solid_TopBottom	; if Sonic hits top or bottom, branch
00011EFE 0C41 0004                  		cmpi.w	#4,d1
00011F02 6300                       		bls.s	Solid_SideAir
00011F04 4A40                       		tst.w	d0		; where is Sonic?
00011F06 6700                       		beq.s	Solid_Centre	; if inside the object, branch
00011F08 6B00                       		bmi.s	Solid_Right	; if right of the object, branch
00011F0A 4A69 0010                  		tst.w	obVelX(a1)	; is Sonic moving left?
00011F0E 6B00                       		bmi.s	Solid_Centre	; if yes, branch
00011F10 6000                       		bra.s	Solid_Left
00011F12                            ; ===========================================================================
00011F12                            
00011F12                            Solid_Right:
00011F12 4A69 0010                  		tst.w	obVelX(a1)	; is Sonic moving right?
00011F16 6A00                       		bpl.s	Solid_Centre	; if yes, branch
00011F18                            
00011F18                            Solid_Left:
00011F18 337C 0000 0020             		move.w	#0,obInertia(a1)
00011F1E 337C 0000 0010             		move.w	#0,obVelX(a1)	; stop Sonic moving
00011F24                            
00011F24                            Solid_Centre:
00011F24 9169 0008                  		sub.w	d0,obX(a1)	; correct Sonic's position
00011F28 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011F2E 6600                       		bne.s	Solid_SideAir	; if yes, branch
00011F30 08E9 0005 0022             		bset	#5,obStatus(a1)	; make Sonic push object
00011F36 08E8 0005 0022             		bset	#5,obStatus(a0)	; make object be pushed
00011F3C 7801                       		moveq	#1,d4		; return side collision
00011F3E 4E75                       		rts	
00011F40                            ; ===========================================================================
00011F40                            
00011F40                            Solid_SideAir:
00011F40 6100                       		bsr.s	Solid_NotPushing
00011F42 7801                       		moveq	#1,d4		; return side collision
00011F44 4E75                       		rts	
00011F46                            ; ===========================================================================
00011F46                            
00011F46                            Solid_Ignore:
00011F46 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing?
00011F4C 6700                       		beq.s	Solid_Debug	; if not, branch
00011F4E 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1)	; is Sonic in his jumping/rolling animation?
00011F54 6700                       		beq.s	Solid_NotPushing	; if so, branch
00011F56 0C29 0000 001C             		cmpi.b	#id_Drown,obAnim(a1)	; is Sonic in his drowning animation?
00011F5C 6700                       		beq.s	Solid_NotPushing	; if so, branch
00011F5E 0C29 0000 001C             		cmpi.b	#id_Hurt,obAnim(a1)	; is Sonic in his hurt animation?
00011F64 6700                       		beq.s	Solid_NotPushing	; if so, branch
00011F66 337C 0000 001C             		move.w	#id_Run,obAnim(a1) ; use running animation
00011F6C                            
00011F6C                            
00011F6C                            Solid_NotPushing:
00011F6C 08A8 0005 0022             		bclr	#5,obStatus(a0)	; clear pushing flag
00011F72 08A9 0005 0022             		bclr	#5,obStatus(a1)	; clear Sonic's pushing flag
00011F78                            
00011F78                            Solid_Debug:
00011F78 7800                       		moveq	#0,d4		; return no collision
00011F7A 4E75                       		rts	
00011F7C                            ; ===========================================================================
00011F7C                            
00011F7C                            Solid_TopBottom:
00011F7C 4A43                       		tst.w	d3		; is Sonic below the object?
00011F7E 6B00                       		bmi.s	Solid_Below	; if yes, branch
00011F80 0C43 0010                  		cmpi.w	#$10,d3		; has Sonic landed on the object?
00011F84 6500                       		bcs.s	Solid_Landed	; if yes, branch
00011F86 60BE                       		bra.s	Solid_Ignore
00011F88                            ; ===========================================================================
00011F88                            
00011F88                            Solid_Below:
00011F88 4A69 0012                  		tst.w	obVelY(a1)	; is Sonic moving vertically?
00011F8C 6700                       		beq.s	Solid_Squash	; if not, branch
00011F8E 6A00                       		bpl.s	Solid_TopBtmAir	; if moving downwards, branch
00011F90 4A43                       		tst.w	d3		; is Sonic above the object?
00011F92 6A00                       		bpl.s	Solid_TopBtmAir	; if yes, branch
00011F94 9769 000C                  		sub.w	d3,obY(a1)	; correct Sonic's position
00011F98 337C 0000 0012             		move.w	#0,obVelY(a1)	; stop Sonic moving
00011F9E                            
00011F9E                            Solid_TopBtmAir:
00011F9E 78FF                       		moveq	#-1,d4
00011FA0 4E75                       		rts	
00011FA2                            ; ===========================================================================
00011FA2                            
00011FA2                            Solid_Squash:
00011FA2 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011FA8 66F4                       		bne.s	Solid_TopBtmAir	; if yes, branch
00011FAA 2F08                       		move.l	a0,-(sp)
00011FAC 2049                       		movea.l	a1,a0
00011FAE 4EB9 0000 0000             		jsr	(KillSonic).l	; kill Sonic
00011FB4 205F                       		movea.l	(sp)+,a0
00011FB6 78FF                       		moveq	#-1,d4
00011FB8 4E75                       		rts	
00011FBA                            ; ===========================================================================
00011FBA                            
00011FBA                            Solid_Landed:
00011FBA 5943                       		subq.w	#4,d3
00011FBC 7200                       		moveq	#0,d1
00011FBE 1228 0014                  		move.b	obActWid(a0),d1
00011FC2 3401                       		move.w	d1,d2
00011FC4 D442                       		add.w	d2,d2
00011FC6 D269 0008                  		add.w	obX(a1),d1
00011FCA 9268 0008                  		sub.w	obX(a0),d1
00011FCE 6B00                       		bmi.s	Solid_Miss	; if Sonic is right of object, branch
00011FD0 B242                       		cmp.w	d2,d1		; is Sonic left of object?
00011FD2 6400                       		bcc.s	Solid_Miss	; if yes, branch
00011FD4 4A69 0012                  		tst.w	obVelY(a1)	; is Sonic moving upwards?
00011FD8 6B00                       		bmi.s	Solid_Miss	; if yes, branch
00011FDA 9769 000C                  		sub.w	d3,obY(a1)	; correct Sonic's position
00011FDE 5369 000C                  		subq.w	#1,obY(a1)
00011FE2 6100                       		bsr.s	Solid_ResetFloor
00011FE4 117C 0002 0025             		move.b	#2,obSolid(a0) ; set standing flags
00011FEA 08E8 0003 0022             		bset	#3,obStatus(a0)
00011FF0 78FF                       		moveq	#-1,d4		; return top/bottom collision
00011FF2 4E75                       		rts	
00011FF4                            ; ===========================================================================
00011FF4                            
00011FF4                            Solid_Miss:
00011FF4 7800                       		moveq	#0,d4
00011FF6 4E75                       		rts	
00011FF8                            ; End of function SolidObject
00011FF8                            
00011FF8                            
00011FF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011FF8                            
00011FF8                            
00011FF8                            Solid_ResetFloor:
00011FF8 0829 0003 0022             		btst	#3,obStatus(a1)	; is Sonic standing on something?
00011FFE 6700                       		beq.s	@notonobj	; if not, branch
00012000                            
00012000 7000                       		moveq	#0,d0
00012002 1029 003D                  		move.b	$3D(a1),d0	; get object being stood on
00012006 ED48                       		lsl.w	#6,d0
00012008 0680 00FF D000             		addi.l	#(v_objspace&$FFFFFF),d0
0001200E 2440                       		movea.l	d0,a2
00012010 08AA 0003 0022             		bclr	#3,obStatus(a2)	; clear object's standing flags
00012016 422A 0025                  		clr.b	obSolid(a2)
0001201A                            
0001201A                            	@notonobj:
0001201A 3008                       		move.w	a0,d0
0001201C 0440 D000                  		subi.w	#$D000,d0
00012020 EC48                       		lsr.w	#6,d0
00012022 0240 007F                  		andi.w	#$7F,d0
00012026 1340 003D                  		move.b	d0,$3D(a1)	; set object being stood on
0001202A 137C 0000 0026             		move.b	#0,obAngle(a1)	; clear Sonic's angle
00012030 337C 0000 0012             		move.w	#0,obVelY(a1)	; stop Sonic
00012036 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
0001203C 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00012042 6700                       		beq.s	@notinair	; if not, branch
00012044 2F08                       		move.l	a0,-(sp)
00012046 2049                       		movea.l	a1,a0
00012048 4EB9 0000 0000             		jsr	(Sonic_ResetOnFloor).l ; reset Sonic as if on floor
0001204E 205F                       		movea.l	(sp)+,a0
00012050                            
00012050                            	@notinair:
00012050 08E9 0003 0022             		bset	#3,obStatus(a1)	; set object standing flag
00012056 08E8 0003 0022             		bset	#3,obStatus(a0)	; set Sonic standing on object flag
0001205C 4E75                       		rts	
0001205E                            ; End of function Solid_ResetFloor
0001205E                            ; End of function Solid_ResetFloor
0001205E                            
0001205E                            		include	"_incObj\51 Smashable Green Block.asm"
0001205E                            ; ---------------------------------------------------------------------------
0001205E                            ; Object 51 - smashable	green block (MZ)
0001205E                            ; ---------------------------------------------------------------------------
0001205E                            
0001205E                            SmashBlock:
0001205E 7000                       		moveq	#0,d0
00012060 1028 0024                  		move.b	obRoutine(a0),d0
00012064 323B 0000                  		move.w	Smab_Index(pc,d0.w),d1
00012068 4EBB 1000                  		jsr	Smab_Index(pc,d1.w)
0001206C 6000 F880                  		bra.w	RememberState
00012070                            ; ===========================================================================
00012070 0000                       Smab_Index:	dc.w Smab_Main-Smab_Index
00012072 0000                       		dc.w Smab_Solid-Smab_Index
00012074 0000                       		dc.w Smab_Points-Smab_Index
00012076                            ; ===========================================================================
00012076                            
00012076                            Smab_Main:	; Routine 0
00012076 5428 0024                  		addq.b	#2,obRoutine(a0)
0001207A 217C 0000 0000 0004        		move.l	#Map_Smab,obMap(a0)
00012082 317C 42B8 0002             		move.w	#$42B8,obGfx(a0)
00012088 117C 0004 0001             		move.b	#4,obRender(a0)
0001208E 117C 0010 0014             		move.b	#$10,obActWid(a0)
00012094 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001209A 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
000120A0                            
000120A0                            Smab_Solid:	; Routine 2
000120A0                            
000120A0 =00000032                  sonicAniFrame:	equ $32		; Sonic's current animation number
000120A0 =00000034                  @count:		equ $34		; number of blocks hit + previous stuff
000120A0                            
000120A0 3178 F7D0 0034             		move.w	(v_itembonus).w,$34(a0)
000120A6 1178 D01C 0032             		move.b	(v_player+obAnim).w,sonicAniFrame(a0) ; load Sonic's animation number
000120AC 323C 001B                  		move.w	#$1B,d1
000120B0 343C 0010                  		move.w	#$10,d2
000120B4 363C 0011                  		move.w	#$11,d3
000120B8 3828 0008                  		move.w	obX(a0),d4
000120BC 6100 FCC8                  		bsr.w	SolidObject
000120C0 0828 0003 0022             		btst	#3,obStatus(a0)	; has Sonic landed on the block?
000120C6 6600                       		bne.s	@smash		; if yes, branch
000120C8                            
000120C8                            	@notspinning:
000120C8 4E75                       		rts	
000120CA                            ; ===========================================================================
000120CA                            
000120CA                            @smash:
000120CA 0C28 0000 0032             		cmpi.b	#id_Roll,sonicAniFrame(a0) ; is Sonic rolling/jumping?
000120D0 66F6                       		bne.s	@notspinning	; if not, branch
000120D2 31E8 0034 F7D0             		move.w	@count(a0),(v_itembonus).w
000120D8 08E9 0002 0022             		bset	#2,obStatus(a1)
000120DE 137C 000E 0016             		move.b	#$E,obHeight(a1)
000120E4 137C 0007 0017             		move.b	#7,obWidth(a1)
000120EA 137C 0000 001C             		move.b	#id_Roll,obAnim(a1) ; make Sonic roll
000120F0 337C FD00 0012             		move.w	#-$300,obVelY(a1) ; rebound Sonic
000120F6 08E9 0001 0022             		bset	#1,obStatus(a1)
000120FC 08A9 0003 0022             		bclr	#3,obStatus(a1)
00012102 137C 0002 0024             		move.b	#2,obRoutine(a1)
00012108 08A8 0003 0022             		bclr	#3,obStatus(a0)
0001210E 4228 0025                  		clr.b	obSolid(a0)
00012112 117C 0001 001A             		move.b	#1,obFrame(a0)
00012118 49F9 0000 0000             		lea	(Smab_Speeds).l,a4 ; load broken fragment speed data
0001211E 7203                       		moveq	#3,d1		; set number of	fragments to 4
00012120 343C 0038                  		move.w	#$38,d2
00012124 6100 D406                  		bsr.w	SmashObject
00012128 6100 DCDA                  		bsr.w	FindFreeObj
0001212C 6600                       		bne.s	Smab_Points
0001212E 12BC 0029                  		move.b	#id_Points,0(a1) ; load points object
00012132 3368 0008 0008             		move.w	obX(a0),obX(a1)
00012138 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001213E 3438 F7D0                  		move.w	(v_itembonus).w,d2
00012142 5478 F7D0                  		addq.w	#2,(v_itembonus).w ; increment bonus counter
00012146 0C42 0006                  		cmpi.w	#6,d2		; have fewer than 3 blocks broken?
0001214A 6500                       		bcs.s	@bonus		; if yes, branch
0001214C 7406                       		moveq	#6,d2		; set cap for points
0001214E                            
0001214E                            	@bonus:
0001214E 7000                       		moveq	#0,d0
00012150 303B 2000                  		move.w	Smab_Scores(pc,d2.w),d0
00012154 0C78 0020 F7D0             		cmpi.w	#$20,(v_itembonus).w ; have 16 blocks been smashed?
0001215A 6500                       		bcs.s	@givepoints	; if not, branch
0001215C 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
00012160 740A                       		moveq	#10,d2
00012162                            
00012162                            	@givepoints:
00012162 4EB9 0000 0000             		jsr	(AddPoints).l
00012168 E24A                       		lsr.w	#1,d2
0001216A 1342 001A                  		move.b	d2,obFrame(a1)
0001216E                            
0001216E                            Smab_Points:	; Routine 4
0001216E 6100 D7F4                  		bsr.w	SpeedToPos
00012172 0668 0038 0012             		addi.w	#$38,obVelY(a0)
00012178 6100 D7FE                  		bsr.w	DisplaySprite
0001217C 4A28 0001                  		tst.b	obRender(a0)
00012180 6A00 D836                  		bpl.w	DeleteObject
00012184 4E75                       		rts	
00012186                            ; ===========================================================================
00012186 FE00 FE00                  Smab_Speeds:	dc.w -$200, -$200	; x-speed, y-speed
0001218A FF00 FF00                  		dc.w -$100, -$100
0001218E 0200 FE00                  		dc.w $200, -$200
00012192 0100 FF00                  		dc.w $100, -$100
00012196                            
00012196 000A 0014 0032 0064        Smab_Scores:	dc.w 10, 20, 50, 100
00012196 000A 0014 0032 0064        Smab_Scores:	dc.w 10, 20, 50, 100
0001219E                            Map_Smab:	include	"_maps\Smashable Green Block.asm"
0001219E                            ; ---------------------------------------------------------------------------
0001219E                            ; Sprite mappings - smashable green block (MZ)
0001219E                            ; ---------------------------------------------------------------------------
0001219E                            Map_Smab_internal:
0001219E 0000                       		dc.w @two-Map_Smab_internal
000121A0 0000                       		dc.w @four-Map_Smab_internal
000121A2 02                         @two:		dc.b 2
000121A3 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0	; two fragments, arranged vertically
000121A8 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
000121AD 04                         @four:		dc.b 4
000121AE F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0 ; four fragments
000121B3 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
000121B8 F005 8000 00               		dc.b $F0, 5, $80, 0, 0
000121BD 0005 8000 00               		dc.b 0,	5, $80,	0, 0
000121C2                            		even
000121C2                            		even
000121C2                            
000121C2                            		include	"_incObj\52 Moving Blocks.asm"
000121C2                            ; ---------------------------------------------------------------------------
000121C2                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
000121C2                            ; ---------------------------------------------------------------------------
000121C2                            
000121C2                            MovingBlock:
000121C2 7000                       		moveq	#0,d0
000121C4 1028 0024                  		move.b	obRoutine(a0),d0
000121C8 323B 0000                  		move.w	MBlock_Index(pc,d0.w),d1
000121CC 4EFB 1000                  		jmp	MBlock_Index(pc,d1.w)
000121D0                            ; ===========================================================================
000121D0 0000                       MBlock_Index:	dc.w MBlock_Main-MBlock_Index
000121D2 0000                       		dc.w MBlock_Platform-MBlock_Index
000121D4 0000                       		dc.w MBlock_StandOn-MBlock_Index
000121D6                            
000121D6 =00000030                  mblock_origX:	equ $30
000121D6 =00000032                  mblock_origY:	equ $32
000121D6                            
000121D6 1000                       MBlock_Var:	dc.b $10, 0		; object width,	frame number
000121D8 2001                       		dc.b $20, 1
000121DA 2002                       		dc.b $20, 2
000121DC 4003                       		dc.b $40, 3
000121DE 3004                       		dc.b $30, 4
000121E0                            ; ===========================================================================
000121E0                            
000121E0                            MBlock_Main:	; Routine 0
000121E0 5428 0024                  		addq.b	#2,obRoutine(a0)
000121E4 217C 0000 0000 0004        		move.l	#Map_MBlock,obMap(a0)
000121EC 317C 42B8 0002             		move.w	#$42B8,obGfx(a0)
000121F2 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
000121F8 6600                       		bne.s	loc_FE44
000121FA 217C 0000 0000 0004        		move.l	#Map_MBlockLZ,obMap(a0) ; LZ specific code
00012202 317C 43BC 0002             		move.w	#$43BC,obGfx(a0)
00012208 117C 0007 0016             		move.b	#7,obHeight(a0)
0001220E                            
0001220E                            loc_FE44:
0001220E 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
00012214 6600                       		bne.s	loc_FE60
00012216 317C 22C0 0002             		move.w	#$22C0,obGfx(a0) ; SBZ specific code (object 5228)
0001221C 0C28 0028 0028             		cmpi.b	#$28,obSubtype(a0) ; is object 5228 ?
00012222 6700                       		beq.s	loc_FE60	; if yes, branch
00012224 317C 4460 0002             		move.w	#$4460,obGfx(a0) ; SBZ specific code (object 523x)
0001222A                            
0001222A                            loc_FE60:
0001222A 117C 0004 0001             		move.b	#4,obRender(a0)
00012230 7000                       		moveq	#0,d0
00012232 1028 0028                  		move.b	obSubtype(a0),d0
00012236 E648                       		lsr.w	#3,d0
00012238 0240 001E                  		andi.w	#$1E,d0
0001223C 45FB 0098                  		lea	MBlock_Var(pc,d0.w),a2
00012240 115A 0014                  		move.b	(a2)+,obActWid(a0)
00012244 115A 001A                  		move.b	(a2)+,obFrame(a0)
00012248 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001224E 3168 0008 0030             		move.w	obX(a0),mblock_origX(a0)
00012254 3168 000C 0032             		move.w	obY(a0),mblock_origY(a0)
0001225A 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
00012260                            
00012260                            MBlock_Platform: ; Routine 2
00012260 6100 0000                  		bsr.w	MBlock_Move
00012264 7200                       		moveq	#0,d1
00012266 1228 0014                  		move.b	obActWid(a0),d1
0001226A 4EB9 0000 9086             		jsr	(PlatformObject).l
00012270 6000                       		bra.s	MBlock_ChkDel
00012272                            ; ===========================================================================
00012272                            
00012272                            MBlock_StandOn:	; Routine 4
00012272 7200                       		moveq	#0,d1
00012274 1228 0014                  		move.b	obActWid(a0),d1
00012278 4EB9 0000 91FA             		jsr	(ExitPlatform).l
0001227E 3F28 0008                  		move.w	obX(a0),-(sp)
00012282 6100 0000                  		bsr.w	MBlock_Move
00012286 341F                       		move.w	(sp)+,d2
00012288 4EB9 0000 9764             		jsr	(MvSonicOnPtfm2).l
0001228E                            
0001228E                            MBlock_ChkDel:
000122AC 6000 D6CA                  		bra.w	DisplaySprite
000122B0                            ; ===========================================================================
000122B0                            
000122B0                            MBlock_Move:
000122B0 7000                       		moveq	#0,d0
000122B2 1028 0028                  		move.b	obSubtype(a0),d0
000122B6 0240 000F                  		andi.w	#$F,d0
000122BA D040                       		add.w	d0,d0
000122BC 323B 0000                  		move.w	MBlock_TypeIndex(pc,d0.w),d1
000122C0 4EFB 1000                  		jmp	MBlock_TypeIndex(pc,d1.w)
000122C4                            ; ===========================================================================
000122C4 0000 0000                  MBlock_TypeIndex:dc.w MBlock_Type00-MBlock_TypeIndex, MBlock_Type01-MBlock_TypeIndex
000122C8 0000 0000                  		dc.w MBlock_Type02-MBlock_TypeIndex, MBlock_Type03-MBlock_TypeIndex
000122CC 0000 0000                  		dc.w MBlock_Type02-MBlock_TypeIndex, MBlock_Type05-MBlock_TypeIndex
000122D0 0000 0000                  		dc.w MBlock_Type06-MBlock_TypeIndex, MBlock_Type07-MBlock_TypeIndex
000122D4 0000 0000                  		dc.w MBlock_Type08-MBlock_TypeIndex, MBlock_Type02-MBlock_TypeIndex
000122D8 0000                       		dc.w MBlock_Type0A-MBlock_TypeIndex
000122DA                            ; ===========================================================================
000122DA                            
000122DA                            MBlock_Type00:
000122DA 4E75                       		rts	
000122DC                            ; ===========================================================================
000122DC                            
000122DC                            MBlock_Type01:
000122DC 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
000122E0 323C 0060                  		move.w	#$60,d1
000122E4 0828 0000 0022             		btst	#0,obStatus(a0)
000122EA 6700                       		beq.s	loc_FF26
000122EC 4440                       		neg.w	d0
000122EE D041                       		add.w	d1,d0
000122F0                            
000122F0                            loc_FF26:
000122F0 3228 0030                  		move.w	mblock_origX(a0),d1
000122F4 9240                       		sub.w	d0,d1
000122F6 3141 0008                  		move.w	d1,obX(a0)
000122FA 4E75                       		rts	
000122FC                            ; ===========================================================================
000122FC                            
000122FC                            MBlock_Type02:
000122FC 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0) ; is Sonic standing on the platform?
00012302 6600                       		bne.s	MBlock_02_Wait
00012304 5228 0028                  		addq.b	#1,obSubtype(a0) ; if yes, add 1 to type
00012308                            
00012308                            MBlock_02_Wait:
00012308 4E75                       		rts	
0001230A                            ; ===========================================================================
0001230A                            
0001230A                            MBlock_Type03:
0001230A 7600                       		moveq	#0,d3
0001230C 1628 0014                  		move.b	obActWid(a0),d3
00012310 6100 0000                  		bsr.w	ObjHitWallRight
00012314 4A41                       		tst.w	d1		; has the platform hit a wall?
00012316 6B00                       		bmi.s	MBlock_03_End	; if yes, branch
00012318 5268 0008                  		addq.w	#1,obX(a0)	; move platform	to the right
0001231C 3168 0008 0030             		move.w	obX(a0),mblock_origX(a0)
00012322 4E75                       		rts	
00012324                            ; ===========================================================================
00012324                            
00012324                            MBlock_03_End:
00012324 4228 0028                  		clr.b	obSubtype(a0)	; change to type 00 (non-moving	type)
00012328 4E75                       		rts	
0001232A                            ; ===========================================================================
0001232A                            
0001232A                            MBlock_Type05:
0001232A 7600                       		moveq	#0,d3
0001232C 1628 0014                  		move.b	obActWid(a0),d3
00012330 6100 0000                  		bsr.w	ObjHitWallRight
00012334 4A41                       		tst.w	d1		; has the platform hit a wall?
00012336 6B00                       		bmi.s	MBlock_05_End	; if yes, branch
00012338 5268 0008                  		addq.w	#1,obX(a0)	; move platform	to the right
0001233C 3168 0008 0030             		move.w	obX(a0),mblock_origX(a0)
00012342 4E75                       		rts	
00012344                            ; ===========================================================================
00012344                            
00012344                            MBlock_05_End:
00012344 5228 0028                  		addq.b	#1,obSubtype(a0) ; change to type 06 (falling)
00012348 4E75                       		rts	
0001234A                            ; ===========================================================================
0001234A                            
0001234A                            MBlock_Type06:
0001234A 6100 D618                  		bsr.w	SpeedToPos
0001234E 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; make the platform fall
00012354 6100 0000                  		bsr.w	ObjFloorDist
00012358 4A41                       		tst.w	d1		; has platform hit the floor?
0001235A 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
0001235E D368 000C                  		add.w	d1,obY(a0)
00012362 4268 0012                  		clr.w	obVelY(a0)	; stop platform	falling
00012366 4228 0028                  		clr.b	obSubtype(a0)	; change to type 00 (non-moving)
0001236A                            
0001236A                            locret_FFA0:
0001236A 4E75                       		rts	
0001236C                            ; ===========================================================================
0001236C                            
0001236C                            MBlock_Type07:
0001236C 4A38 F7E2                  		tst.b	(f_switch+2).w	; has switch number 02 been pressed?
00012370 6700                       		beq.s	MBlock_07_ChkDel
00012372 5728 0028                  		subq.b	#3,obSubtype(a0) ; if yes, change object type to 04
00012376                            
00012376                            MBlock_07_ChkDel:
00012376 588F                       		addq.l	#4,sp
00012396 4E75                       		rts	
00012398                            ; ===========================================================================
00012398                            
00012398                            MBlock_Type08:
00012398 1038 FE7C                  		move.b	(v_oscillate+$1E).w,d0
0001239C 323C 0080                  		move.w	#$80,d1
000123A0 0828 0000 0022             		btst	#0,obStatus(a0)
000123A6 6700                       		beq.s	loc_FFE2
000123A8 4440                       		neg.w	d0
000123AA D041                       		add.w	d1,d0
000123AC                            
000123AC                            loc_FFE2:
000123AC 3228 0032                  		move.w	mblock_origY(a0),d1
000123B0 9240                       		sub.w	d0,d1
000123B2 3141 000C                  		move.w	d1,obY(a0)
000123B6 4E75                       		rts	
000123B8                            ; ===========================================================================
000123B8                            
000123B8                            MBlock_Type0A:
000123B8 7600                       		moveq	#0,d3
000123BA 1628 0014                  		move.b	obActWid(a0),d3
000123BE D643                       		add.w	d3,d3
000123C0 7208                       		moveq	#8,d1
000123C2 0828 0000 0022             		btst	#0,obStatus(a0)
000123C8 6700                       		beq.s	loc_10004
000123CA 4441                       		neg.w	d1
000123CC 4443                       		neg.w	d3
000123CE                            
000123CE                            loc_10004:
000123CE 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
000123D2 6600                       		bne.s	MBlock_0A_Back	; if yes, branch
000123D4 3028 0008                  		move.w	obX(a0),d0
000123D8 9068 0030                  		sub.w	mblock_origX(a0),d0
000123DC B043                       		cmp.w	d3,d0
000123DE 6700                       		beq.s	MBlock_0A_Wait
000123E0 D368 0008                  		add.w	d1,obX(a0)	; move platform
000123E4 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
000123EA 4E75                       		rts	
000123EC                            ; ===========================================================================
000123EC                            
000123EC                            MBlock_0A_Wait:
000123EC 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
000123F0 6600                       		bne.s	locret_1002E	; if time remains, branch
000123F2 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
000123F8                            
000123F8                            locret_1002E:
000123F8 4E75                       		rts	
000123FA                            ; ===========================================================================
000123FA                            
000123FA                            MBlock_0A_Back:
000123FA 3028 0008                  		move.w	obX(a0),d0
000123FE 9068 0030                  		sub.w	mblock_origX(a0),d0
00012402 6700                       		beq.s	MBlock_0A_Reset
00012404 9368 0008                  		sub.w	d1,obX(a0)	; return platform to its original position
00012408 4E75                       		rts	
0001240A                            ; ===========================================================================
0001240A                            
0001240A                            MBlock_0A_Reset:
0001240A 4268 0036                  		clr.w	$36(a0)
0001240E 5328 0028                  		subq.b	#1,obSubtype(a0)
00012412 4E75                       		rts	
00012412 4E75                       		rts	
00012414                            Map_MBlock:	include	"_maps\Moving Blocks (MZ and SBZ).asm"
00012414                            ; ---------------------------------------------------------------------------
00012414                            ; Sprite mappings - moving blocks (MZ, SBZ)
00012414                            ; ---------------------------------------------------------------------------
00012414                            Map_MBlock_internal:
00012414 0000                       		dc.w @mz1-Map_MBlock_internal
00012416 0000                       		dc.w @mz2-Map_MBlock_internal
00012418 0000                       		dc.w @sbz-Map_MBlock_internal
0001241A 0000                       		dc.w @sbzwide-Map_MBlock_internal
0001241C 0000                       		dc.w @mz3-Map_MBlock_internal
0001241E 01                         @mz1:		dc.b 1
0001241F F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00012424 02                         @mz2:		dc.b 2
00012425 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
0001242A F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
0001242F 04                         @sbz:		dc.b 4
00012430 F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
00012435 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
0001243A F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
0001243F 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
00012444 04                         @sbzwide:	dc.b 4
00012445 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
0001244A F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
0001244F F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
00012454 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
00012459 03                         @mz3:		dc.b 3
0001245A F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
0001245F F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00012464 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
0001246A 00                         		even
0001246A 00                         		even
0001246A                            Map_MBlockLZ:	include	"_maps\Moving Blocks (LZ).asm"
0001246A                            ; ---------------------------------------------------------------------------
0001246A                            ; Sprite mappings - moving block (LZ)
0001246A                            ; ---------------------------------------------------------------------------
0001246A                            Map_MBlockLZ_internal:
0001246A 0000                       		dc.w @0-Map_MBlockLZ_internal
0001246C 01                         @0:		dc.b 1
0001246D F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
00012472                            		even
00012472                            		even
00012472                            
00012472                            		include	"_incObj\55 Basaran.asm"
00012472                            ; ---------------------------------------------------------------------------
00012472                            ; Object 55 - Basaran enemy (MZ)
00012472                            ; ---------------------------------------------------------------------------
00012472                            
00012472                            Basaran:
00012472 7000                       		moveq	#0,d0
00012474 1028 0024                  		move.b	obRoutine(a0),d0
00012478 323B 0000                  		move.w	Bas_Index(pc,d0.w),d1
0001247C 4EFB 1000                  		jmp	Bas_Index(pc,d1.w)
00012480                            ; ===========================================================================
00012480 0000                       Bas_Index:	dc.w Bas_Main-Bas_Index
00012482 0000                       		dc.w Bas_Action-Bas_Index
00012484                            ; ===========================================================================
00012484                            
00012484                            Bas_Main:	; Routine 0
00012484 5428 0024                  		addq.b	#2,obRoutine(a0)
00012488 217C 0000 0000 0004        		move.l	#Map_Bas,obMap(a0)
00012490 317C 84B8 0002             		move.w	#$84B8,obGfx(a0)
00012496 117C 0004 0001             		move.b	#4,obRender(a0)
0001249C 117C 000C 0016             		move.b	#$C,obHeight(a0)
000124A2 317C 0100 0018             		move.w	#$100,obPriority(a0)
000124A8 117C 000B 0020             		move.b	#$B,obColType(a0)
000124AE 117C 0010 0014             		move.b	#$10,obActWid(a0)
000124B4                            
000124B4                            Bas_Action:	; Routine 2
000124B4 7000                       		moveq	#0,d0
000124B6 1028 0025                  		move.b	ob2ndRout(a0),d0
000124BA 323B 0000                  		move.w	@index(pc,d0.w),d1
000124BE 4EBB 1000                  		jsr	@index(pc,d1.w)
000124C2 43F9 0000 0000             		lea	(Ani_Bas).l,a1
000124C8 6100 A55A                  		bsr.w	AnimateSprite
000124CC 6000 F420                  		bra.w	RememberState
000124D0                            ; ===========================================================================
000124D0 0000                       @index:		dc.w @dropcheck-@index
000124D2 0000                       		dc.w @dropfly-@index
000124D4 0000                       		dc.w @flapsound-@index
000124D6 0000                       		dc.w @flyup-@index
000124D8                            ; ===========================================================================
000124D8                            
000124D8                            @dropcheck:
000124D8 343C 0080                  		move.w	#$80,d2
000124DC 6100 0000                  		bsr.w	@chkdistance	; is Sonic < $80 pixels from basaran?
000124E0 6400                       		bcc.s	@nodrop		; if not, branch
000124E2 3038 D00C                  		move.w	(v_player+obY).w,d0
000124E6 3140 0036                  		move.w	d0,$36(a0)
000124EA 9068 000C                  		sub.w	obY(a0),d0
000124EE 6500                       		bcs.s	@nodrop
000124F0 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic < $80 pixels from basaran?
000124F4 6400                       		bcc.s	@nodrop		; if not, branch
000124F6 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	on?
000124FA 6600                       		bne.s	@nodrop		; if yes, branch
000124FC                            
000124FC 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00012500 D007                       		add.b	d7,d0
00012502 0200 0007                  		andi.b	#7,d0
00012506 6600                       		bne.s	@nodrop
00012508 117C 0001 001C             		move.b	#1,obAnim(a0)
0001250E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00012512                            
00012512                            	@nodrop:
00012512 4E75                       		rts	
00012514                            ; ===========================================================================
00012514                            
00012514                            @dropfly:
00012514 6100 D44E                  		bsr.w	SpeedToPos
00012518 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; make basaran fall
0001251E 343C 0080                  		move.w	#$80,d2
00012522 6100 0000                  		bsr.w	@chkdistance
00012526 3028 0036                  		move.w	$36(a0),d0
0001252A 9068 000C                  		sub.w	obY(a0),d0
0001252E 6500                       		bcs.s	@chkdel
00012530 0C40 0010                  		cmpi.w	#$10,d0		; is basaran close to Sonic vertically?
00012534 6400                       		bcc.s	@dropmore	; if not, branch
00012536 3141 0010                  		move.w	d1,obVelX(a0)	; make basaran fly horizontally
0001253A 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop basaran falling
00012540 117C 0002 001C             		move.b	#2,obAnim(a0)
00012546 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001254A                            
0001254A                            	@dropmore:
0001254A 4E75                       		rts	
0001254C                            
0001254C                            	@chkdel:
0001254C 4A28 0001                  		tst.b	obRender(a0)
00012550 6A00 D466                  		bpl.w	DeleteObject
00012554 4E75                       		rts	
00012556                            ; ===========================================================================
00012556                            
00012556                            @flapsound:
00012556 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0001255A 0200 000F                  		andi.b	#$F,d0
0001255E 6600                       		bne.s	@nosound
0001256A                            
0001256A                            	@nosound:
0001256A 6100 D3F8                  		bsr.w	SpeedToPos
0001256E 3038 D008                  		move.w	(v_player+obX).w,d0
00012572 9068 0008                  		sub.w	obX(a0),d0
00012576 6400                       		bcc.s	@isright	; if Sonic is right of basaran, branch
00012578 4440                       		neg.w	d0
0001257A                            
0001257A                            	@isright:
0001257A 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of basaran?
0001257E 6500                       		bcs.s	@dontflyup	; if yes, branch
00012580 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00012584 D007                       		add.b	d7,d0
00012586 0200 0007                  		andi.b	#7,d0
0001258A 6600                       		bne.s	@dontflyup
0001258C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00012590                            
00012590                            @dontflyup:
00012590 4E75                       		rts	
00012592                            ; ===========================================================================
00012592                            
00012592                            @flyup:
00012592 6100 D3D0                  		bsr.w	SpeedToPos
00012596 0468 0018 0012             		subi.w	#$18,obVelY(a0)	; make basaran fly upwards
0001259C 6100 0000                  		bsr.w	ObjHitCeiling
000125A0 4A41                       		tst.w	d1		; has basaran hit the ceiling?
000125A2 6A00                       		bpl.s	@noceiling	; if not, branch
000125A4 9368 000C                  		sub.w	d1,obY(a0)
000125A8 0268 FFF8 0008             		andi.w	#$FFF8,obX(a0)
000125AE 4268 0010                  		clr.w	obVelX(a0)	; stop basaran moving
000125B2 4268 0012                  		clr.w	obVelY(a0)
000125B6 4228 001C                  		clr.b	obAnim(a0)
000125BA 4228 0025                  		clr.b	ob2ndRout(a0)
000125BE                            
000125BE                            	@noceiling:
000125BE 4E75                       		rts	
000125C0                            ; ===========================================================================
000125C0                            
000125C0                            ; Subroutine to check Sonic's distance from the basaran
000125C0                            
000125C0                            ; input:
000125C0                            ;	d2 = distance to compare
000125C0                            
000125C0                            ; output:
000125C0                            ;	d0 = distance between Sonic and basaran
000125C0                            ;	d1 = speed/direction for basaran to fly
000125C0                            
000125C0                            @chkdistance:
000125C0 323C 0100                  		move.w	#$100,d1
000125C4 08E8 0000 0022             		bset	#0,obStatus(a0)
000125CA 3038 D008                  		move.w	(v_player+obX).w,d0
000125CE 9068 0008                  		sub.w	obX(a0),d0
000125D2 6400                       		bcc.s	@right		; if Sonic is right of basaran, branch
000125D4 4440                       		neg.w	d0
000125D6 4441                       		neg.w	d1
000125D8 08A8 0000 0022             		bclr	#0,obStatus(a0)
000125DE                            
000125DE                            	@right:
000125DE B042                       		cmp.w	d2,d0
000125E0 4E75                       		rts	
000125E2                            ; ===========================================================================
000125E2                            ; unused crap
000125E2 6100 D380                  		bsr.w	SpeedToPos
000125E6 6100 D390                  		bsr.w	DisplaySprite
000125EA 4A28 0001                  		tst.b	obRender(a0)
000125EE 6A00 D3C8                  		bpl.w	DeleteObject
000125F2 4E75                       		rts	
000125F2 4E75                       		rts	
000125F4                            		include	"_anim\Basaran.asm"
000125F4                            ; ---------------------------------------------------------------------------
000125F4                            ; Animation script - Basaran enemy
000125F4                            ; ---------------------------------------------------------------------------
000125F4 0000                       Ani_Bas:	dc.w @still-Ani_Bas
000125F6 0000                       		dc.w @fall-Ani_Bas
000125F8 0000                       		dc.w @fly-Ani_Bas
000125FA 0F00 FF                    @still:		dc.b $F, 0, afEnd
000125FE 00                         		even
000125FE 0F01 FF                    @fall:		dc.b $F, 1, afEnd
00012602 00                         		even
00012602 0301 0203 02FF             @fly:		dc.b 3,	1, 2, 3, 2, afEnd
00012608                            		even
00012608                            		even
00012608                            Map_Bas:	include	"_maps\Basaran.asm"
00012608                            ; --------------------------------------------------------------------------------
00012608                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00012608                            ; --------------------------------------------------------------------------------
00012608                            
00012608                            SME_RhYYA:	
00012608 0000 0000                  		dc.w SME_RhYYA_8-SME_RhYYA, SME_RhYYA_E-SME_RhYYA	
0001260C 0000 0000                  		dc.w SME_RhYYA_1E-SME_RhYYA, SME_RhYYA_33-SME_RhYYA	
00012610 01                         SME_RhYYA_8:	dc.b 1	
00012611 F406 2000 F8               		dc.b $F4, 6, $20, 0, $F8	
00012616 03                         SME_RhYYA_E:	dc.b 3	
00012617 F20E 2006 F4               		dc.b $F2, $E, $20, 6, $F4	
0001261C 0A04 2012 FC               		dc.b $A, 4, $20, $12, $FC	
00012621 0200 2027 0C               		dc.b 2, 0, $20, $27, $C	
00012626 04                         SME_RhYYA_1E:	dc.b 4	
00012627 F804 2014 F8               		dc.b $F8, 4, $20, $14, $F8	
0001262C 000C 2016 F0               		dc.b 0, $C, $20, $16, $F0	
00012631 0804 201A 00               		dc.b 8, 4, $20, $1A, 0	
00012636 0000 2028 0C               		dc.b 0, 0, $20, $28, $C	
0001263B 04                         SME_RhYYA_33:	dc.b 4	
0001263C F609 201C F5               		dc.b $F6, 9, $20, $1C, $F5	
00012641 0608 2022 F4               		dc.b 6, 8, $20, $22, $F4	
00012646 0E04 2025 F4               		dc.b $E, 4, $20, $25, $F4	
0001264B FE00 2027 0C               		dc.b $FE, 0, $20, $27, $C	
00012650                            		even
00012650                            		even
00012650                            
00012650                            		include	"_incObj\56 Floating Blocks and Doors.asm"
00012650                            ; ---------------------------------------------------------------------------
00012650                            ; Object 56 - floating blocks (SYZ/SLZ), large doors (LZ)
00012650                            ; ---------------------------------------------------------------------------
00012650                            
00012650                            FloatingBlock:
00012650 7000                       		moveq	#0,d0
00012652 1028 0024                  		move.b	obRoutine(a0),d0
00012656 323B 0000                  		move.w	FBlock_Index(pc,d0.w),d1
0001265A 4EFB 1000                  		jmp	FBlock_Index(pc,d1.w)
0001265E                            ; ===========================================================================
0001265E 0000                       FBlock_Index:	dc.w FBlock_Main-FBlock_Index
00012660 0000                       		dc.w FBlock_Action-FBlock_Index
00012662                            
00012662 =00000034                  fb_origX:	equ $34		; original x-axis position
00012662 =00000030                  fb_origY:	equ $30		; original y-axis position
00012662 =0000003A                  fb_height:	equ $3A		; total object height
00012662 =0000003C                  fb_type:		equ $3C		; subtype (2nd digit only)
00012662                            
00012662                            FBlock_Var:	; width/2, height/2
00012662 1010                       		dc.b  $10, $10	; subtype 0x/8x
00012664 2020                       		dc.b  $20, $20	; subtype 1x/9x
00012666 1020                       		dc.b  $10, $20	; subtype 2x/Ax
00012668 201A                       		dc.b  $20, $1A	; subtype 3x/Bx
0001266A 1027                       		dc.b  $10, $27	; subtype 4x/Cx
0001266C 1010                       		dc.b  $10, $10	; subtype 5x/Dx
0001266E 0820                       		dc.b	8, $20	; subtype 6x/Ex
00012670 4010                       		dc.b  $40, $10	; subtype 7x/Fx
00012672                            ; ===========================================================================
00012672                            
00012672                            FBlock_Main:	; Routine 0
00012672 5428 0024                  		addq.b	#2,obRoutine(a0)
00012676 217C 0000 0000 0004        		move.l	#Map_FBlock,obMap(a0)
0001267E 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00012684 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
0001268A 6600                       		bne.s	@notLZ
0001268C 317C 43C4 0002             		move.w	#$43C4,obGfx(a0) ; LZ specific code
00012692                            
00012692                            	@notLZ:
00012692 117C 0004 0001             		move.b	#4,obRender(a0)
00012698 317C 0180 0018             		move.w	#$180,obPriority(a0)
0001269E 7000                       		moveq	#0,d0
000126A0 1028 0028                  		move.b	obSubtype(a0),d0 ; get subtype
000126A4 E648                       		lsr.w	#3,d0
000126A6 0240 000E                  		andi.w	#$E,d0		; read only the 1st digit
000126AA 45FB 00B6                  		lea	FBlock_Var(pc,d0.w),a2 ; get size data
000126AE 115A 0014                  		move.b	(a2)+,obActWid(a0)
000126B2 1152 0016                  		move.b	(a2),obHeight(a0)
000126B6 E248                       		lsr.w	#1,d0
000126B8 1140 001A                  		move.b	d0,obFrame(a0)
000126BC 3168 0008 0034             		move.w	obX(a0),fb_origX(a0)
000126C2 3168 000C 0030             		move.w	obY(a0),fb_origY(a0)
000126C8 7000                       		moveq	#0,d0
000126CA 1012                       		move.b	(a2),d0
000126CC D040                       		add.w	d0,d0
000126CE 3140 003A                  		move.w	d0,fb_height(a0)
000126D2 0C28 0037 0028             			cmpi.b	#$37,obSubtype(a0)
000126D8 6600                       			bne.s	@dontdelete
000126DA 0C68 1BB8 0008             			cmpi.w	#$1BB8,obX(a0)
000126E0 6600                       			bne.s	@notatpos
000126E2 4A38 F7CE                  			tst.b	($FFFFF7CE).w
000126E6 6700                       			beq.s	@dontdelete
000126E8 4EF9 0000 F9B8             			jmp	(DeleteObject).l
000126EE                            	@notatpos:
000126EE 4228 0028                  			clr.b	obSubtype(a0)
000126F2 4A38 F7CE                  			tst.b	($FFFFF7CE).w
000126F6 6600                       			bne.s	@dontdelete
000126F8 4EF9 0000 F9B8             			jmp	(DeleteObject).l
000126FE                            	@dontdelete:
000126FE 7000                       		moveq	#0,d0
00012700 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012706 6700                       		beq.s	@stillnotLZ
00012708 1028 0028                  		move.b	obSubtype(a0),d0 ; SYZ/SLZ specific code
0001270C 0240 000F                  		andi.w	#$F,d0
00012710 5140                       		subq.w	#8,d0
00012712 6500                       		bcs.s	@stillnotLZ
00012714 E548                       		lsl.w	#2,d0
00012716 45F8 FE8A                  		lea	(v_oscillate+$2C).w,a2
0001271A 45F2 0000                  		lea	(a2,d0.w),a2
0001271E 4A52                       		tst.w	(a2)
00012720 6A00                       		bpl.s	@stillnotLZ
00012722 0868 0000 0022             		bchg	#0,obStatus(a0)
00012728                            
00012728                            	@stillnotLZ:
00012728 1028 0028                  		move.b	obSubtype(a0),d0
0001272C 6A00                       		bpl.s	FBlock_Action
0001272E 0200 000F                  		andi.b	#$F,d0
00012732 1140 003C                  		move.b	d0,fb_type(a0)
00012736 117C 0005 0028             		move.b	#5,obSubtype(a0)
0001273C 0C28 0007 001A             		cmpi.b	#7,obFrame(a0)
00012742 6600                       		bne.s	@chkstate
00012744 117C 000C 0028             		move.b	#$C,obSubtype(a0)
0001274A 317C 0080 003A             		move.w	#$80,fb_height(a0)
00012750                            
00012750                            @chkstate:
00012750 45F8 FC00                  		lea	(v_objstate).w,a2
00012754 7000                       		moveq	#0,d0
00012756 1028 0023                  		move.b	obRespawnNo(a0),d0
0001275A 6700                       		beq.s	FBlock_Action
0001275C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00012762 0832 0000 0002             		btst	#0,2(a2,d0.w)
00012768 6700                       		beq.s	FBlock_Action
0001276A 5228 0028                  		addq.b	#1,obSubtype(a0)
0001276E 4268 003A                  		clr.w	fb_height(a0)
00012772                            
00012772                            FBlock_Action:	; Routine 2
00012772 3F28 0008                  		move.w	obX(a0),-(sp)
00012776 7000                       		moveq	#0,d0
00012778 1028 0028                  		move.b	obSubtype(a0),d0 ; get object subtype
0001277C 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00012780 D040                       		add.w	d0,d0
00012782 323B 0000                  		move.w	@index(pc,d0.w),d1
00012786 4EBB 1000                  		jsr	@index(pc,d1.w)	; move block subroutines
0001278A 381F                       		move.w	(sp)+,d4
0001278C 4A28 0001                  		tst.b	obRender(a0)
00012790 6A00                       		bpl.s	@chkdel
00012792 7200                       		moveq	#0,d1
00012794 1228 0014                  		move.b	obActWid(a0),d1
00012798 0641 000B                  		addi.w	#$B,d1
0001279C 7400                       		moveq	#0,d2
0001279E 1428 0016                  		move.b	obHeight(a0),d2
000127A2 3602                       		move.w	d2,d3
000127A4 5243                       		addq.w	#1,d3
000127A6 6100 F5DE                  		bsr.w	SolidObject
000127AA                            
000127AA                            	@chkdel:
000127C6                            		@display:
000127C6 6000 D1B0                  			bra.w	DisplaySprite
000127CA                            		@chkdel2:
000127CA 0C28 0037 0028             			cmpi.b	#$37,obSubtype(a0)
000127D0 6600                       			bne.s	@delete
000127D2 4A28 0038                  			tst.b	$38(a0)
000127D6 66EE                       			bne.s	@display
000127D8                            		@delete:
000127D8 4EF9 0000 F9B8             			jmp	(DeleteObject).l
000127DE                            ; ===========================================================================
000127DE 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
000127E2 0000 0000                  		dc.w @type02-@index, @type03-@index
000127E6 0000 0000                  		dc.w @type04-@index, @type05-@index
000127EA 0000 0000                  		dc.w @type06-@index, @type07-@index
000127EE 0000 0000                  		dc.w @type08-@index, @type09-@index
000127F2 0000 0000                  		dc.w @type0A-@index, @type0B-@index
000127F6 0000 0000                  		dc.w @type0C-@index, @type0D-@index
000127FA                            ; ===========================================================================
000127FA                            
000127FA                            @type00:
000127FA                            ; doesn't move
000127FA 4E75                       		rts	
000127FC                            ; ===========================================================================
000127FC                            
000127FC                            @type01:
000127FC                            ; moves side-to-side
000127FC 323C 0040                  		move.w	#$40,d1		; set move distance
00012800 7000                       		moveq	#0,d0
00012802 1038 FE68                  		move.b	(v_oscillate+$A).w,d0
00012806 6000                       		bra.s	@moveLR
00012808                            ; ===========================================================================
00012808                            
00012808                            @type02:
00012808                            ; moves side-to-side
00012808 323C 0080                  		move.w	#$80,d1		; set move distance
0001280C 7000                       		moveq	#0,d0
0001280E 1038 FE7C                  		move.b	(v_oscillate+$1E).w,d0
00012812                            
00012812                            	@moveLR:
00012812 0828 0000 0022             		btst	#0,obStatus(a0)
00012818 6700                       		beq.s	@noflip
0001281A 4440                       		neg.w	d0
0001281C D041                       		add.w	d1,d0
0001281E                            
0001281E                            	@noflip:
0001281E 3228 0034                  		move.w	fb_origX(a0),d1
00012822 9240                       		sub.w	d0,d1
00012824 3141 0008                  		move.w	d1,obX(a0)	; move object horizontally
00012828 4E75                       		rts	
0001282A                            ; ===========================================================================
0001282A                            
0001282A                            @type03:
0001282A                            ; moves up/down
0001282A 323C 0040                  		move.w	#$40,d1		; set move distance
0001282E 7000                       		moveq	#0,d0
00012830 1038 FE68                  		move.b	(v_oscillate+$A).w,d0
00012834 6000                       		bra.s	@moveUD
00012836                            ; ===========================================================================
00012836                            
00012836                            @type04:
00012836                            ; moves up/down
00012836 323C 0080                  		move.w	#$80,d1		; set move distance
0001283A 7000                       		moveq	#0,d0
0001283C 1038 FE7C                  		move.b	(v_oscillate+$1E).w,d0
00012840                            
00012840                            	@moveUD:
00012840 0828 0000 0022             		btst	#0,obStatus(a0)
00012846 6700                       		beq.s	@noflip04
00012848 4440                       		neg.w	d0
0001284A D041                       		add.w	d1,d0
0001284C                            
0001284C                            	@noflip04:
0001284C 3228 0030                  		move.w	fb_origY(a0),d1
00012850 9240                       		sub.w	d0,d1
00012852 3141 000C                  		move.w	d1,obY(a0)	; move object vertically
00012856 4E75                       		rts	
00012858                            ; ===========================================================================
00012858                            
00012858                            @type05:
00012858                            ; moves up when a switch is pressed
00012858 4A28 0038                  		tst.b	$38(a0)
0001285C 6600                       		bne.s	@loc_104A4
0001285E 0C78 0100 FE10             		cmpi.w	#(id_LZ<<8)+0,(v_zone).w ; is level LZ1 ?
00012864 6600                       		bne.s	@aaa		; if not, branch
00012866 0C28 0003 003C             		cmpi.b	#3,fb_type(a0)
0001286C 6600                       		bne.s	@aaa
0001286E 4238 F7C9                  		clr.b	(f_wtunnelallow).w
00012872 3038 D008                  		move.w	(v_player+obX).w,d0
00012876 B068 0008                  		cmp.w	obX(a0),d0
0001287A 6400                       		bcc.s	@aaa
0001287C 11FC 0001 F7C9             		move.b	#1,(f_wtunnelallow).w
00012882                            
00012882                            	@aaa:
00012882 45F8 F7E0                  		lea	(f_switch).w,a2
00012886 7000                       		moveq	#0,d0
00012888 1028 003C                  		move.b	fb_type(a0),d0
0001288C 0832 0000 0000             		btst	#0,(a2,d0.w)
00012892 6700                       		beq.s	@loc_104AE
00012894 0C78 0100 FE10             		cmpi.w	#(id_LZ<<8)+0,(v_zone).w ; is level LZ1 ?
0001289A 6600                       		bne.s	@loc_1049E	; if not, branch
0001289C 0C00 0003                  		cmpi.b	#3,d0
000128A0 6600                       		bne.s	@loc_1049E
000128A2 4238 F7C9                  		clr.b	(f_wtunnelallow).w
000128A6                            
000128A6                            @loc_1049E:
000128A6 117C 0001 0038             		move.b	#1,$38(a0)
000128AC                            
000128AC                            @loc_104A4:
000128AC 4A68 003A                  		tst.w	fb_height(a0)
000128B0 6700                       		beq.s	@loc_104C8
000128B2 5568 003A                  		subq.w	#2,fb_height(a0)
000128B6                            
000128B6                            @loc_104AE:
000128B6 3028 003A                  		move.w	fb_height(a0),d0
000128BA 0828 0000 0022             		btst	#0,$22(a0)
000128C0 6700                       		beq.s	@loc_104BC
000128C2 4440                       		neg.w	d0
000128C4                            
000128C4                            @loc_104BC:
000128C4 3228 0030                  		move.w	fb_origY(a0),d1
000128C8 D240                       		add.w	d0,d1
000128CA 3141 000C                  		move.w	d1,obY(a0)
000128CE 4E75                       		rts	
000128D0                            ; ===========================================================================
000128D0                            
000128D0                            @loc_104C8:
000128D0 5228 0028                  		addq.b	#1,$28(a0)
000128D4 4228 0038                  		clr.b	$38(a0)
000128D8 45F8 FC00                  		lea	(v_objstate).w,a2
000128DC 7000                       		moveq	#0,d0
000128DE 1028 0023                  		move.b	obRespawnNo(a0),d0
000128E2 67D2                       		beq.s	@loc_104AE
000128E4 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000128EA 60CA                       		bra.s	@loc_104AE
000128EC                            ; ===========================================================================
000128EC                            
000128EC                            @type06:
000128EC 4A28 0038                  		tst.b	$38(a0)
000128F0 6600                       		bne.s	@loc_10500
000128F2 45F8 F7E0                  		lea	(f_switch).w,a2
000128F6 7000                       		moveq	#0,d0
000128F8 1028 003C                  		move.b	fb_type(a0),d0
000128FC 4A32 0000                  		tst.b	(a2,d0.w)
00012900 6A00                       		bpl.s	@loc_10512
00012902 117C 0001 0038             		move.b	#1,$38(a0)
00012908                            
00012908                            @loc_10500:
00012908 7000                       		moveq	#0,d0
0001290A 1028 0016                  		move.b	obHeight(a0),d0
0001290E D040                       		add.w	d0,d0
00012910 B068 003A                  		cmp.w	fb_height(a0),d0
00012914 6700                       		beq.s	@loc_1052C
00012916 5468 003A                  		addq.w	#2,fb_height(a0)
0001291A                            
0001291A                            @loc_10512:
0001291A 3028 003A                  		move.w	fb_height(a0),d0
0001291E 0828 0000 0022             		btst	#0,obStatus(a0)
00012924 6700                       		beq.s	@loc_10520
00012926 4440                       		neg.w	d0
00012928                            
00012928                            @loc_10520:
00012928 3228 0030                  		move.w	fb_origY(a0),d1
0001292C D240                       		add.w	d0,d1
0001292E 3141 000C                  		move.w	d1,obY(a0)
00012932 4E75                       		rts	
00012934                            ; ===========================================================================
00012934                            
00012934                            @loc_1052C:
00012934 5328 0028                  		subq.b	#1,obSubtype(a0)
00012938 4228 0038                  		clr.b	$38(a0)
0001293C 45F8 FC00                  		lea	(v_objstate).w,a2
00012940 7000                       		moveq	#0,d0
00012942 1028 0023                  		move.b	obRespawnNo(a0),d0
00012946 67D2                       		beq.s	@loc_10512
00012948 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0001294E 60CA                       		bra.s	@loc_10512
00012950                            ; ===========================================================================
00012950                            
00012950                            @type07:
00012950 4A28 0038                  		tst.b	$38(a0)
00012954 6600                       		bne.s	@loc_1055E
00012956 4A38 F7EF                  		tst.b	(f_switch+$F).w	; has switch number $F been pressed?
0001295A 6700                       		beq.s	@locret_10578
0001295C 117C 0001 0038             		move.b	#1,$38(a0)
00012962 4268 003A                  		clr.w	fb_height(a0)
00012966                            
00012966                            @loc_1055E:
00012966 5268 0008                  		addq.w	#1,obX(a0)
0001296A 3168 0008 0034             		move.w	obX(a0),fb_origX(a0)
00012970 5268 003A                  		addq.w	#1,fb_height(a0)
00012974 0C68 0380 003A             		cmpi.w	#$380,fb_height(a0)
0001297A 6600                       		bne.s	@locret_10578
0001297C 11FC 0001 F7CE             			move.b	#1,($FFFFF7CE).w
00012982 4228 0038                  			clr.b	$38(a0)
00012986 4228 0028                  		clr.b	obSubtype(a0)
0001298A                            
0001298A                            @locret_10578:
0001298A 4E75                       		rts	
0001298C                            ; ===========================================================================
0001298C                            
0001298C                            @type0C:
0001298C 4A28 0038                  		tst.b	$38(a0)
00012990 6600                       		bne.s	@loc_10598
00012992 45F8 F7E0                  		lea	(f_switch).w,a2
00012996 7000                       		moveq	#0,d0
00012998 1028 003C                  		move.b	fb_type(a0),d0
0001299C 0832 0000 0000             		btst	#0,(a2,d0.w)
000129A2 6700                       		beq.s	@loc_105A2
000129A4 117C 0001 0038             		move.b	#1,$38(a0)
000129AA                            
000129AA                            @loc_10598:
000129AA 4A68 003A                  		tst.w	fb_height(a0)
000129AE 6700                       		beq.s	@loc_105C0
000129B0 5568 003A                  		subq.w	#2,fb_height(a0)
000129B4                            
000129B4                            @loc_105A2:
000129B4 3028 003A                  		move.w	fb_height(a0),d0
000129B8 0828 0000 0022             		btst	#0,obStatus(a0)
000129BE 6700                       		beq.s	@loc_105B4
000129C0 4440                       		neg.w	d0
000129C2 0640 0080                  		addi.w	#$80,d0
000129C6                            
000129C6                            @loc_105B4:
000129C6 3228 0034                  		move.w	fb_origX(a0),d1
000129CA D240                       		add.w	d0,d1
000129CC 3141 0008                  		move.w	d1,obX(a0)
000129D0 4E75                       		rts	
000129D2                            ; ===========================================================================
000129D2                            
000129D2                            @loc_105C0:
000129D2 5228 0028                  		addq.b	#1,obSubtype(a0)
000129D6 4228 0038                  		clr.b	$38(a0)
000129DA 45F8 FC00                  		lea	(v_objstate).w,a2
000129DE 7000                       		moveq	#0,d0
000129E0 1028 0023                  		move.b	obRespawnNo(a0),d0
000129E4 67CE                       		beq.s	@loc_105A2
000129E6 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000129EC 60C6                       		bra.s	@loc_105A2
000129EE                            ; ===========================================================================
000129EE                            
000129EE                            @type0D:
000129EE 4A28 0038                  		tst.b	$38(a0)
000129F2 6600                       		bne.s	@loc_105F8
000129F4 45F8 F7E0                  		lea	(f_switch).w,a2
000129F8 7000                       		moveq	#0,d0
000129FA 1028 003C                  		move.b	fb_type(a0),d0
000129FE 4A32 0000                  		tst.b	(a2,d0.w)
00012A02 6A00                       		bpl.s	@wtf
00012A04 117C 0001 0038             		move.b	#1,$38(a0)
00012A0A                            
00012A0A                            @loc_105F8:
00012A0A 303C 0080                  		move.w	#$80,d0
00012A0E B068 003A                  		cmp.w	fb_height(a0),d0
00012A12 6700                       		beq.s	@loc_10624
00012A14 5468 003A                  		addq.w	#2,fb_height(a0)
00012A18                            
00012A18                            @wtf:
00012A18 3028 003A                  		move.w	fb_height(a0),d0
00012A1C 0828 0000 0022             		btst	#0,obStatus(a0)
00012A22 6700                       		beq.s	@loc_10618
00012A24 4440                       		neg.w	d0
00012A26 0640 0080                  		addi.w	#$80,d0
00012A2A                            
00012A2A                            @loc_10618:
00012A2A 3228 0034                  		move.w	fb_origX(a0),d1
00012A2E D240                       		add.w	d0,d1
00012A30 3141 0008                  		move.w	d1,obX(a0)
00012A34 4E75                       		rts	
00012A36                            ; ===========================================================================
00012A36                            
00012A36                            @loc_10624:
00012A36 5328 0028                  		subq.b	#1,obSubtype(a0)
00012A3A 4228 0038                  		clr.b	$38(a0)
00012A3E 45F8 FC00                  		lea	(v_objstate).w,a2
00012A42 7000                       		moveq	#0,d0
00012A44 1028 0023                  		move.b	obRespawnNo(a0),d0
00012A48 67CE                       		beq.s	@wtf
00012A4A 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00012A50 60C6                       		bra.s	@wtf
00012A52                            ; ===========================================================================
00012A52                            
00012A52                            @type08:
00012A52 323C 0010                  		move.w	#$10,d1
00012A56 7000                       		moveq	#0,d0
00012A58 1038 FE88                  		move.b	(v_oscillate+$2A).w,d0
00012A5C E248                       		lsr.w	#1,d0
00012A5E 3638 FE8A                  		move.w	(v_oscillate+$2C).w,d3
00012A62 6000                       		bra.s	@square
00012A64                            ; ===========================================================================
00012A64                            
00012A64                            @type09:
00012A64 323C 0030                  		move.w	#$30,d1
00012A68 7000                       		moveq	#0,d0
00012A6A 1038 FE8C                  		move.b	(v_oscillate+$2E).w,d0
00012A6E 3638 FE8E                  		move.w	(v_oscillate+$30).w,d3
00012A72 6000                       		bra.s	@square
00012A74                            ; ===========================================================================
00012A74                            
00012A74                            @type0A:
00012A74 323C 0050                  		move.w	#$50,d1
00012A78 7000                       		moveq	#0,d0
00012A7A 1038 FE90                  		move.b	(v_oscillate+$32).w,d0
00012A7E 3638 FE92                  		move.w	(v_oscillate+$34).w,d3
00012A82 6000                       		bra.s	@square
00012A84                            ; ===========================================================================
00012A84                            
00012A84                            @type0B:
00012A84 323C 0070                  		move.w	#$70,d1
00012A88 7000                       		moveq	#0,d0
00012A8A 1038 FE94                  		move.b	(v_oscillate+$36).w,d0
00012A8E 3638 FE96                  		move.w	(v_oscillate+$38).w,d3
00012A92                            
00012A92                            @square:
00012A92 4A43                       		tst.w	d3
00012A94 6600                       		bne.s	@loc_1068E
00012A96 5228 0022                  		addq.b	#1,obStatus(a0)
00012A9A 0228 0003 0022             		andi.b	#3,obStatus(a0)
00012AA0                            
00012AA0                            @loc_1068E:
00012AA0 1428 0022                  		move.b	obStatus(a0),d2
00012AA4 0202 0003                  		andi.b	#3,d2
00012AA8 6600                       		bne.s	@loc_106AE
00012AAA 9041                       		sub.w	d1,d0
00012AAC D068 0034                  		add.w	fb_origX(a0),d0
00012AB0 3140 0008                  		move.w	d0,obX(a0)
00012AB4 4441                       		neg.w	d1
00012AB6 D268 0030                  		add.w	fb_origY(a0),d1
00012ABA 3141 000C                  		move.w	d1,obY(a0)
00012ABE 4E75                       		rts	
00012AC0                            ; ===========================================================================
00012AC0                            
00012AC0                            @loc_106AE:
00012AC0 5302                       		subq.b	#1,d2
00012AC2 6600                       		bne.s	@loc_106CC
00012AC4 5341                       		subq.w	#1,d1
00012AC6 9041                       		sub.w	d1,d0
00012AC8 4440                       		neg.w	d0
00012ACA D068 0030                  		add.w	fb_origY(a0),d0
00012ACE 3140 000C                  		move.w	d0,obY(a0)
00012AD2 5241                       		addq.w	#1,d1
00012AD4 D268 0034                  		add.w	fb_origX(a0),d1
00012AD8 3141 0008                  		move.w	d1,obX(a0)
00012ADC 4E75                       		rts	
00012ADE                            ; ===========================================================================
00012ADE                            
00012ADE                            @loc_106CC:
00012ADE 5302                       		subq.b	#1,d2
00012AE0 6600                       		bne.s	@loc_106EA
00012AE2 5341                       		subq.w	#1,d1
00012AE4 9041                       		sub.w	d1,d0
00012AE6 4440                       		neg.w	d0
00012AE8 D068 0034                  		add.w	fb_origX(a0),d0
00012AEC 3140 0008                  		move.w	d0,obX(a0)
00012AF0 5241                       		addq.w	#1,d1
00012AF2 D268 0030                  		add.w	fb_origY(a0),d1
00012AF6 3141 000C                  		move.w	d1,obY(a0)
00012AFA 4E75                       		rts	
00012AFC                            ; ===========================================================================
00012AFC                            
00012AFC                            @loc_106EA:
00012AFC 9041                       		sub.w	d1,d0
00012AFE D068 0030                  		add.w	fb_origY(a0),d0
00012B02 3140 000C                  		move.w	d0,obY(a0)
00012B06 4441                       		neg.w	d1
00012B08 D268 0034                  		add.w	fb_origX(a0),d1
00012B0C 3141 0008                  		move.w	d1,obX(a0)
00012B10 4E75                       		rts	
00012B10 4E75                       		rts	
00012B12                            Map_FBlock:	include	"_maps\Floating Blocks and Doors.asm"
00012B12                            ; ---------------------------------------------------------------------------
00012B12                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00012B12                            ; ---------------------------------------------------------------------------
00012B12                            Map_FBlock_internal:
00012B12 0000                       		dc.w @syz1x1-Map_FBlock_internal
00012B14 0000                       		dc.w @syz2x2-Map_FBlock_internal
00012B16 0000                       		dc.w @syz1x2-Map_FBlock_internal
00012B18 0000                       		dc.w @syzrect2x2-Map_FBlock_internal
00012B1A 0000                       		dc.w @syzrect1x3-Map_FBlock_internal
00012B1C 0000                       		dc.w @slz-Map_FBlock_internal
00012B1E 0000                       		dc.w @lzvert-Map_FBlock_internal
00012B20 0000                       		dc.w @lzhoriz-Map_FBlock_internal
00012B22 01                         @syz1x1:	dc.b 1
00012B23 F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0 ; SYZ - 1x1 square block
00012B28 04                         @syz2x2:	dc.b 4
00012B29 E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0 ; SYZ - 2x2 square blocks
00012B2E E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00012B33 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
00012B38 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00012B3D 02                         @syz1x2:	dc.b 2
00012B3E E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0 ; SYZ - 1x2 square blocks
00012B43 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
00012B48 04                         @syzrect2x2:	dc.b 4
00012B49 E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0 ; SYZ - 2x2 rectangular blocks
00012B4E E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00012B53 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
00012B58 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00012B5D 03                         @syzrect1x3:	dc.b 3
00012B5E D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0 ; SYZ - 1x3 rectangular blocks
00012B63 F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
00012B68 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00012B6D 01                         @slz:		dc.b 1
00012B6E F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0 ; SLZ - 1x1 square block
00012B73 02                         @lzvert:	dc.b 2
00012B74 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8	; LZ - small vertical door
00012B79 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00012B7E 04                         @lzhoriz:	dc.b 4
00012B7F F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0 ; LZ - large horizontal door
00012B84 F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
00012B89 F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
00012B8E F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
00012B94 00                         		even
00012B94 00                         		even
00012B94                            
00012B94                            		include	"_incObj\57 Spiked Ball and Chain.asm"
00012B94                            ; ---------------------------------------------------------------------------
00012B94                            ; Object 57 - spiked balls (SYZ, LZ)
00012B94                            ; ---------------------------------------------------------------------------
00012B94                            
00012B94                            SpikeBall:
00012B94 7000                       		moveq	#0,d0
00012B96 1028 0024                  		move.b	obRoutine(a0),d0
00012B9A 323B 0000                  		move.w	SBall_Index(pc,d0.w),d1
00012B9E 4EFB 1000                  		jmp	SBall_Index(pc,d1.w)
00012BA2                            ; ===========================================================================
00012BA2 0000                       SBall_Index:	dc.w SBall_Main-SBall_Index
00012BA4 0000                       		dc.w SBall_Move-SBall_Index
00012BA6 0000                       		dc.w SBall_Display-SBall_Index
00012BA8                            
00012BA8 =00000029                  sball_childs:	equ $29		; number of child objects (1 byte)
00012BA8                            		; $30-$37	; object RAM numbers of childs (1 byte each)
00012BA8 =0000003A                  sball_origX:	equ $3A		; centre x-axis position (2 bytes)
00012BA8 =00000038                  sball_origY:	equ $38		; centre y-axis position (2 bytes)
00012BA8 =0000003C                  sball_radius:	equ $3C		; radius (1 byte)
00012BA8 =0000003E                  sball_speed:	equ $3E		; rate of spin (2 bytes)
00012BA8                            ; ===========================================================================
00012BA8                            
00012BA8                            SBall_Main:	; Routine 0
00012BA8 5428 0024                  		addq.b	#2,obRoutine(a0)
00012BAC 217C 0000 0000 0004        		move.l	#Map_SBall,obMap(a0)
00012BB4 317C 03BA 0002             		move.w	#$3BA,obGfx(a0)
00012BBA 117C 0004 0001             		move.b	#4,obRender(a0)
00012BC0 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012BC6 117C 0008 0014             		move.b	#8,obActWid(a0)
00012BCC 3168 0008 003A             		move.w	obX(a0),sball_origX(a0)
00012BD2 3168 000C 0038             		move.w	obY(a0),sball_origY(a0)
00012BD8 117C 0098 0020             		move.b	#$98,obColType(a0) ; SYZ specific code (chain hurts Sonic)
00012BDE 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012BE4 6600                       		bne.s	@notlz
00012BE6                            
00012BE6 117C 0000 0020             		move.b	#0,obColType(a0) ; LZ specific code (chain doesn't hurt)
00012BEC 317C 0310 0002             		move.w	#$310,obGfx(a0)
00012BF2 217C 0000 0000 0004        		move.l	#Map_SBall2,obMap(a0)
00012BFA                            
00012BFA                            	@notlz:
00012BFA 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00012BFE 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00012C02 4881                       		ext.w	d1
00012C04 E741                       		asl.w	#3,d1		; multiply by 8
00012C06 3141 003E                  		move.w	d1,sball_speed(a0) ; set object twirl speed
00012C0A 1028 0022                  		move.b	obStatus(a0),d0
00012C0E E418                       		ror.b	#2,d0
00012C10 0200 00C0                  		andi.b	#$C0,d0
00012C14 1140 0026                  		move.b	d0,obAngle(a0)
00012C18 45E8 0029                  		lea	sball_childs(a0),a2
00012C1C 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00012C20 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
00012C24 14FC 0000                  		move.b	#0,(a2)+
00012C28 3601                       		move.w	d1,d3
00012C2A E94B                       		lsl.w	#4,d3
00012C2C 1143 003C                  		move.b	d3,sball_radius(a0)
00012C30 5341                       		subq.w	#1,d1		; set chain length (type-1)
00012C32 6500                       		bcs.s	@fail
00012C34 0828 0003 0028             		btst	#3,obSubtype(a0)
00012C3A 6700                       		beq.s	@makechain
00012C3C 5341                       		subq.w	#1,d1
00012C3E 6500                       		bcs.s	@fail
00012C40                            
00012C40                            @makechain:
00012C40 6100 D1C2                  		bsr.w	FindFreeObj
00012C44 6600                       		bne.s	@fail
00012C46 5228 0029                  		addq.b	#1,sball_childs(a0) ; increment child object counter
00012C4A 3A09                       		move.w	a1,d5		; get child object RAM address
00012C4C 0445 D000                  		subi.w	#$D000,d5	; subtract $D000
00012C50 EC4D                       		lsr.w	#6,d5		; divide by $40
00012C52 0245 007F                  		andi.w	#$7F,d5
00012C56 14C5                       		move.b	d5,(a2)+	; copy child RAM number
00012C58 137C 0004 0024             		move.b	#4,obRoutine(a1)
00012C5E 1290                       		move.b	0(a0),0(a1)
00012C60 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
00012C66 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00012C6C 1368 0001 0001             		move.b	obRender(a0),obRender(a1)
00012C72 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
00012C78 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
00012C7E 1368 0020 0020             		move.b	obColType(a0),obColType(a1)
00012C84 0403 0010                  		subi.b	#$10,d3
00012C88 1343 003C                  		move.b	d3,sball_radius(a1)
00012C8C 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012C92 6600                       		bne.s	@notlzagain
00012C94                            
00012C94 4A03                       		tst.b	d3
00012C96 6600                       		bne.s	@notlzagain
00012C98 137C 0002 001A             		move.b	#2,obFrame(a1)	; use different frame for LZ chain
00012C9E                            
00012C9E                            	@notlzagain:
00012C9E 51C9 FFA0                  		dbf	d1,@makechain ; repeat for length of chain
00012CA2                            
00012CA2                            	@fail:
00012CA2 3A08                       		move.w	a0,d5
00012CA4 0445 D000                  		subi.w	#$D000,d5
00012CA8 EC4D                       		lsr.w	#6,d5
00012CAA 0245 007F                  		andi.w	#$7F,d5
00012CAE 14C5                       		move.b	d5,(a2)+
00012CB0 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012CB6 6600                       		bne.s	SBall_Move
00012CB8                            
00012CB8 117C 008B 0020             		move.b	#$8B,obColType(a0) ; if yes, make last spikeball larger
00012CBE 117C 0001 001A             		move.b	#1,obFrame(a0)	; use different	frame
00012CC4                            
00012CC4                            SBall_Move:	; Routine 2
00012CC4 6100 0000                  		bsr.w	@movesub
00012CC8 6000 0000                  		bra.w	@chkdel
00012CCC                            ; ===========================================================================
00012CCC                            
00012CCC                            @movesub:
00012CCC 3028 003E                  		move.w	sball_speed(a0),d0
00012CD0 D168 0026                  		add.w	d0,obAngle(a0)
00012CD4 1028 0026                  		move.b	obAngle(a0),d0
00012CD8 4EB9 0000 3A32             		jsr	(CalcSine).l
00012CDE 3428 0038                  		move.w	sball_origY(a0),d2
00012CE2 3628 003A                  		move.w	sball_origX(a0),d3
00012CE6 45E8 0029                  		lea	sball_childs(a0),a2
00012CEA 7C00                       		moveq	#0,d6
00012CEC 1C1A                       		move.b	(a2)+,d6
00012CEE                            
00012CEE                            	@loop:
00012CEE 7800                       		moveq	#0,d4
00012CF0 181A                       		move.b	(a2)+,d4
00012CF2 ED4C                       		lsl.w	#6,d4
00012CF4 0684 00FF D000             		addi.l	#v_objspace&$FFFFFF,d4
00012CFA 2244                       		movea.l	d4,a1
00012CFC 7800                       		moveq	#0,d4
00012CFE 1829 003C                  		move.b	sball_radius(a1),d4
00012D02 2A04                       		move.l	d4,d5
00012D04 C9C0                       		muls.w	d0,d4
00012D06 E084                       		asr.l	#8,d4
00012D08 CBC1                       		muls.w	d1,d5
00012D0A E085                       		asr.l	#8,d5
00012D0C D842                       		add.w	d2,d4
00012D0E DA43                       		add.w	d3,d5
00012D10 3344 000C                  		move.w	d4,obY(a1)
00012D14 3345 0008                  		move.w	d5,obX(a1)
00012D18 51CE FFD4                  		dbf	d6,@loop
00012D1C 4E75                       		rts	
00012D1E                            ; ===========================================================================
00012D1E                            
00012D1E                            @chkdel:
00012D3C 6000 CC3A                  		bra.w	DisplaySprite
00012D40                            ; ===========================================================================
00012D40                            
00012D40                            @delete:
00012D40 7400                       		moveq	#0,d2
00012D42 45E8 0029                  		lea	sball_childs(a0),a2
00012D46 141A                       		move.b	(a2)+,d2
00012D48                            
00012D48                            	@deleteloop:
00012D48 7000                       		moveq	#0,d0
00012D4A 101A                       		move.b	(a2)+,d0
00012D4C ED48                       		lsl.w	#6,d0
00012D4E 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00012D54 2240                       		movea.l	d0,a1
00012D56 6100 CC62                  		bsr.w	DeleteChild
00012D5A 51CA FFEC                  		dbf	d2,@deleteloop ; delete all pieces of	chain
00012D5E                            
00012D5E 4E75                       		rts	
00012D60                            ; ===========================================================================
00012D60                            
00012D60                            SBall_Display:	; Routine 4
00012D60 6000 CC16                  		bra.w	DisplaySprite
00012D60 6000 CC16                  		bra.w	DisplaySprite
00012D64                            Map_SBall:	include	"_maps\Spiked Ball and Chain (SYZ).asm"
00012D64                            ; ---------------------------------------------------------------------------
00012D64                            ; Sprite mappings - chain of spiked balls (SYZ)
00012D64                            ; ---------------------------------------------------------------------------
00012D64                            Map_SBall_internal:
00012D64 0000                       		dc.w @0-Map_SBall_internal
00012D66 01                         @0:		dc.b 1
00012D67 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00012D6C                            		even
00012D6C                            		even
00012D6C                            Map_SBall2:	include	"_maps\Spiked Ball and Chain (LZ).asm"
00012D6C                            ; ---------------------------------------------------------------------------
00012D6C                            ; Sprite mappings - spiked ball	on a chain (LZ)
00012D6C                            ; ---------------------------------------------------------------------------
00012D6C                            Map_SBall2_internal:
00012D6C 0000                       		dc.w @chain-Map_SBall2_internal
00012D6E 0000                       		dc.w @spikeball-Map_SBall2_internal
00012D70 0000                       		dc.w @base-Map_SBall2_internal
00012D72 01                         @chain:		dc.b 1
00012D73 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; chain link
00012D78 01                         @spikeball:	dc.b 1
00012D79 F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0	; spikeball
00012D7E 01                         @base:		dc.b 1
00012D7F F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8 ; wall attachment
00012D84                            		even
00012D84                            		even
00012D84                            		include	"_incObj\58 Big Spiked Ball.asm"
00012D84                            ; ---------------------------------------------------------------------------
00012D84                            ; Object 58 - giant spiked balls (SYZ)
00012D84                            ; ---------------------------------------------------------------------------
00012D84                            
00012D84                            BigSpikeBall:
00012D84 7000                       		moveq	#0,d0
00012D86 1028 0024                  		move.b	obRoutine(a0),d0
00012D8A 323B 0000                  		move.w	BBall_Index(pc,d0.w),d1
00012D8E 4EFB 1000                  		jmp	BBall_Index(pc,d1.w)
00012D92                            ; ===========================================================================
00012D92 0000                       BBall_Index:	dc.w BBall_Main-BBall_Index
00012D94 0000                       		dc.w BBall_Move-BBall_Index
00012D96                            
00012D96 =0000003A                  bball_origX:	equ $3A		; original x-axis position
00012D96 =00000038                  bball_origY:	equ $38		; original y-axis position
00012D96 =0000003C                  bball_radius:	equ $3C		; radius of circle
00012D96 =0000003E                  bball_speed:	equ $3E		; speed
00012D96                            ; ===========================================================================
00012D96                            
00012D96                            BBall_Main:	; Routine 0
00012D96 5428 0024                  		addq.b	#2,obRoutine(a0)
00012D9A 217C 0000 0000 0004        		move.l	#Map_BBall,obMap(a0)
00012DA2 317C 0396 0002             		move.w	#$396,obGfx(a0)
00012DA8 117C 0004 0001             		move.b	#4,obRender(a0)
00012DAE 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012DB4 117C 0018 0014             		move.b	#$18,obActWid(a0)
00012DBA 3168 0008 003A             		move.w	obX(a0),bball_origX(a0)
00012DC0 3168 000C 0038             		move.w	obY(a0),bball_origY(a0)
00012DC6 117C 0086 0020             		move.b	#$86,obColType(a0)
00012DCC 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00012DD0 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00012DD4 4881                       		ext.w	d1
00012DD6 E741                       		asl.w	#3,d1		; multiply by 8
00012DD8 3141 003E                  		move.w	d1,bball_speed(a0) ; set object speed
00012DDC 1028 0022                  		move.b	obStatus(a0),d0
00012DE0 E418                       		ror.b	#2,d0
00012DE2 0200 00C0                  		andi.b	#$C0,d0
00012DE6 1140 0026                  		move.b	d0,obAngle(a0)
00012DEA 117C 0050 003C             		move.b	#$50,bball_radius(a0) ; set radius of circle motion
00012DF0                            
00012DF0                            BBall_Move:	; Routine 2
00012DF0 7000                       		moveq	#0,d0
00012DF2 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00012DF6 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
00012DFA D040                       		add.w	d0,d0
00012DFC 323B 0000                  		move.w	@index(pc,d0.w),d1
00012E00 4EBB 1000                  		jsr	@index(pc,d1.w)
00012E22 6000 CB54                  		bra.w	DisplaySprite
00012E26                            ; ===========================================================================
00012E26 0000                       @index:		dc.w @type00-@index
00012E28 0000                       		dc.w @type01-@index
00012E2A 0000                       		dc.w @type02-@index
00012E2C 0000                       		dc.w @type03-@index
00012E2E                            ; ===========================================================================
00012E2E                            
00012E2E                            @type00:
00012E2E 4E75                       		rts	
00012E30                            ; ===========================================================================
00012E30                            
00012E30                            @type01:
00012E30 323C 0060                  		move.w	#$60,d1
00012E34 7000                       		moveq	#0,d0
00012E36 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
00012E3A 0828 0000 0022             		btst	#0,obStatus(a0)
00012E40 6700                       		beq.s	@noflip1
00012E42 4440                       		neg.w	d0
00012E44 D041                       		add.w	d1,d0
00012E46                            
00012E46                            	@noflip1:
00012E46 3228 003A                  		move.w	bball_origX(a0),d1
00012E4A 9240                       		sub.w	d0,d1
00012E4C 3141 0008                  		move.w	d1,obX(a0)	; move object horizontally
00012E50 4E75                       		rts	
00012E52                            ; ===========================================================================
00012E52                            
00012E52                            @type02:
00012E52 323C 0060                  		move.w	#$60,d1
00012E56 7000                       		moveq	#0,d0
00012E58 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
00012E5C 0828 0000 0022             		btst	#0,obStatus(a0)
00012E62 6700                       		beq.s	@noflip2
00012E64 4440                       		neg.w	d0
00012E66 0640 0080                  		addi.w	#$80,d0
00012E6A                            
00012E6A                            	@noflip2:
00012E6A 3228 0038                  		move.w	bball_origY(a0),d1
00012E6E 9240                       		sub.w	d0,d1
00012E70 3141 000C                  		move.w	d1,obY(a0)	; move object vertically
00012E74 4E75                       		rts	
00012E76                            ; ===========================================================================
00012E76                            
00012E76                            @type03:
00012E76 3028 003E                  		move.w	bball_speed(a0),d0
00012E7A D168 0026                  		add.w	d0,obAngle(a0)
00012E7E 1028 0026                  		move.b	obAngle(a0),d0
00012E82 4EB9 0000 3A32             		jsr	(CalcSine).l
00012E88 3428 0038                  		move.w	bball_origY(a0),d2
00012E8C 3628 003A                  		move.w	bball_origX(a0),d3
00012E90 7800                       		moveq	#0,d4
00012E92 1828 003C                  		move.b	bball_radius(a0),d4
00012E96 2A04                       		move.l	d4,d5
00012E98 C9C0                       		muls.w	d0,d4
00012E9A E084                       		asr.l	#8,d4
00012E9C CBC1                       		muls.w	d1,d5
00012E9E E085                       		asr.l	#8,d5
00012EA0 D842                       		add.w	d2,d4
00012EA2 DA43                       		add.w	d3,d5
00012EA4 3144 000C                  		move.w	d4,obY(a0)	; move object circularly
00012EA8 3145 0008                  		move.w	d5,obX(a0)
00012EAC 4E75                       		rts	
00012EAC 4E75                       		rts	
00012EAE                            Map_BBall:	include	"_maps\Big Spiked Ball.asm"
00012EAE                            ; --------------------------------------------------------------------------------
00012EAE                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00012EAE                            ; --------------------------------------------------------------------------------
00012EAE                            
00012EAE                            SME_u_DKx:	
00012EAE 0000 0000                  		dc.w SME_u_DKx_6-SME_u_DKx, SME_u_DKx_20-SME_u_DKx	
00012EB2 0000                       		dc.w SME_u_DKx_26-SME_u_DKx	
00012EB4 05                         SME_u_DKx_6:	dc.b 5	
00012EB5 E804 0000 F8               		dc.b $E8, 4, 0, 0, $F8	
00012EBA F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0	
00012EBF F801 0012 E8               		dc.b $F8, 1, 0, $12, $E8	
00012EC4 F801 0014 10               		dc.b $F8, 1, 0, $14, $10	
00012EC9 1004 0016 F8               		dc.b $10, 4, 0, $16, $F8	
00012ECE 01                         SME_u_DKx_20:	dc.b 1	
00012ECF F805 0020 F8               		dc.b $F8, 5, 0, $20, $F8	
00012ED4 02                         SME_u_DKx_26:	dc.b 2	
00012ED5 F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0	
00012EDA E80D 1018 F0               		dc.b $E8, $D, $10, $18, $F0	
00012EE0 00                         		even
00012EE0 00                         		even
00012EE0                            		include	"_incObj\59 SLZ Elevators.asm"
00012EE0                            ; ---------------------------------------------------------------------------
00012EE0                            ; Object 59 - platforms	that move when you stand on them (SLZ)
00012EE0                            ; ---------------------------------------------------------------------------
00012EE0                            
00012EE0                            Elevator:
00012EE0 7000                       		moveq	#0,d0
00012EE2 1028 0024                  		move.b	obRoutine(a0),d0
00012EE6 323B 0000                  		move.w	Elev_Index(pc,d0.w),d1
00012EEA 4EBB 1000                  		jsr	Elev_Index(pc,d1.w)
00012F0C 6000 CA6A                  		bra.w	DisplaySprite
00012F10                            ; ===========================================================================
00012F10 0000                       Elev_Index:	dc.w Elev_Main-Elev_Index
00012F12 0000                       		dc.w Elev_Platform-Elev_Index
00012F14 0000                       		dc.w Elev_Action-Elev_Index
00012F16 0000                       		dc.w Elev_MakeMulti-Elev_Index
00012F18                            
00012F18 =00000032                  elev_origX:	equ $32		; original x-axis position
00012F18 =00000030                  elev_origY:	equ $30		; original y-axis position
00012F18 =0000003C                  elev_dist:	equ $3C		; distance to move (2 bytes)
00012F18                            
00012F18 2800                       Elev_Var1:	dc.b $28, 0		; width, frame number
00012F1A                            
00012F1A 1001                       Elev_Var2:	dc.b $10, 1		; distance to move, action type
00012F1C 2001                       		dc.b $20, 1
00012F1E 3401                       		dc.b $34, 1
00012F20 1003                       		dc.b $10, 3
00012F22 2003                       		dc.b $20, 3
00012F24 3403                       		dc.b $34, 3
00012F26 1401                       		dc.b $14, 1
00012F28 2401                       		dc.b $24, 1
00012F2A 2C01                       		dc.b $2C, 1
00012F2C 1403                       		dc.b $14, 3
00012F2E 2403                       		dc.b $24, 3
00012F30 2C03                       		dc.b $2C, 3
00012F32 2005                       		dc.b $20, 5
00012F34 2007                       		dc.b $20, 7
00012F36 3009                       		dc.b $30, 9
00012F38                            ; ===========================================================================
00012F38                            
00012F38                            Elev_Main:	; Routine 0
00012F38 5428 0024                  		addq.b	#2,obRoutine(a0)
00012F3C 7000                       		moveq	#0,d0
00012F3E 1028 0028                  		move.b	obSubtype(a0),d0
00012F42 6A00                       		bpl.s	@normal		; branch for types 00-7F
00012F44 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto Elev_MakeMulti next
00012F48 0240 007F                  		andi.w	#$7F,d0
00012F4C C0FC 0006                  		mulu.w	#6,d0
00012F50 3140 003C                  		move.w	d0,elev_dist(a0)
00012F54 3140 003E                  		move.w	d0,$3E(a0)
00012F58 588F                       		addq.l	#4,sp
00012F5A 4E75                       		rts	
00012F5C                            ; ===========================================================================
00012F5C                            
00012F5C                            	@normal:
00012F5C E648                       		lsr.w	#3,d0
00012F5E 0240 001E                  		andi.w	#$1E,d0
00012F62 45FB 00B4                  		lea	Elev_Var1(pc,d0.w),a2
00012F66 115A 0014                  		move.b	(a2)+,obActWid(a0) ; set width
00012F6A 115A 001A                  		move.b	(a2)+,obFrame(a0) ; set frame
00012F6E 7000                       		moveq	#0,d0
00012F70 1028 0028                  		move.b	obSubtype(a0),d0
00012F74 D040                       		add.w	d0,d0
00012F76 0240 001E                  		andi.w	#$1E,d0
00012F7A 45FB 009E                  		lea	Elev_Var2(pc,d0.w),a2
00012F7E 101A                       		move.b	(a2)+,d0
00012F80 E548                       		lsl.w	#2,d0
00012F82 3140 003C                  		move.w	d0,elev_dist(a0)	; set distance to move
00012F86 115A 0028                  		move.b	(a2)+,obSubtype(a0)	; set type
00012F8A 217C 0000 0000 0004        		move.l	#Map_Elev,obMap(a0)
00012F92 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00012F98 117C 0004 0001             		move.b	#4,obRender(a0)
00012F9E 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012FA4 3168 0008 0032             		move.w	obX(a0),elev_origX(a0)
00012FAA 3168 000C 0030             		move.w	obY(a0),elev_origY(a0)
00012FB0                            
00012FB0                            Elev_Platform:	; Routine 2
00012FB0 7200                       		moveq	#0,d1
00012FB2 1228 0014                  		move.b	obActWid(a0),d1
00012FB6 4EB9 0000 9086             		jsr	(PlatformObject).l
00012FBC 6000 0000                  		bra.w	Elev_Types
00012FC0                            ; ===========================================================================
00012FC0                            
00012FC0                            Elev_Action:	; Routine 4
00012FC0 7200                       		moveq	#0,d1
00012FC2 1228 0014                  		move.b	obActWid(a0),d1
00012FC6 4EB9 0000 91FA             		jsr	(ExitPlatform).l
00012FCC 3F28 0008                  		move.w	obX(a0),-(sp)
00012FD0 6100 0000                  		bsr.w	Elev_Types
00012FD4 341F                       		move.w	(sp)+,d2
00012FD6 4A10                       		tst.b	0(a0)
00012FD8 6700                       		beq.s	@deleted
00012FDA 4EF9 0000 9764             		jmp	(MvSonicOnPtfm2).l
00012FE0                            
00012FE0                            	@deleted:
00012FE0 4E75                       		rts	
00012FE2                            ; ===========================================================================
00012FE2                            
00012FE2                            Elev_Types:
00012FE2 7000                       		moveq	#0,d0
00012FE4 1028 0028                  		move.b	obSubtype(a0),d0
00012FE8 0240 000F                  		andi.w	#$F,d0
00012FEC D040                       		add.w	d0,d0
00012FEE 323B 0000                  		move.w	@index(pc,d0.w),d1
00012FF2 4EFB 1000                  		jmp	@index(pc,d1.w)
00012FF6                            ; ===========================================================================
00012FF6 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00012FFA 0000 0000                  		dc.w @type02-@index, @type01-@index
00012FFE 0000 0000                  		dc.w @type04-@index, @type01-@index
00013002 0000 0000                  		dc.w @type06-@index, @type01-@index
00013006 0000 0000                  		dc.w @type08-@index, @type09-@index
0001300A                            ; ===========================================================================
0001300A                            
0001300A                            @type00:
0001300A 4E75                       		rts	
0001300C                            ; ===========================================================================
0001300C                            
0001300C                            @type01:
0001300C 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0) ; check if Sonic is standing on the object
00013012 6600                       		bne.s	@notstanding
00013014 5228 0028                  		addq.b	#1,obSubtype(a0) ; if yes, add 1 to type
00013018                            
00013018                            	@notstanding:
00013018 4E75                       		rts	
0001301A                            ; ===========================================================================
0001301A                            
0001301A                            @type02:
0001301A 6100 0000                  		bsr.w	Elev_Move
0001301E 3028 0034                  		move.w	$34(a0),d0
00013022 4440                       		neg.w	d0
00013024 D068 0030                  		add.w	elev_origY(a0),d0
00013028 3140 000C                  		move.w	d0,obY(a0)
0001302C 4E75                       		rts	
0001302E                            ; ===========================================================================
0001302E                            
0001302E                            @type04:
0001302E 6100 0000                  		bsr.w	Elev_Move
00013032 3028 0034                  		move.w	$34(a0),d0
00013036 D068 0030                  		add.w	elev_origY(a0),d0
0001303A 3140 000C                  		move.w	d0,obY(a0)
0001303E 4E75                       		rts	
00013040                            ; ===========================================================================
00013040                            
00013040                            @type06:
00013040 6100 0000                  		bsr.w	Elev_Move
00013044 3028 0034                  		move.w	$34(a0),d0
00013048 E240                       		asr.w	#1,d0
0001304A 4440                       		neg.w	d0
0001304C D068 0030                  		add.w	elev_origY(a0),d0
00013050 3140 000C                  		move.w	d0,obY(a0)
00013054 3028 0034                  		move.w	$34(a0),d0
00013058 D068 0032                  		add.w	elev_origX(a0),d0
0001305C 3140 0008                  		move.w	d0,obX(a0)
00013060 4E75                       		rts	
00013062                            ; ===========================================================================
00013062                            
00013062                            @type08:
00013062 6100 0000                  		bsr.w	Elev_Move
00013066 3028 0034                  		move.w	$34(a0),d0
0001306A E240                       		asr.w	#1,d0
0001306C D068 0030                  		add.w	elev_origY(a0),d0
00013070 3140 000C                  		move.w	d0,obY(a0)
00013074 3028 0034                  		move.w	$34(a0),d0
00013078 4440                       		neg.w	d0
0001307A D068 0032                  		add.w	elev_origX(a0),d0
0001307E 3140 0008                  		move.w	d0,obX(a0)
00013082 4E75                       		rts	
00013084                            ; ===========================================================================
00013084                            
00013084                            @type09:
00013084 6100 0000                  		bsr.w	Elev_Move
00013088 3028 0034                  		move.w	$34(a0),d0
0001308C 4440                       		neg.w	d0
0001308E D068 0030                  		add.w	elev_origY(a0),d0
00013092 3140 000C                  		move.w	d0,obY(a0)
00013096 4A28 0028                  		tst.b	obSubtype(a0)
0001309A 6700 0000                  		beq.w	@typereset
0001309E 4E75                       		rts	
000130A0                            ; ===========================================================================
000130A0                            
000130A0                            	@typereset:
000130A0 0828 0003 0022             		btst	#3,obStatus(a0)
000130A6 6700                       		beq.s	@delete
000130A8 08E9 0001 0022             		bset	#1,obStatus(a1)
000130AE 08A9 0003 0022             		bclr	#3,obStatus(a1)
000130B4 137C 0002 0024             		move.b	#2,obRoutine(a1)
000130BA                            
000130BA                            	@delete:
000130BA 6000 C8FC                  		bra.w	DeleteObject
000130BE                            
000130BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000130BE                            
000130BE                            
000130BE                            Elev_Move:
000130BE 3028 0038                  		move.w	$38(a0),d0
000130C2 4A28 003A                  		tst.b	$3A(a0)
000130C6 6600                       		bne.s	loc_10CC8
000130C8 0C40 0800                  		cmpi.w	#$800,d0
000130CC 6400                       		bcc.s	loc_10CD0
000130CE 0640 0010                  		addi.w	#$10,d0
000130D2 6000                       		bra.s	loc_10CD0
000130D4                            ; ===========================================================================
000130D4                            
000130D4                            loc_10CC8:
000130D4 4A40                       		tst.w	d0
000130D6 6700                       		beq.s	loc_10CD0
000130D8 0440 0010                  		subi.w	#$10,d0
000130DC                            
000130DC                            loc_10CD0:
000130DC 3140 0038                  		move.w	d0,$38(a0)
000130E0 48C0                       		ext.l	d0
000130E2 E180                       		asl.l	#8,d0
000130E4 D0A8 0034                  		add.l	$34(a0),d0
000130E8 2140 0034                  		move.l	d0,$34(a0)
000130EC 4840                       		swap	d0
000130EE 3428 003C                  		move.w	elev_dist(a0),d2
000130F2 B042                       		cmp.w	d2,d0
000130F4 6300                       		bls.s	loc_10CF0
000130F6 117C 0001 003A             		move.b	#1,$3A(a0)
000130FC                            
000130FC                            loc_10CF0:
000130FC D442                       		add.w	d2,d2
000130FE B042                       		cmp.w	d2,d0
00013100 6600                       		bne.s	locret_10CFA
00013102 4228 0028                  		clr.b	obSubtype(a0)
00013106                            
00013106                            locret_10CFA:
00013106 4E75                       		rts	
00013108                            ; End of function Elev_Move
00013108                            
00013108                            ; ===========================================================================
00013108                            
00013108                            Elev_MakeMulti:	; Routine 6
00013108 5368 003C                  		subq.w	#1,elev_dist(a0)
0001310C 6600                       		bne.s	@chkdel
0001310E 3168 003E 003C             		move.w	$3E(a0),elev_dist(a0)
00013114 6100 CCEE                  		bsr.w	FindFreeObj
00013118 6600                       		bne.s	@chkdel
0001311A 12BC 0059                  		move.b	#id_Elevator,0(a1) ; duplicate the object
0001311E 3368 0008 0008             		move.w	obX(a0),obX(a1)
00013124 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001312A 137C 000E 0028             		move.b	#$E,obSubtype(a1)
00013130                            
00013130                            @chkdel:
00013130 588F                       		addq.l	#4,sp
00013150 4E75                       		rts	
00013150 4E75                       		rts	
00013152                            Map_Elev:	include	"_maps\SLZ Elevators.asm"
00013152                            ; ---------------------------------------------------------------------------
00013152                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00013152                            ; ---------------------------------------------------------------------------
00013152                            Map_Elev_internal:
00013152 0000                       		dc.w @elevator-Map_Elev_internal
00013154 03                         @elevator:	dc.b 3
00013155 F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
0001315A F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
0001315F F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
00013164                            		even
00013164                            		even
00013164                            		include	"_incObj\5A SLZ Circling Platform.asm"
00013164                            ; ---------------------------------------------------------------------------
00013164                            ; Object 5A - platforms	moving in circles (SLZ)
00013164                            ; ---------------------------------------------------------------------------
00013164                            
00013164                            CirclingPlatform:
00013164 7000                       		moveq	#0,d0
00013166 1028 0024                  		move.b	obRoutine(a0),d0
0001316A 323B 0000                  		move.w	Circ_Index(pc,d0.w),d1
0001316E 4EBB 1000                  		jsr	Circ_Index(pc,d1.w)
00013190 6000 C7E6                  		bra.w	DisplaySprite
00013194                            ; ===========================================================================
00013194 0000                       Circ_Index:	dc.w Circ_Main-Circ_Index
00013196 0000                       		dc.w Circ_Platform-Circ_Index
00013198 0000                       		dc.w Circ_Action-Circ_Index
0001319A                            
0001319A =00000032                  circ_origX:	equ $32		; original x-axis position
0001319A =00000030                  circ_origY:	equ $30		; original y-axis position
0001319A                            ; ===========================================================================
0001319A                            
0001319A                            Circ_Main:	; Routine 0
0001319A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001319E 217C 0000 0000 0004        		move.l	#Map_Circ,obMap(a0)
000131A6 317C 4000 0002             		move.w	#$4000,obGfx(a0)
000131AC 117C 0004 0001             		move.b	#4,obRender(a0)
000131B2 317C 0200 0018             		move.w	#$200,obPriority(a0)
000131B8 117C 0018 0014             		move.b	#$18,obActWid(a0)
000131BE 3168 0008 0032             		move.w	obX(a0),circ_origX(a0)
000131C4 3168 000C 0030             		move.w	obY(a0),circ_origY(a0)
000131CA                            
000131CA                            Circ_Platform:	; Routine 2
000131CA 7200                       		moveq	#0,d1
000131CC 1228 0014                  		move.b	obActWid(a0),d1
000131D0 4EB9 0000 9086             		jsr	(PlatformObject).l
000131D6 6000 0000                  		bra.w	Circ_Types
000131DA                            ; ===========================================================================
000131DA                            
000131DA                            Circ_Action:	; Routine 4
000131DA 7200                       		moveq	#0,d1
000131DC 1228 0014                  		move.b	obActWid(a0),d1
000131E0 4EB9 0000 91FA             		jsr	(ExitPlatform).l
000131E6 3F28 0008                  		move.w	obX(a0),-(sp)
000131EA 6100 0000                  		bsr.w	Circ_Types
000131EE 341F                       		move.w	(sp)+,d2
000131F0 4EF9 0000 9764             		jmp	(MvSonicOnPtfm2).l
000131F6                            ; ===========================================================================
000131F6                            
000131F6                            Circ_Types:
000131F6 7000                       		moveq	#0,d0
000131F8 1028 0028                  		move.b	obSubtype(a0),d0
000131FC 0240 000C                  		andi.w	#$C,d0
00013200 E248                       		lsr.w	#1,d0
00013202 323B 0000                  		move.w	@index(pc,d0.w),d1
00013206 4EFB 1000                  		jmp	@index(pc,d1.w)
0001320A                            ; ===========================================================================
0001320A 0000                       @index:		dc.w @type00-@index
0001320C 0000                       		dc.w @type04-@index
0001320E                            ; ===========================================================================
0001320E                            
0001320E                            @type00:
0001320E 1238 FE80                  		move.b	(v_oscillate+$22).w,d1 ; get rotating value
00013212 0401 0050                  		subi.b	#$50,d1		; set radius of circle
00013216 4881                       		ext.w	d1
00013218 1438 FE84                  		move.b	(v_oscillate+$26).w,d2
0001321C 0402 0050                  		subi.b	#$50,d2
00013220 4882                       		ext.w	d2
00013222 0828 0000 0028             		btst	#0,obSubtype(a0)
00013228 6700                       		beq.s	@noshift00a
0001322A 4441                       		neg.w	d1
0001322C 4442                       		neg.w	d2
0001322E                            
0001322E                            	@noshift00a:
0001322E 0828 0001 0028             		btst	#1,obSubtype(a0)
00013234 6700                       		beq.s	@noshift00b
00013236 4441                       		neg.w	d1
00013238 C342                       		exg	d1,d2
0001323A                            
0001323A                            	@noshift00b:
0001323A D268 0032                  		add.w	circ_origX(a0),d1
0001323E 3141 0008                  		move.w	d1,obX(a0)
00013242 D468 0030                  		add.w	circ_origY(a0),d2
00013246 3142 000C                  		move.w	d2,obY(a0)
0001324A 4E75                       		rts	
0001324C                            ; ===========================================================================
0001324C                            
0001324C                            @type04:
0001324C 1238 FE80                  		move.b	(v_oscillate+$22).w,d1
00013250 0401 0050                  		subi.b	#$50,d1
00013254 4881                       		ext.w	d1
00013256 1438 FE84                  		move.b	(v_oscillate+$26).w,d2
0001325A 0402 0050                  		subi.b	#$50,d2
0001325E 4882                       		ext.w	d2
00013260 0828 0000 0028             		btst	#0,obSubtype(a0)
00013266 6700                       		beq.s	@noshift04a
00013268 4441                       		neg.w	d1
0001326A 4442                       		neg.w	d2
0001326C                            
0001326C                            	@noshift04a:
0001326C 0828 0001 0028             		btst	#1,obSubtype(a0)
00013272 6700                       		beq.s	@noshift04b
00013274 4441                       		neg.w	d1
00013276 C342                       		exg	d1,d2
00013278                            
00013278                            	@noshift04b:
00013278 4441                       		neg.w	d1
0001327A D268 0032                  		add.w	circ_origX(a0),d1
0001327E 3141 0008                  		move.w	d1,obX(a0)
00013282 D468 0030                  		add.w	circ_origY(a0),d2
00013286 3142 000C                  		move.w	d2,obY(a0)
0001328A 4E75                       		rts	
0001328A 4E75                       		rts	
0001328C                            Map_Circ:	include	"_maps\SLZ Circling Platform.asm"
0001328C                            ; ---------------------------------------------------------------------------
0001328C                            ; Sprite mappings - platforms that move	in circles (SLZ)
0001328C                            ; ---------------------------------------------------------------------------
0001328C                            Map_Circ_internal:
0001328C 0000                       		dc.w @platform-Map_Circ_internal
0001328E 02                         @platform:	dc.b 2
0001328F F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
00013294 F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
0001329A 00                         		even
0001329A 00                         		even
0001329A                            		include	"_incObj\5B Staircase.asm"
0001329A                            ; ---------------------------------------------------------------------------
0001329A                            ; Object 5B - blocks that form a staircase (SLZ)
0001329A                            ; ---------------------------------------------------------------------------
0001329A                            
0001329A                            Staircase:
0001329A 7000                       		moveq	#0,d0
0001329C 1028 0024                  		move.b	obRoutine(a0),d0
000132A0 323B 0000                  		move.w	Stair_Index(pc,d0.w),d1
000132A4 4EBB 1000                  		jsr	Stair_Index(pc,d1.w)
000132C6 6000 C6B0                  		bra.w	DisplaySprite
000132CA                            ; ===========================================================================
000132CA 0000                       Stair_Index:	dc.w Stair_Main-Stair_Index
000132CC 0000                       		dc.w Stair_Move-Stair_Index
000132CE 0000                       		dc.w Stair_Solid-Stair_Index
000132D0                            
000132D0 =00000030                  stair_origX:	equ $30		; original x-axis position
000132D0 =00000032                  stair_origY:	equ $32		; original y-axis position
000132D0                            
000132D0 =0000003C                  stair_parent:	equ $3C		; address of parent object (4 bytes)
000132D0                            ; ===========================================================================
000132D0                            
000132D0                            Stair_Main:	; Routine 0
000132D0 5428 0024                  		addq.b	#2,obRoutine(a0)
000132D4 7638                       		moveq	#$38,d3
000132D6 7801                       		moveq	#1,d4
000132D8 0828 0000 0022             		btst	#0,obStatus(a0)	; is object flipped?
000132DE 6700                       		beq.s	@notflipped	; if not, branch
000132E0 763B                       		moveq	#$3B,d3
000132E2 78FF                       		moveq	#-1,d4
000132E4                            
000132E4                            	@notflipped:
000132E4 3428 0008                  		move.w	obX(a0),d2
000132E8 2248                       		movea.l	a0,a1
000132EA 7203                       		moveq	#3,d1
000132EC 6000                       		bra.s	@makeblocks
000132EE                            ; ===========================================================================
000132EE                            
000132EE                            @loop:
000132EE 6100 CB2A                  		bsr.w	FindNextFreeObj
000132F2 6600 0000                  		bne.w	@fail
000132F6 137C 0004 0024             		move.b	#4,obRoutine(a1)
000132FC                            
000132FC                            @makeblocks:
000132FC 12BC 005B                  		move.b	#id_Staircase,0(a1) ; load another block object
00013300 237C 0000 0000 0004        		move.l	#Map_Stair,obMap(a1)
00013308 337C 4000 0002             		move.w	#$4000,obGfx(a1)
0001330E 137C 0004 0001             		move.b	#4,obRender(a1)
00013314 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001331A 137C 0010 0014             		move.b	#$10,obActWid(a1)
00013320 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
00013326 3342 0008                  		move.w	d2,obX(a1)
0001332A 3368 000C 000C             		move.w	obY(a0),obY(a1)
00013330 3368 0008 0030             		move.w	obX(a0),stair_origX(a1)
00013336 3369 000C 0032             		move.w	obY(a1),stair_origY(a1)
0001333C 0642 0020                  		addi.w	#$20,d2
00013340 1343 0037                  		move.b	d3,$37(a1)
00013344 2348 003C                  		move.l	a0,stair_parent(a1)
00013348 D604                       		add.b	d4,d3
0001334A 51C9 FFA2                  		dbf	d1,@loop	; repeat sequence 3 times
0001334E                            
0001334E                            	@fail:
0001334E                            
0001334E                            Stair_Move:	; Routine 2
0001334E 7000                       		moveq	#0,d0
00013350 1028 0028                  		move.b	obSubtype(a0),d0
00013354 0240 0007                  		andi.w	#7,d0
00013358 D040                       		add.w	d0,d0
0001335A 323B 0000                  		move.w	Stair_TypeIndex(pc,d0.w),d1
0001335E 4EBB 1000                  		jsr	Stair_TypeIndex(pc,d1.w)
00013362                            
00013362                            Stair_Solid:	; Routine 4
00013362 2468 003C                  		movea.l	stair_parent(a0),a2
00013366 7000                       		moveq	#0,d0
00013368 1028 0037                  		move.b	$37(a0),d0
0001336C 1032 0000                  		move.b	(a2,d0.w),d0
00013370 D068 0032                  		add.w	stair_origY(a0),d0
00013374 3140 000C                  		move.w	d0,obY(a0)
00013378 7200                       		moveq	#0,d1
0001337A 1228 0014                  		move.b	obActWid(a0),d1
0001337E 0641 000B                  		addi.w	#$B,d1
00013382 343C 0010                  		move.w	#$10,d2
00013386 363C 0011                  		move.w	#$11,d3
0001338A 3828 0008                  		move.w	obX(a0),d4
0001338E 6100 E9F6                  		bsr.w	SolidObject
00013392 4A04                       		tst.b	d4
00013394 6A00                       		bpl.s	loc_10F92
00013396 1544 0036                  		move.b	d4,$36(a2)
0001339A                            
0001339A                            loc_10F92:
0001339A 0828 0003 0022             		btst	#3,obStatus(a0)
000133A0 6700                       		beq.s	locret_10FA0
000133A2 157C 0001 0036             		move.b	#1,$36(a2)
000133A8                            
000133A8                            locret_10FA0:
000133A8 4E75                       		rts	
000133AA                            ; ===========================================================================
000133AA 0000                       Stair_TypeIndex:dc.w Stair_Type00-Stair_TypeIndex
000133AC 0000                       		dc.w Stair_Type01-Stair_TypeIndex
000133AE 0000                       		dc.w Stair_Type02-Stair_TypeIndex
000133B0 0000                       		dc.w Stair_Type01-Stair_TypeIndex
000133B2                            ; ===========================================================================
000133B2                            
000133B2                            Stair_Type00:
000133B2 4A68 0034                  		tst.w	$34(a0)
000133B6 6600                       		bne.s	loc_10FC0
000133B8 0C28 0001 0036             		cmpi.b	#1,$36(a0)
000133BE 6600                       		bne.s	locret_10FBE
000133C0 317C 001E 0034             		move.w	#$1E,$34(a0)
000133C6                            
000133C6                            locret_10FBE:
000133C6 4E75                       		rts	
000133C8                            ; ===========================================================================
000133C8                            
000133C8                            loc_10FC0:
000133C8 5368 0034                  		subq.w	#1,$34(a0)
000133CC 66F8                       		bne.s	locret_10FBE
000133CE 5228 0028                  		addq.b	#1,obSubtype(a0) ; add 1 to type
000133D2 4E75                       		rts	
000133D4                            ; ===========================================================================
000133D4                            
000133D4                            Stair_Type02:
000133D4 4A68 0034                  		tst.w	$34(a0)
000133D8 6600                       		bne.s	loc_10FE0
000133DA 4A28 0036                  		tst.b	$36(a0)
000133DE 6A00                       		bpl.s	locret_10FDE
000133E0 317C 003C 0034             		move.w	#$3C,$34(a0)
000133E6                            
000133E6                            locret_10FDE:
000133E6 4E75                       		rts	
000133E8                            ; ===========================================================================
000133E8                            
000133E8                            loc_10FE0:
000133E8 5368 0034                  		subq.w	#1,$34(a0)
000133EC 6600                       		bne.s	loc_10FEC
000133EE 5228 0028                  		addq.b	#1,obSubtype(a0) ; add 1 to type
000133F2 4E75                       		rts	
000133F4                            ; ===========================================================================
000133F4                            
000133F4                            loc_10FEC:
000133F4 43E8 0038                  		lea	$38(a0),a1
000133F8 3028 0034                  		move.w	$34(a0),d0
000133FC E408                       		lsr.b	#2,d0
000133FE 0200 0001                  		andi.b	#1,d0
00013402 12C0                       		move.b	d0,(a1)+
00013404 0A00 0001                  		eori.b	#1,d0
00013408 12C0                       		move.b	d0,(a1)+
0001340A 0A00 0001                  		eori.b	#1,d0
0001340E 12C0                       		move.b	d0,(a1)+
00013410 0A00 0001                  		eori.b	#1,d0
00013414 12C0                       		move.b	d0,(a1)+
00013416 4E75                       		rts	
00013418                            ; ===========================================================================
00013418                            
00013418                            Stair_Type01:
00013418 43E8 0038                  		lea	$38(a0),a1
0001341C 0C11 0080                  		cmpi.b	#$80,(a1)
00013420 6700                       		beq.s	locret_11038
00013422 5211                       		addq.b	#1,(a1)
00013424 7200                       		moveq	#0,d1
00013426 1219                       		move.b	(a1)+,d1
00013428 4841                       		swap	d1
0001342A E289                       		lsr.l	#1,d1
0001342C 2401                       		move.l	d1,d2
0001342E E289                       		lsr.l	#1,d1
00013430 2601                       		move.l	d1,d3
00013432 D682                       		add.l	d2,d3
00013434 4841                       		swap	d1
00013436 4842                       		swap	d2
00013438 4843                       		swap	d3
0001343A 12C3                       		move.b	d3,(a1)+
0001343C 12C2                       		move.b	d2,(a1)+
0001343E 12C1                       		move.b	d1,(a1)+
00013440                            
00013440                            locret_11038:
00013440 4E75                       		rts	
00013442 4E75                       		rts	
00013442 4E75                       		rts	
00013444                            Map_Stair:	include	"_maps\Staircase.asm"
00013444                            ; ---------------------------------------------------------------------------
00013444                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00013444                            ; ---------------------------------------------------------------------------
00013444                            Map_Stair_internal:
00013444 0000                       		dc.w @block-Map_Stair_internal
00013446 01                         @block:		dc.b 1
00013447 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
0001344C                            		even
0001344C                            		even
0001344C                            		include	"_incObj\5C Pylon.asm"
0001344C                            ; ---------------------------------------------------------------------------
0001344C                            ; Object 5C - metal pylons in foreground (SLZ)
0001344C                            ; ---------------------------------------------------------------------------
0001344C                            
0001344C                            Pylon:
0001344C 7000                       		moveq	#0,d0
0001344E 1028 0024                  		move.b	obRoutine(a0),d0
00013452 323B 0000                  		move.w	Pyl_Index(pc,d0.w),d1
00013456 4EFB 1000                  		jmp	Pyl_Index(pc,d1.w)
0001345A                            ; ===========================================================================
0001345A 0000                       Pyl_Index:	dc.w Pyl_Main-Pyl_Index
0001345C 0000                       		dc.w Pyl_Display-Pyl_Index
0001345E                            ; ===========================================================================
0001345E                            
0001345E                            Pyl_Main:	; Routine 0
0001345E 5428 0024                  		addq.b	#2,obRoutine(a0)
00013462 217C 0000 0000 0004        		move.l	#Map_Pylon,obMap(a0)
0001346A 317C 83CC 0002             		move.w	#$83CC,obGfx(a0)
00013470 117C 0010 0014             		move.b	#$10,obActWid(a0)
00013476                            
00013476                            Pyl_Display:	; Routine 2
00013476 2238 F700                  		move.l	(v_screenposx).w,d1
0001347A D281                       		add.l	d1,d1
0001347C 4841                       		swap	d1
0001347E 4441                       		neg.w	d1
00013480 3141 0008                  		move.w	d1,obX(a0)
00013484 2238 F704                  		move.l	(v_screenposy).w,d1
00013488 D281                       		add.l	d1,d1
0001348A 4841                       		swap	d1
0001348C 0241 003F                  		andi.w	#$3F,d1
00013490 4441                       		neg.w	d1
00013492 0641 0100                  		addi.w	#$100,d1
00013496 3141 000A                  		move.w	d1,obScreenY(a0)
0001349A 6000 C4DC                  		bra.w	DisplaySprite
0001349A 6000 C4DC                  		bra.w	DisplaySprite
0001349E                            Map_Pylon:	include	"_maps\Pylon.asm"
0001349E                            ; ---------------------------------------------------------------------------
0001349E                            ; Sprite mappings - metal pylons in foreground (SLZ)
0001349E                            ; ---------------------------------------------------------------------------
0001349E                            Map_Pylon_internal:
0001349E 0000                       		dc.w @pylon-Map_Pylon_internal
000134A0 09                         @pylon:		dc.b 9
000134A1 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
000134A6 A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
000134AB C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
000134B0 E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
000134B5 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
000134BA 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
000134BF 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
000134C4 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
000134C9 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
000134CE                            		even
000134CE                            		even
000134CE                            
000134CE                            		include	"_incObj\1B Water Surface.asm"
000134CE                            ; ---------------------------------------------------------------------------
000134CE                            ; Object 1B - water surface (LZ)
000134CE                            ; ---------------------------------------------------------------------------
000134CE                            
000134CE                            WaterSurface:
000134CE 7000                       		moveq	#0,d0
000134D0 1028 0024                  		move.b	obRoutine(a0),d0
000134D4 323B 0000                  		move.w	Surf_Index(pc,d0.w),d1
000134D8 4EFB 1000                  		jmp	Surf_Index(pc,d1.w)
000134DC                            ; ===========================================================================
000134DC 0000                       Surf_Index:	dc.w Surf_Main-Surf_Index
000134DE 0000                       		dc.w Surf_Action-Surf_Index
000134E0                            
000134E0 =00000030                  surf_origX:	equ $30		; original x-axis position
000134E0 =00000032                  surf_freeze:	equ $32		; flag to freeze animation
000134E0                            ; ===========================================================================
000134E0                            
000134E0                            Surf_Main:	; Routine 0
000134E0 5428 0024                  		addq.b	#2,obRoutine(a0)
000134E4 217C 0000 0000 0004        		move.l	#Map_Surf,obMap(a0)
000134EC 317C C300 0002             		move.w	#$C300,obGfx(a0)
000134F2 117C 0004 0001             		move.b	#4,obRender(a0)
000134F8 117C 0080 0014             		move.b	#$80,obActWid(a0)
000134FE 3168 0008 0030             		move.w	obX(a0),surf_origX(a0)
00013504                            
00013504                            Surf_Action:	; Routine 2
00013504 3238 F700                  		move.w	(v_screenposx).w,d1
00013508 0241 FFE0                  		andi.w	#$FFE0,d1
0001350C D268 0030                  		add.w	surf_origX(a0),d1
00013510 0838 0000 FE05             		btst	#0,(v_framebyte).w
00013516 6700                       		beq.s	@even		; branch on even frames
00013518 0641 0020                  		addi.w	#$20,d1
0001351C                            
0001351C                            	@even:
0001351C 3141 0008                  		move.w	d1,obX(a0)	; match	obj x-position to screen position
00013520 3238 F646                  		move.w	(v_waterpos1).w,d1
00013524 3141 000C                  		move.w	d1,obY(a0)	; match	obj y-position to water	height
00013528 4A28 0032                  		tst.b	surf_freeze(a0)
0001352C 6600                       		bne.s	@stopped
0001352E 0838 0007 F605             		btst	#bitStart,(v_jpadpress1).w ; is Start button pressed?
00013534 6700                       		beq.s	@animate	; if not, branch
00013536 5628 001A                  		addq.b	#3,obFrame(a0)	; use different	frames
0001353A 117C 0001 0032             		move.b	#1,surf_freeze(a0) ; stop animation
00013540 6000                       		bra.s	@display
00013542                            ; ===========================================================================
00013542                            
00013542                            @stopped:
00013542 4A78 F63A                  		tst.w	(f_pause).w	; is the game paused?
00013546 6600                       		bne.s	@display	; if yes, branch
00013548 117C 0000 0032             		move.b	#0,surf_freeze(a0) ; resume animation
0001354E 5728 001A                  		subq.b	#3,obFrame(a0)	; use normal frames
00013552                            
00013552                            @animate:
00013552 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00013556 6A00                       		bpl.s	@display
00013558 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0001355E 5228 001A                  		addq.b	#1,obFrame(a0)
00013562 0C28 0003 001A             		cmpi.b	#3,obFrame(a0)
00013568 6500                       		bcs.s	@display
0001356A 117C 0000 001A             		move.b	#0,obFrame(a0)
00013570                            
00013570                            @display:
00013570 6000 C406                  		bra.w	DisplaySprite
00013570 6000 C406                  		bra.w	DisplaySprite
00013574                            Map_Surf:	include	"_maps\Water Surface.asm"
00013574                            ; --------------------------------------------------------------------------------
00013574                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00013574                            ; --------------------------------------------------------------------------------
00013574                            
00013574                            SME_LGSi8:	
00013574 0000 0000                  		dc.w SME_LGSi8_C-SME_LGSi8, SME_LGSi8_1C-SME_LGSi8	
00013578 0000 0000                  		dc.w SME_LGSi8_2C-SME_LGSi8, SME_LGSi8_3C-SME_LGSi8	
0001357C 0000 0000                  		dc.w SME_LGSi8_5B-SME_LGSi8, SME_LGSi8_7A-SME_LGSi8	
00013580 03                         SME_LGSi8_C:	dc.b 3	
00013581 F80D 0000 A0               		dc.b $F8, $D, 0, 0, $A0	
00013586 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	
0001358B F80D 0000 20               		dc.b $F8, $D, 0, 0, $20	
00013590 03                         SME_LGSi8_1C:	dc.b 3	
00013591 F80D 0008 A0               		dc.b $F8, $D, 0, 8, $A0	
00013596 F80D 0008 E0               		dc.b $F8, $D, 0, 8, $E0	
0001359B F80D 0008 20               		dc.b $F8, $D, 0, 8, $20	
000135A0 03                         SME_LGSi8_2C:	dc.b 3	
000135A1 F80D 0800 A0               		dc.b $F8, $D, 8, 0, $A0	
000135A6 F80D 0800 E0               		dc.b $F8, $D, 8, 0, $E0	
000135AB F80D 0800 20               		dc.b $F8, $D, 8, 0, $20	
000135B0 06                         SME_LGSi8_3C:	dc.b 6	
000135B1 F80D 0000 A0               		dc.b $F8, $D, 0, 0, $A0	
000135B6 F80D 0000 C0               		dc.b $F8, $D, 0, 0, $C0	
000135BB F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	
000135C0 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0	
000135C5 F80D 0000 20               		dc.b $F8, $D, 0, 0, $20	
000135CA F80D 0000 40               		dc.b $F8, $D, 0, 0, $40	
000135CF 06                         SME_LGSi8_5B:	dc.b 6	
000135D0 F80D 0008 A0               		dc.b $F8, $D, 0, 8, $A0	
000135D5 F80D 0008 C0               		dc.b $F8, $D, 0, 8, $C0	
000135DA F80D 0008 E0               		dc.b $F8, $D, 0, 8, $E0	
000135DF F80D 0008 00               		dc.b $F8, $D, 0, 8, 0	
000135E4 F80D 0008 20               		dc.b $F8, $D, 0, 8, $20	
000135E9 F80D 0008 40               		dc.b $F8, $D, 0, 8, $40	
000135EE 06                         SME_LGSi8_7A:	dc.b 6	
000135EF F80D 0800 A0               		dc.b $F8, $D, 8, 0, $A0	
000135F4 F80D 0800 C0               		dc.b $F8, $D, 8, 0, $C0	
000135F9 F80D 0800 E0               		dc.b $F8, $D, 8, 0, $E0	
000135FE F80D 0800 00               		dc.b $F8, $D, 8, 0, 0	
00013603 F80D 0800 20               		dc.b $F8, $D, 8, 0, $20	
00013608 F80D 0800 40               		dc.b $F8, $D, 8, 0, $40	
0001360E 00                         		even
0001360E 00                         		even
0001360E                            		include	"_incObj\0B Pole that Breaks.asm"
0001360E                            ; ---------------------------------------------------------------------------
0001360E                            ; Object 0B - pole that	breaks (LZ)
0001360E                            ; ---------------------------------------------------------------------------
0001360E                            
0001360E                            Pole:
0001360E 7000                       		moveq	#0,d0
00013610 1028 0024                  		move.b	obRoutine(a0),d0
00013614 323B 0000                  		move.w	Pole_Index(pc,d0.w),d1
00013618 4EFB 1000                  		jmp	Pole_Index(pc,d1.w)
0001361C                            ; ===========================================================================
0001361C 0000                       Pole_Index:	dc.w Pole_Main-Pole_Index
0001361E 0000                       		dc.w Pole_Action-Pole_Index
00013620 0000                       		dc.w Pole_Display-Pole_Index
00013622                            
00013622 =00000030                  pole_time:	equ $30		; time between grabbing the pole & breaking
00013622 =00000032                  pole_grabbed:	equ $32		; flag set when Sonic grabs the pole
00013622                            ; ===========================================================================
00013622                            
00013622                            Pole_Main:	; Routine 0
00013622 5428 0024                  		addq.b	#2,obRoutine(a0)
00013626 217C 0000 0000 0004        		move.l	#Map_Pole,obMap(a0)
0001362E 317C 43DE 0002             		move.w	#$43DE,obGfx(a0)
00013634 117C 0004 0001             		move.b	#4,obRender(a0)
0001363A 117C 0008 0014             		move.b	#8,obActWid(a0)
00013640 317C 0200 0018             		move.w	#$200,obPriority(a0)
00013646 117C 00E1 0020             		move.b	#$E1,obColType(a0)
0001364C 7000                       		moveq	#0,d0
0001364E 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00013652 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00013656 3140 0030                  		move.w	d0,pole_time(a0) ; set breakage time
0001365A                            
0001365A                            Pole_Action:	; Routine 2
0001365A 4A28 0032                  		tst.b	pole_grabbed(a0) ; has pole already been grabbed?
0001365E 6700                       		beq.s	@grab		; if not, branch
00013660 4A68 0030                  		tst.w	pole_time(a0)
00013664 6700                       		beq.s	@moveup
00013666 5368 0030                  		subq.w	#1,pole_time(a0) ; decrement time until break
0001366A 6600                       		bne.s	@moveup
0001366C 117C 0001 001A             		move.b	#1,obFrame(a0)	; break	the pole
00013672 6000                       		bra.s	@release
00013674                            ; ===========================================================================
00013674                            
00013674                            @moveup:
00013674 43F8 D000                  		lea	(v_player).w,a1
00013678 3028 000C                  		move.w	obY(a0),d0
0001367C 0440 0018                  		subi.w	#$18,d0
00013680 0838 0000 F604             		btst	#bitUp,(v_jpadhold1).w ; is "up" pressed?
00013686 6700                       		beq.s	@movedown	; if not, branch
00013688 5369 000C                  		subq.w	#1,obY(a1)	; move Sonic up
0001368C B069 000C                  		cmp.w	obY(a1),d0
00013690 6500                       		bcs.s	@movedown
00013692 3340 000C                  		move.w	d0,obY(a1)
00013696                            
00013696                            @movedown:
00013696 0640 0024                  		addi.w	#$24,d0
0001369A 0838 0001 F604             		btst	#bitDn,(v_jpadhold1).w ; is "down" pressed?
000136A0 6700                       		beq.s	@letgo		; if not, branch
000136A2 5269 000C                  		addq.w	#1,obY(a1)	; move Sonic down
000136A6 B069 000C                  		cmp.w	obY(a1),d0
000136AA 6400                       		bcc.s	@letgo
000136AC 3340 000C                  		move.w	d0,obY(a1)
000136B0                            
000136B0                            @letgo:
000136B0 1038 F603                  		move.b	(v_jpadpress2).w,d0
000136B4 0240 0070                  		andi.w	#btnABC,d0	; is A/B/C pressed?
000136B8 6700                       		beq.s	Pole_Display	; if not, branch
000136BA                            
000136BA                            @release:
000136BA 4228 0020                  		clr.b	obColType(a0)
000136BE 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Pole_Display next
000136C2 4238 F7C8                  		clr.b	(f_lockmulti).w
000136C6 4238 F7C9                  		clr.b	(f_wtunnelallow).w
000136CA 4228 0032                  		clr.b	pole_grabbed(a0)
000136CE 6000                       		bra.s	Pole_Display
000136D0                            ; ===========================================================================
000136D0                            
000136D0                            @grab:
000136D0 4A28 0021                  		tst.b	obColProp(a0)	; has Sonic touched the	pole?
000136D4 6700                       		beq.s	Pole_Display	; if not, branch
000136D6 43F8 D000                  		lea	(v_player).w,a1
000136DA 3028 0008                  		move.w	obX(a0),d0
000136DE 0640 0014                  		addi.w	#$14,d0
000136E2 B069 0008                  		cmp.w	obX(a1),d0
000136E6 6400                       		bcc.s	Pole_Display
000136E8 4228 0021                  		clr.b	obColProp(a0)
000136EC 0C29 0004 0024             		cmpi.b	#4,obRoutine(a1)
000136F2 6400                       		bcc.s	Pole_Display
000136F4 4269 0010                  		clr.w	obVelX(a1)	; stop Sonic moving
000136F8 4269 0012                  		clr.w	obVelY(a1)	; stop Sonic moving
000136FC 3028 0008                  		move.w	obX(a0),d0
00013700 0640 0014                  		addi.w	#$14,d0
00013704 3340 0008                  		move.w	d0,obX(a1)
00013708 08A9 0000 0022             		bclr	#0,obStatus(a1)
0001370E 137C 0000 001C             		move.b	#id_Hang,obAnim(a1) ; set Sonic's animation to "hanging" ($11)
00013714 11FC 0001 F7C8             		move.b	#1,(f_lockmulti).w ; lock controls
0001371A 11FC 0001 F7C9             		move.b	#1,(f_wtunnelallow).w ; disable wind tunnel
00013720 117C 0001 0032             		move.b	#1,pole_grabbed(a0) ; begin countdown to breakage
00013726                            
00013726                            Pole_Display:	; Routine 4
00013726 6000 E1C6                  		bra.w	RememberState
00013726 6000 E1C6                  		bra.w	RememberState
0001372A                            Map_Pole:	include	"_maps\Pole that Breaks.asm"
0001372A                            ; ---------------------------------------------------------------------------
0001372A                            ; Sprite mappings - pole that breaks (LZ)
0001372A                            ; ---------------------------------------------------------------------------
0001372A                            Map_Pole_internal:
0001372A 0000                       		dc.w @normal-Map_Pole_internal
0001372C 0000                       		dc.w @broken-Map_Pole_internal
0001372E 02                         @normal:	dc.b 2			; normal pole
0001372F E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
00013734 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
00013739 04                         @broken:	dc.b 4			; broken pole
0001373A E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
0001373F F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
00013744 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
00013749 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
0001374E                            		even
0001374E                            		even
0001374E                            		include	"_incObj\0C Flapping Door.asm"
0001374E                            ; ---------------------------------------------------------------------------
0001374E                            ; Object 0C - flapping door (LZ)
0001374E                            ; ---------------------------------------------------------------------------
0001374E                            
0001374E                            FlapDoor:
0001374E 7000                       		moveq	#0,d0
00013750 1028 0024                  		move.b	obRoutine(a0),d0
00013754 323B 0000                  		move.w	Flap_Index(pc,d0.w),d1
00013758 4EFB 1000                  		jmp	Flap_Index(pc,d1.w)
0001375C                            ; ===========================================================================
0001375C 0000                       Flap_Index:	dc.w Flap_Main-Flap_Index
0001375E 0000                       		dc.w Flap_OpenClose-Flap_Index
00013760                            
00013760 =00000032                  flap_time:	equ $32		; time between opening/closing
00013760 =00000030                  flap_wait:	equ $30		; time until change
00013760                            ; ===========================================================================
00013760                            
00013760                            Flap_Main:	; Routine 0
00013760 5428 0024                  		addq.b	#2,obRoutine(a0)
00013764 217C 0000 0000 0004        		move.l	#Map_Flap,obMap(a0)
0001376C 317C 4328 0002             		move.w	#$4328,obGfx(a0)
00013772 0028 0004 0001             		ori.b	#4,obRender(a0)
00013778 117C 0028 0014             		move.b	#$28,obActWid(a0)
0001377E 7000                       		moveq	#0,d0
00013780 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00013784 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00013788 3140 0032                  		move.w	d0,flap_time(a0) ; set flap delay time
0001378C                            
0001378C                            Flap_OpenClose:	; Routine 2
0001378C 5368 0030                  		subq.w	#1,flap_wait(a0) ; decrement time delay
00013790 6A00                       		bpl.s	@wait		; if time remains, branch
00013792 3168 0032 0030             		move.w	flap_time(a0),flap_wait(a0) ; reset time delay
00013798 0868 0000 001C             		bchg	#0,obAnim(a0)	; open/close door
0001379E 4A28 0001                  		tst.b	obRender(a0)
000137A2 6A00                       		bpl.s	@nosound
000137AE                            
000137AE                            	@wait:
000137AE                            	@nosound:
000137AE 43F9 0000 0000             		lea	(Ani_Flap).l,a1
000137B4 6100 926E                  		bsr.w	AnimateSprite
000137B8 4238 F7C9                  		clr.b	(f_wtunnelallow).w ; enable wind tunnel
000137BC 4A28 001A                  		tst.b	obFrame(a0)	; is the door open?
000137C0 6600                       		bne.s	@display	; if yes, branch
000137C2 3038 D008                  		move.w	(v_player+obX).w,d0
000137C6 B068 0008                  		cmp.w	obX(a0),d0	; has Sonic passed through the door?
000137CA 6400                       		bcc.s	@display	; if yes, branch
000137CC 11FC 0001 F7C9             		move.b	#1,(f_wtunnelallow).w ; disable wind tunnel
000137D2 323C 0013                  		move.w	#$13,d1
000137D6 343C 0020                  		move.w	#$20,d2
000137DA 3602                       		move.w	d2,d3
000137DC 5243                       		addq.w	#1,d3
000137DE 3828 0008                  		move.w	obX(a0),d4
000137E2 6100 E5A2                  		bsr.w	SolidObject	; make the door	solid
000137E6                            
000137E6                            	@display:
000137E6 6000 E106                  		bra.w	RememberState
000137E6 6000 E106                  		bra.w	RememberState
000137EA                            		include	"_anim\Flapping Door.asm"
000137EA                            ; ---------------------------------------------------------------------------
000137EA                            ; Animation script - flapping door (LZ)
000137EA                            ; ---------------------------------------------------------------------------
000137EA 0000                       Ani_Flap:	dc.w @opening-Ani_Flap
000137EC 0000                       		dc.w @closing-Ani_Flap
000137EE 0300 0102 FE01             @opening:	dc.b 3,	0, 1, 2, afBack, 1
000137F4 0302 0100 FE01             @closing:	dc.b 3,	2, 1, 0, afBack, 1
000137FA                            		even
000137FA                            		even
000137FA                            Map_Flap:	include	"_maps\Flapping Door.asm"
000137FA                            ; ---------------------------------------------------------------------------
000137FA                            ; Sprite mappings - flapping door (LZ)
000137FA                            ; ---------------------------------------------------------------------------
000137FA                            Map_Flap_internal:
000137FA 0000                       		dc.w @closed-Map_Flap_internal
000137FC 0000                       		dc.w @halfway-Map_Flap_internal
000137FE 0000                       		dc.w @open-Map_Flap_internal
00013800 02                         @closed:	dc.b 2
00013801 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00013806 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
0001380B 02                         @halfway:	dc.b 2
0001380C DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00013811 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
00013816 02                         @open:		dc.b 2
00013817 D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
0001381C 180D 1018 00               		dc.b $18, $D, $10, $18,	0
00013822 00                         		even
00013822 00                         		even
00013822                            
00013822                            		include	"_incObj\71 Invisible Barriers.asm"
00013822                            ; ---------------------------------------------------------------------------
00013822                            ; Object 71 - invisible	solid barriers
00013822                            ; ---------------------------------------------------------------------------
00013822                            
00013822                            Invisibarrier:
00013822 7000                       		moveq	#0,d0
00013824 1028 0024                  		move.b	obRoutine(a0),d0
00013828 323B 0000                  		move.w	Invis_Index(pc,d0.w),d1
0001382C 4EFB 1000                  		jmp	Invis_Index(pc,d1.w)
00013830                            ; ===========================================================================
00013830 0000                       Invis_Index:	dc.w Invis_Main-Invis_Index
00013832 0000                       		dc.w Invis_Solid-Invis_Index
00013834                            
00013834 =00000016                  invis_height:	equ $16		; height in pixels
00013834                            ; ===========================================================================
00013834                            
00013834                            Invis_Main:	; Routine 0
00013834 5428 0024                  		addq.b	#2,obRoutine(a0)
00013838 217C 0000 0000 0004        		move.l	#Map_Invis,obMap(a0)
00013840 317C 8680 0002             		move.w	#$8680,obGfx(a0)
00013846 0028 0004 0001             		ori.b	#4,obRender(a0)
0001384C 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00013850 1200                       		move.b	d0,d1
00013852 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
00013856 0640 0010                  		addi.w	#$10,d0
0001385A E248                       		lsr.w	#1,d0
0001385C 1140 0014                  		move.b	d0,obActWid(a0)	; set object width
00013860 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
00013864 5241                       		addq.w	#1,d1
00013866 E749                       		lsl.w	#3,d1
00013868 1141 0016                  		move.b	d1,invis_height(a0) ; set object height
0001386C                            
0001386C                            Invis_Solid:	; Routine 2
0001386C 6100 C38A                  		bsr.w	ChkObjectVisible
00013870 6600                       		bne.s	@chkdel
00013872 7200                       		moveq	#0,d1
00013874 1228 0014                  		move.b	obActWid(a0),d1
00013878 0641 000B                  		addi.w	#$B,d1
0001387C 7400                       		moveq	#0,d2
0001387E 1428 0016                  		move.b	invis_height(a0),d2
00013882 3602                       		move.w	d2,d3
00013884 5243                       		addq.w	#1,d3
00013886 3828 0008                  		move.w	obX(a0),d4
0001388A 6100 E542                  		bsr.w	SolidObject71
0001388E                            
0001388E                            @chkdel:
000138AA 4A78 FE08                  		tst.w	(v_debuguse).w	; are you using	debug mode?
000138AE 6700                       		beq.s	@nodisplay	; if not, branch
000138B0 4EF9 0000 F978             		jmp	(DisplaySprite).l	; if yes, display the object
000138B6                            
000138B6                            	@nodisplay:
000138B6 4E75                       		rts	
000138B8                            
000138B8                            	@delete:
000138B8 4EF9 0000 F9B8             		jmp	(DeleteObject).l
000138B8 4EF9 0000 F9B8             		jmp	(DeleteObject).l
000138BE                            Map_Invis:	include	"_maps\Invisible Barriers.asm"
000138BE                            ; --------------------------------------------------------------------------------
000138BE                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000138BE                            ; --------------------------------------------------------------------------------
000138BE                            
000138BE                            SME_t60cE:	
000138BE 0000 0000                  		dc.w SME_t60cE_6-SME_t60cE, SME_t60cE_1B-SME_t60cE	
000138C2 0000                       		dc.w SME_t60cE_30-SME_t60cE	
000138C4 04                         SME_t60cE_6:	dc.b 4	
000138C5 0005 0028 F0               		dc.b 0, 5, 0, $28, $F0	
000138CA 0005 0028 00               		dc.b 0, 5, 0, $28, 0	
000138CF F005 0028 00               		dc.b $F0, 5, 0, $28, 0	
000138D4 F005 0028 F0               		dc.b $F0, 5, 0, $28, $F0	
000138D9 04                         SME_t60cE_1B:	dc.b 4	
000138DA E005 0028 C0               		dc.b $E0, 5, 0, $28, $C0	
000138DF E005 0028 30               		dc.b $E0, 5, 0, $28, $30	
000138E4 1005 0028 30               		dc.b $10, 5, 0, $28, $30	
000138E9 1005 0028 C0               		dc.b $10, 5, 0, $28, $C0	
000138EE 04                         SME_t60cE_30:	dc.b 4	
000138EF E005 0028 80               		dc.b $E0, 5, 0, $28, $80	
000138F4 E005 0028 70               		dc.b $E0, 5, 0, $28, $70	
000138F9 1005 0028 70               		dc.b $10, 5, 0, $28, $70	
000138FE 1005 0028 80               		dc.b $10, 5, 0, $28, $80	
00013904 00                         		even
00013904 00                         		even
00013904                            
00013904                            		include	"_incObj\5D Fan.asm"
00013904                            ; ---------------------------------------------------------------------------
00013904                            ; Object 5D - fans (SLZ)
00013904                            ; ---------------------------------------------------------------------------
00013904                            
00013904                            Fan:
00013904 7000                       		moveq	#0,d0
00013906 1028 0024                  		move.b	obRoutine(a0),d0
0001390A 323B 0000                  		move.w	Fan_Index(pc,d0.w),d1
0001390E 4EFB 1000                  		jmp	Fan_Index(pc,d1.w)
00013912                            ; ===========================================================================
00013912 0000                       Fan_Index:	dc.w Fan_Main-Fan_Index
00013914 0000                       		dc.w Fan_Delay-Fan_Index
00013916                            
00013916 =00000030                  fan_time:	equ $30		; time between switching on/off
00013916 =00000032                  fan_switch:	equ $32		; on/off switch
00013916                            ; ===========================================================================
00013916                            
00013916                            Fan_Main:	; Routine 0
00013916 5428 0024                  		addq.b	#2,obRoutine(a0)
0001391A 217C 0000 0000 0004        		move.l	#Map_Fan,obMap(a0)
00013922 317C 43A0 0002             		move.w	#$43A0,obGfx(a0)
00013928 0028 0004 0001             		ori.b	#4,obRender(a0)
0001392E 117C 0010 0014             		move.b	#$10,obActWid(a0)
00013934 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001393A                            
0001393A                            Fan_Delay:	; Routine 2
0001393A 0828 0001 0028             		btst	#1,obSubtype(a0) ; is object type 02/03 (always on)?
00013940 6600                       		bne.s	@blow		; if yes, branch
00013942 5368 0030                  		subq.w	#1,fan_time(a0)	; subtract 1 from time delay
00013946 6A00                       		bpl.s	@blow		; if time remains, branch
00013948 317C 0078 0030             		move.w	#120,fan_time(a0) ; set delay to 2 seconds
0001394E 0868 0000 0032             		bchg	#0,fan_switch(a0) ; switch fan on/off
00013954 6700                       		beq.s	@blow		; if fan is off, branch
00013956 317C 00B4 0030             		move.w	#180,fan_time(a0) ; set delay to 3 seconds
0001395C                            
0001395C                            @blow:
0001395C 4A28 0032                  		tst.b	fan_switch(a0)	; is fan switched on?
00013960 6600 0000                  		bne.w	@chkdel		; if not, branch
00013964 43F8 D000                  		lea	(v_player).w,a1
00013968 3029 0008                  		move.w	obX(a1),d0
0001396C 9068 0008                  		sub.w	obX(a0),d0
00013970 0828 0000 0022             		btst	#0,obStatus(a0)	; is fan facing right?
00013976 6600                       		bne.s	@chksonic	; if yes, branch
00013978 4440                       		neg.w	d0
0001397A                            
0001397A                            @chksonic:
0001397A 0640 0050                  		addi.w	#$50,d0
0001397E 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
00013982 6400                       		bcc.s	@animate	; if yes, branch
00013984 3229 000C                  		move.w	obY(a1),d1
00013988 0641 0060                  		addi.w	#$60,d1
0001398C 9268 000C                  		sub.w	obY(a0),d1
00013990 6500                       		bcs.s	@animate	; branch if Sonic is too low
00013992 0C41 0070                  		cmpi.w	#$70,d1
00013996 6400                       		bcc.s	@animate	; branch if Sonic is too high
00013998 0440 0050                  		subi.w	#$50,d0		; is Sonic more than $50 pixels from the fan?
0001399C 6400                       		bcc.s	@faraway	; if yes, branch
0001399E 4640                       		not.w	d0
000139A0 D040                       		add.w	d0,d0
000139A2                            
000139A2                            	@faraway:
000139A2 0640 0060                  		addi.w	#$60,d0
000139A6 0828 0000 0022             		btst	#0,obStatus(a0)	; is fan facing right?
000139AC 6600                       		bne.s	@right		; if yes, branch
000139AE 4440                       		neg.w	d0
000139B0                            
000139B0                            	@right:
000139B0 4400                       		neg.b	d0
000139B2 E840                       		asr.w	#4,d0
000139B4 0828 0000 0028             		btst	#0,obSubtype(a0)
000139BA 6700                       		beq.s	@movesonic
000139BC 4440                       		neg.w	d0
000139BE                            
000139BE                            	@movesonic:
000139BE D169 0008                  		add.w	d0,obX(a1)	; push Sonic away from the fan
000139C2                            
000139C2                            @animate:
000139C2 5328 001E                  		subq.b	#1,obTimeFrame(a0)
000139C6 6A00                       		bpl.s	@chkdel
000139C8 117C 0000 001E             		move.b	#0,obTimeFrame(a0)
000139CE 5228 001B                  		addq.b	#1,obAniFrame(a0)
000139D2 0C28 0003 001B             		cmpi.b	#3,obAniFrame(a0)
000139D8 6500                       		bcs.s	@noreset
000139DA 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset after 4 frames
000139E0                            
000139E0                            	@noreset:
000139E0 7000                       		moveq	#0,d0
000139E2 0828 0000 0028             		btst	#0,obSubtype(a0)
000139E8 6700                       		beq.s	@noflip
000139EA 7002                       		moveq	#2,d0
000139EC                            
000139EC                            	@noflip:
000139EC D028 001B                  		add.b	obAniFrame(a0),d0
000139F0 1140 001A                  		move.b	d0,obFrame(a0)
000139F4                            
000139F4                            @chkdel:
000139F4 6100 BF82                  		bsr.w	DisplaySprite
00013A16 4E75                       		rts	
00013A16 4E75                       		rts	
00013A18                            Map_Fan:	include	"_maps\Fan.asm"
00013A18                            ; ---------------------------------------------------------------------------
00013A18                            ; Sprite mappings - fans (SLZ)
00013A18                            ; ---------------------------------------------------------------------------
00013A18                            Map_Fan_internal:
00013A18 0000                       		dc.w @fan1-Map_Fan_internal
00013A1A 0000                       		dc.w @fan2-Map_Fan_internal
00013A1C 0000                       		dc.w @fan3-Map_Fan_internal
00013A1E 0000                       		dc.w @fan2-Map_Fan_internal
00013A20 0000                       		dc.w @fan1-Map_Fan_internal
00013A22 02                         @fan1:		dc.b 2
00013A23 F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
00013A28 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
00013A2D 02                         @fan2:		dc.b 2
00013A2E F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00013A33 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
00013A38 02                         @fan3:		dc.b 2
00013A39 F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00013A3E 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00013A44 00                         		even
00013A44 00                         		even
00013A44                            		include	"_incObj\5E Seesaw.asm"
00013A44                            ; ---------------------------------------------------------------------------
00013A44                            ; Object 5E - seesaws (SLZ)
00013A44                            ; ---------------------------------------------------------------------------
00013A44                            
00013A44                            Seesaw:
00013A44 7000                       		moveq	#0,d0
00013A46 1028 0024                  		move.b	obRoutine(a0),d0
00013A4A 323B 0000                  		move.w	See_Index(pc,d0.w),d1
00013A4E 4EBB 1000                  		jsr	See_Index(pc,d1.w)
00013A52 3028 0000                  		move.w	see_origX(a0),d0
00013A56 0240 FF80                  		andi.w	#$FF80,d0
00013A5A 3238 F700                  		move.w	(v_screenposx).w,d1
00013A5E 0441 0080                  		subi.w	#$80,d1
00013A62 0241 FF80                  		andi.w	#$FF80,d1
00013A66 9041                       		sub.w	d1,d0
00013A68 6B00 BF4E                  		bmi.w	DeleteObject
00013A6C 0C40 0280                  		cmpi.w	#$280,d0
00013A70 6200 BF46                  		bhi.w	DeleteObject
00013A74 6000 BF02                  		bra.w	DisplaySprite
00013A78                            ; ===========================================================================
00013A78 0000                       See_Index:	dc.w See_Main-See_Index
00013A7A 0000                       		dc.w See_Slope-See_Index
00013A7C 0000                       		dc.w See_Slope2-See_Index
00013A7E 0000                       		dc.w See_Spikeball-See_Index
00013A80 0000                       		dc.w See_MoveSpike-See_Index
00013A82 0000                       		dc.w See_SpikeFall-See_Index
00013A84                            
00013A84 =00000030                  see_origX:	equ $30		; original x-axis position
00013A84 =00000034                  see_origY:	equ $34		; original y-axis position
00013A84 =00000038                  see_speed:	equ $38		; speed of collision
00013A84 =0000003A                  see_frame:	equ $3A		; 
00013A84 =0000003C                  see_parent:	equ $3C		; RAM address of parent object
00013A84                            ; ===========================================================================
00013A84                            
00013A84                            See_Main:	; Routine 0
00013A84 5428 0024                  		addq.b	#2,obRoutine(a0)
00013A88 217C 0000 0000 0004        		move.l	#Map_Seesaw,obMap(a0)
00013A90 317C 03D4 0002             		move.w	#$3D4,obGfx(a0)
00013A96 0028 0004 0001             		ori.b	#4,obRender(a0)
00013A9C 317C 0200 0018             		move.w	#$200,obPriority(a0)
00013AA2 117C 0030 0014             		move.b	#$30,obActWid(a0)
00013AA8 3168 0008 0030             		move.w	obX(a0),see_origX(a0)
00013AAE 4A28 0028                  		tst.b	obSubtype(a0)	; is object type 00 ?
00013AB2 6600                       		bne.s	@noball		; if not, branch
00013AB4                            
00013AB4 6100 C364                  		bsr.w	FindNextFreeObj
00013AB8 6600                       		bne.s	@noball
00013ABA 12BC 005E                  		move.b	#id_Seesaw,0(a1) ; load spikeball object
00013ABE 5C29 0024                  		addq.b	#6,obRoutine(a1) ; use See_Spikeball routine
00013AC2 3368 0008 0008             		move.w	obX(a0),obX(a1)
00013AC8 3368 000C 000C             		move.w	obY(a0),obY(a1)
00013ACE 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00013AD4 2348 003C                  		move.l	a0,see_parent(a1)
00013AD8                            
00013AD8                            	@noball:
00013AD8 0828 0000 0022             		btst	#0,obStatus(a0)	; is seesaw flipped?
00013ADE 6700                       		beq.s	@noflip		; if not, branch
00013AE0 117C 0002 001A             		move.b	#2,obFrame(a0)	; use different frame
00013AE6                            
00013AE6                            	@noflip:
00013AE6 1168 001A 003A             		move.b	obFrame(a0),see_frame(a0)
00013AEC                            
00013AEC                            See_Slope:	; Routine 2
00013AEC 1228 003A                  		move.b	see_frame(a0),d1
00013AF0 6100 0000                  		bsr.w	See_ChgFrame
00013AF4 45F9 0000 0000             		lea	(See_DataSlope).l,a2
00013AFA 0828 0000 001A             		btst	#0,obFrame(a0)	; is seesaw flat?
00013B00 6700                       		beq.s	@notflat	; if not, branch
00013B02 45F9 0000 0000             		lea	(See_DataFlat).l,a2
00013B08                            
00013B08                            	@notflat:
00013B08 43F8 D000                  		lea	(v_player).w,a1
00013B0C 3169 0012 0038             		move.w	obVelY(a1),see_speed(a0)
00013B12 323C 0030                  		move.w	#$30,d1
00013B16 4EB9 0000 915A             		jsr	(SlopeObject).l
00013B1C 4E75                       		rts	
00013B1E                            ; ===========================================================================
00013B1E                            
00013B1E                            See_Slope2:	; Routine 4
00013B1E 6100 0000                  		bsr.w	See_ChkSide
00013B22 45F9 0000 0000             		lea	(See_DataSlope).l,a2
00013B28 0828 0000 001A             		btst	#0,obFrame(a0)	; is seesaw flat?
00013B2E 6700                       		beq.s	@notflat	; if not, branch
00013B30 45F9 0000 0000             		lea	(See_DataFlat).l,a2
00013B36                            
00013B36                            	@notflat:
00013B36 323C 0030                  		move.w	#$30,d1
00013B3A 4EB9 0000 91FA             		jsr	(ExitPlatform).l
00013B40 323C 0030                  		move.w	#$30,d1
00013B44 3428 0008                  		move.w	obX(a0),d2
00013B48 4EB9 0000 A194             		jsr	(SlopeObject2).l
00013B4E 4E75                       		rts	
00013B50                            ; ===========================================================================
00013B50                            
00013B50                            See_ChkSide:
00013B50 7202                       		moveq	#2,d1
00013B52 43F8 D000                  		lea	(v_player).w,a1
00013B56 3028 0008                  		move.w	obX(a0),d0
00013B5A 9069 0008                  		sub.w	obX(a1),d0	; is Sonic on the left side of the seesaw?
00013B5E 6400                       		bcc.s	@leftside	; if yes, branch
00013B60 4440                       		neg.w	d0
00013B62 7200                       		moveq	#0,d1
00013B64                            
00013B64                            	@leftside:
00013B64 0C40 0008                  		cmpi.w	#8,d0
00013B68 6400                       		bcc.s	See_ChgFrame
00013B6A 7201                       		moveq	#1,d1
00013B6C                            
00013B6C                            See_ChgFrame:
00013B6C 1028 001A                  		move.b	obFrame(a0),d0
00013B70 B001                       		cmp.b	d1,d0		; does frame need to change?
00013B72 6700                       		beq.s	@noflip		; if not, branch
00013B74 6400                       		bcc.s	@loc_11772
00013B76 5400                       		addq.b	#2,d0
00013B78                            
00013B78                            	@loc_11772:
00013B78 5300                       		subq.b	#1,d0
00013B7A 1140 001A                  		move.b	d0,obFrame(a0)
00013B7E 1141 003A                  		move.b	d1,see_frame(a0)
00013B82 08A8 0000 0001             		bclr	#0,obRender(a0)
00013B88 0828 0001 001A             		btst	#1,obFrame(a0)
00013B8E 6700                       		beq.s	@noflip
00013B90 08E8 0000 0001             		bset	#0,obRender(a0)
00013B96                            
00013B96                            	@noflip:
00013B96 4E75                       		rts	
00013B98                            ; ===========================================================================
00013B98                            
00013B98                            See_Spikeball:	; Routine 6
00013B98 5428 0024                  		addq.b	#2,obRoutine(a0)
00013B9C 217C 0000 0000 0004        		move.l	#Map_SSawBall,obMap(a0)
00013BA4 317C 04F0 0002             		move.w	#$4F0,obGfx(a0)
00013BAA 0028 0004 0001             		ori.b	#4,obRender(a0)
00013BB0 317C 0200 0018             		move.w	#$200,obPriority(a0)
00013BB6 117C 008B 0020             		move.b	#$8B,obColType(a0)
00013BBC 117C 000C 0014             		move.b	#$C,obActWid(a0)
00013BC2 3168 0008 0030             		move.w	obX(a0),see_origX(a0)
00013BC8 0668 0028 0008             		addi.w	#$28,obX(a0)
00013BCE 3168 000C 0034             		move.w	obY(a0),see_origY(a0)
00013BD4 117C 0001 001A             		move.b	#1,obFrame(a0)
00013BDA 0828 0000 0022             		btst	#0,obStatus(a0)	; is seesaw flipped?
00013BE0 6700                       		beq.s	See_MoveSpike	; if not, branch
00013BE2 0468 0050 0008             		subi.w	#$50,obX(a0)	; move spikeball to the other side
00013BE8 117C 0002 003A             		move.b	#2,see_frame(a0)
00013BEE                            
00013BEE                            See_MoveSpike:	; Routine 8
00013BEE 2268 003C                  		movea.l	see_parent(a0),a1
00013BF2 7000                       		moveq	#0,d0
00013BF4 1028 003A                  		move.b	see_frame(a0),d0
00013BF8 9029 003A                  		sub.b	see_frame(a1),d0
00013BFC 6700                       		beq.s	loc_1183E
00013BFE 6400                       		bcc.s	loc_117FC
00013C00 4400                       		neg.b	d0
00013C02                            
00013C02                            loc_117FC:
00013C02 323C F7E8                  		move.w	#-$818,d1
00013C06 343C FEEC                  		move.w	#-$114,d2
00013C0A 0C00 0001                  		cmpi.b	#1,d0
00013C0E 6700                       		beq.s	loc_11822
00013C10 323C F510                  		move.w	#-$AF0,d1
00013C14 343C FF34                  		move.w	#-$CC,d2
00013C18 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
00013C1E 6D00                       		blt.s	loc_11822
00013C20 323C F200                  		move.w	#-$E00,d1
00013C24 343C FF60                  		move.w	#-$A0,d2
00013C28                            
00013C28                            loc_11822:
00013C28 3141 0012                  		move.w	d1,obVelY(a0)
00013C2C 3142 0010                  		move.w	d2,obVelX(a0)
00013C30 3028 0008                  		move.w	obX(a0),d0
00013C34 9068 0030                  		sub.w	see_origX(a0),d0
00013C38 6400                       		bcc.s	loc_11838
00013C3A 4468 0010                  		neg.w	obVelX(a0)
00013C3E                            
00013C3E                            loc_11838:
00013C3E 5428 0024                  		addq.b	#2,obRoutine(a0)
00013C42 6000                       		bra.s	See_SpikeFall
00013C44                            ; ===========================================================================
00013C44                            
00013C44                            loc_1183E:
00013C44 45F9 0000 0000             		lea	(See_Speeds).l,a2
00013C4A 7000                       		moveq	#0,d0
00013C4C 1029 001A                  		move.b	obFrame(a1),d0
00013C50 343C 0028                  		move.w	#$28,d2
00013C54 3228 0008                  		move.w	obX(a0),d1
00013C58 9268 0030                  		sub.w	see_origX(a0),d1
00013C5C 6400                       		bcc.s	loc_1185C
00013C5E 4442                       		neg.w	d2
00013C60 5440                       		addq.w	#2,d0
00013C62                            
00013C62                            loc_1185C:
00013C62 D040                       		add.w	d0,d0
00013C64 3228 0034                  		move.w	see_origY(a0),d1
00013C68 D272 0000                  		add.w	(a2,d0.w),d1
00013C6C 3141 000C                  		move.w	d1,obY(a0)
00013C70 D468 0030                  		add.w	see_origX(a0),d2
00013C74 3142 0008                  		move.w	d2,obX(a0)
00013C78 4268 000E                  		clr.w	obY+2(a0)
00013C7C 4268 000A                  		clr.w	obX+2(a0)
00013C80 4E75                       		rts	
00013C82                            ; ===========================================================================
00013C82                            
00013C82                            See_SpikeFall:	; Routine $A
00013C82 4A68 0012                  		tst.w	obVelY(a0)	; is spikeball falling down?
00013C86 6A00                       		bpl.s	loc_1189A	; if yes, branch
00013C88 6100 BCA2                  		bsr.w	ObjectFall
00013C8C 3028 0034                  		move.w	see_origY(a0),d0
00013C90 0440 002F                  		subi.w	#$2F,d0
00013C94 B068 000C                  		cmp.w	obY(a0),d0
00013C98 6E00                       		bgt.s	locret_11898
00013C9A 6100 BC90                  		bsr.w	ObjectFall
00013C9E                            
00013C9E                            locret_11898:
00013C9E 4E75                       		rts	
00013CA0                            ; ===========================================================================
00013CA0                            
00013CA0                            loc_1189A:
00013CA0 6100 BC8A                  		bsr.w	ObjectFall
00013CA4 2268 003C                  		movea.l	see_parent(a0),a1
00013CA8 45F9 0000 0000             		lea	(See_Speeds).l,a2
00013CAE 7000                       		moveq	#0,d0
00013CB0 1029 001A                  		move.b	obFrame(a1),d0
00013CB4 3228 0008                  		move.w	obX(a0),d1
00013CB8 9268 0030                  		sub.w	see_origX(a0),d1
00013CBC 6400                       		bcc.s	loc_118BA
00013CBE 5440                       		addq.w	#2,d0
00013CC0                            
00013CC0                            loc_118BA:
00013CC0 D040                       		add.w	d0,d0
00013CC2 3228 0034                  		move.w	see_origY(a0),d1
00013CC6 D272 0000                  		add.w	(a2,d0.w),d1
00013CCA B268 000C                  		cmp.w	obY(a0),d1
00013CCE 6E00                       		bgt.s	locret_11938
00013CD0 2268 003C                  		movea.l	see_parent(a0),a1
00013CD4 7202                       		moveq	#2,d1
00013CD6 4A68 0010                  		tst.w	obVelX(a0)
00013CDA 6B00                       		bmi.s	See_Spring
00013CDC 7200                       		moveq	#0,d1
00013CDE                            
00013CDE                            See_Spring:
00013CDE 1341 003A                  		move.b	d1,$3A(a1)
00013CE2 1141 003A                  		move.b	d1,see_frame(a0)
00013CE6 B229 001A                  		cmp.b	obFrame(a1),d1
00013CEA 6700                       		beq.s	loc_1192C
00013CEC 08A9 0003 0022             		bclr	#3,obStatus(a1)
00013CF2 6700                       		beq.s	loc_1192C
00013CF4 4229 0025                  		clr.b	ob2ndRout(a1)
00013CF8 137C 0002 0024             		move.b	#2,obRoutine(a1)
00013CFE 45F8 D000                  		lea	(v_player).w,a2
00013D02 3568 0012 0012             		move.w	obVelY(a0),obVelY(a2)
00013D08 446A 0012                  		neg.w	obVelY(a2)
00013D0C 08EA 0001 0022             		bset	#1,obStatus(a2)
00013D12 08AA 0003 0022             		bclr	#3,obStatus(a2)
00013D18 422A 003C                  		clr.b	$3C(a2)
00013D1C 157C 0000 001C             		move.b	#id_Spring,obAnim(a2) ; change Sonic's animation to "spring" ($10)
00013D22 157C 0002 0024             		move.b	#2,obRoutine(a2)
00013D32                            
00013D32                            loc_1192C:
00013D32 4268 0010                  		clr.w	obVelX(a0)
00013D36 4268 0012                  		clr.w	obVelY(a0)
00013D3A 5528 0024                  		subq.b	#2,obRoutine(a0)
00013D3E                            
00013D3E                            locret_11938:
00013D3E 4E75                       		rts	
00013D40                            ; ===========================================================================
00013D40 FFF8 FFE4 FFD1 FFE4 FFF8   See_Speeds:	dc.w -8, -$1C, -$2F, -$1C, -8
00013D4A                            
00013D4A                            See_DataSlope:	incbin	"misc\slzssaw1.bin"
00013D7A                            		even
00013D7A                            See_DataFlat:	incbin	"misc\slzssaw2.bin"
00013DAA                            		even
00013DAA                            		even
00013DAA                            Map_Seesaw:	include	"_maps\Seesaw.asm"
00013DAA                            ; ---------------------------------------------------------------------------
00013DAA                            ; Sprite mappings - seesaws (SLZ)
00013DAA                            ; ---------------------------------------------------------------------------
00013DAA                            Map_Seesaw_internal:
00013DAA 0000                       		dc.w @sloping-Map_Seesaw_internal
00013DAC 0000                       		dc.w @flat-Map_Seesaw_internal
00013DAE 0000                       		dc.w @sloping-Map_Seesaw_internal
00013DB0 0000                       		dc.w @flat-Map_Seesaw_internal
00013DB2 07                         @sloping:	dc.b 7
00013DB3 D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
00013DB8 DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
00013DBD E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
00013DC2 EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
00013DC7 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
00013DCC F406 0006 13               		dc.b $F4, 6, 0,	6, $13
00013DD1 FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
00013DD6 04                         @flat:		dc.b 4
00013DD7 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
00013DDC E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
00013DE1 E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
00013DE6 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
00013DEC 00                         		even
00013DEC 00                         		even
00013DEC                            Map_SSawBall:	include	"_maps\Seesaw Ball.asm"
00013DEC                            ; ---------------------------------------------------------------------------
00013DEC                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00013DEC                            ; ---------------------------------------------------------------------------
00013DEC                            Map_SSawBall_internal:
00013DEC 0000                       		dc.w @red-Map_SSawBall_internal
00013DEE 0000                       		dc.w @silver-Map_SSawBall_internal
00013DF0 01                         @red:		dc.b 1
00013DF1 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00013DF6 01                         @silver:	dc.b 1
00013DF7 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00013DFC                            		even
00013DFC                            		even
00013DFC                            		include	"_incObj\5F Bomb Enemy.asm"
00013DFC                            ; ---------------------------------------------------------------------------
00013DFC                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
00013DFC                            ; ---------------------------------------------------------------------------
00013DFC                            
00013DFC                            Bomb:
00013DFC 7000                       		moveq	#0,d0
00013DFE 1028 0024                  		move.b	obRoutine(a0),d0
00013E02 323B 0000                  		move.w	Bom_Index(pc,d0.w),d1
00013E06 4EFB 1000                  		jmp	Bom_Index(pc,d1.w)
00013E0A                            ; ===========================================================================
00013E0A 0000                       Bom_Index:	dc.w Bom_Main-Bom_Index
00013E0C 0000                       		dc.w Bom_Action-Bom_Index
00013E0E 0000                       		dc.w Bom_Display-Bom_Index
00013E10 0000                       		dc.w Bom_End-Bom_Index
00013E12                            
00013E12 =00000030                  bom_time:	equ $30		; time of fuse
00013E12 =00000034                  bom_origY:	equ $34		; original y-axis position
00013E12 =0000003C                  bom_parent:	equ $3C		; address of parent object
00013E12                            ; ===========================================================================
00013E12                            
00013E12                            Bom_Main:	; Routine 0
00013E12 5428 0024                  		addq.b	#2,obRoutine(a0)
00013E16 217C 0000 0000 0004        		move.l	#Map_Bomb,obMap(a0)
00013E1E 317C 0400 0002             		move.w	#$400,obGfx(a0)
00013E24 0028 0004 0001             		ori.b	#4,obRender(a0)
00013E2A 317C 0180 0018             		move.w	#$180,obPriority(a0)
00013E30 117C 000C 0014             		move.b	#$C,obActWid(a0)
00013E36 1028 0028                  		move.b	obSubtype(a0),d0
00013E3A 6700                       		beq.s	loc_11A3C
00013E3C 1140 0024                  		move.b	d0,obRoutine(a0)
00013E40 4E75                       		rts	
00013E42                            ; ===========================================================================
00013E42                            
00013E42                            loc_11A3C:
00013E42 117C 009A 0020             		move.b	#$9A,obColType(a0)
00013E48 0868 0000 0022             		bchg	#0,obStatus(a0)
00013E4E                            
00013E4E                            Bom_Action:	; Routine 2
00013E4E 7000                       		moveq	#0,d0
00013E50 1028 0025                  		move.b	ob2ndRout(a0),d0
00013E54 323B 0000                  		move.w	@index(pc,d0.w),d1
00013E58 4EBB 1000                  		jsr	@index(pc,d1.w)
00013E5C 43F9 0000 0000             		lea	(Ani_Bomb).l,a1
00013E62 6100 8BC0                  		bsr.w	AnimateSprite
00013E66 6000 DA86                  		bra.w	RememberState
00013E6A                            ; ===========================================================================
00013E6A 0000                       @index:		dc.w @walk-@index
00013E6C 0000                       		dc.w @wait-@index
00013E6E 0000                       		dc.w @explode-@index
00013E70                            ; ===========================================================================
00013E70                            
00013E70                            @walk:
00013E70 6100 0000                  		bsr.w	@chksonic
00013E74 5368 0030                  		subq.w	#1,bom_time(a0)	; subtract 1 from time delay
00013E78 6A00                       		bpl.s	@noflip		; if time remains, branch
00013E7A 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto @wait
00013E7E 317C 05FF 0030             		move.w	#1535,bom_time(a0) ; set time delay to 25 seconds
00013E84 317C 0010 0010             		move.w	#$10,obVelX(a0)
00013E8A 117C 0001 001C             		move.b	#1,obAnim(a0)	; use walking animation
00013E90 0868 0000 0022             		bchg	#0,obStatus(a0)
00013E96 6700                       		beq.s	@noflip
00013E98 4468 0010                  		neg.w	obVelX(a0)	; change direction
00013E9C                            
00013E9C                            	@noflip:
00013E9C 4E75                       		rts	
00013E9E                            ; ===========================================================================
00013E9E                            
00013E9E                            @wait:
00013E9E 6100 0000                  		bsr.w	@chksonic
00013EA2 5368 0030                  		subq.w	#1,bom_time(a0)	; subtract 1 from time delay
00013EA6 6B00                       		bmi.s	@stopwalking	; if time expires, branch
00013EA8 6100 BABA                  		bsr.w	SpeedToPos
00013EAC 4E75                       		rts	
00013EAE                            ; ===========================================================================
00013EAE                            
00013EAE                            	@stopwalking:
00013EAE 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00013EB2 317C 00B3 0030             		move.w	#179,bom_time(a0) ; set time delay to 3 seconds
00013EB8 4268 0010                  		clr.w	obVelX(a0)	; stop walking
00013EBC 117C 0000 001C             		move.b	#0,obAnim(a0)	; use waiting animation
00013EC2 4E75                       		rts	
00013EC4                            ; ===========================================================================
00013EC4                            
00013EC4                            @explode:
00013EC4 5368 0030                  		subq.w	#1,bom_time(a0)	; subtract 1 from time delay
00013EC8 6A00                       		bpl.s	@noexplode	; if time remains, branch
00013ECA 10BC 003F                  		move.b	#id_ExplosionBomb,0(a0) ; change bomb into an explosion
00013ECE 117C 0000 0024             		move.b	#0,obRoutine(a0)
00013ED4                            
00013ED4                            	@noexplode:
00013ED4 4E75                       		rts	
00013ED6                            ; ===========================================================================
00013ED6                            
00013ED6                            @chksonic:
00013ED6 3038 D008                  		move.w	(v_player+obX).w,d0
00013EDA 9068 0008                  		sub.w	obX(a0),d0
00013EDE 6400                       		bcc.s	@isleft
00013EE0 4440                       		neg.w	d0
00013EE2                            
00013EE2                            	@isleft:
00013EE2 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels?
00013EE6 6400                       		bcc.s	@outofrange	; if not, branch
00013EE8 3038 D00C                  		move.w	(v_player+obY).w,d0
00013EEC 9068 000C                  		sub.w	obY(a0),d0
00013EF0 6400                       		bcc.s	@isabove
00013EF2 4440                       		neg.w	d0
00013EF4                            
00013EF4                            	@isabove:
00013EF4 0C40 0060                  		cmpi.w	#$60,d0
00013EF8 6400                       		bcc.s	@outofrange
00013EFA 4A78 FE08                  		tst.w	(v_debuguse).w
00013EFE 6600                       		bne.s	@outofrange
00013F00                            
00013F00 117C 0004 0025             		move.b	#4,ob2ndRout(a0)
00013F06 317C 008F 0030             		move.w	#143,bom_time(a0) ; set fuse time
00013F0C 4268 0010                  		clr.w	obVelX(a0)
00013F10 117C 0002 001C             		move.b	#2,obAnim(a0)	; use activated animation
00013F16 6100 BF02                  		bsr.w	FindNextFreeObj
00013F1A 6600                       		bne.s	@outofrange
00013F1C 12BC 005F                  		move.b	#id_Bomb,0(a1)	; load fuse object
00013F20 3368 0008 0008             		move.w	obX(a0),obX(a1)
00013F26 3368 000C 000C             		move.w	obY(a0),obY(a1)
00013F2C 3368 000C 0034             		move.w	obY(a0),bom_origY(a1)
00013F32 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00013F38 137C 0004 0028             		move.b	#4,obSubtype(a1)
00013F3E 137C 0003 001C             		move.b	#3,obAnim(a1)
00013F44 337C 0010 0012             		move.w	#$10,obVelY(a1)
00013F4A 0828 0001 0022             		btst	#1,obStatus(a0)	; is bomb upside-down?
00013F50 6700                       		beq.s	@normal		; if not, branch
00013F52 4469 0012                  		neg.w	obVelY(a1)	; reverse direction for fuse
00013F56                            
00013F56                            	@normal:
00013F56 337C 008F 0030             		move.w	#143,bom_time(a1) ; set fuse time
00013F5C 2348 003C                  		move.l	a0,bom_parent(a1)
00013F60                            
00013F60                            @outofrange:
00013F60 4E75                       		rts	
00013F62                            ; ===========================================================================
00013F62                            
00013F62                            Bom_Display:	; Routine 4
00013F62 6100                       		bsr.s	loc_11B70
00013F64 43F9 0000 0000             		lea	(Ani_Bomb).l,a1
00013F6A 6100 8AB8                  		bsr.w	AnimateSprite
00013F6E 6000 D97E                  		bra.w	RememberState
00013F72                            ; ===========================================================================
00013F72                            
00013F72                            loc_11B70:
00013F72 5368 0030                  		subq.w	#1,bom_time(a0)
00013F76 6B00                       		bmi.s	loc_11B7C
00013F78 6100 B9EA                  		bsr.w	SpeedToPos
00013F7C 4E75                       		rts	
00013F7E                            ; ===========================================================================
00013F7E                            
00013F7E                            loc_11B7C:
00013F7E 4268 0030                  		clr.w	bom_time(a0)
00013F82 4228 0024                  		clr.b	obRoutine(a0)
00013F86 3168 0034 000C             		move.w	bom_origY(a0),obY(a0)
00013F8C 7203                       		moveq	#3,d1
00013F8E 2248                       		movea.l	a0,a1
00013F90 45F9 0000 0000             		lea	(Bom_ShrSpeed).l,a2 ; load shrapnel speed data
00013F96 6000                       		bra.s	@makeshrapnel
00013F98                            ; ===========================================================================
00013F98                            
00013F98                            	@loop:
00013F98 6100 BE80                  		bsr.w	FindNextFreeObj
00013F9C 6600                       		bne.s	@fail
00013F9E                            
00013F9E                            @makeshrapnel:
00013F9E 12BC 005F                  		move.b	#id_Bomb,0(a1)	; load shrapnel	object
00013FA2 3368 0008 0008             		move.w	obX(a0),obX(a1)
00013FA8 3368 000C 000C             		move.w	obY(a0),obY(a1)
00013FAE 137C 0006 0028             		move.b	#6,obSubtype(a1)
00013FB4 137C 0004 001C             		move.b	#4,obAnim(a1)
00013FBA 335A 0010                  		move.w	(a2)+,obVelX(a1)
00013FBE 335A 0012                  		move.w	(a2)+,obVelY(a1)
00013FC2 137C 0098 0020             		move.b	#$98,obColType(a1)
00013FC8 08E9 0007 0001             		bset	#7,obRender(a1)
00013FCE                            
00013FCE                            	@fail:
00013FCE 51C9 FFC8                  		dbf	d1,@loop	; repeat 3 more	times
00013FD2                            
00013FD2 117C 0006 0024             		move.b	#6,obRoutine(a0)
00013FD8                            
00013FD8                            Bom_End:	; Routine 6
00013FD8 6100 B98A                  		bsr.w	SpeedToPos
00013FDC 0668 0018 0012             		addi.w	#$18,obVelY(a0)
00013FE2 43F9 0000 0000             		lea	(Ani_Bomb).l,a1
00013FE8 6100 8A3A                  		bsr.w	AnimateSprite
00013FEC 4A28 0001                  		tst.b	obRender(a0)
00013FF0 6A00 B9C6                  		bpl.w	DeleteObject
00013FF4 6000 B982                  		bra.w	DisplaySprite
00013FF8                            ; ===========================================================================
00013FF8 FE00 FD00 FF00 FE00 0200+  Bom_ShrSpeed:	dc.w -$200, -$300, -$100, -$200, $200, -$300, $100, -$200
00013FF8 FE00 FD00 FF00 FE00 0200+  Bom_ShrSpeed:	dc.w -$200, -$300, -$100, -$200, $200, -$300, $100, -$200
00014008                            		include	"_anim\Bomb Enemy.asm"
00014008                            ; ---------------------------------------------------------------------------
00014008                            ; Animation script - Bomb enemy
00014008                            ; ---------------------------------------------------------------------------
00014008 0000                       Ani_Bomb:	dc.w @stand-Ani_Bomb
0001400A 0000                       		dc.w @walk-Ani_Bomb
0001400C 0000                       		dc.w @activated-Ani_Bomb
0001400E 0000                       		dc.w @fuse-Ani_Bomb
00014010 0000                       		dc.w @shrapnel-Ani_Bomb
00014012 1301 00FF                  @stand:		dc.b $13, 1, 0,	afEnd
00014016 1305 0403 02FF             @walk:		dc.b $13, 5, 4,	3, 2, afEnd
0001401C 1307 06FF                  @activated:	dc.b $13, 7, 6,	afEnd
00014020 0308 09FF                  @fuse:		dc.b 3,	8, 9, afEnd
00014024 030A 0BFF                  @shrapnel:	dc.b 3,	$A, $B,	afEnd
00014028                            		even
00014028                            		even
00014028                            Map_Bomb:	include	"_maps\Bomb Enemy.asm"
00014028                            ; ---------------------------------------------------------------------------
00014028                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00014028                            ; ---------------------------------------------------------------------------
00014028                            Map_Bomb_internal:
00014028 0000                       		dc.w @stand1-Map_Bomb_internal
0001402A 0000                       		dc.w @stand2-Map_Bomb_internal
0001402C 0000                       		dc.w @walk1-Map_Bomb_internal
0001402E 0000                       		dc.w @walk2-Map_Bomb_internal
00014030 0000                       		dc.w @walk3-Map_Bomb_internal
00014032 0000                       		dc.w @walk4-Map_Bomb_internal
00014034 0000                       		dc.w @activate1-Map_Bomb_internal
00014036 0000                       		dc.w @activate2-Map_Bomb_internal
00014038 0000                       		dc.w @fuse1-Map_Bomb_internal
0001403A 0000                       		dc.w @fuse2-Map_Bomb_internal
0001403C 0000                       		dc.w @shrapnel1-Map_Bomb_internal
0001403E 0000                       		dc.w @shrapnel2-Map_Bomb_internal
00014040 03                         @stand1:	dc.b 3
00014041 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4	; bomb standing still
00014046 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001404B E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00014050 03                         @stand2:	dc.b 3
00014051 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00014056 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001405B E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00014060 03                         @walk1:		dc.b 3
00014061 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4	; bomb walking
00014066 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
0001406B E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00014070 03                         @walk2:		dc.b 3
00014071 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00014076 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
0001407B E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00014080 03                         @walk3:		dc.b 3
00014081 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00014086 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
0001408B E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00014090 03                         @walk4:		dc.b 3
00014091 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00014096 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
0001409B E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000140A0 02                         @activate1:	dc.b 2
000140A1 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4	; bomb during detonation countdown
000140A6 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000140AB 02                         @activate2:	dc.b 2
000140AC F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000140B1 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000140B6 01                         @fuse1:		dc.b 1
000140B7 E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC ; fuse	(just before it	explodes)
000140BC 01                         @fuse2:		dc.b 1
000140BD E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
000140C2 01                         @shrapnel1:	dc.b 1
000140C3 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC ; shrapnel (after it exploded)
000140C8 01                         @shrapnel2:	dc.b 1
000140C9 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
000140CE                            		even
000140CE                            		even
000140CE                            
000140CE                            		include	"_incObj\60 Orbinaut.asm"
000140CE                            ; ---------------------------------------------------------------------------
000140CE                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
000140CE                            ; ---------------------------------------------------------------------------
000140CE                            
000140CE                            Orbinaut:
000140CE 7000                       		moveq	#0,d0
000140D0 1028 0024                  		move.b	obRoutine(a0),d0
000140D4 323B 0000                  		move.w	Orb_Index(pc,d0.w),d1
000140D8 4EFB 1000                  		jmp	Orb_Index(pc,d1.w)
000140DC                            ; ===========================================================================
000140DC 0000                       Orb_Index:	dc.w Orb_Main-Orb_Index
000140DE 0000                       		dc.w Orb_ChkSonic-Orb_Index
000140E0 0000                       		dc.w Orb_Display-Orb_Index
000140E2 0000                       		dc.w Orb_MoveOrb-Orb_Index
000140E4 0000                       		dc.w Orb_ChkDel2-Orb_Index
000140E6                            
000140E6 =0000003C                  orb_parent:	equ $3C		; address of parent object
000140E6                            ; ===========================================================================
000140E6                            
000140E6                            Orb_Main:	; Routine 0
000140E6 217C 0000 0000 0004        		move.l	#Map_Orb,obMap(a0)
000140EE 317C 0429 0002             		move.w	#$429,obGfx(a0)	; SBZ specific code
000140F4 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
000140FA 6700                       		beq.s	@isscrap
000140FC 317C 2429 0002             		move.w	#$2429,obGfx(a0) ; SLZ specific code
00014102                            
00014102                            	@isscrap:
00014102 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00014108 6600                       		bne.s	@notlabyrinth
0001410A 317C 0467 0002             		move.w	#$467,obGfx(a0)	; LZ specific code
00014110                            
00014110                            	@notlabyrinth:
00014110 0028 0004 0001             		ori.b	#4,obRender(a0)
00014116 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001411C 117C 000B 0020             		move.b	#$B,obColType(a0)
00014122 117C 000C 0014             		move.b	#$C,obActWid(a0)
00014128 7400                       		moveq	#0,d2
0001412A 45E8 0037                  		lea	$37(a0),a2
0001412E 264A                       		movea.l	a2,a3
00014130 524A                       		addq.w	#1,a2
00014132 7203                       		moveq	#3,d1
00014134                            
00014134                            @makesatellites:
00014134 6100 BCE4                  		bsr.w	FindNextFreeObj
00014138 6600                       		bne.s	@fail
0001413A 5213                       		addq.b	#1,(a3)
0001413C 3A09                       		move.w	a1,d5
0001413E 0445 D000                  		subi.w	#$D000,d5
00014142 EC4D                       		lsr.w	#6,d5
00014144 0245 007F                  		andi.w	#$7F,d5
00014148 14C5                       		move.b	d5,(a2)+
0001414A 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
0001414C 137C 0006 0024             		move.b	#6,obRoutine(a1) ; use Orb_MoveOrb routine
00014152 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
00014158 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0001415E 0029 0004 0001             		ori.b	#4,obRender(a1)
00014164 337C 0200 0018             		move.w	#$200,obPriority(a1)
0001416A 137C 0008 0014             		move.b	#8,obActWid(a1)
00014170 137C 0003 001A             		move.b	#3,obFrame(a1)
00014176 137C 0098 0020             		move.b	#$98,obColType(a1)
0001417C 1342 0026                  		move.b	d2,obAngle(a1)
00014180 0602 0040                  		addi.b	#$40,d2
00014184 2348 003C                  		move.l	a0,orb_parent(a1)
00014188 51C9 FFAA                  		dbf	d1,@makesatellites ; repeat sequence 3 more times
0001418C                            
0001418C                            	@fail:
0001418C 7001                       		moveq	#1,d0
0001418E 0828 0000 0022             		btst	#0,obStatus(a0)	; is orbinaut facing left?
00014194 6700                       		beq.s	@noflip		; if not, branch
00014196 4440                       		neg.w	d0
00014198                            
00014198                            	@noflip:
00014198 1140 0036                  		move.b	d0,$36(a0)
0001419C 1168 0028 0024             		move.b	obSubtype(a0),obRoutine(a0) ; if type is 02, skip Orb_ChkSonic
000141A2 5428 0024                  		addq.b	#2,obRoutine(a0)
000141A6 317C FFC0 0010             		move.w	#-$40,obVelX(a0) ; move orbinaut to the left
000141AC 0828 0000 0022             		btst	#0,obStatus(a0)	; is orbinaut facing left??
000141B2 6700                       		beq.s	@noflip2	; if not, branch
000141B4 4468 0010                  		neg.w	obVelX(a0)	; move orbinaut	to the right
000141B8                            
000141B8                            	@noflip2:
000141B8 4E75                       		rts	
000141BA                            ; ===========================================================================
000141BA                            
000141BA                            Orb_ChkSonic:	; Routine 2
000141BA 3038 D008                  		move.w	(v_player+obX).w,d0
000141BE 9068 0008                  		sub.w	obX(a0),d0	; is Sonic to the right of the orbinaut?
000141C2 6400                       		bcc.s	@isright	; if yes, branch
000141C4 4440                       		neg.w	d0
000141C6                            
000141C6                            	@isright:
000141C6 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
000141CA 6400                       		bcc.s	@animate	; if not, branch
000141CC 3038 D00C                  		move.w	(v_player+obY).w,d0
000141D0 9068 000C                  		sub.w	obY(a0),d0	; is Sonic above the orbinaut?
000141D4 6400                       		bcc.s	@isabove	; if yes, branch
000141D6 4440                       		neg.w	d0
000141D8                            
000141D8                            	@isabove:
000141D8 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
000141DC 6400                       		bcc.s	@animate	; if not, branch
000141DE 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	on?
000141E2 6600                       		bne.s	@animate	; if yes, branch
000141E4 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "angry" animation
000141EA                            
000141EA                            @animate:
000141EA 43F9 0000 0000             		lea	(Ani_Orb).l,a1
000141F0 6100 8832                  		bsr.w	AnimateSprite
000141F4 6000 0000                  		bra.w	Orb_ChkDel
000141F8                            ; ===========================================================================
000141F8                            
000141F8                            Orb_Display:	; Routine 4
000141F8 6100 B76A                  		bsr.w	SpeedToPos
000141FC                            
000141FC                            Orb_ChkDel:
0001421A 6000 B75C                  		bra.w	DisplaySprite
0001421E                            
0001421E                            @chkgone:
0001421E 45F8 FC00                  		lea	(v_objstate).w,a2
00014222 7000                       		moveq	#0,d0
00014224 1028 0023                  		move.b	obRespawnNo(a0),d0
00014228 6700                       		beq.s	loc_11E34
0001422A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00014230                            
00014230                            loc_11E34:
00014230 45E8 0037                  		lea	$37(a0),a2
00014234 7400                       		moveq	#0,d2
00014236 141A                       		move.b	(a2)+,d2
00014238 5342                       		subq.w	#1,d2
0001423A 6500                       		bcs.s	Orb_Delete
0001423C                            
0001423C                            loc_11E40:
0001423C 7000                       		moveq	#0,d0
0001423E 101A                       		move.b	(a2)+,d0
00014240 ED48                       		lsl.w	#6,d0
00014242 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00014248 2240                       		movea.l	d0,a1
0001424A 6100 B76E                  		bsr.w	DeleteChild
0001424E 51CA FFEC                  		dbf	d2,loc_11E40
00014252                            
00014252                            Orb_Delete:
00014252 6000 B764                  		bra.w	DeleteObject
00014256                            ; ===========================================================================
00014256                            
00014256                            Orb_MoveOrb:	; Routine 6
00014256 2268 003C                  		movea.l	orb_parent(a0),a1
0001425A 0C11 0060                  		cmpi.b	#id_Orbinaut,0(a1) ; does parent object still exist?
0001425E 6600 B758                  		bne.w	DeleteObject	; if not, delete
00014262 0C29 0002 001A             		cmpi.b	#2,obFrame(a1)	; is orbinaut angry?
00014268 6600                       		bne.s	@circle		; if not, branch
0001426A 0C28 0040 0026             		cmpi.b	#$40,obAngle(a0) ; is spikeorb directly under the orbinaut?
00014270 6600                       		bne.s	@circle		; if not, branch
00014272 5428 0024                  		addq.b	#2,obRoutine(a0)
00014276 5329 0037                  		subq.b	#1,$37(a1)
0001427A 6600                       		bne.s	@fire
0001427C 5429 0024                  		addq.b	#2,obRoutine(a1)
00014280                            
00014280                            	@fire:
00014280 317C FE00 0010             		move.w	#-$200,obVelX(a0) ; move orb to the left (quickly)
00014286 0829 0000 0022             		btst	#0,obStatus(a1)
0001428C 6700                       		beq.s	@noflip
0001428E 4468 0010                  		neg.w	obVelX(a0)
00014292                            
00014292                            	@noflip:
00014292 6000 B6E4                  		bra.w	DisplaySprite
00014296                            ; ===========================================================================
00014296                            
00014296                            @circle:
00014296 1028 0026                  		move.b	obAngle(a0),d0
0001429A 4EB9 0000 3A32             		jsr	(CalcSine).l
000142A0 E841                       		asr.w	#4,d1
000142A2 D269 0008                  		add.w	obX(a1),d1
000142A6 3141 0008                  		move.w	d1,obX(a0)
000142AA E840                       		asr.w	#4,d0
000142AC D069 000C                  		add.w	obY(a1),d0
000142B0 3140 000C                  		move.w	d0,obY(a0)
000142B4 1029 0036                  		move.b	$36(a1),d0
000142B8 D128 0026                  		add.b	d0,obAngle(a0)
000142BC 6000 B6BA                  		bra.w	DisplaySprite
000142C0                            ; ===========================================================================
000142C0                            
000142C0                            Orb_ChkDel2:	; Routine 8
000142C0 6100 B6A2                  		bsr.w	SpeedToPos
000142C4 4A28 0001                  		tst.b	obRender(a0)
000142C8 6A00 B6EE                  		bpl.w	DeleteObject
000142CC 6000 B6AA                  		bra.w	DisplaySprite
000142CC 6000 B6AA                  		bra.w	DisplaySprite
000142D0                            		include	"_anim\Orbinaut.asm"
000142D0                            ; ---------------------------------------------------------------------------
000142D0                            ; Animation script - Orbinaut enemy
000142D0                            ; ---------------------------------------------------------------------------
000142D0 0000                       Ani_Orb:	dc.w @normal-Ani_Orb
000142D2 0000                       		dc.w @angers-Ani_Orb
000142D4 0F00 FF                    @normal:	dc.b $F, 0, afEnd
000142D8 00                         		even
000142D8 0F01 02FE 01               @angers:	dc.b $F, 1, 2, afBack, 1
000142DE 00                         		even
000142DE 00                         		even
000142DE                            Map_Orb:	include	"_maps\Orbinaut.asm"
000142DE                            ; ---------------------------------------------------------------------------
000142DE                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
000142DE                            ; ---------------------------------------------------------------------------
000142DE                            Map_Orb_internal:
000142DE 0000                       		dc.w @normal-Map_Orb_internal
000142E0 0000                       		dc.w @medium-Map_Orb_internal
000142E2 0000                       		dc.w @angry-Map_Orb_internal
000142E4 0000                       		dc.w @spikeball-Map_Orb_internal
000142E6 01                         @normal:	dc.b 1
000142E7 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000142EC 01                         @medium:	dc.b 1
000142ED F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
000142F2 01                         @angry:		dc.b 1
000142F3 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
000142F8 01                         @spikeball:	dc.b 1
000142F9 F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
000142FE                            		even
000142FE                            		even
000142FE                            
000142FE                            		include	"_incObj\16 Harpoon.asm"
000142FE                            ; ---------------------------------------------------------------------------
000142FE                            ; Object 16 - harpoon (LZ)
000142FE                            ; ---------------------------------------------------------------------------
000142FE                            
000142FE                            Harpoon:
000142FE 7000                       		moveq	#0,d0
00014300 1028 0024                  		move.b	obRoutine(a0),d0
00014304 323B 0000                  		move.w	Harp_Index(pc,d0.w),d1
00014308 4EFB 1000                  		jmp	Harp_Index(pc,d1.w)
0001430C                            ; ===========================================================================
0001430C 0000                       Harp_Index:	dc.w Harp_Main-Harp_Index
0001430E 0000                       		dc.w Harp_Move-Harp_Index
00014310 0000                       		dc.w Harp_Wait-Harp_Index
00014312                            
00014312 =00000030                  harp_time:	equ $30		; time between stabbing/retracting
00014312                            ; ===========================================================================
00014312                            
00014312                            Harp_Main:	; Routine 0
00014312 5428 0024                  		addq.b	#2,obRoutine(a0)
00014316 217C 0000 0000 0004        		move.l	#Map_Harp,obMap(a0)
0001431E 317C 03CC 0002             		move.w	#$3CC,obGfx(a0)
00014324 0028 0004 0001             		ori.b	#4,obRender(a0)
0001432A 317C 0200 0018             		move.w	#$200,obPriority(a0)
00014330 1168 0028 001C             		move.b	obSubtype(a0),obAnim(a0) ; get type (vert/horiz)
00014336 117C 0014 0014             		move.b	#$14,obActWid(a0)
0001433C 317C 003C 0030             		move.w	#60,harp_time(a0) ; set time to 1 second
00014342                            
00014342                            Harp_Move:	; Routine 2
00014342 43F9 0000 0000             		lea	(Ani_Harp).l,a1
00014348 6100 86DA                  		bsr.w	AnimateSprite
0001434C 7000                       		moveq	#0,d0
0001434E 1028 001A                  		move.b	obFrame(a0),d0	; get frame number
00014352 117B 0000 0020             		move.b	@types(pc,d0.w),obColType(a0) ; get collision type
00014358 6000 D594                  		bra.w	RememberState
0001435C                            
0001435C                            	@types:
0001435C 9B9C 9D9E 9FA0             		dc.b $9B, $9C, $9D, $9E, $9F, $A0
00014362                            		even
00014362                            
00014362                            Harp_Wait:	; Routine 4
00014362 5368 0030                  		subq.w	#1,harp_time(a0) ; decrement timer
00014366 6A00                       		bpl.s	@chkdel		; branch if time remains
00014368 317C 003C 0030             		move.w	#60,harp_time(a0) ; reset timer
0001436E 5528 0024                  		subq.b	#2,obRoutine(a0) ; run "Harp_Move" subroutine
00014372 0868 0000 001C             		bchg	#0,obAnim(a0)	; reverse animation
00014378                            
00014378                            	@chkdel:
00014378 6000 D574                  		bra.w	RememberState
00014378 6000 D574                  		bra.w	RememberState
0001437C                            		include	"_anim\Harpoon.asm"
0001437C                            ; ---------------------------------------------------------------------------
0001437C                            ; Animation script - harpoon (LZ)
0001437C                            ; ---------------------------------------------------------------------------
0001437C 0000                       Ani_Harp:	dc.w @h_extending-Ani_Harp
0001437E 0000                       		dc.w @h_retracting-Ani_Harp
00014380 0000                       		dc.w @v_extending-Ani_Harp
00014382 0000                       		dc.w @v_retracting-Ani_Harp
00014384 0301 02FC                  @h_extending:	dc.b 3,	1, 2, afRoutine
00014388 0301 00FC                  @h_retracting:	dc.b 3,	1, 0, afRoutine
0001438C 0304 05FC                  @v_extending:	dc.b 3,	4, 5, afRoutine
00014390 0304 03FC                  @v_retracting:	dc.b 3,	4, 3, afRoutine
00014394                            		even
00014394                            		even
00014394                            Map_Harp:	include	"_maps\Harpoon.asm"
00014394                            ; ---------------------------------------------------------------------------
00014394                            ; Sprite mappings - harpoon (LZ)
00014394                            ; ---------------------------------------------------------------------------
00014394                            Map_Harp_internal:
00014394 0000                       		dc.w @h_retracted-Map_Harp_internal
00014396 0000                       		dc.w @h_middle-Map_Harp_internal
00014398 0000                       		dc.w @h_extended-Map_Harp_internal
0001439A 0000                       		dc.w @v_retracted-Map_Harp_internal
0001439C 0000                       		dc.w @v_middle-Map_Harp_internal
0001439E 0000                       		dc.w @v_extended-Map_Harp_internal
000143A0 01                         @h_retracted:	dc.b 1
000143A1 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
000143A6 01                         @h_middle:	dc.b 1
000143A7 FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
000143AC 02                         @h_extended:	dc.b 2
000143AD FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
000143B2 FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
000143B7 01                         @v_retracted:	dc.b 1
000143B8 F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
000143BD 01                         @v_middle:	dc.b 1
000143BE E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
000143C3 02                         @v_extended:	dc.b 2
000143C4 D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
000143C9 F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
000143CE                            		even
000143CE                            		even
000143CE                            		include	"_incObj\61 LZ Blocks.asm"
000143CE                            ; ---------------------------------------------------------------------------
000143CE                            ; Object 61 - blocks (LZ)
000143CE                            ; ---------------------------------------------------------------------------
000143CE                            
000143CE                            LabyrinthBlock:
000143CE 7000                       		moveq	#0,d0
000143D0 1028 0024                  		move.b	obRoutine(a0),d0
000143D4 323B 0000                  		move.w	LBlk_Index(pc,d0.w),d1
000143D8 4EFB 1000                  		jmp	LBlk_Index(pc,d1.w)
000143DC                            ; ===========================================================================
000143DC 0000                       LBlk_Index:	dc.w LBlk_Main-LBlk_Index
000143DE 0000                       		dc.w LBlk_Action-LBlk_Index
000143E0                            
000143E0 1010                       LBlk_Var:	dc.b $10, $10		; width, height
000143E2 200C                       		dc.b $20, $C
000143E4 1010                       		dc.b $10, $10
000143E6 1010                       		dc.b $10, $10
000143E8                            
000143E8 =00000016                  lblk_height:	equ $16		; block height
000143E8 =00000034                  lblk_origX:	equ $34		; original x-axis position
000143E8 =00000030                  lblk_origY:	equ $30		; original y-axis position
000143E8 =00000036                  lblk_time:	equ $36		; time delay for block movement
000143E8 =00000038                  lblk_untouched:	equ $38		; flag block as untouched
000143E8                            ; ===========================================================================
000143E8                            
000143E8                            LBlk_Main:	; Routine 0
000143E8 5428 0024                  		addq.b	#2,obRoutine(a0)
000143EC 217C 0000 0000 0004        		move.l	#Map_LBlock,obMap(a0)
000143F4 317C 43E6 0002             		move.w	#$43E6,obGfx(a0)
000143FA 117C 0004 0001             		move.b	#4,obRender(a0)
00014400 317C 0180 0018             		move.w	#$180,obPriority(a0)
00014406 7000                       		moveq	#0,d0
00014408 1028 0028                  		move.b	obSubtype(a0),d0 ; get block type
0001440C E648                       		lsr.w	#3,d0		; read only the 1st digit
0001440E 0240 000E                  		andi.w	#$E,d0
00014412 45FB 00CC                  		lea	LBlk_Var(pc,d0.w),a2
00014416 115A 0014                  		move.b	(a2)+,obActWid(a0) ; set width
0001441A 1152 0016                  		move.b	(a2),lblk_height(a0) ; set height
0001441E E248                       		lsr.w	#1,d0
00014420 1140 001A                  		move.b	d0,obFrame(a0)
00014424 3168 0008 0034             		move.w	obX(a0),lblk_origX(a0)
0001442A 3168 000C 0030             		move.w	obY(a0),lblk_origY(a0)
00014430 1028 0028                  		move.b	obSubtype(a0),d0 ; get block type
00014434 0200 000F                  		andi.b	#$F,d0		; read only the 2nd digit
00014438 6700                       		beq.s	LBlk_Action	; branch if 0
0001443A 0C00 0007                  		cmpi.b	#7,d0
0001443E 6700                       		beq.s	LBlk_Action	; branch if 7
00014440 117C 0001 0038             		move.b	#1,lblk_untouched(a0)
00014446                            
00014446                            LBlk_Action:	; Routine 2
00014446 3F28 0008                  		move.w	obX(a0),-(sp)
0001444A 7000                       		moveq	#0,d0
0001444C 1028 0028                  		move.b	obSubtype(a0),d0
00014450 0240 000F                  		andi.w	#$F,d0
00014454 D040                       		add.w	d0,d0
00014456 323B 0000                  		move.w	@index(pc,d0.w),d1
0001445A 4EBB 1000                  		jsr	@index(pc,d1.w)
0001445E 381F                       		move.w	(sp)+,d4
00014460 4A28 0001                  		tst.b	obRender(a0)
00014464 6A00                       		bpl.s	@chkdel
00014466 7200                       		moveq	#0,d1
00014468 1228 0014                  		move.b	obActWid(a0),d1
0001446C 0641 000B                  		addi.w	#$B,d1
00014470 7400                       		moveq	#0,d2
00014472 1428 0016                  		move.b	lblk_height(a0),d2
00014476 3602                       		move.w	d2,d3
00014478 5243                       		addq.w	#1,d3
0001447A 6100 D90A                  		bsr.w	SolidObject
0001447E 1144 003F                  		move.b	d4,$3F(a0)
00014482 6100 0000                  		bsr.w	loc_12180
00014486                            
00014486                            @chkdel:
000144A4 6000 B4D2                  		bra.w	DisplaySprite
000144A8                            ; ===========================================================================
000144A8 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
000144AC 0000 0000                  		dc.w @type02-@index, @type03-@index
000144B0 0000 0000                  		dc.w @type04-@index, @type05-@index
000144B4 0000 0000                  		dc.w @type06-@index, @type07-@index
000144B8                            ; ===========================================================================
000144B8                            
000144B8                            @type00:
000144B8 4E75                       		rts	
000144BA                            ; ===========================================================================
000144BA                            
000144BA                            @type01:
000144BA                            @type03:
000144BA 4A68 0036                  		tst.w	lblk_time(a0)	; does time remain?
000144BE 6600                       		bne.s	@wait01		; if yes, branch
000144C0 0828 0003 0022             		btst	#3,obStatus(a0)	; is Sonic standing on the object?
000144C6 6700                       		beq.s	@donothing01	; if not, branch
000144C8 317C 001E 0036             		move.w	#30,lblk_time(a0) ; wait for half second
000144CE                            
000144CE                            	@donothing01:
000144CE 4E75                       		rts	
000144D0                            ; ===========================================================================
000144D0                            
000144D0                            	@wait01:
000144D0 5368 0036                  		subq.w	#1,lblk_time(a0); decrement waiting time
000144D4 66F8                       		bne.s	@donothing01	; if time remains, branch
000144D6 5228 0028                  		addq.b	#1,obSubtype(a0) ; goto @type02 or @type04
000144DA 4228 0038                  		clr.b	lblk_untouched(a0) ; flag block as touched
000144DE 4E75                       		rts	
000144E0                            ; ===========================================================================
000144E0                            
000144E0                            @type02:
000144E0                            @type06:
000144E0 6100 B482                  		bsr.w	SpeedToPos
000144E4 5068 0012                  		addq.w	#8,obVelY(a0)	; make block fall
000144E8 6100 0000                  		bsr.w	ObjFloorDist
000144EC 4A41                       		tst.w	d1		; has block hit the floor?
000144EE 6A00 0000                  		bpl.w	@nofloor02	; if not, branch
000144F2 5241                       		addq.w	#1,d1
000144F4 D368 000C                  		add.w	d1,obY(a0)
000144F8 4268 0012                  		clr.w	obVelY(a0)	; stop when it touches the floor
000144FC 4228 0028                  		clr.b	obSubtype(a0)	; set type to 00 (non-moving type)
00014500                            
00014500                            	@nofloor02:
00014500 4E75                       		rts	
00014502                            ; ===========================================================================
00014502                            
00014502                            @type04:
00014502 6100 B460                  		bsr.w	SpeedToPos
00014506 5168 0012                  		subq.w	#8,obVelY(a0)	; make block rise
0001450A 6100 0000                  		bsr.w	ObjHitCeiling
0001450E 4A41                       		tst.w	d1		; has block hit the ceiling?
00014510 6A00 0000                  		bpl.w	@noceiling04	; if not, branch
00014514 9368 000C                  		sub.w	d1,obY(a0)
00014518 4268 0012                  		clr.w	obVelY(a0)	; stop when it touches the ceiling
0001451C 4228 0028                  		clr.b	obSubtype(a0)	; set type to 00 (non-moving type)
00014520                            
00014520                            	@noceiling04:
00014520 4E75                       		rts	
00014522                            ; ===========================================================================
00014522                            
00014522                            @type05:
00014522 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	block?
00014528 6600                       		bne.s	@notouch05	; if not, branch
0001452A 5228 0028                  		addq.b	#1,obSubtype(a0) ; goto @type06
0001452E 4228 0038                  		clr.b	lblk_untouched(a0)
00014532                            
00014532                            	@notouch05:
00014532 4E75                       		rts	
00014534                            ; ===========================================================================
00014534                            
00014534                            @type07:
00014534 3038 F646                  		move.w	(v_waterpos1).w,d0
00014538 9068 000C                  		sub.w	obY(a0),d0	; is block level with water?
0001453C 6700                       		beq.s	@stop07		; if yes, branch
0001453E 6400                       		bcc.s	@fall07		; branch if block is above water
00014540 0C40 FFFE                  		cmpi.w	#-2,d0
00014544 6C00                       		bge.s	@loc_1214E
00014546 70FE                       		moveq	#-2,d0
00014548                            
00014548                            	@loc_1214E:
00014548 D168 000C                  		add.w	d0,obY(a0)	; make the block rise with water level
0001454C 6100 0000                  		bsr.w	ObjHitCeiling
00014550 4A41                       		tst.w	d1		; has block hit the ceiling?
00014552 6A00 0000                  		bpl.w	@noceiling07	; if not, branch
00014556 9368 000C                  		sub.w	d1,obY(a0)	; stop block
0001455A                            
0001455A                            	@noceiling07:
0001455A 4E75                       		rts	
0001455C                            ; ===========================================================================
0001455C                            
0001455C                            @fall07:
0001455C 0C40 0002                  		cmpi.w	#2,d0
00014560 6F00                       		ble.s	@loc_1216A
00014562 7002                       		moveq	#2,d0
00014564                            
00014564                            	@loc_1216A:
00014564 D168 000C                  		add.w	d0,obY(a0)	; make the block sink with water level
00014568 6100 0000                  		bsr.w	ObjFloorDist
0001456C 4A41                       		tst.w	d1
0001456E 6A00 0000                  		bpl.w	@stop07
00014572 5241                       		addq.w	#1,d1
00014574 D368 000C                  		add.w	d1,obY(a0)
00014578                            
00014578                            	@stop07:
00014578 4E75                       		rts	
0001457A                            ; ===========================================================================
0001457A                            
0001457A                            loc_12180:
0001457A 4A28 0038                  		tst.b	lblk_untouched(a0) ; has block been stood on or touched?
0001457E 6700                       		beq.s	locret_121C0	; if yes, branch
00014580 0828 0003 0022             		btst	#3,obStatus(a0)	; is Sonic standing on it now?
00014586 6600                       		bne.s	loc_1219A	; if yes, branch
00014588 4A28 003E                  		tst.b	$3E(a0)
0001458C 6700                       		beq.s	locret_121C0
0001458E 5928 003E                  		subq.b	#4,$3E(a0)
00014592 6000                       		bra.s	loc_121A6
00014594                            ; ===========================================================================
00014594                            
00014594                            loc_1219A:
00014594 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
0001459A 6700                       		beq.s	locret_121C0
0001459C 5828 003E                  		addq.b	#4,$3E(a0)
000145A0                            
000145A0                            loc_121A6:
000145A0 1028 003E                  		move.b	$3E(a0),d0
000145A4 4EB9 0000 3A32             		jsr	(CalcSine).l
000145AA 323C 0400                  		move.w	#$400,d1
000145AE C1C1                       		muls.w	d1,d0
000145B0 4840                       		swap	d0
000145B2 D068 0030                  		add.w	lblk_origY(a0),d0
000145B6 3140 000C                  		move.w	d0,obY(a0)
000145BA                            
000145BA                            locret_121C0:
000145BA 4E75                       		rts	
000145BA 4E75                       		rts	
000145BC                            Map_LBlock:	include	"_maps\LZ Blocks.asm"
000145BC                            Map_6865:
000145BC 0000                       Map_6865_0: 	dc.w Map_6865_8-Map_6865
000145BE 0000                       Map_6865_2: 	dc.w Map_6865_E-Map_6865
000145C0 0000                       Map_6865_4: 	dc.w Map_6865_19-Map_6865
000145C2 0000                       Map_6865_6: 	dc.w Map_6865_1F-Map_6865
000145C4 01                         Map_6865_8: 	dc.b $1
000145C5 F00F 2000 F0               	dc.b $F0, $F, $20, $0, $F0
000145CA 02                         Map_6865_E: 	dc.b $2
000145CB F40E 0069 E0               	dc.b $F4, $E, $0, $69, $E0
000145D0 F40E 0075 00               	dc.b $F4, $E, $0, $75, $0
000145D5 01                         Map_6865_19: 	dc.b $1
000145D6 F00F 011A F0               	dc.b $F0, $F, $1, $1A, $F0
000145DB 01                         Map_6865_1F: 	dc.b $1
000145DC F00F FDFA F0               	dc.b $F0, $F, $FD, $FA, $F0
000145E2 00                         	even
000145E2 00                         	even
000145E2                            		include	"_incObj\62 Gargoyle.asm"
000145E2                            ; ---------------------------------------------------------------------------
000145E2                            ; Object 62 - gargoyle head (LZ)
000145E2                            ; ---------------------------------------------------------------------------
000145E2                            
000145E2                            Gargoyle:
000145E2 7000                       		moveq	#0,d0
000145E4 1028 0024                  		move.b	obRoutine(a0),d0
000145E8 323B 0000                  		move.w	Gar_Index(pc,d0.w),d1
000145EC 4EBB 1000                  		jsr	Gar_Index(pc,d1.w)
000145F0 6000 D2FC                  		bra.w	RememberState
000145F4                            ; ===========================================================================
000145F4 0000                       Gar_Index:	dc.w Gar_Main-Gar_Index
000145F6 0000                       		dc.w Gar_MakeFire-Gar_Index
000145F8 0000                       		dc.w Gar_FireBall-Gar_Index
000145FA 0000                       		dc.w Gar_AniFire-Gar_Index
000145FC                            
000145FC 1E3C 5A78 96B4 D2F0        Gar_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
00014604                            ; ===========================================================================
00014604                            
00014604                            Gar_Main:	; Routine 0
00014604 5428 0024                  		addq.b	#2,obRoutine(a0)
00014608 217C 0000 0000 0004        		move.l	#Map_Gar,obMap(a0)
00014610 317C 42E9 0002             		move.w	#$42E9,obGfx(a0)
00014616 0028 0004 0001             		ori.b	#4,obRender(a0)
0001461C 317C 0180 0018             		move.w	#$180,obPriority(a0)
00014622 117C 0010 0014             		move.b	#$10,obActWid(a0)
00014628 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
0001462C 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00014630 117B 00CA 001F             		move.b	Gar_SpitRate(pc,d0.w),obDelayAni(a0) ; set fireball spit rate
00014636 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
0001463C 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
00014642                            
00014642                            Gar_MakeFire:	; Routine 2
00014642 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; decrement timer
00014646 6600                       		bne.s	@nofire		; if time remains, branch
00014648                            
00014648 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0) ; reset timer
0001464E 6100 B5A8                  		bsr.w	ChkObjectVisible
00014652 6600                       		bne.s	@nofire
00014654 6100 B7AE                  		bsr.w	FindFreeObj
00014658 6600                       		bne.s	@nofire
0001465A 12BC 0062                  		move.b	#id_Gargoyle,0(a1) ; load fireball object
0001465E 5829 0024                  		addq.b	#4,obRoutine(a1) ; use Gar_FireBall routine
00014662 3368 0008 0008             		move.w	obX(a0),obX(a1)
00014668 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001466E 1368 0001 0001             		move.b	obRender(a0),obRender(a1)
00014674 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
0001467A                            
0001467A                            	@nofire:
0001467A 4E75                       		rts	
0001467C                            ; ===========================================================================
0001467C                            
0001467C                            Gar_FireBall:	; Routine 4
0001467C 5428 0024                  		addq.b	#2,obRoutine(a0)
00014680 117C 0008 0016             		move.b	#8,obHeight(a0)
00014686 117C 0008 0017             		move.b	#8,obWidth(a0)
0001468C 217C 0000 0000 0004        		move.l	#Map_Gar,obMap(a0)
00014694 317C 02E9 0002             		move.w	#$2E9,obGfx(a0)
0001469A 0028 0004 0001             		ori.b	#4,obRender(a0)
000146A0 317C 0200 0018             		move.w	#$200,obPriority(a0)
000146A6 117C 0098 0020             		move.b	#$98,obColType(a0)
000146AC 117C 0008 0014             		move.b	#8,obActWid(a0)
000146B2 117C 0002 001A             		move.b	#2,obFrame(a0)
000146B8 5068 000C                  		addq.w	#8,obY(a0)
000146BC 317C 0200 0010             		move.w	#$200,obVelX(a0)
000146C2 0828 0000 0022             		btst	#0,obStatus(a0)	; is gargoyle facing left?
000146C8 6600                       		bne.s	@noflip		; if not, branch
000146CA 4468 0010                  		neg.w	obVelX(a0)
000146CE                            
000146CE                            	@noflip:
000146D8                            
000146D8                            Gar_AniFire:	; Routine 6
000146D8 1038 FE05                  		move.b	(v_framebyte).w,d0
000146DC 0200 0007                  		andi.b	#7,d0
000146E0 6600                       		bne.s	@nochg
000146E2 0868 0000 001A             		bchg	#0,obFrame(a0)	; change every 8 frames
000146E8                            
000146E8                            	@nochg:
000146E8 6100 B27A                  		bsr.w	SpeedToPos
000146EC 0828 0000 0022             		btst	#0,obStatus(a0) ; is fireball moving left?
000146F2 6600                       		bne.s	@isright	; if not, branch
000146F4 76F8                       		moveq	#-8,d3
000146F6 6100 0000                  		bsr.w	ObjHitWallLeft
000146FA 4A41                       		tst.w	d1
000146FC 6B00 B2BA                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00014700 4E75                       		rts	
00014702                            
00014702                            	@isright:
00014702 7608                       		moveq	#8,d3
00014704 6100 0000                  		bsr.w	ObjHitWallRight
00014708 4A41                       		tst.w	d1
0001470A 6B00 B2AC                  		bmi.w	DeleteObject
0001470E 4E75                       		rts	
0001470E 4E75                       		rts	
00014710                            Map_Gar:	include	"_maps\Gargoyle.asm"
00014710                            ; ---------------------------------------------------------------------------
00014710                            ; Sprite mappings - gargoyle head (LZ)
00014710                            ; ---------------------------------------------------------------------------
00014710                            Map_Gar_internal:
00014710 0000                       		dc.w @head-Map_Gar_internal
00014712 0000                       		dc.w @head-Map_Gar_internal
00014714 0000                       		dc.w @fireball1-Map_Gar_internal
00014716 0000                       		dc.w @fireball2-Map_Gar_internal
00014718 03                         @head:		dc.b 3
00014719 F004 0000 00               		dc.b $F0, 4, 0,	0, 0
0001471E F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00014723 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
00014728 01                         @fireball1:	dc.b 1
00014729 FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
0001472E 01                         @fireball2:	dc.b 1
0001472F FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00014734                            		even
00014734                            		even
00014734                            		include	"_incObj\63 LZ Conveyor.asm"
00014734                            ; ---------------------------------------------------------------------------
00014734                            ; Object 63 - platforms	on a conveyor belt (LZ)
00014734                            ; ---------------------------------------------------------------------------
00014734                            
00014734                            LabyrinthConvey:
00014734 7000                       		moveq	#0,d0
00014736 1028 0024                  		move.b	obRoutine(a0),d0
0001473A 323B 0000                  		move.w	LCon_Index(pc,d0.w),d1
0001473E 4EBB 1000                  		jsr	LCon_Index(pc,d1.w)
0001475E                            
0001475E                            LCon_Display:
0001475E 6000 B218                  		bra.w	DisplaySprite
00014762                            ; ===========================================================================
00014762                            
00014762                            loc_1236A:
00014762 0C38 0002 FE11             		cmpi.b	#2,(v_act).w
00014768 6600                       		bne.s	loc_12378
0001476A 0C40 FF80                  		cmpi.w	#-$80,d0
0001476E 64EE                       		bcc.s	LCon_Display
00014770                            
00014770                            loc_12378:
00014770 1028 002F                  		move.b	$2F(a0),d0
00014774 6A00 B242                  		bpl.w	DeleteObject
00014778 0240 007F                  		andi.w	#$7F,d0
0001477C 45F8 F7C1                  		lea	(v_obj63).w,a2
00014780 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00014786 6000 B230                  		bra.w	DeleteObject
0001478A                            ; ===========================================================================
0001478A 0000                       LCon_Index:	dc.w LCon_Main-LCon_Index
0001478C 0000                       		dc.w loc_124B2-LCon_Index
0001478E 0000                       		dc.w loc_124C2-LCon_Index
00014790 0000                       		dc.w loc_124DE-LCon_Index
00014792                            ; ===========================================================================
00014792                            
00014792                            LCon_Main:	; Routine 0
00014792 1028 0028                  		move.b	obSubtype(a0),d0
00014796 6B00 0000                  		bmi.w	loc_12460
0001479A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001479E 217C 0000 0000 0004        		move.l	#Map_LConv,obMap(a0)
000147A6 317C 43F6 0002             		move.w	#$43F6,obGfx(a0)
000147AC 0028 0004 0001             		ori.b	#4,obRender(a0)
000147B2 117C 0010 0014             		move.b	#$10,obActWid(a0)
000147B8 317C 0200 0018             		move.w	#$200,obPriority(a0)
000147BE 0C28 007F 0028             		cmpi.b	#$7F,obSubtype(a0)
000147C4 6600                       		bne.s	loc_123E2
000147C6 5828 0024                  		addq.b	#4,obRoutine(a0)
000147CA 317C 03F6 0002             		move.w	#$3F6,obGfx(a0)
000147D0 317C 0080 0018             		move.w	#$80,obPriority(a0)
000147D6 6000 0000                  		bra.w	loc_124DE
000147DA                            ; ===========================================================================
000147DA                            
000147DA                            loc_123E2:
000147DA 117C 0004 001A             		move.b	#4,obFrame(a0)
000147E0 7000                       		moveq	#0,d0
000147E2 1028 0028                  		move.b	obSubtype(a0),d0
000147E6 3200                       		move.w	d0,d1
000147E8 E648                       		lsr.w	#3,d0
000147EA 0240 001E                  		andi.w	#$1E,d0
000147EE 45FA 0000                  		lea	LCon_Data(pc),a2
000147F2 D4F2 0000                  		adda.w	(a2,d0.w),a2
000147F6 315A 0038                  		move.w	(a2)+,$38(a0)
000147FA 315A 0030                  		move.w	(a2)+,$30(a0)
000147FE 214A 003C                  		move.l	a2,$3C(a0)
00014802 0241 000F                  		andi.w	#$F,d1
00014806 E549                       		lsl.w	#2,d1
00014808 1141 0038                  		move.b	d1,$38(a0)
0001480C 117C 0004 003A             		move.b	#4,$3A(a0)
00014812 4A38 F7C0                  		tst.b	(f_conveyrev).w
00014816 6700                       		beq.s	loc_1244C
00014818 117C 0001 003B             		move.b	#1,$3B(a0)
0001481E 4428 003A                  		neg.b	$3A(a0)
00014822 7200                       		moveq	#0,d1
00014824 1228 0038                  		move.b	$38(a0),d1
00014828 D228 003A                  		add.b	$3A(a0),d1
0001482C B228 0039                  		cmp.b	$39(a0),d1
00014830 6500                       		bcs.s	loc_12448
00014832 1001                       		move.b	d1,d0
00014834 7200                       		moveq	#0,d1
00014836 4A00                       		tst.b	d0
00014838 6A00                       		bpl.s	loc_12448
0001483A 1228 0039                  		move.b	$39(a0),d1
0001483E 5901                       		subq.b	#4,d1
00014840                            
00014840                            loc_12448:
00014840 1141 0038                  		move.b	d1,$38(a0)
00014844                            
00014844                            loc_1244C:
00014844 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
0001484A 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00014850 6100 0000                  		bsr.w	LCon_ChangeDir
00014854 6000 0000                  		bra.w	loc_124B2
00014858                            ; ===========================================================================
00014858                            
00014858                            loc_12460:
00014858 1140 002F                  		move.b	d0,$2F(a0)
0001485C 0240 007F                  		andi.w	#$7F,d0
00014860 45F8 F7C1                  		lea	(v_obj63).w,a2
00014864 08F2 0000 0000             		bset	#0,(a2,d0.w)
0001486A 6600 B14C                  		bne.w	DeleteObject
0001486E D040                       		add.w	d0,d0
00014870 0240 001E                  		andi.w	#$1E,d0
00014874 0640 0000                  		addi.w	#ObjPosLZPlatform_Index-ObjPos_Index,d0
00014878 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
0001487E D4F2 0000                  		adda.w	(a2,d0.w),a2
00014882 321A                       		move.w	(a2)+,d1
00014884 2248                       		movea.l	a0,a1
00014886 6000                       		bra.s	LCon_MakePtfms
00014888                            ; ===========================================================================
00014888                            
00014888                            LCon_Loop:
00014888 6100 B57A                  		bsr.w	FindFreeObj
0001488C 6600                       		bne.s	loc_124AA
0001488E                            
0001488E                            LCon_MakePtfms:
0001488E 12BC 0063                  		move.b	#id_LabyrinthConvey,0(a1)
00014892 335A 0008                  		move.w	(a2)+,obX(a1)
00014896 335A 000C                  		move.w	(a2)+,obY(a1)
0001489A 301A                       		move.w	(a2)+,d0
0001489C 1340 0028                  		move.b	d0,obSubtype(a1)
000148A0                            
000148A0                            loc_124AA:
000148A0 51C9 FFE6                  		dbf	d1,LCon_Loop
000148A4                            
000148A4 588F                       		addq.l	#4,sp
000148A6 4E75                       		rts	
000148A8                            ; ===========================================================================
000148A8                            
000148A8                            loc_124B2:	; Routine 2
000148A8 7200                       		moveq	#0,d1
000148AA 1228 0014                  		move.b	obActWid(a0),d1
000148AE 4EB9 0000 9086             		jsr	(PlatformObject).l
000148B4 6000 0000                  		bra.w	sub_12502
000148B8                            ; ===========================================================================
000148B8                            
000148B8                            loc_124C2:	; Routine 4
000148B8 7200                       		moveq	#0,d1
000148BA 1228 0014                  		move.b	obActWid(a0),d1
000148BE 4EB9 0000 91FA             		jsr	(ExitPlatform).l
000148C4 3F28 0008                  		move.w	obX(a0),-(sp)
000148C8 6100 0000                  		bsr.w	sub_12502
000148CC 341F                       		move.w	(sp)+,d2
000148CE 4EF9 0000 9764             		jmp	(MvSonicOnPtfm2).l
000148D4                            ; ===========================================================================
000148D4                            
000148D4                            loc_124DE:	; Routine 6
000148D4 3038 FE04                  		move.w	(v_framecount).w,d0
000148D8 0240 0003                  		andi.w	#3,d0
000148DC 6600                       		bne.s	loc_124FC
000148DE 7201                       		moveq	#1,d1
000148E0 4A38 F7C0                  		tst.b	(f_conveyrev).w
000148E4 6700                       		beq.s	loc_124F2
000148E6 4401                       		neg.b	d1
000148E8                            
000148E8                            loc_124F2:
000148E8 D328 001A                  		add.b	d1,obFrame(a0)
000148EC 0228 0003 001A             		andi.b	#3,obFrame(a0)
000148F2                            
000148F2                            loc_124FC:
000148F2 588F                       		addq.l	#4,sp
000148F4 6000 CFF8                  		bra.w	RememberState
000148F8                            
000148F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000148F8                            
000148F8                            
000148F8                            sub_12502:
000148F8 4A38 F7EE                  		tst.b	(f_switch+$E).w
000148FC 6700                       		beq.s	loc_12520
000148FE 4A28 003B                  		tst.b	$3B(a0)
00014902 6600                       		bne.s	loc_12520
00014904 117C 0001 003B             		move.b	#1,$3B(a0)
0001490A 11FC 0001 F7C0             		move.b	#1,(f_conveyrev).w
00014910 4428 003A                  		neg.b	$3A(a0)
00014914 6000                       		bra.s	loc_12534
00014916                            ; ===========================================================================
00014916                            
00014916                            loc_12520:
00014916 3028 0008                  		move.w	obX(a0),d0
0001491A B068 0034                  		cmp.w	$34(a0),d0
0001491E 6600                       		bne.s	loc_1256A
00014920 3028 000C                  		move.w	obY(a0),d0
00014924 B068 0036                  		cmp.w	$36(a0),d0
00014928 6600                       		bne.s	loc_1256A
0001492A                            
0001492A                            loc_12534:
0001492A 7200                       		moveq	#0,d1
0001492C 1228 0038                  		move.b	$38(a0),d1
00014930 D228 003A                  		add.b	$3A(a0),d1
00014934 B228 0039                  		cmp.b	$39(a0),d1
00014938 6500                       		bcs.s	loc_12552
0001493A 1001                       		move.b	d1,d0
0001493C 7200                       		moveq	#0,d1
0001493E 4A00                       		tst.b	d0
00014940 6A00                       		bpl.s	loc_12552
00014942 1228 0039                  		move.b	$39(a0),d1
00014946 5901                       		subq.b	#4,d1
00014948                            
00014948                            loc_12552:
00014948 1141 0038                  		move.b	d1,$38(a0)
0001494C 2268 003C                  		movea.l	$3C(a0),a1
00014950 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00014956 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
0001495C 6100 0000                  		bsr.w	LCon_ChangeDir
00014960                            
00014960                            loc_1256A:
00014960 6100 B002                  		bsr.w	SpeedToPos
00014964 4E75                       		rts	
00014966                            ; End of function sub_12502
00014966                            
00014966                            
00014966                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014966                            
00014966                            
00014966                            LCon_ChangeDir:
00014966 7000                       		moveq	#0,d0
00014968 343C FF00                  		move.w	#-$100,d2
0001496C 3028 0008                  		move.w	obX(a0),d0
00014970 9068 0034                  		sub.w	$34(a0),d0
00014974 6400                       		bcc.s	loc_12584
00014976 4440                       		neg.w	d0
00014978 4442                       		neg.w	d2
0001497A                            
0001497A                            loc_12584:
0001497A 7200                       		moveq	#0,d1
0001497C 363C FF00                  		move.w	#-$100,d3
00014980 3228 000C                  		move.w	obY(a0),d1
00014984 9268 0036                  		sub.w	$36(a0),d1
00014988 6400                       		bcc.s	loc_12598
0001498A 4441                       		neg.w	d1
0001498C 4443                       		neg.w	d3
0001498E                            
0001498E                            loc_12598:
0001498E B240                       		cmp.w	d0,d1
00014990 6500                       		bcs.s	loc_125C2
00014992 3028 0008                  		move.w	obX(a0),d0
00014996 9068 0034                  		sub.w	$34(a0),d0
0001499A 6700                       		beq.s	loc_125AE
0001499C 48C0                       		ext.l	d0
0001499E E180                       		asl.l	#8,d0
000149A0 81C1                       		divs.w	d1,d0
000149A2 4440                       		neg.w	d0
000149A4                            
000149A4                            loc_125AE:
000149A4 3140 0010                  		move.w	d0,obVelX(a0)
000149A8 3143 0012                  		move.w	d3,obVelY(a0)
000149AC 4840                       		swap	d0
000149AE 3140 000A                  		move.w	d0,obX+2(a0)
000149B2 4268 000E                  		clr.w	obY+2(a0)
000149B6 4E75                       		rts	
000149B8                            ; ===========================================================================
000149B8                            
000149B8                            loc_125C2:
000149B8 3228 000C                  		move.w	obY(a0),d1
000149BC 9268 0036                  		sub.w	$36(a0),d1
000149C0 6700                       		beq.s	loc_125D4
000149C2 48C1                       		ext.l	d1
000149C4 E181                       		asl.l	#8,d1
000149C6 83C0                       		divs.w	d0,d1
000149C8 4441                       		neg.w	d1
000149CA                            
000149CA                            loc_125D4:
000149CA 3141 0012                  		move.w	d1,obVelY(a0)
000149CE 3142 0010                  		move.w	d2,obVelX(a0)
000149D2 4841                       		swap	d1
000149D4 3141 000E                  		move.w	d1,obY+2(a0)
000149D8 4268 000A                  		clr.w	obX+2(a0)
000149DC 4E75                       		rts	
000149DE                            ; End of function LCon_ChangeDir
000149DE                            
000149DE                            ; ===========================================================================
000149DE 0000                       LCon_Data:	dc.w word_125F4-LCon_Data
000149E0 0000                       		dc.w word_12610-LCon_Data
000149E2 0000                       		dc.w word_12628-LCon_Data
000149E4 0000                       		dc.w word_1263C-LCon_Data
000149E6 0000                       		dc.w word_12650-LCon_Data
000149E8 0000                       		dc.w word_12668-LCon_Data
000149EA 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
000149FA 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00014A06 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00014A16 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00014A1E 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00014A32 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00014A46 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
00014A5E 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00014A5E 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00014A72                            Map_LConv:	include	"_maps\LZ Conveyor.asm"
00014A72                            ; ---------------------------------------------------------------------------
00014A72                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00014A72                            ; ---------------------------------------------------------------------------
00014A72                            Map_LConv_internal:
00014A72 0000                       		dc.w @wheel1-Map_LConv_internal
00014A74 0000                       		dc.w @wheel2-Map_LConv_internal
00014A76 0000                       		dc.w @wheel3-Map_LConv_internal
00014A78 0000                       		dc.w @wheel4-Map_LConv_internal
00014A7A 0000                       		dc.w @platform-Map_LConv_internal
00014A7C 01                         @wheel1:	dc.b 1
00014A7D F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00014A82 01                         @wheel2:	dc.b 1
00014A83 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00014A88 01                         @wheel3:	dc.b 1
00014A89 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00014A8E 01                         @wheel4:	dc.b 1
00014A8F F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
00014A94 01                         @platform:	dc.b 1
00014A95 F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
00014A9A                            		even
00014A9A                            		even
00014A9A                            		include	"_incObj\64 Bubbles.asm"
00014A9A                            ; ---------------------------------------------------------------------------
00014A9A                            ; Object 64 - bubbles (LZ)
00014A9A                            ; ---------------------------------------------------------------------------
00014A9A                            
00014A9A                            Bubble:
00014A9A 7000                       		moveq	#0,d0
00014A9C 1028 0024                  		move.b	obRoutine(a0),d0
00014AA0 323B 0000                  		move.w	Bub_Index(pc,d0.w),d1
00014AA4 4EFB 1000                  		jmp	Bub_Index(pc,d1.w)
00014AA8                            ; ===========================================================================
00014AA8 0000                       Bub_Index:	dc.w Bub_Main-Bub_Index
00014AAA 0000                       		dc.w Bub_Animate-Bub_Index
00014AAC 0000                       		dc.w Bub_ChkWater-Bub_Index
00014AAE 0000                       		dc.w Bub_Display-Bub_Index
00014AB0 0000                       		dc.w Bub_Delete-Bub_Index
00014AB2 0000                       		dc.w Bub_BblMaker-Bub_Index
00014AB4                            
00014AB4 =0000002E                  bub_inhalable:	equ $2E		; flag set when bubble is collectable
00014AB4 =00000030                  bub_origX:	equ $30		; original x-axis position
00014AB4 =00000032                  bub_time:	equ $32		; time until next bubble spawn
00014AB4 =00000033                  bub_freq:	equ $33		; frequency of bubble spawn
00014AB4                            ; ===========================================================================
00014AB4                            
00014AB4                            Bub_Main:	; Routine 0
00014AB4 5428 0024                  		addq.b	#2,obRoutine(a0)
00014AB8 217C 0000 0000 0004        		move.l	#Map_Bub,obMap(a0)
00014AC0 317C 8348 0002             		move.w	#$8348,obGfx(a0)
00014AC6 117C 0084 0001             		move.b	#$84,obRender(a0)
00014ACC 117C 0010 0014             		move.b	#$10,obActWid(a0)
00014AD2 317C 0080 0018             		move.w	#$80,obPriority(a0)
00014AD8 1028 0028                  		move.b	obSubtype(a0),d0 ; get bubble type
00014ADC 6A00                       		bpl.s	@bubble		; if type is $0-$7F, branch
00014ADE                            
00014ADE 5028 0024                  		addq.b	#8,obRoutine(a0) ; goto Bub_BblMaker next
00014AE2 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
00014AE6 1140 0032                  		move.b	d0,bub_time(a0)
00014AEA 1140 0033                  		move.b	d0,bub_freq(a0)	; set bubble frequency
00014AEE 117C 0006 001C             		move.b	#6,obAnim(a0)
00014AF4 6000 0000                  		bra.w	Bub_BblMaker
00014AF8                            ; ===========================================================================
00014AF8                            
00014AF8                            @bubble:
00014AF8 1140 001C                  		move.b	d0,obAnim(a0)
00014AFC 3168 0008 0030             		move.w	obX(a0),bub_origX(a0)
00014B02 317C FF78 0012             		move.w	#-$88,obVelY(a0) ; float bubble upwards
00014B08 4EB9 0000 3A0C             		jsr	(RandomNumber).l
00014B0E 1140 0026                  		move.b	d0,obAngle(a0)
00014B12                            
00014B12                            Bub_Animate:	; Routine 2
00014B12 43F9 0000 0000             		lea	(Ani_Bub).l,a1
00014B18 4EB9 0000 CA24             		jsr	(AnimateSprite).l
00014B1E 0C28 0006 001A             		cmpi.b	#6,obFrame(a0)	; is bubble full-size?
00014B24 6600                       		bne.s	Bub_ChkWater	; if not, branch
00014B26                            
00014B26 117C 0001 002E             		move.b	#1,bub_inhalable(a0) ; set "inhalable" flag
00014B2C                            
00014B2C                            Bub_ChkWater:	; Routine 4
00014B2C 3038 F646                  		move.w	(v_waterpos1).w,d0
00014B30 B068 000C                  		cmp.w	obY(a0),d0	; is bubble underwater?
00014B34 6500                       		bcs.s	@wobble		; if yes, branch
00014B36                            
00014B36                            @burst:
00014B36 117C 0006 0024             		move.b	#6,obRoutine(a0) ; goto Bub_Display next
00014B3C 5628 001C                  		addq.b	#3,obAnim(a0)	; run "bursting" animation
00014B40 6000 0000                  		bra.w	Bub_Display
00014B44                            ; ===========================================================================
00014B44                            
00014B44                            @wobble:
00014B44 1028 0026                  		move.b	obAngle(a0),d0
00014B48 5228 0026                  		addq.b	#1,obAngle(a0)
00014B4C 0240 007F                  		andi.w	#$7F,d0
00014B50 43F9 0000 0000             		lea	(Drown_WobbleData).l,a1
00014B56 1031 0000                  		move.b	(a1,d0.w),d0
00014B5A 4880                       		ext.w	d0
00014B5C D068 0030                  		add.w	bub_origX(a0),d0
00014B60 3140 0008                  		move.w	d0,obX(a0)	; change bubble's x-axis position
00014B64 4A28 002E                  		tst.b	bub_inhalable(a0)
00014B68 6700                       		beq.s	@display
00014B6A 6100 0000                  		bsr.w	Bub_ChkSonic	; has Sonic touched the	bubble?
00014B6E 6700                       		beq.s	@display	; if not, branch
00014B70                            
00014B70 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
00014B7E 43F8 D000                  		lea	(v_player).w,a1
00014B82 4269 0010                  		clr.w	obVelX(a1)
00014B86 4269 0012                  		clr.w	obVelY(a1)
00014B8A 4269 0020                  		clr.w	obInertia(a1)	; stop Sonic
00014B8E 137C 0000 001C             		move.b	#id_GetAir,obAnim(a1) ; use bubble-collecting animation
00014B94 337C 0023 003E             		move.w	#$23,$3E(a1)
00014B9A 137C 0000 003C             		move.b	#0,$3C(a1)
00014BA0 08A9 0005 0022             		bclr	#5,obStatus(a1)
00014BA6 08A9 0004 0022             		bclr	#4,obStatus(a1)
00014BAC 0829 0002 0022             		btst	#2,obStatus(a1)
00014BB2 6700 FF82                  		beq.w	@burst
00014BB6 08A9 0002 0022             		bclr	#2,obStatus(a1)
00014BBC 137C 0013 0016             		move.b	#$13,obHeight(a1)
00014BC2 137C 0009 0017             		move.b	#9,obWidth(a1)
00014BC8 5B69 000C                  		subq.w	#5,obY(a1)
00014BCC 6000 FF68                  		bra.w	@burst
00014BD0                            ; ===========================================================================
00014BD0                            
00014BD0                            @display:
00014BD0 6100 AD92                  		bsr.w	SpeedToPos
00014BD4 4A28 0001                  		tst.b	obRender(a0)
00014BD8 6A00                       		bpl.s	@delete
00014BDA 4EF9 0000 F978             		jmp	(DisplaySprite).l
00014BE0                            
00014BE0                            	@delete:
00014BE0 4EF9 0000 F9B8             		jmp	(DeleteObject).l
00014BE6                            ; ===========================================================================
00014BE6                            
00014BE6                            Bub_Display:	; Routine 6
00014BE6 43F9 0000 0000             		lea	(Ani_Bub).l,a1
00014BEC 4EB9 0000 CA24             		jsr	(AnimateSprite).l
00014BF2 4A28 0001                  		tst.b	obRender(a0)
00014BF6 6A00                       		bpl.s	@delete
00014BF8 4EF9 0000 F978             		jmp	(DisplaySprite).l
00014BFE                            
00014BFE                            	@delete:
00014BFE 4EF9 0000 F9B8             		jmp	(DeleteObject).l
00014C04                            ; ===========================================================================
00014C04                            
00014C04                            Bub_Delete:	; Routine 8
00014C04 6000 ADB2                  		bra.w	DeleteObject
00014C08                            ; ===========================================================================
00014C08                            
00014C08                            Bub_BblMaker:	; Routine $A
00014C08 4A68 0036                  		tst.w	$36(a0)
00014C0C 6600                       		bne.s	@loc_12874
00014C0E 3038 F646                  		move.w	(v_waterpos1).w,d0
00014C12 B068 000C                  		cmp.w	obY(a0),d0	; is bubble maker underwater?
00014C16 6400 0000                  		bcc.w	@chkdel		; if not, branch
00014C1A 4A28 0001                  		tst.b	obRender(a0)
00014C1E 6A00 0000                  		bpl.w	@chkdel
00014C22 5368 0038                  		subq.w	#1,$38(a0)
00014C26 6A00 0000                  		bpl.w	@loc_12914
00014C2A 317C 0001 0036             		move.w	#1,$36(a0)
00014C30                            
00014C30                            	@tryagain:
00014C30 4EB9 0000 3A0C             		jsr	(RandomNumber).l
00014C36 3200                       		move.w	d0,d1
00014C38 0240 0007                  		andi.w	#7,d0
00014C3C 0C40 0006                  		cmpi.w	#6,d0		; random number over 6?
00014C40 64EE                       		bcc.s	@tryagain	; if yes, branch
00014C42                            
00014C42 1140 0034                  		move.b	d0,$34(a0)
00014C46 0241 000C                  		andi.w	#$C,d1
00014C4A 43F9 0000 0000             		lea	(Bub_BblTypes).l,a1
00014C50 D2C1                       		adda.w	d1,a1
00014C52 2149 003C                  		move.l	a1,$3C(a0)
00014C56 5328 0032                  		subq.b	#1,bub_time(a0)
00014C5A 6A00                       		bpl.s	@loc_12872
00014C5C 1168 0033 0032             		move.b	bub_freq(a0),bub_time(a0)
00014C62 08E8 0007 0036             		bset	#7,$36(a0)
00014C68                            
00014C68                            @loc_12872:
00014C68 6000                       		bra.s	@loc_1287C
00014C6A                            ; ===========================================================================
00014C6A                            
00014C6A                            @loc_12874:
00014C6A 5368 0038                  		subq.w	#1,$38(a0)
00014C6E 6A00 0000                  		bpl.w	@loc_12914
00014C72                            
00014C72                            @loc_1287C:
00014C72 4EB9 0000 3A0C             		jsr	(RandomNumber).l
00014C78 0240 001F                  		andi.w	#$1F,d0
00014C7C 3140 0038                  		move.w	d0,$38(a0)
00014C80 6100 B182                  		bsr.w	FindFreeObj
00014C84 6600                       		bne.s	@fail
00014C86 12BC 0064                  		move.b	#id_Bubble,0(a1) ; load bubble object
00014C8A 3368 0008 0008             		move.w	obX(a0),obX(a1)
00014C90 4EB9 0000 3A0C             		jsr	(RandomNumber).l
00014C96 0240 000F                  		andi.w	#$F,d0
00014C9A 5140                       		subq.w	#8,d0
00014C9C D169 0008                  		add.w	d0,obX(a1)
00014CA0 3368 000C 000C             		move.w	obY(a0),obY(a1)
00014CA6 7000                       		moveq	#0,d0
00014CA8 1028 0034                  		move.b	$34(a0),d0
00014CAC 2468 003C                  		movea.l	$3C(a0),a2
00014CB0 1372 0000 0028             		move.b	(a2,d0.w),obSubtype(a1)
00014CB6 0828 0007 0036             		btst	#7,$36(a0)
00014CBC 6700                       		beq.s	@fail
00014CBE 4EB9 0000 3A0C             		jsr	(RandomNumber).l
00014CC4 0240 0003                  		andi.w	#3,d0
00014CC8 6600                       		bne.s	@loc_buh
00014CCA 08E8 0006 0036             		bset	#6,$36(a0)
00014CD0 6600                       		bne.s	@fail
00014CD2 137C 0002 0028             		move.b	#2,obSubtype(a1)
00014CD8                            
00014CD8                            @loc_buh:
00014CD8 4A28 0034                  		tst.b	$34(a0)
00014CDC 6600                       		bne.s	@fail
00014CDE 08E8 0006 0036             		bset	#6,$36(a0)
00014CE4 6600                       		bne.s	@fail
00014CE6 137C 0002 0028             		move.b	#2,obSubtype(a1)
00014CEC                            
00014CEC                            	@fail:
00014CEC 5328 0034                  		subq.b	#1,$34(a0)
00014CF0 6A00                       		bpl.s	@loc_12914
00014CF2 4EB9 0000 3A0C             		jsr	(RandomNumber).l
00014CF8 0240 007F                  		andi.w	#$7F,d0
00014CFC 0640 0080                  		addi.w	#$80,d0
00014D00 D168 0038                  		add.w	d0,$38(a0)
00014D04 4268 0036                  		clr.w	$36(a0)
00014D08                            
00014D08                            @loc_12914:
00014D08 43F9 0000 0000             		lea	(Ani_Bub).l,a1
00014D0E 4EB9 0000 CA24             		jsr	(AnimateSprite).l
00014D14                            
00014D14                            @chkdel:
00014D32 3038 F646                  		move.w	(v_waterpos1).w,d0
00014D36 B068 000C                  		cmp.w	obY(a0),d0
00014D3A 6500 AC3C                  		bcs.w	DisplaySprite
00014D3E 4E75                       		rts	
00014D40                            ; ===========================================================================
00014D40                            ; bubble production sequence
00014D40                            
00014D40                            ; 0 = small bubble, 1 =	large bubble
00014D40                            
00014D40 0001 0000 0000 0100 0000+  Bub_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
00014D52                            
00014D52                            ; ===========================================================================
00014D52                            
00014D52                            Bub_ChkSonic:
00014D52 4A38 F7C8                  		tst.b	(f_lockmulti).w
00014D56 6B00                       		bmi.s	@loc_12998
00014D58 43F8 D000                  		lea	(v_player).w,a1
00014D5C 3029 0008                  		move.w	obX(a1),d0
00014D60 3228 0008                  		move.w	obX(a0),d1
00014D64 0441 0010                  		subi.w	#$10,d1
00014D68 B240                       		cmp.w	d0,d1
00014D6A 6400                       		bcc.s	@loc_12998
00014D6C 0641 0020                  		addi.w	#$20,d1
00014D70 B240                       		cmp.w	d0,d1
00014D72 6500                       		bcs.s	@loc_12998
00014D74 3029 000C                  		move.w	obY(a1),d0
00014D78 3228 000C                  		move.w	obY(a0),d1
00014D7C B240                       		cmp.w	d0,d1
00014D7E 6400                       		bcc.s	@loc_12998
00014D80 0641 0010                  		addi.w	#$10,d1
00014D84 B240                       		cmp.w	d0,d1
00014D86 6500                       		bcs.s	@loc_12998
00014D88 7001                       		moveq	#1,d0
00014D8A 4E75                       		rts	
00014D8C                            ; ===========================================================================
00014D8C                            
00014D8C                            @loc_12998:
00014D8C 7000                       		moveq	#0,d0
00014D8E 4E75                       		rts	
00014D8E 4E75                       		rts	
00014D90                            		include	"_anim\Bubbles.asm"
00014D90                            ; ---------------------------------------------------------------------------
00014D90                            ; Animation script - bubbles (LZ)
00014D90                            ; ---------------------------------------------------------------------------
00014D90 0000                       Ani_Bub:	dc.w @small-Ani_Bub
00014D92 0000                       		dc.w @medium-Ani_Bub
00014D94 0000                       		dc.w @large-Ani_Bub
00014D96 0000                       		dc.w @incroutine-Ani_Bub
00014D98 0000                       		dc.w @incroutine-Ani_Bub
00014D9A 0000                       		dc.w @burst-Ani_Bub
00014D9C 0000                       		dc.w @bubmaker-Ani_Bub
00014D9E 0D00 0102 FC               @small:		dc.b $D, 0, 1, 2, afRoutine ; small bubble forming
00014DA4 00                         		even
00014DA4 0D01 0203 04FC             @medium:	dc.b $D, 1, 2, 3, 4, afRoutine ; medium bubble forming
00014DAA 0D02 0304 0506 FC          @large:		dc.b $D, 2, 3, 4, 5, 6,	afRoutine ; full size bubble forming
00014DB2 00                         		even
00014DB2 04FC                       @incroutine:	dc.b 4,	afRoutine	; increment routine counter (no animation)
00014DB4 0406 0708 FC               @burst:		dc.b 4,	6, 7, 8, afRoutine ; large bubble bursts
00014DBA 00                         		even
00014DBA 0E13 1415 FF               @bubmaker:	dc.b $E, $13, $14, $15,	afEnd ; bubble maker on the floor
00014DC0 00                         		even
00014DC0 00                         		even
00014DC0                            Map_Bub:	include	"_maps\Bubbles.asm"
00014DC0                            ; ---------------------------------------------------------------------------
00014DC0                            ; Sprite mappings - bubbles (LZ)
00014DC0                            ; ---------------------------------------------------------------------------
00014DC0                            Map_Bub_internal:
00014DC0 0000                       		dc.w @bubble1-Map_Bub_internal
00014DC2 0000                       		dc.w @bubble2-Map_Bub_internal
00014DC4 0000                       		dc.w @bubble3-Map_Bub_internal
00014DC6 0000                       		dc.w @bubble4-Map_Bub_internal
00014DC8 0000                       		dc.w @bubble5-Map_Bub_internal
00014DCA 0000                       		dc.w @bubble6-Map_Bub_internal
00014DCC 0000                       		dc.w @bubblefull-Map_Bub_internal
00014DCE 0000                       		dc.w @burst1-Map_Bub_internal
00014DD0 0000                       		dc.w @burst2-Map_Bub_internal
00014DD2 0000                       		dc.w @zero_sm-Map_Bub_internal
00014DD4 0000                       		dc.w @five_sm-Map_Bub_internal
00014DD6 0000                       		dc.w @three_sm-Map_Bub_internal
00014DD8 0000                       		dc.w @one_sm-Map_Bub_internal
00014DDA 0000                       		dc.w @zero-Map_Bub_internal
00014DDC 0000                       		dc.w @five-Map_Bub_internal
00014DDE 0000                       		dc.w @four-Map_Bub_internal
00014DE0 0000                       		dc.w @three-Map_Bub_internal
00014DE2 0000                       		dc.w @two-Map_Bub_internal
00014DE4 0000                       		dc.w @one-Map_Bub_internal
00014DE6 0000                       		dc.w @bubmaker1-Map_Bub_internal
00014DE8 0000                       		dc.w @bubmaker2-Map_Bub_internal
00014DEA 0000                       		dc.w @bubmaker3-Map_Bub_internal
00014DEC 0000                       		dc.w @blank-Map_Bub_internal
00014DEE 01                         @bubble1:	dc.b 1
00014DEF FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC	; bubbles, increasing in size
00014DF4 01                         @bubble2:	dc.b 1
00014DF5 FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
00014DFA 01                         @bubble3:	dc.b 1
00014DFB FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
00014E00 01                         @bubble4:	dc.b 1
00014E01 F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
00014E06 01                         @bubble5:	dc.b 1
00014E07 F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
00014E0C 01                         @bubble6:	dc.b 1
00014E0D F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
00014E12 01                         @bubblefull:	dc.b 1
00014E13 F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
00014E18 04                         @burst1:	dc.b 4
00014E19 F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0 ; large bubble bursting
00014E1E F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
00014E23 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
00014E28 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
00014E2D 04                         @burst2:	dc.b 4
00014E2E F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00014E33 F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
00014E38 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
00014E3D 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00014E42 01                         @zero_sm:	dc.b 1
00014E43 F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8 ; small, partially-formed countdown numbers
00014E48 01                         @five_sm:	dc.b 1
00014E49 F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
00014E4E 01                         @three_sm:	dc.b 1
00014E4F F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
00014E54 01                         @one_sm:	dc.b 1
00014E55 F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
00014E5A 01                         @zero:		dc.b 1
00014E5B F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8 ; fully-formed countdown numbers
00014E60 01                         @five:		dc.b 1
00014E61 F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
00014E66 01                         @four:		dc.b 1
00014E67 F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
00014E6C 01                         @three:		dc.b 1
00014E6D F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
00014E72 01                         @two:		dc.b 1
00014E73 F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
00014E78 01                         @one:		dc.b 1
00014E79 F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
00014E7E 01                         @bubmaker1:	dc.b 1
00014E7F F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
00014E84 01                         @bubmaker2:	dc.b 1
00014E85 F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
00014E8A 01                         @bubmaker3:	dc.b 1
00014E8B F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
00014E90 00                         @blank:		dc.b 0
00014E92 00                         		even
00014E92 00                         		even
00014E92                            		include	"_incObj\65 Waterfalls.asm"
00014E92                            ; ---------------------------------------------------------------------------
00014E92                            ; Object 65 - waterfalls (LZ)
00014E92                            ; ---------------------------------------------------------------------------
00014E92                            
00014E92                            Waterfall:
00014E92 7000                       		moveq	#0,d0
00014E94 1028 0024                  		move.b	obRoutine(a0),d0
00014E98 323B 0000                  		move.w	WFall_Index(pc,d0.w),d1
00014E9C 4EFB 1000                  		jmp	WFall_Index(pc,d1.w)
00014EA0                            ; ===========================================================================
00014EA0 0000                       WFall_Index:	dc.w WFall_Main-WFall_Index
00014EA2 0000                       		dc.w WFall_Animate-WFall_Index
00014EA4 0000                       		dc.w WFall_ChkDel-WFall_Index
00014EA6 0000                       		dc.w WFall_OnWater-WFall_Index
00014EA8 0000                       		dc.w loc_12B36-WFall_Index
00014EAA                            ; ===========================================================================
00014EAA                            
00014EAA                            WFall_Main:	; Routine 0
00014EAA 5828 0024                  		addq.b	#4,obRoutine(a0)
00014EAE 217C 0000 0000 0004        		move.l	#Map_WFall,obMap(a0)
00014EB6 317C 4259 0002             		move.w	#$4259,obGfx(a0)
00014EBC 0028 0004 0001             		ori.b	#4,obRender(a0)
00014EC2 117C 0018 0014             		move.b	#$18,obActWid(a0)
00014EC8 317C 0080 0018             		move.w	#$80,obPriority(a0)
00014ECE 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00014ED2 6A00                       		bpl.s	@under80	; branch if $00-$7F
00014ED4 08E8 0007 0002             		bset	#7,obGfx(a0)
00014EDA                            
00014EDA                            	@under80:
00014EDA 0200 000F                  		andi.b	#$F,d0		; read only the	2nd digit
00014EDE 1140 001A                  		move.b	d0,obFrame(a0)	; set frame number
00014EE2 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
00014EE6 6600                       		bne.s	WFall_ChkDel	; if not, branch
00014EE8                            
00014EE8 4228 0018                  		clr.b	obPriority(a0)	; object is in front of Sonic
00014EEC 5528 0024                  		subq.b	#2,obRoutine(a0) ; goto WFall_Animate next
00014EF0 0828 0006 0028             		btst	#6,obSubtype(a0) ; is object type $49 ?
00014EF6 6700                       		beq.s	@not49		; if not, branch
00014EF8                            
00014EF8 117C 0006 0024             		move.b	#6,obRoutine(a0) ; goto WFall_OnWater next
00014EFE                            
00014EFE                            	@not49:
00014EFE 0828 0005 0028             		btst	#5,obSubtype(a0) ; is object type $A9 ?
00014F04 6700                       		beq.s	WFall_Animate	; if not, branch
00014F06 117C 0008 0024             		move.b	#8,obRoutine(a0) ; goto loc_12B36 next
00014F0C                            
00014F0C                            WFall_Animate:	; Routine 2
00014F0C 43F9 0000 0000             		lea	(Ani_WFall).l,a1
00014F12 4EB9 0000 CA24             		jsr	(AnimateSprite).l
00014F18                            
00014F18                            WFall_ChkDel:	; Routine 4
00014F18 6000 C9D4                  		bra.w	RememberState
00014F1C                            ; ===========================================================================
00014F1C                            
00014F1C                            WFall_OnWater:	; Routine 6
00014F1C 3038 F646                  		move.w	(v_waterpos1).w,d0
00014F20 0440 0010                  		subi.w	#$10,d0
00014F24 3140 000C                  		move.w	d0,obY(a0)	; match	object position	to water height
00014F28 60E2                       		bra.s	WFall_Animate
00014F2A                            ; ===========================================================================
00014F2A                            
00014F2A                            loc_12B36:	; Routine 8
00014F2A 08A8 0007 0002             		bclr	#7,obGfx(a0)
00014F30 0C38 0007 A506             		cmpi.b	#7,(v_lvllayout+$106).w
00014F36 6600                       		bne.s	@animate
00014F38 08E8 0007 0002             		bset	#7,obGfx(a0)
00014F3E                            
00014F3E                            	@animate:
00014F3E 60CC                       		bra.s	WFall_Animate
00014F3E 60CC                       		bra.s	WFall_Animate
00014F40                            		include	"_anim\Waterfalls.asm"
00014F40                            ; ---------------------------------------------------------------------------
00014F40                            ; Animation script - waterfall (LZ)
00014F40                            ; ---------------------------------------------------------------------------
00014F40 0000                       Ani_WFall:	dc.w @splash-Ani_WFall
00014F42 0509 0A0B FF               @splash:	dc.b 5,	9, $A, $B, afEnd
00014F48 00                         		even
00014F48 00                         		even
00014F48                            Map_WFall	include	"_maps\Waterfalls.asm"
00014F48                            ; ---------------------------------------------------------------------------
00014F48                            ; Sprite mappings - waterfalls (LZ)
00014F48                            ; ---------------------------------------------------------------------------
00014F48                            Map_WFall_internal:
00014F48 0000                       		dc.w @vertnarrow-Map_WFall_internal
00014F4A 0000                       		dc.w @cornerwide-Map_WFall_internal
00014F4C 0000                       		dc.w @cornermedium-Map_WFall_internal
00014F4E 0000                       		dc.w @cornernarrow-Map_WFall_internal
00014F50 0000                       		dc.w @cornermedium2-Map_WFall_internal
00014F52 0000                       		dc.w @cornernarrow2-Map_WFall_internal
00014F54 0000                       		dc.w @cornernarrow3-Map_WFall_internal
00014F56 0000                       		dc.w @vertwide-Map_WFall_internal
00014F58 0000                       		dc.w @diagonal-Map_WFall_internal
00014F5A 0000                       		dc.w @splash1-Map_WFall_internal
00014F5C 0000                       		dc.w @splash2-Map_WFall_internal
00014F5E 0000                       		dc.w @splash3-Map_WFall_internal
00014F60 01                         @vertnarrow:	dc.b 1
00014F61 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00014F66 02                         @cornerwide:	dc.b 2
00014F67 F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
00014F6C 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
00014F71 02                         @cornermedium:	dc.b 2
00014F72 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00014F77 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00014F7C 01                         @cornernarrow:	dc.b 1
00014F7D F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
00014F82 02                         @cornermedium2:	dc.b 2
00014F83 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00014F88 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00014F8D 01                         @cornernarrow2:	dc.b 1
00014F8E F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
00014F93 01                         @cornernarrow3:	dc.b 1
00014F94 F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
00014F99 01                         @vertwide:	dc.b 1
00014F9A F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
00014F9F 02                         @diagonal:	dc.b 2
00014FA0 F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
00014FA5 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
00014FAA 02                         @splash1:	dc.b 2
00014FAB F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
00014FB0 F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
00014FB5 02                         @splash2:	dc.b 2
00014FB6 F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
00014FBB F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
00014FC0 02                         @splash3:	dc.b 2
00014FC1 F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
00014FC6 F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
00014FCC 00                         		even
00014FCC 00                         		even
00014FCC                            
00014FCC                            
00014FCC                            SpinDash_dust:
00014FCC                            Sprite_1DD20:				; DATA XREF: ROM:0001600C?o
00014FCC 7000                       		moveq	#0,d0
00014FCE 1028 0024                  		move.b	$24(a0),d0
00014FD2 323B 0000                  		move	off_1DD2E(pc,d0.w),d1
00014FD6 4EFB 1000                  		jmp	off_1DD2E(pc,d1.w)
00014FDA                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014FDA 0000                       off_1DD2E:	dc loc_1DD36-off_1DD2E; 0 ; DATA XREF: h+6DBA?o h+6DBC?o ...
00014FDC 0000                       		dc loc_1DD90-off_1DD2E; 1
00014FDE 0000                       		dc loc_1DE46-off_1DD2E; 2
00014FE0 0000                       		dc loc_1DE4A-off_1DD2E; 3
00014FE2                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014FE2                            
00014FE2                            loc_1DD36:				; DATA XREF: h+6DBA?o
00014FE2 5428 0024                  		addq.b	#2,$24(a0)
00014FE6 217C 0000 0000 0004        		move.l	#MapUnc_1DF5E,4(a0)
00014FEE 0028 0004 0001             		or.b	#4,1(a0)
00014FF4 317C 0080 0018             		move.w	#$80,obPriority(a0)
00014FFA 117C 0010 0014             		move.b	#$10,obActWid(a0)
00015000 317C 07AC 0002             		move	#$7AC,2(a0)
00015006 317C D000 003E             		move	#-$3000,$3E(a0)
0001500C 317C F580 003C             		move	#$F580,$3C(a0)
00015012 B0FC D1C0                  		cmp	#-$2E40,a0
00015016 6700                       		beq.s	loc_1DD8C
00015018 117C 0001 0034             		move.b	#1,$34(a0)
0001501E                            ;		cmp	#2,($FFFFFF70).w
0001501E                            ;		beq.s	loc_1DD8C
0001501E                            ;		move	#$48C,2(a0)
0001501E                            ;		move	#-$4FC0,$3E(a0)
0001501E                            ;		move	#-$6E80,$3C(a0)
0001501E                            
0001501E                            loc_1DD8C:				; CODE XREF: h+6DF6?j h+6E04?j
0001501E                            ;		bsr.w	sub_16D6E
0001501E                            
0001501E                            loc_1DD90:				; DATA XREF: h+6DBA?o
0001501E 3468 003E                  		movea.w	$3E(a0),a2
00015022 7000                       		moveq	#0,d0
00015024 1028 001C                  		move.b	$1C(a0),d0
00015028 D040                       		add	d0,d0
0001502A 323B 0000                  		move	off_1DDA4(pc,d0.w),d1
0001502E 4EFB 1000                  		jmp	off_1DDA4(pc,d1.w)
00015032                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00015032 0000                       off_1DDA4:	dc loc_1DE28-off_1DDA4; 0 ; DATA XREF: h+6E30?o h+6E32?o ...
00015034 0000                       		dc loc_1DDAC-off_1DDA4; 1
00015036 0000                       		dc loc_1DDCC-off_1DDA4; 2
00015038 0000                       		dc loc_1DE20-off_1DDA4; 3
0001503A                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001503A                            
0001503A                            loc_1DDAC:				; DATA XREF: h+6E30?o
0001503A 3178 F646 000C             		move	($FFFFF646).w,$C(a0)
00015040 4A28 001D                  		tst.b	$1D(a0)
00015044 6600                       		bne.s	loc_1DE28
00015046 316A 0008 0008             		move	8(a2),8(a0)
0001504C 117C 0000 0022             		move.b	#0,$22(a0)
00015052 0268 7FFF 0002             		and	#$7FFF,2(a0)
00015058 6000                       		bra.s	loc_1DE28
0001505A                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001505A                            
0001505A                            loc_1DDCC:				; DATA XREF: h+6E30?o
0001505A                            ;		cmp.b	#$C,$28(a2)
0001505A                            ;		bcs.s	loc_1DE3E
0001505A 0C2A 0004 0024             		cmp.b	#4,$24(a2)
00015060 6400                       		bcc.s	loc_1DE3E
00015062 4A2A 0039                  		tst.b	$39(a2)
00015066 6700                       		beq.s	loc_1DE3E
00015068 316A 0008 0008             		move	8(a2),8(a0)
0001506E 316A 000C 000C             		move	$C(a2),$C(a0)
00015074 116A 0022 0022             		move.b	$22(a2),$22(a0)
0001507A 0228 0001 0022             		and.b	#1,$22(a0)
00015080 4A28 0034                  		tst.b	$34(a0)
00015084 6700                       		beq.s	loc_1DE06
00015086 5968 000C                  		sub	#4,$C(a0)
0001508A                            
0001508A                            loc_1DE06:				; CODE XREF: h+6E8A?j
0001508A 4A28 001D                  		tst.b	$1D(a0)
0001508E 6600                       		bne.s	loc_1DE28
00015090 0268 7FFF 0002             		and	#$7FFF,2(a0)
00015096 4A6A 0002                  		tst	2(a2)
0001509A 6A00                       		bpl.s	loc_1DE28
0001509C 0068 8000 0002             		or	#-$8000,2(a0)
000150A2                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000150A2                            
000150A2                            loc_1DE20:				; DATA XREF: h+6E30?o
000150A2                            loc_1DE28:				; CODE XREF: h+6E42?j h+6E56?j ...
000150A2 43F9 0000 0000             		lea	(off_1DF38).l,a1
000150A8 4EB9 0000 CA24             		jsr	AnimateSprite
000150AE 6100 0000                  		bsr.w	loc_1DEE4
000150B2 4EFA A8C4                  		jmp	DisplaySprite
000150B6                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000150B6                            
000150B6                            loc_1DE3E:				; CODE XREF: h+6E5E?j h+6E66?j ...
000150B6 117C 0000 001C             		move.b	#0,$1C(a0)
000150BC 4E75                       		rts	
000150BE                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000150BE                            
000150BE                            loc_1DE46:				; DATA XREF: h+6DBA?o
000150BE 6000 A8F8                  		bra.w	DeleteObject
000150C2                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000150C2                            
000150C2                            
000150C2                            
000150C2                            loc_1DE4A:
000150C2 3468 003E                  	movea.w	$3E(a0),a2
000150C6 7210                       	moveq	#$10,d1
000150C8 0C2A 000D 001C             	cmp.b	#$D,$1C(a2)
000150CE 6700                       	beq.s	loc_1DE64
000150D0 7206                       	moveq	#$6,d1
000150D2 0C2A 0003 0021             	cmp.b	#$3,$21(a2)
000150D8 6700                       	beq.s	loc_1DE64
000150DA 117C 0002 0024             	move.b	#2,$24(a0)
000150E0 117C 0000 0032             	move.b	#0,$32(a0)
000150E6 4E75                       	rts
000150E8                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000150E8                            
000150E8                            loc_1DE64:				; CODE XREF: h+6EE0?j
000150E8 5328 0032                  		subq.b	#1,$32(a0)
000150EC 6A00                       		bpl.s	loc_1DEE0
000150EE 117C 0003 0032             		move.b	#3,$32(a0)
000150F4 4EBA AD0E                  		jsr	FindFreeObj
000150F8 6600                       		bne.s	loc_1DEE0
000150FA 1290                       		move.b	0(a0),0(a1)
000150FC 336A 0008 0008             		move	8(a2),8(a1)
00015102 336A 000C 000C             		move	$C(a2),$C(a1)
00015108 4A28 0034                  		tst.b	$34(a0)
0001510C 6700                       		beq.s	loc_1DE9A
0001510E 5941                       		sub	#4,d1
00015110                            
00015110                            loc_1DE9A:				; CODE XREF: h+6F1E?j
00015110 D369 000C                  		add	d1,$C(a1)
00015114 137C 0000 0022             		move.b	#0,$22(a1)
0001511A 137C 0003 001C             		move.b	#3,$1C(a1)
00015120 5429 0024                  		addq.b	#2,$24(a1)
00015124 2368 0004 0004             		move.l	4(a0),4(a1)
0001512A 1368 0001 0001             		move.b	1(a0),1(a1)
00015130 337C 0080 0018             		move.w	#$80,obPriority(a1)
00015136 137C 0004 0014             		move.b	#4,obActWid(a1)
0001513C 3368 0002 0002             		move	2(a0),2(a1)
00015142 3368 003E 003E             		move	$3E(a0),$3E(a1)
00015148 0269 7FFF 0002             		and	#$7FFF,2(a1)
0001514E 4A6A 0002                  		tst	2(a2)
00015152 6A00                       		bpl.s	loc_1DEE0
00015154 0069 8000 0002             		or	#-$8000,2(a1)
0001515A                            
0001515A                            loc_1DEE0:				; CODE XREF: h+6EF4?j h+6F00?j ...
0001515A 6100                       		bsr.s	loc_1DEE4
0001515C 4E75                       		rts	
0001515E                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001515E                            
0001515E                            loc_1DEE4:				; CODE XREF: h+6EC0?p h+6F6C?p
0001515E 7000                       		moveq	#0,d0
00015160 1028 001A                  		move.b	$1A(a0),d0
00015164 B028 0030                  		cmp.b	$30(a0),d0
00015168 6700 0000                  		beq.w	locret_1DF36
0001516C 1140 0030                  		move.b	d0,$30(a0)
00015170 45F9 0000 0000             		lea	(off_1E074).l,a2
00015176 D040                       		add	d0,d0
00015178 D4F2 0000                  		add	(a2,d0.w),a2
0001517C 3A1A                       		move	(a2)+,d5
0001517E 5345                       		subq	#1,d5
00015180 6B00 0000                  		bmi.w	locret_1DF36
00015184 3828 003C                  		move $3C(a0),d4
00015188                            
00015188                            loc_1DF0A:				; CODE XREF: h+6FBE?j
00015188 7200                       		moveq	#0,d1
0001518A 321A                       		move	(a2)+,d1
0001518C 3601                       		move	d1,d3
0001518E E04B                       		lsr.w	#8,d3
00015190 0243 00F0                  		and	#$F0,d3	; 'ð'
00015194 0643 0010                  		add	#$10,d3
00015198 0241 0FFF                  		and	#$FFF,d1
0001519C EB89                       		lsl.l	#5,d1
0001519E 0681 0000 0000             		add.l	#Art_Dust,d1
000151A4 3404                       		move	d4,d2
000151A6 D843                       		add	d3,d4
000151A8 D843                       		add	d3,d4
000151AA 4EB9 0000 1426             		jsr	(QueueDMATransfer).l
000151B0 51CD FFD6                  		dbf	d5,loc_1DF0A
000151B4 4E75                           rts
000151B6                            
000151B6                            locret_1DF36:				; CODE XREF: h+6F7A?j h+6F90?j
000151B6 4E75                       		rts	
000151B8                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000151B8 0000                       off_1DF38:	dc byte_1DF40-off_1DF38; 0 ; DATA XREF: h+6EB4?o h+6FC4?o ...
000151BA 0000                       		dc byte_1DF43-off_1DF38; 1
000151BC 0000                       		dc byte_1DF4F-off_1DF38; 2
000151BE 0000                       		dc byte_1DF58-off_1DF38; 3
000151C0 1F00 FF                    byte_1DF40:	dc.b $1F,  0,$FF	; 0 ; DATA XREF: h+6FC4?o
000151C3 0301 0203 0405 0607 0809+  byte_1DF43:	dc.b   3,  1,  2,  3,  4,  5,  6,  7,  8,  9,$FD,  0; 0	; DATA XREF: h+6FC4?o
000151CF 010A 0B0C 0D0E 0F10 FF     byte_1DF4F:	dc.b   1, $A, $B, $C, $D, $E, $F,$10,$FF; 0 ; DATA XREF: h+6FC4?o
000151D8 0311 1213 14FC             byte_1DF58:	dc.b   3,$11,$12,$13,$14,$FC; 0	; DATA XREF: h+6FC4?o
000151DE                            ; -------------------------------------------------------------------------------
000151DE                            ; Unknown Sprite Mappings
000151DE                            ; -------------------------------------------------------------------------------
000151DE                            MapUnc_1DF5E:
000151DE 0000                       	dc word_1DF8A-MapUnc_1DF5E; 0
000151E0 0000                       	dc word_1DF8C-MapUnc_1DF5E; 1
000151E2 0000                       	dc word_1DF96-MapUnc_1DF5E; 2
000151E4 0000                       	dc word_1DFA0-MapUnc_1DF5E; 3
000151E6 0000                       	dc word_1DFAA-MapUnc_1DF5E; 4
000151E8 0000                       	dc word_1DFB4-MapUnc_1DF5E; 5
000151EA 0000                       	dc word_1DFBE-MapUnc_1DF5E; 6
000151EC 0000                       	dc word_1DFC8-MapUnc_1DF5E; 7
000151EE 0000                       	dc word_1DFD2-MapUnc_1DF5E; 8
000151F0 0000                       	dc word_1DFDC-MapUnc_1DF5E; 9
000151F2 0000                       	dc word_1DFE6-MapUnc_1DF5E; 10
000151F4 0000                       	dc word_1DFF0-MapUnc_1DF5E; 11
000151F6 0000                       	dc word_1DFFA-MapUnc_1DF5E; 12
000151F8 0000                       	dc word_1E004-MapUnc_1DF5E; 13
000151FA 0000                       	dc word_1E016-MapUnc_1DF5E; 14
000151FC 0000                       	dc word_1E028-MapUnc_1DF5E; 15
000151FE 0000                       	dc word_1E03A-MapUnc_1DF5E; 16
00015200 0000                       	dc word_1E04C-MapUnc_1DF5E; 17
00015202 0000                       	dc word_1E056-MapUnc_1DF5E; 18
00015204 0000                       	dc word_1E060-MapUnc_1DF5E; 19
00015206 0000                       	dc word_1E06A-MapUnc_1DF5E; 20
00015208 0000                       	dc word_1DF8A-MapUnc_1DF5E; 21
0001520A 00                         word_1DF8A:	dc.b 0
0001520B 01                         word_1DF8C:	dc.b 1
0001520C F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00015211 01                         word_1DF96:	dc.b 1
00015212 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00015217 01                         word_1DFA0:	dc.b 1
00015218 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
0001521D 01                         word_1DFAA:	dc.b 1
0001521E E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00015223 01                         word_1DFB4:	dc.b 1
00015224 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00015229 01                         word_1DFBE:	dc.b 1
0001522A E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
0001522F 01                         word_1DFC8:	dc.b 1
00015230 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00015235 01                         word_1DFD2:	dc.b 1
00015236 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
0001523B 01                         word_1DFDC:	dc.b 1
0001523C F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00015241 01                         word_1DFE6:	dc.b 1
00015242 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
00015247 01                         word_1DFF0:	dc.b 1
00015248 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
0001524D 01                         word_1DFFA:	dc.b 1
0001524E 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
00015253 02                         word_1E004:	dc.b 2
00015254 F401 0000 E8               	dc.b $F4, $01, $0, 0,$E8; 0
00015259 040D 0002 E0               	dc.b $4, $0D, $0, 2,$E0; 4
0001525E 02                         word_1E016:	dc.b 2
0001525F F405 0000 E8               	dc.b $F4, $05, $0, 0,$E8; 0
00015264 040D 0004 E0               	dc.b $4, $0D, $0, 4,$E0; 4
00015269 02                         word_1E028:	dc.b 2
0001526A F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
0001526F 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
00015274 02                         word_1E03A:	dc.b 2
00015275 F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
0001527A 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
0001527F 01                         word_1E04C:	dc.b 1
00015280 F805 0000 F8               	dc.b $F8, $05, $0, 0,$F8; 0
00015285 01                         word_1E056:	dc.b 1
00015286 F805 0004 F8               	dc.b $F8, $05, $0, 4,$F8; 0
0001528B 01                         word_1E060:	dc.b 1
0001528C F805 0008 F8               	dc.b $F8, $05, $0, 8,$F8; 0
00015291 01                         word_1E06A:	dc.b 1
00015292 F805 000C F8               	dc.b $F8, $05, $0, $C,$F8; 0
00015297 00                         	dc.b 0
00015298 0000                       off_1E074:	dc word_1E0A0-off_1E074; 0
0001529A 0000                       	dc word_1E0A2-off_1E074; 1
0001529C 0000                       	dc word_1E0A6-off_1E074; 2
0001529E 0000                       	dc word_1E0AA-off_1E074; 3
000152A0 0000                       	dc word_1E0AE-off_1E074; 4
000152A2 0000                       	dc word_1E0B2-off_1E074; 5
000152A4 0000                       	dc word_1E0B6-off_1E074; 6
000152A6 0000                       	dc word_1E0BA-off_1E074; 7
000152A8 0000                       	dc word_1E0BE-off_1E074; 8
000152AA 0000                       	dc word_1E0C2-off_1E074; 9
000152AC 0000                       	dc word_1E0C6-off_1E074; 10
000152AE 0000                       	dc word_1E0CA-off_1E074; 11
000152B0 0000                       	dc word_1E0CE-off_1E074; 12
000152B2 0000                       	dc word_1E0D2-off_1E074; 13
000152B4 0000                       	dc word_1E0D8-off_1E074; 14
000152B6 0000                       	dc word_1E0DE-off_1E074; 15
000152B8 0000                       	dc word_1E0E4-off_1E074; 16
000152BA 0000                       	dc word_1E0EA-off_1E074; 17
000152BC 0000                       	dc word_1E0EA-off_1E074; 18
000152BE 0000                       	dc word_1E0EA-off_1E074; 19
000152C0 0000                       	dc word_1E0EA-off_1E074; 20
000152C2 0000                       	dc word_1E0EC-off_1E074; 21
000152C4 0000                       word_1E0A0:	dc 0
000152C6 0001                       word_1E0A2:	dc 1
000152C8 7000                       	dc $7000
000152CA 0001                       word_1E0A6:	dc 1
000152CC F008                       	dc $F008
000152CE 0001                       word_1E0AA:	dc 1
000152D0 F018                       	dc $F018
000152D2 0001                       word_1E0AE:	dc 1
000152D4 F028                       	dc $F028
000152D6 0001                       word_1E0B2:	dc 1
000152D8 F038                       	dc $F038
000152DA 0001                       word_1E0B6:	dc 1
000152DC F048                       	dc $F048
000152DE 0001                       word_1E0BA:	dc 1
000152E0 7058                       	dc $7058
000152E2 0001                       word_1E0BE:	dc 1
000152E4 7060                       	dc $7060
000152E6 0001                       word_1E0C2:	dc 1
000152E8 7068                       	dc $7068
000152EA 0001                       word_1E0C6:	dc 1
000152EC 7070                       	dc $7070
000152EE 0001                       word_1E0CA:	dc 1
000152F0 7078                       	dc $7078
000152F2 0001                       word_1E0CE:	dc 1
000152F4 7080                       	dc $7080
000152F6 0002                       word_1E0D2:	dc 2
000152F8 1088                       	dc $1088
000152FA 708A                       	dc $708A
000152FC 0002                       word_1E0D8:	dc 2
000152FE 3092                       	dc $3092
00015300 7096                       	dc $7096
00015302 0002                       word_1E0DE:	dc 2
00015304 509E                       	dc $509E
00015306 70A4                       	dc $70A4
00015308 0002                       word_1E0E4:	dc 2
0001530A 50AC                       	dc $50AC
0001530C 70B2                       	dc $70B2
0001530E 0000                       word_1E0EA:	dc 0
00015310 0001                       word_1E0EC:	dc 1
00015312 F0BA                       	dc $F0BA
00015314                            	even
00015314                            
00015314                            ; ===========================================================================
00015314                            
00015314                            LoadPlayerPal:
00015314 7000                       		moveq	#0,d0
00015316 1038 FFBF                  		move.b	($FFFFFFBF).w,d0
0001531A 103B 0000                  		move.b	@palLUT(pc,d0.w),d0
0001531E 4E75                       		rts
00015320                            
00015320                            	@palLUT:
00015320 0315 1617 18               		dc.b	palid_Sonic, palid_Sonic2, palid_Sonic3, palid_Sonic4, palid_Sonic5
00015325 191A 1B1C 1D               		dc.b	palid_Sonic6, palid_Sonic7, palid_Sonic8, palid_Sonic9, palid_Sonic10
0001532A                            
0001532A                            LoadPlayerWaterPal:
0001532A 7000                       		moveq	#0,d0
0001532C 1038 FFBF                  		move.b	($FFFFFFBF).w,d0
00015330 103B 0000                  		move.b	@palLUT(pc,d0.w),d0
00015334 4E75                       		rts
00015336                            
00015336                            	@palLUT:
00015336 101E 1F20 21               		dc.b	palid_SBZ3SonWat, palid_SonWater2, palid_SonWater3, palid_SonWater4, palid_SonWater5
0001533B 2223 2425 26               		dc.b	palid_SonWater6, palid_SonWater7, palid_SonWater8, palid_SonWater9, palid_SonWater10
00015340                            
00015340                            ; ---------------------------------------------------------------------------
00015340                            ; Object 01 - Sonic
00015340                            ; ---------------------------------------------------------------------------
00015340                            
00015340                            SonicPlayer:
00015340 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
00015344 6700                       		beq.s	Sonic_Normal	; if not, branch
00015346 4EF9 0000 0000             		jmp	(DebugMode).l
0001534C                            ; ===========================================================================
0001534C                            
0001534C                            Sonic_Normal:
0001534C 7000                       		moveq	#0,d0
0001534E 1028 0024                  		move.b	obRoutine(a0),d0
00015352 323B 0000                  		move.w	Sonic_Index(pc,d0.w),d1
00015356 4EFB 1000                  		jmp	Sonic_Index(pc,d1.w)
0001535A                            ; ===========================================================================
0001535A 0000                       Sonic_Index:	dc.w Sonic_Main-Sonic_Index
0001535C 0000                       		dc.w Sonic_Control-Sonic_Index
0001535E 0000                       		dc.w Sonic_Hurt-Sonic_Index
00015360 0000                       		dc.w Sonic_Death-Sonic_Index
00015362 0000                       		dc.w Sonic_ResetLevel-Sonic_Index
00015364                            ; ===========================================================================
00015364                            
00015364                            Sonic_Main:	; Routine 0
00015364 11FC 0005 D1C0             		move.b	#5,$FFFFD1C0.w
0001536A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001536E 117C 0013 0016             		move.b	#$13,obHeight(a0)
00015374 117C 0009 0017             		move.b	#9,obWidth(a0)
0001537A 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
00015382 317C 0780 0002             		move.w	#$780,obGfx(a0)
00015388 317C 0100 0018             		move.w	#$100,obPriority(a0)
0001538E 117C 0018 0014             		move.b	#$18,obActWid(a0)
00015394 117C 0004 0001             		move.b	#4,obRender(a0)
0001539A 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w ; Sonic's top speed
000153A0 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w ; Sonic's acceleration
000153A6 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w ; Sonic's deceleration
000153AC 11FC 0005 D1C0             		move.b	#5,$FFFFD1C0.w
000153B2                            
000153B2                            Sonic_Control:    ; Routine 2
000153B2 4A38 FF8B                   		tst.b	($FFFFFF8B).w
000153B6 6700 0000                  		beq.w	@cont    
000153BA 6100                       		bsr.s    Sonic_PanCamera    ; ++add this++
000153BC                             
000153BC                            	@cont: 
000153BC 4A78 FFFA                  		tst.w    (f_debugmode).w    ; is debug cheat enabled?
000153C0 6700                       		beq.s    loc_12C58    ; if not, branch
000153C2 0838 0004 F605             		btst    #bitB,(v_jpadpress1).w ; is button B pressed?
000153C8 6700                       		beq.s    loc_12C58    ; if not, branch
000153CA 31FC 0001 FE08             		move.w    #1,(v_debuguse).w ; change Sonic into a ring/item
000153D0 4238 F7CC                  		clr.b    (f_lockctrl).w
000153D4 4E75                       		rts
000153D6                            		
000153D6                            		include    "_incObj\Sonic PanCamera.asm"    ; ++add this++
000153D6                            ; ---------------------------------------------------------------------------
000153D6                            ; Subroutine to    horizontally pan the camera view ahead of the player
000153D6                            ; (Ported from the US version of Sonic CD's "R11A__.MMD" by Nat The Porcupine)
000153D6                            ; ---------------------------------------------------------------------------
000153D6                            
000153D6                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
000153D6                            
000153D6                            
000153D6                            Sonic_PanCamera:
000153D6 3238 F7A0                          move.w    (v_camera_pan).w,d1        ; get the current camera pan value
000153DA 3028 0020                          move.w    obInertia(a0),d0        ; get sonic's inertia
000153DE 6A00                               bpl.s    @abs_inertia            ; if sonic's inertia is positive, branch ahead
000153E0 4440                               neg.w    d0                        ; otherwise, we negate it to get the absolute value
000153E2                            
000153E2                                @abs_inertia:
000153E2                            
000153E2                            ; These lines were intended to prevent the Camera from panning while
000153E2                            ; going up the very first giant ramp in Palmtree Panic Zone Act 1.
000153E2                            ; However, given that no such object exists in Sonic 1, I just went
000153E2                            ; ahead and commented these out.
000153E2                            ;        btst    #1,$2C(a0)                ; is sonic going up a giant ramp in PPZ?
000153E2                            ;        beq.s    @skip                    ; if not, branch
000153E2                            ;        cmpi.w    #$1B00,obX(a0)            ; is sonic's x position lower than $1B00?
000153E2                            ;        bcs.s    @reset_pan                ; if so, branch
000153E2                            
000153E2                            ; These lines aren't part of the original routine; I added them myself.
000153E2                            ; If you've ported the Spin Dash, uncomment the following lines of code
000153E2                            ; to allow the camera to pan ahead while charging the Spin Dash:
000153E2 4A28 0039                          tst.b    $39(a0)                    ; is sonic charging up a spin dash?
000153E6 6700                               beq.s    @skip                    ; if not, branch
000153E8 0828 0000 0022                     btst    #0,obStatus(a0)            ; check the direction that sonic is facing
000153EE 6600                               bne.s    @pan_right                ; if he's facing right, pan the camera to the right
000153F0 6000                               bra.s    @pan_left                ; otherwise, pan the camera to the left
000153F2                            
000153F2                                @skip:
000153F2 0C40 0600                          cmpi.w    #$600,d0                ; is sonic's inertia greater than $600
000153F6 6500                               bcs.s    @reset_pan                ; if not, recenter the screen (if needed)
000153F8 4A68 0020                          tst.w    obInertia(a0)            ; otherwise, check the direction of inertia (by subtracting it from 0)
000153FC 6A00                               bpl.s    @pan_left                ; if the result was positive, then inertia was negative, so we pan the screen left
000153FE                            
000153FE                                @pan_right:
000153FE 5441                               addq.w    #2,d1                    ; add 2 to the pan value
00015400 0C41 00E0                          cmpi.w    #224,d1                    ; is the pan value greater than 224 pixels?
00015404 6500                               bcs.s    @update_pan                ; if not, branch
00015406 323C 00E0                          move.w    #224,d1                    ; otherwise, cap the value at the maximum of 224 pixels
0001540A 6000                               bra.s    @update_pan                ; branch
0001540C                            ; ---------------------------------------------------------------------------
0001540C                            
0001540C                                @pan_left:
0001540C 5541                               subq.w    #2,d1                    ; subtract 2 from the pan value
0001540E 0C41 0060                          cmpi.w    #96,d1                    ; is the pan value less than 96 pixels?
00015412 6400                               bcc.s    @update_pan                ; if not, branch
00015414 323C 0060                          move.w    #96,d1                    ; otherwise, cap the value at the minimum of 96 pixels
00015418 6000                               bra.s    @update_pan                ; branch
0001541A                            ; ---------------------------------------------------------------------------
0001541A                            
0001541A                                @reset_pan:
0001541A 0C41 00A0                          cmpi.w    #160,d1                    ; is the pan value 160 pixels?
0001541E 6700                               beq.s    @update_pan                ; if so, branch
00015420 6400                               bcc.s    @reset_left                ; otherwise, branch if it greater than 160
00015422                                 
00015422                                @reset_right:
00015422 5441                               addq.w    #2,d1                    ; add 2 to the pan value
00015424 6000                               bra.s    @update_pan                ; branch
00015426                            ; ---------------------------------------------------------------------------
00015426                            
00015426                                @reset_left:
00015426 5541                               subq.w    #2,d1                    ; subtract 2 from the pan value
00015428                            
00015428                                @update_pan:
00015428 31C1 F7A0                          move.w    d1,(v_camera_pan).w        ; update the camera pan value
0001542C 4E75                               rts                                ; return
0001542E                                 
0001542E                            ; End of function Sonic_PanCamera
0001542E                            
0001542E                            
0001542E                            ; ===========================================================================
0001542E                            
0001542E                            loc_12C58:
0001542E 4A38 F7CC                  		tst.b	(f_lockctrl).w	; are controls locked?
00015432 6600                       		bne.s	loc_12C64	; if yes, branch
00015434 31F8 F604 F602             		move.w	(v_jpadhold1).w,(v_jpadhold2).w ; enable joypad control
0001543A                            
0001543A                            loc_12C64:
0001543A 0838 0000 F7C8             		btst	#0,(f_lockmulti).w ; are controls locked?
00015440 6600                       		bne.s	loc_12C7E	; if yes, branch
00015442 7000                       		moveq	#0,d0
00015444 1028 0022                  		move.b	obStatus(a0),d0
00015448 0240 0006                  		andi.w	#6,d0
0001544C 323B 0000                  		move.w	Sonic_Modes(pc,d0.w),d1
00015450 4EBB 1000                  		jsr	Sonic_Modes(pc,d1.w)
00015454                            
00015454                            loc_12C7E:
00015454 6100                       		bsr.s	Sonic_Display
00015456 6100 0000                  		bsr.w	Sonic_RecordPosition
0001545A 6100 0000                  		bsr.w	Sonic_Water
0001545E 1178 F768 0036             		move.b	(v_anglebuffer).w,$36(a0)
00015464 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
0001546A 4A38 F7C7                  		tst.b	(f_wtunnelmode).w
0001546E 6700                       		beq.s	loc_12CA6
00015470 4A28 001C                  		tst.b	obAnim(a0)
00015474 6600                       		bne.s	loc_12CA6
00015476 1168 001D 001C             		move.b	obNextAni(a0),obAnim(a0)
0001547C                            
0001547C                            loc_12CA6:
0001547C 6100 0000                  		bsr.w	Sonic_Animate
00015480 4A38 F7C8                  		tst.b	(f_lockmulti).w
00015484 6B00                       		bmi.s	loc_12CB6
00015486 4EB9 0000 0000             		jsr	(ReactToItem).l
0001548C                            
0001548C                            loc_12CB6:
0001548C 6100 0000                  		bsr.w	Sonic_Loops
00015490 6100 0000                  		bsr.w	Sonic_LoadGfx
00015494 4E75                       		rts	
00015496                            ; ===========================================================================
00015496 0000                       Sonic_Modes:	dc.w Sonic_MdNormal-Sonic_Modes
00015498 0000                       		dc.w Sonic_MdJump-Sonic_Modes
0001549A 0000                       		dc.w Sonic_MdRoll-Sonic_Modes
0001549C 0000                       		dc.w Sonic_MdJump2-Sonic_Modes
0001549E                            ; ---------------------------------------------------------------------------
0001549E                            ; Music	to play	after invincibility wears off
0001549E                            ; ---------------------------------------------------------------------------
0001549E                            MusicList2:
0001549E 00                         		dc.b bgm_GHZ
0001549F 00                         		dc.b bgm_LZ
000154A0 00                         		dc.b bgm_MZ
000154A1 00                         		dc.b bgm_SLZ
000154A2 00                         		dc.b bgm_SYZ
000154A3 00                         		dc.b bgm_SBZ
000154A4                            		; The ending doesn't get an entry
000154A4                            		even
000154A4                            
000154A4                            		include	"_incObj\Sonic Display.asm"
000154A4                            ; ---------------------------------------------------------------------------
000154A4                            ; Subroutine to display Sonic and set music
000154A4                            ; ---------------------------------------------------------------------------
000154A4                            
000154A4                            Sonic_Display:
000154A4 3028 0030                  		move.w    flashtime(a0),d0
000154A8 6700                       		beq.s    @showAfterImage
000154AA 5368 0030                  		subq.w    #1,flashtime(a0)
000154AE E648                               	lsr.w    #3,d0
000154B0 6400                               	bcc.s    @chkinvincible
000154B2                            
000154B2                            	@showAfterImage:
000154B2 3028 0020                          	move.w    obInertia(a0),d0            ; get inertia
000154B6 4A40                       		tst.w    d0                    ; is inertia greater than 0?
000154B8 6C00                       		bge.s    @AfterImage_Start    ; if yes, don't negate it
000154BA 4440                       		neg        d0                    ; if not, negate it
000154BC                            
000154BC                            	@AfterImage_Start:        
000154BC 4A38 FE2E                  		tst.b	(v_shoes).w	; does Sonic have speed	shoes?
000154C0 6700                       		beq.s	@display	; if not, don't show the After Image
000154C2                            		;cmpi.w    #$900,d0	; is the sonic inertia greater than A00?
000154C2                            		;blt.s    @display	; if not, don't show the After Image
000154C2                            	
000154C2                            	@AfterImage_Start2:    
000154C2 6100 A940                          	bsr.w    FindFreeObj    ; search a free space in object RAM
000154C6 6600                               	bne.s    @display    ; if not have, don't load the After Image
000154C8 12BC 0010                          	move.b  #$10,0(a1)        ; load after-image object
000154CC 2368 0004 0004                     	move.l    obMap(a0),obMap(a1)        ; copy Sonic mappings to after-image mappings
000154D2 3368 0008 0008                     	move.w    obX(a0),obX(a1)        ; copy Sonic x-pos to after-image x-pos
000154D8 3368 000C 000C                     	move.w    obY(a0),obY(a1)    ; copy Sonic y-pos to after-image y-pos
000154DE                            
000154DE                                	@display:
000154DE 4EB9 0000 F978                     	jsr    (DisplaySprite).l
000154E4                            
000154E4                            	@chkinvincible:
000154E4 4A38 FE2D                  		tst.b	(v_invinc).w	; does Sonic have invincibility?
000154E8 6700                       		beq.s	@chkshoes	; if not, branch
000154EA 4A68 0032                  		tst.w	invtime(a0)	; check	time remaining for invinciblity
000154EE 6700                       		beq.s	@chkshoes	; if no	time remains, branch
000154F0 5368 0032                  		subq.w	#1,invtime(a0)	; subtract 1 from time
000154F4 6600                       		bne.s	@chkshoes
000154F6 4A38 F7AA                  		tst.b	(f_lockscreen).w
000154FA 6600                       		bne.s	@removeinvincible
000154FC 0C78 000C FE14             		cmpi.w	#$C,(v_air).w
00015502 6500                       		bcs.s	@removeinvincible
00015504 1038 F5C6                  		move.b  (v_Saved_music),d0    ; loads song number from RAM
00015508 4EB9 0000 124A                     	jsr	(PlaySound).l    ; play normal music
0001550E                            
0001550E                            	@removeinvincible:
0001550E 11FC 0000 FE2D             		move.b	#0,(v_invinc).w ; cancel invincibility
00015514                            
00015514                            	@chkshoes:
00015514 4A38 FE2E                  		tst.b	(v_shoes).w	; does Sonic have speed	shoes?
00015518 6700                       		beq.s	@exit		; if not, branch
0001551A 4A68 0034                  		tst.w	shoetime(a0)	; check	time remaining
0001551E 6700                       		beq.s	@exit
00015520 5368 0034                  		subq.w	#1,shoetime(a0)	; subtract 1 from time
00015524 6600                       		bne.s	@exit
00015526 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w ; restore Sonic's speed
0001552C 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w ; restore Sonic's acceleration
00015532 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w ; restore Sonic's deceleration
00015538 11FC 0000 FE2E             		move.b	#0,(v_shoes).w	; cancel speed shoes
0001553E 1038 F5C6                  		move.b  (v_Saved_music),d0    ; loads song number from RAM
00015542 4EB9 0000 124A                     	jsr	(PlaySound).l    ; play normal music
00015548                            		
00015548                            	@exit:
00015548 4E75                       		rts	
00015548 4E75                       		rts	
0001554A                            		include	"_incObj\Sonic RecordPosition.asm"
0001554A                            ; ---------------------------------------------------------------------------
0001554A                            ; Subroutine to	record Sonic's previous positions for invincibility stars
0001554A                            ; ---------------------------------------------------------------------------
0001554A                            
0001554A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001554A                            
0001554A                            
0001554A                            Sonic_RecordPosition:
0001554A 3038 F7A8                  		move.w	(v_trackpos).w,d0
0001554E 43F8 CB00                  		lea	(v_tracksonic).w,a1
00015552 43F1 0000                  		lea	(a1,d0.w),a1
00015556 32E8 0008                  		move.w	obX(a0),(a1)+
0001555A 32E8 000C                  		move.w	obY(a0),(a1)+
0001555E 5838 F7A9                  		addq.b	#4,(v_trackbyte).w
00015562 4E75                       		rts	
00015564                            ; End of function Sonic_RecordPosition
00015564                            ; End of function Sonic_RecordPosition
00015564                            		include	"_incObj\Sonic Water.asm"
00015564                            ; ---------------------------------------------------------------------------
00015564                            ; Subroutine for Sonic when he's underwater
00015564                            ; ---------------------------------------------------------------------------
00015564                            
00015564                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015564                            
00015564                            
00015564                            Sonic_Water:
00015564 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w	;TIS is level MZ?
0001556A 6700                       		beq.s	WaterTagforMZ	; if yes, branch
0001556C 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	; is level LZ?
00015572 6700                       		beq.s	Sonic_Water_LZ	; if yes, branch
00015574                            
00015574                            	Sonic_Water_Exit:
00015574 4E75                       		rts	
00015576                            ; ===========================================================================
00015576                            
00015576                            	Sonic_Water_LZ:
00015576 3038 F646                  		move.w	(v_waterpos1).w,d0
0001557A B068 000C                  		cmp.w	obY(a0),d0	; is Sonic above the water?
0001557E 6C00 0000                  		bge.w	Abovewater	; if yes, branch
00015582 6000 0000                  		bra	WaterStatus
00015586                            	WaterTagforMZ:
00015586 0C38 0000 F5C4             		cmpi.b	#0,(v_tagwater).w	;TIS Lava Tag?
0001558C 6700 0000                  		beq.w	Abovewater	; if yes, branch
00015590 303C 000F                  		move.w #$F,d0             ;TIS Length ($F = full line)
00015594 43F8 34A0                  		lea    (Pal_LZSonWatr2),a1  ;Palette location
00015598 45F8 FB00                          	lea    ($FFFFFB00),a2        ;RAM location ($FB00 = line 1)
0001559C 4EB8 24A0                  		jsr	Palload_Loop
000155A0                            	WaterStatus:
000155A0 08E8 0006 0022             		bset	#6,obStatus(a0)
000155A6 6600 FFCC                  		bne.w	Sonic_Water_Exit
000155AA 6100 0000                  		bsr.w	ResumeMusic
000155AE 31F8 D00C FF92             		move.w	(v_player+obY).w,(v_watersplashpos).w	;TIS copy y-pos
000155B4                            
000155B4 11FC 000A D340             		move.b	#id_DrownCount,(v_objspace+$340).w ; load bubbles object from Sonic's mouth
000155BA 11FC 0081 D368             		move.b	#$81,(v_objspace+$340+obSubtype).w
000155C0 31FC 0300 F760             		move.w	#$300,(v_sonspeedmax).w ; change Sonic's top speed
000155C6 31FC 0006 F762             		move.w	#6,(v_sonspeedacc).w ; change Sonic's acceleration
000155CC 31FC 0040 F764             		move.w	#$40,(v_sonspeeddec).w ; change Sonic's deceleration
000155D2 E0E8 0010                  		asr	obVelX(a0)
000155D6 E0E8 0012                  		asr	obVelY(a0)
000155DA E0E8 0012                  		asr	obVelY(a0)	; slow Sonic
000155DE 6700 FF94                  		beq.w	Sonic_Water_Exit		; branch if Sonic stops moving
000155E2                            		;move.w	(v_player+obY).w,(v_watersplashpos).w	;TIS copy y-pos
000155E2 31FC 0100 D1DC                     move.w    #$100,($FFFFD1DC).w    ; set the spin dash dust animation to splash
000155F2 0C38 0000 F5C4             		cmpi.b	#0,(v_tagwater).w	;TIS Lava Tag?
000155F8 6600 0000                  		bne.w	@return
000155FC                            		
000155FC                            		
000155FC                            	@return:
000155FC 4E75                       		rts
000155FE                            ; ===========================================================================
000155FE                            
000155FE                            Abovewater:
000155FE 08A8 0006 0022             		bclr	#6,obStatus(a0)
00015604 6700 FF6E                  		beq.w	Sonic_Water_Exit
00015608 6100 0000                  		bsr.w	ResumeMusic
0001560C 31F8 D00C FF92             		move.w	(v_player+obY).w,(v_watersplashpos).w	;TIS copy y-pos
00015612                            
00015612 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w ; restore Sonic's speed
00015618 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w ; restore Sonic's acceleration
0001561E 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w ; restore Sonic's deceleration
00015624 E1E8 0012                  		asl	obVelY(a0)
00015628 6700 FF4A                  		beq.w	Sonic_Water_Exit
0001562C 31FC 0100 D1DC                     move.w    #$100,($FFFFD1DC).w    ; set the spin dash dust animation to splash
00015632 0C68 F000 0012             		cmpi.w	#-$1000,obVelY(a0)
00015638 6E00                       		bgt.s	@belowmaxspeed
0001563A 317C F000 0012             		move.w	#-$1000,obVelY(a0) ; set maximum speed on leaving water
00015640                            
00015640                            	@belowmaxspeed:
0001564A                            ; End of function Sonic_Water
0001564A                            ; End of function Sonic_Water
0001564A                            		include "_incObj\03 Hangable Sprite.asm"
0001564A                            ; ===========================================================================
0001564A                            ; ----------------------------------------------------------------------------
0001564A                            ; Object 03 - Invisible sprite that you can hang on to
0001564A                            ; ----------------------------------------------------------------------------
0001564A                            ; Sprite_2C92C:
0001564A                            Obj03:
0001564A 7000                       	moveq    #0,d0
0001564C 1028 0024                      move.b    obRoutine(a0),d0            ;just use s1 version of this variable
00015650 323B 0000                      move.w    Obj03_Index(pc,d0.w),d1
00015654 4EFB 1000                      jmp    Obj03_Index(pc,d1.w)
00015658                            ; ===========================================================================
00015658                            ; off_2C93A:
00015658                            Obj03_Index:
00015658 0000                           dc.w Obj03_Main-Obj03_Index
0001565A 0000                               dc.w Obj03_Init-Obj03_Index
0001565C                            ; ===========================================================================
0001565C                            ; loc_2C93E:
0001565C                            Obj03_Init:
0001565C 5428 0024                      addq.b    #2,obRoutine(a0)        ;just use s1 version of this variable
00015660 117C 0004 0001                 move.b    #4,obRender(a0)    ;just use s1 version of this variable
00015666 117C 0018 0014                 move.b    #$18,obActWid(a0)    ;just use s1 version of this variable
0001566C 317C 0200 0018                 move.w    #$200,obPriority(a0)            ;just use s1 version of this variable
00015672                            ; loc_2C954:
00015672                            Obj03_Main:
00015672 45E8 0030                      lea    $30(a0),a2
00015676 43F8 D000                      lea    (v_player).w,a1 ; a1=character
0001567A 3038 F604                      move.w    (v_jpadhold1).w,d0 			;S1 has same ram address for controller as S2 just different variable name like on the line above
0001567E 6100                           bsr.s    Obj03_Check
00015680                            ;    lea    (Sidekick).w,a1 ; a1=character  ;disabled
00015680                            ;    addq.w    #1,a2                          ;disabled
00015680                            ;    move.w    (Ctrl_2).w,d0                    ;disabled
00015680                            ;    bsr.s    Obj03_Check         	;disabled
00015680 4EF9 0000 0000             	jmp		bonu_chkdel
00015686                            ; ===========================================================================
00015686                            ; loc_2C972:
00015686                            Obj03_Check:
00015686 4A12                       		tst.b	(a2)
00015688 6700                       		beq.s	loc_2C9A0
0001568A 0200 0070                  		andi.b	#btnABC,d0
0001568E 6700 0000                  		beq.w	Obj03_Check_End
00015692 4238 F7C8                  		clr.b	f_lockmulti.w
00015696 4212                       		clr.b	(a2)
00015698 157C 0012 0002             		move.b	#$12,2(a2)
0001569E 0240 0F00                  		andi.w	#$F00,d0
000156A2 6700                       		beq.s	loc_2C954
000156A4 157C 003C 0002             		move.b	#$3C,2(a2)
000156AA                            	
000156AA                            loc_2C954:
000156AA 337C FD00 0012             		move.w	#-$300,y_vel(a1)
000156B0 6000 0000                  		bra.w	Obj03_Check_End
000156B4                            ; ===========================================================================
000156B4                            
000156B4                            loc_2C9A0:
000156B4 4A2A 0002                  		tst.b	2(a2)
000156B8 6700                       		beq.s	loc_2C972
000156BA 532A 0002                  		subq.b	#1,2(a2)
000156BE 6600 0000                  		bne.w	Obj03_Check_End
000156C2                            
000156C2                            loc_2C972:
000156C2 3029 0008                  		move.w	obX(a1),d0
000156C6 9068 0008                  		sub.w	obX(a0),d0
000156CA 0640 0018                  		addi.w	#$18,d0
000156CE 0C40 0030                  		cmpi.w	#$30,d0
000156D2 6400 0000                  		bhs.w	Obj03_Check_End
000156D6 3229 000C                  		move.w	obY(a1),d1
000156DA 9268 000C                  		sub.w	obY(a0),d1
000156DE 0C41 0010                  		cmpi.w	#$10,d1
000156E2 6400 0000                  		bhs.w	Obj03_Check_End
000156E6 4A38 F7C8                  		tst.b	f_lockmulti.w
000156EA 6B00                       		bmi.s	Obj03_Check_End
000156EC 0C29 0006 0024             		cmpi.b	#6,obRoutine(a1)
000156F2 6400                       		bhs.s	Obj03_Check_End
000156F4 4A78 FFFA                  		tst.w	(f_debugmode).w
000156F8 6600                       		bne.s	Obj03_Check_End
000156FA 4269 0010                  		clr.w	x_vel(a1)
000156FE 4269 0012                  		clr.w	y_vel(a1)
00015702 4269 0020                  		clr.w	obInertia(a1)
00015706 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001570C 137C 0000 001C             		move.b	#id_Hang2,obAnim(a1)
00015712 11FC 0001 F7C8             		move.b	#1,f_lockmulti.w
00015718 14BC 0001                  		move.b	#1,(a2)
0001571C                            
0001571C                            ; return_2CA08:
0001571C                            Obj03_Check_End:
0001571C 4E75                       		rts
0001571C 4E75                       		rts
0001571E                            
0001571E                            ; ===========================================================================
0001571E                            ; ---------------------------------------------------------------------------
0001571E                            ; Modes	for controlling	Sonic
0001571E                            ; ---------------------------------------------------------------------------
0001571E                            
0001571E                            Sonic_MdNormal:
0001571E 6100 0000                  		bsr.w	Sonic_Peelout
00015722 6100 0000                  		bsr.w	Sonic_SpinDash
00015726 6100 0000                  		bsr.w	Sonic_Jump
0001572A 6100 0000                  		bsr.w	Sonic_SlopeResist
0001572E 6100 0000                  		bsr.w	Sonic_Move
00015732 6100 0000                  		bsr.w	Sonic_Roll
00015736 6100 0000                  		bsr.w	Sonic_LevelBound
0001573A 4EB9 0000 F964             		jsr	(SpeedToPos).l
00015740 6100 0000                  		bsr.w	Sonic_AnglePos
00015744 6100 0000                  		bsr.w	Sonic_SlopeRepel
00015748 4E75                       		rts	
0001574A                            
0001574A                            ; ===========================================================================
0001574A                            
0001574A                            Sonic_MdJump:
0001574A 6100 0000                  		bsr.w   Sonic_AirRoll
0001574E 6100 0000                  		bsr.w	Sonic_JumpHeight
00015752 6100 0000                  		bsr.w	Sonic_JumpDirection
00015756 6100 0000                  		bsr.w	Sonic_LevelBound
0001575A 4EB9 0000 F92C             		jsr	(ObjectFall).l
00015760 0828 0006 0022             		btst	#6,obStatus(a0)
00015766 6700                       		beq.s	loc_12E5C
00015768 0468 0028 0012             		subi.w	#$28,obVelY(a0)
0001576E                            
0001576E                            loc_12E5C:
0001576E 6100 0000                  		bsr.w	Sonic_JumpAngle
00015772 6100 0000                  		bsr.w	Sonic_Floor
00015776 4E75                       		rts	
00015778                            ; ===========================================================================
00015778                            
00015778                            Sonic_MdRoll:
00015778 6100 0000                  		bsr.w	Sonic_Jump
0001577C 6100 0000                  		bsr.w	Sonic_RollRepel
00015780 6100 0000                  		bsr.w	Sonic_RollSpeed
00015784 6100 0000                  		bsr.w	Sonic_LevelBound
00015788 4EB9 0000 F964             		jsr	(SpeedToPos).l
0001578E 6100 0000                  		bsr.w	Sonic_AnglePos
00015792 6100 0000                  		bsr.w	Sonic_SlopeRepel
00015796 4E75                       		rts	
00015798                            ; ===========================================================================
00015798                            
00015798                            Sonic_MdJump2:
00015798 6100 0000                  		bsr.w	Sonic_JumpHeight
0001579C 6100 0000                  		bsr.w	Sonic_JumpDirection
000157A0 6100 0000                  		bsr.w	Sonic_LevelBound
000157A4 4EB9 0000 F92C             		jsr	(ObjectFall).l
000157AA 0828 0006 0022             		btst	#6,obStatus(a0)
000157B0 6700                       		beq.s	loc_12EA6
000157B2 0468 0028 0012             		subi.w	#$28,obVelY(a0)
000157B8                            
000157B8                            loc_12EA6:
000157B8 6100 0000                  		bsr.w	Sonic_JumpAngle
000157BC 6100 0000                  		bsr.w	Sonic_Floor
000157C0 4E75                       		rts	
000157C2                            
000157C2                            		include	"_incObj\Sonic Move.asm"
000157C2                            ; ---------------------------------------------------------------------------
000157C2                            ; Subroutine to	make Sonic walk/run
000157C2                            ; ---------------------------------------------------------------------------
000157C2                            
000157C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000157C2                            
000157C2                            
000157C2                            Sonic_Move:
000157C2 3C38 F760                  		move.w	(v_sonspeedmax).w,d6
000157C6 3A38 F762                  		move.w	(v_sonspeedacc).w,d5
000157CA 3838 F764                  		move.w	(v_sonspeeddec).w,d4
000157CE 4A38 F7CA                  		tst.b	(f_jumponly).w
000157D2 6600 0000                  		bne.w	loc_12FEE
000157D6 4A68 003E                  		tst.w	$3E(a0)
000157DA 6600 0000                  		bne.w	Sonic_ResetScr
000157DE 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
000157E4 6700                       		beq.s	@notleft	; if not, branch
000157E6 6100 0000                  		bsr.w	Sonic_MoveLeft
000157EA                            
000157EA                            	@notleft:
000157EA 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
000157F0 6700                       		beq.s	@notright	; if not, branch
000157F2 6100 0000                  		bsr.w	Sonic_MoveRight
000157F6                            
000157F6                            	@notright:
000157F6 1028 0026                  		move.b	obAngle(a0),d0
000157FA 0600 0020                  		addi.b	#$20,d0
000157FE 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
00015802 6600 0000                  		bne.w	Sonic_ResetScr	; if yes, branch
00015806 4A68 0020                  		tst.w	obInertia(a0)	; is Sonic moving?
0001580A 6600 0000                  		bne.w	Sonic_ResetScr	; if yes, branch
0001580E 08A8 0005 0022             		bclr	#5,obStatus(a0)
00015814 117C 0000 001C             		move.b	#id_Wait,obAnim(a0) ; use "standing" animation
0001581A 0828 0003 0022             		btst	#3,obStatus(a0)
00015820 6700                       		beq.s	Sonic_Balance
00015822 7000                       		moveq	#0,d0
00015824 1028 003D                  		move.b	$3D(a0),d0
00015828 ED48                       		lsl.w	#6,d0
0001582A 43F8 D000                  		lea	(v_objspace).w,a1
0001582E 43F1 0000                  		lea	(a1,d0.w),a1
00015832 4A29 0022                  		tst.b	obStatus(a1)
00015836 6B00                       		bmi.s	Sonic_LookUp
00015838 7200                       		moveq	#0,d1
0001583A 1229 0014                  		move.b	obActWid(a1),d1
0001583E 3401                       		move.w	d1,d2
00015840 D442                       		add.w	d2,d2
00015842 5942                       		subq.w	#4,d2
00015844 D268 0008                  		add.w	obX(a0),d1
00015848 9269 0008                  		sub.w	obX(a1),d1
0001584C 0C41 0004                  		cmpi.w	#4,d1
00015850 6D00                       		blt.s	loc_12F6A
00015852 B242                       		cmp.w	d2,d1
00015854 6C00                       		bge.s	loc_12F5A
00015856 6000                       		bra.s	Sonic_LookUp
00015858                            ; ===========================================================================
00015858                            
00015858                            Sonic_Balance:
00015858 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0001585E 0C41 000C                  		cmpi.w	#$C,d1
00015862 6D00                       		blt.s	Sonic_LookUp
00015864 0C28 0003 0036             		cmpi.b	#3,$36(a0)
0001586A 6600                       		bne.s	loc_12F62
0001586C                            
0001586C                            loc_12F5A:
0001586C 08A8 0000 0022             		bclr	#0,obStatus(a0)
00015872 6000                       		bra.s	loc_12F70
00015874                            ; ===========================================================================
00015874                            
00015874                            loc_12F62:
00015874 0C28 0003 0037             		cmpi.b	#3,$37(a0)
0001587A 6600                       		bne.s	Sonic_LookUp
0001587C                            
0001587C                            loc_12F6A:
0001587C 08E8 0000 0022             		bset	#0,obStatus(a0)
00015882                            
00015882                            loc_12F70:
00015882 117C 0000 001C             		move.b	#id_Balance,obAnim(a0) ; use "balancing" animation
00015888 6000 0000                  		bra.w	Sonic_ResetScr
0001588C                            ; ===========================================================================
0001588C                            
0001588C                            Sonic_LookUp:
0001588C 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
00015892 6700                       		beq.s	Sonic_Duck	; if not, branch
00015894 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
0001589A 5238 C903                  		addq.b	#1,($FFFFC903).w
0001589E 0C38 0078 C903             		cmp.b	#$78,($FFFFC903).w
000158A4 6500                       		bcs.s	Sonic_ResetScr_Part2
000158A6 11FC 0078 C903             		move.b	#$78,($FFFFC903).w
000158AC 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
000158B2 6700                       		beq.s	loc_12FC2
000158B4 5478 F73E                  		addq.w	#2,($FFFFF73E).w
000158B8 6000                       		bra.s	loc_12FC2
000158BA                            ; ===========================================================================
000158BA                            
000158BA                            Sonic_Duck:
000158BA 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
000158C0 6700                       		beq.s	Sonic_ResetScr	; if not, branch
000158C2 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
000158C8 5238 C903                  		addq.b	#1,($FFFFC903).w
000158CC 0C38 0078 C903             		cmpi.b	#$78,($FFFFC903).w
000158D2 6500                       		bcs.s	Sonic_ResetScr_Part2
000158D4 11FC 0078 C903             		move.b	#$78,($FFFFC903).w
000158DA 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
000158E0 6700                       		beq.s	loc_12FC2
000158E2 5578 F73E                  		subq.w	#2,($FFFFF73E).w
000158E6 6000                       		bra.s	loc_12FC2
000158E8                            ; ===========================================================================
000158E8                            
000158E8                            Sonic_ResetScr:
000158E8 11FC 0000 C903             		move.b	#0,($FFFFC903).w
000158EE                            		
000158EE                            Sonic_ResetScr_Part2:
000158EE 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
000158F4 6700                       		beq.s	loc_12FC2	; if yes, branch
000158F6 6400                       		bcc.s	loc_12FBE
000158F8 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
000158FC                            
000158FC                            loc_12FBE:
000158FC 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
00015900                            
00015900                            loc_12FC2:
00015900 1038 F602                  		move.b	(v_jpadhold2).w,d0
00015904 0200 000C                  		andi.b	#btnL+btnR,d0	; is left/right	pressed?
00015908 6600                       		bne.s	loc_12FEE	; if yes, branch
0001590A 3028 0020                  		move.w	obInertia(a0),d0
0001590E 6700                       		beq.s	loc_12FEE
00015910 6B00                       		bmi.s	loc_12FE2
00015912 9045                       		sub.w	d5,d0
00015914 6400                       		bcc.s	loc_12FDC
00015916 303C 0000                  		move.w	#0,d0
0001591A                            
0001591A                            loc_12FDC:
0001591A 3140 0020                  		move.w	d0,obInertia(a0)
0001591E 6000                       		bra.s	loc_12FEE
00015920                            ; ===========================================================================
00015920                            
00015920                            loc_12FE2:
00015920 D045                       		add.w	d5,d0
00015922 6400                       		bcc.s	loc_12FEA
00015924 303C 0000                  		move.w	#0,d0
00015928                            
00015928                            loc_12FEA:
00015928 3140 0020                  		move.w	d0,obInertia(a0)
0001592C                            
0001592C                            loc_12FEE:
0001592C 4A28 0039                  		tst.b	$39(a0) 	;Peelout
00015930 6600                       		bne.s	loc_1300C 	;Peelout
00015932 1028 0026                  		move.b	obAngle(a0),d0
00015936 4EB9 0000 3A32             		jsr	(CalcSine).l
0001593C C3E8 0020                  		muls.w	obInertia(a0),d1
00015940 E081                       		asr.l	#8,d1
00015942 3141 0010                  		move.w	d1,obVelX(a0)
00015946 C1E8 0020                  		muls.w	obInertia(a0),d0
0001594A E080                       		asr.l	#8,d0
0001594C 3140 0012                  		move.w	d0,obVelY(a0)
00015950                            
00015950                            loc_1300C:
00015950 1028 0026                  		move.b	obAngle(a0),d0
00015954 0600 0040                  		addi.b	#$40,d0
00015958 6B00                       		bmi.s	locret_1307C
0001595A 123C 0040                  		move.b	#$40,d1
0001595E 4A68 0020                  		tst.w	obInertia(a0)
00015962 6700                       		beq.s	locret_1307C
00015964 6B00                       		bmi.s	loc_13024
00015966 4441                       		neg.w	d1
00015968                            
00015968                            loc_13024:
00015968 1028 0026                  		move.b	obAngle(a0),d0
0001596C D001                       		add.b	d1,d0
0001596E 3F00                       		move.w	d0,-(sp)
00015970 6100 0000                  		bsr.w	Sonic_WalkSpeed
00015974 301F                       		move.w	(sp)+,d0
00015976 4A41                       		tst.w	d1
00015978 6A00                       		bpl.s	locret_1307C
0001597A E141                       		asl.w	#8,d1
0001597C 0600 0020                  		addi.b	#$20,d0
00015980 0200 00C0                  		andi.b	#$C0,d0
00015984 6700                       		beq.s	loc_13078
00015986 0C00 0040                  		cmpi.b	#$40,d0
0001598A 6700                       		beq.s	loc_13066
0001598C 0C00 0080                  		cmpi.b	#$80,d0
00015990 6700                       		beq.s	loc_13060
00015992 D368 0010                  		add.w	d1,obVelX(a0)
00015996 08E8 0005 0022             		bset	#5,obStatus(a0)
0001599C 317C 0000 0020             		move.w	#0,obInertia(a0)
000159A2 4E75                       		rts	
000159A4                            ; ===========================================================================
000159A4                            
000159A4                            loc_13060:
000159A4 9368 0012                  		sub.w	d1,obVelY(a0)
000159A8 4E75                       		rts	
000159AA                            ; ===========================================================================
000159AA                            
000159AA                            loc_13066:
000159AA 9368 0010                  		sub.w	d1,obVelX(a0)
000159AE 08E8 0005 0022             		bset	#5,obStatus(a0)
000159B4 317C 0000 0020             		move.w	#0,obInertia(a0)
000159BA 4E75                       		rts	
000159BC                            ; ===========================================================================
000159BC                            
000159BC                            loc_13078:
000159BC D368 0012                  		add.w	d1,obVelY(a0)
000159C0                            
000159C0                            locret_1307C:
000159C0 4E75                       		rts	
000159C2                            ; End of function Sonic_Move
000159C2                            
000159C2                            
000159C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000159C2                            
000159C2                            
000159C2                            Sonic_MoveLeft:
000159C2 3028 0020                  		move.w	obInertia(a0),d0
000159C6 6700                       		beq.s	loc_13086
000159C8 6A00                       		bpl.s	loc_130B2
000159CA                            
000159CA                            loc_13086:
000159CA 08E8 0000 0022             		bset	#0,$22(a0)
000159D0 6600                       		bne.s	loc_1309A
000159D2 08A8 0005 0022             		bclr	#5,$22(a0)
000159D8 117C 0001 001D             		move.b	#1,$1D(a0)
000159DE                            
000159DE                            loc_1309A:
000159DE 9045                       		sub.w	d5,d0
000159E0 3206                       		move.w	d6,d1
000159E2 4441                       		neg.w	d1
000159E4 B041                       		cmp.w	d1,d0
000159E6 6E00                       		bgt.s	loc_130A6
000159E8 D045                       		add.w	d5,d0
000159EA B041                       		cmp.w	d1,d0
000159EC 6F00                       		ble.s	loc_130A6
000159EE 3001                       		move.w	d1,d0
000159F0                            
000159F0                            loc_130A6:
000159F0 3140 0020                  		move.w	d0,obInertia(a0)
000159F4 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
000159FA 4E75                       		rts
000159FC                            ; ===========================================================================
000159FC                            
000159FC                            loc_130B2:
000159FC 9044                       		sub.w	d4,d0
000159FE 6400                       		bcc.s	loc_130BA
00015A00 303C FF80                  		move.w	#-$80,d0
00015A04                            
00015A04                            loc_130BA:
00015A04 3140 0020                  		move.w	d0,obInertia(a0)
00015A08 1228 0026                  		move.b	obAngle(a0),d1
00015A0C 0601 0020                  		addi.b	#$20,d1
00015A10 0201 00C0                  		andi.b	#$C0,d1
00015A14 6600                       		bne.s	locret_130E8
00015A16 0C40 0400                  		cmpi.w	#$400,d0
00015A1A 6D00                       		blt.s	locret_130E8
00015A1C 117C 0000 001C             		move.b	#id_Stop,obAnim(a0) ; use "stopping" animation
00015A22 08A8 0000 0022             		bclr	#0,obStatus(a0)
00015A32 11FC 0006 D1E4                     move.b    #6,($FFFFD1E4).w    ; set the spin dash dust routine to skid dust
00015A38 11FC 0015 D1DA                     move.b    #$15,($FFFFD1DA).w
00015A3E                            		
00015A3E                            locret_130E8:
00015A3E 4E75                       		rts	
00015A40                            ; End of function Sonic_MoveLeft
00015A40                            
00015A40                            
00015A40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015A40                            
00015A40                            
00015A40                            Sonic_MoveRight:
00015A40 3028 0020                  		move.w	obInertia(a0),d0
00015A44 6B00                       		bmi.s	loc_13118
00015A46 08A8 0000 0022             		bclr	#0,$22(a0)
00015A4C 6700                       		beq.s	loc_13104
00015A4E 08A8 0005 0022             		bclr	#5,$22(a0)
00015A54 117C 0001 001D             		move.b	#1,$1D(a0)
00015A5A                            
00015A5A                            loc_13104:
00015A5A D045                       		add.w	d5,d0
00015A5C B046                       		cmp.w	d6,d0
00015A5E 6D00                       		blt.s	loc_1310C
00015A60 9045                       		sub.w	d5,d0
00015A62 B046                       		cmp.w	d6,d0
00015A64 6C00                       		bge.s	loc_1310C
00015A66 3006                       		move.w	d6,d0
00015A68                            
00015A68                            loc_1310C:
00015A68 3140 0020                  		move.w	d0,obInertia(a0)
00015A6C 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
00015A72 4E75                       		rts
00015A74                            ; ===========================================================================
00015A74                            
00015A74                            loc_13118:
00015A74 D044                       		add.w	d4,d0
00015A76 6400                       		bcc.s	loc_13120
00015A78 303C 0080                  		move.w	#$80,d0
00015A7C                            
00015A7C                            loc_13120:
00015A7C 3140 0020                  		move.w	d0,obInertia(a0)
00015A80 1228 0026                  		move.b	obAngle(a0),d1
00015A84 0601 0020                  		addi.b	#$20,d1
00015A88 0201 00C0                  		andi.b	#$C0,d1
00015A8C 6600                       		bne.s	locret_1314E
00015A8E 0C40 FC00                  		cmpi.w	#-$400,d0
00015A92 6E00                       		bgt.s	locret_1314E
00015A94 117C 0000 001C             		move.b	#id_Stop,obAnim(a0) ; use "stopping" animation
00015A9A 08E8 0000 0022             		bset	#0,obStatus(a0)
00015AAA 11FC 0006 D1E4                     move.b    #6,($FFFFD1E4).w    ; set the spin dash dust routine to skid dust
00015AB0 11FC 0015 D1DA                     move.b    #$15,($FFFFD1DA).w
00015AB6                            		
00015AB6                            locret_1314E:
00015AB6 4E75                       		rts	
00015AB8                            ; End of function Sonic_MoveRight
00015AB8                            ; End of function Sonic_MoveRight
00015AB8                            		include	"_incObj\Sonic RollSpeed.asm"
00015AB8                            ; ---------------------------------------------------------------------------
00015AB8                            ; Subroutine to	change Sonic's speed as he rolls
00015AB8                            ; ---------------------------------------------------------------------------
00015AB8                            
00015AB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015AB8                            
00015AB8                            
00015AB8                            Sonic_RollSpeed:
00015AB8 3C38 F760                  		move.w	(v_sonspeedmax).w,d6
00015ABC E346                       		asl.w	#1,d6
00015ABE 7A06                       		moveq	#6,d5	; natural roll deceleration = 1/2 normal acceleration
00015AC0 3838 F764                  		move.w	(v_sonspeeddec).w,d4
00015AC4 E444                       		asr.w	#2,d4
00015AC6 4A38 F7CA                  		tst.b	(f_jumponly).w
00015ACA 6600 0000                  		bne.w	loc_131CC
00015ACE 4A68 003E                  		tst.w	$3E(a0)
00015AD2 6600                       		bne.s	@notright
00015AD4 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
00015ADA 6700                       		beq.s	@notleft	; if not, branch
00015ADC 6100 0000                  		bsr.w	Sonic_RollLeft
00015AE0                            
00015AE0                            	@notleft:
00015AE0 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
00015AE6 6700                       		beq.s	@notright	; if not, branch
00015AE8 6100 0000                  		bsr.w	Sonic_RollRight
00015AEC                            
00015AEC                            	@notright:
00015AEC 3028 0020                  		move.w	obInertia(a0),d0
00015AF0 6700                       		beq.s	loc_131AA
00015AF2 6B00                       		bmi.s	loc_1319E
00015AF4 9045                       		sub.w	d5,d0
00015AF6 6400                       		bcc.s	loc_13198
00015AF8 303C 0000                  		move.w	#0,d0
00015AFC                            
00015AFC                            loc_13198:
00015AFC 3140 0020                  		move.w	d0,obInertia(a0)
00015B00 6000                       		bra.s	loc_131AA
00015B02                            ; ===========================================================================
00015B02                            
00015B02                            loc_1319E:
00015B02 D045                       		add.w	d5,d0
00015B04 6400                       		bcc.s	loc_131A6
00015B06 303C 0000                  		move.w	#0,d0
00015B0A                            
00015B0A                            loc_131A6:
00015B0A 3140 0020                  		move.w	d0,obInertia(a0)
00015B0E                            
00015B0E                            loc_131AA:
00015B0E 4A68 0020                  		tst.w	obInertia(a0)	; is Sonic moving?
00015B12 6600                       		bne.s	loc_131CC	; if yes, branch
00015B14 08A8 0002 0022             		bclr	#2,obStatus(a0)
00015B1A 117C 0013 0016             		move.b	#$13,obHeight(a0)
00015B20 117C 0009 0017             		move.b	#9,obWidth(a0)
00015B26 117C 0000 001C             		move.b	#id_Wait,obAnim(a0) ; use "standing" animation
00015B2C 5B68 000C                  		subq.w	#5,obY(a0)
00015B30                            
00015B30                            loc_131CC:
00015B30 0C78 0060 F73E             		cmp.w	#$60,($FFFFF73E).w
00015B36 6700                       		beq.s	@cont2
00015B38 6400                       		bcc.s	@cont1
00015B3A 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00015B3E                            		
00015B3E                            @cont1:
00015B3E 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00015B42                            		
00015B42                            @cont2:
00015B42 1028 0026                  		move.b	obAngle(a0),d0
00015B46 4EB9 0000 3A32             		jsr	(CalcSine).l
00015B4C C1E8 0020                  		muls.w	obInertia(a0),d0
00015B50 E080                       		asr.l	#8,d0
00015B52 3140 0012                  		move.w	d0,obVelY(a0)
00015B56 C3E8 0020                  		muls.w	obInertia(a0),d1
00015B5A E081                       		asr.l	#8,d1
00015B5C 0C41 1000                  		cmpi.w	#$1000,d1
00015B60 6F00                       		ble.s	loc_131F0
00015B62 323C 1000                  		move.w	#$1000,d1
00015B66                            
00015B66                            loc_131F0:
00015B66 0C41 F000                  		cmpi.w	#-$1000,d1
00015B6A 6C00                       		bge.s	loc_131FA
00015B6C 323C F000                  		move.w	#-$1000,d1
00015B70                            
00015B70                            loc_131FA:
00015B70 3141 0010                  		move.w	d1,obVelX(a0)
00015B74 6000 FDDA                  		bra.w	loc_1300C
00015B78                            ; End of function Sonic_RollSpeed
00015B78                            
00015B78                            
00015B78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015B78                            
00015B78                            
00015B78                            Sonic_RollLeft:
00015B78 3028 0020                  		move.w	obInertia(a0),d0
00015B7C 6700                       		beq.s	loc_1320A
00015B7E 6A00                       		bpl.s	loc_13218
00015B80                            
00015B80                            loc_1320A:
00015B80 08E8 0000 0022             		bset	#0,obStatus(a0)
00015B86 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
00015B8C 4E75                       		rts	
00015B8E                            ; ===========================================================================
00015B8E                            
00015B8E                            loc_13218:
00015B8E 9044                       		sub.w	d4,d0
00015B90 6400                       		bcc.s	loc_13220
00015B92 303C FF80                  		move.w	#-$80,d0
00015B96                            
00015B96                            loc_13220:
00015B96 3140 0020                  		move.w	d0,obInertia(a0)
00015B9A 4E75                       		rts	
00015B9C                            ; End of function Sonic_RollLeft
00015B9C                            
00015B9C                            
00015B9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015B9C                            
00015B9C                            
00015B9C                            Sonic_RollRight:
00015B9C 3028 0020                  		move.w	obInertia(a0),d0
00015BA0 6B00                       		bmi.s	loc_1323A
00015BA2 08A8 0000 0022             		bclr	#0,obStatus(a0)
00015BA8 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
00015BAE 4E75                       		rts	
00015BB0                            ; ===========================================================================
00015BB0                            
00015BB0                            loc_1323A:
00015BB0 D044                       		add.w	d4,d0
00015BB2 6400                       		bcc.s	loc_13242
00015BB4 303C 0080                  		move.w	#$80,d0
00015BB8                            
00015BB8                            loc_13242:
00015BB8 3140 0020                  		move.w	d0,obInertia(a0)
00015BBC 4E75                       		rts	
00015BBE                            ; End of function Sonic_RollRight
00015BBE                            ; End of function Sonic_RollRight
00015BBE                            		include	"_incObj\Sonic JumpDirection.asm"
00015BBE                            ; ---------------------------------------------------------------------------
00015BBE                            ; Subroutine to	change Sonic's direction while jumping
00015BBE                            ; ---------------------------------------------------------------------------
00015BBE                            
00015BBE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015BBE                            
00015BBE                            
00015BBE                            Sonic_JumpDirection:
00015BBE 3C38 F760                  		move.w	($FFFFF760).w,d6
00015BC2 3A38 F762                  		move.w	($FFFFF762).w,d5
00015BC6 E345                       		asl.w	#1,d5
00015BC8 3028 0010                  		move.w	$10(a0),d0	
00015BCC 0838 0002 F602             		btst	#2,($FFFFF602).w; is left being pressed?	
00015BD2 6700                       		beq.s	loc_13278; if not, branch	
00015BD4 08E8 0000 0022             		bset	#0,$22(a0)	
00015BDA 9045                       		sub.w	d5,d0	
00015BDC 3206                       		move.w	d6,d1	
00015BDE 4441                       		neg.w	d1	
00015BE0 B041                       		cmp.w	d1,d0	
00015BE2 6E00                       		bgt.s	loc_13278	
00015BE4 D045                       		add.w	d5,d0		; +++ remove this frame's acceleration change
00015BE6 B041                       		cmp.w	d1,d0		; +++ compare speed with top speed
00015BE8 6F00                       		ble.s	loc_13278	; +++ if speed was already greater than the maximum, branch	
00015BEA 3001                       		move.w	d1,d0
00015BEC                            
00015BEC                            loc_13278:
00015BEC 0838 0003 F602             		btst	#3,($FFFFF602).w; is right being pressed?	
00015BF2 6700                       		beq.s	Obj01_JumpMove; if not, branch	
00015BF4 08A8 0000 0022             		bclr	#0,$22(a0)	
00015BFA D045                       		add.w	d5,d0	
00015BFC B046                       		cmp.w	d6,d0	
00015BFE 6D00                       		blt.s	Obj01_JumpMove
00015C00 9045                       		sub.w	d5,d0		; +++ remove this frame's acceleration change
00015C02 B046                       		cmp.w	d6,d0		; +++ compare speed with top speed
00015C04 6C00                       		bge.s	Obj01_JumpMove	; +++ if speed was already greater than the maximum, branch
00015C06 3006                       		move.w	d6,d0
00015C08                            
00015C08                            Obj01_JumpMove:
00015C08 3140 0010                  		move.w	d0,obVelX(a0)	; change Sonic's horizontal speed
00015C0C                            
00015C0C                            Obj01_ResetScr2:
00015C0C 0C78 0060 F73E             		cmpi.w	#$60,(v_lookshift).w ; is the screen in its default position?
00015C12 6700                       		beq.s	loc_132A4	; if yes, branch
00015C14 6400                       		bcc.s	loc_132A0
00015C16 5878 F73E                  		addq.w	#4,(v_lookshift).w
00015C1A                            
00015C1A                            loc_132A0:
00015C1A 5578 F73E                  		subq.w	#2,(v_lookshift).w
00015C1E                            
00015C1E                            loc_132A4:
00015C1E 0C68 FC00 0012             		cmpi.w	#-$400,obVelY(a0) ; is Sonic moving faster than -$400 upwards?
00015C24 6500                       		bcs.s	locret_132D2	; if yes, branch
00015C26 3028 0010                  		move.w	obVelX(a0),d0
00015C2A 3200                       		move.w	d0,d1
00015C2C EA41                       		asr.w	#5,d1
00015C2E 6700                       		beq.s	locret_132D2
00015C30 6B00                       		bmi.s	loc_132C6
00015C32 9041                       		sub.w	d1,d0
00015C34 6400                       		bcc.s	loc_132C0
00015C36 303C 0000                  		move.w	#0,d0
00015C3A                            
00015C3A                            loc_132C0:
00015C3A 3140 0010                  		move.w	d0,obVelX(a0)
00015C3E 4E75                       		rts	
00015C40                            ; ===========================================================================
00015C40                            
00015C40                            loc_132C6:
00015C40 9041                       		sub.w	d1,d0
00015C42 6500                       		bcs.s	loc_132CE
00015C44 303C 0000                  		move.w	#0,d0
00015C48                            
00015C48                            loc_132CE:
00015C48 3140 0010                  		move.w	d0,obVelX(a0)
00015C4C                            
00015C4C                            locret_132D2:
00015C4C 4E75                       		rts	
00015C4E                            ; End of function Sonic_JumpDirection
00015C4E                            ; End of function Sonic_JumpDirection
00015C4E                            		include "_incObj\Sonic Peelout.asm"
00015C4E                            ; ---------------------------------------------------------------------------
00015C4E                            ; Subroutine to make Sonic perform a peelout
00015C4E                            ; ---------------------------------------------------------------------------
00015C4E                            ; If you use this makes sure to search for ;Peelout in Sonic1.asm
00015C4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015C4E                            
00015C4E                            Sonic_Peelout:
00015C4E 0828 0001 0039             		btst	#1,$39(a0)
00015C54 6600                       		bne.s	SCDPeelout_Launch
00015C56 0C28 0007 001C             		cmpi.b	#7,$1C(a0) ;check to see if your looking up
00015C5C 6600                       		bne.s	@return
00015C5E 1038 F603                  		move.b	($FFFFF603).w,d0
00015C62 0200 0070                  		andi.b	#%01110000,d0
00015C66 6700 0000                  		beq.w	@return
00015C6A 117C 0001 001C             		move.b	#1,$1C(a0)
00015C70 317C 0000 003A             		move.w	#0,$3A(a0)
00015C76 303C 00D2                  		move.w	#$D2,d0
00015C7A 4EB9 0000 1250             		jsr	(PlaySound_Special).l 		; Play peelout charge sound
00015C80                            	;	sfx 	sfx_PeeloutCharge 		; These are if you use AMPS
00015C80 588F                       		addq.l	#4,sp
00015C82 08E8 0001 0039             		bset	#1,$39(a0)
00015C88                            		
00015C88 4268 0020                  		clr.w	obInertia(a0)
00015C8C                             
00015C8C 6100 0000                  		bsr.w	Sonic_LevelBound
00015C90 6100 0000                  		bsr.w	Sonic_AnglePos
00015C94                             
00015C94                            	@return:
00015C94 4E75                       		rts	
00015C96                            ; ---------------------------------------------------------------------------
00015C96                             
00015C96                            SCDPeelout_Launch:
00015C96 0828 0001 0039             		btst	#1,$39(a0)
00015C9C 1038 F602                  		move.b	($FFFFF602).w,d0
00015CA0 0800 0000                  		btst	#0,d0
00015CA4 6600 0000                  		bne.w	SCDPeelout_Charge
00015CA8 08A8 0001 0039             		bclr	#1,$39(a0)	; stop Dashing
00015CAE 0C28 001E 003A             		cmpi.b	#$1E,$3A(a0)	; have we been charging long enough?
00015CB4 6600 0000                  		bne.w	SCDPeelout_Stop_Sound
00015CB8 117C 0000 001C             		move.b	#0,$1C(a0)	; launches here (peelout sprites)
00015CBE 317C 0001 0010             		move.w	#1,$10(a0)	; force X speed to nonzero for camera lag's benefit
00015CC4 3028 0020                  		move.w	obInertia(a0),d0
00015CC8 0440 0800                  		subi.w	#$800,d0
00015CCC D040                       		add.w	d0,d0
00015CCE 0240 1F00                  		andi.w	#$1F00,d0
00015CD2 4440                       		neg.w	d0
00015CD4 0640 2000                  		addi.w	#$2000,d0
00015CD8 31C0 C904                  		move.w	d0,($FFFFC904).w
00015CDC 0828 0000 0022             		btst	#0,$22(a0)
00015CE2 6700                       		beq.s	@dontflip
00015CE4 4468 0020                  		neg.w	obInertia(a0)
00015CE8                             
00015CE8                            @dontflip:
00015CE8 08A8 0007 0022             		bclr	#7,$22(a0)
00015CEE 303C 00D3                  		move.w	#$D3,d0
00015CF2 4EB9 0000 1250             		jsr	(PlaySound_Special).l
00015CF8                            	;	sfx 	sfx_PeeloutRelease
00015CF8 1028 0026                  		move.b	obAngle(a0),d0
00015CFC 4EB9 0000 3A32             		jsr	(CalcSine).l
00015D02 C3E8 0020                  		muls.w	obInertia(a0),d1
00015D06 E081                       		asr.l	#8,d1
00015D08 3141 0010                  		move.w	d1,obVelX(a0)
00015D0C C1E8 0020                  		muls.w	obInertia(a0),d0
00015D10 E080                       		asr.l	#8,d0
00015D12 3140 0012                  		move.w	d0,obVelY(a0)	
00015D16 6000 0000                  		bra.w	SCDPeelout_ResetScr
00015D1A                            ; ---------------------------------------------------------------------------
00015D1A                             
00015D1A                            SCDPeelout_Charge:				; If still charging the dash...
00015D1A 3238 F760                  		move.w	($FFFFF760).w,d1	; get top peelout speed
00015D1E 3401                       		move.w	d1,d2
00015D20 D241                       		add.w	d1,d1
00015D22 4A38 FE2E                  		tst.b   ($FFFFFE2E).w 		; test for speed shoes
00015D26 6700                       		beq.s	@noshoes
00015D28 E242                       		asr.w	#1,d2
00015D2A 9242                       		sub.w	d2,d1
00015D2C                            
00015D2C                            @noshoes:
00015D2C 0668 0064 0020             		addi.w	#$64,obInertia(a0)		; increment speed
00015D32 B268 0020                  		cmp.w	obInertia(a0),d1
00015D36 6E00                       		bgt.s	@inctimer
00015D38 3141 0020                  		move.w	d1,obInertia(a0)
00015D3C                            
00015D3C                            @inctimer:
00015D3C 5228 003A                  		addq.b	#1,$3A(a0)		; increment timer
00015D40 0C28 001E 003A             		cmpi.b	#$1E,$3A(a0)
00015D46 6500                       		bcs.s	SCDPeelout_ResetScr
00015D48 117C 001E 003A             		move.b	#$1E,$3A(a0)
00015D4E 4EF9 0000 0000             		jmp 	SCDPeelout_ResetScr
00015D54                            		
00015D54                            SCDPeelout_Stop_Sound:
00015D54 303C 00D4                  		move.w	#$D4,d0
00015D58 4EB9 0000 1250             		jsr		(PlaySound_Special).l
00015D5E                            	;	sfx 	sfx_PeeloutStop
00015D5E 4268 0020                  		clr.w	obInertia(a0)
00015D62                            
00015D62                            SCDPeelout_ResetScr:
00015D62 588F                       		addq.l	#4,sp			; increase stack ptr ; was 4
00015D64 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00015D6A 6700                       		beq.s	@finish
00015D6C 6400                       		bcc.s	@skip
00015D6E 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00015D72                             
00015D72                            	@skip:
00015D72 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00015D76                             
00015D76                            	@finish:
00015D76 6100 0000                  		bsr.w	Sonic_LevelBound
00015D7A 6100 0000                  		bsr.w	Sonic_AnglePos
00015D7E 4E75                       		rts
00015D80                            		
00015D80                            		
00015D80                            		include "_incObj\Sonic Spindash.asm"
00015D80                            ; ---------------------------------------------------------------------------
00015D80                            ; Subroutine to make Sonic perform a spindash
00015D80                            ; ---------------------------------------------------------------------------
00015D80                             
00015D80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015D80                             
00015D80                             
00015D80                            Sonic_SpinDash:
00015D80 4A28 0039                  		tst.b	f_spindash(a0)			; already Spin Dashing?
00015D84 6600                       		bne.s	loc2_1AC8E		; if set, branch
00015D86 0C28 0000 001C             		cmpi.b	#id_duck,obAnim(a0)		; is anim duck
00015D8C 6600                       		bne.s	locret2_1AC8C		; if not, return
00015D8E 1038 F603                  		move.b	(v_jpadpress2).w,d0	; read controller
00015D92 0200 0070                  		andi.b	#$70,d0			; pressing A/B/C ?
00015D96 6700 0000                  		beq.w	locret2_1AC8C		; if not, return
00015D9A 117C 0000 001C             		move.b	#id_spindash,obAnim(a0)		; set Spin Dash anim (9 in s2)
00015DA0 303C 00D5                  		move.w	#$D5,d0			; spin sound ($E0 in s2)
00015DA4 4EB9 0000 1250             		jsr	(PlaySound_Special).l	; play spin sound
00015DAA 588F                       		addq.l	#4,sp			; Add 4 bytes to the stack return address to skip Sonic_Jump on next rts to Obj01_MdNormal, preventing conflicts with button presses.
00015DAC 117C 0001 0039             		move.b	#1,f_spindash(a0)		; set Spin Dash flag
00015DB2 317C 0000 003A             		move.w	#0,$3A(a0)		; set charge count to 0
00015DB8                            		;cmpi.b	#$C,$28(a0)		; ??? oxygen remaining?
00015DB8                            		;bcs.s	loc2_1AC84		; ??? branch if carry
00015DB8 11FC 0002 D1DC             		move.b	#2,($FFFFD1DC).w	; Set the Spin Dash dust animation to $2.
00015DBE                            						; the smoke/dust object
00015DBE                            loc2_1AC84:
00015DBE 6100 0000                  		bsr.w	Sonic_LevelBound
00015DC2 6100 0000                  		bsr.w	Sonic_AnglePos
00015DC6                            
00015DC6                            locret2_1AC8C:
00015DC6 4E75                       		rts	
00015DC8                            ; ---------------------------------------------------------------------------
00015DC8                            
00015DC8                            loc2_1AC8E:	
00015DC8 117C 001F 001C             		move.b	#$1F,$1C(a0)
00015DCE 1038 F602                  		move.b	(v_jpadhold2).w,d0	; read controller
00015DD2 0800 0001                  		btst	#1,d0			; check down button
00015DD6 6600 0000                  		bne.w	loc2_1AD30		; if set, branch
00015DDA 117C 000E 0016             		move.b	#$E,$16(a0)		; $16(a0) is height/2
00015DE0 117C 0007 0017             		move.b	#7,$17(a0)		; $17(a0) is width/2
00015DE6 117C 0000 001C             		move.b	#id_roll,obAnim(a0)		; set animation to roll
00015DEC 5A68 000C                  		addq.w	#5,$C(a0)		; $C(a0) is Y coordinate
00015DF0 117C 0000 0039             		move.b	#0,f_spindash(a0)		; clear Spin Dash flag
00015DF6 7000                       		moveq	#0,d0
00015DF8 1028 003A                  		move.b	$3A(a0),d0		; copy charge count
00015DFC D040                       		add.w	d0,d0			; double it
00015DFE 317B 0000 0020             		move.w	Dash_Speeds(pc,d0.w),obInertia(a0) ; get normal speed
00015E04 3028 0020                  		move.w	obInertia(a0),d0		; get inertia
00015E08 0440 0800                  		subi.w	#$800,d0		; subtract $800
00015E0C D040                       		add.w	d0,d0			; double it
00015E0E 0240 1F00                  		andi.w	#$1F00,d0		; mask it against $1F00
00015E12 4440                       		neg.w	d0			; negate it
00015E14 0640 2000                  		addi.w	#$2000,d0		; add $2000
00015E18 31C0 C904                  		move.w	d0,($FFFFC904).w	; move to $EED0
00015E1C 0828 0000 0022             		btst	#0,$22(a0)		; is sonic facing right?
00015E22 6700                       		beq.s	loc2_1ACF4		; if not, branch
00015E24 4468 0020                  		neg.w	obInertia(a0)			; negate inertia
00015E28                            
00015E28                            loc2_1ACF4:
00015E28 08E8 0002 0022             		bset	#2,$22(a0)		; set unused (in s1) flag
00015E2E 11FC 0000 D1DC             		move.b	#0,($FFFFD1DC).w	; clear Spin Dash dust animation.
00015E34 303C 00BC                  		move.w	#$BC,d0			; spin release sound
00015E38 4EB9 0000 1250             		jsr	(PlaySound_Special).l	; play it!
00015E3E 1028 0026                  		move.b	obAngle(a0),d0
00015E42 4EB9 0000 3A32             		jsr	(CalcSine).l
00015E48 C3E8 0020                  		muls.w	obInertia(a0),d1
00015E4C E081                       		asr.l	#8,d1
00015E4E 3141 0010                  		move.w	d1,obVelX(a0)
00015E52 C1E8 0020                  		muls.w	obInertia(a0),d0
00015E56 E080                       		asr.l	#8,d0
00015E58 3140 0012                  		move.w	d0,obVelY(a0)
00015E5C                            	
00015E5C 6000                       		bra.s	loc2_1AD78
00015E5E                            ; ===========================================================================
00015E5E                            Dash_Speeds:
00015E5E 0600                       		dc.w  $600		; 0
00015E60 0680                       		dc.w  $680		; 1
00015E62 0700                       		dc.w  $700		; 2
00015E64 0780                       		dc.w  $780		; 3
00015E66 0800                       		dc.w  $800		; 4
00015E68 0880                       		dc.w  $880		; 5
00015E6A 0900                       		dc.w  $900		; 6
00015E6C 0980                       		dc.w  $980		; 7
00015E6E 0A00                       		dc.w  $A00		; 8
00015E70                            ; ===========================================================================
00015E70                            
00015E70                            loc2_1AD30:				; If still charging the dash...
00015E70 4A68 003A                  		tst.w	$3A(a0)		; check charge count
00015E74 6700                       		beq.s	loc2_1AD48	; if zero, branch
00015E76 3028 003A                  		move.w	$3A(a0),d0	; otherwise put it in d0
00015E7A EA48                       		lsr.w	#5,d0		; shift right 5 (divide it by 32)
00015E7C 9168 003A                  		sub.w	d0,$3A(a0)	; subtract from charge count
00015E80 6400                       		bcc.s	loc2_1AD48	; ??? branch if carry clear
00015E82 317C 0000 003A             		move.w	#0,$3A(a0)	; set charge count to 0
00015E88                            
00015E88                            loc2_1AD48:
00015E88 1038 F603                  		move.b	(v_jpadpress2).w,d0	; read controller
00015E8C 0200 0070                  		andi.b	#$70,d0			; pressing A/B/C?
00015E90 6700 0000                  		beq.w	loc2_1AD78		; if not, branch
00015E94 317C 1F00 001C             		move.w	#$1F00,obAnim(a0)	; reset spdsh animation
00015E9A 303C 00D5                  		move.w	#$D5,d0			; was $E0 in sonic 2
00015E9E 11FC 0002 D1DC             		move.b	#2,$FFFFD1DC.w		; Set the Spin Dash dust animation to $2.
00015EA4 4EB9 0000 1250             		jsr	(PlaySound_Special).l	; play charge sound
00015EAA 0668 0200 003A             		addi.w	#$200,$3A(a0)		; increase charge count
00015EB0 0C68 0800 003A             		cmpi.w	#$800,$3A(a0)		; check if it's maxed
00015EB6 6500                       		bcs.s	loc2_1AD78		; if not, then branch
00015EB8 317C 0800 003A             		move.w	#$800,$3A(a0)		; reset it to max
00015EBE                            
00015EBE                            loc2_1AD78:
00015EBE 588F                       		addq.l	#4,sp			; Add 4 bytes to the stack return address to skip Sonic_Jump on next rts to Obj01_MdNormal, preventing conflicts with button presses.
00015EC0 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w	; $EED8 only ever seems
00015EC6 6700                       		beq.s	loc2_1AD8C		; to be used in Spin Dash
00015EC8 6400                       		bcc.s	loc2_1AD88
00015ECA 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00015ECE                            
00015ECE                            loc2_1AD88:
00015ECE 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00015ED2                            
00015ED2                            loc2_1AD8C:
00015ED2 6100 0000                  		bsr.w	Sonic_LevelBound
00015ED6 6100 0000                  		bsr.w	Sonic_AnglePos
00015EDA                            		;move.w	#$60,(v_lookshift).w	; reset looking up/down
00015EDA 4E75                       		rts
00015EDC                            ; End of subroutine Sonic_SpinDash
00015EDC                            ; End of subroutine Sonic_SpinDash
00015EDC                            
00015EDC                            Sonic_AirRoll:
00015EDC 0C28 0000 001C             	cmpi.b  #id_spring,$1C(a0)      ; is sonic in the spring animation?
00015EE2 6600                               bne.s   AirRoll_Return   ; if not, return
00015EE4                            
00015EE4                            AirRoll_CheckBtn:
00015EE4 1038 F603                          move.b	($FFFFF603).w,d0 ; Move $FFFFF603 to d0
00015EE8 0200 0070                          andi.b	#btnABC,d0 ; Has A/B/C been pressed?
00015EEC 6700                               beq.s	AirRoll_Return
00015EEE 117C 0000 001C             	move.b	#id_roll,$1C(a0) ; Set Sonic's animation to rolling.
00015EF4                                   ; move.w	#$BC,d0
00015EF4                                   ; jsr	(PlaySound_Special).l ;    play Sonic rolling sound
00015EF4                            
00015EF4                            AirRoll_Return:
00015EF4 4E75                               rts
00015EF6                            ; ===========================================================================
00015EF6                            ; ---------------------------------------------------------------------------
00015EF6                            ; Unused subroutine to squash Sonic
00015EF6                            ; ---------------------------------------------------------------------------
00015EF6 1028 0026                  		move.b	obAngle(a0),d0
00015EFA 0600 0020                  		addi.b	#$20,d0
00015EFE 0200 00C0                  		andi.b	#$C0,d0
00015F02 6600                       		bne.s	locret_13302
00015F04 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00015F08 4A41                       		tst.w	d1
00015F0A 6A00                       		bpl.s	locret_13302
00015F0C 317C 0000 0020             		move.w	#0,obInertia(a0) ; stop Sonic moving
00015F12 317C 0000 0010             		move.w	#0,obVelX(a0)
00015F18 317C 0000 0012             		move.w	#0,obVelY(a0)
00015F1E 117C 0000 001C             		move.b	#id_Warp3,obAnim(a0) ; use "warping" animation
00015F24                            
00015F24                            locret_13302:
00015F24 4E75                       		rts		
00015F26                            		include	"_incObj\Sonic LevelBound.asm"
00015F26                            ; ---------------------------------------------------------------------------
00015F26                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
00015F26                            ; ---------------------------------------------------------------------------
00015F26                            
00015F26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015F26                            
00015F26                            
00015F26                            Sonic_LevelBound:
00015F26 2228 0008                  		move.l	obX(a0),d1
00015F2A 3028 0010                  		move.w	obVelX(a0),d0
00015F2E 48C0                       		ext.l	d0
00015F30 E180                       		asl.l	#8,d0
00015F32 D280                       		add.l	d0,d1
00015F34 4841                       		swap	d1
00015F36 3038 F728                  		move.w	(v_limitleft2).w,d0
00015F3A 0640 0010                  		addi.w	#$10,d0
00015F3E B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00015F40 6200                       		bhi.s	@sides		; if yes, branch
00015F42 3038 F72A                  		move.w	(v_limitright2).w,d0
00015F46 0640 0128                  		addi.w	#$128,d0
00015F4A 4A38 F7AA                  		tst.b	(f_lockscreen).w
00015F4E 6600                       		bne.s	@screenlocked
00015F50 0640 0040                  		addi.w	#$40,d0
00015F54                            
00015F54                            	@screenlocked:
00015F54 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00015F56 6300                       		bls.s	@sides		; if yes, branch
00015F58                            
00015F58                            	@chkbottom:
00015F58 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00015F5C 0640 00E0                  		addi.w	#$E0,d0
00015F60 B068 000C                  		cmp.w	obY(a0),d0	; has Sonic touched the	bottom boundary?
00015F64 6D00                       		blt.s	@bottom		; if yes, branch
00015F66 4E75                       		rts	
00015F68                            ; ===========================================================================
00015F68                            
00015F68                            @bottom:
00015F68 3038 F726                  		move.w (v_limitbtm1).w,d0 
00015F6C 3238 F72E                  		move.w (v_limitbtm2).w,d1 
00015F70 B240                       		cmp.w d0,d1 ; screen still scrolling down? 
00015F72 6D00                       		blt.s @dontkill; if so, don't kill Sonic 
00015F74 0C78 0501 FE10             		cmpi.w	#(id_SBZ<<8)+1,(v_zone).w ; is level SBZ2 ?
00015F7A 6600 0000                  		bne.w	Kill_transport	; if not, kill Sonic
00015F7E 0C78 2000 D008             		cmpi.w	#$2000,(v_player+obX).w
00015F84 6500 0000                  		bcs.w	Kill_transport
00015F88 4238 FE30                  		clr.b	(v_lastlamp).w	; clear	lamppost counter
00015F8C 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart the level
00015F92 31FC 0103 FE10             		move.w	#(id_LZ<<8)+3,(v_zone).w ; set level to SBZ3 (LZ4)
00015F98 4E75                       		rts	
00015F9A                            @dontkill: 
00015F9A 4E75                       		rts
00015F9C                            ; ===========================================================================
00015F9C                            
00015F9C                            @sides:
00015F9C 3140 0008                  		move.w	d0,obX(a0)
00015FA0 317C 0000 000A             		move.w	#0,obX+2(a0)
00015FA6 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop Sonic moving
00015FAC 317C 0000 0020             		move.w	#0,obInertia(a0)
00015FB2 60A4                       		bra.s	@chkbottom
00015FB4                            
00015FB4                            Kill_transport: 
00015FB4 4EF9 0000 0000                     	jmp        (KillSonic).l
00015FBA                            
00015FBA                            ; End of function Sonic_LevelBound
00015FBA                            ; End of function Sonic_LevelBound
00015FBA                            		include	"_incObj\Sonic Roll.asm"
00015FBA                            ; ---------------------------------------------------------------------------
00015FBA                            ; Subroutine allowing Sonic to roll when he's moving
00015FBA                            ; ---------------------------------------------------------------------------
00015FBA                            
00015FBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015FBA                            
00015FBA                            
00015FBA                            Sonic_Roll:
00015FBA 4A38 F7CA                  		tst.b	(f_jumponly).w
00015FBE 6600                       		bne.s	@noroll
00015FC0 3028 0020                  		move.w	obInertia(a0),d0
00015FC4 6A00                       		bpl.s	@ispositive
00015FC6 4440                       		neg.w	d0
00015FC8                            
00015FC8                            	@ispositive:
00015FC8 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00015FCC 6500                       		bcs.s	@noroll		; if not, branch
00015FCE 1038 F602                  		move.b	(v_jpadhold2).w,d0
00015FD2 0200 000C                  		andi.b	#btnL+btnR,d0	; is left/right	being pressed?
00015FD6 6600                       		bne.s	@noroll		; if yes, branch
00015FD8 0838 0001 F602             		btst	#bitDn,(v_jpadhold2).w ; is down being pressed?
00015FDE 6600                       		bne.s	Sonic_ChkRoll	; if yes, branch
00015FE0                            
00015FE0                            	@noroll:
00015FE0 4E75                       		rts	
00015FE2                            ; ===========================================================================
00015FE2                            
00015FE2                            Sonic_ChkRoll:
00015FE2 0828 0002 0022             		btst	#2,obStatus(a0)	; is Sonic already rolling?
00015FE8 6700                       		beq.s	@roll		; if not, branch
00015FEA 4E75                       		rts	
00015FEC                            ; ===========================================================================
00015FEC                            
00015FEC                            @roll:
00015FEC 08E8 0002 0022             		bset	#2,obStatus(a0)
00015FF2 117C 000E 0016             		move.b	#$E,obHeight(a0)
00015FF8 117C 0007 0017             		move.b	#7,obWidth(a0)
00015FFE 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
00016004 5A68 000C                  		addq.w	#5,obY(a0)
00016012 4A68 0020                  		tst.w	obInertia(a0)
00016016 6600                       		bne.s	@ismoving
00016018 317C 0200 0020             		move.w	#$200,obInertia(a0) ; set inertia if 0
0001601E                            
0001601E                            	@ismoving:
0001601E 4E75                       		rts	
00016020                            ; End of function Sonic_Roll
00016020                            ; End of function Sonic_Roll
00016020                            		include	"_incObj\Sonic Jump.asm"
00016020                            ; ---------------------------------------------------------------------------
00016020                            ; Subroutine allowing Sonic to jump
00016020                            ; ---------------------------------------------------------------------------
00016020                            
00016020                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016020                            
00016020                            
00016020                            Sonic_Jump:
00016020 1038 F603                  		move.b	(v_jpadpress2).w,d0
00016024 0200 0070                  		andi.b	#btnABC,d0	; is A, B or C pressed?
00016028 6700 0000                  		beq.w	locret_1348E	; if not, branch
0001602C 7000                       		moveq	#0,d0
0001602E 1028 0026                  		move.b	obAngle(a0),d0
00016032 0600 0080                  		addi.b	#$80,d0
00016036 6100 0000                  		bsr.w	sub_14D48
0001603A 0C41 0006                  		cmpi.w	#6,d1
0001603E 6D00 0000                  		blt.w	locret_1348E
00016042 343C 0680                  		move.w	#$680,d2
00016046 0828 0006 0022             		btst	#6,obStatus(a0)
0001604C 6700                       		beq.s	loc_1341C
0001604E 343C 0380                  		move.w	#$380,d2
00016052                            
00016052                            loc_1341C:
00016052 7000                       		moveq	#0,d0
00016054 1028 0026                  		move.b	obAngle(a0),d0
00016058 0400 0040                  		subi.b	#$40,d0
0001605C 4EB9 0000 3A32             		jsr	(CalcSine).l
00016062 C3C2                       		muls.w	d2,d1
00016064 E081                       		asr.l	#8,d1
00016066 D368 0010                  		add.w	d1,obVelX(a0)	; make Sonic jump
0001606A C1C2                       		muls.w	d2,d0
0001606C E080                       		asr.l	#8,d0
0001606E D168 0012                  		add.w	d0,obVelY(a0)	; make Sonic jump
00016072 08E8 0001 0022             		bset	#1,obStatus(a0)
00016078 08A8 0005 0022             		bclr	#5,obStatus(a0)
0001607E 588F                       		addq.l	#4,sp
00016080 117C 0001 003C             		move.b	#1,$3C(a0)
00016086 4228 0038                  		clr.b	$38(a0)
00016094 117C 0013 0016             		move.b	#$13,obHeight(a0)
0001609A 117C 0009 0017             		move.b	#9,obWidth(a0)
000160A0 117C 000E 0016             		move.b	#$E,obHeight(a0)
000160A6 117C 0007 0017             		move.b	#7,obWidth(a0)
000160AC                            Result_Check:
000160AC 4A38 F5C2                  		tst.b   ($FFFFF5C2).w ; Has the victory animation flag been set?
000160B0 6700                       		beq.s   NormalJump ; If not, branch
000160B2 117C 0013 001C             		move.b  #$13,$1C(a0) ; Play the victory animation
000160B8 6000                       		bra.s   cont ; Continue
000160BA                            NormalJump:
000160BA 117C 0002 001C             		move.b  #2,$1C(a0)    ; use "jumping"    animation
000160C0                            cont:
000160C0 08E8 0002 0022             		bset	#2,obStatus(a0)
000160C6 5A68 000C                  		addq.w	#5,obY(a0)
000160CA                            
000160CA                            locret_1348E:
000160CA 4E75                       		rts	
000160CC                            ; ===========================================================================
000160CC                            
000160CC                            ; End of function Sonic_Jump
000160CC                            ; End of function Sonic_Jump
000160CC                            		include	"_incObj\Sonic JumpHeight.asm"
000160CC                            ; ---------------------------------------------------------------------------
000160CC                            ; Subroutine controlling Sonic's jump height/duration
000160CC                            ; ---------------------------------------------------------------------------
000160CC                            
000160CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000160CC                            
000160CC                            
000160CC                            Sonic_JumpHeight:
000160CC 4A28 003C                  		tst.b	$3C(a0)
000160D0 6700                       		beq.s	loc_134C4
000160D2 323C FC00                  		move.w	#-$400,d1
000160D6 0828 0006 0022             		btst	#6,obStatus(a0)
000160DC 6700                       		beq.s	loc_134AE
000160DE 323C FE00                  		move.w	#-$200,d1
000160E2                            
000160E2                            loc_134AE:
000160E2 B268 0012                  		cmp.w	obVelY(a0),d1
000160E6 6F00                       		ble.s	locret_134C2
000160E8 1038 F602                  		move.b	(v_jpadhold2).w,d0
000160EC 0200 0070                  		andi.b	#btnABC,d0	; is A, B or C pressed?
000160F0 6600                       		bne.s	locret_134C2	; if yes, branch
000160F2 3141 0012                  		move.w	d1,obVelY(a0)
000160F6                            
000160F6                            locret_134C2:
000160F6 4E75                       		rts	
000160F8                            ; ===========================================================================
000160F8                            
000160F8                            loc_134C4:
000160F8 0C68 F040 0012             		cmpi.w	#-$FC0,obVelY(a0)
000160FE 6C00                       		bge.s	locret_134D2
00016100 317C F040 0012             		move.w	#-$FC0,obVelY(a0)
00016106                            
00016106                            locret_134D2:
00016106 4E75                       		rts	
00016108                            ; End of function Sonic_JumpHeight
00016108                            ; End of function Sonic_JumpHeight
00016108                            		include	"_incObj\Sonic SlopeResist.asm"
00016108                            ; ---------------------------------------------------------------------------
00016108                            ; Subroutine to	slow Sonic walking up a	slope
00016108                            ; ---------------------------------------------------------------------------
00016108                            
00016108                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016108                            
00016108                            
00016108                            Sonic_SlopeResist:
00016108 1028 0026                  		move.b	obAngle(a0),d0
0001610C 0600 0060                  		addi.b	#$60,d0
00016110 0C00 00C0                  		cmpi.b	#$C0,d0
00016114 6400                       		bcc.s	locret_13508
00016116 1028 0026                  		move.b	obAngle(a0),d0
0001611A 4EB9 0000 3A32             		jsr	(CalcSine).l
00016120 C1FC 0020                  		muls.w	#$20,d0
00016124 E080                       		asr.l	#8,d0
00016126 4A68 0020                  		tst.w	obInertia(a0)
0001612A 6700                       		beq.s	locret_13508
0001612C 6B00                       		bmi.s	loc_13504
0001612E 4A40                       		tst.w	d0
00016130 6700                       		beq.s	locret_13502
00016132 D168 0020                  		add.w	d0,obInertia(a0) ; change Sonic's inertia
00016136                            
00016136                            locret_13502:
00016136 4E75                       		rts	
00016138                            ; ===========================================================================
00016138                            
00016138                            loc_13504:
00016138 D168 0020                  		add.w	d0,obInertia(a0)
0001613C                            
0001613C                            locret_13508:
0001613C 4E75                       		rts	
0001613E                            ; End of function Sonic_SlopeResist
0001613E                            ; End of function Sonic_SlopeResist
0001613E                            		include	"_incObj\Sonic RollRepel.asm"
0001613E                            ; ---------------------------------------------------------------------------
0001613E                            ; Subroutine to	push Sonic down	a slope	while he's rolling
0001613E                            ; ---------------------------------------------------------------------------
0001613E                            
0001613E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001613E                            
0001613E                            
0001613E                            Sonic_RollRepel:
0001613E 1028 0026                  		move.b	obAngle(a0),d0
00016142 0600 0060                  		addi.b	#$60,d0
00016146 0C00 00C0                  		cmpi.b	#-$40,d0
0001614A 6400                       		bcc.s	locret_13544
0001614C 1028 0026                  		move.b	obAngle(a0),d0
00016150 4EB9 0000 3A32             		jsr	(CalcSine).l
00016156 C1FC 0050                  		muls.w	#$50,d0
0001615A E080                       		asr.l	#8,d0
0001615C 4A68 0020                  		tst.w	obInertia(a0)
00016160 6B00                       		bmi.s	loc_1353A
00016162 4A40                       		tst.w	d0
00016164 6A00                       		bpl.s	loc_13534
00016166 E480                       		asr.l	#2,d0
00016168                            
00016168                            loc_13534:
00016168 D168 0020                  		add.w	d0,obInertia(a0)
0001616C 4E75                       		rts	
0001616E                            ; ===========================================================================
0001616E                            
0001616E                            loc_1353A:
0001616E 4A40                       		tst.w	d0
00016170 6B00                       		bmi.s	loc_13540
00016172 E480                       		asr.l	#2,d0
00016174                            
00016174                            loc_13540:
00016174 D168 0020                  		add.w	d0,obInertia(a0)
00016178                            
00016178                            locret_13544:
00016178 4E75                       		rts	
0001617A                            ; End of function Sonic_RollRepel
0001617A                            ; End of function Sonic_RollRepel
0001617A                            		include	"_incObj\Sonic SlopeRepel.asm"
0001617A                            ; ---------------------------------------------------------------------------
0001617A                            ; Subroutine to	push Sonic down	a slope
0001617A                            ; ---------------------------------------------------------------------------
0001617A                            
0001617A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001617A                            
0001617A                            
0001617A                            Sonic_SlopeRepel:
0001617A 4E71                       		nop	
0001617C 4A28 0038                  		tst.b	$38(a0)
00016180 6600                       		bne.s	locret_13580
00016182 4A68 003E                  		tst.w	$3E(a0)
00016186 6600                       		bne.s	loc_13582
00016188 1028 0026                  		move.b	obAngle(a0),d0
0001618C 0600 0020                  		addi.b	#$20,d0
00016190 0200 00C0                  		andi.b	#$C0,d0
00016194 6700                       		beq.s	locret_13580
00016196 3028 0020                  		move.w	obInertia(a0),d0
0001619A 6A00                       		bpl.s	loc_1356A
0001619C 4440                       		neg.w	d0
0001619E                            
0001619E                            loc_1356A:
0001619E 0C40 0280                  		cmpi.w	#$280,d0
000161A2 6400                       		bcc.s	locret_13580
000161A4 4268 0020                  		clr.w	obInertia(a0)
000161A8 08E8 0001 0022             		bset	#1,obStatus(a0)
000161AE 317C 001E 003E             		move.w	#$1E,$3E(a0)
000161B4                            
000161B4                            locret_13580:
000161B4 4E75                       		rts	
000161B6                            ; ===========================================================================
000161B6                            
000161B6                            loc_13582:
000161B6 5368 003E                  		subq.w	#1,$3E(a0)
000161BA 4E75                       		rts	
000161BC                            ; End of function Sonic_SlopeRepel
000161BC                            ; End of function Sonic_SlopeRepel
000161BC                            		include	"_incObj\Sonic JumpAngle.asm"
000161BC                            ; ---------------------------------------------------------------------------
000161BC                            ; Subroutine to	return Sonic's angle to 0 as he jumps
000161BC                            ; ---------------------------------------------------------------------------
000161BC                            
000161BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000161BC                            
000161BC                            
000161BC                            Sonic_JumpAngle:
000161BC 1028 0026                  		move.b	obAngle(a0),d0	; get Sonic's angle
000161C0 6700                       		beq.s	locret_135A2	; if already 0,	branch
000161C2 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
000161C4                            
000161C4 5400                       		addq.b	#2,d0		; increase angle
000161C6 6400                       		bcc.s	loc_13596
000161C8 7000                       		moveq	#0,d0
000161CA                            
000161CA                            loc_13596:
000161CA 6000                       		bra.s	loc_1359E
000161CC                            ; ===========================================================================
000161CC                            
000161CC                            loc_13598:
000161CC 5500                       		subq.b	#2,d0		; decrease angle
000161CE 6400                       		bcc.s	loc_1359E
000161D0 7000                       		moveq	#0,d0
000161D2                            
000161D2                            loc_1359E:
000161D2 1140 0026                  		move.b	d0,obAngle(a0)
000161D6                            
000161D6                            locret_135A2:
000161D6 4E75                       		rts	
000161D8                            ; End of function Sonic_JumpAngle
000161D8                            ; End of function Sonic_JumpAngle
000161D8                            		include	"_incObj\Sonic Floor.asm"
000161D8                            ; ---------------------------------------------------------------------------
000161D8                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
000161D8                            ; ---------------------------------------------------------------------------
000161D8                            
000161D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000161D8                            
000161D8                            
000161D8                            Sonic_Floor:
000161D8 3228 0010                  		move.w	obVelX(a0),d1
000161DC 3428 0012                  		move.w	obVelY(a0),d2
000161E0 4EB9 0000 3CC4             		jsr	(CalcAngle).l
000161E6 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
000161EA 0400 0020                  		subi.b	#$20,d0
000161EE 11C0 FFED                  		move.b	d0,($FFFFFFED).w
000161F2 0200 00C0                  		andi.b	#$C0,d0
000161F6 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
000161FA 0C00 0040                  		cmpi.b	#$40,d0
000161FE 6700 0000                  		beq.w	loc_13680
00016202 0C00 0080                  		cmpi.b	#$80,d0
00016206 6700 0000                  		beq.w	loc_136E2
0001620A 0C00 00C0                  		cmpi.b	#$C0,d0
0001620E 6700 0000                  		beq.w	loc_1373E
00016212 6100 0000                  		bsr.w	Sonic_HitWall
00016216 4A41                       		tst.w	d1
00016218 6A00                       		bpl.s	loc_135F0
0001621A 9368 0008                  		sub.w	d1,obX(a0)
0001621E 317C 0000 0010             		move.w	#0,obVelX(a0)
00016224                            
00016224                            loc_135F0:
00016224 6100 0000                  		bsr.w	sub_14EB4
00016228 4A41                       		tst.w	d1
0001622A 6A00                       		bpl.s	loc_13602
0001622C D368 0008                  		add.w	d1,obX(a0)
00016230 317C 0000 0010             		move.w	#0,obVelX(a0)
00016236                            
00016236                            loc_13602:
00016236 6100 0000                  		bsr.w	Sonic_HitFloor
0001623A 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
0001623E 4A41                       		tst.w	d1
00016240 6A00                       		bpl.s	locret_1367E
00016242 1428 0012                  		move.b	obVelY(a0),d2
00016246 5002                       		addq.b	#8,d2
00016248 4402                       		neg.b	d2
0001624A B202                       		cmp.b	d2,d1
0001624C 6C00                       		bge.s	loc_1361E
0001624E B002                       		cmp.b	d2,d0
00016250 6D00                       		blt.s	locret_1367E
00016252                            
00016252                            loc_1361E:
00016252 D368 000C                  		add.w	d1,obY(a0)
00016256 1143 0026                  		move.b	d3,obAngle(a0)
0001625A 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001625E 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
00016264 1003                       		move.b	d3,d0
00016266 0600 0020                  		addi.b	#$20,d0
0001626A 0200 0040                  		andi.b	#$40,d0
0001626E 6600                       		bne.s	loc_1365C
00016270 1003                       		move.b	d3,d0
00016272 0600 0010                  		addi.b	#$10,d0
00016276 0200 0020                  		andi.b	#$20,d0
0001627A 6700                       		beq.s	loc_1364E
0001627C E0E8 0012                  		asr	obVelY(a0)
00016280 6000                       		bra.s	loc_13670
00016282                            ; ===========================================================================
00016282                            
00016282                            loc_1364E:
00016282 317C 0000 0012             		move.w	#0,obVelY(a0)
00016288 3168 0010 0020             		move.w	obVelX(a0),obInertia(a0)
0001628E 4E75                       		rts	
00016290                            ; ===========================================================================
00016290                            
00016290                            loc_1365C:
00016290 317C 0000 0010             		move.w	#0,obVelX(a0)
00016296 0C68 0FC0 0012             		cmpi.w	#$FC0,obVelY(a0)
0001629C 6F00                       		ble.s	loc_13670
0001629E 317C 0FC0 0012             		move.w	#$FC0,obVelY(a0)
000162A4                            
000162A4                            loc_13670:
000162A4 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
000162AA 4A03                       		tst.b	d3
000162AC 6A00                       		bpl.s	locret_1367E
000162AE 4468 0020                  		neg.w	obInertia(a0)
000162B2                            
000162B2                            locret_1367E:
000162B2 4E75                       		rts	
000162B4                            ; ===========================================================================
000162B4                            
000162B4                            loc_13680:
000162B4 6100 0000                  		bsr.w	Sonic_HitWall
000162B8 4A41                       		tst.w	d1
000162BA 6A00                       		bpl.s	loc_1369A
000162BC 9368 0008                  		sub.w	d1,obX(a0)
000162C0 317C 0000 0010             		move.w	#0,obVelX(a0)
000162C6 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
000162CC 4E75                       		rts	
000162CE                            ; ===========================================================================
000162CE                            
000162CE                            loc_1369A:
000162CE 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000162D2 4A41                       		tst.w	d1
000162D4 6A00                       		bpl.s	loc_136B4
000162D6 9368 000C                  		sub.w	d1,obY(a0)
000162DA 4A68 0012                  		tst.w	obVelY(a0)
000162DE 6A00                       		bpl.s	locret_136B2
000162E0 317C 0000 0012             		move.w	#0,obVelY(a0)
000162E6                            
000162E6                            locret_136B2:
000162E6 4E75                       		rts	
000162E8                            ; ===========================================================================
000162E8                            
000162E8                            loc_136B4:
000162E8 4A68 0012                  		tst.w	obVelY(a0)
000162EC 6B00                       		bmi.s	locret_136E0
000162EE 6100 0000                  		bsr.w	Sonic_HitFloor
000162F2 4A41                       		tst.w	d1
000162F4 6A00                       		bpl.s	locret_136E0
000162F6 D368 000C                  		add.w	d1,obY(a0)
000162FA 1143 0026                  		move.b	d3,obAngle(a0)
000162FE 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00016302 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
00016308 317C 0000 0012             		move.w	#0,obVelY(a0)
0001630E 3168 0010 0020             		move.w	obVelX(a0),obInertia(a0)
00016314                            
00016314                            locret_136E0:
00016314 4E75                       		rts	
00016316                            ; ===========================================================================
00016316                            
00016316                            loc_136E2:
00016316 6100 0000                  		bsr.w	Sonic_HitWall
0001631A 4A41                       		tst.w	d1
0001631C 6A00                       		bpl.s	loc_136F4
0001631E 9368 0008                  		sub.w	d1,obX(a0)
00016322 317C 0000 0010             		move.w	#0,obVelX(a0)
00016328                            
00016328                            loc_136F4:
00016328 6100 0000                  		bsr.w	sub_14EB4
0001632C 4A41                       		tst.w	d1
0001632E 6A00                       		bpl.s	loc_13706
00016330 D368 0008                  		add.w	d1,obX(a0)
00016334 317C 0000 0010             		move.w	#0,obVelX(a0)
0001633A                            
0001633A                            loc_13706:
0001633A 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
0001633E 4A41                       		tst.w	d1
00016340 6A00                       		bpl.s	locret_1373C
00016342 9368 000C                  		sub.w	d1,obY(a0)
00016346 1003                       		move.b	d3,d0
00016348 0600 0020                  		addi.b	#$20,d0
0001634C 0200 0040                  		andi.b	#$40,d0
00016350 6600                       		bne.s	loc_13726
00016352 317C 0000 0012             		move.w	#0,obVelY(a0)
00016358 4E75                       		rts	
0001635A                            ; ===========================================================================
0001635A                            
0001635A                            loc_13726:
0001635A 1143 0026                  		move.b	d3,obAngle(a0)
0001635E 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00016362 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
00016368 4A03                       		tst.b	d3
0001636A 6A00                       		bpl.s	locret_1373C
0001636C 4468 0020                  		neg.w	obInertia(a0)
00016370                            
00016370                            locret_1373C:
00016370 4E75                       		rts	
00016372                            ; ===========================================================================
00016372                            
00016372                            loc_1373E:
00016372 6100 0000                  		bsr.w	sub_14EB4
00016376 4A41                       		tst.w	d1
00016378 6A00                       		bpl.s	loc_13758
0001637A D368 0008                  		add.w	d1,obX(a0)
0001637E 317C 0000 0010             		move.w	#0,obVelX(a0)
00016384 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
0001638A 4E75                       		rts	
0001638C                            ; ===========================================================================
0001638C                            
0001638C                            loc_13758:
0001638C 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00016390 4A41                       		tst.w	d1
00016392 6A00                       		bpl.s	loc_13772
00016394 9368 000C                  		sub.w	d1,obY(a0)
00016398 4A68 0012                  		tst.w	obVelY(a0)
0001639C 6A00                       		bpl.s	locret_13770
0001639E 317C 0000 0012             		move.w	#0,obVelY(a0)
000163A4                            
000163A4                            locret_13770:
000163A4 4E75                       		rts	
000163A6                            ; ===========================================================================
000163A6                            
000163A6                            loc_13772:
000163A6 4A68 0012                  		tst.w	obVelY(a0)
000163AA 6B00                       		bmi.s	locret_1379E
000163AC 6100 0000                  		bsr.w	Sonic_HitFloor
000163B0 4A41                       		tst.w	d1
000163B2 6A00                       		bpl.s	locret_1379E
000163B4 D368 000C                  		add.w	d1,obY(a0)
000163B8 1143 0026                  		move.b	d3,obAngle(a0)
000163BC 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000163C0 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
000163C6 317C 0000 0012             		move.w	#0,obVelY(a0)
000163CC 3168 0010 0020             		move.w	obVelX(a0),obInertia(a0)
000163D2                            
000163D2                            locret_1379E:
000163D2 4E75                       		rts	
000163D4                            ; End of function Sonic_Floor
000163D4                            ; End of function Sonic_Floor
000163D4                            		include	"_incObj\Sonic ResetOnFloor.asm"
000163D4                            ; ---------------------------------------------------------------------------
000163D4                            ; Subroutine to	reset Sonic's mode when he lands on the floor
000163D4                            ; ---------------------------------------------------------------------------
000163D4                            
000163D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000163D4                            
000163D4                            
000163D4                            Sonic_ResetOnFloor:            ; XREF: PlatformObject; et al
000163D4 08A8 0005 0022                     	bclr    #5,$22(a0)
000163DA 08A8 0001 0022                     	bclr    #1,$22(a0)
000163E0 0828 0002 0022                     	btst    #2,$22(a0)
000163E6 6700                               	beq.s    loc_137E4
000163E8 08A8 0002 0022             		bclr	#2,obStatus(a0)
000163EE 117C 0013 0016             		move.b	#$13,obHeight(a0)
000163F4 117C 0009 0017             		move.b	#9,obWidth(a0)
000163FA 117C 0000 001C             		move.b	#id_Walk,obAnim(a0) ; use running/walking animation
00016400 5B68 000C                  		subq.w	#5,obY(a0)
00016404                            
00016404                            loc_137E4:
00016404 117C 0000 003C             		move.b	#0,$3C(a0)
0001640A 31FC 0000 F7D0             		move.w	#0,(v_itembonus).w
00016410 4E75                       		rts	
00016412                            ; End of function Sonic_ResetOnFloor
00016412                            ; End of function Sonic_ResetOnFloor
00016412                            		include	"_incObj\Sonic (part 2).asm"
00016412                            ; ---------------------------------------------------------------------------
00016412                            ; Sonic	when he	gets hurt
00016412                            ; ---------------------------------------------------------------------------
00016412                            
00016412                            Sonic_Hurt:	; Routine 4
00016412 4EB9 0000 F964             		jsr	(SpeedToPos).l
00016418 0668 0030 0012             		addi.w	#$30,obVelY(a0)
0001641E 0828 0006 0022             		btst	#6,obStatus(a0)
00016424 6700                       		beq.s	loc_1380C
00016426 0468 0020 0012             		subi.w	#$20,obVelY(a0)
0001642C                            
0001642C                            loc_1380C:
0001642C 6100 0000                  		bsr.w	Sonic_HurtStop
00016430 6100 FAF4                  		bsr.w	Sonic_LevelBound
00016434 6100 F114                  		bsr.w	Sonic_RecordPosition
00016438 6100 0000                  		bsr.w	Sonic_Animate
0001643C 6100 0000                  		bsr.w	Sonic_LoadGfx
00016440 4EF9 0000 F978             		jmp	(DisplaySprite).l
00016446                            
00016446                            ; ---------------------------------------------------------------------------
00016446                            ; Subroutine to	stop Sonic falling after he's been hurt
00016446                            ; ---------------------------------------------------------------------------
00016446                            
00016446                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016446                            
00016446                            
00016446                            Sonic_HurtStop:
00016446 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0001644A 0640 00E0                  		addi.w	#$E0,d0
0001644E                            		;cmp.w	obY(a0),d0
0001644E                            		;bcs.w	KillSonic
0001644E 6100 FD88                  		bsr.w	Sonic_Floor
00016452 0828 0001 0022             		btst	#1,obStatus(a0)
00016458 6600                       		bne.s	locret_13860
0001645A 7000                       		moveq	#0,d0
0001645C 3140 0012                  		move.w	d0,obVelY(a0)
00016460 3140 0010                  		move.w	d0,obVelX(a0)
00016464 3140 0020                  		move.w	d0,obInertia(a0)
00016468 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
0001646E 5528 0024                  		subq.b	#2,obRoutine(a0)
00016472 317C 0078 0030             		move.w	#$78,$30(a0)
00016478                            
00016478                            locret_13860:
00016478 4E75                       		rts	
0001647A                            ; End of function Sonic_HurtStop
0001647A                            
0001647A                            ; ---------------------------------------------------------------------------
0001647A                            ; Sonic	when he	dies
0001647A                            ; ---------------------------------------------------------------------------
0001647A                            
0001647A                            Sonic_Death:	; Routine 6
0001647A 6100 0000                  		bsr.w	GameOver
0001647E 4EB9 0000 F92C             		jsr	(ObjectFall).l
00016484 6100 F0C4                  		bsr.w	Sonic_RecordPosition
00016488 6100 0000                  		bsr.w	Sonic_Animate
0001648C 6100 0000                  		bsr.w	Sonic_LoadGfx
00016490 4EF9 0000 F978             		jmp	(DisplaySprite).l
00016496                            
00016496                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016496                            
00016496                            GameOver:
00016496 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0001649A 0640 0100                  		addi.w	#$100,d0
0001649E B068 000C                  		cmp.w	obY(a0),d0
000164A2 6400 0000                  		bcc.w	locret_13900
000164A6 317C FFC8 0012             		move.w	#-$38,obVelY(a0)
000164AC 5428 0024                  		addq.b	#2,obRoutine(a0)
000164B0 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
000164B4 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update lives counter
000164B8 5338 FE12                  		subq.b	#1,(v_lives).w	; subtract 1 from number of lives
000164BC 6600                       		bne.s	loc_138D4
000164BE 317C 0000 003A             		move.w	#0,$3A(a0)
000164C4 11FC 0039 D080             		move.b	#id_GameOverCard,(v_objspace+$80).w ; load GAME object
000164CA 11FC 0039 D0C0             		move.b	#id_GameOverCard,(v_objspace+$C0).w ; load OVER object
000164D0 11FC 0001 D0DA             		move.b	#1,(v_objspace+$C0+obFrame).w ; set OVER object to correct frame
000164D6 4238 FE1A                  		clr.b	(f_timeover).w
000164DA                            
000164DA                            loc_138C2:
000164E4 7003                       		moveq	#3,d0
000164E6 4EF9 0000 16EA             		jmp	(AddPLC).l	; load game over patterns
000164EC                            		
000164EC                            loc_138C3:
000164F6 7003                       		moveq	#3,d0
000164F8 4EF9 0000 16EA             		jmp	(AddPLC).l	; load game over patterns
000164FE                            ; ===========================================================================
000164FE                            
000164FE                            loc_138D4:
000164FE 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00016504 4A38 FE1A                  		tst.b	(f_timeover).w	; is TIME OVER tag set?
00016508 6700                       		beq.s	locret_13900	; if not, branch
0001650A 317C 0000 003A             		move.w	#0,$3A(a0)
00016510 11FC 0039 D080             		move.b	#id_GameOverCard,(v_objspace+$80).w ; load TIME object
00016516 11FC 0039 D0C0             		move.b	#id_GameOverCard,(v_objspace+$C0).w ; load OVER object
0001651C 11FC 0002 D09A             		move.b	#2,(v_objspace+$80+obFrame).w
00016522 11FC 0003 D0DA             		move.b	#3,(v_objspace+$C0+obFrame).w
00016528 60B0                       		bra.s	loc_138C2
0001652A                            		
0001652A                            
0001652A                            ; ===========================================================================
0001652A                            
0001652A                            locret_13900:
0001652A 4E75                       		rts	
0001652C                            ; End of function GameOver
0001652C                            
0001652C                            ; ---------------------------------------------------------------------------
0001652C                            ; Sonic	when the level is restarted
0001652C                            ; ---------------------------------------------------------------------------
0001652C                            
0001652C                            Sonic_ResetLevel:; Routine 8
0001652C 4A68 003A                  		tst.w	$3A(a0)
00016530 6700                       		beq.s	locret_13914
00016532 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00016536 6600                       		bne.s	locret_13914
00016538 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart the level
0001653E                            
0001653E                            	locret_13914:
0001653E 4E75                       		rts	
0001653E 4E75                       		rts	
00016540                            		include	"_incObj\Sonic Loops.asm"
00016540                            ; ---------------------------------------------------------------------------
00016540                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
00016540                            ; ---------------------------------------------------------------------------
00016540                            
00016540                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016540                            
00016540                            
00016540                            Sonic_Loops:
00016540 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; is level SLZ ?
00016546 6700                       		beq.s	@isstarlight	; if yes, branch
00016548 4A38 FE10                  		tst.b	(v_zone).w	; is level GHZ ?
0001654C 6600 0000                  		bne.w	@noloops	; if not, branch
00016550                            
00016550                            	@isstarlight:
00016550 3028 000C                  		move.w	obY(a0),d0
00016554 E248                       		lsr.w	#1,d0
00016556 0240 0380                  		andi.w	#$380,d0
0001655A 1228 0008                  		move.b	obX(a0),d1
0001655E 0241 007F                  		andi.w	#$7F,d1
00016562 D041                       		add.w	d1,d0
00016564 43F8 A400                  		lea	(v_lvllayout).w,a1
00016568 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
0001656C                            
0001656C B238 F7AE                  		cmp.b	(v_256roll1).w,d1 ; is Sonic on a "roll tunnel" tile?
00016570 6700 FA70                  		beq.w	Sonic_ChkRoll	; if yes, branch
00016574 B238 F7AF                  		cmp.b	(v_256roll2).w,d1
00016578 6700 FA68                  		beq.w	Sonic_ChkRoll
0001657C                            
0001657C B238 F7AC                  		cmp.b	(v_256loop1).w,d1 ; is Sonic on a loop tile?
00016580 6700                       		beq.s	@chkifleft	; if yes, branch
00016582 B238 F7AD                  		cmp.b	(v_256loop2).w,d1
00016586 6700                       		beq.s	@chkifinair
00016588 08A8 0006 0001             		bclr	#6,obRender(a0) ; return Sonic to high plane
0001658E 4E75                       		rts	
00016590                            ; ===========================================================================
00016590                            
00016590                            @chkifinair:
00016590 0828 0001 0022             		btst	#1,obStatus(a0)	; is Sonic in the air?
00016596 6700                       		beq.s	@chkifleft	; if not, branch
00016598                            
00016598 08A8 0006 0001             		bclr	#6,obRender(a0)	; return Sonic to high plane
0001659E 4E75                       		rts	
000165A0                            ; ===========================================================================
000165A0                            
000165A0                            @chkifleft:
000165A0 3428 0008                  		move.w	obX(a0),d2
000165A4 0C02 002C                  		cmpi.b	#$2C,d2
000165A8 6400                       		bcc.s	@chkifright
000165AA                            
000165AA 08A8 0006 0001             		bclr	#6,obRender(a0)	; return Sonic to high plane
000165B0 4E75                       		rts	
000165B2                            ; ===========================================================================
000165B2                            
000165B2                            @chkifright:
000165B2 0C02 00E0                  		cmpi.b	#$E0,d2
000165B6 6500                       		bcs.s	@chkangle1
000165B8                            
000165B8 08E8 0006 0001             		bset	#6,obRender(a0)	; send Sonic to	low plane
000165BE 4E75                       		rts	
000165C0                            ; ===========================================================================
000165C0                            
000165C0                            @chkangle1:
000165C0 0828 0006 0001             		btst	#6,obRender(a0) ; is Sonic on low plane?
000165C6 6600                       		bne.s	@chkangle2	; if yes, branch
000165C8                            
000165C8 1228 0026                  		move.b	obAngle(a0),d1
000165CC 6700                       		beq.s	@done
000165CE 0C01 0080                  		cmpi.b	#$80,d1		; is Sonic upside-down?
000165D2 6200                       		bhi.s	@done		; if yes, branch
000165D4 08E8 0006 0001             		bset	#6,obRender(a0)	; send Sonic to	low plane
000165DA 4E75                       		rts	
000165DC                            ; ===========================================================================
000165DC                            
000165DC                            @chkangle2:
000165DC 1228 0026                  		move.b	obAngle(a0),d1
000165E0 0C01 0080                  		cmpi.b	#$80,d1		; is Sonic upright?
000165E4 6300                       		bls.s	@done		; if yes, branch
000165E6 08A8 0006 0001             		bclr	#6,obRender(a0)	; send Sonic to	high plane
000165EC                            
000165EC                            @noloops:
000165EC                            @done:
000165EC 4E75                       		rts	
000165EE                            ; End of function Sonic_Loops
000165EE                            ; End of function Sonic_Loops
000165EE                            		include	"_incObj\Sonic Animate.asm"
000165EE                            ; ---------------------------------------------------------------------------
000165EE                            ; Subroutine to	animate	Sonic's sprites
000165EE                            ; ---------------------------------------------------------------------------
000165EE                            
000165EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000165EE                            
000165EE                            
000165EE                            Sonic_Animate:				; XREF: Obj01_Control; et al
000165EE 43F9 0000 0000             		lea	(Ani_Sonic).l,a1
000165F4 7000                       		moveq	#0,d0
000165F6 1028 001C                  		move.b	obAnim(a0),d0
000165FA B028 001D                  		cmp.b	obNextAni(a0),d0 ; is animation set to restart?
000165FE 6700                       		beq.s	@do		; if not, branch
00016600 1140 001D                  		move.b	d0,obNextAni(a0) ; set to "no restart"
00016604 4228 001B                  		clr.b	obAniFrame(a0) ; reset animation
00016608 4228 001E                  		clr.b	obTimeFrame(a0) ; reset frame duration
0001660C                            		
0001660C 08A8 0005 0022             		bclr	#5,obStatus(a0)	; clear pushing flag	;Mercury Pushing While Walking Fix	;Mercury Constants
00016612                            
00016612                            	@do:
00016612 D040                       		add.w	d0,d0
00016614 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
00016618 1011                       		move.b	(a1),d0
0001661A 6B00                       		bmi.s	@walkrunroll	; if animation is walk/run/roll/jump, branch
0001661C 1228 0022                  		move.b	obStatus(a0),d1
00016620 0201 0001                  		andi.b	#1,d1
00016624 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001662A 8328 0001                  		or.b	d1,obRender(a0)
0001662E 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
00016632 6A00                       		bpl.s	@delay		; if time remains, branch
00016634 1140 001E                  		move.b	d0,obTimeFrame(a0) ; load frame duration
00016638                            
00016638                            @loadframe:
00016638 7200                       		moveq	#0,d1
0001663A 1228 001B                  		move.b	obAniFrame(a0),d1 ; load current frame number
0001663E 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
00016642 0C00 00FD                  		cmp.b	#$FD,d0				; MJ: is it a flag from FD to FF?
00016646 6400 0000                  		bhs		@end_FF				; MJ: if so, branch to flag routines
0001664A                            
0001664A                            	@next:
0001664A 1140 001A                  		move.b	d0,obFrame(a0)	; load sprite number
0001664E 5228 001B                  		addq.b	#1,obAniFrame(a0) ; next frame number
00016652                            
00016652                            	@delay:
00016652 4E75                       		rts	
00016654                            ; ===========================================================================
00016654                            
00016654                            @end_FF:
00016654 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
00016656 6600                       		bne.s	@end_FE		; if not, branch
00016658 4228 001B                  		clr.b	obAniFrame(a0) ; restart the animation
0001665C 1029 0001                  		move.b	1(a1),d0	; read sprite number
00016660 60E8                       		bra.s	@next
00016662                            ; ===========================================================================
00016662                            
00016662                            @end_FE:
00016662 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
00016664 6600                       		bne.s	@end_FD		; if not, branch
00016666 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0001666A 9128 001B                  		sub.b	d0,obAniFrame(a0) ; jump back d0 bytes in the script
0001666E 9200                       		sub.b	d0,d1
00016670 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
00016674 60D4                       		bra.s	@next
00016676                            ; ===========================================================================
00016676                            
00016676                            @end_FD:
00016676 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
00016678 6600                       		bne.s	@end		; if not, branch
0001667A 1171 1002 001C             		move.b	2(a1,d1.w),obAnim(a0) ; read next byte, run that animation
00016680                            
00016680                            	@end:
00016680 4E75                       		rts	
00016682                            ; ===========================================================================
00016682                            
00016682                            @walkrunroll:
00016682 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
00016686 6ACA                       		bpl.s	@delay		; if time remains, branch
00016688 5200                       		addq.b	#1,d0		; is animation walking/running?
0001668A 6600 0000                  		bne.w	@rolljump	; if not, branch
0001668E 7200                       		moveq	#0,d1
00016690 1028 0026                  		move.b	obAngle(a0),d0	; get Sonic's angle
00016694 6B00                       		bmi.s	@ble 			; better handling of angles
00016696 6700                       		beq.s	@ble
00016698 5300                       		subq.b	#1,d0
0001669A                            
0001669A                            	@ble:																
0001669A 1428 0022                  		move.b	obStatus(a0),d2
0001669E 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
000166A2 6600                       		bne.s	@flip		; if yes, branch
000166A4 4600                       		not.b	d0		; reverse angle
000166A6                            
000166A6                            	@flip:
000166A6 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
000166AA 6A00                       		bpl.s	@noinvert	; if angle is $0-$7F, branch
000166AC 7203                       		moveq	#3,d1
000166AE                            
000166AE                            	@noinvert:
000166AE 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
000166B4 B302                       		eor.b	d1,d2
000166B6 8528 0001                  		or.b	d2,obRender(a0)
000166BA 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing something?	;Mercury Constants
000166C0 6600 0000                  		bne.w	@push		; if yes, branch
000166C4                            
000166C4 E808                       		lsr.b	#4,d0		; divide angle by $10
000166C6 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
000166CA 3428 0020                  		move.w	obInertia(a0),d2 ; get Sonic's speed
000166CE 6A00                       		bpl.s	@nomodspeed
000166D0 4442                       		neg.w	d2		; modulus speed
000166D2                            
000166D2                            	@nomodspeed:
000166D2 43F9 0000 0000             		lea	(SonAni_MaxRun).l,a1 ; use	Dashing	animation
000166D8 0C42 0A00                  		cmpi.w	#$A00,d2	; is Sonic at Dashing speed?
000166DC 6400                       		bcc.s	@maxrunning	; if yes, branch
000166DE                            
000166DE 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
000166E4 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
000166E8 6400                       		bcc.s	@running	; if yes, branch
000166EA                            
000166EA 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
000166F0                            
000166F0                            	@running:
000166F0 D000                       		add.b	d0,d0
000166F2 D000                       		add.b	d0,d0
000166F4 1600                       		move.b	d0,d3
000166F6 4442                       		neg.w	d2
000166F8 0642 0780                  		addi.w	#$780,d2
000166FC 6A00                       		bpl.s	@belowmax
000166FE 7400                       		moveq	#0,d2		; max animation speed
00016700 6000                       		bra.s	@belowmax
00016702                            
00016702                            	@maxrunning:
00016702 D000                       		add.b d0,d0
00016704 1600                       		move.b d0,d3
00016706 4442                       		neg.w d2
00016708 0642 0800                  		addi.w #$800, d2
0001670C 6A00                       		bpl.s @belowmax
0001670E 7400                       		moveq #0, d2 
00016710                            
00016710                            	@belowmax:
00016710 E04A                       		lsr.w	#8,d2
00016712 1142 001E                  		move.b	d2,obTimeFrame(a0) ; modify frame duration
00016716 6100 FF20                  		bsr.w	@loadframe
0001671A D728 001A                  		add.b	d3,obFrame(a0)	; modify frame number
0001671E 4E75                       		rts	
00016720                            ; ===========================================================================
00016720                            
00016720                            @rolljump:
00016720 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
00016722 6600                       		bne.s	@push		; if not, branch
00016724 3428 0020                  		move.w	obInertia(a0),d2 ; get Sonic's speed
00016728 6A00                       		bpl.s	@nomodspeed2
0001672A 4442                       		neg.w	d2
0001672C                            
0001672C                            	@nomodspeed2:
0001672C 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
00016732 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
00016736 6400                       		bcc.s	@rollfast	; if yes, branch
00016738 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
0001673E                            
0001673E                            	@rollfast:
0001673E 4442                       		neg.w	d2
00016740 0642 0400                  		addi.w	#$400,d2
00016744 6A00                       		bpl.s	@belowmax2
00016746 7400                       		moveq	#0,d2
00016748                            
00016748                            	@belowmax2:
00016748 E04A                       		lsr.w	#8,d2
0001674A 1142 001E                  		move.b	d2,obTimeFrame(a0) ; modify frame duration
0001674E 1228 0022                  		move.b	obStatus(a0),d1
00016752 0201 0001                  		andi.b	#1,d1
00016756 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001675C 8328 0001                  		or.b	d1,obRender(a0)
00016760 6000 FED6                  		bra.w	@loadframe
00016764                            ; ===========================================================================
00016764                            
00016764                            @push:
00016764 3428 0020                  		move.w	obInertia(a0),d2 ; get Sonic's speed
00016768 6B00                       		bmi.s	@negspeed
0001676A 4442                       		neg.w	d2
0001676C                            
0001676C                            	@negspeed:
0001676C 0642 0800                  		addi.w	#$800,d2
00016770 6A00                       		bpl.s	@belowmax3	
00016772 7400                       		moveq	#0,d2
00016774                            
00016774                            	@belowmax3:
00016774 EC4A                       		lsr.w	#6,d2
00016776 1142 001E                  		move.b	d2,obTimeFrame(a0) ; modify frame duration
0001677A 43F9 0000 0000             		lea	(SonAni_Push).l,a1
00016780 1228 0022                  		move.b	obStatus(a0),d1
00016784 0201 0001                  		andi.b	#1,d1
00016788 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001678E 8328 0001                  		or.b	d1,obRender(a0)
00016792 6000 FEA4                  		bra.w	@loadframe
00016796                            
00016796                            ; End of function Sonic_Animate
00016796                            ; End of function Sonic_Animate
00016796                            		include	"_anim\Sonic.asm"
00016796                            ; ---------------------------------------------------------------------------
00016796                            ; Animation script - Sonic
00016796                            ; ---------------------------------------------------------------------------
00016796                            Ani_Sonic:
00016796                            
00016796 0000                       ptr_Walk:	dc.w SonAni_Walk-Ani_Sonic
00016798 0000                       ptr_Run:	dc.w SonAni_Run-Ani_Sonic
0001679A 0000                       ptr_Roll:	dc.w SonAni_Roll-Ani_Sonic
0001679C 0000                       ptr_Roll2:	dc.w SonAni_Roll2-Ani_Sonic
0001679E 0000                       ptr_Push:	dc.w SonAni_Push-Ani_Sonic
000167A0 0000                       ptr_Wait:	dc.w SonAni_Wait-Ani_Sonic
000167A2 0000                       ptr_Balance:	dc.w SonAni_Balance-Ani_Sonic
000167A4 0000                       ptr_LookUp:	dc.w SonAni_LookUp-Ani_Sonic
000167A6 0000                       ptr_Duck:	dc.w SonAni_Duck-Ani_Sonic
000167A8 0000                       ptr_Warp1:	dc.w SonAni_Warp1-Ani_Sonic
000167AA 0000                       ptr_Warp2:	dc.w SonAni_Warp2-Ani_Sonic
000167AC 0000                       ptr_Warp3:	dc.w SonAni_Warp3-Ani_Sonic
000167AE 0000                       ptr_Warp4:	dc.w SonAni_Warp4-Ani_Sonic
000167B0 0000                       ptr_Stop:	dc.w SonAni_Stop-Ani_Sonic
000167B2 0000                       ptr_Float1:	dc.w SonAni_Float1-Ani_Sonic
000167B4 0000                       ptr_Float2:	dc.w SonAni_Float2-Ani_Sonic
000167B6 0000                       ptr_Spring:	dc.w SonAni_Spring-Ani_Sonic
000167B8 0000                       ptr_Hang:	dc.w SonAni_Hang-Ani_Sonic
000167BA 0000                       ptr_Leap1:	dc.w SonAni_Leap1-Ani_Sonic
000167BC 0000                       ptr_Leap2:	dc.w SonAni_Leap2-Ani_Sonic
000167BE 0000                       ptr_Surf:	dc.w SonAni_Surf-Ani_Sonic
000167C0 0000                       ptr_GetAir:	dc.w SonAni_GetAir-Ani_Sonic
000167C2 0000                       ptr_Burnt:	dc.w SonAni_Burnt-Ani_Sonic
000167C4 0000                       ptr_Drown:	dc.w SonAni_Drown-Ani_Sonic
000167C6 0000                       ptr_Death:	dc.w SonAni_Death-Ani_Sonic
000167C8 0000                       ptr_Hurt:	dc.w SonAni_Hurt-Ani_Sonic
000167CA 0000                       ptr_WaterSlide:	dc.w SonAni_WaterSlide-Ani_Sonic
000167CC 0000                       ptr_Null:	dc.w SonAni_Null-Ani_Sonic
000167CE 0000                       ptr_Float3:	dc.w SonAni_Float3-Ani_Sonic
000167D0 0000                       ptr_Float4:	dc.w SonAni_Float4-Ani_Sonic
000167D2 0000                       ptr_MaxRun:	dc.w SonAni_MaxRun-Ani_Sonic
000167D4 0000                       ptr_Spindash:	dc.w SonAni_SpinDash-Ani_Sonic ;1F
000167D6 0000                       ptr_Hurt2:	dc.w SonAni_Hurt2-Ani_Sonic
000167D8 0000                       ptr_GetUp:	dc.w SonAni_GetUp-Ani_Sonic
000167DA 0000                       ptr_Blink:	dc.w SonAni_Blink-Ani_Sonic
000167DC 0000                       ptr_Sit:	dc.w SonAni_Sit-Ani_Sonic
000167DE 0000                       ptr_Peelout:	dc.w SonAni_Peelout-Ani_Sonic
000167E0 0000                       ptr_Hang2:	dc.w SonAni_Hang2-Ani_Sonic
000167E2                            
000167E2 FF10 1112 1314 150E 0FFF+  SonAni_Walk:	dc.b $FF, fr_walk13, fr_walk14,	fr_walk15, fr_walk16, fr_walk17, fr_walk18, fr_walk11, fr_walk12, afEnd, afEnd, afEnd, afEnd
000167F0 00                         		even
000167F0 FF2E 2F30 3132 3334 35FF+  SonAni_Run:	dc.b $FF, fr_run11,  fr_run12,  fr_run13,  fr_run14, fr_run15,  fr_run16,  fr_run17,  fr_run18, afEnd, afEnd, afEnd, afEnd
000167FE 00                         		even
000167FE FE5E 5F60 6162 66          SonAni_Roll:	dc.b $FE, fr_Roll1, fr_Roll6, fr_Roll2, fr_Roll7, fr_Roll3, fr_Roll5
00016805 6364 6566 FFFF             		dc.b fr_Roll8, fr_Roll4, fr_Roll9, fr_Roll5, afEnd, afEnd
0001680C 00                         		even
0001680C FE5E 5F60 6162 66          SonAni_Roll2:	dc.b $FE, fr_Roll1, fr_Roll6, fr_Roll2, fr_Roll7, fr_Roll3, fr_Roll5
00016813 6364 6566 FFFF             		dc.b fr_Roll8, fr_Roll4, fr_Roll9, fr_Roll5, afEnd, afEnd
0001681A 00                         		even
0001681A FD89 8A8B 8C8D 8E8F 90FF+  SonAni_Push:	dc.b $FD,  fr_push1,  fr_push2,  fr_push3,  fr_push4, fr_push5,  fr_push6,  fr_push7,  fr_push8, afEnd, afEnd, afEnd, afEnd
00016828 00                         		even
00016828                            SonAni_Wait:	
00016828 0501 0101 0101 0101 0102+  		dc.b   5,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
00016837 0101 0101 0101 0101 0102+  		dc.b   1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
00016846 0101 0101 0101 0101 0102+  		dc.b   1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
00016855 0203 0303 0404 0505 0506+  		dc.b   2,  3,  3,  3,  4,  4,  5,  5,  5,  6,  6,  6,  7,  7,  7
00016864 0606 0607 0707 0606 0607+  		dc.b   6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6
00016873 0707 0706 0606 0707 0706+  		dc.b   7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7
00016882 0606 0607 0707 0606 0607+  		dc.b   6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6
00016891 0707 0706 0606 0707 0706+  		dc.b   7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7
000168A0 0808 0909 0A0A FE04        		dc.b   8,  8,  9,  9,  $A, $A, $FE, 4
000168A8                            		even
000168A8 0F72 7374 75FF             SonAni_Balance:	dc.b $F, fr_balance1, fr_balance2, fr_balance3, fr_balance4, afEnd
000168AE                            		even
000168AE 030C 0DFE 01               SonAni_LookUp:	dc.b $3, fr_lookup1, fr_lookup2, afBack, 1
000168B4 00                         		even
000168B4 026F 7071 FE01             SonAni_Duck:	dc.b $2, fr_duck3, fr_duck2, fr_duck, afBack, 1
000168BA                            		even
000168BA 3F67 FF                    SonAni_Warp1:	dc.b $3F, fr_warp1, afEnd
000168BE 00                         		even
000168BE 3F68 FF                    SonAni_Warp2:	dc.b $3F, fr_warp2, afEnd
000168C2 00                         		even
000168C2 3F69 FF                    SonAni_Warp3:	dc.b $3F, fr_warp3, afEnd
000168C6 00                         		even
000168C6 3F6A FF                    SonAni_Warp4:	dc.b $3F, fr_warp4, afEnd
000168CA 00                         		even
000168CA 026B 6C6C 6D6D 6E6E FD00   SonAni_Stop:	dc.b 2,	fr_stop1, fr_stop2, fr_stop2, fr_stop3, fr_stop3, fr_stop4, fr_stop4, $FD,  0
000168D4                            		even
000168D4 077C 82FE 02               SonAni_Float1:	dc.b 7,	fr_float1, fr_float4, afBack, 2
000168DA 00                         		even
000168DA 037C 7D7E 7F80 817B FF     SonAni_Float2:	dc.b 3,	fr_float1, fr_float7, fr_float2, fr_float8, fr_float5, fr_float3, fr_float6, afEnd
000168E4 00                         		even
000168E4 0783 8483 8483 84FD 00     SonAni_Spring:	dc.b 7, fr_spring, fr_spring2, fr_spring, fr_spring2, fr_spring, fr_spring2, afChange, id_Walk
000168EE 00                         		even
000168EE 0485 86FF                  SonAni_Hang:	dc.b 4,	fr_hang1, fr_hang2, afEnd
000168F2                            		even
000168F2 0F87 8787 FE01             SonAni_Leap1:	dc.b $F, fr_leap1, fr_leap1, fr_leap1,	afBack, 1
000168F8                            		even
000168F8 0F87 88FE 01               SonAni_Leap2:	dc.b $F, fr_leap1, fr_leap2, afBack, 1
000168FE 00                         		even
000168FE 3F91 FF                    SonAni_Surf:	dc.b $3F, fr_surf, afEnd
00016902 00                         		even
00016902 0B95 9512 13FD 00          SonAni_GetAir:	dc.b $B, fr_getair, fr_getair, fr_walk15, fr_walk16, afChange, id_Walk
0001690A 00                         		even
0001690A 2092 FF                    SonAni_Burnt:	dc.b $20, fr_burnt, afEnd
0001690E 00                         		even
0001690E 2F93 FF                    SonAni_Drown:	dc.b $2F, fr_drown, afEnd
00016912 00                         		even
00016912 0394 FF                    SonAni_Death:	dc.b 3,	fr_death, afEnd
00016916 00                         		even
00016916 0396 FF                    SonAni_Hurt:	dc.b 3,	fr_injury, afEnd
0001691A 00                         		even
0001691A                            SonAni_WaterSlide:
0001691A 0796 97FF                  		dc.b 7, fr_injury, fr_waterslide, afEnd
0001691E                            		even
0001691E 7700 FD00                  SonAni_Null:	dc.b $77, fr_null, afChange, id_Walk
00016922                            		even
00016922 037C 7E80 817B FF          SonAni_Float3:	dc.b 3,	fr_float1, fr_float2, fr_float5, fr_float3, fr_float6, afEnd
0001692A 00                         		even
0001692A 037C FD00                  SonAni_Float4:	dc.b 3,	fr_float1, afChange, id_Walk
0001692E                            		even
0001692E FF4E 4F50 51FF FFFF FFFF+  SonAni_MaxRun:  dc.b $FF, fr_peelout11, fr_peelout12, fr_peelout13, fr_peelout14, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd
0001693C 00                         		even
0001693C 009B 9C9B 9D9B 9E9B 9F9B+  SonAni_SpinDash: dc.b 0, fr_Spindash1, fr_spindash2, fr_spindash1, fr_spindash3, fr_spindash1, fr_spindash4, fr_spindash1, fr_spindash5, fr_spindash1, fr_spindash6, afEnd
00016948                            		even
00016948 0298 99FF                  SonAni_Hurt2:	dc.b 2, fr_skele1, fr_skele2, afEnd	
0001694C                            		even
0001694C 030B FD00                  SonAni_GetUp:	dc.b 3, $B,$FD,  0
00016950                            		even
00016950 0102 FD00                  SonAni_Blink:	dc.b   1,  2,$FD,  0
00016954                            		even
00016954 0808 0909 0A0A 09FE 05     SonAni_Sit:	dc.b   8, 8, 9, 9, $A, $A,  9, $FE, 5
0001695E 00                         		even
0001695E 000E 0E0E 0E0E 0E0F 0F     SonAni_Peelout: dc.b 	0, $E, $E, $E, $E, $E, $E, $F, $F
00016967 0F0F 1010 1111 1213        		dc.b	$F, $F, $10, $10, $11, $11, $12, $13
0001696F 1415 2E2F 3031 32          		dc.b	$14, $15, $2E, $2F, $30, $31, $32
00016976 3334 35                    		dc.b	$33, $34, $35
00016979 4E4F 5051 FE04 FE          		dc.b	$4E, $4F, $50,  $51, -2, 4, $FE
00016980                            		even
00016980 137A 7879 78FF             SonAni_Hang2:	dc.b $13, fr_vhang3, fr_vhang1, fr_vhang2, fr_vhang1, $FF	
00016986                            		even
00016986                            
00016986                            
00016986 =00000000                  id_Walk:	equ (ptr_Walk-Ani_Sonic)/2	; 0
00016986 =00000001                  id_Run:		equ (ptr_Run-Ani_Sonic)/2	; 1
00016986 =00000002                  id_Roll:	equ (ptr_Roll-Ani_Sonic)/2	; 2
00016986 =00000003                  id_Roll2:	equ (ptr_Roll2-Ani_Sonic)/2	; 3
00016986 =00000004                  id_Push:	equ (ptr_Push-Ani_Sonic)/2	; 4
00016986 =00000005                  id_Wait:	equ (ptr_Wait-Ani_Sonic)/2	; 5
00016986 =00000006                  id_Balance:	equ (ptr_Balance-Ani_Sonic)/2	; 6
00016986 =00000007                  id_LookUp:	equ (ptr_LookUp-Ani_Sonic)/2	; 7
00016986 =00000008                  id_Duck:	equ (ptr_Duck-Ani_Sonic)/2	; 8
00016986 =00000009                  id_Warp1:	equ (ptr_Warp1-Ani_Sonic)/2	; 9
00016986 =0000000A                  id_Warp2:	equ (ptr_Warp2-Ani_Sonic)/2	; $A
00016986 =0000000B                  id_Warp3:	equ (ptr_Warp3-Ani_Sonic)/2	; $B
00016986 =0000000C                  id_Warp4:	equ (ptr_Warp4-Ani_Sonic)/2	; $C
00016986 =0000000D                  id_Stop:	equ (ptr_Stop-Ani_Sonic)/2	; $D
00016986 =0000000E                  id_Float1:	equ (ptr_Float1-Ani_Sonic)/2	; $E
00016986 =0000000F                  id_Float2:	equ (ptr_Float2-Ani_Sonic)/2	; $F
00016986 =00000010                  id_Spring:	equ (ptr_Spring-Ani_Sonic)/2	; $10
00016986 =00000011                  id_Hang:	equ (ptr_Hang-Ani_Sonic)/2	; $11
00016986 =00000012                  id_Leap1:	equ (ptr_Leap1-Ani_Sonic)/2	; $12
00016986 =00000013                  id_Leap2:	equ (ptr_Leap2-Ani_Sonic)/2	; $13
00016986 =00000014                  id_Surf:	equ (ptr_Surf-Ani_Sonic)/2	; $14
00016986 =00000015                  id_GetAir:	equ (ptr_GetAir-Ani_Sonic)/2	; $15
00016986 =00000016                  id_Burnt:	equ (ptr_Burnt-Ani_Sonic)/2	; $16
00016986 =00000017                  id_Drown:	equ (ptr_Drown-Ani_Sonic)/2	; $17
00016986 =00000018                  id_Death:	equ (ptr_Death-Ani_Sonic)/2	; $18
00016986 =00000019                  id_Hurt:	equ (ptr_Hurt-Ani_Sonic)/2	; $19
00016986 =0000001A                  id_WaterSlide:	equ (ptr_WaterSlide-Ani_Sonic)/2 ; $1A
00016986 =0000001B                  id_Null:	equ (ptr_Null-Ani_Sonic)/2	; $1B
00016986 =0000001C                  id_Float3:	equ (ptr_Float3-Ani_Sonic)/2	; $1C
00016986 =0000001D                  id_Float4:	equ (ptr_Float4-Ani_Sonic)/2	; $1D
00016986 =0000001E                  id_MaxRun:	equ (ptr_MaxRun-Ani_Sonic)/2	; $1E
00016986 =0000001F                  id_Spindash:	equ (ptr_Spindash-Ani_Sonic)/2	; $1F
00016986 =00000020                  id_Hurt2:	equ (ptr_Hurt2-Ani_Sonic)/2	; $21
00016986 =00000021                  id_GetUp:	equ (ptr_GetUp-Ani_Sonic)/2	; $22
00016986 =00000022                  id_Blink:	equ (ptr_Blink-Ani_Sonic)/2	; $23
00016986 =00000023                  id_Sit:		equ (ptr_Sit-Ani_Sonic)/2	; $24
00016986 =00000024                  id_Peelout:	equ (ptr_Peelout-Ani_Sonic)/2	; $25
00016986 =00000025                  id_Hang2:		equ	(ptr_Hang2-Ani_Sonic)/2
00016986 =00000025                  id_Hang2:		equ	(ptr_Hang2-Ani_Sonic)/2
00016986                            		include	"_incObj\Sonic LoadGfx.asm"
00016986                            ; ---------------------------------------------------------------------------
00016986                            ; Sonic	graphics loading subroutine
00016986                            ; ---------------------------------------------------------------------------
00016986                            
00016986                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016986                            
00016986                            
00016986                            Sonic_LoadGfx:			; XREF: Obj01_Control; et al
00016986 7000                       		moveq	#0,d0
00016988 1028 001A                  		move.b	$1A(a0),d0	; load frame number
0001698C B038 F766                  		cmp.b	($FFFFF766).w,d0
00016990 6700                       		beq.s	locret_13C96
00016992 11C0 F766                  		move.b	d0,($FFFFF766).w
00016996 45F9 0000 0000             		lea	(SonicDynPLC).l,a2
0001699C D040                       		add.w	d0,d0
0001699E D4F2 0000                  		adda.w	(a2,d0.w),a2
000169A2 7A00                       		moveq	#0,d5
000169A4 1A1A                       		move.b	(a2)+,d5
000169A6 5345                       		subq.w	#1,d5
000169A8 6B00                       		bmi.s	locret_13C96
000169AA 383C F000                  		move.w	#$F000,d4
000169AE 2C3C 0000 0000             		move.l	#Art_Sonic,d6
000169B4                            
000169B4                            SPLC_ReadEntry:
000169B4 7200                       		moveq	#0,d1
000169B6 121A                       		move.b	(a2)+,d1
000169B8 E149                       		lsl.w	#8,d1
000169BA 121A                       		move.b	(a2)+,d1
000169BC 3601                       		move.w	d1,d3
000169BE E04B                       		lsr.w	#8,d3
000169C0 0243 00F0                  		andi.w	#$F0,d3
000169C4 0643 0010                  		addi.w	#$10,d3
000169C8 0241 0FFF                  		andi.w	#$FFF,d1
000169CC EB89                       		lsl.l	#5,d1
000169CE D286                       		add.l	d6,d1
000169D0 3404                       		move.w	d4,d2
000169D2 D843                       		add.w	d3,d4
000169D4 D843                       		add.w	d3,d4
000169D6 4EB9 0000 1426             		jsr	(QueueDMATransfer).l
000169DC 51CD FFD6                  		dbf	d5,SPLC_ReadEntry	; repeat for number of entries
000169E0                            
000169E0                            locret_13C96:
000169E0 4E75                       		rts	
000169E2                            ; End of function Sonic_LoadGfx
000169E2                            ; End of function Sonic_LoadGfx
000169E2                            
000169E2                            		include	"_incObj\0A Drowning Countdown.asm"
000169E2                            ; ---------------------------------------------------------------------------
000169E2                            ; Object 0A - drowning countdown numbers and small bubbles that float out of
000169E2                            ; Sonic's mouth (LZ)
000169E2                            ; ---------------------------------------------------------------------------
000169E2                            
000169E2                            DrownCount:
000169E2 7000                       		moveq	#0,d0
000169E4 1028 0024                  		move.b	obRoutine(a0),d0
000169E8 323B 0000                  		move.w	Drown_Index(pc,d0.w),d1
000169EC 4EFB 1000                  		jmp	Drown_Index(pc,d1.w)
000169F0                            ; ===========================================================================
000169F0                            Drown_Index:
000169F0 0000                       ptr_Drown_Main:		dc.w Drown_Main-Drown_Index
000169F2 0000                       ptr_Drown_Animate:	dc.w Drown_Animate-Drown_Index
000169F4 0000                       ptr_Drown_ChkWater:	dc.w Drown_ChkWater-Drown_Index
000169F6 0000                       ptr_Drown_Display:	dc.w Drown_Display-Drown_Index
000169F8 0000                       ptr_Drown_Delete:	dc.w Drown_Delete-Drown_Index
000169FA 0000                       ptr_Drown_Countdown:	dc.w Drown_Countdown-Drown_Index
000169FC 0000                       ptr_Drown_AirLeft:	dc.w Drown_AirLeft-Drown_Index
000169FE 0000                       			dc.w Drown_Display-Drown_Index
00016A00 0000                       			dc.w Drown_Delete-Drown_Index
00016A02                            
00016A02 =00000030                  drown_origX:		equ $30		; original x-axis position
00016A02 =00000038                  drown_time:		equ $38		; time between each number changes
00016A02                            
00016A02 =00000000                  id_Drown_Main:		equ ptr_Drown_Main-Drown_Index		; 0
00016A02 =00000002                  id_Drown_Animate:	equ ptr_Drown_Animate-Drown_Index		; 2
00016A02 =00000004                  id_Drown_ChkWater:	equ ptr_Drown_ChkWater-Drown_Index	; 4
00016A02 =00000006                  id_Drown_Display:	equ ptr_Drown_Display-Drown_Index		; 6
00016A02 =00000008                  id_Drown_Delete:		equ ptr_Drown_Delete-Drown_Index		; 8
00016A02 =0000000A                  id_Drown_Countdown:	equ ptr_Drown_Countdown-Drown_Index	; $A
00016A02 =0000000C                  id_Drown_AirLeft:	equ ptr_Drown_AirLeft-Drown_Index		; $C
00016A02                            ; ===========================================================================
00016A02                            
00016A02                            Drown_Main:	; Routine 0
00016A02 5428 0024                  		addq.b	#2,obRoutine(a0)
00016A06 217C 0001 4DC0 0004        		move.l	#Map_Bub,obMap(a0)
00016A0E 317C 8348 0002             		move.w	#$8348,obGfx(a0)
00016A14 117C 0084 0001             		move.b	#$84,obRender(a0)
00016A1A 117C 0010 0014             		move.b	#$10,obActWid(a0)
00016A20 317C 0080 0018             		move.w	#$80,obPriority(a0)
00016A26 1028 0028                  		move.b	obSubtype(a0),d0 ; get bubble type
00016A2A 6A00                       		bpl.s	@smallbubble	; branch if $00-$7F
00016A2C                            
00016A2C 5028 0024                  		addq.b	#8,obRoutine(a0) ; goto Drown_Countdown next
00016A30 217C 0000 0000 0004        		move.l	#Map_Drown,obMap(a0)
00016A38 317C 0440 0002             		move.w	#$440,obGfx(a0)
00016A3E 0240 007F                  		andi.w	#$7F,d0
00016A42 1140 0033                  		move.b	d0,$33(a0)
00016A46 6000 0000                  		bra.w	Drown_Countdown
00016A4A                            ; ===========================================================================
00016A4A                            
00016A4A                            @smallbubble:
00016A4A 1140 001C                  		move.b	d0,obAnim(a0)
00016A4E 3168 0008 0030             		move.w	obX(a0),drown_origX(a0)
00016A54 317C FF78 0012             		move.w	#-$88,obVelY(a0)
00016A5A                            
00016A5A                            Drown_Animate:	; Routine 2
00016A5A 43F9 0000 0000             		lea	(Ani_Drown).l,a1
00016A60 4EB9 0000 CA24             		jsr	(AnimateSprite).l
00016A66                            
00016A66                            Drown_ChkWater:	; Routine 4
00016A66 3038 F646                  		move.w	(v_waterpos1).w,d0
00016A6A B068 000C                  		cmp.w	obY(a0),d0	; has bubble reached the water surface?
00016A6E 6500                       		bcs.s	@wobble		; if not, branch
00016A70                            
00016A70 117C 0006 0024             		move.b	#id_Drown_Display,obRoutine(a0) ; goto Drown_Display next
00016A76 5E28 001C                  		addq.b	#7,obAnim(a0)
00016A7A 0C28 000D 001C             		cmpi.b	#$D,obAnim(a0)
00016A80 6700                       		beq.s	Drown_Display
00016A82 6000                       		bra.s	Drown_Display
00016A84                            ; ===========================================================================
00016A84                            
00016A84                            @wobble:
00016A84 4A38 F7C7                  		tst.b	(f_wtunnelmode).w ; is Sonic in a water tunnel?
00016A88 6700                       		beq.s	@notunnel	; if not, branch
00016A8A 5868 0030                  		addq.w	#4,drown_origX(a0)
00016A8E                            
00016A8E                            	@notunnel:
00016A8E 1028 0026                  		move.b	obAngle(a0),d0
00016A92 5228 0026                  		addq.b	#1,obAngle(a0)
00016A96 0240 007F                  		andi.w	#$7F,d0
00016A9A 43F9 0000 0000             		lea	(Drown_WobbleData).l,a1
00016AA0 1031 0000                  		move.b	(a1,d0.w),d0
00016AA4 4880                       		ext.w	d0
00016AA6 D068 0030                  		add.w	drown_origX(a0),d0
00016AAA 3140 0008                  		move.w	d0,obX(a0)
00016AAE 6100                       		bsr.s	Drown_ShowNumber
00016AB0 4EB9 0000 F964             		jsr	(SpeedToPos).l
00016AB6 4A28 0001                  		tst.b	obRender(a0)
00016ABA 6A00                       		bpl.s	@delete
00016ABC 4EF9 0000 F978             		jmp	(DisplaySprite).l
00016AC2                            
00016AC2                            	@delete:
00016AC2 4EF9 0000 F9B8             		jmp	(DeleteObject).l
00016AC8                            ; ===========================================================================
00016AC8                            
00016AC8                            Drown_Display:	; Routine 6, Routine $E
00016AC8 6100                       		bsr.s	Drown_ShowNumber
00016ACA 43F9 0000 0000             		lea	(Ani_Drown).l,a1
00016AD0 4EB9 0000 CA24             		jsr	(AnimateSprite).l
00016AD6 4EF9 0000 F978             		jmp	(DisplaySprite).l
00016ADC                            ; ===========================================================================
00016ADC                            
00016ADC                            Drown_Delete:	; Routine 8, Routine $10
00016ADC 4EF9 0000 F9B8             		jmp	(DeleteObject).l
00016AE2                            ; ===========================================================================
00016AE2                            
00016AE2                            Drown_AirLeft:	; Routine $C
00016AE2 0C78 000C FE14             		cmpi.w	#$C,(v_air).w	; check air remaining
00016AE8 6200                       		bhi.s	Drown_AirLeft_Delete		; if higher than $C, branch
00016AEA 5368 0038                  		subq.w	#1,drown_time(a0)
00016AEE 6600                       		bne.s	@display
00016AF0 117C 000E 0024             		move.b	#id_Drown_Display+8,obRoutine(a0) ; goto Drown_Display next
00016AF6 5E28 001C                  		addq.b	#7,obAnim(a0)
00016AFA 60CC                       		bra.s	Drown_Display
00016AFC                            ; ===========================================================================
00016AFC                            
00016AFC                            	@display:
00016AFC 43F9 0000 0000             		lea	(Ani_Drown).l,a1
00016B02 4EB9 0000 CA24             		jsr	(AnimateSprite).l
00016B08 4A28 0001                  		tst.b	obRender(a0)
00016B0C 6A00                       		bpl.s	Drown_AirLeft_Delete
00016B0E 4EF9 0000 F978             		jmp	(DisplaySprite).l
00016B14                            
00016B14                            Drown_AirLeft_Delete:	
00016B14 4EF9 0000 F9B8             		jmp	(DeleteObject).l
00016B1A                            ; ===========================================================================
00016B1A                            
00016B1A                            Drown_ShowNumber:
00016B1A 4A68 0038                  		tst.w	drown_time(a0)
00016B1E 6700                       		beq.s	@nonumber
00016B20 5368 0038                  		subq.w	#1,drown_time(a0)	; decrement timer
00016B24 6600                       		bne.s	@nonumber	; if time remains, branch
00016B26 0C28 0007 001C             		cmpi.b	#7,obAnim(a0)
00016B2C 6400                       		bcc.s	@nonumber
00016B2E                            
00016B2E 317C 000F 0038             		move.w	#15,drown_time(a0)
00016B34 4268 0012                  		clr.w	obVelY(a0)
00016B38 117C 0080 0001             		move.b	#$80,obRender(a0)
00016B3E 3028 0008                  		move.w	obX(a0),d0
00016B42 9078 F700                  		sub.w	(v_screenposx).w,d0
00016B46 0640 0080                  		addi.w	#$80,d0
00016B4A 3140 0008                  		move.w	d0,obX(a0)
00016B4E 3028 000C                  		move.w	obY(a0),d0
00016B52 9078 F704                  		sub.w	(v_screenposy).w,d0
00016B56 0640 0080                  		addi.w	#$80,d0
00016B5A 3140 000A                  		move.w	d0,obScreenY(a0)
00016B5E 117C 000C 0024             		move.b	#id_Drown_AirLeft,obRoutine(a0) ; goto Drown_AirLeft next
00016B64                            
00016B64                            	@nonumber:
00016B64 4E75                       		rts	
00016B66                            ; ===========================================================================
00016B66                            Drown_WobbleData:
00016B66 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
00016B76 0202 0303 0303 0303 0303+  		dc.b 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
00016B86 0303 0303 0303 0303 0303+  		dc.b 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2
00016B96 0202 0202 0202 0101 0101+  		dc.b 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0
00016BA6 00FF FFFF FFFF FEFE FEFE+  		dc.b 0, -1, -1, -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00016BB6 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00016BC6 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -3
00016BD6 FDFD FDFD FDFD FEFE FEFE+  		dc.b -3, -3, -3, -3, -3, -3, -2, -2, -2, -2, -2, -1, -1, -1, -1, -1
00016BE6 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
00016BF6 0202 0303 0303 0303 0303+  		dc.b 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
00016C06 0303 0303 0303 0303 0303+  		dc.b 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2
00016C16 0202 0202 0202 0101 0101+  		dc.b 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0
00016C26 00FF FFFF FFFF FEFE FEFE+  		dc.b 0, -1, -1, -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00016C36 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00016C46 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -3
00016C56 FDFD FDFD FDFD FEFE FEFE+  		dc.b -3, -3, -3, -3, -3, -3, -2, -2, -2, -2, -2, -1, -1, -1, -1, -1
00016C66                            ; ===========================================================================
00016C66                            
00016C66                            Drown_Countdown:; Routine $A
00016C66 4A68 002C                  		tst.w	$2C(a0)
00016C6A 6600 0000                  		bne.w	@loc_13F86
00016C6E 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
00016C74 6400 0000                  		bcc.w	@nocountdown
00016C78 0838 0006 D022             		btst	#6,(v_player+obStatus).w ; is Sonic underwater?
00016C7E 6700 0000                  		beq.w	@nocountdown	; if not, branch
00016C82                            
00016C82 5368 0038                  		subq.w	#1,drown_time(a0)	; decrement timer
00016C86 6A00 0000                  		bpl.w	@nochange	; branch if time remains
00016C8A 317C 003B 0038             		move.w	#59,drown_time(a0)
00016C90 317C 0001 0036             		move.w	#1,$36(a0)
00016C96 4EB9 0000 3A0C             		jsr	(RandomNumber).l
00016C9C 0240 0001                  		andi.w	#1,d0
00016CA0 1140 0034                  		move.b	d0,$34(a0)
00016CA4 3038 FE14                  		move.w	(v_air).w,d0	; check air remaining
00016CA8 0C40 0019                  		cmpi.w	#25,d0
00016CAC 6700                       		beq.s	@warnsound	; play sound if	air is 25
00016CAE 0C40 0014                  		cmpi.w	#20,d0
00016CB2 6700                       		beq.s	@warnsound
00016CB4 0C40 000F                  		cmpi.w	#15,d0
00016CB8 6700                       		beq.s	@warnsound
00016CBA 0C40 000C                  		cmpi.w	#12,d0
00016CBE 6200                       		bhi.s	@reduceair	; if air is above 12, branch
00016CC0                            
00016CC0                            	@skipmusic:
00016CCA 5328 0032                  		subq.b	#1,$32(a0)
00016CCE 6A00                       		bpl.s	@reduceair
00016CD0 1168 0033 0032             		move.b	$33(a0),$32(a0)
00016CD6 08E8 0007 0036             		bset	#7,$36(a0)
00016CDC 6000                       		bra.s	@reduceair
00016CDE                            ; ===========================================================================
00016CDE                            
00016CDE                            @warnsound:
00016CE8                            
00016CE8                            @reduceair:
00016CE8 5378 FE14                  		subq.w	#1,(v_air).w	; subtract 1 from air remaining
00016CEC 6400 0000                  		bcc.w	@gotomakenum	; if air is above 0, branch
00016CF0                            
00016CF0                            		; Sonic drowns here
00016CF0 6100 0000                  		bsr.w	ResumeMusic
00016CF4 11FC 0081 F7C8             		move.b	#$81,(f_lockmulti).w ; lock controls
00016D04 117C 000A 0034             		move.b	#$A,$34(a0)
00016D0A 317C 0001 0036             		move.w	#1,$36(a0)
00016D10 317C 0078 002C             		move.w	#$78,$2C(a0)
00016D16 2F08                       		move.l	a0,-(sp)
00016D18 41F8 D000                  		lea	(v_player).w,a0
00016D1C 6100 F6B6                  		bsr.w	Sonic_ResetOnFloor
00016D20 117C 0017 001C             		move.b	#id_Drown,obAnim(a0)	; use Sonic's drowning animation
00016D26 08E8 0001 0022             		bset	#1,obStatus(a0)
00016D2C 08E8 0007 0002             		bset	#7,obGfx(a0)
00016D32 317C 0000 0012             		move.w	#0,obVelY(a0)
00016D38 317C 0000 0010             		move.w	#0,obVelX(a0)
00016D3E 317C 0000 0020             		move.w	#0,obInertia(a0)
00016D44 11FC 0001 F744             		move.b	#1,(f_nobgscroll).w
00016D4A 205F                       		movea.l	(sp)+,a0
00016D4C 4E75                       		rts	
00016D4E                            ; ===========================================================================
00016D4E                            
00016D4E                            @loc_13F86:
00016D4E 5368 002C                  		subq.w	#1,$2C(a0)
00016D52 6600                       		bne.s	@loc_13F94
00016D54 11FC 0006 D024             		move.b	#6,(v_player+obRoutine).w
00016D5A 4E75                       		rts	
00016D5C                            ; ===========================================================================
00016D5C                            
00016D5C                            	@loc_13F94:
00016D5C 2F08                       		move.l	a0,-(sp)
00016D5E 41F8 D000                  		lea	(v_player).w,a0
00016D62 4EB9 0000 F964             		jsr	(SpeedToPos).l
00016D68 0668 0010 0012             		addi.w	#$10,obVelY(a0)
00016D6E 205F                       		movea.l	(sp)+,a0
00016D70 6000                       		bra.s	@nochange
00016D72                            ; ===========================================================================
00016D72                            
00016D72                            @gotomakenum:
00016D72 6000                       		bra.s	@makenum
00016D74                            ; ===========================================================================
00016D74                            
00016D74                            @nochange:
00016D74 4A68 0036                  		tst.w	$36(a0)
00016D78 6700 0000                  		beq.w	@nocountdown
00016D7C 5368 003A                  		subq.w	#1,$3A(a0)
00016D80 6A00 0000                  		bpl.w	@nocountdown
00016D84                            
00016D84                            @makenum:
00016D84 4EB9 0000 3A0C             		jsr	(RandomNumber).l
00016D8A 0240 000F                  		andi.w	#$F,d0
00016D8E 3140 003A                  		move.w	d0,$3A(a0)
00016D92 4EB9 0000 FE04             		jsr	(FindFreeObj).l
00016D98 6600 0000                  		bne.w	@nocountdown
00016D9C 12BC 000A                  		move.b	#id_DrownCount,0(a1) ; load object
00016DA0 3378 D008 0008             		move.w	(v_player+obX).w,obX(a1) ; match X position to Sonic
00016DA6 7006                       		moveq	#6,d0
00016DA8 0838 0000 D022             		btst	#0,(v_player+obStatus).w
00016DAE 6700                       		beq.s	@noflip
00016DB0 4440                       		neg.w	d0
00016DB2 137C 0040 0026             		move.b	#$40,obAngle(a1)
00016DB8                            
00016DB8                            	@noflip:
00016DB8 D169 0008                  		add.w	d0,obX(a1)
00016DBC 3378 D00C 000C             		move.w	(v_player+obY).w,obY(a1)
00016DC2 137C 0006 0028             		move.b	#6,obSubtype(a1)
00016DC8 4A68 002C                  		tst.w	$2C(a0)
00016DCC 6700 0000                  		beq.w	@loc_1403E
00016DD0 0268 0007 003A             		andi.w	#7,$3A(a0)
00016DD6 0668 0000 003A             		addi.w	#0,$3A(a0)
00016DDC 3038 D00C                  		move.w	(v_player+obY).w,d0
00016DE0 0440 000C                  		subi.w	#$C,d0
00016DE4 3340 000C                  		move.w	d0,obY(a1)
00016DE8 4EB9 0000 3A0C             		jsr	(RandomNumber).l
00016DEE 1340 0026                  		move.b	d0,obAngle(a1)
00016DF2 3038 FE04                  		move.w	(v_framecount).w,d0
00016DF6 0200 0003                  		andi.b	#3,d0
00016DFA 6600                       		bne.s	@loc_14082
00016DFC 137C 000E 0028             		move.b	#$E,obSubtype(a1)
00016E02 6000                       		bra.s	@loc_14082
00016E04                            ; ===========================================================================
00016E04                            
00016E04                            @loc_1403E:
00016E04 0828 0007 0036             		btst	#7,$36(a0)
00016E0A 6700                       		beq.s	@loc_14082
00016E0C 3438 FE14                  		move.w	(v_air).w,d2
00016E10 E24A                       		lsr.w	#1,d2
00016E12 4EB9 0000 3A0C             		jsr	(RandomNumber).l
00016E18 0240 0003                  		andi.w	#3,d0
00016E1C 6600                       		bne.s	@loc_1406A
00016E1E 08E8 0006 0036             		bset	#6,$36(a0)
00016E24 6600                       		bne.s	@loc_14082
00016E26 1342 0028                  		move.b	d2,obSubtype(a1)
00016E2A 337C 001C 0038             		move.w	#$1C,drown_time(a1)
00016E30                            
00016E30                            	@loc_1406A:
00016E30 4A28 0034                  		tst.b	$34(a0)
00016E34 6600                       		bne.s	@loc_14082
00016E36 08E8 0006 0036             		bset	#6,$36(a0)
00016E3C 6600                       		bne.s	@loc_14082
00016E3E 1342 0028                  		move.b	d2,obSubtype(a1)
00016E42 337C 001C 0038             		move.w	#$1C,drown_time(a1)
00016E48                            
00016E48                            @loc_14082:
00016E48 5328 0034                  		subq.b	#1,$34(a0)
00016E4C 6A00                       		bpl.s	@nocountdown
00016E4E 4268 0036                  		clr.w	$36(a0)
00016E52                            
00016E52                            @nocountdown:
00016E52 4E75                       		rts	
00016E52 4E75                       		rts	
00016E54                            
00016E54                            
00016E54                            ; ---------------------------------------------------------------------------
00016E54                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
00016E54                            ; ---------------------------------------------------------------------------
00016E54                            
00016E54                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016E54                            
00016E54                            
00016E54                            ResumeMusic:
00016E54                            		;cmpi.w	#12,(v_air).w	; more than 12 seconds of air left?
00016E54                            		;bhi.s	@over12		; if yes, branch
00016E54                            		;move.b	(v_Saved_music),d0
00016E54                            		;tst.b	(v_invinc).w ; is Sonic invincible?
00016E54                            		;beq.s	@notinvinc ; if not, branch
00016E54                            		;move.w	#bgm_Invincible,d0
00016E54                            		;tst.b	(v_shoes).w ; is Sonic speed shoes?
00016E54                            		;beq.s	@notinvinc	; if not, branch
00016E54                            		;move.w	#bgm_Ending,d0
00016E54                            
00016E54                            	;@notinvinc:
00016E54                            		;tst.b	(f_lockscreen).w ; is Sonic at a boss?
00016E54                            		;beq.s	@playselected ; if not, branch
00016E54                            		;move.w	#bgm_Boss,d0
00016E54                            
00016E54                            	;@playselected:
00016E54                            		;jsr	(PlaySound).l
00016E54                            
00016E54                            	;@over12:
00016E54 31FC 001E FE14             		move.w	#30,(v_air).w	; reset air to 30 seconds
00016E5A 4238 D372                  		clr.b	(v_objspace+$340+$32).w
00016E5E 4E75                       		rts	
00016E60                            
00016E60                            ;End of function ResumeMusic
00016E60                            
00016E60                            ; ===========================================================================
00016E60                            
00016E60                            		include	"_anim\Drowning Countdown.asm"
00016E60                            ; ---------------------------------------------------------------------------
00016E60                            ; Animation script - countdown numbers and bubbles (LZ)
00016E60                            ; ---------------------------------------------------------------------------
00016E60 0000                       Ani_Drown:	dc.w @zeroappear-Ani_Drown
00016E62 0000                       		dc.w @oneappear-Ani_Drown
00016E64 0000                       		dc.w @twoappear-Ani_Drown
00016E66 0000                       		dc.w @threeappear-Ani_Drown
00016E68 0000                       		dc.w @fourappear-Ani_Drown
00016E6A 0000                       		dc.w @fiveappear-Ani_Drown
00016E6C 0000                       		dc.w @smallbubble-Ani_Drown
00016E6E 0000                       		dc.w @zeroflash-Ani_Drown
00016E70 0000                       		dc.w @oneflash-Ani_Drown
00016E72 0000                       		dc.w @twoflash-Ani_Drown
00016E74 0000                       		dc.w @threeflash-Ani_Drown
00016E76 0000                       		dc.w @fourflash-Ani_Drown
00016E78 0000                       		dc.w @fiveflash-Ani_Drown
00016E7A 0000                       		dc.w @blank-Ani_Drown
00016E7C 0000                       		dc.w @mediumbubble-Ani_Drown
00016E7E 0500 0102 0304 090D FC     @zeroappear:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, afRoutine
00016E88 00                         		even
00016E88 0500 0102 0304 0C12 FC     @oneappear:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	afRoutine
00016E92 00                         		even
00016E92 0500 0102 0304 0C11 FC     @twoappear:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	afRoutine
00016E9C 00                         		even
00016E9C 0500 0102 0304 0B10 FC     @threeappear:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	afRoutine
00016EA6 00                         		even
00016EA6 0500 0102 0304 090F FC     @fourappear:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, afRoutine
00016EB0 00                         		even
00016EB0 0500 0102 0304 0A0E FC     @fiveappear:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, afRoutine
00016EBA 00                         		even
00016EBA 0E00 0102 FC               @smallbubble:	dc.b $E, 0, 1, 2, afRoutine
00016EC0 00                         		even
00016EC0 0716 0D16 0D16 0DFC        @zeroflash:	dc.b 7,	$16, $D, $16, $D, $16, $D, afRoutine
00016EC8 0716 1216 1216 12FC        @oneflash:	dc.b 7,	$16, $12, $16, $12, $16, $12, afRoutine
00016ED0 0716 1116 1116 11FC        @twoflash:	dc.b 7,	$16, $11, $16, $11, $16, $11, afRoutine
00016ED8 0716 1016 1016 10FC        @threeflash:	dc.b 7,	$16, $10, $16, $10, $16, $10, afRoutine
00016EE0 0716 0F16 0F16 0FFC        @fourflash:	dc.b 7,	$16, $F, $16, $F, $16, $F, afRoutine
00016EE8 0716 0E16 0E16 0EFC        @fiveflash:	dc.b 7,	$16, $E, $16, $E, $16, $E, afRoutine
00016EF0 0EFC                       @blank:		dc.b $E, afRoutine
00016EF2 0E01 0203 04FC             @mediumbubble:	dc.b $E, 1, 2, 3, 4, afRoutine
00016EF8                            		even
00016EF8                            		even
00016EF8                            Map_Drown:	include	"_maps\Drowning Countdown.asm"
00016EF8                            ; ---------------------------------------------------------------------------
00016EF8                            ; Sprite mappings - drowning countdown numbers (LZ)
00016EF8                            ; ---------------------------------------------------------------------------
00016EF8                            Map_Drown_internal:
00016EF8 0000                       		dc.w @num-Map_Drown_internal
00016EFA 01                         @num:		dc.b 1
00016EFB E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00016F00                            		even
00016F00                            		even
00016F00                            
00016F00                            		include	"_incObj\4E Silver Shield.asm"
00016F00                            ; ---------------------------------------------------------------------------
00016F00                            ; Object 4E - Silver Shield
00016F00                            ; ---------------------------------------------------------------------------
00016F00                            
00016F00                            SpShieldItem:
00016F00 223C 0000 0000             		move.l #Unc_SpShield,d1 ; Call for Silver Shield Art
00016F06 343C A820                  		move.w #$A820,d2 ; Load Art from this location (VRAM location*20)
00016F0A                            		; In this case, VRAM = $541*20
00016F0A 363C 0200                  		move.w #$200,d3
00016F0E 4EB9 0000 1426             		jsr (QueueDMATransfer).l
00016F14                            ; ---------------------------------------------------------------------------
00016F14                            SpShieldObj_Main:
00016F14 7000                       		moveq #0,d0
00016F16 1028 0024                  		move.b $24(a0),d0
00016F1A 323B 0000                  		move.w SpShield_Index(pc,d0.w),d1
00016F1E 4EFB 1000                  		jmp SpShield_Index(pc,d1.w)
00016F22                            ; ===========================================================================
00016F22                            SpShield_Index:
00016F22 0000                       		dc.w SpShield_Init-SpShield_Index
00016F24 0000                       		dc.w SpShieldChecks-SpShield_Index
00016F26                            ; ===========================================================================
00016F26                            SpShield_Init:
00016F26 5428 0024                  		addq.b #2,$24(a0)
00016F2A 217C 0000 0000 0004        		move.l #Map_Shield,$4(A0) ; Load Shield Map into place
00016F32 117C 0004 0001             		move.b #4,1(a0)
00016F38 317C 0080 0018             		move.w #$80,$18(a0)
00016F3E 117C 0018 0014             		move.b #$18,obActWid(a0)
00016F44 317C 0541 0002             		move.w #$541,2(a0) ; Set VRAM location
00016F4A 0838 0007 D002             		btst #7,($FFFFD002).w
00016F50 6700                       		beq.s SpShieldChecks
00016F52 08E8 0007 0002             		bset #7,2(a0)
00016F58                            ; ---------------------------------------------------------------------------
00016F58                            SpShieldChecks:
00016F58 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; Test if Sonic has a shield
00016F5C 6600                       		bne.s SpSonicHasShield ; If so, branch to do nothing
00016F5E 4A38 F5CA                  		tst.b (v_SpShield).w ; Test if Sonic got invisibility
00016F62 6700                       		beq.s Spjmp_DeleteObj38 ; If so, delete object temporarily
00016F64                            SpShieldProperties:
00016F64 3178 D008 0008             		move.w ($FFFFD008).w,8(a0) ; Load Main Character X-position
00016F6A 3178 D00C 000C             		move.w ($FFFFD00C).w,$C(a0) ; Load Main Character Y-position
00016F70 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0) ; Something about Character status
00016F76 43F9 0000 0000             		lea (Ani_Shield).l, a1 ; Load Animation Scripts into a1
00016F7C 4EB9 0000 CA24             		jsr AnimateSprite
00016F82 4EFA 89F4                  		jmp DisplaySprite
00016F86                            SpSonicHasShield:
00016F86 4E75                       		rts
00016F88                            Spjmp_DeleteObj38: ; loc_12648:
00016F88 4EFA 8A2E                  		jmp DeleteObject
00016F88 4EFA 8A2E                  		jmp DeleteObject
00016F8C                            		include	"_incObj\04 Gold Shield.asm"
00016F8C                            ; ---------------------------------------------------------------------------
00016F8C                            ; Object 04 - Gold shield
00016F8C                            ; ---------------------------------------------------------------------------
00016F8C                            
00016F8C                            GShieldItem:
00016F8C 223C 0000 0000             		move.l #Unc_GShield,d1 ; Call for Gold Shield Art
00016F92 343C A820                  		move.w #$A820,d2 ; Load Art from this location (VRAM location*20)
00016F96                            		; In this case, VRAM = $541*20
00016F96 363C 0200                  		move.w #$200,d3
00016F9A 4EB9 0000 1426             		jsr (QueueDMATransfer).l
00016FA0                            ; ---------------------------------------------------------------------------
00016FA0                            GShieldObj_Main:
00016FA0 7000                       		moveq #0,d0
00016FA2 1028 0024                  		move.b $24(a0),d0
00016FA6 323B 0000                  		move.w GShield_Index(pc,d0.w),d1
00016FAA 4EFB 1000                  		jmp GShield_Index(pc,d1.w)
00016FAE                            ; ===========================================================================
00016FAE                            GShield_Index:
00016FAE 0000                       		dc.w GShield_Init-GShield_Index
00016FB0 0000                       		dc.w GShieldChecks-GShield_Index
00016FB2                            ; ===========================================================================
00016FB2                            GShield_Init:
00016FB2 5428 0024                  		addq.b #2,$24(a0)
00016FB6 217C 0000 0000 0004        		move.l #Map_Shield,$4(A0) ; Load Shield Map into place
00016FBE 117C 0004 0001             		move.b #4,1(a0)
00016FC4 317C 0080 0018             		move.w #$80,$18(a0)
00016FCA 117C 0018 0014             		move.b #$18,obActWid(a0)
00016FD0 317C 0541 0002             		move.w #$541,2(a0) ; Set VRAM location
00016FD6 0838 0007 D002             		btst #7,($FFFFD002).w
00016FDC 6700                       		beq.s GShieldChecks
00016FDE 08E8 0007 0002             		bset #7,2(a0)
00016FE4                            ; ---------------------------------------------------------------------------
00016FE4                            GShieldChecks:
00016FE4 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; Test if Sonic has a shield
00016FE8 6600                       		bne.s GSonicHasShield ; If so, branch to do nothing
00016FEA 4A38 F5C9                  		tst.b (v_GShield).w ; Test if Sonic got invisibility
00016FEE 6700                       		beq.s Gjmp_DeleteObj38 ; If so, delete object temporarily
00016FF0                            GShieldProperties:
00016FF0 3178 D008 0008             		move.w ($FFFFD008).w,8(a0) ; Load Main Character X-position
00016FF6 3178 D00C 000C             		move.w ($FFFFD00C).w,$C(a0) ; Load Main Character Y-position
00016FFC 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0) ; Something about Character status
00017002 43F9 0000 0000             		lea (Ani_Shield).l, a1 ; Load Animation Scripts into a1
00017008 4EB9 0000 CA24             		jsr AnimateSprite
0001700E 4EFA 8968                  		jmp DisplaySprite
00017012                            GSonicHasShield:
00017012 4E75                       		rts
00017014                            Gjmp_DeleteObj38: ; loc_12648:
00017014 4EFA 89A2                  		jmp DeleteObject
00017014 4EFA 89A2                  		jmp DeleteObject
00017018                            		include	"_incObj\07 Red Shield.asm"
00017018                            ; ---------------------------------------------------------------------------
00017018                            ; Object 07 - red shield
00017018                            ; ---------------------------------------------------------------------------
00017018                            
00017018                            RShieldItem:
00017018 223C 0000 0000             		move.l #Unc_RedShield,d1 ; Call for Red Shield Art
0001701E 343C A820                  		move.w #$A820,d2 ; Load Art from this location (VRAM location*20)
00017022                            		; In this case, VRAM = $541*20
00017022 363C 0200                  		move.w #$200,d3
00017026 4EB9 0000 1426             		jsr (QueueDMATransfer).l
0001702C                            ; ---------------------------------------------------------------------------
0001702C                            RShieldObj_Main:
0001702C 7000                       		moveq #0,d0
0001702E 1028 0024                  		move.b $24(a0),d0
00017032 323B 0000                  		move.w RShield_Index(pc,d0.w),d1
00017036 4EFB 1000                  		jmp RShield_Index(pc,d1.w)
0001703A                            ; ===========================================================================
0001703A                            RShield_Index:
0001703A 0000                       		dc.w RShield_Init-RShield_Index
0001703C 0000                       		dc.w RShieldChecks-RShield_Index
0001703E                            ; ===========================================================================
0001703E                            RShield_Init:
0001703E 5428 0024                  		addq.b #2,$24(a0)
00017042 217C 0000 0000 0004        		move.l #Map_Shield,$4(A0) ; Load Shield Map into place
0001704A 117C 0004 0001             		move.b #4,1(a0)
00017050 317C 0080 0018             		move.w #$80,$18(a0)
00017056 117C 0018 0014             		move.b #$18,obActWid(a0)
0001705C 317C 0541 0002             		move.w #$541,2(a0) ; Set VRAM location
00017062 0838 0007 D002             		btst #7,($FFFFD002).w
00017068 6700                       		beq.s RShieldChecks
0001706A 08E8 0007 0002             		bset #7,2(a0)
00017070                            ; ---------------------------------------------------------------------------
00017070                            RShieldChecks:
00017070 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; Test if Sonic has a shield
00017074 6600                       		bne.s RSonicHasShield ; If so, branch to do nothing
00017076 4A38 F5C8                  		tst.b (v_rshield).w ; Test if Sonic got invisibility
0001707A 6700                       		beq.s Rjmp_DeleteObj38 ; If so, delete object temporarily
0001707C                            RShieldProperties:
0001707C 3178 D008 0008             		move.w ($FFFFD008).w,8(a0) ; Load Main Character X-position
00017082 3178 D00C 000C             		move.w ($FFFFD00C).w,$C(a0) ; Load Main Character Y-position
00017088 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0) ; Something about Character status
0001708E 43F9 0000 0000             		lea (Ani_Shield).l, a1 ; Load Animation Scripts into a1
00017094 4EB9 0000 CA24             		jsr AnimateSprite
0001709A 4EFA 88DC                  		jmp DisplaySprite
0001709E                            RSonicHasShield:
0001709E 4E75                       		rts
000170A0                            Rjmp_DeleteObj38: ; loc_12648:
000170A0 4EFA 8916                  		jmp DeleteObject
000170A0 4EFA 8916                  		jmp DeleteObject
000170A4                            		include	"_incObj\38 Shield.asm"
000170A4                            ; ---------------------------------------------------------------------------
000170A4                            ; Object 38 - shield
000170A4                            ; ---------------------------------------------------------------------------
000170A4                            
000170A4                            ShieldItem:
000170A4 223C 0000 0000             		move.l #Unc_Shield,d1 ; Call for Regular Shield Art
000170AA 343C A820                  		move.w #$A820,d2 ; Load Art from this location (VRAM location*20)
000170AE                            		; In this case, VRAM = $541*20
000170AE 363C 0200                  		move.w #$200,d3
000170B2 4EB9 0000 1426             		jsr (QueueDMATransfer).l
000170B8                            ; ---------------------------------------------------------------------------
000170B8                            ShieldObj_Main:
000170B8 7000                       		moveq #0,d0
000170BA 1028 0024                  		move.b $24(a0),d0
000170BE 323B 0000                  		move.w Shield_Index(pc,d0.w),d1
000170C2 4EFB 1000                  		jmp Shield_Index(pc,d1.w)
000170C6                            ; ===========================================================================
000170C6                            Shield_Index:
000170C6 0000                       		dc.w Shield_Init-Shield_Index
000170C8 0000                       		dc.w ShieldChecks-Shield_Index
000170CA                            ; ===========================================================================
000170CA                            Shield_Init:
000170CA 5428 0024                  		addq.b #2,$24(a0)
000170CE 217C 0000 0000 0004        		move.l #Map_Shield,$4(A0) ; Load Shield Map into place
000170D6 117C 0004 0001             		move.b #4,1(a0)
000170DC 317C 0080 0018             		move.w #$80,$18(a0)
000170E2 117C 0018 0014             		move.b #$18,obActWid(a0)
000170E8 317C 0541 0002             		move.w #$541,2(a0) ; Set VRAM location
000170EE 0838 0007 D002             		btst #7,($FFFFD002).w
000170F4 6700                       		beq.s ShieldChecks
000170F6 08E8 0007 0002             		bset #7,2(a0)
000170FC                            ; ---------------------------------------------------------------------------
000170FC                            ShieldChecks:
000170FC 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; Test if Sonic has a shield
00017100 6600                       		bne.s SonicHasShield ; If so, branch to do nothing
00017102 4A38 FE2C                  		tst.b ($FFFFFE2C).w ; Test if Sonic got invisibility
00017106 6700                       		beq.s jmp_DeleteObj38 ; If so, delete object temporarily
00017108                            ShieldProperties:
00017108 3178 D008 0008             		move.w ($FFFFD008).w,8(a0) ; Load Main Character X-position
0001710E 3178 D00C 000C             		move.w ($FFFFD00C).w,$C(a0) ; Load Main Character Y-position
00017114 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0) ; Something about Character status
0001711A 43F9 0000 0000             		lea (Ani_Shield).l, a1 ; Load Animation Scripts into a1
00017120 4EB9 0000 CA24             		jsr AnimateSprite
00017126 4EFA 8850                  		jmp DisplaySprite
0001712A                            SonicHasShield:
0001712A 4E75                       		rts
0001712C                            jmp_DeleteObj38: ; loc_12648:
0001712C 4EFA 888A                  		jmp DeleteObject
0001712C 4EFA 888A                  		jmp DeleteObject
00017130                            		include	"_incObj\19 Invincibility Stars.asm"		
00017130                            ; ---------------------------------------------------------------------------
00017130                            ; Object 19 - Invincibility Stars
00017130                            ; ---------------------------------------------------------------------------
00017130                            
00017130                            InvStarsObj:
00017130 223C 0000 0000             		move.l #Unc_Stars,d1
00017136 343C A820                  		move.w #$A820,d2
0001713A 363C 0200                  		move.w #$200,d3
0001713E 4EB9 0000 1426             		jsr (QueueDMATransfer).l
00017144                            Invincibility_Main:
00017144 7000                       		moveq #0,d0
00017146 1028 0024                  		move.b $24(a0),d0
0001714A                            Invincibility_Init:
0001714A 5428 0024                  		addq.b #2,$24(a0)
0001714E 217C 0000 0000 0004        		move.l #Map_Shield,4(a0) ; loads mapping
00017156 117C 0004 0001             		move.b #4,1(a0)
0001715C 317C 0080 0018             		move.w #$80,$18(a0)
00017162 117C 0010 0014             		move.b #$10,obActWid(a0)
00017168 317C 0541 0002             		move.w #$541,2(a0) ; shield specific code
0001716E                            ; ===========================================================================
0001716E                            
0001716E                            Obj19_Stars: ; XREF: Obj38_Index
0001716E 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; does Sonic have invincibility?
00017172 6700                       		beq.s Obj19_Delete2 ; if not, branch
00017174 3038 F7A8                  		move.w ($FFFFF7A8).w,d0
00017178 1228 001C                  		move.b $1C(a0),d1
0001717C 5301                       		subq.b #1,d1
0001717E 6000                       		bra.s Obj19_StarTrail
00017180                            ; ===========================================================================
00017180 E909                       		lsl.b #4,d1
00017182 5801                       		addq.b #4,d1
00017184 9001                       		sub.b d1,d0
00017186 1228 0030                  		move.b $30(a0),d1
0001718A 9001                       		sub.b d1,d0
0001718C 5801                       		addq.b #4,d1
0001718E 0201 000F                  		andi.b #$F,d1
00017192 1141 0030                  		move.b d1,$30(a0)
00017196 6000                       		bra.s Obj19_StarTrail2a
00017198                            ; ===========================================================================
00017198                            
00017198                            Obj19_StarTrail: ; XREF: Obj19_Stars
00017198 E709                       		lsl.b #3,d1
0001719A 1401                       		move.b d1,d2
0001719C D201                       		add.b d1,d1
0001719E D202                       		add.b d2,d1
000171A0 5801                       		addq.b #4,d1
000171A2 9001                       		sub.b d1,d0
000171A4 1228 0030                  		move.b $30(a0),d1
000171A8 9001                       		sub.b d1,d0
000171AA 5801                       		addq.b #4,d1
000171AC 0C01 0018                  		cmpi.b #$18,d1
000171B0 6500                       		bcs.s Obj19_StarTrail2
000171B2 7200                       		moveq #0,d1
000171B4                            
000171B4                            Obj19_StarTrail2:
000171B4 1141 0030                  		move.b d1,$30(a0)
000171B8                            
000171B8                            Obj19_StarTrail2a:
000171B8 43F8 CB00                  		lea ($FFFFCB00).w,a1
000171BC 43F1 0000                  		lea (a1,d0.w),a1
000171C0 3159 0008                  		move.w (a1)+,8(a0)
000171C4 3159 000C                  		move.w (a1)+,$C(a0)
000171C8 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0)
000171CE 43F9 0000 0000             		lea (Ani_Shield).l,a1
000171D4 4EB9 0000 CA24             		jsr (AnimateSprite).l
000171DA 4EF9 0000 F978             		jmp (DisplaySprite).l
000171E0                            ; ===========================================================================
000171E0                            
000171E0                            Obj19_Delete2: ; XREF: Obj19_Stars
000171E0 4EF9 0000 F9B8             		jmp (DeleteObject).l
000171E0 4EF9 0000 F9B8             		jmp (DeleteObject).l
000171E6                            		include	"_incObj\4A Special Stage Entry (Unused).asm"
000171E6                            ; ---------------------------------------------------------------------------
000171E6                            ; Object 4A - special stage entry from beta
000171E6                            ; ---------------------------------------------------------------------------
000171E6                            
000171E6                            VanishSonic:
000171E6 7000                       		moveq	#0,d0
000171E8 1028 0024                  		move.b	obRoutine(a0),d0
000171EC 323B 0000                  		move.w	Van_Index(pc,d0.w),d1
000171F0 4EFB 1000                  		jmp	Van_Index(pc,d1.w)
000171F4                            ; ===========================================================================
000171F4 0000                       Van_Index:	dc.w Van_Main-Van_Index
000171F6 0000                       		dc.w Van_RmvSonic-Van_Index
000171F8 0000                       		dc.w Van_LoadSonic-Van_Index
000171FA                            
000171FA =00000030                  van_time:	equ $30		; time for Sonic to disappear
000171FA                            ; ===========================================================================
000171FA                            
000171FA                            Van_Main:	; Routine 0
000171FA 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are pattern load cues empty?
000171FE 6700                       		beq.s	@isempty	; if yes, branch
00017200 4E75                       		rts	
00017202                            
00017202                            	@isempty:
00017202 5428 0024                  		addq.b	#2,obRoutine(a0)
00017206 217C 0000 0000 0004        		move.l	#Map_Vanish,obMap(a0)
0001720E 117C 0004 0001             		move.b	#4,obRender(a0)
00017214 317C 0080 0018             		move.w	#$80,obPriority(a0)
0001721A 117C 0038 0014             		move.b	#$38,obActWid(a0)
00017220 317C 0541 0002             		move.w	#$541,obGfx(a0)
00017226 317C 0078 0030             		move.w	#120,van_time(a0) ; set time for Sonic's disappearance to 2 seconds
0001722C                            
0001722C                            Van_RmvSonic:	; Routine 2
0001722C 3178 D008 0008             		move.w	(v_player+obX).w,obX(a0)
00017232 3178 D00C 000C             		move.w	(v_player+obY).w,obY(a0)
00017238 1178 D022 0022             		move.b	(v_player+obStatus).w,obStatus(a0)
0001723E 43F9 0000 0000             		lea	(Ani_Vanish).l,a1
00017244 4EB9 0000 CA24             		jsr	(AnimateSprite).l
0001724A 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
00017250 6600                       		bne.s	@display
00017252 4A38 D000                  		tst.b	(v_player).w
00017256 6700                       		beq.s	@display
00017258 11FC 0000 D000             		move.b	#0,(v_player).w	; remove Sonic
00017268                            
00017268                            	@display:
00017268 4EF9 0000 F978             		jmp	(DisplaySprite).l
0001726E                            ; ===========================================================================
0001726E                            
0001726E                            Van_LoadSonic:	; Routine 4
0001726E 5368 0030                  		subq.w	#1,van_time(a0)	; subtract 1 from time
00017272 6600                       		bne.s	@wait		; if time remains, branch
00017274 11FC 0001 D000             		move.b	#id_SonicPlayer,(v_player).w ; load Sonic object
0001727A 4EF9 0000 F9B8             		jmp	(DeleteObject).l
00017280                            
00017280                            	@wait:
00017280 4E75                       		rts	
00017280 4E75                       		rts	
00017282                            		include	"_incObj\08 Water Splash.asm"
00017282                            ; ---------------------------------------------------------------------------
00017282                            ; Object 08 - water splash (LZ)
00017282                            ; ---------------------------------------------------------------------------
00017282                            
00017282                            Splash:
00017282 7000                       		moveq	#0,d0
00017284 1028 0024                  		move.b	obRoutine(a0),d0
00017288 323B 0000                  		move.w	Spla_Index(pc,d0.w),d1
0001728C 4EFB 1000                  		jmp	Spla_Index(pc,d1.w)
00017290                            ; ===========================================================================
00017290 0000                       Spla_Index:	dc.w Spla_Main-Spla_Index
00017292 0000                       		dc.w Spla_Display-Spla_Index
00017294 0000                       		dc.w Spla_Delete-Spla_Index
00017296                            ; ===========================================================================
00017296                            
00017296                            Spla_Main:    ; Routine 0
00017296 5428 0024                          addq.b    #2,obRoutine(a0)
0001729A 217C 0000 0000 0004                move.l    #Map_Splash,obMap(a0)
000172A2 0028 0004 0001                     ori.b    #4,obRender(a0)
000172A8 117C 0001 0018                     move.b    #1,obPriority(a0)
000172AE 117C 0010 0014                     move.b    #$10,obActWid(a0)
000172B4 317C 4259 0002                     move.w    #$4259,obGfx(a0)
000172BA 3178 D008 0008                     move.w    (v_player+obX).w,obX(a0) ; copy x-position from Sonic
000172C0                            
000172C0                            Spla_Display:    ; Routine 2
000172C0                                    ;move.w    (v_waterpos1).w,obY(a0) ; copy y-position from water height
000172C0 3178 FF92 000C                     move.w    (v_watersplashpos).w,obY(a0) ;TIS copy y-position from player
000172C6 43F9 0000 0000                     lea    (Ani_Splash).l,a1
000172CC 4EB9 0000 CA24                     jsr    (AnimateSprite).l
000172D2 4EF9 0000 F978                     jmp    (DisplaySprite).l
000172D8                            ; ===========================================================================
000172D8                            
000172D8                            Spla_Delete:	; Routine 4
000172D8 4EF9 0000 F9B8             		jmp	(DeleteObject).l	; delete when animation	is complete
000172D8 4EF9 0000 F9B8             		jmp	(DeleteObject).l	; delete when animation	is complete
000172DE                            		include	"_anim\Shield and Invincibility.asm"
000172DE                            ; ---------------------------------------------------------------------------
000172DE                            ; Animation script - shield and invincibility stars
000172DE                            ; ---------------------------------------------------------------------------
000172DE 0000                       Ani_Shield:	dc.w @shield-Ani_Shield
000172E0 0000                       		dc.w @stars1-Ani_Shield
000172E2 0000                       		dc.w @stars2-Ani_Shield
000172E4 0000                       		dc.w @stars3-Ani_Shield
000172E6 0000                       		dc.w @stars4-Ani_Shield
000172E8 0101 0002 0003 00FF        @shield:	dc.b 1,	1, 0, 2, 0, 3, 0, afEnd
000172F0 0504 0506 07FF             @stars1:	dc.b 5,	4, 5, 6, 7, afEnd
000172F6 0004 0400 0404 0005 0500+  @stars2:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
00017307 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, afEnd
00017310 0004 0400 0400 0005 0500+  @stars3:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
00017321 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, afEnd
0001732A 0004 0000 0400 0005 0000+  @stars4:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
0001733B 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, afEnd
00017344                            		even
00017344                            		even
00017344                            Map_Shield:	include	"_maps\Shield and Invincibility.asm"
00017344                            ; --------------------------------------------------------------------------------
00017344                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00017344                            ; --------------------------------------------------------------------------------
00017344                            
00017344                            SME_7M_8q:	
00017344 0000 0000                  		dc.w SME_7M_8q_10-SME_7M_8q, SME_7M_8q_11-SME_7M_8q	
00017348 0000 0000                  		dc.w SME_7M_8q_26-SME_7M_8q, SME_7M_8q_3B-SME_7M_8q	
0001734C 0000 0000                  		dc.w SME_7M_8q_50-SME_7M_8q, SME_7M_8q_65-SME_7M_8q	
00017350 0000 0000                  		dc.w SME_7M_8q_7A-SME_7M_8q, SME_7M_8q_8F-SME_7M_8q	
00017354 00                         SME_7M_8q_10:	dc.b 0	
00017355 04                         SME_7M_8q_11:	dc.b 4	
00017356 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8	
0001735B E80A 0009 00               		dc.b $E8, $A, 0, 9, 0	
00017360 000A 1000 E8               		dc.b 0, $A, $10, 0, $E8	
00017365 000A 1009 00               		dc.b 0, $A, $10, 9, 0	
0001736A 04                         SME_7M_8q_26:	dc.b 4	
0001736B E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9	
00017370 E80A 0012 00               		dc.b $E8, $A, 0, $12, 0	
00017375 000A 1812 E9               		dc.b 0, $A, $18, $12, $E9	
0001737A 000A 1012 00               		dc.b 0, $A, $10, $12, 0	
0001737F 04                         SME_7M_8q_3B:	dc.b 4	
00017380 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8	
00017385 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0	
0001738A 000A 1809 E8               		dc.b 0, $A, $18, 9, $E8	
0001738F 000A 1800 00               		dc.b 0, $A, $18, 0, 0	
00017394 04                         SME_7M_8q_50:	dc.b 4	
00017395 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8	
0001739A E80A 0009 00               		dc.b $E8, $A, 0, 9, 0	
0001739F 000A 1809 E8               		dc.b 0, $A, $18, 9, $E8	
000173A4 000A 1800 00               		dc.b 0, $A, $18, 0, 0	
000173A9 04                         SME_7M_8q_65:	dc.b 4	
000173AA E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8	
000173AF E80A 0800 00               		dc.b $E8, $A, 8, 0, 0	
000173B4 000A 1000 E8               		dc.b 0, $A, $10, 0, $E8	
000173B9 000A 1009 00               		dc.b 0, $A, $10, 9, 0	
000173BE 04                         SME_7M_8q_7A:	dc.b 4	
000173BF E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8	
000173C4 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0	
000173C9 000A 181B E8               		dc.b 0, $A, $18, $1B, $E8	
000173CE 000A 1812 00               		dc.b 0, $A, $18, $12, 0	
000173D3 04                         SME_7M_8q_8F:	dc.b 4	
000173D4 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8	
000173D9 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0	
000173DE 000A 1012 E8               		dc.b 0, $A, $10, $12, $E8	
000173E3 000A 101B 00               		dc.b 0, $A, $10, $1B, 0	
000173E8                            		even
000173E8                            		even
000173E8                            Map_Shield2:	include	"_maps\Shield 2.asm"
000173E8                            ; --------------------------------------------------------------------------------
000173E8                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000173E8                            ; --------------------------------------------------------------------------------
000173E8                            
000173E8                            SME_X5P7B:	
000173E8 0000 0000                  		dc.w SME_X5P7B_10-SME_X5P7B, SME_X5P7B_11-SME_X5P7B	
000173EC 0000 0000                  		dc.w SME_X5P7B_26-SME_X5P7B, SME_X5P7B_3B-SME_X5P7B	
000173F0 0000 0000                  		dc.w SME_X5P7B_50-SME_X5P7B, SME_X5P7B_65-SME_X5P7B	
000173F4 0000 0000                  		dc.w SME_X5P7B_7A-SME_X5P7B, SME_X5P7B_8F-SME_X5P7B	
000173F8 00                         SME_X5P7B_10:	dc.b 0	
000173F9 04                         SME_X5P7B_11:	dc.b 4	
000173FA E80A 2000 E8               		dc.b $E8, $A, $20, 0, $E8	
000173FF E80A 2009 00               		dc.b $E8, $A, $20, 9, 0	
00017404 000A 3000 E8               		dc.b 0, $A, $30, 0, $E8	
00017409 000A 3009 00               		dc.b 0, $A, $30, 9, 0	
0001740E 04                         SME_X5P7B_26:	dc.b 4	
0001740F E80A 2812 E9               		dc.b $E8, $A, $28, $12, $E9	
00017414 E80A 2012 00               		dc.b $E8, $A, $20, $12, 0	
00017419 000A 3812 E9               		dc.b 0, $A, $38, $12, $E9	
0001741E 000A 3012 00               		dc.b 0, $A, $30, $12, 0	
00017423 04                         SME_X5P7B_3B:	dc.b 4	
00017424 E80A 2809 E8               		dc.b $E8, $A, $28, 9, $E8	
00017429 E80A 2800 00               		dc.b $E8, $A, $28, 0, 0	
0001742E 000A 3809 E8               		dc.b 0, $A, $38, 9, $E8	
00017433 000A 3800 00               		dc.b 0, $A, $38, 0, 0	
00017438 04                         SME_X5P7B_50:	dc.b 4	
00017439 E80A 2000 E8               		dc.b $E8, $A, $20, 0, $E8	
0001743E E80A 2009 00               		dc.b $E8, $A, $20, 9, 0	
00017443 000A 3809 E8               		dc.b 0, $A, $38, 9, $E8	
00017448 000A 3800 00               		dc.b 0, $A, $38, 0, 0	
0001744D 04                         SME_X5P7B_65:	dc.b 4	
0001744E E80A 2809 E8               		dc.b $E8, $A, $28, 9, $E8	
00017453 E80A 2800 00               		dc.b $E8, $A, $28, 0, 0	
00017458 000A 3000 E8               		dc.b 0, $A, $30, 0, $E8	
0001745D 000A 3009 00               		dc.b 0, $A, $30, 9, 0	
00017462 04                         SME_X5P7B_7A:	dc.b 4	
00017463 E80A 2012 E8               		dc.b $E8, $A, $20, $12, $E8	
00017468 E80A 201B 00               		dc.b $E8, $A, $20, $1B, 0	
0001746D 000A 381B E8               		dc.b 0, $A, $38, $1B, $E8	
00017472 000A 3812 00               		dc.b 0, $A, $38, $12, 0	
00017477 04                         SME_X5P7B_8F:	dc.b 4	
00017478 E80A 281B E8               		dc.b $E8, $A, $28, $1B, $E8	
0001747D E80A 2812 00               		dc.b $E8, $A, $28, $12, 0	
00017482 000A 3012 E8               		dc.b 0, $A, $30, $12, $E8	
00017487 000A 301B 00               		dc.b 0, $A, $30, $1B, 0	
0001748C                            		even
0001748C                            		even
0001748C                            
0001748C                            Map_Shield3:	include	"_maps\Shield 3.asm"
0001748C                            ; --------------------------------------------------------------------------------
0001748C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001748C                            ; --------------------------------------------------------------------------------
0001748C                            
0001748C                            SME__wWzO:	
0001748C 0000 0000                  		dc.w SME__wWzO_10-SME__wWzO, SME__wWzO_11-SME__wWzO	
00017490 0000 0000                  		dc.w SME__wWzO_26-SME__wWzO, SME__wWzO_3B-SME__wWzO	
00017494 0000 0000                  		dc.w SME__wWzO_50-SME__wWzO, SME__wWzO_65-SME__wWzO	
00017498 0000 0000                  		dc.w SME__wWzO_7A-SME__wWzO, SME__wWzO_8F-SME__wWzO	
0001749C 00                         SME__wWzO_10:	dc.b 0	
0001749D 04                         SME__wWzO_11:	dc.b 4	
0001749E E80A 2000 E8               		dc.b $E8, $A, $20, 0, $E8	
000174A3 E80A 2009 00               		dc.b $E8, $A, $20, 9, 0	
000174A8 000A 3000 E8               		dc.b 0, $A, $30, 0, $E8	
000174AD 000A 3009 00               		dc.b 0, $A, $30, 9, 0	
000174B2 04                         SME__wWzO_26:	dc.b 4	
000174B3 E80A 2812 E9               		dc.b $E8, $A, $28, $12, $E9	
000174B8 E80A 2012 00               		dc.b $E8, $A, $20, $12, 0	
000174BD 000A 3812 E9               		dc.b 0, $A, $38, $12, $E9	
000174C2 000A 3012 00               		dc.b 0, $A, $30, $12, 0	
000174C7 04                         SME__wWzO_3B:	dc.b 4	
000174C8 E80A 2809 E8               		dc.b $E8, $A, $28, 9, $E8	
000174CD E80A 2800 00               		dc.b $E8, $A, $28, 0, 0	
000174D2 000A 3809 E8               		dc.b 0, $A, $38, 9, $E8	
000174D7 000A 3800 00               		dc.b 0, $A, $38, 0, 0	
000174DC 04                         SME__wWzO_50:	dc.b 4	
000174DD E80A 2000 E8               		dc.b $E8, $A, $20, 0, $E8	
000174E2 E80A 2009 00               		dc.b $E8, $A, $20, 9, 0	
000174E7 000A 3809 E8               		dc.b 0, $A, $38, 9, $E8	
000174EC 000A 3800 00               		dc.b 0, $A, $38, 0, 0	
000174F1 04                         SME__wWzO_65:	dc.b 4	
000174F2 E80A 2809 E8               		dc.b $E8, $A, $28, 9, $E8	
000174F7 E80A 2800 00               		dc.b $E8, $A, $28, 0, 0	
000174FC 000A 3000 E8               		dc.b 0, $A, $30, 0, $E8	
00017501 000A 3009 00               		dc.b 0, $A, $30, 9, 0	
00017506 04                         SME__wWzO_7A:	dc.b 4	
00017507 E80A 2012 E8               		dc.b $E8, $A, $20, $12, $E8	
0001750C E80A 201B 00               		dc.b $E8, $A, $20, $1B, 0	
00017511 000A 381B E8               		dc.b 0, $A, $38, $1B, $E8	
00017516 000A 3812 00               		dc.b 0, $A, $38, $12, 0	
0001751B 04                         SME__wWzO_8F:	dc.b 4	
0001751C E80A 281B E8               		dc.b $E8, $A, $28, $1B, $E8	
00017521 E80A 2812 00               		dc.b $E8, $A, $28, $12, 0	
00017526 000A 3012 E8               		dc.b 0, $A, $30, $12, $E8	
0001752B 000A 301B 00               		dc.b 0, $A, $30, $1B, 0	
00017530                            		even
00017530                            		even
00017530                            		include	"_anim\Special Stage Entry (Unused).asm"
00017530                            ; ---------------------------------------------------------------------------
00017530                            ; Animation script - special stage entry effect from beta
00017530                            ; ---------------------------------------------------------------------------
00017530 0000                       Ani_Vanish:	dc.w @vanish-Ani_Vanish
00017532 0500 0100 0100 0701 0702+  @vanish:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, afRoutine
00017546                            		even
00017546                            		even
00017546                            Map_Vanish:	include	"_maps\Special Stage Entry (Unused).asm"
00017546                            ; ---------------------------------------------------------------------------
00017546                            ; Sprite mappings - special stage entry	from beta
00017546                            ; ---------------------------------------------------------------------------
00017546                            Map_Vanish_internal:
00017546 0000                       		dc.w @flash1-Map_Vanish_internal
00017548 0000                       		dc.w @flash2-Map_Vanish_internal
0001754A 0000                       		dc.w @flash3-Map_Vanish_internal
0001754C 0000                       		dc.w @sparkle1-Map_Vanish_internal
0001754E 0000                       		dc.w @sparkle2-Map_Vanish_internal
00017550 0000                       		dc.w @sparkle3-Map_Vanish_internal
00017552 0000                       		dc.w @sparkle4-Map_Vanish_internal
00017554 0000                       		dc.w @blank-Map_Vanish_internal
00017556 03                         @flash1:	dc.b 3
00017557 F800 0000 08               		dc.b $F8, 0, 0,	0, 8
0001755C 0004 0001 00               		dc.b 0,	4, 0, 1, 0
00017561 0800 1000 08               		dc.b 8,	0, $10,	0, 8
00017566 03                         @flash2:	dc.b 3
00017567 F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
0001756C 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
00017571 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
00017576 05                         @flash3:	dc.b 5
00017577 E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
0001757C EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
00017581 FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
00017586 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
0001758B 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
00017590 09                         @sparkle1:	dc.b 9
00017591 F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
00017596 F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
0001759B 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
000175A0 0005 0034 10               		dc.b 0,	5, 0, $34, $10
000175A5 F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
000175AA F000 1836 18               		dc.b $F0, 0, $18, $36, $18
000175AF F800 1825 20               		dc.b $F8, 0, $18, $25, $20
000175B4 0000 0825 28               		dc.b 0,	0, 8, $25, $28
000175B9 F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
000175BE 12                         @sparkle2:	dc.b $12
000175BF 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
000175C4 F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
000175C9 F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
000175CE 0000 0025 00               		dc.b 0,	0, 0, $25, 0
000175D3 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
000175D8 1000 1026 00               		dc.b $10, 0, $10, $26, 0
000175DD 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
000175E2 F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
000175E7 0000 0026 10               		dc.b 0,	0, 0, $26, $10
000175EC 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
000175F1 0800 0826 18               		dc.b 8,	0, 8, $26, $18
000175F6 0800 0029 20               		dc.b 8,	0, 0, $29, $20
000175FB F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
00017600 F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
00017605 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
0001760A F800 1826 30               		dc.b $F8, 0, $18, $26, $30
0001760F 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
00017614 F800 1025 40               		dc.b $F8, 0, $10, $25, $40
00017619 11                         @sparkle3:	dc.b $11
0001761A F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
0001761F F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
00017624 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
00017629 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
0001762E 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
00017633 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00017638 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
0001763D F800 1025 30               		dc.b $F8, 0, $10, $25, $30
00017642 0000 0025 30               		dc.b 0,	0, 0, $25, $30
00017647 0800 0825 30               		dc.b 8,	0, 8, $25, $30
0001764C 0000 0826 38               		dc.b 0,	0, 8, $26, $38
00017651 0800 0029 38               		dc.b 8,	0, 0, $29, $38
00017656 F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
0001765B 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
00017660 F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
00017665 0000 0025 48               		dc.b 0,	0, 0, $25, $48
0001766A 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
0001766F 09                         @sparkle4:	dc.b 9
00017670 FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
00017675 0400 0825 28               		dc.b 4,	0, 8, $25, $28
0001767A 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
0001767F 0400 0826 40               		dc.b 4,	0, 8, $26, $40
00017684 FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
00017689 FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
0001768E 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
00017693 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
00017698 04                         		dc.b 4
00017699 0008 2758 00               @blank:		dc.b 0,	8, $27,	$58, 0
0001769E                            		even
0001769E                            		even
0001769E                            		include	"_anim\Water Splash.asm"
0001769E                            ; ---------------------------------------------------------------------------
0001769E                            ; Animation script - water splash (LZ)
0001769E                            ; ---------------------------------------------------------------------------
0001769E 0000                       Ani_Splash:	dc.w @splash-Ani_Splash
000176A0 0400 0102 FC               @splash:	dc.b 4,	0, 1, 2, afRoutine
000176A6 00                         		even
000176A6 00                         		even
000176A6                            Map_Splash:	include	"_maps\Water Splash.asm"
000176A6                            ; ---------------------------------------------------------------------------
000176A6                            ; Sprite mappings - water splash (LZ)
000176A6                            ; ---------------------------------------------------------------------------
000176A6                            Map_Splash_internal:
000176A6 0000                       		dc.w @splash1-Map_Splash_internal
000176A8 0000                       		dc.w @splash2-Map_Splash_internal
000176AA 0000                       		dc.w @splash3-Map_Splash_internal
000176AC 02                         @splash1:	dc.b 2
000176AD F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
000176B2 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
000176B7 02                         @splash2:	dc.b 2
000176B8 E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
000176BD EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
000176C2 01                         @splash3:	dc.b 1
000176C3 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
000176C8                            		even
000176C8                            		even
000176C8                            
000176C8                            		include	"_incObj\Sonic AnglePos.asm"
000176C8                            ; ---------------------------------------------------------------------------
000176C8                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
000176C8                            ; ---------------------------------------------------------------------------
000176C8                            
000176C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000176C8                            
000176C8                            
000176C8                            Sonic_AnglePos:
000176C8 0828 0003 0022             		btst	#3,obStatus(a0)
000176CE 6700                       		beq.s	loc_14602
000176D0 7000                       		moveq	#0,d0
000176D2 11C0 F768                  		move.b	d0,($FFFFF768).w
000176D6 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000176DA 4E75                       		rts	
000176DC                            ; ===========================================================================
000176DC                            
000176DC                            loc_14602:
000176DC 7003                       		moveq	#3,d0
000176DE 11C0 F768                  		move.b	d0,($FFFFF768).w
000176E2 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000176E6 1028 0026                  		move.b	obAngle(a0),d0
000176EA 0600 0020                  		addi.b	#$20,d0
000176EE 6A00                       		bpl.s	loc_14624
000176F0 1028 0026                  		move.b	obAngle(a0),d0
000176F4 6A00                       		bpl.s	loc_1461E
000176F6 5300                       		subq.b	#1,d0
000176F8                            
000176F8                            loc_1461E:
000176F8 0600 0020                  		addi.b	#$20,d0
000176FC 6000                       		bra.s	loc_14630
000176FE                            ; ===========================================================================
000176FE                            
000176FE                            loc_14624:
000176FE 1028 0026                  		move.b	obAngle(a0),d0
00017702 6A00                       		bpl.s	loc_1462C
00017704 5200                       		addq.b	#1,d0
00017706                            
00017706                            loc_1462C:
00017706 0600 001F                  		addi.b	#$1F,d0
0001770A                            
0001770A                            loc_14630:
0001770A 0200 00C0                  		andi.b	#$C0,d0
0001770E 0C00 0040                  		cmpi.b	#$40,d0
00017712 6700 0000                  		beq.w	Sonic_WalkVertL
00017716 0C00 0080                  		cmpi.b	#$80,d0
0001771A 6700 0000                  		beq.w	Sonic_WalkCeiling
0001771E 0C00 00C0                  		cmpi.b	#$C0,d0
00017722 6700 0000                  		beq.w	Sonic_WalkVertR
00017726 3428 000C                  		move.w	obY(a0),d2
0001772A 3628 0008                  		move.w	obX(a0),d3
0001772E 7000                       		moveq	#0,d0
00017730 1028 0016                  		move.b	obHeight(a0),d0
00017734 4880                       		ext.w	d0
00017736 D440                       		add.w	d0,d2
00017738 1028 0017                  		move.b	obWidth(a0),d0
0001773C 4880                       		ext.w	d0
0001773E D640                       		add.w	d0,d3
00017740 49F8 F768                  		lea	($FFFFF768).w,a4
00017744 367C 0010                  		movea.w	#$10,a3
00017748 3C3C 0000                  		move.w	#0,d6
0001774C 7A0D                       		moveq	#$D,d5
0001774E 6100 0000                  		bsr.w	FindFloor
00017752 3F01                       		move.w	d1,-(sp)
00017754 3428 000C                  		move.w	obY(a0),d2
00017758 3628 0008                  		move.w	obX(a0),d3
0001775C 7000                       		moveq	#0,d0
0001775E 1028 0016                  		move.b	obHeight(a0),d0
00017762 4880                       		ext.w	d0
00017764 D440                       		add.w	d0,d2
00017766 1028 0017                  		move.b	obWidth(a0),d0
0001776A 4880                       		ext.w	d0
0001776C 4440                       		neg.w	d0
0001776E D640                       		add.w	d0,d3
00017770 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017774 367C 0010                  		movea.w	#$10,a3
00017778 3C3C 0000                  		move.w	#0,d6
0001777C 7A0D                       		moveq	#$D,d5
0001777E 6100 0000                  		bsr.w	FindFloor
00017782 301F                       		move.w	(sp)+,d0
00017784 6100 0000                  		bsr.w	Sonic_Angle
00017788 4A41                       		tst.w	d1
0001778A 6700                       		beq.s	locret_146BE
0001778C 6A00                       		bpl.s	loc_146C0
0001778E 0C41 FFF2                  		cmpi.w	#-$E,d1
00017792 6D00                       		blt.s	locret_146E6
00017794 D368 000C                  		add.w	d1,obY(a0)
00017798                            
00017798                            locret_146BE:
00017798 4E75                       		rts	
0001779A                            ; ===========================================================================
0001779A                            
0001779A                            loc_146C0:
0001779A 0C41 000E                  		cmpi.w	#$E,d1
0001779E 6E00                       		bgt.s	loc_146CC
000177A0                            
000177A0                            loc_146C6:
000177A0 D368 000C                  		add.w	d1,obY(a0)
000177A4 4E75                       		rts	
000177A6                            ; ===========================================================================
000177A6                            
000177A6                            loc_146CC:
000177A6 4A28 0038                  		tst.b	$38(a0)
000177AA 66F4                       		bne.s	loc_146C6
000177AC 08E8 0001 0022             		bset	#1,obStatus(a0)
000177B2 08A8 0005 0022             		bclr	#5,obStatus(a0)
000177B8 117C 0001 001D             		move.b	#1,obNextAni(a0)
000177BE 4E75                       		rts	
000177C0                            ; ===========================================================================
000177C0                            
000177C0                            locret_146E6:
000177C0 4E75                       		rts	
000177C2                            ; End of function Sonic_AnglePos
000177C2                            
000177C2                            ; ===========================================================================
000177C2 2428 0008                  		move.l	obX(a0),d2
000177C6 3028 0010                  		move.w	obVelX(a0),d0
000177CA 48C0                       		ext.l	d0
000177CC E180                       		asl.l	#8,d0
000177CE 9480                       		sub.l	d0,d2
000177D0 2142 0008                  		move.l	d2,obX(a0)
000177D4 303C 0038                  		move.w	#$38,d0
000177D8 48C0                       		ext.l	d0
000177DA E180                       		asl.l	#8,d0
000177DC 9680                       		sub.l	d0,d3
000177DE 2143 000C                  		move.l	d3,obY(a0)
000177E2 4E75                       		rts	
000177E4                            ; ===========================================================================
000177E4                            
000177E4                            locret_1470A:
000177E4 4E75                       		rts	
000177E6                            ; ===========================================================================
000177E6 2628 000C                  		move.l	obY(a0),d3
000177EA 3028 0012                  		move.w	obVelY(a0),d0
000177EE 0440 0038                  		subi.w	#$38,d0
000177F2 3140 0012                  		move.w	d0,obVelY(a0)
000177F6 48C0                       		ext.l	d0
000177F8 E180                       		asl.l	#8,d0
000177FA 9680                       		sub.l	d0,d3
000177FC 2143 000C                  		move.l	d3,obY(a0)
00017800 4E75                       		rts	
00017802 4E75                       		rts	
00017804                            ; ===========================================================================
00017804 2428 0008                  		move.l	obX(a0),d2
00017808 2628 000C                  		move.l	obY(a0),d3
0001780C 3028 0010                  		move.w	obVelX(a0),d0
00017810 48C0                       		ext.l	d0
00017812 E180                       		asl.l	#8,d0
00017814 9480                       		sub.l	d0,d2
00017816 3028 0012                  		move.w	obVelY(a0),d0
0001781A 48C0                       		ext.l	d0
0001781C E180                       		asl.l	#8,d0
0001781E 9680                       		sub.l	d0,d3
00017820 2142 0008                  		move.l	d2,obX(a0)
00017824 2143 000C                  		move.l	d3,obY(a0)
00017828 4E75                       		rts	
0001782A                            
0001782A                            ; ---------------------------------------------------------------------------
0001782A                            ; Subroutine to	change Sonic's angle as he walks along the floor
0001782A                            ; ---------------------------------------------------------------------------
0001782A                            
0001782A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001782A                            
0001782A                            
0001782A                            Sonic_Angle:
0001782A 1438 F76A                  		move.b	($FFFFF76A).w,d2
0001782E B240                       		cmp.w	d0,d1
00017830 6F00                       		ble.s	loc_1475E
00017832 1438 F768                  		move.b	($FFFFF768).w,d2
00017836 3200                       		move.w	d0,d1
00017838                            
00017838                            loc_1475E:
00017838 0802 0000                  		btst	#0,d2
0001783C 6600                       		bne.s	loc_1476A
0001783E 1142 0026                  		move.b	d2,obAngle(a0)
00017842 4E75                       		rts	
00017844                            ; ===========================================================================
00017844                            
00017844                            loc_1476A:
00017844 1428 0026                  		move.b	obAngle(a0),d2
00017848 0602 0020                  		addi.b	#$20,d2
0001784C 0202 00C0                  		andi.b	#$C0,d2
00017850 1142 0026                  		move.b	d2,obAngle(a0)
00017854 4E75                       		rts	
00017856                            ; End of function Sonic_Angle
00017856                            
00017856                            ; ---------------------------------------------------------------------------
00017856                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
00017856                            ; ---------------------------------------------------------------------------
00017856                            
00017856                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017856                            
00017856                            
00017856                            Sonic_WalkVertR:
00017856 3428 000C                  		move.w	obY(a0),d2
0001785A 3628 0008                  		move.w	obX(a0),d3
0001785E 7000                       		moveq	#0,d0
00017860 1028 0017                  		move.b	obWidth(a0),d0
00017864 4880                       		ext.w	d0
00017866 4440                       		neg.w	d0
00017868 D440                       		add.w	d0,d2
0001786A 1028 0016                  		move.b	obHeight(a0),d0
0001786E 4880                       		ext.w	d0
00017870 D640                       		add.w	d0,d3
00017872 49F8 F768                  		lea	($FFFFF768).w,a4
00017876 367C 0010                  		movea.w	#$10,a3
0001787A 3C3C 0000                  		move.w	#0,d6
0001787E 7A0D                       		moveq	#$D,d5
00017880 6100 0000                  		bsr.w	FindWall
00017884 3F01                       		move.w	d1,-(sp)
00017886 3428 000C                  		move.w	obY(a0),d2
0001788A 3628 0008                  		move.w	obX(a0),d3
0001788E 7000                       		moveq	#0,d0
00017890 1028 0017                  		move.b	obWidth(a0),d0
00017894 4880                       		ext.w	d0
00017896 D440                       		add.w	d0,d2
00017898 1028 0016                  		move.b	obHeight(a0),d0
0001789C 4880                       		ext.w	d0
0001789E D640                       		add.w	d0,d3
000178A0 49F8 F76A                  		lea	($FFFFF76A).w,a4
000178A4 367C 0010                  		movea.w	#$10,a3
000178A8 3C3C 0000                  		move.w	#0,d6
000178AC 7A0D                       		moveq	#$D,d5
000178AE 6100 0000                  		bsr.w	FindWall
000178B2 301F                       		move.w	(sp)+,d0
000178B4 6100 FF74                  		bsr.w	Sonic_Angle
000178B8 4A41                       		tst.w	d1
000178BA 6700                       		beq.s	locret_147F0
000178BC 6A00                       		bpl.s	loc_147F2
000178BE 0C41 FFF2                  		cmpi.w	#-$E,d1
000178C2 6D00 FF20                  		blt.w	locret_1470A
000178C6 D368 0008                  		add.w	d1,obX(a0)
000178CA                            
000178CA                            locret_147F0:
000178CA 4E75                       		rts	
000178CC                            ; ===========================================================================
000178CC                            
000178CC                            loc_147F2:
000178CC 0C41 000E                  		cmpi.w	#$E,d1
000178D0 6E00                       		bgt.s	loc_147FE
000178D2                            
000178D2                            loc_147F8:
000178D2 D368 0008                  		add.w	d1,obX(a0)
000178D6 4E75                       		rts	
000178D8                            ; ===========================================================================
000178D8                            
000178D8                            loc_147FE:
000178D8 4A28 0038                  		tst.b	$38(a0)
000178DC 66F4                       		bne.s	loc_147F8
000178DE 08E8 0001 0022             		bset	#1,obStatus(a0)
000178E4 08A8 0005 0022             		bclr	#5,obStatus(a0)
000178EA 117C 0001 001D             		move.b	#1,obNextAni(a0)
000178F0 4E75                       		rts	
000178F2                            ; End of function Sonic_WalkVertR
000178F2                            
000178F2                            ; ---------------------------------------------------------------------------
000178F2                            ; Subroutine allowing Sonic to walk upside-down
000178F2                            ; ---------------------------------------------------------------------------
000178F2                            
000178F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000178F2                            
000178F2                            
000178F2                            Sonic_WalkCeiling:
000178F2 3428 000C                  		move.w	obY(a0),d2
000178F6 3628 0008                  		move.w	obX(a0),d3
000178FA 7000                       		moveq	#0,d0
000178FC 1028 0016                  		move.b	obHeight(a0),d0
00017900 4880                       		ext.w	d0
00017902 9440                       		sub.w	d0,d2
00017904 0A42 000F                  		eori.w	#$F,d2
00017908 1028 0017                  		move.b	obWidth(a0),d0
0001790C 4880                       		ext.w	d0
0001790E D640                       		add.w	d0,d3
00017910 49F8 F768                  		lea	($FFFFF768).w,a4
00017914 367C FFF0                  		movea.w	#-$10,a3
00017918 3C3C 1000                  		move.w	#$1000,d6
0001791C 7A0D                       		moveq	#$D,d5
0001791E 6100 0000                  		bsr.w	FindFloor
00017922 3F01                       		move.w	d1,-(sp)
00017924 3428 000C                  		move.w	obY(a0),d2
00017928 3628 0008                  		move.w	obX(a0),d3
0001792C 7000                       		moveq	#0,d0
0001792E 1028 0016                  		move.b	obHeight(a0),d0
00017932 4880                       		ext.w	d0
00017934 9440                       		sub.w	d0,d2
00017936 0A42 000F                  		eori.w	#$F,d2
0001793A 1028 0017                  		move.b	obWidth(a0),d0
0001793E 4880                       		ext.w	d0
00017940 9640                       		sub.w	d0,d3
00017942 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017946 367C FFF0                  		movea.w	#-$10,a3
0001794A 3C3C 1000                  		move.w	#$1000,d6
0001794E 7A0D                       		moveq	#$D,d5
00017950 6100 0000                  		bsr.w	FindFloor
00017954 301F                       		move.w	(sp)+,d0
00017956 6100 FED2                  		bsr.w	Sonic_Angle
0001795A 4A41                       		tst.w	d1
0001795C 6700                       		beq.s	locret_14892
0001795E 6A00                       		bpl.s	loc_14894
00017960 0C41 FFF2                  		cmpi.w	#-$E,d1
00017964 6D00 FE5A                  		blt.w	locret_146E6
00017968 9368 000C                  		sub.w	d1,obY(a0)
0001796C                            
0001796C                            locret_14892:
0001796C 4E75                       		rts	
0001796E                            ; ===========================================================================
0001796E                            
0001796E                            loc_14894:
0001796E 0C41 000E                  		cmpi.w	#$E,d1
00017972 6E00                       		bgt.s	loc_148A0
00017974                            
00017974                            loc_1489A:
00017974 9368 000C                  		sub.w	d1,obY(a0)
00017978 4E75                       		rts	
0001797A                            ; ===========================================================================
0001797A                            
0001797A                            loc_148A0:
0001797A 4A28 0038                  		tst.b	$38(a0)
0001797E 66F4                       		bne.s	loc_1489A
00017980 08E8 0001 0022             		bset	#1,obStatus(a0)
00017986 08A8 0005 0022             		bclr	#5,obStatus(a0)
0001798C 117C 0001 001D             		move.b	#1,obNextAni(a0)
00017992 4E75                       		rts	
00017994                            ; End of function Sonic_WalkCeiling
00017994                            
00017994                            ; ---------------------------------------------------------------------------
00017994                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
00017994                            ; ---------------------------------------------------------------------------
00017994                            
00017994                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017994                            
00017994                            
00017994                            Sonic_WalkVertL:
00017994 3428 000C                  		move.w	obY(a0),d2
00017998 3628 0008                  		move.w	obX(a0),d3
0001799C 7000                       		moveq	#0,d0
0001799E 1028 0017                  		move.b	obWidth(a0),d0
000179A2 4880                       		ext.w	d0
000179A4 9440                       		sub.w	d0,d2
000179A6 1028 0016                  		move.b	obHeight(a0),d0
000179AA 4880                       		ext.w	d0
000179AC 9640                       		sub.w	d0,d3
000179AE 0A43 000F                  		eori.w	#$F,d3
000179B2 49F8 F768                  		lea	($FFFFF768).w,a4
000179B6 367C FFF0                  		movea.w	#-$10,a3
000179BA 3C3C 0800                  		move.w	#$800,d6
000179BE 7A0D                       		moveq	#$D,d5
000179C0 6100 0000                  		bsr.w	FindWall
000179C4 3F01                       		move.w	d1,-(sp)
000179C6 3428 000C                  		move.w	obY(a0),d2
000179CA 3628 0008                  		move.w	obX(a0),d3
000179CE 7000                       		moveq	#0,d0
000179D0 1028 0017                  		move.b	obWidth(a0),d0
000179D4 4880                       		ext.w	d0
000179D6 D440                       		add.w	d0,d2
000179D8 1028 0016                  		move.b	obHeight(a0),d0
000179DC 4880                       		ext.w	d0
000179DE 9640                       		sub.w	d0,d3
000179E0 0A43 000F                  		eori.w	#$F,d3
000179E4 49F8 F76A                  		lea	($FFFFF76A).w,a4
000179E8 367C FFF0                  		movea.w	#-$10,a3
000179EC 3C3C 0800                  		move.w	#$800,d6
000179F0 7A0D                       		moveq	#$D,d5
000179F2 6100 0000                  		bsr.w	FindWall
000179F6 301F                       		move.w	(sp)+,d0
000179F8 6100 FE30                  		bsr.w	Sonic_Angle
000179FC 4A41                       		tst.w	d1
000179FE 6700                       		beq.s	locret_14934
00017A00 6A00                       		bpl.s	loc_14936
00017A02 0C41 FFF2                  		cmpi.w	#-$E,d1
00017A06 6D00 FDDC                  		blt.w	locret_1470A
00017A0A 9368 0008                  		sub.w	d1,obX(a0)
00017A0E                            
00017A0E                            locret_14934:
00017A0E 4E75                       		rts	
00017A10                            ; ===========================================================================
00017A10                            
00017A10                            loc_14936:
00017A10 0C41 000E                  		cmpi.w	#$E,d1
00017A14 6E00                       		bgt.s	loc_14942
00017A16                            
00017A16                            loc_1493C:
00017A16 9368 0008                  		sub.w	d1,obX(a0)
00017A1A 4E75                       		rts	
00017A1C                            ; ===========================================================================
00017A1C                            
00017A1C                            loc_14942:
00017A1C 4A28 0038                  		tst.b	$38(a0)
00017A20 66F4                       		bne.s	loc_1493C
00017A22 08E8 0001 0022             		bset	#1,obStatus(a0)
00017A28 08A8 0005 0022             		bclr	#5,obStatus(a0)
00017A2E 117C 0001 001D             		move.b	#1,obNextAni(a0)
00017A34 4E75                       		rts	
00017A36                            ; End of function Sonic_WalkVertL
00017A36                            ; End of function Sonic_WalkVertL
00017A36                            
00017A36                            		include	"_incObj\sub FindNearestTile.asm"
00017A36                            ; ---------------------------------------------------------------------------
00017A36                            ; Subroutine to	find which tile	the object is standing on
00017A36                            
00017A36                            ; input:
00017A36                            ;	d2 = y-position of object's bottom edge
00017A36                            ;	d3 = x-position of object
00017A36                            
00017A36                            ; output:
00017A36                            ;	a1 = address within 256x256 mappings where object is standing
00017A36                            ;	     (refers to a 16x16 tile number)
00017A36                            ; ---------------------------------------------------------------------------
00017A36                            
00017A36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017A36                            
00017A36                            
00017A36                            FindNearestTile:
00017A36 3002                       		move.w	d2,d0		; get y-pos. of bottom edge of object
00017A38 E248                       		lsr.w	#1,d0
00017A3A 0240 0380                  		andi.w	#$380,d0
00017A3E 3203                       		move.w	d3,d1		; get x-pos. of object
00017A40 E049                       		lsr.w	#8,d1
00017A42 0241 007F                  		andi.w	#$7F,d1
00017A46 D041                       		add.w	d1,d0		; combine
00017A48 72FF                       		moveq	#-1,d1
00017A4A 43F8 A400                  		lea	(v_lvllayout).w,a1
00017A4E 1231 0000                  		move.b	(a1,d0.w),d1	; get 256x256 tile number
00017A52 6700                       		beq.s	@blanktile	; branch if 0
00017A54 6B00                       		bmi.s	@specialtile	; branch if >$7F
00017A56 5301                       		subq.b	#1,d1
00017A58 4881                       		ext.w	d1
00017A5A EE59                       		ror.w	#7,d1
00017A5C 3002                       		move.w	d2,d0
00017A5E D040                       		add.w	d0,d0
00017A60 0240 01E0                  		andi.w	#$1E0,d0
00017A64 D240                       		add.w	d0,d1
00017A66 3003                       		move.w	d3,d0
00017A68 E648                       		lsr.w	#3,d0
00017A6A 0240 001E                  		andi.w	#$1E,d0
00017A6E D240                       		add.w	d0,d1
00017A70                            
00017A70                            @blanktile:
00017A70 2241                       		movea.l	d1,a1
00017A72 4E75                       		rts	
00017A74                            ; ===========================================================================
00017A74                            
00017A74                            @specialtile:
00017A74 0241 007F                  		andi.w	#$7F,d1
00017A78 0828 0006 0001             		btst	#6,obRender(a0) ; is object "behind a loop"?
00017A7E 6700                       		beq.s	@treatasnormal	; if not, branch
00017A80 5241                       		addq.w	#1,d1
00017A82 0C41 0029                  		cmpi.w	#$29,d1
00017A86 6600                       		bne.s	@treatasnormal
00017A88 323C 0051                  		move.w	#$51,d1
00017A8C                            
00017A8C                            	@treatasnormal:
00017A8C 5301                       		subq.b	#1,d1
00017A8E EE59                       		ror.w	#7,d1
00017A90 3002                       		move.w	d2,d0
00017A92 D040                       		add.w	d0,d0
00017A94 0240 01E0                  		andi.w	#$1E0,d0
00017A98 D240                       		add.w	d0,d1
00017A9A 3003                       		move.w	d3,d0
00017A9C E648                       		lsr.w	#3,d0
00017A9E 0240 001E                  		andi.w	#$1E,d0
00017AA2 D240                       		add.w	d0,d1
00017AA4 2241                       		movea.l	d1,a1
00017AA6 4E75                       		rts	
00017AA8                            ; End of function FindNearestTile
00017AA8                            ; End of function FindNearestTile
00017AA8                            		include	"_incObj\sub FindFloor.asm"
00017AA8                            ; ---------------------------------------------------------------------------
00017AA8                            ; Subroutine to	find the floor
00017AA8                            
00017AA8                            ; input:
00017AA8                            ;	d2 = y-position of object's bottom edge
00017AA8                            ;	d3 = x-position of object
00017AA8                            ;	d5 = bit to test for solidness
00017AA8                            
00017AA8                            ; output:
00017AA8                            ;	d1 = distance to the floor
00017AA8                            ;	a1 = address within 256x256 mappings where object is standing
00017AA8                            ;	     (refers to a 16x16 tile number)
00017AA8                            ;	(a4) = floor angle
00017AA8                            ; ---------------------------------------------------------------------------
00017AA8                            
00017AA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017AA8                            
00017AA8                            
00017AA8                            FindFloor:
00017AA8 618C                       		bsr.s	FindNearestTile
00017AAA 3011                       		move.w	(a1),d0		; get value for solidness, orientation and 16x16 tile number
00017AAC 3800                       		move.w	d0,d4
00017AAE 0240 07FF                  		andi.w	#$7FF,d0
00017AB2 6700                       		beq.s	@isblank	; branch if tile is blank
00017AB4 0B04                       		btst	d5,d4		; is the tile solid?
00017AB6 6600                       		bne.s	@issolid	; if yes, branch
00017AB8                            
00017AB8                            @isblank:
00017AB8 D44B                       		add.w	a3,d2
00017ABA 6100 0000                  		bsr.w	FindFloor2	; try tile below the nearest
00017ABE 944B                       		sub.w	a3,d2
00017AC0 0641 0010                  		addi.w	#$10,d1		; return distance to floor
00017AC4 4E75                       		rts	
00017AC6                            ; ===========================================================================
00017AC6                            
00017AC6                            @issolid:
00017AC6 2478 F796                  		movea.l	(v_collindex).w,a2
00017ACA 1032 0000                  		move.b	(a2,d0.w),d0	; get collision block number
00017ACE 0240 00FF                  		andi.w	#$FF,d0
00017AD2 67E4                       		beq.s	@isblank	; branch if 0
00017AD4 45F9 0000 0000             		lea	(AngleMap).l,a2
00017ADA 18B2 0000                  		move.b	(a2,d0.w),(a4)	; get collision angle value
00017ADE E948                       		lsl.w	#4,d0
00017AE0 3203                       		move.w	d3,d1		; get x-pos. of object
00017AE2 0804 000B                  		btst	#$B,d4		; is block flipped horizontally?
00017AE6 6700                       		beq.s	@noflip		; if not, branch
00017AE8 4641                       		not.w	d1
00017AEA 4414                       		neg.b	(a4)
00017AEC                            
00017AEC                            	@noflip:
00017AEC 0804 000C                  		btst	#$C,d4		; is block flipped vertically?
00017AF0 6700                       		beq.s	@noflip2	; if not, branch
00017AF2 0614 0040                  		addi.b	#$40,(a4)
00017AF6 4414                       		neg.b	(a4)
00017AF8 0414 0040                  		subi.b	#$40,(a4)
00017AFC                            
00017AFC                            	@noflip2:
00017AFC 0241 000F                  		andi.w	#$F,d1
00017B00 D240                       		add.w	d0,d1		; (block num. * $10) + x-pos. = place in array
00017B02 45F9 0000 0000             		lea	(CollArray1).l,a2
00017B08 1032 1000                  		move.b	(a2,d1.w),d0	; get collision height
00017B0C 4880                       		ext.w	d0
00017B0E BD44                       		eor.w	d6,d4
00017B10 0804 000C                  		btst	#$C,d4		; is block flipped vertically?
00017B14 6700                       		beq.s	@noflip3	; if not, branch
00017B16 4440                       		neg.w	d0
00017B18                            
00017B18                            	@noflip3:
00017B18 4A40                       		tst.w	d0
00017B1A 679C                       		beq.s	@isblank	; branch if height is 0
00017B1C 6B00                       		bmi.s	@negfloor	; branch if height is negative
00017B1E 0C00 0010                  		cmpi.b	#$10,d0
00017B22 6700                       		beq.s	@maxfloor	; branch if height is $10 (max)
00017B24 3202                       		move.w	d2,d1		; get y-pos. of object
00017B26 0241 000F                  		andi.w	#$F,d1
00017B2A D041                       		add.w	d1,d0
00017B2C 323C 000F                  		move.w	#$F,d1
00017B30 9240                       		sub.w	d0,d1		; return distance to floor
00017B32 4E75                       		rts	
00017B34                            ; ===========================================================================
00017B34                            
00017B34                            @negfloor:
00017B34 3202                       		move.w	d2,d1
00017B36 0241 000F                  		andi.w	#$F,d1
00017B3A D041                       		add.w	d1,d0
00017B3C 6A00 FF7A                  		bpl.w	@isblank
00017B40                            
00017B40                            @maxfloor:
00017B40 944B                       		sub.w	a3,d2
00017B42 6100 0000                  		bsr.w	FindFloor2	; try tile above the nearest
00017B46 D44B                       		add.w	a3,d2
00017B48 0441 0010                  		subi.w	#$10,d1		; return distance to floor
00017B4C 4E75                       		rts	
00017B4E                            ; End of function FindFloor
00017B4E                            
00017B4E                            
00017B4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017B4E                            
00017B4E                            
00017B4E                            FindFloor2:
00017B4E 6100 FEE6                  		bsr.w	FindNearestTile
00017B52 3011                       		move.w	(a1),d0
00017B54 3800                       		move.w	d0,d4
00017B56 0240 07FF                  		andi.w	#$7FF,d0
00017B5A 6700                       		beq.s	@isblank2
00017B5C 0B04                       		btst	d5,d4
00017B5E 6600                       		bne.s	@issolid
00017B60                            
00017B60                            @isblank2:
00017B60 323C 000F                  		move.w	#$F,d1
00017B64 3002                       		move.w	d2,d0
00017B66 0240 000F                  		andi.w	#$F,d0
00017B6A 9240                       		sub.w	d0,d1
00017B6C 4E75                       		rts	
00017B6E                            ; ===========================================================================
00017B6E                            
00017B6E                            @issolid:
00017B6E 2478 F796                  		movea.l	(v_collindex).w,a2
00017B72 1032 0000                  		move.b	(a2,d0.w),d0
00017B76 0240 00FF                  		andi.w	#$FF,d0
00017B7A 67E4                       		beq.s	@isblank2
00017B7C 45F9 0000 0000             		lea	(AngleMap).l,a2
00017B82 18B2 0000                  		move.b	(a2,d0.w),(a4)
00017B86 E948                       		lsl.w	#4,d0
00017B88 3203                       		move.w	d3,d1
00017B8A 0804 000B                  		btst	#$B,d4
00017B8E 6700                       		beq.s	@noflip
00017B90 4641                       		not.w	d1
00017B92 4414                       		neg.b	(a4)
00017B94                            
00017B94                            	@noflip:
00017B94 0804 000C                  		btst	#$C,d4
00017B98 6700                       		beq.s	@noflip2
00017B9A 0614 0040                  		addi.b	#$40,(a4)
00017B9E 4414                       		neg.b	(a4)
00017BA0 0414 0040                  		subi.b	#$40,(a4)
00017BA4                            
00017BA4                            	@noflip2:
00017BA4 0241 000F                  		andi.w	#$F,d1
00017BA8 D240                       		add.w	d0,d1
00017BAA 45F9 0000 0000             		lea	(CollArray1).l,a2
00017BB0 1032 1000                  		move.b	(a2,d1.w),d0
00017BB4 4880                       		ext.w	d0
00017BB6 BD44                       		eor.w	d6,d4
00017BB8 0804 000C                  		btst	#$C,d4
00017BBC 6700                       		beq.s	@noflip3
00017BBE 4440                       		neg.w	d0
00017BC0                            
00017BC0                            	@noflip3:
00017BC0 4A40                       		tst.w	d0
00017BC2 679C                       		beq.s	@isblank2
00017BC4 6B00                       		bmi.s	@negfloor
00017BC6 3202                       		move.w	d2,d1
00017BC8 0241 000F                  		andi.w	#$F,d1
00017BCC D041                       		add.w	d1,d0
00017BCE 323C 000F                  		move.w	#$F,d1
00017BD2 9240                       		sub.w	d0,d1
00017BD4 4E75                       		rts	
00017BD6                            ; ===========================================================================
00017BD6                            
00017BD6                            @negfloor:
00017BD6 3202                       		move.w	d2,d1
00017BD8 0241 000F                  		andi.w	#$F,d1
00017BDC D041                       		add.w	d1,d0
00017BDE 6A00 FF80                  		bpl.w	@isblank2
00017BE2 4641                       		not.w	d1
00017BE4 4E75                       		rts	
00017BE6                            ; End of function FindFloor2
00017BE6                            ; End of function FindFloor2
00017BE6                            		include	"_incObj\sub FindWall.asm"
00017BE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017BE6                            
00017BE6                            
00017BE6                            FindWall:
00017BE6 6100 FE4E                  		bsr.w	FindNearestTile
00017BEA 3011                       		move.w	(a1),d0
00017BEC 3800                       		move.w	d0,d4
00017BEE 0240 07FF                  		andi.w	#$7FF,d0
00017BF2 6700                       		beq.s	loc_14B1E
00017BF4 0B04                       		btst	d5,d4
00017BF6 6600                       		bne.s	loc_14B2C
00017BF8                            
00017BF8                            loc_14B1E:
00017BF8 D64B                       		add.w	a3,d3
00017BFA 6100 0000                  		bsr.w	FindWall2
00017BFE 964B                       		sub.w	a3,d3
00017C00 0641 0010                  		addi.w	#$10,d1
00017C04 4E75                       		rts	
00017C06                            ; ===========================================================================
00017C06                            
00017C06                            loc_14B2C:
00017C06 2478 F796                  		movea.l	(v_collindex).w,a2
00017C0A 1032 0000                  		move.b	(a2,d0.w),d0
00017C0E 0240 00FF                  		andi.w	#$FF,d0
00017C12 67E4                       		beq.s	loc_14B1E
00017C14 45F9 0000 0000             		lea	(AngleMap).l,a2
00017C1A 18B2 0000                  		move.b	(a2,d0.w),(a4)
00017C1E E948                       		lsl.w	#4,d0
00017C20 3202                       		move.w	d2,d1
00017C22 0804 000C                  		btst	#$C,d4
00017C26 6700                       		beq.s	loc_14B5A
00017C28 4641                       		not.w	d1
00017C2A 0614 0040                  		addi.b	#$40,(a4)
00017C2E 4414                       		neg.b	(a4)
00017C30 0414 0040                  		subi.b	#$40,(a4)
00017C34                            
00017C34                            loc_14B5A:
00017C34 0804 000B                  		btst	#$B,d4
00017C38 6700                       		beq.s	loc_14B62
00017C3A 4414                       		neg.b	(a4)
00017C3C                            
00017C3C                            loc_14B62:
00017C3C 0241 000F                  		andi.w	#$F,d1
00017C40 D240                       		add.w	d0,d1
00017C42 45F9 0000 0000             		lea	(CollArray2).l,a2
00017C48 1032 1000                  		move.b	(a2,d1.w),d0
00017C4C 4880                       		ext.w	d0
00017C4E BD44                       		eor.w	d6,d4
00017C50 0804 000B                  		btst	#$B,d4
00017C54 6700                       		beq.s	loc_14B7E
00017C56 4440                       		neg.w	d0
00017C58                            
00017C58                            loc_14B7E:
00017C58 4A40                       		tst.w	d0
00017C5A 679C                       		beq.s	loc_14B1E
00017C5C 6B00                       		bmi.s	loc_14B9A
00017C5E 0C00 0010                  		cmpi.b	#$10,d0
00017C62 6700                       		beq.s	loc_14BA6
00017C64 3203                       		move.w	d3,d1
00017C66 0241 000F                  		andi.w	#$F,d1
00017C6A D041                       		add.w	d1,d0
00017C6C 323C 000F                  		move.w	#$F,d1
00017C70 9240                       		sub.w	d0,d1
00017C72 4E75                       		rts	
00017C74                            ; ===========================================================================
00017C74                            
00017C74                            loc_14B9A:
00017C74 3203                       		move.w	d3,d1
00017C76 0241 000F                  		andi.w	#$F,d1
00017C7A D041                       		add.w	d1,d0
00017C7C 6A00 FF7A                  		bpl.w	loc_14B1E
00017C80                            
00017C80                            loc_14BA6:
00017C80 964B                       		sub.w	a3,d3
00017C82 6100 0000                  		bsr.w	FindWall2
00017C86 D64B                       		add.w	a3,d3
00017C88 0441 0010                  		subi.w	#$10,d1
00017C8C 4E75                       		rts	
00017C8E                            ; End of function FindWall
00017C8E                            
00017C8E                            
00017C8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017C8E                            
00017C8E                            
00017C8E                            FindWall2:
00017C8E 6100 FDA6                  		bsr.w	FindNearestTile
00017C92 3011                       		move.w	(a1),d0
00017C94 3800                       		move.w	d0,d4
00017C96 0240 07FF                  		andi.w	#$7FF,d0
00017C9A 6700                       		beq.s	loc_14BC6
00017C9C 0B04                       		btst	d5,d4
00017C9E 6600                       		bne.s	loc_14BD4
00017CA0                            
00017CA0                            loc_14BC6:
00017CA0 323C 000F                  		move.w	#$F,d1
00017CA4 3003                       		move.w	d3,d0
00017CA6 0240 000F                  		andi.w	#$F,d0
00017CAA 9240                       		sub.w	d0,d1
00017CAC 4E75                       		rts	
00017CAE                            ; ===========================================================================
00017CAE                            
00017CAE                            loc_14BD4:
00017CAE 2478 F796                  		movea.l	(v_collindex).w,a2
00017CB2 1032 0000                  		move.b	(a2,d0.w),d0
00017CB6 0240 00FF                  		andi.w	#$FF,d0
00017CBA 67E4                       		beq.s	loc_14BC6
00017CBC 45F9 0000 0000             		lea	(AngleMap).l,a2
00017CC2 18B2 0000                  		move.b	(a2,d0.w),(a4)
00017CC6 E948                       		lsl.w	#4,d0
00017CC8 3202                       		move.w	d2,d1
00017CCA 0804 000C                  		btst	#$C,d4
00017CCE 6700                       		beq.s	loc_14C02
00017CD0 4641                       		not.w	d1
00017CD2 0614 0040                  		addi.b	#$40,(a4)
00017CD6 4414                       		neg.b	(a4)
00017CD8 0414 0040                  		subi.b	#$40,(a4)
00017CDC                            
00017CDC                            loc_14C02:
00017CDC 0804 000B                  		btst	#$B,d4
00017CE0 6700                       		beq.s	loc_14C0A
00017CE2 4414                       		neg.b	(a4)
00017CE4                            
00017CE4                            loc_14C0A:
00017CE4 0241 000F                  		andi.w	#$F,d1
00017CE8 D240                       		add.w	d0,d1
00017CEA 45F9 0000 0000             		lea	(CollArray2).l,a2
00017CF0 1032 1000                  		move.b	(a2,d1.w),d0
00017CF4 4880                       		ext.w	d0
00017CF6 BD44                       		eor.w	d6,d4
00017CF8 0804 000B                  		btst	#$B,d4
00017CFC 6700                       		beq.s	loc_14C26
00017CFE 4440                       		neg.w	d0
00017D00                            
00017D00                            loc_14C26:
00017D00 4A40                       		tst.w	d0
00017D02 679C                       		beq.s	loc_14BC6
00017D04 6B00                       		bmi.s	loc_14C3C
00017D06 3203                       		move.w	d3,d1
00017D08 0241 000F                  		andi.w	#$F,d1
00017D0C D041                       		add.w	d1,d0
00017D0E 323C 000F                  		move.w	#$F,d1
00017D12 9240                       		sub.w	d0,d1
00017D14 4E75                       		rts	
00017D16                            ; ===========================================================================
00017D16                            
00017D16                            loc_14C3C:
00017D16 3203                       		move.w	d3,d1
00017D18 0241 000F                  		andi.w	#$F,d1
00017D1C D041                       		add.w	d1,d0
00017D1E 6A00 FF80                  		bpl.w	loc_14BC6
00017D22 4641                       		not.w	d1
00017D24 4E75                       		rts	
00017D26                            ; End of function FindWall2
00017D26                            ; End of function FindWall2
00017D26                            
00017D26                            ; ---------------------------------------------------------------------------
00017D26                            ; Unused floor/wall subroutine - logs something	to do with collision
00017D26                            ; ---------------------------------------------------------------------------
00017D26                            
00017D26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017D26                            
00017D26                            
00017D26                            FloorLog_Unk:
00017D26 4E75                       		rts	
00017D28                            
00017D28 43F9 0000 0000             		lea	(CollArray1).l,a1
00017D2E 45F9 0000 0000             		lea	(CollArray1).l,a2
00017D34 363C 00FF                  		move.w	#$FF,d3
00017D38                            
00017D38                            loc_14C5E:
00017D38 7A10                       		moveq	#$10,d5
00017D3A 343C 000F                  		move.w	#$F,d2
00017D3E                            
00017D3E                            loc_14C64:
00017D3E 7800                       		moveq	#0,d4
00017D40 323C 000F                  		move.w	#$F,d1
00017D44                            
00017D44                            loc_14C6A:
00017D44 3019                       		move.w	(a1)+,d0
00017D46 EAA8                       		lsr.l	d5,d0
00017D48 D944                       		addx.w	d4,d4
00017D4A 51C9 FFF8                  		dbf	d1,loc_14C6A
00017D4E                            
00017D4E 34C4                       		move.w	d4,(a2)+
00017D50 92FC 0020                  		suba.w	#$20,a1
00017D54 5345                       		subq.w	#1,d5
00017D56 51CA FFE6                  		dbf	d2,loc_14C64
00017D5A                            
00017D5A D2FC 0020                  		adda.w	#$20,a1
00017D5E 51CB FFD8                  		dbf	d3,loc_14C5E
00017D62                            
00017D62 43F9 0000 0000             		lea	(CollArray1).l,a1
00017D68 45F9 0000 0000             		lea	(CollArray2).l,a2
00017D6E 6100                       		bsr.s	FloorLog_Unk2
00017D70 43F9 0000 0000             		lea	(CollArray1).l,a1
00017D76 45F9 0000 0000             		lea	(CollArray1).l,a2
00017D7C                            
00017D7C                            ; End of function FloorLog_Unk
00017D7C                            
00017D7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017D7C                            
00017D7C                            
00017D7C                            FloorLog_Unk2:
00017D7C 363C 0FFF                  		move.w	#$FFF,d3
00017D80                            
00017D80                            loc_14CA6:
00017D80 7400                       		moveq	#0,d2
00017D82 323C 000F                  		move.w	#$F,d1
00017D86 3019                       		move.w	(a1)+,d0
00017D88 6700                       		beq.s	loc_14CD4
00017D8A 6B00                       		bmi.s	loc_14CBE
00017D8C                            
00017D8C                            loc_14CB2:
00017D8C E248                       		lsr.w	#1,d0
00017D8E 6400                       		bhs.s	loc_14CB8
00017D90 5202                       		addq.b	#1,d2
00017D92                            
00017D92                            loc_14CB8:
00017D92 51C9 FFF8                  		dbf	d1,loc_14CB2
00017D96                            
00017D96 6000                       		bra.s	loc_14CD6
00017D98                            ; ===========================================================================
00017D98                            
00017D98                            loc_14CBE:
00017D98 0C40 FFFF                  		cmpi.w	#-1,d0
00017D9C 6700                       		beq.s	loc_14CD0
00017D9E                            
00017D9E                            loc_14CC4:
00017D9E E348                       		lsl.w	#1,d0
00017DA0 6400                       		bhs.s	loc_14CCA
00017DA2 5302                       		subq.b	#1,d2
00017DA4                            
00017DA4                            loc_14CCA:
00017DA4 51C9 FFF8                  		dbf	d1,loc_14CC4
00017DA8                            
00017DA8 6000                       		bra.s	loc_14CD6
00017DAA                            ; ===========================================================================
00017DAA                            
00017DAA                            loc_14CD0:
00017DAA 303C 0010                  		move.w	#$10,d0
00017DAE                            
00017DAE                            loc_14CD4:
00017DAE 3400                       		move.w	d0,d2
00017DB0                            
00017DB0                            loc_14CD6:
00017DB0 14C2                       		move.b	d2,(a2)+
00017DB2 51CB FFCC                  		dbf	d3,loc_14CA6
00017DB6                            
00017DB6 4E75                       		rts	
00017DB8                            
00017DB8                            ; End of function FloorLog_Unk2
00017DB8                            
00017DB8                            
00017DB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017DB8                            
00017DB8                            
00017DB8                            Sonic_WalkSpeed:
00017DB8 2628 0008                  		move.l	obX(a0),d3
00017DBC 2428 000C                  		move.l	obY(a0),d2
00017DC0 3228 0010                  		move.w	obVelX(a0),d1
00017DC4 48C1                       		ext.l	d1
00017DC6 E181                       		asl.l	#8,d1
00017DC8 D681                       		add.l	d1,d3
00017DCA 3228 0012                  		move.w	obVelY(a0),d1
00017DCE 48C1                       		ext.l	d1
00017DD0 E181                       		asl.l	#8,d1
00017DD2 D481                       		add.l	d1,d2
00017DD4 4842                       		swap	d2
00017DD6 4843                       		swap	d3
00017DD8 11C0 F768                  		move.b	d0,(v_anglebuffer).w
00017DDC 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00017DE0 1200                       		move.b	d0,d1
00017DE2 0600 0020                  		addi.b	#$20,d0
00017DE6 6A00                       		bpl.s	loc_14D1A
00017DE8 1001                       		move.b	d1,d0
00017DEA 6A00                       		bpl.s	loc_14D14
00017DEC 5300                       		subq.b	#1,d0
00017DEE                            
00017DEE                            loc_14D14:
00017DEE 0600 0020                  		addi.b	#$20,d0
00017DF2 6000                       		bra.s	loc_14D24
00017DF4                            ; ===========================================================================
00017DF4                            
00017DF4                            loc_14D1A:
00017DF4 1001                       		move.b	d1,d0
00017DF6 6A00                       		bpl.s	loc_14D20
00017DF8 5200                       		addq.b	#1,d0
00017DFA                            
00017DFA                            loc_14D20:
00017DFA 0600 001F                  		addi.b	#$1F,d0
00017DFE                            
00017DFE                            loc_14D24:
00017DFE 0200 00C0                  		andi.b	#$C0,d0
00017E02 6700 0000                  		beq.w	loc_14DF0
00017E06 0C00 0080                  		cmpi.b	#$80,d0
00017E0A 6700 0000                  		beq.w	loc_14F7C
00017E0E 0201 0038                  		andi.b	#$38,d1
00017E12 6600                       		bne.s	loc_14D3C
00017E14 5042                       		addq.w	#8,d2
00017E16                            
00017E16                            loc_14D3C:
00017E16 0C00 0040                  		cmpi.b	#$40,d0
00017E1A 6700 0000                  		beq.w	loc_1504A
00017E1E 6000 0000                  		bra.w	loc_14EBC
00017E22                            
00017E22                            ; End of function Sonic_WalkSpeed
00017E22                            
00017E22                            
00017E22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017E22                            
00017E22                            
00017E22                            sub_14D48:
00017E22 11C0 F768                  		move.b	d0,(v_anglebuffer).w
00017E26 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00017E2A 0600 0020                  		addi.b	#$20,d0
00017E2E 0200 00C0                  		andi.b	#$C0,d0
00017E32 0C00 0040                  		cmpi.b	#$40,d0
00017E36 6700 0000                  		beq.w	loc_14FD6
00017E3A 0C00 0080                  		cmpi.b	#$80,d0
00017E3E 6700 0000                  		beq.w	Sonic_DontRunOnWalls
00017E42 0C00 00C0                  		cmpi.b	#$C0,d0
00017E46 6700 0000                  		beq.w	sub_14E50
00017E4A                            
00017E4A                            ; End of function sub_14D48
00017E4A                            
00017E4A                            ; ---------------------------------------------------------------------------
00017E4A                            ; Subroutine to	make Sonic land	on the floor after jumping
00017E4A                            ; ---------------------------------------------------------------------------
00017E4A                            
00017E4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017E4A                            
00017E4A                            
00017E4A                            Sonic_HitFloor:
00017E4A 3428 000C                  		move.w	obY(a0),d2
00017E4E 3628 0008                  		move.w	obX(a0),d3
00017E52 7000                       		moveq	#0,d0
00017E54 1028 0016                  		move.b	obHeight(a0),d0
00017E58 4880                       		ext.w	d0
00017E5A D440                       		add.w	d0,d2
00017E5C 1028 0017                  		move.b	obWidth(a0),d0
00017E60 4880                       		ext.w	d0
00017E62 D640                       		add.w	d0,d3
00017E64 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017E68 367C 0010                  		movea.w	#$10,a3
00017E6C 3C3C 0000                  		move.w	#0,d6
00017E70 7A0D                       		moveq	#$D,d5
00017E72 6100 FC34                  		bsr.w	FindFloor
00017E76 3F01                       		move.w	d1,-(sp)
00017E78 3428 000C                  		move.w	obY(a0),d2
00017E7C 3628 0008                  		move.w	obX(a0),d3
00017E80 7000                       		moveq	#0,d0
00017E82 1028 0016                  		move.b	obHeight(a0),d0
00017E86 4880                       		ext.w	d0
00017E88 D440                       		add.w	d0,d2
00017E8A 1028 0017                  		move.b	obWidth(a0),d0
00017E8E 4880                       		ext.w	d0
00017E90 9640                       		sub.w	d0,d3
00017E92 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017E96 367C 0010                  		movea.w	#$10,a3
00017E9A 3C3C 0000                  		move.w	#0,d6
00017E9E 7A0D                       		moveq	#$D,d5
00017EA0 6100 FC06                  		bsr.w	FindFloor
00017EA4 301F                       		move.w	(sp)+,d0
00017EA6 143C 0000                  		move.b	#0,d2
00017EAA                            
00017EAA                            loc_14DD0:
00017EAA 1638 F76A                  		move.b	($FFFFF76A).w,d3
00017EAE B240                       		cmp.w	d0,d1
00017EB0 6F00                       		ble.s	loc_14DDE
00017EB2 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017EB6 C141                       		exg	d0,d1
00017EB8                            
00017EB8                            loc_14DDE:
00017EB8 0803 0000                  		btst	#0,d3
00017EBC 6700                       		beq.s	locret_14DE6
00017EBE 1602                       		move.b	d2,d3
00017EC0                            
00017EC0                            locret_14DE6:
00017EC0 4E75                       		rts	
00017EC2                            
00017EC2                            ; End of function Sonic_HitFloor
00017EC2                            
00017EC2                            ; ===========================================================================
00017EC2 3428 000C                  		move.w	obY(a0),d2
00017EC6 3628 0008                  		move.w	obX(a0),d3
00017ECA                            
00017ECA                            loc_14DF0:
00017ECA 0642 000A                  		addi.w	#$A,d2
00017ECE 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017ED2 367C 0010                  		movea.w	#$10,a3
00017ED6 3C3C 0000                  		move.w	#0,d6
00017EDA 7A0E                       		moveq	#$E,d5
00017EDC 6100 FBCA                  		bsr.w	FindFloor
00017EE0 143C 0000                  		move.b	#0,d2
00017EE4                            
00017EE4                            loc_14E0A:
00017EE4 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017EE8 0803 0000                  		btst	#0,d3
00017EEC 6700                       		beq.s	locret_14E16
00017EEE 1602                       		move.b	d2,d3
00017EF0                            
00017EF0                            locret_14E16:
00017EF0 4E75                       		rts	
00017EF2                            
00017EF2                            		include	"_incObj\sub ObjFloorDist.asm"
00017EF2                            ; ---------------------------------------------------------------------------
00017EF2                            ; Subroutine to find the distance of an object to the floor
00017EF2                            
00017EF2                            ; input:
00017EF2                            ;	d3 = x-pos. of object (ObjFloorDist2 only)
00017EF2                            
00017EF2                            ; output:
00017EF2                            ;	d1 = distance to the floor
00017EF2                            ;	d3 = floor angle
00017EF2                            ;	a1 = address within 256x256 mappings where object is standing
00017EF2                            ;	     (refers to a 16x16 tile number)
00017EF2                            ;	(a4) = floor angle
00017EF2                            ; ---------------------------------------------------------------------------
00017EF2                            
00017EF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017EF2                            
00017EF2                            
00017EF2                            ObjFloorDist:
00017EF2 3628 0008                  		move.w	obX(a0),d3
00017EF6                            
00017EF6                            
00017EF6                            ObjFloorDist2:
00017EF6 3428 000C                  		move.w	obY(a0),d2
00017EFA 7000                       		moveq	#0,d0
00017EFC 1028 0016                  		move.b	obHeight(a0),d0
00017F00 4880                       		ext.w	d0
00017F02 D440                       		add.w	d0,d2
00017F04 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017F08 18BC 0000                  		move.b	#0,(a4)
00017F0C 367C 0010                  		movea.w	#$10,a3		; height of a 16x16 tile
00017F10 3C3C 0000                  		move.w	#0,d6
00017F14 7A0D                       		moveq	#$D,d5		; bit to test for solidness
00017F16 6100 FB90                  		bsr.w	FindFloor
00017F1A 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017F1E 0803 0000                  		btst	#0,d3
00017F22 6700                       		beq.s	locret_14E4E
00017F24 163C 0000                  		move.b	#0,d3
00017F28                            
00017F28                            	locret_14E4E:
00017F28 4E75                       		rts	
00017F2A                            
00017F2A                            ; End of function ObjFloorDist2
00017F2A                            ; End of function ObjFloorDist2
00017F2A                            
00017F2A                            
00017F2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017F2A                            
00017F2A                            
00017F2A                            sub_14E50:
00017F2A 3428 000C                  		move.w	obY(a0),d2
00017F2E 3628 0008                  		move.w	obX(a0),d3
00017F32 7000                       		moveq	#0,d0
00017F34 1028 0017                  		move.b	obWidth(a0),d0
00017F38 4880                       		ext.w	d0
00017F3A 9440                       		sub.w	d0,d2
00017F3C 1028 0016                  		move.b	obHeight(a0),d0
00017F40 4880                       		ext.w	d0
00017F42 D640                       		add.w	d0,d3
00017F44 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017F48 367C 0010                  		movea.w	#$10,a3
00017F4C 3C3C 0000                  		move.w	#0,d6
00017F50 7A0E                       		moveq	#$E,d5
00017F52 6100 FC92                  		bsr.w	FindWall
00017F56 3F01                       		move.w	d1,-(sp)
00017F58 3428 000C                  		move.w	obY(a0),d2
00017F5C 3628 0008                  		move.w	obX(a0),d3
00017F60 7000                       		moveq	#0,d0
00017F62 1028 0017                  		move.b	obWidth(a0),d0
00017F66 4880                       		ext.w	d0
00017F68 D440                       		add.w	d0,d2
00017F6A 1028 0016                  		move.b	obHeight(a0),d0
00017F6E 4880                       		ext.w	d0
00017F70 D640                       		add.w	d0,d3
00017F72 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017F76 367C 0010                  		movea.w	#$10,a3
00017F7A 3C3C 0000                  		move.w	#0,d6
00017F7E 7A0E                       		moveq	#$E,d5
00017F80 6100 FC64                  		bsr.w	FindWall
00017F84 301F                       		move.w	(sp)+,d0
00017F86 143C 00C0                  		move.b	#-$40,d2
00017F8A 6000 FF1E                  		bra.w	loc_14DD0
00017F8E                            
00017F8E                            ; End of function sub_14E50
00017F8E                            
00017F8E                            
00017F8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017F8E                            
00017F8E                            
00017F8E                            sub_14EB4:
00017F8E 3428 000C                  		move.w	obY(a0),d2
00017F92 3628 0008                  		move.w	obX(a0),d3
00017F96                            
00017F96                            loc_14EBC:
00017F96 0643 000A                  		addi.w	#$A,d3
00017F9A 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017F9E 367C 0010                  		movea.w	#$10,a3
00017FA2 3C3C 0000                  		move.w	#0,d6
00017FA6 7A0E                       		moveq	#$E,d5
00017FA8 6100 FC3C                  		bsr.w	FindWall
00017FAC 143C 00C0                  		move.b	#-$40,d2
00017FB0 6000 FF32                  		bra.w	loc_14E0A
00017FB4                            
00017FB4                            ; End of function sub_14EB4
00017FB4                            
00017FB4                            ; ---------------------------------------------------------------------------
00017FB4                            ; Subroutine to	detect when an object hits a wall to its right
00017FB4                            ; ---------------------------------------------------------------------------
00017FB4                            
00017FB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017FB4                            
00017FB4                            
00017FB4                            ObjHitWallRight:
00017FB4 D668 0008                  		add.w	obX(a0),d3
00017FB8 3428 000C                  		move.w	obY(a0),d2
00017FBC 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017FC0 18BC 0000                  		move.b	#0,(a4)
00017FC4 367C 0010                  		movea.w	#$10,a3
00017FC8 3C3C 0000                  		move.w	#0,d6
00017FCC 7A0E                       		moveq	#$E,d5
00017FCE 6100 FC16                  		bsr.w	FindWall
00017FD2 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017FD6 0803 0000                  		btst	#0,d3
00017FDA 6700                       		beq.s	locret_14F06
00017FDC 163C 00C0                  		move.b	#-$40,d3
00017FE0                            
00017FE0                            locret_14F06:
00017FE0 4E75                       		rts	
00017FE2                            
00017FE2                            ; End of function ObjHitWallRight
00017FE2                            
00017FE2                            ; ---------------------------------------------------------------------------
00017FE2                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
00017FE2                            ; touches them
00017FE2                            ; ---------------------------------------------------------------------------
00017FE2                            
00017FE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017FE2                            
00017FE2                            
00017FE2                            Sonic_DontRunOnWalls:
00017FE2 3428 000C                  		move.w	obY(a0),d2
00017FE6 3628 0008                  		move.w	obX(a0),d3
00017FEA 7000                       		moveq	#0,d0
00017FEC 1028 0016                  		move.b	obHeight(a0),d0
00017FF0 4880                       		ext.w	d0
00017FF2 9440                       		sub.w	d0,d2
00017FF4 0A42 000F                  		eori.w	#$F,d2
00017FF8 1028 0017                  		move.b	obWidth(a0),d0
00017FFC 4880                       		ext.w	d0
00017FFE D640                       		add.w	d0,d3
00018000 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018004 367C FFF0                  		movea.w	#-$10,a3
00018008 3C3C 1000                  		move.w	#$1000,d6
0001800C 7A0E                       		moveq	#$E,d5
0001800E 6100 FA98                  		bsr.w	FindFloor
00018012 3F01                       		move.w	d1,-(sp)
00018014 3428 000C                  		move.w	obY(a0),d2
00018018 3628 0008                  		move.w	obX(a0),d3
0001801C 7000                       		moveq	#0,d0
0001801E 1028 0016                  		move.b	obHeight(a0),d0
00018022 4880                       		ext.w	d0
00018024 9440                       		sub.w	d0,d2
00018026 0A42 000F                  		eori.w	#$F,d2
0001802A 1028 0017                  		move.b	obWidth(a0),d0
0001802E 4880                       		ext.w	d0
00018030 9640                       		sub.w	d0,d3
00018032 49F8 F76A                  		lea	($FFFFF76A).w,a4
00018036 367C FFF0                  		movea.w	#-$10,a3
0001803A 3C3C 1000                  		move.w	#$1000,d6
0001803E 7A0E                       		moveq	#$E,d5
00018040 6100 FA66                  		bsr.w	FindFloor
00018044 301F                       		move.w	(sp)+,d0
00018046 143C 0080                  		move.b	#-$80,d2
0001804A 6000 FE5E                  		bra.w	loc_14DD0
0001804E                            ; End of function Sonic_DontRunOnWalls
0001804E                            
0001804E                            ; ===========================================================================
0001804E 3428 000C                  		move.w	obY(a0),d2
00018052 3628 0008                  		move.w	obX(a0),d3
00018056                            
00018056                            loc_14F7C:
00018056 0442 000A                  		subi.w	#$A,d2
0001805A 0A42 000F                  		eori.w	#$F,d2
0001805E 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018062 367C FFF0                  		movea.w	#-$10,a3
00018066 3C3C 1000                  		move.w	#$1000,d6
0001806A 7A0E                       		moveq	#$E,d5
0001806C 6100 FA3A                  		bsr.w	FindFloor
00018070 143C 0080                  		move.b	#-$80,d2
00018074 6000 FE6E                  		bra.w	loc_14E0A
00018078                            
00018078                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018078                            
00018078                            
00018078                            ObjHitCeiling:
00018078 3428 000C                  		move.w	obY(a0),d2
0001807C 3628 0008                  		move.w	obX(a0),d3
00018080 7000                       		moveq	#0,d0
00018082 1028 0016                  		move.b	obHeight(a0),d0
00018086 4880                       		ext.w	d0
00018088 9440                       		sub.w	d0,d2
0001808A 0A42 000F                  		eori.w	#$F,d2
0001808E 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018092 367C FFF0                  		movea.w	#-$10,a3
00018096 3C3C 1000                  		move.w	#$1000,d6
0001809A 7A0E                       		moveq	#$E,d5
0001809C 6100 FA0A                  		bsr.w	FindFloor
000180A0 1638 F768                  		move.b	(v_anglebuffer).w,d3
000180A4 0803 0000                  		btst	#0,d3
000180A8 6700                       		beq.s	locret_14FD4
000180AA 163C 0080                  		move.b	#-$80,d3
000180AE                            
000180AE                            locret_14FD4:
000180AE 4E75                       		rts	
000180B0                            ; End of function ObjHitCeiling
000180B0                            
000180B0                            ; ===========================================================================
000180B0                            
000180B0                            loc_14FD6:
000180B0 3428 000C                  		move.w	obY(a0),d2
000180B4 3628 0008                  		move.w	obX(a0),d3
000180B8 7000                       		moveq	#0,d0
000180BA 1028 0017                  		move.b	obWidth(a0),d0
000180BE 4880                       		ext.w	d0
000180C0 9440                       		sub.w	d0,d2
000180C2 1028 0016                  		move.b	obHeight(a0),d0
000180C6 4880                       		ext.w	d0
000180C8 9640                       		sub.w	d0,d3
000180CA 0A43 000F                  		eori.w	#$F,d3
000180CE 49F8 F768                  		lea	(v_anglebuffer).w,a4
000180D2 367C FFF0                  		movea.w	#-$10,a3
000180D6 3C3C 0800                  		move.w	#$800,d6
000180DA 7A0E                       		moveq	#$E,d5
000180DC 6100 FB08                  		bsr.w	FindWall
000180E0 3F01                       		move.w	d1,-(sp)
000180E2 3428 000C                  		move.w	obY(a0),d2
000180E6 3628 0008                  		move.w	obX(a0),d3
000180EA 7000                       		moveq	#0,d0
000180EC 1028 0017                  		move.b	obWidth(a0),d0
000180F0 4880                       		ext.w	d0
000180F2 D440                       		add.w	d0,d2
000180F4 1028 0016                  		move.b	obHeight(a0),d0
000180F8 4880                       		ext.w	d0
000180FA 9640                       		sub.w	d0,d3
000180FC 0A43 000F                  		eori.w	#$F,d3
00018100 49F8 F76A                  		lea	($FFFFF76A).w,a4
00018104 367C FFF0                  		movea.w	#-$10,a3
00018108 3C3C 0800                  		move.w	#$800,d6
0001810C 7A0E                       		moveq	#$E,d5
0001810E 6100 FAD6                  		bsr.w	FindWall
00018112 301F                       		move.w	(sp)+,d0
00018114 143C 0040                  		move.b	#$40,d2
00018118 6000 FD90                  		bra.w	loc_14DD0
0001811C                            
0001811C                            ; ---------------------------------------------------------------------------
0001811C                            ; Subroutine to	stop Sonic when	he jumps at a wall
0001811C                            ; ---------------------------------------------------------------------------
0001811C                            
0001811C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001811C                            
0001811C                            
0001811C                            Sonic_HitWall:
0001811C 3428 000C                  		move.w	obY(a0),d2
00018120 3628 0008                  		move.w	obX(a0),d3
00018124                            
00018124                            loc_1504A:
00018124 0443 000A                  		subi.w	#$A,d3
00018128 0A43 000F                  		eori.w	#$F,d3
0001812C 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018130 367C FFF0                  		movea.w	#-$10,a3
00018134 3C3C 0800                  		move.w	#$800,d6
00018138 7A0E                       		moveq	#$E,d5
0001813A 6100 FAAA                  		bsr.w	FindWall
0001813E 143C 0040                  		move.b	#$40,d2
00018142 6000 FDA0                  		bra.w	loc_14E0A
00018146                            ; End of function Sonic_HitWall
00018146                            
00018146                            ; ---------------------------------------------------------------------------
00018146                            ; Subroutine to	detect when an object hits a wall to its left
00018146                            ; ---------------------------------------------------------------------------
00018146                            
00018146                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018146                            
00018146                            
00018146                            ObjHitWallLeft:
00018146 D668 0008                  		add.w	obX(a0),d3
0001814A 3428 000C                  		move.w	obY(a0),d2
0001814E                            		; Engine bug: colliding with left walls is erratic with this function.
0001814E                            		; The cause is this: a missing instruction to flip collision on the found
0001814E                            		; 16x16 block; this one:
0001814E                            		;eori.w	#$F,d3
0001814E 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018152 18BC 0000                  		move.b	#0,(a4)
00018156 367C FFF0                  		movea.w	#-$10,a3
0001815A 3C3C 0800                  		move.w	#$800,d6
0001815E 7A0E                       		moveq	#$E,d5
00018160 6100 FA84                  		bsr.w	FindWall
00018164 1638 F768                  		move.b	(v_anglebuffer).w,d3
00018168 0803 0000                  		btst	#0,d3
0001816C 6700                       		beq.s	locret_15098
0001816E 163C 0040                  		move.b	#$40,d3
00018172                            
00018172                            locret_15098:
00018172 4E75                       		rts	
00018174                            ; End of function ObjHitWallLeft
00018174                            
00018174                            ; ===========================================================================
00018174                            
00018174                            		include	"_incObj\66 Rotating Junction.asm"
00018174                            ; ---------------------------------------------------------------------------
00018174                            ; Object 66 - rotating disc junction that grabs Sonic (SBZ)
00018174                            ; ---------------------------------------------------------------------------
00018174                            
00018174                            Junction:
00018174 7000                       		moveq	#0,d0
00018176 1028 0024                  		move.b	obRoutine(a0),d0
0001817A 323B 0000                  		move.w	Jun_Index(pc,d0.w),d1
0001817E 4EFB 1000                  		jmp	Jun_Index(pc,d1.w)
00018182                            ; ===========================================================================
00018182 0000                       Jun_Index:	dc.w Jun_Main-Jun_Index
00018184 0000                       		dc.w Jun_Action-Jun_Index
00018186 0000                       		dc.w Jun_Display-Jun_Index
00018188 0000                       		dc.w Jun_Release-Jun_Index
0001818A                            
0001818A =00000034                  jun_frame:	equ $34		; current frame
0001818A =00000036                  jun_reverse:	equ $36		; flag set when switch is pressed
0001818A =00000038                  jun_switch:	equ $38		; which switch will reverse the disc
0001818A                            ; ===========================================================================
0001818A                            
0001818A                            Jun_Main:	; Routine 0
0001818A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001818E 323C 0001                  		move.w	#1,d1
00018192 2248                       		movea.l	a0,a1
00018194 6000                       		bra.s	@makeitem
00018196                            ; ===========================================================================
00018196                            
00018196                            	@repeat:
00018196 4EB9 0000 FE04             		jsr	FindFreeObj
0001819C 6600                       		bne.s	@fail
0001819E 12BC 0066                  		move.b	#id_Junction,0(a1)
000181A2 5829 0024                  		addq.b	#4,obRoutine(a1) ; goto Jun_Display next
000181A6 3368 0008 0008             		move.w	obX(a0),obX(a1)
000181AC 3368 000C 000C             		move.w	obY(a0),obY(a1)
000181B2 337C 0180 0018             		move.w	#$180,obPriority(a1)
000181B8 137C 0010 001A             		move.b	#$10,obFrame(a1) ; use large circular sprite
000181BE                            
000181BE                            @makeitem:
000181BE 237C 0000 0000 0004        		move.l	#Map_Jun,obMap(a1)
000181C6 337C 4348 0002             		move.w	#$4348,obGfx(a1)
000181CC 0029 0004 0001             		ori.b	#4,obRender(a1)
000181D2 137C 0038 0014             		move.b	#$38,obActWid(a1)
000181D8                            
000181D8                            	@fail:
000181D8 51C9 FFBC                  		dbf	d1,@repeat
000181DC                            
000181DC 117C 0030 0014             		move.b	#$30,obActWid(a0)
000181E2 317C 0200 0018             		move.w	#$200,obPriority(a0)
000181E8 317C 003C 0030             		move.w	#$3C,$30(a0)
000181EE 117C 0001 0034             		move.b	#1,jun_frame(a0)
000181F4 1168 0028 0038             		move.b	obSubtype(a0),jun_switch(a0)
000181FA                            
000181FA                            Jun_Action:	; Routine 2
000181FA 6100 0000                  		bsr.w	Jun_ChkSwitch
000181FE 4A28 0001                  		tst.b	obRender(a0)
00018202 6A00 0000                  		bpl.w	Jun_Display
00018206 323C 0030                  		move.w	#$30,d1
0001820A 3401                       		move.w	d1,d2
0001820C 3602                       		move.w	d2,d3
0001820E 5243                       		addq.w	#1,d3
00018210 3828 0008                  		move.w	obX(a0),d4
00018214 6100 9B70                  		bsr.w	SolidObject
00018218 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing the disc?
0001821E 6700 0000                  		beq.w	Jun_Display	; if not, branch
00018222                            
00018222 43F8 D000                  		lea	(v_player).w,a1
00018226 720E                       		moveq	#$E,d1
00018228 3029 0008                  		move.w	obX(a1),d0
0001822C B068 0008                  		cmp.w	obX(a0),d0	; is Sonic to the left of the disc?
00018230 6500                       		bcs.s	@isleft		; if yes, branch
00018232 7207                       		moveq	#7,d1		
00018234                            
00018234                            	@isleft:
00018234 B228 001A                  		cmp.b	obFrame(a0),d1	; is the gap next to Sonic?
00018238 6600                       		bne.s	Jun_Display	; if not, branch
0001823A                            
0001823A 1141 0032                  		move.b	d1,$32(a0)
0001823E 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto Jun_Release next
00018242 11FC 0001 F7C8             		move.b	#1,(f_lockmulti).w ; lock controls
00018248 137C 0002 001C             		move.b	#id_Roll,obAnim(a1) ; make Sonic use "rolling" animation
0001824E 337C 0800 0020             		move.w	#$800,obInertia(a1)
00018254 337C 0000 0010             		move.w	#0,obVelX(a1)
0001825A 337C 0000 0012             		move.w	#0,obVelY(a1)
00018260 08A8 0005 0022             		bclr	#5,obStatus(a0)
00018266 08A9 0005 0022             		bclr	#5,obStatus(a1)
0001826C 08E9 0001 0022             		bset	#1,obStatus(a1)
00018272 3429 0008                  		move.w	obX(a1),d2
00018276 3629 000C                  		move.w	obY(a1),d3
0001827A 6100 0000                  		bsr.w	Jun_ChgPos
0001827E D569 0008                  		add.w	d2,obX(a1)
00018282 D769 000C                  		add.w	d3,obY(a1)
00018286 E0E9 0008                  		asr	obX(a1)
0001828A E0E9 000C                  		asr	obY(a1)
0001828E                            
0001828E                            Jun_Display:	; Routine 4
0001828E 6000 965E                  		bra.w	RememberState
00018292                            ; ===========================================================================
00018292                            
00018292                            Jun_Release:	; Routine 6
00018292 1028 001A                  		move.b	obFrame(a0),d0
00018296 0C00 0004                  		cmpi.b	#4,d0		; is gap pointing down?
0001829A 6700                       		beq.s	@release	; if yes, branch
0001829C 0C00 0007                  		cmpi.b	#7,d0		; is gap pointing right?
000182A0 6600                       		bne.s	@dontrelease	; if not, branch
000182A2                            
000182A2                            	@release:
000182A2 B028 0032                  		cmp.b	$32(a0),d0
000182A6 6700                       		beq.s	@dontrelease
000182A8 43F8 D000                  		lea	(v_player).w,a1
000182AC 337C 0000 0010             		move.w	#0,obVelX(a1)
000182B2 337C 0800 0012             		move.w	#$800,obVelY(a1)
000182B8 0C00 0004                  		cmpi.b	#4,d0
000182BC 6700                       		beq.s	@isdown
000182BE 337C 0800 0010             		move.w	#$800,obVelX(a1)
000182C4 337C 0800 0012             		move.w	#$800,obVelY(a1)
000182CA                            
000182CA                            	@isdown:
000182CA 4238 F7C8                  		clr.b	(f_lockmulti).w	; unlock controls
000182CE 5928 0024                  		subq.b	#4,obRoutine(a0)
000182D2                            
000182D2                            	@dontrelease:
000182D2 6100                       		bsr.s	Jun_ChkSwitch
000182D4 6100                       		bsr.s	Jun_ChgPos
000182D6 6000 9616                  		bra.w	RememberState
000182DA                            
000182DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000182DA                            
000182DA                            
000182DA                            Jun_ChkSwitch:
000182DA 45F8 F7E0                  		lea	(f_switch).w,a2
000182DE 7000                       		moveq	#0,d0
000182E0 1028 0038                  		move.b	jun_switch(a0),d0
000182E4 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
000182EA 6700                       		beq.s	@unpressed	; if not, branch
000182EC                            
000182EC 4A28 0036                  		tst.b	jun_reverse(a0)	; has switch previously	been pressed?
000182F0 6600                       		bne.s	@animate	; if yes, branch
000182F2 4428 0034                  		neg.b	jun_frame(a0)
000182F6 117C 0001 0036             		move.b	#1,jun_reverse(a0) ; set to "previously pressed"
000182FC 6000                       		bra.s	@animate
000182FE                            ; ===========================================================================
000182FE                            
000182FE                            @unpressed:
000182FE 4228 0036                  		clr.b	jun_reverse(a0)	; set to "not yet pressed"
00018302                            
00018302                            @animate:
00018302 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; decrement frame timer
00018306 6A00                       		bpl.s	@nochange	; if time remains, branch
00018308 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0001830E 1228 0034                  		move.b	jun_frame(a0),d1
00018312 1028 001A                  		move.b	obFrame(a0),d0
00018316 D001                       		add.b	d1,d0
00018318 0200 000F                  		andi.b	#$F,d0
0001831C 1140 001A                  		move.b	d0,obFrame(a0)	; update frame
00018320                            
00018320                            	@nochange:
00018320 4E75                       		rts	
00018322                            ; End of function Jun_ChkSwitch
00018322                            
00018322                            
00018322                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018322                            
00018322                            
00018322                            Jun_ChgPos:
00018322 43F8 D000                  		lea	(v_player).w,a1
00018326 7000                       		moveq	#0,d0
00018328 1028 001A                  		move.b	obFrame(a0),d0
0001832C D040                       		add.w	d0,d0
0001832E 45FB 0000                  		lea	@data(pc,d0.w),a2
00018332 101A                       		move.b	(a2)+,d0
00018334 4880                       		ext.w	d0
00018336 D068 0008                  		add.w	obX(a0),d0
0001833A 3340 0008                  		move.w	d0,obX(a1)
0001833E 101A                       		move.b	(a2)+,d0
00018340 4880                       		ext.w	d0
00018342 D068 000C                  		add.w	obY(a0),d0
00018346 3340 000C                  		move.w	d0,obY(a1)
0001834A 4E75                       		rts	
0001834C                            
0001834C                            
0001834C E000 E20E                  @data:		dc.b -$20,    0, -$1E,   $E ; disc x-pos, Sonic x-pos, disc y-pos, Sonic y-pos
00018350 E818 F21E                  		dc.b -$18,  $18,  -$E,  $1E
00018354 0020 0E1E                  		dc.b    0,  $20,   $E,  $1E
00018358 1818 1E0E                  		dc.b  $18,  $18,  $1E,   $E
0001835C 2000 1EF2                  		dc.b  $20,    0,  $1E,  -$E
00018360 18E8 0EE2                  		dc.b  $18, -$18,   $E, -$1E
00018364 00E0 F2E2                  		dc.b    0, -$20,  -$E, -$1E
00018368 E8E8 E2F2                  		dc.b -$18, -$18, -$1E,  -$E
00018368 E8E8 E2F2                  		dc.b -$18, -$18, -$1E,  -$E
0001836C                            Map_Jun:	include	"_maps\Rotating Junction.asm"
0001836C                            ; ---------------------------------------------------------------------------
0001836C                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
0001836C                            ; ---------------------------------------------------------------------------
0001836C                            Map_Jun_internal:
0001836C 0000                       		dc.w @gap0-Map_Jun_internal
0001836E 0000                       		dc.w @gap1-Map_Jun_internal
00018370 0000                       		dc.w @gap2-Map_Jun_internal
00018372 0000                       		dc.w @gap3-Map_Jun_internal
00018374 0000                       		dc.w @gap4-Map_Jun_internal
00018376 0000                       		dc.w @gap5-Map_Jun_internal
00018378 0000                       		dc.w @gap6-Map_Jun_internal
0001837A 0000                       		dc.w @gap7-Map_Jun_internal
0001837C 0000                       		dc.w @gap8-Map_Jun_internal
0001837E 0000                       		dc.w @gap9-Map_Jun_internal
00018380 0000                       		dc.w @gapA-Map_Jun_internal
00018382 0000                       		dc.w @gapB-Map_Jun_internal
00018384 0000                       		dc.w @gapC-Map_Jun_internal
00018386 0000                       		dc.w @gapD-Map_Jun_internal
00018388 0000                       		dc.w @gapE-Map_Jun_internal
0001838A 0000                       		dc.w @gapF-Map_Jun_internal
0001838C 0000                       		dc.w @circle-Map_Jun_internal
0001838E 06                         @gap0:		dc.b 6
0001838F E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
00018394 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
00018399 E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
0001839E E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
000183A3 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
000183A8 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
000183AD 06                         @gap1:		dc.b 6
000183AE F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
000183B3 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
000183B8 F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
000183BD F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
000183C2 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
000183C7 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
000183CC 06                         @gap2:		dc.b 6
000183CD 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
000183D2 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
000183D7 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
000183DC 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
000183E1 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
000183E6 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
000183EB 06                         @gap3:		dc.b 6
000183EC 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
000183F1 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
000183F6 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
000183FB 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
00018400 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00018405 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
0001840A 06                         @gap4:		dc.b 6
0001840B 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00018410 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00018415 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
0001841A 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
0001841F 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00018424 200A 1800 00               		dc.b $20, $A, $18, 0, 0
00018429 06                         @gap5:		dc.b 6
0001842A 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
0001842F 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00018434 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
00018439 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
0001843E 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00018443 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
00018448 06                         @gap6:		dc.b 6
00018449 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
0001844E 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00018453 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
00018458 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
0001845D 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00018462 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00018467 06                         @gap7:		dc.b 6
00018468 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
0001846D F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
00018472 F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
00018477 F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
0001847C 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
00018481 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
00018486 06                         @gap8:		dc.b 6
00018487 E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
0001848C 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
00018491 E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
00018496 E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
0001849B 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
000184A0 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
000184A5 06                         @gap9:		dc.b 6
000184A6 D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
000184AB E803 1826 28               		dc.b $E8, 3, $18, $26, $28
000184B0 DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
000184B5 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
000184BA F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
000184BF F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
000184C4 06                         @gapA:		dc.b 6
000184C5 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
000184CA E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
000184CF D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
000184D4 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
000184D9 E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
000184DE E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
000184E3 06                         @gapB:		dc.b 6
000184E4 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
000184E9 D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
000184EE CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
000184F3 CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
000184F8 E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
000184FD E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00018502 06                         @gapC:		dc.b 6
00018503 D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
00018508 D005 1845 08               		dc.b $D0, 5, $18, $45, 8
0001850D C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00018512 C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00018517 E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
0001851C E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00018521 06                         @gapD:		dc.b 6
00018522 D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00018527 D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
0001852C CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00018531 CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00018536 E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
0001853B E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
00018540 06                         @gapE:		dc.b 6
00018541 E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00018546 D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
0001854B D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
00018550 D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00018555 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
0001855A E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
0001855F 06                         @gapF:		dc.b 6
00018560 E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00018565 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
0001856A DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
0001856F DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00018574 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
00018579 F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
0001857E 0C                         @circle:	dc.b $C
0001857F C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00018584 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
00018589 E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
0001858E C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00018593 D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
00018598 E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
0001859D 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
000185A2 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
000185A7 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
000185AC 280D 1809 00               		dc.b $28, $D, $18, 9, 0
000185B1 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
000185B6 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
000185BC 00                         		even
000185BC 00                         		even
000185BC                            		include	"_incObj\67 Running Disc.asm"
000185BC                            ; ---------------------------------------------------------------------------
000185BC                            ; Object 67 - disc that	you run	around (SBZ)
000185BC                            ; ---------------------------------------------------------------------------
000185BC                            
000185BC                            RunningDisc:
000185BC 7000                       		moveq	#0,d0
000185BE 1028 0024                  		move.b	obRoutine(a0),d0
000185C2 323B 0000                  		move.w	Disc_Index(pc,d0.w),d1
000185C6 4EFB 1000                  		jmp	Disc_Index(pc,d1.w)
000185CA                            ; ===========================================================================
000185CA 0000                       Disc_Index:	dc.w Disc_Main-Disc_Index
000185CC 0000                       		dc.w Disc_Action-Disc_Index
000185CE                            
000185CE =00000032                  disc_origX:	equ $32		; original x-axis position
000185CE =00000030                  disc_origY:	equ $30		; original y-axis position
000185CE                            ; ===========================================================================
000185CE                            
000185CE                            Disc_Main:	; Routine 0
000185CE 5428 0024                  		addq.b	#2,obRoutine(a0)
000185D2 217C 0000 0000 0004        		move.l	#Map_Disc,obMap(a0)
000185DA 317C C344 0002             		move.w	#$C344,obGfx(a0)
000185E0 117C 0004 0001             		move.b	#4,obRender(a0)
000185E6 317C 0200 0018             		move.w	#$200,obPriority(a0)
000185EC 117C 0008 0014             		move.b	#8,obActWid(a0)
000185F2 3168 0008 0032             		move.w	obX(a0),disc_origX(a0)
000185F8 3168 000C 0030             		move.w	obY(a0),disc_origY(a0)
000185FE 117C 0018 0034             		move.b	#$18,$34(a0)
00018604 117C 0048 0038             		move.b	#$48,$38(a0)
0001860A 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
0001860E 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00018612 6700                       		beq.s	@typeis0	; branch if 0
00018614 117C 0010 0034             		move.b	#$10,$34(a0)
0001861A 117C 0038 0038             		move.b	#$38,$38(a0)
00018620                            
00018620                            	@typeis0:
00018620 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00018624 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00018628 4881                       		ext.w	d1
0001862A E741                       		asl.w	#3,d1
0001862C 3141 0036                  		move.w	d1,$36(a0)
00018630 1028 0022                  		move.b	obStatus(a0),d0
00018634 E418                       		ror.b	#2,d0
00018636 0200 00C0                  		andi.b	#$C0,d0
0001863A 1140 0026                  		move.b	d0,obAngle(a0)
0001863E                            
0001863E                            Disc_Action:	; Routine 2
0001863E 6100 0000                  		bsr.w	Disc_MoveSonic
00018642 6100 0000                  		bsr.w	Disc_MoveSpot
00018646 6000 0000                  		bra.w	Disc_ChkDel
0001864A                            ; ===========================================================================
0001864A                            
0001864A                            Disc_MoveSonic:
0001864A 7400                       		moveq	#0,d2
0001864C 1428 0038                  		move.b	$38(a0),d2
00018650 3602                       		move.w	d2,d3
00018652 D643                       		add.w	d3,d3
00018654 43F8 D000                  		lea	(v_player).w,a1
00018658 3029 0008                  		move.w	obX(a1),d0
0001865C 9068 0032                  		sub.w	disc_origX(a0),d0
00018660 D042                       		add.w	d2,d0
00018662 B043                       		cmp.w	d3,d0
00018664 6400                       		bcc.s	loc_155A8
00018666 3229 000C                  		move.w	obY(a1),d1
0001866A 9268 0030                  		sub.w	disc_origY(a0),d1
0001866E D242                       		add.w	d2,d1
00018670 B243                       		cmp.w	d3,d1
00018672 6400                       		bcc.s	loc_155A8
00018674 0829 0001 0022             		btst	#1,obStatus(a1)
0001867A 6700                       		beq.s	loc_155B8
0001867C 4228 003A                  		clr.b	$3A(a0)
00018680 4E75                       		rts	
00018682                            ; ===========================================================================
00018682                            
00018682                            loc_155A8:
00018682 4A28 003A                  		tst.b	$3A(a0)
00018686 6700                       		beq.s	locret_155B6
00018688 4229 0038                  		clr.b	$38(a1)
0001868C 4228 003A                  		clr.b	$3A(a0)
00018690                            
00018690                            locret_155B6:
00018690 4E75                       		rts	
00018692                            ; ===========================================================================
00018692                            
00018692                            loc_155B8:
00018692 4A28 003A                  		tst.b	$3A(a0)
00018696 6600                       		bne.s	loc_155E2
00018698 117C 0001 003A             		move.b	#1,$3A(a0)
0001869E 0829 0002 0022             		btst	#2,obStatus(a1)
000186A4 6600                       		bne.s	loc_155D0
000186A6 4229 001C                  		clr.b	obAnim(a1)
000186AA                            
000186AA                            loc_155D0:
000186AA 08A9 0005 0022             		bclr	#5,obStatus(a1)
000186B0 137C 0001 001D             		move.b	#1,obNextAni(a1)
000186B6 137C 0001 0038             		move.b	#1,$38(a1)
000186BC                            
000186BC                            loc_155E2:
000186BC 3029 0020                  		move.w	obInertia(a1),d0
000186C0 4A68 0036                  		tst.w	$36(a0)
000186C4 6A00                       		bpl.s	loc_15608
000186C6 0C40 FC00                  		cmpi.w	#-$400,d0
000186CA 6F00                       		ble.s	loc_155FA
000186CC 337C FC00 0020             		move.w	#-$400,obInertia(a1)
000186D2 4E75                       		rts	
000186D4                            ; ===========================================================================
000186D4                            
000186D4                            loc_155FA:
000186D4 0C40 F100                  		cmpi.w	#-$F00,d0
000186D8 6C00                       		bge.s	locret_15606
000186DA 337C F100 0020             		move.w	#-$F00,obInertia(a1)
000186E0                            
000186E0                            locret_15606:
000186E0 4E75                       		rts	
000186E2                            ; ===========================================================================
000186E2                            
000186E2                            loc_15608:
000186E2 0C40 0400                  		cmpi.w	#$400,d0
000186E6 6C00                       		bge.s	loc_15616
000186E8 337C 0400 0020             		move.w	#$400,obInertia(a1)
000186EE 4E75                       		rts	
000186F0                            ; ===========================================================================
000186F0                            
000186F0                            loc_15616:
000186F0 0C40 0F00                  		cmpi.w	#$F00,d0
000186F4 6F00                       		ble.s	locret_15622
000186F6 337C 0F00 0020             		move.w	#$F00,obInertia(a1)
000186FC                            
000186FC                            locret_15622:
000186FC 4E75                       		rts	
000186FE                            ; ===========================================================================
000186FE                            
000186FE                            Disc_MoveSpot:
000186FE 3028 0036                  		move.w	$36(a0),d0
00018702 D168 0026                  		add.w	d0,obAngle(a0)
00018706 1028 0026                  		move.b	obAngle(a0),d0
0001870A 4EB9 0000 3A32             		jsr	(CalcSine).l
00018710 3428 0030                  		move.w	disc_origY(a0),d2
00018714 3628 0032                  		move.w	disc_origX(a0),d3
00018718 7800                       		moveq	#0,d4
0001871A 1828 0034                  		move.b	$34(a0),d4
0001871E E14C                       		lsl.w	#8,d4
00018720 2A04                       		move.l	d4,d5
00018722 C9C0                       		muls.w	d0,d4
00018724 4844                       		swap	d4
00018726 CBC1                       		muls.w	d1,d5
00018728 4845                       		swap	d5
0001872A D842                       		add.w	d2,d4
0001872C DA43                       		add.w	d3,d5
0001872E 3144 000C                  		move.w	d4,obY(a0)
00018732 3145 0008                  		move.w	d5,obX(a0)
00018736 4E75                       		rts	
00018738                            ; ===========================================================================
00018738                            
00018738                            Disc_ChkDel:
00018754 4EF9 0000 F978             		jmp	(DisplaySprite).l
0001875A                            
0001875A                            	@delete:
0001875A 4EF9 0000 F9B8             		jmp	(DeleteObject).l
0001875A 4EF9 0000 F9B8             		jmp	(DeleteObject).l
00018760                            Map_Disc:	include	"_maps\Running Disc.asm"
00018760                            ; ---------------------------------------------------------------------------
00018760                            ; Sprite mappings - disc that you run around (SBZ)
00018760                            ; (It's just a small blob that moves around in a circle. The disc itself is
00018760                            ; part of the level tiles.)
00018760                            ; ---------------------------------------------------------------------------
00018760                            Map_Disc_internal:
00018760 0000                       		dc.w @spot-Map_Disc_internal
00018762 01                         @spot:		dc.b 1
00018763 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00018768                            		even
00018768                            		even
00018768                            		include	"_incObj\68 Conveyor Belt.asm"
00018768                            ; ---------------------------------------------------------------------------
00018768                            ; Object 68 - conveyor belts (SBZ)
00018768                            ; ---------------------------------------------------------------------------
00018768                            
00018768                            Conveyor:
00018768 7000                       		moveq	#0,d0
0001876A 1028 0024                  		move.b	obRoutine(a0),d0
0001876E 323B 0000                  		move.w	Conv_Index(pc,d0.w),d1
00018772 4EFB 1000                  		jmp	Conv_Index(pc,d1.w)
00018776                            ; ===========================================================================
00018776 0000                       Conv_Index:	dc.w Conv_Main-Conv_Index
00018778 0000                       		dc.w Conv_Action-Conv_Index
0001877A                            
0001877A =00000036                  conv_speed:	equ $36
0001877A =00000038                  conv_width:	equ $38
0001877A                            ; ===========================================================================
0001877A                            
0001877A                            Conv_Main:	; Routine 0
0001877A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001877E 117C 0080 0038             		move.b	#128,conv_width(a0) ; set width to 128 pixels
00018784 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00018788 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
0001878C 6700                       		beq.s	@typeis0	; if zero, branch
0001878E 117C 0038 0038             		move.b	#56,conv_width(a0) ; set width to 56 pixels
00018794                            
00018794                            	@typeis0:
00018794 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00018798 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
0001879C 4881                       		ext.w	d1
0001879E E841                       		asr.w	#4,d1
000187A0 3141 0036                  		move.w	d1,conv_speed(a0) ; set belt speed
000187A4                            
000187A4                            Conv_Action:	; Routine 2
000187A4 6100                       		bsr.s	@movesonic
000187C2 4E75                       		rts	
000187C4                            
000187C4                            	@delete:
000187C4 4EF9 0000 F9B8             		jmp	(DeleteObject).l
000187CA                            ; ===========================================================================
000187CA                            
000187CA                            @movesonic:
000187CA 7400                       		moveq	#0,d2
000187CC 1428 0038                  		move.b	conv_width(a0),d2
000187D0 3602                       		move.w	d2,d3
000187D2 D643                       		add.w	d3,d3
000187D4 43F8 D000                  		lea	(v_player).w,a1
000187D8 3029 0008                  		move.w	obX(a1),d0
000187DC 9068 0008                  		sub.w	obX(a0),d0
000187E0 D042                       		add.w	d2,d0
000187E2 B043                       		cmp.w	d3,d0
000187E4 6400                       		bcc.s	@notonconveyor
000187E6 3229 000C                  		move.w	obY(a1),d1
000187EA 9268 000C                  		sub.w	obY(a0),d1
000187EE 0641 0030                  		addi.w	#$30,d1
000187F2 0C41 0030                  		cmpi.w	#$30,d1
000187F6 6400                       		bcc.s	@notonconveyor
000187F8 0829 0001 0022             		btst	#1,obStatus(a1)
000187FE 6600                       		bne.s	@notonconveyor
00018800 3028 0036                  		move.w	conv_speed(a0),d0
00018804 D169 0008                  		add.w	d0,obX(a1)
00018808                            
00018808                            	@notonconveyor:
00018808 4E75                       		rts	
00018808 4E75                       		rts	
0001880A                            		include	"_incObj\69 SBZ Spinning Platforms.asm"
0001880A                            ; ---------------------------------------------------------------------------
0001880A                            ; Object 69 - spinning platforms and trapdoors (SBZ)
0001880A                            ; ---------------------------------------------------------------------------
0001880A                            
0001880A                            SpinPlatform:
0001880A 7000                       		moveq	#0,d0
0001880C 1028 0024                  		move.b	obRoutine(a0),d0
00018810 323B 0000                  		move.w	Spin_Index(pc,d0.w),d1
00018814 4EFB 1000                  		jmp	Spin_Index(pc,d1.w)
00018818                            ; ===========================================================================
00018818 0000                       Spin_Index:	dc.w Spin_Main-Spin_Index
0001881A 0000                       		dc.w Spin_Trapdoor-Spin_Index
0001881C 0000                       		dc.w Spin_Spinner-Spin_Index
0001881E                            
0001881E =00000030                  spin_timer:	equ $30		; time counter until change
0001881E =00000032                  spin_timelen:	equ $32		; time between changes (general)
0001881E                            ; ===========================================================================
0001881E                            
0001881E                            Spin_Main:	; Routine 0
0001881E 5428 0024                  		addq.b	#2,obRoutine(a0)
00018822 217C 0000 0000 0004        		move.l	#Map_Trap,obMap(a0)
0001882A 317C 4492 0002             		move.w	#$4492,obGfx(a0)
00018830 0028 0004 0001             		ori.b	#4,obRender(a0)
00018836 117C 0080 0014             		move.b	#$80,obActWid(a0)
0001883C 7000                       		moveq	#0,d0
0001883E 1028 0028                  		move.b	obSubtype(a0),d0
00018842 0240 000F                  		andi.w	#$F,d0
00018846 C0FC 003C                  		mulu.w	#$3C,d0
0001884A 3140 0032                  		move.w	d0,spin_timelen(a0)
0001884E 4A28 0028                  		tst.b	obSubtype(a0)	; is subtype $8x?
00018852 6A00                       		bpl.s	Spin_Trapdoor	; if not, branch
00018854                            
00018854 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Spin_Spinner next
00018858 217C 0000 0000 0004        		move.l	#Map_Spin,obMap(a0)
00018860 317C 04DF 0002             		move.w	#$4DF,obGfx(a0)
00018866 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001886C 117C 0002 001C             		move.b	#2,obAnim(a0)
00018872 7000                       		moveq	#0,d0
00018874 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00018878 3200                       		move.w	d0,d1
0001887A 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001887E C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
00018882 3140 0030                  		move.w	d0,spin_timer(a0)
00018886 3140 0032                  		move.w	d0,spin_timelen(a0) ; set time delay
0001888A 0241 0070                  		andi.w	#$70,d1
0001888E 0641 0010                  		addi.w	#$10,d1
00018892 E549                       		lsl.w	#2,d1
00018894 5341                       		subq.w	#1,d1
00018896 3141 0036                  		move.w	d1,$36(a0)
0001889A 6000                       		bra.s	Spin_Spinner
0001889C                            ; ===========================================================================
0001889C                            
0001889C                            Spin_Trapdoor:	; Routine 2
0001889C 5368 0030                  		subq.w	#1,spin_timer(a0) ; decrement timer
000188A0 6A00                       		bpl.s	@animate	; if time remains, branch
000188A2                            
000188A2 3168 0032 0030             		move.w	spin_timelen(a0),spin_timer(a0)
000188A8 0868 0000 001C             		bchg	#0,obAnim(a0)
000188AE 4A28 0001                  		tst.b	obRender(a0)
000188B2 6A00                       		bpl.s	@animate
000188BE                            
000188BE                            	@animate:
000188BE 43F9 0000 0000             		lea	(Ani_Spin).l,a1
000188C4 4EB9 0000 CA24             		jsr	(AnimateSprite).l
000188CA 4A28 001A                  		tst.b	obFrame(a0)	; is frame number 0 displayed?
000188CE 6600                       		bne.s	@notsolid	; if not, branch
000188D0 323C 004B                  		move.w	#$4B,d1
000188D4 343C 000C                  		move.w	#$C,d2
000188D8 3602                       		move.w	d2,d3
000188DA 5243                       		addq.w	#1,d3
000188DC 3828 0008                  		move.w	obX(a0),d4
000188E0 6100 94A4                  		bsr.w	SolidObject
000188E4 6000 9008                  		bra.w	RememberState
000188E8                            ; ===========================================================================
000188E8                            
000188E8                            @notsolid:
000188E8 0828 0003 0022             		btst	#3,obStatus(a0) ; is Sonic standing on the trapdoor?
000188EE 6700                       		beq.s	@display	; if not, branch
000188F0 43F8 D000                  		lea	(v_player).w,a1
000188F4 08A9 0003 0022             		bclr	#3,obStatus(a1)
000188FA 08A8 0003 0022             		bclr	#3,obStatus(a0)
00018900 4228 0025                  		clr.b	obSolid(a0)
00018904                            
00018904                            	@display:
00018904 6000 8FE8                  		bra.w	RememberState
00018908                            ; ===========================================================================
00018908                            
00018908                            Spin_Spinner:	; Routine 4
00018908 3038 FE04                  		move.w	(v_framecount).w,d0
0001890C C068 0036                  		and.w	$36(a0),d0
00018910 6600                       		bne.s	@delay
00018912 117C 0001 0034             		move.b	#1,$34(a0)
00018918                            
00018918                            	@delay:
00018918 4A28 0034                  		tst.b	$34(a0)
0001891C 6700                       		beq.s	@animate
0001891E 5368 0030                  		subq.w	#1,spin_timer(a0)
00018922 6A00                       		bpl.s	@animate
00018924 3168 0032 0030             		move.w	spin_timelen(a0),spin_timer(a0)
0001892A 4228 0034                  		clr.b	$34(a0)
0001892E 0868 0000 001C             		bchg	#0,obAnim(a0)
00018934                            
00018934                            	@animate:
00018934 43F9 0000 0000             		lea	(Ani_Spin).l,a1
0001893A 4EB9 0000 CA24             		jsr	(AnimateSprite).l
00018940 4A28 001A                  		tst.b	obFrame(a0)	; check	if frame number	0 is displayed
00018944 6600                       		bne.s	@notsolid2	; if not, branch
00018946 323C 001B                  		move.w	#$1B,d1
0001894A 343C 0007                  		move.w	#7,d2
0001894E 3602                       		move.w	d2,d3
00018950 5243                       		addq.w	#1,d3
00018952 3828 0008                  		move.w	obX(a0),d4
00018956 6100 942E                  		bsr.w	SolidObject
0001895A 6000 8F92                  		bra.w	RememberState
0001895E                            ; ===========================================================================
0001895E                            
0001895E                            @notsolid2:
0001895E 0828 0003 0022             		btst	#3,obStatus(a0)
00018964 6700                       		beq.s	@display
00018966 43F8 D000                  		lea	(v_player).w,a1
0001896A 08A9 0003 0022             		bclr	#3,obStatus(a1)
00018970 08A8 0003 0022             		bclr	#3,obStatus(a0)
00018976 4228 0025                  		clr.b	obSolid(a0)
0001897A                            
0001897A                            	@display:
0001897A 6000 8F72                  		bra.w	RememberState
0001897A 6000 8F72                  		bra.w	RememberState
0001897E                            		include	"_anim\SBZ Spinning Platforms.asm"
0001897E                            ; ---------------------------------------------------------------------------
0001897E                            ; Animation script - trapdoor (SBZ)
0001897E                            ; ---------------------------------------------------------------------------
0001897E 0000                       Ani_Spin:	dc.w @trapopen-Ani_Spin
00018980 0000                       		dc.w @trapclose-Ani_Spin
00018982 0000                       		dc.w @spin1-Ani_Spin
00018984 0000                       		dc.w @spin2-Ani_Spin
00018986 0300 0102 FE01             @trapopen:	dc.b 3,	0, 1, 2, afBack, 1
0001898C 0302 0100 FE01             @trapclose:	dc.b 3,	2, 1, 0, afBack, 1
00018992 0100 0102 0304 4342 4140+  @spin1:		dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63, $64, $23, $22, $21, 0, afBack, 1
000189A6 0100 0102 0304 4342 4140+  @spin2:		dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63, $64, $23, $22, $21, 0, afBack, 1
000189BA                            		even
000189BA                            		even
000189BA                            Map_Trap:	include	"_maps\Trapdoor.asm"
000189BA                            ; ---------------------------------------------------------------------------
000189BA                            ; Sprite mappings - trapdoor (SBZ)
000189BA                            ; ---------------------------------------------------------------------------
000189BA                            Map_Trap_internal:
000189BA 0000                       		dc.w @closed-Map_Trap_internal
000189BC 0000                       		dc.w @half-Map_Trap_internal
000189BE 0000                       		dc.w @open-Map_Trap_internal
000189C0 04                         @closed:	dc.b 4
000189C1 F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
000189C6 F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
000189CB F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
000189D0 F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
000189D5 08                         @half:		dc.b 8
000189D6 F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
000189DB 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
000189E0 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
000189E5 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
000189EA F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
000189EF 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
000189F4 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
000189F9 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
000189FE 04                         @open:		dc.b 4
000189FF 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
00018A04 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
00018A09 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
00018A0E 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
00018A14 00                         		even
00018A14 00                         		even
00018A14                            Map_Spin:	include	"_maps\SBZ Spinning Platforms.asm"
00018A14                            ; ---------------------------------------------------------------------------
00018A14                            ; Sprite mappings - spinning platforms (SBZ)
00018A14                            ; ---------------------------------------------------------------------------
00018A14                            Map_Spin_internal:
00018A14 0000                       		dc.w @flat-Map_Spin_internal
00018A16 0000                       		dc.w @spin1-Map_Spin_internal
00018A18 0000                       		dc.w @spin2-Map_Spin_internal
00018A1A 0000                       		dc.w @spin3-Map_Spin_internal
00018A1C 0000                       		dc.w @spin4-Map_Spin_internal
00018A1E 02                         @flat:		dc.b 2
00018A1F F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00018A24 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
00018A29 02                         @spin1:		dc.b 2
00018A2A F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
00018A2F 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
00018A34 02                         @spin2:		dc.b 2
00018A35 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
00018A3A 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
00018A3F 02                         @spin3:		dc.b 2
00018A40 F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
00018A45 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
00018A4A 02                         @spin4:		dc.b 2
00018A4B F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
00018A50 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
00018A56 00                         		even
00018A56 00                         		even
00018A56                            		include	"_incObj\6A Saws and Pizza Cutters.asm"
00018A56                            ; ---------------------------------------------------------------------------
00018A56                            ; Object 6A - ground saws and pizza cutters (SBZ)
00018A56                            ; ---------------------------------------------------------------------------
00018A56                            
00018A56                            Saws:
00018A56 7000                       		moveq	#0,d0
00018A58 1028 0024                  		move.b	obRoutine(a0),d0
00018A5C 323B 0000                  		move.w	Saw_Index(pc,d0.w),d1
00018A60 4EFB 1000                  		jmp	Saw_Index(pc,d1.w)
00018A64                            ; ===========================================================================
00018A64 0000                       Saw_Index:	dc.w Saw_Main-Saw_Index
00018A66 0000                       		dc.w Saw_Action-Saw_Index
00018A68                            
00018A68 =0000003A                  saw_origX:	equ $3A		; original x-axis position
00018A68 =00000038                  saw_origY:	equ $38		; original y-axis position
00018A68 =0000003D                  saw_here:	equ $3D		; flag set when the ground saw appears
00018A68                            ; ===========================================================================
00018A68                            
00018A68                            Saw_Main:	; Routine 0
00018A68 5428 0024                  		addq.b	#2,obRoutine(a0)
00018A6C 217C 0000 0000 0004        		move.l	#Map_Saw,obMap(a0)
00018A74 317C 43AD 0002             		move.w	#$43AD,obGfx(a0)
00018A7A 117C 0004 0001             		move.b	#4,obRender(a0)
00018A80 317C 0200 0018             		move.w	#$200,obPriority(a0)
00018A86 117C 0020 0014             		move.b	#$20,obActWid(a0)
00018A8C 3168 0008 003A             		move.w	obX(a0),saw_origX(a0)
00018A92 3168 000C 0038             		move.w	obY(a0),saw_origY(a0)
00018A98 0C28 0003 0028             		cmpi.b	#3,obSubtype(a0) ; is object a ground saw?
00018A9E 6400                       		bcc.s	Saw_Action	; if yes, branch
00018AA0 117C 00A2 0020             		move.b	#$A2,obColType(a0)
00018AA6                            
00018AA6                            Saw_Action:	; Routine 2
00018AA6 7000                       		moveq	#0,d0
00018AA8 1028 0028                  		move.b	obSubtype(a0),d0
00018AAC 0240 0007                  		andi.w	#7,d0
00018AB0 D040                       		add.w	d0,d0
00018AB2 323B 0000                  		move.w	@index(pc,d0.w),d1
00018AB6 4EBB 1000                  		jsr	@index(pc,d1.w)
00018AD6 4EF9 0000 F978             		jmp	(DisplaySprite).l
00018ADC                            
00018ADC                            	@delete:
00018ADC 4EF9 0000 F9B8             		jmp	(DeleteObject).l
00018AE2                            ; ===========================================================================
00018AE2 0000 0000 0000             @index:		dc.w @type00-@index, @type01-@index, @type02-@index ; pizza cutters
00018AE8 0000 0000                  		dc.w @type03-@index, @type04-@index ; ground saws
00018AEC                            ; ===========================================================================
00018AEC                            
00018AEC                            @type00:
00018AEC 4E75                       		rts			; doesn't move
00018AEE                            ; ===========================================================================
00018AEE                            
00018AEE                            @type01:
00018AEE 323C 0060                  		move.w	#$60,d1
00018AF2 7000                       		moveq	#0,d0
00018AF4 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
00018AF8 0828 0000 0022             		btst	#0,obStatus(a0)
00018AFE 6700                       		beq.s	@noflip01
00018B00 4440                       		neg.w	d0
00018B02 D041                       		add.w	d1,d0
00018B04                            
00018B04                            	@noflip01:
00018B04 3228 003A                  		move.w	saw_origX(a0),d1
00018B08 9240                       		sub.w	d0,d1
00018B0A 3141 0008                  		move.w	d1,obX(a0)	; move saw sideways
00018B0E                            
00018B0E 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00018B12 6A00                       		bpl.s	@sameframe01
00018B14 117C 0002 001E             		move.b	#2,obTimeFrame(a0) ; time between frame changes
00018B1A 0868 0000 001A             		bchg	#0,obFrame(a0)	; change frame
00018B20                            
00018B20                            	@sameframe01:
00018B20 4A28 0001                  		tst.b	obRender(a0)
00018B24 6A00                       		bpl.s	@nosound01
00018B26 3038 FE04                  		move.w	(v_framecount).w,d0
00018B2A 0240 000F                  		andi.w	#$F,d0
00018B2E 6600                       		bne.s	@nosound01
00018B3A                            
00018B3A                            	@nosound01:
00018B3A 4E75                       		rts	
00018B3C                            ; ===========================================================================
00018B3C                            
00018B3C                            @type02:
00018B3C 323C 0030                  		move.w	#$30,d1
00018B40 7000                       		moveq	#0,d0
00018B42 1038 FE64                  		move.b	(v_oscillate+6).w,d0
00018B46 0828 0000 0022             		btst	#0,obStatus(a0)
00018B4C 6700                       		beq.s	@noflip02
00018B4E 4440                       		neg.w	d0
00018B50 0640 0080                  		addi.w	#$80,d0
00018B54                            
00018B54                            	@noflip02:
00018B54 3228 0038                  		move.w	saw_origY(a0),d1
00018B58 9240                       		sub.w	d0,d1
00018B5A 3141 000C                  		move.w	d1,obY(a0)	; move saw vertically
00018B5E 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00018B62 6A00                       		bpl.s	@sameframe02
00018B64 117C 0002 001E             		move.b	#2,obTimeFrame(a0)
00018B6A 0868 0000 001A             		bchg	#0,obFrame(a0)
00018B70                            
00018B70                            	@sameframe02:
00018B70 4A28 0001                  		tst.b	obRender(a0)
00018B74 6A00                       		bpl.s	@nosound02
00018B76 1038 FE64                  		move.b	(v_oscillate+6).w,d0
00018B7A 0C00 0018                  		cmpi.b	#$18,d0
00018B7E 6600                       		bne.s	@nosound02
00018B8A                            
00018B8A                            	@nosound02:
00018B8A 4E75                       		rts	
00018B8C                            ; ===========================================================================
00018B8C                            
00018B8C                            @type03:
00018B8C 4A28 003D                  		tst.b	saw_here(a0)	; has the saw appeared already?
00018B90 6600                       		bne.s	@here03		; if yes, branch
00018B92                            
00018B92 3038 D008                  		move.w	(v_player+obX).w,d0
00018B96 0440 00C0                  		subi.w	#$C0,d0
00018B9A 6500                       		bcs.s	@nosaw03x
00018B9C 9068 0008                  		sub.w	obX(a0),d0
00018BA0 6500                       		bcs.s	@nosaw03x
00018BA2 3038 D00C                  		move.w	(v_player+obY).w,d0
00018BA6 0440 0080                  		subi.w	#$80,d0
00018BAA B068 000C                  		cmp.w	obY(a0),d0
00018BAE 6400                       		bcc.s	@nosaw03y
00018BB0 0640 0100                  		addi.w	#$100,d0
00018BB4 B068 000C                  		cmp.w	obY(a0),d0
00018BB8 6500                       		bcs.s	@nosaw03y
00018BBA 117C 0001 003D             		move.b	#1,saw_here(a0)
00018BC0 317C 0600 0010             		move.w	#$600,obVelX(a0) ; move object to the right
00018BC6 117C 00A2 0020             		move.b	#$A2,obColType(a0)
00018BCC 117C 0002 001A             		move.b	#2,obFrame(a0)
00018BDC                            
00018BDC                            	@nosaw03x:
00018BDC 588F                       		addq.l	#4,sp
00018BDE                            
00018BDE                            	@nosaw03y:
00018BDE 4E75                       		rts	
00018BE0                            ; ===========================================================================
00018BE0                            
00018BE0                            @here03:
00018BE0 4EB9 0000 F964             		jsr	(SpeedToPos).l
00018BE6 3168 0008 003A             		move.w	obX(a0),saw_origX(a0)
00018BEC 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00018BF0 6A00                       		bpl.s	@sameframe03
00018BF2 117C 0002 001E             		move.b	#2,obTimeFrame(a0)
00018BF8 0868 0000 001A             		bchg	#0,obFrame(a0)
00018BFE                            
00018BFE                            	@sameframe03:
00018BFE 4E75                       		rts	
00018C00                            ; ===========================================================================
00018C00                            
00018C00                            @type04:
00018C00 4A28 003D                  		tst.b	saw_here(a0)
00018C04 6600                       		bne.s	@here04
00018C06 3038 D008                  		move.w	(v_player+obX).w,d0
00018C0A 0640 00E0                  		addi.w	#$E0,d0
00018C0E 9068 0008                  		sub.w	obX(a0),d0
00018C12 6400                       		bcc.s	@nosaw04x
00018C14 3038 D00C                  		move.w	(v_player+obY).w,d0
00018C18 0440 0080                  		subi.w	#$80,d0
00018C1C B068 000C                  		cmp.w	obY(a0),d0
00018C20 6400                       		bcc.s	@nosaw04y
00018C22 0640 0100                  		addi.w	#$100,d0
00018C26 B068 000C                  		cmp.w	obY(a0),d0
00018C2A 6500                       		bcs.s	@nosaw04y
00018C2C 117C 0001 003D             		move.b	#1,saw_here(a0)
00018C32 317C FA00 0010             		move.w	#-$600,obVelX(a0) ; move object to the left
00018C38 117C 00A2 0020             		move.b	#$A2,obColType(a0)
00018C3E 117C 0002 001A             		move.b	#2,obFrame(a0)
00018C4E                            
00018C4E                            	@nosaw04x:
00018C4E 588F                       		addq.l	#4,sp
00018C50                            
00018C50                            	@nosaw04y:
00018C50 4E75                       		rts	
00018C52                            ; ===========================================================================
00018C52                            
00018C52                            @here04:
00018C52 4EB9 0000 F964             		jsr	(SpeedToPos).l
00018C58 3168 0008 003A             		move.w	obX(a0),saw_origX(a0)
00018C5E 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00018C62 6A00                       		bpl.s	@sameframe04
00018C64 117C 0002 001E             		move.b	#2,obTimeFrame(a0)
00018C6A 0868 0000 001A             		bchg	#0,obFrame(a0)
00018C70                            
00018C70                            	@sameframe04:
00018C70 4E75                       		rts	
00018C70 4E75                       		rts	
00018C72                            Map_Saw:	include	"_maps\Saws and Pizza Cutters.asm"
00018C72                            ; ---------------------------------------------------------------------------
00018C72                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00018C72                            ; ---------------------------------------------------------------------------
00018C72                            Map_Saw_internal:
00018C72 0000                       		dc.w @pizzacutter1-Map_Saw_internal
00018C74 0000                       		dc.w @pizzacutter2-Map_Saw_internal
00018C76 0000                       		dc.w @groundsaw1-Map_Saw_internal
00018C78 0000                       		dc.w @groundsaw2-Map_Saw_internal
00018C7A 07                         @pizzacutter1:	dc.b 7
00018C7B C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00018C80 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00018C85 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00018C8A E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00018C8F E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00018C94 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00018C99 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00018C9E 07                         @pizzacutter2:	dc.b 7
00018C9F C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00018CA4 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00018CA9 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00018CAE E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00018CB3 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00018CB8 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00018CBD 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00018CC2 04                         @groundsaw1:	dc.b 4
00018CC3 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00018CC8 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00018CCD 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00018CD2 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00018CD7 04                         @groundsaw2:	dc.b 4
00018CD8 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00018CDD E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00018CE2 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00018CE7 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00018CEC                            		even
00018CEC                            		even
00018CEC                            		include	"_incObj\6B SBZ Stomper and Door.asm"
00018CEC                            ; ---------------------------------------------------------------------------
00018CEC                            ; Object 6B - stomper and sliding door (SBZ)
00018CEC                            ; ---------------------------------------------------------------------------
00018CEC                            
00018CEC                            ScrapStomp:
00018CEC 7000                       		moveq	#0,d0
00018CEE 1028 0024                  		move.b	obRoutine(a0),d0
00018CF2 323B 0000                  		move.w	Sto_Index(pc,d0.w),d1
00018CF6 4EFB 1000                  		jmp	Sto_Index(pc,d1.w)
00018CFA                            ; ===========================================================================
00018CFA 0000                       Sto_Index:	dc.w Sto_Main-Sto_Index
00018CFC 0000                       		dc.w Sto_Action-Sto_Index
00018CFE                            
00018CFE =00000016                  sto_height:	equ $16
00018CFE =00000034                  sto_origX:	equ $34		; original x-axis position
00018CFE =00000030                  sto_origY:	equ $30		; original y-axis position
00018CFE =00000038                  sto_active:	equ $38		; flag set when a switch is pressed
00018CFE                            
00018CFE 400C 8001                  Sto_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
00018D02 1C20 3803                  		dc.b  $1C, $20,	$38,   3
00018D06 1C20 4004                  		dc.b  $1C, $20,	$40,   4
00018D0A 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00018D0E 8040 0005                  		dc.b  $80, $40,	  0,   5
00018D12                            ; ===========================================================================
00018D12                            
00018D12                            Sto_Main:	; Routine 0
00018D12 5428 0024                  		addq.b	#2,obRoutine(a0)
00018D16 7000                       		moveq	#0,d0
00018D18 1028 0028                  		move.b	obSubtype(a0),d0
00018D1C E448                       		lsr.w	#2,d0
00018D1E 0240 001C                  		andi.w	#$1C,d0
00018D22 47FB 00DA                  		lea	Sto_Var(pc,d0.w),a3
00018D26 115B 0014                  		move.b	(a3)+,obActWid(a0)
00018D2A 115B 0016                  		move.b	(a3)+,sto_height(a0)
00018D2E E448                       		lsr.w	#2,d0
00018D30 1140 001A                  		move.b	d0,obFrame(a0)
00018D34 217C 0000 0000 0004        		move.l	#Map_Stomp,obMap(a0)
00018D3C 317C 22C0 0002             		move.w	#$22C0,obGfx(a0)
00018D42 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ/SBZ3
00018D48 6600                       		bne.s	@isSBZ12	; if not, branch
00018D4A 08F8 0000 F7CB             		bset	#0,(v_obj6B).w
00018D50 6700                       		beq.s	@isSBZ3
00018D52                            
00018D52                            @chkdel:
00018D52 45F8 FC00                  		lea	(v_objstate).w,a2
00018D56 7000                       		moveq	#0,d0
00018D58 1028 0023                  		move.b	obRespawnNo(a0),d0
00018D5C 6700                       		beq.s	@delete
00018D5E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00018D64                            
00018D64                            	@delete:
00018D64 4EF9 0000 F9B8             		jmp	(DeleteObject).l
00018D6A                            ; ===========================================================================
00018D6A                            
00018D6A                            @isSBZ3:
00018D6A 317C 41F0 0002             		move.w	#$41F0,obGfx(a0)
00018D70 0C68 0A80 0008             		cmpi.w	#$A80,obX(a0)
00018D76 6600                       		bne.s	@isSBZ12
00018D78 45F8 FC00                  		lea	(v_objstate).w,a2
00018D7C 7000                       		moveq	#0,d0
00018D7E 1028 0023                  		move.b	obRespawnNo(a0),d0
00018D82 6700                       		beq.s	@isSBZ12
00018D84 0832 0000 0002             		btst	#0,2(a2,d0.w)
00018D8A 6700                       		beq.s	@isSBZ12
00018D8C 4238 F7CB                  		clr.b	(v_obj6B).w
00018D90 60C0                       		bra.s	@chkdel
00018D92                            ; ===========================================================================
00018D92                            
00018D92                            @isSBZ12:
00018D92 0028 0004 0001             		ori.b	#4,obRender(a0)
00018D98 317C 0200 0018             		move.w	#$200,obPriority(a0)
00018D9E 3168 0008 0034             		move.w	obX(a0),sto_origX(a0)
00018DA4 3168 000C 0030             		move.w	obY(a0),sto_origY(a0)
00018DAA 7000                       		moveq	#0,d0
00018DAC 101B                       		move.b	(a3)+,d0
00018DAE 3140 003C                  		move.w	d0,$3C(a0)
00018DB2 7000                       		moveq	#0,d0
00018DB4 1028 0028                  		move.b	obSubtype(a0),d0
00018DB8 6A00                       		bpl.s	Sto_Action
00018DBA 0200 000F                  		andi.b	#$F,d0
00018DBE 1140 003E                  		move.b	d0,$3E(a0)
00018DC2 1153 0028                  		move.b	(a3),obSubtype(a0)
00018DC6 0C13 0005                  		cmpi.b	#5,(a3)
00018DCA 6600                       		bne.s	@chkgone
00018DCC 08E8 0004 0001             		bset	#4,obRender(a0)
00018DD2                            
00018DD2                            	@chkgone:
00018DD2 45F8 FC00                  		lea	(v_objstate).w,a2
00018DD6 7000                       		moveq	#0,d0
00018DD8 1028 0023                  		move.b	obRespawnNo(a0),d0
00018DDC 6700                       		beq.s	Sto_Action
00018DDE 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00018DE4                            
00018DE4                            Sto_Action:	; Routine 2
00018DE4 3F28 0008                  		move.w	obX(a0),-(sp)
00018DE8 7000                       		moveq	#0,d0
00018DEA 1028 0028                  		move.b	obSubtype(a0),d0
00018DEE 0240 000F                  		andi.w	#$F,d0
00018DF2 D040                       		add.w	d0,d0
00018DF4 323B 0000                  		move.w	@index(pc,d0.w),d1
00018DF8 4EBB 1000                  		jsr	@index(pc,d1.w)
00018DFC 381F                       		move.w	(sp)+,d4
00018DFE 4A28 0001                  		tst.b	obRender(a0)
00018E02 6A00                       		bpl.s	@chkdel
00018E04 7200                       		moveq	#0,d1
00018E06 1228 0014                  		move.b	obActWid(a0),d1
00018E0A 0641 000B                  		addi.w	#$B,d1
00018E0E 7400                       		moveq	#0,d2
00018E10 1428 0016                  		move.b	sto_height(a0),d2
00018E14 3602                       		move.w	d2,d3
00018E16 5243                       		addq.w	#1,d3
00018E18 6100 8F6C                  		bsr.w	SolidObject
00018E1C                            
00018E1C                            	@chkdel:
00018E38 4EF9 0000 F978             		jmp	(DisplaySprite).l
00018E3E                            
00018E3E                            	@chkgone:
00018E3E 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w
00018E44 6600                       		bne.s	@delete
00018E46 4238 F7CB                  		clr.b	(v_obj6B).w
00018E4A 45F8 FC00                  		lea	(v_objstate).w,a2
00018E4E 7000                       		moveq	#0,d0
00018E50 1028 0023                  		move.b	obRespawnNo(a0),d0
00018E54 6700                       		beq.s	@delete
00018E56 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00018E5C                            
00018E5C                            	@delete:
00018E5C 4EF9 0000 F9B8             		jmp	(DeleteObject).l
00018E62                            ; ===========================================================================
00018E62 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00018E66 0000 0000                  		dc.w @type02-@index, @type03-@index
00018E6A 0000 0000                  		dc.w @type04-@index, @type05-@index
00018E6E                            ; ===========================================================================
00018E6E                            
00018E6E                            @type00:
00018E6E 4E75                       		rts
00018E70                            ; ===========================================================================
00018E70                            
00018E70                            @type01:
00018E70 4A28 0038                  		tst.b	sto_active(a0)
00018E74 6600                       		bne.s	@isactive01
00018E76 45F8 F7E0                  		lea	(f_switch).w,a2
00018E7A 7000                       		moveq	#0,d0
00018E7C 1028 003E                  		move.b	$3E(a0),d0
00018E80 0832 0000 0000             		btst	#0,(a2,d0.w)
00018E86 6700                       		beq.s	@loc_15DC2
00018E88 117C 0001 0038             		move.b	#1,sto_active(a0)
00018E8E                            
00018E8E                            	@isactive01:
00018E8E 3028 003C                  		move.w	$3C(a0),d0
00018E92 B068 003A                  		cmp.w	$3A(a0),d0
00018E96 6700                       		beq.s	@loc_15DE0
00018E98 5468 003A                  		addq.w	#2,$3A(a0)
00018E9C                            
00018E9C                            	@loc_15DC2:
00018E9C 3028 003A                  		move.w	$3A(a0),d0
00018EA0 0828 0000 0022             		btst	#0,obStatus(a0)
00018EA6 6700                       		beq.s	@noflip01
00018EA8 4440                       		neg.w	d0
00018EAA 0640 0080                  		addi.w	#$80,d0
00018EAE                            
00018EAE                            	@noflip01:
00018EAE 3228 0034                  		move.w	sto_origX(a0),d1
00018EB2 9240                       		sub.w	d0,d1
00018EB4 3141 0008                  		move.w	d1,obX(a0)
00018EB8 4E75                       		rts	
00018EBA                            ; ===========================================================================
00018EBA                            
00018EBA                            @loc_15DE0:
00018EBA 5228 0028                  		addq.b	#1,obSubtype(a0)
00018EBE 317C 00B4 0036             		move.w	#$B4,$36(a0)
00018EC4 4228 0038                  		clr.b	sto_active(a0)
00018EC8 45F8 FC00                  		lea	(v_objstate).w,a2
00018ECC 7000                       		moveq	#0,d0
00018ECE 1028 0023                  		move.b	obRespawnNo(a0),d0
00018ED2 67C8                       		beq.s	@loc_15DC2
00018ED4 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00018EDA 60C0                       		bra.s	@loc_15DC2
00018EDC                            ; ===========================================================================
00018EDC                            
00018EDC                            @type02:
00018EDC 4A28 0038                  		tst.b	sto_active(a0)
00018EE0 6600                       		bne.s	@isactive02
00018EE2 5368 0036                  		subq.w	#1,$36(a0)
00018EE6 6600                       		bne.s	@loc_15E1E
00018EE8 117C 0001 0038             		move.b	#1,sto_active(a0)
00018EEE                            
00018EEE                            	@isactive02:
00018EEE 4A68 003A                  		tst.w	$3A(a0)
00018EF2 6700                       		beq.s	@loc_15E3C
00018EF4 5568 003A                  		subq.w	#2,$3A(a0)
00018EF8                            
00018EF8                            	@loc_15E1E:
00018EF8 3028 003A                  		move.w	$3A(a0),d0
00018EFC 0828 0000 0022             		btst	#0,obStatus(a0)
00018F02 6700                       		beq.s	@noflip02
00018F04 4440                       		neg.w	d0
00018F06 0640 0080                  		addi.w	#$80,d0
00018F0A                            
00018F0A                            	@noflip02:
00018F0A 3228 0034                  		move.w	sto_origX(a0),d1
00018F0E 9240                       		sub.w	d0,d1
00018F10 3141 0008                  		move.w	d1,obX(a0)
00018F14 4E75                       		rts	
00018F16                            ; ===========================================================================
00018F16                            
00018F16                            @loc_15E3C:
00018F16 5328 0028                  		subq.b	#1,obSubtype(a0)
00018F1A 4228 0038                  		clr.b	sto_active(a0)
00018F1E 45F8 FC00                  		lea	(v_objstate).w,a2
00018F22 7000                       		moveq	#0,d0
00018F24 1028 0023                  		move.b	obRespawnNo(a0),d0
00018F28 67CE                       		beq.s	@loc_15E1E
00018F2A 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00018F30 60C6                       		bra.s	@loc_15E1E
00018F32                            ; ===========================================================================
00018F32                            
00018F32                            @type03:
00018F32 4A28 0038                  		tst.b	sto_active(a0)
00018F36 6600                       		bne.s	@isactive03
00018F38 4A68 003A                  		tst.w	$3A(a0)
00018F3C 6700                       		beq.s	@loc_15E6A
00018F3E 5368 003A                  		subq.w	#1,$3A(a0)
00018F42 6000                       		bra.s	@loc_15E8E
00018F44                            ; ===========================================================================
00018F44                            
00018F44                            @loc_15E6A:
00018F44 5368 0036                  		subq.w	#1,$36(a0)
00018F48 6A00                       		bpl.s	@loc_15E8E
00018F4A 317C 003C 0036             		move.w	#$3C,$36(a0)
00018F50 117C 0001 0038             		move.b	#1,sto_active(a0)
00018F56                            
00018F56                            @isactive03:
00018F56 5068 003A                  		addq.w	#8,$3A(a0)
00018F5A 3028 003A                  		move.w	$3A(a0),d0
00018F5E B068 003C                  		cmp.w	$3C(a0),d0
00018F62 6600                       		bne.s	@loc_15E8E
00018F64 4228 0038                  		clr.b	sto_active(a0)
00018F68                            
00018F68                            @loc_15E8E:
00018F68 3028 003A                  		move.w	$3A(a0),d0
00018F6C 0828 0000 0022             		btst	#0,obStatus(a0)
00018F72 6700                       		beq.s	@noflip03
00018F74 4440                       		neg.w	d0
00018F76 0640 0038                  		addi.w	#$38,d0
00018F7A                            
00018F7A                            	@noflip03:
00018F7A 3228 0030                  		move.w	sto_origY(a0),d1
00018F7E D240                       		add.w	d0,d1
00018F80 3141 000C                  		move.w	d1,obY(a0)
00018F84 4E75                       		rts	
00018F86                            ; ===========================================================================
00018F86                            
00018F86                            @type04:
00018F86 4A28 0038                  		tst.b	sto_active(a0)
00018F8A 6600                       		bne.s	@isactive04
00018F8C 4A68 003A                  		tst.w	$3A(a0)
00018F90 6700                       		beq.s	@loc_15EBE
00018F92 5168 003A                  		subq.w	#8,$3A(a0)
00018F96 6000                       		bra.s	@loc_15EF0
00018F98                            ; ===========================================================================
00018F98                            
00018F98                            @loc_15EBE:
00018F98 5368 0036                  		subq.w	#1,$36(a0)
00018F9C 6A00                       		bpl.s	@loc_15EF0
00018F9E 317C 003C 0036             		move.w	#$3C,$36(a0)
00018FA4 117C 0001 0038             		move.b	#1,sto_active(a0)
00018FAA                            
00018FAA                            @isactive04:
00018FAA 3028 003A                  		move.w	$3A(a0),d0
00018FAE B068 003C                  		cmp.w	$3C(a0),d0
00018FB2 6700                       		beq.s	@loc_15EE0
00018FB4 5068 003A                  		addq.w	#8,$3A(a0)
00018FB8 6000                       		bra.s	@loc_15EF0
00018FBA                            ; ===========================================================================
00018FBA                            
00018FBA                            @loc_15EE0:
00018FBA 5368 0036                  		subq.w	#1,$36(a0)
00018FBE 6A00                       		bpl.s	@loc_15EF0
00018FC0 317C 003C 0036             		move.w	#$3C,$36(a0)
00018FC6 4228 0038                  		clr.b	sto_active(a0)
00018FCA                            
00018FCA                            @loc_15EF0:
00018FCA 3028 003A                  		move.w	$3A(a0),d0
00018FCE 0828 0000 0022             		btst	#0,obStatus(a0)
00018FD4 6700                       		beq.s	@noflip04
00018FD6 4440                       		neg.w	d0
00018FD8 0640 0038                  		addi.w	#$38,d0
00018FDC                            
00018FDC                            	@noflip04:
00018FDC 3228 0030                  		move.w	sto_origY(a0),d1
00018FE0 D240                       		add.w	d0,d1
00018FE2 3141 000C                  		move.w	d1,obY(a0)
00018FE6 4E75                       		rts	
00018FE8                            ; ===========================================================================
00018FE8                            
00018FE8                            @type05:
00018FE8 4A28 0038                  		tst.b	sto_active(a0)
00018FEC 6600                       		bne.s	@loc_15F3E
00018FEE 45F8 F7E0                  		lea	(f_switch).w,a2
00018FF2 7000                       		moveq	#0,d0
00018FF4 1028 003E                  		move.b	$3E(a0),d0
00018FF8 0832 0000 0000             		btst	#0,(a2,d0.w)
00018FFE 6700                       		beq.s	@locret_15F5C
00019000 117C 0001 0038             		move.b	#1,sto_active(a0)
00019006 45F8 FC00                  		lea	(v_objstate).w,a2
0001900A 7000                       		moveq	#0,d0
0001900C 1028 0023                  		move.b	obRespawnNo(a0),d0
00019010 6700                       		beq.s	@loc_15F3E
00019012 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00019018                            
00019018                            @loc_15F3E:
00019018 04A8 0001 0000 0008        		subi.l	#$10000,obX(a0)
00019020 06A8 0000 8000 000C        		addi.l	#$8000,obY(a0)
00019028 3168 0008 0034             		move.w	obX(a0),sto_origX(a0)
0001902E 0C68 0980 0008             		cmpi.w	#$980,obX(a0)
00019034 6700                       		beq.s	@loc_15F5E
00019036                            
00019036                            @locret_15F5C:
00019036 4E75                       		rts	
00019038                            ; ===========================================================================
00019038                            
00019038                            @loc_15F5E:
00019038 4228 0028                  		clr.b	obSubtype(a0)
0001903C 4228 0038                  		clr.b	sto_active(a0)
00019040 4E75                       		rts	
00019040 4E75                       		rts	
00019042                            Map_Stomp:	include	"_maps\SBZ Stomper and Door.asm"
00019042                            ; ---------------------------------------------------------------------------
00019042                            ; Sprite mappings - stomper and	platforms (SBZ)
00019042                            ; ---------------------------------------------------------------------------
00019042                            Map_Stomp_internal:
00019042 0000                       		dc.w @door-Map_Stomp_internal
00019044 0000                       		dc.w @stomper-Map_Stomp_internal
00019046 0000                       		dc.w @stomper-Map_Stomp_internal
00019048 0000                       		dc.w @stomper-Map_Stomp_internal
0001904A 0000                       		dc.w @bigdoor-Map_Stomp_internal
0001904C 04                         @door:		dc.b 4
0001904D F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0 ; horizontal sliding door
00019052 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
00019057 F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
0001905C F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
00019061 08                         @stomper:	dc.b 8
00019062 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4 ; stomper block with yellow/black stripes
00019067 E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
0001906C E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
00019071 E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
00019076 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
0001907B 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
00019080 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00019085 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
0001908A 0E                         @bigdoor:	dc.b $E
0001908B C00F 0000 80               		dc.b $C0, $F, 0, 0, $80	; huge diagonal sliding door from SBZ3
00019090 C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
00019095 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
0001909A C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
0001909F C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
000190A4 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
000190A9 C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
000190AE C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
000190B3 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
000190B8 E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
000190BD E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
000190C2 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
000190C7 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
000190CC 200F 0058 80               		dc.b $20, $F, 0, $58, $80
000190D2 00                         		even
000190D2 00                         		even
000190D2                            		include	"_incObj\6C SBZ Vanishing Platforms.asm"
000190D2                            ; ---------------------------------------------------------------------------
000190D2                            ; Object 6C - vanishing	platforms (SBZ)
000190D2                            ; ---------------------------------------------------------------------------
000190D2                            
000190D2                            VanishPlatform:
000190D2 7000                       		moveq	#0,d0
000190D4 1028 0024                  		move.b	obRoutine(a0),d0
000190D8 323B 0000                  		move.w	VanP_Index(pc,d0.w),d1
000190DC 4EFB 1000                  		jmp	VanP_Index(pc,d1.w)
000190E0                            ; ===========================================================================
000190E0 0000                       VanP_Index:	dc.w VanP_Main-VanP_Index
000190E2 0000                       		dc.w VanP_Vanish-VanP_Index
000190E4 0000                       		dc.w VanP_Appear-VanP_Index
000190E6 0000                       		dc.w loc_16068-VanP_Index
000190E8                            
000190E8 =00000030                  vanp_timer:	equ $30		; counter for time until event
000190E8 =00000032                  vanp_timelen:	equ $32		; time between events (general)
000190E8                            ; ===========================================================================
000190E8                            
000190E8                            VanP_Main:	; Routine 0
000190E8 5C28 0024                  		addq.b	#6,obRoutine(a0)
000190EC 217C 0000 0000 0004        		move.l	#Map_VanP,obMap(a0)
000190F4 317C 44C3 0002             		move.w	#$44C3,obGfx(a0)
000190FA 0028 0004 0001             		ori.b	#4,obRender(a0)
00019100 117C 0010 0014             		move.b	#$10,obActWid(a0)
00019106 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001910C 7000                       		moveq	#0,d0
0001910E 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00019112 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00019116 5240                       		addq.w	#1,d0		; add 1
00019118 EF48                       		lsl.w	#7,d0		; multiply by $80
0001911A 3200                       		move.w	d0,d1
0001911C 5340                       		subq.w	#1,d0
0001911E 3140 0030                  		move.w	d0,vanp_timer(a0)
00019122 3140 0032                  		move.w	d0,vanp_timelen(a0)
00019126 7000                       		moveq	#0,d0
00019128 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
0001912C 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
00019130 0641 0080                  		addi.w	#$80,d1
00019134 C0C1                       		mulu.w	d1,d0
00019136 E088                       		lsr.l	#8,d0
00019138 3140 0036                  		move.w	d0,$36(a0)
0001913C 5341                       		subq.w	#1,d1
0001913E 3141 0038                  		move.w	d1,$38(a0)
00019142                            
00019142                            loc_16068:	; Routine 6
00019142 3038 FE04                  		move.w	(v_framecount).w,d0
00019146 9068 0036                  		sub.w	$36(a0),d0
0001914A C068 0038                  		and.w	$38(a0),d0
0001914E 6600                       		bne.s	@animate
00019150 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto VanP_Vanish next
00019154 6000                       		bra.s	VanP_Vanish
00019156                            ; ===========================================================================
00019156                            
00019156                            @animate:
00019156 43F9 0000 0000             		lea	(Ani_Van).l,a1
0001915C 4EB9 0000 CA24             		jsr	(AnimateSprite).l
00019162 6000 878A                  		bra.w	RememberState
00019166                            ; ===========================================================================
00019166                            
00019166                            VanP_Vanish:	; Routine 2
00019166                            VanP_Appear:	; Routine 4
00019166 5368 0030                  		subq.w	#1,vanp_timer(a0)
0001916A 6A00                       		bpl.s	@wait
0001916C 317C 007F 0030             		move.w	#127,vanp_timer(a0)
00019172 4A28 001C                  		tst.b	obAnim(a0)	; is platform vanishing?
00019176 6700                       		beq.s	@isvanishing	; if yes, branch
00019178 3168 0032 0030             		move.w	vanp_timelen(a0),vanp_timer(a0)
0001917E                            
0001917E                            	@isvanishing:
0001917E 0868 0000 001C             		bchg	#0,obAnim(a0)
00019184                            
00019184                            	@wait:
00019184 43F9 0000 0000             		lea	(Ani_Van).l,a1
0001918A 4EB9 0000 CA24             		jsr	(AnimateSprite).l
00019190 0828 0001 001A             		btst	#1,obFrame(a0)	; has platform vanished?
00019196 6600                       		bne.s	@notsolid	; if yes, branch
00019198 0C28 0002 0024             		cmpi.b	#2,obRoutine(a0)
0001919E 6600                       		bne.s	@loc_160D6
000191A0 7200                       		moveq	#0,d1
000191A2 1228 0014                  		move.b	obActWid(a0),d1
000191A6 4EB9 0000 9086             		jsr	(PlatformObject).l
000191AC 6000 8740                  		bra.w	RememberState
000191B0                            ; ===========================================================================
000191B0                            
000191B0                            @loc_160D6:
000191B0 7200                       		moveq	#0,d1
000191B2 1228 0014                  		move.b	obActWid(a0),d1
000191B6 4EB9 0000 91FA             		jsr	(ExitPlatform).l
000191BC 3428 0008                  		move.w	obX(a0),d2
000191C0 4EB9 0000 9764             		jsr	(MvSonicOnPtfm2).l
000191C6 6000 8726                  		bra.w	RememberState
000191CA                            ; ===========================================================================
000191CA                            
000191CA                            @notsolid:
000191CA 0828 0003 0022             		btst	#3,obStatus(a0)
000191D0 6700                       		beq.s	@display
000191D2 43F8 D000                  		lea	(v_player).w,a1
000191D6 08A9 0003 0022             		bclr	#3,obStatus(a1)
000191DC 08A8 0003 0022             		bclr	#3,obStatus(a0)
000191E2 117C 0002 0024             		move.b	#2,obRoutine(a0)
000191E8 4228 0025                  		clr.b	obSolid(a0)
000191EC                            
000191EC                            	@display:
000191EC 6000 8700                  		bra.w	RememberState
000191EC 6000 8700                  		bra.w	RememberState
000191F0                            		include	"_anim\SBZ Vanishing Platforms.asm"
000191F0                            ; ---------------------------------------------------------------------------
000191F0                            ; Animation script - vanishing platforms (SBZ)
000191F0                            ; ---------------------------------------------------------------------------
000191F0 0000                       Ani_Van:	dc.w @vanish-Ani_Van
000191F2 0000                       		dc.w @appear-Ani_Van
000191F4 0700 0102 03FE 01          @vanish:	dc.b 7,	0, 1, 2, 3, afBack, 1
000191FC 00                         		even
000191FC 0703 0201 00FE 01          @appear:	dc.b 7,	3, 2, 1, 0, afBack, 1
00019204 00                         		even
00019204 00                         		even
00019204                            Map_VanP:	include	"_maps\SBZ Vanishing Platforms.asm"
00019204                            ; ---------------------------------------------------------------------------
00019204                            ; Sprite mappings - vanishing platforms	(SBZ)
00019204                            ; ---------------------------------------------------------------------------
00019204                            Map_VanP_internal:
00019204 0000                       		dc.w @whole-Map_VanP_internal
00019206 0000                       		dc.w @half-Map_VanP_internal
00019208 0000                       		dc.w @quarter-Map_VanP_internal
0001920A 0000                       		dc.w @gone-Map_VanP_internal
0001920C 01                         @whole:		dc.b 1
0001920D F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00019212 01                         @half:		dc.b 1
00019213 F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
00019218 01                         @quarter:	dc.b 1
00019219 F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
0001921E 00                         @gone:		dc.b 0
00019220 00                         		even
00019220 00                         		even
00019220                            		include	"_incObj\6E Electrocuter.asm"
00019220                            ; ---------------------------------------------------------------------------
00019220                            ; Object 6E - electrocution orbs (SBZ)
00019220                            ; ---------------------------------------------------------------------------
00019220                            
00019220                            Electro:
00019220 7000                       		moveq	#0,d0
00019222 1028 0024                  		move.b	obRoutine(a0),d0
00019226 323B 0000                  		move.w	Elec_Index(pc,d0.w),d1
0001922A 4EFB 1000                  		jmp	Elec_Index(pc,d1.w)
0001922E                            ; ===========================================================================
0001922E 0000                       Elec_Index:	dc.w Elec_Main-Elec_Index
00019230 0000                       		dc.w Elec_Shock-Elec_Index
00019232                            
00019232 =00000034                  elec_freq:	equ $34		; frequency
00019232                            ; ===========================================================================
00019232                            
00019232                            Elec_Main:	; Routine 0
00019232 5428 0024                  		addq.b	#2,obRoutine(a0)
00019236 217C 0000 0000 0004        		move.l	#Map_Elec,obMap(a0)
0001923E 317C 047E 0002             		move.w	#$47E,obGfx(a0)
00019244 0028 0004 0001             		ori.b	#4,obRender(a0)
0001924A 117C 0028 0014             		move.b	#$28,obActWid(a0)
00019250 7000                       		moveq	#0,d0
00019252 1028 0028                  		move.b	obSubtype(a0),d0 ; read object type
00019256 E948                       		lsl.w	#4,d0		; multiply by $10
00019258 5340                       		subq.w	#1,d0
0001925A 3140 0034                  		move.w	d0,elec_freq(a0)
0001925E                            
0001925E                            Elec_Shock:	; Routine 2
0001925E 3038 FE04                  		move.w	(v_framecount).w,d0
00019262 C068 0034                  		and.w	elec_freq(a0),d0 ; is it time to zap?
00019266 6600                       		bne.s	@animate	; if not, branch
00019268                            
00019268 117C 0001 001C             		move.b	#1,obAnim(a0)	; run "zap" animation
0001926E 4A28 0001                  		tst.b	obRender(a0)
00019272 6A00                       		bpl.s	@animate
0001927E                            
0001927E                            	@animate:
0001927E 43F9 0000 0000             		lea	(Ani_Elec).l,a1
00019284 4EB9 0000 CA24             		jsr	(AnimateSprite).l
0001928A 117C 0000 0020             		move.b	#0,obColType(a0)
00019290 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)	; is 4th frame displayed?
00019296 6600                       		bne.s	@display	; if not, branch
00019298 117C 00A4 0020             		move.b	#$A4,obColType(a0) ; if yes, make object hurt Sonic
0001929E                            
0001929E                            	@display:
0001929E 6000 864E                  		bra.w	RememberState
0001929E 6000 864E                  		bra.w	RememberState
000192A2                            		include	"_anim\Electrocuter.asm"
000192A2                            ; ---------------------------------------------------------------------------
000192A2                            ; Animation script - electrocution orbs (SBZ)
000192A2                            ; ---------------------------------------------------------------------------
000192A2 0000                       Ani_Elec:	dc.w byte_161CC-Ani_Elec
000192A4 0000                       		dc.w byte_161D0-Ani_Elec
000192A6 0700 FF                    byte_161CC:	dc.b 7,	0, afEnd
000192AA 00                         		even
000192AA 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, afChange, 0
000192BA                            		even
000192BA                            		even
000192BA                            Map_Elec:	include	"_maps\Electrocuter.asm"
000192BA                            ; --------------------------------------------------------------------------------
000192BA                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000192BA                            ; --------------------------------------------------------------------------------
000192BA                            
000192BA                            SME_KiF9w:	
000192BA 0000 0000                  		dc.w SME_KiF9w_C-SME_KiF9w, SME_KiF9w_17-SME_KiF9w	
000192BE 0000 0000                  		dc.w SME_KiF9w_27-SME_KiF9w, SME_KiF9w_41-SME_KiF9w	
000192C2 0000 0000                  		dc.w SME_KiF9w_56-SME_KiF9w, SME_KiF9w_75-SME_KiF9w	
000192C6 02                         SME_KiF9w_C:	dc.b 2	
000192C7 F804 2000 F8               		dc.b $F8, 4, $20, 0, $F8	
000192CC 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
000192D1 03                         SME_KiF9w_17:	dc.b 3	
000192D2 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
000192D7 F804 0000 F8               		dc.b $F8, 4, 0, 0, $F8	
000192DC 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
000192E1 05                         SME_KiF9w_27:	dc.b 5	
000192E2 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
000192E7 F804 0000 F8               		dc.b $F8, 4, 0, 0, $F8	
000192EC 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
000192F1 F60D 200C 08               		dc.b $F6, $D, $20, $C, 8	
000192F6 F60D 280C DC               		dc.b $F6, $D, $28, $C, $DC	
000192FB 04                         SME_KiF9w_41:	dc.b 4	
000192FC F804 2000 F8               		dc.b $F8, 4, $20, 0, $F8	
00019301 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
00019306 F60D 200C 08               		dc.b $F6, $D, $20, $C, 8	
0001930B F60D 280C DC               		dc.b $F6, $D, $28, $C, $DC	
00019310 06                         SME_KiF9w_56:	dc.b 6	
00019311 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
00019316 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
0001931B F60D 300C 08               		dc.b $F6, $D, $30, $C, 8	
00019320 F60D 380C DC               		dc.b $F6, $D, $38, $C, $DC	
00019325 F60D 200C 24               		dc.b $F6, $D, $20, $C, $24	
0001932A F60D 280C C0               		dc.b $F6, $D, $28, $C, $C0	
0001932F 04                         SME_KiF9w_75:	dc.b 4	
00019330 F804 2000 F8               		dc.b $F8, 4, $20, 0, $F8	
00019335 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
0001933A F60D 300C 24               		dc.b $F6, $D, $30, $C, $24	
0001933F F60D 380C C0               		dc.b $F6, $D, $38, $C, $C0	
00019344                            		even
00019344                            		even
00019344                            		include	"_incObj\6F SBZ Spin Platform Conveyor.asm"
00019344                            ; ---------------------------------------------------------------------------
00019344                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00019344                            ; ---------------------------------------------------------------------------
00019344                            
00019344                            SpinConvey:
00019344 7000                       		moveq	#0,d0
00019346 1028 0024                  		move.b	obRoutine(a0),d0
0001934A 323B 0000                  		move.w	SpinC_Index(pc,d0.w),d1
0001934E 4EBB 1000                  		jsr	SpinC_Index(pc,d1.w)
0001936E                            
0001936E                            SpinC_Display:
0001936E 4EF9 0000 F978             		jmp	(DisplaySprite).l
00019374                            ; ===========================================================================
00019374                            
00019374                            loc_1629A:
00019374 0C38 0002 FE11             		cmpi.b	#2,(v_act).w	; check if act is 3
0001937A 6600                       		bne.s	SpinC_Act1or2	; if not, branch
0001937C 0C40 FF80                  		cmpi.w	#-$80,d0
00019380 64EC                       		bcc.s	SpinC_Display
00019382                            
00019382                            SpinC_Act1or2:
00019382 1028 002F                  		move.b	$2F(a0),d0
00019386 6A00                       		bpl.s	SpinC_Delete
00019388 0240 007F                  		andi.w	#$7F,d0
0001938C 45F8 F7C1                  		lea	(v_obj63).w,a2
00019390 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00019396                            
00019396                            SpinC_Delete:
00019396 4EF9 0000 F9B8             		jmp	(DeleteObject).l
0001939C                            ; ===========================================================================
0001939C 0000                       SpinC_Index:	dc.w SpinC_Main-SpinC_Index
0001939E 0000                       		dc.w loc_163D8-SpinC_Index
000193A0                            ; ===========================================================================
000193A0                            
000193A0                            SpinC_Main:	; Routine 0
000193A0 1028 0028                  		move.b	obSubtype(a0),d0
000193A4 6B00 0000                  		bmi.w	loc_16380
000193A8 5428 0024                  		addq.b	#2,obRoutine(a0)
000193AC 217C 0001 8A14 0004        		move.l	#Map_Spin,obMap(a0)
000193B4 317C 04DF 0002             		move.w	#$4DF,obGfx(a0)
000193BA 117C 0010 0014             		move.b	#$10,obActWid(a0)
000193C0 0028 0004 0001             		ori.b	#4,obRender(a0)
000193C6 317C 0200 0018             		move.w	#$200,obPriority(a0)
000193CC 7000                       		moveq	#0,d0
000193CE 1028 0028                  		move.b	obSubtype(a0),d0
000193D2 3200                       		move.w	d0,d1
000193D4 E648                       		lsr.w	#3,d0
000193D6 0240 001E                  		andi.w	#$1E,d0
000193DA 45FA 0000                  		lea	off_164A6(pc),a2
000193DE D4F2 0000                  		adda.w	(a2,d0.w),a2
000193E2 315A 0038                  		move.w	(a2)+,$38(a0)
000193E6 315A 0030                  		move.w	(a2)+,$30(a0)
000193EA 214A 003C                  		move.l	a2,$3C(a0)
000193EE 0241 000F                  		andi.w	#$F,d1
000193F2 E549                       		lsl.w	#2,d1
000193F4 1141 0038                  		move.b	d1,$38(a0)
000193F8 117C 0004 003A             		move.b	#4,$3A(a0)
000193FE 4A38 F7C0                  		tst.b	(f_conveyrev).w
00019402 6700                       		beq.s	loc_16356
00019404 117C 0001 003B             		move.b	#1,$3B(a0)
0001940A 4428 003A                  		neg.b	$3A(a0)
0001940E 7200                       		moveq	#0,d1
00019410 1228 0038                  		move.b	$38(a0),d1
00019414 D228 003A                  		add.b	$3A(a0),d1
00019418 B228 0039                  		cmp.b	$39(a0),d1
0001941C 6500                       		bcs.s	loc_16352
0001941E 1001                       		move.b	d1,d0
00019420 7200                       		moveq	#0,d1
00019422 4A00                       		tst.b	d0
00019424 6A00                       		bpl.s	loc_16352
00019426 1228 0039                  		move.b	$39(a0),d1
0001942A 5901                       		subq.b	#4,d1
0001942C                            
0001942C                            loc_16352:
0001942C 1141 0038                  		move.b	d1,$38(a0)
00019430                            
00019430                            loc_16356:
00019430 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00019436 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
0001943C 4A41                       		tst.w	d1
0001943E 6600                       		bne.s	loc_1636C
00019440 117C 0001 001C             		move.b	#1,obAnim(a0)
00019446                            
00019446                            loc_1636C:
00019446 0C41 0008                  		cmpi.w	#8,d1
0001944A 6600                       		bne.s	loc_16378
0001944C 117C 0000 001C             		move.b	#0,obAnim(a0)
00019452                            
00019452                            loc_16378:
00019452 6100 B512                  		bsr.w	LCon_ChangeDir
00019456 6000 0000                  		bra.w	loc_163D8
0001945A                            ; ===========================================================================
0001945A                            
0001945A                            loc_16380:
0001945A 1140 002F                  		move.b	d0,$2F(a0)
0001945E 0240 007F                  		andi.w	#$7F,d0
00019462 45F8 F7C1                  		lea	(v_obj63).w,a2
00019466 08F2 0000 0000             		bset	#0,(a2,d0.w)
0001946C 6700                       		beq.s	loc_1639A
0001946E 4EF9 0000 F9B8             		jmp	(DeleteObject).l
00019474                            ; ===========================================================================
00019474                            
00019474                            loc_1639A:
00019474 D040                       		add.w	d0,d0
00019476 0240 001E                  		andi.w	#$1E,d0
0001947A 0640 0000                  		addi.w	#ObjPosSBZPlatform_Index-ObjPos_Index,d0
0001947E 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00019484 D4F2 0000                  		adda.w	(a2,d0.w),a2
00019488 321A                       		move.w	(a2)+,d1
0001948A 2248                       		movea.l	a0,a1
0001948C 6000                       		bra.s	SpinC_LoadPform
0001948E                            ; ===========================================================================
0001948E                            
0001948E                            SpinC_Loop:
0001948E 4EB9 0000 FE04             		jsr	(FindFreeObj).l
00019494 6600                       		bne.s	loc_163D0
00019496                            
00019496                            SpinC_LoadPform:
00019496 12BC 006F                  		move.b	#id_SpinConvey,0(a1)
0001949A 335A 0008                  		move.w	(a2)+,obX(a1)
0001949E 335A 000C                  		move.w	(a2)+,obY(a1)
000194A2 301A                       		move.w	(a2)+,d0
000194A4 1340 0028                  		move.b	d0,obSubtype(a1)
000194A8                            
000194A8                            loc_163D0:
000194A8 51C9 FFE4                  		dbf	d1,SpinC_Loop
000194AC                            
000194AC 588F                       		addq.l	#4,sp
000194AE 4E75                       		rts	
000194B0                            ; ===========================================================================
000194B0                            
000194B0                            loc_163D8:	; Routine 2
000194B0 43F9 0000 0000             		lea	(Ani_SpinConvey).l,a1
000194B6 4EB9 0000 CA24             		jsr	(AnimateSprite).l
000194BC 4A28 001A                  		tst.b	obFrame(a0)
000194C0 6600                       		bne.s	loc_16404
000194C2 3F28 0008                  		move.w	obX(a0),-(sp)
000194C6 6100 0000                  		bsr.w	loc_16424
000194CA 323C 001B                  		move.w	#$1B,d1
000194CE 343C 0007                  		move.w	#7,d2
000194D2 3602                       		move.w	d2,d3
000194D4 5243                       		addq.w	#1,d3
000194D6 381F                       		move.w	(sp)+,d4
000194D8 6000 88AC                  		bra.w	SolidObject
000194DC                            ; ===========================================================================
000194DC                            
000194DC                            loc_16404:
000194DC 0828 0003 0022             		btst	#3,obStatus(a0)
000194E2 6700                       		beq.s	loc_16420
000194E4 43F8 D000                  		lea	(v_objspace).w,a1
000194E8 08A9 0003 0022             		bclr	#3,obStatus(a1)
000194EE 08A8 0003 0022             		bclr	#3,obStatus(a0)
000194F4 4228 0025                  		clr.b	obSolid(a0)
000194F8                            
000194F8                            loc_16420:
000194F8 6000 0000                  		bra.w	loc_16424
000194FC                            
000194FC                            loc_16424:
000194FC 3028 0008                  		move.w	obX(a0),d0
00019500 B068 0034                  		cmp.w	$34(a0),d0
00019504 6600                       		bne.s	loc_16484
00019506 3028 000C                  		move.w	obY(a0),d0
0001950A B068 0036                  		cmp.w	$36(a0),d0
0001950E 6600                       		bne.s	loc_16484
00019510 7200                       		moveq	#0,d1
00019512 1228 0038                  		move.b	$38(a0),d1
00019516 D228 003A                  		add.b	$3A(a0),d1
0001951A B228 0039                  		cmp.b	$39(a0),d1
0001951E 6500                       		bcs.s	loc_16456
00019520 1001                       		move.b	d1,d0
00019522 7200                       		moveq	#0,d1
00019524 4A00                       		tst.b	d0
00019526 6A00                       		bpl.s	loc_16456
00019528 1228 0039                  		move.b	$39(a0),d1
0001952C 5901                       		subq.b	#4,d1
0001952E                            
0001952E                            loc_16456:
0001952E 1141 0038                  		move.b	d1,$38(a0)
00019532 2268 003C                  		movea.l	$3C(a0),a1
00019536 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
0001953C 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00019542 4A41                       		tst.w	d1
00019544 6600                       		bne.s	loc_16474
00019546 117C 0001 001C             		move.b	#1,obAnim(a0)
0001954C                            
0001954C                            loc_16474:
0001954C 0C41 0008                  		cmpi.w	#8,d1
00019550 6600                       		bne.s	loc_16480
00019552 117C 0000 001C             		move.b	#0,obAnim(a0)
00019558                            
00019558                            loc_16480:
00019558 6100 B40C                  		bsr.w	LCon_ChangeDir
0001955C                            
0001955C                            loc_16484:
0001955C 4EF9 0000 F964             		jmp	(SpeedToPos).l
0001955C 4EF9 0000 F964             		jmp	(SpeedToPos).l
00019562                            		include	"_anim\SBZ Spin Platform Conveyor.asm"
00019562                            ; ---------------------------------------------------------------------------
00019562                            ; Animation script - platform on conveyor belt (SBZ)
00019562                            ; ---------------------------------------------------------------------------
00019562 0000                       Ani_SpinConvey:	dc.w @spin-Ani_SpinConvey
00019564 0000                       		dc.w @still-Ani_SpinConvey
00019566 0000 0102 0304 4342 4140+  @spin:		dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00019573 6423 2221 00FF             		dc.b $64, $23, $22, $21, 0, afEnd
0001957A 00                         		even
0001957A 0F00 FF                    @still:		dc.b $F, 0, afEnd
0001957E 00                         		even
0001957E 00                         		even
0001957E                            
0001957E 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
00019584 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
0001958A 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
0001959E 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
000195B2 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
000195C6 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
000195DA 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
000195EE 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00019602                            ; ===========================================================================
00019602                            
00019602                            		include	"_incObj\70 Girder Block.asm"
00019602                            ; ---------------------------------------------------------------------------
00019602                            ; Object 70 - large girder block (SBZ)
00019602                            ; ---------------------------------------------------------------------------
00019602                            
00019602                            Girder:
00019602 7000                       		moveq	#0,d0
00019604 1028 0024                  		move.b	obRoutine(a0),d0
00019608 323B 0000                  		move.w	Gird_Index(pc,d0.w),d1
0001960C 4EFB 1000                  		jmp	Gird_Index(pc,d1.w)
00019610                            ; ===========================================================================
00019610 0000                       Gird_Index:	dc.w Gird_Main-Gird_Index
00019612 0000                       		dc.w Gird_Action-Gird_Index
00019614                            
00019614 =00000016                  gird_height:	equ $16
00019614 =00000032                  gird_origX:	equ $32		; original x-axis position
00019614 =00000030                  gird_origY:	equ $30		; original y-axis position
00019614 =00000034                  gird_time:	equ $34		; duration for movement in a direction
00019614 =00000038                  gird_set:	equ $38		; which movement settings to use (0/8/16/24)
00019614 =0000003A                  gird_delay:	equ $3A		; delay for movement
00019614                            ; ===========================================================================
00019614                            
00019614                            Gird_Main:	; Routine 0
00019614 5428 0024                  		addq.b	#2,obRoutine(a0)
00019618 217C 0000 0000 0004        		move.l	#Map_Gird,obMap(a0)
00019620 317C 42F0 0002             		move.w	#$42F0,obGfx(a0)
00019626 0028 0004 0001             		ori.b	#4,obRender(a0)
0001962C 317C 0200 0018             		move.w	#$200,obPriority(a0)
00019632 117C 0060 0014             		move.b	#$60,obActWid(a0)
00019638 117C 0018 0016             		move.b	#$18,gird_height(a0)
0001963E 3168 0008 0032             		move.w	obX(a0),gird_origX(a0)
00019644 3168 000C 0030             		move.w	obY(a0),gird_origY(a0)
0001964A 6100 0000                  		bsr.w	Gird_ChgMove
0001964E                            
0001964E                            Gird_Action:	; Routine 2
0001964E 3F28 0008                  		move.w	obX(a0),-(sp)
00019652 4A68 003A                  		tst.w	gird_delay(a0)
00019656 6700                       		beq.s	@beginmove
00019658 5368 003A                  		subq.w	#1,gird_delay(a0)
0001965C 6600                       		bne.s	@solid
0001965E                            
0001965E                            	@beginmove:
0001965E 4EB9 0000 F964             		jsr	(SpeedToPos).l
00019664 5368 0034                  		subq.w	#1,gird_time(a0) ; decrement movement duration
00019668 6600                       		bne.s	@solid		; if time remains, branch
0001966A 6100 0000                  		bsr.w	Gird_ChgMove	; if time is zero, branch
0001966E                            
0001966E                            	@solid:
0001966E 381F                       		move.w	(sp)+,d4
00019670 4A28 0001                  		tst.b	obRender(a0)
00019674 6A00                       		bpl.s	@chkdel
00019676 7200                       		moveq	#0,d1
00019678 1228 0014                  		move.b	obActWid(a0),d1
0001967C 0641 000B                  		addi.w	#$B,d1
00019680 7400                       		moveq	#0,d2
00019682 1428 0016                  		move.b	gird_height(a0),d2
00019686 3602                       		move.w	d2,d3
00019688 5243                       		addq.w	#1,d3
0001968A 6100 86FA                  		bsr.w	SolidObject
0001968E                            
0001968E                            	@chkdel:
000196AA 4EF9 0000 F978             		jmp	(DisplaySprite).l
000196B0                            
000196B0                            	@delete:
000196B0 4EF9 0000 F9B8             		jmp	(DeleteObject).l
000196B6                            ; ===========================================================================
000196B6                            
000196B6                            Gird_ChgMove:
000196B6 1028 0038                  		move.b	gird_set(a0),d0
000196BA 0240 0018                  		andi.w	#$18,d0
000196BE 43F9 0000 0000             		lea	(@settings).l,a1
000196C4 43F1 0000                  		lea	(a1,d0.w),a1
000196C8 3159 0010                  		move.w	(a1)+,obVelX(a0)
000196CC 3159 0012                  		move.w	(a1)+,obVelY(a0)
000196D0 3159 0034                  		move.w	(a1)+,gird_time(a0)
000196D4 5028 0038                  		addq.b	#8,gird_set(a0)	; use next settings
000196D8 317C 0007 003A             		move.w	#7,gird_delay(a0)
000196DE 4E75                       		rts	
000196E0                            ; ===========================================================================
000196E0                            @settings:	;   x-speed, y-speed, duration
000196E0 0100 0000 0060 0000        		dc.w   $100,	 0,   $60,     0 ; right
000196E8 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0 ; down
000196F0 FF00 FFC0 0060 0000        		dc.w  -$100,  -$40,   $60,     0 ; up/left
000196F8 0000 FF00 0018 0000        		dc.w	  0, -$100,   $18,     0 ; up
000196F8 0000 FF00 0018 0000        		dc.w	  0, -$100,   $18,     0 ; up
00019700                            Map_Gird:	include	"_maps\Girder Block.asm"
00019700                            ; ---------------------------------------------------------------------------
00019700                            ; Sprite mappings - large girder block (SBZ)
00019700                            ; ---------------------------------------------------------------------------
00019700                            Map_Gird_internal:
00019700 0000                       		dc.w @girder-Map_Gird_internal
00019702 0C                         @girder:	dc.b $C
00019703 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
00019708 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
0001970D E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00019712 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
00019717 E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
0001971C 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
00019721 E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
00019726 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
0001972B E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
00019730 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
00019735 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
0001973A 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
00019740 00                         		even
00019740 00                         		even
00019740                            		include	"_incObj\72 Teleporter.asm"
00019740                            ; ---------------------------------------------------------------------------
00019740                            ; Object 72 - teleporter (SBZ)
00019740                            ; ---------------------------------------------------------------------------
00019740                            
00019740                            Teleport:
00019740 7000                       		moveq	#0,d0
00019742 1028 0024                  		move.b	obRoutine(a0),d0
00019746 323B 0000                  		move.w	Tele_Index(pc,d0.w),d1
0001974A 4EBB 1000                  		jsr	Tele_Index(pc,d1.w)
0001976A 4E75                       		rts	
0001976C                            
0001976C                            	@delete:
0001976C 4EF9 0000 F9B8             		jmp	(DeleteObject).l
00019772                            ; ===========================================================================
00019772 0000                       Tele_Index:	dc.w Tele_Main-Tele_Index
00019774 0000                       		dc.w loc_166C8-Tele_Index
00019776 0000                       		dc.w loc_1675E-Tele_Index
00019778 0000                       		dc.w loc_16798-Tele_Index
0001977A                            ; ===========================================================================
0001977A                            
0001977A                            Tele_Main:	; Routine 0
0001977A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001977E 1028 0028                  		move.b	obSubtype(a0),d0
00019782 D040                       		add.w	d0,d0
00019784 0240 001E                  		andi.w	#$1E,d0
00019788 45FA 0000                  		lea	Tele_Data(pc),a2
0001978C D4F2 0000                  		adda.w	(a2,d0.w),a2
00019790 315A 003A                  		move.w	(a2)+,$3A(a0)
00019794 214A 003C                  		move.l	a2,$3C(a0)
00019798 315A 0036                  		move.w	(a2)+,$36(a0)
0001979C 315A 0038                  		move.w	(a2)+,$38(a0)
000197A0                            
000197A0                            loc_166C8:	; Routine 2
000197A0 43F8 D000                  		lea	(v_player).w,a1
000197A4 3029 0008                  		move.w	obX(a1),d0
000197A8 9068 0008                  		sub.w	obX(a0),d0
000197AC 0828 0000 0022             		btst	#0,obStatus(a0)
000197B2 6700                       		beq.s	loc_166E0
000197B4 0640 000F                  		addi.w	#$F,d0
000197B8                            
000197B8                            loc_166E0:
000197B8 0C40 0010                  		cmpi.w	#$10,d0
000197BC 6400                       		bcc.s	locret_1675C
000197BE 3229 000C                  		move.w	obY(a1),d1
000197C2 9268 000C                  		sub.w	obY(a0),d1
000197C6 0641 0020                  		addi.w	#$20,d1
000197CA 0C41 0040                  		cmpi.w	#$40,d1
000197CE 6400                       		bcc.s	locret_1675C
000197D0 4A38 F7C8                  		tst.b	(f_lockmulti).w
000197D4 6600                       		bne.s	locret_1675C
000197D6 0C28 0007 0028             		cmpi.b	#7,obSubtype(a0)
000197DC 6600                       		bne.s	loc_1670E
000197DE 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w
000197E4 6500                       		bcs.s	locret_1675C
000197E6                            
000197E6                            loc_1670E:
000197E6 5428 0024                  		addq.b	#2,obRoutine(a0)
000197EA 11FC 0081 F7C8             		move.b	#$81,(f_lockmulti).w ; lock controls
000197F0 137C 0002 001C             		move.b	#id_Roll,obAnim(a1) ; use Sonic's rolling animation
000197F6 337C 0800 0020             		move.w	#$800,obInertia(a1)
000197FC 337C 0000 0010             		move.w	#0,obVelX(a1)
00019802 337C 0000 0012             		move.w	#0,obVelY(a1)
00019808 08A8 0005 0022             		bclr	#5,obStatus(a0)
0001980E 08A9 0005 0022             		bclr	#5,obStatus(a1)
00019814 08E9 0001 0022             		bset	#1,obStatus(a1)
0001981A 3368 0008 0008             		move.w	obX(a0),obX(a1)
00019820 3368 000C 000C             		move.w	obY(a0),obY(a1)
00019826 4228 0032                  		clr.b	$32(a0)
00019834                            
00019834                            locret_1675C:
00019834 4E75                       		rts	
00019836                            ; ===========================================================================
00019836                            
00019836                            loc_1675E:	; Routine 4
00019836 43F8 D000                  		lea	(v_player).w,a1
0001983A 1028 0032                  		move.b	$32(a0),d0
0001983E 5428 0032                  		addq.b	#2,$32(a0)
00019842 4EB9 0000 3A32             		jsr	(CalcSine).l
00019848 EA40                       		asr.w	#5,d0
0001984A 3428 000C                  		move.w	obY(a0),d2
0001984E 9440                       		sub.w	d0,d2
00019850 3342 000C                  		move.w	d2,obY(a1)
00019854 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
0001985A 6600                       		bne.s	locret_16796
0001985C 6100 0000                  		bsr.w	sub_1681C
00019860 5428 0024                  		addq.b	#2,obRoutine(a0)
0001986E                            
0001986E                            locret_16796:
0001986E 4E75                       		rts	
00019870                            ; ===========================================================================
00019870                            
00019870                            loc_16798:	; Routine 6
00019870 588F                       		addq.l	#4,sp
00019872 43F8 D000                  		lea	(v_player).w,a1
00019876 5328 002E                  		subq.b	#1,$2E(a0)
0001987A 6A00                       		bpl.s	loc_167DA
0001987C 3368 0036 0008             		move.w	$36(a0),obX(a1)
00019882 3368 0038 000C             		move.w	$38(a0),obY(a1)
00019888 7200                       		moveq	#0,d1
0001988A 1228 003A                  		move.b	$3A(a0),d1
0001988E 5801                       		addq.b	#4,d1
00019890 B228 003B                  		cmp.b	$3B(a0),d1
00019894 6500                       		bcs.s	loc_167C2
00019896 7200                       		moveq	#0,d1
00019898 6000                       		bra.s	loc_16800
0001989A                            ; ===========================================================================
0001989A                            
0001989A                            loc_167C2:
0001989A 1141 003A                  		move.b	d1,$3A(a0)
0001989E 2468 003C                  		movea.l	$3C(a0),a2
000198A2 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
000198A8 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
000198AE 6000 0000                  		bra.w	sub_1681C
000198B2                            ; ===========================================================================
000198B2                            
000198B2                            loc_167DA:
000198B2 2429 0008                  		move.l	obX(a1),d2
000198B6 2629 000C                  		move.l	obY(a1),d3
000198BA 3029 0010                  		move.w	obVelX(a1),d0
000198BE 48C0                       		ext.l	d0
000198C0 E180                       		asl.l	#8,d0
000198C2 D480                       		add.l	d0,d2
000198C4 3029 0012                  		move.w	obVelY(a1),d0
000198C8 48C0                       		ext.l	d0
000198CA E180                       		asl.l	#8,d0
000198CC D680                       		add.l	d0,d3
000198CE 2342 0008                  		move.l	d2,obX(a1)
000198D2 2343 000C                  		move.l	d3,obY(a1)
000198D6 4E75                       		rts	
000198D8                            ; ===========================================================================
000198D8                            
000198D8                            loc_16800:
000198D8 0269 07FF 000C             		andi.w	#$7FF,obY(a1)
000198DE 4228 0024                  		clr.b	obRoutine(a0)
000198E2 4238 F7C8                  		clr.b	(f_lockmulti).w
000198E6 337C 0000 0010             		move.w	#0,obVelX(a1)
000198EC 337C 0200 0012             		move.w	#$200,obVelY(a1)
000198F2 4E75                       		rts	
000198F4                            
000198F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000198F4                            
000198F4                            
000198F4                            sub_1681C:
000198F4 7000                       		moveq	#0,d0
000198F6 343C 1000                  		move.w	#$1000,d2
000198FA 3028 0036                  		move.w	$36(a0),d0
000198FE 9069 0008                  		sub.w	obX(a1),d0
00019902 6C00                       		bge.s	loc_16830
00019904 4440                       		neg.w	d0
00019906 4442                       		neg.w	d2
00019908                            
00019908                            loc_16830:
00019908 7200                       		moveq	#0,d1
0001990A 363C 1000                  		move.w	#$1000,d3
0001990E 3228 0038                  		move.w	$38(a0),d1
00019912 9269 000C                  		sub.w	obY(a1),d1
00019916 6C00                       		bge.s	loc_16844
00019918 4441                       		neg.w	d1
0001991A 4443                       		neg.w	d3
0001991C                            
0001991C                            loc_16844:
0001991C B240                       		cmp.w	d0,d1
0001991E 6500                       		bcs.s	loc_1687A
00019920 7200                       		moveq	#0,d1
00019922 3228 0038                  		move.w	$38(a0),d1
00019926 9269 000C                  		sub.w	obY(a1),d1
0001992A 4841                       		swap	d1
0001992C 83C3                       		divs.w	d3,d1
0001992E 7000                       		moveq	#0,d0
00019930 3028 0036                  		move.w	$36(a0),d0
00019934 9069 0008                  		sub.w	obX(a1),d0
00019938 6700                       		beq.s	loc_16866
0001993A 4840                       		swap	d0
0001993C 81C1                       		divs.w	d1,d0
0001993E                            
0001993E                            loc_16866:
0001993E 3340 0010                  		move.w	d0,obVelX(a1)
00019942 3343 0012                  		move.w	d3,obVelY(a1)
00019946 4A41                       		tst.w	d1
00019948 6A00                       		bpl.s	loc_16874
0001994A 4441                       		neg.w	d1
0001994C                            
0001994C                            loc_16874:
0001994C 3141 002E                  		move.w	d1,$2E(a0)
00019950 4E75                       		rts	
00019952                            ; ===========================================================================
00019952                            
00019952                            loc_1687A:
00019952 7000                       		moveq	#0,d0
00019954 3028 0036                  		move.w	$36(a0),d0
00019958 9069 0008                  		sub.w	obX(a1),d0
0001995C 4840                       		swap	d0
0001995E 81C2                       		divs.w	d2,d0
00019960 7200                       		moveq	#0,d1
00019962 3228 0038                  		move.w	$38(a0),d1
00019966 9269 000C                  		sub.w	obY(a1),d1
0001996A 6700                       		beq.s	loc_16898
0001996C 4841                       		swap	d1
0001996E 83C0                       		divs.w	d0,d1
00019970                            
00019970                            loc_16898:
00019970 3341 0012                  		move.w	d1,obVelY(a1)
00019974 3342 0010                  		move.w	d2,obVelX(a1)
00019978 4A40                       		tst.w	d0
0001997A 6A00                       		bpl.s	loc_168A6
0001997C 4440                       		neg.w	d0
0001997E                            
0001997E                            loc_168A6:
0001997E 3140 002E                  		move.w	d0,$2E(a0)
00019982 4E75                       		rts	
00019984                            ; End of function sub_1681C
00019984                            
00019984                            ; ===========================================================================
00019984 0000 0000 0000             Tele_Data:	dc.w @type00-Tele_Data, @type01-Tele_Data, @type02-Tele_Data
0001998A 0000 0000 0000             		dc.w @type03-Tele_Data, @type04-Tele_Data, @type05-Tele_Data
00019990 0000 0000                  		dc.w @type06-Tele_Data, @type07-Tele_Data
00019994 0004 0794 098C             @type00:	dc.w 4,	$794, $98C
0001999A 0004 0094 038C             @type01:	dc.w 4,	$94, $38C
000199A0 001C 0794 02E8             @type02:	dc.w $1C, $794,	$2E8
000199A6 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
000199AC 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
000199B2 0884 0298 0894             		dc.w $884, $298, $894
000199B8 0270 0894 0190             		dc.w $270, $894, $190
000199BE 0004 0894 0690             @type03:	dc.w 4,	$894, $690
000199C4 001C 1194 0470             @type04:	dc.w $1C, $1194, $470
000199CA 1184 0498 1158             		dc.w $1184, $498, $1158
000199D0 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
000199D6 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
000199DC 04E8 0F94 0590             		dc.w $4E8, $F94, $590
000199E2 0004 1294 0490             @type05:	dc.w 4,	$1294, $490
000199E8 001C 1594 FFE8             @type06:	dc.w $1C, $1594, $FFE8
000199EE 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
000199F4 FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
000199FA 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
00019A00 FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
00019A06 0004 0894 0090             @type07:	dc.w 4,	$894, $90
00019A06 0004 0894 0090             @type07:	dc.w 4,	$894, $90
00019A0C                            
00019A0C                            		include	"_incObj\78 Caterkiller.asm"
00019A0C                            ; ---------------------------------------------------------------------------
00019A0C                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
00019A0C                            ; ---------------------------------------------------------------------------
00019A0C                            
00019A0C                            Caterkiller:
00019A0C 7000                       		moveq	#0,d0
00019A0E 1028 0024                  		move.b	obRoutine(a0),d0
00019A12 323B 0000                  		move.w	Cat_Index(pc,d0.w),d1
00019A16 4EFB 1000                  		jmp	Cat_Index(pc,d1.w)
00019A1A                            ; ===========================================================================
00019A1A 0000                       Cat_Index:	dc.w Cat_Main-Cat_Index
00019A1C 0000                       		dc.w Cat_Head-Cat_Index
00019A1E 0000                       		dc.w Cat_BodySeg1-Cat_Index
00019A20 0000                       		dc.w Cat_BodySeg2-Cat_Index
00019A22 0000                       		dc.w Cat_BodySeg1-Cat_Index
00019A24 0000                       		dc.w Cat_Delete-Cat_Index
00019A26 0000                       		dc.w loc_16CC0-Cat_Index
00019A28                            
00019A28 =0000003C                  cat_parent:	equ $3C		; address of parent object
00019A28                            ; ===========================================================================
00019A28                            
00019A28                            locret_16950:
00019A28 4E75                       		rts	
00019A2A                            ; ===========================================================================
00019A2A                            
00019A2A                            Cat_Main:	; Routine 0
00019A2A 117C 0007 0016             		move.b	#7,obHeight(a0)
00019A30 117C 0008 0017             		move.b	#8,obWidth(a0)
00019A36 4EB9 0000 F92C             		jsr	(ObjectFall).l
00019A3C 4EB9 0001 7EF2             		jsr	(ObjFloorDist).l
00019A42 4A41                       		tst.w	d1
00019A44 6AE2                       		bpl.s	locret_16950
00019A46 D368 000C                  		add.w	d1,obY(a0)
00019A4A 4268 0012                  		clr.w	obVelY(a0)
00019A4E 5428 0024                  		addq.b	#2,obRoutine(a0)
00019A52 217C 0000 0000 0004        		move.l	#Map_Cat,obMap(a0)
00019A5A 317C 22B0 0002             		move.w	#$22B0,obGfx(a0)
00019A60 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; if level is SBZ, branch
00019A66 6700                       		beq.s	@isscrapbrain
00019A68 317C 24FF 0002             		move.w	#$24FF,obGfx(a0) ; MZ specific code
00019A6E                            
00019A6E                            	@isscrapbrain:
00019A6E 0228 0003 0001             		andi.b	#3,obRender(a0)
00019A74 0028 0004 0001             		ori.b	#4,obRender(a0)
00019A7A 1168 0001 0022             		move.b	obRender(a0),obStatus(a0)
00019A80 317C 0200 0018             		move.w	#$200,obPriority(a0)
00019A86 117C 0008 0014             		move.b	#8,obActWid(a0)
00019A8C 117C 000B 0020             		move.b	#$B,obColType(a0)
00019A92 3428 0008                  		move.w	obX(a0),d2
00019A96 7A0C                       		moveq	#$C,d5
00019A98 0828 0000 0022             		btst	#0,obStatus(a0)
00019A9E 6700                       		beq.s	@noflip
00019AA0 4445                       		neg.w	d5
00019AA2                            
00019AA2                            	@noflip:
00019AA2 1C3C 0004                  		move.b	#4,d6
00019AA6 7600                       		moveq	#0,d3
00019AA8 7804                       		moveq	#4,d4
00019AAA 2448                       		movea.l	a0,a2
00019AAC 7202                       		moveq	#2,d1
00019AAE                            
00019AAE                            Cat_Loop:
00019AAE 4EB9 0000 FE1A             		jsr	(FindNextFreeObj).l
00019AB4 6600 0000                  			bne.w	Cat_ChkGone
00019AB8 12BC 0078                  		move.b	#id_Caterkiller,0(a1) ; load body segment object
00019ABC 1346 0024                  		move.b	d6,obRoutine(a1) ; goto Cat_BodySeg1 or Cat_BodySeg2 next
00019AC0 5406                       		addq.b	#2,d6		; alternate between the two
00019AC2 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
00019AC8 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00019ACE 337C 0280 0018             		move.w	#$280,obPriority(a1)
00019AD4 137C 0008 0014             		move.b	#8,obActWid(a1)
00019ADA 137C 00CB 0020             		move.b	#$CB,obColType(a1)
00019AE0 D445                       		add.w	d5,d2
00019AE2 3342 0008                  		move.w	d2,obX(a1)
00019AE6 3368 000C 000C             		move.w	obY(a0),obY(a1)
00019AEC 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00019AF2 1368 0022 0001             		move.b	obStatus(a0),obRender(a1)
00019AF8 137C 0008 001A             		move.b	#8,obFrame(a1)
00019AFE 234A 003C                  		move.l	a2,cat_parent(a1)
00019B02 1344 003C                  		move.b	d4,cat_parent(a1)
00019B06 5804                       		addq.b	#4,d4
00019B08 2449                       		movea.l	a1,a2
00019B0A                            
00019B0A                            	@fail:
00019B0A 51C9 FFA2                  		dbf	d1,Cat_Loop	; repeat sequence 2 more times
00019B0E                            
00019B0E 117C 0007 002A             		move.b	#7,$2A(a0)
00019B14 4228 003C                  		clr.b	cat_parent(a0)
00019B18                            
00019B18                            Cat_Head:	; Routine 2
00019B18 4A28 0022                  		tst.b	obStatus(a0)
00019B1C 6B00 0000                  		bmi.w	loc_16C96
00019B20 7000                       		moveq	#0,d0
00019B22 1028 0025                  		move.b	ob2ndRout(a0),d0
00019B26 323B 0000                  		move.w	Cat_Index2(pc,d0.w),d1
00019B2A 4EBB 1000                  		jsr	Cat_Index2(pc,d1.w)
00019B2E 1228 002B                  		move.b	$2B(a0),d1
00019B32 6A00                       		bpl.s	@display
00019B34 43F9 0000 0000             		lea	(Ani_Cat).l,a1
00019B3A 1028 0026                  		move.b	obAngle(a0),d0
00019B3E 0240 007F                  		andi.w	#$7F,d0
00019B42 5828 0026                  		addq.b	#4,obAngle(a0)
00019B46 1031 0000                  		move.b	(a1,d0.w),d0
00019B4A 6A00                       		bpl.s	@animate
00019B4C 08A8 0007 002B             		bclr	#7,$2B(a0)
00019B52 6000                       		bra.s	@display
00019B54                            
00019B54                            	@animate:
00019B54 0201 0010                  		andi.b	#$10,d1
00019B58 D001                       		add.b	d1,d0
00019B5A 1140 001A                  		move.b	d0,obFrame(a0)
00019B5E                            
00019B5E                            	@display:
00019B7C 4EF9 0000 F978             		jmp	(DisplaySprite).l
00019B82                            
00019B82                            	Cat_ChkGone:
00019B82 45F8 FC00                  		lea	(v_objstate).w,a2
00019B86 7000                       		moveq	#0,d0
00019B88 1028 0023                  		move.b	obRespawnNo(a0),d0
00019B8C 6700                       		beq.s	@delete
00019B8E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00019B94                            
00019B94                            	@delete:
00019B94 117C 000A 0024             		move.b	#$A,obRoutine(a0)	; goto Cat_Delete next
00019B9A 4E75                       		rts	
00019B9C                            ; ===========================================================================
00019B9C                            
00019B9C                            Cat_Delete:	; Routine $A
00019B9C 4EF9 0000 F9B8             		jmp	(DeleteObject).l
00019BA2                            ; ===========================================================================
00019BA2 0000                       Cat_Index2:	dc.w @wait-Cat_Index2
00019BA4 0000                       		dc.w loc_16B02-Cat_Index2
00019BA6                            ; ===========================================================================
00019BA6                            
00019BA6                            @wait:
00019BA6 5328 002A                  		subq.b	#1,$2A(a0)
00019BAA 6B00                       		bmi.s	@move
00019BAC 4E75                       		rts	
00019BAE                            ; ===========================================================================
00019BAE                            
00019BAE                            @move:
00019BAE 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00019BB2 117C 0010 002A             		move.b	#$10,$2A(a0)
00019BB8 317C FF40 0010             		move.w	#-$C0,obVelX(a0)
00019BBE 317C 0040 001C             		move.w	#$40,obAnim(a0)
00019BC4 0868 0004 002B             		bchg	#4,$2B(a0)
00019BCA 6600                       		bne.s	loc_16AFC
00019BCC 4268 0010                  		clr.w	obVelX(a0)
00019BD0 4468 001C                  		neg.w	obAnim(a0)
00019BD4                            
00019BD4                            loc_16AFC:
00019BD4 08E8 0007 002B             		bset	#7,$2B(a0)
00019BDA                            
00019BDA                            loc_16B02:
00019BDA 5328 002A                  		subq.b	#1,$2A(a0)
00019BDE 6B00                       		bmi.s	@loc_16B5E
00019BE0 4A68 0010                  			tst.w	obVelX(a0)
00019BE4 6700                       			beq.s	@notmoving
00019BE6 2428 0008                  			move.l	obX(a0),d2
00019BEA 2602                       			move.l	d2,d3
00019BEC 3028 0010                  		move.w	obVelX(a0),d0
00019BF0 0828 0000 0022             		btst	#0,obStatus(a0)
00019BF6 6700                       		beq.s	@noflip
00019BF8 4440                       		neg.w	d0
00019BFA                            
00019BFA                            	@noflip:
00019BFA 48C0                       		ext.l	d0
00019BFC E180                       		asl.l	#8,d0
00019BFE D480                       		add.l	d0,d2
00019C00 2142 0008                  		move.l	d2,obX(a0)
00019C04 4843                       			swap	d3
00019C06 B668 0008                  			cmp.w	obX(a0),d3
00019C0A 6700                       			beq.s	@notmoving
00019C0C 4EB9 0001 7EF2             			jsr	(ObjFloorDist).l
00019C12 0C41 FFF8                  			cmpi.w	#-8,d1
00019C16 6D00                       			blt.s	@loc_16B70
00019C18 0C41 000C                  			cmpi.w	#$C,d1
00019C1C 6C00                       			bge.s	@loc_16B70
00019C1E D368 000C                  			add.w	d1,obY(a0)
00019C22 7000                       		moveq	#0,d0
00019C24 1028 003C                  		move.b	cat_parent(a0),d0
00019C28 5228 003C                  		addq.b	#1,cat_parent(a0)
00019C2C 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
00019C32 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00019C36                            
00019C36                            	@notmoving:
00019C36 4E75                       		rts	
00019C38                            ; ===========================================================================
00019C38                            
00019C38                            @loc_16B5E:
00019C38 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00019C3C 117C 0007 002A             		move.b	#7,$2A(a0)
00019C42 4268 0010                  			clr.w	obVelX(a0)
00019C46 4268 001C                  			clr.w	obAnim(a0)
00019C4A 4E75                       		rts	
00019C4C                            ; ===========================================================================
00019C4C                            
00019C4C                            @loc_16B70:
00019C4C 7000                       			moveq	#0,d0
00019C4E 1028 003C                  			move.b	cat_parent(a0),d0
00019C52 11BC 0080 002C             			move.b	#$80,$2C(a0,d0)
00019C58 4468 000A                  			neg.w	obX+2(a0)
00019C5C 6700                       			beq.s	@loc_1730A
00019C5E 0828 0000 0022             			btst	#0,obStatus(a0)
00019C64 6700                       			beq.s	@loc_1730A
00019C66 5368 0008                  			subq.w	#1,obX(a0)
00019C6A 5228 003C                  			addq.b	#1,cat_parent(a0)
00019C6E 7000                       			moveq	#0,d0
00019C70 1028 003C                  			move.b	cat_parent(a0),d0
00019C74 4230 002C                  			clr.b	$2C(a0,d0)
00019C78                            	@loc_1730A:
00019C78 0868 0000 0022             			bchg	#0,obStatus(a0)
00019C7E 1168 0022 0001             			move.b	obStatus(a0),obRender(a0)
00019C84 5228 003C                  		addq.b	#1,cat_parent(a0)
00019C88 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
00019C8E 4E75                       		rts	
00019C90                            ; ===========================================================================
00019C90                            
00019C90                            Cat_BodySeg2:	; Routine 6
00019C90 2268 003C                  		movea.l	cat_parent(a0),a1
00019C94 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00019C9A 6A00                       		bpl.s	Cat_BodySeg1
00019C9C 43F9 0000 0000             		lea	(Ani_Cat).l,a1
00019CA2 1028 0026                  		move.b	obAngle(a0),d0
00019CA6 0240 007F                  		andi.w	#$7F,d0
00019CAA 5828 0026                  		addq.b	#4,obAngle(a0)
00019CAE 4A31 0004                  		tst.b	4(a1,d0.w)
00019CB2 6A00                       		bpl.s	Cat_AniBody
00019CB4 5828 0026                  		addq.b	#4,obAngle(a0)
00019CB8                            
00019CB8                            Cat_AniBody:
00019CB8 1031 0000                  		move.b	(a1,d0.w),d0
00019CBC 5000                       		addq.b	#8,d0
00019CBE 1140 001A                  		move.b	d0,obFrame(a0)
00019CC2                            
00019CC2                            Cat_BodySeg1:	; Routine 4, 8
00019CC2 2268 003C                  		movea.l	cat_parent(a0),a1
00019CC6 4A28 0022                  		tst.b	obStatus(a0)
00019CCA 6B00 0000                  		bmi.w	loc_16C90
00019CCE 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00019CD4 1169 0025 0025             		move.b	ob2ndRout(a1),ob2ndRout(a0)
00019CDA 6700 0000                  		beq.w	loc_16C64
00019CDE 3169 001C 001C             		move.w	obAnim(a1),obAnim(a0)
00019CE4 3029 0010                  		move.w	obVelX(a1),d0
00019CE8 D068 001C                  			add.w	obAnim(a0),d0
00019CEC 3140 0010                  		move.w	d0,obVelX(a0)
00019CF0 2428 0008                  		move.l	obX(a0),d2
00019CF4 2602                       		move.l	d2,d3
00019CF6 3028 0010                  		move.w	obVelX(a0),d0
00019CFA 0828 0000 0022             		btst	#0,obStatus(a0)
00019D00 6700                       		beq.s	loc_16C0C
00019D02 4440                       		neg.w	d0
00019D04                            
00019D04                            loc_16C0C:
00019D04 48C0                       		ext.l	d0
00019D06 E180                       		asl.l	#8,d0
00019D08 D480                       		add.l	d0,d2
00019D0A 2142 0008                  		move.l	d2,obX(a0)
00019D0E 4843                       		swap	d3
00019D10 B668 0008                  		cmp.w	obX(a0),d3
00019D14 6700                       		beq.s	loc_16C64
00019D16 7000                       		moveq	#0,d0
00019D18 1028 003C                  		move.b	cat_parent(a0),d0
00019D1C 1231 002C                  		move.b	$2C(a1,d0.w),d1
00019D20 0C01 0080                  		cmpi.b	#$80,d1
00019D24 6600                       		bne.s	loc_16C50
00019D26 1181 002C                  			move.b	d1,$2C(a0,d0)
00019D2A 4468 000A                  			neg.w	obX+2(a0)
00019D2E 6700                       			beq.s	locj_173E4
00019D30 0828 0000 0022             			btst	#0,obStatus(a0)
00019D36 6700                       			beq.s	locj_173E4
00019D38 0C68 FF40 0010             			cmpi.w	#-$C0,obVelX(a0)
00019D3E 6600                       			bne.s	locj_173E4
00019D40 5368 0008                  			subq.w	#1,obX(a0)
00019D44 5228 003C                  			addq.b	#1,cat_parent(a0)
00019D48 7000                       			moveq	#0,d0
00019D4A 1028 003C                  			move.b	cat_parent(a0),d0
00019D4E 4230 002C                  			clr.b	$2C(a0,d0)
00019D52                            	locj_173E4:
00019D52 0868 0000 0022             		bchg	#0,obStatus(a0)
00019D58 1168 0022 0001             		move.b	obStatus(a0),1(a0)
00019D5E 5228 003C                  		addq.b	#1,cat_parent(a0)
00019D62 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
00019D68 6000                       		bra.s	loc_16C64
00019D6A                            ; ===========================================================================
00019D6A                            
00019D6A                            loc_16C50:
00019D6A 4881                       		ext.w	d1
00019D6C D368 000C                  		add.w	d1,obY(a0)
00019D70 5228 003C                  		addq.b	#1,cat_parent(a0)
00019D74 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
00019D7A 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00019D7E                            
00019D7E                            loc_16C64:
00019D7E 0C29 000C 0024             		cmpi.b	#$C,obRoutine(a1)
00019D84 6700                       		beq.s	loc_16C90
00019D86 0C11 0027                  		cmpi.b	#id_ExplosionItem,0(a1)
00019D8A 6700                       		beq.s	loc_16C7C
00019D8C 0C29 000A 0024             		cmpi.b	#$A,obRoutine(a1)
00019D92 6600                       		bne.s	loc_16C82
00019D94                            
00019D94                            loc_16C7C:
00019D94 4229 0020                  		clr.b    $20(a1)
00019D98 117C 000A 0024             		move.b	#$A,obRoutine(a0)
00019D9E                            
00019D9E                            loc_16C82:
00019D9E 4EF9 0000 F978             		jmp	(DisplaySprite).l
00019DA4                            
00019DA4                            ; ===========================================================================
00019DA4 FE00 FE80 0180 0200        Cat_FragSpeed:	dc.w -$200, -$180, $180, $200
00019DAC                            ; ===========================================================================
00019DAC                            
00019DAC                            loc_16C90:
00019DAC 08E9 0007 0022             		bset	#7,obStatus(a1)
00019DB2                            
00019DB2                            loc_16C96:
00019DB2 7000                       		moveq	#0,d0
00019DB4 1028 0024                  		move.b	obRoutine(a0),d0
00019DB8 303B 00E8                  		move.w	Cat_FragSpeed-2(pc,d0.w),d0
00019DBC 0828 0000 0022             		btst	#0,obStatus(a0)
00019DC2 6700                       		beq.s	loc_16CAA
00019DC4 4440                       		neg.w	d0
00019DC6                            
00019DC6                            loc_16CAA:
00019DC6 3140 0010                  		move.w	d0,obVelX(a0)
00019DCA 317C FC00 0012             		move.w	#-$400,obVelY(a0)
00019DD0 117C 000C 0024             		move.b	#$C,obRoutine(a0)
00019DD6 0228 00F8 001A             		andi.b	#$F8,obFrame(a0)
00019DDC                            
00019DDC                            loc_16CC0:	; Routine $C
00019DDC 4EB9 0000 F92C             		jsr	(ObjectFall).l
00019DE2 4A68 0012                  		tst.w	obVelY(a0)
00019DE6 6B00                       		bmi.s	loc_16CE0
00019DE8 4EB9 0001 7EF2             		jsr	(ObjFloorDist).l
00019DEE 4A41                       		tst.w	d1
00019DF0 6A00                       		bpl.s	loc_16CE0
00019DF2 D368 000C                  		add.w	d1,obY(a0)
00019DF6 317C FC00 0012             		move.w	#-$400,obVelY(a0)
00019DFC                            
00019DFC                            loc_16CE0:
00019DFC 4A28 0001                  		tst.b	obRender(a0)
00019E00 6A00 FD80                  		bpl.w	Cat_ChkGone
00019E04 4EF9 0000 F978             		jmp	(DisplaySprite).l
00019E04 4EF9 0000 F978             		jmp	(DisplaySprite).l
00019E0A                            		include	"_anim\Caterkiller.asm"
00019E0A                            ; ---------------------------------------------------------------------------
00019E0A                            ; Animation script - Caterkiller enemy (uses non-standard format)
00019E0A                            ; ---------------------------------------------------------------------------
00019E0A 0000 0000 0000 0000 0000+  Ani_Cat:	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
00019E1A 0101 0101 0101 0202 0202+  		dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
00019E2A 0404 0404 0404 0505 0505+  		dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
00019E3A 0606 0707 0707 0707 0707+  		dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
00019E4A 0707 0707 0707 0707 0707+  		dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
00019E5A 0606 0606 0606 0505 0505+  		dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
00019E6A 0403 0303 0303 0202 0202+  		dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
00019E7A 0101 0000 0000 0000 0000+  		dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
00019E8A                            		even
00019E8A                            		even
00019E8A                            Map_Cat:	include	"_maps\Caterkiller.asm"
00019E8A                            ; ---------------------------------------------------------------------------
00019E8A                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00019E8A                            ; ---------------------------------------------------------------------------
00019E8A                            Map_Cat_internal:
00019E8A 0000                       		dc.w byte_16D9E-Map_Cat_internal
00019E8C 0000                       		dc.w byte_16DA4-Map_Cat_internal
00019E8E 0000                       		dc.w byte_16DAA-Map_Cat_internal
00019E90 0000                       		dc.w byte_16DB0-Map_Cat_internal
00019E92 0000                       		dc.w byte_16DB6-Map_Cat_internal
00019E94 0000                       		dc.w byte_16DBC-Map_Cat_internal
00019E96 0000                       		dc.w byte_16DC2-Map_Cat_internal
00019E98 0000                       		dc.w byte_16DC8-Map_Cat_internal
00019E9A 0000                       		dc.w byte_16DCE-Map_Cat_internal
00019E9C 0000                       		dc.w byte_16DD4-Map_Cat_internal
00019E9E 0000                       		dc.w byte_16DDA-Map_Cat_internal
00019EA0 0000                       		dc.w byte_16DE0-Map_Cat_internal
00019EA2 0000                       		dc.w byte_16DE6-Map_Cat_internal
00019EA4 0000                       		dc.w byte_16DEC-Map_Cat_internal
00019EA6 0000                       		dc.w byte_16DF2-Map_Cat_internal
00019EA8 0000                       		dc.w byte_16DF8-Map_Cat_internal
00019EAA 0000                       		dc.w byte_16DFE-Map_Cat_internal
00019EAC 0000                       		dc.w byte_16E04-Map_Cat_internal
00019EAE 0000                       		dc.w byte_16E0A-Map_Cat_internal
00019EB0 0000                       		dc.w byte_16E10-Map_Cat_internal
00019EB2 0000                       		dc.w byte_16E16-Map_Cat_internal
00019EB4 0000                       		dc.w byte_16E1C-Map_Cat_internal
00019EB6 0000                       		dc.w byte_16E22-Map_Cat_internal
00019EB8 0000                       		dc.w byte_16E28-Map_Cat_internal
00019EBA 01                         byte_16D9E:	dc.b 1
00019EBB F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
00019EC0 01                         byte_16DA4:	dc.b 1
00019EC1 F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
00019EC6 01                         byte_16DAA:	dc.b 1
00019EC7 F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
00019ECC 01                         byte_16DB0:	dc.b 1
00019ECD EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
00019ED2 01                         byte_16DB6:	dc.b 1
00019ED3 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
00019ED8 01                         byte_16DBC:	dc.b 1
00019ED9 ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
00019EDE 01                         byte_16DC2:	dc.b 1
00019EDF EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
00019EE4 01                         byte_16DC8:	dc.b 1
00019EE5 EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
00019EEA 01                         byte_16DCE:	dc.b 1
00019EEB F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00019EF0 01                         byte_16DD4:	dc.b 1
00019EF1 F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
00019EF6 01                         byte_16DDA:	dc.b 1
00019EF7 F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
00019EFC 01                         byte_16DE0:	dc.b 1
00019EFD F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
00019F02 01                         byte_16DE6:	dc.b 1
00019F03 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
00019F08 01                         byte_16DEC:	dc.b 1
00019F09 F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
00019F0E 01                         byte_16DF2:	dc.b 1
00019F0F F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
00019F14 01                         byte_16DF8:	dc.b 1
00019F15 F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
00019F1A 01                         byte_16DFE:	dc.b 1
00019F1B F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
00019F20 01                         byte_16E04:	dc.b 1
00019F21 F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
00019F26 01                         byte_16E0A:	dc.b 1
00019F27 F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
00019F2C 01                         byte_16E10:	dc.b 1
00019F2D EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
00019F32 01                         byte_16E16:	dc.b 1
00019F33 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
00019F38 01                         byte_16E1C:	dc.b 1
00019F39 ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
00019F3E 01                         byte_16E22:	dc.b 1
00019F3F EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
00019F44 01                         byte_16E28:	dc.b 1
00019F45 EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
00019F4A                            		even
00019F4A                            		even
00019F4A                            
00019F4A                            		include	"_incObj\79 Lamppost.asm"
00019F4A                            ; ---------------------------------------------------------------------------
00019F4A                            ; Object 79 - lamppost
00019F4A                            ; ---------------------------------------------------------------------------
00019F4A                            
00019F4A                            Lamppost:
00019F4A 7000                       		moveq	#0,d0
00019F4C 1028 0024                  		move.b	obRoutine(a0),d0
00019F50 323B 0000                  		move.w	Lamp_Index(pc,d0.w),d1
00019F54 4EBB 1000                  		jsr	Lamp_Index(pc,d1.w)
00019F58 4EF9 0001 18EE             		jmp	(RememberState).l
00019F5E                            ; ===========================================================================
00019F5E 0000                       Lamp_Index:	dc.w Lamp_Main-Lamp_Index
00019F60 0000                       		dc.w Lamp_Blue-Lamp_Index
00019F62 0000                       		dc.w Lamp_Finish-Lamp_Index
00019F64 0000                       		dc.w Lamp_Twirl-Lamp_Index
00019F66                            
00019F66 =00000030                  lamp_origX:	equ $30		; original x-axis position
00019F66 =00000032                  lamp_origY:	equ $32		; original y-axis position
00019F66 =00000036                  lamp_time:	equ $36		; length of time to twirl the lamp
00019F66                            ; ===========================================================================
00019F66                            
00019F66                            Lamp_Main:	; Routine 0
00019F66 5428 0024                  		addq.b	#2,obRoutine(a0)
00019F6A 217C 0000 0000 0004        		move.l	#Map_Lamp,obMap(a0)
00019F72 317C 056F 0002             		move.w	#($ADE0/$20),2(a0)
00019F78 117C 0004 0001             		move.b	#4,obRender(a0)
00019F7E 117C 0008 0014             		move.b	#8,obActWid(a0)
00019F84 317C 0280 0018             		move.w	#$280,obPriority(a0)
00019F8A 45F8 FC00                  		lea	(v_objstate).w,a2
00019F8E 7000                       		moveq	#0,d0
00019F90 1028 0023                  		move.b	obRespawnNo(a0),d0
00019F94 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00019F9A 0832 0000 0002             		btst	#0,2(a2,d0.w)
00019FA0 6600                       		bne.s	@red
00019FA2 1238 FE30                  		move.b	(v_lastlamp).w,d1
00019FA6 0201 007F                  		andi.b	#$7F,d1
00019FAA 1428 0028                  		move.b	obSubtype(a0),d2 ; get lamppost number
00019FAE 0202 007F                  		andi.b	#$7F,d2
00019FB2 B202                       		cmp.b	d2,d1		; is this a "new" lamppost?
00019FB4 6500                       		bcs.s	Lamp_Blue	; if yes, branch
00019FB6                            
00019FB6                            @red:
00019FB6 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00019FBC 117C 0004 0024             		move.b	#4,obRoutine(a0) ; goto Lamp_Finish next
00019FC2 117C 0003 001A             		move.b	#3,obFrame(a0)
00019FC8 4E75                       		rts	
00019FCA                            
00019FCA                            ; ===========================================================================
00019FCA                            
00019FCA                            Lamp_Blue:	; Routine 2
00019FCA 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
00019FCE 6600 0000                  		bne.w	@donothing	; if yes, branch
00019FD2 4A38 F7C8                  		tst.b	(f_lockmulti).w
00019FD6 6B00 0000                  		bmi.w	@donothing
00019FDA 1238 FE30                  		move.b	(v_lastlamp).w,d1
00019FDE 0201 007F                  		andi.b	#$7F,d1
00019FE2 1428 0028                  		move.b	obSubtype(a0),d2
00019FE6 0202 007F                  		andi.b	#$7F,d2
00019FEA B202                       		cmp.b	d2,d1		; is this a "new" lamppost?
00019FEC 6500                       		bcs.s	@chkhit		; if yes, branch
00019FEE 45F8 FC00                  		lea	(v_objstate).w,a2
00019FF2 7000                       		moveq	#0,d0
00019FF4 1028 0023                  		move.b	obRespawnNo(a0),d0
00019FF8 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00019FFE 117C 0004 0024             		move.b	#4,obRoutine(a0)
0001A004 117C 0003 001A             		move.b	#3,obFrame(a0)
0001A00A 6000 0000                  		bra.w	@donothing
0001A00E                            ; ===========================================================================
0001A00E                            
0001A00E                            @chkhit:
0001A00E 3038 D008                  		move.w	(v_player+obX).w,d0
0001A012 9068 0008                  		sub.w	obX(a0),d0
0001A016 5040                       		addq.w	#8,d0
0001A018 0C40 0010                  		cmpi.w	#$10,d0
0001A01C 6400 0000                  		bcc.w	@donothing
0001A020 3038 D00C                  		move.w	(v_player+obY).w,d0
0001A024 9068 000C                  		sub.w	obY(a0),d0
0001A028 0640 0040                  		addi.w	#$40,d0
0001A02C 0C40 0068                  		cmpi.w	#$68,d0
0001A030 6400                       		bcc.s	@donothing
0001A032                            
0001A03C 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A040 4EB9 0000 FE04             		jsr	(FindFreeObj).l
0001A046 6600                       		bne.s	@fail
0001A048 12BC 0079                  		move.b	#id_Lamppost,0(a1)	; load twirling	lamp object
0001A04C 137C 0006 0024             		move.b	#6,obRoutine(a1) ; goto Lamp_Twirl next
0001A052 3368 0008 0030             		move.w	obX(a0),lamp_origX(a1)
0001A058 3368 000C 0032             		move.w	obY(a0),lamp_origY(a1)
0001A05E 0469 0018 0032             		subi.w	#$18,lamp_origY(a1)
0001A064 237C 0000 0000 0004        		move.l	#Map_Lamp,obMap(a1)
0001A06C 337C 056F 0002             		move.w	#($ADE0/$20),2(a1)
0001A072 137C 0004 0001             		move.b	#4,obRender(a1)
0001A078 137C 0008 0014             		move.b	#8,obActWid(a1)
0001A07E 337C 0200 0018             		move.w	#$200,obPriority(a1)
0001A084 137C 0002 001A             		move.b	#2,obFrame(a1)	; use "ball only" frame
0001A08A 337C 0020 0036             		move.w	#$20,lamp_time(a1)
0001A090                            
0001A090                            	@fail:
0001A090 117C 0001 001A             		move.b	#1,obFrame(a0)	; use "post only" frame
0001A096 6100 0000                  		bsr.w	Lamp_StoreInfo
0001A09A 45F8 FC00                  		lea	(v_objstate).w,a2
0001A09E 7000                       		moveq	#0,d0
0001A0A0 1028 0023                  		move.b	obRespawnNo(a0),d0
0001A0A4 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001A0AA                            
0001A0AA                            	@donothing:
0001A0AA 4E75                       		rts	
0001A0AC                            ; ===========================================================================
0001A0AC                            
0001A0AC                            Lamp_Finish:	; Routine 4	
0001A0AC 4E75                       		rts	
0001A0AE                            ; ===========================================================================
0001A0AE                            
0001A0AE                            Lamp_Twirl:	; Routine 6
0001A0AE 5368 0036                  		subq.w	#1,lamp_time(a0) ; decrement timer
0001A0B2 6A00                       		bpl.s	@continue	; if time remains, keep twirling
0001A0B4 117C 0004 0024             		move.b	#4,obRoutine(a0) ; goto Lamp_Finish next
0001A0BA                            
0001A0BA                            	@continue:
0001A0BA 1028 0026                  		move.b	obAngle(a0),d0
0001A0BE 0428 0010 0026             		subi.b	#$10,obAngle(a0)
0001A0C4 0400 0040                  		subi.b	#$40,d0
0001A0C8 4EB9 0000 3A32             		jsr	(CalcSine).l
0001A0CE C3FC 0C00                  		muls.w	#$C00,d1
0001A0D2 4841                       		swap	d1
0001A0D4 D268 0030                  		add.w	lamp_origX(a0),d1
0001A0D8 3141 0008                  		move.w	d1,obX(a0)
0001A0DC C1FC 0C00                  		muls.w	#$C00,d0
0001A0E0 4840                       		swap	d0
0001A0E2 D068 0032                  		add.w	lamp_origY(a0),d0
0001A0E6 3140 000C                  		move.w	d0,obY(a0)
0001A0EA 4E75                       		rts	
0001A0EC                            ; ===========================================================================
0001A0EC                            ; ---------------------------------------------------------------------------
0001A0EC                            ; Subroutine to	store information when you hit a lamppost
0001A0EC                            ; ---------------------------------------------------------------------------
0001A0EC                            
0001A0EC                            Lamp_StoreInfo:
0001A0EC 11E8 0028 FE30             		move.b	obSubtype(a0),(v_lastlamp).w 	; lamppost number
0001A0F2 11F8 FE30 FE31             		move.b	(v_lastlamp).w,($FFFFFE31).w
0001A0F8 31E8 0008 FE32             		move.w	obX(a0),($FFFFFE32).w		; x-position
0001A0FE 31E8 000C FE34             		move.w	obY(a0),($FFFFFE34).w		; y-position
0001A104 31F8 FE20 FE36             		move.w	(v_rings).w,($FFFFFE36).w 	; rings
0001A10A 11F8 FE1B FE54             		move.b	(v_lifecount).w,($FFFFFE54).w 	; lives
0001A110 21F8 FE22 FE38             		move.l	(v_time).w,($FFFFFE38).w 	; time
0001A116 11F8 F742 FE3C             		move.b	(v_dle_routine).w,($FFFFFE3C).w ; routine counter for dynamic level mod
0001A11C 31F8 F72E FE3E             		move.w	(v_limitbtm2).w,($FFFFFE3E).w 	; lower y-boundary of level
0001A122 31F8 F700 FE40             		move.w	(v_screenposx).w,($FFFFFE40).w 	; screen x-position
0001A128 31F8 F704 FE42             		move.w	(v_screenposy).w,($FFFFFE42).w 	; screen y-position
0001A12E 31F8 F708 FE44             		move.w	(v_bgscreenposx).w,($FFFFFE44).w ; bg position
0001A134 31F8 F70C FE46             		move.w	(v_bgscreenposy).w,($FFFFFE46).w 	; bg position
0001A13A 31F8 F710 FE48             		move.w	(v_bg2screenposx).w,($FFFFFE48).w 	; bg position
0001A140 31F8 F714 FE4A             		move.w	(v_bg2screenposy).w,($FFFFFE4A).w 	; bg position
0001A146 31F8 F718 FE4C             		move.w	(v_bg3screenposx).w,($FFFFFE4C).w 	; bg position
0001A14C 31F8 F71C FE4E             		move.w	(v_bg3screenposy).w,($FFFFFE4E).w 	; bg position
0001A152 31F8 F648 FE50             		move.w	(v_waterpos2).w,($FFFFFE50).w 	; water height
0001A158 11F8 F64D FE52             		move.b	(v_wtr_routine).w,($FFFFFE52).w ; rountine counter for water
0001A15E 11F8 F64E FE53             		move.b	(f_wtr_state).w,($FFFFFE53).w 	; water direction
0001A164 11F8 F5C3 FE54             		move.b	(f_emeraldm).w,($FFFFFE54).w 	; emerald monitor
0001A16A 4E75                       		rts	
0001A16C                            
0001A16C                            ; ---------------------------------------------------------------------------
0001A16C                            ; Subroutine to	load stored info when you start	a level	from a lamppost
0001A16C                            ; ---------------------------------------------------------------------------
0001A16C                            
0001A16C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A16C                            
0001A16C                            
0001A16C                            Lamp_LoadInfo:
0001A16C 11F8 FE31 FE30             		move.b	($FFFFFE31).w,(v_lastlamp).w
0001A172 31F8 FE32 D008             		move.w	($FFFFFE32).w,(v_player+obX).w
0001A178 31F8 FE34 D00C             		move.w	($FFFFFE34).w,(v_player+obY).w
0001A17E 31F8 FE36 FE20             		move.w	($FFFFFE36).w,(v_rings).w
0001A184 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,(v_lifecount).w
0001A18A 4278 FE20                  		clr.w	(v_rings).w
0001A18E 4238 FE1B                  		clr.b	(v_lifecount).w
0001A192 21F8 FE38 FE22             		move.l	($FFFFFE38).w,(v_time).w
0001A198 11FC 003B FE25             		move.b	#59,(v_timecent).w
0001A19E 5338 FE24                  		subq.b	#1,(v_timesec).w
0001A1A2 11F8 FE3C F742             		move.b	($FFFFFE3C).w,(v_dle_routine).w
0001A1A8 11F8 FE52 F64D             		move.b	($FFFFFE52).w,(v_wtr_routine).w
0001A1AE 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,(v_limitbtm2).w
0001A1B4 31F8 FE3E F726             		move.w	($FFFFFE3E).w,(v_limitbtm1).w
0001A1BA 31F8 FE40 F700             		move.w	($FFFFFE40).w,(v_screenposx).w
0001A1C0 31F8 FE42 F704             		move.w	($FFFFFE42).w,(v_screenposy).w
0001A1C6 31F8 FE44 F708             		move.w	($FFFFFE44).w,(v_bgscreenposx).w
0001A1CC 31F8 FE46 F70C             		move.w	($FFFFFE46).w,(v_bgscreenposy).w
0001A1D2 31F8 FE48 F710             		move.w	($FFFFFE48).w,(v_bg2screenposx).w
0001A1D8 31F8 FE4A F714             		move.w	($FFFFFE4A).w,(v_bg2screenposy).w
0001A1DE 31F8 FE4C F718             		move.w	($FFFFFE4C).w,(v_bg3screenposx).w
0001A1E4 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,(v_bg3screenposy).w
0001A1EA 11F8 FE54 F5C3             		move.b	($FFFFFE54).w,(f_emeraldm).w	;emerald monitor count
0001A1F0 0C38 0001 FE10             		cmpi.b	#1,(v_zone).w	; is this Labyrinth Zone?
0001A1F6 6600                       		bne.s	@notlabyrinth	; if not, branch
0001A1F8                            
0001A1F8 31F8 FE50 F648             		move.w	($FFFFFE50).w,(v_waterpos2).w
0001A1FE 11F8 FE52 F64D             		move.b	($FFFFFE52).w,(v_wtr_routine).w
0001A204 11F8 FE53 F64E             		move.b	($FFFFFE53).w,(f_wtr_state).w
0001A20A                            
0001A20A                            	@notlabyrinth:
0001A20A 4A38 FE30                  		tst.b	(v_lastlamp).w
0001A20E 6A00                       		bpl.s	locret_170F6
0001A210 3038 FE32                  		move.w	($FFFFFE32).w,d0
0001A214 0440 00A0                  		subi.w	#$A0,d0
0001A218 31C0 F728                  		move.w	d0,(v_limitleft2).w
0001A21C                            
0001A21C                            locret_170F6:
0001A21C 4E75                       		rts	
0001A21C 4E75                       		rts	
0001A21E                            Map_Lamp:	include	"_maps\Lamppost.asm"
0001A21E                            ; --------------------------------------------------------------------------------
0001A21E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001A21E                            ; --------------------------------------------------------------------------------
0001A21E                            
0001A21E                            SME_JfaKr:	
0001A21E 0000 0000                  		dc.w SME_JfaKr_A-SME_JfaKr, SME_JfaKr_3D-SME_JfaKr	
0001A222 0000 0000                  		dc.w SME_JfaKr_66-SME_JfaKr, SME_JfaKr_71-SME_JfaKr	
0001A226 0000                       		dc.w SME_JfaKr_A4-SME_JfaKr	
0001A228 0A                         SME_JfaKr_A:	dc.b $A	
0001A229 E401 0000 F8               		dc.b $E4, 1, 0, 0, $F8	
0001A22E E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001A233 D401 0006 F8               		dc.b $D4, 1, 0, 6, $F8	
0001A238 D401 0806 00               		dc.b $D4, 1, 8, 6, 0	
0001A23D F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001A242 F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001A247 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001A24C 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001A251 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001A256 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001A25B 08                         SME_JfaKr_3D:	dc.b 8	
0001A25C E401 2000 F8               		dc.b $E4, 1, $20, 0, $F8	
0001A261 E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001A266 F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001A26B F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001A270 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001A275 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001A27A 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001A27F 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001A284 02                         SME_JfaKr_66:	dc.b 2	
0001A285 F801 0008 F8               		dc.b $F8, 1, 0, 8, $F8	
0001A28A F801 0808 00               		dc.b $F8, 1, 8, 8, 0	
0001A28F 0A                         SME_JfaKr_71:	dc.b $A	
0001A290 E401 2000 F8               		dc.b $E4, 1, $20, 0, $F8	
0001A295 E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001A29A F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001A29F F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001A2A4 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001A2A9 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001A2AE 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001A2B3 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001A2B8 D401 0008 F8               		dc.b $D4, 1, 0, 8, $F8	
0001A2BD D401 0808 00               		dc.b $D4, 1, 8, 8, 0	
0001A2C2 0A                         SME_JfaKr_A4:	dc.b $A	
0001A2C3 E401 2000 F8               		dc.b $E4, 1, $20, 0, $F8	
0001A2C8 E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001A2CD F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001A2D2 F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001A2D7 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001A2DC 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001A2E1 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001A2E6 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001A2EB D401 0008 F8               		dc.b $D4, 1, 0, 8, $F8	
0001A2F0 D401 2808 00               		dc.b $D4, 1, $28, 8, 0	
0001A2F6 00                         		even
0001A2F6 00                         		even
0001A2F6                            		include	"_incObj\7D Hidden Bonuses.asm"
0001A2F6                            ; ---------------------------------------------------------------------------
0001A2F6                            ; Object 7D - hidden points at the end of a level
0001A2F6                            ; ---------------------------------------------------------------------------
0001A2F6                            
0001A2F6                            HiddenBonus:
0001A2F6 7000                       		moveq	#0,d0
0001A2F8 1028 0024                  		move.b	obRoutine(a0),d0
0001A2FC 323B 0000                  		move.w	Bonus_Index(pc,d0.w),d1
0001A300 4EFB 1000                  		jmp	Bonus_Index(pc,d1.w)
0001A304                            ; ===========================================================================
0001A304 0000                       Bonus_Index:	dc.w Bonus_Main-Bonus_Index
0001A306 0000                       		dc.w Bonus_Display-Bonus_Index
0001A308                            
0001A308 =00000030                  bonus_timelen:	equ $30		; length of time to display bonus sprites
0001A308                            ; ===========================================================================
0001A308                            
0001A308                            Bonus_Main:	; Routine 0
0001A308 7410                       		moveq	#$10,d2
0001A30A 3602                       		move.w	d2,d3
0001A30C D643                       		add.w	d3,d3
0001A30E 43F8 D000                  		lea	(v_player).w,a1
0001A312 3029 0008                  		move.w	obX(a1),d0
0001A316 9068 0008                  		sub.w	obX(a0),d0
0001A31A D042                       		add.w	d2,d0
0001A31C B043                       		cmp.w	d3,d0
0001A31E 6400                       		bcc.s	bonu_chkdel
0001A320 3229 000C                  		move.w	obY(a1),d1
0001A324 9268 000C                  		sub.w	obY(a0),d1
0001A328 D242                       		add.w	d2,d1
0001A32A B243                       		cmp.w	d3,d1
0001A32C 6400                       		bcc.s	bonu_chkdel
0001A32E 4A78 FE08                  		tst.w	(v_debuguse).w
0001A332 6600                       		bne.s	bonu_chkdel
0001A334 4A38 F7CD                  		tst.b	(f_bigring).w
0001A338 6600                       		bne.s	bonu_chkdel
0001A33A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A33E 217C 0000 0000 0004        		move.l	#Map_Bonus,obMap(a0)
0001A346 317C 84B6 0002             		move.w	#$84B6,obGfx(a0)
0001A34C 0028 0004 0001             		ori.b	#4,obRender(a0)
0001A352 317C 0000 0018             		move.w	#0,obPriority(a0)
0001A358 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001A35E 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
0001A364 317C 0077 0030             		move.w	#119,bonus_timelen(a0) ; set display time to 2 seconds
0001A374 7000                       		moveq	#0,d0
0001A376 1028 0028                  		move.b	obSubtype(a0),d0
0001A37A D040                       		add.w	d0,d0
0001A37C 303B 0000                  		move.w	obj7d_points(pc,d0.w),d0 ; load bonus points array
0001A380 4EB9 0000 0000             		jsr	(AddPoints).l
0001A386                            
0001A386                            bonu_chkdel:
0001A3A2 4E75                       		rts	
0001A3A4                            
0001A3A4                            	@delete:
0001A3A4 4EF9 0000 F9B8             		jmp	(DeleteObject).l
0001A3AA                            
0001A3AA                            ; ===========================================================================
0001A3AA 0000                       obj7d_points:	dc.w 0			; Bonus	points array
0001A3AC 03E8                       		dc.w 1000
0001A3AE 0064                       		dc.w 100
0001A3B0 000A                       		dc.w 10
0001A3B2                            ; ===========================================================================
0001A3B2                            
0001A3B2                            Bonus_Display:	; Routine 2
0001A3B2 5368 0030                  		subq.w	#1,bonus_timelen(a0) ; decrement display time
0001A3B6 6B00                       		bmi.s	Bonus_Display_Delete		; if time is zero, branch
0001A3D4 4EF9 0000 F978             		jmp	(DisplaySprite).l
0001A3DA                            
0001A3DA                            Bonus_Display_Delete:	
0001A3DA 4EF9 0000 F9B8             		jmp	(DeleteObject).l
0001A3DA 4EF9 0000 F9B8             		jmp	(DeleteObject).l
0001A3E0                            Map_Bonus:	include	"_maps\Hidden Bonuses.asm"
0001A3E0                            ; ---------------------------------------------------------------------------
0001A3E0                            ; Sprite mappings - hidden points at the end of	a level
0001A3E0                            ; ---------------------------------------------------------------------------
0001A3E0                            Map_Bonus_internal:
0001A3E0 0000                       		dc.w @blank-Map_Bonus_internal
0001A3E2 0000                       		dc.w @10000-Map_Bonus_internal
0001A3E4 0000                       		dc.w @1000-Map_Bonus_internal
0001A3E6 0000                       		dc.w @100-Map_Bonus_internal
0001A3E8 00                         @blank:		dc.b 0
0001A3E9 01                         @10000:		dc.b 1
0001A3EA F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0001A3EF 01                         @1000:		dc.b 1
0001A3F0 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0001A3F5 01                         @100:		dc.b 1
0001A3F6 F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
0001A3FC 00                         		even
0001A3FC 00                         		even
0001A3FC                            
0001A3FC                            		include	"_incObj\8A Credits.asm"
0001A3FC                            ; ---------------------------------------------------------------------------
0001A3FC                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
0001A3FC                            ; ---------------------------------------------------------------------------
0001A3FC                            
0001A3FC                            CreditsText:
0001A3FC 7000                       		moveq	#0,d0
0001A3FE 1028 0024                  		move.b	obRoutine(a0),d0
0001A402 323B 0000                  		move.w	Cred_Index(pc,d0.w),d1
0001A406 4EFB 1000                  		jmp	Cred_Index(pc,d1.w)
0001A40A                            ; ===========================================================================
0001A40A 0000                       Cred_Index:	dc.w Cred_Main-Cred_Index
0001A40C 0000                       		dc.w Cred_Display-Cred_Index
0001A40E                            ; ===========================================================================
0001A40E                            
0001A40E                            Cred_Main:	; Routine 0
0001A40E 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A412 317C 0120 0008             		move.w	#$120,obX(a0)
0001A418 317C 00F0 000A             		move.w	#$F0,obScreenY(a0)
0001A41E 217C 0000 0000 0004        		move.l	#Map_Cred,obMap(a0)
0001A426 317C 05A0 0002             		move.w	#$5A0,obGfx(a0)
0001A42C 3038 FFF4                  		move.w	(v_creditsnum).w,d0 ; load credits index number
0001A430 1140 001A                  		move.b	d0,obFrame(a0)	; display appropriate sprite
0001A434 117C 0000 0001             		move.b	#0,obRender(a0)
0001A43A 317C 0000 0018             		move.w	#0,obPriority(a0)
0001A440                            
0001A440 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w ; is the mode #4 (title screen)?
0001A446 6600                       		bne.s	Cred_Display	; if not, branch
0001A448                            
0001A448 317C 00A6 0002             		move.w	#$A6,obGfx(a0)
0001A44E 117C 000A 001A             		move.b	#$A,obFrame(a0)	; display "SONIC TEAM PRESENTS"
0001A454 4A38 FFE3                  		tst.b	(f_creditscheat).w ; is hidden credits cheat on?
0001A458 6700                       		beq.s	Cred_Display	; if not, branch
0001A45A 0C38 0072 F604             		cmpi.b	#btnABC+btnDn,(v_jpadhold1).w ; is A+B+C+Down being pressed? ($72)
0001A460 6600                       		bne.s	Cred_Display	; if not, branch
0001A462 31FC 0EEE FBC0             		move.w	#cWhite,(v_pal_dry_dup+$40).w ; 3rd palette, 1st entry = white
0001A468 31FC 0880 FBC2             		move.w	#$880,(v_pal_dry_dup+$42).w ; 3rd palette, 2nd entry = cyan
0001A46E 4EF9 0000 F9B8             		jmp	(DeleteObject).l
0001A474                            ; ===========================================================================
0001A474                            
0001A474                            Cred_Display:	; Routine 2
0001A474 4EF9 0000 F978             		jmp	DisplaySprite
0001A474 4EF9 0000 F978             		jmp	DisplaySprite
0001A47A                            Map_Cred:	include	"_maps\Credits.asm"
0001A47A                            ; ---------------------------------------------------------------------------
0001A47A                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
0001A47A                            ; ---------------------------------------------------------------------------
0001A47A                            Map_Cred_internal:
0001A47A 0000                       		dc.w @staff-Map_Cred_internal
0001A47C 0000                       		dc.w @gameplan-Map_Cred_internal
0001A47E 0000                       		dc.w @program-Map_Cred_internal
0001A480 0000                       		dc.w @character-Map_Cred_internal
0001A482 0000                       		dc.w @design-Map_Cred_internal
0001A484 0000                       		dc.w @soundproduce-Map_Cred_internal
0001A486 0000                       		dc.w @soundprogram-Map_Cred_internal
0001A488 0000                       		dc.w @thanks-Map_Cred_internal
0001A48A 0000                       		dc.w @presentedby-Map_Cred_internal
0001A48C 0000                       		dc.w @tryagain-Map_Cred_internal
0001A48E 0000                       		dc.w @sonicteam-Map_Cred_internal
0001A490 0E                         @staff:		dc.b $E			 ; SONIC TEAM STAFF
0001A491 F805 002E 88               		dc.b $F8, 5, 0,	$2E, $88
0001A496 F805 0026 98               		dc.b $F8, 5, 0,	$26, $98
0001A49B F805 001A A8               		dc.b $F8, 5, 0,	$1A, $A8
0001A4A0 F801 0046 B8               		dc.b $F8, 1, 0,	$46, $B8
0001A4A5 F805 001E C0               		dc.b $F8, 5, 0,	$1E, $C0
0001A4AA F805 003E D8               		dc.b $F8, 5, 0,	$3E, $D8
0001A4AF F805 000E E8               		dc.b $F8, 5, 0,	$E, $E8
0001A4B4 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001A4B9 F809 0008 08               		dc.b $F8, 9, 0,	8, 8
0001A4BE F805 002E 28               		dc.b $F8, 5, 0,	$2E, $28
0001A4C3 F805 003E 38               		dc.b $F8, 5, 0,	$3E, $38
0001A4C8 F805 0004 48               		dc.b $F8, 5, 0,	4, $48
0001A4CD F805 005C 58               		dc.b $F8, 5, 0,	$5C, $58
0001A4D2 F805 005C 68               		dc.b $F8, 5, 0,	$5C, $68
0001A4D7 0E                         @gameplan:	dc.b $E	;  GAME PLAN CAROL YAS | GAME PLAN SORRA    
0001A4D8 9005 0000 90               		dc.b $90, 5, 0, 0, $90		; G
0001A4DD 9005 0004 A0               		dc.b $90, 5, 0, 4, $A0		; A
0001A4E2 9009 0008 B0               		dc.b $90, 9, 0, 8, $B0		; M
0001A4E7 9005 000E C4               		dc.b $90, 5, 0, $0E, $C4	; E
0001A4EC 9000 0060 0C               		dc.b $90, 0, 0, $60, $C    ;Space
0001A4F1 9005 0012 E4               		dc.b $90, 5, 0, $12, $E4	; P
0001A4F6 9005 0016 F4               		dc.b $90, 5, 0, $16, $F4	; L
0001A4FB 9005 0004 04               		dc.b $90, 5, 0, 4, $4		; A
0001A500 9005 001A 14               		dc.b $90, 5, 0, $1A, $14	; N
0001A505                            
0001A505 B805 002E C0               		dc.b $B8, 5, 0, $2E, $C0	; S
0001A50A B805 0026 D0               		dc.b $B8, 5, 0, $26, $D0	; O
0001A50F B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
0001A514 B805 0022 F0               		dc.b $B8, 5, 0, $22, $F0	; R
0001A519 B805 0004 00               		dc.b $B8, 5, 0, 4, $0		; A
0001A51E 1B                         @program:	dc.b $1B	;  CHARACTER DESIGN BIGISLAND | PROGRAM ANGELKOR INVISIBLE SUN  
0001A51F 9005 0012 90               		dc.b $90, 5, 0, $12, $90	; P
0001A524 9005 0022 A0               		dc.b $90, 5, 0, $22, $A0	; R
0001A529 9005 0026 B0               		dc.b $90, 5, 0, $26, $B0	; O
0001A52E 9005 0000 C0               		dc.b $90, 5, 0, 0, $C0		; G
0001A533 9005 0022 D0               		dc.b $90, 5, 0, $22, $D0	; R
0001A538 9005 0004 E0               		dc.b $90, 5, 0, 4, $E0		; A
0001A53D 9009 0008 F0               		dc.b $90, 9, 0, 8, $F0		; M
0001A542                            
0001A542 B805 0004 C0               		dc.b $B8, 5, 0, 4, $C0		; A
0001A547 B805 001A D0               		dc.b $B8, 5, 0, $1A, $D0	; N
0001A54C B805 0000 E0               		dc.b $B8, 5, 0, 0, $E0		; G
0001A551 B805 000E F0               		dc.b $B8, 5, 0, $0E, $F0	; E
0001A556 B805 0016 00               		dc.b $B8, 5, 0, $16, $0	; L
0001A55B B805 0058 10               		dc.b $B8, 5, 0, $58, $10	; K
0001A560 B805 0026 20               		dc.b $B8, 5, 0, $26, $20	; O
0001A565 B805 0022 30               		dc.b $B8, 5, 0, $22, $30	; R
0001A56A                            
0001A56A D801 0046 C0               		dc.b $D8, 1, 0, $46, $C0	; I
0001A56F D805 001A C8               		dc.b $D8, 5, 0, $1A, $C8	; N
0001A574                            
0001A574 D801 0046 E8               		dc.b $D8, 1, 0, $46, $E8	; I
0001A579 D805 002E F0               		dc.b $D8, 5, 0, $2E, $F0	; S
0001A57E D801 0046 00               		dc.b $D8, 1, 0, $46, $0	; I
0001A583 D805 0048 08               		dc.b $D8, 5, 0, $48, $8	; B
0001A588 D805 0016 18               		dc.b $D8, 5, 0, $16, $18	; L
0001A58D D805 000E 28               		dc.b $D8, 5, 0, $0E, $28	; E
0001A592                            
0001A592 F805 002E C0               		dc.b $F8, 5, 0, $2E, $C0	; S
0001A597 F805 0032 D0               		dc.b $F8, 5, 0, $32, $D0	; U
0001A59C F805 001A E0               		dc.b $F8, 5, 0, $1A, $E0	; N
0001A5A1 08                         @character:	dc.b $8	;  CHARACTER DESIGN BIGISLAND | ART SORRA    
0001A5A2 9005 0004 90               		dc.b $90, 5, 0, 4, $90		; A
0001A5A7 9005 0022 A0               		dc.b $90, 5, 0, $22, $A0	; R
0001A5AC 9005 003E B0               		dc.b $90, 5, 0, $3E, $B0	; T
0001A5B1                            
0001A5B1 B805 002E C0               		dc.b $B8, 5, 0, $2E, $C0	; S
0001A5B6 B805 0026 D0               		dc.b $B8, 5, 0, $26, $D0	; O
0001A5BB B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
0001A5C0 B805 0022 F0               		dc.b $B8, 5, 0, $22, $F0	; R
0001A5C5 B805 0004 00               		dc.b $B8, 5, 0, 4, $0
0001A5CA 0B                         @design:	dc.b $B	;  DESIGN JINYA PHENIX RIE | DESIGN SORRA    
0001A5CB 9005 0042 90               		dc.b $90, 5, 0, $42, $90	; D
0001A5D0 9005 000E A0               		dc.b $90, 5, 0, $0E, $A0	; E
0001A5D5 9005 002E B0               		dc.b $90, 5, 0, $2E, $B0	; S
0001A5DA 9001 0046 C0               		dc.b $90, 1, 0, $46, $C0	; I
0001A5DF 9005 0000 C8               		dc.b $90, 5, 0, 0, $C8		; G
0001A5E4 9005 001A D8               		dc.b $90, 5, 0, $1A, $D8	; N
0001A5E9                            
0001A5E9 B805 002E C0               		dc.b $B8, 5, 0, $2E, $C0	; S
0001A5EE B805 0026 D0               		dc.b $B8, 5, 0, $26, $D0	; O
0001A5F3 B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
0001A5F8 B805 0022 F0               		dc.b $B8, 5, 0, $22, $F0	; R
0001A5FD B805 0004 00               		dc.b $B8, 5, 0, 4, $0		; A
0001A602 1C                         @soundproduce:	dc.b $1C	;  SOUND PRODUCE MASATO NAKAMURA | SOUND PORT MR JOKER PRODUCTION   
0001A603 9005 002E 90               		dc.b $90, 5, 0, $2E, $90	; S
0001A608 9005 0026 A0               		dc.b $90, 5, 0, $26, $A0	; O
0001A60D 9005 0032 B0               		dc.b $90, 5, 0, $32, $B0	; U
0001A612 9005 001A C0               		dc.b $90, 5, 0, $1A, $C0	; N
0001A617 9005 0042 D0               		dc.b $90, 5, 0, $42, $D0	; D
0001A61C 9000 0060 0C               		dc.b $90, 0, 0, $60, $C    ;Space
0001A621 9005 0012 F0               		dc.b $90, 5, 0, $12, $F0	; P
0001A626 9005 0026 00               		dc.b $90, 5, 0, $26, $0	; O
0001A62B 9005 0022 10               		dc.b $90, 5, 0, $22, $10	; R
0001A630 9005 003E 20               		dc.b $90, 5, 0, $3E, $20	; T
0001A635                            
0001A635 B809 0008 C0               		dc.b $B8, 9, 0, 8, $C0		; M
0001A63A B805 0022 D4               		dc.b $B8, 5, 0, $22, $D4	; R
0001A63F B800 0060 0C               		dc.b $B8, 0, 0, $60, $C    ;Space
0001A644 B805 004C F4               		dc.b $B8, 5, 0, $4C, $F4	; J
0001A649 B805 0026 04               		dc.b $B8, 5, 0, $26, $4	; O
0001A64E B805 0058 14               		dc.b $B8, 5, 0, $58, $14	; K
0001A653 B805 000E 24               		dc.b $B8, 5, 0, $0E, $24	; E
0001A658 B805 0022 34               		dc.b $B8, 5, 0, $22, $34	; R
0001A65D                            
0001A65D D805 0012 C0               		dc.b $D8, 5, 0, $12, $C0	; P
0001A662 D805 0022 D0               		dc.b $D8, 5, 0, $22, $D0	; R
0001A667 D805 0026 E0               		dc.b $D8, 5, 0, $26, $E0	; O
0001A66C D805 0042 F0               		dc.b $D8, 5, 0, $42, $F0	; D
0001A671 D805 0032 00               		dc.b $D8, 5, 0, $32, $0	; U
0001A676 D805 001E 10               		dc.b $D8, 5, 0, $1E, $10	; C
0001A67B D805 003E 20               		dc.b $D8, 5, 0, $3E, $20	; T
0001A680 D801 0046 30               		dc.b $D8, 1, 0, $46, $30	; I
0001A685 D805 0026 38               		dc.b $D8, 5, 0, $26, $38	; O
0001A68A D805 001A 48               		dc.b $D8, 5, 0, $1A, $48	; N
0001A68F 17                         @soundprogram:	dc.b $17		 ; SOUND PROGRAM JIMITA	MACKY
0001A690 D005 002E 98               		dc.b $D0, 5, 0,	$2E, $98
0001A695 D005 0026 A8               		dc.b $D0, 5, 0,	$26, $A8
0001A69A D005 0032 B8               		dc.b $D0, 5, 0,	$32, $B8
0001A69F D005 001A C8               		dc.b $D0, 5, 0,	$1A, $C8
0001A6A4 D005 0054 D8               		dc.b $D0, 5, 0,	$54, $D8
0001A6A9 D005 0012 F8               		dc.b $D0, 5, 0,	$12, $F8
0001A6AE D005 0022 08               		dc.b $D0, 5, 0,	$22, 8
0001A6B3 D005 0026 18               		dc.b $D0, 5, 0,	$26, $18
0001A6B8 D005 0000 28               		dc.b $D0, 5, 0,	0, $28
0001A6BD D005 0022 38               		dc.b $D0, 5, 0,	$22, $38
0001A6C2 D005 0004 48               		dc.b $D0, 5, 0,	4, $48
0001A6C7 D009 0008 58               		dc.b $D0, 9, 0,	8, $58
0001A6CC 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
0001A6D1 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
0001A6D6 0009 0008 E8               		dc.b 0,	9, 0, 8, $E8
0001A6DB 0001 0046 FC               		dc.b 0,	1, 0, $46, $FC
0001A6E0 0005 003E 04               		dc.b 0,	5, 0, $3E, 4
0001A6E5 0005 0004 14               		dc.b 0,	5, 0, 4, $14
0001A6EA 2009 0008 D0               		dc.b $20, 9, 0,	8, $D0
0001A6EF 2005 0004 E4               		dc.b $20, 5, 0,	4, $E4
0001A6F4 2005 001E F4               		dc.b $20, 5, 0,	$1E, $F4
0001A6F9 2005 0058 04               		dc.b $20, 5, 0,	$58, 4
0001A6FE 2005 002A 14               		dc.b $20, 5, 0,	$2A, $14
0001A703 11                         @thanks:	dc.b $11	;  SPECIAL THANKS FUJIO MINEGISHI PAPA | SPECIAL  THANKS YOU   
0001A704 9005 002E 90               		dc.b $90, 5, 0, $2E, $90	; S
0001A709 9005 0012 A0               		dc.b $90, 5, 0, $12, $A0	; P
0001A70E 9005 000E B0               		dc.b $90, 5, 0, $0E, $B0	; E
0001A713 9005 001E C0               		dc.b $90, 5, 0, $1E, $C0	; C
0001A718 9001 0046 D0               		dc.b $90, 1, 0, $46, $D0	; I
0001A71D 9005 0004 D8               		dc.b $90, 5, 0, 4, $D8		; A
0001A722 9005 0016 E8               		dc.b $90, 5, 0, $16, $E8	; L
0001A727 9000 0060 0C               		dc.b $90, 0, 0, $60, $C    ;Space
0001A72C                            
0001A72C B805 003E C0               		dc.b $B8, 5, 0, $3E, $C0	; T
0001A731 B805 003A D0               		dc.b $B8, 5, 0, $3A, $D0	; H
0001A736 B805 0004 E0               		dc.b $B8, 5, 0, 4, $E0		; A
0001A73B B805 001A F0               		dc.b $B8, 5, 0, $1A, $F0	; N
0001A740 B805 0058 00               		dc.b $B8, 5, 0, $58, $0	; K
0001A745 B805 002E 10               		dc.b $B8, 5, 0, $2E, $10	; S
0001A74A                            
0001A74A D805 002A C0               		dc.b $D8, 5, 0, $2A, $C0	; Y
0001A74F D805 0026 D0               		dc.b $D8, 5, 0, $26, $D0	; O
0001A754 D805 0032 E0               		dc.b $D8, 5, 0, $32, $E0	; U
0001A759 10                         @presentedby:	dc.b $10	;  PRESENTED BY SEGA | PRESENTED BY SORRA   
0001A75A 9005 0012 90               		dc.b $90, 5, 0, $12, $90	; P
0001A75F 9005 0022 A0               		dc.b $90, 5, 0, $22, $A0	; R
0001A764 9005 000E B0               		dc.b $90, 5, 0, $0E, $B0	; E
0001A769 9005 002E C0               		dc.b $90, 5, 0, $2E, $C0	; S
0001A76E 9005 000E D0               		dc.b $90, 5, 0, $0E, $D0	; E
0001A773 9005 001A E0               		dc.b $90, 5, 0, $1A, $E0	; N
0001A778 9005 003E F0               		dc.b $90, 5, 0, $3E, $F0	; T
0001A77D 9005 000E 00               		dc.b $90, 5, 0, $0E, $0	; E
0001A782 9005 0042 10               		dc.b $90, 5, 0, $42, $10	; D
0001A787                            
0001A787 B805 0048 C0               		dc.b $B8, 5, 0, $48, $C0	; B
0001A78C B805 002A D0               		dc.b $B8, 5, 0, $2A, $D0	; Y
0001A791                            
0001A791 D805 002E C0               		dc.b $D8, 5, 0, $2E, $C0	; S
0001A796 D805 0026 D0               		dc.b $D8, 5, 0, $26, $D0	; O
0001A79B D805 0022 E0               		dc.b $D8, 5, 0, $22, $E0	; R
0001A7A0 D805 0022 F0               		dc.b $D8, 5, 0, $22, $F0	; R
0001A7A5 D805 0004 00               		dc.b $D8, 5, 0, 4, $0		; A
0001A7AA 08                         @tryagain:	dc.b 8			 ; TRY AGAIN
0001A7AB 3005 003E C0               		dc.b $30, 5, 0,	$3E, $C0
0001A7B0 3005 0022 D0               		dc.b $30, 5, 0,	$22, $D0
0001A7B5 3005 002A E0               		dc.b $30, 5, 0,	$2A, $E0
0001A7BA 3005 0004 F8               		dc.b $30, 5, 0,	4, $F8
0001A7BF 3005 0000 08               		dc.b $30, 5, 0,	0, 8
0001A7C4 3005 0004 18               		dc.b $30, 5, 0,	4, $18
0001A7C9 3001 0046 28               		dc.b $30, 1, 0,	$46, $28
0001A7CE 3005 001A 30               		dc.b $30, 5, 0,	$1A, $30
0001A7D3 0E                         @sonicteam:	dc.b $E	;  SONIC TEAM PRESENTS | SORRA PRESENTS
0001A7D4 E805 002E D0               		dc.b $E8, 5, 0, $2E, $D0	; S
0001A7D9 E805 0026 E0               		dc.b $E8, 5, 0, $26, $E0	; O
0001A7DE E805 0022 F0               		dc.b $E8, 5, 0, $22, $F0	; R
0001A7E3 E805 0022 00               		dc.b $E8, 5, 0, $22, $0	; R
0001A7E8 E805 0004 10               		dc.b $E8, 5, 0, 4, $10		; A
0001A7ED E800 0060 0C               		dc.b $E8, 0, 0, $60, $C   	 ; Space
0001A7F2                            
0001A7F2 0005 0012 C0               		dc.b 0,	5, 0, $12, $C0	; P
0001A7F7 0005 0022 D0               		dc.b 0,	5, 0, $22, $D0	; R
0001A7FC 0005 000E E0               		dc.b 0,	5, 0, $E, $E0	; E
0001A801 0005 002E F0               		dc.b 0,	5, 0, $2E, $F0	; S
0001A806 0005 000E 00               		dc.b 0,	5, 0, $E, 0	; E
0001A80B 0005 001A 10               		dc.b 0,	5, 0, $1A, $10	; N
0001A810 0005 003E 20               		dc.b 0,	5, 0, $3E, $20	; T
0001A815 0005 002E 30               		dc.b 0,	5, 0, $2E, $30	; S
0001A81A                            		even
0001A81A                            		even
0001A81A                            
0001A81A                            		include	"_incObj\3D Boss - Green Hill (part 1).asm"
0001A81A                            ; ---------------------------------------------------------------------------
0001A81A                            ; Object 3D - Eggman (GHZ)
0001A81A                            ; ---------------------------------------------------------------------------
0001A81A                            
0001A81A                            BossGreenHill:
0001A81A 7000                       		moveq	#0,d0
0001A81C 1028 0024                  		move.b	obRoutine(a0),d0
0001A820 323B 0000                  		move.w	BGHZ_Index(pc,d0.w),d1
0001A824 4EFB 1000                  		jmp	BGHZ_Index(pc,d1.w)
0001A828                            ; ===========================================================================
0001A828 0000                       BGHZ_Index:	dc.w BGHZ_Main-BGHZ_Index
0001A82A 0000                       		dc.w BGHZ_ShipMain-BGHZ_Index
0001A82C 0000                       		dc.w BGHZ_FaceMain-BGHZ_Index
0001A82E 0000                       		dc.w BGHZ_FlameMain-BGHZ_Index
0001A830                            
0001A830 0200                       BGHZ_ObjData:	dc.b 2,	0		; routine counter, animation
0001A832 0401                       		dc.b 4,	1
0001A834 0607                       		dc.b 6,	7
0001A836                            ; ===========================================================================
0001A836                            
0001A836                            BGHZ_Main:	; Routine 0
0001A836 45F9 0001 A830             		lea	(BGHZ_ObjData).l,a2
0001A83C 2248                       		movea.l	a0,a1
0001A83E 7202                       		moveq	#2,d1
0001A840 6000                       		bra.s	BGHZ_LoadBoss
0001A842                            ; ===========================================================================
0001A842                            
0001A842                            BGHZ_Loop:
0001A842 4EB9 0000 FE1A             		jsr	(FindNextFreeObj).l
0001A848 6600                       		bne.s	loc_17772
0001A84A                            
0001A84A                            BGHZ_LoadBoss:
0001A84A 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001A84E 12BC 003D                  		move.b	#id_BossGreenHill,0(a1)
0001A852 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001A858 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001A85E 237C 0000 0000 0004        		move.l	#Map_Eggman,obMap(a1)
0001A866 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001A86C 137C 0004 0001             		move.b	#4,obRender(a1)
0001A872 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001A878 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001A87E 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001A882 2348 0034                  		move.l	a0,$34(a1)
0001A886 51C9 FFBA                  		dbf	d1,BGHZ_Loop	; repeat sequence 2 more times
0001A88A                            
0001A88A                            loc_17772:
0001A88A 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001A890 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001A896 117C 000F 0020             		move.b	#$F,obColType(a0)
0001A89C 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001A8A2                            
0001A8A2                            
0001A8A2                            BGHZ_ShipMain:	; Routine 2
0001A8A2 7000                       		moveq	#0,d0
0001A8A4 1028 0025                  		move.b	ob2ndRout(a0),d0
0001A8A8 323B 0000                  		move.w	BGHZ_ShipIndex(pc,d0.w),d1
0001A8AC 4EBB 1000                  		jsr	BGHZ_ShipIndex(pc,d1.w)
0001A8B0 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0001A8B6 4EB9 0000 CA24             		jsr	(AnimateSprite).l
0001A8BC 1028 0022                  		move.b	obStatus(a0),d0
0001A8C0 0200 0003                  		andi.b	#3,d0
0001A8C4 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001A8CA 8128 0001                  		or.b	d0,obRender(a0)
0001A8CE 4EF9 0000 F978             		jmp	(DisplaySprite).l
0001A8D4                            ; ===========================================================================
0001A8D4 0000                       BGHZ_ShipIndex:	dc.w BGHZ_ShipStart-BGHZ_ShipIndex
0001A8D6 0000                       		dc.w BGHZ_MakeBall-BGHZ_ShipIndex
0001A8D8 0000                       		dc.w BGHZ_ShipMove-BGHZ_ShipIndex
0001A8DA 0000                       		dc.w loc_17954-BGHZ_ShipIndex
0001A8DC 0000                       		dc.w loc_1797A-BGHZ_ShipIndex
0001A8DE 0000                       		dc.w loc_179AC-BGHZ_ShipIndex
0001A8E0 0000                       		dc.w loc_179F6-BGHZ_ShipIndex
0001A8E2                            ; ===========================================================================
0001A8E2                            
0001A8E2                            BGHZ_ShipStart:
0001A8E2 317C 0100 0012             		move.w	#$100,obVelY(a0) ; move ship down
0001A8E8 6100 0000                  		bsr.w	BossMove
0001A8EC 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
0001A8F2 6600                       		bne.s	loc_177E6
0001A8F4 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop ship
0001A8FA 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto next routine
0001A8FE                            
0001A8FE                            loc_177E6:
0001A8FE 1028 003F                  		move.b	$3F(a0),d0
0001A902 4EB9 0000 3A32             		jsr	(CalcSine).l
0001A908 EC40                       		asr.w	#6,d0
0001A90A D068 0038                  		add.w	$38(a0),d0
0001A90E 3140 000C                  		move.w	d0,obY(a0)
0001A912 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001A918 5428 003F                  		addq.b	#2,$3F(a0)
0001A91C 0C28 0008 0025             		cmpi.b	#8,ob2ndRout(a0)
0001A922 6400                       		bcc.s	locret_1784A
0001A924 4A28 0022                  		tst.b	obStatus(a0)
0001A928 6B00                       		bmi.s	loc_1784C
0001A92A 4A28 0020                  		tst.b	obColType(a0)
0001A92E 6600                       		bne.s	locret_1784A
0001A930 4A28 003E                  		tst.b	$3E(a0)
0001A934 6600                       		bne.s	BGHZ_ShipFlash
0001A936 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
0001A946                            
0001A946                            BGHZ_ShipFlash:
0001A946 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1 ; load 2nd pallet, 2nd entry
0001A94A 7000                       		moveq	#0,d0		; move 0 (black) to d0
0001A94C 4A51                       		tst.w	(a1)
0001A94E 6600                       		bne.s	loc_1783C
0001A950 303C 0EEE                  		move.w	#cWhite,d0	; move 0EEE (white) to d0
0001A954                            
0001A954                            loc_1783C:
0001A954 3280                       		move.w	d0,(a1)		; load color stored in	d0
0001A956 5328 003E                  		subq.b	#1,$3E(a0)
0001A95A 6600                       		bne.s	locret_1784A
0001A95C 117C 000F 0020             		move.b	#$F,obColType(a0)
0001A962                            
0001A962                            locret_1784A:
0001A962 4E75                       		rts	
0001A964                            ; ===========================================================================
0001A964                            
0001A964                            loc_1784C:
0001A964 7064                       		moveq	#100,d0
0001A966 6100 0000                  		bsr.w	AddPoints
0001A96A 117C 0008 0025             		move.b	#8,ob2ndRout(a0)
0001A970 317C 00B3 003C             		move.w	#$B3,$3C(a0)
0001A976 4E75                       		rts	
0001A976 4E75                       		rts	
0001A978                            
0001A978                            ; ---------------------------------------------------------------------------
0001A978                            ; Defeated boss	subroutine
0001A978                            ; ---------------------------------------------------------------------------
0001A978                            
0001A978                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A978                            
0001A978                            
0001A978                            BossDefeated:
0001A978 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0001A97C 0200 0007                  		andi.b	#7,d0
0001A980 6600                       		bne.s	locret_178A2
0001A982 4EB9 0000 FE04             		jsr	(FindFreeObj).l
0001A988 6600                       		bne.s	locret_178A2
0001A98A 12BC 003F                  		move.b	#id_ExplosionBomb,0(a1)	; load explosion object
0001A98E 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001A994 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001A99A 4EB9 0000 3A0C             		jsr	(RandomNumber).l
0001A9A0 3200                       		move.w	d0,d1
0001A9A2 7200                       		moveq	#0,d1
0001A9A4 1200                       		move.b	d0,d1
0001A9A6 E409                       		lsr.b	#2,d1
0001A9A8 0441 0020                  		subi.w	#$20,d1
0001A9AC D369 0008                  		add.w	d1,obX(a1)
0001A9B0 E048                       		lsr.w	#8,d0
0001A9B2 E608                       		lsr.b	#3,d0
0001A9B4 D169 000C                  		add.w	d0,obY(a1)
0001A9B8                            
0001A9B8                            locret_178A2:
0001A9B8 4E75                       		rts	
0001A9BA                            ; End of function BossDefeated
0001A9BA                            
0001A9BA                            ; ---------------------------------------------------------------------------
0001A9BA                            ; Subroutine to	move a boss
0001A9BA                            ; ---------------------------------------------------------------------------
0001A9BA                            
0001A9BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A9BA                            
0001A9BA                            
0001A9BA                            BossMove:
0001A9BA 4CA8 0005 0010             		movem.w	obVelX(a0),d0/d2
0001A9C0 E188                       		lsl.l	#8,d0
0001A9C2 D1A8 0030                  		add.l	d0,$30(a0)
0001A9C6 E18A                       		lsl.l	#8,d2
0001A9C8 D5A8 0038                  		add.l	d2,$38(a0)
0001A9CC 4E75                       		rts
0001A9CE                            ; End of function BossMove
0001A9CE                            
0001A9CE                            ; ===========================================================================
0001A9CE                            
0001A9CE                            		include	"_incObj\3D Boss - Green Hill (part 2).asm"
0001A9CE                            
0001A9CE                            BGHZ_MakeBall:
0001A9CE 317C FE00 0010             		move.w	#-$200,obVelX(a0)
0001A9D4 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001A9DA 6100 FFDE                  		bsr.w	BossMove
0001A9DE 0C68 1400 0030             		cmpi.w	#$1400,$30(a0)
0001A9E4 6600                       		bne.s	loc_17916
0001A9E6 317C 0000 0010             		move.w	#0,obVelX(a0)
0001A9EC 317C 0000 0012             		move.w	#0,obVelY(a0)
0001A9F2 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001A9F6 4EB9 0000 FE1A             		jsr	(FindNextFreeObj).l
0001A9FC 6600                       		bne.s	loc_17910
0001A9FE 12BC 0048                  		move.b	#id_BossBall,0(a1) ; load swinging ball object
0001AA02 3368 0300 0008             		move.w	$300(a0),obX(a1)
0001AA08 3368 0038 000C             		move.w	$38(a0),obY(a1)
0001AA0E 2348 0034                  		move.l	a0,$34(a1)
0001AA12                            
0001AA12                            loc_17910:
0001AA12 317C 0077 003C             		move.w	#$77,$3C(a0)
0001AA18                            
0001AA18                            loc_17916:
0001AA18 6000 FEE4                  		bra.w	loc_177E6
0001AA1C                            ; ===========================================================================
0001AA1C                            
0001AA1C                            BGHZ_ShipMove:
0001AA1C 5368 003C                  		subq.w	#1,$3C(a0)
0001AA20 6A00                       		bpl.s	BGHZ_Reverse
0001AA22 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001AA26 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001AA2C 317C 0200 0010             		move.w	#$200,obVelX(a0) ; move the ship sideways
0001AA32 0C68 1400 0030             		cmpi.w	#$1400,$30(a0)
0001AA38 6600                       		bne.s	BGHZ_Reverse
0001AA3A 317C 007F 003C             		move.w	#$7F,$3C(a0)
0001AA40 317C 0040 0010             		move.w	#$40,obVelX(a0)
0001AA46                            
0001AA46                            BGHZ_Reverse:
0001AA46 0828 0000 0022             		btst	#0,obStatus(a0)
0001AA4C 6600                       		bne.s	loc_17950
0001AA4E 4468 0010                  		neg.w	obVelX(a0)	; reverse direction of the ship
0001AA52                            
0001AA52                            loc_17950:
0001AA52 6000 FEAA                  		bra.w	loc_177E6
0001AA56                            ; ===========================================================================
0001AA56                            
0001AA56                            loc_17954:
0001AA56 5368 003C                  		subq.w	#1,$3C(a0)
0001AA5A 6B00                       		bmi.s	loc_17960
0001AA5C 6100 FF5C                  		bsr.w	BossMove
0001AA60 6000                       		bra.s	loc_17976
0001AA62                            ; ===========================================================================
0001AA62                            
0001AA62                            loc_17960:
0001AA62 0868 0000 0022             		bchg	#0,obStatus(a0)
0001AA68 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001AA6E 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001AA72 317C 0000 0010             		move.w	#0,obVelX(a0)
0001AA78                            
0001AA78                            loc_17976:
0001AA78 6000 FE84                  		bra.w	loc_177E6
0001AA7C                            ; ===========================================================================
0001AA7C                            
0001AA7C                            loc_1797A:
0001AA7C 5368 003C                  		subq.w	#1,$3C(a0)
0001AA80 6B00                       		bmi.s	loc_17984
0001AA82 6000 FEF4                  		bra.w	BossDefeated
0001AA86                            ; ===========================================================================
0001AA86                            
0001AA86                            loc_17984:
0001AA86 08E8 0000 0022             		bset	#0,obStatus(a0)
0001AA8C 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001AA92 4268 0010                  		clr.w	obVelX(a0)
0001AA96 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001AA9A 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001AAA0 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001AAA4 6600                       		bne.s	locret_179AA
0001AAA6 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001AAAC                            
0001AAAC                            locret_179AA:
0001AAAC 4E75                       		rts	
0001AAAE                            ; ===========================================================================
0001AAAE                            
0001AAAE                            loc_179AC:
0001AAAE 5268 003C                  		addq.w	#1,$3C(a0)
0001AAB2 6700                       		beq.s	loc_179BC
0001AAB4 6A00                       		bpl.s	loc_179C2
0001AAB6 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001AABC 6000                       		bra.s	loc_179EE
0001AABE                            ; ===========================================================================
0001AABE                            
0001AABE                            loc_179BC:
0001AABE 4268 0012                  		clr.w	obVelY(a0)
0001AAC2 6000                       		bra.s	loc_179EE
0001AAC4                            ; ===========================================================================
0001AAC4                            
0001AAC4                            loc_179C2:
0001AAC4 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001AACA 6500                       		bcs.s	loc_179DA
0001AACC 6700                       		beq.s	loc_179E0
0001AACE 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001AAD4 6500                       		bcs.s	loc_179EE
0001AAD6 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001AADA 6000                       		bra.s	loc_179EE
0001AADC                            ; ===========================================================================
0001AADC                            
0001AADC                            loc_179DA:
0001AADC 5168 0012                  		subq.w	#8,obVelY(a0)
0001AAE0 6000                       		bra.s	loc_179EE
0001AAE2                            ; ===========================================================================
0001AAE2                            
0001AAE2                            loc_179E0:
0001AAE2 4268 0012                          clr.w    obVelY(a0)
0001AAE6 4A38 FE2D                          tst.b     (v_invinc).w
0001AAEA 6600                               bne.s   @boss_invinc
0001AAEC 4A38 FE2E                          tst.b     (v_shoes).w
0001AAF0 6600                               bne.s   @boss_shoes
0001AAF2                            
0001AAF2 1038 F5C6                          move.b   (v_Saved_music),d0
0001AAF6 6000 0000                          bra.w      @boss_play
0001AAFA                            
0001AAFA                            @boss_invinc:
0001AAFA 103C 0000                          move.b #bgm_Invincible,d0
0001AAFE                            
0001AAFE                            @boss_shoes:
0001AAFE 103C 0000                          move.b #bgm_Ending,d0
0001AB02                            
0001AB02                            @boss_play:
0001AB02 4EB8 124A                          jsr PlaySound
0001AB06                            
0001AB06                            loc_179EE:
0001AB06 6100 FEB2                  		bsr.w	BossMove
0001AB0A 6000 FDF2                  		bra.w	loc_177E6
0001AB0E                            ; ===========================================================================
0001AB0E                            
0001AB0E                            loc_179F6:
0001AB0E 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001AB14 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001AB1A 0C78 14C0 F72A             		cmpi.w	#$14C0,(v_limitright2).w
0001AB20 6700                       		beq.s	loc_17A10
0001AB22 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001AB26 6000                       		bra.s	loc_17A16
0001AB28                            ; ===========================================================================
0001AB28                            
0001AB28                            loc_17A10:
0001AB28 4A28 0001                  		tst.b	obRender(a0)
0001AB2C 6A00                       		bpl.s	BGHZ_ShipDel
0001AB2E                            
0001AB2E                            loc_17A16:
0001AB2E 6100 FE8A                  		bsr.w	BossMove
0001AB32 6000 FDCA                  		bra.w	loc_177E6
0001AB36                            ; ===========================================================================
0001AB36                            
0001AB36                            BGHZ_ShipDel:
0001AB36 4EF9 0000 F9B8             		jmp	(DeleteObject).l
0001AB3C                            ; ===========================================================================
0001AB3C                            
0001AB3C                            BGHZ_FaceMain:	; Routine 4
0001AB3C 7000                       		moveq	#0,d0
0001AB3E 7201                       		moveq	#1,d1
0001AB40 2268 0034                  		movea.l	$34(a0),a1
0001AB44 1029 0025                  		move.b	ob2ndRout(a1),d0
0001AB48 5900                       		subq.b	#4,d0
0001AB4A 6600                       		bne.s	loc_17A3E
0001AB4C 0C69 1400 0030             		cmpi.w	#$1400,$30(a1)
0001AB52 6600                       		bne.s	loc_17A46
0001AB54 7204                       		moveq	#4,d1
0001AB56                            
0001AB56                            loc_17A3E:
0001AB56 5D00                       		subq.b	#6,d0
0001AB58 6B00                       		bmi.s	loc_17A46
0001AB5A 720A                       		moveq	#$A,d1
0001AB5C 6000                       		bra.s	loc_17A5A
0001AB5E                            ; ===========================================================================
0001AB5E                            
0001AB5E                            loc_17A46:
0001AB5E 4A29 0020                  		tst.b	obColType(a1)
0001AB62 6600                       		bne.s	loc_17A50
0001AB64 7205                       		moveq	#5,d1
0001AB66 6000                       		bra.s	loc_17A5A
0001AB68                            ; ===========================================================================
0001AB68                            
0001AB68                            loc_17A50:
0001AB68 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001AB6E 6500                       		bcs.s	loc_17A5A
0001AB70 7204                       		moveq	#4,d1
0001AB72                            
0001AB72                            loc_17A5A:
0001AB72 1141 001C                  		move.b	d1,obAnim(a0)
0001AB76 5500                       		subq.b	#2,d0
0001AB78 6600                       		bne.s	BGHZ_FaceDisp
0001AB7A 117C 0006 001C             		move.b	#6,obAnim(a0)
0001AB80 4A28 0001                  		tst.b	obRender(a0)
0001AB84 6A00                       		bpl.s	BGHZ_FaceDel
0001AB86                            
0001AB86                            BGHZ_FaceDisp:
0001AB86 6000                       		bra.s	BGHZ_Display
0001AB88                            ; ===========================================================================
0001AB88                            
0001AB88                            BGHZ_FaceDel:
0001AB88 4EF9 0000 F9B8             		jmp	(DeleteObject).l
0001AB8E                            ; ===========================================================================
0001AB8E                            
0001AB8E                            BGHZ_FlameMain:	; Routine 6
0001AB8E 117C 0007 001C             		move.b	#7,obAnim(a0)
0001AB94 2268 0034                  		movea.l	$34(a0),a1
0001AB98 0C29 000C 0025             		cmpi.b	#$C,ob2ndRout(a1)
0001AB9E 6600                       		bne.s	loc_17A96
0001ABA0 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001ABA6 4A28 0001                  		tst.b	obRender(a0)
0001ABAA 6A00                       		bpl.s	BGHZ_FlameDel
0001ABAC 6000                       		bra.s	BGHZ_FlameDisp
0001ABAE                            ; ===========================================================================
0001ABAE                            
0001ABAE                            loc_17A96:
0001ABAE 3029 0010                  		move.w	obVelX(a1),d0
0001ABB2 6700                       		beq.s	BGHZ_FlameDisp
0001ABB4 117C 0008 001C             		move.b	#8,obAnim(a0)
0001ABBA                            
0001ABBA                            BGHZ_FlameDisp:
0001ABBA 6000                       		bra.s	BGHZ_Display
0001ABBC                            ; ===========================================================================
0001ABBC                            
0001ABBC                            BGHZ_FlameDel:
0001ABBC 4EF9 0000 F9B8             		jmp	(DeleteObject).l
0001ABC2                            ; ===========================================================================
0001ABC2                            
0001ABC2                            BGHZ_Display:
0001ABC2 2268 0034                  		movea.l	$34(a0),a1
0001ABC6 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001ABCC 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001ABD2 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001ABD8 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0001ABDE 4EB9 0000 CA24             		jsr	(AnimateSprite).l
0001ABE4 1028 0022                  		move.b	obStatus(a0),d0
0001ABE8 0200 0003                  		andi.b	#3,d0
0001ABEC 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001ABF2 8128 0001                  		or.b	d0,obRender(a0)
0001ABF6 4EF9 0000 F978             		jmp	(DisplaySprite).l
0001ABF6 4EF9 0000 F978             		jmp	(DisplaySprite).l
0001ABFC                            		include	"_incObj\48 Eggman's Swinging Ball.asm"
0001ABFC                            ; ---------------------------------------------------------------------------
0001ABFC                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
0001ABFC                            ; ---------------------------------------------------------------------------
0001ABFC                            
0001ABFC                            BossBall:
0001ABFC 7000                       		moveq	#0,d0
0001ABFE 1028 0024                  		move.b	obRoutine(a0),d0
0001AC02 323B 0000                  		move.w	GBall_Index(pc,d0.w),d1
0001AC06 4EFB 1000                  		jmp	GBall_Index(pc,d1.w)
0001AC0A                            ; ===========================================================================
0001AC0A 0000                       GBall_Index:	dc.w GBall_Main-GBall_Index
0001AC0C 0000                       		dc.w GBall_Base-GBall_Index
0001AC0E 0000                       		dc.w GBall_Display2-GBall_Index
0001AC10 0000                       		dc.w loc_17C68-GBall_Index
0001AC12 0000                       		dc.w GBall_ChkVanish-GBall_Index
0001AC14                            ; ===========================================================================
0001AC14                            
0001AC14                            GBall_Main:	; Routine 0
0001AC14 5428 0024                  		addq.b	#2,obRoutine(a0)
0001AC18 317C 4080 0026             		move.w	#$4080,obAngle(a0)
0001AC1E 317C FE00 003E             		move.w	#-$200,$3E(a0)
0001AC24 217C 0000 0000 0004        		move.l	#Map_BossItems,obMap(a0)
0001AC2C 317C 046C 0002             		move.w	#$46C,obGfx(a0)
0001AC32 45E8 0028                  		lea	obSubtype(a0),a2
0001AC36 14FC 0000                  		move.b	#0,(a2)+
0001AC3A 7205                       		moveq	#5,d1
0001AC3C 2248                       		movea.l	a0,a1
0001AC3E 6000                       		bra.s	loc_17B60
0001AC40                            ; ===========================================================================
0001AC40                            
0001AC40                            GBall_MakeLinks:
0001AC40 4EB9 0000 FE1A             		jsr	(FindNextFreeObj).l
0001AC46 6600                       		bne.s	GBall_MakeBall
0001AC48 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001AC4E 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001AC54 12BC 0048                  		move.b	#id_BossBall,0(a1) ; load chain link object
0001AC58 137C 0006 0024             		move.b	#6,obRoutine(a1)
0001AC5E 237C 0000 987E 0004        		move.l	#Map_Swing_GHZ,obMap(a1)
0001AC66 337C 0380 0002             		move.w	#$380,obGfx(a1)
0001AC6C 137C 0001 001A             		move.b	#1,obFrame(a1)
0001AC72 5228 0028                  		addq.b	#1,obSubtype(a0)
0001AC76                            
0001AC76                            loc_17B60:
0001AC76 3A09                       		move.w	a1,d5
0001AC78 0445 D000                  		subi.w	#$D000,d5
0001AC7C EC4D                       		lsr.w	#6,d5
0001AC7E 0245 007F                  		andi.w	#$7F,d5
0001AC82 14C5                       		move.b	d5,(a2)+
0001AC84 137C 0004 0001             		move.b	#4,obRender(a1)
0001AC8A 137C 0008 0014             		move.b	#8,obActWid(a1)
0001AC90 337C 0300 0018             		move.w	#$300,obPriority(a1)
0001AC96 2368 0034 0034             		move.l	$34(a0),$34(a1)
0001AC9C 51C9 FFA2                  		dbf	d1,GBall_MakeLinks ; repeat sequence 5 more times
0001ACA0                            
0001ACA0                            GBall_MakeBall:
0001ACA0 137C 0008 0024             		move.b	#8,obRoutine(a1)
0001ACA6 237C 0000 9DDA 0004        		move.l	#Map_GBall,obMap(a1) ; load different mappings for final link
0001ACAE 337C 43AA 0002             		move.w	#$43AA,obGfx(a1) ; use different graphics
0001ACB4 137C 0001 001A             		move.b	#1,obFrame(a1)
0001ACBA 337C 0280 0018             		move.w	#$280,obPriority(a1)
0001ACC0 137C 0081 0020             		move.b	#$81,obColType(a1) ; make object hurt Sonic
0001ACC6 4E75                       		rts	
0001ACC8                            ; ===========================================================================
0001ACC8                            
0001ACC8 0010 2030 4060             GBall_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
0001ACCE                            
0001ACCE                            ; ===========================================================================
0001ACCE                            
0001ACCE                            GBall_Base:	; Routine 2
0001ACCE 47F9 0001 ACC8             		lea	(GBall_PosData).l,a3
0001ACD4 45E8 0028                  		lea	obSubtype(a0),a2
0001ACD8 7C00                       		moveq	#0,d6
0001ACDA 1C1A                       		move.b	(a2)+,d6
0001ACDC                            
0001ACDC                            loc_17BC6:
0001ACDC 7800                       		moveq	#0,d4
0001ACDE 181A                       		move.b	(a2)+,d4
0001ACE0 ED4C                       		lsl.w	#6,d4
0001ACE2 0684 00FF D000             		addi.l	#v_objspace&$FFFFFF,d4
0001ACE8 2244                       		movea.l	d4,a1
0001ACEA 101B                       		move.b	(a3)+,d0
0001ACEC B029 003C                  		cmp.b	$3C(a1),d0
0001ACF0 6700                       		beq.s	loc_17BE0
0001ACF2 5229 003C                  		addq.b	#1,$3C(a1)
0001ACF6                            
0001ACF6                            loc_17BE0:
0001ACF6 51CE FFE4                  		dbf	d6,loc_17BC6
0001ACFA                            
0001ACFA B029 003C                  		cmp.b	$3C(a1),d0
0001ACFE 6600                       		bne.s	loc_17BFA
0001AD00 2268 0034                  		movea.l	$34(a0),a1
0001AD04 0C29 0006 0025             		cmpi.b	#6,ob2ndRout(a1)
0001AD0A 6600                       		bne.s	loc_17BFA
0001AD0C 5428 0024                  		addq.b	#2,obRoutine(a0)
0001AD10                            
0001AD10                            loc_17BFA:
0001AD10 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
0001AD16 6700                       		beq.s	GBall_Display
0001AD18 5268 0032                  		addq.w	#1,$32(a0)
0001AD1C                            
0001AD1C                            GBall_Display:
0001AD1C 6100 0000                  		bsr.w	sub_17C2A
0001AD20 1028 0026                  		move.b	obAngle(a0),d0
0001AD24 4EB9 0000 97F0             		jsr	(Swing_Move2).l
0001AD2A 4EF9 0000 F978             		jmp	(DisplaySprite).l
0001AD30                            ; ===========================================================================
0001AD30                            
0001AD30                            GBall_Display2:	; Routine 4
0001AD30 6100 0000                  		bsr.w	sub_17C2A
0001AD34 4EB9 0000 97B0             		jsr	(Obj48_Move).l
0001AD3A 4EF9 0000 F978             		jmp	(DisplaySprite).l
0001AD40                            
0001AD40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001AD40                            
0001AD40                            
0001AD40                            sub_17C2A:
0001AD40 2268 0034                  		movea.l	$34(a0),a1
0001AD44 0628 0020 001B             		addi.b	#$20,obAniFrame(a0)
0001AD4A 6400                       		bcc.s	loc_17C3C
0001AD4C 0868 0000 001A             		bchg	#0,obFrame(a0)
0001AD52                            
0001AD52                            loc_17C3C:
0001AD52 3169 0008 003A             		move.w	obX(a1),$3A(a0)
0001AD58 3029 000C                  		move.w	obY(a1),d0
0001AD5C D068 0032                  		add.w	$32(a0),d0
0001AD60 3140 0038                  		move.w	d0,$38(a0)
0001AD64 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001AD6A 4A29 0022                  		tst.b	obStatus(a1)
0001AD6E 6A00                       		bpl.s	locret_17C66
0001AD70 10BC 003F                  		move.b	#id_ExplosionBomb,0(a0)
0001AD74 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001AD7A                            
0001AD7A                            locret_17C66:
0001AD7A 4E75                       		rts	
0001AD7C                            ; End of function sub_17C2A
0001AD7C                            
0001AD7C                            ; ===========================================================================
0001AD7C                            
0001AD7C                            loc_17C68:	; Routine 6
0001AD7C 2268 0034                  		movea.l	$34(a0),a1
0001AD80 4A29 0022                  		tst.b	obStatus(a1)
0001AD84 6A00                       		bpl.s	GBall_Display3
0001AD86 10BC 003F                  		move.b	#id_ExplosionBomb,0(a0)
0001AD8A 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001AD90                            
0001AD90                            GBall_Display3:
0001AD90 4EF9 0000 F978             		jmp	(DisplaySprite).l
0001AD96                            ; ===========================================================================
0001AD96                            
0001AD96                            GBall_ChkVanish:; Routine 8
0001AD96 7000                       		moveq	#0,d0
0001AD98 4A28 001A                  		tst.b	obFrame(a0)
0001AD9C 6600                       		bne.s	GBall_Vanish
0001AD9E 5200                       		addq.b	#1,d0
0001ADA0                            
0001ADA0                            GBall_Vanish:
0001ADA0 1140 001A                  		move.b	d0,obFrame(a0)
0001ADA4 2268 0034                  		movea.l	$34(a0),a1
0001ADA8 4A29 0022                  		tst.b	obStatus(a1)
0001ADAC 6A00                       		bpl.s	GBall_Display4
0001ADAE 117C 0000 0020             		move.b	#0,obColType(a0)
0001ADB4 6100 FBC2                  		bsr.w	BossDefeated
0001ADB8 5328 003C                  		subq.b	#1,$3C(a0)
0001ADBC 6A00                       		bpl.s	GBall_Display4
0001ADBE 10BC 003F                  		move.b	#id_ExplosionBomb,(a0)
0001ADC2 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001ADC8                            
0001ADC8                            GBall_Display4:
0001ADC8 4EF9 0000 F978             		jmp	(DisplaySprite).l
0001ADC8 4EF9 0000 F978             		jmp	(DisplaySprite).l
0001ADCE                            		include	"_anim\Eggman.asm"
0001ADCE                            ; ---------------------------------------------------------------------------
0001ADCE                            ; Animation script - Eggman (bosses)
0001ADCE                            ; ---------------------------------------------------------------------------
0001ADCE 0000                       Ani_Eggman:	dc.w @ship-Ani_Eggman
0001ADD0 0000                       		dc.w @facenormal1-Ani_Eggman
0001ADD2 0000                       		dc.w @facenormal2-Ani_Eggman
0001ADD4 0000                       		dc.w @facenormal3-Ani_Eggman
0001ADD6 0000                       		dc.w @facelaugh-Ani_Eggman
0001ADD8 0000                       		dc.w @facehit-Ani_Eggman
0001ADDA 0000                       		dc.w @facepanic-Ani_Eggman
0001ADDC 0000                       		dc.w @blank-Ani_Eggman
0001ADDE 0000                       		dc.w @flame1-Ani_Eggman
0001ADE0 0000                       		dc.w @flame2-Ani_Eggman
0001ADE2 0000                       		dc.w @facedefeat-Ani_Eggman
0001ADE4 0000                       		dc.w @escapeflame-Ani_Eggman
0001ADE6 0F00 FF                    @ship:		dc.b $F, 0, afEnd
0001ADEA 00                         		even
0001ADEA 0501 02FF                  @facenormal1:	dc.b 5,	1, 2, afEnd
0001ADEE                            		even
0001ADEE 0301 02FF                  @facenormal2:	dc.b 3,	1, 2, afEnd
0001ADF2                            		even
0001ADF2 0101 02FF                  @facenormal3:	dc.b 1,	1, 2, afEnd
0001ADF6                            		even
0001ADF6 0403 04FF                  @facelaugh:	dc.b 4,	3, 4, afEnd
0001ADFA                            		even
0001ADFA 1F05 01FF                  @facehit:	dc.b $1F, 5, 1,	afEnd
0001ADFE                            		even
0001ADFE 0306 01FF                  @facepanic:	dc.b 3,	6, 1, afEnd
0001AE02                            		even
0001AE02 0F0A FF                    @blank:		dc.b $F, $A, afEnd
0001AE06 00                         		even
0001AE06 0308 09FF                  @flame1:	dc.b 3,	8, 9, afEnd
0001AE0A                            		even
0001AE0A 0108 09FF                  @flame2:	dc.b 1,	8, 9, afEnd
0001AE0E                            		even
0001AE0E 0F07 FF                    @facedefeat:	dc.b $F, 7, afEnd
0001AE12 00                         		even
0001AE12 0209 080B 0C0B 0C09 08FE+  @escapeflame:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, afBack, 2
0001AE1E 00                         		even
0001AE1E 00                         		even
0001AE1E                            Map_Eggman:	include	"_maps\Eggman.asm"
0001AE1E                            ; --------------------------------------------------------------------------------
0001AE1E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001AE1E                            ; --------------------------------------------------------------------------------
0001AE1E                            
0001AE1E                            SME_F_pyS:	
0001AE1E 0000 0000                  		dc.w SME_F_pyS_1A-SME_F_pyS, SME_F_pyS_34-SME_F_pyS	
0001AE22 0000 0000                  		dc.w SME_F_pyS_44-SME_F_pyS, SME_F_pyS_54-SME_F_pyS	
0001AE26 0000 0000                  		dc.w SME_F_pyS_69-SME_F_pyS, SME_F_pyS_7E-SME_F_pyS	
0001AE2A 0000 0000                  		dc.w SME_F_pyS_93-SME_F_pyS, SME_F_pyS_A8-SME_F_pyS	
0001AE2E 0000 0000                  		dc.w SME_F_pyS_CC-SME_F_pyS, SME_F_pyS_D2-SME_F_pyS	
0001AE32 0000 0000                  		dc.w SME_F_pyS_D8-SME_F_pyS, SME_F_pyS_D9-SME_F_pyS	
0001AE36 0000                       		dc.w SME_F_pyS_E4-SME_F_pyS	
0001AE38 05                         SME_F_pyS_1A:	dc.b 5	
0001AE39 EC01 000A E4               		dc.b $EC, 1, 0, $A, $E4	
0001AE3E FC0E 2010 E4               		dc.b $FC, $E, $20, $10, $E4	
0001AE43 FC0E 201C 04               		dc.b $FC, $E, $20, $1C, 4	
0001AE48 140C 2028 EC               		dc.b $14, $C, $20, $28, $EC	
0001AE4D 1400 202C 0C               		dc.b $14, 0, $20, $2C, $C	
0001AE52 03                         SME_F_pyS_34:	dc.b 3	
0001AE53 E404 0000 F4               		dc.b $E4, 4, 0, 0, $F4	
0001AE58 EC0D 0002 EC               		dc.b $EC, $D, 0, 2, $EC	
0001AE5D EC05 000C 0C               		dc.b $EC, 5, 0, $C, $C	
0001AE62 03                         SME_F_pyS_44:	dc.b 3	
0001AE63 E404 0000 F4               		dc.b $E4, 4, 0, 0, $F4	
0001AE68 EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC	
0001AE6D EC05 000C 0C               		dc.b $EC, 5, 0, $C, $C	
0001AE72 04                         SME_F_pyS_54:	dc.b 4	
0001AE73 E408 003D F4               		dc.b $E4, 8, 0, $3D, $F4	
0001AE78 EC09 0040 EC               		dc.b $EC, 9, 0, $40, $EC	
0001AE7D EC05 0046 04               		dc.b $EC, 5, 0, $46, 4	
0001AE82 EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001AE87 04                         SME_F_pyS_69:	dc.b 4	
0001AE88 E408 004A F4               		dc.b $E4, 8, 0, $4A, $F4	
0001AE8D EC09 004D EC               		dc.b $EC, 9, 0, $4D, $EC	
0001AE92 EC05 0053 04               		dc.b $EC, 5, 0, $53, 4	
0001AE97 EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001AE9C 04                         SME_F_pyS_7E:	dc.b 4	
0001AE9D E408 0057 F4               		dc.b $E4, 8, 0, $57, $F4	
0001AEA2 EC09 005A EC               		dc.b $EC, 9, 0, $5A, $EC	
0001AEA7 EC05 0060 04               		dc.b $EC, 5, 0, $60, 4	
0001AEAC EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001AEB1 04                         SME_F_pyS_93:	dc.b 4	
0001AEB2 E404 0064 04               		dc.b $E4, 4, 0, $64, 4	
0001AEB7 E404 0000 F4               		dc.b $E4, 4, 0, 0, $F4	
0001AEBC EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC	
0001AEC1 EC05 000C 0C               		dc.b $EC, 5, 0, $C, $C	
0001AEC6 07                         SME_F_pyS_A8:	dc.b 7	
0001AEC7 E409 0066 F4               		dc.b $E4, 9, 0, $66, $F4	
0001AECC E408 0057 F4               		dc.b $E4, 8, 0, $57, $F4	
0001AED1 EC05 0060 04               		dc.b $EC, 5, 0, $60, 4	
0001AED6 EC01 0035 EC               		dc.b $EC, 1, 0, $35, $EC	
0001AEDB F400 005D F4               		dc.b $F4, 0, 0, $5D, $F4	
0001AEE0 F400 005F FC               		dc.b $F4, 0, 0, $5F, $FC	
0001AEE5 EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001AEEA 01                         SME_F_pyS_CC:	dc.b 1	
0001AEEB 0405 002D 22               		dc.b 4, 5, 0, $2D, $22	
0001AEF0 01                         SME_F_pyS_D2:	dc.b 1	
0001AEF1 0405 0031 22               		dc.b 4, 5, 0, $31, $22	
0001AEF6 00                         SME_F_pyS_D8:	dc.b 0	
0001AEF7 02                         SME_F_pyS_D9:	dc.b 2	
0001AEF8 0008 012A 22               		dc.b 0, 8, 1, $2A, $22	
0001AEFD 0808 112A 22               		dc.b 8, 8, $11, $2A, $22	
0001AF02 02                         SME_F_pyS_E4:	dc.b 2	
0001AF03 F80B 012D 22               		dc.b $F8, $B, 1, $2D, $22	
0001AF08 0001 0139 3A               		dc.b 0, 1, 1, $39, $3A	
0001AF0E 00                         		even
0001AF0E 00                         		even
0001AF0E                            Map_BossItems:	include	"_maps\Boss Items.asm"
0001AF0E                            ; ---------------------------------------------------------------------------
0001AF0E                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
0001AF0E                            ; ---------------------------------------------------------------------------
0001AF0E                            Map_BossItems_internal:
0001AF0E 0000                       		dc.w @chainanchor1-Map_BossItems_internal
0001AF10 0000                       		dc.w @chainanchor2-Map_BossItems_internal
0001AF12 0000                       		dc.w @cross-Map_BossItems_internal
0001AF14 0000                       		dc.w @widepipe-Map_BossItems_internal
0001AF16 0000                       		dc.w @pipe-Map_BossItems_internal
0001AF18 0000                       		dc.w @spike-Map_BossItems_internal
0001AF1A 0000                       		dc.w @legmask-Map_BossItems_internal
0001AF1C 0000                       		dc.w @legs-Map_BossItems_internal
0001AF1E 01                         @chainanchor1:	dc.b 1
0001AF1F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; GHZ boss
0001AF24 02                         @chainanchor2:	dc.b 2
0001AF25 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; GHZ boss
0001AF2A F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001AF30 00                         		even
0001AF30 01                         @cross:		dc.b 1
0001AF31 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; unknown
0001AF36 01                         @widepipe:	dc.b 1
0001AF37 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4	; SLZ boss
0001AF3C 01                         @pipe:		dc.b 1
0001AF3D 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8	; MZ boss
0001AF42 04                         @spike:		dc.b 4
0001AF43 F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8 ; SYZ boss
0001AF48 F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
0001AF4D F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
0001AF52 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
0001AF58 00                         		even
0001AF58 02                         @legmask:	dc.b 2
0001AF59 0005 0017 00               		dc.b 0,	5, 0, $17, 0	; FZ post-boss: sprite covering part of legs
0001AF5E 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
0001AF64 00                         		even
0001AF64 02                         @legs:		dc.b 2
0001AF65 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0	; FZ post-boss
0001AF6A 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
0001AF70 00                         		even
0001AF70 00                         		even
0001AF70                            		include	"_incObj\77 Boss - Labyrinth.asm"
0001AF70                            ; ---------------------------------------------------------------------------
0001AF70                            ; Object 77 - Eggman (LZ)
0001AF70                            ; ---------------------------------------------------------------------------
0001AF70                            
0001AF70                            BossLabyrinth:
0001AF70 7000                       		moveq	#0,d0
0001AF72 1028 0024                  		move.b	obRoutine(a0),d0
0001AF76 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
0001AF7A 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
0001AF7E                            ; ===========================================================================
0001AF7E 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
0001AF80 0000                       		dc.w Obj77_ShipMain-Obj77_Index
0001AF82 0000                       		dc.w Obj77_FaceMain-Obj77_Index
0001AF84 0000                       		dc.w Obj77_FlameMain-Obj77_Index
0001AF86                            
0001AF86 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
0001AF88 0401                       		dc.b 4,	1
0001AF8A 0607                       		dc.b 6,	7
0001AF8C                            ; ===========================================================================
0001AF8C                            
0001AF8C                            Obj77_Main:	; Routine 0
0001AF8C 317C 1E10 0008             		move.w	#$1E10,obX(a0)
0001AF92 317C 05C0 000C             		move.w	#$5C0,obY(a0)
0001AF98 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001AF9E 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001AFA4 117C 000F 0020             		move.b	#$F,obColType(a0)
0001AFAA 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001AFB0 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001AFB6 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
0001AFBA 2248                       		movea.l	a0,a1
0001AFBC 7202                       		moveq	#2,d1
0001AFBE 6000                       		bra.s	Obj77_LoadBoss
0001AFC0                            ; ===========================================================================
0001AFC0                            
0001AFC0                            Obj77_Loop:
0001AFC0 4EB9 0000 FE1A             		jsr	(FindNextFreeObj).l
0001AFC6 6600                       		bne.s	Obj77_ShipMain
0001AFC8 12BC 0077                  		move.b	#id_BossLabyrinth,0(a1)
0001AFCC 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001AFD2 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001AFD8                            
0001AFD8                            Obj77_LoadBoss:
0001AFD8 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001AFDE 4229 0025                  		clr.b	ob2ndRout(a1)
0001AFE2 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001AFE6 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001AFEA 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0001AFF0 237C 0001 AE1E 0004        		move.l	#Map_Eggman,obMap(a1)
0001AFF8 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001AFFE 137C 0004 0001             		move.b	#4,obRender(a1)
0001B004 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001B00A 2348 0034                  		move.l	a0,$34(a1)
0001B00E 51C9 FFB0                  		dbf	d1,Obj77_Loop
0001B012                            
0001B012                            Obj77_ShipMain:	; Routine 2
0001B012 43F8 D000                  		lea	(v_player).w,a1
0001B016 7000                       		moveq	#0,d0
0001B018 1028 0025                  		move.b	ob2ndRout(a0),d0
0001B01C 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
0001B020 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
0001B024 43F9 0001 ADCE             		lea	(Ani_Eggman).l,a1
0001B02A 4EB9 0000 CA24             		jsr	(AnimateSprite).l
0001B030 7003                       		moveq	#3,d0
0001B032 C028 0022                  		and.b	obStatus(a0),d0
0001B036 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B03C 8128 0001                  		or.b	d0,obRender(a0)
0001B040 4EF9 0000 F978             		jmp	(DisplaySprite).l
0001B046                            ; ===========================================================================
0001B046 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
0001B04A 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
0001B04E 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
0001B052 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
0001B056                            ; ===========================================================================
0001B056                            
0001B056                            loc_17F1E:
0001B056 3029 0008                  		move.w	obX(a1),d0
0001B05A 0C40 1DA0                  		cmpi.w	#$1DA0,d0
0001B05E 6500                       		bcs.s	loc_17F38
0001B060 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001B066 317C 0060 0010             		move.w	#$60,obVelX(a0)
0001B06C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B070                            
0001B070                            loc_17F38:
0001B070 6100 F948                  		bsr.w	BossMove
0001B074 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001B07A 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001B080                            
0001B080                            loc_17F48:
0001B080 4A28 003D                  		tst.b	$3D(a0)
0001B084 6600                       		bne.s	loc_17F8E
0001B086 4A28 0022                  		tst.b	obStatus(a0)
0001B08A 6B00                       		bmi.s	loc_17F92
0001B08C 4A28 0020                  		tst.b	obColType(a0)
0001B090 6600                       		bne.s	locret_17F8C
0001B092 4A28 003E                  		tst.b	$3E(a0)
0001B096 6600                       		bne.s	loc_17F70
0001B098 117C 0020 003E             		move.b	#$20,$3E(a0)
0001B0A8                            
0001B0A8                            loc_17F70:
0001B0A8 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001B0AC 7000                       		moveq	#0,d0
0001B0AE 4A51                       		tst.w	(a1)
0001B0B0 6600                       		bne.s	loc_17F7E
0001B0B2 303C 0EEE                  		move.w	#cWhite,d0
0001B0B6                            
0001B0B6                            loc_17F7E:
0001B0B6 3280                       		move.w	d0,(a1)
0001B0B8 5328 003E                  		subq.b	#1,$3E(a0)
0001B0BC 6600                       		bne.s	locret_17F8C
0001B0BE 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B0C4                            
0001B0C4                            locret_17F8C:
0001B0C4 4E75                       		rts	
0001B0C6                            ; ===========================================================================
0001B0C6                            
0001B0C6                            loc_17F8E:
0001B0C6 6000 F8B0                  		bra.w	BossDefeated
0001B0CA                            ; ===========================================================================
0001B0CA                            
0001B0CA                            loc_17F92:
0001B0CA 7064                       		moveq	#100,d0
0001B0CC 6100 0000                  		bsr.w	AddPoints
0001B0D0 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001B0D6 4E75                       		rts	
0001B0D8                            ; ===========================================================================
0001B0D8                            
0001B0D8                            loc_17FA0:
0001B0D8 70FE                       		moveq	#-2,d0
0001B0DA 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
0001B0E0 6500                       		bcs.s	loc_17FB6
0001B0E2 317C 1E48 0030             		move.w	#$1E48,$30(a0)
0001B0E8 4268 0010                  		clr.w	obVelX(a0)
0001B0EC 5240                       		addq.w	#1,d0
0001B0EE                            
0001B0EE                            loc_17FB6:
0001B0EE 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
0001B0F4 6E00                       		bgt.s	loc_17FCA
0001B0F6 317C 0500 0038             		move.w	#$500,$38(a0)
0001B0FC 4268 0012                  		clr.w	obVelY(a0)
0001B100 5240                       		addq.w	#1,d0
0001B102                            
0001B102                            loc_17FCA:
0001B102 6600                       		bne.s	loc_17FDC
0001B104 317C 0140 0010             		move.w	#$140,obVelX(a0)
0001B10A 317C FE00 0012             		move.w	#-$200,obVelY(a0)
0001B110 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B114                            
0001B114                            loc_17FDC:
0001B114 6000 FF5A                  		bra.w	loc_17F38
0001B118                            ; ===========================================================================
0001B118                            
0001B118                            loc_17FE0:
0001B118 70FE                       		moveq	#-2,d0
0001B11A 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
0001B120 6500                       		bcs.s	loc_17FF6
0001B122 317C 1E70 0030             		move.w	#$1E70,$30(a0)
0001B128 4268 0010                  		clr.w	obVelX(a0)
0001B12C 5240                       		addq.w	#1,d0
0001B12E                            
0001B12E                            loc_17FF6:
0001B12E 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
0001B134 6E00                       		bgt.s	loc_1800A
0001B136 317C 04C0 0038             		move.w	#$4C0,$38(a0)
0001B13C 4268 0012                  		clr.w	obVelY(a0)
0001B140 5240                       		addq.w	#1,d0
0001B142                            
0001B142                            loc_1800A:
0001B142 6600                       		bne.s	loc_1801A
0001B144 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001B14A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B14E 4228 003F                  		clr.b	$3F(a0)
0001B152                            
0001B152                            loc_1801A:
0001B152 6000 FF1C                  		bra.w	loc_17F38
0001B156                            ; ===========================================================================
0001B156                            
0001B156                            loc_1801E:
0001B156 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
0001B15C 6E00                       		bgt.s	loc_1804E
0001B15E 317C 0100 0038             		move.w	#$100,$38(a0)
0001B164 317C 0140 0010             		move.w	#$140,obVelX(a0)
0001B16A 317C FF80 0012             		move.w	#-$80,obVelY(a0)
0001B170 4A28 003D                  		tst.b	$3D(a0)
0001B174 6700                       		beq.s	loc_18046
0001B176 E1E8 0010                  		asl	obVelX(a0)
0001B17A E1E8 0012                  		asl	obVelY(a0)
0001B17E                            
0001B17E                            loc_18046:
0001B17E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B182 6000 FEEC                  		bra.w	loc_17F38
0001B186                            ; ===========================================================================
0001B186                            
0001B186                            loc_1804E:
0001B186 08E8 0000 0022             		bset	#0,obStatus(a0)
0001B18C 5428 003F                  		addq.b	#2,$3F(a0)
0001B190 1028 003F                  		move.b	$3F(a0),d0
0001B194 4EB9 0000 3A32             		jsr	(CalcSine).l
0001B19A 4A41                       		tst.w	d1
0001B19C 6A00                       		bpl.s	loc_1806C
0001B19E 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001B1A4                            
0001B1A4                            loc_1806C:
0001B1A4 E840                       		asr.w	#4,d0
0001B1A6 4840                       		swap	d0
0001B1A8 4240                       		clr.w	d0
0001B1AA D0A8 0030                  		add.l	$30(a0),d0
0001B1AE 4840                       		swap	d0
0001B1B0 3140 0008                  		move.w	d0,obX(a0)
0001B1B4 3028 0012                  		move.w	obVelY(a0),d0
0001B1B8 3238 D00C                  		move.w	(v_player+obY).w,d1
0001B1BC 9268 000C                  		sub.w	obY(a0),d1
0001B1C0 6500                       		bcs.s	loc_180A2
0001B1C2 0441 0048                  		subi.w	#$48,d1
0001B1C6 6500                       		bcs.s	loc_180A2
0001B1C8 E240                       		asr.w	#1,d0
0001B1CA 0441 0028                  		subi.w	#$28,d1
0001B1CE 6500                       		bcs.s	loc_180A2
0001B1D0 E240                       		asr.w	#1,d0
0001B1D2 0441 0028                  		subi.w	#$28,d1
0001B1D6 6500                       		bcs.s	loc_180A2
0001B1D8 7000                       		moveq	#0,d0
0001B1DA                            
0001B1DA                            loc_180A2:
0001B1DA 48C0                       		ext.l	d0
0001B1DC E180                       		asl.l	#8,d0
0001B1DE 4A28 003D                  		tst.b	$3D(a0)
0001B1E2 6700                       		beq.s	loc_180AE
0001B1E4 D080                       		add.l	d0,d0
0001B1E6                            
0001B1E6                            loc_180AE:
0001B1E6 D1A8 0038                  		add.l	d0,$38(a0)
0001B1EA 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001B1F0 6000 FE8E                  		bra.w	loc_17F48
0001B1F4                            ; ===========================================================================
0001B1F4                            
0001B1F4                            loc_180BC:
0001B1F4 70FE                       		moveq	#-2,d0
0001B1F6 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
0001B1FC 6500                       		bcs.s	loc_180D2
0001B1FE 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
0001B204 4268 0010                  		clr.w	obVelX(a0)
0001B208 5240                       		addq.w	#1,d0
0001B20A                            
0001B20A                            loc_180D2:
0001B20A 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
0001B210 6E00                       		bgt.s	loc_180E6
0001B212 317C 00C0 0038             		move.w	#$C0,$38(a0)
0001B218 4268 0012                  		clr.w	obVelY(a0)
0001B21C 5240                       		addq.w	#1,d0
0001B21E                            
0001B21E                            loc_180E6:
0001B21E 6600                       		bne.s	loc_180F2
0001B220 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B224 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001B22A                            
0001B22A                            loc_180F2:
0001B22A 6000 FE44                  		bra.w	loc_17F38
0001B22E                            ; ===========================================================================
0001B22E                            
0001B22E                            loc_180F6:
0001B22E 4A28 003D                  		tst.b	$3D(a0)
0001B232 6600                       		bne.s	loc_18112
0001B234 0C69 1EC8 0008             		cmpi.w	#$1EC8,obX(a1)
0001B23A 6D00                       		blt.s	loc_18126
0001B23C 0C69 00F0 000C             		cmpi.w	#$F0,obY(a1)
0001B242 6E00                       		bgt.s	loc_18126
0001B244 117C 0032 003C             		move.b	#$32,$3C(a0)
0001B24A                            
0001B24A                            loc_18112:
0001B24A 4A38 FE2D                          tst.b     (v_invinc).w
0001B24E 6600                               bne.s   @boss_invinc
0001B250                            
0001B250 1038 F5C6                          move.b   (v_Saved_music),d0
0001B254 6000 0000                          bra.w      @boss_play
0001B258                            
0001B258                            @boss_invinc:
0001B258 103C 0000                          move.b #bgm_Invincible,d0
0001B25C                            
0001B25C                            @boss_play:
0001B25C 4EB8 124A                          jsr PlaySound
0001B260 4238 F7AA                          clr.b    (f_lockscreen).w
0001B264 08E8 0000 0022                     bset    #0,obStatus(a0)
0001B26A 5428 0025                          addq.b    #2,ob2ndRout(a0)
0001B26E                            
0001B26E                            loc_18126:
0001B26E 6000 FE00                  		bra.w	loc_17F38
0001B272                            ; ===========================================================================
0001B272                            
0001B272                            loc_1812A:
0001B272 4A28 003D                  		tst.b	$3D(a0)
0001B276 6600                       		bne.s	loc_18136
0001B278 5328 003C                  		subq.b	#1,$3C(a0)
0001B27C 6600                       		bne.s	loc_1814E
0001B27E                            
0001B27E                            loc_18136:
0001B27E 4228 003C                  		clr.b	$3C(a0)
0001B282 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001B288 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001B28E 4228 003D                  		clr.b	$3D(a0)
0001B292 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B296                            
0001B296                            loc_1814E:
0001B296 6000 FDD8                  		bra.w	loc_17F38
0001B29A                            ; ===========================================================================
0001B29A                            
0001B29A                            loc_18152:
0001B29A 0C78 2030 F72A             		cmpi.w	#$2030,(v_limitright2).w
0001B2A0 6400                       		bcc.s	loc_18160
0001B2A2 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001B2A6 6000                       		bra.s	loc_18166
0001B2A8                            ; ===========================================================================
0001B2A8                            
0001B2A8                            loc_18160:
0001B2A8 4A28 0001                  		tst.b	obRender(a0)
0001B2AC 6A00                       		bpl.s	Obj77_ShipDel
0001B2AE                            
0001B2AE                            loc_18166:
0001B2AE 6000 FDC0                  		bra.w	loc_17F38
0001B2B2                            ; ===========================================================================
0001B2B2                            
0001B2B2                            Obj77_ShipDel:
0001B2B2 4EF9 0000 F9B8             		jmp	(DeleteObject).l
0001B2B8                            ; ===========================================================================
0001B2B8                            
0001B2B8                            Obj77_FaceMain:	; Routine 4
0001B2B8 2268 0034                  		movea.l	$34(a0),a1
0001B2BC 1011                       		move.b	(a1),d0
0001B2BE B010                       		cmp.b	(a0),d0
0001B2C0 6600                       		bne.s	Obj77_FaceDel
0001B2C2 7000                       		moveq	#0,d0
0001B2C4 1029 0025                  		move.b	ob2ndRout(a1),d0
0001B2C8 7201                       		moveq	#1,d1
0001B2CA 4A28 003D                  		tst.b	$3D(a0)
0001B2CE 6700                       		beq.s	loc_1818C
0001B2D0 720A                       		moveq	#$A,d1
0001B2D2 6000                       		bra.s	loc_181A0
0001B2D4                            ; ===========================================================================
0001B2D4                            
0001B2D4                            loc_1818C:
0001B2D4 4A29 0020                  		tst.b	obColType(a1)
0001B2D8 6600                       		bne.s	loc_18196
0001B2DA 7205                       		moveq	#5,d1
0001B2DC 6000                       		bra.s	loc_181A0
0001B2DE                            ; ===========================================================================
0001B2DE                            
0001B2DE                            loc_18196:
0001B2DE 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001B2E4 6500                       		bcs.s	loc_181A0
0001B2E6 7204                       		moveq	#4,d1
0001B2E8                            
0001B2E8                            loc_181A0:
0001B2E8 1141 001C                  		move.b	d1,obAnim(a0)
0001B2EC 0C00 000E                  		cmpi.b	#$E,d0
0001B2F0 6600                       		bne.s	loc_181B6
0001B2F2 117C 0006 001C             		move.b	#6,obAnim(a0)
0001B2F8 4A28 0001                  		tst.b	obRender(a0)
0001B2FC 6A00                       		bpl.s	Obj77_FaceDel
0001B2FE                            
0001B2FE                            loc_181B6:
0001B2FE 6000                       		bra.s	Obj77_Display
0001B300                            ; ===========================================================================
0001B300                            
0001B300                            Obj77_FaceDel:
0001B300 4EF9 0000 F9B8             		jmp	(DeleteObject).l
0001B306                            ; ===========================================================================
0001B306                            
0001B306                            Obj77_FlameMain:; Routine 6
0001B306 117C 0007 001C             		move.b	#7,obAnim(a0)
0001B30C 2268 0034                  		movea.l	$34(a0),a1
0001B310 1011                       		move.b	(a1),d0
0001B312 B010                       		cmp.b	(a0),d0
0001B314 6600                       		bne.s	Obj77_FlameDel
0001B316 0C29 000E 0025             		cmpi.b	#$E,ob2ndRout(a1)
0001B31C 6600                       		bne.s	loc_181F0
0001B31E 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001B324 4A28 0001                  		tst.b	1(a0)
0001B328 6A00                       		bpl.s	Obj77_FlameDel
0001B32A 6000                       		bra.s	loc_181F0
0001B32C                            ; ===========================================================================
0001B32C 4A69 0010                  		tst.w	obVelX(a1)
0001B330 6700                       		beq.s	loc_181F0
0001B332 117C 0008 001C             		move.b	#8,obAnim(a0)
0001B338                            
0001B338                            loc_181F0:
0001B338 6000                       		bra.s	Obj77_Display
0001B33A                            ; ===========================================================================
0001B33A                            
0001B33A                            Obj77_FlameDel:
0001B33A 4EF9 0000 F9B8             		jmp	(DeleteObject).l
0001B340                            ; ===========================================================================
0001B340                            
0001B340                            Obj77_Display:
0001B340 43F9 0001 ADCE             		lea	(Ani_Eggman).l,a1
0001B346 4EB9 0000 CA24             		jsr	(AnimateSprite).l
0001B34C 2268 0034                  		movea.l	$34(a0),a1
0001B350 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001B356 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001B35C 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001B362 7003                       		moveq	#3,d0
0001B364 C028 0022                  		and.b	obStatus(a0),d0
0001B368 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B36E 8128 0001                  		or.b	d0,obRender(a0)
0001B372 4EF9 0000 F978             		jmp	(DisplaySprite).l
0001B372 4EF9 0000 F978             		jmp	(DisplaySprite).l
0001B378                            		include	"_incObj\73 Boss - Marble.asm"
0001B378                            ; ---------------------------------------------------------------------------
0001B378                            ; Object 73 - Eggman (MZ)
0001B378                            ; ---------------------------------------------------------------------------
0001B378                            
0001B378                            BossMarble:
0001B378 7000                       		moveq	#0,d0
0001B37A 1028 0024                  		move.b	obRoutine(a0),d0
0001B37E 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
0001B382 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
0001B386                            ; ===========================================================================
0001B386 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
0001B388 0000                       		dc.w Obj73_ShipMain-Obj73_Index
0001B38A 0000                       		dc.w Obj73_FaceMain-Obj73_Index
0001B38C 0000                       		dc.w Obj73_FlameMain-Obj73_Index
0001B38E 0000                       		dc.w Obj73_TubeMain-Obj73_Index
0001B390                            
0001B390 0200 0200                  Obj73_ObjData:	dc.b 2,	0, $02, $00		; routine number, animation, priority (high and low bytes)
0001B394 0401 0200                  		dc.b 4,	1, $02, $00
0001B398 0607 0200                  		dc.b 6,	7, $02, $00
0001B39C 0800 0180                  		dc.b 8,	0, $01, $80
0001B3A0                            ; ===========================================================================
0001B3A0                            
0001B3A0                            Obj73_Main:	; Routine 0
0001B3A0 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001B3A6 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001B3AC 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B3B2 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001B3B8 45FA FFD6                  		lea	Obj73_ObjData(pc),a2
0001B3BC 2248                       		movea.l	a0,a1
0001B3BE 7203                       		moveq	#3,d1
0001B3C0 6000                       		bra.s	Obj73_LoadBoss
0001B3C2                            ; ===========================================================================
0001B3C2                            
0001B3C2                            Obj73_Loop:
0001B3C2 4EB9 0000 FE1A             		jsr	(FindNextFreeObj).l
0001B3C8 6600                       		bne.s	Obj73_ShipMain
0001B3CA 12BC 0073                  		move.b	#id_BossMarble,0(a1)
0001B3CE 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B3D4 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001B3DA                            
0001B3DA                            Obj73_LoadBoss:
0001B3DA 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001B3E0 4229 0025                  		clr.b	ob2ndRout(a1)
0001B3E4 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001B3E8 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001B3EC 335A 0018                  		move.w	(a2)+,obPriority(a1)
0001B3F0 237C 0001 AE1E 0004        		move.l	#Map_Eggman,obMap(a1)
0001B3F8 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001B3FE 137C 0004 0001             		move.b	#4,obRender(a1)
0001B404 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001B40A 2348 0034                  		move.l	a0,$34(a1)
0001B40E 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
0001B412                            
0001B412                            Obj73_ShipMain:	; Routine 2
0001B412 7000                       		moveq	#0,d0
0001B414 1028 0025                  		move.b	ob2ndRout(a0),d0
0001B418 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
0001B41C 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
0001B420 43F9 0001 ADCE             		lea	(Ani_Eggman).l,a1
0001B426 4EB9 0000 CA24             		jsr	(AnimateSprite).l
0001B42C 7003                       		moveq	#3,d0
0001B42E C028 0022                  		and.b	obStatus(a0),d0
0001B432 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B438 8128 0001                  		or.b	d0,obRender(a0)
0001B43C 4EF9 0000 F978             		jmp	(DisplaySprite).l
0001B442                            ; ===========================================================================
0001B442 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
0001B444 0000                       		dc.w loc_183AA-Obj73_ShipIndex
0001B446 0000                       		dc.w loc_184F6-Obj73_ShipIndex
0001B448 0000                       		dc.w loc_1852C-Obj73_ShipIndex
0001B44A 0000                       		dc.w loc_18582-Obj73_ShipIndex
0001B44C                            ; ===========================================================================
0001B44C                            
0001B44C                            loc_18302:
0001B44C 1028 003F                  		move.b	$3F(a0),d0
0001B450 5428 003F                  		addq.b	#2,$3F(a0)
0001B454 4EB9 0000 3A32             		jsr	(CalcSine).l
0001B45A E440                       		asr.w	#2,d0
0001B45C 3140 0012                  		move.w	d0,obVelY(a0)
0001B460 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001B466 6100 F552                  		bsr.w	BossMove
0001B46A 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001B470 6600                       		bne.s	loc_18334
0001B472 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B476 4228 0028                  		clr.b	obSubtype(a0)
0001B47A 42A8 0010                  		clr.l	obVelX(a0)
0001B47E                            
0001B47E                            loc_18334:
0001B47E 4EB9 0000 3A0C             		jsr	(RandomNumber).l
0001B484 1140 0034                  		move.b	d0,$34(a0)
0001B488                            
0001B488                            loc_1833E:
0001B488 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001B48E 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001B494 0C28 0004 0025             		cmpi.b	#4,ob2ndRout(a0)
0001B49A 6400                       		bcc.s	locret_18390
0001B49C 4A28 0022                  		tst.b	obStatus(a0)
0001B4A0 6B00                       		bmi.s	loc_18392
0001B4A2 4A28 0020                  		tst.b	obColType(a0)
0001B4A6 6600                       		bne.s	locret_18390
0001B4A8 4A28 003E                  		tst.b	$3E(a0)
0001B4AC 6600                       		bne.s	loc_18374
0001B4AE 117C 0028 003E             		move.b	#$28,$3E(a0)
0001B4BE                            
0001B4BE                            loc_18374:
0001B4BE 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001B4C2 7000                       		moveq	#0,d0
0001B4C4 4A51                       		tst.w	(a1)
0001B4C6 6600                       		bne.s	loc_18382
0001B4C8 303C 0EEE                  		move.w	#cWhite,d0
0001B4CC                            
0001B4CC                            loc_18382:
0001B4CC 3280                       		move.w	d0,(a1)
0001B4CE 5328 003E                  		subq.b	#1,$3E(a0)
0001B4D2 6600                       		bne.s	locret_18390
0001B4D4 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B4DA                            
0001B4DA                            locret_18390:
0001B4DA 4E75                       		rts	
0001B4DC                            ; ===========================================================================
0001B4DC                            
0001B4DC                            loc_18392:
0001B4DC 7064                       		moveq	#100,d0
0001B4DE 6100 0000                  		bsr.w	AddPoints
0001B4E2 117C 0004 0025             		move.b	#4,ob2ndRout(a0)
0001B4E8 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001B4EE 4268 0010                  		clr.w	obVelX(a0)
0001B4F2 4E75                       		rts	
0001B4F4                            ; ===========================================================================
0001B4F4                            
0001B4F4                            loc_183AA:
0001B4F4 7000                       		moveq	#0,d0
0001B4F6 1028 0028                  		move.b	obSubtype(a0),d0
0001B4FA 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
0001B4FE 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
0001B502 0228 0006 0028             		andi.b	#6,obSubtype(a0)
0001B508 6000 FF7E                  		bra.w	loc_1833E
0001B50C                            ; ===========================================================================
0001B50C 0000                       off_183C2:	dc.w loc_183CA-off_183C2
0001B50E 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001B510 0000                       		dc.w loc_183CA-off_183C2
0001B512 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001B514                            ; ===========================================================================
0001B514                            
0001B514                            loc_183CA:
0001B514 4A68 0010                  		tst.w	obVelX(a0)
0001B518 6600                       		bne.s	loc_183FE
0001B51A 7040                       		moveq	#$40,d0
0001B51C 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001B522 6700                       		beq.s	loc_183E6
0001B524 6500                       		bcs.s	loc_183DE
0001B526 4440                       		neg.w	d0
0001B528                            
0001B528                            loc_183DE:
0001B528 3140 0012                  		move.w	d0,obVelY(a0)
0001B52C 6000 F48C                  		bra.w	BossMove
0001B530                            ; ===========================================================================
0001B530                            
0001B530                            loc_183E6:
0001B530 317C 0200 0010             		move.w	#$200,obVelX(a0)
0001B536 317C 0100 0012             		move.w	#$100,obVelY(a0)
0001B53C 0828 0000 0022             		btst	#0,obStatus(a0)
0001B542 6600                       		bne.s	loc_183FE
0001B544 4468 0010                  		neg.w	obVelX(a0)
0001B548                            
0001B548                            loc_183FE:
0001B548 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
0001B54E 6400                       		bcc.s	Obj73_MakeLava
0001B550 6100 F468                  		bsr.w	BossMove
0001B554 5968 0012                  		subq.w	#4,obVelY(a0)
0001B558                            
0001B558                            Obj73_MakeLava:
0001B558 5328 0034                  		subq.b	#1,$34(a0)
0001B55C 6400                       		bcc.s	loc_1845C
0001B55E 4EB9 0000 FE04             		jsr	(FindFreeObj).l
0001B564 6600                       		bne.s	loc_1844A
0001B566 12BC 0014                  		move.b	#id_LavaBall,0(a1) ; load lava ball object
0001B56A 337C 02E8 000C             		move.w	#$2E8,obY(a1)	; set Y	position
0001B570 4EB9 0000 3A0C             		jsr	(RandomNumber).l
0001B576 0280 0000 FFFF             		andi.l	#$FFFF,d0
0001B57C 80FC 0050                  		divu.w	#$50,d0
0001B580 4840                       		swap	d0
0001B582 0640 1878                  		addi.w	#$1878,d0
0001B586 3340 0008                  		move.w	d0,obX(a1)
0001B58A EE09                       		lsr.b	#7,d1
0001B58C 337C 00FF 0028             		move.w	#$FF,obSubtype(a1)
0001B592                            
0001B592                            loc_1844A:
0001B592 4EB9 0000 3A0C             		jsr	(RandomNumber).l
0001B598 0200 001F                  		andi.b	#$1F,d0
0001B59C 0600 0040                  		addi.b	#$40,d0
0001B5A0 1140 0034                  		move.b	d0,$34(a0)
0001B5A4                            
0001B5A4                            loc_1845C:
0001B5A4 0828 0000 0022             		btst	#0,obStatus(a0)
0001B5AA 6700                       		beq.s	loc_18474
0001B5AC 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001B5B2 6D00                       		blt.s	locret_1849C
0001B5B4 317C 1910 0030             		move.w	#$1910,$30(a0)
0001B5BA 6000                       		bra.s	loc_18482
0001B5BC                            ; ===========================================================================
0001B5BC                            
0001B5BC                            loc_18474:
0001B5BC 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
0001B5C2 6E00                       		bgt.s	locret_1849C
0001B5C4 317C 1830 0030             		move.w	#$1830,$30(a0)
0001B5CA                            
0001B5CA                            loc_18482:
0001B5CA 4268 0010                  		clr.w	obVelX(a0)
0001B5CE 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001B5D4 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001B5DA 6400                       		bcc.s	loc_18498
0001B5DC 4468 0012                  		neg.w	obVelY(a0)
0001B5E0                            
0001B5E0                            loc_18498:
0001B5E0 5428 0028                  		addq.b	#2,obSubtype(a0)
0001B5E4                            
0001B5E4                            locret_1849C:
0001B5E4 4E75                       		rts	
0001B5E6                            ; ===========================================================================
0001B5E6                            
0001B5E6                            Obj73_MakeLava2:
0001B5E6 6100 F3D2                  		bsr.w	BossMove
0001B5EA 3028 0038                  		move.w	$38(a0),d0
0001B5EE 0440 022C                  		subi.w	#$22C,d0
0001B5F2 6E00                       		bgt.s	locret_184F4
0001B5F4 303C 022C                  		move.w	#$22C,d0
0001B5F8 4A68 0012                  		tst.w	obVelY(a0)
0001B5FC 6700                       		beq.s	loc_184EA
0001B5FE 4268 0012                  		clr.w	obVelY(a0)
0001B602 317C 0050 003C             		move.w	#$50,$3C(a0)
0001B608 0868 0000 0022             		bchg	#0,obStatus(a0)
0001B60E 4EB9 0000 FE04             		jsr	(FindFreeObj).l
0001B614 6600                       		bne.s	loc_184EA
0001B616 3368 0030 0008             		move.w	$30(a0),obX(a1)
0001B61C 3368 0038 000C             		move.w	$38(a0),obY(a1)
0001B622 0669 0018 000C             		addi.w	#$18,obY(a1)
0001B628 12BC 0074                  		move.b	#id_BossFire,(a1)	; load lava ball object
0001B62C 137C 0001 0028             		move.b	#1,obSubtype(a1)
0001B632                            
0001B632                            loc_184EA:
0001B632 5368 003C                  		subq.w	#1,$3C(a0)
0001B636 6600                       		bne.s	locret_184F4
0001B638 5428 0028                  		addq.b	#2,obSubtype(a0)
0001B63C                            
0001B63C                            locret_184F4:
0001B63C 4E75                       		rts	
0001B63E                            ; ===========================================================================
0001B63E                            
0001B63E                            loc_184F6:
0001B63E 5368 003C                  		subq.w	#1,$3C(a0)
0001B642 6B00                       		bmi.s	loc_18500
0001B644 6000 F332                  		bra.w	BossDefeated
0001B648                            ; ===========================================================================
0001B648                            
0001B648                            loc_18500:
0001B648 08E8 0000 0022             		bset	#0,obStatus(a0)
0001B64E 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001B654 4268 0010                  		clr.w	obVelX(a0)
0001B658 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B65C 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001B662 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001B666 6600                       		bne.s	locret_1852A
0001B668 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001B66E 4268 0012                  		clr.w	obVelY(a0)
0001B672                            
0001B672                            locret_1852A:
0001B672 4E75                       		rts	
0001B674                            ; ===========================================================================
0001B674                            
0001B674                            loc_1852C:
0001B674 5268 003C                  		addq.w	#1,$3C(a0)
0001B678 6700                       		beq.s	loc_18544
0001B67A 6A00                       		bpl.s	loc_1854E
0001B67C 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
0001B682 6400                       		bcc.s	loc_18544
0001B684 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001B68A 6000                       		bra.s	loc_1857A
0001B68C                            ; ===========================================================================
0001B68C                            
0001B68C                            loc_18544:
0001B68C 4268 0012                  		clr.w	obVelY(a0)
0001B690 4268 003C                  		clr.w	$3C(a0)
0001B694 6000                       		bra.s	loc_1857A
0001B696                            ; ===========================================================================
0001B696                            
0001B696                            loc_1854E:
0001B696 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001B69C 6500                       		bcs.s	loc_18566
0001B69E 6700                       		beq.s	loc_1856C
0001B6A0 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001B6A6 6500                       		bcs.s	loc_1857A
0001B6A8 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B6AC 6000                       		bra.s	loc_1857A
0001B6AE                            ; ===========================================================================
0001B6AE                            
0001B6AE                            loc_18566:
0001B6AE 5168 0012                  		subq.w	#8,obVelY(a0)
0001B6B2 6000                       		bra.s	loc_1857A
0001B6B4                            ; ===========================================================================
0001B6B4                            
0001B6B4                            loc_1856C:
0001B6B4 4268 0012                  		clr.w	obVelY(a0)
0001B6C2                            
0001B6C2                            loc_1857A:
0001B6C2 6100 F2F6                  		bsr.w	BossMove
0001B6C6 6000 FDC0                  		bra.w	loc_1833E
0001B6CA                            ; ===========================================================================
0001B6CA                            
0001B6CA                            loc_18582:
0001B6CA 317C 0500 0010             		move.w	#$500,obVelX(a0)
0001B6D0 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001B6D6 0C78 1960 F72A             		cmpi.w	#$1960,(v_limitright2).w
0001B6DC 6400                       		bcc.s	loc_1859C
0001B6DE 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001B6E2 6000                       		bra.s	loc_185A2
0001B6E4                            ; ===========================================================================
0001B6E4                            
0001B6E4                            loc_1859C:
0001B6E4 4A28 0001                  		tst.b	obRender(a0)
0001B6E8 6A00                       		bpl.s	Obj73_ShipDel
0001B6EA                            
0001B6EA                            loc_185A2:
0001B6EA 6100 F2CE                  		bsr.w	BossMove
0001B6EE 6000 FD98                  		bra.w	loc_1833E
0001B6F2                            ; ===========================================================================
0001B6F2                            
0001B6F2                            Obj73_ShipDel:
0001B6F2 4EF9 0000 F9B8             		jmp	(DeleteObject).l
0001B6F8                            ; ===========================================================================
0001B6F8                            
0001B6F8                            Obj73_FaceMain:	; Routine 4
0001B6F8 7000                       		moveq	#0,d0
0001B6FA 7201                       		moveq	#1,d1
0001B6FC 2268 0034                  		movea.l	$34(a0),a1
0001B700 1029 0025                  		move.b	ob2ndRout(a1),d0
0001B704 5540                       		subq.w	#2,d0
0001B706 6600                       		bne.s	loc_185D2
0001B708 0829 0001 0028             		btst	#1,obSubtype(a1)
0001B70E 6700                       		beq.s	loc_185DA
0001B710 4A69 0012                  		tst.w	obVelY(a1)
0001B714 6600                       		bne.s	loc_185DA
0001B716 7204                       		moveq	#4,d1
0001B718 6000                       		bra.s	loc_185EE
0001B71A                            ; ===========================================================================
0001B71A                            
0001B71A                            loc_185D2:
0001B71A 5500                       		subq.b	#2,d0
0001B71C 6B00                       		bmi.s	loc_185DA
0001B71E 720A                       		moveq	#$A,d1
0001B720 6000                       		bra.s	loc_185EE
0001B722                            ; ===========================================================================
0001B722                            
0001B722                            loc_185DA:
0001B722 4A29 0020                  		tst.b	obColType(a1)
0001B726 6600                       		bne.s	loc_185E4
0001B728 7205                       		moveq	#5,d1
0001B72A 6000                       		bra.s	loc_185EE
0001B72C                            ; ===========================================================================
0001B72C                            
0001B72C                            loc_185E4:
0001B72C 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001B732 6500                       		bcs.s	loc_185EE
0001B734 7204                       		moveq	#4,d1
0001B736                            
0001B736                            loc_185EE:
0001B736 1141 001C                  		move.b	d1,obAnim(a0)
0001B73A 5900                       		subq.b	#4,d0
0001B73C 6600                       		bne.s	loc_18602
0001B73E 117C 0006 001C             		move.b	#6,obAnim(a0)
0001B744 4A28 0001                  		tst.b	obRender(a0)
0001B748 6A00                       		bpl.s	Obj73_FaceDel
0001B74A                            
0001B74A                            loc_18602:
0001B74A 6000                       		bra.s	Obj73_Display
0001B74C                            ; ===========================================================================
0001B74C                            
0001B74C                            Obj73_FaceDel:
0001B74C 4EF9 0000 F9B8             		jmp	(DeleteObject).l
0001B752                            ; ===========================================================================
0001B752                            
0001B752                            Obj73_FlameMain:; Routine 6
0001B752 117C 0007 001C             		move.b	#7,obAnim(a0)
0001B758 2268 0034                  		movea.l	$34(a0),a1
0001B75C 0C29 0008 0025             		cmpi.b	#8,ob2ndRout(a1)
0001B762 6D00                       		blt.s	loc_1862A
0001B764 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001B76A 4A28 0001                  		tst.b	obRender(a0)
0001B76E 6A00                       		bpl.s	Obj73_FlameDel
0001B770 6000                       		bra.s	loc_18636
0001B772                            ; ===========================================================================
0001B772                            
0001B772                            loc_1862A:
0001B772 4A69 0010                  		tst.w	obVelX(a1)
0001B776 6700                       		beq.s	loc_18636
0001B778 117C 0008 001C             		move.b	#8,obAnim(a0)
0001B77E                            
0001B77E                            loc_18636:
0001B77E 6000                       		bra.s	Obj73_Display
0001B780                            ; ===========================================================================
0001B780                            
0001B780                            Obj73_FlameDel:
0001B780 4EF9 0000 F9B8             		jmp	(DeleteObject).l
0001B786                            ; ===========================================================================
0001B786                            
0001B786                            Obj73_Display:
0001B786 43F9 0001 ADCE             		lea	(Ani_Eggman).l,a1
0001B78C 4EB9 0000 CA24             		jsr	(AnimateSprite).l
0001B792                            
0001B792                            loc_1864A:
0001B792 2268 0034                  		movea.l	$34(a0),a1
0001B796 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001B79C 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001B7A2 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001B7A8 7003                       		moveq	#3,d0
0001B7AA C028 0022                  		and.b	obStatus(a0),d0
0001B7AE 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B7B4 8128 0001                  		or.b	d0,obRender(a0)
0001B7B8 4EF9 0000 F978             		jmp	(DisplaySprite).l
0001B7BE                            ; ===========================================================================
0001B7BE                            
0001B7BE                            Obj73_TubeMain:	; Routine 8
0001B7BE 2268 0034                  		movea.l	$34(a0),a1
0001B7C2 0C29 0008 0025             		cmpi.b	#8,ob2ndRout(a1)
0001B7C8 6600                       		bne.s	loc_18688
0001B7CA 4A28 0001                  		tst.b	obRender(a0)
0001B7CE 6A00                       		bpl.s	Obj73_TubeDel
0001B7D0                            
0001B7D0                            loc_18688:
0001B7D0 217C 0001 AF0E 0004        		move.l	#Map_BossItems,obMap(a0)
0001B7D8 317C 246C 0002             		move.w	#$246C,obGfx(a0)
0001B7DE 117C 0004 001A             		move.b	#4,obFrame(a0)
0001B7E4 60AC                       		bra.s	loc_1864A
0001B7E6                            ; ===========================================================================
0001B7E6                            
0001B7E6                            Obj73_TubeDel:
0001B7E6 4EF9 0000 F9B8             		jmp	(DeleteObject).l
0001B7E6 4EF9 0000 F9B8             		jmp	(DeleteObject).l
0001B7EC                            		include	"_incObj\74 MZ Boss Fire.asm"
0001B7EC                            ; ---------------------------------------------------------------------------
0001B7EC                            ; Object 74 - lava that	Eggman drops (MZ)
0001B7EC                            ; ---------------------------------------------------------------------------
0001B7EC                            
0001B7EC                            BossFire:
0001B7EC 7000                       		moveq	#0,d0
0001B7EE 1028 0024                  		move.b	obRoutine(a0),d0
0001B7F2 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
0001B7F6 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
0001B7FA 4EF9 0000 F978             		jmp	(DisplaySprite).l
0001B800                            ; ===========================================================================
0001B800 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
0001B802 0000                       		dc.w Obj74_Action-Obj74_Index
0001B804 0000                       		dc.w loc_18886-Obj74_Index
0001B806 0000                       		dc.w Obj74_Delete3-Obj74_Index
0001B808                            ; ===========================================================================
0001B808                            
0001B808                            Obj74_Main:	; Routine 0
0001B808 117C 0008 0016             		move.b	#8,obHeight(a0)
0001B80E 117C 0008 0017             		move.b	#8,obWidth(a0)
0001B814 217C 0000 D676 0004        		move.l	#Map_Fire,obMap(a0)
0001B81C 317C 0345 0002             		move.w	#$345,obGfx(a0)
0001B822 117C 0004 0001             		move.b	#4,obRender(a0)
0001B828 317C 0280 0018             		move.w	#$280,obPriority(a0)
0001B82E 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001B834 117C 0008 0014             		move.b	#8,obActWid(a0)
0001B83A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001B83E 4A28 0028                  		tst.b	obSubtype(a0)
0001B842 6600                       		bne.s	loc_1870A
0001B844 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001B84A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001B84E 6000 0000                  		bra.w	loc_18886
0001B852                            ; ===========================================================================
0001B852                            
0001B852                            loc_1870A:
0001B852 117C 001E 0029             		move.b	#$1E,$29(a0)
0001B862                            
0001B862                            Obj74_Action:	; Routine 2
0001B862 7000                       		moveq	#0,d0
0001B864 1028 0025                  		move.b	ob2ndRout(a0),d0
0001B868 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
0001B86C 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
0001B870 4EB9 0000 F964             		jsr	(SpeedToPos).l
0001B876 43F9 0001 083C             		lea	(Ani_Fire).l,a1
0001B87C 4EB9 0000 CA24             		jsr	(AnimateSprite).l
0001B882 0C68 02E8 000C             		cmpi.w	#$2E8,obY(a0)
0001B888 6200                       		bhi.s	Obj74_Delete
0001B88A 4E75                       		rts	
0001B88C                            ; ===========================================================================
0001B88C                            
0001B88C                            Obj74_Delete:
0001B88C 4EF9 0000 F9B8             		jmp	(DeleteObject).l
0001B892                            ; ===========================================================================
0001B892 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
0001B894 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
0001B896 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
0001B898 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
0001B89A                            ; ===========================================================================
0001B89A                            
0001B89A                            Obj74_Drop:
0001B89A 08E8 0001 0022             		bset	#1,obStatus(a0)
0001B8A0 5328 0029                  		subq.b	#1,$29(a0)
0001B8A4 6A00                       		bpl.s	locret_18780
0001B8A6 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001B8AC 4228 0028                  		clr.b	obSubtype(a0)
0001B8B0 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001B8B6 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001B8BC 6100 C634                  		bsr.w	ObjFloorDist
0001B8C0 4A41                       		tst.w	d1
0001B8C2 6A00                       		bpl.s	locret_18780
0001B8C4 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B8C8                            
0001B8C8                            locret_18780:
0001B8C8 4E75                       		rts	
0001B8CA                            ; ===========================================================================
0001B8CA                            
0001B8CA                            Obj74_MakeFlame:
0001B8CA 5568 000C                  		subq.w	#2,obY(a0)
0001B8CE 08E8 0007 0002             		bset	#7,obGfx(a0)
0001B8D4 317C 00A0 0010             		move.w	#$A0,obVelX(a0)
0001B8DA 4268 0012                  		clr.w	obVelY(a0)
0001B8DE 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001B8E4 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001B8EA 117C 0003 0029             		move.b	#3,$29(a0)
0001B8F0 4EB9 0000 FE1A             		jsr	(FindNextFreeObj).l
0001B8F6 6600                       		bne.s	loc_187CA
0001B8F8 47D1                       		lea	(a1),a3
0001B8FA 45D0                       		lea	(a0),a2
0001B8FC 7003                       		moveq	#3,d0
0001B8FE                            
0001B8FE                            Obj74_Loop:
0001B8FE 26DA                       		move.l	(a2)+,(a3)+
0001B900 26DA                       		move.l	(a2)+,(a3)+
0001B902 26DA                       		move.l	(a2)+,(a3)+
0001B904 26DA                       		move.l	(a2)+,(a3)+
0001B906 51C8 FFF6                  		dbf	d0,Obj74_Loop
0001B90A                            
0001B90A 4469 0010                  		neg.w	obVelX(a1)
0001B90E 5429 0025                  		addq.b	#2,ob2ndRout(a1)
0001B912                            
0001B912                            loc_187CA:
0001B912 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B916 4E75                       		rts	
0001B918                            
0001B918                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B918                            
0001B918                            
0001B918                            Obj74_Duplicate2:
0001B918 4EB9 0000 FE1A             		jsr	(FindNextFreeObj).l
0001B91E 6600                       		bne.s	locret_187EE
0001B920 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B926 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001B92C 12BC 0074                  		move.b	#id_BossFire,(a1)
0001B930 337C 0067 0028             		move.w	#$67,obSubtype(a1)
0001B936                            
0001B936                            locret_187EE:
0001B936 4E75                       		rts	
0001B938                            ; End of function Obj74_Duplicate2
0001B938                            
0001B938                            ; ===========================================================================
0001B938                            
0001B938                            Obj74_Duplicate:
0001B938 6100 C5B8                  		bsr.w	ObjFloorDist
0001B93C 4A41                       		tst.w	d1
0001B93E 6A00                       		bpl.s	loc_18826
0001B940 3028 0008                  		move.w	obX(a0),d0
0001B944 0C40 1940                  		cmpi.w	#$1940,d0
0001B948 6E00                       		bgt.s	loc_1882C
0001B94A 3228 0030                  		move.w	$30(a0),d1
0001B94E B240                       		cmp.w	d0,d1
0001B950 6700                       		beq.s	loc_1881E
0001B952 0240 0010                  		andi.w	#$10,d0
0001B956 0241 0010                  		andi.w	#$10,d1
0001B95A B240                       		cmp.w	d0,d1
0001B95C 6700                       		beq.s	loc_1881E
0001B95E 61B8                       		bsr.s	Obj74_Duplicate2
0001B960 3168 0008 0032             		move.w	obX(a0),$32(a0)
0001B966                            
0001B966                            loc_1881E:
0001B966 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001B96C 4E75                       		rts	
0001B96E                            ; ===========================================================================
0001B96E                            
0001B96E                            loc_18826:
0001B96E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B972 4E75                       		rts	
0001B974                            ; ===========================================================================
0001B974                            
0001B974                            loc_1882C:
0001B974 5428 0024                  		addq.b	#2,obRoutine(a0)
0001B978 4E75                       		rts	
0001B97A                            ; ===========================================================================
0001B97A                            
0001B97A                            Obj74_FallEdge:
0001B97A 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001B980 0668 0024 0012             		addi.w	#$24,obVelY(a0)	; make flame fall
0001B986 3028 0008                  		move.w	obX(a0),d0
0001B98A 9068 0032                  		sub.w	$32(a0),d0
0001B98E 6A00                       		bpl.s	loc_1884A
0001B990 4440                       		neg.w	d0
0001B992                            
0001B992                            loc_1884A:
0001B992 0C40 0012                  		cmpi.w	#$12,d0
0001B996 6600                       		bne.s	loc_18856
0001B998 08A8 0007 0002             		bclr	#7,obGfx(a0)
0001B99E                            
0001B99E                            loc_18856:
0001B99E 6100 C552                  		bsr.w	ObjFloorDist
0001B9A2 4A41                       		tst.w	d1
0001B9A4 6A00                       		bpl.s	locret_1887E
0001B9A6 5328 0029                  		subq.b	#1,$29(a0)
0001B9AA 6700                       		beq.s	Obj74_Delete2
0001B9AC 4268 0012                  		clr.w	obVelY(a0)
0001B9B0 3168 0032 0008             		move.w	$32(a0),obX(a0)
0001B9B6 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001B9BC 08E8 0007 0002             		bset	#7,obGfx(a0)
0001B9C2 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001B9C6                            
0001B9C6                            locret_1887E:
0001B9C6 4E75                       		rts	
0001B9C8                            ; ===========================================================================
0001B9C8                            
0001B9C8                            Obj74_Delete2:
0001B9C8 4EF9 0000 F9B8             		jmp	(DeleteObject).l
0001B9CE                            ; ===========================================================================
0001B9CE                            
0001B9CE                            loc_18886:	; Routine 4
0001B9CE 08E8 0007 0002             		bset	#7,obGfx(a0)
0001B9D4 5328 0029                  		subq.b	#1,$29(a0)
0001B9D8 6600                       		bne.s	Obj74_Animate
0001B9DA 117C 0001 001C             		move.b	#1,obAnim(a0)
0001B9E0 5968 000C                  		subq.w	#4,obY(a0)
0001B9E4 4228 0020                  		clr.b	obColType(a0)
0001B9E8                            
0001B9E8                            Obj74_Animate:
0001B9E8 43F9 0001 083C             		lea	(Ani_Fire).l,a1
0001B9EE 4EF9 0000 CA24             		jmp	(AnimateSprite).l
0001B9F4                            ; ===========================================================================
0001B9F4                            
0001B9F4                            Obj74_Delete3:	; Routine 6
0001B9F4 4EF9 0000 F9B8             		jmp	(DeleteObject).l
0001B9F4 4EF9 0000 F9B8             		jmp	(DeleteObject).l
0001B9FA                            
0001B9FA                            	Obj7A_Delete:
0001B9FA 4EF9 0000 F9B8             		jmp	(DeleteObject).l
0001BA00                            
0001BA00                            		include	"_incObj\7A Boss - Star Light.asm"
0001BA00                            ; ---------------------------------------------------------------------------
0001BA00                            ; Object 7A - Eggman (SLZ)
0001BA00                            ; ---------------------------------------------------------------------------
0001BA00                            
0001BA00                            BossStarLight:
0001BA00 7000                       		moveq	#0,d0
0001BA02 1028 0024                  		move.b	obRoutine(a0),d0
0001BA06 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
0001BA0A 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
0001BA0E                            ; ===========================================================================
0001BA0E 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
0001BA10 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
0001BA12 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
0001BA14 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
0001BA16 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
0001BA18                            
0001BA18 0200 0200                  Obj7A_ObjData:	dc.b 2,	0, $02, $00		; routine number, animation, priority (high and low bytes)
0001BA1C 0401 0200                  		dc.b 4,	1, $02, $00
0001BA20 0607 0200                  		dc.b 6,	7, $02, $00
0001BA24 0800 0180                  		dc.b 8,	0, $01, $80
0001BA28                            ; ===========================================================================
0001BA28                            
0001BA28                            Obj7A_Main:
0001BA28 317C 2188 0008             		move.w	#$2188,obX(a0)
0001BA2E 317C 0228 000C             		move.w	#$228,obY(a0)
0001BA34 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001BA3A 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001BA40 117C 000F 0020             		move.b	#$F,obColType(a0)
0001BA46 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001BA4C 45FA FFCA                  		lea	Obj7A_ObjData(pc),a2
0001BA50 2248                       		movea.l	a0,a1
0001BA52 7203                       		moveq	#3,d1
0001BA54 6000                       		bra.s	Obj7A_LoadBoss
0001BA56                            ; ===========================================================================
0001BA56                            
0001BA56                            Obj7A_Loop:
0001BA56 4EB9 0000 FE1A             		jsr	(FindNextFreeObj).l
0001BA5C 6600                       		bne.s	loc_1895C
0001BA5E 12BC 007A                  		move.b	#id_BossStarLight,0(a1)
0001BA62 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001BA68 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001BA6E                            
0001BA6E                            Obj7A_LoadBoss:
0001BA6E 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001BA74 4229 0025                  		clr.b	ob2ndRout(a1)
0001BA78 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001BA7C 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001BA80 135A 0018                  		move.b	(a2)+,obPriority(a1)
0001BA84 237C 0001 AE1E 0004        		move.l	#Map_Eggman,obMap(a1)
0001BA8C 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001BA92 137C 0004 0001             		move.b	#4,obRender(a1)
0001BA98 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001BA9E 2348 0034                  		move.l	a0,$34(a1)
0001BAA2 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
0001BAA6                            
0001BAA6                            loc_1895C:
0001BAA6 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001BAAA 45E8 002A                  		lea	$2A(a0),a2
0001BAAE 705E                       		moveq	#$5E,d0
0001BAB0 723E                       		moveq	#$3E,d1
0001BAB2                            
0001BAB2                            loc_18968:
0001BAB2 B011                       		cmp.b	(a1),d0
0001BAB4 6600                       		bne.s	loc_18974
0001BAB6 4A29 0028                  		tst.b	obSubtype(a1)
0001BABA 6700                       		beq.s	loc_18974
0001BABC 34C9                       		move.w	a1,(a2)+
0001BABE                            
0001BABE                            loc_18974:
0001BABE D2FC 0040                  		adda.w	#$40,a1
0001BAC2 51C9 FFEE                  		dbf	d1,loc_18968
0001BAC6                            
0001BAC6                            Obj7A_ShipMain:	; Routine 2
0001BAC6 7000                       		moveq	#0,d0
0001BAC8 1028 0025                  		move.b	ob2ndRout(a0),d0
0001BACC 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
0001BAD0 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
0001BAD4 43F9 0001 ADCE             		lea	(Ani_Eggman).l,a1
0001BADA 4EB9 0000 CA24             		jsr	(AnimateSprite).l
0001BAE0 7003                       		moveq	#3,d0
0001BAE2 C028 0022                  		and.b	obStatus(a0),d0
0001BAE6 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001BAEC 8128 0001                  		or.b	d0,obRender(a0)
0001BAF0 4EF9 0000 F978             		jmp	(DisplaySprite).l
0001BAF6                            ; ===========================================================================
0001BAF6 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
0001BAF8 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
0001BAFA 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
0001BAFC 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
0001BAFE 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
0001BB00 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
0001BB02                            ; ===========================================================================
0001BB02                            
0001BB02                            loc_189B8:
0001BB02 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001BB08 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
0001BB0E 6400                       		bcc.s	loc_189CA
0001BB10 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BB14                            
0001BB14                            loc_189CA:
0001BB14 6100 EEA4                  		bsr.w	BossMove
0001BB18 1028 003F                  		move.b	$3F(a0),d0
0001BB1C 5428 003F                  		addq.b	#2,$3F(a0)
0001BB20 4EB9 0000 3A32             		jsr	(CalcSine).l
0001BB26 EC40                       		asr.w	#6,d0
0001BB28 D068 0038                  		add.w	$38(a0),d0
0001BB2C 3140 000C                  		move.w	d0,obY(a0)
0001BB30 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001BB36 6000                       		bra.s	loc_189FE
0001BB38                            ; ===========================================================================
0001BB38                            
0001BB38                            loc_189EE:
0001BB38 6100 EE80                  		bsr.w	BossMove
0001BB3C 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001BB42 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001BB48                            
0001BB48                            loc_189FE:
0001BB48 0C28 0006 0025             		cmpi.b	#6,ob2ndRout(a0)
0001BB4E 6400                       		bcc.s	locret_18A44
0001BB50 4A28 0022                  		tst.b	obStatus(a0)
0001BB54 6B00                       		bmi.s	loc_18A46
0001BB56 4A28 0020                  		tst.b	obColType(a0)
0001BB5A 6600                       		bne.s	locret_18A44
0001BB5C 4A28 003E                  		tst.b	$3E(a0)
0001BB60 6600                       		bne.s	loc_18A28
0001BB62 117C 0020 003E             		move.b	#$20,$3E(a0)
0001BB72                            
0001BB72                            loc_18A28:
0001BB72 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001BB76 7000                       		moveq	#0,d0
0001BB78 4A51                       		tst.w	(a1)
0001BB7A 6600                       		bne.s	loc_18A36
0001BB7C 303C 0EEE                  		move.w	#cWhite,d0
0001BB80                            
0001BB80                            loc_18A36:
0001BB80 3280                       		move.w	d0,(a1)
0001BB82 5328 003E                  		subq.b	#1,$3E(a0)
0001BB86 6600                       		bne.s	locret_18A44
0001BB88 117C 000F 0020             		move.b	#$F,obColType(a0)
0001BB8E                            
0001BB8E                            locret_18A44:
0001BB8E 4E75                       		rts	
0001BB90                            ; ===========================================================================
0001BB90                            
0001BB90                            loc_18A46:
0001BB90 7064                       		moveq	#100,d0
0001BB92 6100 0000                  		bsr.w	AddPoints
0001BB96 117C 0006 0025             		move.b	#6,ob2ndRout(a0)
0001BB9C 117C 0078 003C             		move.b	#$78,$3C(a0)
0001BBA2 4268 0010                  		clr.w	obVelX(a0)
0001BBA6 4E75                       		rts	
0001BBA8                            ; ===========================================================================
0001BBA8                            
0001BBA8                            loc_18A5E:
0001BBA8 3028 0030                  		move.w	$30(a0),d0
0001BBAC 317C 0200 0010             		move.w	#$200,obVelX(a0)
0001BBB2 0828 0000 0022             		btst	#0,obStatus(a0)
0001BBB8 6600                       		bne.s	loc_18A7C
0001BBBA 4468 0010                  		neg.w	obVelX(a0)
0001BBBE 0C40 2008                  		cmpi.w	#$2008,d0
0001BBC2 6E00                       		bgt.s	loc_18A88
0001BBC4 6000                       		bra.s	loc_18A82
0001BBC6                            ; ===========================================================================
0001BBC6                            
0001BBC6                            loc_18A7C:
0001BBC6 0C40 2138                  		cmpi.w	#$2138,d0
0001BBCA 6D00                       		blt.s	loc_18A88
0001BBCC                            
0001BBCC                            loc_18A82:
0001BBCC 0868 0000 0022             		bchg	#0,obStatus(a0)
0001BBD2                            
0001BBD2                            loc_18A88:
0001BBD2 3028 0008                  		move.w	8(a0),d0
0001BBD6 72FF                       		moveq	#-1,d1
0001BBD8 7402                       		moveq	#2,d2
0001BBDA 45E8 002A                  		lea	$2A(a0),a2
0001BBDE 7828                       		moveq	#$28,d4
0001BBE0 4A68 0010                  		tst.w	obVelX(a0)
0001BBE4 6A00                       		bpl.s	loc_18A9E
0001BBE6 4444                       		neg.w	d4
0001BBE8                            
0001BBE8                            loc_18A9E:
0001BBE8 321A                       		move.w	(a2)+,d1
0001BBEA 2641                       		movea.l	d1,a3
0001BBEC 082B 0003 0022             		btst	#3,obStatus(a3)
0001BBF2 6600                       		bne.s	loc_18AB4
0001BBF4 362B 0008                  		move.w	8(a3),d3
0001BBF8 D644                       		add.w	d4,d3
0001BBFA 9640                       		sub.w	d0,d3
0001BBFC 6700                       		beq.s	loc_18AC0
0001BBFE                            
0001BBFE                            loc_18AB4:
0001BBFE 51CA FFE8                  		dbf	d2,loc_18A9E
0001BC02                            
0001BC02 1142 0028                  		move.b	d2,obSubtype(a0)
0001BC06 6000 FF0C                  		bra.w	loc_189CA
0001BC0A                            ; ===========================================================================
0001BC0A                            
0001BC0A                            loc_18AC0:
0001BC0A 1142 0028                  		move.b	d2,obSubtype(a0)
0001BC0E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BC12 117C 0028 003C             		move.b	#$28,$3C(a0)
0001BC18 6000 FEFA                  		bra.w	loc_189CA
0001BC1C                            ; ===========================================================================
0001BC1C                            
0001BC1C                            Obj7A_MakeBall:
0001BC1C 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
0001BC22 6600                       		bne.s	loc_18B36
0001BC24 70FF                       		moveq	#-1,d0
0001BC26 1028 0028                  		move.b	obSubtype(a0),d0
0001BC2A 4880                       		ext.w	d0
0001BC2C 6B00                       		bmi.s	loc_18B40
0001BC2E 5540                       		subq.w	#2,d0
0001BC30 4440                       		neg.w	d0
0001BC32 D040                       		add.w	d0,d0
0001BC34 43E8 002A                  		lea	$2A(a0),a1
0001BC38 3031 0000                  		move.w	(a1,d0.w),d0
0001BC3C 2440                       		movea.l	d0,a2
0001BC3E 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001BC42 723E                       		moveq	#$3E,d1
0001BC44                            
0001BC44                            loc_18AFA:
0001BC44 B0A9 003C                  		cmp.l	$3C(a1),d0
0001BC48 6700                       		beq.s	loc_18B40
0001BC4A D2FC 0040                  		adda.w	#$40,a1
0001BC4E 51C9 FFF4                  		dbf	d1,loc_18AFA
0001BC52                            
0001BC52 2F08                       		move.l	a0,-(sp)
0001BC54 41D2                       		lea	(a2),a0
0001BC56 4EB9 0000 FE1A             		jsr	(FindNextFreeObj).l
0001BC5C 205F                       		movea.l	(sp)+,a0
0001BC5E 6600                       		bne.s	loc_18B40
0001BC60 12BC 007B                  		move.b	#id_BossSpikeball,(a1) ; load spiked ball object
0001BC64 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001BC6A 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001BC70 0669 0020 000C             		addi.w	#$20,obY(a1)
0001BC76 136A 0022 0022             		move.b	obStatus(a2),obStatus(a1)
0001BC7C 234A 003C                  		move.l	a2,$3C(a1)
0001BC80                            
0001BC80                            loc_18B36:
0001BC80 5328 003C                  		subq.b	#1,$3C(a0)
0001BC84 6700                       		beq.s	loc_18B40
0001BC86 6000 FEC0                  		bra.w	loc_189FE
0001BC8A                            ; ===========================================================================
0001BC8A                            
0001BC8A                            loc_18B40:
0001BC8A 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001BC8E 6000 FE84                  		bra.w	loc_189CA
0001BC92                            ; ===========================================================================
0001BC92                            
0001BC92                            loc_18B48:
0001BC92 5328 003C                  		subq.b	#1,$3C(a0)
0001BC96 6B00                       		bmi.s	loc_18B52
0001BC98 6000 ECDE                  		bra.w	BossDefeated
0001BC9C                            ; ===========================================================================
0001BC9C                            
0001BC9C                            loc_18B52:
0001BC9C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BCA0 4268 0012                  		clr.w	obVelY(a0)
0001BCA4 08E8 0000 0022             		bset	#0,obStatus(a0)
0001BCAA 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001BCB0 4268 0010                  		clr.w	obVelX(a0)
0001BCB4 117C 00E8 003C             		move.b	#-$18,$3C(a0)
0001BCBA 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001BCBE 6600                       		bne.s	loc_18B7C
0001BCC0 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001BCC6                            
0001BCC6                            loc_18B7C:
0001BCC6 6000 FE80                  		bra.w	loc_189FE
0001BCCA                            ; ===========================================================================
0001BCCA                            
0001BCCA                            loc_18B80:
0001BCCA 5228 003C                  		addq.b	#1,$3C(a0)
0001BCCE 6700                       		beq.s	loc_18B90
0001BCD0 6A00                       		bpl.s	loc_18B96
0001BCD2 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001BCD8 6000                       		bra.s	loc_18BC2
0001BCDA                            ; ===========================================================================
0001BCDA                            
0001BCDA                            loc_18B90:
0001BCDA 4268 0012                  		clr.w	obVelY(a0)
0001BCDE 6000                       		bra.s	loc_18BC2
0001BCE0                            ; ===========================================================================
0001BCE0                            
0001BCE0                            loc_18B96:
0001BCE0 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
0001BCE6 6500                       		bcs.s	loc_18BAE
0001BCE8 6700                       		beq.s	loc_18BB4
0001BCEA 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
0001BCF0 6500                       		bcs.s	loc_18BC2
0001BCF2 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BCF6 6000                       		bra.s	loc_18BC2
0001BCF8                            ; ===========================================================================
0001BCF8                            
0001BCF8                            loc_18BAE:
0001BCF8 5168 0012                  		subq.w	#8,obVelY(a0)
0001BCFC 6000                       		bra.s	loc_18BC2
0001BCFE                            ; ===========================================================================
0001BCFE                            
0001BCFE                            loc_18BB4:
0001BCFE 4268 0012                          	clr.w    obVelY(a0)
0001BD02 4A38 FE2D                          	tst.b     (v_invinc).w
0001BD06 6600                               	bne.s   @boss_invinc
0001BD08                            
0001BD08 1038 F5C6                          	move.b   (v_Saved_music),d0
0001BD0C 6000 0000                          	bra.w      @boss_play
0001BD10                            
0001BD10                            	@boss_invinc:
0001BD10 103C 0000                          	move.b #bgm_Invincible,d0
0001BD14                            
0001BD14                            	@boss_play:
0001BD14 4EB8 124A                          	jsr PlaySound
0001BD18                            
0001BD18                            loc_18BC2:
0001BD18 6000 FE1E                  		bra.w	loc_189EE
0001BD1C                            ; ===========================================================================
0001BD1C                            
0001BD1C                            loc_18BC6:
0001BD1C 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001BD22 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001BD28 0C78 2160 F72A             		cmpi.w	#$2160,(v_limitright2).w
0001BD2E 6400                       		bcc.s	loc_18BE0
0001BD30 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001BD34 6000                       		bra.s	loc_18BE8
0001BD36                            ; ===========================================================================
0001BD36                            
0001BD36                            loc_18BE0:
0001BD36 4A28 0001                  		tst.b	obRender(a0)
0001BD3A 6A00 FCBE                  		bpl.w	Obj7A_Delete
0001BD3E                            
0001BD3E                            loc_18BE8:
0001BD3E 6100 EC7A                  		bsr.w	BossMove
0001BD42 6000 FDD0                  		bra.w	loc_189CA
0001BD46                            ; ===========================================================================
0001BD46                            
0001BD46                            Obj7A_FaceMain:	; Routine 4
0001BD46 7000                       		moveq	#0,d0
0001BD48 7201                       		moveq	#1,d1
0001BD4A 2268 0034                  		movea.l	$34(a0),a1
0001BD4E 1029 0025                  		move.b	ob2ndRout(a1),d0
0001BD52 0C00 0006                  		cmpi.b	#6,d0
0001BD56 6B00                       		bmi.s	loc_18C06
0001BD58 720A                       		moveq	#$A,d1
0001BD5A 6000                       		bra.s	loc_18C1A
0001BD5C                            ; ===========================================================================
0001BD5C                            
0001BD5C                            loc_18C06:
0001BD5C 4A29 0020                  		tst.b	obColType(a1)
0001BD60 6600                       		bne.s	loc_18C10
0001BD62 7205                       		moveq	#5,d1
0001BD64 6000                       		bra.s	loc_18C1A
0001BD66                            ; ===========================================================================
0001BD66                            
0001BD66                            loc_18C10:
0001BD66 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001BD6C 6500                       		bcs.s	loc_18C1A
0001BD6E 7204                       		moveq	#4,d1
0001BD70                            
0001BD70                            loc_18C1A:
0001BD70 1141 001C                  		move.b	d1,obAnim(a0)
0001BD74 0C00 000A                  		cmpi.b	#$A,d0
0001BD78 6600                       		bne.s	loc_18C32
0001BD7A 117C 0006 001C             		move.b	#6,obAnim(a0)
0001BD80 4A28 0001                  		tst.b	obRender(a0)
0001BD84 6A00 FC74                  		bpl.w	Obj7A_Delete
0001BD88                            
0001BD88                            loc_18C32:
0001BD88 6000                       		bra.s	loc_18C6C
0001BD8A                            ; ===========================================================================
0001BD8A                            
0001BD8A                            Obj7A_FlameMain:; Routine 6
0001BD8A 117C 0008 001C             		move.b	#8,obAnim(a0)
0001BD90 2268 0034                  		movea.l	$34(a0),a1
0001BD94 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001BD9A 6600                       		bne.s	loc_18C56
0001BD9C 4A28 0001                  		tst.b	obRender(a0)
0001BDA0 6A00 FC58                  		bpl.w	Obj7A_Delete
0001BDA4 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001BDAA 6000                       		bra.s	loc_18C6C
0001BDAC                            ; ===========================================================================
0001BDAC                            
0001BDAC                            loc_18C56:
0001BDAC 0C29 0008 0025             		cmpi.b	#8,ob2ndRout(a1)
0001BDB2 6E00                       		bgt.s	loc_18C6C
0001BDB4 0C29 0004 0025             		cmpi.b	#4,ob2ndRout(a1)
0001BDBA 6D00                       		blt.s	loc_18C6C
0001BDBC 117C 0007 001C             		move.b	#7,obAnim(a0)
0001BDC2                            
0001BDC2                            loc_18C6C:
0001BDC2 43F9 0001 ADCE             		lea	(Ani_Eggman).l,a1
0001BDC8 4EB9 0000 CA24             		jsr	(AnimateSprite).l
0001BDCE                            
0001BDCE                            loc_18C78:
0001BDCE 2268 0034                  		movea.l	$34(a0),a1
0001BDD2 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001BDD8 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001BDDE 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001BDE4 7003                       		moveq	#3,d0
0001BDE6 C028 0022                  		and.b	obStatus(a0),d0
0001BDEA 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001BDF0 8128 0001                  		or.b	d0,obRender(a0)
0001BDF4 4EF9 0000 F978             		jmp	(DisplaySprite).l
0001BDFA                            ; ===========================================================================
0001BDFA                            
0001BDFA                            Obj7A_TubeMain:	; Routine 8
0001BDFA 2268 0034                  		movea.l	$34(a0),a1
0001BDFE 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001BE04 6600                       		bne.s	loc_18CB8
0001BE06 4A28 0001                  		tst.b	obRender(a0)
0001BE0A 6A00 FBEE                  		bpl.w	Obj7A_Delete
0001BE0E                            
0001BE0E                            loc_18CB8:
0001BE0E 217C 0001 AF0E 0004        		move.l	#Map_BossItems,obMap(a0)
0001BE16 317C 246C 0002             		move.w	#$246C,obGfx(a0)
0001BE1C 117C 0003 001A             		move.b	#3,obFrame(a0)
0001BE22 60AA                       		bra.s	loc_18C78
0001BE22 60AA                       		bra.s	loc_18C78
0001BE24                            		include	"_incObj\7B SLZ Boss Spikeball.asm"
0001BE24                            ; ---------------------------------------------------------------------------
0001BE24                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
0001BE24                            ; ---------------------------------------------------------------------------
0001BE24                            
0001BE24                            BossSpikeball:
0001BE24 7000                       		moveq	#0,d0
0001BE26 1028 0024                  		move.b	obRoutine(a0),d0
0001BE2A 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
0001BE2E 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
0001BE32 3028 0030                  		move.w	$30(a0),d0
0001BE36 0240 FF80                  		andi.w	#$FF80,d0
0001BE3A 3238 F700                  		move.w	(v_screenposx).w,d1
0001BE3E 0441 0080                  		subi.w	#$80,d1
0001BE42 0241 FF80                  		andi.w	#$FF80,d1
0001BE46 9041                       		sub.w	d1,d0
0001BE48 6B00 FBB0                  		bmi.w	Obj7A_Delete
0001BE4C 0C40 0280                  		cmpi.w	#$280,d0
0001BE50 6200 FBA8                  		bhi.w	Obj7A_Delete
0001BE54 4EF9 0000 F978             		jmp	(DisplaySprite).l
0001BE5A                            ; ===========================================================================
0001BE5A 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
0001BE5C 0000                       		dc.w Obj7B_Fall-Obj7B_Index
0001BE5E 0000                       		dc.w loc_18DC6-Obj7B_Index
0001BE60 0000                       		dc.w loc_18EAA-Obj7B_Index
0001BE62 0000                       		dc.w Obj7B_Explode-Obj7B_Index
0001BE64 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
0001BE66                            ; ===========================================================================
0001BE66                            
0001BE66                            Obj7B_Main:	; Routine 0
0001BE66 217C 0001 3DEC 0004        		move.l	#Map_SSawBall,obMap(a0)
0001BE6E 317C 0518 0002             		move.w	#$518,obGfx(a0)
0001BE74 117C 0001 001A             		move.b	#1,obFrame(a0)
0001BE7A 0028 0004 0001             		ori.b	#4,obRender(a0)
0001BE80 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001BE86 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001BE8C 117C 000C 0014             		move.b	#$C,obActWid(a0)
0001BE92 2268 003C                  		movea.l	$3C(a0),a1
0001BE96 3169 0008 0030             		move.w	obX(a1),$30(a0)
0001BE9C 3169 000C 0034             		move.w	obY(a1),$34(a0)
0001BEA2 08E8 0000 0022             		bset	#0,obStatus(a0)
0001BEA8 3028 0008                  		move.w	obX(a0),d0
0001BEAC B069 0008                  		cmp.w	obX(a1),d0
0001BEB0 6E00                       		bgt.s	loc_18D68
0001BEB2 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001BEB8 117C 0002 003A             		move.b	#2,$3A(a0)
0001BEBE                            
0001BEBE                            loc_18D68:
0001BEBE 5428 0024                  		addq.b	#2,obRoutine(a0)
0001BEC2                            
0001BEC2                            Obj7B_Fall:	; Routine 2
0001BEC2 4EB9 0000 F92C             		jsr	(ObjectFall).l
0001BEC8 2268 003C                  		movea.l	$3C(a0),a1
0001BECC 45F9 0000 0000             		lea	(word_19018).l,a2
0001BED2 7000                       		moveq	#0,d0
0001BED4 1029 001A                  		move.b	obFrame(a1),d0
0001BED8 3228 0008                  		move.w	8(a0),d1
0001BEDC 9268 0030                  		sub.w	$30(a0),d1
0001BEE0 6400                       		bcc.s	loc_18D8E
0001BEE2 5440                       		addq.w	#2,d0
0001BEE4                            
0001BEE4                            loc_18D8E:
0001BEE4 D040                       		add.w	d0,d0
0001BEE6 3228 0034                  		move.w	$34(a0),d1
0001BEEA D272 0000                  		add.w	(a2,d0.w),d1
0001BEEE B268 000C                  		cmp.w	obY(a0),d1
0001BEF2 6E00                       		bgt.s	locret_18DC4
0001BEF4 2268 003C                  		movea.l	$3C(a0),a1
0001BEF8 7202                       		moveq	#2,d1
0001BEFA 0828 0000 0022             		btst	#0,obStatus(a0)
0001BF00 6700                       		beq.s	loc_18DAE
0001BF02 7200                       		moveq	#0,d1
0001BF04                            
0001BF04                            loc_18DAE:
0001BF04 317C 00F0 0028             		move.w	#$F0,obSubtype(a0)
0001BF0A 117C 000A 001F             		move.b	#10,obDelayAni(a0)	; set frame duration to	10 frames
0001BF10 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
0001BF16 6000 0000                  		bra.w	loc_18FA2
0001BF1A                            ; ===========================================================================
0001BF1A                            
0001BF1A                            locret_18DC4:
0001BF1A 4E75                       		rts	
0001BF1C                            ; ===========================================================================
0001BF1C                            
0001BF1C                            loc_18DC6:	; Routine 4
0001BF1C 2268 003C                  		movea.l	$3C(a0),a1
0001BF20 7000                       		moveq	#0,d0
0001BF22 1028 003A                  		move.b	$3A(a0),d0
0001BF26 9029 003A                  		sub.b	$3A(a1),d0
0001BF2A 6700                       		beq.s	loc_18E2A
0001BF2C 6400                       		bcc.s	loc_18DDA
0001BF2E 4400                       		neg.b	d0
0001BF30                            
0001BF30                            loc_18DDA:
0001BF30 323C F7E8                  		move.w	#-$818,d1
0001BF34 343C FEEC                  		move.w	#-$114,d2
0001BF38 0C00 0001                  		cmpi.b	#1,d0
0001BF3C 6700                       		beq.s	loc_18E00
0001BF3E 323C F6A0                  		move.w	#-$960,d1
0001BF42 343C FF0C                  		move.w	#-$F4,d2
0001BF46 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
0001BF4C 6D00                       		blt.s	loc_18E00
0001BF4E 323C F5E0                  		move.w	#-$A20,d1
0001BF52 343C FF80                  		move.w	#-$80,d2
0001BF56                            
0001BF56                            loc_18E00:
0001BF56 3141 0012                  		move.w	d1,obVelY(a0)
0001BF5A 3142 0010                  		move.w	d2,obVelX(a0)
0001BF5E 3028 0008                  		move.w	obX(a0),d0
0001BF62 9068 0030                  		sub.w	$30(a0),d0
0001BF66 6400                       		bcc.s	loc_18E16
0001BF68 4468 0010                  		neg.w	obVelX(a0)
0001BF6C                            
0001BF6C                            loc_18E16:
0001BF6C 117C 0001 001A             		move.b	#1,obFrame(a0)
0001BF72 317C 0020 0028             		move.w	#$20,obSubtype(a0)
0001BF78 5428 0024                  		addq.b	#2,obRoutine(a0)
0001BF7C 6000 0000                  		bra.w	loc_18EAA
0001BF80                            ; ===========================================================================
0001BF80                            
0001BF80                            loc_18E2A:
0001BF80 45F9 0000 0000             		lea	(word_19018).l,a2
0001BF86 7000                       		moveq	#0,d0
0001BF88 1029 001A                  		move.b	obFrame(a1),d0
0001BF8C 343C 0028                  		move.w	#$28,d2
0001BF90 3228 0008                  		move.w	obX(a0),d1
0001BF94 9268 0030                  		sub.w	$30(a0),d1
0001BF98 6400                       		bcc.s	loc_18E48
0001BF9A 4442                       		neg.w	d2
0001BF9C 5440                       		addq.w	#2,d0
0001BF9E                            
0001BF9E                            loc_18E48:
0001BF9E D040                       		add.w	d0,d0
0001BFA0 3228 0034                  		move.w	$34(a0),d1
0001BFA4 D272 0000                  		add.w	(a2,d0.w),d1
0001BFA8 3141 000C                  		move.w	d1,obY(a0)
0001BFAC D468 0030                  		add.w	$30(a0),d2
0001BFB0 3142 0008                  		move.w	d2,obX(a0)
0001BFB4 4268 000E                  		clr.w	obY+2(a0)
0001BFB8 4268 000A                  		clr.w	obX+2(a0)
0001BFBC 5368 0028                  		subq.w	#1,obSubtype(a0)
0001BFC0 6600                       		bne.s	loc_18E7A
0001BFC2 317C 0020 0028             		move.w	#$20,obSubtype(a0)
0001BFC8 117C 0008 0024             		move.b	#8,obRoutine(a0)
0001BFCE 4E75                       		rts	
0001BFD0                            ; ===========================================================================
0001BFD0                            
0001BFD0                            loc_18E7A:
0001BFD0 0C68 0078 0028             		cmpi.w	#$78,obSubtype(a0)
0001BFD6 6600                       		bne.s	loc_18E88
0001BFD8 117C 0005 001F             		move.b	#5,obDelayAni(a0)
0001BFDE                            
0001BFDE                            loc_18E88:
0001BFDE 0C68 003C 0028             		cmpi.w	#$3C,obSubtype(a0)
0001BFE4 6600                       		bne.s	loc_18E96
0001BFE6 117C 0002 001F             		move.b	#2,obDelayAni(a0)
0001BFEC                            
0001BFEC                            loc_18E96:
0001BFEC 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0001BFF0 6E00                       		bgt.s	locret_18EA8
0001BFF2 0868 0000 001A             		bchg	#0,obFrame(a0)
0001BFF8 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
0001BFFE                            
0001BFFE                            locret_18EA8:
0001BFFE 4E75                       		rts	
0001C000                            ; ===========================================================================
0001C000                            
0001C000                            loc_18EAA:	; Routine 6
0001C000 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001C004 707A                       		moveq	#id_BossStarLight,d0
0001C006 7240                       		moveq	#$40,d1
0001C008 743E                       		moveq	#$3E,d2
0001C00A                            
0001C00A                            loc_18EB4:
0001C00A B011                       		cmp.b	(a1),d0
0001C00C 6700                       		beq.s	loc_18EC0
0001C00E D2C1                       		adda.w	d1,a1
0001C010 51CA FFF8                  		dbf	d2,loc_18EB4
0001C014                            
0001C014 6000                       		bra.s	loc_18F38
0001C016                            ; ===========================================================================
0001C016                            
0001C016                            loc_18EC0:
0001C016 3029 0008                  		move.w	obX(a1),d0
0001C01A 3229 000C                  		move.w	obY(a1),d1
0001C01E 3428 0008                  		move.w	obX(a0),d2
0001C022 3628 000C                  		move.w	obY(a0),d3
0001C026 45FA 0000                  		lea	byte_19022(pc),a2
0001C02A 47FA 0000                  		lea	byte_19026(pc),a3
0001C02E 181A                       		move.b	(a2)+,d4
0001C030 4884                       		ext.w	d4
0001C032 D044                       		add.w	d4,d0
0001C034 181B                       		move.b	(a3)+,d4
0001C036 4884                       		ext.w	d4
0001C038 D444                       		add.w	d4,d2
0001C03A B440                       		cmp.w	d0,d2
0001C03C 6500                       		bcs.s	loc_18F38
0001C03E 181A                       		move.b	(a2)+,d4
0001C040 4884                       		ext.w	d4
0001C042 D044                       		add.w	d4,d0
0001C044 181B                       		move.b	(a3)+,d4
0001C046 4884                       		ext.w	d4
0001C048 D444                       		add.w	d4,d2
0001C04A B042                       		cmp.w	d2,d0
0001C04C 6500                       		bcs.s	loc_18F38
0001C04E 181A                       		move.b	(a2)+,d4
0001C050 4884                       		ext.w	d4
0001C052 D244                       		add.w	d4,d1
0001C054 181B                       		move.b	(a3)+,d4
0001C056 4884                       		ext.w	d4
0001C058 D644                       		add.w	d4,d3
0001C05A B641                       		cmp.w	d1,d3
0001C05C 6500                       		bcs.s	loc_18F38
0001C05E 181A                       		move.b	(a2)+,d4
0001C060 4884                       		ext.w	d4
0001C062 D244                       		add.w	d4,d1
0001C064 181B                       		move.b	(a3)+,d4
0001C066 4884                       		ext.w	d4
0001C068 D644                       		add.w	d4,d3
0001C06A B243                       		cmp.w	d3,d1
0001C06C 6500                       		bcs.s	loc_18F38
0001C06E 5428 0024                  		addq.b	#2,obRoutine(a0)
0001C072 4268 0028                  		clr.w	obSubtype(a0)
0001C076 4229 0020                  		clr.b	obColType(a1)
0001C07A 5329 0021                  		subq.b	#1,obColProp(a1)
0001C07E 6600                       		bne.s	loc_18F38
0001C080 08E9 0007 0022             		bset	#7,obStatus(a1)
0001C086 4268 0010                  		clr.w	obVelX(a0)
0001C08A 4268 0012                  		clr.w	obVelY(a0)
0001C08E                            
0001C08E                            loc_18F38:
0001C08E 4A68 0012                  		tst.w	obVelY(a0)
0001C092 6A00                       		bpl.s	loc_18F5C
0001C094 4EB9 0000 F92C             		jsr	(ObjectFall).l
0001C09A 3028 0034                  		move.w	$34(a0),d0
0001C09E 0440 002F                  		subi.w	#$2F,d0
0001C0A2 B068 000C                  		cmp.w	obY(a0),d0
0001C0A6 6E00                       		bgt.s	loc_18F58
0001C0A8 4EB9 0000 F92C             		jsr	(ObjectFall).l
0001C0AE                            
0001C0AE                            loc_18F58:
0001C0AE 6000 FF20                  		bra.w	loc_18E7A
0001C0B2                            ; ===========================================================================
0001C0B2                            
0001C0B2                            loc_18F5C:
0001C0B2 4EB9 0000 F92C             		jsr	(ObjectFall).l
0001C0B8 2268 003C                  		movea.l	$3C(a0),a1
0001C0BC 45F9 0000 0000             		lea	(word_19018).l,a2
0001C0C2 7000                       		moveq	#0,d0
0001C0C4 1029 001A                  		move.b	obFrame(a1),d0
0001C0C8 3228 0008                  		move.w	obX(a0),d1
0001C0CC 9268 0030                  		sub.w	$30(a0),d1
0001C0D0 6400                       		bcc.s	loc_18F7E
0001C0D2 5440                       		addq.w	#2,d0
0001C0D4                            
0001C0D4                            loc_18F7E:
0001C0D4 D040                       		add.w	d0,d0
0001C0D6 3228 0034                  		move.w	$34(a0),d1
0001C0DA D272 0000                  		add.w	(a2,d0.w),d1
0001C0DE B268 000C                  		cmp.w	obY(a0),d1
0001C0E2 6ECA                       		bgt.s	loc_18F58
0001C0E4 2268 003C                  		movea.l	$3C(a0),a1
0001C0E8 7202                       		moveq	#2,d1
0001C0EA 4A68 0010                  		tst.w	obVelX(a0)
0001C0EE 6B00                       		bmi.s	loc_18F9C
0001C0F0 7200                       		moveq	#0,d1
0001C0F2                            
0001C0F2                            loc_18F9C:
0001C0F2 317C 0000 0028             		move.w	#0,obSubtype(a0)
0001C0F8                            
0001C0F8                            loc_18FA2:
0001C0F8 1341 003A                  		move.b	d1,$3A(a1)
0001C0FC 1141 003A                  		move.b	d1,$3A(a0)
0001C100 B229 001A                  		cmp.b	obFrame(a1),d1
0001C104 6700                       		beq.s	loc_19008
0001C106 08A9 0003 0022             		bclr	#3,obStatus(a1)
0001C10C 6700                       		beq.s	loc_19008
0001C10E 4229 0025                  		clr.b	ob2ndRout(a1)
0001C112 137C 0002 0024             		move.b	#2,obRoutine(a1)
0001C118 45F8 D000                  		lea	(v_objspace).w,a2
0001C11C 3568 0012 0012             		move.w	obVelY(a0),obVelY(a2)
0001C122 446A 0012                  		neg.w	obVelY(a2)
0001C126 0C29 0001 001A             		cmpi.b	#1,obFrame(a1)
0001C12C 6600                       		bne.s	loc_18FDC
0001C12E E0EA 0012                  		asr	obVelY(a2)
0001C132                            
0001C132                            loc_18FDC:
0001C132 08EA 0001 0022             		bset	#1,obStatus(a2)
0001C138 08AA 0003 0022             		bclr	#3,obStatus(a2)
0001C13E 422A 003C                  		clr.b	$3C(a2)
0001C142 2F08                       		move.l	a0,-(sp)
0001C144 41D2                       		lea	(a2),a0
0001C146 4EB9 0001 5FE2             		jsr	(Sonic_ChkRoll).l
0001C14C 205F                       		movea.l	(sp)+,a0
0001C14E 157C 0002 0024             		move.b	#2,obRoutine(a2)
0001C15E                            
0001C15E                            loc_19008:
0001C15E 4268 0010                  		clr.w	obVelX(a0)
0001C162 4268 0012                  		clr.w	obVelY(a0)
0001C166 5428 0024                  		addq.b	#2,obRoutine(a0)
0001C16A 6000 FE64                  		bra.w	loc_18E7A
0001C16E                            ; ===========================================================================
0001C16E FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w -8, -$1C, -$2F, -$1C, -8
0001C178                            		even
0001C178 E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
0001C17C                            		even
0001C17C 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
0001C180                            		even
0001C180                            ; ===========================================================================
0001C180                            
0001C180                            Obj7B_Explode:	; Routine 8
0001C180 10BC 003F                  		move.b	#id_ExplosionBomb,(a0)
0001C184 4228 0024                  		clr.b	obRoutine(a0)
0001C188 0C68 0020 0028             		cmpi.w	#$20,obSubtype(a0)
0001C18E 6700                       		beq.s	Obj7B_MakeFrag
0001C190 4E75                       		rts	
0001C192                            ; ===========================================================================
0001C192                            
0001C192                            Obj7B_MakeFrag:
0001C192 3168 0034 000C             		move.w	$34(a0),obY(a0)
0001C198 7203                       		moveq	#3,d1
0001C19A 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
0001C19E                            
0001C19E                            Obj7B_Loop:
0001C19E 4EB9 0000 FE04             		jsr	(FindFreeObj).l
0001C1A4 6600                       		bne.s	loc_1909A
0001C1A6 12BC 007B                  		move.b	#id_BossSpikeball,(a1) ; load shrapnel object
0001C1AA 137C 000A 0024             		move.b	#$A,obRoutine(a1)
0001C1B0 237C 0000 0000 0004        		move.l	#Map_BSBall,obMap(a1)
0001C1B8 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001C1BE 337C 0518 0002             		move.w	#$518,obGfx(a1)
0001C1C4 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001C1CA 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001C1D0 335A 0010                  		move.w	(a2)+,obVelX(a1)
0001C1D4 335A 0012                  		move.w	(a2)+,obVelY(a1)
0001C1D8 137C 0098 0020             		move.b	#$98,obColType(a1)
0001C1DE 0029 0004 0001             		ori.b	#4,obRender(a1)
0001C1E4 08E9 0007 0001             		bset	#7,obRender(a1)
0001C1EA 137C 000C 0014             		move.b	#$C,obActWid(a1)
0001C1F0                            
0001C1F0                            loc_1909A:
0001C1F0 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
0001C1F4                            
0001C1F4 4E75                       		rts	
0001C1F6                            ; ===========================================================================
0001C1F6 FF00 FCC0                  Obj7B_FragSpeed:dc.w -$100, -$340	; horizontal, vertical
0001C1FA FF60 FDC0                  		dc.w -$A0, -$240
0001C1FE 0100 FCC0                  		dc.w $100, -$340
0001C202 00A0 FDC0                  		dc.w $A0, -$240
0001C206                            ; ===========================================================================
0001C206                            
0001C206                            Obj7B_MoveFrag:	; Routine $A
0001C206 4EB9 0000 F964             		jsr	(SpeedToPos).l
0001C20C 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001C212 3168 000C 0034             		move.w	obY(a0),$34(a0)
0001C218 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001C21E 7004                       		moveq	#4,d0
0001C220 C078 FE0E                  		and.w	(v_vbla_word).w,d0
0001C224 E448                       		lsr.w	#2,d0
0001C226 1140 001A                  		move.b	d0,obFrame(a0)
0001C22A 4A28 0001                  		tst.b	1(a0)
0001C22E 6A00 F7CA                  		bpl.w	Obj7A_Delete
0001C232 4E75                       		rts	
0001C232 4E75                       		rts	
0001C234                            Map_BSBall:	include	"_maps\SLZ Boss Spikeball.asm"
0001C234                            ; ---------------------------------------------------------------------------
0001C234                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001C234                            ; ---------------------------------------------------------------------------
0001C234                            Map_BSBall_internal:
0001C234 0000                       		dc.w @fireball1-Map_BSBall_internal
0001C236 0000                       		dc.w @fireball2-Map_BSBall_internal
0001C238 01                         @fireball1:	dc.b 1
0001C239 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001C23E 01                         @fireball2:	dc.b 1
0001C23F FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
0001C244                            		even
0001C244                            		even
0001C244                            		include	"_incObj\75 Boss - Spring Yard.asm"
0001C244                            ; ---------------------------------------------------------------------------
0001C244                            ; Object 75 - Eggman (SYZ)
0001C244                            ; ---------------------------------------------------------------------------
0001C244                            
0001C244                            BossSpringYard:
0001C244 7000                       		moveq	#0,d0
0001C246 1028 0024                  		move.b	obRoutine(a0),d0
0001C24A 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
0001C24E 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
0001C252                            ; ===========================================================================
0001C252 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
0001C254 0000                       		dc.w Obj75_ShipMain-Obj75_Index
0001C256 0000                       		dc.w Obj75_FaceMain-Obj75_Index
0001C258 0000                       		dc.w Obj75_FlameMain-Obj75_Index
0001C25A 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
0001C25C                            
0001C25C 0200 0280                  Obj75_ObjData:	dc.b 2,	0, $02, $80		; routine number, animation, priority (high and low bytes)
0001C260 0401 0280                  		dc.b 4,	1, $02, $80
0001C264 0607 0280                  		dc.b 6,	7, $02, $80
0001C268 0800 0280                  		dc.b 8,	0, $02, $80
0001C26C                            ; ===========================================================================
0001C26C                            
0001C26C                            Obj75_Main:	; Routine 0
0001C26C 317C 2DB0 0008             		move.w	#$2DB0,obX(a0)
0001C272 317C 04DA 000C             		move.w	#$4DA,obY(a0)
0001C278 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001C27E 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001C284 117C 000F 0020             		move.b	#$F,obColType(a0)
0001C28A 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001C290 45FA FFCA                  		lea	Obj75_ObjData(pc),a2
0001C294 2248                       		movea.l	a0,a1
0001C296 7203                       		moveq	#3,d1
0001C298 6000                       		bra.s	Obj75_LoadBoss
0001C29A                            ; ===========================================================================
0001C29A                            
0001C29A                            Obj75_Loop:
0001C29A 4EB9 0000 FE1A             		jsr	(FindNextFreeObj).l
0001C2A0 6600                       		bne.s	Obj75_ShipMain
0001C2A2 12BC 0075                  		move.b	#id_BossSpringYard,(a1)
0001C2A6 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001C2AC 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001C2B2                            
0001C2B2                            Obj75_LoadBoss:
0001C2B2 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001C2B8 4229 0025                  		clr.b	ob2ndRout(a1)
0001C2BC 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001C2C0 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001C2C4 335A 0018                  		move.w	(a2)+,obPriority(a1)
0001C2C8 237C 0001 AE1E 0004        		move.l	#Map_Eggman,obMap(a1)
0001C2D0 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001C2D6 137C 0004 0001             		move.b	#4,obRender(a1)
0001C2DC 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001C2E2 2348 0034                  		move.l	a0,$34(a1)
0001C2E6 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
0001C2EA                            
0001C2EA                            Obj75_ShipMain:	; Routine 2
0001C2EA 7000                       		moveq	#0,d0
0001C2EC 1028 0025                  		move.b	ob2ndRout(a0),d0
0001C2F0 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
0001C2F4 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
0001C2F8 43F9 0001 ADCE             		lea	(Ani_Eggman).l,a1
0001C2FE 4EB9 0000 CA24             		jsr	(AnimateSprite).l
0001C304 7003                       		moveq	#3,d0
0001C306 C028 0022                  		and.b	obStatus(a0),d0
0001C30A 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001C310 8128 0001                  		or.b	d0,obRender(a0)
0001C314 4EF9 0000 F978             		jmp	(DisplaySprite).l
0001C31A                            ; ===========================================================================
0001C31A 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
0001C31E 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
0001C322 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
0001C326                            ; ===========================================================================
0001C326                            
0001C326                            loc_191CC:
0001C326 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001C32C 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
0001C332 6400                       		bcc.s	loc_191DE
0001C334 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C338                            
0001C338                            loc_191DE:
0001C338 1028 003F                  		move.b	$3F(a0),d0
0001C33C 5428 003F                  		addq.b	#2,$3F(a0)
0001C340 4EB9 0000 3A32             		jsr	(CalcSine).l
0001C346 E440                       		asr.w	#2,d0
0001C348 3140 0012                  		move.w	d0,obVelY(a0)
0001C34C                            
0001C34C                            loc_191F2:
0001C34C 6100 E66C                  		bsr.w	BossMove
0001C350 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001C356 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001C35C                            
0001C35C                            loc_19202:
0001C35C 3028 0008                  		move.w	8(a0),d0
0001C360 0440 2C00                  		subi.w	#$2C00,d0
0001C364 EA48                       		lsr.w	#5,d0
0001C366 1140 0034                  		move.b	d0,$34(a0)
0001C36A 0C28 0006 0025             		cmpi.b	#6,ob2ndRout(a0)
0001C370 6400                       		bcc.s	locret_19256
0001C372 4A28 0022                  		tst.b	obStatus(a0)
0001C376 6B00                       		bmi.s	loc_19258
0001C378 4A28 0020                  		tst.b	obColType(a0)
0001C37C 6600                       		bne.s	locret_19256
0001C37E 4A28 003E                  		tst.b	$3E(a0)
0001C382 6600                       		bne.s	loc_1923A
0001C384 117C 0020 003E             		move.b	#$20,$3E(a0)
0001C394                            
0001C394                            loc_1923A:
0001C394 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001C398 7000                       		moveq	#0,d0
0001C39A 4A51                       		tst.w	(a1)
0001C39C 6600                       		bne.s	loc_19248
0001C39E 303C 0EEE                  		move.w	#cWhite,d0
0001C3A2                            
0001C3A2                            loc_19248:
0001C3A2 3280                       		move.w	d0,(a1)
0001C3A4 5328 003E                  		subq.b	#1,$3E(a0)
0001C3A8 6600                       		bne.s	locret_19256
0001C3AA 117C 000F 0020             		move.b	#$F,obColType(a0)
0001C3B0                            
0001C3B0                            locret_19256:
0001C3B0 4E75                       		rts	
0001C3B2                            ; ===========================================================================
0001C3B2                            
0001C3B2                            loc_19258:
0001C3B2 7064                       		moveq	#100,d0
0001C3B4 6100 0000                  		bsr.w	AddPoints
0001C3B8 117C 0006 0025             		move.b	#6,ob2ndRout(a0)
0001C3BE 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001C3C4 4268 0010                  		clr.w	obVelX(a0)
0001C3C8 4E75                       		rts	
0001C3CA                            ; ===========================================================================
0001C3CA                            
0001C3CA                            loc_19270:
0001C3CA 3028 0030                  		move.w	$30(a0),d0
0001C3CE 317C 0140 0010             		move.w	#$140,obVelX(a0)
0001C3D4 0828 0000 0022             		btst	#0,obStatus(a0)
0001C3DA 6600                       		bne.s	loc_1928E
0001C3DC 4468 0010                  		neg.w	obVelX(a0)
0001C3E0 0C40 2C08                  		cmpi.w	#$2C08,d0
0001C3E4 6E00                       		bgt.s	loc_1929E
0001C3E6 6000                       		bra.s	loc_19294
0001C3E8                            ; ===========================================================================
0001C3E8                            
0001C3E8                            loc_1928E:
0001C3E8 0C40 2D38                  		cmpi.w	#$2D38,d0
0001C3EC 6D00                       		blt.s	loc_1929E
0001C3EE                            
0001C3EE                            loc_19294:
0001C3EE 0868 0000 0022             		bchg	#0,obStatus(a0)
0001C3F4 4228 003D                  		clr.b	$3D(a0)
0001C3F8                            
0001C3F8                            loc_1929E:
0001C3F8 0440 2C10                  		subi.w	#$2C10,d0
0001C3FC 0240 001F                  		andi.w	#$1F,d0
0001C400 0440 001F                  		subi.w	#$1F,d0
0001C404 6A00                       		bpl.s	loc_192AE
0001C406 4440                       		neg.w	d0
0001C408                            
0001C408                            loc_192AE:
0001C408 5340                       		subq.w	#1,d0
0001C40A 6E00                       		bgt.s	loc_192E8
0001C40C 4A28 003D                  		tst.b	$3D(a0)
0001C410 6600                       		bne.s	loc_192E8
0001C412 3238 D008                  		move.w	(v_player+obX).w,d1
0001C416 0441 2C00                  		subi.w	#$2C00,d1
0001C41A EA41                       		asr.w	#5,d1
0001C41C B228 0034                  		cmp.b	$34(a0),d1
0001C420 6600                       		bne.s	loc_192E8
0001C422 7000                       		moveq	#0,d0
0001C424 1028 0034                  		move.b	$34(a0),d0
0001C428 EB40                       		asl.w	#5,d0
0001C42A 0640 2C10                  		addi.w	#$2C10,d0
0001C42E 3140 0030                  		move.w	d0,$30(a0)
0001C432 6100 0000                  		bsr.w	Obj75_FindBlocks
0001C436 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C43A 4268 0028                  		clr.w	obSubtype(a0)
0001C43E 4268 0010                  		clr.w	obVelX(a0)
0001C442                            
0001C442                            loc_192E8:
0001C442 6000 FEF4                  		bra.w	loc_191DE
0001C446                            ; ===========================================================================
0001C446                            
0001C446                            loc_192EC:
0001C446 7000                       		moveq	#0,d0
0001C448 1028 0028                  		move.b	obSubtype(a0),d0
0001C44C 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
0001C450 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
0001C454                            ; ===========================================================================
0001C454 0000                       off_192FA:	dc.w loc_19302-off_192FA
0001C456 0000                       		dc.w loc_19348-off_192FA
0001C458 0000                       		dc.w loc_1938E-off_192FA
0001C45A 0000                       		dc.w loc_193D0-off_192FA
0001C45C                            ; ===========================================================================
0001C45C                            
0001C45C                            loc_19302:
0001C45C 317C 0180 0012             		move.w	#$180,obVelY(a0)
0001C462 3028 0038                  		move.w	$38(a0),d0
0001C466 0C40 0556                  		cmpi.w	#$556,d0
0001C46A 6500                       		bcs.s	loc_19344
0001C46C 317C 0556 0038             		move.w	#$556,$38(a0)
0001C472 4268 003C                  		clr.w	$3C(a0)
0001C476 70FF                       		moveq	#-1,d0
0001C478 3028 0036                  		move.w	$36(a0),d0
0001C47C 6700                       		beq.s	loc_1933C
0001C47E 2240                       		movea.l	d0,a1
0001C480 137C 00FF 0029             		move.b	#-1,$29(a1)
0001C486 117C 00FF 0029             		move.b	#-1,$29(a0)
0001C48C 2348 0034                  		move.l	a0,$34(a1)
0001C490 317C 0032 003C             		move.w	#$32,$3C(a0)
0001C496                            
0001C496                            loc_1933C:
0001C496 4268 0012                  		clr.w	obVelY(a0)
0001C49A 5428 0028                  		addq.b	#2,obSubtype(a0)
0001C49E                            
0001C49E                            loc_19344:
0001C49E 6000 FEAC                  		bra.w	loc_191F2
0001C4A2                            ; ===========================================================================
0001C4A2                            
0001C4A2                            loc_19348:
0001C4A2 5368 003C                  		subq.w	#1,$3C(a0)
0001C4A6 6A00                       		bpl.s	loc_19366
0001C4A8 5428 0028                  		addq.b	#2,obSubtype(a0)
0001C4AC 317C F800 0012             		move.w	#-$800,obVelY(a0)
0001C4B2 4A68 0036                  		tst.w	$36(a0)
0001C4B6 6600                       		bne.s	loc_19362
0001C4B8 E0E8 0012                  		asr	obVelY(a0)
0001C4BC                            
0001C4BC                            loc_19362:
0001C4BC 7000                       		moveq	#0,d0
0001C4BE 6000                       		bra.s	loc_1937C
0001C4C0                            ; ===========================================================================
0001C4C0                            
0001C4C0                            loc_19366:
0001C4C0 7000                       		moveq	#0,d0
0001C4C2 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
0001C4C8 6E00                       		bgt.s	loc_1937C
0001C4CA 7002                       		moveq	#2,d0
0001C4CC 0828 0001 003D             		btst	#1,$3D(a0)
0001C4D2 6700                       		beq.s	loc_1937C
0001C4D4 4440                       		neg.w	d0
0001C4D6                            
0001C4D6                            loc_1937C:
0001C4D6 D068 0038                  		add.w	$38(a0),d0
0001C4DA 3140 000C                  		move.w	d0,obY(a0)
0001C4DE 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001C4E4 6000 FE76                  		bra.w	loc_19202
0001C4E8                            ; ===========================================================================
0001C4E8                            
0001C4E8                            loc_1938E:
0001C4E8 303C 04DA                  		move.w	#$4DA,d0
0001C4EC 4A68 0036                  		tst.w	$36(a0)
0001C4F0 6700                       		beq.s	loc_1939C
0001C4F2 0440 0018                  		subi.w	#$18,d0
0001C4F6                            
0001C4F6                            loc_1939C:
0001C4F6 B068 0038                  		cmp.w	$38(a0),d0
0001C4FA 6D00                       		blt.s	loc_193BE
0001C4FC 317C 0008 003C             		move.w	#8,$3C(a0)
0001C502 4A68 0036                  		tst.w	$36(a0)
0001C506 6700                       		beq.s	loc_193B4
0001C508 317C 002D 003C             		move.w	#$2D,$3C(a0)
0001C50E                            
0001C50E                            loc_193B4:
0001C50E 5428 0028                  		addq.b	#2,obSubtype(a0)
0001C512 4268 0012                  		clr.w	obVelY(a0)
0001C516 6000                       		bra.s	loc_193CC
0001C518                            ; ===========================================================================
0001C518                            
0001C518                            loc_193BE:
0001C518 0C68 FFC0 0012             		cmpi.w	#-$40,obVelY(a0)
0001C51E 6C00                       		bge.s	loc_193CC
0001C520 0668 000C 0012             		addi.w	#$C,obVelY(a0)
0001C526                            
0001C526                            loc_193CC:
0001C526 6000 FE24                  		bra.w	loc_191F2
0001C52A                            ; ===========================================================================
0001C52A                            
0001C52A                            loc_193D0:
0001C52A 5368 003C                  		subq.w	#1,$3C(a0)
0001C52E 6E00                       		bgt.s	loc_19406
0001C530 6B00                       		bmi.s	loc_193EE
0001C532 70FF                       		moveq	#-1,d0
0001C534 3028 0036                  		move.w	$36(a0),d0
0001C538 6700                       		beq.s	loc_193E8
0001C53A 2240                       		movea.l	d0,a1
0001C53C 137C 000A 0029             		move.b	#$A,$29(a1)
0001C542                            
0001C542                            loc_193E8:
0001C542 4268 0036                  		clr.w	$36(a0)
0001C546 6000                       		bra.s	loc_19406
0001C548                            ; ===========================================================================
0001C548                            
0001C548                            loc_193EE:
0001C548 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
0001C54E 6600                       		bne.s	loc_19406
0001C550 4228 0029                  		clr.b	$29(a0)
0001C554 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001C558 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001C55E 6000                       		bra.s	loc_19446
0001C560                            ; ===========================================================================
0001C560                            
0001C560                            loc_19406:
0001C560 7001                       		moveq	#1,d0
0001C562 4A68 0036                  		tst.w	$36(a0)
0001C566 6700                       		beq.s	loc_19410
0001C568 7002                       		moveq	#2,d0
0001C56A                            
0001C56A                            loc_19410:
0001C56A 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
0001C570 6700                       		beq.s	loc_19424
0001C572 6D00                       		blt.s	loc_1941C
0001C574 4440                       		neg.w	d0
0001C576                            
0001C576                            loc_1941C:
0001C576 4A68 0036                  		tst.w	$36(a0)
0001C57A D168 0038                  		add.w	d0,$38(a0)
0001C57E                            
0001C57E                            loc_19424:
0001C57E 7000                       		moveq	#0,d0
0001C580 4A68 0036                  		tst.w	$36(a0)
0001C584 6700                       		beq.s	loc_19438
0001C586 7002                       		moveq	#2,d0
0001C588 0828 0000 003D             		btst	#0,$3D(a0)
0001C58E 6700                       		beq.s	loc_19438
0001C590 4440                       		neg.w	d0
0001C592                            
0001C592                            loc_19438:
0001C592 D068 0038                  		add.w	$38(a0),d0
0001C596 3140 000C                  		move.w	d0,obY(a0)
0001C59A 3168 0030 0008             		move.w	$30(a0),8(a0)
0001C5A0                            
0001C5A0                            loc_19446:
0001C5A0 6000 FDBA                  		bra.w	loc_19202
0001C5A4                            
0001C5A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C5A4                            
0001C5A4                            
0001C5A4                            Obj75_FindBlocks:
0001C5A4 4268 0036                  		clr.w	$36(a0)
0001C5A8 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001C5AC 703E                       		moveq	#$3E,d0
0001C5AE 7276                       		moveq	#$76,d1
0001C5B0 1428 0034                  		move.b	$34(a0),d2
0001C5B4                            
0001C5B4                            Obj75_FindLoop:
0001C5B4 B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
0001C5B6 6600                       		bne.s	loc_1946A	; if not, branch
0001C5B8 B429 0028                  		cmp.b	obSubtype(a1),d2
0001C5BC 6600                       		bne.s	loc_1946A
0001C5BE 3149 0036                  		move.w	a1,$36(a0)
0001C5C2 6000                       		bra.s	locret_19472
0001C5C4                            ; ===========================================================================
0001C5C4                            
0001C5C4                            loc_1946A:
0001C5C4 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
0001C5C8 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
0001C5CC                            
0001C5CC                            locret_19472:
0001C5CC 4E75                       		rts	
0001C5CE                            ; End of function Obj75_FindBlocks
0001C5CE                            
0001C5CE                            ; ===========================================================================
0001C5CE                            
0001C5CE                            loc_19474:
0001C5CE 5368 003C                  		subq.w	#1,$3C(a0)
0001C5D2 6B00                       		bmi.s	loc_1947E
0001C5D4 6000 E3A2                  		bra.w	BossDefeated
0001C5D8                            ; ===========================================================================
0001C5D8                            
0001C5D8                            loc_1947E:
0001C5D8 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C5DC 4268 0012                  		clr.w	obVelY(a0)
0001C5E0 08E8 0000 0022             		bset	#0,obStatus(a0)
0001C5E6 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001C5EC 4268 0010                  		clr.w	obVelX(a0)
0001C5F0 317C FFFF 003C             		move.w	#-1,$3C(a0)
0001C5F6 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001C5FA 6600                       		bne.s	loc_194A8
0001C5FC 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001C602                            
0001C602                            loc_194A8:
0001C602 6000 FD58                  		bra.w	loc_19202
0001C606                            ; ===========================================================================
0001C606                            
0001C606                            loc_194AC:
0001C606 5268 003C                  		addq.w	#1,$3C(a0)
0001C60A 6700                       		beq.s	loc_194BC
0001C60C 6A00                       		bpl.s	loc_194C2
0001C60E 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001C614 6000                       		bra.s	loc_194EE
0001C616                            ; ===========================================================================
0001C616                            
0001C616                            loc_194BC:
0001C616 4268 0012                  		clr.w	obVelY(a0)
0001C61A 6000                       		bra.s	loc_194EE
0001C61C                            ; ===========================================================================
0001C61C                            
0001C61C                            loc_194C2:
0001C61C 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
0001C622 6500                       		bcs.s	loc_194DA
0001C624 6700                       		beq.s	loc_194E0
0001C626 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
0001C62C 6500                       		bcs.s	loc_194EE
0001C62E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C632 6000                       		bra.s	loc_194EE
0001C634                            ; ===========================================================================
0001C634                            
0001C634                            loc_194DA:
0001C634 5168 0012                  		subq.w	#8,obVelY(a0)
0001C638 6000                       		bra.s	loc_194EE
0001C63A                            ; ===========================================================================
0001C63A                            
0001C63A                            loc_194E0:
0001C63A 4268 0012                  		clr.w    obVelY(a0)
0001C63E 4A38 FE2D                          	tst.b     (v_invinc).w
0001C642 6600                               	bne.s   @boss_invinc
0001C644                            
0001C644 1038 F5C6                          	move.b   (v_Saved_music),d0
0001C648 6000 0000                          	bra.w      @boss_play
0001C64C                            
0001C64C                            @boss_invinc:
0001C64C 103C 0000                          	move.b #bgm_Invincible,d0
0001C650                            
0001C650                            @boss_play:
0001C650 4EB8 124A                          	jsr PlaySound
0001C654                            
0001C654                            loc_194EE:
0001C654 6000 FCF6                  		bra.w	loc_191F2
0001C658                            ; ===========================================================================
0001C658                            
0001C658                            loc_194F2:
0001C658 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001C65E 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001C664 0C78 2D40 F72A             		cmpi.w	#$2D40,(v_limitright2).w
0001C66A 6400                       		bcc.s	loc_1950C
0001C66C 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001C670 6000                       		bra.s	loc_19512
0001C672                            ; ===========================================================================
0001C672                            
0001C672                            loc_1950C:
0001C672 4A28 0001                  		tst.b	obRender(a0)
0001C676 6A00                       		bpl.s	Obj75_ShipDelete
0001C678                            
0001C678                            loc_19512:
0001C678 6100 E340                  		bsr.w	BossMove
0001C67C 6000 FCBA                  		bra.w	loc_191DE
0001C680                            ; ===========================================================================
0001C680                            
0001C680                            Obj75_ShipDelete:
0001C680 4EF9 0000 F9B8             		jmp	(DeleteObject).l
0001C686                            ; ===========================================================================
0001C686                            
0001C686                            Obj75_FaceMain:	; Routine 4
0001C686 7201                       		moveq	#1,d1
0001C688 2268 0034                  		movea.l	$34(a0),a1
0001C68C 7000                       		moveq	#0,d0
0001C68E 1029 0025                  		move.b	ob2ndRout(a1),d0
0001C692 303B 0000                  		move.w	off_19546(pc,d0.w),d0
0001C696 4EBB 0000                  		jsr	off_19546(pc,d0.w)
0001C69A 1141 001C                  		move.b	d1,obAnim(a0)
0001C69E 1010                       		move.b	(a0),d0
0001C6A0 B011                       		cmp.b	(a1),d0
0001C6A2 6600                       		bne.s	Obj75_FaceDelete
0001C6A4 6000                       		bra.s	loc_195BE
0001C6A6                            ; ===========================================================================
0001C6A6                            
0001C6A6                            Obj75_FaceDelete:
0001C6A6 4EF9 0000 F9B8             		jmp	(DeleteObject).l
0001C6AC                            ; ===========================================================================
0001C6AC 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
0001C6B0 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
0001C6B4 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
0001C6B8                            ; ===========================================================================
0001C6B8                            
0001C6B8                            loc_19552:
0001C6B8 720A                       		moveq	#$A,d1
0001C6BA 4E75                       		rts	
0001C6BC                            ; ===========================================================================
0001C6BC                            
0001C6BC                            loc_19556:
0001C6BC 7206                       		moveq	#6,d1
0001C6BE 4E75                       		rts	
0001C6C0                            ; ===========================================================================
0001C6C0                            
0001C6C0                            loc_1955A:
0001C6C0 7000                       		moveq	#0,d0
0001C6C2 1029 0028                  		move.b	obSubtype(a1),d0
0001C6C6 303B 0000                  		move.w	off_19568(pc,d0.w),d0
0001C6CA 4EFB 0000                  		jmp	off_19568(pc,d0.w)
0001C6CE                            ; ===========================================================================
0001C6CE 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
0001C6D2 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
0001C6D6                            ; ===========================================================================
0001C6D6                            
0001C6D6                            loc_19570:
0001C6D6 6000                       		bra.s	loc_19574
0001C6D8                            ; ===========================================================================
0001C6D8                            
0001C6D8                            loc_19572:
0001C6D8 7206                       		moveq	#6,d1
0001C6DA                            
0001C6DA                            loc_19574:
0001C6DA 4A29 0020                  		tst.b	obColType(a1)
0001C6DE 6600                       		bne.s	loc_1957E
0001C6E0 7205                       		moveq	#5,d1
0001C6E2 4E75                       		rts	
0001C6E4                            ; ===========================================================================
0001C6E4                            
0001C6E4                            loc_1957E:
0001C6E4 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001C6EA 6500                       		bcs.s	locret_19588
0001C6EC 7204                       		moveq	#4,d1
0001C6EE                            
0001C6EE                            locret_19588:
0001C6EE 4E75                       		rts	
0001C6F0                            ; ===========================================================================
0001C6F0                            
0001C6F0                            Obj75_FlameMain:; Routine 6
0001C6F0 117C 0007 001C             		move.b	#7,obAnim(a0)
0001C6F6 2268 0034                  		movea.l	$34(a0),a1
0001C6FA 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001C700 6600                       		bne.s	loc_195AA
0001C702 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001C708 4A28 0001                  		tst.b	1(a0)
0001C70C 6A00                       		bpl.s	Obj75_FlameDelete
0001C70E 6000                       		bra.s	loc_195B6
0001C710                            ; ===========================================================================
0001C710                            
0001C710                            loc_195AA:
0001C710 4A69 0010                  		tst.w	obVelX(a1)
0001C714 6700                       		beq.s	loc_195B6
0001C716 117C 0008 001C             		move.b	#8,obAnim(a0)
0001C71C                            
0001C71C                            loc_195B6:
0001C71C 6000                       		bra.s	loc_195BE
0001C71E                            ; ===========================================================================
0001C71E                            
0001C71E                            Obj75_FlameDelete:
0001C71E 4EF9 0000 F9B8             		jmp	(DeleteObject).l
0001C724                            ; ===========================================================================
0001C724                            
0001C724                            loc_195BE:
0001C724 43F9 0001 ADCE             		lea	(Ani_Eggman).l,a1
0001C72A 4EB9 0000 CA24             		jsr	(AnimateSprite).l
0001C730 2268 0034                  		movea.l	$34(a0),a1
0001C734 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001C73A 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001C740                            
0001C740                            loc_195DA:
0001C740 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001C746 7003                       		moveq	#3,d0
0001C748 C028 0022                  		and.b	obStatus(a0),d0
0001C74C 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001C752 8128 0001                  		or.b	d0,obRender(a0)
0001C756 4EF9 0000 F978             		jmp	(DisplaySprite).l
0001C75C                            ; ===========================================================================
0001C75C                            
0001C75C                            Obj75_SpikeMain:; Routine 8
0001C75C 217C 0001 AF0E 0004        		move.l	#Map_BossItems,obMap(a0)
0001C764 317C 246C 0002             		move.w	#$246C,obGfx(a0)
0001C76A 117C 0005 001A             		move.b	#5,obFrame(a0)
0001C770 2268 0034                  		movea.l	$34(a0),a1
0001C774 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001C77A 6600                       		bne.s	loc_1961C
0001C77C 4A28 0001                  		tst.b	obRender(a0)
0001C780 6A00                       		bpl.s	Obj75_SpikeDelete
0001C782                            
0001C782                            loc_1961C:
0001C782 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001C788 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001C78E 3028 003C                  		move.w	$3C(a0),d0
0001C792 0C29 0004 0025             		cmpi.b	#4,ob2ndRout(a1)
0001C798 6600                       		bne.s	loc_19652
0001C79A 0C29 0006 0028             		cmpi.b	#6,obSubtype(a1)
0001C7A0 6700                       		beq.s	loc_1964C
0001C7A2 4A29 0028                  		tst.b	obSubtype(a1)
0001C7A6 6600                       		bne.s	loc_19658
0001C7A8 0C40 0094                  		cmpi.w	#$94,d0
0001C7AC 6C00                       		bge.s	loc_19658
0001C7AE 5E40                       		addq.w	#7,d0
0001C7B0 6000                       		bra.s	loc_19658
0001C7B2                            ; ===========================================================================
0001C7B2                            
0001C7B2                            loc_1964C:
0001C7B2 4A69 003C                  		tst.w	$3C(a1)
0001C7B6 6A00                       		bpl.s	loc_19658
0001C7B8                            
0001C7B8                            loc_19652:
0001C7B8 4A40                       		tst.w	d0
0001C7BA 6F00                       		ble.s	loc_19658
0001C7BC 5B40                       		subq.w	#5,d0
0001C7BE                            
0001C7BE                            loc_19658:
0001C7BE 3140 003C                  		move.w	d0,$3C(a0)
0001C7C2 E440                       		asr.w	#2,d0
0001C7C4 D168 000C                  		add.w	d0,obY(a0)
0001C7C8 117C 0008 0014             		move.b	#8,obActWid(a0)
0001C7CE 117C 000C 0016             		move.b	#$C,obHeight(a0)
0001C7D4 4228 0020                  		clr.b	obColType(a0)
0001C7D8 2268 0034                  		movea.l	$34(a0),a1
0001C7DC 4A29 0020                  		tst.b	obColType(a1)
0001C7E0 6700                       		beq.s	loc_19688
0001C7E2 4A29 0029                  		tst.b	$29(a1)
0001C7E6 6600                       		bne.s	loc_19688
0001C7E8 117C 0084 0020             		move.b	#$84,obColType(a0)
0001C7EE                            
0001C7EE                            loc_19688:
0001C7EE 6000 FF50                  		bra.w	loc_195DA
0001C7F2                            ; ===========================================================================
0001C7F2                            
0001C7F2                            Obj75_SpikeDelete:
0001C7F2 4EF9 0000 F9B8             		jmp	(DeleteObject).l
0001C7F2 4EF9 0000 F9B8             		jmp	(DeleteObject).l
0001C7F8                            		include	"_incObj\76 SYZ Boss Blocks.asm"
0001C7F8                            ; ---------------------------------------------------------------------------
0001C7F8                            ; Object 76 - blocks that Eggman picks up (SYZ)
0001C7F8                            ; ---------------------------------------------------------------------------
0001C7F8                            
0001C7F8                            BossBlock:
0001C7F8 7000                       		moveq	#0,d0
0001C7FA 1028 0024                  		move.b	obRoutine(a0),d0
0001C7FE 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
0001C802 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
0001C806                            ; ===========================================================================
0001C806 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
0001C808 0000                       		dc.w Obj76_Action-Obj76_Index
0001C80A 0000                       		dc.w loc_19762-Obj76_Index
0001C80C                            ; ===========================================================================
0001C80C                            
0001C80C                            Obj76_Main:	; Routine 0
0001C80C 7800                       		moveq	#0,d4
0001C80E 3A3C 2C10                  		move.w	#$2C10,d5
0001C812 7C09                       		moveq	#9,d6
0001C814 43D0                       		lea	(a0),a1
0001C816 6000                       		bra.s	Obj76_MakeBlock
0001C818                            ; ===========================================================================
0001C818                            
0001C818                            Obj76_Loop:
0001C818 4EB9 0000 FE04             		jsr	(FindFreeObj).l
0001C81E 6600                       		bne.s	Obj76_ExitLoop
0001C820                            
0001C820                            Obj76_MakeBlock:
0001C820 12BC 0076                  		move.b	#id_BossBlock,(a1)
0001C824 237C 0000 0000 0004        		move.l	#Map_BossBlock,obMap(a1)
0001C82C 337C 4000 0002             		move.w	#$4000,obGfx(a1)
0001C832 137C 0004 0001             		move.b	#4,obRender(a1)
0001C838 137C 0010 0014             		move.b	#$10,obActWid(a1)
0001C83E 137C 0010 0016             		move.b	#$10,obHeight(a1)
0001C844 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001C84A 3345 0008                  		move.w	d5,obX(a1)	; set x-position
0001C84E 337C 0582 000C             		move.w	#$582,obY(a1)
0001C854 3344 0028                  		move.w	d4,obSubtype(a1)
0001C858 0644 0101                  		addi.w	#$101,d4
0001C85C 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
0001C860 5429 0024                  		addq.b	#2,obRoutine(a1)
0001C864 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
0001C868                            
0001C868                            Obj76_ExitLoop:
0001C868 4E75                       		rts	
0001C86A                            ; ===========================================================================
0001C86A                            
0001C86A                            Obj76_Action:	; Routine 2
0001C86A 1028 0029                  		move.b	$29(a0),d0
0001C86E B028 0028                  		cmp.b	obSubtype(a0),d0
0001C872 6700                       		beq.s	Obj76_Solid
0001C874 4A00                       		tst.b	d0
0001C876 6B00                       		bmi.s	loc_19718
0001C878                            
0001C878                            loc_19712:
0001C878 6100 0000                  		bsr.w	Obj76_Break
0001C87C 6000                       		bra.s	Obj76_Display
0001C87E                            ; ===========================================================================
0001C87E                            
0001C87E                            loc_19718:
0001C87E 2268 0034                  		movea.l	$34(a0),a1
0001C882 4A29 0021                  		tst.b	obColProp(a1)
0001C886 67F0                       		beq.s	loc_19712
0001C888 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001C88E 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001C894 0668 002C 000C             		addi.w	#$2C,obY(a0)
0001C89A B2C8                       		cmpa.w	a0,a1
0001C89C 6500                       		bcs.s	Obj76_Display
0001C89E 3029 0012                  		move.w	obVelY(a1),d0
0001C8A2 48C0                       		ext.l	d0
0001C8A4 E080                       		asr.l	#8,d0
0001C8A6 D168 000C                  		add.w	d0,obY(a0)
0001C8AA 6000                       		bra.s	Obj76_Display
0001C8AC                            ; ===========================================================================
0001C8AC                            
0001C8AC                            Obj76_Solid:
0001C8AC 323C 001B                  		move.w	#$1B,d1
0001C8B0 343C 0010                  		move.w	#$10,d2
0001C8B4 363C 0011                  		move.w	#$11,d3
0001C8B8 3828 0008                  		move.w	obX(a0),d4
0001C8BC 4EB9 0001 1D86             		jsr	(SolidObject).l
0001C8C2                            
0001C8C2                            Obj76_Display:
0001C8C2 4EF9 0000 F978             		jmp	(DisplaySprite).l
0001C8C8                            ; ===========================================================================
0001C8C8                            
0001C8C8                            loc_19762:	; Routine 4
0001C8C8 4A28 0001                  		tst.b	obRender(a0)
0001C8CC 6A00                       		bpl.s	Obj76_Delete
0001C8CE 4EB9 0000 F92C             		jsr	(ObjectFall).l
0001C8D4 4EF9 0000 F978             		jmp	(DisplaySprite).l
0001C8DA                            ; ===========================================================================
0001C8DA                            
0001C8DA                            Obj76_Delete:
0001C8DA 4EF9 0000 F9B8             		jmp	(DeleteObject).l
0001C8E0                            
0001C8E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C8E0                            
0001C8E0                            
0001C8E0                            Obj76_Break:
0001C8E0 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
0001C8E4 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0001C8E8 7801                       		moveq	#1,d4
0001C8EA 7203                       		moveq	#3,d1
0001C8EC 7438                       		moveq	#$38,d2
0001C8EE 5428 0024                  		addq.b	#2,obRoutine(a0)
0001C8F2 117C 0008 0014             		move.b	#8,obActWid(a0)
0001C8F8 117C 0008 0016             		move.b	#8,obHeight(a0)
0001C8FE 43D0                       		lea	(a0),a1
0001C900 6000                       		bra.s	Obj76_MakeFrag
0001C902                            ; ===========================================================================
0001C902                            
0001C902                            Obj76_LoopFrag:
0001C902 4EB9 0000 FE1A             		jsr	(FindNextFreeObj).l
0001C908 6600                       		bne.s	loc_197D4
0001C90A                            
0001C90A                            Obj76_MakeFrag:
0001C90A 45D0                       		lea	(a0),a2
0001C90C 47D1                       		lea	(a1),a3
0001C90E 7603                       		moveq	#3,d3
0001C910                            
0001C910                            loc_197AA:
0001C910 26DA                       		move.l	(a2)+,(a3)+
0001C912 26DA                       		move.l	(a2)+,(a3)+
0001C914 26DA                       		move.l	(a2)+,(a3)+
0001C916 26DA                       		move.l	(a2)+,(a3)+
0001C918 51CB FFF6                  		dbf	d3,loc_197AA
0001C91C                            
0001C91C 335C 0010                  		move.w	(a4)+,obVelX(a1)
0001C920 335C 0012                  		move.w	(a4)+,obVelY(a1)
0001C924 361D                       		move.w	(a5)+,d3
0001C926 D769 0008                  		add.w	d3,obX(a1)
0001C92A 361D                       		move.w	(a5)+,d3
0001C92C D769 000C                  		add.w	d3,obY(a1)
0001C930 1344 001A                  		move.b	d4,obFrame(a1)
0001C934 5244                       		addq.w	#1,d4
0001C936 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001C93A                            
0001C93A                            loc_197D4:
0001C944                            ; End of function Obj76_Break
0001C944                            
0001C944                            ; ===========================================================================
0001C944 FE80 FE00                  Obj76_FragSpeed:dc.w -$180, -$200
0001C948 0180 FE00                  		dc.w $180, -$200
0001C94C FF00 FF00                  		dc.w -$100, -$100
0001C950 0100 FF00                  		dc.w $100, -$100
0001C954 FFF8 FFF8                  Obj76_FragPos:	dc.w -8, -8
0001C958 0010 0000                  		dc.w $10, 0
0001C95C 0000 0010                  		dc.w 0,	$10
0001C960 0010 0010                  		dc.w $10, $10
0001C960 0010 0010                  		dc.w $10, $10
0001C964                            Map_BossBlock:	include	"_maps\SYZ Boss Blocks.asm"
0001C964                            ; ---------------------------------------------------------------------------
0001C964                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001C964                            ; ---------------------------------------------------------------------------
0001C964                            Map_BossBlock_internal:
0001C964 0000                       		dc.w @wholeblock-Map_BossBlock_internal
0001C966 0000                       		dc.w @topleft-Map_BossBlock_internal
0001C968 0000                       		dc.w @topright-Map_BossBlock_internal
0001C96A 0000                       		dc.w @bottomleft-Map_BossBlock_internal
0001C96C 0000                       		dc.w @bottomright-Map_BossBlock_internal
0001C96E 02                         @wholeblock:	dc.b 2
0001C96F F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001C974 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001C979 00                         		dc.b 0
0001C97A 01                         @topleft:	dc.b 1
0001C97B F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001C980 01                         @topright:	dc.b 1
0001C981 F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001C986 01                         @bottomleft:	dc.b 1
0001C987 F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001C98C 01                         @bottomright:	dc.b 1
0001C98D F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001C992                            		even
0001C992                            		even
0001C992                            
0001C992                            loc_1982C:
0001C992 4EF9 0000 F9B8             		jmp	(DeleteObject).l
0001C998                            
0001C998                            		include	"_incObj\82 Eggman - Scrap Brain 2.asm"
0001C998                            ; ---------------------------------------------------------------------------
0001C998                            ; Object 82 - Eggman (SBZ2)
0001C998                            ; ---------------------------------------------------------------------------
0001C998                            
0001C998                            ScrapEggman:
0001C998 7000                       		moveq	#0,d0
0001C99A 1028 0024                  		move.b	obRoutine(a0),d0
0001C99E 323B 0000                  		move.w	SEgg_Index(pc,d0.w),d1
0001C9A2 4EFB 1000                  		jmp	SEgg_Index(pc,d1.w)
0001C9A6                            ; ===========================================================================
0001C9A6 0000                       SEgg_Index:	dc.w SEgg_Main-SEgg_Index
0001C9A8 0000                       		dc.w SEgg_Eggman-SEgg_Index
0001C9AA 0000                       		dc.w SEgg_Switch-SEgg_Index
0001C9AC                            
0001C9AC 0200 03                    SEgg_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001C9AF 0400 03                    		dc.b 4,	0, 3
0001C9B2                            ; ===========================================================================
0001C9B2                            
0001C9B2                            SEgg_Main:	; Routine 0
0001C9B2 45FA FFF8                  		lea	SEgg_ObjData(pc),a2
0001C9B6 317C 2160 0008             		move.w	#$2160,obX(a0)
0001C9BC 317C 05A4 000C             		move.w	#$5A4,obY(a0)
0001C9C2 117C 000F 0020             		move.b	#$F,obColType(a0)
0001C9C8 117C 0010 0021             		move.b	#$10,obColProp(a0)
0001C9CE 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001C9D4 4228 0025                  		clr.b	ob2ndRout(a0)
0001C9D8 115A 0024                  		move.b	(a2)+,obRoutine(a0)
0001C9DC 115A 001C                  		move.b	(a2)+,obAnim(a0)
0001C9E0 115A 0018                  		move.b	(a2)+,obPriority(a0)
0001C9E4 217C 0000 0000 0004        		move.l	#Map_SEgg,obMap(a0)
0001C9EC 317C 0400 0002             		move.w	#$400,obGfx(a0)
0001C9F2 117C 0004 0001             		move.b	#4,obRender(a0)
0001C9F8 08E8 0007 0001             		bset	#7,obRender(a0)
0001C9FE 117C 0020 0014             		move.b	#$20,obActWid(a0)
0001CA04 4EB9 0000 FE1A             		jsr	(FindNextFreeObj).l
0001CA0A 6600                       		bne.s	SEgg_Eggman
0001CA0C 2348 0034                  		move.l	a0,$34(a1)
0001CA10 12BC 0082                  		move.b	#id_ScrapEggman,(a1) ; load switch object
0001CA14 337C 2130 0008             		move.w	#$2130,obX(a1)
0001CA1A 337C 05BC 000C             		move.w	#$5BC,obY(a1)
0001CA20 4228 0025                  		clr.b	ob2ndRout(a0)
0001CA24 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001CA28 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001CA2C 135A 0018                  		move.b	(a2)+,obPriority(a1)
0001CA30 237C 0000 E1A6 0004        		move.l	#Map_But,obMap(a1)
0001CA38 337C 04A4 0002             		move.w	#$4A4,obGfx(a1)
0001CA3E 137C 0004 0001             		move.b	#4,obRender(a1)
0001CA44 08E9 0007 0001             		bset	#7,obRender(a1)
0001CA4A 137C 0010 0014             		move.b	#$10,obActWid(a1)
0001CA50 137C 0000 001A             		move.b	#0,obFrame(a1)
0001CA56                            
0001CA56                            SEgg_Eggman:	; Routine 2
0001CA56 7000                       		moveq	#0,d0
0001CA58 1028 0025                  		move.b	ob2ndRout(a0),d0
0001CA5C 323B 0000                  		move.w	SEgg_EggIndex(pc,d0.w),d1
0001CA60 4EBB 1000                  		jsr	SEgg_EggIndex(pc,d1.w)
0001CA64 43FA 0000                  		lea	Ani_SEgg(pc),a1
0001CA68 4EB9 0000 CA24             		jsr	(AnimateSprite).l
0001CA6E 4EF9 0000 F978             		jmp	(DisplaySprite).l
0001CA74                            ; ===========================================================================
0001CA74 0000                       SEgg_EggIndex:	dc.w SEgg_ChkSonic-SEgg_EggIndex
0001CA76 0000                       		dc.w SEgg_PreLeap-SEgg_EggIndex
0001CA78 0000                       		dc.w SEgg_Leap-SEgg_EggIndex
0001CA7A 0000                       		dc.w loc_19934-SEgg_EggIndex
0001CA7C                            ; ===========================================================================
0001CA7C                            
0001CA7C                            SEgg_ChkSonic:
0001CA7C 3028 0008                  		move.w	obX(a0),d0
0001CA80 9078 D008                  		sub.w	(v_player+obX).w,d0
0001CA84 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001CA88 6400                       		bcc.s	loc_19934	; if not, branch
0001CA8A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001CA8E 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001CA94 117C 0001 001C             		move.b	#1,obAnim(a0)
0001CA9A                            
0001CA9A                            loc_19934:
0001CA9A 4EF9 0000 F964             		jmp	(SpeedToPos).l
0001CAA0                            ; ===========================================================================
0001CAA0                            
0001CAA0                            SEgg_PreLeap:
0001CAA0 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001CAA4 6600                       		bne.s	loc_19954	; if time remains, branch
0001CAA6 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001CAAA 117C 0002 001C             		move.b	#2,obAnim(a0)
0001CAB0 5868 000C                  		addq.w	#4,obY(a0)
0001CAB4 317C 000F 003C             		move.w	#15,$3C(a0)
0001CABA                            
0001CABA                            loc_19954:
0001CABA 60DE                       		bra.s	loc_19934
0001CABC                            ; ===========================================================================
0001CABC                            
0001CABC                            SEgg_Leap:
0001CABC 5368 003C                  		subq.w	#1,$3C(a0)
0001CAC0 6E00                       		bgt.s	loc_199D0
0001CAC2 6600                       		bne.s	loc_1996A
0001CAC4 317C FF04 0010             		move.w	#-$FC,obVelX(a0) ; make Eggman leap
0001CACA 317C FC40 0012             		move.w	#-$3C0,obVelY(a0)
0001CAD0                            
0001CAD0                            loc_1996A:
0001CAD0 0C68 2132 0008             		cmpi.w	#$2132,obX(a0)
0001CAD6 6E00                       		bgt.s	loc_19976
0001CAD8 4268 0010                  		clr.w	obVelX(a0)
0001CADC                            
0001CADC                            loc_19976:
0001CADC 0668 0024 0012             		addi.w	#$24,obVelY(a0)
0001CAE2 4A68 0012                  		tst.w	obVelY(a0)
0001CAE6 6B00                       		bmi.s	SEgg_FindBlocks
0001CAE8 0C68 0595 000C             		cmpi.w	#$595,obY(a0)
0001CAEE 6500                       		bcs.s	SEgg_FindBlocks
0001CAF0 317C 5357 0028             		move.w	#$5357,obSubtype(a0)
0001CAF6 0C68 059B 000C             		cmpi.w	#$59B,obY(a0)
0001CAFC 6500                       		bcs.s	SEgg_FindBlocks
0001CAFE 317C 059B 000C             		move.w	#$59B,obY(a0)
0001CB04 4268 0012                  		clr.w	obVelY(a0)
0001CB08                            
0001CB08                            SEgg_FindBlocks:
0001CB08 3028 0010                  		move.w	obVelX(a0),d0
0001CB0C 8068 0012                  		or.w	obVelY(a0),d0
0001CB10 6600                       		bne.s	loc_199D0
0001CB12 43F8 D000                  		lea	(v_objspace).w,a1 ; start at the first object RAM
0001CB16 703E                       		moveq	#$3E,d0
0001CB18 7240                       		moveq	#$40,d1
0001CB1A                            
0001CB1A                            SEgg_FindLoop:	
0001CB1A D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001CB1C 0C11 0083                  		cmpi.b	#id_FalseFloor,(a1) ; is object a block? (object $83)
0001CB20 57C8 FFF8                  		dbeq	d0,SEgg_FindLoop ; if not, repeat (max	$3E times)
0001CB24                            
0001CB24 6600                       		bne.s	loc_199D0
0001CB26 337C 474F 0028             		move.w	#$474F,obSubtype(a1) ; set block to disintegrate
0001CB2C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001CB30 117C 0001 001C             		move.b	#1,obAnim(a0)
0001CB36                            
0001CB36                            loc_199D0:
0001CB36 6000 FF62                  		bra.w	loc_19934
0001CB3A                            ; ===========================================================================
0001CB3A                            
0001CB3A                            SEgg_Switch:	; Routine 4
0001CB3A 7000                       		moveq	#0,d0
0001CB3C 1028 0025                  		move.b	ob2ndRout(a0),d0
0001CB40 303B 0000                  		move.w	SEgg_SwIndex(pc,d0.w),d0
0001CB44 4EFB 0000                  		jmp	SEgg_SwIndex(pc,d0.w)
0001CB48                            ; ===========================================================================
0001CB48 0000                       SEgg_SwIndex:	dc.w loc_199E6-SEgg_SwIndex
0001CB4A 0000                       		dc.w SEgg_SwDisplay-SEgg_SwIndex
0001CB4C                            ; ===========================================================================
0001CB4C                            
0001CB4C                            loc_199E6:
0001CB4C 2268 0034                  		movea.l	$34(a0),a1
0001CB50 0C69 5357 0028             		cmpi.w	#$5357,obSubtype(a1)
0001CB56 6600                       		bne.s	SEgg_SwDisplay
0001CB58 117C 0001 001A             		move.b	#1,obFrame(a0)
0001CB5E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001CB62                            
0001CB62                            SEgg_SwDisplay:
0001CB62 4EF9 0000 F978             		jmp	(DisplaySprite).l
0001CB62 4EF9 0000 F978             		jmp	(DisplaySprite).l
0001CB68                            		include	"_anim\Eggman - Scrap Brain 2 & Final.asm"
0001CB68                            ; ---------------------------------------------------------------------------
0001CB68                            ; Animation script - Eggman (SBZ2)
0001CB68                            ; ---------------------------------------------------------------------------
0001CB68 0000                       Ani_SEgg:	dc.w @stand-Ani_SEgg
0001CB6A 0000                       		dc.w @laugh-Ani_SEgg
0001CB6C 0000                       		dc.w @jump1-Ani_SEgg
0001CB6E 0000                       		dc.w @intube-Ani_SEgg
0001CB70 0000                       		dc.w @running-Ani_SEgg
0001CB72 0000                       		dc.w @jump2-Ani_SEgg
0001CB74 0000                       		dc.w @starjump-Ani_SEgg
0001CB76 7E00 FF                    @stand:		dc.b $7E, 0, afEnd
0001CB7A 00                         		even
0001CB7A 0601 02FF                  @laugh:		dc.b 6,	1, 2, afEnd
0001CB7E 0E03 0404 0000 00FF        @jump1:		dc.b $E, 3, 4, 4, 0, 0,	0, afEnd
0001CB86 0005 09FF                  @intube:	dc.b 0,	5, 9, afEnd
0001CB8A 0607 0408 04FF             @running:	dc.b 6,	7, 4, 8, 4, afEnd
0001CB90 0F04 0303 FF               @jump2:		dc.b $F, 4, 3, 3, afEnd
0001CB96 00                         		even
0001CB96 7E06 FF                    @starjump:	dc.b $7E, 6, afEnd
0001CB9A 00                         		even
0001CB9A 00                         		even
0001CB9A                            Map_SEgg:	include	"_maps\Eggman - Scrap Brain 2.asm"
0001CB9A                            ; ---------------------------------------------------------------------------
0001CB9A                            ; Sprite mappings - Eggman (SBZ2)
0001CB9A                            ; ---------------------------------------------------------------------------
0001CB9A                            Map_SEgg_internal:
0001CB9A 0000                       		dc.w @stand-Map_SEgg_internal
0001CB9C 0000                       		dc.w @laugh1-Map_SEgg_internal
0001CB9E 0000                       		dc.w @laugh2-Map_SEgg_internal
0001CBA0 0000                       		dc.w @jump1-Map_SEgg_internal
0001CBA2 0000                       		dc.w @jump2-Map_SEgg_internal
0001CBA4 0000                       		dc.w @surprise-Map_SEgg_internal
0001CBA6 0000                       		dc.w @starjump-Map_SEgg_internal
0001CBA8 0000                       		dc.w @running1-Map_SEgg_internal
0001CBAA 0000                       		dc.w @running2-Map_SEgg_internal
0001CBAC 0000                       		dc.w @intube-Map_SEgg_internal
0001CBAE 0000                       		dc.w @cockpit-Map_SEgg_internal
0001CBB0 03                         @stand:		dc.b 3
0001CBB1 FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
0001CBB6 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001CBBB 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001CBC0 04                         @laugh1:	dc.b 4
0001CBC1 E80D 000E F0               		dc.b $E8, $D, 0, $E, $F0
0001CBC6 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001CBCB 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001CBD0 FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
0001CBD5 00                         		dc.b 0
0001CBD6 04                         @laugh2:	dc.b 4
0001CBD7 E90D 000E F0               		dc.b $E9, $D, 0, $E, $F0
0001CBDC E90E 0000 F0               		dc.b $E9, $E, 0, 0, $F0
0001CBE1 010F 007F F0               		dc.b 1,	$F, 0, $7F, $F0
0001CBE6 FD00 008F E8               		dc.b $FD, 0, 0,	$8F, $E8
0001CBEB 00                         		dc.b 0
0001CBEC 04                         @jump1:		dc.b 4
0001CBED F40F 0820 F0               		dc.b $F4, $F, 8, $20, $F0
0001CBF2 F504 0830 10               		dc.b $F5, 4, 8,	$30, $10
0001CBF7 0809 084E F0               		dc.b 8,	9, 8, $4E, $F0
0001CBFC EC0E 0000 F0               		dc.b $EC, $E, 0, 0, $F0
0001CC01 00                         		dc.b 0
0001CC02 04                         @jump2:		dc.b 4
0001CC03 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001CC08 F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
0001CC0D 0806 083E F8               		dc.b 8,	6, 8, $3E, $F8
0001CC12 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001CC17 00                         		dc.b 0
0001CC18 04                         @surprise:	dc.b 4
0001CC19 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001CC1E E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001CC23 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001CC28 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001CC2D 00                         		dc.b 0
0001CC2E 07                         @starjump:	dc.b 7
0001CC2F E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001CC34 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001CC39 0409 0834 00               		dc.b 4,	9, 8, $34, 0
0001CC3E 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
0001CC43 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001CC48 F104 0854 10               		dc.b $F1, 4, 8,	$54, $10
0001CC4D F104 0054 E0               		dc.b $F1, 4, 0,	$54, $E0
0001CC52 05                         @running1:	dc.b 5
0001CC53 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001CC58 F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
0001CC5D 0409 0834 00               		dc.b 4,	9, 8, $34, 0
0001CC62 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
0001CC67 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001CC6C 06                         @running2:	dc.b 6
0001CC6D EE0F 0820 F0               		dc.b $EE, $F, 8, $20, $F0
0001CC72 EF04 0830 10               		dc.b $EF, 4, 8,	$30, $10
0001CC77 0905 0844 00               		dc.b 9,	5, 8, $44, 0
0001CC7C 0301 0848 F8               		dc.b 3,	1, 8, $48, $F8
0001CC81 0B05 084A E8               		dc.b $B, 5, 8, $4A, $E8
0001CC86 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0001CC8B 00                         		dc.b 0
0001CC8C 08                         @intube:	dc.b 8
0001CC8D E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC ; Eggman inside tube in Final Zone
0001CC92 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001CC97 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001CC9C 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001CCA1 E00D 3EF0 F0               		dc.b $E0, $D, $3E, $F0,	$F0
0001CCA6 F00D 3EF0 F0               		dc.b $F0, $D, $3E, $F0,	$F0
0001CCAB 000D 3EF0 F0               		dc.b 0,	$D, $3E, $F0, $F0
0001CCB0 100D 3EF0 F0               		dc.b $10, $D, $3E, $F0,	$F0
0001CCB5 03                         @cockpit:	dc.b 3
0001CCB6 EC0D 0056 E4               		dc.b $EC, $D, 0, $56, $E4 ; empty cockpit of Eggmobile in Final Zone
0001CCBB F408 005E 04               		dc.b $F4, 8, 0,	$5E, 4
0001CCC0 EC0D 0061 FC               		dc.b $EC, $D, 0, $61, $FC
0001CCC6 00                         		even
0001CCC6 00                         		even
0001CCC6                            		include	"_incObj\83 SBZ Eggman's Crumbling Floor.asm"
0001CCC6                            ; ---------------------------------------------------------------------------
0001CCC6                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001CCC6                            ; ---------------------------------------------------------------------------
0001CCC6                            
0001CCC6                            FalseFloor:
0001CCC6 7000                       		moveq	#0,d0
0001CCC8 1028 0024                  		move.b	obRoutine(a0),d0
0001CCCC 323B 0000                  		move.w	FFloor_Index(pc,d0.w),d1
0001CCD0 4EFB 1000                  		jmp	FFloor_Index(pc,d1.w)
0001CCD4                            ; ===========================================================================
0001CCD4 0000                       FFloor_Index:	dc.w FFloor_Main-FFloor_Index
0001CCD6 0000                       		dc.w FFloor_ChkBreak-FFloor_Index
0001CCD8 0000                       		dc.w loc_19C36-FFloor_Index
0001CCDA 0000                       		dc.w loc_19C62-FFloor_Index
0001CCDC 0000                       		dc.w loc_19C72-FFloor_Index
0001CCDE 0000                       		dc.w loc_19C80-FFloor_Index
0001CCE0                            ; ===========================================================================
0001CCE0                            
0001CCE0                            FFloor_Main:	; Routine 0
0001CCE0 317C 2080 0008             		move.w	#$2080,obX(a0)
0001CCE6 317C 05D0 000C             		move.w	#$5D0,obY(a0)
0001CCEC 117C 0080 0014             		move.b	#$80,obActWid(a0)
0001CCF2 117C 0010 0016             		move.b	#$10,obHeight(a0)
0001CCF8 117C 0004 0001             		move.b	#4,obRender(a0)
0001CCFE 08E8 0007 0001             		bset	#7,obRender(a0)
0001CD04 7800                       		moveq	#0,d4
0001CD06 3A3C 2010                  		move.w	#$2010,d5
0001CD0A 7C07                       		moveq	#7,d6
0001CD0C 45E8 0030                  		lea	$30(a0),a2
0001CD10                            
0001CD10                            FFloor_MakeBlock:
0001CD10 4EB9 0000 FE04             		jsr	(FindFreeObj).l
0001CD16 6600                       		bne.s	FFloor_ExitMake
0001CD18 34C9                       		move.w	a1,(a2)+
0001CD1A 12BC 0083                  		move.b	#id_FalseFloor,(a1) ; load block object
0001CD1E 237C 0000 0000 0004        		move.l	#Map_FFloor,obMap(a1)
0001CD26 337C 4518 0002             		move.w	#$4518,obGfx(a1)
0001CD2C 137C 0004 0001             		move.b	#4,obRender(a1)
0001CD32 137C 0010 0014             		move.b	#$10,obActWid(a1)
0001CD38 137C 0010 0016             		move.b	#$10,obHeight(a1)
0001CD3E 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001CD44 3345 0008                  		move.w	d5,obX(a1)	; set X	position
0001CD48 337C 05D0 000C             		move.w	#$5D0,obY(a1)
0001CD4E 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001CD52 137C 0008 0024             		move.b	#8,obRoutine(a1)
0001CD58 51CE FFB6                  		dbf	d6,FFloor_MakeBlock ; repeat sequence 7 more times
0001CD5C                            
0001CD5C                            FFloor_ExitMake:
0001CD5C 5428 0024                  		addq.b	#2,obRoutine(a0)
0001CD60 4E75                       		rts	
0001CD62                            ; ===========================================================================
0001CD62                            
0001CD62                            FFloor_ChkBreak:; Routine 2
0001CD62 0C68 474F 0028             		cmpi.w	#$474F,obSubtype(a0) ; is object set to disintegrate?
0001CD68 6600                       		bne.s	FFloor_Solid	; if not, branch
0001CD6A 4228 001A                  		clr.b	obFrame(a0)
0001CD6E 5428 0024                  		addq.b	#2,obRoutine(a0) ; next subroutine
0001CD72                            
0001CD72                            FFloor_Solid:
0001CD72 7000                       		moveq	#0,d0
0001CD74 1028 001A                  		move.b	obFrame(a0),d0
0001CD78 4400                       		neg.b	d0
0001CD7A 4880                       		ext.w	d0
0001CD7C 5040                       		addq.w	#8,d0
0001CD7E E940                       		asl.w	#4,d0
0001CD80 383C 2100                  		move.w	#$2100,d4
0001CD84 9840                       		sub.w	d0,d4
0001CD86 1140 0014                  		move.b	d0,obActWid(a0)
0001CD8A 3144 0008                  		move.w	d4,obX(a0)
0001CD8E 720B                       		moveq	#$B,d1
0001CD90 D240                       		add.w	d0,d1
0001CD92 7410                       		moveq	#$10,d2
0001CD94 7611                       		moveq	#$11,d3
0001CD96 4EF9 0001 1D86             		jmp	(SolidObject).l
0001CD9C                            ; ===========================================================================
0001CD9C                            
0001CD9C                            loc_19C36:	; Routine 4
0001CD9C 0428 000E 001E             		subi.b	#$E,obTimeFrame(a0)
0001CDA2 6400                       		bcc.s	FFloor_Solid2
0001CDA4 70FF                       		moveq	#-1,d0
0001CDA6 1028 001A                  		move.b	obFrame(a0),d0
0001CDAA 4880                       		ext.w	d0
0001CDAC D040                       		add.w	d0,d0
0001CDAE 3030 0030                  		move.w	$30(a0,d0.w),d0
0001CDB2 2240                       		movea.l	d0,a1
0001CDB4 337C 474F 0028             		move.w	#$474F,obSubtype(a1)
0001CDBA 5228 001A                  		addq.b	#1,obFrame(a0)
0001CDBE 0C28 0008 001A             		cmpi.b	#8,obFrame(a0)
0001CDC4 6700                       		beq.s	loc_19C62
0001CDC6                            
0001CDC6                            FFloor_Solid2:
0001CDC6 60AA                       		bra.s	FFloor_Solid
0001CDC8                            ; ===========================================================================
0001CDC8                            
0001CDC8                            loc_19C62:	; Routine 6
0001CDC8 08A8 0003 0022             		bclr	#3,obStatus(a0)
0001CDCE 08B8 0003 D022             		bclr	#3,(v_player+obStatus).w
0001CDD4 6000 FBBC                  		bra.w	loc_1982C
0001CDD8                            ; ===========================================================================
0001CDD8                            
0001CDD8                            loc_19C72:	; Routine 8
0001CDD8 0C68 474F 0028             		cmpi.w	#$474F,obSubtype(a0) ; is object set to disintegrate?
0001CDDE 6700                       		beq.s	FFloor_Break	; if yes, branch
0001CDE0 4EF9 0000 F978             		jmp	(DisplaySprite).l
0001CDE6                            ; ===========================================================================
0001CDE6                            
0001CDE6                            loc_19C80:	; Routine $A
0001CDE6 4A28 0001                  		tst.b	obRender(a0)
0001CDEA 6A00 FBA6                  		bpl.w	loc_1982C
0001CDEE 4EB9 0000 F92C             		jsr	(ObjectFall).l
0001CDF4 4EF9 0000 F978             		jmp	(DisplaySprite).l
0001CDFA                            ; ===========================================================================
0001CDFA                            
0001CDFA                            FFloor_Break:
0001CDFA 49FA 0000                  		lea	FFloor_FragSpeed(pc),a4
0001CDFE 4BFA 0000                  		lea	FFloor_FragPos(pc),a5
0001CE02 7801                       		moveq	#1,d4
0001CE04 7203                       		moveq	#3,d1
0001CE06 7438                       		moveq	#$38,d2
0001CE08 5428 0024                  		addq.b	#2,obRoutine(a0)
0001CE0C 117C 0008 0014             		move.b	#8,obActWid(a0)
0001CE12 117C 0008 0016             		move.b	#8,obHeight(a0)
0001CE18 43D0                       		lea	(a0),a1
0001CE1A 6000                       		bra.s	FFloor_MakeFrag
0001CE1C                            ; ===========================================================================
0001CE1C                            
0001CE1C                            FFloor_LoopFrag:
0001CE1C 4EB9 0000 FE1A             		jsr	(FindNextFreeObj).l
0001CE22 6600                       		bne.s	FFloor_BreakSnd
0001CE24                            
0001CE24                            FFloor_MakeFrag:
0001CE24 45D0                       		lea	(a0),a2
0001CE26 47D1                       		lea	(a1),a3
0001CE28 7603                       		moveq	#3,d3
0001CE2A                            
0001CE2A                            loc_19CC4:
0001CE2A 26DA                       		move.l	(a2)+,(a3)+
0001CE2C 26DA                       		move.l	(a2)+,(a3)+
0001CE2E 26DA                       		move.l	(a2)+,(a3)+
0001CE30 26DA                       		move.l	(a2)+,(a3)+
0001CE32 51CB FFF6                  		dbf	d3,loc_19CC4
0001CE36                            
0001CE36 335C 0012                  		move.w	(a4)+,obVelY(a1)
0001CE3A 361D                       		move.w	(a5)+,d3
0001CE3C D769 0008                  		add.w	d3,obX(a1)
0001CE40 361D                       		move.w	(a5)+,d3
0001CE42 D769 000C                  		add.w	d3,obY(a1)
0001CE46 1344 001A                  		move.b	d4,obFrame(a1)
0001CE4A 5244                       		addq.w	#1,d4
0001CE4C 51C9 FFCE                  		dbf	d1,FFloor_LoopFrag ; repeat sequence 3 more times
0001CE50                            
0001CE50                            FFloor_BreakSnd:
0001CE5A 4EF9 0000 F978             		jmp	(DisplaySprite).l
0001CE60                            ; ===========================================================================
0001CE60 0080 0000                  FFloor_FragSpeed:dc.w $80, 0
0001CE64 0120 00C0                  		dc.w $120, $C0
0001CE68 FFF8 FFF8                  FFloor_FragPos:	dc.w -8, -8
0001CE6C 0010 0000                  		dc.w $10, 0
0001CE70 0000 0010                  		dc.w 0,	$10
0001CE74 0010 0010                  		dc.w $10, $10
0001CE74 0010 0010                  		dc.w $10, $10
0001CE78                            Map_FFloor:	include	"_maps\SBZ Eggman's Crumbling Floor.asm"
0001CE78                            ; ---------------------------------------------------------------------------
0001CE78                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001CE78                            ; ---------------------------------------------------------------------------
0001CE78                            Map_FFloor_internal:
0001CE78 0000                       		dc.w @wholeblock-Map_FFloor_internal
0001CE7A 0000                       		dc.w @topleft-Map_FFloor_internal
0001CE7C 0000                       		dc.w @topright-Map_FFloor_internal
0001CE7E 0000                       		dc.w @bottomleft-Map_FFloor_internal
0001CE80 0000                       		dc.w @bottomright-Map_FFloor_internal
0001CE82 01                         @wholeblock:	dc.b 1
0001CE83 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001CE88 02                         @topleft:	dc.b 2
0001CE89 F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001CE8E F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001CE93 00                         		dc.b 0
0001CE94 02                         @topright:	dc.b 2
0001CE95 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001CE9A F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001CE9F 00                         		dc.b 0
0001CEA0 02                         @bottomleft:	dc.b 2
0001CEA1 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001CEA6 F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001CEAB 00                         		dc.b 0
0001CEAC 02                         @bottomright:	dc.b 2
0001CEAD F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001CEB2 F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001CEB8 00                         		even
0001CEB8 00                         		even
0001CEB8                            		include	"_incObj\85 Boss - Final.asm"
0001CEB8                            ; ---------------------------------------------------------------------------
0001CEB8                            ; Object 85 - Eggman (FZ)
0001CEB8                            ; ---------------------------------------------------------------------------
0001CEB8                            
0001CEB8                            Obj85_Delete:
0001CEB8 4EF9 0000 F9B8             		jmp	(DeleteObject).l
0001CEBE                            ; ===========================================================================
0001CEBE                            
0001CEBE                            BossFinal:
0001CEBE 7000                       		moveq	#0,d0
0001CEC0 1028 0024                  		move.b	obRoutine(a0),d0
0001CEC4 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001CEC8 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001CECC                            ; ===========================================================================
0001CECC 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001CECE 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001CED0 0000                       		dc.w loc_1A38E-Obj85_Index
0001CED2 0000                       		dc.w loc_1A346-Obj85_Index
0001CED4 0000                       		dc.w loc_1A2C6-Obj85_Index
0001CED6 0000                       		dc.w loc_1A3AC-Obj85_Index
0001CED8 0000                       		dc.w loc_1A264-Obj85_Index
0001CEDA                            
0001CEDA 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001CEE0 0001 CB9A                  		dc.l Map_SEgg		; mappings pointer
0001CEE4 25B0 0590 0300             		dc.w $25B0, $590, $300
0001CEEA 0000 0000                  		dc.l Map_EggCyl
0001CEEE 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001CEF4 0000 0000                  		dc.l Map_FZLegs
0001CEF8 26E0 0596 0470             		dc.w $26E0, $596, $470
0001CEFE 0001 CB9A                  		dc.l Map_SEgg
0001CF02 26E0 0596 0400             		dc.w $26E0, $596, $400
0001CF08 0001 AE1E                  		dc.l Map_Eggman
0001CF0C 26E0 0596 0400             		dc.w $26E0, $596, $400
0001CF12 0001 AE1E                  		dc.l Map_Eggman
0001CF16                            
0001CF16                            Obj85_ObjData2:	; routine num, animation, sprite priority (high and low bytes), width, height		
0001CF16 0200 0200 2019             		dc.b  2, 0, $02, $00, $20, $19
0001CF1C 0400 0080 1208             		dc.b  4, 0, $00, $80, $12,   8
0001CF22 0600 0180 0000             		dc.b  6, 0, $01, $80,   0,   0
0001CF28 0800 0180 0000             		dc.b  8, 0, $01, $80,   0,   0
0001CF2E 0A00 0180 2020             		dc.b $A, 0, $01, $80, $20, $20
0001CF34 0C00 0180 0000             		dc.b $C, 0, $01, $80,   0,   0
0001CF3A                            ; ===========================================================================
0001CF3A                            
0001CF3A                            Obj85_Main:	; Routine 0
0001CF3A 45FA FF9E                  		lea	Obj85_ObjData(pc),a2
0001CF3E 47FA FFD6                  		lea	Obj85_ObjData2(pc),a3
0001CF42 2248                       		movea.l	a0,a1
0001CF44 7205                       		moveq	#5,d1
0001CF46 6000                       		bra.s	Obj85_LoadBoss
0001CF48                            ; ===========================================================================
0001CF48                            
0001CF48                            Obj85_Loop:
0001CF48 4EB9 0000 FE1A             		jsr	(FindNextFreeObj).l
0001CF4E 6600                       		bne.s	loc_19E20
0001CF50                            
0001CF50                            Obj85_LoadBoss:
0001CF50 12BC 0085                  		move.b	#id_BossFinal,(a1)
0001CF54 335A 0008                  		move.w	(a2)+,obX(a1)
0001CF58 335A 000C                  		move.w	(a2)+,obY(a1)
0001CF5C 335A 0002                  		move.w	(a2)+,obGfx(a1)
0001CF60 235A 0004                  		move.l	(a2)+,obMap(a1)
0001CF64 135B 0024                  		move.b	(a3)+,obRoutine(a1)
0001CF68 135B 001C                  		move.b	(a3)+,obAnim(a1)
0001CF6C 335B 0018                  		move.w	(a3)+,obPriority(a1)
0001CF70 135B 0014                  			move.b	(a3)+,obActWid(a1)
0001CF74 135B 0016                  		move.b	(a3)+,obHeight(a1)
0001CF78 137C 0004 0001             		move.b	#4,obRender(a1)
0001CF7E 08E8 0007 0001             		bset	#7,obRender(a0)
0001CF84 2348 0034                  		move.l	a0,$34(a1)
0001CF88 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001CF8C                            
0001CF8C                            loc_19E20:
0001CF8C 45E8 0036                  		lea	$36(a0),a2
0001CF90 4EB9 0000 FE04             		jsr	(FindFreeObj).l
0001CF96 6600                       		bne.s	loc_19E5A
0001CF98 12BC 0086                  		move.b	#id_BossPlasma,(a1) ; load energy ball object
0001CF9C 3489                       		move.w	a1,(a2)
0001CF9E 2348 0034                  		move.l	a0,$34(a1)
0001CFA2 45E8 0038                  		lea	$38(a0),a2
0001CFA6 7400                       		moveq	#0,d2
0001CFA8 7203                       		moveq	#3,d1
0001CFAA                            
0001CFAA                            loc_19E3E:
0001CFAA 4EB9 0000 FE1A             		jsr	(FindNextFreeObj).l
0001CFB0 6600                       		bne.s	loc_19E5A
0001CFB2 34C9                       		move.w	a1,(a2)+
0001CFB4 12BC 0084                  		move.b	#id_EggmanCylinder,(a1) ; load crushing	cylinder object
0001CFB8 2348 0034                  		move.l	a0,$34(a1)
0001CFBC 1342 0028                  		move.b	d2,obSubtype(a1)
0001CFC0 5442                       		addq.w	#2,d2
0001CFC2 51C9 FFE6                  		dbf	d1,loc_19E3E
0001CFC6                            
0001CFC6                            loc_19E5A:
0001CFC6 317C 0000 0034             		move.w	#0,$34(a0)
0001CFCC 117C 0004 0021             		move.b	#4,obColProp(a0) ; set number of hits to 8
0001CFD2 317C FFFF 0030             		move.w	#-1,$30(a0)
0001CFD8                            
0001CFD8                            Obj85_Eggman:	; Routine 2
0001CFD8 7000                       		moveq	#0,d0
0001CFDA 1028 0034                  		move.b	$34(a0),d0
0001CFDE 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001CFE2 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001CFE6 4EF9 0000 F978             		jmp	(DisplaySprite).l
0001CFEC                            ; ===========================================================================
0001CFEC 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001CFF0 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001CFF4 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001CFF8 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001CFFC                            ; ===========================================================================
0001CFFC                            
0001CFFC                            loc_19E90:
0001CFFC 4AB8 F680                  		tst.l	(v_plc_buffer).w
0001D000 6600                       		bne.s	loc_19EA2
0001D002 0C78 2450 F700             		cmpi.w	#$2450,(v_screenposx).w
0001D008 6500                       		bcs.s	loc_19EA2
0001D00A 5428 0034                  		addq.b	#2,$34(a0)
0001D00E                            
0001D00E                            loc_19EA2:
0001D00E 52B8 F636                  		addq.l	#1,(v_random).w
0001D012 4E75                       		rts	
0001D014                            ; ===========================================================================
0001D014                            
0001D014                            loc_19EA8:
0001D014 4A68 0030                  		tst.w	$30(a0)
0001D018 6A00                       		bpl.s	loc_19F10
0001D01A 4268 0030                  		clr.w	$30(a0)
0001D01E 4EB9 0000 3A0C             		jsr	(RandomNumber).l
0001D024 0240 000C                  		andi.w	#$C,d0
0001D028 3200                       		move.w	d0,d1
0001D02A 5441                       		addq.w	#2,d1
0001D02C 4A80                       		tst.l	d0
0001D02E 6A00                       		bpl.s	loc_19EC6
0001D030 C340                       		exg	d1,d0
0001D032                            
0001D032                            loc_19EC6:
0001D032 43FA 0000                  		lea	word_19FD6(pc),a1
0001D036 3031 0000                  		move.w	(a1,d0.w),d0
0001D03A 3231 1000                  		move.w	(a1,d1.w),d1
0001D03E 3140 0030                  		move.w	d0,$30(a0)
0001D042 74FF                       		moveq	#-1,d2
0001D044 3430 0038                  		move.w	$38(a0,d0.w),d2
0001D048 2242                       		movea.l	d2,a1
0001D04A 137C 00FF 0029             		move.b	#-1,$29(a1)
0001D050 337C FFFF 0030             		move.w	#-1,$30(a1)
0001D056 3430 1038                  		move.w	$38(a0,d1.w),d2
0001D05A 2242                       		movea.l	d2,a1
0001D05C 137C 0001 0029             		move.b	#1,$29(a1)
0001D062 337C 0000 0030             		move.w	#0,$30(a1)
0001D068 317C 0001 0032             		move.w	#1,$32(a0)
0001D06E 4228 0035                  		clr.b	$35(a0)
0001D07C                            
0001D07C                            loc_19F10:
0001D07C 4A68 0032                  		tst.w	$32(a0)
0001D080 6B00 0000                  		bmi.w	loc_19FA6
0001D084 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001D08A 3038 D008                  		move.w	(v_player+obX).w,d0
0001D08E 9068 0008                  		sub.w	obX(a0),d0
0001D092 6500                       		bcs.s	loc_19F2E
0001D094 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D09A                            
0001D09A                            loc_19F2E:
0001D09A 323C 002B                  		move.w	#$2B,d1
0001D09E 343C 0014                  		move.w	#$14,d2
0001D0A2 363C 0014                  		move.w	#$14,d3
0001D0A6 3828 0008                  		move.w	obX(a0),d4
0001D0AA 4EB9 0001 1D86             		jsr	(SolidObject).l
0001D0B0 4A44                       		tst.w	d4
0001D0B2 6E00                       		bgt.s	loc_19F50
0001D0B4                            
0001D0B4                            loc_19F48:
0001D0B4 4A28 0035                  		tst.b	$35(a0)
0001D0B8 6600                       		bne.s	loc_19F88
0001D0BA 6000                       		bra.s	loc_19F96
0001D0BC                            ; ===========================================================================
0001D0BC                            
0001D0BC                            loc_19F50:
0001D0BC 5E78 F636                  		addq.w	#7,(v_random).w
0001D0C0 0C38 0002 D01C             		cmpi.b	#id_Roll,(v_player+obAnim).w
0001D0C6 66EC                       		bne.s	loc_19F48
0001D0C8 303C 0300                  		move.w	#$300,d0
0001D0CC 0828 0000 0022             		btst	#0,obStatus(a0)
0001D0D2 6600                       		bne.s	loc_19F6A
0001D0D4 4440                       		neg.w	d0
0001D0D6                            
0001D0D6                            loc_19F6A:
0001D0D6 31C0 D010                  		move.w	d0,(v_player+obVelX).w
0001D0DA 4A28 0035                  		tst.b	$35(a0)
0001D0DE 6600                       		bne.s	loc_19F88
0001D0E0 5328 0021                  		subq.b	#1,obColProp(a0)
0001D0E4 117C 00FF 0035             		move.b	#$FF,$35(a0)
0001D0EA 4EB9 0000 0000             		jsr	(BossModeMusic).l ;	play boss damage sound
0001D0F0                            
0001D0F0                            loc_19F88:
0001D0F0 5328 0035                  		subq.b	#1,$35(a0)
0001D0F4 6700                       		beq.s	loc_19F96
0001D0F6 117C 0003 001C             		move.b	#3,obAnim(a0)
0001D0FC 6000                       		bra.s	loc_19F9C
0001D0FE                            ; ===========================================================================
0001D0FE                            
0001D0FE                            loc_19F96:
0001D0FE 117C 0001 001C             		move.b	#1,obAnim(a0)
0001D104                            
0001D104                            loc_19F9C:
0001D104 43FA FA62                  		lea	Ani_SEgg(pc),a1
0001D108 4EF9 0000 CA24             		jmp	(AnimateSprite).l
0001D10E                            ; ===========================================================================
0001D10E                            
0001D10E                            loc_19FA6:
0001D10E 4A28 0021                  		tst.b	obColProp(a0)
0001D112 6700                       		beq.s	loc_19FBC
0001D114 5428 0034                  		addq.b	#2,$34(a0)
0001D118 317C FFFF 0030             		move.w	#-1,$30(a0)
0001D11E 4268 0032                  		clr.w	$32(a0)
0001D122 4E75                       		rts	
0001D124                            ; ===========================================================================
0001D124                            
0001D124                            loc_19FBC:
0001D124 7064                       			moveq	#100,d0
0001D126 6100 0000                  			bsr.w	AddPoints
0001D12A 117C 0006 0034             		move.b	#6,$34(a0)
0001D130 317C 25C0 0008             		move.w	#$25C0,obX(a0)
0001D136 317C 053C 000C             		move.w	#$53C,obY(a0)
0001D13C 117C 0014 0016             		move.b	#$14,obHeight(a0)
0001D142 4E75                       		rts	
0001D144                            ; ===========================================================================
0001D144 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001D154                            ; ===========================================================================
0001D154                            
0001D154                            loc_19FE6:
0001D154 70FF                       		moveq	#-1,d0
0001D156 3028 0036                  		move.w	$36(a0),d0
0001D15A 2240                       		movea.l	d0,a1
0001D15C 4A68 0030                  		tst.w	$30(a0)
0001D160 6A00                       		bpl.s	loc_1A000
0001D162 4268 0030                  		clr.w	$30(a0)
0001D166 137C 00FF 0029             		move.b	#-1,$29(a1)
0001D16C 6100                       		bsr.s	loc_1A020
0001D16E                            
0001D16E                            loc_1A000:
0001D16E 700F                       		moveq	#$F,d0
0001D170 C078 FE0E                  		and.w	(v_vbla_word).w,d0
0001D174 6600                       		bne.s	loc_1A00A
0001D176 6100                       		bsr.s	loc_1A020
0001D178                            
0001D178                            loc_1A00A:
0001D178 4A68 0032                  		tst.w	$32(a0)
0001D17C 6700                       		beq.s	locret_1A01E
0001D17E 5528 0034                  		subq.b	#2,$34(a0)
0001D182 317C FFFF 0030             		move.w	#-1,$30(a0)
0001D188 4268 0032                  		clr.w	$32(a0)
0001D18C                            
0001D18C                            locret_1A01E:
0001D18C 4E75                       		rts	
0001D18E                            ; ===========================================================================
0001D18E                            
0001D18E                            loc_1A020:
0001D198                            ; ===========================================================================
0001D198                            
0001D198                            loc_1A02A:
0001D198 117C 0030 0014             			move.b	#$30,obActWid(a0)
0001D19E 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D1A4 4EB9 0000 F964             		jsr	(SpeedToPos).l
0001D1AA 117C 0006 001A             		move.b	#6,obFrame(a0)
0001D1B0 0668 0010 0012             		addi.w	#$10,obVelY(a0)
0001D1B6 0C68 059C 000C             		cmpi.w	#$59C,obY(a0)
0001D1BC 6500                       		bcs.s	loc_1A070
0001D1BE 317C 059C 000C             		move.w	#$59C,obY(a0)
0001D1C4 5428 0034                  		addq.b	#2,$34(a0)
0001D1C8 117C 0020 0014             			move.b	#$20,obActWid(a0)
0001D1CE 317C 0100 0010             		move.w	#$100,obVelX(a0)
0001D1D4 317C FF00 0012             		move.w	#-$100,obVelY(a0)
0001D1DA 5438 F742                  		addq.b	#2,(v_dle_routine).w
0001D1DE                            
0001D1DE                            loc_1A070:
0001D1DE 6000 0000                  		bra.w	loc_1A166
0001D1E2                            ; ===========================================================================
0001D1E2                            
0001D1E2                            loc_1A074:
0001D1E2 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D1E8 117C 0004 001C             		move.b	#4,obAnim(a0)
0001D1EE 4EB9 0000 F964             		jsr	(SpeedToPos).l
0001D1F4 0668 0010 0012             		addi.w	#$10,obVelY(a0)
0001D1FA 0C68 05A3 000C             		cmpi.w	#$5A3,obY(a0)
0001D200 6500                       		bcs.s	loc_1A09A
0001D202 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001D208                            
0001D208                            loc_1A09A:
0001D208 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001D20E 3028 0008                  		move.w	obX(a0),d0
0001D212 9078 D008                  		sub.w	(v_player+obX).w,d0
0001D216 6A00                       		bpl.s	loc_1A0B4
0001D218 317C 0500 0010             		move.w	#$500,obVelX(a0)
0001D21E 6000 0000                  		bra.w	loc_1A0F2
0001D222                            ; ===========================================================================
0001D222                            
0001D222                            loc_1A0B4:
0001D222 0440 0070                  		subi.w	#$70,d0
0001D226 6500                       		bcs.s	loc_1A0F2
0001D228 0468 0100 0010             		subi.w	#$100,obVelX(a0)
0001D22E 5140                       		subq.w	#8,d0
0001D230 6500                       		bcs.s	loc_1A0F2
0001D232 0468 0100 0010             		subi.w	#$100,obVelX(a0)
0001D238 5140                       		subq.w	#8,d0
0001D23A 6500                       		bcs.s	loc_1A0F2
0001D23C 0468 0080 0010             		subi.w	#$80,obVelX(a0)
0001D242 5140                       		subq.w	#8,d0
0001D244 6500                       		bcs.s	loc_1A0F2
0001D246 0468 0080 0010             		subi.w	#$80,obVelX(a0)
0001D24C 5140                       		subq.w	#8,d0
0001D24E 6500                       		bcs.s	loc_1A0F2
0001D250 0468 0080 0010             		subi.w	#$80,obVelX(a0)
0001D256 0440 0038                  		subi.w	#$38,d0
0001D25A 6500                       		bcs.s	loc_1A0F2
0001D25C 4268 0010                  		clr.w	obVelX(a0)
0001D260                            
0001D260                            loc_1A0F2:
0001D260 0C68 26A0 0008             		cmpi.w	#$26A0,obX(a0)
0001D266 6500                       		bcs.s	loc_1A110
0001D268 317C 26A0 0008             		move.w	#$26A0,obX(a0)
0001D26E 317C 0240 0010             		move.w	#$240,obVelX(a0)
0001D274 317C FB40 0012             		move.w	#-$4C0,obVelY(a0)
0001D27A 5428 0034                  		addq.b	#2,$34(a0)
0001D27E                            
0001D27E                            loc_1A110:
0001D27E 6000                       		bra.s	loc_1A15C
0001D280                            ; ===========================================================================
0001D280                            
0001D280                            loc_1A112:
0001D280 4EB9 0000 F964             		jsr	(SpeedToPos).l
0001D286 0C68 26E0 0008             		cmpi.w	#$26E0,obX(a0)
0001D28C 6500                       		bcs.s	loc_1A124
0001D28E 4268 0010                  		clr.w	obVelX(a0)
0001D292                            
0001D292                            loc_1A124:
0001D292 0668 0034 0012             		addi.w	#$34,obVelY(a0)
0001D298 4A68 0012                  		tst.w	obVelY(a0)
0001D29C 6B00                       		bmi.s	loc_1A142
0001D29E 0C68 0592 000C             		cmpi.w	#$592,obY(a0)
0001D2A4 6500                       		bcs.s	loc_1A142
0001D2A6 317C 0592 000C             		move.w	#$592,obY(a0)
0001D2AC 4268 0012                  		clr.w	obVelY(a0)
0001D2B0                            
0001D2B0                            loc_1A142:
0001D2B0 3028 0010                  		move.w	obVelX(a0),d0
0001D2B4 8068 0012                  		or.w	obVelY(a0),d0
0001D2B8 6600                       		bne.s	loc_1A15C
0001D2BA 5428 0034                  		addq.b	#2,$34(a0)
0001D2BE 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001D2C4 117C 0001 0021             		move.b	#1,obColProp(a0)
0001D2CA                            
0001D2CA                            loc_1A15C:
0001D2CA 43FA F89C                  		lea	Ani_SEgg(pc),a1
0001D2CE 4EB9 0000 CA24             		jsr	(AnimateSprite).l
0001D2D4                            
0001D2D4                            loc_1A166:
0001D2D4 0C78 2700 F72A             		cmpi.w	#$2700,(v_limitright2).w
0001D2DA 6C00                       		bge.s	loc_1A172
0001D2DC 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001D2E0                            
0001D2E0                            loc_1A172:
0001D2E0 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001D2E6 6C00                       		bge.s	locret_1A190
0001D2E8 323C 001B                  		move.w	#$1B,d1
0001D2EC 343C 0070                  		move.w	#$70,d2
0001D2F0 363C 0071                  		move.w	#$71,d3
0001D2F4 3828 0008                  		move.w	obX(a0),d4
0001D2F8 4EF9 0001 1D86             		jmp	(SolidObject).l
0001D2FE                            ; ===========================================================================
0001D2FE                            
0001D2FE                            locret_1A190:
0001D2FE 4E75                       		rts	
0001D300                            ; ===========================================================================
0001D300                            
0001D300                            loc_1A192:
0001D300 217C 0001 AE1E 0004        		move.l	#Map_Eggman,obMap(a0)
0001D308 317C 0400 0002             		move.w	#$400,obGfx(a0)
0001D30E 117C 0000 001C             		move.b	#0,obAnim(a0)
0001D314 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D31A 4EB9 0000 F964             		jsr	(SpeedToPos).l
0001D320 0C68 0544 000C             		cmpi.w	#$544,obY(a0)
0001D326 6400                       		bcc.s	loc_1A1D0
0001D328 317C 0180 0010             		move.w	#$180,obVelX(a0)
0001D32E 317C FFE8 0012             		move.w	#-$18,obVelY(a0)
0001D334 117C 000F 0020             		move.b	#$F,obColType(a0)
0001D33A 5428 0034                  		addq.b	#2,$34(a0)
0001D33E                            
0001D33E                            loc_1A1D0:
0001D33E 6000 FF8A                  		bra.w	loc_1A15C
0001D342                            ; ===========================================================================
0001D342                            
0001D342                            loc_1A1D4:
0001D342 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D348 4EB9 0000 F964             		jsr	(SpeedToPos).l
0001D34E 4A68 0030                  		tst.w	$30(a0)
0001D352 6600                       		bne.s	loc_1A1FC
0001D354 4A28 0020                  		tst.b	obColType(a0)
0001D358 6600                       		bne.s	loc_1A216
0001D35A 317C 001E 0030             		move.w	#$1E,$30(a0)
0001D360 4EB9 0000 0000             		jsr	(BossModeMusic).l ;	play boss damage sound
0001D366                            
0001D366                            loc_1A1FC:
0001D366 5368 0030                  		subq.w	#1,$30(a0)
0001D36A 6600                       		bne.s	loc_1A216
0001D36C 4A28 0022                  		tst.b	obStatus(a0)
0001D370 6A00                       		bpl.s	loc_1A210
0001D372 317C 0060 0012             		move.w	#$60,obVelY(a0)
0001D378 6000                       		bra.s	loc_1A216
0001D37A                            ; ===========================================================================
0001D37A                            
0001D37A                            loc_1A210:
0001D37A 117C 000F 0020             		move.b	#$F,obColType(a0)
0001D380                            
0001D380                            loc_1A216:
0001D380 0C78 2790 D008             		cmpi.w	#$2790,(v_player+obX).w
0001D386 6D00                       		blt.s	loc_1A23A
0001D388 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w
0001D38E 31FC 0000 F602             		move.w	#0,(v_jpadhold2).w
0001D394 4278 D020                  		clr.w	(v_player+obInertia).w
0001D398 4A68 0012                  		tst.w	obVelY(a0)
0001D39C 6A00                       		bpl.s	loc_1A248
0001D39E 31FC 0100 F602             		move.w	#$100,(v_jpadhold2).w
0001D3A4                            
0001D3A4                            loc_1A23A:
0001D3A4 0C78 27E0 D008             		cmpi.w	#$27E0,(v_player+obX).w
0001D3AA 6D00                       		blt.s	loc_1A248
0001D3AC 31FC 27E0 D008             		move.w	#$27E0,(v_player+obX).w
0001D3B2                            
0001D3B2                            loc_1A248:
0001D3B2 0C68 2900 0008             		cmpi.w	#$2900,obX(a0)
0001D3B8 6500                       		bcs.s	loc_1A260
0001D3BA 4A28 0001                  		tst.b	obRender(a0)
0001D3BE 6B00                       		bmi.s	loc_1A260
0001D3C0 11FC 0018 F600             		move.b	#$18,(v_gamemode).w
0001D3C6 6000 FAF0                  		bra.w	Obj85_Delete
0001D3CA                            ; ===========================================================================
0001D3CA                            
0001D3CA                            loc_1A260:
0001D3CA 6000 FEFE                  		bra.w	loc_1A15C
0001D3CE                            ; ===========================================================================
0001D3CE                            
0001D3CE                            loc_1A264:	; Routine 4
0001D3CE 2268 0034                  		movea.l	$34(a0),a1
0001D3D2 1011                       		move.b	(a1),d0
0001D3D4 B010                       		cmp.b	(a0),d0
0001D3D6 6600 FAE0                  		bne.w	Obj85_Delete
0001D3DA 117C 0007 001C             		move.b	#7,obAnim(a0)
0001D3E0 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001D3E6 6C00                       		bge.s	loc_1A280
0001D3E8 6000                       		bra.s	loc_1A2A6
0001D3EA                            ; ===========================================================================
0001D3EA                            
0001D3EA                            loc_1A280:
0001D3EA 4A69 0010                  		tst.w	obVelX(a1)
0001D3EE 6700                       		beq.s	loc_1A28C
0001D3F0 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001D3F6                            
0001D3F6                            loc_1A28C:
0001D3F6 43FA D9D6                  		lea	Ani_Eggman(pc),a1
0001D3FA 4EB9 0000 CA24             		jsr	(AnimateSprite).l
0001D400                            
0001D400                            loc_1A296:
0001D400 2268 0034                  		movea.l	$34(a0),a1
0001D404 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001D40A 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001D410                            
0001D410                            loc_1A2A6:
0001D410 2268 0034                  		movea.l	$34(a0),a1
0001D414 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001D41A 7003                       		moveq	#3,d0
0001D41C C028 0022                  		and.b	obStatus(a0),d0
0001D420 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001D426 8128 0001                  		or.b	d0,obRender(a0)
0001D42A 4EF9 0000 F978             		jmp	(DisplaySprite).l
0001D430                            ; ===========================================================================
0001D430                            
0001D430                            loc_1A2C6:	; Routine 6
0001D430 2268 0034                  		movea.l	$34(a0),a1
0001D434 1011                       		move.b	(a1),d0
0001D436 B010                       		cmp.b	(a0),d0
0001D438 6600 FA7E                  		bne.w	Obj85_Delete
0001D43C 0CA9 0001 AE1E 0004        		cmpi.l	#Map_Eggman,obMap(a1)
0001D444 6700                       		beq.s	loc_1A2E4
0001D446 117C 000A 001A             		move.b	#$A,obFrame(a0)
0001D44C 60C2                       		bra.s	loc_1A2A6
0001D44E                            ; ===========================================================================
0001D44E                            
0001D44E                            loc_1A2E4:
0001D44E 117C 0001 001C             		move.b	#1,obAnim(a0)
0001D454 4A29 0021                  		tst.b	obColProp(a1)
0001D458 6F00                       		ble.s	loc_1A312
0001D45A 117C 0006 001C             		move.b	#6,obAnim(a0)
0001D460 217C 0001 AE1E 0004        		move.l	#Map_Eggman,obMap(a0)
0001D468 317C 0400 0002             		move.w	#$400,obGfx(a0)
0001D46E 43FA D95E                  		lea	Ani_Eggman(pc),a1
0001D472 4EB9 0000 CA24             		jsr	(AnimateSprite).l
0001D478 6000 FF86                  		bra.w	loc_1A296
0001D47C                            ; ===========================================================================
0001D47C                            
0001D47C                            loc_1A312:
0001D47C 4A28 0001                  		tst.b	1(a0)
0001D480 6A00 FA36                  		bpl.w	Obj85_Delete
0001D484 6100 D4F2                  		bsr.w	BossDefeated
0001D488 317C 0100 0018             		move.w	#$100,obPriority(a0)
0001D48E 117C 0000 001C             		move.b	#0,obAnim(a0)
0001D494 217C 0000 0000 0004        		move.l	#Map_FZDamaged,obMap(a0)
0001D49C 317C 03A0 0002             		move.w	#$3A0,obGfx(a0)
0001D4A2 43FA 0000                  		lea	Ani_FZEgg(pc),a1
0001D4A6 4EB9 0000 CA24             		jsr	(AnimateSprite).l
0001D4AC 6000 FF52                  		bra.w	loc_1A296
0001D4B0                            ; ===========================================================================
0001D4B0                            
0001D4B0                            loc_1A346:	; Routine 8
0001D4B0 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D4B6 2268 0034                  		movea.l	$34(a0),a1
0001D4BA 0CA9 0001 AE1E 0004        		cmpi.l	#Map_Eggman,obMap(a1)
0001D4C2 6700                       		beq.s	loc_1A35E
0001D4C4 6000 FF4A                  		bra.w	loc_1A2A6
0001D4C8                            ; ===========================================================================
0001D4C8                            
0001D4C8                            loc_1A35E:
0001D4C8 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001D4CE 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001D4D4 4A28 001E                  		tst.b	obTimeFrame(a0)
0001D4D8 6600                       		bne.s	loc_1A376
0001D4DA 117C 0014 001E             		move.b	#$14,obTimeFrame(a0)
0001D4E0                            
0001D4E0                            loc_1A376:
0001D4E0 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0001D4E4 6E00                       		bgt.s	loc_1A38A
0001D4E6 5228 001A                  		addq.b	#1,obFrame(a0)
0001D4EA 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0001D4F0 6E00 F9C6                  		bgt.w	Obj85_Delete
0001D4F4                            
0001D4F4                            loc_1A38A:
0001D4F4 6000 FF0A                  		bra.w	loc_1A296
0001D4F8                            ; ===========================================================================
0001D4F8                            
0001D4F8                            loc_1A38E:	; Routine $A
0001D4F8 117C 000B 001A             		move.b	#$B,obFrame(a0)
0001D4FE 3038 D008                  		move.w	(v_player+obX).w,d0
0001D502 9068 0008                  		sub.w	obX(a0),d0
0001D506 6500                       		bcs.s	loc_1A3A6
0001D508 4A28 0001                  		tst.b	obRender(a0)
0001D50C 6A00 F9AA                  		bpl.w	Obj85_Delete
0001D510                            
0001D510                            loc_1A3A6:
0001D510 4EF9 0000 F978             		jmp	(DisplaySprite).l
0001D516                            ; ===========================================================================
0001D516                            
0001D516                            loc_1A3AC:	; Routine $C
0001D516 117C 0000 001A             		move.b	#0,obFrame(a0)
0001D51C 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D522 2268 0034                  		movea.l	$34(a0),a1
0001D526 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001D52C 6600                       		bne.s	loc_1A3D0
0001D52E 0CA9 0001 AE1E 0004        		cmpi.l	#Map_Eggman,obMap(a1)
0001D536 6700 F980                  		beq.w	Obj85_Delete
0001D53A                            
0001D53A                            loc_1A3D0:
0001D53A 6000 FED4                  		bra.w	loc_1A2A6
0001D53E                            		
0001D53E                            BossModeMusic:
0001D53E 0C28 0001 0021             		cmpi.b	#1,obColProp(a0)
0001D544 6600 0000                  		bne.w	NormalMode
0001D548 4EF9 0000 0000             		jmp	PinchMode
0001D54E                            
0001D54E                            NormalMode:
0001D54E 303C 00AC                  		move.w	#$AC,d0
0001D552 4EB9 0000 1250             		jsr	(PlaySound_Special).l
0001D558 4E75                       		rts
0001D55A                            
0001D55A                            PinchMode:
0001D55A 303C 0094                  		move.w	#$94,d0
0001D55E 4EB9 0000 1250             		jsr	(PlaySound_Special).l
0001D564 303C 00E2                  		move.w	#$E2,d0
0001D568 4EB9 0000 124A             		jsr	(PlaySound).l
0001D56E 4E75                       		rts		
0001D56E 4E75                       		rts		
0001D570                            		include	"_anim\FZ Eggman in Ship.asm"
0001D570                            ; ---------------------------------------------------------------------------
0001D570                            ; Animation script - Eggman (FZ)
0001D570                            ; ---------------------------------------------------------------------------
0001D570 0000                       Ani_FZEgg:	dc.w byte_1A3D6-Ani_FZEgg
0001D572 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, afEnd
0001D576                            		even
0001D576                            		even
0001D576                            Map_FZDamaged:	include	"_maps\FZ Damaged Eggmobile.asm"
0001D576                            ; ---------------------------------------------------------------------------
0001D576                            ; Sprite mappings - Eggman in broken eggmobile (FZ)
0001D576                            ; ---------------------------------------------------------------------------
0001D576                            Map_FZDamaged_internal:
0001D576 0000                       		dc.w @damage1-Map_FZDamaged_internal
0001D578 0000                       		dc.w @damage2-Map_FZDamaged_internal
0001D57A 06                         @damage1:	dc.b 6
0001D57B E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001D580 EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001D585 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001D58A FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001D58F FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001D594 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001D599 06                         @damage2:	dc.b 6
0001D59A E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001D59F EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001D5A4 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001D5A9 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001D5AE FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001D5B3 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001D5B8                            		even
0001D5B8                            		even
0001D5B8                            Map_FZLegs:	include	"_maps\FZ Eggmobile Legs.asm"
0001D5B8                            ; ---------------------------------------------------------------------------
0001D5B8                            ; Sprite mappings - legs on Eggman's escape ship (FZ)
0001D5B8                            ; ---------------------------------------------------------------------------
0001D5B8                            Map_FZLegs_internal:
0001D5B8 0000                       		dc.w @extended-Map_FZLegs_internal
0001D5BA 0000                       		dc.w @halfway-Map_FZLegs_internal
0001D5BC 0000                       		dc.w @retracted-Map_FZLegs_internal
0001D5BE 02                         @extended:	dc.b 2
0001D5BF 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001D5C4 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001D5C9 03                         @halfway:	dc.b 3
0001D5CA 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001D5CF 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001D5D4 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001D5D9 02                         @retracted:	dc.b 2
0001D5DA 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001D5DF 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001D5E4                            		even
0001D5E4                            		even
0001D5E4                            		include	"_incObj\84 FZ Eggman's Cylinders.asm"
0001D5E4                            ; ---------------------------------------------------------------------------
0001D5E4                            ; Object 84 - cylinder Eggman hides in (FZ)
0001D5E4                            ; ---------------------------------------------------------------------------
0001D5E4                            
0001D5E4                            Obj84_Delete:
0001D5E4 4EF9 0000 F9B8             		jmp	(DeleteObject).l
0001D5EA                            ; ===========================================================================
0001D5EA                            
0001D5EA                            EggmanCylinder:
0001D5EA 7000                       		moveq	#0,d0
0001D5EC 1028 0024                  		move.b	obRoutine(a0),d0
0001D5F0 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001D5F4 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001D5F8                            ; ===========================================================================
0001D5F8 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001D5FA 0000                       		dc.w loc_1A4CE-Obj84_Index
0001D5FC 0000                       		dc.w loc_1A57E-Obj84_Index
0001D5FE                            
0001D5FE 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001D602 2550 0620                  		dc.w $2550, $620
0001D606 2490 04C0                  		dc.w $2490, $4C0
0001D60A 2510 04C0                  		dc.w $2510, $4C0
0001D60E                            ; ===========================================================================
0001D60E                            
0001D60E                            Obj84_Main:	; Routine
0001D60E 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001D612 7000                       		moveq	#0,d0
0001D614 1028 0028                  		move.b	obSubtype(a0),d0
0001D618 D040                       		add.w	d0,d0
0001D61A D2C0                       		adda.w	d0,a1
0001D61C 117C 0004 0001             		move.b	#4,obRender(a0)
0001D622 08E8 0007 0001             		bset	#7,obRender(a0)
0001D628 08E8 0004 0001             		bset	#4,obRender(a0)
0001D62E 317C 0300 0002             		move.w	#$300,obGfx(a0)
0001D634 217C 0000 0000 0004        		move.l	#Map_EggCyl,obMap(a0)
0001D63C 3159 0008                  		move.w	(a1)+,obX(a0)
0001D640 3151 000C                  		move.w	(a1),obY(a0)
0001D644 3159 0038                  		move.w	(a1)+,$38(a0)
0001D648 117C 0020 0016             		move.b	#$20,obHeight(a0)
0001D64E 117C 0060 0017             		move.b	#$60,obWidth(a0)
0001D654 117C 0020 0014             		move.b	#$20,obActWid(a0)
0001D65A 117C 0060 0016             		move.b	#$60,obHeight(a0)
0001D660 317C 0180 0018             		move.w	#$180,obPriority(a0)
0001D666 5428 0024                  		addq.b	#2,obRoutine(a0)
0001D66A                            
0001D66A                            loc_1A4CE:	; Routine 2
0001D66A 0C28 0002 0028             		cmpi.b	#2,obSubtype(a0)
0001D670 6F00                       		ble.s	loc_1A4DC
0001D672 08E8 0001 0001             		bset	#1,obRender(a0)
0001D678                            
0001D678                            loc_1A4DC:
0001D678 42A8 003C                  		clr.l	$3C(a0)
0001D67C 4A28 0029                  		tst.b	$29(a0)
0001D680 6700                       		beq.s	loc_1A4EA
0001D682 5428 0024                  		addq.b	#2,obRoutine(a0)
0001D686                            
0001D686                            loc_1A4EA:
0001D686 2028 003C                  		move.l	$3C(a0),d0
0001D68A 2228 0038                  		move.l	$38(a0),d1
0001D68E D280                       		add.l	d0,d1
0001D690 4841                       		swap	d1
0001D692 3141 000C                  		move.w	d1,obY(a0)
0001D696 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0)
0001D69C 6600                       		bne.s	loc_1A524
0001D69E 4A68 0030                  		tst.w	$30(a0)
0001D6A2 6A00                       		bpl.s	loc_1A524
0001D6A4 70F6                       		moveq	#-$A,d0
0001D6A6 0C28 0002 0028             		cmpi.b	#2,obSubtype(a0)
0001D6AC 6F00                       		ble.s	loc_1A514
0001D6AE 700E                       		moveq	#$E,d0
0001D6B0                            
0001D6B0                            loc_1A514:
0001D6B0 D240                       		add.w	d0,d1
0001D6B2 2268 0034                  		movea.l	$34(a0),a1
0001D6B6 3341 000C                  		move.w	d1,obY(a1)
0001D6BA 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001D6C0                            
0001D6C0                            loc_1A524:
0001D6C0 323C 002B                  		move.w	#$2B,d1
0001D6C4 343C 0060                  		move.w	#$60,d2
0001D6C8 363C 0061                  		move.w	#$61,d3
0001D6CC 3828 0008                  		move.w	obX(a0),d4
0001D6D0 4EB9 0001 1D86             		jsr	(SolidObject).l
0001D6D6 7000                       		moveq	#0,d0
0001D6D8 3228 003C                  		move.w	$3C(a0),d1
0001D6DC 6A00                       		bpl.s	loc_1A550
0001D6DE 4441                       		neg.w	d1
0001D6E0 5141                       		subq.w	#8,d1
0001D6E2 6500                       		bcs.s	loc_1A55C
0001D6E4 5200                       		addq.b	#1,d0
0001D6E6 E841                       		asr.w	#4,d1
0001D6E8 D041                       		add.w	d1,d0
0001D6EA 6000                       		bra.s	loc_1A55C
0001D6EC                            ; ===========================================================================
0001D6EC                            
0001D6EC                            loc_1A550:
0001D6EC 0441 0027                  		subi.w	#$27,d1
0001D6F0 6500                       		bcs.s	loc_1A55C
0001D6F2 5200                       		addq.b	#1,d0
0001D6F4 E841                       		asr.w	#4,d1
0001D6F6 D041                       		add.w	d1,d0
0001D6F8                            
0001D6F8                            loc_1A55C:
0001D6F8 1140 001A                  		move.b	d0,obFrame(a0)
0001D6FC 3038 D008                  		move.w	(v_player+obX).w,d0
0001D700 9068 0008                  		sub.w	obX(a0),d0
0001D704 6B00                       		bmi.s	loc_1A578
0001D706 0440 0140                  		subi.w	#$140,d0
0001D70A 6B00                       		bmi.s	loc_1A578
0001D70C 4A28 0001                  		tst.b	obRender(a0)
0001D710 6A00 FED2                  		bpl.w	Obj84_Delete
0001D714                            
0001D714                            loc_1A578:
0001D714 4EF9 0000 F978             		jmp	(DisplaySprite).l
0001D71A                            ; ===========================================================================
0001D71A                            
0001D71A                            loc_1A57E:	; Routine 4
0001D71A 7000                       		moveq	#0,d0
0001D71C 1028 0028                  		move.b	obSubtype(a0),d0
0001D720 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001D724 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001D728 6000 FF5C                  		bra.w	loc_1A4EA
0001D72C                            ; ===========================================================================
0001D72C 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001D72E 0000                       		dc.w loc_1A598-off_1A590
0001D730 0000                       		dc.w loc_1A604-off_1A590
0001D732 0000                       		dc.w loc_1A604-off_1A590
0001D734                            ; ===========================================================================
0001D734                            
0001D734                            loc_1A598:
0001D734 4A28 0029                  		tst.b	$29(a0)
0001D738 6600                       		bne.s	loc_1A5D4
0001D73A 2268 0034                  		movea.l	$34(a0),a1
0001D73E 4A29 0021                  		tst.b	obColProp(a1)
0001D742 6600                       		bne.s	loc_1A5B4
0001D744 6100 D232                  		bsr.w	BossDefeated
0001D748 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001D750                            
0001D750                            loc_1A5B4:
0001D750 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001D758 6400                       		bcc.s	locret_1A602
0001D75A 42A8 003C                  		clr.l	$3C(a0)
0001D75E 2268 0034                  		movea.l	$34(a0),a1
0001D762 5369 0032                  		subq.w	#1,$32(a1)
0001D766 4269 0030                  		clr.w	$30(a1)
0001D76A 5528 0024                  		subq.b	#2,obRoutine(a0)
0001D76E 4E75                       		rts	
0001D770                            ; ===========================================================================
0001D770                            
0001D770                            loc_1A5D4:
0001D770 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001D776 6C00                       		bge.s	loc_1A5E4
0001D778 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001D780                            
0001D780                            loc_1A5E4:
0001D780 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001D788 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001D78E 6E00                       		bgt.s	locret_1A602
0001D790 4268 003E                  		clr.w	$3E(a0)
0001D794 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001D79A 4228 0029                  		clr.b	$29(a0)
0001D79E                            
0001D79E                            locret_1A602:
0001D79E 4E75                       		rts	
0001D7A0                            ; ===========================================================================
0001D7A0                            
0001D7A0                            loc_1A604:
0001D7A0 08E8 0001 0001             		bset	#1,obRender(a0)
0001D7A6 4A28 0029                  		tst.b	$29(a0)
0001D7AA 6600                       		bne.s	loc_1A646
0001D7AC 2268 0034                  		movea.l	$34(a0),a1
0001D7B0 4A29 0021                  		tst.b	obColProp(a1)
0001D7B4 6600                       		bne.s	loc_1A626
0001D7B6 6100 D1C0                  		bsr.w	BossDefeated
0001D7BA 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001D7C2                            
0001D7C2                            loc_1A626:
0001D7C2 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001D7CA 6400                       		bcc.s	locret_1A674
0001D7CC 42A8 003C                  		clr.l	$3C(a0)
0001D7D0 2268 0034                  		movea.l	$34(a0),a1
0001D7D4 5369 0032                  		subq.w	#1,$32(a1)
0001D7D8 4269 0030                  		clr.w	$30(a1)
0001D7DC 5528 0024                  		subq.b	#2,obRoutine(a0)
0001D7E0 4E75                       		rts	
0001D7E2                            ; ===========================================================================
0001D7E2                            
0001D7E2                            loc_1A646:
0001D7E2 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001D7E8 6D00                       		blt.s	loc_1A656
0001D7EA 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001D7F2                            
0001D7F2                            loc_1A656:
0001D7F2 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001D7FA 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001D800 6D00                       		blt.s	locret_1A674
0001D802 4268 003E                  		clr.w	$3E(a0)
0001D806 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001D80C 4228 0029                  		clr.b	$29(a0)
0001D810                            
0001D810                            locret_1A674:
0001D810 4E75                       		rts	
0001D810 4E75                       		rts	
0001D812                            Map_EggCyl:	include	"_maps\FZ Eggman's Cylinders.asm"
0001D812                            ; --------------------------------------------------------------------------------
0001D812                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001D812                            ; --------------------------------------------------------------------------------
0001D812                            
0001D812                            SME_SCUpI:	
0001D812 0000 0000                  		dc.w SME_SCUpI_18-SME_SCUpI, SME_SCUpI_37-SME_SCUpI	
0001D816 0000 0000                  		dc.w SME_SCUpI_60-SME_SCUpI, SME_SCUpI_93-SME_SCUpI	
0001D81A 0000 0000                  		dc.w SME_SCUpI_D0-SME_SCUpI, SME_SCUpI_112-SME_SCUpI	
0001D81E 0000 0000                  		dc.w SME_SCUpI_159-SME_SCUpI, SME_SCUpI_1A0-SME_SCUpI	
0001D822 0000 0000                  		dc.w SME_SCUpI_1E7-SME_SCUpI, SME_SCUpI_22E-SME_SCUpI	
0001D826 0000 0000                  		dc.w SME_SCUpI_275-SME_SCUpI, SME_SCUpI_2BC-SME_SCUpI	
0001D82A 06                         SME_SCUpI_18:	dc.b 6	
0001D82B A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D830 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D835 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D83A B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D83F B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D844 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D849 08                         SME_SCUpI_37:	dc.b 8	
0001D84A A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D84F B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D854 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D859 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D85E B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D863 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D868 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D86D A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D872 0A                         SME_SCUpI_60:	dc.b $A	
0001D873 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D878 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D87D B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D882 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D887 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D88C D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D891 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D896 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D89B F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D8A0 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D8A5 0C                         SME_SCUpI_93:	dc.b $C	
0001D8A6 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D8AB B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D8B0 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D8B5 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D8BA B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D8BF D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D8C4 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D8C9 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D8CE F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D8D3 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D8D8 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D8DD A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D8E2 0D                         SME_SCUpI_D0:	dc.b $D	
0001D8E3 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D8E8 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D8ED B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D8F2 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D8F7 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D8FC D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D901 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D906 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D90B F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D910 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D915 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D91A 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D91F A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D924 0E                         SME_SCUpI_112:	dc.b $E	
0001D925 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D92A B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D92F B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D934 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D939 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D93E D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D943 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D948 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D94D F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D952 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D957 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D95C 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D961 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001D966 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D96B 0E                         SME_SCUpI_159:	dc.b $E	
0001D96C A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D971 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D976 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D97B B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D980 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D985 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D98A D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D98F F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D994 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D999 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D99E 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D9A3 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D9A8 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001D9AD A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D9B2 0E                         SME_SCUpI_1A0:	dc.b $E	
0001D9B3 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D9B8 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D9BD B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D9C2 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D9C7 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D9CC D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D9D1 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D9D6 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D9DB F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D9E0 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D9E5 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D9EA 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D9EF 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001D9F4 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D9F9 0E                         SME_SCUpI_1E7:	dc.b $E	
0001D9FA A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D9FF B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001DA04 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001DA09 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001DA0E B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001DA13 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001DA18 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001DA1D F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001DA22 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001DA27 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001DA2C 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001DA31 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001DA36 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001DA3B A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001DA40 0E                         SME_SCUpI_22E:	dc.b $E	
0001DA41 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001DA46 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001DA4B B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001DA50 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001DA55 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001DA5A D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001DA5F D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001DA64 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001DA69 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001DA6E 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001DA73 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001DA78 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001DA7D 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001DA82 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001DA87 0E                         SME_SCUpI_275:	dc.b $E	
0001DA88 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001DA8D B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001DA92 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001DA97 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001DA9C B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001DAA1 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001DAA6 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001DAAB F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001DAB0 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001DAB5 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001DABA 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001DABF 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001DAC4 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001DAC9 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001DACE 02                         SME_SCUpI_2BC:	dc.b 2	
0001DACF F804 0068 F0               		dc.b $F8, 4, 0, $68, $F0	
0001DAD4 000C 006A F0               		dc.b 0, $C, 0, $6A, $F0	
0001DADA 00                         		even
0001DADA 00                         		even
0001DADA                            		include	"_incObj\86 FZ Plasma Ball Launcher.asm"
0001DADA                            ; ---------------------------------------------------------------------------
0001DADA                            ; Object 86 - energy balls (FZ)
0001DADA                            ; ---------------------------------------------------------------------------
0001DADA                            
0001DADA                            BossPlasma:
0001DADA 7000                       		moveq	#0,d0
0001DADC 1028 0024                  		move.b	obRoutine(a0),d0
0001DAE0 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001DAE4 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001DAE8                            ; ===========================================================================
0001DAE8 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001DAEA 0000                       		dc.w Obj86_Generator-Obj86_Index
0001DAEC 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001DAEE 0000                       		dc.w loc_1A962-Obj86_Index
0001DAF0 0000                       		dc.w loc_1A982-Obj86_Index
0001DAF2                            ; ===========================================================================
0001DAF2                            
0001DAF2                            Obj86_Main:	; Routine 0
0001DAF2 317C 2588 0008             		move.w	#$2588,obX(a0)
0001DAF8 317C 053C 000C             		move.w	#$53C,obY(a0)
0001DAFE 317C 0300 0002             		move.w	#$300,obGfx(a0)
0001DB04 217C 0000 0000 0004        		move.l	#Map_PLaunch,obMap(a0)
0001DB0C 117C 0000 001C             		move.b	#0,obAnim(a0)
0001DB12 317C 0180 0018             		move.w	#$180,obPriority(a0)
0001DB18 117C 0008 0017             		move.b	#8,obWidth(a0)
0001DB1E 117C 0008 0016             		move.b	#8,obHeight(a0)
0001DB24 117C 0004 0001             		move.b	#4,obRender(a0)
0001DB2A 08E8 0007 0001             		bset	#7,obRender(a0)
0001DB30 5428 0024                  		addq.b	#2,obRoutine(a0)
0001DB34                            
0001DB34                            Obj86_Generator:; Routine 2
0001DB34 2268 0034                  		movea.l	$34(a0),a1
0001DB38 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001DB3E 6600                       		bne.s	loc_1A850
0001DB40 10BC 003F                  		move.b	#id_ExplosionBomb,(a0)
0001DB44 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001DB4A 4EF9 0000 F978             		jmp	(DisplaySprite).l
0001DB50                            ; ===========================================================================
0001DB50                            
0001DB50                            loc_1A850:
0001DB50 117C 0000 001C             		move.b	#0,obAnim(a0)
0001DB56 4A28 0029                  		tst.b	$29(a0)
0001DB5A 6700                       		beq.s	loc_1A86C
0001DB5C 5428 0024                  		addq.b	#2,obRoutine(a0)
0001DB60 117C 0001 001C             		move.b	#1,obAnim(a0)
0001DB66 117C 003E 0028             		move.b	#$3E,obSubtype(a0)
0001DB6C                            
0001DB6C                            loc_1A86C:
0001DB6C 323C 0013                  		move.w	#$13,d1
0001DB70 343C 0008                  		move.w	#8,d2
0001DB74 363C 0011                  		move.w	#$11,d3
0001DB78 3828 0008                  		move.w	obX(a0),d4
0001DB7C 4EB9 0001 1D86             		jsr	(SolidObject).l
0001DB82 3038 D008                  		move.w	(v_player+obX).w,d0
0001DB86 9068 0008                  		sub.w	obX(a0),d0
0001DB8A 6B00                       		bmi.s	loc_1A89A
0001DB8C 0440 0140                  		subi.w	#$140,d0
0001DB90 6B00                       		bmi.s	loc_1A89A
0001DB92 4A28 0001                  		tst.b	obRender(a0)
0001DB96 6A00 FA4C                  		bpl.w	Obj84_Delete
0001DB9A                            
0001DB9A                            loc_1A89A:
0001DB9A 43FA 0000                  		lea	Ani_PLaunch(pc),a1
0001DB9E 4EB9 0000 CA24             		jsr	(AnimateSprite).l
0001DBA4 4EF9 0000 F978             		jmp	(DisplaySprite).l
0001DBAA                            ; ===========================================================================
0001DBAA                            
0001DBAA                            Obj86_MakeBalls:; Routine 4
0001DBAA 4A28 0029                  		tst.b	$29(a0)
0001DBAE 6700 0000                  		beq.w	loc_1A954
0001DBB2 4228 0029                  		clr.b	$29(a0)
0001DBB6 D068 0030                  		add.w	$30(a0),d0
0001DBBA 0240 001E                  		andi.w	#$1E,d0
0001DBBE D4C0                       		adda.w	d0,a2
0001DBC0 5868 0030                  		addq.w	#4,$30(a0)
0001DBC4 4268 0032                  		clr.w	$32(a0)
0001DBC8 7403                       		moveq	#3,d2
0001DBCA                            
0001DBCA                            Obj86_Loop:
0001DBCA 4EB9 0000 FE1A             		jsr	(FindNextFreeObj).l
0001DBD0 6600 0000                  		bne.w	loc_1A954
0001DBD4 12BC 0086                  		move.b	#id_BossPlasma,(a1)
0001DBD8 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001DBDE 337C 053C 000C             		move.w	#$53C,obY(a1)
0001DBE4 137C 0008 0024             		move.b	#8,obRoutine(a1)
0001DBEA 337C 2300 0002             		move.w	#$2300,obGfx(a1)
0001DBF0 237C 0000 0000 0004        		move.l	#Map_Plasma,obMap(a1)
0001DBF8 137C 000C 0016             		move.b	#$C,obHeight(a1)
0001DBFE 137C 000C 0017             		move.b	#$C,obWidth(a1)
0001DC04 137C 0000 0020             		move.b	#0,obColType(a1)
0001DC0A 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001DC10 337C 003E 0028             		move.w	#$3E,obSubtype(a1)
0001DC16 137C 0004 0001             		move.b	#4,obRender(a1)
0001DC1C 08E9 0007 0001             		bset	#7,obRender(a1)
0001DC22 2348 0034                  		move.l	a0,$34(a1)
0001DC26 4EB9 0000 3A0C             		jsr	(RandomNumber).l
0001DC2C 3228 0032                  		move.w	$32(a0),d1
0001DC30 C3FC FFB1                  		muls.w	#-$4F,d1
0001DC34 0641 2578                  		addi.w	#$2578,d1
0001DC38 0240 001F                  		andi.w	#$1F,d0
0001DC3C 0440 0010                  		subi.w	#$10,d0
0001DC40 D041                       		add.w	d1,d0
0001DC42 3340 0030                  		move.w	d0,$30(a1)
0001DC46 5268 0032                  		addq.w	#1,$32(a0)
0001DC4A 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001DC50 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001DC54                            
0001DC54                            loc_1A954:
0001DC54 4A68 0032                  		tst.w	$32(a0)
0001DC58 6600                       		bne.s	loc_1A95E
0001DC5A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001DC5E                            
0001DC5E                            loc_1A95E:
0001DC5E 6000 FF0C                  		bra.w	loc_1A86C
0001DC62                            ; ===========================================================================
0001DC62                            
0001DC62                            loc_1A962:	; Routine 6
0001DC62 117C 0002 001C             		move.b	#2,obAnim(a0)
0001DC68 4A68 0038                  		tst.w	$38(a0)
0001DC6C 6600                       		bne.s	loc_1A97E
0001DC6E 117C 0002 0024             		move.b	#2,obRoutine(a0)
0001DC74 2268 0034                  		movea.l	$34(a0),a1
0001DC78 337C FFFF 0032             		move.w	#-1,$32(a1)
0001DC7E                            
0001DC7E                            loc_1A97E:
0001DC7E 6000 FEEC                  		bra.w	loc_1A86C
0001DC82                            ; ===========================================================================
0001DC82                            
0001DC82                            loc_1A982:	; Routine 8
0001DC82 7000                       		moveq	#0,d0
0001DC84 1028 0025                  		move.b	ob2ndRout(a0),d0
0001DC88 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001DC8C 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001DC90 43FA 0000                  		lea	Ani_Plasma(pc),a1
0001DC94 4EB9 0000 CA24             		jsr	(AnimateSprite).l
0001DC9A 4EF9 0000 F978             		jmp	(DisplaySprite).l
0001DCA0                            ; ===========================================================================
0001DCA0 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001DCA2 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001DCA4 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001DCA6                            ; ===========================================================================
0001DCA6                            
0001DCA6                            loc_1A9A6:
0001DCA6 3028 0030                  		move.w	$30(a0),d0
0001DCAA 9068 0008                  		sub.w	obX(a0),d0
0001DCAE E940                       		asl.w	#4,d0
0001DCB0 3140 0010                  		move.w	d0,obVelX(a0)
0001DCB4 317C 00B4 0028             		move.w	#$B4,obSubtype(a0)
0001DCBA 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001DCBE 4E75                       		rts	
0001DCC0                            ; ===========================================================================
0001DCC0                            
0001DCC0                            loc_1A9C0:
0001DCC0 4A68 0010                  		tst.w	obVelX(a0)
0001DCC4 6700                       		beq.s	loc_1A9E6
0001DCC6 4EB9 0000 F964             		jsr	(SpeedToPos).l
0001DCCC 3028 0008                  		move.w	obX(a0),d0
0001DCD0 9068 0030                  		sub.w	$30(a0),d0
0001DCD4 6400                       		bcc.s	loc_1A9E6
0001DCD6 4268 0010                  		clr.w	obVelX(a0)
0001DCDA D168 0008                  		add.w	d0,obX(a0)
0001DCDE 2268 0034                  		movea.l	$34(a0),a1
0001DCE2 5369 0032                  		subq.w	#1,$32(a1)
0001DCE6                            
0001DCE6                            loc_1A9E6:
0001DCE6 117C 0000 001C             		move.b	#0,obAnim(a0)
0001DCEC 5368 0028                  		subq.w	#1,obSubtype(a0)
0001DCF0 6600                       		bne.s	locret_1AA1C
0001DCF2 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001DCF6 117C 0001 001C             		move.b	#1,obAnim(a0)
0001DCFC 117C 009A 0020             		move.b	#$9A,obColType(a0)
0001DD02 317C 00B4 0028             		move.w	#$B4,obSubtype(a0)
0001DD08 7000                       		moveq	#0,d0
0001DD0A 3038 D008                  		move.w	(v_player+obX).w,d0
0001DD0E 9068 0008                  		sub.w	obX(a0),d0
0001DD12 3140 0010                  		move.w	d0,obVelX(a0)
0001DD16 317C 0140 0012             		move.w	#$140,obVelY(a0)
0001DD1C                            
0001DD1C                            locret_1AA1C:
0001DD1C 4E75                       		rts	
0001DD1E                            ; ===========================================================================
0001DD1E                            
0001DD1E                            loc_1AA1E:
0001DD1E 4EB9 0000 F964             		jsr	(SpeedToPos).l
0001DD24 0C68 05E0 000C             		cmpi.w	#$5E0,obY(a0)
0001DD2A 6400                       		bcc.s	loc_1AA34
0001DD2C 5368 0028                  		subq.w	#1,obSubtype(a0)
0001DD30 6700                       		beq.s	loc_1AA34
0001DD32 4E75                       		rts	
0001DD34                            ; ===========================================================================
0001DD34                            
0001DD34                            loc_1AA34:
0001DD34 2268 0034                  		movea.l	$34(a0),a1
0001DD38 5369 0038                  		subq.w	#1,$38(a1)
0001DD3C 6000 F8A6                  		bra.w	Obj84_Delete
0001DD3C 6000 F8A6                  		bra.w	Obj84_Delete
0001DD40                            		include	"_anim\Plasma Ball Launcher.asm"
0001DD40                            ; ---------------------------------------------------------------------------
0001DD40                            ; Animation script - energy ball launcher (FZ)
0001DD40                            ; ---------------------------------------------------------------------------
0001DD40 0000                       Ani_PLaunch:	dc.w @red-Ani_PLaunch
0001DD42 0000                       		dc.w @redsparking-Ani_PLaunch
0001DD44 0000                       		dc.w @whitesparking-Ani_PLaunch
0001DD46 7E00 FF                    @red:		dc.b $7E, 0, afEnd
0001DD4A 00                         		even
0001DD4A 0100 0200 03FF             @redsparking:	dc.b 1,	0, 2, 0, 3, afEnd
0001DD50                            		even
0001DD50 0101 0201 03FF             @whitesparking:	dc.b 1,	1, 2, 1, 3, afEnd
0001DD56                            		even
0001DD56                            		even
0001DD56                            Map_PLaunch:	include	"_maps\Plasma Ball Launcher.asm"
0001DD56                            ; ---------------------------------------------------------------------------
0001DD56                            ; Sprite mappings - energy ball	launcher (FZ)
0001DD56                            ; ---------------------------------------------------------------------------
0001DD56                            Map_PLaunch_internal:
0001DD56 0000                       		dc.w @red-Map_PLaunch_internal
0001DD58 0000                       		dc.w @white-Map_PLaunch_internal
0001DD5A 0000                       		dc.w @sparking1-Map_PLaunch_internal
0001DD5C 0000                       		dc.w @sparking2-Map_PLaunch_internal
0001DD5E 01                         @red:		dc.b 1
0001DD5F F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001DD64 01                         @white:		dc.b 1
0001DD65 F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001DD6A 01                         @sparking1:	dc.b 1
0001DD6B F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001DD70 01                         @sparking2:	dc.b 1
0001DD71 F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001DD76                            		even
0001DD76                            		even
0001DD76                            		include	"_anim\Plasma Balls.asm"
0001DD76                            ; ---------------------------------------------------------------------------
0001DD76                            ; Animation script - energy balls (FZ)
0001DD76                            ; ---------------------------------------------------------------------------
0001DD76 0000                       Ani_Plasma:	dc.w @full-Ani_Plasma
0001DD78 0000                       		dc.w @short-Ani_Plasma
0001DD7A 0100 0A08 0A01 0A09 0A06+  @full:		dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001DD89 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001DD98 0A05 FF                    		dc.b $A, 5, afEnd
0001DD9C 00                         		even
0001DD9C 0006 0501 0507 0501 05FF   @short:		dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	afEnd
0001DDA6                            		even
0001DDA6                            		even
0001DDA6                            Map_Plasma:	include	"_maps\Plasma Balls.asm"
0001DDA6                            ; ---------------------------------------------------------------------------
0001DDA6                            ; Sprite mappings - energy balls (FZ)
0001DDA6                            ; ---------------------------------------------------------------------------
0001DDA6                            Map_Plasma_internal:
0001DDA6 0000                       		dc.w @fuzzy1-Map_Plasma_internal
0001DDA8 0000                       		dc.w @fuzzy2-Map_Plasma_internal
0001DDAA 0000                       		dc.w @white1-Map_Plasma_internal
0001DDAC 0000                       		dc.w @white2-Map_Plasma_internal
0001DDAE 0000                       		dc.w @white3-Map_Plasma_internal
0001DDB0 0000                       		dc.w @white4-Map_Plasma_internal
0001DDB2 0000                       		dc.w @fuzzy3-Map_Plasma_internal
0001DDB4 0000                       		dc.w @fuzzy4-Map_Plasma_internal
0001DDB6 0000                       		dc.w @fuzzy5-Map_Plasma_internal
0001DDB8 0000                       		dc.w @fuzzy6-Map_Plasma_internal
0001DDBA 0000                       		dc.w @blank-Map_Plasma_internal
0001DDBC 02                         @fuzzy1:	dc.b 2
0001DDBD F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001DDC2 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001DDC7 02                         @fuzzy2:	dc.b 2
0001DDC8 F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001DDCD F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001DDD2 02                         @white1:	dc.b 2
0001DDD3 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001DDD8 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001DDDD 02                         @white2:	dc.b 2
0001DDDE F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001DDE3 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001DDE8 02                         @white3:	dc.b 2
0001DDE9 F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001DDEE 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001DDF3 02                         @white4:	dc.b 2
0001DDF4 F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001DDF9 F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001DDFE 01                         @fuzzy3:	dc.b 1
0001DDFF F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001DE04 01                         @fuzzy4:	dc.b 1
0001DE05 F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001DE0A 02                         @fuzzy5:	dc.b 2
0001DE0B F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001DE10 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001DE15 02                         @fuzzy6:	dc.b 2
0001DE16 F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001DE1B F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001DE20 00                         @blank:		dc.b 0
0001DE22 00                         		even
0001DE22 00                         		even
0001DE22                            
0001DE22                            		include	"_incObj\3E Prison Capsule.asm"
0001DE22                            ; ---------------------------------------------------------------------------
0001DE22                            ; Object 3E - prison capsule
0001DE22                            ; ---------------------------------------------------------------------------
0001DE22                            
0001DE22                            Prison:
0001DE22 7000                       		moveq	#0,d0
0001DE24 1028 0024                  		move.b	obRoutine(a0),d0
0001DE28 323B 0000                  		move.w	Pri_Index(pc,d0.w),d1
0001DE2C 4EBB 1000                  		jsr	Pri_Index(pc,d1.w)
0001DE4C 4EF9 0000 F978             		jmp	(DisplaySprite).l
0001DE52                            
0001DE52                            	@delete:
0001DE52 4EF9 0000 F9B8             		jmp	(DeleteObject).l
0001DE58                            ; ===========================================================================
0001DE58 0000                       Pri_Index:	dc.w Pri_Main-Pri_Index
0001DE5A 0000                       		dc.w Pri_BodyMain-Pri_Index
0001DE5C 0000                       		dc.w Pri_Switched-Pri_Index
0001DE5E 0000                       		dc.w Pri_Explosion-Pri_Index
0001DE60 0000                       		dc.w Pri_Explosion-Pri_Index
0001DE62 0000                       		dc.w Pri_Explosion-Pri_Index
0001DE64 0000                       		dc.w Pri_Animals-Pri_Index
0001DE66 0000                       		dc.w Pri_EndAct-Pri_Index
0001DE68                            
0001DE68 =00000030                  pri_origY:	equ $30		; original y-axis position
0001DE68                            
0001DE68 0220 0400                  Pri_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001DE6C 040C 0501                  		dc.b 4,	$C, 5, 1
0001DE70 0610 0403                  		dc.b 6,	$10, 4,	3
0001DE74 0810 0305                  		dc.b 8,	$10, 3,	5
0001DE78                            ; ===========================================================================
0001DE78                            
0001DE78                            Pri_Main:	; Routine 0
0001DE78 217C 0000 0000 0004        		move.l	#Map_Pri,obMap(a0)
0001DE80 317C 049D 0002             		move.w	#$49D,obGfx(a0)
0001DE86 117C 0004 0001             		move.b	#4,obRender(a0)
0001DE8C 3168 000C 0030             		move.w	obY(a0),pri_origY(a0)
0001DE92 7000                       		moveq	#0,d0
0001DE94 1028 0028                  		move.b	obSubtype(a0),d0
0001DE98 E548                       		lsl.w	#2,d0
0001DE9A 43FB 00CC                  		lea	Pri_Var(pc,d0.w),a1
0001DE9E 1159 0024                  		move.b	(a1)+,obRoutine(a0)
0001DEA2 1159 0014                  		move.b	(a1)+,obActWid(a0)
0001DEA6 1159 0018                  		move.b	(a1)+,obPriority(a0)
0001DEAA 3028 0018                  		move.w obPriority(a0),d0 
0001DEAE E248                       		lsr.w #1,d0 
0001DEB0 0240 0380                  		andi.w #$380,d0 
0001DEB4 3140 0018                  		move.w d0,obPriority(a0)		
0001DEB8 1159 001A                  		move.b	(a1)+,obFrame(a0)
0001DEBC 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001DEC0 6600                       		bne.s	@not02		; if not, branch
0001DEC2                            
0001DEC2 117C 0006 0020             		move.b	#6,obColType(a0)
0001DEC8 117C 0008 0021             		move.b	#8,obColProp(a0)
0001DECE                            
0001DECE                            	@not02:
0001DECE 4E75                       		rts	
0001DED0                            ; ===========================================================================
0001DED0                            
0001DED0                            Pri_BodyMain:	; Routine 2
0001DED0 0C38 0002 F7A7             		cmpi.b	#2,(v_bossstatus).w
0001DED6 6700                       		beq.s	@chkopened
0001DED8 323C 002B                  		move.w	#$2B,d1
0001DEDC 343C 0018                  		move.w	#$18,d2
0001DEE0 363C 0018                  		move.w	#$18,d3
0001DEE4 3828 0008                  		move.w	obX(a0),d4
0001DEE8 4EF9 0001 1D86             		jmp	(SolidObject).l
0001DEEE                            ; ===========================================================================
0001DEEE                            
0001DEEE                            @chkopened:
0001DEEE 4A28 0025                  		tst.b	ob2ndRout(a0)	; has the prison been opened?
0001DEF2 6700                       		beq.s	@open		; if yes, branch
0001DEF4 4228 0025                  		clr.b	ob2ndRout(a0)
0001DEF8 08B8 0003 D022             		bclr	#3,(v_player+obStatus).w
0001DEFE 08F8 0001 D022             		bset	#1,(v_player+obStatus).w
0001DF04                            
0001DF04                            	@open:
0001DF04 117C 0002 001A             		move.b	#2,obFrame(a0)	; use frame number 2 (destroyed	prison)
0001DF0A 4E75                       		rts	
0001DF0C                            ; ===========================================================================
0001DF0C                            
0001DF0C                            Pri_Switched:	; Routine 4
0001DF0C 323C 0017                  		move.w	#$17,d1
0001DF10 343C 0008                  		move.w	#8,d2
0001DF14 363C 0008                  		move.w	#8,d3
0001DF18 3828 0008                  		move.w	obX(a0),d4
0001DF1C 4EB9 0001 1D86             		jsr	(SolidObject).l
0001DF22 43F9 0000 0000             		lea	(Ani_Pri).l,a1
0001DF28 4EB9 0000 CA24             		jsr	(AnimateSprite).l
0001DF2E 3168 0030 000C             		move.w	pri_origY(a0),obY(a0)
0001DF34 4A28 0025                  		tst.b	ob2ndRout(a0)	; has prison already been opened?
0001DF38 6700                       		beq.s	@open2		; if yes, branch
0001DF3A                            
0001DF3A 5068 000C                  		addq.w	#8,obY(a0)
0001DF3E 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0001DF44 317C 003C 001E             		move.w	#60,obTimeFrame(a0) ; set time between animal spawns
0001DF4A 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
0001DF4E 4238 F7AA                  		clr.b	(f_lockscreen).w ; lock screen position
0001DF52 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock controls
0001DF58 31FC 0800 F602             		move.w	#(btnR<<8),(v_jpadhold2).w ; make Sonic run to the right
0001DF5E 4228 0025                  		clr.b	ob2ndRout(a0)
0001DF62 08B8 0003 D022             		bclr	#3,(v_player+obStatus).w
0001DF68 08F8 0001 D022             		bset	#1,(v_player+obStatus).w
0001DF6E                            
0001DF6E                            	@open2:
0001DF6E 4E75                       		rts	
0001DF70                            ; ===========================================================================
0001DF70                            
0001DF70                            Pri_Explosion:	; Routine 6, 8, $A
0001DF70 7007                       		moveq	#7,d0
0001DF72 C038 FE0F                  		and.b	(v_vbla_byte).w,d0
0001DF76 6600                       		bne.s	@noexplosion
0001DF78 4EB9 0000 FE04             		jsr	(FindFreeObj).l
0001DF7E 6600                       		bne.s	@noexplosion
0001DF80 12BC 003F                  		move.b	#id_ExplosionBomb,0(a1) ; load explosion object
0001DF84 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001DF8A 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001DF90 4EB9 0000 3A0C             		jsr	(RandomNumber).l
0001DF96 7200                       		moveq	#0,d1
0001DF98 1200                       		move.b	d0,d1
0001DF9A E409                       		lsr.b	#2,d1
0001DF9C 0441 0020                  		subi.w	#$20,d1
0001DFA0 D369 0008                  		add.w	d1,obX(a1)
0001DFA4 E048                       		lsr.w	#8,d0
0001DFA6 E608                       		lsr.b	#3,d0
0001DFA8 D169 000C                  		add.w	d0,obY(a1)
0001DFAC                            
0001DFAC                            	@noexplosion:
0001DFAC 5368 001E                  		subq.w	#1,obTimeFrame(a0)
0001DFB0 6700                       		beq.s	@makeanimal
0001DFB2 4E75                       		rts	
0001DFB4                            ; ===========================================================================
0001DFB4                            
0001DFB4                            @makeanimal:
0001DFB4 11FC 0002 F7A7             		move.b	#2,(v_bossstatus).w
0001DFBA 117C 000C 0024             		move.b	#$C,obRoutine(a0)	; replace explosions with animals
0001DFC0 117C 0006 001A             		move.b	#6,obFrame(a0)
0001DFC6 317C 0096 001E             		move.w	#150,obTimeFrame(a0)
0001DFCC 0668 0020 000C             		addi.w	#$20,obY(a0)
0001DFD2 7C07                       		moveq	#7,d6
0001DFD4 3A3C 009A                  		move.w	#$9A,d5
0001DFD8 78E4                       		moveq	#-$1C,d4
0001DFDA                            
0001DFDA                            	@loop:
0001DFDA 4EB9 0000 FE04             		jsr	(FindFreeObj).l
0001DFE0 6600                       		bne.s	@fail
0001DFE2 12BC 0028                  		move.b	#id_Animals,0(a1) ; load animal object
0001DFE6 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001DFEC 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001DFF2 D969 0008                  		add.w	d4,obX(a1)
0001DFF6 5E44                       		addq.w	#7,d4
0001DFF8 3345 0036                  		move.w	d5,$36(a1)
0001DFFC 5145                       		subq.w	#8,d5
0001DFFE 51CE FFDA                  		dbf	d6,@loop	; repeat 7 more	times
0001E002                            
0001E002                            	@fail:
0001E002 4E75                       		rts	
0001E004                            ; ===========================================================================
0001E004                            
0001E004                            Pri_Animals:	; Routine $C
0001E004 7007                       		moveq	#7,d0
0001E006 C038 FE0F                  		and.b	(v_vbla_byte).w,d0
0001E00A 6600                       		bne.s	@noanimal
0001E00C 4EB9 0000 FE04             		jsr	(FindFreeObj).l
0001E012 6600                       		bne.s	@noanimal
0001E014 12BC 0028                  		move.b	#id_Animals,0(a1) ; load animal object
0001E018 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001E01E 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001E024 4EB9 0000 3A0C             		jsr	(RandomNumber).l
0001E02A 0240 001F                  		andi.w	#$1F,d0
0001E02E 5D40                       		subq.w	#6,d0
0001E030 4A41                       		tst.w	d1
0001E032 6A00                       		bpl.s	@ispositive
0001E034 4440                       		neg.w	d0
0001E036                            
0001E036                            	@ispositive:
0001E036 D169 0008                  		add.w	d0,obX(a1)
0001E03A 337C 000C 0036             		move.w	#$C,$36(a1)
0001E040                            
0001E040                            	@noanimal:
0001E040 5368 001E                  		subq.w	#1,obTimeFrame(a0)
0001E044 6600                       		bne.s	@wait
0001E046 5428 0024                  		addq.b	#2,obRoutine(a0)
0001E04A 317C 00B4 001E             		move.w	#180,obTimeFrame(a0)
0001E050                            
0001E050                            	@wait:
0001E050 4E75                       		rts	
0001E052                            ; ===========================================================================
0001E052                            
0001E052                            Pri_EndAct:	; Routine $E
0001E052 703E                       		moveq	#$3E,d0
0001E054 7228                       		moveq	#id_Animals,d1
0001E056 7440                       		moveq	#$40,d2
0001E058 43F8 D040                  		lea	(v_objspace+$40).w,a1 ; load object RAM
0001E05C                            
0001E05C                            	@findanimal:
0001E05C B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001E05E 6700                       		beq.s	@found		; if yes, branch
0001E060 D2C2                       		adda.w	d2,a1		; next object RAM
0001E062 51C8 FFF8                  		dbf	d0,@findanimal	; repeat $3E times
0001E066                            
0001E066 4EB9 0001 10A8             		jsr	(GotThroughAct1).l
0001E06C 4EF9 0000 F9B8             		jmp	(DeleteObject).l
0001E072                            
0001E072                            	@found:
0001E072 4E75                       		rts	
0001E072 4E75                       		rts	
0001E074                            		include	"_anim\Prison Capsule.asm"
0001E074                            ; ---------------------------------------------------------------------------
0001E074                            ; Animation script - prison capsule
0001E074                            ; ---------------------------------------------------------------------------
0001E074 0000                       Ani_Pri:	dc.w @switchflash-Ani_Pri
0001E076 0000                       		dc.w @switchflash-Ani_Pri
0001E078 0201 03FF                  @switchflash:	dc.b 2,	1, 3, afEnd
0001E07C                            		even
0001E07C                            		even
0001E07C                            Map_Pri:	include	"_maps\Prison Capsule.asm"
0001E07C                            ; ---------------------------------------------------------------------------
0001E07C                            ; Sprite mappings - prison capsule
0001E07C                            ; ---------------------------------------------------------------------------
0001E07C                            Map_Pri_internal:
0001E07C 0000                       		dc.w @capsule-Map_Pri_internal
0001E07E 0000                       		dc.w @switch1-Map_Pri_internal
0001E080 0000                       		dc.w @broken-Map_Pri_internal
0001E082 0000                       		dc.w @switch2-Map_Pri_internal
0001E084 0000                       		dc.w @unusedthing1-Map_Pri_internal
0001E086 0000                       		dc.w @unusedthing2-Map_Pri_internal
0001E088 0000                       		dc.w @blank-Map_Pri_internal
0001E08A 07                         @capsule:	dc.b 7
0001E08B E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001E090 E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001E095 E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001E09A F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001E09F F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001E0A4 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001E0A9 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001E0AE 01                         @switch1:	dc.b 1
0001E0AF F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001E0B4 06                         @broken:	dc.b 6
0001E0B5 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001E0BA 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001E0BF 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001E0C4 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001E0C9 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001E0CE 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001E0D3 01                         @switch2:	dc.b 1
0001E0D4 F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001E0D9 02                         @unusedthing1:	dc.b 2
0001E0DA E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001E0DF 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001E0E4 01                         @unusedthing2:	dc.b 1
0001E0E5 F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001E0EA 00                         @blank:		dc.b 0
0001E0EC 00                         		even
0001E0EC 00                         		even
0001E0EC                            
0001E0EC                            		include	"_incObj\sub ReactToItem.asm"
0001E0EC                            ; ---------------------------------------------------------------------------
0001E0EC                            ; Subroutine to react to obColType(a0)
0001E0EC                            ; ---------------------------------------------------------------------------
0001E0EC                            
0001E0EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E0EC                            
0001E0EC                            
0001E0EC                            ReactToItem:
0001E0EC 4E71                       		nop	
0001E0EE 3428 0008                  		move.w	obX(a0),d2	; load Sonic's x-axis position
0001E0F2 3628 000C                  		move.w	obY(a0),d3	; load Sonic's y-axis position
0001E0F6 5142                       		subq.w	#8,d2
0001E0F8 7A00                       		moveq	#0,d5
0001E0FA 1A28 0016                  		move.b	obHeight(a0),d5	; load Sonic's height
0001E0FE 5705                       		subq.b	#3,d5
0001E100 9645                       		sub.w	d5,d3
0001E102 0C28 0071 001A             		cmpi.b	#fr_Duck,obFrame(a0) ; is Sonic ducking?
0001E108 6600                       		bne.s	@notducking	; if not, branch
0001E10A 0643 000C                  		addi.w	#$C,d3
0001E10E 7A0A                       		moveq	#$A,d5
0001E110                            
0001E110                            	@notducking:
0001E110 383C 0010                  		move.w	#$10,d4
0001E114 DA45                       		add.w	d5,d5
0001E116 43F8 D800                  		lea	(v_objspace+$800).w,a1 ; set object RAM start address
0001E11A 3C3C 005F                  		move.w	#$5F,d6
0001E11E                            
0001E11E                            @loop:
0001E11E 4A29 0001                  		tst.b	obRender(a1)
0001E122 6A00                       		bpl.s	@next
0001E124 1029 0020                  		move.b	obColType(a1),d0 ; load collision type
0001E128 6600                       		bne.s	@proximity	; if nonzero, branch
0001E12A                            
0001E12A                            	@next:
0001E12A 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001E12E 51CE FFEE                  		dbf	d6,@loop	; repeat $5F more times
0001E132                            
0001E132 7000                       		moveq	#0,d0
0001E134 4E75                       		rts	
0001E136                            ; ===========================================================================
0001E136                            @sizes:		;   width, height
0001E136 1414                       		dc.b  $14, $14		; $01
0001E138 0C14                       		dc.b   $C, $14		; $02
0001E13A 140C                       		dc.b  $14,  $C		; $03
0001E13C 0410                       		dc.b	4, $10		; $04
0001E13E 0C12                       		dc.b   $C, $12		; $05
0001E140 1010                       		dc.b  $10, $10		; $06
0001E142 0606                       		dc.b	6,   6		; $07
0001E144 180C                       		dc.b  $18,  $C		; $08
0001E146 0C10                       		dc.b   $C, $10		; $09
0001E148 100C                       		dc.b  $10,  $C		; $0A
0001E14A 0808                       		dc.b	8,   8		; $0B
0001E14C 1410                       		dc.b  $14, $10		; $0C
0001E14E 1408                       		dc.b  $14,   8		; $0D
0001E150 0E0E                       		dc.b   $E,  $E		; $0E
0001E152 1818                       		dc.b  $18, $18		; $0F
0001E154 2810                       		dc.b  $28, $10		; $10
0001E156 1018                       		dc.b  $10, $18		; $11
0001E158 0810                       		dc.b	8, $10		; $12
0001E15A 2070                       		dc.b  $20, $70		; $13
0001E15C 4020                       		dc.b  $40, $20		; $14
0001E15E 8020                       		dc.b  $80, $20		; $15
0001E160 2020                       		dc.b  $20, $20		; $16
0001E162 0808                       		dc.b	8,   8		; $17
0001E164 0404                       		dc.b	4,   4		; $18
0001E166 2008                       		dc.b  $20,   8		; $19
0001E168 0C0C                       		dc.b   $C,  $C		; $1A
0001E16A 0804                       		dc.b	8,   4		; $1B
0001E16C 1804                       		dc.b  $18,   4		; $1C
0001E16E 2804                       		dc.b  $28,   4		; $1D
0001E170 0408                       		dc.b	4,   8		; $1E
0001E172 0418                       		dc.b	4, $18		; $1F
0001E174 0428                       		dc.b	4, $28		; $20
0001E176 0420                       		dc.b	4, $20		; $21
0001E178 1818                       		dc.b  $18, $18		; $22
0001E17A 0C18                       		dc.b   $C, $18		; $23
0001E17C 4808                       		dc.b  $48,   8		; $24
0001E17E                            ; ===========================================================================
0001E17E                            
0001E17E                            @proximity:
0001E17E 0240 003F                  		andi.w	#$3F,d0
0001E182 D040                       		add.w	d0,d0
0001E184 45FB 00AE                  		lea	@sizes-2(pc,d0.w),a2
0001E188 7200                       		moveq	#0,d1
0001E18A 121A                       		move.b	(a2)+,d1
0001E18C 3029 0008                  		move.w	obX(a1),d0
0001E190 9041                       		sub.w	d1,d0
0001E192 9042                       		sub.w	d2,d0
0001E194 6400                       		bcc.s	@outsidex	; branch if not touching
0001E196 D241                       		add.w	d1,d1
0001E198 D041                       		add.w	d1,d0
0001E19A 6500                       		bcs.s	@withinx	; branch if touching
0001E19C 6000 FF8C                  		bra.w	@next
0001E1A0                            ; ===========================================================================
0001E1A0                            
0001E1A0                            @outsidex:
0001E1A0 6100 0000                  		bsr	React_ChkWaterTag	;TIS
0001E1A4 B044                       		cmp.w	d4,d0
0001E1A6 6200 FF82                  		bhi.w	@next
0001E1AA                            
0001E1AA                            @withinx:
0001E1AA 7200                       		moveq	#0,d1
0001E1AC 121A                       		move.b	(a2)+,d1
0001E1AE 3029 000C                  		move.w	obY(a1),d0
0001E1B2 9041                       		sub.w	d1,d0
0001E1B4 9043                       		sub.w	d3,d0
0001E1B6 6400                       		bcc.s	@outsidey	; branch if not touching
0001E1B8 D241                       		add.w	d1,d1
0001E1BA D240                       		add.w	d0,d1
0001E1BC 6500                       		bcs.s	@withiny	; branch if touching
0001E1BE 6000 FF6A                  		bra.w	@next
0001E1C2                            
0001E1C2                            ; ===========================================================================
0001E1C2                            
0001E1C2                            @outsidey:
0001E1C2 6100 0000                  		bsr	React_ChkWaterTag	;TIS
0001E1C6 B045                       		cmp.w	d5,d0
0001E1C8 6200 FF60                  		bhi.w	@next
0001E1CC                            
0001E1CC                            @withiny:
0001E1CC                            	@chktype:
0001E1CC 0C38 0004 FE10                     	cmpi.b	#id_SYZ,(v_zone).w   ;TIS is level GHZZ?
0001E1D2 6600 0000                          	bne	NotGHZReact  ;TIS
0001E1D6 1229 0020                          	move.b	obColType(a1),d1 ;TIS load collision type
0001E1DA 0C01 0096                          	cmpi.b	#$96,d1        ;TIS - is collision type $96?
0001E1DE 6700 0000                          	beq	React_WaterTag    ;TIS if yes, branch
0001E1E2 0C01 0094                          	cmpi.b	#$94,d1        ;TIS - is collision type $94?
0001E1E6 6700 0000                          	beq	React_WaterTag    ;TIS if yes, branch
0001E1EA 0C01 0095                          	cmpi.b	#$95,d1        ;TIS - is collision type $95?
0001E1EE 6700 0000                          	beq	React_WaterTag    ;TIS if yes, branch
0001E1F2                            NotGHZReact:                      ;TIS
0001E1F2 1229 0020                  		move.b	obColType(a1),d1 ; load collision type
0001E1F6 0201 00C0                  		andi.b	#$C0,d1        ; is obColType $40 or higher?
0001E1FA 6700 0000                  		beq.w	React_Enemy    ; if not, branch
0001E1FE 0C01 00C0                  		cmpi.b	#$C0,d1		; is obColType $C0 or higher?
0001E202 6700 0000                  		beq.w	React_Special	; if yes, branch
0001E206 4A01                       		tst.b	d1		; is obColType $80-$BF?
0001E208 6B00 0000                  		bmi.w	React_ChkHurt	; if yes, branch
0001E20C                            
0001E20C                            ; obColType is $40-$7F (powerups)
0001E20C                            
0001E20C 1029 0020                  		move.b	obColType(a1),d0
0001E210 0200 003F                  		andi.b	#$3F,d0
0001E214 0C00 0006                  		cmpi.b	#6,d0		; is collision type $46	?
0001E218 6700                       		beq.s	React_Monitor	; if yes, branch
0001E21A 0C68 005A 0030             		cmpi.w	#90,$30(a0)	; is Sonic invincible?
0001E220 6400 0000                  		bcc.w	@invincible	; if yes, branch
0001E224 5429 0024                  		addq.b	#2,obRoutine(a1) ; advance the object's routine counter
0001E228                            
0001E228                            	@invincible:
0001E228 4E75                       		rts	
0001E22A                            ; ===========================================================================
0001E22A                            
0001E22A                            React_Monitor:
0001E22A 4A68 0012                  		tst.w	obVelY(a0)	; is Sonic moving upwards?
0001E22E 6A00                       		bpl.s	@movingdown	; if not, branch
0001E230                            
0001E230 3028 000C                  		move.w	obY(a0),d0
0001E234 0440 0010                  		subi.w	#$10,d0
0001E238 B069 000C                  		cmp.w	obY(a1),d0
0001E23C 6500                       		bcs.s	@donothing
0001E23E 4468 0012                  		neg.w	obVelY(a0)	; reverse Sonic's vertical speed
0001E242 337C FE80 0012             		move.w	#-$180,obVelY(a1)
0001E248 4A29 0025                  		tst.b	ob2ndRout(a1)
0001E24C 6600                       		bne.s	@donothing
0001E24E 5829 0025                  		addq.b	#4,ob2ndRout(a1) ; advance the monitor's routine counter
0001E252 4E75                       		rts	
0001E254                            ; ===========================================================================
0001E254                            
0001E254                            @movingdown:
0001E254 0C28 0002 001C             		cmpi.b	#id_Roll,obAnim(a0) ; is Sonic rolling/jumping?
0001E25A 6600                       		bne.s	@donothing
0001E25C 4468 0012                  		neg.w	obVelY(a0)	; reverse Sonic's y-motion
0001E260 5429 0024                  		addq.b	#2,obRoutine(a1) ; advance the monitor's routine counter
0001E264                            
0001E264                            	@donothing:
0001E264 4E75                       		rts	
0001E266                            ; ===========================================================================
0001E266                            
0001E266                            React_Enemy:
0001E266 4A38 FE2D                  		tst.b	(v_invinc).w	; is Sonic invincible?
0001E26A 6600                       		bne.s	@donthurtsonic	; if yes, branch
0001E26C 0C28 001F 001C             		cmpi.b	#id_Spindash,obAnim(a0)	; is Sonic Spin Dashing? 
0001E272 6700 0000                  		beq.w	@donthurtsonic	; if yes, branch
0001E276 0C28 0002 001C             		cmpi.b	#id_Roll,obAnim(a0) ; is Sonic rolling/jumping?
0001E27C 6600 0000                  		bne.w	React_ChkHurt	; if not, branch
0001E280                            
0001E280                            	@donthurtsonic:
0001E280 4A29 0021                  		tst.b	obColProp(a1)
0001E284 6700                       		beq.s	breakenemy
0001E286                            
0001E286 4468 0010                  		neg.w	obVelX(a0)	; repel Sonic
0001E28A 4468 0012                  		neg.w	obVelY(a0)
0001E28E E0E8 0010                  		asr	obVelX(a0)
0001E292 E0E8 0012                  		asr	obVelY(a0)
0001E296 137C 0000 0020             		move.b	#0,obColType(a1)
0001E29C 5329 0021                  		subq.b	#1,obColProp(a1)
0001E2A0 6600                       		bne.s	@flagnotclear
0001E2A2 08E9 0007 0022             		bset	#7,obStatus(a1)
0001E2A8                            
0001E2A8                            	@flagnotclear:
0001E2A8 4E75                       		rts	
0001E2AA                            ; ===========================================================================
0001E2AA                            
0001E2AA                            breakenemy:
0001E2AA 08E9 0007 0022             		bset	#7,obStatus(a1)
0001E2B0 7000                       		moveq	#0,d0
0001E2B2 3038 F7D0                  		move.w	(v_itembonus).w,d0
0001E2B6 5478 F7D0                  		addq.w	#2,(v_itembonus).w ; add 2 to item bonus counter
0001E2BA 0C40 0006                  		cmpi.w	#6,d0
0001E2BE 6500                       		bcs.s	@bonusokay
0001E2C0 7006                       		moveq	#6,d0		; max bonus is lvl6
0001E2C2                            
0001E2C2                            	@bonusokay:
0001E2C2 3340 003E                  		move.w	d0,$3E(a1)
0001E2C6 303B 0000                  		move.w	@points(pc,d0.w),d0
0001E2CA 0C78 0020 F7D0             		cmpi.w	#$20,(v_itembonus).w ; have 16 enemies been destroyed?
0001E2D0 6500                       		bcs.s	@lessthan16	; if not, branch
0001E2D2 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001E2D6 337C 000A 003E             		move.w	#$A,$3E(a1)
0001E2DC                            
0001E2DC                            	@lessthan16:
0001E2DC 6100 0000                  		bsr.w	AddPoints
0001E2E0 12BC 0027                  		move.b	#id_ExplosionItem,0(a1) ; change object to explosion
0001E2E4 137C 0000 0024             		move.b	#0,obRoutine(a1)
0001E2EA 4A68 0012                  		tst.w	obVelY(a0)
0001E2EE 6B00                       		bmi.s	@bouncedown
0001E2F0 3028 000C                  		move.w	obY(a0),d0
0001E2F4 B069 000C                  		cmp.w	obY(a1),d0
0001E2F8 6400                       		bcc.s	@bounceup
0001E2FA 4468 0012                  		neg.w	obVelY(a0)
0001E2FE 4E75                       		rts	
0001E300                            ; ===========================================================================
0001E300                            
0001E300                            	@bouncedown:
0001E300 0668 0100 0012             		addi.w	#$100,obVelY(a0)
0001E306 4E75                       		rts	
0001E308                            
0001E308                            	@bounceup:
0001E308 0468 0100 0012             		subi.w	#$100,obVelY(a0)
0001E30E 4E75                       		rts	
0001E310                            
0001E310 000A 0014 0032 0064        @points:	dc.w 10, 20, 50, 100	; points awarded div 10
0001E318                            
0001E318                            ; ===========================================================================
0001E318                            
0001E318                            React_Caterkiller:
0001E318 08E9 0007 0022             		bset	#7,obStatus(a1)
0001E31E                            
0001E31E                            React_ChkHurt:
0001E31E 4A38 FE2D                  		tst.b	(v_invinc).w	; is Sonic invincible?
0001E322 6700                       		beq.s	notinvincible	; if not, branch
0001E324                            
0001E324                            	isflashing:
0001E324 70FF                       		moveq	#-1,d0
0001E326 4E75                       		rts	
0001E328                            ; ===========================================================================
0001E328                            
0001E328                            	notinvincible:
0001E328 4E71                       		nop	
0001E32A 4A68 0030                  		tst.w	$30(a0)		; is Sonic flashing?
0001E32E 66F4                       		bne.s	isflashing	; if yes, branch
0001E330 2449                       		movea.l	a1,a2
0001E332                            
0001E332                            ; End of function ReactToItem
0001E332                            ; continue straight to HurtSonic
0001E332                            
0001E332                            ; ---------------------------------------------------------------------------
0001E332                            ; Hurting Sonic	subroutine
0001E332                            ; ---------------------------------------------------------------------------
0001E332                            
0001E332                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E332                            
0001E332                            
0001E332                            HurtSonic:
0001E332 4A38 FE2C                  		tst.b	(v_shield).w	; does Sonic have a shield?
0001E336 6600                       		bne.s	@hasshield	; if yes, branch
0001E338 4A38 F5C8                  		tst.b	(v_rshield).w	; does Sonic have a red shield?
0001E33C 6600                       		bne.s	@hasshield	; if yes, branch
0001E33E 4A38 F5C9                  		tst.b	(v_gshield).w	; does Sonic have a gold shield?
0001E342 6600                       		bne.s	@hasshield	; if yes, branch
0001E344 4A38 F5CA                  		tst.b	(v_spshield).w	; does Sonic have a silver shield?
0001E348 6600                       		bne.s	@hasshield	; if yes, branch
0001E34A 4A78 FE20                  		tst.w	(v_rings).w	; does Sonic have any rings?
0001E34E 6700 0000                  		beq.w	@norings	; if not, branch
0001E352                            
0001E352 4EB9 0000 FE04             		jsr	(FindFreeObj).l
0001E358 6600                       		bne.s	@hasshield
0001E35A 12BC 0037                  		move.b	#id_RingLoss,0(a1) ; load bouncing multi rings object
0001E35E 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001E364 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001E36A                            
0001E36A                            	@hasshield:
0001E36A 0C38 0001 FE2C             		cmpi.b	#1,(v_shield).w     ; does sonic have a Shield?
0001E370 6600                       		bne.s	@hasrshield        ; if no, check for red shield
0001E372 0C12 006E                  		cmpi.b	#$6E,(a2)     ; was damage caused by electrocuter?
0001E376 6700 FFAC                  		beq.w	isflashing
0001E37A 0C12 0086                  		cmpi.b	#$86,(a2)     ; was damage caused by Plasma Ball Launcher?
0001E37E 6700 FFA4                  		beq.w	isflashing
0001E382                            
0001E382                            	@hasrshield:
0001E382 0C38 0000 F5C8             		cmpi.b	#0,(v_rshield).w     ; does sonic not a Red Shield?
0001E388 6700                       		beq.s	@hasspshield          ; if yes, check for gray shield
0001E38A 0C12 0014                  		cmpi.b	#$14,(a2)	; was damage caused by lava ball?
0001E38E 6700 FF94                  		beq.w 	isflashing
0001E392 0C12 004C                  		cmpi.b	#$4C,(a2)	; was damage caused by lava geyser?
0001E396 6700 FF8C                  		beq.w 	isflashing
0001E39A 0C12 004D                  		cmpi.b	#$4D,(a2)	; was damage caused by lava geyser?
0001E39E 6700 FF84                  		beq.w 	isflashing
0001E3A2 0C12 0062                  		cmpi.b	#$62,(a2)	; was damage caused by gargoyle?
0001E3A6 6700 FF7C                  		beq.w 	isflashing
0001E3AA 0C12 0074                  		cmpi.b	#$74,(a2)	; was damage caused by MZ fire boss?
0001E3AE 6700 FF74                  		beq.w 	isflashing
0001E3B2 0C12 0035                  		cmpi.b	#$35,(a2)	; was damage caused by burning grass?
0001E3B6 6700 FF6C                  		beq.w 	isflashing
0001E3BA 0C12 006D                  		cmpi.b	#$6D,(a2)	; was damage caused by flamethrower?
0001E3BE 6700 FF64                  		beq.w 	isflashing
0001E3C2 0C12 0054                  		cmpi.b	#$54,(a2)	; was damage caused by Lava Tag/Magma?
0001E3C6 6700 FF5C                  		beq.w 	isflashing
0001E3CA                            
0001E3CA                            	@hasspshield:
0001E3CA 0C38 0001 F5CA             		cmpi.b	#1,(v_spshield).w     ; does sonic have a sp Shield?
0001E3D0 6600                       		bne.s	@hurtcont           ; if yes, make him invulnerable to metal objects
0001E3D2 0C12 0015                  		cmpi.b	#$15,(a2)	; was damage caused by SBZ Spiked Ball?
0001E3D6 6700 FF4C                  		beq.w 	isflashing
0001E3DA 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ Harpoon?
0001E3DE 6700 FF44                  		beq.w 	isflashing
0001E3E2 0C12 0031                  		cmpi.b	#$31,(a2)	; was damage caused by Chained Stompers?
0001E3E6 6700 FF3C                  		beq.w 	isflashing
0001E3EA 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by Spikes?
0001E3EE 6700 FF34                  		beq.w 	isflashing
0001E3F2 0C12 007B                  		cmpi.b	#$7B,(a2)	; was damage caused by SLZ boss spikeball?
0001E3F6 6700 FF2C                  		beq.w 	isflashing
0001E3FA 0C12 0057                  		cmpi.b	#$57,(a2)	; was damage caused by Spiked Ball & Chain?
0001E3FE 6700 FF24                  		beq.w 	isflashing
0001E402 0C12 0058                  		cmpi.b	#$58,(a2)	; was damage caused by Big Spiked Ball?
0001E406 6700 FF1C                  		beq.w 	isflashing
0001E40A 0C12 006A                  		cmpi.b	#$6A,(a2)	; was damage caused by Saws?
0001E40E 6700 FF14                  		beq.w 	isflashing
0001E412 0C12 005E                  		cmpi.b	#$5E,(a2)	; was damage caused by Seesaw ball?
0001E416 6700 FF0C                  		beq.w 	isflashing
0001E41A 0C12 0006                  		cmpi.b	#$06,(a2)	; was damage caused by Mozzietron?
0001E41E 6700 FE8A                  		beq.w 	breakenemy
0001E422 0C12 0050                  		cmpi.b	#$50,(a2)	; was damage caused by Yadrin?
0001E426 6700 FE82                  		beq.w 	breakenemy
0001E42A 0C12 0060                  		cmpi.b	#$60,(a2)	; was damage caused by Orbinaut?
0001E42E 6700 FE7A                  		beq.w 	breakenemy
0001E432 0C12 0078                  		cmpi.b	#$78,(a2)	; was damage caused by Catterkiller?
0001E436 6700 FE72                  		beq.w 	breakenemy
0001E43A 0C12 005F                  		cmpi.b	#$5F,(a2)	; was damage caused by Bomb enemy?
0001E43E 6700 FE6A                  		beq.w 	breakenemy
0001E442                            
0001E442                            
0001E442                            	@hurtcont:
0001E442 11FC 0000 FE2C             		move.b	#0,(v_shield).w		; remove shield
0001E448 11FC 0000 F5C9             		move.b	#0,(v_gshield).w	; remove g shield
0001E44E 11FC 0000 F5CA             		move.b	#0,(v_spshield).w	; remove sp shield
0001E454                            		
0001E454 0C38 0000 F5C8             		cmpi.b	#0,(v_rshield).w ; do you have no r shield?
0001E45A 6700                       		beq.s	@hurtcont2	;if not, branch
0001E45C 5338 F5C8                  		subq.b	#1,(v_rshield).w
0001E460                            		
0001E460                            	@hurtcont2:
0001E460 117C 0004 0024             		move.b	#4,obRoutine(a0)
0001E466 4EB9 0001 63D4             		jsr		Sonic_ResetOnFloor
0001E46C 08E8 0001 0022             		bset	#1,obStatus(a0)
0001E472 317C FC00 0012             		move.w	#-$400,obVelY(a0) ; make Sonic bounce away from the object
0001E478 317C FE00 0010             		move.w	#-$200,obVelX(a0)
0001E47E 0828 0006 0022             		btst	#6,obStatus(a0)	; is Sonic underwater?
0001E484 6700                       		beq.s	@isdry		; if not, branch
0001E486                            
0001E486 317C FE00 0012             		move.w	#-$200,obVelY(a0) ; slower bounce
0001E48C 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001E492                            
0001E492                            	@isdry:
0001E492 3028 0008                  		move.w	obX(a0),d0
0001E496 B06A 0008                  		cmp.w	obX(a2),d0
0001E49A 6500                       		bcs.s	@isleft		; if Sonic is left of the object, branch
0001E49C 4468 0010                  		neg.w	obVelX(a0)	; if Sonic is right of the object, reverse
0001E4A0                            
0001E4A0                            	@isleft:
0001E4A0 117C 0000 0039             		move.b	#0,f_spindash(a0) ; clear Spin Dash flag 
0001E4A6 317C 0000 0020             		move.w	#0,obInertia(a0) 
0001E4AC 117C 0019 001C             		move.b	#id_Hurt,obAnim(a0) 
0001E4B2 317C 0120 0030             		move.w	#$120,$30(a0)
0001E4B8 0C12 006E                  		cmpi.b	#$6E,(a2)    ; check if you were hurt by Electrocuter
0001E4BC 6700                       		beq.s	@hurtelec       ; if yes, branch
0001E4BE 0C12 0086                  		cmpi.b	#$86,(a2)    ; check if you were hurt by FZ plasma
0001E4C2 6700                       		beq.s	@hurtelec       ; if yes, branch
0001E4C4 317C 0000 0020             		move.w	#0,obInertia(a0)
0001E4CA 117C 0019 001C             		move.b	#id_Hurt,obAnim(a0)
0001E4D0 317C 0078 0030             		move.w	#120,$30(a0)	; set temp invincible time to 2 seconds
0001E4D6 303C 0000                  		move.w	#sfx_Death,d0	; load normal damage sound
0001E4DA 0C12 0036                  		cmpi.b	#id_Spikes,(a2)	; was damage caused by spikes?
0001E4DE 6600                       		bne.s	@sound		; if not, branch
0001E4E0 0C12 0016                  		cmpi.b	#id_Harpoon,(a2) ; was damage caused by LZ harpoon?
0001E4E4 6600                       		bne.s	@sound		; if not, branch
0001E4E6 303C 0000                  		move.w	#sfx_HitSpikes,d0 ; load spikes damage sound
0001E4EA                            
0001E4EA                            	@sound:
0001E4EA 4EB9 0000 1250             		jsr	(PlaySound_Special).l
0001E4F0 70FF                       		moveq	#-1,d0
0001E4F2 4E75                       		rts	
0001E4F4                            
0001E4F4                            	@hurtelec:
0001E4F4 117C 0020 001C             		move.b	#id_Hurt2,obAnim(a0)
0001E4FA 317C 0078 0030             		move.w	#120,$30(a0)	; set temp invincible time to 2 seconds
0001E500 303C 0000                  		move.w	#sfx_Death,d0	; load normal damage sound
0001E504 0C12 0036                  		cmpi.b	#id_Spikes,(a2)	; was damage caused by spikes?
0001E508 66E0                       		bne.s	@sound		; if not, branch
0001E50A 0C12 0016                  		cmpi.b	#id_Harpoon,(a2) ; was damage caused by LZ harpoon?
0001E50E 66DA                       		bne.s	@sound		; if not, branch
0001E510 303C 0000                  		move.w	#sfx_HitSpikes,d0 ; load spikes damage sound
0001E514                            ; ===========================================================================
0001E514                            
0001E514                            @norings:
0001E514 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug mode	cheat on?
0001E518 6600 FE50                  		bne.w	@hasshield	; if yes, branch
0001E51C                            
0001E51C                            ; ---------------------------------------------------------------------------
0001E51C                            ; Subroutine to	kill Sonic
0001E51C                            ; ---------------------------------------------------------------------------
0001E51C                            
0001E51C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E51C                            
0001E51C                            
0001E51C                            KillSonic:
0001E51C 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	active?
0001E520 6600 0000                  		bne.w	@dontdie	; if yes, branch
0001E524 31FC 0000 FE20             		move.w	#0,(v_rings).w ; clear rings
0001E52A 11FC 0000 FE2D             		move.b	#0,(v_invinc).w	; remove invincibility
0001E530 11FC 0000 FE2E             		move.b  #0,(v_shoes).w
0001E536 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0001E53C 117C 0006 0024             		move.b	#6,obRoutine(a0)
0001E542 4EB9 0001 63D4             		jsr		Sonic_ResetOnFloor
0001E548 08E8 0001 0022             		bset	#1,obStatus(a0)
0001E54E 317C F900 0012             		move.w	#-$700,obVelY(a0)
0001E554 317C 0000 0010             		move.w	#0,obVelX(a0)
0001E55A 317C 0000 0020             		move.w	#0,obInertia(a0)
0001E560 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001E566 0C12 0054                  		cmpi.b	#$54,(a2)    ; check if you were killed by lava
0001E56A 6700                       		beq.s	Kill_Lava       ; if yes, branch
0001E56C 0C12 006D                  		cmpi.b	#$6D,(a2)    ; check if you were killed by flamethrower
0001E570 6700                       		beq.s	Kill_Lava        ; if yes, branch
0001E572 117C 0018 001C             		move.b	#id_Death,obAnim(a0)
0001E578 08E8 0007 0002             		bset	#7,obGfx(a0)
0001E57E 303C 0000                  		move.w	#sfx_Death,d0	; play normal death sound
0001E582 0C12 0036                  		cmpi.b	#id_Spikes,(a2)	; check	if you were killed by spikes
0001E586 6600                       		bne.s	@sound
0001E588 303C 0000                  		move.w	#sfx_HitSpikes,d0 ; play spikes death sound
0001E58C                            
0001E58C                            	@sound:
0001E58C 4EB9 0000 1250             		jsr	(PlaySound_Special).l
0001E592                            
0001E592                            	@dontdie:
0001E592 70FF                       		moveq	#-1,d0
0001E594 4E75                       		rts	
0001E596                            ; End of function KillSonic
0001E596                            Kill_Lava:	
0001E596                            	;bset	#7,obGfx(a0)
0001E596 117C 0016 001C             	move.b	#$16,$1C(a0)
0001E59C 303C 00C8                  	move.w	#$C8,d0        ; play death sound
0001E5A0 4EB9 0000 1250                 jsr		(PlaySound_Special).l
0001E5A6                            
0001E5A6                            
0001E5A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E5A6                            
0001E5A6                            
0001E5A6                            React_Special:
0001E5A6 1229 0020                  		move.b	obColType(a1),d1
0001E5AA 0201 003F                  		andi.b	#$3F,d1
0001E5AE 0C01 000B                  		cmpi.b	#$B,d1		; is collision type $CB	?
0001E5B2 6700                       		beq.s	@caterkiller	; if yes, branch
0001E5B4 0C01 000C                  		cmpi.b	#$C,d1		; is collision type $CC	?
0001E5B8 6700                       		beq.s	@yadrin		; if yes, branch
0001E5BA 0C01 0017                  		cmpi.b	#$17,d1		; is collision type $D7	?
0001E5BE 6700                       		beq.s	@D7orE1		; if yes, branch
0001E5C0 0C01 0021                  		cmpi.b	#$21,d1		; is collision type $E1	?
0001E5C4 6700                       		beq.s	@D7orE1		; if yes, branch
0001E5C6 4E75                       		rts	
0001E5C8                            ; ===========================================================================
0001E5C8                            
0001E5C8                            @caterkiller:
0001E5C8 6000 FD4E                  		bra.w	React_Caterkiller
0001E5CC                            ; ===========================================================================
0001E5CC                            
0001E5CC                            @yadrin:
0001E5CC 9A40                       		sub.w	d0,d5
0001E5CE 0C45 0008                  		cmpi.w	#8,d5
0001E5D2 6400                       		bcc.s	@normalenemy
0001E5D4 3029 0008                  		move.w	obX(a1),d0
0001E5D8 5940                       		subq.w	#4,d0
0001E5DA 0829 0000 0022             		btst	#0,obStatus(a1)
0001E5E0 6700                       		beq.s	@noflip
0001E5E2 0440 0010                  		subi.w	#$10,d0
0001E5E6                            
0001E5E6                            	@noflip:
0001E5E6 9042                       		sub.w	d2,d0
0001E5E8 6400                       		bcc.s	@loc_1B13C
0001E5EA 0640 0018                  		addi.w	#$18,d0
0001E5EE 6500                       		bcs.s	@loc_1B140
0001E5F0 6000                       		bra.s	@normalenemy
0001E5F2                            ; ===========================================================================
0001E5F2                            
0001E5F2                            	@loc_1B13C:
0001E5F2 B044                       		cmp.w	d4,d0
0001E5F4 6200                       		bhi.s	@normalenemy
0001E5F6                            
0001E5F6                            	@loc_1B140:
0001E5F6 6000 FD26                  		bra.w	React_ChkHurt
0001E5FA                            ; ===========================================================================
0001E5FA                            
0001E5FA                            	@normalenemy:
0001E5FA 6000 FC6A                  		bra.w	React_Enemy
0001E5FE                            ; ===========================================================================
0001E5FE                            
0001E5FE                            @D7orE1:
0001E5FE 5229 0021                  		addq.b	#1,obColProp(a1)
0001E602 4E75                       		rts	
0001E604                            ; End of function React_Special
0001E604                            
0001E604                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E604                            
0001E604                            React_ChkWaterTag:
0001E604 0C38 0001 F5C4             		cmpi.b	#1,(v_tagwater).w	;TIS
0001E60A 6600 0000                  		bne	NotWaterTag
0001E60E 11FC 0000 F5C4             		move.b	#0,(v_tagwater).w	;TIS
0001E614                            	NotWaterTag:
0001E614 4E75                       		rts
0001E616                            
0001E616                            React_WaterTag:
0001E616 0C38 0001 F5C4             		cmpi.b	#1,(v_tagwater).w	;TIS
0001E61C 6700 0000                  		beq	SkipWaterTag
0001E620 11FC 0001 F5C4             		move.b	#1,(v_tagwater).w	;TIS
0001E626                            	SkipWaterTag:
0001E626 4E75                       		rts
0001E626 4E75                       		rts
0001E628                            
0001E628                            ; ---------------------------------------------------------------------------
0001E628                            ; Subroutine to	show the special stage layout
0001E628                            ; ---------------------------------------------------------------------------
0001E628                            
0001E628                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E628                            
0001E628                            
0001E628                            SS_ShowLayout:
0001E628 6100 0000                  		bsr.w	SS_AniWallsRings
0001E62C 6100 0000                  		bsr.w	SS_AniItems
0001E630 3F05                       		move.w	d5,-(sp)
0001E632 43F8 8000                  		lea	($FFFF8000).w,a1
0001E636 1038 F780                  		move.b	(v_ssangle).w,d0
0001E63A 0200 00FC                  		andi.b	#$FC,d0
0001E63E 4EB9 0000 3A32             		jsr	(CalcSine).l
0001E644 3800                       		move.w	d0,d4
0001E646 3A01                       		move.w	d1,d5
0001E648 C9FC 0018                  		muls.w	#$18,d4
0001E64C CBFC 0018                  		muls.w	#$18,d5
0001E650 7400                       		moveq	#0,d2
0001E652 3438 F700                  		move.w	(v_screenposx).w,d2
0001E656 84FC 0018                  		divu.w	#$18,d2
0001E65A 4842                       		swap	d2
0001E65C 4442                       		neg.w	d2
0001E65E 0642 FF4C                  		addi.w	#-$B4,d2
0001E662 7600                       		moveq	#0,d3
0001E664 3638 F704                  		move.w	(v_screenposy).w,d3
0001E668 86FC 0018                  		divu.w	#$18,d3
0001E66C 4843                       		swap	d3
0001E66E 4443                       		neg.w	d3
0001E670 0643 FF4C                  		addi.w	#-$B4,d3
0001E674 3E3C 000F                  		move.w	#$F,d7
0001E678                            
0001E678                            loc_1B19E:
0001E678 48A7 E000                  		movem.w	d0-d2,-(sp)
0001E67C 48A7 C000                  		movem.w	d0-d1,-(sp)
0001E680 4440                       		neg.w	d0
0001E682 C3C2                       		muls.w	d2,d1
0001E684 C1C3                       		muls.w	d3,d0
0001E686 2C00                       		move.l	d0,d6
0001E688 DC81                       		add.l	d1,d6
0001E68A 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001E68E C1C2                       		muls.w	d2,d0
0001E690 C3C3                       		muls.w	d3,d1
0001E692 D280                       		add.l	d0,d1
0001E694 2406                       		move.l	d6,d2
0001E696 3C3C 000F                  		move.w	#$F,d6
0001E69A                            
0001E69A                            loc_1B1C0:
0001E69A 2002                       		move.l	d2,d0
0001E69C E080                       		asr.l	#8,d0
0001E69E 32C0                       		move.w	d0,(a1)+
0001E6A0 2001                       		move.l	d1,d0
0001E6A2 E080                       		asr.l	#8,d0
0001E6A4 32C0                       		move.w	d0,(a1)+
0001E6A6 D485                       		add.l	d5,d2
0001E6A8 D284                       		add.l	d4,d1
0001E6AA 51CE FFEE                  		dbf	d6,loc_1B1C0
0001E6AE                            
0001E6AE 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001E6B2 0643 0018                  		addi.w	#$18,d3
0001E6B6 51CF FFC0                  		dbf	d7,loc_1B19E
0001E6BA                            
0001E6BA 3A1F                       		move.w	(sp)+,d5
0001E6BC 41F9 00FF 0000             		lea	($FF0000).l,a0
0001E6C2 7000                       		moveq	#0,d0
0001E6C4 3038 F704                  		move.w	(v_screenposy).w,d0
0001E6C8 80FC 0018                  		divu.w	#$18,d0
0001E6CC C0FC 0080                  		mulu.w	#$80,d0
0001E6D0 D1C0                       		adda.l	d0,a0
0001E6D2 7000                       		moveq	#0,d0
0001E6D4 3038 F700                  		move.w	(v_screenposx).w,d0
0001E6D8 80FC 0018                  		divu.w	#$18,d0
0001E6DC D0C0                       		adda.w	d0,a0
0001E6DE 49F8 8000                  		lea	($FFFF8000).w,a4
0001E6E2 3E3C 000F                  		move.w	#$F,d7
0001E6E6                            
0001E6E6                            loc_1B20C:
0001E6E6 3C3C 000F                  		move.w	#$F,d6
0001E6EA                            
0001E6EA                            loc_1B210:
0001E6EA 7000                       		moveq	#0,d0
0001E6EC 1018                       		move.b	(a0)+,d0
0001E6EE 6700                       		beq.s	loc_1B268
0001E6F0 0C00 004E                  		cmpi.b	#$4E,d0
0001E6F4 6200                       		bhi.s	loc_1B268
0001E6F6 3614                       		move.w	(a4),d3
0001E6F8 0643 0120                  		addi.w	#$120,d3
0001E6FC 0C43 0070                  		cmpi.w	#$70,d3
0001E700 6500                       		blo.s	loc_1B268
0001E702 0C43 01D0                  		cmpi.w	#$1D0,d3
0001E706 6400                       		bhs.s	loc_1B268
0001E708 342C 0002                  		move.w	2(a4),d2
0001E70C 0642 00F0                  		addi.w	#$F0,d2
0001E710 0C42 0070                  		cmpi.w	#$70,d2
0001E714 6500                       		blo.s	loc_1B268
0001E716 0C42 0170                  		cmpi.w	#$170,d2
0001E71A 6400                       		bhs.s	loc_1B268
0001E71C 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001E722 E748                       		lsl.w	#3,d0
0001E724 4BF5 0000                  		lea	(a5,d0.w),a5
0001E728 225D                       		movea.l	(a5)+,a1
0001E72A 321D                       		move.w	(a5)+,d1
0001E72C D241                       		add.w	d1,d1
0001E72E D2F1 1000                  		adda.w	(a1,d1.w),a1
0001E732 365D                       		movea.w	(a5)+,a3
0001E734 7200                       		moveq	#0,d1
0001E736 1219                       		move.b	(a1)+,d1
0001E738 5301                       		subq.b	#1,d1
0001E73A 6B00                       		bmi.s	loc_1B268
0001E73C 4EB9 0000 FADC             		jsr	(BuildSpr_Normal).l
0001E742                            
0001E742                            loc_1B268:
0001E742 584C                       		addq.w	#4,a4
0001E744 51CE FFA4                  		dbf	d6,loc_1B210
0001E748                            
0001E748 41E8 0070                  		lea	$70(a0),a0
0001E74C 51CF FF98                  		dbf	d7,loc_1B20C
0001E750                            
0001E750 11C5 F62C                  		move.b	d5,(v_spritecount).w
0001E754 0C05 0050                  		cmpi.b	#$50,d5
0001E758 6700                       		beq.s	loc_1B288
0001E75A 24BC 0000 0000             		move.l	#0,(a2)
0001E760 4E75                       		rts	
0001E762                            ; ===========================================================================
0001E762                            
0001E762                            loc_1B288:
0001E762 157C 0000 FFFB             		move.b	#0,-5(a2)
0001E768 4E75                       		rts	
0001E76A                            ; End of function SS_ShowLayout
0001E76A                            
0001E76A                            ; ---------------------------------------------------------------------------
0001E76A                            ; Subroutine to	animate	walls and rings	in the special stage
0001E76A                            ; ---------------------------------------------------------------------------
0001E76A                            
0001E76A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E76A                            
0001E76A                            
0001E76A                            SS_AniWallsRings:
0001E76A 43F9 00FF 400C             		lea	($FF400C).l,a1
0001E770 7000                       		moveq	#0,d0
0001E772 1038 F780                  		move.b	(v_ssangle).w,d0
0001E776 E408                       		lsr.b	#2,d0
0001E778 0240 000F                  		andi.w	#$F,d0
0001E77C 7223                       		moveq	#$23,d1
0001E77E                            
0001E77E                            loc_1B2A4:
0001E77E 3280                       		move.w	d0,(a1)
0001E780 5049                       		addq.w	#8,a1
0001E782 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001E786                            
0001E786 43F9 00FF 4005             		lea	($FF4005).l,a1
0001E78C 5338 FEC2                  		subq.b	#1,(v_ani1_time).w
0001E790 6A00                       		bpl.s	loc_1B2C8
0001E792 11FC 0007 FEC2             		move.b	#7,(v_ani1_time).w
0001E798 5238 FEC3                  		addq.b	#1,(v_ani1_frame).w
0001E79C 0238 0003 FEC3             		andi.b	#3,(v_ani1_frame).w
0001E7A2                            
0001E7A2                            loc_1B2C8:
0001E7A2 1378 FEC3 01D0             		move.b	(v_ani1_frame).w,$1D0(a1)
0001E7A8 5338 FEC4                  		subq.b	#1,(v_ani2_time).w
0001E7AC 6A00                       		bpl.s	loc_1B2E4
0001E7AE 11FC 0007 FEC4             		move.b	#7,(v_ani2_time).w
0001E7B4 5238 FEC5                  		addq.b	#1,(v_ani2_frame).w
0001E7B8 0238 0001 FEC5             		andi.b	#1,(v_ani2_frame).w
0001E7BE                            
0001E7BE                            loc_1B2E4:
0001E7BE 1038 FEC5                  		move.b	(v_ani2_frame).w,d0
0001E7C2 1340 0138                  		move.b	d0,$138(a1)
0001E7C6 1340 0160                  		move.b	d0,$160(a1)
0001E7CA 1340 0148                  		move.b	d0,$148(a1)
0001E7CE 1340 0150                  		move.b	d0,$150(a1)
0001E7D2 1340 01D8                  		move.b	d0,$1D8(a1)
0001E7D6 1340 01E0                  		move.b	d0,$1E0(a1)
0001E7DA 1340 01E8                  		move.b	d0,$1E8(a1)
0001E7DE 1340 01F0                  		move.b	d0,$1F0(a1)
0001E7E2 1340 01F8                  		move.b	d0,$1F8(a1)
0001E7E6 1340 0200                  		move.b	d0,$200(a1)
0001E7EA 5338 FEC6                  		subq.b	#1,(v_ani3_time).w
0001E7EE 6A00                       		bpl.s	loc_1B326
0001E7F0 11FC 0004 FEC6             		move.b	#4,(v_ani3_time).w
0001E7F6 5238 FEC7                  		addq.b	#1,(v_ani3_frame).w
0001E7FA 0238 0003 FEC7             		andi.b	#3,(v_ani3_frame).w
0001E800                            
0001E800                            loc_1B326:
0001E800 1038 FEC7                  		move.b	(v_ani3_frame).w,d0
0001E804 1340 0168                  		move.b	d0,$168(a1)
0001E808 1340 0170                  		move.b	d0,$170(a1)
0001E80C 1340 0178                  		move.b	d0,$178(a1)
0001E810 1340 0180                  		move.b	d0,$180(a1)
0001E814 5338 FEC0                  		subq.b	#1,(v_ani0_time).w
0001E818 6A00                       		bpl.s	loc_1B350
0001E81A 11FC 0007 FEC0             		move.b	#7,(v_ani0_time).w
0001E820 5338 FEC1                  		subq.b	#1,(v_ani0_frame).w
0001E824 0238 0007 FEC1             		andi.b	#7,(v_ani0_frame).w
0001E82A                            
0001E82A                            loc_1B350:
0001E82A 43F9 00FF 4016             		lea	($FF4016).l,a1
0001E830 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001E836 7000                       		moveq	#0,d0
0001E838 1038 FEC1                  		move.b	(v_ani0_frame).w,d0
0001E83C D040                       		add.w	d0,d0
0001E83E 41F0 0000                  		lea	(a0,d0.w),a0
0001E842 3290                       		move.w	(a0),(a1)
0001E844 3368 0002 0008             		move.w	2(a0),8(a1)
0001E84A 3368 0004 0010             		move.w	4(a0),$10(a1)
0001E850 3368 0006 0018             		move.w	6(a0),$18(a1)
0001E856 3368 0008 0020             		move.w	8(a0),$20(a1)
0001E85C 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001E862 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001E868 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001E86E D0FC 0020                  		adda.w	#$20,a0
0001E872 D2FC 0048                  		adda.w	#$48,a1
0001E876 3290                       		move.w	(a0),(a1)
0001E878 3368 0002 0008             		move.w	2(a0),8(a1)
0001E87E 3368 0004 0010             		move.w	4(a0),$10(a1)
0001E884 3368 0006 0018             		move.w	6(a0),$18(a1)
0001E88A 3368 0008 0020             		move.w	8(a0),$20(a1)
0001E890 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001E896 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001E89C 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001E8A2 D0FC 0020                  		adda.w	#$20,a0
0001E8A6 D2FC 0048                  		adda.w	#$48,a1
0001E8AA 3290                       		move.w	(a0),(a1)
0001E8AC 3368 0002 0008             		move.w	2(a0),8(a1)
0001E8B2 3368 0004 0010             		move.w	4(a0),$10(a1)
0001E8B8 3368 0006 0018             		move.w	6(a0),$18(a1)
0001E8BE 3368 0008 0020             		move.w	8(a0),$20(a1)
0001E8C4 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001E8CA 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001E8D0 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001E8D6 D0FC 0020                  		adda.w	#$20,a0
0001E8DA D2FC 0048                  		adda.w	#$48,a1
0001E8DE 3290                       		move.w	(a0),(a1)
0001E8E0 3368 0002 0008             		move.w	2(a0),8(a1)
0001E8E6 3368 0004 0010             		move.w	4(a0),$10(a1)
0001E8EC 3368 0006 0018             		move.w	6(a0),$18(a1)
0001E8F2 3368 0008 0020             		move.w	8(a0),$20(a1)
0001E8F8 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001E8FE 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001E904 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001E90A D0FC 0020                  		adda.w	#$20,a0
0001E90E D2FC 0048                  		adda.w	#$48,a1
0001E912 4E75                       		rts	
0001E914                            ; End of function SS_AniWallsRings
0001E914                            
0001E914                            ; ===========================================================================
0001E914 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001E924 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001E934 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001E944 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001E954 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001E964 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001E974 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001E984 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001E994                            ; ---------------------------------------------------------------------------
0001E994                            ; Subroutine to	remove items when you collect them in the special stage
0001E994                            ; ---------------------------------------------------------------------------
0001E994                            
0001E994                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E994                            
0001E994                            
0001E994                            SS_RemoveCollectedItem:
0001E994 45F9 00FF 4400             		lea	($FF4400).l,a2
0001E99A 303C 001F                  		move.w	#$1F,d0
0001E99E                            
0001E99E                            loc_1B4C4:
0001E99E 4A12                       		tst.b	(a2)
0001E9A0 6700                       		beq.s	locret_1B4CE
0001E9A2 504A                       		addq.w	#8,a2
0001E9A4 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001E9A8                            
0001E9A8                            locret_1B4CE:
0001E9A8 4E75                       		rts	
0001E9AA                            ; End of function SS_RemoveCollectedItem
0001E9AA                            
0001E9AA                            ; ---------------------------------------------------------------------------
0001E9AA                            ; Subroutine to	animate	special	stage items when you touch them
0001E9AA                            ; ---------------------------------------------------------------------------
0001E9AA                            
0001E9AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E9AA                            
0001E9AA                            
0001E9AA                            SS_AniItems:
0001E9AA 41F9 00FF 4400             		lea	($FF4400).l,a0
0001E9B0 3E3C 001F                  		move.w	#$1F,d7
0001E9B4                            
0001E9B4                            loc_1B4DA:
0001E9B4 7000                       		moveq	#0,d0
0001E9B6 1010                       		move.b	(a0),d0
0001E9B8 6700                       		beq.s	loc_1B4E8
0001E9BA E548                       		lsl.w	#2,d0
0001E9BC 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001E9C0 4E91                       		jsr	(a1)
0001E9C2                            
0001E9C2                            loc_1B4E8:
0001E9C2 5048                       		addq.w	#8,a0
0001E9C4                            
0001E9C4                            loc_1B4EA:
0001E9C4 51CF FFEE                  		dbf	d7,loc_1B4DA
0001E9C8                            
0001E9C8 4E75                       		rts	
0001E9CA                            ; End of function SS_AniItems
0001E9CA                            
0001E9CA                            ; ===========================================================================
0001E9CA 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001E9CE 0000 0000                  		dc.l SS_AniBumper
0001E9D2 0000 0000                  		dc.l SS_Ani1Up
0001E9D6 0000 0000                  		dc.l SS_AniReverse
0001E9DA 0000 0000                  		dc.l SS_AniEmeraldSparks
0001E9DE 0000 0000                  		dc.l SS_AniGlassBlock
0001E9E2                            ; ===========================================================================
0001E9E2                            
0001E9E2                            SS_AniRingSparks:
0001E9E2 5328 0002                  		subq.b	#1,2(a0)
0001E9E6 6A00                       		bpl.s	locret_1B530
0001E9E8 117C 0005 0002             		move.b	#5,2(a0)
0001E9EE 7000                       		moveq	#0,d0
0001E9F0 1028 0003                  		move.b	3(a0),d0
0001E9F4 5228 0003                  		addq.b	#1,3(a0)
0001E9F8 2268 0004                  		movea.l	4(a0),a1
0001E9FC 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001EA00 1280                       		move.b	d0,(a1)
0001EA02 6600                       		bne.s	locret_1B530
0001EA04 4290                       		clr.l	(a0)
0001EA06 42A8 0004                  		clr.l	4(a0)
0001EA0A                            
0001EA0A                            locret_1B530:
0001EA0A 4E75                       		rts	
0001EA0C                            ; ===========================================================================
0001EA0C 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001EA12                            ; ===========================================================================
0001EA12                            
0001EA12                            SS_AniBumper:
0001EA12 5328 0002                  		subq.b	#1,2(a0)
0001EA16 6A00                       		bpl.s	locret_1B566
0001EA18 117C 0007 0002             		move.b	#7,2(a0)
0001EA1E 7000                       		moveq	#0,d0
0001EA20 1028 0003                  		move.b	3(a0),d0
0001EA24 5228 0003                  		addq.b	#1,3(a0)
0001EA28 2268 0004                  		movea.l	4(a0),a1
0001EA2C 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001EA30 6600                       		bne.s	loc_1B564
0001EA32 4290                       		clr.l	(a0)
0001EA34 42A8 0004                  		clr.l	4(a0)
0001EA38 12BC 0025                  		move.b	#$25,(a1)
0001EA3C 4E75                       		rts	
0001EA3E                            ; ===========================================================================
0001EA3E                            
0001EA3E                            loc_1B564:
0001EA3E 1280                       		move.b	d0,(a1)
0001EA40                            
0001EA40                            locret_1B566:
0001EA40 4E75                       		rts	
0001EA42                            ; ===========================================================================
0001EA42 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001EA48                            ; ===========================================================================
0001EA48                            
0001EA48                            SS_Ani1Up:
0001EA48 5328 0002                  		subq.b	#1,2(a0)
0001EA4C 6A00                       		bpl.s	locret_1B596
0001EA4E 117C 0005 0002             		move.b	#5,2(a0)
0001EA54 7000                       		moveq	#0,d0
0001EA56 1028 0003                  		move.b	3(a0),d0
0001EA5A 5228 0003                  		addq.b	#1,3(a0)
0001EA5E 2268 0004                  		movea.l	4(a0),a1
0001EA62 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001EA66 1280                       		move.b	d0,(a1)
0001EA68 6600                       		bne.s	locret_1B596
0001EA6A 4290                       		clr.l	(a0)
0001EA6C 42A8 0004                  		clr.l	4(a0)
0001EA70                            
0001EA70                            locret_1B596:
0001EA70 4E75                       		rts	
0001EA72                            ; ===========================================================================
0001EA72 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001EA78                            ; ===========================================================================
0001EA78                            
0001EA78                            SS_AniReverse:
0001EA78 5328 0002                  		subq.b	#1,2(a0)
0001EA7C 6A00                       		bpl.s	locret_1B5CC
0001EA7E 117C 0007 0002             		move.b	#7,2(a0)
0001EA84 7000                       		moveq	#0,d0
0001EA86 1028 0003                  		move.b	3(a0),d0
0001EA8A 5228 0003                  		addq.b	#1,3(a0)
0001EA8E 2268 0004                  		movea.l	4(a0),a1
0001EA92 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001EA96 6600                       		bne.s	loc_1B5CA
0001EA98 4290                       		clr.l	(a0)
0001EA9A 42A8 0004                  		clr.l	4(a0)
0001EA9E 12BC 002B                  		move.b	#$2B,(a1)
0001EAA2 4E75                       		rts	
0001EAA4                            ; ===========================================================================
0001EAA4                            
0001EAA4                            loc_1B5CA:
0001EAA4 1280                       		move.b	d0,(a1)
0001EAA6                            
0001EAA6                            locret_1B5CC:
0001EAA6 4E75                       		rts	
0001EAA8                            ; ===========================================================================
0001EAA8 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001EAAE                            ; ===========================================================================
0001EAAE                            
0001EAAE                            SS_AniEmeraldSparks:
0001EAAE 5328 0002                  		subq.b	#1,2(a0)
0001EAB2 6A00                       		bpl.s	locret_1B60C
0001EAB4 117C 0005 0002             		move.b	#5,2(a0)
0001EABA 7000                       		moveq	#0,d0
0001EABC 1028 0003                  		move.b	3(a0),d0
0001EAC0 5228 0003                  		addq.b	#1,3(a0)
0001EAC4 2268 0004                  		movea.l	4(a0),a1
0001EAC8 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001EACC 1280                       		move.b	d0,(a1)
0001EACE 6600                       		bne.s	locret_1B60C
0001EAD0 4290                       		clr.l	(a0)
0001EAD2 42A8 0004                  		clr.l	4(a0)
0001EAD6 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001EAE6                            
0001EAE6                            locret_1B60C:
0001EAE6 4E75                       		rts	
0001EAE8                            ; ===========================================================================
0001EAE8 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001EAEE                            ; ===========================================================================
0001EAEE                            
0001EAEE                            SS_AniGlassBlock:
0001EAEE 5328 0002                  		subq.b	#1,2(a0)
0001EAF2 6A00                       		bpl.s	locret_1B640
0001EAF4 117C 0001 0002             		move.b	#1,2(a0)
0001EAFA 7000                       		moveq	#0,d0
0001EAFC 1028 0003                  		move.b	3(a0),d0
0001EB00 5228 0003                  		addq.b	#1,3(a0)
0001EB04 2268 0004                  		movea.l	4(a0),a1
0001EB08 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001EB0C 1280                       		move.b	d0,(a1)
0001EB0E 6600                       		bne.s	locret_1B640
0001EB10 12A8 0004                  		move.b	4(a0),(a1)
0001EB14 4290                       		clr.l	(a0)
0001EB16 42A8 0004                  		clr.l	4(a0)
0001EB1A                            
0001EB1A                            locret_1B640:
0001EB1A 4E75                       		rts	
0001EB1C                            ; ===========================================================================
0001EB1C 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001EB26                            
0001EB26                            ; ---------------------------------------------------------------------------
0001EB26                            ; Special stage	layout pointers
0001EB26                            ; ---------------------------------------------------------------------------
0001EB26                            SS_LayoutIndex:
0001EB26 0000 0000                  		dc.l SS_1
0001EB2A 0000 0000                  		dc.l SS_2
0001EB2E 0000 0000                  		dc.l SS_3
0001EB32 0000 0000                  		dc.l SS_4
0001EB36 0000 0000                  		dc.l SS_5
0001EB3A 0000 0000                  		dc.l SS_6
0001EB3E                            		even
0001EB3E                            
0001EB3E                            ; ---------------------------------------------------------------------------
0001EB3E                            ; Special stage start locations
0001EB3E                            ; ---------------------------------------------------------------------------
0001EB3E                            SS_StartLoc:	include	"_inc\Start Location Array - Special Stages.asm"
0001EB3E                            ; ---------------------------------------------------------------------------
0001EB3E                            ; Special stage start locations
0001EB3E                            ; ---------------------------------------------------------------------------
0001EB3E                            
0001EB3E                            		incbin	"startpos\ss1.bin"
0001EB42                            		incbin	"startpos\ss2.bin"
0001EB46                            		incbin	"startpos\ss3.bin"
0001EB4A                            		incbin	"startpos\ss4.bin"
0001EB4E                            		incbin	"startpos\ss5.bin"
0001EB52                            		incbin	"startpos\ss6.bin"
0001EB56                            		even
0001EB56                            		even
0001EB56                            
0001EB56                            ; ---------------------------------------------------------------------------
0001EB56                            ; Subroutine to	load special stage layout
0001EB56                            ; ---------------------------------------------------------------------------
0001EB56                            
0001EB56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EB56                            
0001EB56                            
0001EB56                            SS_Load:
0001EB56 7000                       		moveq	#0,d0
0001EB58 1038 FE16                  		move.b	(v_lastspecial).w,d0 ; load number of last special stage entered
0001EB5C 5238 FE16                  		addq.b	#1,(v_lastspecial).w
0001EB60 0C38 0006 FE16             		cmpi.b	#6,(v_lastspecial).w
0001EB66 6500                       		blo.s	SS_ChkEmldNum
0001EB68 11FC 0000 FE16             		move.b	#0,(v_lastspecial).w ; reset if higher than 6
0001EB6E                            
0001EB6E                            SS_ChkEmldNum:
0001EB6E 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all emeralds?
0001EB74 6700                       		beq.s	SS_LoadData	; if yes, branch
0001EB76 7200                       		moveq	#0,d1
0001EB78 1238 FE57                  		move.b	(v_emeralds).w,d1
0001EB7C 5301                       		subq.b	#1,d1
0001EB7E 6500                       		blo.s	SS_LoadData
0001EB80 47F8 FE58                  		lea	(v_emldlist).w,a3 ; check which emeralds you have
0001EB84                            
0001EB84                            SS_ChkEmldLoop:	
0001EB84 B033 1000                  		cmp.b	(a3,d1.w),d0
0001EB88 6600                       		bne.s	SS_ChkEmldRepeat
0001EB8A 60CA                       		bra.s	SS_Load
0001EB8C                            ; ===========================================================================
0001EB8C                            
0001EB8C                            SS_ChkEmldRepeat:
0001EB8C 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001EB90                            
0001EB90                            SS_LoadData:
0001EB90 E548                       		lsl.w	#2,d0
0001EB92 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001EB96 31D9 D008                  		move.w	(a1)+,(v_player+obX).w
0001EB9A 31D9 D00C                  		move.w	(a1)+,(v_player+obY).w
0001EB9E 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001EBA2 43F9 00FF 4000             		lea	($FF4000).l,a1
0001EBA8 303C 0000                  		move.w	#0,d0
0001EBAC 4EB9 0000 1888             		jsr	(EniDec).l
0001EBB2 43F9 00FF 0000             		lea	($FF0000).l,a1
0001EBB8 303C 0FFF                  		move.w	#$FFF,d0
0001EBBC                            
0001EBBC                            SS_ClrRAM3:
0001EBBC 4299                       		clr.l	(a1)+
0001EBBE 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001EBC2                            
0001EBC2 43F9 00FF 1020             		lea	($FF1020).l,a1
0001EBC8 41F9 00FF 4000             		lea	($FF4000).l,a0
0001EBCE 723F                       		moveq	#$3F,d1
0001EBD0                            
0001EBD0                            loc_1B6F6:
0001EBD0 743F                       		moveq	#$3F,d2
0001EBD2                            
0001EBD2                            loc_1B6F8:
0001EBD2 12D8                       		move.b	(a0)+,(a1)+
0001EBD4 51CA FFFC                  		dbf	d2,loc_1B6F8
0001EBD8                            
0001EBD8 43E9 0040                  		lea	$40(a1),a1
0001EBDC 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001EBE0                            
0001EBE0 43F9 00FF 4008             		lea	($FF4008).l,a1
0001EBE6 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001EBEC 724D                       		moveq	#$4D,d1
0001EBEE                            
0001EBEE                            loc_1B714:
0001EBEE 22D8                       		move.l	(a0)+,(a1)+
0001EBF0 32FC 0000                  		move.w	#0,(a1)+
0001EBF4 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001EBFA 32D8                       		move.w	(a0)+,(a1)+
0001EBFC 51C9 FFF0                  		dbf	d1,loc_1B714
0001EC00                            
0001EC00 43F9 00FF 4400             		lea	($FF4400).l,a1
0001EC06 323C 003F                  		move.w	#$3F,d1
0001EC0A                            
0001EC0A                            loc_1B730:
0001EC0A                            
0001EC0A 4299                       		clr.l	(a1)+
0001EC0C 51C9 FFFC                  		dbf	d1,loc_1B730
0001EC10                            
0001EC10 4E75                       		rts	
0001EC12                            ; End of function SS_Load
0001EC12                            
0001EC12                            ; ===========================================================================
0001EC12                            
0001EC12                            SS_MapIndex:
0001EC12                            		include	"_inc\Special Stage Mappings & VRAM Pointers.asm"
0001EC12                            ; ---------------------------------------------------------------------------
0001EC12                            ; Special stage	mappings and VRAM pointers
0001EC12                            ; ---------------------------------------------------------------------------
0001EC12 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001EC16 0142                       	dc.w $142		; VRAM setting
0001EC18 0000 0000                  	dc.l Map_SSWalls
0001EC1C 0142                       	dc.w $142
0001EC1E 0000 0000                  	dc.l Map_SSWalls
0001EC22 0142                       	dc.w $142
0001EC24 0000 0000                  	dc.l Map_SSWalls
0001EC28 0142                       	dc.w $142
0001EC2A 0000 0000                  	dc.l Map_SSWalls
0001EC2E 0142                       	dc.w $142
0001EC30 0000 0000                  	dc.l Map_SSWalls
0001EC34 0142                       	dc.w $142
0001EC36 0000 0000                  	dc.l Map_SSWalls
0001EC3A 0142                       	dc.w $142
0001EC3C 0000 0000                  	dc.l Map_SSWalls
0001EC40 0142                       	dc.w $142
0001EC42 0000 0000                  	dc.l Map_SSWalls
0001EC46 0142                       	dc.w $142
0001EC48 0000 0000                  	dc.l Map_SSWalls
0001EC4C 2142                       	dc.w $2142
0001EC4E 0000 0000                  	dc.l Map_SSWalls
0001EC52 2142                       	dc.w $2142
0001EC54 0000 0000                  	dc.l Map_SSWalls
0001EC58 2142                       	dc.w $2142
0001EC5A 0000 0000                  	dc.l Map_SSWalls
0001EC5E 2142                       	dc.w $2142
0001EC60 0000 0000                  	dc.l Map_SSWalls
0001EC64 2142                       	dc.w $2142
0001EC66 0000 0000                  	dc.l Map_SSWalls
0001EC6A 2142                       	dc.w $2142
0001EC6C 0000 0000                  	dc.l Map_SSWalls
0001EC70 2142                       	dc.w $2142
0001EC72 0000 0000                  	dc.l Map_SSWalls
0001EC76 2142                       	dc.w $2142
0001EC78 0000 0000                  	dc.l Map_SSWalls
0001EC7C 2142                       	dc.w $2142
0001EC7E 0000 0000                  	dc.l Map_SSWalls
0001EC82 4142                       	dc.w $4142
0001EC84 0000 0000                  	dc.l Map_SSWalls
0001EC88 4142                       	dc.w $4142
0001EC8A 0000 0000                  	dc.l Map_SSWalls
0001EC8E 4142                       	dc.w $4142
0001EC90 0000 0000                  	dc.l Map_SSWalls
0001EC94 4142                       	dc.w $4142
0001EC96 0000 0000                  	dc.l Map_SSWalls
0001EC9A 4142                       	dc.w $4142
0001EC9C 0000 0000                  	dc.l Map_SSWalls
0001ECA0 4142                       	dc.w $4142
0001ECA2 0000 0000                  	dc.l Map_SSWalls
0001ECA6 4142                       	dc.w $4142
0001ECA8 0000 0000                  	dc.l Map_SSWalls
0001ECAC 4142                       	dc.w $4142
0001ECAE 0000 0000                  	dc.l Map_SSWalls
0001ECB2 4142                       	dc.w $4142
0001ECB4 0000 0000                  	dc.l Map_SSWalls
0001ECB8 6142                       	dc.w $6142
0001ECBA 0000 0000                  	dc.l Map_SSWalls
0001ECBE 6142                       	dc.w $6142
0001ECC0 0000 0000                  	dc.l Map_SSWalls
0001ECC4 6142                       	dc.w $6142
0001ECC6 0000 0000                  	dc.l Map_SSWalls
0001ECCA 6142                       	dc.w $6142
0001ECCC 0000 0000                  	dc.l Map_SSWalls
0001ECD0 6142                       	dc.w $6142
0001ECD2 0000 0000                  	dc.l Map_SSWalls
0001ECD6 6142                       	dc.w $6142
0001ECD8 0000 0000                  	dc.l Map_SSWalls
0001ECDC 6142                       	dc.w $6142
0001ECDE 0000 0000                  	dc.l Map_SSWalls
0001ECE2 6142                       	dc.w $6142
0001ECE4 0000 0000                  	dc.l Map_SSWalls
0001ECE8 6142                       	dc.w $6142
0001ECEA 0001 0E9C                  	dc.l Map_Bump
0001ECEE 023B                       	dc.w $23B
0001ECF0 0000 0000                  	dc.l Map_SS_R
0001ECF4 0570                       	dc.w $570
0001ECF6 0000 0000                  	dc.l Map_SS_R
0001ECFA 0251                       	dc.w $251
0001ECFC 0000 0000                  	dc.l Map_SS_R
0001ED00 0370                       	dc.w $370
0001ED02 0000 0000                  	dc.l Map_SS_Up
0001ED06 0263                       	dc.w $263
0001ED08 0000 0000                  	dc.l Map_SS_Down
0001ED0C 0263                       	dc.w $263
0001ED0E 0000 0000                  	dc.l Map_SS_R
0001ED12 22F0                       	dc.w $22F0
0001ED14 0000 0000                  	dc.l Map_SS_Glass
0001ED18 0470                       	dc.w $470
0001ED1A 0000 0000                  	dc.l Map_SS_Glass
0001ED1E 05F0                       	dc.w $5F0
0001ED20 0000 0000                  	dc.l Map_SS_Glass
0001ED24 65F0                       	dc.w $65F0
0001ED26 0000 0000                  	dc.l Map_SS_Glass
0001ED2A 25F0                       	dc.w $25F0
0001ED2C 0000 0000                  	dc.l Map_SS_Glass
0001ED30 45F0                       	dc.w $45F0
0001ED32 0000 0000                  	dc.l Map_SS_R
0001ED36 02F0                       	dc.w $2F0
0001ED38 0101 0E9C                  	dc.l Map_Bump+$1000000	; add frame no.	* $1000000
0001ED3C 023B                       	dc.w $23B
0001ED3E 0201 0E9C                  	dc.l Map_Bump+$2000000
0001ED42 023B                       	dc.w $23B
0001ED44 0000 0000                  	dc.l Map_SS_R
0001ED48 0797                       	dc.w $797
0001ED4A 0000 0000                  	dc.l Map_SS_R
0001ED4E 07A0                       	dc.w $7A0
0001ED50 0000 0000                  	dc.l Map_SS_R
0001ED54 07A9                       	dc.w $7A9
0001ED56 0000 0000                  	dc.l Map_SS_R
0001ED5A 0797                       	dc.w $797
0001ED5C 0000 0000                  	dc.l Map_SS_R
0001ED60 07A0                       	dc.w $7A0
0001ED62 0000 0000                  	dc.l Map_SS_R
0001ED66 07A9                       	dc.w $7A9
0001ED68 0000 BFD4                  	dc.l Map_Ring
0001ED6C 2798                       	dc.w $2798
0001ED6E 0000 0000                  	dc.l Map_SS_Chaos3
0001ED72 0770                       	dc.w $770
0001ED74 0000 0000                  	dc.l Map_SS_Chaos3
0001ED78 2770                       	dc.w $2770
0001ED7A 0000 0000                  	dc.l Map_SS_Chaos3
0001ED7E 4770                       	dc.w $4770
0001ED80 0000 0000                  	dc.l Map_SS_Chaos3
0001ED84 6770                       	dc.w $6770
0001ED86 0000 0000                  	dc.l Map_SS_Chaos1
0001ED8A 0770                       	dc.w $770
0001ED8C 0000 0000                  	dc.l Map_SS_Chaos2
0001ED90 0770                       	dc.w $770
0001ED92 0000 0000                  	dc.l Map_SS_R
0001ED96 04F0                       	dc.w $4F0
0001ED98 0400 BFD4                  	dc.l Map_Ring+$4000000
0001ED9C 2798                       	dc.w $2798
0001ED9E 0500 BFD4                  	dc.l Map_Ring+$5000000
0001EDA2 2798                       	dc.w $2798
0001EDA4 0600 BFD4                  	dc.l Map_Ring+$6000000
0001EDA8 2798                       	dc.w $2798
0001EDAA 0700 BFD4                  	dc.l Map_Ring+$7000000
0001EDAE 2798                       	dc.w $2798
0001EDB0 0000 0000                  	dc.l Map_SS_Glass
0001EDB4 23F0                       	dc.w $23F0
0001EDB6 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001EDBA 23F0                       	dc.w $23F0
0001EDBC 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001EDC0 23F0                       	dc.w $23F0
0001EDC2 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001EDC6 23F0                       	dc.w $23F0
0001EDC8 0000 0000                  	dc.l Map_SS_R+$2000000
0001EDCC 04F0                       	dc.w $4F0
0001EDCE 0000 0000                  	dc.l Map_SS_Glass
0001EDD2 05F0                       	dc.w $5F0
0001EDD4 0000 0000                  	dc.l Map_SS_Glass
0001EDD8 65F0                       	dc.w $65F0
0001EDDA 0000 0000                  	dc.l Map_SS_Glass
0001EDDE 25F0                       	dc.w $25F0
0001EDE0 0000 0000                  	dc.l Map_SS_Glass
0001EDE4 45F0                       	dc.w $45F0
0001EDE4 45F0                       	dc.w $45F0
0001EDE6                            
0001EDE6                            Map_SS_R:	include	"_maps\SS R Block.asm"
0001EDE6                            ; ---------------------------------------------------------------------------
0001EDE6                            ; Sprite mappings - special stage "R" block
0001EDE6                            ; ---------------------------------------------------------------------------
0001EDE6                            Map_SS_R_internal:
0001EDE6 0000                       		dc.w byte_1B912-Map_SS_R_internal
0001EDE8 0000                       		dc.w byte_1B918-Map_SS_R_internal
0001EDEA 0000                       		dc.w byte_1B91E-Map_SS_R_internal
0001EDEC 01                         byte_1B912:	dc.b 1
0001EDED F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001EDF2 01                         byte_1B918:	dc.b 1
0001EDF3 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001EDF8 00                         byte_1B91E:	dc.b 0
0001EDFA 00                         		even
0001EDFA 00                         		even
0001EDFA                            Map_SS_Glass:	include	"_maps\SS Glass Block.asm"
0001EDFA                            ; ---------------------------------------------------------------------------
0001EDFA                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001EDFA                            ; ---------------------------------------------------------------------------
0001EDFA                            Map_SS_Glass_internal:
0001EDFA 0000                       		dc.w byte_1B928-Map_SS_Glass_internal
0001EDFC 0000                       		dc.w byte_1B92E-Map_SS_Glass_internal
0001EDFE 0000                       		dc.w byte_1B934-Map_SS_Glass_internal
0001EE00 0000                       		dc.w byte_1B93A-Map_SS_Glass_internal
0001EE02 01                         byte_1B928:	dc.b 1
0001EE03 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001EE08 01                         byte_1B92E:	dc.b 1
0001EE09 F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001EE0E 01                         byte_1B934:	dc.b 1
0001EE0F F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001EE14 01                         byte_1B93A:	dc.b 1
0001EE15 F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001EE1A                            		even
0001EE1A                            		even
0001EE1A                            Map_SS_Up:	include	"_maps\SS UP Block.asm"
0001EE1A                            ; ---------------------------------------------------------------------------
0001EE1A                            ; Sprite mappings - special stage "UP" block
0001EE1A                            ; ---------------------------------------------------------------------------
0001EE1A                            Map_SS_Up_internal:
0001EE1A 0000                       		dc.w byte_1B944-Map_SS_Up_internal
0001EE1C 0000                       		dc.w byte_1B94A-Map_SS_Up_internal
0001EE1E 01                         byte_1B944:	dc.b 1
0001EE1F F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001EE24 01                         byte_1B94A:	dc.b 1
0001EE25 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001EE2A                            		even
0001EE2A                            		even
0001EE2A                            Map_SS_Down:	include	"_maps\SS DOWN Block.asm"
0001EE2A                            ; ---------------------------------------------------------------------------
0001EE2A                            ; Sprite mappings - special stage "DOWN" block
0001EE2A                            ; ---------------------------------------------------------------------------
0001EE2A                            Map_SS_Down_internal:
0001EE2A 0000                       		dc.w byte_1B954-Map_SS_Down_internal
0001EE2C 0000                       		dc.w byte_1B95A-Map_SS_Down_internal
0001EE2E 01                         byte_1B954:	dc.b 1
0001EE2F F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001EE34 01                         byte_1B95A:	dc.b 1
0001EE35 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001EE3A                            		even
0001EE3A                            		even
0001EE3A                            		include	"_maps\SS Chaos Emeralds.asm"
0001EE3A                            ; ---------------------------------------------------------------------------
0001EE3A                            ; Sprite mappings - special stage chaos	emeralds
0001EE3A                            ; ---------------------------------------------------------------------------
0001EE3A 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001EE3C 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001EE3E 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001EE40 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001EE42 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001EE44 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001EE46 01                         byte_1B96C:	dc.b 1
0001EE47 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001EE4C 01                         byte_1B972:	dc.b 1
0001EE4D F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0001EE52 01                         byte_1B978:	dc.b 1
0001EE53 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001EE58 01                         byte_1B97E:	dc.b 1
0001EE59 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001EE5E                            		even
0001EE5E                            		even
0001EE5E                            
0001EE5E                            		include	"_incObj\09 Sonic in Special Stage.asm"
0001EE5E                            ; ---------------------------------------------------------------------------
0001EE5E                            ; Object 09 - Sonic (special stage)
0001EE5E                            ; ---------------------------------------------------------------------------
0001EE5E                            
0001EE5E                            SonicSpecial:
0001EE5E 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
0001EE62 6700                       		beq.s	Obj09_Normal	; if not, branch
0001EE64 6100 0000                  		bsr.w	SS_FixCamera
0001EE68 6000 0000                  		bra.w	DebugMode
0001EE6C                            ; ===========================================================================
0001EE6C                            
0001EE6C                            Obj09_Normal:
0001EE6C 7000                       		moveq	#0,d0
0001EE6E 1028 0024                  		move.b	obRoutine(a0),d0
0001EE72 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001EE76 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001EE7A                            ; ===========================================================================
0001EE7A 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001EE7C 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001EE7E 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001EE80 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001EE82                            ; ===========================================================================
0001EE82                            
0001EE82                            Obj09_Main:	; Routine 0
0001EE82 5428 0024                  		addq.b	#2,obRoutine(a0)
0001EE86 117C 000E 0016             		move.b	#$E,obHeight(a0)
0001EE8C 117C 0007 0017             		move.b	#7,obWidth(a0)
0001EE92 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
0001EE9A 317C 0780 0002             		move.w	#$780,obGfx(a0)
0001EEA0 117C 0004 0001             		move.b	#4,obRender(a0)
0001EEA6 317C 0000 0018             		move.w	#0,obPriority(a0)
0001EEAC 117C 0002 001C             		move.b	#id_Roll,obAnim(a0)
0001EEB2 08E8 0002 0022             		bset	#2,obStatus(a0)
0001EEB8 08E8 0001 0022             		bset	#1,obStatus(a0)
0001EEBE                            
0001EEBE                            Obj09_ChkDebug:	; Routine 2
0001EEBE 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug mode	cheat enabled?
0001EEC2 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001EEC4 0838 0004 F605             		btst	#bitB,(v_jpadpress1).w ; is button B pressed?
0001EECA 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001EECC 31FC 0001 FE08             		move.w	#1,(v_debuguse).w ; change Sonic into a ring
0001EED2                            
0001EED2                            Obj09_NoDebug:
0001EED2 117C 0000 0030             		move.b	#0,$30(a0)
0001EED8 7000                       		moveq	#0,d0
0001EEDA 1028 0022                  		move.b	obStatus(a0),d0
0001EEDE 0240 0002                  		andi.w	#2,d0
0001EEE2 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001EEE6 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001EEEA 4EB9 0001 6986             		jsr	(Sonic_LoadGfx).l
0001EEF0 4EF9 0000 F978             		jmp	(DisplaySprite).l
0001EEF6                            ; ===========================================================================
0001EEF6 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001EEF8 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001EEFA                            ; ===========================================================================
0001EEFA                            
0001EEFA                            Obj09_OnWall:
0001EEFA 6100 0000                  		bsr.w	Obj09_Jump
0001EEFE 6100 0000                  		bsr.w	Obj09_Move
0001EF02 6100 0000                  		bsr.w	Obj09_Fall
0001EF06 6000                       		bra.s	Obj09_Display
0001EF08                            ; ===========================================================================
0001EF08                            
0001EF08                            Obj09_InAir:
0001EF08 6100 0000                  		bsr.w	nullsub_2
0001EF0C 6100 0000                  		bsr.w	Obj09_Move
0001EF10 6100 0000                  		bsr.w	Obj09_Fall
0001EF14                            
0001EF14                            Obj09_Display:
0001EF14 6100 0000                  		bsr.w	Obj09_ChkItems
0001EF18 6100 0000                  		bsr.w	Obj09_ChkItems2
0001EF1C 4EB9 0000 F964             		jsr	(SpeedToPos).l
0001EF22 6100 0000                  		bsr.w	SS_FixCamera
0001EF26 3038 F780                  		move.w	(v_ssangle).w,d0
0001EF2A D078 F782                  		add.w	(v_ssrotate).w,d0
0001EF2E 31C0 F780                  		move.w	d0,(v_ssangle).w
0001EF32 4EB9 0001 65EE             		jsr	(Sonic_Animate).l
0001EF38 4E75                       		rts	
0001EF3A                            
0001EF3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EF3A                            
0001EF3A                            
0001EF3A                            Obj09_Move:
0001EF3A 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
0001EF40 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001EF42 6100 0000                  		bsr.w	Obj09_MoveLeft
0001EF46                            
0001EF46                            Obj09_ChkRight:
0001EF46 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
0001EF4C 6700                       		beq.s	loc_1BA78	; if not, branch
0001EF4E 6100 0000                  		bsr.w	Obj09_MoveRight
0001EF52                            
0001EF52                            loc_1BA78:
0001EF52 1038 F602                  		move.b	(v_jpadhold2).w,d0
0001EF56 0200 000C                  		andi.b	#btnL+btnR,d0
0001EF5A 6600                       		bne.s	loc_1BAA8
0001EF5C 3028 0020                  		move.w	obInertia(a0),d0
0001EF60 6700                       		beq.s	loc_1BAA8
0001EF62 6B00                       		bmi.s	loc_1BA9A
0001EF64 0440 000C                  		subi.w	#$C,d0
0001EF68 6400                       		bcc.s	loc_1BA94
0001EF6A 303C 0000                  		move.w	#0,d0
0001EF6E                            
0001EF6E                            loc_1BA94:
0001EF6E 3140 0020                  		move.w	d0,obInertia(a0)
0001EF72 6000                       		bra.s	loc_1BAA8
0001EF74                            ; ===========================================================================
0001EF74                            
0001EF74                            loc_1BA9A:
0001EF74 0640 000C                  		addi.w	#$C,d0
0001EF78 6400                       		bcc.s	loc_1BAA4
0001EF7A 303C 0000                  		move.w	#0,d0
0001EF7E                            
0001EF7E                            loc_1BAA4:
0001EF7E 3140 0020                  		move.w	d0,obInertia(a0)
0001EF82                            
0001EF82                            loc_1BAA8:
0001EF82 1038 F780                  		move.b	(v_ssangle).w,d0
0001EF86 0600 0020                  		addi.b	#$20,d0
0001EF8A 0200 00C0                  		andi.b	#$C0,d0
0001EF8E 4400                       		neg.b	d0
0001EF90 4EB9 0000 3A32             		jsr	(CalcSine).l
0001EF96 C3E8 0020                  		muls.w	obInertia(a0),d1
0001EF9A D3A8 0008                  		add.l	d1,obX(a0)
0001EF9E C1E8 0020                  		muls.w	obInertia(a0),d0
0001EFA2 D1A8 000C                  		add.l	d0,obY(a0)
0001EFA6 48E7 C000                  		movem.l	d0-d1,-(sp)
0001EFAA 2428 000C                  		move.l	obY(a0),d2
0001EFAE 2628 0008                  		move.l	obX(a0),d3
0001EFB2 6100 0000                  		bsr.w	sub_1BCE8
0001EFB6 6700                       		beq.s	loc_1BAF2
0001EFB8 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001EFBC 93A8 0008                  		sub.l	d1,obX(a0)
0001EFC0 91A8 000C                  		sub.l	d0,obY(a0)
0001EFC4 317C 0000 0020             		move.w	#0,obInertia(a0)
0001EFCA 4E75                       		rts	
0001EFCC                            ; ===========================================================================
0001EFCC                            
0001EFCC                            loc_1BAF2:
0001EFCC 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001EFD0 4E75                       		rts	
0001EFD2                            ; End of function Obj09_Move
0001EFD2                            
0001EFD2                            
0001EFD2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EFD2                            
0001EFD2                            
0001EFD2                            Obj09_MoveLeft:
0001EFD2 08E8 0000 0022             		bset	#0,obStatus(a0)
0001EFD8 3028 0020                  		move.w	obInertia(a0),d0
0001EFDC 6700                       		beq.s	loc_1BB06
0001EFDE 6A00                       		bpl.s	loc_1BB1A
0001EFE0                            
0001EFE0                            loc_1BB06:
0001EFE0 0440 000C                  		subi.w	#$C,d0
0001EFE4 0C40 F800                  		cmpi.w	#-$800,d0
0001EFE8 6E00                       		bgt.s	loc_1BB14
0001EFEA 303C F800                  		move.w	#-$800,d0
0001EFEE                            
0001EFEE                            loc_1BB14:
0001EFEE 3140 0020                  		move.w	d0,obInertia(a0)
0001EFF2 4E75                       		rts	
0001EFF4                            ; ===========================================================================
0001EFF4                            
0001EFF4                            loc_1BB1A:
0001EFF4 0440 0040                  		subi.w	#$40,d0
0001EFF8 6400                       		bcc.s	loc_1BB22
0001EFFA 4E71                       		nop	
0001EFFC                            
0001EFFC                            loc_1BB22:
0001EFFC 3140 0020                  		move.w	d0,obInertia(a0)
0001F000 4E75                       		rts	
0001F002                            ; End of function Obj09_MoveLeft
0001F002                            
0001F002                            
0001F002                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F002                            
0001F002                            
0001F002                            Obj09_MoveRight:
0001F002 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001F008 3028 0020                  		move.w	obInertia(a0),d0
0001F00C 6B00                       		bmi.s	loc_1BB48
0001F00E 0640 000C                  		addi.w	#$C,d0
0001F012 0C40 0800                  		cmpi.w	#$800,d0
0001F016 6D00                       		blt.s	loc_1BB42
0001F018 303C 0800                  		move.w	#$800,d0
0001F01C                            
0001F01C                            loc_1BB42:
0001F01C 3140 0020                  		move.w	d0,obInertia(a0)
0001F020 6000                       		bra.s	locret_1BB54
0001F022                            ; ===========================================================================
0001F022                            
0001F022                            loc_1BB48:
0001F022 0640 0040                  		addi.w	#$40,d0
0001F026 6400                       		bcc.s	loc_1BB50
0001F028 4E71                       		nop	
0001F02A                            
0001F02A                            loc_1BB50:
0001F02A 3140 0020                  		move.w	d0,obInertia(a0)
0001F02E                            
0001F02E                            locret_1BB54:
0001F02E 4E75                       		rts	
0001F030                            ; End of function Obj09_MoveRight
0001F030                            
0001F030                            
0001F030                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F030                            
0001F030                            
0001F030                            Obj09_Jump:
0001F030 1038 F603                  		move.b	(v_jpadpress2).w,d0
0001F034 0200 0070                  		andi.b	#btnABC,d0	; is A,	B or C pressed?
0001F038 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001F03A 1038 F780                  		move.b	(v_ssangle).w,d0
0001F03E 0200 00FC                  		andi.b	#$FC,d0
0001F042 4400                       		neg.b	d0
0001F044 0400 0040                  		subi.b	#$40,d0
0001F048 4EB9 0000 3A32             		jsr	(CalcSine).l
0001F04E C3FC 0680                  		muls.w	#$680,d1
0001F052 E081                       		asr.l	#8,d1
0001F054 3141 0010                  		move.w	d1,obVelX(a0)
0001F058 C1FC 0680                  		muls.w	#$680,d0
0001F05C E080                       		asr.l	#8,d0
0001F05E 3140 0012                  		move.w	d0,obVelY(a0)
0001F062 08E8 0001 0022             		bset	#1,obStatus(a0)
0001F072                            
0001F072                            Obj09_NoJump:
0001F072 4E75                       		rts	
0001F074                            ; End of function Obj09_Jump
0001F074                            
0001F074                            
0001F074                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F074                            
0001F074                            
0001F074                            nullsub_2:
0001F074 4E75                       		rts	
0001F076                            ; End of function nullsub_2
0001F076                            
0001F076                            ; ===========================================================================
0001F076                            ; ---------------------------------------------------------------------------
0001F076                            ; unused subroutine to limit Sonic's upward vertical speed
0001F076                            ; ---------------------------------------------------------------------------
0001F076 323C FC00                  		move.w	#-$400,d1
0001F07A B268 0012                  		cmp.w	obVelY(a0),d1
0001F07E 6F00                       		ble.s	locret_1BBB4
0001F080 1038 F602                  		move.b	(v_jpadhold2).w,d0
0001F084 0200 0070                  		andi.b	#btnABC,d0
0001F088 6600                       		bne.s	locret_1BBB4
0001F08A 3141 0012                  		move.w	d1,obVelY(a0)
0001F08E                            
0001F08E                            locret_1BBB4:
0001F08E 4E75                       		rts	
0001F090                            ; ---------------------------------------------------------------------------
0001F090                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001F090                            ; ---------------------------------------------------------------------------
0001F090                            
0001F090                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F090                            
0001F090                            
0001F090                            SS_FixCamera:
0001F090 3428 000C                  		move.w	obY(a0),d2
0001F094 3628 0008                  		move.w	obX(a0),d3
0001F098 3038 F700                  		move.w	(v_screenposx).w,d0
0001F09C 0443 00A0                  		subi.w	#$A0,d3
0001F0A0 6500                       		bcs.s	loc_1BBCE
0001F0A2 9043                       		sub.w	d3,d0
0001F0A4 9178 F700                  		sub.w	d0,(v_screenposx).w
0001F0A8                            
0001F0A8                            loc_1BBCE:
0001F0A8 3038 F704                  		move.w	(v_screenposy).w,d0
0001F0AC 0442 0070                  		subi.w	#$70,d2
0001F0B0 6500                       		bcs.s	locret_1BBDE
0001F0B2 9042                       		sub.w	d2,d0
0001F0B4 9178 F704                  		sub.w	d0,(v_screenposy).w
0001F0B8                            
0001F0B8                            locret_1BBDE:
0001F0B8 4E75                       		rts	
0001F0BA                            ; End of function SS_FixCamera
0001F0BA                            
0001F0BA                            ; ===========================================================================
0001F0BA                            
0001F0BA                            Obj09_ExitStage:
0001F0BA 0678 0040 F782             		addi.w	#$40,(v_ssrotate).w
0001F0C0 0C78 1800 F782             		cmpi.w	#$1800,(v_ssrotate).w
0001F0C6 6600                       		bne.s	loc_1BBF4
0001F0C8 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w
0001F0CE                            
0001F0CE                            loc_1BBF4:
0001F0CE 0C78 3000 F782             		cmpi.w	#$3000,(v_ssrotate).w
0001F0D4 6D00                       		blt.s	loc_1BC12
0001F0D6 31FC 0000 F782             		move.w	#0,(v_ssrotate).w
0001F0DC 31FC 4000 F780             		move.w	#$4000,(v_ssangle).w
0001F0E2 5428 0024                  		addq.b	#2,obRoutine(a0)
0001F0E6 317C 003C 0038             		move.w	#$3C,$38(a0)
0001F0EC                            
0001F0EC                            loc_1BC12:
0001F0EC 3038 F780                  		move.w	(v_ssangle).w,d0
0001F0F0 D078 F782                  		add.w	(v_ssrotate).w,d0
0001F0F4 31C0 F780                  		move.w	d0,(v_ssangle).w
0001F0F8 4EB9 0001 65EE             		jsr	(Sonic_Animate).l
0001F0FE 4EB9 0001 6986             		jsr	(Sonic_LoadGfx).l
0001F104 6100 FF8A                  		bsr.w	SS_FixCamera
0001F108 4EF9 0000 F978             		jmp	(DisplaySprite).l
0001F10E                            ; ===========================================================================
0001F10E                            
0001F10E                            Obj09_Exit2:
0001F10E 5368 0038                  		subq.w	#1,$38(a0)
0001F112 6600                       		bne.s	loc_1BC40
0001F114 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w
0001F11A                            
0001F11A                            loc_1BC40:
0001F11A 4EB9 0001 65EE             		jsr	(Sonic_Animate).l
0001F120 4EB9 0001 6986             		jsr	(Sonic_LoadGfx).l
0001F126 6100 FF68                  		bsr.w	SS_FixCamera
0001F12A 4EF9 0000 F978             		jmp	(DisplaySprite).l
0001F130                            
0001F130                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F130                            
0001F130                            
0001F130                            Obj09_Fall:
0001F130 2428 000C                  		move.l	obY(a0),d2
0001F134 2628 0008                  		move.l	obX(a0),d3
0001F138 1038 F780                  		move.b	(v_ssangle).w,d0
0001F13C 0200 00FC                  		andi.b	#$FC,d0
0001F140 4EB9 0000 3A32             		jsr	(CalcSine).l
0001F146 3828 0010                  		move.w	obVelX(a0),d4
0001F14A 48C4                       		ext.l	d4
0001F14C E184                       		asl.l	#8,d4
0001F14E C1FC 002A                  		muls.w	#$2A,d0
0001F152 D084                       		add.l	d4,d0
0001F154 3828 0012                  		move.w	obVelY(a0),d4
0001F158 48C4                       		ext.l	d4
0001F15A E184                       		asl.l	#8,d4
0001F15C C3FC 002A                  		muls.w	#$2A,d1
0001F160 D284                       		add.l	d4,d1
0001F162 D680                       		add.l	d0,d3
0001F164 6100 0000                  		bsr.w	sub_1BCE8
0001F168 6700                       		beq.s	loc_1BCB0
0001F16A 9680                       		sub.l	d0,d3
0001F16C 7000                       		moveq	#0,d0
0001F16E 3140 0010                  		move.w	d0,obVelX(a0)
0001F172 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001F178 D481                       		add.l	d1,d2
0001F17A 6100 0000                  		bsr.w	sub_1BCE8
0001F17E 6700                       		beq.s	loc_1BCC6
0001F180 9481                       		sub.l	d1,d2
0001F182 7200                       		moveq	#0,d1
0001F184 3141 0012                  		move.w	d1,obVelY(a0)
0001F188 4E75                       		rts	
0001F18A                            ; ===========================================================================
0001F18A                            
0001F18A                            loc_1BCB0:
0001F18A D481                       		add.l	d1,d2
0001F18C 6100 0000                  		bsr.w	sub_1BCE8
0001F190 6700                       		beq.s	loc_1BCD4
0001F192 9481                       		sub.l	d1,d2
0001F194 7200                       		moveq	#0,d1
0001F196 3141 0012                  		move.w	d1,obVelY(a0)
0001F19A 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001F1A0                            
0001F1A0                            loc_1BCC6:
0001F1A0 E080                       		asr.l	#8,d0
0001F1A2 E081                       		asr.l	#8,d1
0001F1A4 3140 0010                  		move.w	d0,obVelX(a0)
0001F1A8 3141 0012                  		move.w	d1,obVelY(a0)
0001F1AC 4E75                       		rts	
0001F1AE                            ; ===========================================================================
0001F1AE                            
0001F1AE                            loc_1BCD4:
0001F1AE E080                       		asr.l	#8,d0
0001F1B0 E081                       		asr.l	#8,d1
0001F1B2 3140 0010                  		move.w	d0,obVelX(a0)
0001F1B6 3141 0012                  		move.w	d1,obVelY(a0)
0001F1BA 08E8 0001 0022             		bset	#1,obStatus(a0)
0001F1C0 4E75                       		rts	
0001F1C2                            ; End of function Obj09_Fall
0001F1C2                            
0001F1C2                            
0001F1C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F1C2                            
0001F1C2                            
0001F1C2                            sub_1BCE8:
0001F1C2 43F9 00FF 0000             		lea	($FF0000).l,a1
0001F1C8 7800                       		moveq	#0,d4
0001F1CA 4842                       		swap	d2
0001F1CC 3802                       		move.w	d2,d4
0001F1CE 4842                       		swap	d2
0001F1D0 0644 0044                  		addi.w	#$44,d4
0001F1D4 88FC 0018                  		divu.w	#$18,d4
0001F1D8 C8FC 0080                  		mulu.w	#$80,d4
0001F1DC D3C4                       		adda.l	d4,a1
0001F1DE 7800                       		moveq	#0,d4
0001F1E0 4843                       		swap	d3
0001F1E2 3803                       		move.w	d3,d4
0001F1E4 4843                       		swap	d3
0001F1E6 0644 0014                  		addi.w	#$14,d4
0001F1EA 88FC 0018                  		divu.w	#$18,d4
0001F1EE D2C4                       		adda.w	d4,a1
0001F1F0 7A00                       		moveq	#0,d5
0001F1F2 1819                       		move.b	(a1)+,d4
0001F1F4 6100                       		bsr.s	sub_1BD30
0001F1F6 1819                       		move.b	(a1)+,d4
0001F1F8 6100                       		bsr.s	sub_1BD30
0001F1FA D2FC 007E                  		adda.w	#$7E,a1
0001F1FE 1819                       		move.b	(a1)+,d4
0001F200 6100                       		bsr.s	sub_1BD30
0001F202 1819                       		move.b	(a1)+,d4
0001F204 6100                       		bsr.s	sub_1BD30
0001F206 4A05                       		tst.b	d5
0001F208 4E75                       		rts	
0001F20A                            ; End of function sub_1BCE8
0001F20A                            
0001F20A                            
0001F20A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F20A                            
0001F20A                            
0001F20A                            sub_1BD30:
0001F20A 6700                       		beq.s	locret_1BD44
0001F20C 0C04 0028                  		cmpi.b	#$28,d4
0001F210 6700                       		beq.s	locret_1BD44
0001F212 0C04 003A                  		cmpi.b	#$3A,d4
0001F216 6500                       		bcs.s	loc_1BD46
0001F218 0C04 004B                  		cmpi.b	#$4B,d4
0001F21C 6400                       		bcc.s	loc_1BD46
0001F21E                            
0001F21E                            locret_1BD44:
0001F21E 4E75                       		rts	
0001F220                            ; ===========================================================================
0001F220                            
0001F220                            loc_1BD46:
0001F220 1144 0030                  		move.b	d4,$30(a0)
0001F224 2149 0032                  		move.l	a1,$32(a0)
0001F228 7AFF                       		moveq	#-1,d5
0001F22A 4E75                       		rts	
0001F22C                            ; End of function sub_1BD30
0001F22C                            
0001F22C                            
0001F22C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F22C                            
0001F22C                            
0001F22C                            Obj09_ChkItems:
0001F22C 43F9 00FF 0000             		lea	($FF0000).l,a1
0001F232 7800                       		moveq	#0,d4
0001F234 3828 000C                  		move.w	obY(a0),d4
0001F238 0644 0050                  		addi.w	#$50,d4
0001F23C 88FC 0018                  		divu.w	#$18,d4
0001F240 C8FC 0080                  		mulu.w	#$80,d4
0001F244 D3C4                       		adda.l	d4,a1
0001F246 7800                       		moveq	#0,d4
0001F248 3828 0008                  		move.w	obX(a0),d4
0001F24C 0644 0020                  		addi.w	#$20,d4
0001F250 88FC 0018                  		divu.w	#$18,d4
0001F254 D2C4                       		adda.w	d4,a1
0001F256 1811                       		move.b	(a1),d4
0001F258 6600                       		bne.s	Obj09_ChkCont
0001F25A 4A28 003A                  		tst.b	$3A(a0)
0001F25E 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001F262 7800                       		moveq	#0,d4
0001F264 4E75                       		rts	
0001F266                            ; ===========================================================================
0001F266                            
0001F266                            Obj09_ChkCont:
0001F266 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001F26A 6600                       		bne.s	Obj09_Chk1Up
0001F26C 6100 F726                  		bsr.w	SS_RemoveCollectedItem
0001F270 6600                       		bne.s	Obj09_GetCont
0001F272 14BC 0001                  		move.b	#1,(a2)
0001F276 2549 0004                  		move.l	a1,4(a2)
0001F27A                            
0001F27A                            Obj09_GetCont:
0001F27A 4EB9 0000 BB3C             		jsr	(CollectRing).l
0001F280 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; check if you have 50 rings
0001F286 6500                       		bcs.s	Obj09_NoCont
0001F288 08F8 0000 FE1B             		bset	#0,(v_lifecount).w
0001F28E 6600                       		bne.s	Obj09_NoCont
0001F290 5238 FE18                  		addq.b	#1,(v_continues).w ; add 1 to number of continues
0001F29E                            
0001F29E                            Obj09_NoCont:
0001F29E 7800                       		moveq	#0,d4
0001F2A0 4E75                       		rts	
0001F2A2                            ; ===========================================================================
0001F2A2                            
0001F2A2                            Obj09_Chk1Up:
0001F2A2 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001F2A6 6600                       		bne.s	Obj09_ChkEmer
0001F2A8 6100 F6EA                  		bsr.w	SS_RemoveCollectedItem
0001F2AC 6600                       		bne.s	Obj09_Get1Up
0001F2AE 14BC 0003                  		move.b	#3,(a2)
0001F2B2 2549 0004                  		move.l	a1,4(a2)
0001F2B6                            
0001F2B6                            Obj09_Get1Up:
0001F2B6 5238 FE12                  		addq.b	#1,(v_lives).w	; add 1 to number of lives
0001F2BA 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update the lives counter
0001F2C8 7800                       		moveq	#0,d4
0001F2CA 4E75                       		rts	
0001F2CC                            ; ===========================================================================
0001F2CC                            
0001F2CC                            Obj09_ChkEmer:
0001F2CC 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001F2D0 6500                       		bcs.s	Obj09_ChkGhost
0001F2D2 0C04 0040                  		cmpi.b	#$40,d4
0001F2D6 6200                       		bhi.s	Obj09_ChkGhost
0001F2D8 6100 F6BA                  		bsr.w	SS_RemoveCollectedItem
0001F2DC 6600                       		bne.s	Obj09_GetEmer
0001F2DE 14BC 0005                  		move.b	#5,(a2)
0001F2E2 2549 0004                  		move.l	a1,4(a2)
0001F2E6                            
0001F2E6                            Obj09_GetEmer:
0001F2E6 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all the emeralds?
0001F2EC 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001F2EE 0404 003B                  		subi.b	#$3B,d4
0001F2F2 7000                       		moveq	#0,d0
0001F2F4 1038 FE57                  		move.b	(v_emeralds).w,d0
0001F2F8 45F8 FE58                  		lea	(v_emldlist).w,a2
0001F2FC 1584 0000                  		move.b	d4,(a2,d0.w)
0001F300 5238 FE57                  		addq.b	#1,(v_emeralds).w ; add 1 to number of emeralds
0001F304                            
0001F304                            Obj09_NoEmer:
0001F30E 7800                       		moveq	#0,d4
0001F310 4E75                       		rts	
0001F312                            ; ===========================================================================
0001F312                            
0001F312                            Obj09_ChkGhost:
0001F312 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001F316 6600                       		bne.s	Obj09_ChkGhostTag
0001F318 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001F31E                            
0001F31E                            Obj09_ChkGhostTag:
0001F31E 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001F322 6600                       		bne.s	Obj09_NoGhost
0001F324 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001F32A 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001F32C 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001F332                            
0001F332                            Obj09_NoGhost:
0001F332 78FF                       		moveq	#-1,d4
0001F334 4E75                       		rts	
0001F336                            ; ===========================================================================
0001F336                            
0001F336                            Obj09_MakeGhostSolid:
0001F336 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001F33C 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001F33E 43F9 00FF 1020             		lea	($FF1020).l,a1
0001F344 723F                       		moveq	#$3F,d1
0001F346                            
0001F346                            Obj09_GhostLoop2:
0001F346 743F                       		moveq	#$3F,d2
0001F348                            
0001F348                            Obj09_GhostLoop:
0001F348 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001F34C 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001F34E 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001F352                            
0001F352                            Obj09_NoReplace:
0001F352 5249                       		addq.w	#1,a1
0001F354 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001F358 43E9 0040                  		lea	$40(a1),a1
0001F35C 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001F360                            
0001F360                            Obj09_GhostNotSolid:
0001F360 4228 003A                  		clr.b	$3A(a0)
0001F364 7800                       		moveq	#0,d4
0001F366 4E75                       		rts	
0001F368                            ; End of function Obj09_ChkItems
0001F368                            
0001F368                            
0001F368                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F368                            
0001F368                            
0001F368                            Obj09_ChkItems2:
0001F368 1028 0030                  		move.b	$30(a0),d0
0001F36C 6600                       		bne.s	Obj09_ChkBumper
0001F36E 5328 0036                  		subq.b	#1,$36(a0)
0001F372 6A00                       		bpl.s	loc_1BEA0
0001F374 117C 0000 0036             		move.b	#0,$36(a0)
0001F37A                            
0001F37A                            loc_1BEA0:
0001F37A 5328 0037                  		subq.b	#1,$37(a0)
0001F37E 6A00                       		bpl.s	locret_1BEAC
0001F380 117C 0000 0037             		move.b	#0,$37(a0)
0001F386                            
0001F386                            locret_1BEAC:
0001F386 4E75                       		rts	
0001F388                            ; ===========================================================================
0001F388                            
0001F388                            Obj09_ChkBumper:
0001F388 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001F38C 6600                       		bne.s	Obj09_GOAL
0001F38E 2228 0032                  		move.l	$32(a0),d1
0001F392 0481 00FF 0001             		subi.l	#$FF0001,d1
0001F398 3401                       		move.w	d1,d2
0001F39A 0241 007F                  		andi.w	#$7F,d1
0001F39E C2FC 0018                  		mulu.w	#$18,d1
0001F3A2 0441 0014                  		subi.w	#$14,d1
0001F3A6 EE4A                       		lsr.w	#7,d2
0001F3A8 0242 007F                  		andi.w	#$7F,d2
0001F3AC C4FC 0018                  		mulu.w	#$18,d2
0001F3B0 0442 0044                  		subi.w	#$44,d2
0001F3B4 9268 0008                  		sub.w	obX(a0),d1
0001F3B8 9468 000C                  		sub.w	obY(a0),d2
0001F3BC 4EB9 0000 3CC4             		jsr	(CalcAngle).l
0001F3C2 4EB9 0000 3A32             		jsr	(CalcSine).l
0001F3C8 C3FC F900                  		muls.w	#-$700,d1
0001F3CC E081                       		asr.l	#8,d1
0001F3CE 3141 0010                  		move.w	d1,obVelX(a0)
0001F3D2 C1FC F900                  		muls.w	#-$700,d0
0001F3D6 E080                       		asr.l	#8,d0
0001F3D8 3140 0012                  		move.w	d0,obVelY(a0)
0001F3DC 08E8 0001 0022             		bset	#1,obStatus(a0)
0001F3E2 6100 F5B0                  		bsr.w	SS_RemoveCollectedItem
0001F3E6 6600                       		bne.s	Obj09_BumpSnd
0001F3E8 14BC 0002                  		move.b	#2,(a2)
0001F3EC 2028 0032                  		move.l	$32(a0),d0
0001F3F0 5380                       		subq.l	#1,d0
0001F3F2 2540 0004                  		move.l	d0,4(a2)
0001F3F6                            
0001F3F6                            Obj09_BumpSnd:
0001F400                            ; ===========================================================================
0001F400                            
0001F400                            Obj09_GOAL:
0001F400 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001F404 6600                       		bne.s	Obj09_UPblock
0001F406 5428 0024                  		addq.b	#2,obRoutine(a0) ; run routine "Obj09_ExitStage"
0001F414 4E75                       		rts	
0001F416                            ; ===========================================================================
0001F416                            
0001F416                            Obj09_UPblock:
0001F416 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001F41A 6600                       		bne.s	Obj09_DOWNblock
0001F41C 4A28 0036                  		tst.b	$36(a0)
0001F420 6600 0000                  		bne.w	Obj09_NoGlass
0001F424 117C 001E 0036             		move.b	#$1E,$36(a0)
0001F42A 0838 0006 F783             		btst	#6,($FFFFF783).w
0001F430 6700                       		beq.s	Obj09_UPsnd
0001F432 E1F8 F782                  		asl	(v_ssrotate).w	; increase stage rotation speed
0001F436 2268 0032                  		movea.l	$32(a0),a1
0001F43A 5389                       		subq.l	#1,a1
0001F43C 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001F440                            
0001F440                            Obj09_UPsnd:
0001F44A                            ; ===========================================================================
0001F44A                            
0001F44A                            Obj09_DOWNblock:
0001F44A 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001F44E 6600                       		bne.s	Obj09_Rblock
0001F450 4A28 0036                  		tst.b	$36(a0)
0001F454 6600 0000                  		bne.w	Obj09_NoGlass
0001F458 117C 001E 0036             		move.b	#$1E,$36(a0)
0001F45E 0838 0006 F783             		btst	#6,(v_ssrotate+1).w
0001F464 6600                       		bne.s	Obj09_DOWNsnd
0001F466 E0F8 F782                  		asr	(v_ssrotate).w	; reduce stage rotation speed
0001F46A 2268 0032                  		movea.l	$32(a0),a1
0001F46E 5389                       		subq.l	#1,a1
0001F470 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001F474                            
0001F474                            Obj09_DOWNsnd:
0001F47E                            ; ===========================================================================
0001F47E                            
0001F47E                            Obj09_Rblock:
0001F47E 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001F482 6600                       		bne.s	Obj09_ChkGlass
0001F484 4A28 0037                  		tst.b	$37(a0)
0001F488 6600 0000                  		bne.w	Obj09_NoGlass
0001F48C 117C 001E 0037             		move.b	#$1E,$37(a0)
0001F492 6100 F500                  		bsr.w	SS_RemoveCollectedItem
0001F496 6600                       		bne.s	Obj09_RevStage
0001F498 14BC 0004                  		move.b	#4,(a2)
0001F49C 2028 0032                  		move.l	$32(a0),d0
0001F4A0 5380                       		subq.l	#1,d0
0001F4A2 2540 0004                  		move.l	d0,4(a2)
0001F4A6                            
0001F4A6                            Obj09_RevStage:
0001F4A6 4478 F782                  		neg.w	(v_ssrotate).w	; reverse stage rotation
0001F4B4                            ; ===========================================================================
0001F4B4                            
0001F4B4                            Obj09_ChkGlass:
0001F4B4 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001F4B8 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001F4BA 0C00 002E                  		cmpi.b	#$2E,d0
0001F4BE 6700                       		beq.s	Obj09_Glass
0001F4C0 0C00 002F                  		cmpi.b	#$2F,d0
0001F4C4 6700                       		beq.s	Obj09_Glass
0001F4C6 0C00 0030                  		cmpi.b	#$30,d0
0001F4CA 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001F4CC                            
0001F4CC                            Obj09_Glass:
0001F4CC 6100 F4C6                  		bsr.w	SS_RemoveCollectedItem
0001F4D0 6600                       		bne.s	Obj09_GlassSnd
0001F4D2 14BC 0006                  		move.b	#6,(a2)
0001F4D6 2268 0032                  		movea.l	$32(a0),a1
0001F4DA 5389                       		subq.l	#1,a1
0001F4DC 2549 0004                  		move.l	a1,4(a2)
0001F4E0 1011                       		move.b	(a1),d0
0001F4E2 5200                       		addq.b	#1,d0		; change glass type when touched
0001F4E4 0C00 0030                  		cmpi.b	#$30,d0
0001F4E8 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001F4EA 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001F4EC                            
0001F4EC                            Obj09_GlassUpdate:
0001F4EC 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001F4F0                            
0001F4F0                            Obj09_GlassSnd:
0001F4FA                            ; ===========================================================================
0001F4FA                            
0001F4FA                            Obj09_NoGlass:
0001F4FA 4E75                       		rts	
0001F4FC                            ; End of function Obj09_ChkItems2
0001F4FC                            ; End of function Obj09_ChkItems2
0001F4FC                            
0001F4FC                            		include	"_incObj\10.asm"
0001F4FC                            ; ---------------------------------------------------------------------------
0001F4FC                            ; Object 10 - After-Image
0001F4FC                            ; ---------------------------------------------------------------------------
0001F4FC                            
0001F4FC                            Obj10:
0001F4FC 0C38 0018 D01C                   cmpi.b   #id_Death,(v_player+obAnim).w   ; is Sonic using the death animation?
0001F502 6700 0000                        beq.w   AfterimageEnd      ; if yes, delete the After Image
0001F506                            
0001F506 7000                             moveq   #0,d0
0001F508 1028 0024                        move.b   obRoutine(a0),d0
0001F50C 323B 0000                        move.w   Afterimage_Index(pc,d0.w),d1
0001F510 4EFB 1000                        jmp	Afterimage_Index(pc,d1.w)
0001F514                            
0001F514                            ; ===========================================================================
0001F514                            ;           Change the length by moving around the "No Afterimage" and "After Image Start/ After Image L Priority" sections.
0001F514                            ; ===========================================================================
0001F514                            Afterimage_Index:
0001F514 0000                             dc.w NoAfterImage-Afterimage_Index
0001F516 0000                             dc.w NoAfterImage-Afterimage_Index
0001F518 0000                             dc.w NoAfterImage-Afterimage_Index
0001F51A 0000                             dc.w AfterimageStart-Afterimage_Index
0001F51C 0000                             dc.w NoAfterImage-Afterimage_Index
0001F51E 0000                             dc.w NoAfterImage-Afterimage_Index
0001F520 0000                             dc.w NoAfterImage-Afterimage_Index
0001F522 0000                             dc.w AfterimageLPrio-Afterimage_Index
0001F524 0000                             dc.w AfterimageEnd-Afterimage_Index
0001F526                            ; ===========================================================================
0001F526                            NoAfterImage:
0001F526 5428 0024                        addq.b   #2,obRoutine(a0)         ; go to next item of index, at the next frame
0001F52A 4E75                             rts
0001F52C                            ; ===========================================================================
0001F52C                            AfterimageStart:
0001F52C 117C 0002 0018                   move.b   #2,obPriority(a0)         ; set sprite priority to 2
0001F532 6000                             bra.s   Afterimage_Show
0001F534                            ; ===========================================================================
0001F534                            AfterimageLPrio:
0001F534 5228 0018                        addq.b   #1,obPriority(a0)         ; set a lower sprite priority
0001F538                            ; ===========================================================================
0001F538                            Afterimage_Show:
0001F538 5428 0024                        addq.b   #2,obRoutine(a0)            ; go to next item of index
0001F53C 4EB9 0000 3A0C                   jsr   (RandomNumber).l         ; get a random number
0001F542 0200 0003                        andi.b   #3,d0               ; get a number equal or lower than 2 (0 until 2)
0001F546 6600                             bne.s   AfterimageException   ; if is not 0, branch
0001F548 4E75                             rts                        ; if it is 0, then don't show the after-image
0001F54A                            
0001F54A                            AfterimageException:
0001F54A 3178 D002 0002                   move.w   (v_player+obGfx).w,obGfx(a0)      ; copy Sonic map to after-image map
0001F550 1178 D001 0001                    move.b   (v_player+obRender).w,obRender(a0)      ; copy Sonic frame infos (horizontal/vertical mirror, coordinate system......)
0001F556 2178 D01A 001A                    move.l   (v_player+obFrame).w,obFrame(a0)   ; copy the Sonic animation frame
0001F55C 4EF9 0000 F978                   jmp   DisplaySprite
0001F562                            ; ===========================================================================
0001F562                            AfterimageEnd:
0001F562 4EF9 0000 F9B8                   jmp   DeleteObject
0001F562 4EF9 0000 F9B8                   jmp   DeleteObject
0001F568                            
0001F568                            		include	"_inc\AnimateLevelGfx.asm"
0001F568                            ; ---------------------------------------------------------------------------
0001F568                            ; Subroutine to	animate	level graphics
0001F568                            ; ---------------------------------------------------------------------------
0001F568                            
0001F568                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F568                            
0001F568                            
0001F568                            AnimateLevelGfx:
0001F568                            		;tst.w	(f_pause).w	; is the game paused?
0001F568                            		;bne.s	@ispaused	; if yes, branch
0001F568 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0001F56E 6100 0000                  		bsr.w	AniArt_GiantRing
0001F572 7000                       		moveq	#0,d0
0001F574 1038 FE10                  		move.b	(v_zone).w,d0
0001F578 D040                       		add.w	d0,d0
0001F57A 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001F57E 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001F582                            
0001F582                            	@ispaused:
0001F582 4E75                       		rts	
0001F584                            
0001F584                            ; ===========================================================================
0001F584 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001F588 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001F58C 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001F590 0000                       		dc.w AniArt_Ending-AniArt_Index
0001F592                            ; ===========================================================================
0001F592                            ; ---------------------------------------------------------------------------
0001F592                            ; Animated pattern routine - Green Hill
0001F592                            ; ---------------------------------------------------------------------------
0001F592                            
0001F592                            AniArt_GHZ:
0001F592                            
0001F592                            AniArt_GHZ_Waterfall:
0001F592                            
0001F592 =00000008                  @size:		equ 8	; number of tiles per frame
0001F592                            
0001F592 5338 F7B1                  		subq.b	#1,(v_lani0_time).w ; decrement timer
0001F596 6A00                       		bpl.s	AniArt_GHZ_Bigflower ; branch if not 0
0001F598                            
0001F598 11FC 0005 F7B1             		move.b	#5,(v_lani0_time).w ; time to display each frame
0001F59E 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001F5A4 1038 F7B0                  		move.b	(v_lani0_frame).w,d0
0001F5A8 5238 F7B0                  		addq.b	#1,(v_lani0_frame).w ; increment frame counter
0001F5AC 0240 0001                  		andi.w	#1,d0		; there are only 2 frames
0001F5B0 6700                       		beq.s	@isframe0	; branch if frame 0
0001F5B2 43E9 0100                  		lea	@size*$20(a1),a1 ; use graphics for frame 1
0001F5B6                            
0001F5B6                            	@isframe0:
0001F5C0 323C 0007                  		move.w	#@size-1,d1	; number of 8x8	tiles
0001F5C4 6000 0000                  		bra.w	LoadTiles
0001F5C8                            ; ===========================================================================
0001F5C8                            
0001F5C8                            AniArt_GHZ_Bigflower:
0001F5C8                            
0001F5C8 =00000010                  @size:		equ 16	; number of tiles per frame
0001F5C8                            
0001F5C8 5338 F7B3                  		subq.b	#1,(v_lani1_time).w
0001F5CC 6A00                       		bpl.s	AniArt_GHZ_Smallflower
0001F5CE                            
0001F5CE 11FC 000F F7B3             		move.b	#$F,(v_lani1_time).w
0001F5D4 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001F5DA 1038 F7B2                  		move.b	(v_lani1_frame).w,d0
0001F5DE 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w
0001F5E2 0240 0001                  		andi.w	#1,d0
0001F5E6 6700                       		beq.s	@isframe0
0001F5E8 43E9 0200                  		lea	@size*$20(a1),a1
0001F5EC                            
0001F5EC                            	@isframe0:
0001F5F6 323C 000F                  		move.w	#@size-1,d1
0001F5FA 6000 0000                  		bra.w	LoadTiles
0001F5FE                            ; ===========================================================================
0001F5FE                            
0001F5FE                            AniArt_GHZ_Smallflower:
0001F5FE                            
0001F5FE =0000000C                  @size:		equ 12	; number of tiles per frame
0001F5FE                            
0001F5FE 5338 F7B5                  		subq.b	#1,(v_lani2_time).w
0001F602 6A00                       		bpl.s	@end
0001F604                            
0001F604 11FC 0007 F7B5             		move.b	#7,(v_lani2_time).w
0001F60A 1038 F7B4                  		move.b	(v_lani2_frame).w,d0
0001F60E 5238 F7B4                  		addq.b	#1,(v_lani2_frame).w ; increment frame counter
0001F612 0240 0003                  		andi.w	#3,d0		; there are 4 frames
0001F616 103B 0000                  		move.b	@sequence(pc,d0.w),d0
0001F61A 0800 0000                  		btst	#0,d0		; is frame 0 or 2? (actual frame, not frame counter)
0001F61E 6600                       		bne.s	@isframe1	; if not, branch
0001F620 11FC 007F F7B5             		move.b	#$7F,(v_lani2_time).w ; set longer duration for frames 0 and 2
0001F626                            
0001F626                            	@isframe1:
0001F626 EF48                       		lsl.w	#7,d0		; multiply frame num by $80
0001F628 3200                       		move.w	d0,d1
0001F62A D040                       		add.w	d0,d0
0001F62C D041                       		add.w	d1,d0		; multiply that by 3 (i.e. frame num times 12 * $20)
0001F638 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001F63E 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001F642 323C 000B                  		move.w	#@size-1,d1
0001F646 6100 0000                  		bsr.w	LoadTiles
0001F64A                            
0001F64A                            @end:
0001F64A 4E75                       		rts	
0001F64C                            
0001F64C 0001 0201                  @sequence:	dc.b 0,	1, 2, 1
0001F650                            ; ===========================================================================
0001F650                            ; ---------------------------------------------------------------------------
0001F650                            ; Animated pattern routine - Marble
0001F650                            ; ---------------------------------------------------------------------------
0001F650                            
0001F650                            AniArt_MZ:
0001F650                            
0001F650                            AniArt_MZ_Lava:
0001F650                            
0001F650 =00000008                  @size:		equ 8	; number of tiles per frame
0001F650                            
0001F650 5338 F7B1                  		subq.b	#1,(v_lani0_time).w ; decrement timer
0001F654 6A00                       		bpl.s	AniArt_MZ_Magma	; branch if not 0
0001F656                            
0001F656 11FC 0011 F7B1             		move.b	#$11,(v_lani0_time).w ; time to display each frame
0001F65C 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001F662 7000                       		moveq	#0,d0
0001F664 1038 F7B0                  		move.b	(v_lani0_frame).w,d0
0001F668 5200                       		addq.b	#1,d0		; increment frame counter
0001F66A 0C00 0003                  		cmpi.b	#3,d0		; there are 3 frames
0001F66E 6600                       		bne.s	@frame01or2	; branch if frame 0, 1 or 2
0001F670 7000                       		moveq	#0,d0
0001F672                            
0001F672                            	@frame01or2:
0001F672 11C0 F7B0                  		move.b	d0,(v_lani0_frame).w
0001F676 C0FC 0100                  		mulu.w	#@size*$20,d0
0001F67A D2C0                       		adda.w	d0,a1		; jump to appropriate tile
0001F686 323C 0007                  		move.w	#@size-1,d1
0001F68A 6100 0000                  		bsr.w	LoadTiles
0001F68E                            
0001F68E                            AniArt_MZ_Magma:
0001F68E 5338 F7B3                  		subq.b	#1,(v_lani1_time).w ; decrement timer
0001F692 6A00                       		bpl.s	AniArt_MZ_Torch	; branch if not 0
0001F694                            		
0001F694 11FC 0001 F7B3             		move.b	#1,(v_lani1_time).w ; time between each gfx change
0001F69A 7000                       		moveq	#0,d0
0001F69C 1038 F7B0                  		move.b	(v_lani0_frame).w,d0 ; get surface lava frame number
0001F6A0 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load magma gfx
0001F6A6 EE58                       		ror.w	#7,d0		; multiply frame num by $200
0001F6A8 D8C0                       		adda.w	d0,a4		; jump to appropriate tile
0001F6B4 7600                       		moveq	#0,d3
0001F6B6 1638 F7B2                  		move.b	(v_lani1_frame).w,d3
0001F6BA 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w ; increment frame counter (unused)
0001F6BE 1638 FE68                  		move.b	(v_oscillate+$A).w,d3 ; get oscillating value
0001F6C2 343C 0003                  		move.w	#3,d2
0001F6C6                            
0001F6C6                            	@loop:
0001F6C6 3003                       		move.w	d3,d0
0001F6C8 D040                       		add.w	d0,d0
0001F6CA 0240 001E                  		andi.w	#$1E,d0
0001F6CE 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001F6D4 3033 0000                  		move.w	(a3,d0.w),d0
0001F6D8 47F3 0000                  		lea	(a3,d0.w),a3
0001F6DC 224C                       		movea.l	a4,a1
0001F6DE 323C 001F                  		move.w	#$1F,d1
0001F6E2 4E93                       		jsr	(a3)
0001F6E4 5843                       		addq.w	#4,d3
0001F6E6 51CA FFDE                  		dbf	d2,@loop
0001F6EA 4E75                       		rts	
0001F6EC                            ; ===========================================================================
0001F6EC                            
0001F6EC                            AniArt_MZ_Torch:
0001F6EC                            
0001F6EC =00000006                  @size:		equ 6	; number of tiles per frame
0001F6EC                            
0001F6EC 5338 F7B5                  		subq.b	#1,(v_lani2_time).w ; decrement timer
0001F6F0 6A00 0000                  		bpl.w	@end		; branch if not 0
0001F6F4                            		
0001F6F4 11FC 0004 F7B5             		move.b	#4,(v_lani2_time).w ; time to display each frame
0001F6FA 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001F700 7000                       		moveq	#0,d0
0001F702 1038 F7B6                  		move.b	(v_lani3_frame).w,d0
0001F706 5238 F7B6                  		addq.b	#1,(v_lani3_frame).w ; increment frame counter
0001F70A 0238 0003 F7B6             		andi.b	#3,(v_lani3_frame).w ; there are 3 frames
0001F710 C0FC 00C0                  		mulu.w	#@size*$20,d0
0001F714 D2C0                       		adda.w	d0,a1		; jump to appropriate tile
0001F720 323C 0005                  		move.w	#@size-1,d1
0001F724 6000 0000                  		bra.w	LoadTiles
0001F728                            
0001F728                            @end:
0001F728 4E75                       		rts	
0001F72A                            ; ===========================================================================
0001F72A                            ; ---------------------------------------------------------------------------
0001F72A                            ; Animated pattern routine - Scrap Brain
0001F72A                            ; ---------------------------------------------------------------------------
0001F72A                            
0001F72A                            AniArt_SBZ:
0001F72A                            
0001F72A =0000000C                  @size:		equ 12	; number of tiles per frame
0001F72A                            
0001F72A 4A38 F7B4                  		tst.b	(v_lani2_frame).w
0001F72E 6700                       		beq.s	@smokepuff	; branch if counter hits 0
0001F730                            		
0001F730 5338 F7B4                  		subq.b	#1,(v_lani2_frame).w ; decrement counter
0001F734 6000                       		bra.s	@chk_smokepuff2
0001F736                            ; ===========================================================================
0001F736                            
0001F736                            @smokepuff:
0001F736 5338 F7B1                  		subq.b	#1,(v_lani0_time).w ; decrement timer
0001F73A 6A00                       		bpl.s	@chk_smokepuff2 ; branch if not 0
0001F73C                            		
0001F73C 11FC 0007 F7B1             		move.b	#7,(v_lani0_time).w ; time to display each frame
0001F742 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001F752 1038 F7B0                  		move.b	(v_lani0_frame).w,d0
0001F756 5238 F7B0                  		addq.b	#1,(v_lani0_frame).w ; increment frame counter
0001F75A 0240 0007                  		andi.w	#7,d0
0001F75E 6700                       		beq.s	@untilnextpuff	; branch if frame 0
0001F760 5340                       		subq.w	#1,d0
0001F762 C0FC 0180                  		mulu.w	#@size*$20,d0
0001F766 43F1 0000                  		lea	(a1,d0.w),a1
0001F76A 323C 000B                  		move.w	#@size-1,d1
0001F76E 6000 0000                  		bra.w	LoadTiles
0001F772                            ; ===========================================================================
0001F772                            
0001F772                            @untilnextpuff:
0001F772 11FC 00B4 F7B4             		move.b	#180,(v_lani2_frame).w ; time between smoke puffs (3 seconds)
0001F778                            
0001F778                            @clearsky:
0001F778 323C 0005                  		move.w	#(@size/2)-1,d1
0001F77C 6100 0000                  		bsr.w	LoadTiles
0001F780 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001F786 323C 0005                  		move.w	#(@size/2)-1,d1
0001F78A 6000 0000                  		bra.w	LoadTiles	; load blank tiles for no smoke puff
0001F78E                            ; ===========================================================================
0001F78E                            
0001F78E                            @chk_smokepuff2:
0001F78E 4A38 F7B5                  		tst.b	(v_lani2_time).w
0001F792 6700                       		beq.s	@smokepuff2	; branch if counter hits 0
0001F794                            		
0001F794 5338 F7B5                  		subq.b	#1,(v_lani2_time).w ; decrement counter
0001F798 6000                       		bra.s	@end
0001F79A                            ; ===========================================================================
0001F79A                            
0001F79A                            @smokepuff2:
0001F79A 5338 F7B3                  		subq.b	#1,(v_lani1_time).w ; decrement timer
0001F79E 6A00                       		bpl.s	@end		; branch if not 0
0001F7A0                            		
0001F7A0 11FC 0007 F7B3             		move.b	#7,(v_lani1_time).w ; time to display each frame
0001F7A6 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001F7B6 1038 F7B2                  		move.b	(v_lani1_frame).w,d0
0001F7BA 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w ; increment frame counter
0001F7BE 0240 0007                  		andi.w	#7,d0
0001F7C2 6700                       		beq.s	@untilnextpuff2	; branch if frame 0
0001F7C4 5340                       		subq.w	#1,d0
0001F7C6 C0FC 0180                  		mulu.w	#@size*$20,d0
0001F7CA 43F1 0000                  		lea	(a1,d0.w),a1
0001F7CE 323C 000B                  		move.w	#@size-1,d1
0001F7D2 6000 0000                  		bra.w	LoadTiles
0001F7D6                            ; ===========================================================================
0001F7D6                            
0001F7D6                            @untilnextpuff2:
0001F7D6 11FC 0078 F7B5             		move.b	#120,(v_lani2_time).w ; time between smoke puffs (2 seconds)
0001F7DC 609A                       		bra.s	@clearsky
0001F7DE                            ; ===========================================================================
0001F7DE                            
0001F7DE                            @end:
0001F7DE 4E75                       		rts	
0001F7E0                            ; ===========================================================================
0001F7E0                            ; ---------------------------------------------------------------------------
0001F7E0                            ; Animated pattern routine - ending sequence
0001F7E0                            ; ---------------------------------------------------------------------------
0001F7E0                            
0001F7E0                            AniArt_Ending:
0001F7E0                            
0001F7E0                            AniArt_Ending_BigFlower:
0001F7E0                            
0001F7E0 =00000010                  @size:		equ 16	; number of tiles per frame
0001F7E0                            
0001F7E0 5338 F7B3                  		subq.b	#1,(v_lani1_time).w ; decrement timer
0001F7E4 6A00                       		bpl.s	AniArt_Ending_SmallFlower ; branch if not 0
0001F7E6                            		
0001F7E6 11FC 0007 F7B3             		move.b	#7,(v_lani1_time).w
0001F7EC 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001F7F2 45F8 9400                  		lea	($FFFF9400).w,a2 ; load 2nd big flower from RAM
0001F7F6 1038 F7B2                  		move.b	(v_lani1_frame).w,d0
0001F7FA 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w ; increment frame counter
0001F7FE 0240 0001                  		andi.w	#1,d0		; only 2 frames
0001F802 6700                       		beq.s	@isframe0	; branch if frame 0
0001F804 43E9 0200                  		lea	@size*$20(a1),a1
0001F808 45EA 0200                  		lea	@size*$20(a2),a2
0001F80C                            
0001F80C                            	@isframe0:
0001F816 323C 000F                  		move.w	#@size-1,d1
0001F81A 6100 0000                  		bsr.w	LoadTiles
0001F81E 224A                       		movea.l	a2,a1
0001F82A 323C 000F                  		move.w	#@size-1,d1
0001F82E 6000 0000                  		bra.w	LoadTiles
0001F832                            ; ===========================================================================
0001F832                            
0001F832                            AniArt_Ending_SmallFlower:
0001F832                            
0001F832 =0000000C                  @size:		equ 12	; number of tiles per frame
0001F832                            
0001F832 5338 F7B5                  		subq.b	#1,(v_lani2_time).w ; decrement timer
0001F836 6A00                       		bpl.s	AniArt_Ending_Flower3 ; branch if not 0
0001F838                            		
0001F838 11FC 0007 F7B5             		move.b	#7,(v_lani2_time).w
0001F83E 1038 F7B4                  		move.b	(v_lani2_frame).w,d0
0001F842 5238 F7B4                  		addq.b	#1,(v_lani2_frame).w ; increment frame counter
0001F846 0240 0007                  		andi.w	#7,d0		; max 8 frames
0001F84A 103B 0000                  		move.b	@sequence(pc,d0.w),d0 ; get actual frame num from sequence data
0001F84E EF48                       		lsl.w	#7,d0		; multiply by $80
0001F850 3200                       		move.w	d0,d1
0001F852 D040                       		add.w	d0,d0
0001F854 D041                       		add.w	d1,d0		; multiply by 3
0001F860 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001F866 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001F86A 323C 000B                  		move.w	#@size-1,d1
0001F86E 6000 0000                  		bra.w	LoadTiles
0001F872                            ; ===========================================================================
0001F872 0000 0001 0202 0201        @sequence:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001F87A                            ; ===========================================================================
0001F87A                            
0001F87A                            AniArt_Ending_Flower3:
0001F87A                            
0001F87A =00000010                  @size:		equ 16	; number of tiles per frame
0001F87A                            
0001F87A 5338 F7B9                  		subq.b	#1,(v_lani4_time).w ; decrement timer
0001F87E 6A00                       		bpl.s	AniArt_Ending_Flower4 ; branch if not 0
0001F880                            		
0001F880 11FC 000E F7B9             		move.b	#$E,(v_lani4_time).w
0001F886 1038 F7B8                  		move.b	(v_lani4_frame).w,d0
0001F88A 5238 F7B8                  		addq.b	#1,(v_lani4_frame).w ; increment frame counter
0001F88E 0240 0003                  		andi.w	#3,d0		; max 4 frames
0001F892 103B 0000                  		move.b	AniArt_Ending_Flower3_sequence(pc,d0.w),d0 ; get actual frame num from sequence data
0001F896 E148                       		lsl.w	#8,d0		; multiply by $100
0001F898 D040                       		add.w	d0,d0		; multiply by 2
0001F8A4 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001F8A8 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001F8AC 323C 000F                  		move.w	#@size-1,d1
0001F8B0 6000 0000                  		bra.w	LoadTiles
0001F8B4                            ; ===========================================================================
0001F8B4 0001 0201                  AniArt_Ending_Flower3_sequence:	dc.b 0,	1, 2, 1
0001F8B8                            ; ===========================================================================
0001F8B8                            
0001F8B8                            AniArt_Ending_Flower4:
0001F8B8                            
0001F8B8 =00000010                  @size:		equ 16	; number of tiles per frame
0001F8B8                            
0001F8B8 5338 F7BB                  		subq.b	#1,(v_lani5_time).w ; decrement timer
0001F8BC 6A00                       		bpl.s	@end		; branch if not 0
0001F8BE                            		
0001F8BE 11FC 000B F7BB             		move.b	#$B,(v_lani5_time).w
0001F8C4 1038 F7BA                  		move.b	(v_lani5_frame).w,d0
0001F8C8 5238 F7BA                  		addq.b	#1,(v_lani5_frame).w ; increment frame counter
0001F8CC 0240 0003                  		andi.w	#3,d0
0001F8D0 103B 00E2                  		move.b	AniArt_Ending_Flower3_sequence(pc,d0.w),d0 ; get actual frame num from sequence data
0001F8D4 E148                       		lsl.w	#8,d0		; multiply by $100
0001F8D6 D040                       		add.w	d0,d0		; multiply by 2
0001F8E2 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001F8E6 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001F8EA 323C 000F                  		move.w	#@size-1,d1
0001F8EE 6000 0000                  		bra.w	LoadTiles
0001F8F2                            ; ===========================================================================
0001F8F2                            
0001F8F2                            @end:
0001F8F2 4E75                       		rts	
0001F8F4                            ; ===========================================================================
0001F8F4                            
0001F8F4                            AniArt_none:
0001F8F4 4E75                       		rts	
0001F8F6                            
0001F8F6                            ; ---------------------------------------------------------------------------
0001F8F6                            ; Subroutine to	transfer graphics to VRAM
0001F8F6                            
0001F8F6                            ; input:
0001F8F6                            ;	a1 = source address
0001F8F6                            ;	a6 = vdp_data_port ($C00000)
0001F8F6                            ;	d1 = number of tiles to load (minus one)
0001F8F6                            ; ---------------------------------------------------------------------------
0001F8F6                            
0001F8F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F8F6                            
0001F8F6                            
0001F8F6                            LoadTiles:
0001F8F6 2C99                       		move.l	(a1)+,(a6)
0001F8F8 2C99                       		move.l	(a1)+,(a6)
0001F8FA 2C99                       		move.l	(a1)+,(a6)
0001F8FC 2C99                       		move.l	(a1)+,(a6)
0001F8FE 2C99                       		move.l	(a1)+,(a6)
0001F900 2C99                       		move.l	(a1)+,(a6)
0001F902 2C99                       		move.l	(a1)+,(a6)
0001F904 2C99                       		move.l	(a1)+,(a6)
0001F906 51C9 FFEE                  		dbf	d1,LoadTiles
0001F90A 4E75                       		rts	
0001F90C                            ; End of function LoadTiles
0001F90C                            
0001F90C                            ; ===========================================================================
0001F90C                            ; ---------------------------------------------------------------------------
0001F90C                            ; Animated pattern routine - more Marble Zone
0001F90C                            ; ---------------------------------------------------------------------------
0001F90C 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001F910 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001F914 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001F918 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001F91C 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001F920 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001F924 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001F928 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001F92C                            ; ===========================================================================
0001F92C                            
0001F92C                            loc_1C3EE:
0001F92C 2C91                       		move.l	(a1),(a6)
0001F92E 43E9 0010                  		lea	$10(a1),a1
0001F932 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001F936 4E75                       		rts	
0001F938                            ; ===========================================================================
0001F938                            
0001F938                            loc_1C3FA:
0001F938 2029 0002                  		move.l	2(a1),d0
0001F93C 1029 0001                  		move.b	1(a1),d0
0001F940 E098                       		ror.l	#8,d0
0001F942 2C80                       		move.l	d0,(a6)
0001F944 43E9 0010                  		lea	$10(a1),a1
0001F948 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001F94C 4E75                       		rts	
0001F94E                            ; ===========================================================================
0001F94E                            
0001F94E                            loc_1C410:
0001F94E 2CA9 0002                  		move.l	2(a1),(a6)
0001F952 43E9 0010                  		lea	$10(a1),a1
0001F956 51C9 FFF6                  		dbf	d1,loc_1C410
0001F95A 4E75                       		rts	
0001F95C                            ; ===========================================================================
0001F95C                            
0001F95C                            loc_1C41E:
0001F95C 2029 0004                  		move.l	4(a1),d0
0001F960 1029 0003                  		move.b	3(a1),d0
0001F964 E098                       		ror.l	#8,d0
0001F966 2C80                       		move.l	d0,(a6)
0001F968 43E9 0010                  		lea	$10(a1),a1
0001F96C 51C9 FFEE                  		dbf	d1,loc_1C41E
0001F970 4E75                       		rts	
0001F972                            ; ===========================================================================
0001F972                            
0001F972                            loc_1C434:
0001F972 2CA9 0004                  		move.l	4(a1),(a6)
0001F976 43E9 0010                  		lea	$10(a1),a1
0001F97A 51C9 FFF6                  		dbf	d1,loc_1C434
0001F97E 4E75                       		rts	
0001F980                            ; ===========================================================================
0001F980                            
0001F980                            loc_1C442:
0001F980 2029 0006                  		move.l	6(a1),d0
0001F984 1029 0005                  		move.b	5(a1),d0
0001F988 E098                       		ror.l	#8,d0
0001F98A 2C80                       		move.l	d0,(a6)
0001F98C 43E9 0010                  		lea	$10(a1),a1
0001F990 51C9 FFEE                  		dbf	d1,loc_1C442
0001F994 4E75                       		rts	
0001F996                            ; ===========================================================================
0001F996                            
0001F996                            loc_1C458:
0001F996 2CA9 0006                  		move.l	6(a1),(a6)
0001F99A 43E9 0010                  		lea	$10(a1),a1
0001F99E 51C9 FFF6                  		dbf	d1,loc_1C458
0001F9A2 4E75                       		rts	
0001F9A4                            ; ===========================================================================
0001F9A4                            
0001F9A4                            loc_1C466:
0001F9A4 2029 0008                  		move.l	8(a1),d0
0001F9A8 1029 0007                  		move.b	7(a1),d0
0001F9AC E098                       		ror.l	#8,d0
0001F9AE 2C80                       		move.l	d0,(a6)
0001F9B0 43E9 0010                  		lea	$10(a1),a1
0001F9B4 51C9 FFEE                  		dbf	d1,loc_1C466
0001F9B8 4E75                       		rts	
0001F9BA                            ; ===========================================================================
0001F9BA                            
0001F9BA                            loc_1C47C:
0001F9BA 2CA9 0008                  		move.l	8(a1),(a6)
0001F9BE 43E9 0010                  		lea	$10(a1),a1
0001F9C2 51C9 FFF6                  		dbf	d1,loc_1C47C
0001F9C6 4E75                       		rts	
0001F9C8                            ; ===========================================================================
0001F9C8                            
0001F9C8                            loc_1C48A:
0001F9C8 2029 000A                  		move.l	$A(a1),d0
0001F9CC 1029 0009                  		move.b	9(a1),d0
0001F9D0 E098                       		ror.l	#8,d0
0001F9D2 2C80                       		move.l	d0,(a6)
0001F9D4 43E9 0010                  		lea	$10(a1),a1
0001F9D8 51C9 FFEE                  		dbf	d1,loc_1C48A
0001F9DC 4E75                       		rts	
0001F9DE                            ; ===========================================================================
0001F9DE                            
0001F9DE                            loc_1C4A0:
0001F9DE 2CA9 000A                  		move.l	$A(a1),(a6)
0001F9E2 43E9 0010                  		lea	$10(a1),a1
0001F9E6 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001F9EA 4E75                       		rts	
0001F9EC                            ; ===========================================================================
0001F9EC                            
0001F9EC                            loc_1C4AE:
0001F9EC 2029 000C                  		move.l	$C(a1),d0
0001F9F0 1029 000B                  		move.b	$B(a1),d0
0001F9F4 E098                       		ror.l	#8,d0
0001F9F6 2C80                       		move.l	d0,(a6)
0001F9F8 43E9 0010                  		lea	$10(a1),a1
0001F9FC 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001FA00 4E75                       		rts	
0001FA02                            ; ===========================================================================
0001FA02                            
0001FA02                            loc_1C4C4:
0001FA02 2CA9 000C                  		move.l	$C(a1),(a6)
0001FA06 43E9 0010                  		lea	$10(a1),a1
0001FA0A 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001FA0E 4E75                       		rts	
0001FA10                            ; ===========================================================================
0001FA10                            
0001FA10                            loc_1C4D2:
0001FA10 2029 000C                  		move.l	$C(a1),d0
0001FA14 E198                       		rol.l	#8,d0
0001FA16 1011                       		move.b	0(a1),d0
0001FA18 2C80                       		move.l	d0,(a6)
0001FA1A 43E9 0010                  		lea	$10(a1),a1
0001FA1E 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001FA22 4E75                       		rts	
0001FA24                            ; ===========================================================================
0001FA24                            
0001FA24                            loc_1C4E8:
0001FA24 3CA9 000E                  		move.w	$E(a1),(a6)
0001FA28 3C91                       		move.w	0(a1),(a6)
0001FA2A 43E9 0010                  		lea	$10(a1),a1
0001FA2E 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001FA32 4E75                       		rts	
0001FA34                            ; ===========================================================================
0001FA34                            
0001FA34                            loc_1C4FA:
0001FA34 2011                       		move.l	0(a1),d0
0001FA36 1029 000F                  		move.b	$F(a1),d0
0001FA3A E098                       		ror.l	#8,d0
0001FA3C 2C80                       		move.l	d0,(a6)
0001FA3E 43E9 0010                  		lea	$10(a1),a1
0001FA42 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001FA46 4E75                       		rts	
0001FA48                            
0001FA48                            ; ---------------------------------------------------------------------------
0001FA48                            ; Animated pattern routine - giant ring
0001FA48                            ; ---------------------------------------------------------------------------
0001FA48                            
0001FA48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FA48                            
0001FA48                            
0001FA48                            AniArt_GiantRing:
0001FA48                            
0001FA48 =0000000E                  @size:		equ 14
0001FA48                            
0001FA48 4A78 F7BE                  		tst.w	(v_gfxbigring).w	; Is there any of the art left to load?
0001FA4C 6600                       		bne.s	@loadTiles		; If so, get to work
0001FA4E 4E75                       		rts	
0001FA50                            ; ===========================================================================
0001FA50                            ; loc_1C518:
0001FA50                            @loadTiles:
0001FA50 0478 01C0 F7BE             		subi.w	#@size*$20,(v_gfxbigring).w	; Count-down the 14 tiles we're going to load now
0001FA56 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001FA5C 7000                       		moveq	#0,d0
0001FA5E 3038 F7BE                  		move.w	(v_gfxbigring).w,d0
0001FA62 43F1 0000                  		lea	(a1,d0.w),a1
0001FA66                            		; Turn VRAM address into VDP command
0001FA66 0640 8000                  		addi.w	#$8000,d0
0001FA6A E588                       		lsl.l	#2,d0
0001FA6C E448                       		lsr.w	#2,d0
0001FA6E 0040 4000                  		ori.w	#$4000,d0
0001FA72 4840                       		swap	d0
0001FA74                            		; Send VDP command (write to VRAM at address contained in v_gfxbigring)
0001FA74 2D40 0004                  		move.l	d0,4(a6)
0001FA78                            
0001FA78 323C 000D                  		move.w	#@size-1,d1
0001FA7C 6000 FE78                  		bra.w	LoadTiles
0001FA80                            
0001FA80                            ; End of function AniArt_GiantRing
0001FA80                            ; End of function AniArt_GiantRing
0001FA80                            
0001FA80                            		include	"_incObj\21 HUD.asm"
0001FA80                            ; ---------------------------------------------------------------------------
0001FA80                            ; Object 21 - SCORE, TIME, RINGS
0001FA80                            ; ---------------------------------------------------------------------------
0001FA80                            
0001FA80                            HUD:
0001FA80 7000                       		moveq	#0,d0
0001FA82 1028 0024                  		move.b	obRoutine(a0),d0
0001FA86 323B 0000                  		move.w	HUD_Index(pc,d0.w),d1
0001FA8A 4EFB 1000                  		jmp	HUD_Index(pc,d1.w)
0001FA8E                            ; ===========================================================================
0001FA8E 0000                       HUD_Index:	dc.w HUD_Main-HUD_Index
0001FA90 0000                       		dc.w HUD_Flash-HUD_Index
0001FA92                            ; ===========================================================================
0001FA92                            
0001FA92                            HUD_Main:	; Routine 0
0001FA92 5428 0024                  		addq.b	#2,obRoutine(a0)
0001FA96 317C 0090 0008             		move.w	#$90,obX(a0)
0001FA9C 317C 0108 000A             		move.w	#$108,obScreenY(a0)
0001FAA2 217C 0000 0000 0004        		move.l	#Map_HUD,obMap(a0)
0001FAAA 317C 06CA 0002             		move.w	#$6CA,obGfx(a0)
0001FAB0 117C 0000 0001             		move.b	#0,obRender(a0)
0001FAB6 317C 0000 0018             		move.w	#0,obPriority(a0)
0001FABC                            
0001FABC                            HUD_Flash:	; Routine 2
0001FABC 7000                       		moveq	#0,d0
0001FABE 0838 0003 FE05             		btst	#3,(v_framebyte).w
0001FAC4 6600                       		bne.s	@display
0001FAC6 4A78 FE20                  		tst.w	(v_rings).w	; do you have any rings?
0001FACA 6600                       		bne.s	@norings	; if so, branch
0001FACC 5240                       		addq.w	#1,d0		; make ring counter flash red
0001FACE                            ; ===========================================================================
0001FACE                            
0001FACE                            @norings:
0001FACE 0C38 0009 FE23             		cmpi.b	#9,(v_timemin).w ; have	9 minutes elapsed?
0001FAD4 6600                       		bne.s	@display	; if not, branch
0001FAD6 5440                       		addq.w	#2,d0		; make time counter flash red
0001FAD8                            
0001FAD8                            	@display:
0001FAD8 1140 001A                  		move.b	d0,obFrame(a0)
0001FADC 4EF9 0000 F978             		jmp	DisplaySprite
0001FADC 4EF9 0000 F978             		jmp	DisplaySprite
0001FAE2                            Map_HUD:	include	"_maps\HUD.asm"
0001FAE2                            ; ---------------------------------------------------------------------------
0001FAE2                            ; Sprite mappings - SCORE, TIME, RINGS
0001FAE2                            ; ---------------------------------------------------------------------------
0001FAE2                            Map_HUD_internal:
0001FAE2 0000                       		dc.w @allyellow-Map_HUD_internal
0001FAE4 0000                       		dc.w @ringred-Map_HUD_internal
0001FAE6 0000                       		dc.w @timered-Map_HUD_internal
0001FAE8 0000                       		dc.w @allred-Map_HUD_internal
0001FAEA 0A                         @allyellow:	dc.b $A
0001FAEB 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001FAF0 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001FAF5 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001FAFA 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001FAFF 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001FB04 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001FB09 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001FB0E A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001FB13 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001FB18 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001FB1D 00                         		dc.b 0
0001FB1E 0A                         @ringred:	dc.b $A
0001FB1F 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001FB24 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001FB29 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001FB2E 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001FB33 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001FB38 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001FB3D A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001FB42 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001FB47 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001FB4C 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001FB51 00                         		dc.b 0
0001FB52 0A                         @timered:	dc.b $A
0001FB53 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001FB58 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001FB5D 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001FB62 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001FB67 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001FB6C A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001FB71 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001FB76 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001FB7B 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001FB80 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001FB85 00                         		dc.b 0
0001FB86 0A                         @allred:	dc.b $A
0001FB87 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001FB8C 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001FB91 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001FB96 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001FB9B 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001FBA0 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001FBA5 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001FBAA A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001FBAF 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001FBB4 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001FBBA 00                         		even
0001FBBA 00                         		even
0001FBBA                            
0001FBBA                            ; ---------------------------------------------------------------------------
0001FBBA                            ; Add points subroutine
0001FBBA                            ; ---------------------------------------------------------------------------
0001FBBA                            
0001FBBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FBBA                            
0001FBBA                            
0001FBBA                            AddPoints:
0001FBBA 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w ; set score counter to update
0001FBC0                            
0001FBC0                            
0001FBC0 47F8 FE26                  			lea     (v_score).w,a3
0001FBC4 D193                       			add.l   d0,(a3)
0001FBC6 223C 000F 423F             			move.l  #999999,d1
0001FBCC B293                       			cmp.l   (a3),d1 ; is score below 999999?
0001FBCE 6200                       			bhi.s   @belowmax ; if yes, branch
0001FBD0 2681                       			move.l  d1,(a3) ; reset score to 999999
0001FBD2                            		@belowmax:
0001FBD2 2013                       			move.l  (a3),d0
0001FBD4 B0B8 FFC0                  			cmp.l   (v_scorelife).w,d0 ; has Sonic got 50000+ points?
0001FBD8 6500                       			blo.s   @noextralife ; if not, branch
0001FBDA                            
0001FBDA 06B8 0000 1388 FFC0        			addi.l  #5000,(v_scorelife).w ; increase requirement by 50000
0001FBE2 4A38 FFF8                  			tst.b   (v_megadrive).w
0001FBE6 6B00                       			bmi.s   @noextralife ; branch if Mega Drive is Japanese
0001FBE8 5238 FE12                  			addq.b  #1,(v_lives).w ; give extra life
0001FBEC 5238 FE1C                  			addq.b  #1,(f_lifecount).w
0001FBFA                            
0001FBFA                            @locret_1C6B6:
0001FBFA                            @noextralife:
0001FBFA 4E75                       		rts	
0001FBFC                            ; End of function AddPoints
0001FBFC                            
0001FBFC                            		include	"_inc\HUD_Update.asm"
0001FBFC                            ; ---------------------------------------------------------------------------
0001FBFC                            ; Subroutine to	update the HUD
0001FBFC                            ; ---------------------------------------------------------------------------
0001FBFC                            
0001FBFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FBFC                            
0001FBFC                            hudVRAM:	macro loc
0001FBFC                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),d0
0001FBFC                            		endm
0001FBFC                            
0001FBFC                            
0001FBFC                            HUD_Update:
0001FBFC 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug mode	on?
0001FC00 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001FC04 4A38 FE1F                  		tst.b	(f_scorecount).w ; does the score need updating?
0001FC08 6700                       		beq.s	@chkrings	; if not, branch
0001FC0A                            
0001FC0A 4238 FE1F                  		clr.b	(f_scorecount).w
0001FC0E 203C 5C80 0003             		hudVRAM	$DC80		; set VRAM address
0001FC14 2238 FE26                  		move.l	(v_score).w,d1	; load score
0001FC18 6100 0000                  		bsr.w	Hud_Score
0001FC1C                            
0001FC1C                            	@chkrings:
0001FC1C 4A38 FE1D                  		tst.b	(f_ringcount).w	; does the ring	counter	need updating?
0001FC20 6700                       		beq.s	@chktime	; if not, branch
0001FC22 6A00                       		bpl.s	@notzero
0001FC24 6100 0000                  		bsr.w	Hud_LoadZero	; reset rings to 0 if Sonic is hit
0001FC28                            
0001FC28                            	@notzero:
0001FC28 4238 FE1D                  		clr.b	(f_ringcount).w
0001FC2C 203C 5F40 0003             		hudVRAM	$DF40		; set VRAM address
0001FC32 7200                       		moveq	#0,d1
0001FC34 3238 FE20                  		move.w	(v_rings).w,d1	; load number of rings
0001FC38 6100 0000                  		bsr.w	Hud_Rings
0001FC3C                            
0001FC3C                            	@chktime:
0001FC3C 4A38 FE1E                  		tst.b	(f_timecount).w	; does the time	need updating?
0001FC40 6700                       		beq.s	@chklives	; if not, branch
0001FC42 4A78 F63A                  		tst.w	(f_pause).w	; is the game paused?
0001FC46 6600                       		bne.s	@chklives	; if yes, branch
0001FC48 43F8 FE22                  		lea	(v_time).w,a1
0001FC4C 0C99 0009 3B3B             		cmpi.l	#(9*$10000)+(59*$100)+59,(a1)+ ; is the time 9:59:59?
0001FC52 6700                       		beq.s	TimeOver	; if yes, branch
0001FC54                            
0001FC54 5221                       		addq.b	#1,-(a1)	; increment 1/60s counter
0001FC56 0C11 003C                  		cmpi.b	#60,(a1)	; check if passed 60
0001FC5A 6500                       		bcs.s	@chklives
0001FC5C 12BC 0000                  		move.b	#0,(a1)
0001FC60 5221                       		addq.b	#1,-(a1)	; increment second counter
0001FC62 0C11 003C                  		cmpi.b	#60,(a1)	; check if passed 60
0001FC66 6500                       		bcs.s	@updatetime
0001FC68 12BC 0000                  		move.b	#0,(a1)
0001FC6C 5221                       		addq.b	#1,-(a1)	; increment minute counter
0001FC6E 0C11 0009                  		cmpi.b	#9,(a1)		; check if passed 9
0001FC72 6500                       		bcs.s	@updatetime
0001FC74 12BC 0009                  		move.b	#9,(a1)		; keep as 9
0001FC78                            
0001FC78                            	@updatetime:
0001FC78 203C 5E40 0003             		hudVRAM	$DE40
0001FC7E 7200                       		moveq	#0,d1
0001FC80 1238 FE23                  		move.b	(v_timemin).w,d1 ; load	minutes
0001FC84 6100 0000                  		bsr.w	Hud_Mins
0001FC88 203C 5EC0 0003             		hudVRAM	$DEC0
0001FC8E 7200                       		moveq	#0,d1
0001FC90 1238 FE24                  		move.b	(v_timesec).w,d1 ; load	seconds
0001FC94 6100 0000                  		bsr.w	Hud_Secs
0001FC98                            
0001FC98                            	@chklives:
0001FC98 4A38 FE1C                  		tst.b	(f_lifecount).w ; does the lives counter need updating?
0001FC9C 6700                       		beq.s	@chkbonus	; if not, branch
0001FC9E 4238 FE1C                  		clr.b	(f_lifecount).w
0001FCA2 6100 0000                  		bsr.w	Hud_Lives
0001FCA6                            
0001FCA6                            	@chkbonus:
0001FCA6 4A38 F7D6                  		tst.b	(f_endactbonus).w ; do time/ring bonus counters need updating?
0001FCAA 6700                       		beq.s	@finish		; if not, branch
0001FCAC 4238 F7D6                  		clr.b	(f_endactbonus).w
0001FCBA 7200                       		moveq	#0,d1
0001FCBC 3238 F7D2                  		move.w	(v_timebonus).w,d1 ; load time bonus
0001FCC0 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001FCC4 7200                       		moveq	#0,d1
0001FCC6 3238 F7D4                  		move.w	(v_ringbonus).w,d1 ; load ring bonus
0001FCCA 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001FCCE                            
0001FCCE                            	@finish:
0001FCCE 4E75                       		rts	
0001FCD0                            ; ===========================================================================
0001FCD0                            
0001FCD0                            TimeOver:
0001FCD0 4238 FE1E                  		clr.b	(f_timecount).w
0001FCD4 41F8 D000                  		lea	(v_player).w,a0
0001FCD8 2448                       		movea.l	a0,a2
0001FCDA 6100 E840                  		bsr.w	KillSonic
0001FCDE 11FC 0001 FE1A             		move.b	#1,(f_timeover).w
0001FCE4 4E75                       		rts	
0001FCE6                            ; ===========================================================================
0001FCE6                            
0001FCE6                            HudDebug:
0001FCE6 6100 0000                  		bsr.w	HudDb_XY
0001FCEA 4A38 FE1D                  		tst.b	(f_ringcount).w	; does the ring	counter	need updating?
0001FCEE 6700                       		beq.s	@objcounter	; if not, branch
0001FCF0 6A00                       		bpl.s	@notzero
0001FCF2 6100 0000                  		bsr.w	Hud_LoadZero	; reset rings to 0 if Sonic is hit
0001FCF6                            
0001FCF6                            	@notzero:
0001FCF6 4238 FE1D                  		clr.b	(f_ringcount).w
0001FCFA 203C 5F40 0003             		hudVRAM	$DF40		; set VRAM address
0001FD00 7200                       		moveq	#0,d1
0001FD02 3238 FE20                  		move.w	(v_rings).w,d1	; load number of rings
0001FD06 6100 0000                  		bsr.w	Hud_Rings
0001FD0A                            
0001FD0A                            	@objcounter:
0001FD0A 203C 5EC0 0003             		hudVRAM	$DEC0		; set VRAM address
0001FD10 7200                       		moveq	#0,d1
0001FD12 1238 F62C                  		move.b	(v_spritecount).w,d1 ; load "number of objects" counter
0001FD16 6100 0000                  		bsr.w	Hud_Secs
0001FD1A 4A38 FE1C                  		tst.b	(f_lifecount).w ; does the lives counter need updating?
0001FD1E 6700                       		beq.s	@chkbonus	; if not, branch
0001FD20 4238 FE1C                  		clr.b	(f_lifecount).w
0001FD24 6100 0000                  		bsr.w	Hud_Lives
0001FD28                            
0001FD28                            	@chkbonus:
0001FD28 4A38 F7D6                  		tst.b	(f_endactbonus).w ; does the ring/time bonus counter need updating?
0001FD2C 6700                       		beq.s	@finish		; if not, branch
0001FD2E 4238 F7D6                  		clr.b	(f_endactbonus).w
0001FD3C 7200                       		moveq	#0,d1
0001FD3E 3238 F7D2                  		move.w	(v_timebonus).w,d1 ; load time bonus
0001FD42 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001FD46 7200                       		moveq	#0,d1
0001FD48 3238 F7D4                  		move.w	(v_ringbonus).w,d1 ; load ring bonus
0001FD4C 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001FD50                            
0001FD50                            	@finish:
0001FD50 4E75                       		rts	
0001FD52                            ; End of function HUD_Update
0001FD52                            
0001FD52                            ; ---------------------------------------------------------------------------
0001FD52                            ; Subroutine to	load "0" on the	HUD
0001FD52                            ; ---------------------------------------------------------------------------
0001FD52                            
0001FD52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FD52                            
0001FD52                            
0001FD52                            Hud_LoadZero:
0001FD5C 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001FD60 343C 0002                  		move.w	#2,d2
0001FD64 6000                       		bra.s	loc_1C83E
0001FD66                            ; End of function Hud_LoadZero
0001FD66                            
0001FD66                            ; ---------------------------------------------------------------------------
0001FD66                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001FD66                            ; ---------------------------------------------------------------------------
0001FD66                            
0001FD66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FD66                            
0001FD66                            
0001FD66                            Hud_Base:
0001FD66 4DF9 00C0 0000             		lea	($C00000).l,a6
0001FD6C 6100 0000                  		bsr.w	Hud_Lives
0001FD7A 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001FD7E 343C 000E                  		move.w	#$E,d2
0001FD82                            
0001FD82                            loc_1C83E:
0001FD82 43FA 0000                  		lea	Art_Hud(pc),a1
0001FD86                            
0001FD86                            loc_1C842:
0001FD86 323C 000F                  		move.w	#$F,d1
0001FD8A 101A                       		move.b	(a2)+,d0
0001FD8C 6B00                       		bmi.s	loc_1C85E
0001FD8E 4880                       		ext.w	d0
0001FD90 EB48                       		lsl.w	#5,d0
0001FD92 47F1 0000                  		lea	(a1,d0.w),a3
0001FD96                            
0001FD96                            loc_1C852:
0001FD96 2C9B                       		move.l	(a3)+,(a6)
0001FD98 51C9 FFFC                  		dbf	d1,loc_1C852
0001FD9C                            
0001FD9C                            loc_1C858:
0001FD9C 51CA FFE8                  		dbf	d2,loc_1C842
0001FDA0                            
0001FDA0 4E75                       		rts	
0001FDA2                            ; ===========================================================================
0001FDA2                            
0001FDA2                            loc_1C85E:
0001FDA2 2CBC 0000 0000             		move.l	#0,(a6)
0001FDA8 51C9 FFF8                  		dbf	d1,loc_1C85E
0001FDAC                            
0001FDAC 60EE                       		bra.s	loc_1C858
0001FDAE                            ; End of function Hud_Base
0001FDAE                            
0001FDAE                            ; ===========================================================================
0001FDAE 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001FDBA FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001FDBE                            ; ---------------------------------------------------------------------------
0001FDBE                            ; Subroutine to	load debug mode	numbers	patterns
0001FDBE                            ; ---------------------------------------------------------------------------
0001FDBE                            
0001FDBE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FDBE                            
0001FDBE                            
0001FDBE                            HudDb_XY:
0001FDC8 3238 F700                  		move.w	(v_screenposx).w,d1 ; load camera x-position
0001FDCC 4841                       		swap	d1
0001FDCE 3238 D008                  		move.w	(v_player+obX).w,d1 ; load Sonic's x-position
0001FDD2 6100                       		bsr.s	HudDb_XY2
0001FDD4 3238 F704                  		move.w	(v_screenposy).w,d1 ; load camera y-position
0001FDD8 4841                       		swap	d1
0001FDDA 3238 D00C                  		move.w	(v_player+obY).w,d1 ; load Sonic's y-position
0001FDDE                            ; End of function HudDb_XY
0001FDDE                            
0001FDDE                            
0001FDDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FDDE                            
0001FDDE                            
0001FDDE                            HudDb_XY2:
0001FDDE 7C07                       		moveq	#7,d6
0001FDE0 43F9 0000 0592             		lea	(Art_Text).l,a1
0001FDE6                            
0001FDE6                            HudDb_XYLoop:
0001FDE6 E959                       		rol.w	#4,d1
0001FDE8 3401                       		move.w	d1,d2
0001FDEA 0242 000F                  		andi.w	#$F,d2
0001FDEE 0C42 000A                  		cmpi.w	#$A,d2
0001FDF2 6500                       		bcs.s	loc_1C8B2
0001FDF4 5E42                       		addq.w	#7,d2
0001FDF6                            
0001FDF6                            loc_1C8B2:
0001FDF6 EB4A                       		lsl.w	#5,d2
0001FDF8 47F1 2000                  		lea	(a1,d2.w),a3
0001FDFC 2C9B                       		move.l	(a3)+,(a6)
0001FDFE 2C9B                       		move.l	(a3)+,(a6)
0001FE00 2C9B                       		move.l	(a3)+,(a6)
0001FE02 2C9B                       		move.l	(a3)+,(a6)
0001FE04 2C9B                       		move.l	(a3)+,(a6)
0001FE06 2C9B                       		move.l	(a3)+,(a6)
0001FE08 2C9B                       		move.l	(a3)+,(a6)
0001FE0A 2C9B                       		move.l	(a3)+,(a6)
0001FE0C 4841                       		swap	d1
0001FE0E 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001FE12                            
0001FE12 4E75                       		rts	
0001FE14                            ; End of function HudDb_XY2
0001FE14                            
0001FE14                            ; ---------------------------------------------------------------------------
0001FE14                            ; Subroutine to	load rings numbers patterns
0001FE14                            ; ---------------------------------------------------------------------------
0001FE14                            
0001FE14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FE14                            
0001FE14                            
0001FE14                            Hud_Rings:
0001FE14 45F9 0000 0000             		lea	(Hud_100).l,a2
0001FE1A 7C02                       		moveq	#2,d6
0001FE1C 6000                       		bra.s	Hud_LoadArt
0001FE1E                            ; End of function Hud_Rings
0001FE1E                            
0001FE1E                            ; ---------------------------------------------------------------------------
0001FE1E                            ; Subroutine to	load score numbers patterns
0001FE1E                            ; ---------------------------------------------------------------------------
0001FE1E                            
0001FE1E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FE1E                            
0001FE1E                            
0001FE1E                            Hud_Score:
0001FE1E 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001FE24 7C05                       		moveq	#5,d6
0001FE26                            
0001FE26                            Hud_LoadArt:
0001FE26 7800                       		moveq	#0,d4
0001FE28 43FA 0000                  		lea	Art_Hud(pc),a1
0001FE2C                            
0001FE2C                            Hud_ScoreLoop:
0001FE2C 7400                       		moveq	#0,d2
0001FE2E 261A                       		move.l	(a2)+,d3
0001FE30                            
0001FE30                            loc_1C8EC:
0001FE30 9283                       		sub.l	d3,d1
0001FE32 6500                       		bcs.s	loc_1C8F4
0001FE34 5242                       		addq.w	#1,d2
0001FE36 60F8                       		bra.s	loc_1C8EC
0001FE38                            ; ===========================================================================
0001FE38                            
0001FE38                            loc_1C8F4:
0001FE38 D283                       		add.l	d3,d1
0001FE3A 4A42                       		tst.w	d2
0001FE3C 6700                       		beq.s	loc_1C8FE
0001FE3E 383C 0001                  		move.w	#1,d4
0001FE42                            
0001FE42                            loc_1C8FE:
0001FE42 4A44                       		tst.w	d4
0001FE44 6700                       		beq.s	loc_1C92C
0001FE46 ED4A                       		lsl.w	#6,d2
0001FE48 2D40 0004                  		move.l	d0,4(a6)
0001FE4C 47F1 2000                  		lea	(a1,d2.w),a3
0001FE50 2C9B                       		move.l	(a3)+,(a6)
0001FE52 2C9B                       		move.l	(a3)+,(a6)
0001FE54 2C9B                       		move.l	(a3)+,(a6)
0001FE56 2C9B                       		move.l	(a3)+,(a6)
0001FE58 2C9B                       		move.l	(a3)+,(a6)
0001FE5A 2C9B                       		move.l	(a3)+,(a6)
0001FE5C 2C9B                       		move.l	(a3)+,(a6)
0001FE5E 2C9B                       		move.l	(a3)+,(a6)
0001FE60 2C9B                       		move.l	(a3)+,(a6)
0001FE62 2C9B                       		move.l	(a3)+,(a6)
0001FE64 2C9B                       		move.l	(a3)+,(a6)
0001FE66 2C9B                       		move.l	(a3)+,(a6)
0001FE68 2C9B                       		move.l	(a3)+,(a6)
0001FE6A 2C9B                       		move.l	(a3)+,(a6)
0001FE6C 2C9B                       		move.l	(a3)+,(a6)
0001FE6E 2C9B                       		move.l	(a3)+,(a6)
0001FE70                            
0001FE70                            loc_1C92C:
0001FE70 0680 0040 0000             		addi.l	#$400000,d0
0001FE76 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001FE7A                            
0001FE7A 4E75                       		rts	
0001FE7C                            
0001FE7C                            ; End of function Hud_Score
0001FE7C                            ; End of function Hud_Score
0001FE7C                            
0001FE7C                            ; ---------------------------------------------------------------------------
0001FE7C                            ; Subroutine to	load countdown numbers on the continue screen
0001FE7C                            ; ---------------------------------------------------------------------------
0001FE7C                            
0001FE7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FE7C                            
0001FE7C                            
0001FE7C                            ContScrCounter:
0001FE86 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0001FE8C 45F9 0000 0000             		lea	(Hud_10).l,a2
0001FE92 7C01                       		moveq	#1,d6
0001FE94 7800                       		moveq	#0,d4
0001FE96 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001FE9A                            
0001FE9A                            ContScr_Loop:
0001FE9A 7400                       		moveq	#0,d2
0001FE9C 261A                       		move.l	(a2)+,d3
0001FE9E                            
0001FE9E                            loc_1C95A:
0001FE9E 9283                       		sub.l	d3,d1
0001FEA0 6500                       		blo.s	loc_1C962
0001FEA2 5242                       		addq.w	#1,d2
0001FEA4 60F8                       		bra.s	loc_1C95A
0001FEA6                            ; ===========================================================================
0001FEA6                            
0001FEA6                            loc_1C962:
0001FEA6 D283                       		add.l	d3,d1
0001FEA8 ED4A                       		lsl.w	#6,d2
0001FEAA 47F1 2000                  		lea	(a1,d2.w),a3
0001FEAE 2C9B                       		move.l	(a3)+,(a6)
0001FEB0 2C9B                       		move.l	(a3)+,(a6)
0001FEB2 2C9B                       		move.l	(a3)+,(a6)
0001FEB4 2C9B                       		move.l	(a3)+,(a6)
0001FEB6 2C9B                       		move.l	(a3)+,(a6)
0001FEB8 2C9B                       		move.l	(a3)+,(a6)
0001FEBA 2C9B                       		move.l	(a3)+,(a6)
0001FEBC 2C9B                       		move.l	(a3)+,(a6)
0001FEBE 2C9B                       		move.l	(a3)+,(a6)
0001FEC0 2C9B                       		move.l	(a3)+,(a6)
0001FEC2 2C9B                       		move.l	(a3)+,(a6)
0001FEC4 2C9B                       		move.l	(a3)+,(a6)
0001FEC6 2C9B                       		move.l	(a3)+,(a6)
0001FEC8 2C9B                       		move.l	(a3)+,(a6)
0001FECA 2C9B                       		move.l	(a3)+,(a6)
0001FECC 2C9B                       		move.l	(a3)+,(a6)
0001FECE 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001FED2                            
0001FED2 4E75                       		rts	
0001FED4                            ; End of function ContScrCounter
0001FED4                            
0001FED4                            ; ===========================================================================
0001FED4                            
0001FED4                            		include	"_inc\HUD (part 2).asm"
0001FED4                            ; ---------------------------------------------------------------------------
0001FED4                            ; HUD counter sizes
0001FED4                            ; ---------------------------------------------------------------------------
0001FED4 0001 86A0                  Hud_100000:	dc.l 100000
0001FED8 0000 2710                  Hud_10000:	dc.l 10000
0001FEDC 0000 03E8                  Hud_1000:	dc.l 1000
0001FEE0 0000 0064                  Hud_100:	dc.l 100
0001FEE4 0000 000A                  Hud_10:		dc.l 10
0001FEE8 0000 0001                  Hud_1:		dc.l 1
0001FEEC                            
0001FEEC                            ; ---------------------------------------------------------------------------
0001FEEC                            ; Subroutine to	load time numbers patterns
0001FEEC                            ; ---------------------------------------------------------------------------
0001FEEC                            
0001FEEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FEEC                            
0001FEEC                            
0001FEEC                            Hud_Mins:
0001FEEC 45F9 0001 FEE8             		lea	(Hud_1).l,a2
0001FEF2 7C00                       		moveq	#0,d6
0001FEF4 6000                       		bra.s	loc_1C9BA
0001FEF6                            ; End of function Hud_Mins
0001FEF6                            
0001FEF6                            
0001FEF6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FEF6                            
0001FEF6                            
0001FEF6                            Hud_Secs:
0001FEF6 45F9 0001 FEE4             		lea	(Hud_10).l,a2
0001FEFC 7C01                       		moveq	#1,d6
0001FEFE                            
0001FEFE                            loc_1C9BA:
0001FEFE 7800                       		moveq	#0,d4
0001FF00 43FA 0000                  		lea	Art_Hud(pc),a1
0001FF04                            
0001FF04                            Hud_TimeLoop:
0001FF04 7400                       		moveq	#0,d2
0001FF06 261A                       		move.l	(a2)+,d3
0001FF08                            
0001FF08                            loc_1C9C4:
0001FF08 9283                       		sub.l	d3,d1
0001FF0A 6500                       		bcs.s	loc_1C9CC
0001FF0C 5242                       		addq.w	#1,d2
0001FF0E 60F8                       		bra.s	loc_1C9C4
0001FF10                            ; ===========================================================================
0001FF10                            
0001FF10                            loc_1C9CC:
0001FF10 D283                       		add.l	d3,d1
0001FF12 4A42                       		tst.w	d2
0001FF14 6700                       		beq.s	loc_1C9D6
0001FF16 383C 0001                  		move.w	#1,d4
0001FF1A                            
0001FF1A                            loc_1C9D6:
0001FF1A ED4A                       		lsl.w	#6,d2
0001FF1C 2D40 0004                  		move.l	d0,4(a6)
0001FF20 47F1 2000                  		lea	(a1,d2.w),a3
0001FF24 2C9B                       		move.l	(a3)+,(a6)
0001FF26 2C9B                       		move.l	(a3)+,(a6)
0001FF28 2C9B                       		move.l	(a3)+,(a6)
0001FF2A 2C9B                       		move.l	(a3)+,(a6)
0001FF2C 2C9B                       		move.l	(a3)+,(a6)
0001FF2E 2C9B                       		move.l	(a3)+,(a6)
0001FF30 2C9B                       		move.l	(a3)+,(a6)
0001FF32 2C9B                       		move.l	(a3)+,(a6)
0001FF34 2C9B                       		move.l	(a3)+,(a6)
0001FF36 2C9B                       		move.l	(a3)+,(a6)
0001FF38 2C9B                       		move.l	(a3)+,(a6)
0001FF3A 2C9B                       		move.l	(a3)+,(a6)
0001FF3C 2C9B                       		move.l	(a3)+,(a6)
0001FF3E 2C9B                       		move.l	(a3)+,(a6)
0001FF40 2C9B                       		move.l	(a3)+,(a6)
0001FF42 2C9B                       		move.l	(a3)+,(a6)
0001FF44 0680 0040 0000             		addi.l	#$400000,d0
0001FF4A 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001FF4E                            
0001FF4E 4E75                       		rts	
0001FF50                            ; End of function Hud_Secs
0001FF50                            
0001FF50                            ; ---------------------------------------------------------------------------
0001FF50                            ; Subroutine to	load time/ring bonus numbers patterns
0001FF50                            ; ---------------------------------------------------------------------------
0001FF50                            
0001FF50                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FF50                            
0001FF50                            
0001FF50                            Hud_TimeRingBonus:
0001FF50 45F9 0001 FEDC             		lea	(Hud_1000).l,a2
0001FF56 7C03                       		moveq	#3,d6
0001FF58 7800                       		moveq	#0,d4
0001FF5A 43FA 0000                  		lea	Art_Hud(pc),a1
0001FF5E                            
0001FF5E                            Hud_BonusLoop:
0001FF5E 7400                       		moveq	#0,d2
0001FF60 261A                       		move.l	(a2)+,d3
0001FF62                            
0001FF62                            loc_1CA1E:
0001FF62 9283                       		sub.l	d3,d1
0001FF64 6500                       		bcs.s	loc_1CA26
0001FF66 5242                       		addq.w	#1,d2
0001FF68 60F8                       		bra.s	loc_1CA1E
0001FF6A                            ; ===========================================================================
0001FF6A                            
0001FF6A                            loc_1CA26:
0001FF6A D283                       		add.l	d3,d1
0001FF6C 4A42                       		tst.w	d2
0001FF6E 6700                       		beq.s	loc_1CA30
0001FF70 383C 0001                  		move.w	#1,d4
0001FF74                            
0001FF74                            loc_1CA30:
0001FF74 4A44                       		tst.w	d4
0001FF76 6700                       		beq.s	Hud_ClrBonus
0001FF78 ED4A                       		lsl.w	#6,d2
0001FF7A 47F1 2000                  		lea	(a1,d2.w),a3
0001FF7E 2C9B                       		move.l	(a3)+,(a6)
0001FF80 2C9B                       		move.l	(a3)+,(a6)
0001FF82 2C9B                       		move.l	(a3)+,(a6)
0001FF84 2C9B                       		move.l	(a3)+,(a6)
0001FF86 2C9B                       		move.l	(a3)+,(a6)
0001FF88 2C9B                       		move.l	(a3)+,(a6)
0001FF8A 2C9B                       		move.l	(a3)+,(a6)
0001FF8C 2C9B                       		move.l	(a3)+,(a6)
0001FF8E 2C9B                       		move.l	(a3)+,(a6)
0001FF90 2C9B                       		move.l	(a3)+,(a6)
0001FF92 2C9B                       		move.l	(a3)+,(a6)
0001FF94 2C9B                       		move.l	(a3)+,(a6)
0001FF96 2C9B                       		move.l	(a3)+,(a6)
0001FF98 2C9B                       		move.l	(a3)+,(a6)
0001FF9A 2C9B                       		move.l	(a3)+,(a6)
0001FF9C 2C9B                       		move.l	(a3)+,(a6)
0001FF9E                            
0001FF9E                            loc_1CA5A:
0001FF9E 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001FFA2                            
0001FFA2 4E75                       		rts	
0001FFA4                            ; ===========================================================================
0001FFA4                            
0001FFA4                            Hud_ClrBonus:
0001FFA4 7A0F                       		moveq	#$F,d5
0001FFA6                            
0001FFA6                            Hud_ClrBonusLoop:
0001FFA6 2CBC 0000 0000             		move.l	#0,(a6)
0001FFAC 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001FFB0                            
0001FFB0 60EC                       		bra.s	loc_1CA5A
0001FFB2                            ; End of function Hud_TimeRingBonus
0001FFB2                            
0001FFB2                            ; ---------------------------------------------------------------------------
0001FFB2                            ; Subroutine to	load uncompressed lives	counter	patterns
0001FFB2                            ; ---------------------------------------------------------------------------
0001FFB2                            
0001FFB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FFB2                            
0001FFB2                            
0001FFB2                            Hud_Lives:
0001FFB2 203C 7BA0 0003             		hudVRAM	$FBA0		; set VRAM address
0001FFB8 7200                       		moveq	#0,d1
0001FFBA 1238 FE12                  		move.b	(v_lives).w,d1	; load number of lives
0001FFBE 45F9 0001 FEE4             		lea	(Hud_10).l,a2
0001FFC4 7C01                       		moveq	#1,d6
0001FFC6 7800                       		moveq	#0,d4
0001FFC8 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001FFCC                            
0001FFCC                            Hud_LivesLoop:
0001FFCC 2D40 0004                  		move.l	d0,4(a6)
0001FFD0 7400                       		moveq	#0,d2
0001FFD2 261A                       		move.l	(a2)+,d3
0001FFD4                            
0001FFD4                            loc_1CA90:
0001FFD4 9283                       		sub.l	d3,d1
0001FFD6 6500                       		bcs.s	loc_1CA98
0001FFD8 5242                       		addq.w	#1,d2
0001FFDA 60F8                       		bra.s	loc_1CA90
0001FFDC                            ; ===========================================================================
0001FFDC                            
0001FFDC                            loc_1CA98:
0001FFDC D283                       		add.l	d3,d1
0001FFDE 4A42                       		tst.w	d2
0001FFE0 6700                       		beq.s	loc_1CAA2
0001FFE2 383C 0001                  		move.w	#1,d4
0001FFE6                            
0001FFE6                            loc_1CAA2:
0001FFE6 4A44                       		tst.w	d4
0001FFE8 6700                       		beq.s	Hud_ClrLives
0001FFEA                            
0001FFEA                            loc_1CAA6:
0001FFEA EB4A                       		lsl.w	#5,d2
0001FFEC 47F1 2000                  		lea	(a1,d2.w),a3
0001FFF0 2C9B                       		move.l	(a3)+,(a6)
0001FFF2 2C9B                       		move.l	(a3)+,(a6)
0001FFF4 2C9B                       		move.l	(a3)+,(a6)
0001FFF6 2C9B                       		move.l	(a3)+,(a6)
0001FFF8 2C9B                       		move.l	(a3)+,(a6)
0001FFFA 2C9B                       		move.l	(a3)+,(a6)
0001FFFC 2C9B                       		move.l	(a3)+,(a6)
0001FFFE 2C9B                       		move.l	(a3)+,(a6)
00020000                            
00020000                            loc_1CABC:
00020000 0680 0040 0000             		addi.l	#$400000,d0
00020006 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0002000A                            
0002000A 4E75                       		rts	
0002000C                            ; ===========================================================================
0002000C                            
0002000C                            Hud_ClrLives:
0002000C 4A46                       		tst.w	d6
0002000E 67DA                       		beq.s	loc_1CAA6
00020010 7A07                       		moveq	#7,d5
00020012                            
00020012                            Hud_ClrLivesLoop:
00020012 2CBC 0000 0000             		move.l	#0,(a6)
00020018 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0002001C 60E2                       		bra.s	loc_1CABC
0002001E                            ; End of function Hud_Lives
0002001E                            ; End of function Hud_Lives
0002001E                            
0002001E                            Art_Hud:	incbin	"artunc\HUD Numbers.bin" ; 8x16 pixel numbers on HUD
0002031E                            		even
0002031E                            Art_LivesNums:	incbin	"artunc\Lives Counter Numbers.bin" ; 8x8 pixel numbers on lives counter
0002045E                            		even
0002045E                            
0002045E                            		include	"_incObj\DebugMode.asm"
0002045E                            ; ---------------------------------------------------------------------------
0002045E                            ; When debug mode is currently in use
0002045E                            ; ---------------------------------------------------------------------------
0002045E                            
0002045E                            DebugMode:
0002045E 7000                       		moveq	#0,d0
00020460 1038 FE08                  		move.b	(v_debuguse).w,d0
00020464 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
00020468 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0002046C                            ; ===========================================================================
0002046C 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0002046E 0000                       		dc.w Debug_Action-Debug_Index
00020470                            ; ===========================================================================
00020470                            
00020470                            Debug_Main:	; Routine 0
00020470 5438 FE08                  		addq.b	#2,(v_debuguse).w
00020474 31F8 F72C FEF0             		move.w	(v_limittop2).w,(v_limittopdb).w ; buffer level x-boundary
0002047A 31F8 F726 FEF2             		move.w	(v_limitbtm1).w,(v_limitbtmdb).w ; buffer level y-boundary
00020480 31FC 0000 F72C             		move.w	#0,(v_limittop2).w
00020486 31FC 0720 F726             		move.w	#$720,(v_limitbtm1).w
0002048C 0278 07FF D00C             		andi.w	#$7FF,(v_player+obY).w
00020492 0278 07FF F704             		andi.w	#$7FF,(v_screenposy).w
00020498 0278 03FF F70C             		andi.w	#$3FF,(v_bgscreenposy).w
0002049E 117C 0000 001A             		move.b	#0,obFrame(a0)
000204A4 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
000204AA 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is game mode $10 (special stage)?
000204B0 6600                       		bne.s	@islevel	; if not, branch
000204B2                            
000204B2 31FC 0000 F782             		move.w	#0,(v_ssrotate).w ; stop special stage rotating
000204B8 31FC 0000 F780             		move.w	#0,(v_ssangle).w ; make	special	stage "upright"
000204BE 7006                       		moveq	#6,d0		; use 6th debug	item list
000204C0 6000                       		bra.s	@selectlist
000204C2                            ; ===========================================================================
000204C2                            
000204C2                            @islevel:
000204C2 7000                       		moveq	#0,d0
000204C4 1038 FE10                  		move.b	(v_zone).w,d0
000204C8                            
000204C8                            @selectlist:
000204C8 45F9 0000 0000             		lea	(DebugList).l,a2
000204CE D040                       		add.w	d0,d0
000204D0 D4F2 0000                  		adda.w	(a2,d0.w),a2
000204D4 3C1A                       		move.w	(a2)+,d6
000204D6 BC38 FE06                  		cmp.b	(v_debugitem).w,d6 ; have you gone past the last item?
000204DA 6200                       		bhi.s	@noreset	; if not, branch
000204DC 11FC 0000 FE06             		move.b	#0,(v_debugitem).w ; back to start of list
000204E2                            
000204E2                            	@noreset:
000204E2 6100 0000                  		bsr.w	Debug_ShowItem
000204E6 11FC 000C FE0A             		move.b	#12,(v_debugxspeed).w
000204EC 11FC 0001 FE0B             		move.b	#1,(v_debugyspeed).w
000204F2                            
000204F2                            Debug_Action:	; Routine 2
000204F2 7006                       		moveq	#6,d0
000204F4 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w
000204FA 6700                       		beq.s	@isntlevel
000204FC                            
000204FC 7000                       		moveq	#0,d0
000204FE 1038 FE10                  		move.b	(v_zone).w,d0
00020502                            
00020502                            	@isntlevel:
00020502 45F9 0000 0000             		lea	(DebugList).l,a2
00020508 D040                       		add.w	d0,d0
0002050A D4F2 0000                  		adda.w	(a2,d0.w),a2
0002050E 3C1A                       		move.w	(a2)+,d6
00020510 6100 0000                  		bsr.w	Debug_Control
00020514 4EF9 0000 F978             		jmp	(DisplaySprite).l
0002051A                            
0002051A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002051A                            
0002051A                            
0002051A                            Debug_Control:
0002051A 7800                       		moveq	#0,d4
0002051C 323C 0001                  		move.w	#1,d1
00020520 1838 F605                  		move.b	(v_jpadpress1).w,d4
00020524 0244 000F                  		andi.w	#btnDir,d4	; is up/down/left/right	pressed?
00020528 6600                       		bne.s	@dirpressed	; if yes, branch
0002052A                            
0002052A 1038 F604                  		move.b	(v_jpadhold1).w,d0
0002052E 0240 000F                  		andi.w	#btnDir,d0	; is up/down/left/right	held?
00020532 6600                       		bne.s	@dirheld	; if yes, branch
00020534                            
00020534 11FC 000C FE0A             		move.b	#12,(v_debugxspeed).w
0002053A 11FC 000F FE0B             		move.b	#15,(v_debugyspeed).w
00020540 6000 0000                  		bra.w	Debug_ChgItem
00020544                            ; ===========================================================================
00020544                            
00020544                            @dirheld:
00020544 5338 FE0A                  		subq.b	#1,(v_debugxspeed).w
00020548 6600                       		bne.s	loc_1D01C
0002054A 11FC 0001 FE0A             		move.b	#1,(v_debugxspeed).w
00020550 5238 FE0B                  		addq.b	#1,(v_debugyspeed).w
00020554 6600                       		bne.s	@dirpressed
00020556 11FC 00FF FE0B             		move.b	#-1,(v_debugyspeed).w
0002055C                            
0002055C                            @dirpressed:
0002055C 1838 F604                  		move.b	(v_jpadhold1).w,d4
00020560                            
00020560                            loc_1D01C:
00020560 7200                       		moveq	#0,d1
00020562 1238 FE0B                  		move.b	(v_debugyspeed).w,d1
00020566 5241                       		addq.w	#1,d1
00020568 4841                       		swap	d1
0002056A E881                       		asr.l	#4,d1
0002056C 2428 000C                  		move.l	obY(a0),d2
00020570 2628 0008                  		move.l	obX(a0),d3
00020574 0804 0000                  		btst	#bitUp,d4	; is up	being pressed?
00020578 6700                       		beq.s	loc_1D03C	; if not, branch
0002057A 9481                       		sub.l	d1,d2
0002057C 6400                       		bcc.s	loc_1D03C
0002057E 7400                       		moveq	#0,d2
00020580                            
00020580                            loc_1D03C:
00020580 0804 0001                  		btst	#bitDn,d4	; is down being	pressed?
00020584 6700                       		beq.s	loc_1D052	; if not, branch
00020586 D481                       		add.l	d1,d2
00020588 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0002058E 6500                       		bcs.s	loc_1D052
00020590 243C 07FF 0000             		move.l	#$7FF0000,d2
00020596                            
00020596                            loc_1D052:
00020596 0804 0002                  		btst	#bitL,d4
0002059A 6700                       		beq.s	loc_1D05E
0002059C 9681                       		sub.l	d1,d3
0002059E 6400                       		bcc.s	loc_1D05E
000205A0 7600                       		moveq	#0,d3
000205A2                            
000205A2                            loc_1D05E:
000205A2 0804 0003                  		btst	#bitR,d4
000205A6 6700                       		beq.s	loc_1D066
000205A8 D681                       		add.l	d1,d3
000205AA                            
000205AA                            loc_1D066:
000205AA 2142 000C                  		move.l	d2,obY(a0)
000205AE 2143 0008                  		move.l	d3,obX(a0)
000205B2                            
000205B2                            Debug_ChgItem:
000205B2 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is button A pressed?
000205B8 6700                       		beq.s	@createitem	; if not, branch
000205BA 0838 0005 F605             		btst	#bitC,(v_jpadpress1).w ; is button C pressed?
000205C0 6700                       		beq.s	@nextitem	; if not, branch
000205C2 5338 FE06                  		subq.b	#1,(v_debugitem).w ; go back 1 item
000205C6 6400                       		bcc.s	@display
000205C8 DD38 FE06                  		add.b	d6,(v_debugitem).w
000205CC 6000                       		bra.s	@display
000205CE                            ; ===========================================================================
000205CE                            
000205CE                            @nextitem:
000205CE 0838 0006 F605             		btst	#bitA,(v_jpadpress1).w ; is button A pressed?
000205D4 6700                       		beq.s	@createitem	; if not, branch
000205D6 5238 FE06                  		addq.b	#1,(v_debugitem).w ; go forwards 1 item
000205DA BC38 FE06                  		cmp.b	(v_debugitem).w,d6
000205DE 6200                       		bhi.s	@display
000205E0 11FC 0000 FE06             		move.b	#0,(v_debugitem).w ; loop back to first item
000205E6                            
000205E6                            	@display:
000205E6 6000 0000                  		bra.w	Debug_ShowItem
000205EA                            ; ===========================================================================
000205EA                            
000205EA                            @createitem:
000205EA 0838 0005 F605             		btst	#bitC,(v_jpadpress1).w ; is button C pressed?
000205F0 6700                       		beq.s	@backtonormal	; if not, branch
000205F2 4EB9 0000 FE04             		jsr	(FindFreeObj).l
000205F8 6600                       		bne.s	@backtonormal
000205FA 3368 0008 0008             		move.w	obX(a0),obX(a1)
00020600 3368 000C 000C             		move.w	obY(a0),obY(a1)
00020606 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0002060A 1368 0001 0001             		move.b	obRender(a0),obRender(a1)
00020610 1368 0001 0022             		move.b	obRender(a0),obStatus(a1)
00020616 0229 007F 0022             		andi.b	#$7F,obStatus(a1)
0002061C 7000                       		moveq	#0,d0
0002061E 1038 FE06                  		move.b	(v_debugitem).w,d0
00020622 E748                       		lsl.w	#3,d0
00020624 1372 0004 0028             		move.b	4(a2,d0.w),obSubtype(a1)
0002062A 4E75                       		rts	
0002062C                            ; ===========================================================================
0002062C                            
0002062C                            @backtonormal:
0002062C 0838 0004 F605             		btst	#bitB,(v_jpadpress1).w ; is button B pressed?
00020632 6700                       		beq.s	@stayindebug	; if not, branch
00020634 7000                       		moveq	#0,d0
00020636 31C0 FE08                  		move.w	d0,(v_debuguse).w ; deactivate debug mode
0002063A 21FC 0000 0000 D004        		move.l	#Map_Sonic,(v_player+obMap).w
00020642 31FC 0780 D002             		move.w	#$780,(v_player+obGfx).w
00020648 11C0 D01C                  		move.b	d0,(v_player+obAnim).w
0002064C 3140 000A                  		move.w	d0,obX+2(a0)
00020650 3140 000E                  		move.w	d0,obY+2(a0)
00020654 31F8 FEF0 F72C             		move.w	(v_limittopdb).w,(v_limittop2).w ; restore level boundaries
0002065A 31F8 FEF2 F726             		move.w	(v_limitbtmdb).w,(v_limitbtm1).w
00020660 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; are you in the special stage?
00020666 6600                       		bne.s	@stayindebug	; if not, branch
00020668                            
00020668 4278 F780                  		clr.w	(v_ssangle).w
0002066C 31FC 0040 F782             		move.w	#$40,(v_ssrotate).w ; set new level rotation speed
00020672 21FC 0000 0000 D004        		move.l	#Map_Sonic,(v_player+obMap).w
0002067A 31FC 0780 D002             		move.w	#$780,(v_player+obGfx).w
00020680 11FC 0002 D01C             		move.b	#id_Roll,(v_player+obAnim).w
00020686 08F8 0002 D022             		bset	#2,(v_player+obStatus).w
0002068C 08F8 0001 D022             		bset	#1,(v_player+obStatus).w
00020692                            
00020692                            	@stayindebug:
00020692 4E75                       		rts	
00020694                            ; End of function Debug_Control
00020694                            
00020694                            
00020694                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020694                            
00020694                            
00020694                            Debug_ShowItem:
00020694 7000                       		moveq	#0,d0
00020696 1038 FE06                  		move.b	(v_debugitem).w,d0
0002069A E748                       		lsl.w	#3,d0
0002069C 2172 0000 0004             		move.l	(a2,d0.w),obMap(a0) ; load mappings for item
000206A2 3172 0006 0002             		move.w	6(a2,d0.w),obGfx(a0) ; load VRAM setting for item
000206A8 1172 0005 001A             		move.b	5(a2,d0.w),obFrame(a0) ; load frame number for item
000206AE 4E75                       		rts	
000206B0                            ; End of function Debug_ShowItem
000206B0                            ; End of function Debug_ShowItem
000206B0                            		include	"_inc\DebugList.asm"
000206B0                            ; ---------------------------------------------------------------------------
000206B0                            ; Debug	mode item lists
000206B0                            ; ---------------------------------------------------------------------------
000206B0                            DebugList:
000206B0 0000                       	dc.w @GHZ-DebugList
000206B2 0000                       	dc.w @LZ-DebugList
000206B4 0000                       	dc.w @MZ-DebugList
000206B6 0000                       	dc.w @SLZ-DebugList
000206B8 0000                       	dc.w @SYZ-DebugList
000206BA 0000                       	dc.w @SBZ-DebugList
000206BC 0000                       	dc.w @Ending-DebugList
000206BE                            
000206BE                            dbug:	macro map,object,subtype,frame,vram
000206BE                            	dc.l map+(object<<24)
000206BE                            	dc.b subtype,frame
000206BE                            	dc.w vram
000206BE                            	endm
000206BE                            
000206BE                            @GHZ:
000206BE 0000                       	dc.w (@GHZend-@GHZ-2)/8
000206C0                            
000206C0                            ;		mappings	object		subtype	frame	VRAM setting
000206C0 2500 BFD4 0000 27B2        	dbug 	Map_Ring,	id_Rings,	0,	0,	$27B2
000206C8 2600 C79A 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
000206D0 1F00 B3B4 0000 0400        	dbug	Map_Crab,	id_Crabmeat,	0,	0,	$400
000206D8 2200 B83E 0000 0444        	dbug	Map_Buzz,	id_BuzzBomber,	0,	0,	$444
000206E0 2B00 CED6 0000 047B        	dbug	Map_Chop,	id_Chopper,	0,	0,	$47B
000206E8 3600 F322 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
000206F0 1800 9D6E 0000 4000        	dbug	Map_Plat_GHZ,	id_BasicPlatform, 0,	0,	$4000
000206F8 3B00 F448 0000 63D0        	dbug	Map_PRock,	id_PurpleRock,	0,	0,	$63D0
00020700 4001 19E0 0000 04F0        	dbug	Map_Moto,	id_MotoBug,	0,	0,	$4F0
00020708 4101 0096 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
00020710 4201 02BC 0000 249B        	dbug	Map_Newt,	id_Newtron,	0,	0,	$249B
00020718 4401 05CA 0000 434C        	dbug	Map_Edge,	id_EdgeWalls,	0,	0,	$434C
00020720 7901 A21E 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
00020728 4B00 C024 0000 2400        	dbug	Map_GRing,	id_GiantRing,	0,	0,	$2400
00020730 7D01 A3E0 0101 84B6        	dbug	Map_Bonus,	id_HiddenBonus,	1,	1,	$84B6
00020738                            	@GHZend:
00020738                            
00020738                            @LZ:
00020738 0000                       	dc.w (@LZend-@LZ-2)/8
0002073A                            
0002073A                            ;		mappings	object		subtype	frame	VRAM setting
0002073A 2500 BFD4 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
00020742 2600 C79A 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
0002074A 4101 0096 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
00020752 2C00 CF7C 0800 2486        	dbug	Map_Jaws,	id_Jaws,	8,	0,	$2486
0002075A 2D00 D168 0002 84A6        	dbug	Map_Burro,	id_Burrobot,	0,	2,	$84A6
00020762 1601 4394 0000 03CC        	dbug	Map_Harp,	id_Harpoon,	0,	0,	$3CC
0002076A 1601 4394 0203 03CC        	dbug	Map_Harp,	id_Harpoon,	2,	3,	$3CC
00020772 3300 E5E6 0000 43DE        	dbug	Map_Push,	id_PushBlock,	0,	0,	$43DE
0002077A 3200 E1A6 0000 0513        	dbug	Map_But,	id_Button,	0,	0,	$513
00020782 3600 F322 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
0002078A 5201 246A 0400 43BC        	dbug	Map_MBlockLZ,	id_MovingBlock,	4,	0,	$43BC
00020792 6101 45BC 0100 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, 1,	0,	$43E6
0002079A 6101 45BC 1301 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, $13,	1,	$43E6
000207A2 6101 45BC 0500 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, 5,	0,	$43E6
000207AA 6201 4710 0000 443E        	dbug	Map_Gar,	id_Gargoyle,	0,	0,	$443E
000207B2 6101 45BC 2702 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, $27,	2,	$43E6
000207BA 6101 45BC 3003 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, $30,	3,	$43E6
000207C2 6301 4A72 7F00 03F6        	dbug	Map_LConv,	id_LabyrinthConvey, $7F, 0,	$3F6
000207CA 6001 42DE 0000 0467        	dbug	Map_Orb,	id_Orbinaut,	0,	0,	$467
000207D2 6401 4DC0 8413 8348        	dbug	Map_Bub,	id_Bubble,	$84,	$13,	$8348
000207DA 6501 4F48 0202 C259        	dbug	Map_WFall,	id_Waterfall,	2,	2,	$C259
000207E2 6501 4F48 0909 C259        	dbug	Map_WFall,	id_Waterfall,	9,	9,	$C259
000207EA 0B01 372A 0000 43DE        	dbug	Map_Pole,	id_Pole,	0,	0,	$43DE
000207F2 0C01 37FA 0200 4328        	dbug	Map_Flap,	id_FlapDoor,	2,	0,	$4328
000207FA 7901 A21E 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
00020802                            	@LZend:
00020802                            
00020802                            @MZ:
00020802 0000                       	dc.w (@MZend-@MZ-2)/8
00020804                            
00020804                            ;		mappings	object		subtype	frame	VRAM setting
00020804 2500 BFD4 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
0002080C 2600 C79A 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
00020814 2200 B83E 0000 0444        	dbug	Map_Buzz,	id_BuzzBomber,	0,	0,	$444
0002081C 3600 F322 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
00020824 4101 0096 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
0002082C 1300 D676 0000 0345        	dbug	Map_Fire,	id_LavaMaker,	0,	0,	$345
00020834 4601 0C7A 0000 4000        	dbug	Map_Brick,	id_MarbleBrick,	0,	0,	$4000
0002083C 6E01 92BA 0400 047E        	dbug	Map_Elec,	id_Electro,	4,	0,	$47E
00020844 6A01 8C72 0200 43B5        	dbug	Map_Saw,	id_Saws,	2,	0,	$43B5
0002084C 3300 E5E6 0000 42B8        	dbug	Map_Push,	id_PushBlock,	0,	0,	$42B8
00020854 1E00 AACC 0400 2302        	dbug	Map_Hog,	id_BallHog,	4,	0,	$2302
0002085C 5101 219E 0000 42B8        	dbug	Map_Smab,	id_SmashBlock,	0,	0,	$42B8
00020864 5201 2414 0000 02B8        	dbug	Map_MBlock,	id_MovingBlock,	0,	0,	$2B8
0002086C 5300 A3B0 0000 62B8        	dbug	Map_CFlo,	id_CollapseFloor, 0,	0,	$62B8
00020874 5401 1546 0000 8680        	dbug	Map_LTag,	id_LavaTag,	0,	0,	$8680
0002087C 5501 2608 0000 04B8        	dbug	Map_Bas,	id_Basaran,	0,	0,	$4B8
00020884 7801 9E8A 0000 24FF        	dbug	Map_Cat,	id_Caterkiller,	0,	0,	$24FF
0002088C 7901 A21E 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
00020894                            	@MZend:
00020894                            
00020894                            @SLZ:
00020894 0000                       	dc.w (@SLZend-@SLZ-2)/8
00020896                            
00020896                            ;		mappings	object		subtype	frame	VRAM setting
00020896 2500 BFD4 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
0002089E 2600 C79A 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
000208A6 5901 3152 0000 4000        	dbug	Map_Elev,	id_Elevator,	0,	0,	$4000
000208AE 5300 A3B0 0002 44E0        	dbug	Map_CFlo,	id_CollapseFloor, 0,	2,	$44E0
000208B6 1800 9DCC 0000 4000        	dbug	Map_Plat_SLZ,	id_BasicPlatform, 0,	0,	$4000
000208BE 5A01 328C 0000 4000        	dbug	Map_Circ,	id_CirclingPlatform, 0,	0,	$4000
000208C6 5B01 3444 0000 4000        	dbug	Map_Stair,	id_Staircase,	0,	0,	$4000
000208CE 5D01 3A18 0000 43A0        	dbug	Map_Fan,	id_Fan,		0,	0,	$43A0
000208D6 5E01 3DAA 0000 0374        	dbug	Map_Seesaw,	id_Seesaw,	0,	0,	$374
000208DE 4101 0096 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
000208E6 1300 D676 0000 0480        	dbug	Map_Fire,	id_LavaMaker,	0,	0,	$480
000208EE 1C00 A4CE 0000 44D8        	dbug	Map_Scen,	id_Scenery,	0,	0,	$44D8
000208F6 5F01 4028 0000 0400        	dbug	Map_Bomb,	id_Bomb,	0,	0,	$400
000208FE 6001 42DE 0000 2429        	dbug	Map_Orb,	id_Orbinaut,	0,	0,	$2429
00020906 7901 A21E 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
0002090E                            	@SLZend:
0002090E                            
0002090E                            @SYZ:
0002090E 0000                       	dc.w (@SYZend-@SYZ-2)/8
00020910                            
00020910                            ;		mappings	object		subtype	frame	VRAM setting
00020910 2500 BFD4 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
00020918 2600 C79A 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
00020920 3600 F322 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
00020928 4101 0096 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
00020930 4301 051C 0000 04B8        	dbug	Map_Roll,	id_Roller,	0,	0,	$4B8
00020938 1201 0CF8 0000 0000        	dbug	Map_Light,	id_SpinningLight, 0,	0,	0
00020940 4701 0E9C 0000 0380        	dbug	Map_Bump,	id_Bumper,	0,	0,	$380
00020948 1F00 B3B4 0000 0400        	dbug	Map_Crab,	id_Crabmeat,	0,	0,	$400
00020950 2200 B83E 0000 0444        	dbug	Map_Buzz,	id_BuzzBomber,	0,	0,	$444
00020958 5001 1C70 0000 247B        	dbug	Map_Yad,	id_Yadrin,	0,	0,	$247B
00020960 1800 9DBA 0000 4000        	dbug	Map_Plat_SYZ,	id_BasicPlatform, 0,	0,	$4000
00020968 5601 2B12 0000 4000        	dbug	Map_FBlock,	id_FloatingBlock, 0,	0,	$4000
00020970 3200 E1A6 0000 0513        	dbug	Map_But,	id_Button,	0,	0,	$513
00020978 7801 9E8A 0000 24FF        	dbug	Map_Cat,	id_Caterkiller,	0,	0,	$24FF
00020980 7901 A21E 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
00020988                            	@SYZend:
00020988                            
00020988                            @SBZ:
00020988 0000                       	dc.w (@SBZend-@SBZ-2)/8
0002098A                            
0002098A                            ;		mappings	object		subtype	frame	VRAM setting
0002098A 2500 BFD4 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
00020992 2600 C79A 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
0002099A 5F01 4028 0000 0400        	dbug	Map_Bomb,	id_Bomb,	0,	0,	$400
000209A2 6001 42DE 0000 0429        	dbug	Map_Orb,	id_Orbinaut,	0,	0,	$429
000209AA 7801 9E8A 0000 22B0        	dbug	Map_Cat,	id_Caterkiller,	0,	0,	$22B0
000209B2 1501 2EAE 0702 4391        	dbug	Map_BBall,	id_SwingingPlatform, 7,	2,	$4391
000209BA 6701 8760 E000 C344        	dbug	Map_Disc,	id_RunningDisc,	$E0,	0,	$C344
000209C2 5201 2414 2802 22C0        	dbug	Map_MBlock,	id_MovingBlock,	$28,	2,	$22C0
000209CA 3200 E1A6 0000 0513        	dbug	Map_But,	id_Button,	0,	0,	$513
000209D2 6901 89BA 0300 4492        	dbug	Map_Trap,	id_SpinPlatform, 3,	0,	$4492
000209DA 6901 8A14 8300 04DF        	dbug	Map_Spin,	id_SpinPlatform, $83,	0,	$4DF
000209E2 6A01 8C72 0200 43B5        	dbug	Map_Saw,	id_Saws,	2,	0,	$43B5
000209EA 5300 A3B0 0000 43F5        	dbug	Map_CFlo,	id_CollapseFloor, 0,	0,	$43F5
000209F2 5201 2414 3903 4460        	dbug	Map_MBlock,	id_MovingBlock,	$39,	3,	$4460
000209FA 6B01 9042 0000 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	0,	0,	$22C0
00020A02 2A00 A65E 0000 42E8        	dbug	Map_ADoor,	id_AutoDoor,	0,	0,	$42E8
00020A0A 6B01 9042 1301 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	$13,	1,	$22C0
00020A12 6A01 8C72 0100 43B5        	dbug	Map_Saw,	id_Saws,	1,	0,	$43B5
00020A1A 6B01 9042 2401 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	$24,	1,	$22C0
00020A22 6A01 8C72 0402 43B5        	dbug	Map_Saw,	id_Saws,	4,	2,	$43B5
00020A2A 6B01 9042 3401 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	$34,	1,	$22C0
00020A32 6C01 9204 0000 44C3        	dbug	Map_VanP,	id_VanishPlatform, 0,	0,	$44C3
00020A3A 6D01 096C 6400 83D9        	dbug	Map_Flame,	id_Flamethrower, $64,	0,	$83D9
00020A42 6D01 096C 640B 83D9        	dbug	Map_Flame,	id_Flamethrower, $64,	$B,	$83D9
00020A4A 6E01 92BA 0400 047E        	dbug	Map_Elec,	id_Electro,	4,	0,	$47E
00020A52 7001 9700 0000 42F0        	dbug	Map_Gird,	id_Girder,	0,	0,	$42F0
00020A5A 7101 38BE 1100 8680        	dbug	Map_Invis,	id_Invisibarrier, $11,	0,	$8680
00020A62 1E00 AACC 0400 2302        	dbug	Map_Hog,	id_BallHog,	4,	0,	$2302
00020A6A 7901 A21E 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
00020A72                            	@SBZend:
00020A72                            
00020A72                            @Ending:
00020A72 0000                       	dc.w (@Endingend-@Ending-2)/8
00020A74                            
00020A74                            ;		mappings	object		subtype	frame	VRAM setting
00020A74 2500 BFD4 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
00020A7C 2500 BFD4 0008 27B2        	dbug	Map_Ring,	id_Rings,	0,	8,	$27B2
00020A84                            	@Endingend:
00020A84                            
00020A84                            	even
00020A84                            	even
00020A84                            		include	"_inc\LevelHeaders.asm"
00020A84                            ; ---------------------------------------------------------------------------
00020A84                            ; Level Headers
00020A84                            ; ---------------------------------------------------------------------------
00020A84                            
00020A84                            LevelHeaders:
00020A84                            
00020A84                            lhead:	macro plc1,lvlgfx,plc2,sixteen,twofivesix,music,pal
00020A84                            	dc.l (plc1<<24)+lvlgfx
00020A84                            	dc.l (plc2<<24)+sixteen
00020A84                            	dc.l twofivesix
00020A84                            	dc.b 0, music, pal, pal
00020A84                            	endm
00020A84                            
00020A84                            ; 1st PLC, level gfx (unused), 2nd PLC, 16x16 data, 256x256 data,
00020A84                            ; music (unused), palette (unused), palette
00020A84                            
00020A84                            ;		1st PLC				2nd PLC				256x256 data			palette
00020A84                            ;				level gfx*			16x16 data			music*
00020A84                            
00020A84 0000 0000 0000 0000 0000+  	lhead	plcid_GHZ,	Nem_GHZ_2nd,	plcid_GHZ2,	Blk16_GHZ,	Blk256_GHZ,	bgm_GHZ,	palid_GHZ	; Green Hill
00020A94 0000 0000 0000 0000 0000+  	lhead	plcid_LZ,	Nem_LZ,		plcid_LZ2,	Blk16_LZ,	Blk256_LZ,	bgm_LZ,		palid_LZ	; Labyrinth
00020AA4 0000 0000 0000 0000 0000+  	lhead	plcid_MZ,	Nem_MZ,		plcid_MZ2,	Blk16_MZ,	Blk256_MZ,	bgm_MZ,		palid_MZ	; Marble
00020AB4 0000 0000 0000 0000 0000+  	lhead	plcid_SLZ,	Nem_SLZ,	plcid_SLZ2,	Blk16_SLZ,	Blk256_SLZ,	bgm_SLZ,	palid_SLZ	; Star Light
00020AC4 0000 0000 0000 0000 0000+  	lhead	plcid_SYZ,	Nem_SYZ,	plcid_SYZ2,	Blk16_SYZ,	Blk256_SYZ,	bgm_SYZ,	palid_SYZ	; Spring Yard
00020AD4 0000 0000 0000 0000 0000+  	lhead	plcid_SBZ,	Nem_SBZ,	plcid_SBZ2,	Blk16_SBZ,	Blk256_SBZ,	bgm_SBZ,	palid_SBZ1	; Scrap Brain
00020AE4 0000 0000 0000 0000 0000+  	lhead	0,		Nem_GHZ_2nd,	0,		Blk16_GHZ,	Blk256_GHZ,	bgm_SBZ,	palid_Ending	; Ending
00020AF4                            	even
00020AF4                            
00020AF4                            ;	* music and level gfx are actually set elsewhere, so these values are useless
00020AF4                            ;	* music and level gfx are actually set elsewhere, so these values are useless
00020AF4                            		include	"_inc\Pattern Load Cues.asm"
00020AF4                            ; ---------------------------------------------------------------------------
00020AF4                            ; Pattern load cues
00020AF4                            ; ---------------------------------------------------------------------------
00020AF4                            ArtLoadCues:
00020AF4                            
00020AF4 0000                       ptr_PLC_Main:		dc.w PLC_Main-ArtLoadCues
00020AF6 0000                       ptr_PLC_Main2:		dc.w PLC_Main2-ArtLoadCues
00020AF8 0000                       ptr_PLC_Explode:	dc.w PLC_Explode-ArtLoadCues
00020AFA 0000                       ptr_PLC_GameOver:	dc.w PLC_GameOver-ArtLoadCues
00020AFC                            PLC_Levels:
00020AFC 0000                       ptr_PLC_GHZ:		dc.w PLC_GHZ-ArtLoadCues
00020AFE 0000                       ptr_PLC_GHZ2:		dc.w PLC_GHZ2-ArtLoadCues
00020B00 0000                       ptr_PLC_LZ:		dc.w PLC_LZ-ArtLoadCues
00020B02 0000                       ptr_PLC_LZ2:		dc.w PLC_LZ2-ArtLoadCues
00020B04 0000                       ptr_PLC_MZ:		dc.w PLC_MZ-ArtLoadCues
00020B06 0000                       ptr_PLC_MZ2:		dc.w PLC_MZ2-ArtLoadCues
00020B08 0000                       ptr_PLC_SLZ:		dc.w PLC_SLZ-ArtLoadCues
00020B0A 0000                       ptr_PLC_SLZ2:		dc.w PLC_SLZ2-ArtLoadCues
00020B0C 0000                       ptr_PLC_SYZ:		dc.w PLC_SYZ-ArtLoadCues
00020B0E 0000                       ptr_PLC_SYZ2:		dc.w PLC_SYZ2-ArtLoadCues
00020B10 0000                       ptr_PLC_SBZ:		dc.w PLC_SBZ-ArtLoadCues
00020B12 0000                       ptr_PLC_SBZ2:		dc.w PLC_SBZ2-ArtLoadCues
00020B14 0000                       ptr_PLC_TitleCard:	dc.w PLC_TitleCard-ArtLoadCues
00020B16 0000                       ptr_PLC_Boss:		dc.w PLC_Boss-ArtLoadCues
00020B18 0000                       ptr_PLC_Signpost:	dc.w PLC_Signpost-ArtLoadCues
00020B1A 0000                       ptr_PLC_Warp:		dc.w PLC_Warp-ArtLoadCues
00020B1C 0000                       ptr_PLC_SpecialStage:	dc.w PLC_SpecialStage-ArtLoadCues
00020B1E                            PLC_Animals:
00020B1E 0000                       ptr_PLC_GHZAnimals:	dc.w PLC_GHZAnimals-ArtLoadCues
00020B20 0000                       ptr_PLC_LZAnimals:	dc.w PLC_LZAnimals-ArtLoadCues
00020B22 0000                       ptr_PLC_MZAnimals:	dc.w PLC_MZAnimals-ArtLoadCues
00020B24 0000                       ptr_PLC_SLZAnimals:	dc.w PLC_SLZAnimals-ArtLoadCues
00020B26 0000                       ptr_PLC_SYZAnimals:	dc.w PLC_SYZAnimals-ArtLoadCues
00020B28 0000                       ptr_PLC_SBZAnimals:	dc.w PLC_SBZAnimals-ArtLoadCues
00020B2A 0000                       ptr_PLC_SSResult:	dc.w PLC_SSResult-ArtLoadCues
00020B2C 0000                       ptr_PLC_Ending:		dc.w PLC_Ending-ArtLoadCues
00020B2E 0000                       ptr_PLC_TryAgain:	dc.w PLC_TryAgain-ArtLoadCues
00020B30 0000                       ptr_PLC_EggmanSBZ2:	dc.w PLC_EggmanSBZ2-ArtLoadCues
00020B32 0000                       ptr_PLC_FZBoss:		dc.w PLC_FZBoss-ArtLoadCues
00020B34 0000                       ptr_PLC_Egg:		dc.w PLC_Egg-ArtLoadCues
00020B36                            
00020B36                            plcm:	macro gfx,vram
00020B36                            	dc.l gfx
00020B36                            	dc.w vram
00020B36                            	endm
00020B36                            
00020B36                            ; ---------------------------------------------------------------------------
00020B36                            ; Pattern load cues - standard block 1
00020B36                            ; ---------------------------------------------------------------------------
00020B36 0000                       PLC_Main:	dc.w ((PLC_Mainend-PLC_Main-2)/6)-1
00020B38 0000 0000 ADE0             		plcm	Nem_Lamp, $ADE0		; lamppost
00020B3E 0000 0000 D940             		plcm	Nem_Hud, $D940		; HUD
00020B44 0000 0000 FA80             		plcm	Nem_Lives, $FA80	; lives	counter
00020B4A 0000 0000 F300             		plcm	Nem_Ring, $F300		; rings
00020B50 0000 0000 ACA0             		plcm	Nem_Points, $ACA0 	; points from enemy
00020B56                            	PLC_Mainend:
00020B56                            ; ---------------------------------------------------------------------------
00020B56                            ; Pattern load cues - standard block 2
00020B56                            ; ---------------------------------------------------------------------------
00020B56 0000                       PLC_Main2:	dc.w ((PLC_Main2end-PLC_Main2-2)/6)-1
00020B58 0000 0000 D000             		plcm	Nem_Monitors, $D000	; monitors
00020B5E                            	PLC_Main2end:
00020B5E                            ; ---------------------------------------------------------------------------
00020B5E                            ; Pattern load cues - explosion
00020B5E                            ; ---------------------------------------------------------------------------
00020B5E 0000                       PLC_Explode:	dc.w ((PLC_Explodeend-PLC_Explode-2)/6)-1
00020B60 0000 0000 B400             		plcm	Nem_Explode, $B400	; explosion
00020B66                            	PLC_Explodeend:
00020B66                            ; ---------------------------------------------------------------------------
00020B66                            ; Pattern load cues - game/time	over
00020B66                            ; ---------------------------------------------------------------------------
00020B66 0000                       PLC_GameOver:	dc.w ((PLC_GameOverend-PLC_GameOver-2)/6)-1
00020B68 0000 0000 ABC0             		plcm	Nem_GameOver, $ABC0	; game/time over
00020B6E                            	PLC_GameOverend:
00020B6E                            ; ---------------------------------------------------------------------------
00020B6E                            ; Pattern load cues - Green Hill
00020B6E                            ; ---------------------------------------------------------------------------
00020B6E 0000                       PLC_GHZ:	dc.w ((PLC_GHZ2-PLC_GHZ-2)/6)-1
00020B70 0000 0000 0000             		plcm	Nem_GHZ_1st, 0		; GHZ main patterns
00020B76 0000 0000 39A0             		plcm	Nem_GHZ_2nd, $39A0	; GHZ secondary	patterns
00020B7C 0000 0000 6B00             		plcm	Nem_Stalk, $6B00	; flower stalk
00020B82 0000 0000 7A00             		plcm	Nem_PplRock, $7A00	; purple rock
00020B88 0000 0000 8000             		plcm	Nem_Crabmeat, $8000	; crabmeat enemy
00020B8E 0000 0000 8880             		plcm	Nem_Mozzietron, $8880	; mozzietron enemy
00020B94 0000 0000 8F60             		plcm	Nem_Chopper, $8F60	; chopper enemy
00020B9A 0000 0000 9360             		plcm	Nem_Newtron, $9360	; newtron enemy
00020BA0 0000 0000 9E00             		plcm	Nem_Motobug, $9E00	; motobug enemy
00020BA6 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020BAC 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020BB2 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020BB8                            
00020BB8 0000                       PLC_GHZ2:	dc.w ((PLC_GHZ2end-PLC_GHZ2-2)/6)-1
00020BBA 0000 0000 7000             		plcm	Nem_Swing, $7000	; swinging platform
00020BC0 0000 0000 71C0             		plcm	Nem_Bridge, $71C0	; bridge
00020BC6 0000 0000 7300             		plcm	Nem_SpikePole, $7300	; spiked pole
00020BCC 0000 0000 7540             		plcm	Nem_Ball, $7540		; giant	ball
00020BD2 0000 0000 A1E0             		plcm	Nem_GhzWall1, $A1E0	; breakable wall
00020BD8 0000 0000 6980             		plcm	Nem_GhzWall2, $6980	; normal wall
00020BDE                            	PLC_GHZ2end:
00020BDE                            ; ---------------------------------------------------------------------------
00020BDE                            ; Pattern load cues - Labyrinth
00020BDE                            ; ---------------------------------------------------------------------------
00020BDE 0000                       PLC_LZ:		dc.w ((PLC_LZ2-PLC_LZ-2)/6)-1
00020BE0 0000 0000 0000             		plcm	Nem_LZ,0		; LZ main patterns
00020BE6                            		;plcm	Nem_LzBlock1, $3C00	; block
00020BE6                            		;plcm	Nem_LzBlock2, $3E00	; blocks
00020BE6                            		;plcm	Nem_Splash, $4B20	; waterfalls and splash
00020BE6 0000 0000 6000             		plcm	Nem_Water, $6000	; water	surface
00020BEC 0000 0000 6200             		plcm	Nem_LzSpikeBall, $6200	; spiked ball
00020BF2 0000 0000 6500             		plcm	Nem_FlapDoor, $6500	; flapping door
00020BF8 0000 0000 6900             		plcm	Nem_Bubbles, $6900	; bubbles and numbers
00020BFE 0000 0000 7780             		plcm	Nem_LzBlock3, $7780	; block
00020C04 0000 0000 7880             		plcm	Nem_LzDoor1, $7880	; vertical door
00020C0A 0000 0000 7980             		plcm	Nem_Harpoon, $7980	; harpoon
00020C10 0000 0000 94C0             		plcm	Nem_Burrobot, $94C0	; burrobot enemy
00020C16                            
00020C16 0000                       PLC_LZ2:	dc.w ((PLC_LZ2end-PLC_LZ2-2)/6)-1
00020C18 0000 0000 7BC0             		plcm	Nem_LzPole, $7BC0	; pole that breaks
00020C1E 0000 0000 7CC0             		plcm	Nem_LzDoor2, $7CC0	; large	horizontal door
00020C24 0000 0000 7EC0             		plcm	Nem_LzWheel, $7EC0	; wheel
00020C2A 0000 0000 5D20             		plcm	Nem_Gargoyle, $5D20	; gargoyle head
00020C30 0000 0000 89E0             		plcm	Nem_LzPlatfm, $89E0	; rising platform
00020C36 0000 0000 8CE0             		plcm	Nem_Orbinaut, $8CE0	; orbinaut enemy
00020C3C 0000 0000 90C0             		plcm	Nem_Jaws, $90C0		; jaws enemy
00020C42 0000 0000 A1E0             		plcm	Nem_LzSwitch, $A1E0	; switch
00020C48 0000 0000 A000             		plcm	Nem_Cork, $A000		; cork block
00020C4E 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020C54 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020C5A 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020C60                            	PLC_LZ2end:
00020C60                            ; ---------------------------------------------------------------------------
00020C60                            ; Pattern load cues - Marble
00020C60                            ; ---------------------------------------------------------------------------
00020C60 0000                       PLC_MZ:		dc.w ((PLC_MZ2-PLC_MZ-2)/6)-1
00020C62 0000 0000 0000             		plcm	Nem_MZ,0		; MZ main patterns
00020C68 0000 0000 6040             		plcm	Nem_BallHog, $6040	; ball hog enemy
00020C6E 0000 0000 68A0             		plcm	Nem_MzFire, $68A0	; fireballs
00020C74 0000 0000 71C0             		plcm	Nem_MzGlass, $71C0	; green	glassy block
00020C7A 0000 0000 75A0             		plcm	Nem_Cutter, $75A0	; pizza	cutter
00020C80 0000 0000 8000             		plcm	Nem_Bomb, $8000
00020C86 0000 0000 8880             		plcm	Nem_Buzz, $8880		; buzz bomber enemy
00020C8C 0000 0000 8FC0             		plcm	Nem_Electric, $8FC0	; electric orb
00020C92 0000 0000 9700             		plcm	Nem_Basaran, $9700	; basaran enemy
00020C98 0000 0000 9C80             		plcm	Nem_Splats, $9C80	; Splats
00020C9E                            
00020C9E 0000                       PLC_MZ2:	dc.w ((PLC_MZ2end-PLC_MZ2-2)/6)-1
00020CA0 0000 0000 7000             		plcm	Nem_Swing, $7000	; swinging platform
00020CA6 0000 0000 5D40             		plcm	Nem_SbzDoor1, $5D40	; door
00020CAC                            		;plcm	Nem_MzSwitch, $A260	; switch
00020CAC 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020CB2 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020CB8 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020CBE 0000 0000 5700             		plcm	Nem_MzBlock, $5700	; green	stone block
00020CC4 0000 0000 A260             		plcm	Nem_SlzWall, $A260	; breakable wall
00020CCA                            	PLC_MZ2end:
00020CCA                            ; ---------------------------------------------------------------------------
00020CCA                            ; Pattern load cues - Star Light
00020CCA                            ; ---------------------------------------------------------------------------
00020CCA 0000                       PLC_SLZ:	dc.w ((PLC_SLZ2-PLC_SLZ-2)/6)-1
00020CCC 0000 0000 0000             		plcm	Nem_SLZ,0		; SLZ main patterns
00020CD2 0000 0000 8000             		plcm	Nem_Bomb, $8000		; bomb enemy
00020CD8 0000 0000 8520             		plcm	Nem_Orbinaut, $8520	; orbinaut enemy
00020CDE 0000 0000 9C80             		plcm	Nem_Splats, $9C80	; Splats
00020CE4 0000 0000 9000             		plcm	Nem_MzFire, $9000	; fireballs
00020CEA 0000 0000 9C00             		plcm	Nem_SlzBlock, $9C00	; block
00020CF0 0000 0000 A260             		plcm	Nem_SlzWall, $A260	; breakable wall
00020CF6 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020CFC 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020D02 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020D08                            
00020D08 0000                       PLC_SLZ2:	dc.w ((PLC_SLZ2end-PLC_SLZ2-2)/6)-1
00020D0A 0000 0000 6E80             		plcm	Nem_Seesaw, $6E80	; seesaw
00020D10 0000 0000 7400             		plcm	Nem_Fan, $7400		; fan
00020D16 0000 0000 7980             		plcm	Nem_Pylon, $7980	; foreground pylon
00020D1C 0000 0000 7B80             		plcm	Nem_SlzSwing, $7B80	; swinging platform
00020D22 0000 0000 9B00             		plcm	Nem_SlzCannon, $9B00	; fireball launcher
00020D28 0000 0000 9E00             		plcm	Nem_SlzSpike, $9E00	; spikeball
00020D2E                            	PLC_SLZ2end:
00020D2E                            ; ---------------------------------------------------------------------------
00020D2E                            ; Pattern load cues - Spring Yard
00020D2E                            ; ---------------------------------------------------------------------------
00020D2E 0000                       PLC_SYZ:	dc.w ((PLC_SYZ2-PLC_SYZ-2)/6)-1
00020D30 0000 0000 0000             		plcm	Nem_SYZ,0		; SYZ main patterns
00020D36                            		;plcm	Nem_Stomper, $5800	; moving platform and stomper
00020D36                            		;plcm	Nem_SbzDoor1, $5D40	; door
00020D36 0000 0000 6900             		plcm	Nem_Bubbles, $6900	; bubbles and numbers
00020D3C 0000 0000 8880             		plcm	Nem_Buzz, $8880		; buzz bomber enemy
00020D42 0000 0000 8F60             		plcm	Nem_Yadrin, $8F60	; yadrin enemy
00020D48 0000 0000 9700             		plcm	Nem_Roller, $9700	; roller enemy
00020D4E 0000 0000 7B20             		plcm	Nem_FlamePipe, $7B20	; flaming pipe
00020D54 0000 0000 7EA0             		plcm	Nem_SbzFloor, $7EA0	; collapsing floor
00020D5A                            		;plcm	Nem_SbzBlock, $9860	; vanishing block
00020D5A                            
00020D5A 0000                       PLC_SYZ2:	dc.w ((PLC_SYZ2end-PLC_SYZ2-2)/6)-1
00020D5C                            		;plcm	Nem_Cater, $5600	; caterkiller enemy
00020D5C 0000 0000 7000             		plcm	Nem_Bumper, $7000	; bumper
00020D62 0000 0000 72C0             		plcm	Nem_SyzSpike1, $72C0	; large	spikeball
00020D68 0000 0000 7740             		plcm	Nem_SyzSpike2, $7740	; small	spikeball
00020D6E                            		;plcm	Nem_TrapDoor, $9240	; trapdoor
00020D6E 0000 0000 7F20             		plcm	Nem_SbzFloor, $7F20	; collapsing floor
00020D74                            		;plcm	Nem_SpinPform, $9BE0	; small	spinning platform
00020D74 0000 0000 A1E0             		plcm	Nem_LzSwitch, $A1E0	; switch
00020D7A 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020D80 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020D86 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020D8C                            	PLC_SYZ2end:
00020D8C                            ; ---------------------------------------------------------------------------
00020D8C                            ; Pattern load cues - Scrap Brain
00020D8C                            ; ---------------------------------------------------------------------------
00020D8C 0000                       PLC_SBZ:	dc.w ((PLC_SBZ2-PLC_SBZ-2)/6)-1
00020D8E 0000 0000 0000             		plcm	Nem_SBZ,0		; SBZ main patterns
00020D94 0000 0000 4B20             		plcm	Nem_Splash, $4B20	; waterfalls and splash
00020D9A                            		;plcm	Nem_Stomper, $5800	; moving platform and stomper
00020D9A                            		;plcm	Nem_SbzDoor1, $5D00	; door
00020D9A                            		;plcm	Nem_Girder, $5E00	; girder
00020D9A 0000 0000 6880             		plcm	Nem_SbzWheel1, $6880	; spot on large	wheel
00020DA0 0000 0000 6900             		plcm	Nem_Bubbles, $6900	; bubbles and numbers
00020DA6                            		;plcm	Nem_SbzWheel2, $6900	; wheel	that grabs Sonic
00020DA6 0000 0000 7220             		plcm	Nem_SyzSpike1, $7220	; large	spikeball
00020DAC 0000 0000 7B20             		plcm	Nem_FlamePipe, $7B20	; flaming pipe
00020DB2 0000 0000 7EA0             		plcm	Nem_SbzFloor, $7EA0	; collapsing floor
00020DB8 0000 0000 9860             		plcm	Nem_SbzBlock, $9860	; vanishing block
00020DBE                            
00020DBE 0000                       PLC_SBZ2:	dc.w ((PLC_SBZ2end-PLC_SBZ2-2)/6)-1
00020DC0                            		;plcm	Nem_Cater, $5600	; caterkiller enemy
00020DC0 0000 0000 8000             		plcm	Nem_Bomb, $8000		; bomb enemy
00020DC6 0000 0000 8C00             		plcm	Nem_SlideFloor, $8C00	; floor	that slides away
00020DCC                            		;plcm	Nem_SbzDoor2, $8DE0	; horizontal door
00020DCC 0000 0000 8FC0             		plcm	Nem_Electric, $8FC0	; electric orb
00020DD2 0000 0000 9240             		plcm	Nem_TrapDoor, $9240	; trapdoor
00020DD8 0000 0000 7F20             		plcm	Nem_SbzFloor, $7F20	; collapsing floor
00020DDE 0000 0000 9BE0             		plcm	Nem_SpinPform, $9BE0	; small	spinning platform
00020DE4 0000 0000 A1E0             		plcm	Nem_LzSwitch, $A1E0	; switch
00020DEA 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020DF0 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020DF6 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020DFC                            	PLC_SBZ2end:
00020DFC                            ; ---------------------------------------------------------------------------
00020DFC                            ; Pattern load cues - title card
00020DFC                            ; ---------------------------------------------------------------------------
00020DFC 0000                       PLC_TitleCard:	dc.w ((PLC_TitleCardend-PLC_TitleCard-2)/6)-1
00020DFE 0000 0000 B000             		plcm	Nem_TitleCard, $B000
00020E04                            	PLC_TitleCardend:
00020E04                            ; ---------------------------------------------------------------------------
00020E04                            ; Pattern load cues - act 3 boss
00020E04                            ; ---------------------------------------------------------------------------
00020E04 0000                       PLC_Boss:	dc.w ((PLC_Bossend-PLC_Boss-2)/6)-1
00020E06 0000 0000 8000             		plcm	Nem_Eggman, $8000	; Eggman main patterns
00020E0C 0000 0000 8D80             		plcm	Nem_Weapons, $8D80	; Eggman's weapons
00020E12 0000 0000 93A0             		plcm	Nem_Prison, $93A0	; prison capsule
00020E18 0000 0000 A300             		plcm	Nem_Bomb, $A300		; bomb enemy ((gets overwritten)
00020E1E 0000 0000 A300             		plcm	Nem_SlzSpike, $A300	; spikeball ((SLZ boss)
00020E24 0000 0000 A540             		plcm	Nem_Exhaust, $A540	; exhaust flame
00020E2A                            	PLC_Bossend:
00020E2A                            ; ---------------------------------------------------------------------------
00020E2A                            ; Pattern load cues - act 1/2 signpost
00020E2A                            ; ---------------------------------------------------------------------------
00020E2A 0000                       PLC_Signpost:	dc.w ((PLC_Signpostend-PLC_Signpost-2)/6)-1
00020E2C 0000 0000 D000             		plcm	Nem_SignPost, $D000	; signpost
00020E32 0000 0000 96C0             		plcm	Nem_Bonus, $96C0	; hidden bonus points
00020E38 0000 0000 8C40             		plcm	Nem_BigFlash, $8C40	; giant	ring flash effect
00020E3E                            		;plcm	Nem_SSEmerald, $EE00	; emeralds
00020E3E                            	PLC_Signpostend:
00020E3E                            ; ---------------------------------------------------------------------------
00020E3E                            ; Pattern load cues - beta special stage warp effect
00020E3E                            ; ---------------------------------------------------------------------------
00020E3E                            PLC_Warp:
00020E3E                            	PLC_Warpend:
00020E3E                            ; ---------------------------------------------------------------------------
00020E3E                            ; Pattern load cues - special stage
00020E3E                            ; ---------------------------------------------------------------------------
00020E3E 0000                       PLC_SpecialStage:	dc.w ((PLC_SpeStageend-PLC_SpecialStage-2)/6)-1
00020E40 0000 0000 0000             		plcm	Nem_SSBgCloud, 0	; bubble and cloud background
00020E46 0000 0000 0A20             		plcm	Nem_SSBgFish, $A20	; bird and fish	background
00020E4C 0000 0000 2840             		plcm	Nem_SSWalls, $2840	; walls
00020E52 0000 0000 4760             		plcm	Nem_Bumper, $4760	; bumper
00020E58 0000 0000 4A20             		plcm	Nem_SSGOAL, $4A20	; GOAL block
00020E5E 0000 0000 4C60             		plcm	Nem_SSUpDown, $4C60	; UP and DOWN blocks
00020E64 0000 0000 5E00             		plcm	Nem_SSRBlock, $5E00	; R block
00020E6A 0000 0000 6E00             		plcm	Nem_SS1UpBlock, $6E00	; 1UP block
00020E70 0000 0000 7E00             		plcm	Nem_SSEmStars, $7E00	; emerald collection stars
00020E76 0000 0000 8E00             		plcm	Nem_SSRedWhite, $8E00	; red and white	block
00020E7C 0000 0000 9E00             		plcm	Nem_SSGhost, $9E00	; ghost	block
00020E82 0000 0000 AE00             		plcm	Nem_SSWBlock, $AE00	; W block
00020E88 0000 0000 BE00             		plcm	Nem_SSGlass, $BE00	; glass	block
00020E8E 0000 0000 EE00             		plcm	Nem_SSEmerald, $EE00	; emeralds
00020E94                            		;plcm	Nem_SSZone1, $F2E0	; ZONE 1 block
00020E94                            		;plcm	Nem_SSZone2, $F400	; ZONE 2 block
00020E94                            		;plcm	Nem_SSZone3, $F520	; ZONE 3 block
00020E94                            	PLC_SpeStageend:
00020E94                            		;plcm	Nem_SSZone4, $F2E0	; ZONE 4 block
00020E94                            		;plcm	Nem_SSZone5, $F400	; ZONE 5 block
00020E94                            		;plcm	Nem_SSZone6, $F520	; ZONE 6 block
00020E94                            ; ---------------------------------------------------------------------------
00020E94                            ; Pattern load cues - GHZ animals
00020E94                            ; ---------------------------------------------------------------------------
00020E94 0000                       PLC_GHZAnimals:	dc.w ((PLC_GHZAnimalsend-PLC_GHZAnimals-2)/6)-1
00020E96 0000 0000 B000             		plcm	Nem_Rabbit, $B000	; rabbit
00020E9C 0000 0000 B240             		plcm	Nem_Flicky, $B240	; flicky
00020EA2                            	PLC_GHZAnimalsend:
00020EA2                            ; ---------------------------------------------------------------------------
00020EA2                            ; Pattern load cues - LZ animals
00020EA2                            ; ---------------------------------------------------------------------------
00020EA2 0000                       PLC_LZAnimals:	dc.w ((PLC_LZAnimalsend-PLC_LZAnimals-2)/6)-1
00020EA4 0000 0000 B000             		plcm	Nem_BlackBird, $B000	; blackbird
00020EAA 0000 0000 B240             		plcm	Nem_Seal, $B240		; seal
00020EB0                            	PLC_LZAnimalsend:
00020EB0                            ; ---------------------------------------------------------------------------
00020EB0                            ; Pattern load cues - MZ animals
00020EB0                            ; ---------------------------------------------------------------------------
00020EB0 0000                       PLC_MZAnimals:	dc.w ((PLC_MZAnimalsend-PLC_MZAnimals-2)/6)-1
00020EB2 0000 0000 B000             		plcm	Nem_Squirrel, $B000	; squirrel
00020EB8 0000 0000 B240             		plcm	Nem_Seal, $B240		; seal
00020EBE                            	PLC_MZAnimalsend:
00020EBE                            ; ---------------------------------------------------------------------------
00020EBE                            ; Pattern load cues - SLZ animals
00020EBE                            ; ---------------------------------------------------------------------------
00020EBE 0000                       PLC_SLZAnimals:	dc.w ((PLC_SLZAnimalsend-PLC_SLZAnimals-2)/6)-1
00020EC0 0000 0000 B000             		plcm	Nem_Pig, $B000		; pig
00020EC6 0000 0000 B240             		plcm	Nem_Flicky, $B240	; flicky
00020ECC                            	PLC_SLZAnimalsend:
00020ECC                            ; ---------------------------------------------------------------------------
00020ECC                            ; Pattern load cues - SYZ animals
00020ECC                            ; ---------------------------------------------------------------------------
00020ECC 0000                       PLC_SYZAnimals:	dc.w ((PLC_SYZAnimalsend-PLC_SYZAnimals-2)/6)-1
00020ECE 0000 0000 B000             		plcm	Nem_Pig, $B000		; pig
00020ED4 0000 0000 B240             		plcm	Nem_Chicken, $B240	; chicken
00020EDA                            	PLC_SYZAnimalsend:
00020EDA                            ; ---------------------------------------------------------------------------
00020EDA                            ; Pattern load cues - SBZ animals
00020EDA                            ; ---------------------------------------------------------------------------
00020EDA 0000                       PLC_SBZAnimals:	dc.w ((PLC_SBZAnimalsend-PLC_SBZAnimals-2)/6)-1
00020EDC 0000 0000 B000             		plcm	Nem_Rabbit, $B000		; rabbit
00020EE2 0000 0000 B240             		plcm	Nem_Chicken, $B240	; chicken
00020EE8                            	PLC_SBZAnimalsend:
00020EE8                            ; ---------------------------------------------------------------------------
00020EE8                            ; Pattern load cues - special stage results screen
00020EE8                            ; ---------------------------------------------------------------------------
00020EE8 0000                       PLC_SSResult:dc.w ((PLC_SpeStResultend-PLC_SSResult-2)/6)-1
00020EEA 0000 0000 A820             		plcm	Nem_ResultEm, $A820	; emeralds
00020EF0 0000 0000 AA20             		plcm	Nem_MiniSonic, $AA20	; mini Sonic
00020EF6                            	PLC_SpeStResultend:
00020EF6                            ; ---------------------------------------------------------------------------
00020EF6                            ; Pattern load cues - ending sequence
00020EF6                            ; ---------------------------------------------------------------------------
00020EF6 0000                       PLC_Ending:	dc.w ((PLC_Endingend-PLC_Ending-2)/6)-1
00020EF8 0000 0000 0000             		plcm	Nem_GHZ_1st,0		; GHZ main patterns
00020EFE 0000 0000 39A0             		plcm	Nem_GHZ_2nd, $39A0	; GHZ secondary	patterns
00020F04 0000 0000 6B00             		plcm	Nem_Stalk, $6B00	; flower stalk
00020F0A                            		;plcm	Nem_EndFlower, $7400	; flowers
00020F0A 0000 0000 78A0             		plcm	Nem_EndEm, $78A0	; emeralds
00020F10 0000 0000 7C20             		plcm	Nem_EndSonic, $7C20	; Sonic
00020F16 0000 0000 AA60             		plcm	Nem_Rabbit, $AA60	; rabbit
00020F1C 0000 0000 ACA0             		plcm	Nem_Chicken, $ACA0	; chicken
00020F22 0000 0000 AE60             		plcm	Nem_BlackBird, $AE60	; blackbird
00020F28 0000 0000 B0A0             		plcm	Nem_Seal, $B0A0		; seal
00020F2E 0000 0000 B260             		plcm	Nem_Pig, $B260		; pig
00020F34 0000 0000 B4A0             		plcm	Nem_Flicky, $B4A0	; flicky
00020F3A 0000 0000 B660             		plcm	Nem_Squirrel, $B660	; squirrel
00020F40 0000 0000 B8A0             		plcm	Nem_EndStH, $B8A0	; "SONIC THE HEDGEHOG"
00020F46                            	PLC_Endingend:
00020F46                            ; ---------------------------------------------------------------------------
00020F46                            ; Pattern load cues - "TRY AGAIN" and "END" screens
00020F46                            ; ---------------------------------------------------------------------------
00020F46 0000                       PLC_TryAgain:	dc.w ((PLC_TryAgainend-PLC_TryAgain-2)/6)-1
00020F48 0000 0000 78A0             		plcm	Nem_EndEm, $78A0	; emeralds
00020F4E 0000 0000 7C20             		plcm	Nem_TryAgain, $7C20	; Eggman
00020F54 0000 0000 B400             		plcm	Nem_CreditText, $B400	; credits alphabet
00020F5A                            	PLC_TryAgainend:
00020F5A                            ; ---------------------------------------------------------------------------
00020F5A                            ; Pattern load cues - Eggman on SBZ 2
00020F5A                            ; ---------------------------------------------------------------------------
00020F5A 0000                       PLC_EggmanSBZ2:	dc.w ((PLC_EggmanSBZ2end-PLC_EggmanSBZ2-2)/6)-1
00020F5C 0000 0000 A300             		plcm	Nem_SbzBlock, $A300	; block
00020F62 0000 0000 8000             		plcm	Nem_Sbz2Eggman, $8000	; Eggman
00020F68 0000 0000 9400             		plcm	Nem_LzSwitch, $9400	; switch
00020F6E                            	PLC_EggmanSBZ2end:
00020F6E                            ; ---------------------------------------------------------------------------
00020F6E                            ; Pattern load cues - final boss
00020F6E                            ; ---------------------------------------------------------------------------
00020F6E 0000                       PLC_FZBoss:	dc.w ((PLC_FZBossend-PLC_FZBoss-2)/6)-1
00020F70 0000 0000 7400             		plcm	Nem_FzEggman, $7400	; Eggman after boss
00020F76 0000 0000 6000             		plcm	Nem_FzBoss, $6000	; FZ boss
00020F7C 0000 0000 8000             		plcm	Nem_Eggman, $8000	; Eggman main patterns
00020F82 0000 0000 8E00             		plcm	Nem_Sbz2Eggman, $8E00	; Eggman without ship
00020F88 0000 0000 A540             		plcm	Nem_Exhaust, $A540	; exhaust flame
00020F8E                            	PLC_FZBossend:
00020F8E                            ; ---------------------------------------------------------------------------
00020F8E                            ; Pattern load cues - Eggman
00020F8E                            ; ---------------------------------------------------------------------------
00020F8E 0005                       PLC_Egg:	dc.w ((PLC_Bossend-PLC_Boss-2)/6)-1
00020F90 0000 0000 8000             		plcm	Nem_Eggman, $8000	; Eggman main patterns
00020F96 0000 0000 8D80             		plcm	Nem_Weapons, $8D80	; Eggman's weapons
00020F9C 0000 0000 93A0             		plcm	Nem_Prison, $93A0	; prison capsule
00020FA2 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020FA8 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020FAE 0000 0000 A540             		plcm	Nem_Exhaust, $A540	; exhaust flame
00020FB4                            	PLC_Eggend:
00020FB4                            		even
00020FB4                            ; ---------------------------------------------------------------------------
00020FB4                            ; Pattern load cue IDs
00020FB4                            ; ---------------------------------------------------------------------------
00020FB4 =00000000                  plcid_Main:		equ (ptr_PLC_Main-ArtLoadCues)/2	; 0
00020FB4 =00000001                  plcid_Main2:		equ (ptr_PLC_Main2-ArtLoadCues)/2	; 1
00020FB4 =00000002                  plcid_Explode:		equ (ptr_PLC_Explode-ArtLoadCues)/2	; 2
00020FB4 =00000003                  plcid_GameOver:		equ (ptr_PLC_GameOver-ArtLoadCues)/2	; 3
00020FB4 =00000004                  plcid_GHZ:		equ (ptr_PLC_GHZ-ArtLoadCues)/2		; 4
00020FB4 =00000005                  plcid_GHZ2:		equ (ptr_PLC_GHZ2-ArtLoadCues)/2	; 5
00020FB4 =00000006                  plcid_LZ:		equ (ptr_PLC_LZ-ArtLoadCues)/2		; 6
00020FB4 =00000007                  plcid_LZ2:		equ (ptr_PLC_LZ2-ArtLoadCues)/2		; 7
00020FB4 =00000008                  plcid_MZ:		equ (ptr_PLC_MZ-ArtLoadCues)/2		; 8
00020FB4 =00000009                  plcid_MZ2:		equ (ptr_PLC_MZ2-ArtLoadCues)/2		; 9
00020FB4 =0000000A                  plcid_SLZ:		equ (ptr_PLC_SLZ-ArtLoadCues)/2		; $A
00020FB4 =0000000B                  plcid_SLZ2:		equ (ptr_PLC_SLZ2-ArtLoadCues)/2	; $B
00020FB4 =0000000C                  plcid_SYZ:		equ (ptr_PLC_SYZ-ArtLoadCues)/2		; $C
00020FB4 =0000000D                  plcid_SYZ2:		equ (ptr_PLC_SYZ2-ArtLoadCues)/2	; $D
00020FB4 =0000000E                  plcid_SBZ:		equ (ptr_PLC_SBZ-ArtLoadCues)/2		; $E
00020FB4 =0000000F                  plcid_SBZ2:		equ (ptr_PLC_SBZ2-ArtLoadCues)/2	; $F
00020FB4 =00000010                  plcid_TitleCard:	equ (ptr_PLC_TitleCard-ArtLoadCues)/2	; $10
00020FB4 =00000011                  plcid_Boss:		equ (ptr_PLC_Boss-ArtLoadCues)/2	; $11
00020FB4 =00000012                  plcid_Signpost:		equ (ptr_PLC_Signpost-ArtLoadCues)/2	; $12
00020FB4 =00000013                  plcid_Warp:		equ (ptr_PLC_Warp-ArtLoadCues)/2	; $13
00020FB4 =00000014                  plcid_SpecialStage:	equ (ptr_PLC_SpecialStage-ArtLoadCues)/2 ; $14
00020FB4 =00000015                  plcid_GHZAnimals:	equ (ptr_PLC_GHZAnimals-ArtLoadCues)/2	; $15
00020FB4 =00000016                  plcid_LZAnimals:	equ (ptr_PLC_LZAnimals-ArtLoadCues)/2	; $16
00020FB4 =00000017                  plcid_MZAnimals:	equ (ptr_PLC_MZAnimals-ArtLoadCues)/2	; $17
00020FB4 =00000018                  plcid_SLZAnimals:	equ (ptr_PLC_SLZAnimals-ArtLoadCues)/2	; $18
00020FB4 =00000019                  plcid_SYZAnimals:	equ (ptr_PLC_SYZAnimals-ArtLoadCues)/2	; $19
00020FB4 =0000001A                  plcid_SBZAnimals:	equ (ptr_PLC_SBZAnimals-ArtLoadCues)/2	; $1A
00020FB4 =0000001B                  plcid_SSResult:		equ (ptr_PLC_SSResult-ArtLoadCues)/2	; $1B
00020FB4 =0000001C                  plcid_Ending:		equ (ptr_PLC_Ending-ArtLoadCues)/2	; $1C
00020FB4 =0000001D                  plcid_TryAgain:		equ (ptr_PLC_TryAgain-ArtLoadCues)/2	; $1D
00020FB4 =0000001E                  plcid_EggmanSBZ2:	equ (ptr_PLC_EggmanSBZ2-ArtLoadCues)/2	; $1E
00020FB4 =0000001F                  plcid_FZBoss:		equ (ptr_PLC_FZBoss-ArtLoadCues)/2	; $1F
00020FB4 =00000020                  plcid_Egg:		equ (ptr_PLC_Egg-ArtLoadCues)/2	; $11
00020FB4 =00000020                  plcid_Egg:		equ (ptr_PLC_Egg-ArtLoadCues)/2	; $11
00020FB4                            
00021000                            			dcb.b	$300,$FF
00021300                            	Nem_SegaLogo:	incbin	"artnem\Sega Logo (JP1).bin" ; large Sega logo
00021770                            			even
00021770                            	Eni_SegaLogo:	incbin	"tilemaps\Sega Logo (JP1).bin" ; large Sega logo (mappings)
0002186C                            			even
0002186C                            Eni_Title:	incbin	"tilemaps\Title Screen.bin" ; title screen foreground (mappings)
0002194C                            		even
0002194C                            Nem_TitleFg:	incbin	"artnem\Title Screen Foreground.bin"
00022DB8                            		even
00022DB8                            Nem_TitleSonic:	incbin	"artnem\Title Screen Sonic.bin"
00024852                            		even
00024852                            Nem_TitleTM:	incbin	"artnem\Title Screen TM.bin"
00024886                            		even
00024886                            Nem_TitleMenu:   incbin   "artnem\titlemenu.bin"  
00024AB6                            		even		
00024AB6                            Eni_JapNames:	incbin	"tilemaps\Hidden Japanese Credits.bin" ; Japanese credits (mappings)
00024B74                            		even
00024B74                            Nem_JapNames:	incbin	"artnem\Hidden Japanese Credits.bin"
0002501C                            		even
0002501C                            
0002501C                            Map_Sonic:	include	"_maps\Sonic.asm"
0002501C                            ; --------------------------------------------------------------------------------
0002501C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0002501C                            ; --------------------------------------------------------------------------------
0002501C                            
0002501C                            SME_Lx_Kl:	
0002501C 0000 0000                  		dc.w SME_Lx_Kl_142-SME_Lx_Kl, SME_Lx_Kl_143-SME_Lx_Kl	
00025020 0000 0000                  		dc.w SME_Lx_Kl_158-SME_Lx_Kl, SME_Lx_Kl_186-SME_Lx_Kl	
00025024 0000 0000                  		dc.w SME_Lx_Kl_1B9-SME_Lx_Kl, SME_Lx_Kl_1CE-SME_Lx_Kl	
00025028 0000 0000                  		dc.w SME_Lx_Kl_1DE-SME_Lx_Kl, SME_Lx_Kl_1EE-SME_Lx_Kl	
0002502C 0000 0000                  		dc.w SME_Lx_Kl_203-SME_Lx_Kl, SME_Lx_Kl_20E-SME_Lx_Kl	
00025030 0000 0000                  		dc.w SME_Lx_Kl_21E-SME_Lx_Kl, SME_Lx_Kl_22E-SME_Lx_Kl	
00025034 0000 0000                  		dc.w SME_Lx_Kl_23E-SME_Lx_Kl, SME_Lx_Kl_253-SME_Lx_Kl	
00025038 0000 0000                  		dc.w SME_Lx_Kl_263-SME_Lx_Kl, SME_Lx_Kl_287-SME_Lx_Kl	
0002503C 0000 0000                  		dc.w SME_Lx_Kl_2A1-SME_Lx_Kl, SME_Lx_Kl_2AC-SME_Lx_Kl	
00025040 0000 0000                  		dc.w SME_Lx_Kl_2BC-SME_Lx_Kl, SME_Lx_Kl_2D1-SME_Lx_Kl	
00025044 0000 0000                  		dc.w SME_Lx_Kl_2DC-SME_Lx_Kl, SME_Lx_Kl_2EC-SME_Lx_Kl	
00025048 0000 0000                  		dc.w SME_Lx_Kl_306-SME_Lx_Kl, SME_Lx_Kl_320-SME_Lx_Kl	
0002504C 0000 0000                  		dc.w SME_Lx_Kl_33F-SME_Lx_Kl, SME_Lx_Kl_354-SME_Lx_Kl	
00025050 0000 0000                  		dc.w SME_Lx_Kl_364-SME_Lx_Kl, SME_Lx_Kl_37E-SME_Lx_Kl	
00025054 0000 0000                  		dc.w SME_Lx_Kl_393-SME_Lx_Kl, SME_Lx_Kl_3A3-SME_Lx_Kl	
00025058 0000 0000                  		dc.w SME_Lx_Kl_3BD-SME_Lx_Kl, SME_Lx_Kl_3D2-SME_Lx_Kl	
0002505C 0000 0000                  		dc.w SME_Lx_Kl_3DD-SME_Lx_Kl, SME_Lx_Kl_3E8-SME_Lx_Kl	
00025060 0000 0000                  		dc.w SME_Lx_Kl_402-SME_Lx_Kl, SME_Lx_Kl_417-SME_Lx_Kl	
00025064 0000 0000                  		dc.w SME_Lx_Kl_422-SME_Lx_Kl, SME_Lx_Kl_432-SME_Lx_Kl	
00025068 0000 0000                  		dc.w SME_Lx_Kl_442-SME_Lx_Kl, SME_Lx_Kl_461-SME_Lx_Kl	
0002506C 0000 0000                  		dc.w SME_Lx_Kl_480-SME_Lx_Kl, SME_Lx_Kl_495-SME_Lx_Kl	
00025070 0000 0000                  		dc.w SME_Lx_Kl_4A5-SME_Lx_Kl, SME_Lx_Kl_4BF-SME_Lx_Kl	
00025074 0000 0000                  		dc.w SME_Lx_Kl_4D4-SME_Lx_Kl, SME_Lx_Kl_4E4-SME_Lx_Kl	
00025078 0000 0000                  		dc.w SME_Lx_Kl_4FE-SME_Lx_Kl, SME_Lx_Kl_509-SME_Lx_Kl	
0002507C 0000 0000                  		dc.w SME_Lx_Kl_514-SME_Lx_Kl, SME_Lx_Kl_51F-SME_Lx_Kl	
00025080 0000 0000                  		dc.w SME_Lx_Kl_52A-SME_Lx_Kl, SME_Lx_Kl_535-SME_Lx_Kl	
00025084 0000 0000                  		dc.w SME_Lx_Kl_540-SME_Lx_Kl, SME_Lx_Kl_54B-SME_Lx_Kl	
00025088 0000 0000                  		dc.w SME_Lx_Kl_556-SME_Lx_Kl, SME_Lx_Kl_56B-SME_Lx_Kl	
0002508C 0000 0000                  		dc.w SME_Lx_Kl_57B-SME_Lx_Kl, SME_Lx_Kl_58B-SME_Lx_Kl	
00025090 0000 0000                  		dc.w SME_Lx_Kl_59B-SME_Lx_Kl, SME_Lx_Kl_5B0-SME_Lx_Kl	
00025094 0000 0000                  		dc.w SME_Lx_Kl_5C0-SME_Lx_Kl, SME_Lx_Kl_5D0-SME_Lx_Kl	
00025098 0000 0000                  		dc.w SME_Lx_Kl_5E0-SME_Lx_Kl, SME_Lx_Kl_5EB-SME_Lx_Kl	
0002509C 0000 0000                  		dc.w SME_Lx_Kl_5F6-SME_Lx_Kl, SME_Lx_Kl_601-SME_Lx_Kl	
000250A0 0000 0000                  		dc.w SME_Lx_Kl_60C-SME_Lx_Kl, SME_Lx_Kl_617-SME_Lx_Kl	
000250A4 0000 0000                  		dc.w SME_Lx_Kl_622-SME_Lx_Kl, SME_Lx_Kl_62D-SME_Lx_Kl	
000250A8 0000 0000                  		dc.w SME_Lx_Kl_638-SME_Lx_Kl, SME_Lx_Kl_64D-SME_Lx_Kl	
000250AC 0000 0000                  		dc.w SME_Lx_Kl_65D-SME_Lx_Kl, SME_Lx_Kl_668-SME_Lx_Kl	
000250B0 0000 0000                  		dc.w SME_Lx_Kl_678-SME_Lx_Kl, SME_Lx_Kl_68D-SME_Lx_Kl	
000250B4 0000 0000                  		dc.w SME_Lx_Kl_69D-SME_Lx_Kl, SME_Lx_Kl_6A8-SME_Lx_Kl	
000250B8 0000 0000                  		dc.w SME_Lx_Kl_6B8-SME_Lx_Kl, SME_Lx_Kl_6C8-SME_Lx_Kl	
000250BC 0000 0000                  		dc.w SME_Lx_Kl_6D8-SME_Lx_Kl, SME_Lx_Kl_706-SME_Lx_Kl	
000250C0 0000 0000                  		dc.w SME_Lx_Kl_734-SME_Lx_Kl, SME_Lx_Kl_744-SME_Lx_Kl	
000250C4 0000 0000                  		dc.w SME_Lx_Kl_754-SME_Lx_Kl, SME_Lx_Kl_764-SME_Lx_Kl	
000250C8 0000 0000                  		dc.w SME_Lx_Kl_77E-SME_Lx_Kl, SME_Lx_Kl_78E-SME_Lx_Kl	
000250CC 0000 0000                  		dc.w SME_Lx_Kl_79E-SME_Lx_Kl, SME_Lx_Kl_7B8-SME_Lx_Kl	
000250D0 0000 0000                  		dc.w SME_Lx_Kl_7D2-SME_Lx_Kl, SME_Lx_Kl_7E7-SME_Lx_Kl	
000250D4 0000 0000                  		dc.w SME_Lx_Kl_7FC-SME_Lx_Kl, SME_Lx_Kl_811-SME_Lx_Kl	
000250D8 0000 0000                  		dc.w SME_Lx_Kl_826-SME_Lx_Kl, SME_Lx_Kl_82C-SME_Lx_Kl	
000250DC 0000 0000                  		dc.w SME_Lx_Kl_832-SME_Lx_Kl, SME_Lx_Kl_838-SME_Lx_Kl	
000250E0 0000 0000                  		dc.w SME_Lx_Kl_83E-SME_Lx_Kl, SME_Lx_Kl_844-SME_Lx_Kl	
000250E4 0000 0000                  		dc.w SME_Lx_Kl_84A-SME_Lx_Kl, SME_Lx_Kl_850-SME_Lx_Kl	
000250E8 0000 0000                  		dc.w SME_Lx_Kl_860-SME_Lx_Kl, SME_Lx_Kl_866-SME_Lx_Kl	
000250EC 0000 0000                  		dc.w SME_Lx_Kl_871-SME_Lx_Kl, SME_Lx_Kl_877-SME_Lx_Kl	
000250F0 0000 0000                  		dc.w SME_Lx_Kl_882-SME_Lx_Kl, SME_Lx_Kl_888-SME_Lx_Kl	
000250F4 0000 0000                  		dc.w SME_Lx_Kl_89D-SME_Lx_Kl, SME_Lx_Kl_8C1-SME_Lx_Kl	
000250F8 0000 0000                  		dc.w SME_Lx_Kl_8DB-SME_Lx_Kl, SME_Lx_Kl_8EB-SME_Lx_Kl	
000250FC 0000 0000                  		dc.w SME_Lx_Kl_8F6-SME_Lx_Kl, SME_Lx_Kl_90B-SME_Lx_Kl	
00025100 0000 0000                  		dc.w SME_Lx_Kl_920-SME_Lx_Kl, SME_Lx_Kl_935-SME_Lx_Kl	
00025104 0000 0000                  		dc.w SME_Lx_Kl_963-SME_Lx_Kl, SME_Lx_Kl_973-SME_Lx_Kl	
00025108 0000 0000                  		dc.w SME_Lx_Kl_983-SME_Lx_Kl, SME_Lx_Kl_98E-SME_Lx_Kl	
0002510C 0000 0000                  		dc.w SME_Lx_Kl_98F-SME_Lx_Kl, SME_Lx_Kl_9B8-SME_Lx_Kl	
00025110 0000 0000                  		dc.w SME_Lx_Kl_9DC-SME_Lx_Kl, SME_Lx_Kl_9F1-SME_Lx_Kl	
00025114 0000 0000                  		dc.w SME_Lx_Kl_A01-SME_Lx_Kl, SME_Lx_Kl_A11-SME_Lx_Kl	
00025118 0000 0000                  		dc.w SME_Lx_Kl_A21-SME_Lx_Kl, SME_Lx_Kl_A2C-SME_Lx_Kl	
0002511C 0000 0000                  		dc.w SME_Lx_Kl_A3C-SME_Lx_Kl, SME_Lx_Kl_A4C-SME_Lx_Kl	
00025120 0000 0000                  		dc.w SME_Lx_Kl_A5C-SME_Lx_Kl, SME_Lx_Kl_A6C-SME_Lx_Kl	
00025124 0000 0000                  		dc.w SME_Lx_Kl_A81-SME_Lx_Kl, SME_Lx_Kl_AAA-SME_Lx_Kl	
00025128 0000 0000                  		dc.w SME_Lx_Kl_ABF-SME_Lx_Kl, SME_Lx_Kl_AD4-SME_Lx_Kl	
0002512C 0000 0000                  		dc.w SME_Lx_Kl_AEE-SME_Lx_Kl, SME_Lx_Kl_B08-SME_Lx_Kl	
00025130 0000 0000                  		dc.w SME_Lx_Kl_B13-SME_Lx_Kl, SME_Lx_Kl_B2D-SME_Lx_Kl	
00025134 0000 0000                  		dc.w SME_Lx_Kl_B3D-SME_Lx_Kl, SME_Lx_Kl_B57-SME_Lx_Kl	
00025138 0000 0000                  		dc.w SME_Lx_Kl_B62-SME_Lx_Kl, SME_Lx_Kl_B72-SME_Lx_Kl	
0002513C 0000 0000                  		dc.w SME_Lx_Kl_B82-SME_Lx_Kl, SME_Lx_Kl_B92-SME_Lx_Kl	
00025140 0000 0000                  		dc.w SME_Lx_Kl_B9D-SME_Lx_Kl, SME_Lx_Kl_BAD-SME_Lx_Kl	
00025144 0000 0000                  		dc.w SME_Lx_Kl_BE5-SME_Lx_Kl, SME_Lx_Kl_C04-SME_Lx_Kl	
00025148 0000 0000                  		dc.w SME_Lx_Kl_C14-SME_Lx_Kl, SME_Lx_Kl_C38-SME_Lx_Kl	
0002514C 0000 0000                  		dc.w SME_Lx_Kl_C43-SME_Lx_Kl, SME_Lx_Kl_C58-SME_Lx_Kl	
00025150 0000 0000                  		dc.w SME_Lx_Kl_C68-SME_Lx_Kl, SME_Lx_Kl_C78-SME_Lx_Kl	
00025154 0000 0000                  		dc.w SME_Lx_Kl_C8D-SME_Lx_Kl, SME_Lx_Kl_C93-SME_Lx_Kl	
00025158 0000 0000                  		dc.w SME_Lx_Kl_C99-SME_Lx_Kl, SME_Lx_Kl_C9F-SME_Lx_Kl	
0002515C 0000                       		dc.w SME_Lx_Kl_CA5-SME_Lx_Kl	
0002515E 00                         SME_Lx_Kl_142:	dc.b 0	
0002515F 04                         SME_Lx_Kl_143:	dc.b 4	
00025160 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
00025165 F40D 0003 F0               		dc.b $F4, $D, 0, 3, $F0	
0002516A 0408 000B F0               		dc.b 4, 8, 0, $B, $F0	
0002516F 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8	
00025174 09                         SME_Lx_Kl_158:	dc.b 9	
00025175 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
0002517A 0408 0003 F0               		dc.b 4, 8, 0, 3, $F0	
0002517F 0C08 0006 F8               		dc.b $C, 8, 0, 6, $F8	
00025184 F401 0009 F0               		dc.b $F4, 1, 0, 9, $F0	
00025189 FC00 000B 00               		dc.b $FC, 0, 0, $B, 0	
0002518E F400 000C 08               		dc.b $F4, 0, 0, $C, 8	
00025193 FC00 000D F8               		dc.b $FC, 0, 0, $D, $F8	
00025198 FC00 000E 08               		dc.b $FC, 0, 0, $E, 8	
0002519D F404 000F F8               		dc.b $F4, 4, 0, $F, $F8	
000251A2 0A                         SME_Lx_Kl_186:	dc.b $A	
000251A3 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
000251A8 0408 0003 F0               		dc.b 4, 8, 0, 3, $F0	
000251AD 0C08 0006 F8               		dc.b $C, 8, 0, 6, $F8	
000251B2 F401 0009 F0               		dc.b $F4, 1, 0, 9, $F0	
000251B7 FC00 000B 00               		dc.b $FC, 0, 0, $B, 0	
000251BC F400 000C 08               		dc.b $F4, 0, 0, $C, 8	
000251C1 FC00 000D 08               		dc.b $FC, 0, 0, $D, 8	
000251C6 F400 000E F8               		dc.b $F4, 0, 0, $E, $F8	
000251CB F400 000F 00               		dc.b $F4, 0, 0, $F, 0	
000251D0 FC00 0010 F8               		dc.b $FC, 0, 0, $10, $F8	
000251D5 04                         SME_Lx_Kl_1B9:	dc.b 4	
000251D6 EC0B 0000 F0               		dc.b $EC, $B, 0, 0, $F0	
000251DB F400 000C 08               		dc.b $F4, 0, 0, $C, 8	
000251E0 FC00 100D 08               		dc.b $FC, 0, $10, $D, 8	
000251E5 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8	
000251EA 03                         SME_Lx_Kl_1CE:	dc.b 3	
000251EB EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
000251F0 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
000251F5 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
000251FA 03                         SME_Lx_Kl_1DE:	dc.b 3	
000251FB EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00025200 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
00025205 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
0002520A 04                         SME_Lx_Kl_1EE:	dc.b 4	
0002520B EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00025210 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
00025215 0C04 000C 00               		dc.b $C, 4, 0, $C, 0	
0002521A 0C00 000E F8               		dc.b $C, 0, 0, $E, $F8	
0002521F 02                         SME_Lx_Kl_203:	dc.b 2	
00025220 F40B 0000 F0               		dc.b $F4, $B, 0, 0, $F0	
00025225 0401 000C 08               		dc.b 4, 1, 0, $C, 8	
0002522A 03                         SME_Lx_Kl_20E:	dc.b 3	
0002522B FC06 0000 F0               		dc.b $FC, 6, 0, 0, $F0	
00025230 FC02 0006 00               		dc.b $FC, 2, 0, 6, 0	
00025235 0405 0009 08               		dc.b 4, 5, 0, 9, 8	
0002523A 03                         SME_Lx_Kl_21E:	dc.b 3	
0002523B FC06 0000 F0               		dc.b $FC, 6, 0, 0, $F0	
00025240 FC02 0006 00               		dc.b $FC, 2, 0, 6, 0	
00025245 0405 0009 08               		dc.b 4, 5, 0, 9, 8	
0002524A 03                         SME_Lx_Kl_22E:	dc.b 3	
0002524B F40B 0000 F0               		dc.b $F4, $B, 0, 0, $F0	
00025250 EC08 000C F0               		dc.b $EC, 8, 0, $C, $F0	
00025255 FC02 000F 08               		dc.b $FC, 2, 0, $F, 8	
0002525A 04                         SME_Lx_Kl_23E:	dc.b 4	
0002525B 0408 0000 F0               		dc.b 4, 8, 0, 0, $F0	
00025260 0C08 0003 F8               		dc.b $C, 8, 0, 3, $F8	
00025265 EC0A 0006 F0               		dc.b $EC, $A, 0, 6, $F0	
0002526A F400 000F 08               		dc.b $F4, 0, 0, $F, 8	
0002526F 03                         SME_Lx_Kl_253:	dc.b 3	
00025270 EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0	
00025275 0408 0009 F0               		dc.b 4, 8, 0, 9, $F0	
0002527A 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
0002527F 07                         SME_Lx_Kl_263:	dc.b 7	
00025280 FB09 0000 ED               		dc.b $FB, 9, 0, 0, $ED	
00025285 FB06 0006 05               		dc.b $FB, 6, 0, 6, 5	
0002528A 0B04 000C ED               		dc.b $B, 4, 0, $C, $ED	
0002528F F300 000E F5               		dc.b $F3, 0, 0, $E, $F5	
00025294 EB05 000F FD               		dc.b $EB, 5, 0, $F, $FD	
00025299 EB00 0013 F5               		dc.b $EB, 0, 0, $13, $F5	
0002529E F300 0014 ED               		dc.b $F3, 0, 0, $14, $ED	
000252A3 05                         SME_Lx_Kl_287:	dc.b 5	
000252A4 FC0E 0000 F5               		dc.b $FC, $E, 0, 0, $F5	
000252A9 F400 000C F5               		dc.b $F4, 0, 0, $C, $F5	
000252AE EC05 000D FD               		dc.b $EC, 5, 0, $D, $FD	
000252B3 EC00 0011 F5               		dc.b $EC, 0, 0, $11, $F5	
000252B8 F400 0012 ED               		dc.b $F4, 0, 0, $12, $ED	
000252BD 02                         SME_Lx_Kl_2A1:	dc.b 2	
000252BE FD0A 0000 F5               		dc.b $FD, $A, 0, 0, $F5	
000252C3 ED09 0009 F5               		dc.b $ED, 9, 0, 9, $F5	
000252C8 03                         SME_Lx_Kl_2AC:	dc.b 3	
000252C9 F30F 0000 F0               		dc.b $F3, $F, 0, 0, $F0	
000252CE EB0C 0010 F0               		dc.b $EB, $C, 0, $10, $F0	
000252D3 0500 0014 10               		dc.b 5, 0, 0, $14, $10	
000252D8 04                         SME_Lx_Kl_2BC:	dc.b 4	
000252D9 EB09 0000 F5               		dc.b $EB, 9, 0, 0, $F5	
000252DE FB09 0006 ED               		dc.b $FB, 9, 0, 6, $ED	
000252E3 FB06 000C 05               		dc.b $FB, 6, 0, $C, 5	
000252E8 0B04 0012 ED               		dc.b $B, 4, 0, $12, $ED	
000252ED 02                         SME_Lx_Kl_2D1:	dc.b 2	
000252EE EC09 0000 F6               		dc.b $EC, 9, 0, 0, $F6	
000252F3 FC0E 0006 EE               		dc.b $FC, $E, 0, 6, $EE	
000252F8 03                         SME_Lx_Kl_2DC:	dc.b 3	
000252F9 ED09 0000 F6               		dc.b $ED, 9, 0, 0, $F6	
000252FE FD06 0006 F6               		dc.b $FD, 6, 0, 6, $F6	
00025303 FD00 000C 06               		dc.b $FD, 0, 0, $C, 6	
00025308 05                         SME_Lx_Kl_2EC:	dc.b 5	
00025309 FD0C 0000 F6               		dc.b $FD, $C, 0, 0, $F6	
0002530E 0509 0004 F6               		dc.b 5, 9, 0, 4, $F6	
00025313 F500 000A EE               		dc.b $F5, 0, 0, $A, $EE	
00025318 ED01 000B F6               		dc.b $ED, 1, 0, $B, $F6	
0002531D ED05 000D FE               		dc.b $ED, 5, 0, $D, $FE	
00025322 05                         SME_Lx_Kl_306:	dc.b 5	
00025323 EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
00025328 EC06 0006 04               		dc.b $EC, 6, 0, 6, 4	
0002532D FC08 000C EC               		dc.b $FC, 8, 0, $C, $EC	
00025332 0409 000F F4               		dc.b 4, 9, 0, $F, $F4	
00025337 1400 0015 FC               		dc.b $14, 0, 0, $15, $FC	
0002533C 06                         SME_Lx_Kl_320:	dc.b 6	
0002533D ED09 0000 ED               		dc.b $ED, 9, 0, 0, $ED	
00025342 ED01 0006 05               		dc.b $ED, 1, 0, 6, 5	
00025347 FD0C 0008 ED               		dc.b $FD, $C, 0, 8, $ED	
0002534C 0509 000C F5               		dc.b 5, 9, 0, $C, $F5	
00025351 FD05 0012 0D               		dc.b $FD, 5, 0, $12, $D	
00025356 F500 0016 15               		dc.b $F5, 0, 0, $16, $15	
0002535B 04                         SME_Lx_Kl_33F:	dc.b 4	
0002535C EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
00025361 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
00025366 FE0D 0008 F6               		dc.b $FE, $D, 0, 8, $F6	
0002536B 0E08 0010 FE               		dc.b $E, 8, 0, $10, $FE	
00025370 03                         SME_Lx_Kl_354:	dc.b 3	
00025371 ED0F 0000 EF               		dc.b $ED, $F, 0, 0, $EF	
00025376 ED03 0010 0F               		dc.b $ED, 3, 0, $10, $F	
0002537B 0D0C 0014 F7               		dc.b $D, $C, 0, $14, $F7	
00025380 05                         SME_Lx_Kl_364:	dc.b 5	
00025381 EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
00025386 EC05 0006 04               		dc.b $EC, 5, 0, 6, 4	
0002538B FC0D 000A F4               		dc.b $FC, $D, 0, $A, $F4	
00025390 0C08 0012 F4               		dc.b $C, 8, 0, $12, $F4	
00025395 1404 0015 FC               		dc.b $14, 4, 0, $15, $FC	
0002539A 04                         SME_Lx_Kl_37E:	dc.b 4	
0002539B EC09 0000 ED               		dc.b $EC, 9, 0, 0, $ED	
000253A0 EC01 0006 05               		dc.b $EC, 1, 0, 6, 5	
000253A5 FC0D 0008 F5               		dc.b $FC, $D, 0, 8, $F5	
000253AA 0C08 0010 FD               		dc.b $C, 8, 0, $10, $FD	
000253AF 03                         SME_Lx_Kl_393:	dc.b 3	
000253B0 ED0F 0000 ED               		dc.b $ED, $F, 0, 0, $ED	
000253B5 ED03 0010 0D               		dc.b $ED, 3, 0, $10, $D	
000253BA 0D0C 0014 F5               		dc.b $D, $C, 0, $14, $F5	
000253BF 05                         SME_Lx_Kl_3A3:	dc.b 5	
000253C0 ED09 0000 EE               		dc.b $ED, 9, 0, 0, $EE	
000253C5 ED01 0006 06               		dc.b $ED, 1, 0, 6, 6	
000253CA FD00 0008 EE               		dc.b $FD, 0, 0, 8, $EE	
000253CF FD0D 0009 F6               		dc.b $FD, $D, 0, 9, $F6	
000253D4 0D08 0011 FE               		dc.b $D, 8, 0, $11, $FE	
000253D9 04                         SME_Lx_Kl_3BD:	dc.b 4	
000253DA F307 0000 ED               		dc.b $F3, 7, 0, 0, $ED	
000253DF EB09 0008 FD               		dc.b $EB, 9, 0, 8, $FD	
000253E4 FB04 000E FD               		dc.b $FB, 4, 0, $E, $FD	
000253E9 0309 0010 FD               		dc.b 3, 9, 0, $10, $FD	
000253EE 02                         SME_Lx_Kl_3D2:	dc.b 2	
000253EF F407 0000 ED               		dc.b $F4, 7, 0, 0, $ED	
000253F4 EC0B 0008 FD               		dc.b $EC, $B, 0, 8, $FD	
000253F9 02                         SME_Lx_Kl_3DD:	dc.b 2	
000253FA F40A 0000 FD               		dc.b $F4, $A, 0, 0, $FD	
000253FF F406 0009 ED               		dc.b $F4, 6, 0, 9, $ED	
00025404 05                         SME_Lx_Kl_3E8:	dc.b 5	
00025405 E900 0000 04               		dc.b $E9, 0, 0, 0, 4	
0002540A F10C 0001 F4               		dc.b $F1, $C, 0, 1, $F4	
0002540F F100 0005 EC               		dc.b $F1, 0, 0, 5, $EC	
00025414 F90E 0006 EC               		dc.b $F9, $E, 0, 6, $EC	
00025419 F902 0012 0C               		dc.b $F9, 2, 0, $12, $C	
0002541E 04                         SME_Lx_Kl_402:	dc.b 4	
0002541F F306 0000 EC               		dc.b $F3, 6, 0, 0, $EC	
00025424 EB09 0006 FC               		dc.b $EB, 9, 0, 6, $FC	
00025429 FB04 000C FC               		dc.b $FB, 4, 0, $C, $FC	
0002542E 0309 000E FC               		dc.b 3, 9, 0, $E, $FC	
00025433 02                         SME_Lx_Kl_417:	dc.b 2	
00025434 F306 0000 ED               		dc.b $F3, 6, 0, 0, $ED	
00025439 F30B 0006 FD               		dc.b $F3, $B, 0, 6, $FD	
0002543E 03                         SME_Lx_Kl_422:	dc.b 3	
0002543F F408 0000 ED               		dc.b $F4, 8, 0, 0, $ED	
00025444 FC0D 0003 ED               		dc.b $FC, $D, 0, 3, $ED	
00025449 FC01 000B 0D               		dc.b $FC, 1, 0, $B, $D	
0002544E 03                         SME_Lx_Kl_432:	dc.b 3	
0002544F F407 0000 ED               		dc.b $F4, 7, 0, 0, $ED	
00025454 EC00 0008 FD               		dc.b $EC, 0, 0, 8, $FD	
00025459 F40A 0009 FD               		dc.b $F4, $A, 0, 9, $FD	
0002545E 06                         SME_Lx_Kl_442:	dc.b 6	
0002545F FC06 0000 EE               		dc.b $FC, 6, 0, 0, $EE	
00025464 EC04 0006 F6               		dc.b $EC, 4, 0, 6, $F6	
00025469 F404 0008 EE               		dc.b $F4, 4, 0, 8, $EE	
0002546E F40A 000A FE               		dc.b $F4, $A, 0, $A, $FE	
00025473 0C00 0013 FE               		dc.b $C, 0, 0, $13, $FE	
00025478 FC00 0014 16               		dc.b $FC, 0, 0, $14, $16	
0002547D 06                         SME_Lx_Kl_461:	dc.b 6	
0002547E FC06 0000 EF               		dc.b $FC, 6, 0, 0, $EF	
00025483 E408 0006 F7               		dc.b $E4, 8, 0, 6, $F7	
00025488 EC04 0009 FF               		dc.b $EC, 4, 0, 9, $FF	
0002548D F404 000B EF               		dc.b $F4, 4, 0, $B, $EF	
00025492 F40A 000D FF               		dc.b $F4, $A, 0, $D, $FF	
00025497 0C00 0016 FF               		dc.b $C, 0, 0, $16, $FF	
0002549C 04                         SME_Lx_Kl_480:	dc.b 4	
0002549D FB06 0000 EF               		dc.b $FB, 6, 0, 0, $EF	
000254A2 F304 0006 EF               		dc.b $F3, 4, 0, 6, $EF	
000254A7 EB0A 0008 FF               		dc.b $EB, $A, 0, 8, $FF	
000254AC 0304 0011 FF               		dc.b 3, 4, 0, $11, $FF	
000254B1 03                         SME_Lx_Kl_495:	dc.b 3	
000254B2 E90F 0000 F5               		dc.b $E9, $F, 0, 0, $F5	
000254B7 F102 0010 ED               		dc.b $F1, 2, 0, $10, $ED	
000254BC 0908 0013 ED               		dc.b 9, 8, 0, $13, $ED	
000254C1 05                         SME_Lx_Kl_4A5:	dc.b 5	
000254C2 FC06 0000 EE               		dc.b $FC, 6, 0, 0, $EE	
000254C7 EC08 0006 F6               		dc.b $EC, 8, 0, 6, $F6	
000254CC F404 0009 EE               		dc.b $F4, 4, 0, 9, $EE	
000254D1 F40D 000B FE               		dc.b $F4, $D, 0, $B, $FE	
000254D6 0408 0013 FE               		dc.b 4, 8, 0, $13, $FE	
000254DB 04                         SME_Lx_Kl_4BF:	dc.b 4	
000254DC FC06 0000 EF               		dc.b $FC, 6, 0, 0, $EF	
000254E1 F404 0006 EF               		dc.b $F4, 4, 0, 6, $EF	
000254E6 EC0A 0008 FF               		dc.b $EC, $A, 0, 8, $FF	
000254EB 0404 0011 FF               		dc.b 4, 4, 0, $11, $FF	
000254F0 03                         SME_Lx_Kl_4D4:	dc.b 3	
000254F1 EB0F 0000 F0               		dc.b $EB, $F, 0, 0, $F0	
000254F6 0B08 0010 F0               		dc.b $B, 8, 0, $10, $F0	
000254FB EB01 0013 0F               		dc.b $EB, 1, 0, $13, $F	
00025500 05                         SME_Lx_Kl_4E4:	dc.b 5	
00025501 FB06 0000 EF               		dc.b $FB, 6, 0, 0, $EF	
00025506 EB0A 0006 FF               		dc.b $EB, $A, 0, 6, $FF	
0002550B F304 000F EF               		dc.b $F3, 4, 0, $F, $EF	
00025510 0304 0011 FF               		dc.b 3, 4, 0, $11, $FF	
00025515 0B00 0013 FF               		dc.b $B, 0, 0, $13, $FF	
0002551A 02                         SME_Lx_Kl_4FE:	dc.b 2	
0002551B EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025520 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00025525 02                         SME_Lx_Kl_509:	dc.b 2	
00025526 FE0E 0000 EC               		dc.b $FE, $E, 0, 0, $EC	
0002552B EE09 000C F4               		dc.b $EE, 9, 0, $C, $F4	
00025530 02                         SME_Lx_Kl_514:	dc.b 2	
00025531 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025536 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
0002553B 02                         SME_Lx_Kl_51F:	dc.b 2	
0002553C EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025541 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00025546 02                         SME_Lx_Kl_52A:	dc.b 2	
00025547 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
0002554C FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00025551 02                         SME_Lx_Kl_535:	dc.b 2	
00025552 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025557 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
0002555C 02                         SME_Lx_Kl_540:	dc.b 2	
0002555D EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025562 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00025567 02                         SME_Lx_Kl_54B:	dc.b 2	
00025568 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
0002556D FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00025572 04                         SME_Lx_Kl_556:	dc.b 4	
00025573 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
00025578 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
0002557D FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
00025582 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
00025587 03                         SME_Lx_Kl_56B:	dc.b 3	
00025588 F60F 0000 F6               		dc.b $F6, $F, 0, 0, $F6	
0002558D EE02 0010 EE               		dc.b $EE, 2, 0, $10, $EE	
00025592 EE08 0013 F6               		dc.b $EE, 8, 0, $13, $F6	
00025597 03                         SME_Lx_Kl_57B:	dc.b 3	
00025598 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
0002559D EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
000255A2 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
000255A7 03                         SME_Lx_Kl_58B:	dc.b 3	
000255A8 FE0E 0000 F6               		dc.b $FE, $E, 0, 0, $F6	
000255AD EE0D 000C EE               		dc.b $EE, $D, 0, $C, $EE	
000255B2 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000255B7 04                         SME_Lx_Kl_59B:	dc.b 4	
000255B8 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
000255BD EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
000255C2 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
000255C7 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000255CC 03                         SME_Lx_Kl_5B0:	dc.b 3	
000255CD FE0E 0000 F6               		dc.b $FE, $E, 0, 0, $F6	
000255D2 EE0D 000C EE               		dc.b $EE, $D, 0, $C, $EE	
000255D7 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000255DC 03                         SME_Lx_Kl_5C0:	dc.b 3	
000255DD EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
000255E2 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
000255E7 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
000255EC 03                         SME_Lx_Kl_5D0:	dc.b 3	
000255ED EE0D 0000 EE               		dc.b $EE, $D, 0, 0, $EE	
000255F2 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
000255F7 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000255FC 02                         SME_Lx_Kl_5E0:	dc.b 2	
000255FD F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00025602 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025607 02                         SME_Lx_Kl_5EB:	dc.b 2	
00025608 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
0002560D F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025612 02                         SME_Lx_Kl_5F6:	dc.b 2	
00025613 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00025618 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
0002561D 02                         SME_Lx_Kl_601:	dc.b 2	
0002561E F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00025623 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025628 02                         SME_Lx_Kl_60C:	dc.b 2	
00025629 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
0002562E F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025633 02                         SME_Lx_Kl_617:	dc.b 2	
00025634 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00025639 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
0002563E 02                         SME_Lx_Kl_622:	dc.b 2	
0002563F F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00025644 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025649 02                         SME_Lx_Kl_62D:	dc.b 2	
0002564A F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
0002564F F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025654 04                         SME_Lx_Kl_638:	dc.b 4	
00025655 FA06 0000 EE               		dc.b $FA, 6, 0, 0, $EE	
0002565A F204 0006 EE               		dc.b $F2, 4, 0, 6, $EE	
0002565F EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00025664 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE	
00025669 03                         SME_Lx_Kl_64D:	dc.b 3	
0002566A EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
0002566F 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
00025674 F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
00025679 02                         SME_Lx_Kl_65D:	dc.b 2	
0002567A F207 0000 EE               		dc.b $F2, 7, 0, 0, $EE	
0002567F EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00025684 03                         SME_Lx_Kl_668:	dc.b 3	
00025685 EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
0002568A 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
0002568F F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
00025694 04                         SME_Lx_Kl_678:	dc.b 4	
00025695 FA06 0000 EE               		dc.b $FA, 6, 0, 0, $EE	
0002569A F204 0006 EE               		dc.b $F2, 4, 0, 6, $EE	
0002569F EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
000256A4 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE	
000256A9 03                         SME_Lx_Kl_68D:	dc.b 3	
000256AA EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
000256AF 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
000256B4 F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
000256B9 02                         SME_Lx_Kl_69D:	dc.b 2	
000256BA F207 0000 EE               		dc.b $F2, 7, 0, 0, $EE	
000256BF EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
000256C4 03                         SME_Lx_Kl_6A8:	dc.b 3	
000256C5 EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
000256CA 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
000256CF F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
000256D4 03                         SME_Lx_Kl_6B8:	dc.b 3	
000256D5 F00B 0000 FB               		dc.b $F0, $B, 0, 0, $FB	
000256DA 1008 000C FB               		dc.b $10, 8, 0, $C, $FB	
000256DF F806 000F EB               		dc.b $F8, 6, 0, $F, $EB	
000256E4 03                         SME_Lx_Kl_6C8:	dc.b 3	
000256E5 F00B 0000 FB               		dc.b $F0, $B, 0, 0, $FB	
000256EA 1008 000C FB               		dc.b $10, 8, 0, $C, $FB	
000256EF F806 000F EB               		dc.b $F8, 6, 0, $F, $EB	
000256F4 09                         SME_Lx_Kl_6D8:	dc.b 9	
000256F5 1008 0000 FB               		dc.b $10, 8, 0, 0, $FB	
000256FA F806 0003 EB               		dc.b $F8, 6, 0, 3, $EB	
000256FF 1000 0009 F3               		dc.b $10, 0, 0, 9, $F3	
00025704 0001 000A FB               		dc.b 0, 1, 0, $A, $FB	
00025709 0001 000C 03               		dc.b 0, 1, 0, $C, 3	
0002570E 0001 000E 0B               		dc.b 0, 1, 0, $E, $B	
00025713 F001 0010 FB               		dc.b $F0, 1, 0, $10, $FB	
00025718 F001 0012 03               		dc.b $F0, 1, 0, $12, 3	
0002571D F001 0014 0B               		dc.b $F0, 1, 0, $14, $B	
00025722 09                         SME_Lx_Kl_706:	dc.b 9	
00025723 1008 0000 FB               		dc.b $10, 8, 0, 0, $FB	
00025728 F806 0003 EB               		dc.b $F8, 6, 0, 3, $EB	
0002572D 1000 0009 F0               		dc.b $10, 0, 0, 9, $F0	
00025732 0001 000A FB               		dc.b 0, 1, 0, $A, $FB	
00025737 0001 000C 03               		dc.b 0, 1, 0, $C, 3	
0002573C 0001 000E 0B               		dc.b 0, 1, 0, $E, $B	
00025741 F001 0010 FB               		dc.b $F0, 1, 0, $10, $FB	
00025746 F001 0012 03               		dc.b $F0, 1, 0, $12, 3	
0002574B F001 0014 0B               		dc.b $F0, 1, 0, $14, $B	
00025750 03                         SME_Lx_Kl_734:	dc.b 3	
00025751 F20F 0000 F5               		dc.b $F2, $F, 0, 0, $F5	
00025756 0201 0010 ED               		dc.b 2, 1, 0, $10, $ED	
0002575B EA0C 0012 F5               		dc.b $EA, $C, 0, $12, $F5	
00025760 03                         SME_Lx_Kl_744:	dc.b 3	
00025761 F40B 0000 EF               		dc.b $F4, $B, 0, 0, $EF	
00025766 EC07 000C 07               		dc.b $EC, 7, 0, $C, 7	
0002576B EC04 0014 F7               		dc.b $EC, 4, 0, $14, $F7	
00025770 03                         SME_Lx_Kl_754:	dc.b 3	
00025771 F30F 0000 F4               		dc.b $F3, $F, 0, 0, $F4	
00025776 EB0C 0010 F4               		dc.b $EB, $C, 0, $10, $F4	
0002577B 0300 0014 EC               		dc.b 3, 0, 0, $14, $EC	
00025780 05                         SME_Lx_Kl_764:	dc.b 5	
00025781 F10E 0000 F7               		dc.b $F1, $E, 0, 0, $F7	
00025786 090C 000C EF               		dc.b 9, $C, 0, $C, $EF	
0002578B F901 0010 EF               		dc.b $F9, 1, 0, $10, $EF	
00025790 1104 0012 F7               		dc.b $11, 4, 0, $12, $F7	
00025795 E908 0014 F7               		dc.b $E9, 8, 0, $14, $F7	
0002579A 03                         SME_Lx_Kl_77E:	dc.b 3	
0002579B ED0E 0000 EE               		dc.b $ED, $E, 0, 0, $EE	
000257A0 ED02 000C 0E               		dc.b $ED, 2, 0, $C, $E	
000257A5 0509 000F F6               		dc.b 5, 9, 0, $F, $F6	
000257AA 03                         SME_Lx_Kl_78E:	dc.b 3	
000257AB ED0E 0000 EE               		dc.b $ED, $E, 0, 0, $EE	
000257B0 ED02 000C 0E               		dc.b $ED, 2, 0, $C, $E	
000257B5 0509 000F F6               		dc.b 5, 9, 0, $F, $F6	
000257BA 05                         SME_Lx_Kl_79E:	dc.b 5	
000257BB 0509 0000 F6               		dc.b 5, 9, 0, 0, $F6	
000257C0 ED02 0006 0E               		dc.b $ED, 2, 0, 6, $E	
000257C5 0500 0009 0E               		dc.b 5, 0, 0, 9, $E	
000257CA ED06 000A FE               		dc.b $ED, 6, 0, $A, $FE	
000257CF ED06 0010 EE               		dc.b $ED, 6, 0, $10, $EE	
000257D4 05                         SME_Lx_Kl_7B8:	dc.b 5	
000257D5 ED02 0000 0E               		dc.b $ED, 2, 0, 0, $E	
000257DA 0509 0003 F6               		dc.b 5, 9, 0, 3, $F6	
000257DF 0800 0009 0E               		dc.b 8, 0, 0, 9, $E	
000257E4 ED06 000A FE               		dc.b $ED, 6, 0, $A, $FE	
000257E9 ED06 0010 EE               		dc.b $ED, 6, 0, $10, $EE	
000257EE 04                         SME_Lx_Kl_7D2:	dc.b 4	
000257EF F00E 0000 E9               		dc.b $F0, $E, 0, 0, $E9	
000257F4 0808 000C F9               		dc.b 8, 8, 0, $C, $F9	
000257F9 E808 000F F1               		dc.b $E8, 8, 0, $F, $F1	
000257FE F002 0012 09               		dc.b $F0, 2, 0, $12, 9	
00025803 04                         SME_Lx_Kl_7E7:	dc.b 4	
00025804 E60B 0000 F3               		dc.b $E6, $B, 0, 0, $F3	
00025809 0608 000C F3               		dc.b 6, 8, 0, $C, $F3	
0002580E F602 000F 0B               		dc.b $F6, 2, 0, $F, $B	
00025813 EE02 0012 EB               		dc.b $EE, 2, 0, $12, $EB	
00025818 04                         SME_Lx_Kl_7FC:	dc.b 4	
00025819 EA0F 0000 EA               		dc.b $EA, $F, 0, 0, $EA	
0002581E F202 0010 0A               		dc.b $F2, 2, 0, $10, $A	
00025823 0A00 0013 02               		dc.b $A, 0, 0, $13, 2	
00025828 0A00 0014 0A               		dc.b $A, 0, 0, $14, $A	
0002582D 04                         SME_Lx_Kl_811:	dc.b 4	
0002582E E80F 0000 ED               		dc.b $E8, $F, 0, 0, $ED	
00025833 0808 0010 F5               		dc.b 8, 8, 0, $10, $F5	
00025838 F801 0013 0D               		dc.b $F8, 1, 0, $13, $D	
0002583D F001 0015 E5               		dc.b $F0, 1, 0, $15, $E5	
00025842 01                         SME_Lx_Kl_826:	dc.b 1	
00025843 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025848 01                         SME_Lx_Kl_82C:	dc.b 1	
00025849 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
0002584E 01                         SME_Lx_Kl_832:	dc.b 1	
0002584F F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025854 01                         SME_Lx_Kl_838:	dc.b 1	
00025855 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
0002585A 01                         SME_Lx_Kl_83E:	dc.b 1	
0002585B F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025860 01                         SME_Lx_Kl_844:	dc.b 1	
00025861 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025866 01                         SME_Lx_Kl_84A:	dc.b 1	
00025867 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
0002586C 03                         SME_Lx_Kl_850:	dc.b 3	
0002586D F00A 0000 F0               		dc.b $F0, $A, 0, 0, $F0	
00025872 080C 0009 F0               		dc.b 8, $C, 0, 9, $F0	
00025877 F002 000D 08               		dc.b $F0, 2, 0, $D, 8	
0002587C 01                         SME_Lx_Kl_860:	dc.b 1	
0002587D F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025882 02                         SME_Lx_Kl_866:	dc.b 2	
00025883 F40E 0000 EC               		dc.b $F4, $E, 0, 0, $EC	
00025888 F402 000C 0C               		dc.b $F4, 2, 0, $C, $C	
0002588D 01                         SME_Lx_Kl_871:	dc.b 1	
0002588E F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025893 02                         SME_Lx_Kl_877:	dc.b 2	
00025894 EC0B 0000 F4               		dc.b $EC, $B, 0, 0, $F4	
00025899 0C08 000C F4               		dc.b $C, 8, 0, $C, $F4	
0002589E 01                         SME_Lx_Kl_882:	dc.b 1	
0002589F F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
000258A4 04                         SME_Lx_Kl_888:	dc.b 4	
000258A5 ED09 0000 F0               		dc.b $ED, 9, 0, 0, $F0	
000258AA FD0E 0006 F0               		dc.b $FD, $E, 0, 6, $F0	
000258AF F501 0012 E8               		dc.b $F5, 1, 0, $12, $E8	
000258B4 F500 0014 08               		dc.b $F5, 0, 0, $14, 8	
000258B9 07                         SME_Lx_Kl_89D:	dc.b 7	
000258BA ED09 0000 F0               		dc.b $ED, 9, 0, 0, $F0	
000258BF FD0D 0006 F0               		dc.b $FD, $D, 0, 6, $F0	
000258C4 0D04 000E 00               		dc.b $D, 4, 0, $E, 0	
000258C9 F500 0010 E8               		dc.b $F5, 0, 0, $10, $E8	
000258CE F500 0011 08               		dc.b $F5, 0, 0, $11, 8	
000258D3 0D00 0012 F8               		dc.b $D, 0, 0, $12, $F8	
000258D8 FD00 0013 E8               		dc.b $FD, 0, 0, $13, $E8	
000258DD 05                         SME_Lx_Kl_8C1:	dc.b 5	
000258DE F502 0000 F0               		dc.b $F5, 2, 0, 0, $F0	
000258E3 F50B 0003 F8               		dc.b $F5, $B, 0, 3, $F8	
000258E8 ED08 000F F0               		dc.b $ED, 8, 0, $F, $F0	
000258ED F501 0012 E8               		dc.b $F5, 1, 0, $12, $E8	
000258F2 ED00 0014 08               		dc.b $ED, 0, 0, $14, 8	
000258F7 03                         SME_Lx_Kl_8DB:	dc.b 3	
000258F8 F50B 0000 F8               		dc.b $F5, $B, 0, 0, $F8	
000258FD ED03 000C F0               		dc.b $ED, 3, 0, $C, $F0	
00025902 ED04 0010 F8               		dc.b $ED, 4, 0, $10, $F8	
00025907 02                         SME_Lx_Kl_8EB:	dc.b 2	
00025908 0C08 0000 F8               		dc.b $C, 8, 0, 0, $F8	
0002590D EC0F 0003 F0               		dc.b $EC, $F, 0, 3, $F0	
00025912 04                         SME_Lx_Kl_8F6:	dc.b 4	
00025913 F402 0000 F8               		dc.b $F4, 2, 0, 0, $F8	
00025918 F402 0003 00               		dc.b $F4, 2, 0, 3, 0	
0002591D F402 0006 08               		dc.b $F4, 2, 0, 6, 8	
00025922 0C08 0009 F8               		dc.b $C, 8, 0, 9, $F8	
00025927 04                         SME_Lx_Kl_90B:	dc.b 4	
00025928 F404 0000 03               		dc.b $F4, 4, 0, 0, 3	
0002592D FC0D 0002 F8               		dc.b $FC, $D, 0, 2, $F8	
00025932 0C08 000A F8               		dc.b $C, 8, 0, $A, $F8	
00025937 0C00 000D 10               		dc.b $C, 0, 0, $D, $10	
0002593C 04                         SME_Lx_Kl_920:	dc.b 4	
0002593D EC08 0800 E8               		dc.b $EC, 8, 8, 0, $E8	
00025942 F402 0803 00               		dc.b $F4, 2, 8, 3, 0	
00025947 F40F 0806 E0               		dc.b $F4, $F, 8, 6, $E0	
0002594C EC00 0016 00               		dc.b $EC, 0, 0, $16, 0	
00025951 09                         SME_Lx_Kl_935:	dc.b 9	
00025952 F402 0000 00               		dc.b $F4, 2, 0, 0, 0	
00025957 EC0C 0003 E8               		dc.b $EC, $C, 0, 3, $E8	
0002595C F407 0007 E0               		dc.b $F4, 7, 0, 7, $E0	
00025961 0C00 080F F8               		dc.b $C, 0, 8, $F, $F8	
00025966 F400 0010 F0               		dc.b $F4, 0, 0, $10, $F0	
0002596B F402 0011 F8               		dc.b $F4, 2, 0, $11, $F8	
00025970 0400 0014 F0               		dc.b 4, 0, 0, $14, $F0	
00025975 0C00 0015 F0               		dc.b $C, 0, 0, $15, $F0	
0002597A FC00 0016 F0               		dc.b $FC, 0, 0, $16, $F0	
0002597F 03                         SME_Lx_Kl_963:	dc.b 3	
00025980 EC0E 0800 E8               		dc.b $EC, $E, 8, 0, $E8	
00025985 040D 080C E0               		dc.b 4, $D, 8, $C, $E0	
0002598A 0C00 1814 00               		dc.b $C, 0, $18, $14, 0	
0002598F 03                         SME_Lx_Kl_973:	dc.b 3	
00025990 F40F 0000 E8               		dc.b $F4, $F, 0, 0, $E8	
00025995 0401 0010 E0               		dc.b 4, 1, 0, $10, $E0	
0002599A EC0C 0012 E8               		dc.b $EC, $C, 0, $12, $E8	
0002599F 02                         SME_Lx_Kl_983:	dc.b 2	
000259A0 F40F 0000 E8               		dc.b $F4, $F, 0, 0, $E8	
000259A5 EC0C 0010 E8               		dc.b $EC, $C, 0, $10, $E8	
000259AA 00                         SME_Lx_Kl_98E:	dc.b 0	
000259AB 08                         SME_Lx_Kl_98F:	dc.b 8	
000259AC E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0	
000259B1 E801 0004 10               		dc.b $E8, 1, 0, 4, $10	
000259B6 F002 0006 F8               		dc.b $F0, 2, 0, 6, $F8	
000259BB F001 0009 00               		dc.b $F0, 1, 0, 9, 0	
000259C0 F001 000B 08               		dc.b $F0, 1, 0, $B, 8	
000259C5 0006 000D 00               		dc.b 0, 6, 0, $D, 0	
000259CA 0801 0013 F8               		dc.b 8, 1, 0, $13, $F8	
000259CF 1000 0015 10               		dc.b $10, 0, 0, $15, $10	
000259D4 07                         SME_Lx_Kl_9B8:	dc.b 7	
000259D5 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0	
000259DA E801 0004 10               		dc.b $E8, 1, 0, 4, $10	
000259DF F002 0006 F8               		dc.b $F0, 2, 0, 6, $F8	
000259E4 F001 0009 00               		dc.b $F0, 1, 0, 9, 0	
000259E9 F001 000B 08               		dc.b $F0, 1, 0, $B, 8	
000259EE 0006 000D 00               		dc.b 0, 6, 0, $D, 0	
000259F3 0801 0013 10               		dc.b 8, 1, 0, $13, $10	
000259F8 04                         SME_Lx_Kl_9DC:	dc.b 4	
000259F9 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0	
000259FE F00A 0004 F8               		dc.b $F0, $A, 0, 4, $F8	
00025A03 E801 000D 10               		dc.b $E8, 1, 0, $D, $10	
00025A08 0809 000F F0               		dc.b 8, 9, 0, $F, $F0	
00025A0D 03                         SME_Lx_Kl_9F1:	dc.b 3	
00025A0E F40D 0800 FC               		dc.b $F4, $D, 8, 0, $FC	
00025A13 FC00 0808 F4               		dc.b $FC, 0, 8, 8, $F4	
00025A18 040C 0809 F4               		dc.b 4, $C, 8, 9, $F4	
00025A1D 03                         SME_Lx_Kl_A01:	dc.b 3	
00025A1E F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
00025A23 FC05 0008 EC               		dc.b $FC, 5, 0, 8, $EC	
00025A28 0408 000C FC               		dc.b 4, 8, 0, $C, $FC	
00025A2D 03                         SME_Lx_Kl_A11:	dc.b 3	
00025A2E F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
00025A33 040C 0008 F4               		dc.b 4, $C, 0, 8, $F4	
00025A38 FC00 000C F4               		dc.b $FC, 0, 0, $C, $F4	
00025A3D 02                         SME_Lx_Kl_A21:	dc.b 2	
00025A3E F40A 0000 F0               		dc.b $F4, $A, 0, 0, $F0	
00025A43 F40A 0800 08               		dc.b $F4, $A, 8, 0, 8	
00025A48 03                         SME_Lx_Kl_A2C:	dc.b 3	
00025A49 F40D 0800 F4               		dc.b $F4, $D, 8, 0, $F4	
00025A4E 040C 0808 FC               		dc.b 4, $C, 8, 8, $FC	
00025A53 FC00 080C 14               		dc.b $FC, 0, 8, $C, $14	
00025A58 03                         SME_Lx_Kl_A3C:	dc.b 3	
00025A59 F40D 0800 F4               		dc.b $F4, $D, 8, 0, $F4	
00025A5E FC05 0808 14               		dc.b $FC, 5, 8, 8, $14	
00025A63 0408 080C FC               		dc.b 4, 8, 8, $C, $FC	
00025A68 03                         SME_Lx_Kl_A4C:	dc.b 3	
00025A69 F40D 0000 F4               		dc.b $F4, $D, 0, 0, $F4	
00025A6E FC00 0008 14               		dc.b $FC, 0, 0, 8, $14	
00025A73 040C 0009 FC               		dc.b 4, $C, 0, 9, $FC	
00025A78 03                         SME_Lx_Kl_A5C:	dc.b 3	
00025A79 F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
00025A7E FC05 0008 EC               		dc.b $FC, 5, 0, 8, $EC	
00025A83 0408 000C FC               		dc.b 4, 8, 0, $C, $FC	
00025A88 04                         SME_Lx_Kl_A6C:	dc.b 4	
00025A89 E90B 0000 F4               		dc.b $E9, $B, 0, 0, $F4	
00025A8E 1100 000C FC               		dc.b $11, 0, 0, $C, $FC	
00025A93 0900 000D FC               		dc.b 9, 0, 0, $D, $FC	
00025A98 0900 000E 04               		dc.b 9, 0, 0, $E, 4	
00025A9D 08                         SME_Lx_Kl_A81:	dc.b 8	
00025A9E E909 0000 F4               		dc.b $E9, 9, 0, 0, $F4	
00025AA3 F901 0006 04               		dc.b $F9, 1, 0, 6, 4	
00025AA8 0900 0008 FC               		dc.b 9, 0, 0, 8, $FC	
00025AAD 1100 0009 FC               		dc.b $11, 0, 0, 9, $FC	
00025AB2 F901 000A FC               		dc.b $F9, 1, 0, $A, $FC	
00025AB7 F900 000C F4               		dc.b $F9, 0, 0, $C, $F4	
00025ABC 0100 000D F4               		dc.b 1, 0, 0, $D, $F4	
00025AC1 0900 000E 04               		dc.b 9, 0, 0, $E, 4	
00025AC6 04                         SME_Lx_Kl_AAA:	dc.b 4	
00025AC7 F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8	
00025ACC 0005 000C 08               		dc.b 0, 5, 0, $C, 8	
00025AD1 F800 0010 08               		dc.b $F8, 0, 0, $10, 8	
00025AD6 F000 0011 F8               		dc.b $F0, 0, 0, $11, $F8	
00025ADB 04                         SME_Lx_Kl_ABF:	dc.b 4	
00025ADC F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8	
00025AE1 0005 000C 08               		dc.b 0, 5, 0, $C, 8	
00025AE6 F800 0010 08               		dc.b $F8, 0, 0, $10, 8	
00025AEB F000 0011 F8               		dc.b $F0, 0, 0, $11, $F8	
00025AF0 05                         SME_Lx_Kl_AD4:	dc.b 5	
00025AF1 E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4	
00025AF6 F001 0009 0C               		dc.b $F0, 1, 0, 9, $C	
00025AFB 0009 000B F4               		dc.b 0, 9, 0, $B, $F4	
00025B00 1004 0011 F4               		dc.b $10, 4, 0, $11, $F4	
00025B05 0000 0013 EC               		dc.b 0, 0, 0, $13, $EC	
00025B0A 05                         SME_Lx_Kl_AEE:	dc.b 5	
00025B0B E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4	
00025B10 E801 0009 0C               		dc.b $E8, 1, 0, 9, $C	
00025B15 0009 000B F4               		dc.b 0, 9, 0, $B, $F4	
00025B1A 1004 0011 F4               		dc.b $10, 4, 0, $11, $F4	
00025B1F 0000 0013 EC               		dc.b 0, 0, 0, $13, $EC	
00025B24 02                         SME_Lx_Kl_B08:	dc.b 2	
00025B25 ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3	
00025B2A 050D 0009 EB               		dc.b 5, $D, 0, 9, $EB	
00025B2F 05                         SME_Lx_Kl_B13:	dc.b 5	
00025B30 0505 0000 EB               		dc.b 5, 5, 0, 0, $EB	
00025B35 ED02 0004 F3               		dc.b $ED, 2, 0, 4, $F3	
00025B3A F503 0007 FB               		dc.b $F5, 3, 0, 7, $FB	
00025B3F ED03 000B 03               		dc.b $ED, 3, 0, $B, 3	
00025B44 ED00 000F FB               		dc.b $ED, 0, 0, $F, $FB	
00025B49 03                         SME_Lx_Kl_B2D:	dc.b 3	
00025B4A EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3	
00025B4F 0408 0009 F3               		dc.b 4, 8, 0, 9, $F3	
00025B54 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3	
00025B59 05                         SME_Lx_Kl_B3D:	dc.b 5	
00025B5A 0D00 0000 EB               		dc.b $D, 0, 0, 0, $EB	
00025B5F F503 0001 F3               		dc.b $F5, 3, 0, 1, $F3	
00025B64 F503 0005 FB               		dc.b $F5, 3, 0, 5, $FB	
00025B69 F503 0009 03               		dc.b $F5, 3, 0, 9, 3	
00025B6E ED08 000D F3               		dc.b $ED, 8, 0, $D, $F3	
00025B73 02                         SME_Lx_Kl_B57:	dc.b 2	
00025B74 ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3	
00025B79 050D 0009 EB               		dc.b 5, $D, 0, 9, $EB	
00025B7E 03                         SME_Lx_Kl_B62:	dc.b 3	
00025B7F F50B 0000 F3               		dc.b $F5, $B, 0, 0, $F3	
00025B84 0501 000C EB               		dc.b 5, 1, 0, $C, $EB	
00025B89 ED08 000E F3               		dc.b $ED, 8, 0, $E, $F3	
00025B8E 03                         SME_Lx_Kl_B72:	dc.b 3	
00025B8F EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3	
00025B94 0408 0009 F3               		dc.b 4, 8, 0, 9, $F3	
00025B99 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3	
00025B9E 03                         SME_Lx_Kl_B82:	dc.b 3	
00025B9F F50B 0000 F3               		dc.b $F5, $B, 0, 0, $F3	
00025BA4 0501 000C EB               		dc.b 5, 1, 0, $C, $EB	
00025BA9 ED08 000E F3               		dc.b $ED, 8, 0, $E, $F3	
00025BAE 02                         SME_Lx_Kl_B92:	dc.b 2	
00025BAF EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00025BB4 FC0E 0006 F0               		dc.b $FC, $E, 0, 6, $F0	
00025BB9 03                         SME_Lx_Kl_B9D:	dc.b 3	
00025BBA E80D 2000 EC               		dc.b $E8, $D, $20, 0, $EC	
00025BBF E801 2008 0C               		dc.b $E8, 1, $20, 8, $C	
00025BC4 F80B 200A F4               		dc.b $F8, $B, $20, $A, $F4	
00025BC9 0B                         SME_Lx_Kl_BAD:	dc.b $B	
00025BCA E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC	
00025BCF E801 0008 0C               		dc.b $E8, 1, 0, 8, $C	
00025BD4 1000 000A F4               		dc.b $10, 0, 0, $A, $F4	
00025BD9 0808 000B F4               		dc.b 8, 8, 0, $B, $F4	
00025BDE 1000 000E 04               		dc.b $10, 0, 0, $E, 4	
00025BE3 F800 000F FC               		dc.b $F8, 0, 0, $F, $FC	
00025BE8 F800 0010 F4               		dc.b $F8, 0, 0, $10, $F4	
00025BED F800 0011 04               		dc.b $F8, 0, 0, $11, 4	
00025BF2 0000 0012 FC               		dc.b 0, 0, 0, $12, $FC	
00025BF7 0000 0013 04               		dc.b 0, 0, 0, $13, 4	
00025BFC 0000 0014 F4               		dc.b 0, 0, 0, $14, $F4	
00025C01 06                         SME_Lx_Kl_BE5:	dc.b 6	
00025C02 E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC	
00025C07 E801 0008 0C               		dc.b $E8, 1, 0, 8, $C	
00025C0C F809 000A F4               		dc.b $F8, 9, 0, $A, $F4	
00025C11 1000 0010 F4               		dc.b $10, 0, 0, $10, $F4	
00025C16 0808 0011 F4               		dc.b 8, 8, 0, $11, $F4	
00025C1B 1000 0014 04               		dc.b $10, 0, 0, $14, 4	
00025C20 03                         SME_Lx_Kl_C04:	dc.b 3	
00025C21 EB09 0000 F4               		dc.b $EB, 9, 0, 0, $F4	
00025C26 FB0E 0006 EC               		dc.b $FB, $E, 0, 6, $EC	
00025C2B 0301 0012 0C               		dc.b 3, 1, 0, $12, $C	
00025C30 07                         SME_Lx_Kl_C14:	dc.b 7	
00025C31 F801 0000 0C               		dc.b $F8, 1, 0, 0, $C	
00025C36 080C 0002 F4               		dc.b 8, $C, 0, 2, $F4	
00025C3B F801 0006 FC               		dc.b $F8, 1, 0, 6, $FC	
00025C40 F000 0008 FC               		dc.b $F0, 0, 0, 8, $FC	
00025C45 F801 0009 EC               		dc.b $F8, 1, 0, 9, $EC	
00025C4A F002 000B F4               		dc.b $F0, 2, 0, $B, $F4	
00025C4F F002 000E 04               		dc.b $F0, 2, 0, $E, 4	
00025C54 02                         SME_Lx_Kl_C38:	dc.b 2	
00025C55 F00F 0000 EC               		dc.b $F0, $F, 0, 0, $EC	
00025C5A F802 0010 0C               		dc.b $F8, 2, 0, $10, $C	
00025C5F 04                         SME_Lx_Kl_C43:	dc.b 4	
00025C60 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00025C65 F800 000C EC               		dc.b $F8, 0, 0, $C, $EC	
00025C6A F008 000E F4               		dc.b $F0, 8, 0, $E, $F4	
00025C6F 0000 0011 EC               		dc.b 0, 0, 0, $11, $EC	
00025C74 03                         SME_Lx_Kl_C58:	dc.b 3	
00025C75 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00025C7A F801 000C EC               		dc.b $F8, 1, 0, $C, $EC	
00025C7F F008 000E F4               		dc.b $F0, 8, 0, $E, $F4	
00025C84 03                         SME_Lx_Kl_C68:	dc.b 3	
00025C85 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00025C8A F008 000C F4               		dc.b $F0, 8, 0, $C, $F4	
00025C8F F801 000F EC               		dc.b $F8, 1, 0, $F, $EC	
00025C94 04                         SME_Lx_Kl_C78:	dc.b 4	
00025C95 0002 0000 F4               		dc.b 0, 2, 0, 0, $F4	
00025C9A F803 0003 FC               		dc.b $F8, 3, 0, 3, $FC	
00025C9F F803 0007 04               		dc.b $F8, 3, 0, 7, 4	
00025CA4 F802 000B 0C               		dc.b $F8, 2, 0, $B, $C	
00025CA9 01                         SME_Lx_Kl_C8D:	dc.b 1	
00025CAA F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00025CAF 01                         SME_Lx_Kl_C93:	dc.b 1	
00025CB0 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00025CB5 01                         SME_Lx_Kl_C99:	dc.b 1	
00025CB6 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00025CBB 01                         SME_Lx_Kl_C9F:	dc.b 1	
00025CBC F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00025CC1 02                         SME_Lx_Kl_CA5:	dc.b 2	
00025CC2 F80B 0000 F4               		dc.b $F8, $B, 0, 0, $F4	
00025CC7 F802 000C 0C               		dc.b $F8, 2, 0, $C, $C	
00025CCC                            		even
00025CCC                            		even
00025CCC                            SonicDynPLC:	include	"_maps\Sonic - Dynamic Gfx Script.asm"
00025CCC                            ; --------------------------------------------------------------------------------
00025CCC                            ; Dynamic Pattern Loading Cues - output from SonMapEd - Sonic 1 format; --------------------------------------------------------------------------------
00025CCC                            
00025CCC                            SME_vJmm3:	
00025CCC 0000 0000                  		dc.w SME_vJmm3_142-SME_vJmm3, SME_vJmm3_143-SME_vJmm3	
00025CD0 0000 0000                  		dc.w SME_vJmm3_14C-SME_vJmm3, SME_vJmm3_15F-SME_vJmm3	
00025CD4 0000 0000                  		dc.w SME_vJmm3_174-SME_vJmm3, SME_vJmm3_17D-SME_vJmm3	
00025CD8 0000 0000                  		dc.w SME_vJmm3_184-SME_vJmm3, SME_vJmm3_18B-SME_vJmm3	
00025CDC 0000 0000                  		dc.w SME_vJmm3_194-SME_vJmm3, SME_vJmm3_199-SME_vJmm3	
00025CE0 0000 0000                  		dc.w SME_vJmm3_1A0-SME_vJmm3, SME_vJmm3_1A7-SME_vJmm3	
00025CE4 0000 0000                  		dc.w SME_vJmm3_1AE-SME_vJmm3, SME_vJmm3_1B7-SME_vJmm3	
00025CE8 0000 0000                  		dc.w SME_vJmm3_1BE-SME_vJmm3, SME_vJmm3_1CD-SME_vJmm3	
00025CEC 0000 0000                  		dc.w SME_vJmm3_1D8-SME_vJmm3, SME_vJmm3_1DF-SME_vJmm3	
00025CF0 0000 0000                  		dc.w SME_vJmm3_1E6-SME_vJmm3, SME_vJmm3_1EF-SME_vJmm3	
00025CF4 0000 0000                  		dc.w SME_vJmm3_1F4-SME_vJmm3, SME_vJmm3_1FB-SME_vJmm3	
00025CF8 0000 0000                  		dc.w SME_vJmm3_206-SME_vJmm3, SME_vJmm3_211-SME_vJmm3	
00025CFC 0000 0000                  		dc.w SME_vJmm3_21E-SME_vJmm3, SME_vJmm3_227-SME_vJmm3	
00025D00 0000 0000                  		dc.w SME_vJmm3_22E-SME_vJmm3, SME_vJmm3_239-SME_vJmm3	
00025D04 0000 0000                  		dc.w SME_vJmm3_242-SME_vJmm3, SME_vJmm3_249-SME_vJmm3	
00025D08 0000 0000                  		dc.w SME_vJmm3_254-SME_vJmm3, SME_vJmm3_25D-SME_vJmm3	
00025D0C 0000 0000                  		dc.w SME_vJmm3_262-SME_vJmm3, SME_vJmm3_267-SME_vJmm3	
00025D10 0000 0000                  		dc.w SME_vJmm3_272-SME_vJmm3, SME_vJmm3_27B-SME_vJmm3	
00025D14 0000 0000                  		dc.w SME_vJmm3_280-SME_vJmm3, SME_vJmm3_287-SME_vJmm3	
00025D18 0000 0000                  		dc.w SME_vJmm3_28E-SME_vJmm3, SME_vJmm3_29B-SME_vJmm3	
00025D1C 0000 0000                  		dc.w SME_vJmm3_2A8-SME_vJmm3, SME_vJmm3_2B1-SME_vJmm3	
00025D20 0000 0000                  		dc.w SME_vJmm3_2B8-SME_vJmm3, SME_vJmm3_2C3-SME_vJmm3	
00025D24 0000 0000                  		dc.w SME_vJmm3_2CC-SME_vJmm3, SME_vJmm3_2D3-SME_vJmm3	
00025D28 0000 0000                  		dc.w SME_vJmm3_2DE-SME_vJmm3, SME_vJmm3_2E3-SME_vJmm3	
00025D2C 0000 0000                  		dc.w SME_vJmm3_2E8-SME_vJmm3, SME_vJmm3_2ED-SME_vJmm3	
00025D30 0000 0000                  		dc.w SME_vJmm3_2F2-SME_vJmm3, SME_vJmm3_2F7-SME_vJmm3	
00025D34 0000 0000                  		dc.w SME_vJmm3_2FC-SME_vJmm3, SME_vJmm3_301-SME_vJmm3	
00025D38 0000 0000                  		dc.w SME_vJmm3_306-SME_vJmm3, SME_vJmm3_30F-SME_vJmm3	
00025D3C 0000 0000                  		dc.w SME_vJmm3_316-SME_vJmm3, SME_vJmm3_31D-SME_vJmm3	
00025D40 0000 0000                  		dc.w SME_vJmm3_324-SME_vJmm3, SME_vJmm3_32D-SME_vJmm3	
00025D44 0000 0000                  		dc.w SME_vJmm3_334-SME_vJmm3, SME_vJmm3_33B-SME_vJmm3	
00025D48 0000 0000                  		dc.w SME_vJmm3_342-SME_vJmm3, SME_vJmm3_347-SME_vJmm3	
00025D4C 0000 0000                  		dc.w SME_vJmm3_34C-SME_vJmm3, SME_vJmm3_351-SME_vJmm3	
00025D50 0000 0000                  		dc.w SME_vJmm3_356-SME_vJmm3, SME_vJmm3_35B-SME_vJmm3	
00025D54 0000 0000                  		dc.w SME_vJmm3_360-SME_vJmm3, SME_vJmm3_365-SME_vJmm3	
00025D58 0000 0000                  		dc.w SME_vJmm3_36A-SME_vJmm3, SME_vJmm3_373-SME_vJmm3	
00025D5C 0000 0000                  		dc.w SME_vJmm3_37A-SME_vJmm3, SME_vJmm3_37F-SME_vJmm3	
00025D60 0000 0000                  		dc.w SME_vJmm3_386-SME_vJmm3, SME_vJmm3_38F-SME_vJmm3	
00025D64 0000 0000                  		dc.w SME_vJmm3_396-SME_vJmm3, SME_vJmm3_39B-SME_vJmm3	
00025D68 0000 0000                  		dc.w SME_vJmm3_3A2-SME_vJmm3, SME_vJmm3_3A9-SME_vJmm3	
00025D6C 0000 0000                  		dc.w SME_vJmm3_3B0-SME_vJmm3, SME_vJmm3_3C3-SME_vJmm3	
00025D70 0000 0000                  		dc.w SME_vJmm3_3D6-SME_vJmm3, SME_vJmm3_3DD-SME_vJmm3	
00025D74 0000 0000                  		dc.w SME_vJmm3_3E4-SME_vJmm3, SME_vJmm3_3EB-SME_vJmm3	
00025D78 0000 0000                  		dc.w SME_vJmm3_3F6-SME_vJmm3, SME_vJmm3_3FD-SME_vJmm3	
00025D7C 0000 0000                  		dc.w SME_vJmm3_404-SME_vJmm3, SME_vJmm3_40F-SME_vJmm3	
00025D80 0000 0000                  		dc.w SME_vJmm3_41A-SME_vJmm3, SME_vJmm3_423-SME_vJmm3	
00025D84 0000 0000                  		dc.w SME_vJmm3_42C-SME_vJmm3, SME_vJmm3_435-SME_vJmm3	
00025D88 0000 0000                  		dc.w SME_vJmm3_43E-SME_vJmm3, SME_vJmm3_441-SME_vJmm3	
00025D8C 0000 0000                  		dc.w SME_vJmm3_444-SME_vJmm3, SME_vJmm3_447-SME_vJmm3	
00025D90 0000 0000                  		dc.w SME_vJmm3_44A-SME_vJmm3, SME_vJmm3_44D-SME_vJmm3	
00025D94 0000 0000                  		dc.w SME_vJmm3_450-SME_vJmm3, SME_vJmm3_453-SME_vJmm3	
00025D98 0000 0000                  		dc.w SME_vJmm3_45A-SME_vJmm3, SME_vJmm3_45D-SME_vJmm3	
00025D9C 0000 0000                  		dc.w SME_vJmm3_462-SME_vJmm3, SME_vJmm3_465-SME_vJmm3	
00025DA0 0000 0000                  		dc.w SME_vJmm3_46A-SME_vJmm3, SME_vJmm3_46D-SME_vJmm3	
00025DA4 0000 0000                  		dc.w SME_vJmm3_476-SME_vJmm3, SME_vJmm3_485-SME_vJmm3	
00025DA8 0000 0000                  		dc.w SME_vJmm3_490-SME_vJmm3, SME_vJmm3_497-SME_vJmm3	
00025DAC 0000 0000                  		dc.w SME_vJmm3_49C-SME_vJmm3, SME_vJmm3_4A5-SME_vJmm3	
00025DB0 0000 0000                  		dc.w SME_vJmm3_4AE-SME_vJmm3, SME_vJmm3_4B7-SME_vJmm3	
00025DB4 0000 0000                  		dc.w SME_vJmm3_4CA-SME_vJmm3, SME_vJmm3_4D1-SME_vJmm3	
00025DB8 0000 0000                  		dc.w SME_vJmm3_4D8-SME_vJmm3, SME_vJmm3_4DD-SME_vJmm3	
00025DBC 0000 0000                  		dc.w SME_vJmm3_4DE-SME_vJmm3, SME_vJmm3_4EF-SME_vJmm3	
00025DC0 0000 0000                  		dc.w SME_vJmm3_4FE-SME_vJmm3, SME_vJmm3_507-SME_vJmm3	
00025DC4 0000 0000                  		dc.w SME_vJmm3_50E-SME_vJmm3, SME_vJmm3_515-SME_vJmm3	
00025DC8 0000 0000                  		dc.w SME_vJmm3_51C-SME_vJmm3, SME_vJmm3_51F-SME_vJmm3	
00025DCC 0000 0000                  		dc.w SME_vJmm3_526-SME_vJmm3, SME_vJmm3_52D-SME_vJmm3	
00025DD0 0000 0000                  		dc.w SME_vJmm3_534-SME_vJmm3, SME_vJmm3_53B-SME_vJmm3	
00025DD4 0000 0000                  		dc.w SME_vJmm3_544-SME_vJmm3, SME_vJmm3_555-SME_vJmm3	
00025DD8 0000 0000                  		dc.w SME_vJmm3_55E-SME_vJmm3, SME_vJmm3_567-SME_vJmm3	
00025DDC 0000 0000                  		dc.w SME_vJmm3_572-SME_vJmm3, SME_vJmm3_57D-SME_vJmm3	
00025DE0 0000 0000                  		dc.w SME_vJmm3_582-SME_vJmm3, SME_vJmm3_58D-SME_vJmm3	
00025DE4 0000 0000                  		dc.w SME_vJmm3_594-SME_vJmm3, SME_vJmm3_59F-SME_vJmm3	
00025DE8 0000 0000                  		dc.w SME_vJmm3_5A4-SME_vJmm3, SME_vJmm3_5AB-SME_vJmm3	
00025DEC 0000 0000                  		dc.w SME_vJmm3_5B2-SME_vJmm3, SME_vJmm3_5B9-SME_vJmm3	
00025DF0 0000 0000                  		dc.w SME_vJmm3_5BE-SME_vJmm3, SME_vJmm3_5C5-SME_vJmm3	
00025DF4 0000 0000                  		dc.w SME_vJmm3_5DC-SME_vJmm3, SME_vJmm3_5E9-SME_vJmm3	
00025DF8 0000 0000                  		dc.w SME_vJmm3_5F0-SME_vJmm3, SME_vJmm3_5FF-SME_vJmm3	
00025DFC 0000 0000                  		dc.w SME_vJmm3_604-SME_vJmm3, SME_vJmm3_60D-SME_vJmm3	
00025E00 0000 0000                  		dc.w SME_vJmm3_614-SME_vJmm3, SME_vJmm3_61B-SME_vJmm3	
00025E04 0000 0000                  		dc.w SME_vJmm3_624-SME_vJmm3, SME_vJmm3_627-SME_vJmm3	
00025E08 0000 0000                  		dc.w SME_vJmm3_62A-SME_vJmm3, SME_vJmm3_62D-SME_vJmm3	
00025E0C 0000                       		dc.w SME_vJmm3_630-SME_vJmm3	
00025E0E 00                         SME_vJmm3_142:	dc.b 0	
00025E0F 0420 0070 0320 0B20 0E     SME_vJmm3_143:	dc.b 4, $20, 0, $70, 3, $20, $B, $20, $E	
00025E18 0920 0020 0B20 0E10 0300+  SME_vJmm3_14C:	dc.b 9, $20, 0, $20, $B, $20, $E, $10, 3, 0, 8, 0, 9, 0, 6, 0, $A, $10, $1D	
00025E2B 0A20 0020 0B20 0E10 0300+  SME_vJmm3_15F:	dc.b $A, $20, 0, $20, $B, $20, $E, $10, 3, 0, 8, 0, 9, 0, $A, 0, $1F, 0, $26, 0, $32	
00025E40 04B6 C606 D200 0920 0E     SME_vJmm3_174:	dc.b 4, $B6, $C6, 6, $D2, 0, 9, $20, $E	
00025E49 0350 1150 1720 0E          SME_vJmm3_17D:	dc.b 3, $50, $11, $50, $17, $20, $E	
00025E50 0350 2050 1720 0E          SME_vJmm3_184:	dc.b 3, $50, $20, $50, $17, $20, $E	
00025E57 0450 2050 1710 2700 0E     SME_vJmm3_18B:	dc.b 4, $50, $20, $50, $17, $10, $27, 0, $E	
00025E60 02B6 D316 DF               SME_vJmm3_194:	dc.b 2, $B6, $D3, $16, $DF	
00025E65 0356 E126 E736 EA          SME_vJmm3_199:	dc.b 3, $56, $E1, $26, $E7, $36, $EA	
00025E6C 0356 E126 E736 EE          SME_vJmm3_1A0:	dc.b 3, $56, $E1, $26, $E7, $36, $EE	
00025E73 03B6 F226 FE27 01          SME_vJmm3_1A7:	dc.b 3, $B6, $F2, $26, $FE, $27, 1	
00025E7A 0420 0B20 0E87 0A07 13     SME_vJmm3_1AE:	dc.b 4, $20, $B, $20, $E, $87, $A, 7, $13	
00025E83 0380 2920 0B20 0E          SME_vJmm3_1B7:	dc.b 3, $80, $29, $20, $B, $20, $E	
00025E8A 0750 3A50 4010 4600 3530+  SME_vJmm3_1BE:	dc.b 7, $50, $3A, $50, $40, $10, $46, 0, $35, $30, $36, 0, $34, 0, $33	
00025E99 05B0 4800 3530 3600 3400+  SME_vJmm3_1CD:	dc.b 5, $B0, $48, 0, $35, $30, $36, 0, $34, 0, $33	
00025EA4 0380 5A57 0400 09          SME_vJmm3_1D8:	dc.b 3, $80, $5A, $57, 4, 0, 9	
00025EAB 03F7 1437 2407 28          SME_vJmm3_1DF:	dc.b 3, $F7, $14, $37, $24, 7, $28	
00025EB2 0450 5450 6350 6910 6F     SME_vJmm3_1E6:	dc.b 4, $50, $54, $50, $63, $50, $69, $10, $6F	
00025EBB 0250 54B0 71               SME_vJmm3_1EF:	dc.b 2, $50, $54, $B0, $71	
00025EC0 0357 0457 2907 2F          SME_vJmm3_1F4:	dc.b 3, $57, 4, $57, $29, 7, $2F	
00025EC7 0530 7D50 8100 3310 3430+  SME_vJmm3_1FB:	dc.b 5, $30, $7D, $50, $81, 0, $33, $10, $34, $30, $36	
00025ED2 0550 8750 8D20 9350 9600+  SME_vJmm3_206:	dc.b 5, $50, $87, $50, $8D, $20, $93, $50, $96, 0, $9C	
00025EDD 0650 8710 9D30 9F50 A330+  SME_vJmm3_211:	dc.b 6, $50, $87, $10, $9D, $30, $9F, $50, $A3, $30, $A9, 0, $AD	
00025EEA 0450 AE10 B470 B620 BE     SME_vJmm3_21E:	dc.b 4, $50, $AE, $10, $B4, $70, $B6, $20, $BE	
00025EF3 03F9 7539 8539 89          SME_vJmm3_227:	dc.b 3, $F9, $75, $39, $85, $39, $89	
00025EFA 0550 C130 C770 CB20 D310+  SME_vJmm3_22E:	dc.b 5, $50, $C1, $30, $C7, $70, $CB, $20, $D3, $10, $D6	
00025F05 0450 C110 D870 DA20 E2     SME_vJmm3_239:	dc.b 4, $50, $C1, $10, $D8, $70, $DA, $20, $E2	
00025F0E 03F9 8D39 9D39 A1          SME_vJmm3_242:	dc.b 3, $F9, $8D, $39, $9D, $39, $A1	
00025F15 0550 8710 9D00 9370 E520+  SME_vJmm3_249:	dc.b 5, $50, $87, $10, $9D, 0, $93, $70, $E5, $20, $ED	
00025F20 0470 F050 F810 FE51 00     SME_vJmm3_254:	dc.b 4, $70, $F0, $50, $F8, $10, $FE, $51, 0	
00025F29 0270 F0B1 06               SME_vJmm3_25D:	dc.b 2, $70, $F0, $B1, 6	
00025F2E 0281 1858 F9               SME_vJmm3_262:	dc.b 2, $81, $18, $58, $F9	
00025F33 0508 FF39 0009 04B9 0529+  SME_vJmm3_267:	dc.b 5, 8, $FF, $39, 0, 9, 4, $B9, 5, $29, $11	
00025F3E 0451 1251 2111 2751 29     SME_vJmm3_272:	dc.b 4, $51, $12, $51, $21, $11, $27, $51, $29	
00025F47 0251 12B1 2F               SME_vJmm3_27B:	dc.b 2, $51, $12, $B1, $2F	
00025F4C 0329 1479 1719 1F          SME_vJmm3_280:	dc.b 3, $29, $14, $79, $17, $19, $1F	
00025F53 0370 F001 0681 3B          SME_vJmm3_287:	dc.b 3, $70, $F0, 1, 6, $81, $3B	
00025F5A 0651 4411 4A11 4C81 4E01+  SME_vJmm3_28E:	dc.b 6, $51, $44, $11, $4A, $11, $4C, $81, $4E, 1, $57, 1, $58	
00025F67 0651 4421 5911 5C11 5E81+  SME_vJmm3_29B:	dc.b 6, $51, $44, $21, $59, $11, $5C, $11, $5E, $81, $60, 1, $57	
00025F74 0451 6911 6F81 7111 7A     SME_vJmm3_2A8:	dc.b 4, $51, $69, $11, $6F, $81, $71, $11, $7A	
00025F7D 03F9 A529 B529 B8          SME_vJmm3_2B1:	dc.b 3, $F9, $A5, $29, $B5, $29, $B8	
00025F84 0551 7C21 8211 8571 8721+  SME_vJmm3_2B8:	dc.b 5, $51, $7C, $21, $82, $11, $85, $71, $87, $21, $8F	
00025F8F 0451 7C11 9281 9411 9D     SME_vJmm3_2C3:	dc.b 4, $51, $7C, $11, $92, $81, $94, $11, $9D	
00025F98 03F9 BB29 CB19 CE          SME_vJmm3_2CC:	dc.b 3, $F9, $BB, $29, $CB, $19, $CE	
00025F9F 0551 4481 9F11 5E11 A801+  SME_vJmm3_2D3:	dc.b 5, $51, $44, $81, $9F, $11, $5E, $11, $A8, 1, $57	
00025FAA 0251 AAB1 B0               SME_vJmm3_2DE:	dc.b 2, $51, $AA, $B1, $B0	
00025FAF 02B7 3057 3C               SME_vJmm3_2E3:	dc.b 2, $B7, $30, $57, $3C	
00025FB4 0250 54B1 BC               SME_vJmm3_2E8:	dc.b 2, $50, $54, $B1, $BC	
00025FB9 0257 3CB7 42               SME_vJmm3_2ED:	dc.b 2, $57, $3C, $B7, $42	
00025FBE 0251 AAB1 C8               SME_vJmm3_2F2:	dc.b 2, $51, $AA, $B1, $C8	
00025FC3 0257 3CB7 4E               SME_vJmm3_2F7:	dc.b 2, $57, $3C, $B7, $4E	
00025FC8 0250 54B1 D4               SME_vJmm3_2FC:	dc.b 2, $50, $54, $B1, $D4	
00025FCD 0257 3CB7 5A               SME_vJmm3_301:	dc.b 2, $57, $3C, $B7, $5A	
00025FD2 0451 E011 E6B1 E801 F4     SME_vJmm3_306:	dc.b 4, $51, $E0, $11, $E6, $B1, $E8, 1, $F4	
00025FDB 03F8 7128 8128 84          SME_vJmm3_30F:	dc.b 3, $F8, $71, $28, $81, $28, $84	
00025FE2 0351 F511 FBB1 FD          SME_vJmm3_316:	dc.b 3, $51, $F5, $11, $FB, $B1, $FD	
00025FE9 03B8 BD78 C901 F4          SME_vJmm3_31D:	dc.b 3, $B8, $BD, $78, $C9, 1, $F4	
00025FF0 0451 E012 09B2 0B01 F4     SME_vJmm3_324:	dc.b 4, $51, $E0, $12, 9, $B2, $B, 1, $F4	
00025FF9 03B8 D178 DD01 F4          SME_vJmm3_32D:	dc.b 3, $B8, $D1, $78, $DD, 1, $F4	
00026000 0351 F511 FBB2 17          SME_vJmm3_334:	dc.b 3, $51, $F5, $11, $FB, $B2, $17	
00026007 0378 E5B8 ED01 F4          SME_vJmm3_33B:	dc.b 3, $78, $E5, $B8, $ED, 1, $F4	
0002600E 0252 23B2 29               SME_vJmm3_342:	dc.b 2, $52, $23, $B2, $29	
00026013 0258 87B8 8D               SME_vJmm3_347:	dc.b 2, $58, $87, $B8, $8D	
00026018 0251 12B2 35               SME_vJmm3_34C:	dc.b 2, $51, $12, $B2, $35	
0002601D 0258 87B8 99               SME_vJmm3_351:	dc.b 2, $58, $87, $B8, $99	
00026022 0252 23B2 41               SME_vJmm3_356:	dc.b 2, $52, $23, $B2, $41	
00026027 0258 87B8 A5               SME_vJmm3_35B:	dc.b 2, $58, $87, $B8, $A5	
0002602C 0251 12B2 4D               SME_vJmm3_360:	dc.b 2, $51, $12, $B2, $4D	
00026031 0258 87B8 B1               SME_vJmm3_365:	dc.b 2, $58, $87, $B8, $B1	
00026036 0452 5912 5FB2 6102 6D     SME_vJmm3_36A:	dc.b 4, $52, $59, $12, $5F, $B2, $61, 2, $6D	
0002603F 03B9 2129 2D59 30          SME_vJmm3_373:	dc.b 3, $B9, $21, $29, $2D, $59, $30	
00026046 0272 6EB2 76               SME_vJmm3_37A:	dc.b 2, $72, $6E, $B2, $76	
0002604B 03B9 3629 4259 45          SME_vJmm3_37F:	dc.b 3, $B9, $36, $29, $42, $59, $45	
00026052 0452 5912 82B2 8402 6D     SME_vJmm3_386:	dc.b 4, $52, $59, $12, $82, $B2, $84, 2, $6D	
0002605B 03B9 4B29 5759 5A          SME_vJmm3_38F:	dc.b 3, $B9, $4B, $29, $57, $59, $5A	
00026062 0272 6EB2 90               SME_vJmm3_396:	dc.b 2, $72, $6E, $B2, $90	
00026067 03B9 6029 6C59 6F          SME_vJmm3_39B:	dc.b 3, $B9, $60, $29, $6C, $59, $6F	
0002606E 03B4 EE24 FA54 FD          SME_vJmm3_3A2:	dc.b 3, $B4, $EE, $24, $FA, $54, $FD	
00026075 03B5 0325 0F55 12          SME_vJmm3_3A9:	dc.b 3, $B5, 3, $25, $F, $55, $12	
0002607C 0925 1E55 2105 3715 1815+  SME_vJmm3_3B0:	dc.b 9, $25, $1E, $55, $21, 5, $37, $15, $18, $15, $1A, $15, $1C, $14, $EE, $14, $F2, $14, $F6	
0002608F 0925 2D55 3005 3615 2715+  SME_vJmm3_3C3:	dc.b 9, $25, $2D, $55, $30, 5, $36, $15, $27, $15, $29, $15, $2B, $15, 3, $15, 7, $15, $B	
000260A2 03F6 6416 7436 76          SME_vJmm3_3D6:	dc.b 3, $F6, $64, $16, $74, $36, $76	
000260A9 03B6 8176 8D16 95          SME_vJmm3_3DD:	dc.b 3, $B6, $81, $76, $8D, $16, $95	
000260B0 03F5 3835 4805 4C          SME_vJmm3_3E4:	dc.b 3, $F5, $38, $35, $48, 5, $4C	
000260B7 05B5 4D35 5915 5D15 5F25+  SME_vJmm3_3EB:	dc.b 5, $B5, $4D, $35, $59, $15, $5D, $15, $5F, $25, $61	
000260C2 03B5 6425 7055 73          SME_vJmm3_3F6:	dc.b 3, $B5, $64, $25, $70, $55, $73	
000260C9 03B5 7925 8555 88          SME_vJmm3_3FD:	dc.b 3, $B5, $79, $25, $85, $55, $88	
000260D0 0555 9425 9A05 AD55 8E55+  SME_vJmm3_404:	dc.b 5, $55, $94, $25, $9A, 5, $AD, $55, $8E, $55, $64	
000260DB 0525 A355 A605 AC55 9D55+  SME_vJmm3_40F:	dc.b 5, $25, $A3, $55, $A6, 5, $AC, $55, $9D, $55, $79	
000260E6 04B5 BA25 C625 C925 CC     SME_vJmm3_41A:	dc.b 4, $B5, $BA, $25, $C6, $25, $C9, $25, $CC	
000260EF 04B5 AE25 CF25 D225 D5     SME_vJmm3_423:	dc.b 4, $B5, $AE, $25, $CF, $25, $D2, $25, $D5	
000260F8 04F5 D825 E805 EB05 EC     SME_vJmm3_42C:	dc.b 4, $F5, $D8, $25, $E8, 5, $EB, 5, $EC	
00026101 04F5 ED25 FD16 0016 02     SME_vJmm3_435:	dc.b 4, $F5, $ED, $25, $FD, $16, 0, $16, 2	
0002610A 01F2 9C                    SME_vJmm3_43E:	dc.b 1, $F2, $9C	
0002610D 01F6 2B                    SME_vJmm3_441:	dc.b 1, $F6, $2B	
00026110 01F2 AC                    SME_vJmm3_444:	dc.b 1, $F2, $AC	
00026113 01F6 3B                    SME_vJmm3_447:	dc.b 1, $F6, $3B	
00026116 01F2 BC                    SME_vJmm3_44A:	dc.b 1, $F2, $BC	
00026119 01F6 4B                    SME_vJmm3_44D:	dc.b 1, $F6, $4B	
0002611C 01F2 CC                    SME_vJmm3_450:	dc.b 1, $F2, $CC	
0002611F 0386 5B36 7A26 7E          SME_vJmm3_453:	dc.b 3, $86, $5B, $36, $7A, $26, $7E	
00026126 01F2 DC                    SME_vJmm3_45A:	dc.b 1, $F2, $DC	
00026129 02B2 EC22 F8               SME_vJmm3_45D:	dc.b 2, $B2, $EC, $22, $F8	
0002612E 01F2 FB                    SME_vJmm3_462:	dc.b 1, $F2, $FB	
00026131 02B3 0B23 17               SME_vJmm3_465:	dc.b 2, $B3, $B, $23, $17	
00026136 01F3 1A                    SME_vJmm3_46A:	dc.b 1, $F3, $1A	
00026139 0453 2AB3 3018 1508 17     SME_vJmm3_46D:	dc.b 4, $53, $2A, $B3, $30, $18, $15, 8, $17	
00026142 0753 3C73 4213 4A03 4C08+  SME_vJmm3_476:	dc.b 7, $53, $3C, $73, $42, $13, $4A, 3, $4C, 8, $1A, 8, $19, 8, $18	
00026151 0528 1BB8 1E28 2A18 2D08+  SME_vJmm3_485:	dc.b 5, $28, $1B, $B8, $1E, $28, $2A, $18, $2D, 8, $2F	
0002615C 03B8 3038 3C18 40          SME_vJmm3_490:	dc.b 3, $B8, $30, $38, $3C, $18, $40	
00026163 0220 0EF4 88               SME_vJmm3_497:	dc.b 2, $20, $E, $F4, $88	
00026168 0427 6627 6927 6C20 0E     SME_vJmm3_49C:	dc.b 4, $27, $66, $27, $69, $27, $6C, $20, $E	
00026171 0413 4D73 4F23 5703 5A     SME_vJmm3_4A5:	dc.b 4, $13, $4D, $73, $4F, $23, $57, 3, $5A	
0002617A 0423 5B23 5EF3 6108 42     SME_vJmm3_4AE:	dc.b 4, $23, $5B, $23, $5E, $F3, $61, 8, $42	
00026183 0928 5338 5678 4303 6408+  SME_vJmm3_4B7:	dc.b 9, $28, $53, $38, $56, $78, $43, 3, $64, 8, $4B, $28, $4F, 8, $4D, 8, $4E, 8, $52	
00026196 03B3 7173 7D00 71          SME_vJmm3_4CA:	dc.b 3, $B3, $71, $73, $7D, 0, $71	
0002619D 03F8 5B18 6B38 6D          SME_vJmm3_4D1:	dc.b 3, $F8, $5B, $18, $6B, $38, $6D	
000261A4 02F8 0138 11               SME_vJmm3_4D8:	dc.b 2, $F8, 1, $38, $11	
000261A9 00                         SME_vJmm3_4DD:	dc.b 0	
000261AA 0839 E219 EF29 E619 E919+  SME_vJmm3_4DE:	dc.b 8, $39, $E2, $19, $EF, $29, $E6, $19, $E9, $19, $EC, $59, $F7, $19, $FD, 9, $FF	
000261BB 0739 E219 EF29 E619 E919+  SME_vJmm3_4EF:	dc.b 7, $39, $E2, $19, $EF, $29, $E6, $19, $E9, $19, $EC, $5A, 0, $1A, 6	
000261CA 0439 E289 E619 EF59 F1     SME_vJmm3_4FE:	dc.b 4, $39, $E2, $89, $E6, $19, $EF, $59, $F1	
000261D3 0373 9D03 A533 A6          SME_vJmm3_507:	dc.b 3, $73, $9D, 3, $A5, $33, $A6	
000261DA 0373 8533 8D23 91          SME_vJmm3_50E:	dc.b 3, $73, $85, $33, $8D, $23, $91	
000261E1 0376 9736 9F06 A3          SME_vJmm3_515:	dc.b 3, $76, $97, $36, $9F, 6, $A3	
000261E8 0183 94                    SME_vJmm3_51C:	dc.b 1, $83, $94	
000261EB 0376 9736 9F06 A3          SME_vJmm3_51F:	dc.b 3, $76, $97, $36, $9F, 6, $A3	
000261F2 0373 8533 8D23 91          SME_vJmm3_526:	dc.b 3, $73, $85, $33, $8D, $23, $91	
000261F9 0373 9D03 A533 A6          SME_vJmm3_52D:	dc.b 3, $73, $9D, 3, $A5, $33, $A6	
00026200 0373 AA33 B223 B6          SME_vJmm3_534:	dc.b 3, $73, $AA, $33, $B2, $23, $B6	
00026207 04B3 B903 C603 C503 C7     SME_vJmm3_53B:	dc.b 4, $B3, $B9, 3, $C6, 3, $C5, 3, $C7	
00026210 0856 1113 C303 C503 C613+  SME_vJmm3_544:	dc.b 8, $56, $11, $13, $C3, 3, $C5, 3, $C6, $13, $BF, 6, 5, 6, 6, 3, $C7	
00026221 04B3 DA33 E603 EA03 EB     SME_vJmm3_555:	dc.b 4, $B3, $DA, $33, $E6, 3, $EA, 3, $EB	
0002622A 04B3 C833 D403 D803 D9     SME_vJmm3_55E:	dc.b 4, $B3, $C8, $33, $D4, 3, $D8, 3, $D9	
00026233 0583 EC13 F553 F713 FD03+  SME_vJmm3_567:	dc.b 5, $83, $EC, $13, $F5, $53, $F7, $13, $FD, 3, $FF	
0002623E 0584 0014 0953 F713 FD03+  SME_vJmm3_572:	dc.b 5, $84, 0, $14, 9, $53, $F7, $13, $FD, 3, $FF	
00026249 0284 0B74 14               SME_vJmm3_57D:	dc.b 2, $84, $B, $74, $14	
0002624E 0534 9824 9C34 9F34 A304+  SME_vJmm3_582:	dc.b 5, $34, $98, $24, $9C, $34, $9F, $34, $A3, 4, $A7	
00026259 0384 1C24 2514 28          SME_vJmm3_58D:	dc.b 3, $84, $1C, $24, $25, $14, $28	
00026260 0504 A834 A934 AD34 B124+  SME_vJmm3_594:	dc.b 5, 4, $A8, $34, $A9, $34, $AD, $34, $B1, $24, $B5	
0002626B 0284 2A74 33               SME_vJmm3_59F:	dc.b 2, $84, $2A, $74, $33	
00026270 03B7 DF17 EB27 ED          SME_vJmm3_5A4:	dc.b 3, $B7, $DF, $17, $EB, $27, $ED	
00026277 0384 1C24 3B14 3E          SME_vJmm3_5AB:	dc.b 3, $84, $1C, $24, $3B, $14, $3E	
0002627E 03B7 F017 FC27 FE          SME_vJmm3_5B2:	dc.b 3, $B7, $F0, $17, $FC, $27, $FE	
00026285 0254 40B4 46               SME_vJmm3_5B9:	dc.b 2, $54, $40, $B4, $46	
0002628A 0374 5214 5AB4 5C          SME_vJmm3_5BE:	dc.b 3, $74, $52, $14, $5A, $B4, $5C	
00026291 0B74 6814 7004 7924 7504+  SME_vJmm3_5C5:	dc.b $B, $74, $68, $14, $70, 4, $79, $24, $75, 4, $78, 4, $73, 4, $72, 4, $74, 4, $85, 4, $87, 4, $83	
000262A8 0674 7A14 7054 8204 7924+  SME_vJmm3_5DC:	dc.b 6, $74, $7A, $14, $70, $54, $82, 4, $79, $24, $75, 4, $78	
000262B5 0354 C9B4 CF10 6D          SME_vJmm3_5E9:	dc.b 3, $54, $C9, $B4, $CF, $10, $6D	
000262BC 0714 C334 C514 BE04 BD14+  SME_vJmm3_5F0:	dc.b 7, $14, $C3, $34, $C5, $14, $BE, 4, $BD, $14, $B8, $24, $BA, $24, $C0	
000262CB 02F4 DB24 EB               SME_vJmm3_5FF:	dc.b 2, $F4, $DB, $24, $EB	
000262D0 04B6 A416 B026 B206 B1     SME_vJmm3_604:	dc.b 4, $B6, $A4, $16, $B0, $26, $B2, 6, $B1	
000262D9 03B6 B516 C126 C3          SME_vJmm3_60D:	dc.b 3, $B6, $B5, $16, $C1, $26, $C3	
000262E0 03B9 D129 DD19 E0          SME_vJmm3_614:	dc.b 3, $B9, $D1, $29, $DD, $19, $E0	
000262E7 0427 6F37 7237 7627 7A     SME_vJmm3_61B:	dc.b 4, $27, $6F, $37, $72, $37, $76, $27, $7A	
000262F0 01F7 7E                    SME_vJmm3_624:	dc.b 1, $F7, $7E	
000262F3 01F7 8E                    SME_vJmm3_627:	dc.b 1, $F7, $8E	
000262F6 01F7 9E                    SME_vJmm3_62A:	dc.b 1, $F7, $9E	
000262F9 01F7 AE                    SME_vJmm3_62D:	dc.b 1, $F7, $AE	
000262FC 01F7 BE                    SME_vJmm3_630:	dc.b 1, $F7, $BE	
00026300 00                         		even
00026300 00                         		even
00026300                            
00026300                            ; ---------------------------------------------------------------------------
00026300                            ; Uncompressed graphics	- Sonic
00026300                            ; ---------------------------------------------------------------------------
00026300                            Art_Sonic:	incbin	"artunc\Sonic.bin"	; Sonic
0003C900                            		even
0003C900                            ; ---------------------------------------------------------------------------
0003C900                            ; Compressed graphics - various
0003C900                            ; ---------------------------------------------------------------------------
0003C900                            Unc_GShield:	incbin	"artunc\Gold Shield.bin"
0003CC60                            		even
0003CC60                            Unc_RedShield:	incbin	"artunc\Red Shield.bin"
0003CFC0                            		even
0003CFC0                            Unc_SpShield:	incbin	"artunc\Gray Shield.bin"
0003D320                            		even
0003D320                            Unc_Shield:	incbin	"artunc\Shield.bin"
0003D680                            		even
0003D680                            Unc_Stars:	incbin	"artunc\Invincibility Stars.bin"
0003DB00                            		even
0003DB00                            
0003DB00                            Map_SSWalls:	include	"_maps\SS Walls.asm"
0003DB00                            ; ---------------------------------------------------------------------------
0003DB00                            ; Sprite mappings - walls of the special stage
0003DB00                            ; ---------------------------------------------------------------------------
0003DB00                            Map_SSWalls_internal:
0003DB00 0000                       		dc.w byte_2C584-Map_SSWalls_internal
0003DB02 0000                       		dc.w byte_2C58A-Map_SSWalls_internal
0003DB04 0000                       		dc.w byte_2C590-Map_SSWalls_internal
0003DB06 0000                       		dc.w byte_2C596-Map_SSWalls_internal
0003DB08 0000                       		dc.w byte_2C59C-Map_SSWalls_internal
0003DB0A 0000                       		dc.w byte_2C5A2-Map_SSWalls_internal
0003DB0C 0000                       		dc.w byte_2C5A8-Map_SSWalls_internal
0003DB0E 0000                       		dc.w byte_2C5AE-Map_SSWalls_internal
0003DB10 0000                       		dc.w byte_2C5B4-Map_SSWalls_internal
0003DB12 0000                       		dc.w byte_2C5BA-Map_SSWalls_internal
0003DB14 0000                       		dc.w byte_2C5C0-Map_SSWalls_internal
0003DB16 0000                       		dc.w byte_2C5C6-Map_SSWalls_internal
0003DB18 0000                       		dc.w byte_2C5CC-Map_SSWalls_internal
0003DB1A 0000                       		dc.w byte_2C5D2-Map_SSWalls_internal
0003DB1C 0000                       		dc.w byte_2C5D8-Map_SSWalls_internal
0003DB1E 0000                       		dc.w byte_2C5DE-Map_SSWalls_internal
0003DB20 01                         byte_2C584:	dc.b 1
0003DB21 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0003DB26 01                         byte_2C58A:	dc.b 1
0003DB27 F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
0003DB2C 01                         byte_2C590:	dc.b 1
0003DB2D F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
0003DB32 01                         byte_2C596:	dc.b 1
0003DB33 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
0003DB38 01                         byte_2C59C:	dc.b 1
0003DB39 F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
0003DB3E 01                         byte_2C5A2:	dc.b 1
0003DB3F F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
0003DB44 01                         byte_2C5A8:	dc.b 1
0003DB45 F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
0003DB4A 01                         byte_2C5AE:	dc.b 1
0003DB4B F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
0003DB50 01                         byte_2C5B4:	dc.b 1
0003DB51 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
0003DB56 01                         byte_2C5BA:	dc.b 1
0003DB57 F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
0003DB5C 01                         byte_2C5C0:	dc.b 1
0003DB5D F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
0003DB62 01                         byte_2C5C6:	dc.b 1
0003DB63 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
0003DB68 01                         byte_2C5CC:	dc.b 1
0003DB69 F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
0003DB6E 01                         byte_2C5D2:	dc.b 1
0003DB6F F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
0003DB74 01                         byte_2C5D8:	dc.b 1
0003DB75 F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
0003DB7A 01                         byte_2C5DE:	dc.b 1
0003DB7B F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
0003DB80                            		even
0003DB80                            		even
0003DB80                            
0003DB80                            ; ---------------------------------------------------------------------------
0003DB80                            ; Compressed graphics - special stage
0003DB80                            ; ---------------------------------------------------------------------------
0003DB80                            Nem_SSWalls:	incbin	"artnem\Special Walls.bin" ; special stage walls
0003E4B8                            		even
0003E4B8                            Eni_SSBg1:	incbin	"tilemaps\SS Background 1.bin" ; special stage background (mappings)
0003E5EC                            		even
0003E5EC                            Nem_SSBgFish:	incbin	"artnem\Special Birds & Fish.bin" ; special stage birds and fish background
0003F27C                            		even
0003F27C                            Eni_SSBg2:	incbin	"tilemaps\SS Background 2.bin" ; special stage background (mappings)
0003F57C                            		even
0003F57C                            Nem_SSBgCloud:	incbin	"artnem\Special Clouds.bin" ; special stage clouds background
0003FA70                            		even
0003FA70                            Nem_SSGOAL:	incbin	"artnem\Special GOAL.bin" ; special stage GOAL block
0003FB5E                            		even
0003FB5E                            Nem_SSRBlock:	incbin	"artnem\Special R.bin"	; special stage R block
0003FC2E                            		even
0003FC2E                            Nem_SS1UpBlock:	incbin	"artnem\Special 1UP.bin" ; special stage 1UP block
0003FD24                            		even
0003FD24                            Nem_SSEmStars:	incbin	"artnem\Special Emerald Twinkle.bin" ; special stage stars from a collected emerald
0003FD82                            		even
0003FD82                            Nem_SSRedWhite:	incbin	"artnem\Special Red-White.bin" ; special stage red/white block
0003FE14                            		even
0003FE14                            Nem_SSZone1:	incbin	"artnem\Special ZONE1.bin" ; special stage ZONE1 block
0003FED6                            		even
0003FED6                            Nem_SSZone2:	incbin	"artnem\Special ZONE2.bin" ; ZONE2 block
0003FFA4                            		even
0003FFA4                            Nem_SSZone3:	incbin	"artnem\Special ZONE3.bin" ; ZONE3 block
00040070                            		even
00040070                            Nem_SSZone4:	incbin	"artnem\Special ZONE4.bin" ; ZONE4 block
00040138                            		even
00040138                            Nem_SSZone5:	incbin	"artnem\Special ZONE5.bin" ; ZONE5 block
00040202                            		even
00040202                            Nem_SSZone6:	incbin	"artnem\Special ZONE6.bin" ; ZONE6 block
000402D2                            		even
000402D2                            Nem_SSUpDown:	incbin	"artnem\Special UP-DOWN.bin" ; special stage UP/DOWN block
000404C6                            		even
000404C6                            Nem_SSEmerald:	incbin	"artnem\Special Emeralds.bin" ; special stage chaos emeralds
0004062E                            		even
0004062E                            Nem_SSGhost:	incbin	"artnem\Special Ghost.bin" ; special stage ghost block
000406DE                            		even
000406DE                            Nem_SSWBlock:	incbin	"artnem\Special W.bin"	; special stage W block
000407B8                            		even
000407B8                            Nem_SSGlass:	incbin	"artnem\Special Glass.bin" ; special stage destroyable glass block
0004083C                            		even
0004083C                            Nem_ResultEm:	incbin	"artnem\Special Result Emeralds.bin" ; chaos emeralds on special stage results screen
000409BA                            		even
000409BA                            ; ---------------------------------------------------------------------------
000409BA                            ; Compressed graphics - GHZ stuff
000409BA                            ; ---------------------------------------------------------------------------
000409BA                            Nem_Stalk:	incbin	"artnem\GHZ Flower Stalk.bin"
00040A1C                            		even
00040A1C                            Nem_Swing:	incbin	"artnem\GHZ Swinging Platform.bin"
00040B36                            		even
00040B36                            Nem_Bridge:	incbin	"artnem\GHZ Bridge.bin"
00040C54                            		even
00040C54                            Nem_GhzUnkBlock:incbin	"artnem\Unused - GHZ Block.bin"
00040C9C                            		even
00040C9C                            Nem_Ball:	incbin	"artnem\GHZ Giant Ball.bin"
00040E3A                            		even
00040E3A                            Nem_Spikes:	incbin	"artnem\Spikes.bin"
00040EB6                            		even
00040EB6                            Nem_GhzLog:	incbin	"artnem\Unused - GHZ Log.bin"
000410CA                            		even
000410CA                            Nem_SpikePole:	incbin	"artnem\GHZ Spiked Log.bin"
000411F6                            		even
000411F6                            Nem_PplRock:	incbin	"artnem\GHZ Purple Rock.bin"
0004134A                            		even
0004134A                            Nem_GhzWall1:	incbin	"artnem\GHZ Breakable Wall.bin"
000413FA                            		even
000413FA                            Nem_GhzWall2:	incbin	"artnem\GHZ Edge Wall.bin"
0004145A                            		even
0004145A                            ; ---------------------------------------------------------------------------
0004145A                            ; Compressed graphics - LZ stuff
0004145A                            ; ---------------------------------------------------------------------------
0004145A                            Nem_Water:	incbin	"artnem\LZ Water Surface.bin"
00041532                            		even
00041532                            Nem_Splash:	incbin	"artnem\LZ Water & Splashes.bin"
00041D26                            		even
00041D26                            Nem_LzSpikeBall:incbin	"artnem\LZ Spiked Ball & Chain.bin"
00041EB8 00                         		even
00041EB8                            Nem_FlapDoor:	incbin	"artnem\LZ Flapping Door.bin"
00042022                            		even
00042022                            Nem_Bubbles:	incbin	"artnem\LZ Bubbles & Countdown.bin"
00042662 00                         		even
00042662                            Nem_LzBlock3:	incbin	"artnem\LZ 32x16 Block.bin"
00042704 00                         		even
00042704                            Nem_LzDoor1:	incbin	"artnem\LZ Vertical Door.bin"
00042788                            		even
00042788                            Nem_Harpoon:	incbin	"artnem\LZ Harpoon.bin"
000428E4                            		even
000428E4                            Nem_LzPole:	incbin	"artnem\LZ Breakable Pole.bin"
0004296A                            		even
0004296A                            Nem_LzDoor2:	incbin	"artnem\LZ Horizontal Door.bin"
00042AD8                            		even
00042AD8                            Nem_LzWheel:	incbin	"artnem\LZ Wheel.bin"
00042FBA                            		even
00042FBA                            Nem_Gargoyle:	incbin	"artnem\LZ Gargoyle & Fireball.bin"
0004312A                            		even
0004312A                            Nem_LzBlock2:	incbin	"artnem\LZ Blocks.bin"
000433E2                            		even
000433E2                            Nem_LzPlatfm:	incbin	"artnem\LZ Rising Platform.bin"
00043528                            		even
00043528                            Nem_Cork:	incbin	"artnem\LZ Cork.bin"
00043652                            		even
00043652                            Nem_LzBlock1:	incbin	"artnem\LZ 32x32 Block.bin"
000437D8 00                         		even
000437D8                            ; ---------------------------------------------------------------------------
000437D8                            ; Compressed graphics - MZ stuff
000437D8                            ; ---------------------------------------------------------------------------
000437D8                            Nem_MzMetal:	incbin	"artnem\MZ Metal Blocks.bin"
00043A66                            		even
00043A66                            Nem_MzSwitch:	incbin	"artnem\MZ Switch.bin"
00043B24                            		even
00043B24                            Nem_MzGlass:	incbin	"artnem\MZ Green Glass Block.bin"
00043BFC                            		even
00043BFC                            Nem_UnkGrass:	incbin	"artnem\Unused - Grass.bin"
00043C50                            		even
00043C50                            Nem_MzFire:	incbin	"artnem\Fireballs.bin"
00043F6E 00                         		even
00043F6E                            Nem_Lava:	incbin	"artnem\MZ Lava.bin"
00044884                            		even
00044884                            Nem_MzBlock:	incbin	"artnem\MZ Green Pushable Block.bin"
00044A1A                            		even
00044A1A                            Nem_MzUnkBlock:	incbin	"artnem\Unused - MZ Background.bin"
00044AA2                            		even
00044AA2                            ; ---------------------------------------------------------------------------
00044AA2                            ; Compressed graphics - SLZ stuff
00044AA2                            ; ---------------------------------------------------------------------------
00044AA2                            Nem_Seesaw:	incbin	"artnem\SLZ Seesaw.bin"
00044CDE                            		even
00044CDE                            Nem_SlzSpike:	incbin	"artnem\SLZ Little Spikeball.bin"
00044E24                            		even
00044E24                            Nem_Fan:	incbin	"artnem\SLZ Fan.bin"
00045068                            		even
00045068                            Nem_SlzWall:	incbin	"artnem\SLZ Breakable Wall.bin"
00045104 00                         		even
00045104                            Nem_Pylon:	incbin	"artnem\SLZ Pylon.bin"
000451E6                            		even
000451E6                            Nem_SlzSwing:	incbin	"artnem\SLZ Swinging Platform.bin"
000453C8                            		even
000453C8                            Nem_SlzBlock:	incbin	"artnem\SLZ 32x32 Block.bin"
000454D4                            		even
000454D4                            Nem_SlzCannon:	incbin	"artnem\SLZ Cannon.bin"
00045578                            		even
00045578                            ; ---------------------------------------------------------------------------
00045578                            ; Compressed graphics - SYZ stuff
00045578                            ; ---------------------------------------------------------------------------
00045578                            Nem_Bumper:	incbin	"artnem\SYZ Bumper.bin"
00045708                            		even
00045708                            Nem_SyzSpike2:	incbin	"artnem\SYZ Small Spikeball.bin"
0004576A                            		even
0004576A                            Nem_LzSwitch:	incbin	"artnem\Switch.bin"
0004583A 00                         		even
0004583A                            Nem_SyzSpike1:	incbin	"artnem\SYZ Large Spikeball.bin"
00045AC8                            		even
00045AC8                            ; ---------------------------------------------------------------------------
00045AC8                            ; Compressed graphics - SBZ stuff
00045AC8                            ; ---------------------------------------------------------------------------
00045AC8                            Nem_SbzWheel1:	incbin	"artnem\SBZ Running Disc.bin"
00045B1C                            		even
00045B1C                            Nem_SbzWheel2:	incbin	"artnem\SBZ Junction Wheel.bin"
00045DB8                            		even
00045DB8                            Nem_Cutter:	incbin	"artnem\SBZ Pizza Cutter.bin"
00045FA8                            		even
00045FA8                            Nem_Stomper:	incbin	"artnem\SBZ Stomper.bin"
00046146                            		even
00046146                            Nem_SpinPform:	incbin	"artnem\SBZ Spinning Platform.bin"
00046476                            		even
00046476                            Nem_TrapDoor:	incbin	"artnem\SBZ Trapdoor.bin"
00046654                            		even
00046654                            Nem_SbzFloor:	incbin	"artnem\SBZ Collapsing Floor.bin"
000466AC                            		even
000466AC                            Nem_Electric:	incbin	"artnem\SBZ Electrocuter.bin"
0004685E 00                         		even
0004685E                            Nem_SbzBlock:	incbin	"artnem\SBZ Vanishing Block.bin"
0004695C                            		even
0004695C                            Nem_FlamePipe:	incbin	"artnem\SBZ Flaming Pipe.bin"
00046AEA                            		even
00046AEA                            Nem_SbzDoor1:	incbin	"artnem\SBZ Small Vertical Door.bin"
00046B84                            		even
00046B84                            Nem_SlideFloor:	incbin	"artnem\SBZ Sliding Floor Trap.bin"
00046BDC                            		even
00046BDC                            Nem_SbzDoor2:	incbin	"artnem\SBZ Large Horizontal Door.bin"
00046CD8                            		even
00046CD8                            Nem_Girder:	incbin	"artnem\SBZ Crushing Girder.bin"
00046DEE                            		even
00046DEE                            ; ---------------------------------------------------------------------------
00046DEE                            ; Compressed graphics - enemies
00046DEE                            ; ---------------------------------------------------------------------------
00046DEE                            Nem_BallHog:	incbin	"artnem\Enemy Ball Hog.bin"
00047236 00                         		even
00047236                            Nem_Crabmeat:	incbin	"artnem\Enemy Crabmeat.bin"
00047726 00                         		even
00047726                            Nem_Mozzietron:	incbin	"artnem\Enemy Mozzietron.bin"
00047A0A 00                         		even
00047A0A                            Nem_Buzz:	incbin	"artnem\Enemy Buzz Bomber.bin"
00047D7E 00                         		even
00047D7E                            Nem_UnkExplode:	incbin	"artnem\Unused - Explosion.bin"
00047F66                            		even
00047F66                            Nem_Burrobot:	incbin	"artnem\Enemy Burrobot.bin"
00048694 00                         		even
00048694                            Nem_Chopper:	incbin	"artnem\Enemy Chopper.bin"
0004891C 00                         		even
0004891C                            Nem_Jaws:	incbin	"artnem\Enemy Jaws.bin"
00048BB8 00                         		even
00048BB8                            Nem_Roller:	incbin	"artnem\Enemy Roller.bin"
0004918C                            		even
0004918C                            Nem_Motobug:	incbin	"artnem\Enemy Motobug.bin"
0004941E                            		even
0004941E                            Nem_Newtron:	incbin	"artnem\Enemy Newtron.bin"
00049A68 00                         		even
00049A68                            Nem_Yadrin:	incbin	"artnem\Enemy Yadrin.bin"
00049EA4                            		even
00049EA4                            Nem_Basaran:	incbin	"artnem\Enemy Basaran.bin"
0004A1B2 00                         		even
0004A1B2                            Nem_Splats:	incbin	"artnem\Enemy Splats.bin"
0004A412                            		even
0004A412                            Nem_Bomb:	incbin	"artnem\Enemy Bomb.bin"
0004A710                            		even
0004A710                            Nem_Orbinaut:	incbin	"artnem\Enemy Orbinaut.bin"
0004A93C 00                         		even
0004A93C                            Nem_Cater:	incbin	"artnem\Enemy Caterkiller.bin"
0004AACA                            		even
0004AACA                            ; ---------------------------------------------------------------------------
0004AACA                            ; Compressed graphics - various
0004AACA                            ; ---------------------------------------------------------------------------
0004AACA                            Nem_TitleCard:	incbin	"artnem\Title Cards.bin"
0004B118 00                         		even
0004B118                            Nem_Hud:	incbin	"artnem\HUD.bin"	; HUD (rings, time, score)
0004B290 00                         		even
0004B290                            Nem_Lives:	incbin	"artnem\HUD - Life Counter Icon.bin"
0004B3B4                            		even
0004B3B4                            Nem_Ring:	incbin	"artnem\Rings.bin"
0004B508 00                         		even
0004B508                            Nem_Monitors:	incbin	"artnem\Monitors.bin"
0004BA02 00                         		even
0004BA02                            Nem_Explode:	incbin	"artnem\Explosion.bin"
0004C076                            		even
0004C076                            Nem_Points:	incbin	"artnem\Points.bin"	; points from destroyed enemy or object
0004C110 00                         		even
0004C110                            Nem_GameOver:	incbin	"artnem\Game Over.bin"	; game over / time over
0004C2A2                            		even
0004C2A2                            Nem_HSpring:	incbin	"artnem\Spring Horizontal.bin"
0004C3C0 00                         		even
0004C3C0                            Nem_VSpring:	incbin	"artnem\Spring Vertical.bin"
0004C4AC                            		even
0004C4AC                            Nem_SignPost:	incbin	"artnem\Signpost.bin"	; end of level signpost
0004CA24 00                         		even
0004CA24                            Nem_Lamp:	incbin	"artnem\Lamppost.bin"
0004CB0E                            		even
0004CB0E                            Nem_BigFlash:	incbin	"artnem\Giant Ring Flash.bin"
0004CC82                            		even
0004CC82                            Nem_Bonus:	incbin	"artnem\Hidden Bonuses.bin" ; hidden bonuses at end of a level
0004D00A 00                         		even
0004D00A                            ; ---------------------------------------------------------------------------
0004D00A                            ; Compressed graphics - continue screen
0004D00A                            ; ---------------------------------------------------------------------------
0004D00A                            Nem_ContSonic:	incbin	"artnem\Continue Screen Sonic.bin"
0004D2BA                            		even
0004D2BA                            Nem_MiniSonic:	incbin	"artnem\Continue Screen Stuff.bin"
0004D4F4                            		even
0004D4F4                            ; ---------------------------------------------------------------------------
0004D4F4                            ; Compressed graphics - animals
0004D4F4                            ; ---------------------------------------------------------------------------
0004D4F4                            Nem_Rabbit:	incbin	"artnem\Animal Rabbit.bin"
0004D64C                            		even
0004D64C                            Nem_Chicken:	incbin	"artnem\Animal Chicken.bin"
0004D7A8                            		even
0004D7A8                            Nem_BlackBird:	incbin	"artnem\Animal Blackbird.bin"
0004D924                            		even
0004D924                            Nem_Seal:	incbin	"artnem\Animal Seal.bin"
0004DA40                            		even
0004DA40                            Nem_Pig:	incbin	"artnem\Animal Pig.bin"
0004DBBA                            		even
0004DBBA                            Nem_Flicky:	incbin	"artnem\Animal Flicky.bin"
0004DCF4                            		even
0004DCF4                            Nem_Squirrel:	incbin	"artnem\Animal Squirrel.bin"
0004DE50                            		even
0004DE50                            ; ---------------------------------------------------------------------------
0004DE50                            ; Compressed graphics - primary patterns and block mappings
0004DE50                            ; ---------------------------------------------------------------------------
0004DE50                            Blk16_GHZ:	incbin	"map16\GHZ.bin"
0004E852                            		even
0004E852                            Nem_GHZ_1st:	incbin	"artnem\8x8 - GHZ1.bin"	; GHZ primary patterns
000500FA                            		even
000500FA                            Nem_GHZ_2nd:	incbin	"artnem\8x8 - GHZ2.bin"	; GHZ secondary patterns
0005168A                            		even
0005168A                            Blk256_GHZ:	incbin	"map256\GHZ.bin"
00053A74                            		even
00053A74                            Blk16_TS:	incbin	"map16\TS.bin"
00053CF8                            		even
00053CF8                            Nem_TS_1st:	incbin	"artnem\8x8 - TS1.bin"	; GHZ primary patterns
00054E36                            		even
00054E36                            Blk256_TS:	incbin	"map256\TS.bin"
000559E4                            		even
000559E4                            Blk16_LZ:	incbin	"map16\LZ.bin"
00056C60                            		even
00056C60                            Nem_LZ:		incbin	"artnem\8x8 - LZ.bin"	; LZ primary patterns
0005A132                            		even
0005A132                            Blk256_LZ:	incbin	"map256\LZ.bin"
0005D5F0                            		even
0005D5F0                            Blk16_MZ:	incbin	"map16\MZ.bin"
0005DDF8                            		even
0005DDF8                            Nem_MZ:		incbin	"artnem\8x8 - MZ.bin"	; MZ primary patterns
000607F0                            		even
000607F0                            		incbin	"map256\MZ (JP1).bin"
000626CE                            		even
000626CE                            Blk16_SLZ:	incbin	"map16\SLZ.bin"
00062D50                            		even
00062D50                            Nem_SLZ:	incbin	"artnem\8x8 - SLZ.bin"	; SLZ primary patterns
000667BA                            		even
000667BA                            Blk256_SLZ:	incbin	"map256\SLZ.bin"
00068BC4                            		even
00068BC4                            Blk16_SYZ:	incbin	"map16\SYZ.bin"
0006974A                            		even
0006974A                            Nem_SYZ:	incbin	"artnem\8x8 - SYZ.bin"	; SYZ primary patterns
0006CB3A                            		even
0006CB3A                            Blk256_SYZ:	incbin	"map256\SYZ.bin"
0006DEEA                            		even
0006DEEA                            Blk16_SBZ:	incbin	"map16\SBZ.bin"
0006EAE4                            		even
0006EAE4                            Nem_SBZ:	incbin	"artnem\8x8 - SBZ.bin"	; SBZ primary patterns
00071326                            		even
00071326                            		incbin	"map256\SBZ (JP1).bin"
00071EB2                            		even
00071EB2                            ; ---------------------------------------------------------------------------
00071EB2                            ; Compressed graphics - bosses and ending sequence
00071EB2                            ; ---------------------------------------------------------------------------
00071EB2                            Nem_Eggman:	incbin	"artnem\Boss - Main.bin"
0007272E 00                         		even
0007272E                            Nem_Weapons:	incbin	"artnem\Boss - Weapons.bin"
00072A18                            		even
00072A18                            Nem_Prison:	incbin	"artnem\Prison Capsule.bin"
0007329C                            		even
0007329C                            Nem_Sbz2Eggman:	incbin	"artnem\Boss - Eggman in SBZ2 & FZ.bin"
00073AC8                            		even
00073AC8                            Nem_FzBoss:	incbin	"artnem\Boss - Final Zone.bin"
00074296 00                         		even
00074296                            Nem_FzEggman:	incbin	"artnem\Boss - Eggman after FZ Fight.bin"
00074816                            		even
00074816                            Nem_Exhaust:	incbin	"artnem\Boss - Exhaust Flame.bin"
00074936                            		even
00074936                            Nem_EndEm:	incbin	"artnem\Ending - Emeralds.bin"
00074B3E 00                         		even
00074B3E                            Nem_EndSonic:	incbin	"artnem\Ending - Sonic.bin"
00075D1C                            		even
00075D1C                            Nem_TryAgain:	incbin	"artnem\Ending - Try Again.bin"
00076660                            		even
00076660                            		even
00076660                            Kos_EndFlowers:	incbin	"artkos\Flowers at Ending.bin" ; ending sequence animated flowers
00076BF0                            		even
00076BF0                            Nem_EndFlower:	incbin	"artnem\Ending - Flowers.bin"
00076E78                            		even
00076E78                            Nem_CreditText:	incbin	"artnem\Ending - Credits.bin"
00077476                            		even
00077476                            Nem_EndStH:	incbin	"artnem\Ending - StH Logo.bin"
000776FE                            		even
000776FE                            
000776FE FFFF FFFF FFFF FFFF FFFF+  		dcb.b $40,$FF
0007773E                            ; ---------------------------------------------------------------------------
0007773E                            ; Collision data
0007773E                            ; ---------------------------------------------------------------------------
0007773E                            AngleMap:	incbin	"collide\Angle Map.bin"
0007783E                            		even
0007783E                            CollArray1:	incbin	"collide\Collision Array (Normal).bin"
0007883E                            		even
0007883E                            CollArray2:	incbin	"collide\Collision Array (Rotated).bin"
0007983E                            		even
0007983E                            Col_GHZ:	incbin	"collide\GHZ.bin"	; GHZ index
000799FC 00                         		even
000799FC                            Col_LZ:		incbin	"collide\LZ.bin"	; LZ index
00079CBA                            		even
00079CBA                            Col_MZ:		incbin	"collide\MZ.bin"	; MZ index
00079E34 00                         		even
00079E34                            Col_SLZ:	incbin	"collide\SLZ.bin"	; SLZ index
0007A028                            		even
0007A028                            Col_SYZ:	incbin	"collide\SYZ.bin"	; SYZ index
0007A214 00                         		even
0007A214                            Col_SBZ:	incbin	"collide\SBZ.bin"	; SBZ index
0007A3E4 00                         		even
0007A3E4                            ; ---------------------------------------------------------------------------
0007A3E4                            ; Special Stage layouts
0007A3E4                            ; ---------------------------------------------------------------------------
0007A3E4                            SS_1:		incbin	"sslayout\1.bin"
0007A65E                            		even
0007A65E                            SS_2:		incbin	"sslayout\2.bin"
0007AA70                            		even
0007AA70                            SS_3:		incbin	"sslayout\3.bin"
0007ADCC                            		even
0007ADCC                            SS_4:		incbin	"sslayout\4.bin"
0007B2A6                            		even
0007B2A6                            	SS_5:		incbin	"sslayout\5 (JP1).bin"
0007B756                            			even
0007B756                            	SS_6:		incbin	"sslayout\6 (JP1).bin"
0007BA48                            		even
0007BA48                            ; ---------------------------------------------------------------------------
0007BA48                            ; Animated uncompressed graphics
0007BA48                            ; ---------------------------------------------------------------------------
0007BA48                            Art_GhzWater:	incbin	"artunc\GHZ Waterfall.bin"
0007BC48                            		even
0007BC48                            Art_GhzFlower1:	incbin	"artunc\GHZ Flower Large.bin"
0007C048                            		even
0007C048                            Art_GhzFlower2:	incbin	"artunc\GHZ Flower Small.bin"
0007C4C8                            		even
0007C4C8                            Art_MzLava1:	incbin	"artunc\MZ Lava Surface.bin"
0007C7C8                            		even
0007C7C8                            Art_MzLava2:	incbin	"artunc\MZ Lava.bin"
0007CDC8                            		even
0007CDC8                            Art_MzTorch:	incbin	"artunc\MZ Background Torch.bin"
0007D0C8                            		even
0007D0C8                            Art_SbzSmoke:	incbin	"artunc\SBZ Background Smoke.bin"
0007DB48                            		even
0007DB48                            
0007DB48                            ; ---------------------------------------------------------------------------
0007DB48                            ; Level	layout index
0007DB48                            ; ---------------------------------------------------------------------------
0007DB48                            Level_Index:
0007DB48                            		; GHZ
0007DB48 0000 0000 0000             		dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
0007DB4E 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
0007DB54 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
0007DB5A 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
0007DB60                            		; LZ
0007DB60 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
0007DB66 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
0007DB6C 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
0007DB72 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
0007DB78                            		; MZ
0007DB78 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
0007DB7E 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
0007DB84 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
0007DB8A 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
0007DB90                            		; SLZ
0007DB90 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0007DB96 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0007DB9C 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0007DBA2 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
0007DBA8                            		; SYZ
0007DBA8 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
0007DBAE 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
0007DBB4 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
0007DBBA 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
0007DBC0                            		; SBZ
0007DBC0 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
0007DBC6 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
0007DBCC 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
0007DBD2 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
0007DBD8                            		; Ending
0007DBD8 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0007DBDE 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0007DBE4 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0007DBEA 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0007DBF0                            
0007DBF0                            Level_GHZ1:	incbin	"levels\ghz1.bin"
0007DE22                            		even
0007DE22 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
0007DE26                            Level_GHZ2:	incbin	"levels\ghz2.bin"
0007DF48                            		even
0007DF48 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
0007DF4C                            Level_GHZ3:	incbin	"levels\ghz3.bin"
0007E1CE                            		even
0007E1CE                            Level_GHZbg:	incbin	"levels\ghzbg.bin"
0007E210                            		even
0007E210 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
0007E214 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
0007E218                            
0007E218                            Level_LZ1:	incbin	"levels\lz1.bin"
0007E2DA                            		even
0007E2DA                            Level_LZbg:	incbin	"levels\lzbg.bin"
0007E3DC                            		even
0007E3DC 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
0007E3E0                            Level_LZ2:	incbin	"levels\lz2.bin"
0007E47A                            		even
0007E47A 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
0007E47E                            Level_LZ3:	incbin	"levels\lz3.bin"
0007E598                            		even
0007E598 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
0007E59C                            Level_SBZ3:	incbin	"levels\sbz3.bin"
0007E656                            		even
0007E656 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
0007E65A                            
0007E65A                            Level_MZ1:	incbin	"levels\mz1.bin"
0007E74C                            		even
0007E74C                            Level_MZ1bg:	incbin	"levels\mz1bg.bin"
0007E86E                            		even
0007E86E                            Level_MZ2:	incbin	"levels\mz2.bin"
0007E960                            		even
0007E960                            Level_MZ2bg:	incbin	"levels\mz2bg.bin"
0007EA82                            		even
0007EA82 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
0007EA86                            Level_MZ3:	incbin	"levels\mz3.bin"
0007EAF8                            		even
0007EAF8                            Level_MZ3bg:	incbin	"levels\mz3bg.bin"
0007EC1A                            		even
0007EC1A 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
0007EC1E 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
0007EC22                            
0007EC22                            Level_SLZ1:	incbin	"levels\slz1.bin"
0007ED34                            		even
0007ED34                            Level_SLZbg:	incbin	"levels\slzbg.bin"
0007EDAE                            		even
0007EDAE                            Level_SLZ2:	incbin	"levels\slz2.bin"
0007EE9E                            		even
0007EE9E                            Level_SLZ3:	incbin	"levels\slz3.bin"
0007EFB8                            		even
0007EFB8 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
0007EFBC                            
0007EFBC                            Level_SYZ1:	incbin	"levels\syz1.bin"
0007F0C0                            		even
0007F0C0                            		incbin	"levels\syzbg (JP1).bin"
0007F0FA                            		even
0007F0FA 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
0007F0FE                            Level_SYZ2:	incbin	"levels\syz2.bin"
0007F202                            		even
0007F202 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
0007F206                            Level_SYZ3:	incbin	"levels\syz3.bin"
0007F360 00                         		even
0007F360 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
0007F364 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
0007F368                            
0007F368                            Level_SBZ1:	incbin	"levels\sbz1.bin"
0007F48A                            		even
0007F48A                            Level_SBZ1bg:	incbin	"levels\sbz1bg.bin"
0007F4C8                            		even
0007F4C8                            Level_SBZ2:	incbin	"levels\sbz2.bin"
0007F60A                            		even
0007F60A                            Level_SBZ2bg:	incbin	"levels\sbz2bg.bin"
0007F774                            		even
0007F774 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
0007F778 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
0007F77C                            Level_End:	incbin	"levels\ending.bin"
0007F7AC 00                         		even
0007F7AC 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
0007F7B0                            
0007F7B0                            
0007F7B0                            Art_BigRing:	incbin	"artunc\Giant Ring.bin"
000803F0                            		even
000803F0                            
00080400                            
00080400                            ; ---------------------------------------------------------------------------
00080400                            ; Sprite locations index
00080400                            ; ---------------------------------------------------------------------------
00080400                            ObjPos_Index:
00080400                            		; GHZ
00080400 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080404 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080408 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008040C 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080410                            		; LZ
00080410 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080414 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080418 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008041C 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080420                            		; MZ
00080420 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080424 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080428 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008042C 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080430                            		; SLZ
00080430 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080434 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080438 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008043C 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080440                            		; SYZ
00080440 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080444 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080448 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008044C 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080450                            		; SBZ
00080450 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080454 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080458 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008045C 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080460                            		; Ending
00080460 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080464 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080468 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008046C 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080470                            		; --- Put extra object data here. ---
00080470                            ObjPosLZPlatform_Index:
00080470 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
00080474 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
00080478 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
0008047C 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
00080480                            ObjPosSBZPlatform_Index:
00080480 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
00080484 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
00080488 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
0008048C 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
00080490 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
00080496                            ObjPos_GHZ1:	incbin	"objpos\ghz1.bin"
00080AF6                            		even
00080AF6                            ObjPos_GHZ2:	incbin	"objpos\ghz2.bin"
00080F46                            		even
00080F46                            		incbin	"objpos\ghz3 (JP1).bin"
00081156                            		even
00081156                            		incbin	"objpos\lz1 (JP1).bin"
0008118C                            		even
0008118C                            ObjPos_LZ2:	incbin	"objpos\lz2.bin"
000814CE                            		even
000814CE                            		incbin	"objpos\lz3 (JP1).bin"
00081A92                            		even
00081A92                            ObjPos_SBZ3:	incbin	"objpos\sbz3.bin"
00082122                            		even
00082122                            ObjPos_LZ1pf1:	incbin	"objpos\lz1pf1.bin"
00082154                            		even
00082154                            ObjPos_LZ1pf2:	incbin	"objpos\lz1pf2.bin"
00082186                            		even
00082186                            ObjPos_LZ2pf1:	incbin	"objpos\lz2pf1.bin"
000821B8                            		even
000821B8                            ObjPos_LZ2pf2:	incbin	"objpos\lz2pf2.bin"
000821EA                            		even
000821EA                            ObjPos_LZ3pf1:	incbin	"objpos\lz3pf1.bin"
00082234                            		even
00082234                            ObjPos_LZ3pf2:	incbin	"objpos\lz3pf2.bin"
00082272                            		even
00082272                            		incbin	"objpos\mz1 (JP1).bin"
00082854                            		even
00082854                            ObjPos_MZ2:	incbin	"objpos\mz2.bin"
00082B60                            		even
00082B60                            ObjPos_MZ3:	incbin	"objpos\mz3.bin"
00082D46                            		even
00082D46                            ObjPos_SLZ1:	incbin	"objpos\slz1.bin"
0008327A                            		even
0008327A                            ObjPos_SLZ2:	incbin	"objpos\slz2.bin"
000836E8                            		even
000836E8                            ObjPos_SLZ3:	incbin	"objpos\slz3.bin"
00083CCA                            		even
00083CCA                            ObjPos_SYZ1:	incbin	"objpos\syz1.bin"
00083D24                            		even
00083D24                            ObjPos_SYZ2:	incbin	"objpos\syz2.bin"
00083D4E                            		even
00083D4E                            		incbin	"objpos\syz3 (JP1).bin"
00083D7E                            		even
00083D7E                            		incbin	"objpos\sbz1 (JP1).bin"
00083DC6                            		even
00083DC6                            ObjPos_SBZ2:	incbin	"objpos\sbz2.bin"
00083DF0                            		even
00083DF0                            ObjPos_FZ:	incbin	"objpos\fz.bin"
00083E14                            		even
00083E14                            ObjPos_SBZ1pf1:	incbin	"objpos\sbz1pf1.bin"
00083E46                            		even
00083E46                            ObjPos_SBZ1pf2:	incbin	"objpos\sbz1pf2.bin"
00083E78                            		even
00083E78                            ObjPos_SBZ1pf3:	incbin	"objpos\sbz1pf3.bin"
00083EAA                            		even
00083EAA                            ObjPos_SBZ1pf4:	incbin	"objpos\sbz1pf4.bin"
00083EDC                            		even
00083EDC                            ObjPos_SBZ1pf5:	incbin	"objpos\sbz1pf5.bin"
00083F0E                            		even
00083F0E                            ObjPos_SBZ1pf6:	incbin	"objpos\sbz1pf6.bin"
00083F46                            		even
00083F46                            ObjPos_End:	incbin	"objpos\ending.bin"
000840A2                            		even
000840A2 FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
000840A8                            
000840A8                            		dcb.b $63C,$FF
000846E4                            		;dcb.b ($10000-(*%$10000))-(EndOfRom-SoundDriver),$FF
000846E4                            
000846E4                            SoundDriver:	include "s1.sounddriver.asm"
000846E4                            ; ---------------------------------------------------------------------------
000846E4                            ; Modified (early?) SMPS 68k Type 1b
000846E4                            ; ---------------------------------------------------------------------------
000846E4                            ; Go_SoundTypes:
000846E4 0000 0000                  Go_SoundPriorities:	dc.l SoundPriorities
000846E8                            ; Go_SoundD0:
000846E8 0000 0000                  Go_SpecSoundIndex:	dc.l SpecSoundIndex
000846EC 0000 0000                  Go_MusicIndex:		dc.l MusicIndex
000846F0 0000 0000                  Go_SoundIndex:		dc.l SoundIndex
000846F4                            ; off_719A0:
000846F4 0000 0000                  Go_SpeedUpIndex:	dc.l SpeedUpIndex
000846F8 0000 0000                  Go_PSGIndex:		dc.l PSG_Index
000846FC                            ; ---------------------------------------------------------------------------
000846FC                            ; PSG instruments used in music
000846FC                            ; ---------------------------------------------------------------------------
000846FC                            PSG_Index:
000846FC 0000 0000 0000 0000 0000+  		dc.l PSG1, PSG2, PSG3
00084708 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
00084714 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
00084720                            PSG1:		incbin	"sound/psg/psg1.bin"
00084737                            PSG2:		incbin	"sound/psg/psg2.bin"
0008473E                            PSG3:		incbin	"sound/psg/psg3.bin"
0008474F                            PSG4:		incbin	"sound/psg/psg4.bin"
0008475A                            PSG6:		incbin	"sound/psg/psg6.bin"
00084769                            PSG5:		incbin	"sound/psg/psg5.bin"
00084793                            PSG7:		incbin	"sound/psg/psg7.bin"
000847AF                            PSG8:		incbin	"sound/psg/psg8.bin"
000847D7                            PSG9:		incbin	"sound/psg/psg9.bin"
000847E8                            ; ---------------------------------------------------------------------------
000847E8                            ; New tempos for songs during speed shoes
000847E8                            ; ---------------------------------------------------------------------------
000847E8                            ; DANGER! several songs will use the first few bytes of MusicIndex as their main
000847E8                            ; tempos while speed shoes are active. If you don't want that, you should add
000847E8                            ; their "correct" sped-up main tempos to the list.
000847E8                            ; byte_71A94:
000847E8                            SpeedUpIndex:
000847E8 07                         		dc.b 7		; GHZ
000847E9 72                         		dc.b $72	; LZ
000847EA 73                         		dc.b $73	; MZ
000847EB 26                         		dc.b $26	; SLZ
000847EC 15                         		dc.b $15	; SYZ
000847ED 08                         		dc.b 8		; SBZ
000847EE FF                         		dc.b $FF	; Invincibility
000847EF 05                         		dc.b 5		; Extra Life
000847F0                            		;dc.b ?		; Special Stage
000847F0                            		;dc.b ?		; Title Screen
000847F0                            		;dc.b ?		; Ending
000847F0                            		;dc.b ?		; Boss
000847F0                            		;dc.b ?		; FZ
000847F0                            		;dc.b ?		; Sonic Got Through
000847F0                            		;dc.b ?		; Game Over
000847F0                            		;dc.b ?		; Continue Screen
000847F0                            		;dc.b ?		; Credits
000847F0                            		;dc.b ?		; Drowning
000847F0                            		;dc.b ?		; Get Emerald
000847F0                            
000847F0                            ; ---------------------------------------------------------------------------
000847F0                            ; Music	Pointers
000847F0                            ; ---------------------------------------------------------------------------
000847F0                            MusicIndex:
000847F0 0000 0000                  ptr_mus81:	dc.l Music81
000847F4 0000 0000                  ptr_mus82:	dc.l Music82
000847F8 0000 0000                  ptr_mus83:	dc.l Music83
000847FC 0000 0000                  ptr_mus84:	dc.l Music84
00084800 0000 0000                  ptr_mus85:	dc.l Music85
00084804 0000 0000                  ptr_mus86:	dc.l Music86
00084808 0000 0000                  ptr_mus87:	dc.l Music87
0008480C 0000 0000                  ptr_mus88:	dc.l Music88
00084810 0000 0000                  ptr_mus89:	dc.l Music89
00084814 0000 0000                  ptr_mus8A:	dc.l Music8A
00084818 0000 0000                  ptr_mus8B:	dc.l Music8B
0008481C 0000 0000                  ptr_mus8C:	dc.l Music8C
00084820 0000 0000                  ptr_mus8D:	dc.l Music8D
00084824 0000 0000                  ptr_mus8E:	dc.l Music8E
00084828 0000 0000                  ptr_mus8F:	dc.l Music8F
0008482C 0000 0000                  ptr_mus90:	dc.l Music90
00084830 0000 0000                  ptr_mus91:	dc.l Music91
00084834 0000 0000                  ptr_mus92:	dc.l Music92
00084838 0000 0000                  ptr_mus93:	dc.l Music93
0008483C 0000 0000                  ptr_mus94:	dc.l Music94
00084840 0000 0000                  ptr_mus95:	dc.l Music95
00084844 0000 0000                  ptr_mus96:	dc.l Music96
00084848 0000 0000                  ptr_mus97:	dc.l Music97
0008484C 0000 0000                  ptr_mus98:	dc.l Music98
00084850                            ptr_musend
00084850                            ; ---------------------------------------------------------------------------
00084850                            ; Priority of sound. New music or SFX must have a priority higher than or equal
00084850                            ; to what is stored in v_sndprio or it won't play. If bit 7 of new priority is
00084850                            ; set ($80 and up), the new music or SFX will not set its priority -- meaning
00084850                            ; any music or SFX can override it (as long as it can override whatever was
00084850                            ; playing before). Usually, SFX will only override SFX, special SFX ($D0-$DF)
00084850                            ; will only override special SFX and music will only override music.
00084850                            ; ---------------------------------------------------------------------------
00084850                            ; SoundTypes:
00084850                            SoundPriorities:
00084850 9090 9090 9090 9090 9090+  		dc.b     $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $81
0008485F 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $90
0008486F 8070 7070 7070 7070 7070+  		dc.b $80,$70,$70,$70,$70,$70,$70,$70,$70,$70,$68,$70,$70,$70,$60,$70	; $A0
0008487F 7060 7060 7070 7070 7070+  		dc.b $70,$60,$70,$60,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$7F	; $B0
0008488F 6070 7070 7070 7070 7070+  		dc.b $60,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70	; $C0
0008489F 8080 8080 8080 8080 8080+  		dc.b $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80	; $D0
000848AF 9090 9090 90               		dc.b $90,$90,$90,$90,$90                                            	; $E0
000848B4                            
000848B4                            ; ---------------------------------------------------------------------------
000848B4                            ; Subroutine to update music more than once per frame
000848B4                            ; (Called by horizontal & vert. interrupts)
000848B4                            ; ---------------------------------------------------------------------------
000848B4                            
000848B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000848B4                            
000848B4                            ; sub_71B4C:
000848B4                            UpdateMusic:
000848B4 33FC 0100 00A1 1100        		stopZ80
000848BC 4E71                       		nop	
000848BE 4E71                       		nop	
000848C0 4E71                       		nop	
000848C2                            ; loc_71B5A:
000848C2                            @updateloop:
000848C2 0839 0000 00A1 1100        		btst	#0,(z80_bus_request).l		; Is the z80 busy?
000848CA 66F6                       		bne.s	@updateloop			; If so, wait
000848CC                            
000848CC 0839 0007 00A0 1FFD        		btst	#7,(z80_dac_status).l		; Is DAC accepting new samples?
000848D4 6700                       		beq.s	@driverinput			; Branch if yes
000848D6 33FC 0000 00A1 1100        		startZ80
000848DE 4E71                       		nop	
000848E0 4E71                       		nop	
000848E2 4E71                       		nop	
000848E4 4E71                       		nop	
000848E6 4E71                       		nop	
000848E8 60CA                       		bra.s	UpdateMusic
000848EA                            ; ===========================================================================
000848EA                            ; loc_71B82:
000848EA                            @driverinput:
000848EA 4DF9 00FF F000             		lea	(v_snddriver_ram&$FFFFFF).l,a6
000848F0 422E 000E                  		clr.b	f_voice_selector(a6)
000848F4 4A2E 0003                  		tst.b	f_pausemusic(a6)		; is music paused?
000848F8 6600 0000                  		bne.w	PauseMusic			; if yes, branch
000848FC 532E 0001                  		subq.b	#1,v_main_tempo_timeout(a6)	; Has main tempo timer expired?
00084900 6600                       		bne.s	@skipdelay
00084902 4EBA 0000                  		jsr	TempoWait(pc)
00084906                            ; loc_71B9E:
00084906                            @skipdelay:
00084906 102E 0004                  		move.b	v_fadeout_counter(a6),d0
0008490A 6700                       		beq.s	@skipfadeout
0008490C 4EBA 0000                  		jsr	DoFadeOut(pc)
00084910                            ; loc_71BA8:
00084910                            @skipfadeout:
00084910 4A2E 0024                  		tst.b	f_fadein_flag(a6)
00084914 6700                       		beq.s	@skipfadein
00084916 4EBA 0000                  		jsr	DoFadeIn(pc)
0008491A                            ; loc_71BB2:
0008491A                            @skipfadein:
0008491A                            		; DANGER! The following line only checks v_soundqueue0 and v_soundqueue1, breaking v_soundqueue2.
0008491A 4A6E 000A                  		tst.w	v_soundqueue0(a6)	; is a music or sound queued for played?
0008491E 6700                       		beq.s	@nosndinput		; if not, branch
00084920 4EBA 0000                  		jsr	CycleSoundQueue(pc)
00084924                            ; loc_71BBC:
00084924                            @nosndinput:
00084924 0C2E 0080 0009             		cmpi.b	#$80,v_sound_id(a6)	; is song queue set for silence (empty)?
0008492A 6700                       		beq.s	@nonewsound		; If yes, branch
0008492C 4EBA 0000                  		jsr	PlaySoundID(pc)
00084930                            ; loc_71BC8:
00084930                            @nonewsound:
00084930 4A38 C901                  		tst.b	($FFFFC901).w
00084934 6700                       		beq.s	@cont
00084936 5338 C901                  		subq.b	#1,($FFFFC901).w
0008493A                            		
0008493A                            @cont:
0008493A 4BEE 0040                  		lea	v_music_dac_track(a6),a5
0008493E 4A15                       		tst.b	(a5)			; Is DAC track playing? (TrackPlaybackControl)
00084940 6A00                       		bpl.s	@dacdone		; Branch if not
00084942 4EBA 0000                  		jsr	DACUpdateTrack(pc)
00084946                            ; loc_71BD4:
00084946                            @dacdone:
00084946 422E 0008                  		clr.b	f_updating_dac(a6)
0008494A 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
0008494C                            ; loc_71BDA:
0008494C                            @bgmfmloop:
0008494C DAFC 0030                  		adda.w	#TrackSz,a5
00084950 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00084952 6A00                       		bpl.s	@bgmfmnext		; Branch if not
00084954 4EBA 0000                  		jsr	FMUpdateTrack(pc)
00084958                            ; loc_71BE6:
00084958                            @bgmfmnext:
00084958 51CF FFF2                  		dbf	d7,@bgmfmloop
0008495C                            
0008495C 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7 ; 3 PSG tracks
0008495E                            ; loc_71BEC:
0008495E                            @bgmpsgloop:
0008495E DAFC 0030                  		adda.w	#TrackSz,a5
00084962 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00084964 6A00                       		bpl.s	@bgmpsgnext		; Branch if not
00084966 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
0008496A                            ; loc_71BF8:
0008496A                            @bgmpsgnext:
0008496A 51CF FFF2                  		dbf	d7,@bgmpsgloop
0008496E                            
0008496E 1D7C 0080 000E             		move.b	#$80,f_voice_selector(a6)			; Now at SFX tracks
00084974 7E02                       		moveq	#((v_sfx_fm_tracks_end-v_sfx_fm_tracks)/TrackSz)-1,d7	; 3 FM tracks (SFX)
00084976                            ; loc_71C04:
00084976                            @sfxfmloop:
00084976 DAFC 0030                  		adda.w	#TrackSz,a5
0008497A 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
0008497C 6A00                       		bpl.s	@sfxfmnext		; Branch if not
0008497E 4EBA 0000                  		jsr	FMUpdateTrack(pc)
00084982                            ; loc_71C10:
00084982                            @sfxfmnext:
00084982 51CF FFF2                  		dbf	d7,@sfxfmloop
00084986                            
00084986 7E02                       		moveq	#((v_sfx_psg_tracks_end-v_sfx_psg_tracks)/TrackSz)-1,d7 ; 3 PSG tracks (SFX)
00084988                            ; loc_71C16:
00084988                            @sfxpsgloop:
00084988 DAFC 0030                  		adda.w	#TrackSz,a5
0008498C 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
0008498E 6A00                       		bpl.s	@sfxpsgnext		; Branch of not
00084990 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
00084994                            ; loc_71C22:
00084994                            @sfxpsgnext:
00084994 51CF FFF2                  		dbf	d7,@sfxpsgloop
00084998                            		
00084998 1D7C 0040 000E             		move.b	#$40,f_voice_selector(a6) ; Now at special SFX tracks
0008499E DAFC 0030                  		adda.w	#TrackSz,a5
000849A2 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000849A4 6A00                       		bpl.s	@specfmdone		; Branch if not
000849A6 4EBA 0000                  		jsr	FMUpdateTrack(pc)
000849AA                            ; loc_71C38:
000849AA                            @specfmdone:
000849AA DAFC 0030                  		adda.w	#TrackSz,a5
000849AE 4A15                       		tst.b	(a5)			; Is track playing (TrackPlaybackControl)
000849B0 6A00                       		bpl.s	DoStartZ80		; Branch if not
000849B2 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
000849B6                            ; loc_71C44:
000849B6                            DoStartZ80:
000849B6 33FC 0000 00A1 1100        		startZ80
000849BE 0838 0006 FFF8             		btst #6,(v_megadrive).w ; is Megadrive PAL?
000849C4 6700                       		beq.s @end ; if not, branch
000849C6 0C38 0005 F015             		cmpi.b #$5,(v_palmuscounter).w ; 5th frame?
000849CC 6600                       		bne.s @end ; if not, branch
000849CE 11FC 0000 F015             		move.b #$0,(v_palmuscounter).w ; reset counter
000849D4 6000 FEDE                  		bra.w UpdateMusic ; run sound driver again
000849D8                            
000849D8                            	@end:
000849D8 5238 F015                  		addq.b #$1,(v_palmuscounter).w ; add 1 to frame count
000849DC 4E75                       		rts
000849DE                            ; End of function UpdateMusic
000849DE                            
000849DE                            
000849DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000849DE                            
000849DE                            ; sub_71C4E: UpdateDAC:
000849DE                            DACUpdateTrack:
000849DE 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5)	; Has DAC sample timeout expired?
000849E2 6600                       		bne.s	@locret				; Return if not
000849E4 1D7C 0080 0008             		move.b	#$80,f_updating_dac(a6)		; Set flag to indicate this is the DAC
000849EA                            ;DACDoNext:
000849EA 286D 0004                  		movea.l	TrackDataPointer(a5),a4	; DAC track data pointer
000849EE                            ; loc_71C5E:
000849EE                            @sampleloop:
000849EE 7A00                       		moveq	#0,d5
000849F0 1A1C                       		move.b	(a4)+,d5	; Get next SMPS unit
000849F2 0C05 00E0                  		cmpi.b	#$E0,d5		; Is it a coord. flag?
000849F6 6500                       		blo.s	@notcoord	; Branch if not
000849F8 4EBA 0000                  		jsr	CoordFlag(pc)
000849FC 60F0                       		bra.s	@sampleloop
000849FE                            ; ===========================================================================
000849FE                            ; loc_71C6E:
000849FE                            @notcoord:
000849FE 4A05                       		tst.b	d5			; Is it a sample?
00084A00 6A00                       		bpl.s	@gotduration		; Branch if not (duration)
00084A02 1B45 0010                  		move.b	d5,TrackSavedDAC(a5)	; Store new sample
00084A06 1A1C                       		move.b	(a4)+,d5		; Get another byte
00084A08 6A00                       		bpl.s	@gotduration		; Branch if it is a duration
00084A0A 534C                       		subq.w	#1,a4			; Put byte back
00084A0C 1B6D 000F 000E             		move.b	TrackSavedDuration(a5),TrackDurationTimeout(a5) ; Use last duration
00084A12 6000                       		bra.s	@gotsampleduration
00084A14                            ; ===========================================================================
00084A14                            ; loc_71C84:
00084A14                            @gotduration:
00084A14 4EBA 0000                  		jsr	SetDuration(pc)
00084A18                            ; loc_71C88:
00084A18                            @gotsampleduration:
00084A18 2B4C 0004                  		move.l	a4,TrackDataPointer(a5) ; Save pointer
00084A1C 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00084A20 6600                       		bne.s	@locret			; Return if yes
00084A22 7000                       		moveq	#0,d0
00084A24 102D 0010                  		move.b	TrackSavedDAC(a5),d0	; Get sample
00084A28 0C00 0080                  		cmpi.b	#$80,d0			; Is it a rest?
00084A2C 6700                       		beq.s	@locret			; Return if yes
00084A2E 0800 0003                  		btst	#3,d0			; Is bit 3 set (samples between $88-$8F)?
00084A32 6600                       		bne.s	@timpani		; Various timpani
00084A34 13C0 00A0 1FFF             		move.b	d0,(z80_dac_sample).l
00084A3A                            ; locret_71CAA:
00084A3A                            @locret:
00084A3A 4E75                       		rts	
00084A3C                            ; ===========================================================================
00084A3C                            ; loc_71CAC:
00084A3C                            @timpani:
00084A3C 0400 0088                  		subi.b	#$88,d0		; Convert into an index
00084A40 103B 0000                  		move.b	DAC_sample_rate(pc,d0.w),d0
00084A44                            		; Warning: this affects the raw pitch of sample $83, meaning it will
00084A44                            		; use this value from then on.
00084A44 13C0 00A0 00EA             		move.b	d0,(z80_dac3_pitch).l
00084A4A 13FC 0083 00A0 1FFF        		move.b	#$83,(z80_dac_sample).l	; Use timpani
00084A52 4E75                       		rts	
00084A54                            ; End of function DACUpdateTrack
00084A54                            
00084A54                            ; ===========================================================================
00084A54                            ; Note: this only defines rates for samples $88-$8D, meaning $8E-$8F are invalid.
00084A54                            ; Also, $8C-$8D are so slow you may want to skip them.
00084A54                            ; byte_71CC4:
00084A54 171A 2122 FFFF             DAC_sample_rate: dc.b $17, $1A, $21, $22, $FF, $FF
00084A5A                            
00084A5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084A5A                            
00084A5A                            ; sub_71CCA:
00084A5A                            FMUpdateTrack:
00084A5A 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5) ; Update duration timeout
00084A5E 6600                       		bne.s	@notegoing		; Branch if it hasn't expired
00084A60 0895 0004                  		bclr	#4,(a5)			; Clear 'do not attack next note' bit (TrackPlaybackControl)
00084A64 4EBA 0000                  		jsr	FMDoNext(pc)
00084A68 4EBA 0000                  		jsr	FMPrepareNote(pc)
00084A6C 6000 0000                  		bra.w	FMNoteOn
00084A70                            ; ===========================================================================
00084A70                            ; loc_71CE0:
00084A70                            @notegoing:
00084A70 4EBA 0000                  		jsr	NoteTimeoutUpdate(pc)
00084A74 4EBA 0000                  		jsr	DoModulation(pc)
00084A78 6000 0000                  		bra.w	FMUpdateFreq
00084A7C                            ; End of function FMUpdateTrack
00084A7C                            
00084A7C                            
00084A7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084A7C                            
00084A7C                            ; sub_71CEC:
00084A7C                            FMDoNext:
00084A7C 286D 0004                  		movea.l	TrackDataPointer(a5),a4 ; Track data pointer
00084A80 0895 0001                  		bclr	#1,(a5)			; Clear 'track at rest' bit (TrackPlaybackControl)
00084A84                            ; loc_71CF4:
00084A84                            @noteloop:
00084A84 7A00                       		moveq	#0,d5
00084A86 1A1C                       		move.b	(a4)+,d5	; Get byte from track
00084A88 0C05 00E0                  		cmpi.b	#$E0,d5		; Is this a coord. flag?
00084A8C 6500                       		blo.s	@gotnote	; Branch if not
00084A8E 4EBA 0000                  		jsr	CoordFlag(pc)
00084A92 60F0                       		bra.s	@noteloop
00084A94                            ; ===========================================================================
00084A94                            ; loc_71D04:
00084A94                            @gotnote:
00084A94 4EBA 0000                  		jsr	FMNoteOff(pc)
00084A98 4A05                       		tst.b	d5		; Is this a note?
00084A9A 6A00                       		bpl.s	@gotduration	; Branch if not
00084A9C 4EBA 0000                  		jsr	FMSetFreq(pc)
00084AA0 1A1C                       		move.b	(a4)+,d5	; Get another byte
00084AA2 6A00                       		bpl.s	@gotduration	; Branch if it is a duration
00084AA4 534C                       		subq.w	#1,a4		; Otherwise, put it back
00084AA6 6000 0000                  		bra.w	FinishTrackUpdate
00084AAA                            ; ===========================================================================
00084AAA                            ; loc_71D1A:
00084AAA                            @gotduration:
00084AAA 4EBA 0000                  		jsr	SetDuration(pc)
00084AAE 6000 0000                  		bra.w	FinishTrackUpdate
00084AB2                            ; End of function FMDoNext
00084AB2                            
00084AB2                            
00084AB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084AB2                            
00084AB2                            ; sub_71D22:
00084AB2                            FMSetFreq:
00084AB2 0405 0080                  		subi.b	#$80,d5			; Make it a zero-based index
00084AB6 6700                       		beq.s	TrackSetRest
00084AB8 DA2D 0008                  		add.b	TrackTranspose(a5),d5	; Add track transposition
00084ABC 0245 007F                  		andi.w	#$7F,d5			; Clear high byte and sign bit
00084AC0 E34D                       		lsl.w	#1,d5
00084AC2 41FA 0000                  		lea	FMFrequencies(pc),a0
00084AC6 3C30 5000                  		move.w	(a0,d5.w),d6
00084ACA 3B46 0010                  		move.w	d6,TrackFreq(a5)	; Store new frequency
00084ACE 4E75                       		rts	
00084AD0                            ; End of function FMSetFreq
00084AD0                            
00084AD0                            
00084AD0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084AD0                            
00084AD0                            ; sub_71D40:
00084AD0                            SetDuration:
00084AD0 1005                       		move.b	d5,d0
00084AD2 122D 0002                  		move.b	TrackTempoDivider(a5),d1	; Get dividing timing
00084AD6                            ; loc_71D46:
00084AD6                            @multloop:
00084AD6 5301                       		subq.b	#1,d1
00084AD8 6700                       		beq.s	@donemult
00084ADA D005                       		add.b	d5,d0
00084ADC 60F8                       		bra.s	@multloop
00084ADE                            ; ===========================================================================
00084ADE                            ; loc_71D4E:
00084ADE                            @donemult:
00084ADE 1B40 000F                  		move.b	d0,TrackSavedDuration(a5)	; Save duration
00084AE2 1B40 000E                  		move.b	d0,TrackDurationTimeout(a5)	; Save duration timeout
00084AE6 4E75                       		rts	
00084AE8                            ; End of function SetDuration
00084AE8                            
00084AE8                            ; ===========================================================================
00084AE8                            ; loc_71D58:
00084AE8                            TrackSetRest:
00084AE8 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
00084AEC 426D 0010                  		clr.w	TrackFreq(a5)	; Clear frequency
00084AF0                            
00084AF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084AF0                            
00084AF0                            ; sub_71D60:
00084AF0                            FinishTrackUpdate:
00084AF0 2B4C 0004                  		move.l	a4,TrackDataPointer(a5)	; Store new track position
00084AF4 1B6D 000F 000E             		move.b	TrackSavedDuration(a5),TrackDurationTimeout(a5)	; Reset note timeout
00084AFA 0815 0004                  		btst	#4,(a5)				; Is track set to not attack note? (TrackPlaybackControl)
00084AFE 6600                       		bne.s	@locret				; If so, branch
00084B00 1B6D 0013 0012             		move.b	TrackNoteTimeoutMaster(a5),TrackNoteTimeout(a5)	; Reset note fill timeout
00084B06 422D 000C                  		clr.b	TrackVolEnvIndex(a5)		; Reset PSG volume envelope index (even on FM tracks...)
00084B0A 0815 0003                  		btst	#3,(a5)				; Is modulation on? (TrackPlaybackControl)
00084B0E 6700                       		beq.s	@locret				; If not, return (TrackPlaybackControl)
00084B10 206D 0014                  		movea.l	TrackModulationPtr(a5),a0	; Modulation data pointer
00084B14 1B58 0018                  		move.b	(a0)+,TrackModulationWait(a5)	; Reset wait
00084B18 1B58 0019                  		move.b	(a0)+,TrackModulationSpeed(a5)	; Reset speed
00084B1C 1B58 001A                  		move.b	(a0)+,TrackModulationDelta(a5)	; Reset delta
00084B20 1018                       		move.b	(a0)+,d0			; Get steps
00084B22 E208                       		lsr.b	#1,d0				; Halve them
00084B24 1B40 001B                  		move.b	d0,TrackModulationSteps(a5)	; Then store
00084B28 426D 001C                  		clr.w	TrackModulationVal(a5)		; Reset frequency change
00084B2C                            ; locret_71D9C:
00084B2C                            @locret:
00084B2C 4E75                       		rts	
00084B2E                            ; End of function FinishTrackUpdate
00084B2E                            
00084B2E                            
00084B2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084B2E                            
00084B2E                            ; sub_71D9E: NoteFillUpdate
00084B2E                            NoteTimeoutUpdate:
00084B2E 4A2D 0012                  		tst.b	TrackNoteTimeout(a5)	; Is note fill on?
00084B32 6700                       		beq.s	@locret
00084B34 532D 0012                  		subq.b	#1,TrackNoteTimeout(a5)	; Update note fill timeout
00084B38 6600                       		bne.s	@locret				; Return if it hasn't expired
00084B3A 08D5 0001                  		bset	#1,(a5)				; Put track at rest (TrackPlaybackControl)
00084B3E 4A2D 0001                  		tst.b	TrackVoiceControl(a5)		; Is this a psg track?
00084B42 6B00 0000                  		bmi.w	@psgnoteoff			; If yes, branch
00084B46 4EBA 0000                  		jsr	FMNoteOff(pc)
00084B4A 584F                       		addq.w	#4,sp				; Do not return to caller
00084B4C 4E75                       		rts	
00084B4E                            ; ===========================================================================
00084B4E                            ; loc_71DBE:
00084B4E                            @psgnoteoff:
00084B4E 4EBA 0000                  		jsr	PSGNoteOff(pc)
00084B52 584F                       		addq.w	#4,sp		; Do not return to caller
00084B54                            ; locret_71DC4:
00084B54                            @locret:
00084B54 4E75                       		rts	
00084B56                            ; End of function NoteTimeoutUpdate
00084B56                            
00084B56                            
00084B56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084B56                            
00084B56                            ; sub_71DC6:
00084B56                            DoModulation:
00084B56 584F                       		addq.w	#4,sp				; Do not return to caller (but see below)
00084B58 0815 0003                  		btst	#3,(a5)				; Is modulation active? (TrackPlaybackControl)
00084B5C 6700                       		beq.s	@locret				; Return if not
00084B5E 4A2D 0018                  		tst.b	TrackModulationWait(a5)	; Has modulation wait expired?
00084B62 6700                       		beq.s	@waitdone			; If yes, branch
00084B64 532D 0018                  		subq.b	#1,TrackModulationWait(a5)	; Update wait timeout
00084B68 4E75                       		rts	
00084B6A                            ; ===========================================================================
00084B6A                            ; loc_71DDA:
00084B6A                            @waitdone:
00084B6A 532D 0019                  		subq.b	#1,TrackModulationSpeed(a5)	; Update speed
00084B6E 6700                       		beq.s	@updatemodulation		; If it expired, want to update modulation
00084B70 4E75                       		rts	
00084B72                            ; ===========================================================================
00084B72                            ; loc_71DE2:
00084B72                            @updatemodulation:
00084B72 206D 0014                  		movea.l	TrackModulationPtr(a5),a0	; Get modulation data
00084B76 1B68 0001 0019             		move.b	1(a0),TrackModulationSpeed(a5)	; Restore modulation speed
00084B7C 4A2D 001B                  		tst.b	TrackModulationSteps(a5)	; Check number of steps
00084B80 6600                       		bne.s	@calcfreq			; If nonzero, branch
00084B82 1B68 0003 001B             		move.b	3(a0),TrackModulationSteps(a5)	; Restore from modulation data
00084B88 442D 001A                  		neg.b	TrackModulationDelta(a5)	; Negate modulation delta
00084B8C 4E75                       		rts	
00084B8E                            ; ===========================================================================
00084B8E                            ; loc_71DFE:
00084B8E                            @calcfreq:
00084B8E 532D 001B                  		subq.b	#1,TrackModulationSteps(a5)	; Update modulation steps
00084B92 1C2D 001A                  		move.b	TrackModulationDelta(a5),d6	; Get modulation delta
00084B96 4886                       		ext.w	d6
00084B98 DC6D 001C                  		add.w	TrackModulationVal(a5),d6	; Add cumulative modulation change
00084B9C 3B46 001C                  		move.w	d6,TrackModulationVal(a5)	; Store it
00084BA0 DC6D 0010                  		add.w	TrackFreq(a5),d6		; Add note frequency to it
00084BA4 594F                       		subq.w	#4,sp		; In this case, we want to return to caller after all
00084BA6                            ; locret_71E16:
00084BA6                            @locret:
00084BA6 4E75                       		rts	
00084BA8                            ; End of function DoModulation
00084BA8                            
00084BA8                            
00084BA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084BA8                            
00084BA8                            ; sub_71E18:
00084BA8                            FMPrepareNote:
00084BA8 0815 0001                  		btst	#1,(a5)			; Is track resting? (TrackPlaybackControl)
00084BAC 6600                       		bne.s	locret_71E48		; Return if so
00084BAE 3C2D 0010                  		move.w	TrackFreq(a5),d6	; Get current note frequency
00084BB2 6700                       		beq.s	FMSetRest		; Branch if zero
00084BB4                            ; loc_71E24:
00084BB4                            FMUpdateFreq:
00084BB4 102D 001E                  		move.b	TrackDetune(a5),d0 	; Get detune value
00084BB8 4880                       		ext.w	d0
00084BBA DC40                       		add.w	d0,d6			; Add note frequency
00084BBC 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00084BC0 6600                       		bne.s	locret_71E48		; Return if so
00084BC2 3206                       		move.w	d6,d1
00084BC4 E049                       		lsr.w	#8,d1
00084BC6 103C 00A4                  		move.b	#$A4,d0			; Register for upper 6 bits of frequency
00084BCA 4EBA 0000                  		jsr	WriteFMIorII(pc)
00084BCE 1206                       		move.b	d6,d1
00084BD0 103C 00A0                  		move.b	#$A0,d0			; Register for lower 8 bits of frequency
00084BD4 4EBA 0000                  		jsr	WriteFMIorII(pc)	; (It would be better if this were a jmp)
00084BD8                            ; locret_71E48:
00084BD8                            locret_71E48:
00084BD8 4E75                       		rts	
00084BDA                            ; ===========================================================================
00084BDA                            ; loc_71E4A:
00084BDA                            FMSetRest:
00084BDA 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
00084BDE 4E75                       		rts	
00084BE0                            ; End of function FMPrepareNote
00084BE0                            
00084BE0                            ; ===========================================================================
00084BE0                            ; loc_71E50:
00084BE0                            PauseMusic:
00084BE0 6B00                       		bmi.s	@unpausemusic		; Branch if music is being unpaused
00084BE2 0C2E 0002 0003             		cmpi.b	#2,f_pausemusic(a6)
00084BE8 6700 0000                  		beq.w	@unpausedallfm
00084BEC 1D7C 0002 0003             		move.b	#2,f_pausemusic(a6)
00084BF2 7602                       		moveq	#2,d3
00084BF4 103C 00B4                  		move.b	#$B4,d0		; Command to set AMS/FMS/panning
00084BF8 7200                       		moveq	#0,d1		; No panning, AMS or FMS
00084BFA                            ; loc_71E6A:
00084BFA                            @killpanloop:
00084BFA 4EBA 0000                  		jsr	WriteFMI(pc)
00084BFE 4EBA 0000                  		jsr	WriteFMII(pc)
00084C02 5200                       		addq.b	#1,d0
00084C04 51CB FFF4                  		dbf	d3,@killpanloop
00084C08                            
00084C08 7602                       		moveq	#2,d3
00084C0A 7028                       		moveq	#$28,d0		; Key on/off register
00084C0C                            ; loc_71E7C:
00084C0C                            @noteoffloop:
00084C0C 1203                       		move.b	d3,d1		; FM1, FM2, FM3
00084C0E 4EBA 0000                  		jsr	WriteFMI(pc)
00084C12 5801                       		addq.b	#4,d1		; FM4, FM5, FM6
00084C14 4EBA 0000                  		jsr	WriteFMI(pc)
00084C18 51CB FFF2                  		dbf	d3,@noteoffloop
00084C1C                            
00084C1C 4EBA 0000                  		jsr	PSGSilenceAll(pc)
00084C20 6000 FD94                  		bra.w	DoStartZ80
00084C24                            ; ===========================================================================
00084C24                            ; loc_71E94:
00084C24                            @unpausemusic:
00084C24 422E 0003                  		clr.b	f_pausemusic(a6)
00084C28 7630                       		moveq	#TrackSz,d3
00084C2A 4BEE 0040                  		lea	v_music_fmdac_tracks(a6),a5
00084C2E 7806                       		moveq	#((v_music_fmdac_tracks_end-v_music_fmdac_tracks)/TrackSz)-1,d4	; 6 FM + 1 DAC tracks
00084C30                            ; loc_71EA0:
00084C30                            @bgmfmloop:
00084C30 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
00084C34 6700                       		beq.s	@bgmfmnext		; Branch if not
00084C36 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00084C3A 6600                       		bne.s	@bgmfmnext		; Branch if yes
00084C3C 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
00084C40 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
00084C44 4EBA 0000                  		jsr	WriteFMIorII(pc)
00084C48                            ; loc_71EB8:
00084C48                            @bgmfmnext:
00084C48 DAC3                       		adda.w	d3,a5
00084C4A 51CC FFE4                  		dbf	d4,@bgmfmloop
00084C4E                            
00084C4E 4BEE 0220                  		lea	v_sfx_fm_tracks(a6),a5
00084C52 7802                       		moveq	#((v_sfx_fm_tracks_end-v_sfx_fm_tracks)/TrackSz)-1,d4	; 3 FM tracks (SFX)
00084C54                            ; loc_71EC4:
00084C54                            @sfxfmloop:
00084C54 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
00084C58 6700                       		beq.s	@sfxfmnext		; Branch if not
00084C5A 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00084C5E 6600                       		bne.s	@sfxfmnext		; Branch if yes
00084C60 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
00084C64 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
00084C68 4EBA 0000                  		jsr	WriteFMIorII(pc)
00084C6C                            ; loc_71EDC:
00084C6C                            @sfxfmnext:
00084C6C DAC3                       		adda.w	d3,a5
00084C6E 51CC FFE4                  		dbf	d4,@sfxfmloop
00084C72                            
00084C72 4BEE 0340                  		lea	v_spcsfx_track_ram(a6),a5
00084C76 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
00084C7A 6700                       		beq.s	@unpausedallfm		; Branch if not
00084C7C 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00084C80 6600                       		bne.s	@unpausedallfm		; Branch if yes
00084C82 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
00084C86 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
00084C8A 4EBA 0000                  		jsr	WriteFMIorII(pc)
00084C8E                            ; loc_71EFE:
00084C8E                            @unpausedallfm:
00084C8E 6000 FD26                  		bra.w	DoStartZ80
00084C92                            
00084C92                            ; ---------------------------------------------------------------------------
00084C92                            ; Subroutine to	play a sound or	music track
00084C92                            ; ---------------------------------------------------------------------------
00084C92                            
00084C92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084C92                            
00084C92                            ; Sound_Play:
00084C92                            CycleSoundQueue:
00084C92 2079 0008 46E4             		movea.l	(Go_SoundPriorities).l,a0
00084C98 43EE 000A                  		lea	v_soundqueue0(a6),a1	; load music track number
00084C9C 1616                       		move.b	v_sndprio(a6),d3	; Get priority of currently playing SFX
00084C9E 7802                       		moveq	#2,d4			; Number of queues-1 (v_soundqueue0, v_soundqueue1, v_soundqueue2)
00084CA0                            ; loc_71F12:
00084CA0                            @inputloop:
00084CA0 1011                       		move.b	(a1),d0			; move track number to d0
00084CA2 1200                       		move.b	d0,d1
00084CA4 4219                       		clr.b	(a1)+			; Clear entry
00084CA6 0400 0081                  		subi.b	#bgm__First,d0		; Make it into 0-based index
00084CAA 6500                       		bcs.s	@nextinput		; If negative (i.e., it was $80 or lower), branch
00084CAC 0C2E 0080 0009             		cmpi.b	#$80,v_sound_id(a6)	; Is v_sound_id a $80 (silence/empty)?
00084CB2 6700                       		beq.s	@havesound		; If yes, branch
00084CB4 1D41 000A                  		move.b	d1,v_soundqueue0(a6)	; Put sound into v_soundqueue0
00084CB8 6000                       		bra.s	@nextinput
00084CBA                            ; ===========================================================================
00084CBA                            ; loc_71F2C:
00084CBA                            @havesound:
00084CBA 0240 007F                  		andi.w	#$7F,d0			; Clear high byte and sign bit
00084CBE 1430 0000                  		move.b	(a0,d0.w),d2		; Get sound type
00084CC2 B403                       		cmp.b	d3,d2			; Is it a lower priority sound?
00084CC4 6500                       		blo.s	@nextinput		; Branch if yes
00084CC6 1602                       		move.b	d2,d3			; Store new priority
00084CC8 1D41 0009                  		move.b	d1,v_sound_id(a6)	; Queue sound for play
00084CCC                            ; loc_71F3E:
00084CCC                            @nextinput:
00084CCC 51CC FFD2                  		dbf	d4,@inputloop
00084CD0                            
00084CD0 4A03                       		tst.b	d3			; We don't want to change sound priority if it is negative
00084CD2 6B00                       		bmi.s	@locret
00084CD4 1C83                       		move.b	d3,v_sndprio(a6)	; Set new sound priority
00084CD6                            ; locret_71F4A:
00084CD6                            @locret:
00084CD6 4E75                       		rts	
00084CD8                            ; End of function CycleSoundQueue
00084CD8                            
00084CD8                            
00084CD8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084CD8                            
00084CD8                            ; Sound_ChkValue:
00084CD8                            PlaySoundID:
00084CD8 7E00                       		moveq	#0,d7
00084CDA 1E2E 0009                  		move.b	v_sound_id(a6),d7
00084CDE 6700 0000                  		beq.w	StopAllSound
00084CE2 6A00                       		bpl.s	@locret			; If >= 0, return (not a valid sound, bgm or command)
00084CE4 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; reset	music flag
00084CEA                            		; DANGER! Music ends at $93, yet this checks until $9F; attempting to
00084CEA                            		; play sounds $94-$9F will cause a crash! Remove the '+$C' to fix this.
00084CEA                            		; See LevSel_NoCheat for more.
00084CEA 0C07 0000                  		cmpi.b	#bgm__Last,d7	; Is this music ($81-$9F)?
00084CEE 6300 0000                  		bls.w	Sound_PlayBGM		; Branch if yes
00084CF2 0C07 00A0                  		cmpi.b	#sfx__First,d7		; Is this after music but before sfx? (redundant check)
00084CF6 6500 0000                  		blo.w	@locret			; Return if yes
00084CFA 0C07 0000                  		cmpi.b	#sfx__Last,d7		; Is this sfx ($A0-$CF)?
00084CFE 6300 0000                  		bls.w	Sound_PlaySFX		; Branch if yes
00084D02 0C07 00D0                  		cmpi.b	#spec__First,d7		; Is this after sfx but before special sfx? (redundant check)
00084D06 6500 0000                  		blo.w	@locret			; Return if yes
00084D0A 0C07 00D1                  		cmpi.b	#$D1,d7
00084D0E 6500 0000                  		bcs.w	Sound_PlaySpecial
00084D12 0C07 00DF                  		cmp.b	#$DF,d7
00084D16 6F00 0000                  		ble.w	Sound_D1toDF
00084D1A 0C07 00E0                  		cmpi.b	#flg__First,d7		; Is this after special sfx but before $E0?
00084D1E 6500 0000                  		blo.w	@locret			; Return if yes
00084D22 0C07 0000                  		cmpi.b	#flg__Last,d7		; Is this $E0-$E4?
00084D26 6300                       		bls.s	Sound_E0toE4		; Branch if yes
00084D28                            ; locret_71F8C:
00084D28                            @locret:
00084D28 4E75                       		rts	
00084D2A                            ; ===========================================================================
00084D2A                            
00084D2A                            Sound_E0toE4:
00084D2A 0407 00E0                  		subi.b	#flg__First,d7
00084D2E E54F                       		lsl.w	#2,d7
00084D30 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
00084D34                            ; ===========================================================================
00084D34                            
00084D34                            Sound_ExIndex:
00084D34 6000 0000                  ptr_flgE0:	bra.w	FadeOutMusic		; $E0
00084D38 6000 0000                  ptr_flgE1:	bra.w	PlaySegaSound		; $E1
00084D3C 6000 0000                  ptr_flgE2:	bra.w	SpeedUpMusic		; $E2
00084D40 6000 0000                  ptr_flgE3:	bra.w	SlowDownMusic		; $E3
00084D44 6000 0000                  ptr_flgE4:	bra.w	StopAllSound		; $E4
00084D48                            ptr_flgend
00084D48                            ; ===========================================================================
00084D48                            ; ---------------------------------------------------------------------------
00084D48                            ; Play "Say-gaa" PCM sound
00084D48                            ; ---------------------------------------------------------------------------
00084D48                            ; Sound_E1: PlaySega:
00084D48                            PlaySegaSound:
00084D48 13FC 0088 00A0 1FFF        		move.b	#$88,(z80_dac_sample).l	; Queue Sega PCM
00084D50 33FC 0000 00A1 1100        		startZ80
00084D58 323C 0011                  		move.w	#$11,d1
00084D5C                            ; loc_71FC0:
00084D5C                            @busyloop_outer:
00084D5C 303C FFFF                  		move.w	#-1,d0
00084D60                            ; loc_71FC4:
00084D60                            @busyloop:
00084D60 4E71                       		nop	
00084D62 51C8 FFFC                  		dbf	d0,@busyloop
00084D66                            
00084D66 51C9 FFF4                  		dbf	d1,@busyloop_outer
00084D6A                            
00084D6A 584F                       		addq.w	#4,sp	; Tamper return value so we don't return to caller
00084D6C 4E75                       		rts	
00084D6E                            ; ===========================================================================
00084D6E                            ; ---------------------------------------------------------------------------
00084D6E                            ; Play music track $81-$9F
00084D6E                            ; ---------------------------------------------------------------------------
00084D6E                            ; Sound_81to9F:
00084D6E                            Sound_PlayBGM:
00084D6E 0C07 0000                  		cmpi.b	#bgm_ExtraLife,d7	; is the "extra life" music to be played?
00084D72 6600                       		bne.s	@bgmnot1up		; if not, branch
00084D74 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is a 1-up music playing?
00084D78 6600 0000                  		bne.w	@locdblret		; if yes, branch
00084D7C 4BEE 0040                  		lea	v_music_track_ram(a6),a5
00084D80 7009                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d0	; 1 DAC + 6 FM + 3 PSG tracks
00084D82                            ; loc_71FE6:
00084D82                            @clearsfxloop:
00084D82 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00084D86 DAFC 0030                  		adda.w	#TrackSz,a5
00084D8A 51C8 FFF6                  		dbf	d0,@clearsfxloop
00084D8E                            
00084D8E 4BEE 0220                  		lea	v_sfx_track_ram(a6),a5
00084D92 7005                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d0	; 3 FM + 3 PSG tracks (SFX)
00084D94                            ; loc_71FF8:
00084D94                            @cleartrackplayloop:
00084D94 0895 0007                  		bclr	#7,(a5)			; Clear 'track is playing' bit (TrackPlaybackControl)
00084D98 DAFC 0030                  		adda.w	#TrackSz,a5
00084D9C 51C8 FFF6                  		dbf	d0,@cleartrackplayloop
00084DA0                            
00084DA0 4216                       		clr.b	v_sndprio(a6)		; Clear priority
00084DA2 204E                       		movea.l	a6,a0
00084DA4 43EE 03A0                  		lea	v_1up_ram_copy(a6),a1
00084DA8 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; Backup $220 bytes: all variables and music track data
00084DAC                            ; loc_72012:
00084DAC                            @backupramloop:
00084DAC 22D8                       		move.l	(a0)+,(a1)+
00084DAE 51C8 FFFC                  		dbf	d0,@backupramloop
00084DB2                            
00084DB2 1D7C 0080 0027             		move.b	#$80,f_1up_playing(a6)
00084DB8 4216                       		clr.b	v_sndprio(a6)		; Clear priority again (?)
00084DBA 6000                       		bra.s	@bgm_loadMusic
00084DBC                            ; ===========================================================================
00084DBC                            ; loc_72024:
00084DBC                            @bgmnot1up:
00084DBC 422E 0027                  		clr.b	f_1up_playing(a6)
00084DC0 422E 0026                  		clr.b	v_fadein_counter(a6)
00084DC4                            ; loc_7202C:
00084DC4                            @bgm_loadMusic:
00084DC4 4EBA 0000                  		jsr	InitMusicPlayback(pc)
00084DC8 2879 0008 46F4             		movea.l	(Go_SpeedUpIndex).l,a4
00084DCE 0407 0081                  		subi.b	#bgm__First,d7
00084DD2 1D74 7000 0029             		move.b	(a4,d7.w),v_speeduptempo(a6)
00084DD8 2879 0008 46EC             		movea.l	(Go_MusicIndex).l,a4
00084DDE E54F                       		lsl.w	#2,d7
00084DE0 2874 7000                  		movea.l	(a4,d7.w),a4		; a4 now points to (uncompressed) song data
00084DE4 7000                       		moveq	#0,d0
00084DE6 3014                       		move.w	(a4),d0			; load voice pointer
00084DE8 D08C                       		add.l	a4,d0			; It is a relative pointer
00084DEA 2D40 0018                  		move.l	d0,v_voice_ptr(a6)
00084DEE 102C 0005                  		move.b	5(a4),d0		; load tempo
00084DF2 1D40 0028                  		move.b	d0,v_tempo_mod(a6)
00084DF6                            		;tst.b	f_speedup(a6)
00084DF6                            		;beq.s	@nospeedshoes
00084DF6                            		;move.b	v_speeduptempo(a6),d0
00084DF6                            ; loc_72068:
00084DF6                            ;@nospeedshoes:
00084DF6 1D40 0002                  		move.b	d0,v_main_tempo(a6)
00084DFA 1D40 0001                  		move.b	d0,v_main_tempo_timeout(a6)
00084DFE 7200                       		moveq	#0,d1
00084E00 264C                       		movea.l	a4,a3
00084E02 5C4C                       		addq.w	#6,a4			; Point past header
00084E04 7E00                       		moveq	#0,d7
00084E06 1E2B 0002                  		move.b	2(a3),d7		; load number of FM+DAC tracks
00084E0A 6700 0000                  		beq.w	@bgm_fmdone		; branch if zero
00084E0E 5307                       		subq.b	#1,d7
00084E10 123C 00C0                  		move.b	#$C0,d1			; Default AMS+FMS+Panning
00084E14 182B 0004                  		move.b	4(a3),d4		; load tempo dividing timing
00084E18 7C30                       		moveq	#TrackSz,d6
00084E1A 1A3C 0001                  		move.b	#1,d5			; Note duration for first "note"
00084E1E 43EE 0040                  		lea	v_music_fmdac_tracks(a6),a1
00084E22 45FA 0000                  		lea	FMDACInitBytes(pc),a2
00084E26                            ; loc_72098:
00084E26                            @bmg_fmloadloop:
00084E26 08D1 0007                  		bset	#7,(a1)				; Initial playback control: set 'track playing' bit (TrackPlaybackControl)
00084E2A 135A 0001                  		move.b	(a2)+,TrackVoiceControl(a1)	; Voice control bits
00084E2E 1344 0002                  		move.b	d4,TrackTempoDivider(a1)
00084E32 1346 000D                  		move.b	d6,TrackStackPointer(a1)	; set "gosub" (coord flag F8h) stack init value
00084E36 1341 000A                  		move.b	d1,TrackAMSFMSPan(a1)		; Set AMS/FMS/Panning
00084E3A 1345 000E                  		move.b	d5,TrackDurationTimeout(a1)	; Set duration of first "note"
00084E3E 7000                       		moveq	#0,d0
00084E40 301C                       		move.w	(a4)+,d0			; load DAC/FM pointer
00084E42 D08B                       		add.l	a3,d0				; Relative pointer
00084E44 2340 0004                  		move.l	d0,TrackDataPointer(a1)	; Store track pointer
00084E48 335C 0008                  		move.w	(a4)+,TrackTranspose(a1)	; load FM channel modifier
00084E4C D2C6                       		adda.w	d6,a1
00084E4E 51CF FFD6                  		dbf	d7,@bmg_fmloadloop
00084E52                            		
00084E52 0C2B 0007 0002             		cmpi.b	#7,2(a3)	; Are 7 FM tracks defined?
00084E58 6600                       		bne.s	@silencefm6
00084E5A 702B                       		moveq	#$2B,d0		; DAC enable/disable register
00084E5C 7200                       		moveq	#0,d1		; Disable DAC
00084E5E 4EBA 0000                  		jsr	WriteFMI(pc)
00084E62 6000 0000                  		bra.w	@bgm_fmdone
00084E66                            ; ===========================================================================
00084E66                            ; loc_720D8:
00084E66                            @silencefm6:
00084E66 7028                       		moveq	#$28,d0		; Key on/off register
00084E68 7206                       		moveq	#6,d1		; Note off on all operators of channel 6
00084E6A 4EBA 0000                  		jsr	WriteFMI(pc)
00084E6E 103C 0042                  		move.b	#$42,d0		; TL for operator 1 of FM6
00084E72 727F                       		moveq	#$7F,d1		; Total silence
00084E74 4EBA 0000                  		jsr	WriteFMII(pc)
00084E78 103C 004A                  		move.b	#$4A,d0		; TL for operator 3 of FM6
00084E7C 727F                       		moveq	#$7F,d1		; Total silence
00084E7E 4EBA 0000                  		jsr	WriteFMII(pc)
00084E82 103C 0046                  		move.b	#$46,d0		; TL for operator 2 of FM6
00084E86 727F                       		moveq	#$7F,d1		; Total silence
00084E88 4EBA 0000                  		jsr	WriteFMII(pc)
00084E8C 103C 004E                  		move.b	#$4E,d0		; TL for operator 4 of FM6
00084E90 727F                       		moveq	#$7F,d1		; Total silence
00084E92 4EBA 0000                  		jsr	WriteFMII(pc)
00084E96 103C 00B6                  		move.b	#$B6,d0		; AMS/FMS/panning of FM6
00084E9A 123C 00C0                  		move.b	#$C0,d1		; Stereo
00084E9E 4EBA 0000                  		jsr	WriteFMII(pc)
00084EA2                            ; loc_72114:
00084EA2                            @bgm_fmdone:
00084EA2 7E00                       		moveq	#0,d7
00084EA4 1E2B 0003                  		move.b	3(a3),d7	; Load number of PSG tracks
00084EA8 6700                       		beq.s	@bgm_psgdone	; branch if zero
00084EAA 5307                       		subq.b	#1,d7
00084EAC 43EE 0190                  		lea	v_music_psg_tracks(a6),a1
00084EB0 45FA 0000                  		lea	PSGInitBytes(pc),a2
00084EB4                            ; loc_72126:
00084EB4                            @bgm_psgloadloop:
00084EB4 08D1 0007                  		bset	#7,(a1)				; Initial playback control: set 'track playing' bit (TrackPlaybackControl)
00084EB8 135A 0001                  		move.b	(a2)+,TrackVoiceControl(a1)	; Voice control bits
00084EBC 1344 0002                  		move.b	d4,TrackTempoDivider(a1)
00084EC0 1346 000D                  		move.b	d6,TrackStackPointer(a1)	; set "gosub" (coord flag F8h) stack init value
00084EC4 1345 000E                  		move.b	d5,TrackDurationTimeout(a1)	; Set duration of first "note"
00084EC8 7000                       		moveq	#0,d0
00084ECA 301C                       		move.w	(a4)+,d0			; load PSG channel pointer
00084ECC D08B                       		add.l	a3,d0				; Relative pointer
00084ECE 2340 0004                  		move.l	d0,TrackDataPointer(a1)	; Store track pointer
00084ED2 335C 0008                  		move.w	(a4)+,TrackTranspose(a1)	; load PSG modifier
00084ED6 101C                       		move.b	(a4)+,d0			; load redundant byte
00084ED8 135C 000B                  		move.b	(a4)+,TrackVoiceIndex(a1)	; Initial PSG tone
00084EDC D2C6                       		adda.w	d6,a1
00084EDE 51CF FFD4                  		dbf	d7,@bgm_psgloadloop
00084EE2                            ; loc_72154:
00084EE2                            @bgm_psgdone:
00084EE2 43EE 0220                  		lea	v_sfx_track_ram(a6),a1
00084EE6 7E05                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d7	; 6 SFX tracks
00084EE8                            ; loc_7215A:
00084EE8                            @sfxstoploop:
00084EE8 4A11                       		tst.b	(a1)		; Is SFX playing? (TrackPlaybackControl)
00084EEA 6A00 0000                  		bpl.w	@sfxnext	; Branch if not
00084EEE 7000                       		moveq	#0,d0
00084EF0 1029 0001                  		move.b	TrackVoiceControl(a1),d0 ; Get voice control bits
00084EF4 6B00                       		bmi.s	@sfxpsgchannel		; Branch if this is a PSG channel
00084EF6 5500                       		subq.b	#2,d0			; SFX can't have FM1 or FM2
00084EF8 E508                       		lsl.b	#2,d0			; Convert to index
00084EFA 6000                       		bra.s	@gotchannelindex
00084EFC                            ; ===========================================================================
00084EFC                            ; loc_7216E:
00084EFC                            @sfxpsgchannel:
00084EFC E608                       		lsr.b	#3,d0		; Convert to index
00084EFE                            ; loc_72170:
00084EFE                            @gotchannelindex:
00084EFE 41FA 0000                  		lea	SFX_BGMChannelRAM(pc),a0
00084F02 2070 0000                  		movea.l	(a0,d0.w),a0
00084F06 08D0 0002                  		bset	#2,(a0)		; Set 'SFX is overriding' bit (TrackPlaybackControl)
00084F0A                            ; loc_7217C:
00084F0A                            @sfxnext:
00084F0A D2C6                       		adda.w	d6,a1
00084F0C 51CF FFDA                  		dbf	d7,@sfxstoploop
00084F10                            
00084F10 4A6E 0340                  		tst.w	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX being played?
00084F14 6A00                       		bpl.s	@checkspecialpsg				; Branch if not
00084F16 08EE 0002 0100             		bset	#2,v_music_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00084F1C                            ; loc_7218E:
00084F1C                            @checkspecialpsg:
00084F1C 4A6E 0370                  		tst.w	v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Is special SFX being played?
00084F20 6A00                       		bpl.s	@sendfmnoteoff					; Branch if not
00084F22 08EE 0002 01F0             		bset	#2,v_music_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00084F28                            ; loc_7219A:
00084F28                            @sendfmnoteoff:
00084F28 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
00084F2C 7805                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d4	; 6 FM tracks
00084F2E                            ; loc_721A0:
00084F2E                            @fmnoteoffloop:
00084F2E 4EBA 0000                  		jsr	FMNoteOff(pc)
00084F32 DAC6                       		adda.w	d6,a5
00084F34 51CC FFF8                  		dbf	d4,@fmnoteoffloop		; run all FM tracks
00084F38 7802                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d4 ; 3 PSG tracks
00084F3A                            ; loc_721AC:
00084F3A                            @psgnoteoffloop:
00084F3A 4EBA 0000                  		jsr	PSGNoteOff(pc)
00084F3E DAC6                       		adda.w	d6,a5
00084F40 51CC FFF8                  		dbf	d4,@psgnoteoffloop		; run all PSG tracks
00084F44                            ; loc_721B6:
00084F44                            @locdblret:
00084F44 584F                       		addq.w	#4,sp	; Tamper with return value to not return to caller
00084F46 4E75                       		rts	
00084F48                            ; ===========================================================================
00084F48                            ; byte_721BA:
00084F48 0600 0102 0405 06          FMDACInitBytes:	dc.b 6,	0, 1, 2, 4, 5, 6	; first byte is for DAC; then notice the 0, 1, 2 then 4, 5, 6; this is the gap between parts I and II for YM2612 port writes
00084F50 00                         		even
00084F50                            ; byte_721C2:
00084F50 80A0 C0                    PSGInitBytes:	dc.b $80, $A0, $C0	; Specifically, these configure writes to the PSG port for each channel
00084F54 00                         		even
00084F54                            ; ===========================================================================
00084F54                            ; ---------------------------------------------------------------------------
00084F54                            ; Play Spin Dash sound effect
00084F54                            ; ---------------------------------------------------------------------------
00084F54                            Sound_D1toDF:
00084F54 4A2E 0027                  		tst.b	$27(a6)
00084F58 6600 0000                  		bne.w	loc_722C6
00084F5C 4A2E 0004                  		tst.b	4(a6)
00084F60 6600 0000                  		bne.w	loc_722C6
00084F64 4A2E 0024                  		tst.b	$24(a6)
00084F68 6600 0000                  		bne.w	loc_722C6
00084F6C 4238 C900                  		clr.b	($FFFFC900).w
00084F70 0C07 00D5                  		cmp.b	#$D5,d7		; is this the Spin Dash sound?
00084F74 6600                       		bne.s	@cont3	; if not, branch
00084F76 3F00                       		move.w	d0,-(sp)
00084F78 1038 C902                  		move.b	($FFFFC902).w,d0	; store extra frequency
00084F7C 4A38 C901                  		tst.b	($FFFFC901).w	; is the Spin Dash timer active?
00084F80 6600                       		bne.s	@cont1		; if it is, branch
00084F82 103C 00FF                  		move.b	#-1,d0		; otherwise, reset frequency (becomes 0 on next line)
00084F86                            		
00084F86                            @cont1:
00084F86 5200                       		addq.b	#1,d0
00084F88 0C00 000C                  		cmp.b	#$C,d0		; has the limit been reached?
00084F8C 6400                       		bcc.s	@cont2		; if it has, branch
00084F8E 11C0 C902                  		move.b	d0,($FFFFC902).w	; otherwise, set new frequency
00084F92                            		
00084F92                            @cont2:
00084F92 11FC 0001 C900             		move.b	#1,($FFFFC900).w	; set flag
00084F98 11FC 003C C901             		move.b	#60,($FFFFC901).w	; set timer
00084F9E 301F                       		move.w	(sp)+,d0
00084FA0                            		
00084FA0                            @cont3:	
00084FA0 2079 0008 46F0             		movea.l	(Go_SoundIndex).l,a0
00084FA6 0407 00A0                  		sub.b	#$A0,d7
00084FAA 6000                       		bra.s	SoundEffects_Common
00084FAC                            ; ---------------------------------------------------------------------------
00084FAC                            ; Play normal sound effect
00084FAC                            ; ---------------------------------------------------------------------------
00084FAC                            ; Sound_A0toCF:
00084FAC                            Sound_PlaySFX:
00084FAC 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is 1-up playing?
00084FB0 6600 0000                  		bne.w	loc_722C6		; Exit is it is
00084FB4 4A2E 0004                  		tst.b	v_fadeout_counter(a6)	; Is music being faded out?
00084FB8 6600 0000                  		bne.w	loc_722C6		; Exit if it is
00084FBC 4A2E 0024                  		tst.b	f_fadein_flag(a6)	; Is music being faded in?
00084FC0 6600 0000                  		bne.w	loc_722C6		; Exit if it is
00084FC4 4238 C900                  		clr.b	($FFFFC900).w
00084FC8 0C07 0000                  		cmpi.b	#sfx_Ring,d7		; is ring sound	effect played?
00084FCC 6600                       		bne.s	Sound_notB5		; if not, branch
00084FCE 4A2E 002B                  		tst.b	v_ring_speaker(a6)	; Is the ring sound playing on right speaker?
00084FD2 6600                       		bne.s	loc_721EE		; Branch if not
00084FD4 1E3C 0000                  		move.b	#sfx_RingLeft,d7	; play ring sound in left speaker
00084FD8                            
00084FD8                            loc_721EE:
00084FD8 086E 0000 002B             		bchg	#0,v_ring_speaker(a6)	; change speaker
00084FDE                            
00084FDE                            Sound_notB5:
00084FDE 0C07 0000                  		cmpi.b	#sfx_Push,d7		; is "pushing" sound played?
00084FE2 6600                       		bne.s	Sound_notA7		; if not, branch
00084FE4 4A2E 002C                  		tst.b	f_push_playing(a6)	; Is pushing sound already playing?
00084FE8 6600 0000                  		bne.w	locret_722C4			; Return if not
00084FEC 1D7C 0080 002C             		move.b	#$80,f_push_playing(a6)	; Mark it as playing
00084FF2                            		
00084FF2                            Sound_notA7:
00084FF2 2079 0008 46F0             		movea.l	(Go_SoundIndex).l,a0
00084FF8 0407 00A0                  		subi.b	#sfx__First,d7		; Make it 0-based
00084FFC                            
00084FFC                            SoundEffects_Common:		
00084FFC E54F                       		lsl.w	#2,d7			; Convert sfx ID into index
00084FFE 2670 7000                  		movea.l	(a0,d7.w),a3		; SFX data pointer
00085002 224B                       		movea.l	a3,a1
00085004 7200                       		moveq	#0,d1
00085006 3219                       		move.w	(a1)+,d1		; Voice pointer
00085008 D28B                       		add.l	a3,d1			; Relative pointer
0008500A 1A19                       		move.b	(a1)+,d5		; Dividing timing	
0008500C                            		; DANGER! there is a missing 'moveq	#0,d7' here, without which SFXes whose
0008500C                            		; index entry is above $3F will cause a crash. This is actually the same way that
0008500C                            		; this bug is fixed in Ristar's driver.
0008500C 7E00                       		moveq	#0,d7	
0008500E 1E19                       		move.b	(a1)+,d7	; Number of tracks (FM + PSG)
00085010 5307                       		subq.b	#1,d7
00085012 7C30                       		moveq	#TrackSz,d6
00085014                            
00085014                            loc_72228:
00085014 7600                       		moveq	#0,d3
00085016 1629 0001                  		move.b	1(a1),d3	; Channel assignment bits
0008501A 1803                       		move.b	d3,d4
0008501C 6B00                       		bmi.s	loc_72244	; Branch if PSG
0008501E 5543                       		subq.w	#2,d3		; SFX can only have FM3, FM4 or FM5
00085020 E54B                       		lsl.w	#2,d3
00085022 4BFA 0000                  		lea	SFX_BGMChannelRAM(pc),a5
00085026 2A75 3000                  		movea.l	(a5,d3.w),a5
0008502A 08D5 0002                  		bset	#2,(a5)		; Mark music track as being overridden (TrackPlaybackControl)
0008502E 6000                       		bra.s	loc_7226E
00085030                            ; ===========================================================================
00085030                            
00085030                            loc_72244:
00085030 E64B                       		lsr.w	#3,d3
00085032 4BFA 0000                  		lea	SFX_BGMChannelRAM(pc),a5
00085036 2A75 3000                  		movea.l	(a5,d3.w),a5
0008503A 08D5 0002                  		bset	#2,(a5)			; Mark music track as being overridden (TrackPlaybackControl)
0008503E 0C04 00C0                  		cmpi.b	#$C0,d4			; Is this PSG 3?
00085042 6600                       		bne.s	loc_7226E	; Branch if not
00085044 1004                       		move.b	d4,d0
00085046 0000 001F                  		ori.b	#$1F,d0			; Command to silence PSG 3
0008504A 13C0 00C0 0011             		move.b	d0,(psg_input).l
00085050 0840 0005                  		bchg	#5,d0			; Command to silence noise channel
00085054 13C0 00C0 0011             		move.b	d0,(psg_input).l
0008505A                            
0008505A                            loc_7226E:
0008505A 4BFA 0000                  		lea	SFX_SFXChannelRAM(pc),a5
0008505E 2A75 3000                  		movea.l	(a5,d3.w),a5
00085062 244D                       		movea.l	a5,a2
00085064 700B                       		moveq	#(TrackSz/4)-1,d0	; $30 bytes
00085066                            
00085066                            loc_72276:
00085066 429A                       		clr.l	(a2)+
00085068 51C8 FFFC                  		dbf	d0,loc_72276
0008506C                            
0008506C 3A99                       		move.w	(a1)+,(a5)			; Initial playback control bits (TrackPlaybackControl)
0008506E 1B45 0002                  		move.b	d5,TrackTempoDivider(a5)	; Initial voice control bits
00085072 7000                       		moveq	#0,d0
00085074 3019                       		move.w	(a1)+,d0			; Track data pointer
00085076 D08B                       		add.l	a3,d0				; Relative pointer
00085078 2B40 0004                  		move.l	d0,TrackDataPointer(a5)	; Store track pointer
0008507C 3B59 0008                  		move.w	(a1)+,8(a5)
00085080 4A38 C900                  		tst.b	($FFFFC900).w	; is the Spin Dash sound playing?
00085084 6700                       		beq.s	@cont		; if not, branch
00085086 3F00                       		move.w	d0,-(sp)
00085088 1038 C902                  		move.b	($FFFFC902).w,d0
0008508C D12D 0008                  		add.b	d0,8(a5)
00085090 301F                       		move.w	(sp)+,d0
00085092                            		
00085092                            @cont:
00085092 1B7C 0001 000E             		move.b	#1,$E(a5)
00085098 1B46 000D                  		move.b	d6,TrackStackPointer(a5)	; set "gosub" (coord flag F8h) stack init value
0008509C 4A04                       		tst.b	d4				; Is this a PSG channel?
0008509E 6B00                       		bmi.s	loc_722A8		; Branch if yes
000850A0 1B7C 00C0 000A             		move.b	#$C0,TrackAMSFMSPan(a5)	; AMS/FMS/Panning
000850A6 2B41 0020                  		move.l	d1,TrackVoicePtr(a5)		; Voice pointer
000850AA                            
000850AA                            loc_722A8:
000850AA 51CF FF68                  		dbf	d7,loc_72228
000850AE                            
000850AE 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX being played?
000850B2 6A00                       		bpl.s	loc_722B8				; Branch if not
000850B4 08EE 0002 0340             		bset	#2,v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
000850BA                            
000850BA                            loc_722B8:
000850BA 4A2E 0310                  		tst.b	v_sfx_psg3_track+TrackPlaybackControl(a6)	; Is SFX being played?
000850BE 6A00                       		bpl.s	locret_722C4						; Branch if not
000850C0 08EE 0002 0370             		bset	#2,v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
000850C6                            
000850C6                            locret_722C4:
000850C6 4E75                       		rts	
000850C8                            ; ===========================================================================
000850C8                            
000850C8                            loc_722C6:
000850C8 4216                       		clr.b	v_sndprio(a6)	; Clear priority
000850CA 4E75                       		rts	
000850CC                            ; ===========================================================================
000850CC                            ; ---------------------------------------------------------------------------
000850CC                            ; RAM addresses for FM and PSG channel variables used by the SFX
000850CC                            ; ---------------------------------------------------------------------------
000850CC                            ; dword_722CC: BGMChannelRAM:
000850CC                            SFX_BGMChannelRAM:
000850CC 00FF F0D0                  		dc.l (v_snddriver_ram+v_music_fm3_track)&$FFFFFF
000850D0 0000 0000                  		dc.l 0
000850D4 00FF F100                  		dc.l (v_snddriver_ram+v_music_fm4_track)&$FFFFFF
000850D8 00FF F130                  		dc.l (v_snddriver_ram+v_music_fm5_track)&$FFFFFF
000850DC 00FF F190                  		dc.l (v_snddriver_ram+v_music_psg1_track)&$FFFFFF
000850E0 00FF F1C0                  		dc.l (v_snddriver_ram+v_music_psg2_track)&$FFFFFF
000850E4 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF	; Plain PSG3
000850E8 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF	; Noise
000850EC                            ; dword_722EC: SFXChannelRAM:
000850EC                            SFX_SFXChannelRAM:
000850EC 00FF F220                  		dc.l (v_snddriver_ram+v_sfx_fm3_track)&$FFFFFF
000850F0 0000 0000                  		dc.l 0
000850F4 00FF F250                  		dc.l (v_snddriver_ram+v_sfx_fm4_track)&$FFFFFF
000850F8 00FF F280                  		dc.l (v_snddriver_ram+v_sfx_fm5_track)&$FFFFFF
000850FC 00FF F2B0                  		dc.l (v_snddriver_ram+v_sfx_psg1_track)&$FFFFFF
00085100 00FF F2E0                  		dc.l (v_snddriver_ram+v_sfx_psg2_track)&$FFFFFF
00085104 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF	; Plain PSG3
00085108 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF	; Noise
0008510C                            ; ===========================================================================
0008510C                            ; ---------------------------------------------------------------------------
0008510C                            ; Play GHZ waterfall sound
0008510C                            ; ---------------------------------------------------------------------------
0008510C                            ; Sound_D0toDF:
0008510C                            Sound_PlaySpecial:
0008510C 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is 1-up playing?
00085110 6600 0000                  		bne.w	@locret			; Return if so
00085114 4A2E 0004                  		tst.b	v_fadeout_counter(a6)	; Is music being faded out?
00085118 6600 0000                  		bne.w	@locret			; Exit if it is
0008511C 4A2E 0024                  		tst.b	f_fadein_flag(a6)	; Is music being faded in?
00085120 6600 0000                  		bne.w	@locret			; Exit if it is
00085124 2079 0008 46E8             		movea.l	(Go_SpecSoundIndex).l,a0
0008512A 0407 00D0                  		subi.b	#spec__First,d7		; Make it 0-based
0008512E E54F                       		lsl.w	#2,d7
00085130 2670 7000                  		movea.l	(a0,d7.w),a3
00085134 224B                       		movea.l	a3,a1
00085136 7000                       		moveq	#0,d0
00085138 3019                       		move.w	(a1)+,d0			; Voice pointer
0008513A D08B                       		add.l	a3,d0				; Relative pointer
0008513C 2D40 0020                  		move.l	d0,v_special_voice_ptr(a6)	; Store voice pointer
00085140 1A19                       		move.b	(a1)+,d5			; Dividing timing
00085142                            		; DANGER! there is a missing 'moveq	#0,d7' here, without which special SFXes whose
00085142                            		; index entry is above $3F will cause a crash. This instance was not fixed in Ristar's driver.
00085142 7E00                       		moveq	#0,d7	
00085144 1E19                       		move.b	(a1)+,d7			; Number of tracks (FM + PSG)
00085146 5307                       		subq.b	#1,d7
00085148 7C30                       		moveq	#TrackSz,d6
0008514A                            ; loc_72348:
0008514A                            @sfxloadloop:
0008514A 1829 0001                  		move.b	1(a1),d4					; Voice control bits
0008514E 6B00                       		bmi.s	@sfxoverridepsg					; Branch if PSG
00085150 08EE 0002 0100             		bset	#2,v_music_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00085156 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
0008515A 6000                       		bra.s	@sfxinitpsg
0008515C                            ; ===========================================================================
0008515C                            ; loc_7235A:
0008515C                            @sfxoverridepsg:
0008515C 08EE 0002 01F0             		bset	#2,v_music_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00085162 4BEE 0370                  		lea	v_spcsfx_psg3_track(a6),a5
00085166                            ; loc_72364:
00085166                            @sfxinitpsg:
00085166 244D                       		movea.l	a5,a2
00085168 700B                       		moveq	#(TrackSz/4)-1,d0	; $30 bytes
0008516A                            ; loc_72368:
0008516A                            @clearsfxtrackram:
0008516A 429A                       		clr.l	(a2)+
0008516C 51C8 FFFC                  		dbf	d0,@clearsfxtrackram
00085170                            
00085170 3A99                       		move.w	(a1)+,(a5)			; Initial playback control bits & voice control bits (TrackPlaybackControl)
00085172 1B45 0002                  		move.b	d5,TrackTempoDivider(a5)
00085176 7000                       		moveq	#0,d0
00085178 3019                       		move.w	(a1)+,d0			; Track data pointer
0008517A D08B                       		add.l	a3,d0				; Relative pointer
0008517C 2B40 0004                  		move.l	d0,TrackDataPointer(a5)	; Store track pointer
00085180 3B59 0008                  		move.w	(a1)+,TrackTranspose(a5)	; load FM/PSG channel modifier
00085184 1B7C 0001 000E             		move.b	#1,TrackDurationTimeout(a5)	; Set duration of first "note"
0008518A 1B46 000D                  		move.b	d6,TrackStackPointer(a5)	; set "gosub" (coord flag F8h) stack init value
0008518E 4A04                       		tst.b	d4				; Is this a PSG channel?
00085190 6B00                       		bmi.s	@sfxpsginitdone			; Branch if yes
00085192 1B7C 00C0 000A             		move.b	#$C0,TrackAMSFMSPan(a5)	; AMS/FMS/Panning
00085198                            ; loc_72396:
00085198                            @sfxpsginitdone:
00085198 51CF FFB0                  		dbf	d7,@sfxloadloop
0008519C                            
0008519C 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is track playing?
000851A0 6A00                       		bpl.s	@doneoverride					; Branch if not
000851A2 08EE 0002 0340             		bset	#2,v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
000851A8                            ; loc_723A6:
000851A8                            @doneoverride:
000851A8 4A2E 0310                  		tst.b	v_sfx_psg3_track+TrackPlaybackControl(a6)	; Is track playing?
000851AC 6A00                       		bpl.s	@locret						; Branch if not
000851AE 08EE 0002 0370             		bset	#2,v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
000851B4 0004 001F                  		ori.b	#$1F,d4						; Command to silence channel
000851B8 13C4 00C0 0011             		move.b	d4,(psg_input).l
000851BE 0844 0005                  		bchg	#5,d4			; Command to silence noise channel
000851C2 13C4 00C0 0011             		move.b	d4,(psg_input).l
000851C8                            ; locret_723C6:
000851C8                            @locret:
000851C8 4E75                       		rts	
000851CA                            ; End of function PlaySoundID
000851CA                            
000851CA                            ; ===========================================================================
000851CA                            ; ---------------------------------------------------------------------------
000851CA                            ; Unused RAM addresses for FM and PSG channel variables used by the Special SFX
000851CA                            ; ---------------------------------------------------------------------------
000851CA                            ; The first block would have been used for overriding the music tracks
000851CA                            ; as they have a lower priority, just as they are in Sound_PlaySFX
000851CA                            ; The third block would be used to set up the Special SFX
000851CA                            ; The second block, however, is for the SFX tracks, which have a higher priority
000851CA                            ; and would be checked for if they're currently playing
000851CA                            ; If they are, then the third block would be used again, this time to mark
000851CA                            ; the new tracks as 'currently playing'
000851CA                            
000851CA                            ; These were actually used in Moonwalker's driver (and other SMPS 68k Type 1a drivers)
000851CA                            
000851CA                            ; BGMFM4PSG3RAM:
000851CA                            ;SpecSFX_BGMChannelRAM:
000851CA 00FF F100                  		dc.l (v_snddriver_ram+v_music_fm4_track)&$FFFFFF
000851CE 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF
000851D2                            ; SFXFM4PSG3RAM:
000851D2                            ;SpecSFX_SFXChannelRAM:
000851D2 00FF F250                  		dc.l (v_snddriver_ram+v_sfx_fm4_track)&$FFFFFF
000851D6 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF
000851DA                            ; SpecialSFXFM4PSG3RAM:
000851DA                            ;SpecSFX_SpecSFXChannelRAM:
000851DA 00FF F340                  		dc.l (v_snddriver_ram+v_spcsfx_fm4_track)&$FFFFFF
000851DE 00FF F370                  		dc.l (v_snddriver_ram+v_spcsfx_psg3_track)&$FFFFFF
000851E2                            
000851E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000851E2                            
000851E2                            ; Snd_FadeOut1: Snd_FadeOutSFX: FadeOutSFX:
000851E2                            StopSFX:
000851E2 4216                       		clr.b	v_sndprio(a6)		; Clear priority
000851E4 4BEE 0220                  		lea	v_sfx_track_ram(a6),a5
000851E8 7E05                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d7	; 3 FM + 3 PSG tracks (SFX)
000851EA                            ; loc_723EA:
000851EA                            @trackloop:
000851EA 4A15                       		tst.b	(a5)		; Is track playing? (TrackPlaybackControl)
000851EC 6A00 0000                  		bpl.w	@nexttrack	; Branch if not
000851F0 0895 0007                  		bclr	#7,(a5)		; Stop track (TrackPlaybackControl)
000851F4 7600                       		moveq	#0,d3
000851F6 162D 0001                  		move.b	TrackVoiceControl(a5),d3	; Get voice control bits
000851FA 6B00                       		bmi.s	@trackpsg			; Branch if PSG
000851FC 4EBA 0000                  		jsr	FMNoteOff(pc)
00085200 0C03 0004                  		cmpi.b	#4,d3						; Is this FM4?
00085204 6600                       		bne.s	@getfmpointer					; Branch if not
00085206 4A2E 0340                  		tst.b	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX playing?
0008520A 6A00                       		bpl.s	@getfmpointer					; Branch if not
0008520C                            		; DANGER! there is a missing 'movea.l	a5,a3' here, without which the
0008520C                            		; code is broken. It is dangerous to do a fade out when a GHZ waterfall
0008520C                            		; is playing its sound!
0008520C 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
00085210 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1	; Get special voice pointer
00085214 6000                       		bra.s	@gotfmpointer
00085216                            ; ===========================================================================
00085216                            ; loc_72416:
00085216                            @getfmpointer:
00085216 5503                       		subq.b	#2,d3		; SFX only has FM3 and up
00085218 E50B                       		lsl.b	#2,d3
0008521A 41FA FEB0                  		lea	SFX_BGMChannelRAM(pc),a0
0008521E 264D                       		movea.l	a5,a3
00085220 2A70 3000                  		movea.l	(a0,d3.w),a5
00085224 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Get music voice pointer
00085228                            ; loc_72428:
00085228                            @gotfmpointer:
00085228 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
0008522C 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00085230 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00085234 4EBA 0000                  		jsr	SetVoice(pc)
00085238 2A4B                       		movea.l	a3,a5
0008523A 6000                       		bra.s	@nexttrack
0008523C                            ; ===========================================================================
0008523C                            ; loc_7243C:
0008523C                            @trackpsg:
0008523C 4EBA 0000                  		jsr	PSGNoteOff(pc)
00085240 41EE 0370                  		lea	v_spcsfx_psg3_track(a6),a0
00085244 0C03 00E0                  		cmpi.b	#$E0,d3			; Is this a noise channel:
00085248 6700                       		beq.s	@gotpsgpointer		; Branch if yes
0008524A 0C03 00C0                  		cmpi.b	#$C0,d3			; Is this PSG 3?
0008524E 6700                       		beq.s	@gotpsgpointer		; Branch if yes
00085250 E60B                       		lsr.b	#3,d3
00085252 41FA FE78                  		lea	SFX_BGMChannelRAM(pc),a0
00085256 2070 3000                  		movea.l	(a0,d3.w),a0
0008525A                            ; loc_7245A:
0008525A                            @gotpsgpointer:
0008525A 0890 0002                  		bclr	#2,(a0)				; Clear 'SFX is overriding' bit (TrackPlaybackControl)
0008525E 08D0 0001                  		bset	#1,(a0)				; Set 'track at rest' bit (TrackPlaybackControl)
00085262 0C28 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a0)	; Is this a noise channel?
00085268 6600                       		bne.s	@nexttrack			; Branch if not
0008526A 13E8 001F 00C0 0011        		move.b	TrackPSGNoise(a0),(psg_input).l ; Set noise type
00085272                            ; loc_72472:
00085272                            @nexttrack:
00085272 DAFC 0030                  		adda.w	#TrackSz,a5
00085276 51CF FF72                  		dbf	d7,@trackloop
0008527A                            
0008527A 4E75                       		rts	
0008527C                            ; End of function StopSFX
0008527C                            
0008527C                            
0008527C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008527C                            
0008527C                            ; Snd_FadeOut2: FadeOutSFX2: FadeOutSpecialSFX:
0008527C                            StopSpecialSFX:
0008527C 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
00085280 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00085282 6A00                       		bpl.s	@fadedfm		; Branch if not
00085284 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00085288 0815 0002                  		btst	#2,(a5)			; Is SFX overriding? (TrackPlaybackControl)
0008528C 6600                       		bne.s	@fadedfm		; Branch if not
0008528E 4EBA 0000                  		jsr	SendFMNoteOff(pc)
00085292 4BEE 0100                  		lea	v_music_fm4_track(a6),a5
00085296 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
0008529A 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
0008529E 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000852A0 6A00                       		bpl.s	@fadedfm		; Branch if not
000852A2 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
000852A6 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
000852AA 4EBA 0000                  		jsr	SetVoice(pc)
000852AE                            ; loc_724AE:
000852AE                            @fadedfm:
000852AE 4BEE 0370                  		lea	v_spcsfx_psg3_track(a6),a5
000852B2 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000852B4 6A00                       		bpl.s	@fadedpsg		; Branch if not
000852B6 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
000852BA 0815 0002                  		btst	#2,(a5)			; Is SFX overriding? (TrackPlaybackControl)
000852BE 6600                       		bne.s	@fadedpsg		; Return if not
000852C0 4EBA 0000                  		jsr	SendPSGNoteOff(pc)
000852C4 4BEE 01F0                  		lea	v_music_psg3_track(a6),a5
000852C8 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
000852CC 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
000852D0 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000852D2 6A00                       		bpl.s	@fadedpsg		; Return if not
000852D4 0C2D 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a5)	; Is this a noise channel?
000852DA 6600                       		bne.s	@fadedpsg			; Return if not
000852DC 13ED 001F 00C0 0011        		move.b	TrackPSGNoise(a5),(psg_input).l ; Set noise type
000852E4                            ; locret_724E4:
000852E4                            @fadedpsg:
000852E4 4E75                       		rts	
000852E6                            ; End of function StopSpecialSFX
000852E6                            
000852E6                            ; ===========================================================================
000852E6                            ; ---------------------------------------------------------------------------
000852E6                            ; Fade out music
000852E6                            ; ---------------------------------------------------------------------------
000852E6                            ; Sound_E0:
000852E6                            FadeOutMusic:
000852E6 4EBA FEFA                  		jsr	StopSFX(pc)
000852EA 4EBA FF90                  		jsr	StopSpecialSFX(pc)
000852EE 1D7C 0003 0006             		move.b	#3,v_fadeout_delay(a6)			; Set fadeout delay to 3
000852F4 1D7C 0028 0004             		move.b	#$28,v_fadeout_counter(a6)		; Set fadeout counter
000852FA 422E 0040                  		clr.b	v_music_dac_track+TrackPlaybackControl(a6)	; Stop DAC track
000852FE 422E 002A                  		clr.b	f_speedup(a6)				; Disable speed shoes tempo
00085302 4E75                       		rts	
00085304                            
00085304                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085304                            
00085304                            ; sub_72504:
00085304                            DoFadeOut:
00085304 102E 0006                  		move.b	v_fadeout_delay(a6),d0	; Has fadeout delay expired?
00085308 6700                       		beq.s	@continuefade		; Branch if yes
0008530A 532E 0006                  		subq.b	#1,v_fadeout_delay(a6)
0008530E 4E75                       		rts	
00085310                            ; ===========================================================================
00085310                            ; loc_72510:
00085310                            @continuefade:
00085310 532E 0004                  		subq.b	#1,v_fadeout_counter(a6)	; Update fade counter
00085314 6700 0000                  		beq.w	StopAllSound			; Branch if fade is done
00085318 1D7C 0003 0006             		move.b	#3,v_fadeout_delay(a6)		; Reset fade delay
0008531E 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
00085322 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
00085324                            ; loc_72524:
00085324                            @fmloop:
00085324 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00085326 6A00                       		bpl.s	@nextfm			; Branch if not
00085328 522D 0009                  		addq.b	#1,TrackVolume(a5)	; Increase volume attenuation
0008532C 6A00                       		bpl.s	@sendfmtl		; Branch if still positive
0008532E 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00085332 6000                       		bra.s	@nextfm
00085334                            ; ===========================================================================
00085334                            ; loc_72534:
00085334                            @sendfmtl:
00085334 4EBA 0000                  		jsr	SendVoiceTL(pc)
00085338                            ; loc_72538:
00085338                            @nextfm:
00085338 DAFC 0030                  		adda.w	#TrackSz,a5
0008533C 51CF FFE6                  		dbf	d7,@fmloop
00085340                            
00085340 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7	; 3 PSG tracks
00085342                            ; loc_72542:
00085342                            @psgloop:
00085342 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00085344 6A00                       		bpl.s	@nextpsg		; branch if not
00085346 522D 0009                  		addq.b	#1,TrackVolume(a5)	; Increase volume attenuation
0008534A 0C2D 0010 0009             		cmpi.b	#$10,TrackVolume(a5)	; Is it greater than $F?
00085350 6500                       		blo.s	@sendpsgvol		; Branch if not
00085352 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00085356 6000                       		bra.s	@nextpsg
00085358                            ; ===========================================================================
00085358                            ; loc_72558:
00085358                            @sendpsgvol:
00085358 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Store new volume attenuation
0008535C 4EBA 0000                  		jsr	SetPSGVolume(pc)
00085360                            ; loc_72560:
00085360                            @nextpsg:
00085360 DAFC 0030                  		adda.w	#TrackSz,a5
00085364 51CF FFDC                  		dbf	d7,@psgloop
00085368                            
00085368 4E75                       		rts	
0008536A                            ; End of function DoFadeOut
0008536A                            
0008536A                            
0008536A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008536A                            
0008536A                            ; sub_7256A:
0008536A                            FMSilenceAll:
0008536A 7602                       		moveq	#2,d3		; 3 FM channels for each YM2612 parts
0008536C 7028                       		moveq	#$28,d0		; FM key on/off register
0008536E                            ; loc_7256E:
0008536E                            @noteoffloop:
0008536E 1203                       		move.b	d3,d1
00085370 4EBA 0000                  		jsr	WriteFMI(pc)
00085374 5801                       		addq.b	#4,d1		; Move to YM2612 part 1
00085376 4EBA 0000                  		jsr	WriteFMI(pc)
0008537A 51CB FFF2                  		dbf	d3,@noteoffloop
0008537E                            
0008537E 7040                       		moveq	#$40,d0		; Set TL on FM channels...
00085380 727F                       		moveq	#$7F,d1		; ... to total attenuation...
00085382 7802                       		moveq	#2,d4		; ... for all 3 channels...
00085384                            ; loc_72584:
00085384                            @channelloop:
00085384 7603                       		moveq	#3,d3		; ... for all operators on each channel...
00085386                            ; loc_72586:
00085386                            @channeltlloop:
00085386 4EBA 0000                  		jsr	WriteFMI(pc)	; ... for part 0...
0008538A 4EBA 0000                  		jsr	WriteFMII(pc)	; ... and part 1.
0008538E 5840                       		addq.w	#4,d0		; Next TL operator
00085390 51CB FFF4                  		dbf	d3,@channeltlloop
00085394                            
00085394 0400 000F                  		subi.b	#$F,d0		; Move to TL operator 1 of next channel
00085398 51CC FFEA                  		dbf	d4,@channelloop
0008539C                            
0008539C 4E75                       		rts	
0008539E                            ; End of function FMSilenceAll
0008539E                            
0008539E                            ; ===========================================================================
0008539E                            ; ---------------------------------------------------------------------------
0008539E                            ; Stop music
0008539E                            ; ---------------------------------------------------------------------------
0008539E                            ; Sound_E4: StopSoundAndMusic:
0008539E                            StopAllSound:
0008539E 702B                       		moveq	#$2B,d0		; Enable/disable DAC
000853A0 123C 0080                  		move.b	#$80,d1		; Enable DAC
000853A4 4EBA 0000                  		jsr	WriteFMI(pc)
000853A8 7027                       		moveq	#$27,d0		; Timers, FM3/FM6 mode
000853AA 7200                       		moveq	#0,d1		; FM3/FM6 normal mode, disable timers
000853AC 4EBA 0000                  		jsr	WriteFMI(pc)
000853B0 204E                       		movea.l	a6,a0
000853B2                            		; DANGER! This should be clearing all variables and track data, but misses the last $10 bytes of v_spcsfx_psg3_track.
000853B2                            		; Remove the '-$10' to fix this.
000853B2 303C 00E7                  		move.w	#((v_spcsfx_track_ram_end-v_startofvariables)/4)-1,d0	; Clear $390 bytes: all variables and most track data
000853B6                            ; loc_725B6:
000853B6                            @clearramloop:
000853B6 4298                       		clr.l	(a0)+
000853B8 51C8 FFFC                  		dbf	d0,@clearramloop
000853BC                            
000853BC 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; set music to $80 (silence)
000853C2 4EBA FFA6                  		jsr	FMSilenceAll(pc)
000853C6 6000 0000                  		bra.w	PSGSilenceAll
000853CA                            
000853CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000853CA                            
000853CA                            ; sub_725CA:
000853CA                            InitMusicPlayback:
000853CA 204E                       		movea.l	a6,a0
000853CC                            		; Save several values
000853CC 1216                       		move.b	v_sndprio(a6),d1
000853CE 142E 0027                  		move.b	f_1up_playing(a6),d2
000853D2 162E 002A                  		move.b	f_speedup(a6),d3
000853D6 182E 0026                  		move.b	v_fadein_counter(a6),d4
000853DA                            		; DANGER! Only v_soundqueue0 and v_soundqueue1 are backed up, once again breaking v_soundqueue2
000853DA 3A2E 000A                  		move.w	v_soundqueue0(a6),d5
000853DE 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; Clear $220 bytes: all variables and music track data
000853E2                            ; loc_725E4:
000853E2                            @clearramloop:
000853E2 4298                       		clr.l	(a0)+
000853E4 51C8 FFFC                  		dbf	d0,@clearramloop
000853E8                            
000853E8                            		; Restore the values saved above
000853E8 1C81                       		move.b	d1,v_sndprio(a6)
000853EA 1D42 0027                  		move.b	d2,f_1up_playing(a6)
000853EE 1D43 002A                  		move.b	d3,f_speedup(a6)
000853F2 1D44 0026                  		move.b	d4,v_fadein_counter(a6)
000853F6 3D45 000A                  		move.w	d5,v_soundqueue0(a6)
000853FA 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; set music to $80 (silence)
00085400                            		; DANGER! This silences ALL channels, even the ones being used
00085400                            		; by SFX, and not music! @sendfmnoteoff does this already, and
00085400                            		; doesn't affect SFX channels, either.
00085400                            		; This should be replaced with an 'rts'.
00085400 4EBA FF68                  		jsr	FMSilenceAll(pc)
00085404 6000 0000                  		bra.w	PSGSilenceAll
00085408                            		; DANGER! InitMusicPlayback, and Sound_PlayBGM for that matter,
00085408                            		; don't do a very good job of setting up the music tracks.
00085408                            		; Tracks that aren't defined in a music file's header don't have
00085408                            		; their channels defined, meaning @sendfmnoteoff won't silence
00085408                            		; hardware properly. In combination with removing the above
00085408                            		; calls to FMSilenceAll/PSGSilenceAll, this will cause hanging
00085408                            		; notes.
00085408                            		; To fix this, I suggest using this code, instead of an 'rts':
00085408                            		;lea	v_music_track_ram+TrackVoiceControl(a6),a1
00085408                            		;lea	FMDACInitBytes(pc),a2
00085408                            		;moveq	#((v_music_fmdac_tracks_end-v_music_fmdac_tracks)/TrackSz)-1,d1		; 7 DAC/FM tracks
00085408                            		;bsr.s	@writeloop
00085408                            		;lea	PSGInitBytes(pc),a2
00085408                            		;moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d1	; 3 PSG tracks
00085408                            
00085408                            ;@writeloop:
00085408                            		;move.b	(a2)+,(a1)		; Write track's channel byte
00085408                            		;lea	TrackSz(a1),a1		; Next track
00085408                            		;dbf	d1,@writeloop		; Loop for all DAC/FM/PSG tracks
00085408                            
00085408                            		;rts
00085408                            	
00085408                            ; End of function InitMusicPlayback
00085408                            
00085408                            
00085408                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085408                            
00085408                            ; sub_7260C:
00085408                            TempoWait:
00085408 1D6E 0002 0001             		move.b	v_main_tempo(a6),v_main_tempo_timeout(a6)	; Reset main tempo timeout
0008540E 41EE 004E                  		lea	v_music_track_ram+TrackDurationTimeout(a6),a0	; note timeout
00085412 7030                       		moveq	#TrackSz,d0
00085414 7209                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d1		; 1 DAC + 6 FM + 3 PSG tracks
00085416                            ; loc_7261A:
00085416                            @tempoloop:
00085416 5210                       		addq.b	#1,(a0)	; Delay note by 1 frame
00085418 D0C0                       		adda.w	d0,a0	; Advance to next track
0008541A 51C9 FFFA                  		dbf	d1,@tempoloop
0008541E                            
0008541E 4E75                       		rts	
00085420                            ; End of function TempoWait
00085420                            
00085420                            ; ===========================================================================
00085420                            ; ---------------------------------------------------------------------------
00085420                            ; Speed	up music
00085420                            ; ---------------------------------------------------------------------------
00085420                            ; Sound_E2:
00085420                            SpeedUpMusic:
00085420 4A2E 0027                  		tst.b	f_1up_playing(a6)
00085424 6600                       		bne.s	@speedup_1up
00085426 1D6E 0029 0002             		move.b	v_speeduptempo(a6),v_main_tempo(a6)
0008542C 1D6E 0029 0001             		move.b	v_speeduptempo(a6),v_main_tempo_timeout(a6)
00085432 1D7C 0080 002A             		move.b	#$80,f_speedup(a6)
00085438 4E75                       		rts	
0008543A                            ; ===========================================================================
0008543A                            ; loc_7263E:
0008543A                            @speedup_1up:
0008543A 1D6E 03C9 03A2             		move.b	v_1up_ram_copy+v_speeduptempo(a6),v_1up_ram_copy+v_main_tempo(a6)
00085440 1D6E 03C9 03A1             		move.b	v_1up_ram_copy+v_speeduptempo(a6),v_1up_ram_copy+v_main_tempo_timeout(a6)
00085446 1D7C 0080 03CA             		move.b	#$80,v_1up_ram_copy+f_speedup(a6)
0008544C 4E75                       		rts	
0008544E                            ; ===========================================================================
0008544E                            ; ---------------------------------------------------------------------------
0008544E                            ; Change music back to normal speed
0008544E                            ; ---------------------------------------------------------------------------
0008544E                            ; Sound_E3:
0008544E                            SlowDownMusic:
0008544E 4A2E 0027                  		tst.b	f_1up_playing(a6)
00085452 6600                       		bne.s	@slowdown_1up
00085454 1D6E 0028 0002             		move.b	v_tempo_mod(a6),v_main_tempo(a6)
0008545A 1D6E 0028 0001             		move.b	v_tempo_mod(a6),v_main_tempo_timeout(a6)
00085460 422E 002A                  		clr.b	f_speedup(a6)
00085464 4E75                       		rts	
00085466                            ; ===========================================================================
00085466                            ; loc_7266A:
00085466                            @slowdown_1up:
00085466 1D6E 03C8 03A2             		move.b	v_1up_ram_copy+v_tempo_mod(a6),v_1up_ram_copy+v_main_tempo(a6)
0008546C 1D6E 03C8 03A1             		move.b	v_1up_ram_copy+v_tempo_mod(a6),v_1up_ram_copy+v_main_tempo_timeout(a6)
00085472 422E 03CA                  		clr.b	v_1up_ram_copy+f_speedup(a6)
00085476 4E75                       		rts	
00085478                            
00085478                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085478                            
00085478                            ; sub_7267C:
00085478                            DoFadeIn:
00085478 4A2E 0025                  		tst.b	v_fadein_delay(a6)	; Has fadein delay expired?
0008547C 6700                       		beq.s	@continuefade		; Branch if yes
0008547E 532E 0025                  		subq.b	#1,v_fadein_delay(a6)
00085482 4E75                       		rts	
00085484                            ; ===========================================================================
00085484                            ; loc_72688:
00085484                            @continuefade:
00085484 4A2E 0026                  		tst.b	v_fadein_counter(a6)	; Is fade done?
00085488 6700                       		beq.s	@fadedone		; Branch if yes
0008548A 532E 0026                  		subq.b	#1,v_fadein_counter(a6)	; Update fade counter
0008548E 1D7C 0002 0025             		move.b	#2,v_fadein_delay(a6)	; Reset fade delay
00085494 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
00085498 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
0008549A                            ; loc_7269E:
0008549A                            @fmloop:
0008549A 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
0008549C 6A00                       		bpl.s	@nextfm			; Branch if not
0008549E 532D 0009                  		subq.b	#1,TrackVolume(a5)	; Reduce volume attenuation
000854A2 4EBA 0000                  		jsr	SendVoiceTL(pc)
000854A6                            ; loc_726AA:
000854A6                            @nextfm:
000854A6 DAFC 0030                  		adda.w	#TrackSz,a5
000854AA 51CF FFEE                  		dbf	d7,@fmloop
000854AE 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7		; 3 PSG tracks
000854B0                            ; loc_726B4:
000854B0                            @psgloop:
000854B0 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000854B2 6A00                       		bpl.s	@nextpsg		; Branch if not
000854B4 532D 0009                  		subq.b	#1,TrackVolume(a5)	; Reduce volume attenuation
000854B8 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Get value
000854BC 0C06 0010                  		cmpi.b	#$10,d6			; Is it is < $10?
000854C0 6500                       		blo.s	@sendpsgvol		; Branch if yes
000854C2 7C0F                       		moveq	#$F,d6			; Limit to $F (maximum attenuation)
000854C4                            ; loc_726C8:
000854C4                            @sendpsgvol:
000854C4 4EBA 0000                  		jsr	SetPSGVolume(pc)
000854C8                            ; loc_726CC:
000854C8                            @nextpsg:
000854C8 DAFC 0030                  		adda.w	#TrackSz,a5
000854CC 51CF FFE2                  		dbf	d7,@psgloop
000854D0 4E75                       		rts	
000854D2                            ; ===========================================================================
000854D2                            ; loc_726D6:
000854D2                            @fadedone:
000854D2 08AE 0002 0040             		bclr	#2,v_music_dac_track+TrackPlaybackControl(a6)	; Clear 'SFX overriding' bit
000854D8 422E 0024                  		clr.b	f_fadein_flag(a6)				; Stop fadein
000854DC 4E75                       		rts	
000854DE                            ; End of function DoFadeIn
000854DE                            
000854DE                            ; ===========================================================================
000854DE                            ; loc_726E2:
000854DE                            FMNoteOn:
000854DE 0815 0001                  		btst	#1,(a5)		; Is track resting? (TrackPlaybackControl)
000854E2 6600                       		bne.s	@locret		; Return if so
000854E4 0815 0002                  		btst	#2,(a5)		; Is track being overridden? (TrackPlaybackControl)
000854E8 6600                       		bne.s	@locret		; Return if so
000854EA 7028                       		moveq	#$28,d0		; Note on/off register
000854EC 122D 0001                  		move.b	TrackVoiceControl(a5),d1 ; Get channel bits
000854F0 0001 00F0                  		ori.b	#$F0,d1		; Note on on all operators
000854F4 6000 0000                  		bra.w	WriteFMI
000854F8                            ; ===========================================================================
000854F8                            ; locret_726FC:
000854F8                            @locret:
000854F8 4E75                       		rts	
000854FA                            
000854FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000854FA                            
000854FA                            ; sub_726FE:
000854FA                            FMNoteOff:
000854FA 0815 0004                  		btst	#4,(a5)		; Is 'do not attack next note' set? (TrackPlaybackControl)
000854FE 6600                       		bne.s	locret_72714	; Return if yes
00085500 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
00085504 6600                       		bne.s	locret_72714	; Return if yes
00085506                            ; loc_7270A:
00085506                            SendFMNoteOff:
00085506 7028                       		moveq	#$28,d0		; Note on/off register
00085508 122D 0001                  		move.b	TrackVoiceControl(a5),d1 ; Note off to this channel
0008550C 6000 0000                  		bra.w	WriteFMI
00085510                            ; ===========================================================================
00085510                            
00085510                            locret_72714:
00085510 4E75                       		rts	
00085512                            ; End of function FMNoteOff
00085512                            
00085512                            ; ===========================================================================
00085512                            ; loc_72716:
00085512                            WriteFMIorIIMain:
00085512 0815 0002                  		btst	#2,(a5)		; Is track being overriden by sfx? (TrackPlaybackControl)
00085516 6600                       		bne.s	@locret		; Return if yes
00085518 6000 0000                  		bra.w	WriteFMIorII
0008551C                            ; ===========================================================================
0008551C                            ; locret_72720:
0008551C                            @locret:
0008551C 4E75                       		rts	
0008551E                            
0008551E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008551E                            
0008551E                            ; sub_72722:
0008551E                            WriteFMIorII:
0008551E 082D 0002 0001             		btst	#2,TrackVoiceControl(a5)	; Is this bound for part I or II?
00085524 6600                       		bne.s	WriteFMIIPart			; Branch if for part II
00085526 D02D 0001                  		add.b	TrackVoiceControl(a5),d0	; Add in voice control bits
0008552A                            ; End of function WriteFMIorII
0008552A                            
0008552A                            
0008552A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008552A                            
0008552A                            ; The reason I think this is an *early* SMPS 68k Type 1b
0008552A                            ; is because this subroutine is the one from Type 1a:
0008552A                            ; other Type 1b drivers have a newer, optimised version.
0008552A                            ; The driver itself is Type 1b, with this odd exception.
0008552A                            
0008552A                            ; sub_7272E:
0008552A                            WriteFMI:
0008552A 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
00085530 0802 0007                  		btst	#7,d2		; Is FM busy?
00085534 66F4                       		bne.s	WriteFMI	; Loop if so
00085536 13C0 00A0 4000             		move.b	d0,(ym2612_a0).l
0008553C 4E71                       		nop	
0008553E 4E71                       		nop	
00085540 4E71                       		nop	
00085542                            ; loc_72746:
00085542                            @waitloop:
00085542 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
00085548 0802 0007                  		btst	#7,d2		; Is FM busy?
0008554C 66F4                       		bne.s	@waitloop	; Loop if so
0008554E                            
0008554E 13C1 00A0 4001             		move.b	d1,(ym2612_d0).l
00085554 4E75                       		rts	
00085556                            ; End of function WriteFMI
00085556                            
00085556                            ; ===========================================================================
00085556                            ; loc_7275A:
00085556                            WriteFMIIPart:
00085556 142D 0001                  		move.b	TrackVoiceControl(a5),d2 ; Get voice control bits
0008555A 0882 0002                  		bclr	#2,d2			; Clear chip toggle
0008555E D002                       		add.b	d2,d0			; Add in to destination register
00085560                            
00085560                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085560                            
00085560                            ; sub_72764:
00085560                            WriteFMII:
00085560 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
00085566 0802 0007                  		btst	#7,d2		; Is FM busy?
0008556A 66F4                       		bne.s	WriteFMII	; Loop if so
0008556C 13C0 00A0 4002             		move.b	d0,(ym2612_a1).l
00085572 4E71                       		nop	
00085574 4E71                       		nop	
00085576 4E71                       		nop	
00085578                            ; loc_7277C:
00085578                            @waitloop:
00085578 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
0008557E 0802 0007                  		btst	#7,d2		; Is FM busy?
00085582 66F4                       		bne.s	@waitloop	; Loop if so
00085584                            
00085584 13C1 00A0 4003             		move.b	d1,(ym2612_d1).l
0008558A 4E75                       		rts	
0008558C                            ; End of function WriteFMII
0008558C                            
0008558C                            ; ===========================================================================
0008558C                            ; ---------------------------------------------------------------------------
0008558C                            ; FM Note Values: b-0 to a#8
0008558C                            ; ---------------------------------------------------------------------------
0008558C                            ; word_72790: FM_Notes:
0008558C                            FMFrequencies:
0008558C 025E 0284 02AB 02D3 02FE+  	dc.w $025E,$0284,$02AB,$02D3,$02FE,$032D,$035C,$038F,$03C5,$03FF,$043C,$047C
000855A4 0A5E 0A84 0AAB 0AD3 0AFE+  	dc.w $0A5E,$0A84,$0AAB,$0AD3,$0AFE,$0B2D,$0B5C,$0B8F,$0BC5,$0BFF,$0C3C,$0C7C
000855BC 125E 1284 12AB 12D3 12FE+  	dc.w $125E,$1284,$12AB,$12D3,$12FE,$132D,$135C,$138F,$13C5,$13FF,$143C,$147C
000855D4 1A5E 1A84 1AAB 1AD3 1AFE+  	dc.w $1A5E,$1A84,$1AAB,$1AD3,$1AFE,$1B2D,$1B5C,$1B8F,$1BC5,$1BFF,$1C3C,$1C7C
000855EC 225E 2284 22AB 22D3 22FE+  	dc.w $225E,$2284,$22AB,$22D3,$22FE,$232D,$235C,$238F,$23C5,$23FF,$243C,$247C
00085604 2A5E 2A84 2AAB 2AD3 2AFE+  	dc.w $2A5E,$2A84,$2AAB,$2AD3,$2AFE,$2B2D,$2B5C,$2B8F,$2BC5,$2BFF,$2C3C,$2C7C
0008561C 325E 3284 32AB 32D3 32FE+  	dc.w $325E,$3284,$32AB,$32D3,$32FE,$332D,$335C,$338F,$33C5,$33FF,$343C,$347C
00085634 3A5E 3A84 3AAB 3AD3 3AFE+  	dc.w $3A5E,$3A84,$3AAB,$3AD3,$3AFE,$3B2D,$3B5C,$3B8F,$3BC5,$3BFF,$3C3C,$3C7C
0008564C                            
0008564C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008564C                            
0008564C                            ; sub_72850:
0008564C                            PSGUpdateTrack:
0008564C 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5)	; Update note timeout
00085650 6600                       		bne.s	@notegoing
00085652 0895 0004                  		bclr	#4,(a5)				; Clear 'do not attack note' bit (TrackPlaybackControl)
00085656 4EBA 0000                  		jsr	PSGDoNext(pc)
0008565A 4EBA 0000                  		jsr	PSGDoNoteOn(pc)
0008565E 6000 0000                  		bra.w	PSGDoVolFX
00085662                            ; ===========================================================================
00085662                            ; loc_72866:
00085662                            @notegoing:
00085662 4EBA F4CA                  		jsr	NoteTimeoutUpdate(pc)
00085666 4EBA 0000                  		jsr	PSGUpdateVolFX(pc)
0008566A 4EBA F4EA                  		jsr	DoModulation(pc)
0008566E 4EBA 0000                  		jsr	PSGUpdateFreq(pc)	; It would be better if this were a jmp and the rts was removed
00085672 4E75                       		rts
00085674                            ; End of function PSGUpdateTrack
00085674                            
00085674                            
00085674                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085674                            
00085674                            ; sub_72878:
00085674                            PSGDoNext:
00085674 0895 0001                  		bclr	#1,(a5)				; Clear 'track at rest' bit (TrackPlaybackControl)
00085678 286D 0004                  		movea.l	TrackDataPointer(a5),a4	; Get track data pointer
0008567C                            ; loc_72880:
0008567C                            @noteloop:
0008567C 7A00                       		moveq	#0,d5
0008567E 1A1C                       		move.b	(a4)+,d5	; Get byte from track
00085680 0C05 00E0                  		cmpi.b	#$E0,d5		; Is it a coord. flag?
00085684 6500                       		blo.s	@gotnote	; Branch if not
00085686 4EBA 0000                  		jsr	CoordFlag(pc)
0008568A 60F0                       		bra.s	@noteloop
0008568C                            ; ===========================================================================
0008568C                            ; loc_72890:
0008568C                            @gotnote:
0008568C 4A05                       		tst.b	d5		; Is it a note?
0008568E 6A00                       		bpl.s	@gotduration	; Branch if not
00085690 4EBA 0000                  		jsr	PSGSetFreq(pc)
00085694 1A1C                       		move.b	(a4)+,d5	; Get another byte
00085696 4A05                       		tst.b	d5		; Is it a duration?
00085698 6A00                       		bpl.s	@gotduration	; Branch if yes
0008569A 534C                       		subq.w	#1,a4		; Put byte back
0008569C 6000 F452                  		bra.w	FinishTrackUpdate
000856A0                            ; ===========================================================================
000856A0                            ; loc_728A4:
000856A0                            @gotduration:
000856A0 4EBA F42E                  		jsr	SetDuration(pc)
000856A4 6000 F44A                  		bra.w	FinishTrackUpdate
000856A8                            ; End of function PSGDoNext
000856A8                            
000856A8                            
000856A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000856A8                            
000856A8                            ; sub_728AC:
000856A8                            PSGSetFreq:
000856A8 0405 0081                  		subi.b	#$81,d5		; Convert to 0-based index
000856AC 6500                       		bcs.s	@restpsg	; If $80, put track at rest
000856AE DA2D 0008                  		add.b	TrackTranspose(a5),d5 ; Add in channel transposition
000856B2 0245 007F                  		andi.w	#$7F,d5		; Clear high byte and sign bit
000856B6 E34D                       		lsl.w	#1,d5
000856B8 41FA 0000                  		lea	PSGFrequencies(pc),a0
000856BC 3B70 5000 0010             		move.w	(a0,d5.w),TrackFreq(a5)	; Set new frequency
000856C2 6000 F42C                  		bra.w	FinishTrackUpdate
000856C6                            ; ===========================================================================
000856C6                            ; loc_728CA:
000856C6                            @restpsg:
000856C6 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
000856CA 3B7C FFFF 0010             		move.w	#-1,TrackFreq(a5)	; Invalidate note frequency
000856D0 4EBA F41E                  		jsr	FinishTrackUpdate(pc)
000856D4 6000 0000                  		bra.w	PSGNoteOff
000856D8                            ; End of function PSGSetFreq
000856D8                            
000856D8                            
000856D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000856D8                            
000856D8                            ; sub_728DC:
000856D8                            PSGDoNoteOn:
000856D8 3C2D 0010                  		move.w	TrackFreq(a5),d6	; Get note frequency
000856DC 6B00                       		bmi.s	PSGSetRest		; If invalid, branch
000856DE                            ; End of function PSGDoNoteOn
000856DE                            
000856DE                            
000856DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000856DE                            
000856DE                            ; sub_728E2:
000856DE                            PSGUpdateFreq:
000856DE 102D 001E                  		move.b	TrackDetune(a5),d0	; Get detune value
000856E2 4880                       		ext.w	d0
000856E4 DC40                       		add.w	d0,d6		; Add to frequency
000856E6 0815 0002                  		btst	#2,(a5)		; Is track being overridden? (TrackPlaybackControl)
000856EA 6600                       		bne.s	@locret		; Return if yes
000856EC 0815 0001                  		btst	#1,(a5)		; Is track at rest? (TrackPlaybackControl)
000856F0 6600                       		bne.s	@locret		; Return if yes
000856F2 102D 0001                  		move.b	TrackVoiceControl(a5),d0 ; Get channel bits
000856F6 0C00 00E0                  		cmpi.b	#$E0,d0		; Is it a noise channel?
000856FA 6600                       		bne.s	@notnoise	; Branch if not
000856FC 103C 00C0                  		move.b	#$C0,d0		; Use PSG 3 channel bits
00085700                            ; loc_72904:
00085700                            @notnoise:
00085700 3206                       		move.w	d6,d1
00085702 0201 000F                  		andi.b	#$F,d1		; Low nibble of frequency
00085706 8001                       		or.b	d1,d0		; Latch tone data to channel
00085708 E84E                       		lsr.w	#4,d6		; Get upper 6 bits of frequency
0008570A 0206 003F                  		andi.b	#$3F,d6		; Send to latched channel
0008570E 13C0 00C0 0011             		move.b	d0,(psg_input).l
00085714 13C6 00C0 0011             		move.b	d6,(psg_input).l
0008571A                            ; locret_7291E:
0008571A                            @locret:
0008571A 4E75                       		rts	
0008571C                            ; End of function PSGUpdateFreq
0008571C                            
0008571C                            ; ===========================================================================
0008571C                            ; loc_72920:
0008571C                            PSGSetRest:
0008571C 08D5 0001                  		bset	#1,(a5)	; Set 'track at rest' bit (TrackPlaybackControl)
00085720 4E75                       		rts	
00085722                            
00085722                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085722                            
00085722                            ; sub_72926:
00085722                            PSGUpdateVolFX:
00085722 4A2D 000B                  		tst.b	TrackVoiceIndex(a5)	; Test PSG tone
00085726 6700 0000                  		beq.w	locret_7298A		; Return if it is zero
0008572A                            ; loc_7292E:
0008572A                            PSGDoVolFX:	; This can actually be made a bit more efficient, see the comments for more
0008572A 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Get volume
0008572E 7000                       		moveq	#0,d0
00085730 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Get PSG tone
00085734 6700                       		beq.s	SetPSGVolume
00085736 2079 0008 46F8             		movea.l	(Go_PSGIndex).l,a0
0008573C 5340                       		subq.w	#1,d0
0008573E E548                       		lsl.w	#2,d0
00085740 2070 0000                  		movea.l	(a0,d0.w),a0
00085744 102D 000C                  		move.b	TrackVolEnvIndex(a5),d0	; Get volume envelope index		; move.b	TrackVolEnvIndex(a5),d0
00085748 1030 0000                  		move.b	(a0,d0.w),d0			; Volume envelope value			; addq.b	#1,TrackVolEnvIndex(a5)
0008574C 522D 000C                  		addq.b	#1,TrackVolEnvIndex(a5)	; Increment volume envelope index	; move.b	(a0,d0.w),d0
00085750 0800 0007                  		btst	#7,d0				; Is volume envelope value negative?	; <-- makes this line redundant
00085754 6700                       		beq.s	@gotflutter			; Branch if not				; but you gotta make this one a bpl
00085756 0C00 0080                  		cmpi.b	#$80,d0				; Is it the terminator?			; Since this is the only check, you can take the optimisation a step further:
0008575A 6700                       		beq.s	VolEnvHold			; If so, branch				; Change the previous beq (bpl) to a bmi and make it branch to VolEnvHold to make these last two lines redundant
0008575C                            ; loc_72960:
0008575C                            @gotflutter:
0008575C DC40                       		add.w	d0,d6		; Add volume envelope value to volume
0008575E 0C06 0010                  		cmpi.b	#$10,d6		; Is volume $10 or higher?
00085762 6500                       		blo.s	SetPSGVolume	; Branch if not
00085764 7C0F                       		moveq	#$F,d6		; Limit to silence and fall through
00085766                            ; End of function PSGUpdateVolFX
00085766                            
00085766                            
00085766                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085766                            
00085766                            ; sub_7296A:
00085766                            SetPSGVolume:
00085766 0815 0001                  		btst	#1,(a5)		; Is track at rest? (TrackPlaybackControl)
0008576A 6600                       		bne.s	locret_7298A	; Return if so
0008576C 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
00085770 6600                       		bne.s	locret_7298A	; Return if so
00085772 0815 0004                  		btst	#4,(a5)		; Is track set to not attack next note? (TrackPlaybackControl)
00085776 6600                       		bne.s	PSGCheckNoteTimeout ; Branch if yes
00085778                            ; loc_7297C:
00085778                            PSGSendVolume:
00085778 8C2D 0001                  		or.b	TrackVoiceControl(a5),d6 ; Add in track selector bits
0008577C 0606 0010                  		addi.b	#$10,d6			; Mark it as a volume command
00085780 13C6 00C0 0011             		move.b	d6,(psg_input).l
00085786                            
00085786                            locret_7298A:
00085786 4E75                       		rts	
00085788                            ; ===========================================================================
00085788                            ; loc_7298C: PSGCheckNoteFill:
00085788                            PSGCheckNoteTimeout:
00085788 4A2D 0013                  		tst.b	TrackNoteTimeoutMaster(a5)	; Is note timeout on?
0008578C 67EA                       		beq.s	PSGSendVolume			; Branch if not
0008578E 4A2D 0012                  		tst.b	TrackNoteTimeout(a5)		; Has note timeout expired?
00085792 66E4                       		bne.s	PSGSendVolume			; Branch if not
00085794 4E75                       		rts	
00085796                            ; End of function SetPSGVolume
00085796                            
00085796                            ; ===========================================================================
00085796                            ; loc_7299A: FlutterDone:
00085796                            VolEnvHold:
00085796 532D 000C                  		subq.b	#1,TrackVolEnvIndex(a5)	; Decrement volume envelope index
0008579A 4E75                       		rts	
0008579C                            
0008579C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008579C                            
0008579C                            ; sub_729A0:
0008579C                            PSGNoteOff:
0008579C 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
000857A0 6600                       		bne.s	locret_729B4	; Return if so
000857A2                            ; loc_729A6:
000857A2                            SendPSGNoteOff:
000857A2 102D 0001                  		move.b	TrackVoiceControl(a5),d0	; PSG channel to change
000857A6 0000 001F                  		ori.b	#$1F,d0				; Maximum volume attenuation
000857AA 13C0 00C0 0011             		move.b	d0,(psg_input).l
000857B0                            		; DANGER! If InitMusicPlayback doesn't silence all channels, there's the
000857B0                            		; risk of music accidentally playing noise because it can't detect if
000857B0                            		; the PSG4/noise channel needs muting on track initialisation.
000857B0                            		; S&K's driver fixes it by doing this:
000857B0 0C00 00DF                  		cmpi.b	#$DF,d0				; Are stopping PSG3?
000857B4 6600                       		bne.s	locret_729B4
000857B6 13FC 00FF 00C0 0011        		move.b	#$FF,(psg_input).l		; If so, stop noise channel while we're at it
000857BE                            
000857BE                            locret_729B4:
000857BE 4E75                       		rts	
000857C0                            ; End of function PSGNoteOff
000857C0                            
000857C0                            
000857C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000857C0                            
000857C0                            ; sub_729B6:
000857C0                            PSGSilenceAll:
000857C0 41F9 00C0 0011             		lea	(psg_input).l,a0
000857C6 10BC 009F                  		move.b	#$9F,(a0)	; Silence PSG 1
000857CA 10BC 00BF                  		move.b	#$BF,(a0)	; Silence PSG 2
000857CE 10BC 00DF                  		move.b	#$DF,(a0)	; Silence PSG 3
000857D2 10BC 00FF                  		move.b	#$FF,(a0)	; Silence noise channel
000857D6 4E75                       		rts	
000857D8                            ; End of function PSGSilenceAll
000857D8                            
000857D8                            ; ===========================================================================
000857D8                            ; word_729CE:
000857D8                            PSGFrequencies:
000857D8 0356 0326 02F9 02CE 02A5+  		dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A
000857E8 021A 01FB 01DF 01C4 01AB+  		dc.w $21A, $1FB, $1DF, $1C4, $1AB, $193, $17D, $167
000857F8 0153 0140 012E 011D 010D+  		dc.w $153, $140, $12E, $11D, $10D,  $FE,  $EF,  $E2
00085808 00D6 00C9 00BE 00B4 00A9+  		dc.w  $D6,  $C9,  $BE,  $B4,  $A9,  $A0,  $97,  $8F
00085818 0087 007F 0078 0071 006B+  		dc.w  $87,  $7F,  $78,  $71,  $6B,  $65,  $5F,  $5A
00085828 0055 0050 004B 0047 0043+  		dc.w  $55,  $50,  $4B,  $47,  $43,  $40,  $3C,  $39
00085838 0036 0033 0030 002D 002B+  		dc.w  $36,  $33,  $30,  $2D,  $2B,  $28,  $26,  $24
00085848 0022 0020 001F 001D 001B+  		dc.w  $22,  $20,  $1F,  $1D,  $1B,  $1A,  $18,  $17
00085858 0016 0015 0013 0012 0011+  		dc.w  $16,  $15,  $13,  $12,  $11,    0
00085864                            
00085864                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085864                            
00085864                            ; sub_72A5A:
00085864                            CoordFlag:
00085864 0445 00E0                  		subi.w	#$E0,d5
00085868 E54D                       		lsl.w	#2,d5
0008586A 4EFB 5000                  		jmp	coordflagLookup(pc,d5.w)
0008586E                            ; End of function CoordFlag
0008586E                            
0008586E                            ; ===========================================================================
0008586E                            ; loc_72A64:
0008586E                            coordflagLookup:
0008586E 6000 0000                  		bra.w	cfPanningAMSFMS		; $E0
00085872                            ; ===========================================================================
00085872 6000 0000                  		bra.w	cfDetune		; $E1
00085876                            ; ===========================================================================
00085876 6000 0000                  		bra.w	cfSetCommunication	; $E2
0008587A                            ; ===========================================================================
0008587A 6000 0000                  		bra.w	cfJumpReturn		; $E3
0008587E                            ; ===========================================================================
0008587E 6000 0000                  		bra.w	cfFadeInToPrevious	; $E4
00085882                            ; ===========================================================================
00085882 6000 0000                  		bra.w	cfSetTempoDivider	; $E5
00085886                            ; ===========================================================================
00085886 6000 0000                  		bra.w	cfChangeFMVolume	; $E6
0008588A                            ; ===========================================================================
0008588A 6000 0000                  		bra.w	cfHoldNote		; $E7
0008588E                            ; ===========================================================================
0008588E 6000 0000                  		bra.w	cfNoteTimeout		; $E8
00085892                            ; ===========================================================================
00085892 6000 0000                  		bra.w	cfChangeTransposition	; $E9
00085896                            ; ===========================================================================
00085896 6000 0000                  		bra.w	cfSetTempo		; $EA
0008589A                            ; ===========================================================================
0008589A 6000 0000                  		bra.w	cfSetTempoDividerAll	; $EB
0008589E                            ; ===========================================================================
0008589E 6000 0000                  		bra.w	cfChangePSGVolume	; $EC
000858A2                            ; ===========================================================================
000858A2 6000 0000                  		bra.w	cfClearPush		; $ED
000858A6                            ; ===========================================================================
000858A6 6000 0000                  		bra.w	cfStopSpecialFM4	; $EE
000858AA                            ; ===========================================================================
000858AA 6000 0000                  		bra.w	cfSetVoice		; $EF
000858AE                            ; ===========================================================================
000858AE 6000 0000                  		bra.w	cfModulation		; $F0
000858B2                            ; ===========================================================================
000858B2 6000 0000                  		bra.w	cfEnableModulation	; $F1
000858B6                            ; ===========================================================================
000858B6 6000 0000                  		bra.w	cfStopTrack		; $F2
000858BA                            ; ===========================================================================
000858BA 6000 0000                  		bra.w	cfSetPSGNoise		; $F3
000858BE                            ; ===========================================================================
000858BE 6000 0000                  		bra.w	cfDisableModulation	; $F4
000858C2                            ; ===========================================================================
000858C2 6000 0000                  		bra.w	cfSetPSGTone		; $F5
000858C6                            ; ===========================================================================
000858C6 6000 0000                  		bra.w	cfJumpTo		; $F6
000858CA                            ; ===========================================================================
000858CA 6000 0000                  		bra.w	cfRepeatAtPos		; $F7
000858CE                            ; ===========================================================================
000858CE 6000 0000                  		bra.w	cfJumpToGosub		; $F8
000858D2                            ; ===========================================================================
000858D2 6000 0000                  		bra.w	cfOpF9			; $F9
000858D6                            ; ===========================================================================
000858D6                            ; loc_72ACC:
000858D6                            cfPanningAMSFMS:
000858D6 121C                       		move.b	(a4)+,d1		; New AMS/FMS/panning value
000858D8 4A2D 0001                  		tst.b	TrackVoiceControl(a5)	; Is this a PSG track?
000858DC 6B00                       		bmi.s	locret_72AEA		; Return if yes
000858DE 102D 000A                  		move.b	TrackAMSFMSPan(a5),d0	; Get current AMS/FMS/panning
000858E2 0200 0037                  		andi.b	#$37,d0			; Retain bits 0-2, 3-4 if set
000858E6 8200                       		or.b	d0,d1			; Mask in new value
000858E8 1B41 000A                  		move.b	d1,TrackAMSFMSPan(a5)	; Store value
000858EC 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
000858F0 6000 FC20                  		bra.w	WriteFMIorIIMain
000858F4                            ; ===========================================================================
000858F4                            
000858F4                            locret_72AEA:
000858F4 4E75                       		rts	
000858F6                            ; ===========================================================================
000858F6                            ; loc_72AEC: cfAlterNotes:
000858F6                            cfDetune:
000858F6 1B5C 001E                  		move.b	(a4)+,TrackDetune(a5)	; Set detune value
000858FA 4E75                       		rts	
000858FC                            ; ===========================================================================
000858FC                            ; loc_72AF2: cfUnknown1:
000858FC                            cfSetCommunication:
000858FC 1D5C 0007                  		move.b	(a4)+,v_communication_byte(a6)	; Set otherwise unused communication byte to parameter
00085900 4E75                       		rts	
00085902                            ; ===========================================================================
00085902                            ; loc_72AF8:
00085902                            cfJumpReturn:
00085902 7000                       		moveq	#0,d0
00085904 102D 000D                  		move.b	TrackStackPointer(a5),d0 ; Track stack pointer
00085908 2875 0000                  		movea.l	(a5,d0.w),a4		; Set track return address
0008590C 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)		; Set 'popped' value to zero
00085914 544C                       		addq.w	#2,a4			; Skip jump target address from gosub flag
00085916 5800                       		addq.b	#4,d0			; Actually 'pop' value
00085918 1B40 000D                  		move.b	d0,TrackStackPointer(a5) ; Set new stack pointer
0008591C 4E75                       		rts	
0008591E                            ; ===========================================================================
0008591E                            ; loc_72B14:
0008591E                            cfFadeInToPrevious:
0008591E 204E                       		movea.l	a6,a0
00085920 43EE 03A0                  		lea	v_1up_ram_copy(a6),a1
00085924 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; $220 bytes to restore: all variables and music track data
00085928                            ; loc_72B1E:
00085928                            @restoreramloop:
00085928 20D9                       		move.l	(a1)+,(a0)+
0008592A 51C8 FFFC                  		dbf	d0,@restoreramloop
0008592E                            
0008592E 08EE 0002 0040             		bset	#2,v_music_dac_track+TrackPlaybackControl(a6)	; Set 'SFX overriding' bit
00085934 264D                       		movea.l	a5,a3
00085936 1C3C 0028                  		move.b	#$28,d6
0008593A 9C2E 0026                  		sub.b	v_fadein_counter(a6),d6			; If fade already in progress, this adjusts track volume accordingly
0008593E 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
00085940 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
00085944                            ; loc_72B3A:
00085944                            @fmloop:
00085944 0815 0007                  		btst	#7,(a5)		; Is track playing? (TrackPlaybackControl)
00085948 6700                       		beq.s	@nextfm		; Branch if not
0008594A 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
0008594E DD2D 0009                  		add.b	d6,TrackVolume(a5) ; Apply current volume fade-in
00085952 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
00085956 6600                       		bne.s	@nextfm		; Branch if yes
00085958 7000                       		moveq	#0,d0
0008595A 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Get voice
0008595E 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
00085962 4EBA 0000                  		jsr	SetVoice(pc)
00085966                            ; loc_72B5C:
00085966                            @nextfm:
00085966 DAFC 0030                  		adda.w	#TrackSz,a5
0008596A 51CF FFD8                  		dbf	d7,@fmloop
0008596E                            
0008596E 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7	; 3 PSG tracks
00085970                            ; loc_72B66:
00085970                            @psgloop:
00085970 0815 0007                  		btst	#7,(a5)		; Is track playing? (TrackPlaybackControl)
00085974 6700                       		beq.s	@nextpsg	; Branch if not
00085976 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
0008597A 4EBA FE20                  		jsr	PSGNoteOff(pc)
0008597E DD2D 0009                  		add.b	d6,TrackVolume(a5)	; Apply current volume fade-in
00085982                            ; loc_72B78:
00085982                            @nextpsg:
00085982 DAFC 0030                  		adda.w	#TrackSz,a5
00085986 51CF FFE8                  		dbf	d7,@psgloop
0008598A                            		
0008598A 2A4B                       		movea.l	a3,a5
0008598C 1D7C 0080 0024             		move.b	#$80,f_fadein_flag(a6)		; Trigger fade-in
00085992 1D7C 0028 0026             		move.b	#$28,v_fadein_counter(a6)	; Fade-in delay
00085998 422E 0027                  		clr.b	f_1up_playing(a6)
0008599C 33FC 0000 00A1 1100        		startZ80
000859A4 504F                       		addq.w	#8,sp		; Tamper return value so we don't return to caller
000859A6 4E75                       		rts	
000859A8                            ; ===========================================================================
000859A8                            ; loc_72B9E:
000859A8                            cfSetTempoDivider:
000859A8 1B5C 0002                  		move.b	(a4)+,TrackTempoDivider(a5)	; Set tempo divider on current track
000859AC 4E75                       		rts	
000859AE                            ; ===========================================================================
000859AE                            ; loc_72BA4: cfSetVolume:
000859AE                            cfChangeFMVolume:
000859AE 101C                       		move.b	(a4)+,d0		; Get parameter
000859B0 D12D 0009                  		add.b	d0,TrackVolume(a5)	; Add to current volume
000859B4 6000 0000                  		bra.w	SendVoiceTL
000859B8                            ; ===========================================================================
000859B8                            ; loc_72BAE: cfPreventAttack:
000859B8                            cfHoldNote:
000859B8 08D5 0004                  		bset	#4,(a5)		; Set 'do not attack next note' bit (TrackPlaybackControl)
000859BC 4E75                       		rts	
000859BE                            ; ===========================================================================
000859BE                            ; loc_72BB4: cfNoteFill
000859BE                            cfNoteTimeout:
000859BE 1B54 0012                  		move.b	(a4),TrackNoteTimeout(a5)		; Note fill timeout
000859C2 1B5C 0013                  		move.b	(a4)+,TrackNoteTimeoutMaster(a5)	; Note fill master
000859C6 4E75                       		rts	
000859C8                            ; ===========================================================================
000859C8                            ; loc_72BBE: cfAddKey:
000859C8                            cfChangeTransposition:
000859C8 101C                       		move.b	(a4)+,d0		; Get parameter
000859CA D12D 0008                  		add.b	d0,TrackTranspose(a5)	; Add to transpose value
000859CE 4E75                       		rts	
000859D0                            ; ===========================================================================
000859D0                            ; loc_72BC6:
000859D0                            cfSetTempo:
000859D0 1D54 0002                  		move.b	(a4),v_main_tempo(a6)		; Set main tempo
000859D4 1D5C 0001                  		move.b	(a4)+,v_main_tempo_timeout(a6)	; And reset timeout (!)
000859D8 4E75                       		rts	
000859DA                            ; ===========================================================================
000859DA                            ; loc_72BD0: cfSetTempoMod:
000859DA                            cfSetTempoDividerAll:
000859DA 41EE 0040                  		lea	v_music_track_ram(a6),a0
000859DE 101C                       		move.b	(a4)+,d0			; Get new tempo divider
000859E0 7230                       		moveq	#TrackSz,d1
000859E2 7409                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d2	; 1 DAC + 6 FM + 3 PSG tracks
000859E4                            ; loc_72BDA:
000859E4                            @trackloop:
000859E4 1140 0002                  		move.b	d0,TrackTempoDivider(a0)	; Set track's tempo divider
000859E8 D0C1                       		adda.w	d1,a0
000859EA 51CA FFF8                  		dbf	d2,@trackloop
000859EE                            
000859EE 4E75                       		rts	
000859F0                            ; ===========================================================================
000859F0                            ; loc_72BE6: cfChangeVolume:
000859F0                            cfChangePSGVolume:
000859F0 101C                       		move.b	(a4)+,d0		; Get volume change
000859F2 D12D 0009                  		add.b	d0,TrackVolume(a5)	; Apply it
000859F6 4E75                       		rts	
000859F8                            ; ===========================================================================
000859F8                            ; loc_72BEE:
000859F8                            cfClearPush:
000859F8 422E 002C                  		clr.b	f_push_playing(a6)	; Allow push sound to be played once more
000859FC 4E75                       		rts	
000859FE                            ; ===========================================================================
000859FE                            ; loc_72BF4:
000859FE                            cfStopSpecialFM4:
000859FE 0895 0007                  		bclr	#7,(a5)		; Stop track (TrackPlaybackControl)
00085A02 0895 0004                  		bclr	#4,(a5)		; Clear 'do not attack next note' bit (TrackPlaybackControl)
00085A06 4EBA FAF2                  		jsr	FMNoteOff(pc)
00085A0A 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is SFX using FM4?
00085A0E 6B00                       		bmi.s	@locexit					; Branch if yes
00085A10 264D                       		movea.l	a5,a3
00085A12 4BEE 0100                  		lea	v_music_fm4_track(a6),a5
00085A16 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
00085A1A 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00085A1E 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00085A22 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00085A26 4EBA 0000                  		jsr	SetVoice(pc)
00085A2A 2A4B                       		movea.l	a3,a5
00085A2C                            ; loc_72C22:
00085A2C                            @locexit:
00085A2C 504F                       		addq.w	#8,sp		; Tamper with return value so we don't return to caller
00085A2E 4E75                       		rts	
00085A30                            ; ===========================================================================
00085A30                            ; loc_72C26:
00085A30                            cfSetVoice:
00085A30 7000                       		moveq	#0,d0
00085A32 101C                       		move.b	(a4)+,d0		; Get new voice
00085A34 1B40 000B                  		move.b	d0,TrackVoiceIndex(a5)	; Store it
00085A38 0815 0002                  		btst	#2,(a5)			; Is SFX overriding this track? (TrackPlaybackControl)
00085A3C 6600 0000                  		bne.w	locret_72CAA		; Return if yes
00085A40 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Music voice pointer
00085A44 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating a music track?
00085A48 6700                       		beq.s	SetVoice		; If yes, branch
00085A4A 226D 0020                  		movea.l	TrackVoicePtr(a5),a1	; SFX track voice pointer
00085A4E 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating a SFX track?
00085A52 6B00                       		bmi.s	SetVoice		; If yes, branch
00085A54 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1 ; Special SFX voice pointer
00085A58                            
00085A58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085A58                            
00085A58                            ; sub_72C4E:
00085A58                            SetVoice:
00085A58 5340                       		subq.w	#1,d0
00085A5A 6B00                       		bmi.s	@havevoiceptr
00085A5C 323C 0019                  		move.w	#25,d1
00085A60                            ; loc_72C56:
00085A60                            @voicemultiply:
00085A60 D2C1                       		adda.w	d1,a1
00085A62 51C8 FFFC                  		dbf	d0,@voicemultiply
00085A66                            ; loc_72C5C:
00085A66                            @havevoiceptr:
00085A66 1219                       		move.b	(a1)+,d1		; feedback/algorithm
00085A68 1B41 001F                  		move.b	d1,TrackFeedbackAlgo(a5) ; Save it to track RAM
00085A6C 1801                       		move.b	d1,d4
00085A6E 103C 00B0                  		move.b	#$B0,d0			; Command to write feedback/algorithm
00085A72 4EBA FAAA                  		jsr	WriteFMIorII(pc)
00085A76 45FA 0000                  		lea	FMInstrumentOperatorTable(pc),a2
00085A7A 7600                       		moveq	#(FMInstrumentOperatorTable_End-FMInstrumentOperatorTable)-1,d3		; Don't want to send TL yet
00085A7C                            ; loc_72C72:
00085A7C                            @sendvoiceloop:
00085A7C 101A                       		move.b	(a2)+,d0
00085A7E 1219                       		move.b	(a1)+,d1
00085A80 4EBA FA9C                  		jsr	WriteFMIorII(pc)
00085A84 51CB FFF6                  		dbf	d3,@sendvoiceloop
00085A88                            
00085A88 7A03                       		moveq	#3,d5
00085A8A 0244 0007                  		andi.w	#7,d4			; Get algorithm
00085A8E 183B 4000                  		move.b	FMSlotMask(pc,d4.w),d4	; Get slot mask for algorithm
00085A92 162D 0009                  		move.b	TrackVolume(a5),d3	; Track volume attenuation
00085A96                            ; loc_72C8C:
00085A96                            @sendtlloop:
00085A96 101A                       		move.b	(a2)+,d0
00085A98 1219                       		move.b	(a1)+,d1
00085A9A E20C                       		lsr.b	#1,d4		; Is bit set for this operator in the mask?
00085A9C 6400                       		bcc.s	@sendtl		; Branch if not
00085A9E D203                       		add.b	d3,d1		; Include additional attenuation
00085AA0                            ; loc_72C96:
00085AA0                            @sendtl:
00085AA0 4EBA FA7C                  		jsr	WriteFMIorII(pc)
00085AA4 51CD FFF0                  		dbf	d5,@sendtlloop
00085AA8                            		
00085AA8 103C 00B4                  		move.b	#$B4,d0			; Register for AMS/FMS/Panning
00085AAC 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Value to send
00085AB0 4EBA FA6C                  		jsr	WriteFMIorII(pc) 	; (It would be better if this were a jmp)
00085AB4                            
00085AB4                            locret_72CAA:
00085AB4 4E75                       		rts	
00085AB6                            ; End of function SetVoice
00085AB6                            
00085AB6                            ; ===========================================================================
00085AB6                            ; byte_72CAC:
00085AB6 0808 0808 0A0E 0E0F        FMSlotMask:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
00085ABE                            
00085ABE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085ABE                            
00085ABE                            ; sub_72CB4:
00085ABE                            SendVoiceTL:
00085ABE 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
00085AC2 6600                       		bne.s	@locret		; Return if so
00085AC4 7000                       		moveq	#0,d0
00085AC6 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00085ACA 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
00085ACE 4A2E 000E                  		tst.b	f_voice_selector(a6)
00085AD2 6700                       		beq.s	@gotvoiceptr
00085AD4                            		; DANGER! This uploads the wrong voice! It should have been a5 instead
00085AD4                            		; of a6!
00085AD4 226D 0020                  		movea.l	TrackVoicePtr(a5),a1
00085AD8 4A2E 000E                  		tst.b	f_voice_selector(a6)
00085ADC 6B00                       		bmi.s	@gotvoiceptr
00085ADE 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1
00085AE2                            ; loc_72CD8:
00085AE2                            @gotvoiceptr:
00085AE2 5340                       		subq.w	#1,d0
00085AE4 6B00                       		bmi.s	@gotvoice
00085AE6 323C 0019                  		move.w	#25,d1
00085AEA                            ; loc_72CE0:
00085AEA                            @voicemultiply:
00085AEA D2C1                       		adda.w	d1,a1
00085AEC 51C8 FFFC                  		dbf	d0,@voicemultiply
00085AF0                            ; loc_72CE6:
00085AF0                            @gotvoice:
00085AF0 D2FC 0015                  		adda.w	#21,a1				; Want TL
00085AF4 45FA 0000                  		lea	FMInstrumentTLTable(pc),a2
00085AF8 102D 001F                  		move.b	TrackFeedbackAlgo(a5),d0	; Get feedback/algorithm
00085AFC 0240 0007                  		andi.w	#7,d0				; Want only algorithm
00085B00 183B 00B4                  		move.b	FMSlotMask(pc,d0.w),d4		; Get slot mask
00085B04 162D 0009                  		move.b	TrackVolume(a5),d3		; Get track volume attenuation
00085B08 6B00                       		bmi.s	@locret				; If negative, stop
00085B0A 7A00                       		moveq	#(FMInstrumentTLTable_End-FMInstrumentTLTable)-1,d5
00085B0C                            ; loc_72D02:
00085B0C                            @sendtlloop:
00085B0C 101A                       		move.b	(a2)+,d0
00085B0E 1219                       		move.b	(a1)+,d1
00085B10 E20C                       		lsr.b	#1,d4		; Is bit set for this operator in the mask?
00085B12 6400                       		bcc.s	@senttl		; Branch if not
00085B14 D203                       		add.b	d3,d1		; Include additional attenuation
00085B16 6500                       		bcs.s	@senttl		; Branch on overflow
00085B18 4EBA FA04                  		jsr	WriteFMIorII(pc)
00085B1C                            ; loc_72D12:
00085B1C                            @senttl:
00085B1C 51CD FFEE                  		dbf	d5,@sendtlloop
00085B20                            ; locret_72D16:
00085B20                            @locret:
00085B20 4E75                       		rts	
00085B22                            ; End of function SendVoiceTL
00085B22                            
00085B22                            ; ===========================================================================
00085B22                            ; byte_72D18:
00085B22                            FMInstrumentOperatorTable:
00085B22 30                         		dc.b  $30		; Detune/multiple operator 1
00085B23 38                         		dc.b  $38		; Detune/multiple operator 3
00085B24 34                         		dc.b  $34		; Detune/multiple operator 2
00085B25 3C                         		dc.b  $3C		; Detune/multiple operator 4
00085B26 50                         		dc.b  $50		; Rate scalling/attack rate operator 1
00085B27 58                         		dc.b  $58		; Rate scalling/attack rate operator 3
00085B28 54                         		dc.b  $54		; Rate scalling/attack rate operator 2
00085B29 5C                         		dc.b  $5C		; Rate scalling/attack rate operator 4
00085B2A 60                         		dc.b  $60		; Amplitude modulation/first decay rate operator 1
00085B2B 68                         		dc.b  $68		; Amplitude modulation/first decay rate operator 3
00085B2C 64                         		dc.b  $64		; Amplitude modulation/first decay rate operator 2
00085B2D 6C                         		dc.b  $6C		; Amplitude modulation/first decay rate operator 4
00085B2E 70                         		dc.b  $70		; Secondary decay rate operator 1
00085B2F 78                         		dc.b  $78		; Secondary decay rate operator 3
00085B30 74                         		dc.b  $74		; Secondary decay rate operator 2
00085B31 7C                         		dc.b  $7C		; Secondary decay rate operator 4
00085B32 80                         		dc.b  $80		; Secondary amplitude/release rate operator 1
00085B33 88                         		dc.b  $88		; Secondary amplitude/release rate operator 3
00085B34 84                         		dc.b  $84		; Secondary amplitude/release rate operator 2
00085B35 8C                         		dc.b  $8C		; Secondary amplitude/release rate operator 4
00085B36                            FMInstrumentOperatorTable_End
00085B36                            ; byte_72D2C:
00085B36                            FMInstrumentTLTable:
00085B36 40                         		dc.b  $40		; Total level operator 1
00085B37 48                         		dc.b  $48		; Total level operator 3
00085B38 44                         		dc.b  $44		; Total level operator 2
00085B39 4C                         		dc.b  $4C		; Total level operator 4
00085B3A                            FMInstrumentTLTable_End
00085B3A                            ; ===========================================================================
00085B3A                            ; loc_72D30:
00085B3A                            cfModulation:
00085B3A 08D5 0003                  		bset	#3,(a5)				; Turn on modulation (TrackPlaybackControl)
00085B3E 2B4C 0014                  		move.l	a4,TrackModulationPtr(a5)	; Save pointer to modulation data
00085B42 1B5C 0018                  		move.b	(a4)+,TrackModulationWait(a5)	; Modulation delay
00085B46 1B5C 0019                  		move.b	(a4)+,TrackModulationSpeed(a5)	; Modulation speed
00085B4A 1B5C 001A                  		move.b	(a4)+,TrackModulationDelta(a5)	; Modulation delta
00085B4E 101C                       		move.b	(a4)+,d0			; Modulation steps...
00085B50 E208                       		lsr.b	#1,d0				; ... divided by 2...
00085B52 1B40 001B                  		move.b	d0,TrackModulationSteps(a5)	; ... before being stored
00085B56 426D 001C                  		clr.w	TrackModulationVal(a5)		; Total accumulated modulation frequency change
00085B5A 4E75                       		rts	
00085B5C                            ; ===========================================================================
00085B5C                            ; loc_72D52:
00085B5C                            cfEnableModulation:
00085B5C 08D5 0003                  		bset	#3,(a5)		; Turn on modulation (TrackPlaybackControl)
00085B60 4E75                       		rts	
00085B62                            ; ===========================================================================
00085B62                            ; loc_72D58:
00085B62                            cfStopTrack:
00085B62 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00085B66 0895 0004                  		bclr	#4,(a5)			; Clear 'do not attack next note' bit (TrackPlaybackControl)
00085B6A 4A2D 0001                  		tst.b	TrackVoiceControl(a5)	; Is this a PSG track?
00085B6E 6B00                       		bmi.s	@stoppsg		; Branch if yes
00085B70 4A2E 0008                  		tst.b	f_updating_dac(a6)	; Is this the DAC we are updating?
00085B74 6B00 0000                  		bmi.w	@locexit		; Exit if yes
00085B78 4EBA F980                  		jsr	FMNoteOff(pc)
00085B7C 6000                       		bra.s	@stoppedchannel
00085B7E                            ; ===========================================================================
00085B7E                            ; loc_72D74:
00085B7E                            @stoppsg:
00085B7E 4EBA FC1C                  		jsr	PSGNoteOff(pc)
00085B82                            ; loc_72D78:
00085B82                            @stoppedchannel:
00085B82 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating SFX?
00085B86 6A00 0000                  		bpl.w	@locexit		; Exit if not
00085B8A 4216                       		clr.b	v_sndprio(a6)		; Clear priority
00085B8C 7000                       		moveq	#0,d0
00085B8E 102D 0001                  		move.b	TrackVoiceControl(a5),d0 ; Get voice control bits
00085B92 6B00                       		bmi.s	@getpsgptr		; Branch if PSG
00085B94 41FA F536                  		lea	SFX_BGMChannelRAM(pc),a0
00085B98 264D                       		movea.l	a5,a3
00085B9A 0C00 0004                  		cmpi.b	#4,d0			; Is this FM4?
00085B9E 6600                       		bne.s	@getpointer		; Branch if not
00085BA0 4A2E 0340                  		tst.b	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX playing?
00085BA4 6A00                       		bpl.s	@getpointer		; Branch if not
00085BA6 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
00085BAA 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1	; Get voice pointer
00085BAE 6000                       		bra.s	@gotpointer
00085BB0                            ; ===========================================================================
00085BB0                            ; loc_72DA8:
00085BB0                            @getpointer:
00085BB0 5500                       		subq.b	#2,d0		; SFX can only use FM3 and up
00085BB2 E508                       		lsl.b	#2,d0
00085BB4 2A70 0000                  		movea.l	(a0,d0.w),a5
00085BB8 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00085BBA 6A00                       		bpl.s	@novoiceupd		; Branch if not
00085BBC 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Get voice pointer
00085BC0                            ; loc_72DB8:
00085BC0                            @gotpointer:
00085BC0 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX overriding' bit (TrackPlaybackControl)
00085BC4 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00085BC8 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00085BCC 4EBA FE8A                  		jsr	SetVoice(pc)
00085BD0                            ; loc_72DC8:
00085BD0                            @novoiceupd:
00085BD0 2A4B                       		movea.l	a3,a5
00085BD2 6000                       		bra.s	@locexit
00085BD4                            ; ===========================================================================
00085BD4                            ; loc_72DCC:
00085BD4                            @getpsgptr:
00085BD4 41EE 0370                  		lea	v_spcsfx_psg3_track(a6),a0
00085BD8 4A10                       		tst.b	(a0)		; Is track playing? (TrackPlaybackControl)
00085BDA 6A00                       		bpl.s	@getchannelptr	; Branch if not
00085BDC 0C00 00E0                  		cmpi.b	#$E0,d0		; Is it the noise channel?
00085BE0 6700                       		beq.s	@gotchannelptr	; Branch if yes
00085BE2 0C00 00C0                  		cmpi.b	#$C0,d0		; Is it PSG 3?
00085BE6 6700                       		beq.s	@gotchannelptr	; Branch if yes
00085BE8                            ; loc_72DE0:
00085BE8                            @getchannelptr:
00085BE8 41FA F4E2                  		lea	SFX_BGMChannelRAM(pc),a0
00085BEC E608                       		lsr.b	#3,d0
00085BEE 2070 0000                  		movea.l	(a0,d0.w),a0
00085BF2                            ; loc_72DEA:
00085BF2                            @gotchannelptr:
00085BF2 0890 0002                  		bclr	#2,(a0)				; Clear 'SFX overriding' bit (TrackPlaybackControl)
00085BF6 08D0 0001                  		bset	#1,(a0)				; Set 'track at rest' bit (TrackPlaybackControl)
00085BFA 0C28 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a0)	; Is this a noise pointer?
00085C00 6600                       		bne.s	@locexit			; Branch if not
00085C02 13E8 001F 00C0 0011        		move.b	TrackPSGNoise(a0),(psg_input).l ; Set noise tone
00085C0A                            ; loc_72E02:
00085C0A                            @locexit:
00085C0A 504F                       		addq.w	#8,sp		; Tamper with return value so we don't go back to caller
00085C0C 4E75                       		rts	
00085C0E                            ; ===========================================================================
00085C0E                            ; loc_72E06:
00085C0E                            cfSetPSGNoise:
00085C0E 1B7C 00E0 0001             		move.b	#$E0,TrackVoiceControl(a5)	; Turn channel into noise channel
00085C14 1B5C 001F                  		move.b	(a4)+,TrackPSGNoise(a5)	; Save noise tone
00085C18 0815 0002                  		btst	#2,(a5)				; Is track being overridden? (TrackPlaybackControl)
00085C1C 6600                       		bne.s	@locret				; Return if yes
00085C1E 13EC FFFF 00C0 0011        		move.b	-1(a4),(psg_input).l		; Set tone
00085C26                            ; locret_72E1E:
00085C26                            @locret:
00085C26 4E75                       		rts	
00085C28                            ; ===========================================================================
00085C28                            ; loc_72E20:
00085C28                            cfDisableModulation:
00085C28 0895 0003                  		bclr	#3,(a5)		; Disable modulation (TrackPlaybackControl)
00085C2C 4E75                       		rts	
00085C2E                            ; ===========================================================================
00085C2E                            ; loc_72E26:
00085C2E                            cfSetPSGTone:
00085C2E 1B5C 000B                  		move.b	(a4)+,TrackVoiceIndex(a5)	; Set current PSG tone
00085C32 4E75                       		rts	
00085C34                            ; ===========================================================================
00085C34                            ; loc_72E2C:
00085C34                            cfJumpTo:
00085C34 101C                       		move.b	(a4)+,d0	; High byte of offset
00085C36 E148                       		lsl.w	#8,d0		; Shift it into place
00085C38 101C                       		move.b	(a4)+,d0	; Low byte of offset
00085C3A D8C0                       		adda.w	d0,a4		; Add to current position
00085C3C 534C                       		subq.w	#1,a4		; Put back one byte
00085C3E 4E75                       		rts	
00085C40                            ; ===========================================================================
00085C40                            ; loc_72E38:
00085C40                            cfRepeatAtPos:
00085C40 7000                       		moveq	#0,d0
00085C42 101C                       		move.b	(a4)+,d0			; Loop index
00085C44 121C                       		move.b	(a4)+,d1			; Repeat count
00085C46 4A35 0024                  		tst.b	TrackLoopCounters(a5,d0.w)	; Has this loop already started?
00085C4A 6600                       		bne.s	@loopexists			; Branch if yes
00085C4C 1B81 0024                  		move.b	d1,TrackLoopCounters(a5,d0.w)	; Initialize repeat count
00085C50                            ; loc_72E48:
00085C50                            @loopexists:
00085C50 5335 0024                  		subq.b	#1,TrackLoopCounters(a5,d0.w)	; Decrease loop's repeat count
00085C54 66DE                       		bne.s	cfJumpTo			; If nonzero, branch to target
00085C56 544C                       		addq.w	#2,a4				; Skip target address
00085C58 4E75                       		rts	
00085C5A                            ; ===========================================================================
00085C5A                            ; loc_72E52:
00085C5A                            cfJumpToGosub:
00085C5A 7000                       		moveq	#0,d0
00085C5C 102D 000D                  		move.b	TrackStackPointer(a5),d0	; Current stack pointer
00085C60 5900                       		subq.b	#4,d0				; Add space for another target
00085C62 2B8C 0000                  		move.l	a4,(a5,d0.w)			; Put in current address (*before* target for jump!)
00085C66 1B40 000D                  		move.b	d0,TrackStackPointer(a5)	; Store new stack pointer
00085C6A 60C8                       		bra.s	cfJumpTo
00085C6C                            ; ===========================================================================
00085C6C                            ; loc_72E64:
00085C6C                            cfOpF9:
00085C6C 103C 0088                  		move.b	#$88,d0		; D1L/RR of Operator 3
00085C70 123C 000F                  		move.b	#$F,d1		; Loaded with fixed value (max RR, 1TL)
00085C74 4EBA F8B4                  		jsr	WriteFMI(pc)
00085C78 103C 008C                  		move.b	#$8C,d0		; D1L/RR of Operator 4
00085C7C 123C 000F                  		move.b	#$F,d1		; Loaded with fixed value (max RR, 1TL)
00085C80 6000 F8A8                  		bra.w	WriteFMI
00085C84                            ; ===========================================================================
00085C84                            
00085C84                            Kos_Z80:
00085C84                            		incbin	"sound\z80.bin", 0, $15
00085C99 00                         		dc.b ((SegaPCM&$FF8000)/$8000)&1						; Least bit of bank ID (bit 15 of address)
00085C9A                            		incbin	"sound\z80.bin", $16, 6
00085CA0 00                         		dc.b ((SegaPCM&$FF8000)/$8000)>>1						; ... the remaining bits of bank ID (bits 16-23)
00085CA1                            		incbin	"sound\z80.bin", $1D, $93
00085D34 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$7F00)>>8)|$80				; Pointer to Sega PCM, relative to start of ROM bank (i.e., little_endian($8000 + SegaPCM&$7FFF)
00085D36                            		incbin	"sound\z80.bin", $B2, 1
00085D37 0000                       		dc.w (((SegaPCM_End-SegaPCM)&$FF)<<8)+(((SegaPCM_End-SegaPCM)&$FF00)>>8)	; ... the size of the Sega PCM (little endian)
00085D39                            		incbin	"sound\z80.bin", $B5, $16AB
000873DA                            		even
000873DA                            
000873DA                            Music81:	incbin	"sound/music/Mus81 - GHZ.bin"
000886FE 00                         		even
000886FE                            Music82:	incbin	"sound/music/Mus82 - LZ.bin"
00089F86                            		even
00089F86                            Music83:	incbin	"sound/music/Mus83 - MZ.bin"
00091906 00                         		even
00091906                            Music84:	incbin	"sound/music/Mus84 - SLZ.bin"
0009311A 00                         		even
0009311A                            Music85:	incbin	"sound/music/Mus85 - SYZ.bin"
00093EC0                            		even
00093EC0                            Music86:	incbin	"sound/music/Mus86 - SBZ.bin"
00095278                            		even
00095278                            Music87:	incbin	"sound/music/Mus87 - Invincibility.bin"
00095B70 00                         		even
00095B70                            Music88:	include	"sound/music/Mus88 - Extra Life.asm"
00095B70                            extralifejingle_Header:
00095B70                            	smpsHeaderStartSong 1
00095B72 0703                       	smpsHeaderChan      $07, $03
00095B74 0100                       	smpsHeaderTempo     $01, $00
00095B76                            
00095B7A 0000 0000                  	smpsHeaderFM        extralifejingle_FM1,	$00, $00
00095B7E 0000 0000                  	smpsHeaderFM        extralifejingle_FM2,	$00, $00
00095B82 0000 0000                  	smpsHeaderFM        extralifejingle_FM3,	$00, $00
00095B86 0000 0000                  	smpsHeaderFM        extralifejingle_FM4,	$00, $00
00095B8A 0000 0000                  	smpsHeaderFM        extralifejingle_FM5,	$00, $00
00095B8E 0000 0000                  	smpsHeaderFM        extralifejingle_FM6,	$00, $00
00095BA4                            
00095BA4                            ; DAC Data
00095BA4                            extralifejingle_DAC:
00095BA4 807F 55                    	dc.b	nRst, $7F, $55
00095BA7 E4                         	smpsFade
00095BA8                            ; PSG1 Data
00095BA8                            extralifejingle_PSG1:
00095BA8                            ; PSG2 Data
00095BA8                            extralifejingle_PSG2:
00095BA8                            ; PSG3 Data
00095BA8                            extralifejingle_PSG3:
00095BA8 F2                         	smpsStop
00095BA9                            
00095BA9                            ; FM1 Data
00095BA9                            extralifejingle_FM1:
00095BA9 EF00                       	smpsSetvoice        $00
00095BAB E616                       	smpsAlterVol        $16
00095BAD E0C0                       	smpsPan             panCenter, $00
00095BAF A61A BC13 BB12 B913 B60D+  	dc.b	nCs3, $1A, nB4, $13, nBb4, $12, nAb4, $13, nF4, $0D, nG3, $2C
00095BBB AC06 800C                  	dc.b	nG3, $06, nRst, $0C
00095BBF F2                         	smpsStop
00095BC0                            
00095BC0                            ; FM2 Data
00095BC0                            extralifejingle_FM2:
00095BC0 EF01                       	smpsSetvoice        $01
00095BC2 E616                       	smpsAlterVol        $16
00095BC4 E0C0                       	smpsPan             panCenter, $00
00095BC6 B61A AD13 AB12 AA13 A60D+  	dc.b	nF4, $1A, nAb3, $13, nFs3, $12, nF3, $13, nCs3, $0D, nA2, $2C
00095BD2 A206 800C                  	dc.b	nA2, $06, nRst, $0C
00095BD6 F2                         	smpsStop
00095BD7                            
00095BD7                            ; FM3 Data
00095BD7                            extralifejingle_FM3:
00095BD7 EF01                       	smpsSetvoice        $01
00095BD9 E616                       	smpsAlterVol        $16
00095BDB E0C0                       	smpsPan             panCenter, $00
00095BDD AD0D BC13 B9B7 B60C B20D+  	dc.b	nAb3, $0D, nB4, $13, nAb4, nFs4, nF4, $0C, nCs4, $0D, nC4, $2C
00095BE9 B106 800C                  	dc.b	nC4, $06, nRst, $0C
00095BED F2                         	smpsStop
00095BEE                            
00095BEE                            ; FM4 Data
00095BEE                            extralifejingle_FM4:
00095BEE EF02                       	smpsSetvoice        $02
00095BF0 E0C0                       	smpsPan             panCenter, $00
00095BF2 8001                       	dc.b	nRst, $01
00095BF4 E616                       	smpsAlterVol        $16
00095BF6 BE0C B913 ABAA A60C A20D+  	dc.b	nCs5, $0C, nAb4, $13, nFs3, nF3, nCs3, $0C, nA2, $0D, nE5, $2C
00095C02 C106 800C                  	dc.b	nE5, $06, nRst, $0C
00095C06 F2                         	smpsStop
00095C07                            
00095C07                            ; FM5 Data
00095C07                            extralifejingle_FM5:
00095C07 EF03                       	smpsSetvoice        $03
00095C09 E602                       	smpsAlterVol        $02
00095C0B E0C0                       	smpsPan             panCenter, $00
00095C0D 8001                       	dc.b	nRst, $01
00095C0F EF05                       	smpsSetvoice        $05
00095C11 E60A                       	smpsAlterVol        $0A
00095C13 E780 0CC8 06B2 07B9 06C7+  	dc.b	smpsNoAttack, nRst, $0C, nB5, $06, nCs4, $07, nAb4, $06, nBb5, nCs4, $07
00095C1F B706 C5C8 B607 C206 B2BE+  	dc.b	nFs4, $06, nAb5, nB5, nF4, $07, nF5, $06, nCs4, nCs5, $07, nA5
00095C2B 06BD C1C4 07BD 06C1 C407+  	dc.b	$06, nC5, nE5, nG5, $07, nC5, $06, nE5, nG5, $07, nC5, $06
00095C37 C1C4 80                    	dc.b	nE5, nG5, nRst
00095C3A F2                         	smpsStop
00095C3B                            
00095C3B                            ; FM6 Data
00095C3B                            extralifejingle_FM6:
00095C3B EF04                       	smpsSetvoice        $04
00095C3D E607                       	smpsAlterVol        $07
00095C3F E0C0                       	smpsPan             panCenter, $00
00095C41 8001                       	dc.b	nRst, $01
00095C43 EF06                       	smpsSetvoice        $06
00095C45 E6F9                       	smpsAlterVol        $F9
00095C47 A658 A72C A70C 80          	dc.b	nCs3, $58, nD3, $2C, nD3, $0C, nRst
00095C4E F2                         	smpsStop
00095C4F                            
00095C4F                            extralifejingle_Voices:
00095C4F                            ;	Voice $00
00095C4F                            ;	$3A
00095C4F                            ;	$34, $73, $74, $31, 	$1F, $1F, $1F, $1F, 	$1F, $1F, $1F, $1F
00095C4F                            ;	$00, $00, $00, $00, 	$03, $03, $03, $05, 	$22, $22, $22, $00
00095C4F                            	smpsVcAlgorithm     $02
00095C4F                            	smpsVcFeedback      $07
00095C4F                            	smpsVcUnusedBits    $00
00095C4F                            	smpsVcDetune        $03, $07, $07, $03
00095C4F                            	smpsVcCoarseFreq    $01, $04, $03, $04
00095C4F                            	smpsVcRateScale     $00, $00, $00, $00
00095C4F                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00095C4F                            	smpsVcAmpMod        $00, $00, $00, $00
00095C4F                            	smpsVcDecayRate1    $1F, $1F, $1F, $1F
00095C4F                            	smpsVcDecayRate2    $00, $00, $00, $00
00095C4F                            	smpsVcDecayLevel    $00, $00, $00, $00
00095C4F                            	smpsVcReleaseRate   $05, $03, $03, $03
00095C68                            
00095C68                            ;	Voice $01
00095C68                            ;	$3A
00095C68                            ;	$34, $73, $74, $31, 	$1F, $1F, $1F, $1F, 	$1F, $1F, $1F, $1F
00095C68                            ;	$00, $00, $00, $00, 	$03, $03, $03, $05, 	$22, $22, $22, $00
00095C68                            	smpsVcAlgorithm     $02
00095C68                            	smpsVcFeedback      $07
00095C68                            	smpsVcUnusedBits    $00
00095C68                            	smpsVcDetune        $03, $07, $07, $03
00095C68                            	smpsVcCoarseFreq    $01, $04, $03, $04
00095C68                            	smpsVcRateScale     $00, $00, $00, $00
00095C68                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00095C68                            	smpsVcAmpMod        $00, $00, $00, $00
00095C68                            	smpsVcDecayRate1    $1F, $1F, $1F, $1F
00095C68                            	smpsVcDecayRate2    $00, $00, $00, $00
00095C68                            	smpsVcDecayLevel    $00, $00, $00, $00
00095C68                            	smpsVcReleaseRate   $05, $03, $03, $03
00095C81                            
00095C81                            ;	Voice $02
00095C81                            ;	$3A
00095C81                            ;	$34, $73, $74, $31, 	$1F, $1F, $1F, $1F, 	$1F, $1F, $1F, $1F
00095C81                            ;	$00, $00, $00, $00, 	$03, $03, $03, $05, 	$22, $22, $22, $00
00095C81                            	smpsVcAlgorithm     $02
00095C81                            	smpsVcFeedback      $07
00095C81                            	smpsVcUnusedBits    $00
00095C81                            	smpsVcDetune        $03, $07, $07, $03
00095C81                            	smpsVcCoarseFreq    $01, $04, $03, $04
00095C81                            	smpsVcRateScale     $00, $00, $00, $00
00095C81                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00095C81                            	smpsVcAmpMod        $00, $00, $00, $00
00095C81                            	smpsVcDecayRate1    $1F, $1F, $1F, $1F
00095C81                            	smpsVcDecayRate2    $00, $00, $00, $00
00095C81                            	smpsVcDecayLevel    $00, $00, $00, $00
00095C81                            	smpsVcReleaseRate   $05, $03, $03, $03
00095C9A                            
00095C9A                            ;	Voice $03
00095C9A                            ;	$00
00095C9A                            ;	$01, $0E, $00, $00, 	$1E, $1E, $1E, $1D, 	$1A, $1C, $10, $10
00095C9A                            ;	$00, $00, $00, $00, 	$FD, $FE, $F8, $F8, 	$1A, $25, $05, $00
00095C9A                            	smpsVcAlgorithm     $00
00095C9A                            	smpsVcFeedback      $00
00095C9A                            	smpsVcUnusedBits    $00
00095C9A                            	smpsVcDetune        $00, $00, $00, $00
00095C9A                            	smpsVcCoarseFreq    $00, $00, $0E, $01
00095C9A                            	smpsVcRateScale     $00, $00, $00, $00
00095C9A                            	smpsVcAttackRate    $1D, $1E, $1E, $1E
00095C9A                            	smpsVcAmpMod        $00, $00, $00, $00
00095C9A                            	smpsVcDecayRate1    $10, $10, $1C, $1A
00095C9A                            	smpsVcDecayRate2    $00, $00, $00, $00
00095C9A                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
00095C9A                            	smpsVcReleaseRate   $08, $08, $0E, $0D
00095CB3                            
00095CB3                            ;	Voice $04
00095CB3                            ;	$03
00095CB3                            ;	$66, $40, $40, $31, 	$1F, $1F, $1F, $1C, 	$0E, $05, $02, $01
00095CB3                            ;	$01, $00, $04, $06, 	$AA, $6A, $16, $18, 	$2A, $1A, $20, $00
00095CB3                            	smpsVcAlgorithm     $03
00095CB3                            	smpsVcFeedback      $00
00095CB3                            	smpsVcUnusedBits    $00
00095CB3                            	smpsVcDetune        $03, $04, $04, $06
00095CB3                            	smpsVcCoarseFreq    $01, $00, $00, $06
00095CB3                            	smpsVcRateScale     $00, $00, $00, $00
00095CB3                            	smpsVcAttackRate    $1C, $1F, $1F, $1F
00095CB3                            	smpsVcAmpMod        $00, $00, $00, $00
00095CB3                            	smpsVcDecayRate1    $01, $02, $05, $0E
00095CB3                            	smpsVcDecayRate2    $06, $04, $00, $01
00095CB3                            	smpsVcDecayLevel    $01, $01, $06, $0A
00095CB3                            	smpsVcReleaseRate   $08, $06, $0A, $0A
00095CCC                            
00095CCC                            ;	Voice $05
00095CCC                            ;	$34
00095CCC                            ;	$33, $7E, $01, $74, 	$9B, $1F, $5F, $1F, 	$14, $07, $07, $08
00095CCC                            ;	$00, $00, $00, $00, 	$F6, $E4, $F7, $F7, 	$19, $71, $00, $00
00095CCC                            	smpsVcAlgorithm     $04
00095CCC                            	smpsVcFeedback      $06
00095CCC                            	smpsVcUnusedBits    $00
00095CCC                            	smpsVcDetune        $07, $00, $07, $03
00095CCC                            	smpsVcCoarseFreq    $04, $01, $0E, $03
00095CCC                            	smpsVcRateScale     $00, $01, $00, $02
00095CCC                            	smpsVcAttackRate    $1F, $1F, $1F, $1B
00095CCC                            	smpsVcAmpMod        $00, $00, $00, $00
00095CCC                            	smpsVcDecayRate1    $08, $07, $07, $14
00095CCC                            	smpsVcDecayRate2    $00, $00, $00, $00
00095CCC                            	smpsVcDecayLevel    $0F, $0F, $0E, $0F
00095CCC                            	smpsVcReleaseRate   $07, $07, $04, $06
00095CE5                            
00095CE5                            ;	Voice $06
00095CE5                            ;	$30
00095CE5                            ;	$01, $00, $00, $01, 	$9F, $1F, $1F, $5C, 	$0F, $0D, $10, $14
00095CE5                            ;	$08, $18, $05, $08, 	$6F, $00, $0F, $18, 	$15, $1F, $19, $00
00095CE5                            	smpsVcAlgorithm     $00
00095CE5                            	smpsVcFeedback      $06
00095CE5                            	smpsVcUnusedBits    $00
00095CE5                            	smpsVcDetune        $00, $00, $00, $00
00095CE5                            	smpsVcCoarseFreq    $01, $00, $00, $01
00095CE5                            	smpsVcRateScale     $01, $00, $00, $02
00095CE5                            	smpsVcAttackRate    $1C, $1F, $1F, $1F
00095CE5                            	smpsVcAmpMod        $00, $00, $00, $00
00095CE5                            	smpsVcDecayRate1    $14, $10, $0D, $0F
00095CE5                            	smpsVcDecayRate2    $08, $05, $18, $08
00095CE5                            	smpsVcDecayLevel    $01, $00, $00, $06
00095CE5                            	smpsVcReleaseRate   $08, $0F, $00, $0F
00095CFE                            
00095CFE                            
00095CFE                            		even
00095CFE                            Music89:	incbin	"sound/music/Mus89 - Special Stage.bin"
00096556 00                         		even
00096556                            Music8A:	incbin	"sound/music/Mus8A - Title Screen.bin"
00096A76                            		even
00096A76                            Music8B:	incbin	"sound/music/Mus8B - Ending.bin"
00096D38 00                         		even
00096D38                            Music8C:	incbin	"sound/music/Mus8C - Boss.bin"
00097B90                            		even
00097B90                            Music8D:	incbin	"sound/music/Mus8D - FZ.bin"
00097DDC 00                         		even
00097DDC                            Music8E:	incbin	"sound/music/Mus8E - Sonic Got Through.bin"
00098112 00                         		even
00098112                            Music8F:	incbin	"sound/music/Mus8F - Game Over.bin"
000982BE 00                         		even
000982BE                            Music90:	incbin	"sound/music/Mus90 - Continue Screen.bin"
000984CC 00                         		even
000984CC                            Music91:	incbin	"sound/music/Mus91 - Credits.bin"
000987B0 00                         		even
000987B0                            Music92:	incbin	"sound/music/Mus92 - Drowning.bin"
00098EE0 00                         		even
00098EE0                            Music93:	incbin	"sound/music/Mus93 - Get Emerald.bin"
00098FAE                            		even
00098FAE                            Music94:	incbin	"sound/music/Mus94 - Final Boss Pinch.bin"
0009941C 00                         		even
0009941C                            Music95:		incbin	"sound/music/Mus95 - Seaside Front.bin"
00099F12                            		even
00099F12                            Music96:		incbin	"sound/music/Mus96 - TTZ BF US.bin"
0009AAF4                            		even
0009AAF4                            Music97:		incbin	"sound/music/Mus97 - Granada Game Over.bin"
0009BDFA 00                         		even
0009BDFA                            Music98:		include	"sound/music/Mus98 - Options Theme.asm"
0009BDFA                            PasswordEntry_Header:
0009BDFA                            	smpsHeaderStartSong 3
0009BDFC 0603                       	smpsHeaderChan      $06, $03
0009BDFE 0105                       	smpsHeaderTempo     $01, $05
0009BE00                            
0009BE04 0000 0013                  	smpsHeaderFM        PasswordEntry_FM1,	$00, $13
0009BE08 0000 F40B                  	smpsHeaderFM        PasswordEntry_FM2,	$F4, $0B
0009BE0C 0000 000F                  	smpsHeaderFM        PasswordEntry_FM3,	$00, $0F
0009BE10 0000 000F                  	smpsHeaderFM        PasswordEntry_FM4,	$00, $0F
0009BE14 0000 001D                  	smpsHeaderFM        PasswordEntry_FM5,	$00, $1D
0009BE2A                            
0009BE2A                            ; FM1 Data
0009BE2A                            PasswordEntry_FM1:
0009BE2A EF00                       	smpsSetvoice        $00
0009BE31                            
0009BE31                            PasswordEntry_Jump00:
0009BE31 CD30 CED0 D010 CE08 CD10+  	dc.b	nE6, $30, nF6, nG6, nG6, $10, nF6, $08, nE6, $10, nF6, $08
0009BE3D C930 CBCD CE10 CD08 CB10+  	dc.b	nC6, $30, nD6, nE6, nF6, $10, nE6, $08, nD6, $10, nE6, $08
0009BE49 C960 C830 C4C6 C210 C6C9+  	dc.b	nC6, $60, nB5, $30, nG5, nA5, nF5, $10, nA5, nC6, nB5, $30
0009BE55 C918 CB                    	dc.b	nC6, $18, nD6
0009BE58 F6FF D7                    	smpsJump            PasswordEntry_Jump00
0009BE5B                            
0009BE5B                            ; FM2 Data
0009BE5B                            PasswordEntry_FM2:
0009BE5B EF01                       	smpsSetvoice        $01
0009BE5D                            
0009BE5D                            PasswordEntry_Jump03:
0009BE5D B118 1818 10AC 08B1 1818+  	dc.b	nC4, $18, $18, $18, $10, nG3, $08, nC4, $18, $18, $18, nB3
0009BE69 AEAE AEAE 10B5 08AE 1818+  	dc.b	nA3, nA3, nA3, nA3, $10, nE4, $08, nA3, $18, $18, $18, nG3
0009BE75 AAAA AAAA 1008 B518 1818+  	dc.b	nF3, nF3, nF3, nF3, $10, $08, nE4, $18, $18, $18, $10, $08
0009BE81 AC18 1818 1008 1818 AEB0   	dc.b	nG3, $18, $18, $18, $10, $08, $18, $18, nA3, nB3
0009BE8B F6FF D0                    	smpsJump            PasswordEntry_Jump03
0009BE8E                            
0009BE8E                            ; FM3 Data
0009BE8E                            PasswordEntry_FM3:
0009BE8E E080                       	smpsPan             panLeft, $00
0009BE90 EF02                       	smpsSetvoice        $02
0009BE92                            
0009BE92                            PasswordEntry_Jump02:
0009BE92 C104 8014 C408 8010 C208+  	dc.b	nE5, $04, nRst, $14, nG5, $08, nRst, $10, nF5, $08, nRst, $10
0009BE9E C204 8014 C104 8014 C104+  	dc.b	nF5, $04, nRst, $14, nE5, $04, nRst, $14, nE5, $04, nRst, $0C
0009BEAA C204 8014 C21C 8004 C404+  	dc.b	nF5, $04, nRst, $14, nF5, $1C, nRst, $04, nG5, $04, nRst, $14
0009BEB6 C408 8010 C204 8014 C204+  	dc.b	nG5, $08, nRst, $10, nF5, $04, nRst, $14, nF5, $04, nRst, $14
0009BEC2 C108 8010 C104 800C C204+  	dc.b	nE5, $08, nRst, $10, nE5, $04, nRst, $0C, nF5, $04, nRst, $14
0009BECE C21C 8004 C108 8010 C108+  	dc.b	nF5, $1C, nRst, $04, nE5, $08, nRst, $10, nE5, $08, nRst, $10
0009BEDA BF08 8010 C20C 800C C408+  	dc.b	nD5, $08, nRst, $10, nF5, $0C, nRst, $0C, nG5, $08, nRst, $10
0009BEE6 C408 8010 BF08 8010 BF0C+  	dc.b	nG5, $08, nRst, $10, nD5, $08, nRst, $10, nD5, $0C, nRst, $0C
0009BEF2 BA08 8010 BD0C 800C BD0C+  	dc.b	nA4, $08, nRst, $10, nC5, $0C, nRst, $0C, nC5, $0C, nRst, $0C
0009BEFE BD0C 800C BF08 8010 BF08+  	dc.b	nC5, $0C, nRst, $0C, nD5, $08, nRst, $10, nD5, $08, nRst, $10
0009BF0A BF08 8010 BF08 8010        	dc.b	nD5, $08, nRst, $10, nD5, $08, nRst, $10
0009BF12 F6FF 7E                    	smpsJump            PasswordEntry_Jump02
0009BF15                            
0009BF15                            ; FM4 Data
0009BF15                            PasswordEntry_FM4:
0009BF15 E040                       	smpsPan             panRight, $00
0009BF17 EF02                       	smpsSetvoice        $02
0009BF19                            
0009BF19                            PasswordEntry_Jump01:
0009BF19 C404 8014 C104 8014 BF04+  	dc.b	nG5, $04, nRst, $14, nE5, $04, nRst, $14, nD5, $04, nRst, $14
0009BF25 BF04 8014 BD04 8014 BD04+  	dc.b	nD5, $04, nRst, $14, nC5, $04, nRst, $14, nC5, $04, nRst, $0C
0009BF31 BF04 8014 BF18 8008 C104+  	dc.b	nD5, $04, nRst, $14, nD5, $18, nRst, $08, nE5, $04, nRst, $14
0009BF3D C104 8014 BF04 8014 BF04+  	dc.b	nE5, $04, nRst, $14, nD5, $04, nRst, $14, nD5, $04, nRst, $14
0009BF49 BD04 8014 BD04 800C BF04+  	dc.b	nC5, $04, nRst, $14, nC5, $04, nRst, $0C, nD5, $04, nRst, $14
0009BF55 BF1C 8004 C408 8010 C408+  	dc.b	nD5, $1C, nRst, $04, nG5, $08, nRst, $10, nG5, $08, nRst, $10
0009BF61 C208 8010 BF08 8010 BF08+  	dc.b	nF5, $08, nRst, $10, nD5, $08, nRst, $10, nD5, $08, nRst, $10
0009BF6D BF08 8010 BC08 8010 BC0C+  	dc.b	nD5, $08, nRst, $10, nB4, $08, nRst, $10, nB4, $0C, nRst, $0C
0009BF79 BD08 8010 BA08 8010 BA08+  	dc.b	nC5, $08, nRst, $10, nA4, $08, nRst, $10, nA4, $08, nRst, $10
0009BF85 BA08 8010 BC08 8010 BC08+  	dc.b	nA4, $08, nRst, $10, nB4, $08, nRst, $10, nB4, $08, nRst, $10
0009BF91 BC08 8010 BC08 8010        	dc.b	nB4, $08, nRst, $10, nB4, $08, nRst, $10
0009BF99 F6FF 7E                    	smpsJump            PasswordEntry_Jump01
0009BF9C                            
0009BF9C                            ; FM5 Data
0009BF9C                            PasswordEntry_FM5:
0009BF9C EF00                       	smpsSetvoice        $00
0009BF9E E1FB                       	smpsAlterNote       $FB
0009BFA0 800C                       	dc.b	nRst, $0C
0009BFA2 F6FE 8D                    	smpsJump            PasswordEntry_Jump00
0009BFA5                            
0009BFA5                            ; PSG1 Data
0009BFA5                            PasswordEntry_PSG1:
0009BFA5 C410 C908 CD10 D038 C410+  	dc.b	nG5, $10, nC6, $08, nE6, $10, nG6, $38, nG5, $10, nC6, $08
0009BFB1 CD10 D038 C410 C908 CD10+  	dc.b	nE6, $10, nG6, $38, nG5, $10, nC6, $08, nE6, $10, nG6, $38
0009BFBD C410 C908 CD10 D038 C410+  	dc.b	nG5, $10, nC6, $08, nE6, $10, nG6, $38, nG5, $10, nC6, $08
0009BFC9 CD10 D038 C410 C808 CB10+  	dc.b	nE6, $10, nG6, $38, nG5, $10, nB5, $08, nD6, $10, nG6, $38
0009BFD5 C210 C608 C910 CE18 C908+  	dc.b	nF5, $10, nA5, $08, nC6, $10, nF6, $18, nC6, $08, nA5, $10
0009BFE1 C208 C410 C808 CB10 D018+  	dc.b	nF5, $08, nG5, $10, nB5, $08, nD6, $10, nG6, $18, nD6, $08
0009BFED C810 C408                  	dc.b	nB5, $10, nG5, $08
0009BFF1 F6FF B2                    	smpsJump            PasswordEntry_PSG1
0009BFF4                            
0009BFF4                            ; PSG2 Data
0009BFF4                            PasswordEntry_PSG2:
0009BFF4 E1FF                       	smpsAlterNote       $FF
0009BFF6 800C                       	dc.b	nRst, $0C
0009BFF8 F6FF AB                    	smpsJump            PasswordEntry_PSG1
0009BFFB                            
0009BFFB                            ; PSG3 Data
0009BFFB                            PasswordEntry_PSG3:
0009BFFB F502                       	smpsPSGvoice        fTone_02
0009BFFD F3E7                       	smpsPSGform         $E7
0009BFFF C508 80C5 C508 80C5 C508+  	dc.b	nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5
0009C00B C508 80C5 C508 80C5 C508+  	dc.b	nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5
0009C017 C508 80C5 C508 C5          	dc.b	nAb5, $08, nRst, nAb5, nAb5, $08, nAb5
0009C01E F503                       	smpsPSGvoice        fTone_03
0009C020 C5                         	dc.b	nAb5
0009C021 F6FF D8                    	smpsJump            PasswordEntry_PSG3
0009C024                            
0009C024                            ; DAC Data
0009C024                            PasswordEntry_DAC:
0009C024 8118 8281 8210 8108 8118+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $18, dSnare, dKick
0009C030 0880 0881 8210 8108        	dc.b	$08, nRst, $08, dKick, dSnare, $10, dKick, $08
0009C038 F700 03FF E8               	smpsLoop            $00, $03, PasswordEntry_DAC
0009C03D 8118 8281 8210 8108 8118+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $18, dSnare, dKick
0009C049 0880 0881 8210 8208        	dc.b	$08, nRst, $08, dKick, dSnare, $10, dSnare, $08
0009C051                            
0009C051                            PasswordEntry_Loop00:
0009C051 8118 8281 8210 8108 8118+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $18, dSnare, dKick
0009C05D 0880 0881 8210 8108        	dc.b	$08, nRst, $08, dKick, dSnare, $10, dKick, $08
0009C065 F700 03FF E8               	smpsLoop            $00, $03, PasswordEntry_Loop00
0009C06A 8118 8281 8210 8108 8108+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $08, nRst, $08
0009C076 8182 8182 8282 8889 898A   	dc.b	dKick, dSnare, dKick, dSnare, dSnare, dSnare, dHiTimpani, dMidTimpani, dMidTimpani, dLowTimpani
0009C080 F6FF A2                    	smpsJump            PasswordEntry_DAC
0009C083                            
0009C083                            PasswordEntry_Voices:
0009C083                            ;	Voice $00
0009C083                            ;	$04
0009C083                            ;	$02, $01, $01, $00, 	$1F, $10, $1F, $12, 	$09, $03, $0B, $04
0009C083                            ;	$03, $00, $00, $05, 	$EF, $FF, $2F, $0F, 	$1C, $80, $19, $80
0009C083                            	smpsVcAlgorithm     $04
0009C083                            	smpsVcFeedback      $00
0009C083                            	smpsVcUnusedBits    $00
0009C083                            	smpsVcDetune        $00, $00, $00, $00
0009C083                            	smpsVcCoarseFreq    $00, $01, $01, $02
0009C083                            	smpsVcRateScale     $00, $00, $00, $00
0009C083                            	smpsVcAttackRate    $12, $1F, $10, $1F
0009C083                            	smpsVcAmpMod        $00, $00, $00, $00
0009C083                            	smpsVcDecayRate1    $04, $0B, $03, $09
0009C083                            	smpsVcDecayRate2    $05, $00, $00, $03
0009C083                            	smpsVcDecayLevel    $00, $02, $0F, $0E
0009C083                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C09C                            
0009C09C                            ;	Voice $01
0009C09C                            ;	$39
0009C09C                            ;	$03, $61, $40, $00, 	$1F, $5F, $5F, $5F, 	$10, $11, $09, $09
0009C09C                            ;	$06, $00, $00, $00, 	$C8, $F8, $F8, $F8, 	$1E, $24, $20, $80
0009C09C                            	smpsVcAlgorithm     $01
0009C09C                            	smpsVcFeedback      $07
0009C09C                            	smpsVcUnusedBits    $00
0009C09C                            	smpsVcDetune        $00, $04, $06, $00
0009C09C                            	smpsVcCoarseFreq    $00, $00, $01, $03
0009C09C                            	smpsVcRateScale     $01, $01, $01, $00
0009C09C                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C09C                            	smpsVcAmpMod        $00, $00, $00, $00
0009C09C                            	smpsVcDecayRate1    $09, $09, $11, $10
0009C09C                            	smpsVcDecayRate2    $00, $00, $00, $06
0009C09C                            	smpsVcDecayLevel    $0F, $0F, $0F, $0C
0009C09C                            	smpsVcReleaseRate   $08, $08, $08, $08
0009C0B5                            
0009C0B5                            ;	Voice $02
0009C0B5                            ;	$2C
0009C0B5                            ;	$41, $00, $23, $00, 	$1F, $1F, $1F, $1F, 	$08, $0A, $0B, $0A
0009C0B5                            ;	$04, $05, $00, $05, 	$45, $56, $85, $86, 	$14, $82, $18, $82
0009C0B5                            	smpsVcAlgorithm     $04
0009C0B5                            	smpsVcFeedback      $05
0009C0B5                            	smpsVcUnusedBits    $00
0009C0B5                            	smpsVcDetune        $00, $02, $00, $04
0009C0B5                            	smpsVcCoarseFreq    $00, $03, $00, $01
0009C0B5                            	smpsVcRateScale     $00, $00, $00, $00
0009C0B5                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C0B5                            	smpsVcAmpMod        $00, $00, $00, $00
0009C0B5                            	smpsVcDecayRate1    $0A, $0B, $0A, $08
0009C0B5                            	smpsVcDecayRate2    $05, $00, $05, $04
0009C0B5                            	smpsVcDecayLevel    $08, $08, $05, $04
0009C0B5                            	smpsVcReleaseRate   $06, $05, $06, $05
0009C0CE                            
0009C0CE                            
0009C0CE                            		even		
0009C0CE                            ; ---------------------------------------------------------------------------
0009C0CE                            ; Sound	effect pointers
0009C0CE                            ; ---------------------------------------------------------------------------
0009C0CE                            SoundIndex:
0009C0CE 0000 0000                  ptr_sndA0:	dc.l SoundA0
0009C0D2 0000 0000                  ptr_sndA1:	dc.l SoundA1
0009C0D6 0000 0000                  ptr_sndA2:	dc.l SoundA2
0009C0DA 0000 0000                  ptr_sndA3:	dc.l SoundA3
0009C0DE 0000 0000                  ptr_sndA4:	dc.l SoundA4
0009C0E2 0000 0000                  ptr_sndA5:	dc.l SoundA5
0009C0E6 0000 0000                  ptr_sndA6:	dc.l SoundA6
0009C0EA 0000 0000                  ptr_sndA7:	dc.l SoundA7
0009C0EE 0000 0000                  ptr_sndA8:	dc.l SoundA8
0009C0F2 0000 0000                  ptr_sndA9:	dc.l SoundA9
0009C0F6 0000 0000                  ptr_sndAA:	dc.l SoundAA
0009C0FA 0000 0000                  ptr_FireShield:	dc.l SoundAB
0009C0FE 0000 0000                  ptr_sndAC:	dc.l SoundAC
0009C102 0000 0000                  ptr_sndAD:	dc.l SoundAD
0009C106 0000 0000                  ptr_sndAE:	dc.l SoundAE
0009C10A 0000 0000                  ptr_sndAF:	dc.l SoundAF
0009C10E 0000 0000                  ptr_sndB0:	dc.l SoundB0
0009C112 0000 0000                  ptr_sndB1:	dc.l SoundB1
0009C116 0000 0000                  ptr_sndB2:	dc.l SoundB2
0009C11A 0000 0000                  ptr_sndB3:	dc.l SoundB3
0009C11E 0000 0000                  ptr_sndB4:	dc.l SoundB4
0009C122 0000 0000                  ptr_sndB5:	dc.l SoundB5
0009C126 0000 0000                  ptr_sndB6:	dc.l SoundB6
0009C12A 0000 0000                  ptr_sndB7:	dc.l SoundB7
0009C12E 0000 0000                  ptr_sndB8:	dc.l SoundB8
0009C132 0000 0000                  ptr_sndB9:	dc.l SoundB9
0009C136 0000 0000                  ptr_sndBA:	dc.l SoundBA
0009C13A 0000 0000                  ptr_sndBB:	dc.l SoundBB
0009C13E 0000 0000                  ptr_sndBC:	dc.l SoundBC
0009C142 0000 0000                  ptr_sndBD:	dc.l SoundBD
0009C146 0000 0000                  ptr_sndBE:	dc.l SoundBE
0009C14A 0000 0000                  ptr_sndBF:	dc.l SoundBF
0009C14E 0000 0000                  ptr_sndC0:	dc.l SoundC0
0009C152 0000 0000                  ptr_sndC1:	dc.l SoundC1
0009C156 0000 0000                  ptr_sndC2:	dc.l SoundC2
0009C15A 0000 0000                  ptr_sndC3:	dc.l SoundC3
0009C15E 0000 0000                  ptr_sndC4:	dc.l SoundC4
0009C162 0000 0000                  ptr_sndC5:	dc.l SoundC5
0009C166 0000 0000                  ptr_sndC6:	dc.l SoundC6
0009C16A 0000 0000                  ptr_sndC7:	dc.l SoundC7
0009C16E 0000 0000                  ptr_sndC8:	dc.l SoundC8
0009C172 0000 0000                  ptr_sndC9:	dc.l SoundC9
0009C176 0000 0000                  ptr_sndCA:	dc.l SoundCA
0009C17A 0000 0000                  ptr_sndCB:	dc.l SoundCB
0009C17E 0000 0000                  ptr_sndCC:	dc.l SoundCC
0009C182 0000 0000                  ptr_sndCD:	dc.l SoundCD
0009C186 0000 0000                  ptr_sndCE:	dc.l SoundCE
0009C18A 0000 0000                  ptr_sndCF:	dc.l SoundCF
0009C18E                            ptr_sndend
0009C18E                            ; ---------------------------------------------------------------------------
0009C18E                            ; Special sound effect pointers
0009C18E                            ; ---------------------------------------------------------------------------
0009C18E                            SpecSoundIndex:
0009C18E 0000 0000                  ptr_sndD0:	dc.l SoundD0
0009C192 0000 0000                  ptr_sndD1:	dc.l SoundD1
0009C196 0000 0000                  ptr_sndD2:	dc.l SoundD2
0009C19A 0000 0000                  ptr_sndD3:	dc.l SoundD3
0009C19E 0000 0000                  ptr_sndD4:	dc.l SoundD4
0009C1A2 0000 0000                  ptr_sndD5:	dc.l SoundD5
0009C1A6                            ptr_specend
0009C1A6                            SoundA0:	include	"sound/sfx/Jump.asm"
0009C1A6                            SndA0_Jump_Header:
0009C1A6                            	smpsHeaderStartSong 1
0009C1A8 01                         	smpsHeaderTempoSFX  $01
0009C1A9 01                         	smpsHeaderChanSFX   $01
0009C1AA                            
0009C1B0                            
0009C1B0                            ; PSG2 Data
0009C1B0                            SndA0_Jump_PSG2:
0009C1B0 F500                       	smpsPSGvoice        $00
0009C1B2 9E05                       	dc.b	nF2, $05
0009C1B9 A315                       	dc.b	nBb2, $15
0009C1BB F2                         	smpsStop
0009C1BC                            
0009C1BC                            ; Song seems to not use any FM voices
0009C1BC                            SndA0_Jump_Voices:
0009C1BC                            SndA0_Jump_Voices:
0009C1BC                            		even
0009C1BC                            SoundA1:	incbin	"sound/sfx/SndA1 - Lamppost.bin"
0009C1E6                            		even
0009C1E6                            SoundA2:	include	"sound/sfx/DrowningSound.asm"
0009C1E6                            SndDF_Header:
0009C1E6                            	smpsHeaderStartSong 3
0009C1E8 01                         	smpsHeaderTempoSFX  $01
0009C1E9 01                         	smpsHeaderChanSFX   $01
0009C1EA                            
0009C1F0                            
0009C1F0                            ; FM5 Data
0009C1F0                            SndDF_FM5:
0009C1F0 EF00                       	smpsSetvoice        $00
0009C1F2                            
0009C1F2                            SndDF_Loop00:
0009C1F2 F800 00                    	smpsCall            SndDF_Call00
0009C1F5 E905                       	smpsAlterPitch $05
0009C1F7 E608                       	smpsFMAlterVol      $08
0009C1F9 F701 03FF F5               	smpsLoop            $01, $03, SndDF_Loop00
0009C1FE E9EC                       	smpsAlterPitch $EC
0009C200 E6E0                       	smpsFMAlterVol      $E0
0009C202 F2                         	smpsStop
0009C203                            
0009C203                            SndDF_Call00:
0009C203 9902                       	dc.b	nC2, $02
0009C205 E901                       	smpsAlterPitch $01
0009C207 F700 0AFF F8               	smpsLoop            $00, $0A, SndDF_Call00
0009C20C E9F6                       	smpsAlterPitch $F6
0009C20E E3                         	smpsReturn
0009C20F                            
0009C20F                            SndDF_Voices:
0009C20F                            ;	Voice $00
0009C20F                            ;	$07
0009C20F                            ;	$04, $04, $05, $04, 	$1F, $1F, $15, $15, 	$00, $00, $00, $00
0009C20F                            ;	$00, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$7F, $7F, $80, $80
0009C20F                            	smpsVcAlgorithm     $07
0009C20F                            	smpsVcFeedback      $00
0009C20F                            	smpsVcUnusedBits    $00
0009C20F                            	smpsVcDetune        $00, $00, $00, $00
0009C20F                            	smpsVcCoarseFreq    $04, $05, $04, $04
0009C20F                            	smpsVcRateScale     $00, $00, $00, $00
0009C20F                            	smpsVcAttackRate    $15, $15, $1F, $1F
0009C20F                            	smpsVcAmpMod        $00, $00, $00, $00
0009C20F                            	smpsVcDecayRate1    $00, $00, $00, $00
0009C20F                            	smpsVcDecayRate2    $00, $00, $00, $00
0009C20F                            	smpsVcDecayLevel    $01, $01, $01, $01
0009C20F                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C228                            		even
0009C228                            SoundA3:	incbin	"sound/sfx/SndA3 - Death.bin"
0009C25A                            		even
0009C25A                            SoundA4:	incbin	"sound/sfx/SndA4 - Skid.bin"
0009C29E 00                         		even
0009C29E                            SoundA5:	include	"sound/sfx/LargeRingBox.asm"
0009C29E                            SndD2_Header:
0009C29E                            	smpsHeaderStartSong 3
0009C2A0 01                         	smpsHeaderTempoSFX  $01
0009C2A1 01                         	smpsHeaderChanSFX   $01
0009C2A2                            
0009C2A8                            
0009C2A8                            ; FM4 Data
0009C2A8                            SndD2_FM4:
0009C2A8 EF00                       	smpsSetvoice        $00
0009C2AF C645                       	dc.b	nA5, $45
0009C2B1 F2                         	smpsStop
0009C2B2                            
0009C2B2                            SndD2_Voices:
0009C2B2                            ;	Voice $00
0009C2B2                            ;	$04
0009C2B2                            ;	$27, $02, $07, $47, 	$1F, $1F, $1F, $1F, 	$07, $0A, $07, $0D
0009C2B2                            ;	$00, $0B, $00, $0B, 	$1F, $0F, $1F, $0F, 	$1F, $80, $23, $80
0009C2B2                            	smpsVcAlgorithm     $04
0009C2B2                            	smpsVcFeedback      $00
0009C2B2                            	smpsVcUnusedBits    $00
0009C2B2                            	smpsVcDetune        $04, $00, $00, $02
0009C2B2                            	smpsVcCoarseFreq    $07, $07, $02, $07
0009C2B2                            	smpsVcRateScale     $00, $00, $00, $00
0009C2B2                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C2B2                            	smpsVcAmpMod        $00, $00, $00, $00
0009C2B2                            	smpsVcDecayRate1    $0D, $07, $0A, $07
0009C2B2                            	smpsVcDecayRate2    $0B, $00, $0B, $00
0009C2B2                            	smpsVcDecayLevel    $00, $01, $00, $01
0009C2B2                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C2CC 00                         		even
0009C2CC                            SoundA6:	incbin	"sound/sfx/SndA6 - Hit Spikes.bin"
0009C2FC                            		even
0009C2FC                            SoundA7:	incbin	"sound/sfx/SndA7 - Push Block.bin"
0009C32C                            		even
0009C32C                            SoundA8:	incbin	"sound/sfx/SndA8 - SS Goal.bin"
0009C360                            		even
0009C360                            SoundA9:	incbin	"sound/sfx/SndA9 - SS Item.bin"
0009C372                            		even
0009C372                            SoundAA:	include	"sound/sfx/Splash.asm"
0009C372                            SndA2_Header:
0009C372                            	smpsHeaderStartSong 3
0009C374 01                         	smpsHeaderTempoSFX  $01
0009C375 02                         	smpsHeaderChanSFX   $02
0009C376                            
0009C382                            
0009C382                            ; FM3 Data
0009C382                            SndA2_FM3:
0009C382 EF00                       	smpsSetvoice        $00
0009C389 8106                       	dc.b	nC0, $06
0009C38B                            
0009C38B                            SndA2_Loop00:
0009C38B 810E                       	dc.b	nC0, $0E
0009C38D E60E                       	smpsAlterVol      $0E
0009C38F F700 04FF F8               	smpsLoop            $00, $04, SndA2_Loop00
0009C394 F2                         	smpsStop
0009C395                            
0009C395                            ; FM4 Data
0009C395                            SndA2_FM4:
0009C395 EF01                       	smpsSetvoice        $01
0009C397 A606 14                    	dc.b	nCs3, $06, $14
0009C39A F2                         	smpsStop
0009C39B                            
0009C39B                            SndA2_Voices:
0009C39B                            ;	Voice $00
0009C39B                            ;	$F9
0009C39B                            ;	$21, $30, $10, $32, 	$1C, $1F, $1F, $10, 	$05, $18, $09, $02
0009C39B                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0C, $06, $04, $80
0009C39B                            	smpsVcAlgorithm     $01
0009C39B                            	smpsVcFeedback      $07
0009C39B                            	smpsVcUnusedBits    $03
0009C39B                            	smpsVcDetune        $03, $01, $03, $02
0009C39B                            	smpsVcCoarseFreq    $02, $00, $00, $01
0009C39B                            	smpsVcRateScale     $00, $00, $00, $00
0009C39B                            	smpsVcAttackRate    $10, $1F, $1F, $1C
0009C39B                            	smpsVcAmpMod        $00, $00, $00, $00
0009C39B                            	smpsVcDecayRate1    $02, $09, $18, $05
0009C39B                            	smpsVcDecayRate2    $05, $10, $1F, $0B
0009C39B                            	smpsVcDecayLevel    $02, $04, $02, $01
0009C39B                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C3B4                            
0009C3B4                            ;	Voice $01
0009C3B4                            ;	$00
0009C3B4                            ;	$00, $03, $02, $00, 	$D9, $DF, $1F, $1F, 	$12, $11, $14, $0F
0009C3B4                            ;	$0A, $00, $0A, $0D, 	$FF, $FF, $FF, $FF, 	$22, $07, $27, $80
0009C3B4                            	smpsVcAlgorithm     $00
0009C3B4                            	smpsVcFeedback      $00
0009C3B4                            	smpsVcUnusedBits    $00
0009C3B4                            	smpsVcDetune        $00, $00, $00, $00
0009C3B4                            	smpsVcCoarseFreq    $00, $02, $03, $00
0009C3B4                            	smpsVcRateScale     $00, $00, $03, $03
0009C3B4                            	smpsVcAttackRate    $1F, $1F, $1F, $19
0009C3B4                            	smpsVcAmpMod        $00, $00, $00, $00
0009C3B4                            	smpsVcDecayRate1    $0F, $14, $11, $12
0009C3B4                            	smpsVcDecayRate2    $0D, $0A, $00, $0A
0009C3B4                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0009C3B4                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C3CE 00                         		even
0009C3CE                            SoundAB:	include	"sound/sfx/FireShield.asm"
0009C3CE                            Sound_3E_Header:
0009C3CE                            	smpsHeaderStartSong 3
0009C3D0 01                         	smpsHeaderTempoSFX  $01
0009C3D1 01                         	smpsHeaderChanSFX   $01
0009C3D2                            
0009C3D8                            
0009C3D8                            ; FM5 Data
0009C3D8                            Sound_3E_3F_40_41_FM5:
0009C3D8 EF00                       	smpsSetvoice        $00
0009C3DA A305 E7A4 26               	dc.b	nBb2, $05, smpsNoAttack, nB2, $26
0009C3DF F2                         	smpsStop
0009C3E0                            
0009C3E0                            Sound_3E_Voices:
0009C3E0                            ;	Voice $00
0009C3E0                            ;	$0C
0009C3E0                            ;	$01, $21, $31, $31, 	$1E, $0C, $0E, $1C, 	$0A, $00, $04, $00
0009C3E0                            ;	$08, $12, $08, $0C, 	$FF, $0F, $BF, $0F, 	$03, $80, $0D, $80
0009C3E0                            	smpsVcAlgorithm     $04
0009C3E0                            	smpsVcFeedback      $01
0009C3E0                            	smpsVcUnusedBits    $00
0009C3E0                            	smpsVcDetune        $03, $03, $02, $00
0009C3E0                            	smpsVcCoarseFreq    $01, $01, $01, $01
0009C3E0                            	smpsVcRateScale     $00, $00, $00, $00
0009C3E0                            	smpsVcAttackRate    $1C, $0E, $0C, $1E
0009C3E0                            	smpsVcAmpMod        $00, $00, $00, $00
0009C3E0                            	smpsVcDecayRate1    $00, $04, $00, $0A
0009C3E0                            	smpsVcDecayRate2    $0C, $08, $12, $08
0009C3E0                            	smpsVcDecayLevel    $00, $0B, $00, $0F
0009C3E0                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C3F9                            
0009C3F9                            
0009C3FA 00                         		even
0009C3FA                            SoundAC:	incbin	"sound/sfx/SndAC - Hit Boss.bin"
0009C42E                            		even
0009C42E                            SoundAD:	incbin	"sound/sfx/SndAD - Get Bubble.bin"
0009C464                            		even
0009C464                            SoundAE:	include	"sound/sfx/Fireball.asm"
0009C464                            Sound_70_Header:
0009C464                            	smpsHeaderStartSong 3
0009C466 01                         	smpsHeaderTempoSFX  $01
0009C467 02                         	smpsHeaderChanSFX   $02
0009C468                            
0009C474                            
0009C474                            ; FM5 Data
0009C474                            Sound_70_FM5:
0009C474 EF00                       	smpsSetvoice        $00
0009C476 8001                       	dc.b	nRst, $01
0009C47D 8306 8502                  	dc.b	nD0, $06, nE0, $02
0009C481 F2                         	smpsStop
0009C482                            
0009C482                            ; PSG3 Data
0009C482                            Sound_70_PSG3:
0009C482 F500                       	smpsPSGvoice        sTone_0D
0009C484 800B                       	dc.b	nRst, $0B
0009C486 F3E7                       	smpsPSGform         $E7
0009C488 C501 E7                    	dc.b	(nMaxPSG1-$D)&$FF, $01, smpsNoAttack
0009C48B                            
0009C48B                            Sound_70_Loop00:
0009C48B 02                         	dc.b	$02
0009C48C EC01                       	smpsPSGAlterVol     $01
0009C48E E7                         	dc.b	smpsNoAttack
0009C48F F700 10FF F8               	smpsLoop            $00, $10, Sound_70_Loop00
0009C494 F2                         	smpsStop
0009C495                            
0009C495                            Sound_70_Voices:
0009C495                            ;	Voice $00
0009C495                            ;	$FA
0009C495                            ;	$02, $03, $00, $05, 	$12, $11, $0F, $13, 	$05, $18, $09, $02
0009C495                            ;	$06, $0F, $06, $02, 	$1F, $2F, $4F, $2F, 	$2F, $1A, $0E, $80
0009C495                            	smpsVcAlgorithm     $02
0009C495                            	smpsVcFeedback      $07
0009C495                            	smpsVcUnusedBits    $03
0009C495                            	smpsVcDetune        $00, $00, $00, $00
0009C495                            	smpsVcCoarseFreq    $05, $00, $03, $02
0009C495                            	smpsVcRateScale     $00, $00, $00, $00
0009C495                            	smpsVcAttackRate    $13, $0F, $11, $12
0009C495                            	smpsVcAmpMod        $00, $00, $00, $00
0009C495                            	smpsVcDecayRate1    $02, $09, $18, $05
0009C495                            	smpsVcDecayRate2    $02, $06, $0F, $06
0009C495                            	smpsVcDecayLevel    $02, $04, $02, $01
0009C495                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C4AE                            
0009C4AE                            
0009C4AE                            		even
0009C4AE                            SoundAF:	incbin	"sound/sfx/SndAF - Shield.bin"
0009C4DC                            		even
0009C4DC                            SoundB0:	incbin	"sound/sfx/SndB0 - Saw.bin"
0009C50E                            		even
0009C50E                            SoundB1:	incbin	"sound/sfx/SndB1 - Electric.bin"
0009C53A                            		even
0009C53A                            SoundB2:	incbin	"sound/sfx/SndB2 - Drown Death.bin"
0009C58A                            		even
0009C58A                            SoundB3:	incbin	"sound/sfx/SndB3 - Flamethrower.bin"
0009C5D4                            		even
0009C5D4                            SoundB4:	incbin	"sound/sfx/SndB4 - Bumper.bin"
0009C630                            		even
0009C630                            SoundB5:	incbin	"sound/sfx/SndB5 - Ring.bin"
0009C65E                            		even
0009C65E                            SoundB6:	include	"sound/sfx/Spikes.asm"
0009C65E                            SpikesSFX_Header:
0009C65E                            	smpsHeaderStartSong 3
0009C660 01                         	smpsHeaderTempoSFX  $01
0009C661 02                         	smpsHeaderChanSFX   $02
0009C662                            
0009C66E                            
0009C66E                            ; FM6 Data
0009C66E                            SndB7_FM4:
0009C66E EF01                       	smpsSetvoice        $01
0009C675 B105                       	dc.b	nC4, $05
0009C677 F1                         	smpsModOn
0009C678 E10A                       	smpsAlterNote       $0A
0009C67A E601                       	smpsAlterVol        $01
0009C67C F2                         	smpsStop
0009C67D                            
0009C67D                            ; FM5 Data
0009C67D                            SndB7_FM5:
0009C67D 8005                       	dc.b	nRst, $05			 
0009C67F EF00                       	smpsSetvoice        $00
0009C681 DB01 8001 DB11             	dc.b	nFs7, $01, nRst, $01, nFs7, $11
0009C687 F2                         	smpsStop
0009C688                            
0009C688                            SndB7_Voices:
0009C688                            ;	Voice $00
0009C688                            ;	$34
0009C688                            ;	$09, $0F, $01, $D7, 	$1F, $1F, $1F, $1F, 	$0C, $11, $09, $0F
0009C688                            ;	$0A, $0E, $0D, $0E, 	$35, $1A, $55, $3A, 	$0C, $80, $0F, $80
0009C688                            	smpsVcAlgorithm     $04
0009C688                            	smpsVcFeedback      $06
0009C688                            	smpsVcUnusedBits    $00
0009C688                            	smpsVcDetune        $0D, $00, $00, $00
0009C688                            	smpsVcCoarseFreq    $07, $01, $0F, $09
0009C688                            	smpsVcRateScale     $00, $00, $00, $00
0009C688                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C688                            	smpsVcAmpMod        $00, $00, $00, $00
0009C688                            	smpsVcDecayRate1    $0F, $09, $11, $0C
0009C688                            	smpsVcDecayRate2    $0E, $0D, $0E, $0A
0009C688                            	smpsVcDecayLevel    $03, $05, $01, $03
0009C688                            	smpsVcReleaseRate   $0A, $05, $0A, $05
0009C6A1                            
0009C6A1                            ;	Voice $01
0009C6A1                            ;	$FA
0009C6A1                            ;	$21, $3A, $19, $30, 	$1F, $1F, $1F, $1F, 	$05, $18, $09, $02
0009C6A1                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0E, $07, $04, $80
0009C6A1                            	smpsVcAlgorithm     $02
0009C6A1                            	smpsVcFeedback      $07
0009C6A1                            	smpsVcUnusedBits    $03
0009C6A1                            	smpsVcDetune        $03, $01, $03, $02
0009C6A1                            	smpsVcCoarseFreq    $00, $09, $0A, $01
0009C6A1                            	smpsVcRateScale     $00, $00, $00, $00
0009C6A1                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C6A1                            	smpsVcAmpMod        $00, $00, $00, $00
0009C6A1                            	smpsVcDecayRate1    $02, $09, $18, $05
0009C6A1                            	smpsVcDecayRate2    $05, $10, $1F, $0B
0009C6A1                            	smpsVcDecayLevel    $02, $04, $02, $01
0009C6A1                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C6BA                            		even
0009C6BA                            SoundB7:	incbin	"sound/sfx/SndB7 - Rumbling.bin"
0009C6F6                            		even
0009C6F6                            SoundB8:	include	"sound/sfx/ScoreTallying.asm"
0009C6F6                            SndBD_Header:
0009C6F6                            	smpsHeaderStartSong 3
0009C6F8 01                         	smpsHeaderTempoSFX  $01
0009C6F9 01                         	smpsHeaderChanSFX   $01
0009C6FA                            
0009C700                            
0009C700                            ; FM6 Data
0009C700                            SndBD_FM3:
0009C700 EF00                       	smpsSetvoice        $00
0009C702                            
0009C702                            SndBD_Loop00:
0009C702 C009                       	dc.b	nEb5, $09
0009C704 F700 08FF FA               	smpsLoop            $00, $08, SndBD_Loop00
0009C709 F2                         	smpsStop
0009C70A                            
0009C70A                            SndBD_Voices:
0009C70A                            ;	Voice $00
0009C70A                            ;	$02
0009C70A                            ;	$02, $51, $20, $01, 	$1E, $1E, $1E, $1E, 	$10, $0A, $14, $13
0009C70A                            ;	$01, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$24, $0E, $1F, $80
0009C70A                            	smpsVcAlgorithm     $02
0009C70A                            	smpsVcFeedback      $00
0009C70A                            	smpsVcUnusedBits    $00
0009C70A                            	smpsVcDetune        $00, $02, $05, $00
0009C70A                            	smpsVcCoarseFreq    $01, $00, $01, $02
0009C70A                            	smpsVcRateScale     $00, $00, $00, $00
0009C70A                            	smpsVcAttackRate    $1E, $1E, $1E, $1E
0009C70A                            	smpsVcAmpMod        $00, $00, $00, $00
0009C70A                            	smpsVcDecayRate1    $13, $14, $0A, $10
0009C70A                            	smpsVcDecayRate2    $00, $00, $00, $01
0009C70A                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0009C70A                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C724 00                         		even
0009C724                            SoundB9:	include	"sound/sfx/BreakFloor.asm"
0009C724                            Sound_59_Header:
0009C724                            	smpsHeaderStartSong 3
0009C726 01                         	smpsHeaderTempoSFX  $01
0009C727 04                         	smpsHeaderChanSFX   $04
0009C728                            
0009C740                            
0009C740                            ; FM3 Data
0009C740                            Sound_59_FM3:
0009C740 E040                       	smpsPan             panRight, $00
0009C742 8002                       	dc.b	nRst, $02
0009C744 F600 00                    	smpsJump            Sound_59_FM4
0009C747                            
0009C747                            ; FM5 Data
0009C747                            Sound_59_FM5:
0009C747 E080                       	smpsPan             panLeft, $00
0009C749 8001                       	dc.b	nRst, $01
0009C74B                            
0009C74B                            ; FM4 Data
0009C74B                            Sound_59_FM4:
0009C74B EF00                       	smpsSetvoice        $00
0009C752 8110                       	dc.b	nC0, $10
0009C754 F2                         	smpsStop
0009C755                            
0009C755                            ; PSG3 Data
0009C755                            Sound_59_PSG3:
0009C75A F3E7                       	smpsPSGform         $E7
0009C75C                            
0009C75C                            Sound_59_Loop00:
0009C75C B018 E7                    	dc.b	nB3, $18, smpsNoAttack
0009C75F EC03                       	smpsPSGAlterVol     $03
0009C761 F700 05FF F7               	smpsLoop            $00, $05, Sound_59_Loop00
0009C766 F2                         	smpsStop
0009C767                            
0009C767                            Sound_59_Voices:
0009C767                            ;	Voice $00
0009C767                            ;	$F9
0009C767                            ;	$21, $30, $10, $32, 	$1F, $1F, $1F, $1F, 	$05, $18, $09, $02
0009C767                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0E, $07, $04, $80
0009C767                            	smpsVcAlgorithm     $01
0009C767                            	smpsVcFeedback      $07
0009C767                            	smpsVcUnusedBits    $03
0009C767                            	smpsVcDetune        $03, $01, $03, $02
0009C767                            	smpsVcCoarseFreq    $02, $00, $00, $01
0009C767                            	smpsVcRateScale     $00, $00, $00, $00
0009C767                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C767                            	smpsVcAmpMod        $00, $00, $00, $00
0009C767                            	smpsVcDecayRate1    $02, $09, $18, $05
0009C767                            	smpsVcDecayRate2    $05, $10, $1F, $0B
0009C767                            	smpsVcDecayLevel    $02, $04, $02, $01
0009C767                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C780                            
0009C780                            
0009C780                            		even
0009C780                            SoundBA:	incbin	"sound/sfx/SndBA - SS Glass.bin"
0009C7A8                            		even
0009C7A8                            SoundBB:	incbin	"sound/sfx/SndBB - Door.bin"
0009C7D4                            		even
0009C7D4                            SoundBC:	include	"sound/sfx/DashRelease.asm"
0009C7D4                            Sound_B6_Header:
0009C7D4                            	smpsHeaderStartSong 3
0009C7D6 01                         	smpsHeaderTempoSFX  $01
0009C7D7 02                         	smpsHeaderChanSFX   $02
0009C7D8                            
0009C7E4                            
0009C7E4                            ; FM5 Data
0009C7E4                            Sound_B6_FM5:
0009C7E4 EF00                       	smpsSetvoice        $00
0009C7EB CD0F                       	dc.b	nE6, $0F
0009C7ED F2                         	smpsStop
0009C7EE                            
0009C7EE                            ; PSG3 Data
0009C7EE                            Sound_B6_PSG3:
0009C7EE F507                       	smpsPSGvoice        sTone_1D
0009C7F0 8006                       	dc.b	nRst, $06
0009C7F7 F3E7                       	smpsPSGform         $E7
0009C7F9 CD4F                       	dc.b	nE6, $4F
0009C7FB F2                         	smpsStop
0009C7FC                            
0009C7FC                            Sound_B6_Voices:
0009C7FC                            ;	Voice $00
0009C7FC                            ;	$3D
0009C7FC                            ;	$09, $03, $00, $00, 	$1F, $1F, $1F, $1F, 	$10, $0C, $0C, $0C
0009C7FC                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$09, $84, $92, $8E
0009C7FC                            	smpsVcAlgorithm     $05
0009C7FC                            	smpsVcFeedback      $07
0009C7FC                            	smpsVcUnusedBits    $00
0009C7FC                            	smpsVcDetune        $00, $00, $00, $00
0009C7FC                            	smpsVcCoarseFreq    $00, $00, $03, $09
0009C7FC                            	smpsVcRateScale     $00, $00, $00, $00
0009C7FC                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C7FC                            	smpsVcAmpMod        $00, $00, $00, $00
0009C7FC                            	smpsVcDecayRate1    $0C, $0C, $0C, $10
0009C7FC                            	smpsVcDecayRate2    $05, $10, $1F, $0B
0009C7FC                            	smpsVcDecayLevel    $02, $04, $02, $01
0009C7FC                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C815                            
0009C815                            
0009C816 00                         		even
0009C816                            SoundBD:	incbin	"sound/sfx/SndBD - ChainStomp.bin"
0009C86A                            		even
0009C86A                            SoundBE:	incbin	"sound/sfx/SndBE - Roll.bin"
0009C8A4                            		even
0009C8A4                            SoundBF:	incbin	"sound/sfx/SndBF - Get Continue.bin"
0009C916                            		even
0009C916                            SoundC0:	incbin	"sound/sfx/SndC0 - Basaran Flap.bin"
0009C944                            		even
0009C944                            SoundC1:	incbin	"sound/sfx/SndC1 - Break Item.bin"
0009C97E                            		even
0009C97E                            SoundC2:	include	"sound/sfx/DrowningWarning.asm"
0009C97E                            SndC1_Header:
0009C97E                            	smpsHeaderStartSong 3
0009C980 01                         	smpsHeaderTempoSFX  $01
0009C981 01                         	smpsHeaderChanSFX   $01
0009C982                            
0009C988                            
0009C988                            ; FM4 Data
0009C988                            SndC1_FM4:
0009C988 EF00                       	smpsSetvoice        $00
0009C98A D506 40                    	dc.b	nC7, $06, $40
0009C98D F2                         	smpsStop
0009C98E                            
0009C98E                            SndC1_Voices:
0009C98E                            ;	Voice $00
0009C98E                            ;	$38
0009C98E                            ;	$01, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$09, $09, $09, $0B
0009C98E                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$5C, $22, $27, $80
0009C98E                            	smpsVcAlgorithm     $00
0009C98E                            	smpsVcFeedback      $07
0009C98E                            	smpsVcUnusedBits    $00
0009C98E                            	smpsVcDetune        $00, $00, $00, $00
0009C98E                            	smpsVcCoarseFreq    $00, $00, $00, $01
0009C98E                            	smpsVcRateScale     $00, $00, $00, $00
0009C98E                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C98E                            	smpsVcAmpMod        $00, $00, $00, $00
0009C98E                            	smpsVcDecayRate1    $0B, $09, $09, $09
0009C98E                            	smpsVcDecayRate2    $00, $00, $00, $00
0009C98E                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0009C98E                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C9A8 00                         		even
0009C9A8                            SoundC3:	incbin	"sound/sfx/SndC3 - Giant Ring.bin"
0009CA22                            		even
0009CA22                            SoundC4:	incbin	"sound/sfx/SndC4 - Bomb.bin"
0009CA4A                            		even
0009CA4A                            SoundC5:	include	"sound/sfx/Cash Register.asm"
0009CA4A                            Sound_B0_Header:
0009CA4A                            	smpsHeaderStartSong 3
0009CA4C 01                         	smpsHeaderTempoSFX  $01
0009CA4D 03                         	smpsHeaderChanSFX   $03
0009CA4E                            
0009CA60                            
0009CA60                            ; FM5 Data
0009CA60                            Sound_B0_FM5:
0009CA60 EF00                       	smpsSetvoice        $00
0009CA62 8A08 8002 8A08             	dc.b	nA0, $08, nRst, $02, nA0, $08
0009CA68 F2                         	smpsStop
0009CA69                            
0009CA69                            ; FM4 Data
0009CA69                            Sound_B0_FM4:
0009CA69 EF01                       	smpsSetvoice        $01
0009CA6B 8012 C655                  	dc.b	nRst, $12, nA5, $55
0009CA6F F2                         	smpsStop
0009CA70                            
0009CA70                            ; FM3 Data
0009CA70                            Sound_B0_FM3:
0009CA70 EF02                       	smpsSetvoice        $02
0009CA72 8002 C205 0405 04          	dc.b	nRst, $02, nF5, $05, $04, $05, $04
0009CA79 F2                         	smpsStop
0009CA7A                            
0009CA7A                            Sound_B0_Voices:
0009CA7A                            ;	Voice $00
0009CA7A                            ;	$3B
0009CA7A                            ;	$03, $02, $03, $06, 	$18, $1A, $1A, $96, 	$17, $0E, $0A, $10
0009CA7A                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $28, $39, $80
0009CA7A                            	smpsVcAlgorithm     $03
0009CA7A                            	smpsVcFeedback      $07
0009CA7A                            	smpsVcUnusedBits    $00
0009CA7A                            	smpsVcDetune        $00, $00, $00, $00
0009CA7A                            	smpsVcCoarseFreq    $06, $03, $02, $03
0009CA7A                            	smpsVcRateScale     $02, $00, $00, $00
0009CA7A                            	smpsVcAttackRate    $16, $1A, $1A, $18
0009CA7A                            	smpsVcAmpMod        $00, $00, $00, $00
0009CA7A                            	smpsVcDecayRate1    $10, $0A, $0E, $17
0009CA7A                            	smpsVcDecayRate2    $00, $00, $00, $00
0009CA7A                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0009CA7A                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CA93                            
0009CA93                            ;	Voice $01
0009CA93                            ;	$04
0009CA93                            ;	$37, $72, $77, $49, 	$1F, $1F, $1F, $1F, 	$07, $0A, $07, $0D
0009CA93                            ;	$00, $0B, $00, $0B, 	$1F, $0F, $1F, $0F, 	$23, $80, $23, $80
0009CA93                            	smpsVcAlgorithm     $04
0009CA93                            	smpsVcFeedback      $00
0009CA93                            	smpsVcUnusedBits    $00
0009CA93                            	smpsVcDetune        $04, $07, $07, $03
0009CA93                            	smpsVcCoarseFreq    $09, $07, $02, $07
0009CA93                            	smpsVcRateScale     $00, $00, $00, $00
0009CA93                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009CA93                            	smpsVcAmpMod        $00, $00, $00, $00
0009CA93                            	smpsVcDecayRate1    $0D, $07, $0A, $07
0009CA93                            	smpsVcDecayRate2    $0B, $00, $0B, $00
0009CA93                            	smpsVcDecayLevel    $00, $01, $00, $01
0009CA93                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CAAC                            
0009CAAC                            ;	Voice $02
0009CAAC                            ;	$3C
0009CAAC                            ;	$0F, $00, $00, $00, 	$1F, $1A, $18, $1C, 	$17, $11, $1A, $0E
0009CAAC                            ;	$00, $0F, $14, $10, 	$1F, $9F, $9F, $2F, 	$07, $80, $26, $8C
0009CAAC                            	smpsVcAlgorithm     $04
0009CAAC                            	smpsVcFeedback      $07
0009CAAC                            	smpsVcUnusedBits    $00
0009CAAC                            	smpsVcDetune        $00, $00, $00, $00
0009CAAC                            	smpsVcCoarseFreq    $00, $00, $00, $0F
0009CAAC                            	smpsVcRateScale     $00, $00, $00, $00
0009CAAC                            	smpsVcAttackRate    $1C, $18, $1A, $1F
0009CAAC                            	smpsVcAmpMod        $00, $00, $00, $00
0009CAAC                            	smpsVcDecayRate1    $0E, $1A, $11, $17
0009CAAC                            	smpsVcDecayRate2    $10, $14, $0F, $00
0009CAAC                            	smpsVcDecayLevel    $02, $09, $09, $01
0009CAAC                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CAC5                            
0009CAC5                            
0009CAC6 00                         		even
0009CAC6                            SoundC6:	incbin	"sound/sfx/SndC6 - Ring Loss.bin"
0009CB08                            		even
0009CB08                            SoundC7:	incbin	"sound/sfx/SndC7 - Chain Rising.bin"
0009CB36                            		even
0009CB36                            SoundC8:	incbin	"sound/sfx/SndC8 - Burning.bin"
0009CB48                            		even
0009CB48                            SoundC9:	incbin	"sound/sfx/SndC9 - Hidden Bonus.bin"
0009CB76                            		even
0009CB76                            SoundCA:	incbin	"sound/sfx/SndCA - Enter SS.bin"
0009CBA4                            		even
0009CBA4                            SoundCB:	incbin	"sound/sfx/SndCB - Wall Smash.bin"
0009CBF0                            		even
0009CBF0                            SoundCC:	include	"sound/sfx/Spring.asm"
0009CBF0                            Spring_Header:
0009CBF0                            	smpsHeaderStartSong 1
0009CBF2 01                         	smpsHeaderTempoSFX  $01
0009CBF3 01                         	smpsHeaderChanSFX   $01
0009CBF4                            
0009CBFA                            
0009CBFA                            ; FM6 Data
0009CBFA                            Spring_FM6:
0009CBFA EF00                       	smpsSetvoice        $00
0009CBFC 8001                       	dc.b	nRst, $01
0009CC03 B006                       	dc.b	nB3, $06
0009CC05 F4                         	smpsModOff
0009CC06 EF01                       	smpsSetvoice        $01
0009CC08                            
0009CC08                            Spring_Loop00:
0009CC08 BD02                       	dc.b	nC5, $02
0009CC0A E601                       	smpsAlterVol      $01
0009CC0C E7                         	dc.b	smpsNoAttack
0009CC0D F700 19FF F7               	smpsLoop            $00, $19, Spring_Loop00
0009CC12 F2                         	smpsStop
0009CC13                            
0009CC13                            Spring_Voices:
0009CC13                            ;	Voice $00
0009CC13                            ;	$20
0009CC13                            ;	$36, $35, $30, $31, 	$DF, $DF, $9F, $9F, 	$07, $06, $09, $06
0009CC13                            ;	$07, $06, $06, $08, 	$2F, $1F, $1F, $FF, 	$16, $30, $13, $80
0009CC13                            	smpsVcAlgorithm     $00
0009CC13                            	smpsVcFeedback      $04
0009CC13                            	smpsVcUnusedBits    $00
0009CC13                            	smpsVcDetune        $03, $03, $03, $03
0009CC13                            	smpsVcCoarseFreq    $01, $00, $05, $06
0009CC13                            	smpsVcRateScale     $02, $02, $03, $03
0009CC13                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009CC13                            	smpsVcAmpMod        $00, $00, $00, $00
0009CC13                            	smpsVcDecayRate1    $06, $09, $06, $07
0009CC13                            	smpsVcDecayRate2    $08, $06, $06, $07
0009CC13                            	smpsVcDecayLevel    $0F, $01, $01, $02
0009CC13                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CC2C                            
0009CC2C                            ;	Voice $01
0009CC2C                            ;	$20
0009CC2C                            ;	$31, $33, $30, $31, 	$9F, $9F, $9F, $9F, 	$07, $06, $09, $06
0009CC2C                            ;	$07, $06, $06, $08, 	$2F, $1F, $1F, $FF, 	$19, $23, $11, $80
0009CC2C                            	smpsVcAlgorithm     $00
0009CC2C                            	smpsVcFeedback      $04
0009CC2C                            	smpsVcUnusedBits    $00
0009CC2C                            	smpsVcDetune        $03, $03, $03, $03
0009CC2C                            	smpsVcCoarseFreq    $01, $00, $03, $01
0009CC2C                            	smpsVcRateScale     $02, $02, $02, $02
0009CC2C                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009CC2C                            	smpsVcAmpMod        $00, $00, $00, $00
0009CC2C                            	smpsVcDecayRate1    $06, $09, $06, $07
0009CC2C                            	smpsVcDecayRate2    $08, $06, $06, $07
0009CC2C                            	smpsVcDecayLevel    $0F, $01, $01, $02
0009CC2C                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CC46 00                         		even
0009CC46                            SoundCD:	include	"sound/sfx/Beep.asm"
0009CC46                            Snd99_Header:
0009CC46                            	smpsHeaderStartSong 3
0009CC48 01                         	smpsHeaderTempoSFX  $01
0009CC49 01                         	smpsHeaderChanSFX   $01
0009CC4A                            
0009CC50                            
0009CC50                            ; FM4 Data
0009CC50                            Snd99_FM4:
0009CC50 EF00                       	smpsSetvoice        $00
0009CC52 B502                       	dc.b	nE4, $02
0009CC54 F2                         	smpsStop
0009CC55                            
0009CC55                            Snd99_Voices:
0009CC55                            ;	Voice $00
0009CC55                            ;	$07
0009CC55                            ;	$0A, $0A, $0A, $0A, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
0009CC55                            ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$88, $88, $88, $88
0009CC55                            	smpsVcAlgorithm     $07
0009CC55                            	smpsVcFeedback      $00
0009CC55                            	smpsVcUnusedBits    $00
0009CC55                            	smpsVcDetune        $00, $00, $00, $00
0009CC55                            	smpsVcCoarseFreq    $0A, $0A, $0A, $0A
0009CC55                            	smpsVcRateScale     $00, $00, $00, $00
0009CC55                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009CC55                            	smpsVcAmpMod        $00, $00, $00, $00
0009CC55                            	smpsVcDecayRate1    $00, $00, $00, $00
0009CC55                            	smpsVcDecayRate2    $00, $00, $00, $00
0009CC55                            	smpsVcDecayLevel    $00, $00, $00, $00
0009CC55                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CC6E                            		even
0009CC6E                            SoundCE:	incbin	"sound/sfx/SndCE - Ring Left Speaker.bin"
0009CC9C                            		even
0009CC9C                            SoundCF:	include	"sound/sfx/Signpost.asm"
0009CC9C                            SignpostCD_Header:
0009CC9C                            	smpsHeaderStartSong 3
0009CC9E 01                         	smpsHeaderTempoSFX  $01
0009CC9F 02                         	smpsHeaderChanSFX   $02
0009CCA0                            
0009CCAC                            
0009CCAC                            ; FM5 Data
0009CCAC                            Snd9D_FM5:
0009CCAC 8004                       	dc.b	nRst, $04
0009CCAE                            
0009CCAE                            ; FM4 Data
0009CCAE                            Snd9D_FM4:
0009CCAE EF00                       	smpsSetvoice        $00
0009CCB0                            
0009CCB0                            Snd9D_Loop00:
0009CCB0 B405                       	dc.b	nEb4, $05
0009CCB2 E604                       	smpsFMAlterVol      $04
0009CCB4 F700 08FF F8               	smpsLoop            $00, $08, Snd9D_Loop00
0009CCB9 F2                         	smpsStop
0009CCBA                            
0009CCBA                            Snd9D_Voices:
0009CCBA                            ;	Voice $00
0009CCBA                            ;	$F4
0009CCBA                            ;	$06, $04, $0F, $0E, 	$1F, $1F, $1F, $1F, 	$00, $00, $0B, $0B
0009CCBA                            ;	$00, $00, $05, $08, 	$0F, $0F, $FF, $FF, 	$0C, $85, $00, $80
0009CCBA                            	smpsVcAlgorithm     $04
0009CCBA                            	smpsVcFeedback      $06
0009CCBA                            	smpsVcUnusedBits    $03
0009CCBA                            	smpsVcDetune        $00, $00, $00, $00
0009CCBA                            	smpsVcCoarseFreq    $0E, $0F, $04, $06
0009CCBA                            	smpsVcRateScale     $00, $00, $00, $00
0009CCBA                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009CCBA                            	smpsVcAmpMod        $00, $00, $00, $00
0009CCBA                            	smpsVcDecayRate1    $0B, $0B, $00, $00
0009CCBA                            	smpsVcDecayRate2    $08, $05, $00, $00
0009CCBA                            	smpsVcDecayLevel    $0F, $0F, $00, $00
0009CCBA                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CCD4 00                         		even
0009CCD4                            SoundD0:	incbin	"sound/sfx/SndD0 - Waterfall.bin"
0009CD0E                            		even
0009CD0E                            SoundD1:	include	"sound/sfx/Lightning Shield.asm"
0009CD0E                            Sound_41_Header:
0009CD0E                            	smpsHeaderStartSong 3
0009CD10 01                         	smpsHeaderTempoSFX  $01
0009CD11 01                         	smpsHeaderChanSFX   $01
0009CD12                            
0009CD18                            	
0009CD18                            Sound41_FM5:
0009CD18 EF00                       	smpsSetvoice        $00
0009CD1A A305 E7A4 26               	dc.b	nBb2, $05, smpsNoAttack, nB2, $26
0009CD1F F2                         	smpsStop
0009CD20                            
0009CD20                            Sound_41_Voices:
0009CD20                            ;	Voice $00
0009CD20                            ;	$36
0009CD20                            ;	$07, $10, $0E, $0C, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
0009CD20                            ;	$00, $0D, $0D, $0E, 	$0F, $0F, $0F, $0F, 	$17, $80, $80, $80
0009CD20                            	smpsVcAlgorithm     $06
0009CD20                            	smpsVcFeedback      $06
0009CD20                            	smpsVcUnusedBits    $00
0009CD20                            	smpsVcDetune        $00, $00, $01, $00
0009CD20                            	smpsVcCoarseFreq    $0C, $0E, $00, $07
0009CD20                            	smpsVcRateScale     $00, $00, $00, $00
0009CD20                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009CD20                            	smpsVcAmpMod        $00, $00, $00, $00
0009CD20                            	smpsVcDecayRate1    $00, $00, $00, $00
0009CD20                            	smpsVcDecayRate2    $0E, $0D, $0D, $00
0009CD20                            	smpsVcDecayLevel    $00, $00, $00, $00
0009CD20                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CD39                            
0009CD39                            
0009CD3A 00                         		even
0009CD3A                            SoundD2:	include	"sound/sfx/CD_Charge.asm"
0009CD3A                            Snd9B_Header:
0009CD3A                            	smpsHeaderStartSong 3
0009CD3C 01                         	smpsHeaderTempoSFX  $01
0009CD3D 01                         	smpsHeaderChanSFX   $01
0009CD3E                            
0009CD44                            
0009CD44                            ; FM5 Data
0009CD44                            Snd9B_FM5:
0009CD44 EF00                       	smpsSetvoice        $00
0009CD46 8001                       	dc.b	nRst, $01
0009CD4D CA25                       	dc.b	nCs6, $25
0009CD4F F4                         	smpsModOff
0009CD50                            
0009CD50                            Snd9B_Loop00:
0009CD50 E7                         	dc.b	smpsNoAttack
0009CD51 E601                       	smpsFMAlterVol      $01
0009CD53 D102                       	dc.b	nAb6, $02
0009CD55 F700 2AFF F7               	smpsLoop            $00, $2A, Snd9B_Loop00
0009CD5A F2                         	smpsStop
0009CD5B                            
0009CD5B                            Snd9B_Voices:
0009CD5B                            ;	Voice $00
0009CD5B                            ;	$3C
0009CD5B                            ;	$00, $44, $02, $02, 	$1F, $1F, $1F, $15, 	$00, $1F, $00, $00
0009CD5B                            ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$0D, $80, $28, $80
0009CD5B                            	smpsVcAlgorithm     $04
0009CD5B                            	smpsVcFeedback      $07
0009CD5B                            	smpsVcUnusedBits    $00
0009CD5B                            	smpsVcDetune        $00, $00, $04, $00
0009CD5B                            	smpsVcCoarseFreq    $02, $02, $04, $00
0009CD5B                            	smpsVcRateScale     $00, $00, $00, $00
0009CD5B                            	smpsVcAttackRate    $15, $1F, $1F, $1F
0009CD5B                            	smpsVcAmpMod        $00, $00, $00, $00
0009CD5B                            	smpsVcDecayRate1    $00, $00, $1F, $00
0009CD5B                            	smpsVcDecayRate2    $00, $00, $00, $00
0009CD5B                            	smpsVcDecayLevel    $00, $00, $00, $00
0009CD5B                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CD74                            
0009CD74                            
0009CD74                            		even		
0009CD74                            SoundD3:	incbin	"sound/sfx/Peelout_Release.bin"
0009CE0C                            		even
0009CE0C                            SoundD4:	incbin	"sound/sfx/Peelout_Stop.bin"
0009CE18                            		even				
0009CE18                            SoundD5:	incbin	"sound/sfx/Spindash.bin"
0009CE54                            		even			
0009CE54                            		; Don't let Sega sample cross $8000-byte boundary
0009CE54                            		; (DAC driver doesn't switch banks automatically)
000A0000                            SegaPCM:	incbin	"sound/dac/sega.pcm"
000A6978                            SegaPCM_End
000A6978                            		even
000A6978                            
000A6978                            
000A6978                            
000A6978                            
000A6978                            			include "_inc\Sonic 2 Options.asm"
000A6978                            ; ---------------------------------------------------------------------------
000A6978                            ; Common menu screen subroutine for transferring text to RAM
000A6978                            
000A6978                            ; ARGUMENTS:
000A6978                            ; d0 = starting art tile
000A6978                            ; a1 = data source
000A6978                            ; a2 = destination
000A6978                            ;
000A6978                            ; ---------------------------------------------------------------------------
000A6978                            MenuScreen:
000A6978 103C 0000                  		move.b	#bgm_Fade,d0
000A697C 4EB8 1250                  		jsr	PlaySound_Special ; fade out music
000A6980 4EB8 2182                  		jsr	PaletteFadeOut
000A6984 46FC 2700                  		move	#$2700,sr
000A6988 3038 F60C                  		move.w	($FFFFF60C).w,d0
000A698C 0200 00BF                  		andi.b	#$BF,d0
000A6990 33C0 00C0 0004             		move.w	d0,($00C00004).l
000A6996 4EB8 1180                  		jsr	ClearScreen
000A699A 4DF9 00C0 0004             		lea		($00C00004).l,a6
000A69A0 3CBC 8004                  		move.w	#$8004,(a6)
000A69A4 3CBC 8230                  		move.w	#$8230,(a6)
000A69A8 3CBC 8407                  		move.w	#$8407,(a6)
000A69AC 3CBC 8230                  		move.w	#$8230,(a6)
000A69B0 3CBC 8700                  		move.w	#$8700,(a6)
000A69B4 3CBC 8C81                  		move.w	#$8C81,(a6)
000A69B8 3CBC 9001                  		move.w	#$9001,(a6)
000A69BC                            
000A69BC                            
000A69BC 43F8 D000                  		lea	(v_objspace).w,a1
000A69C0 7000                       		moveq	#0,d0
000A69C2 323C 07FF                  		move.w	#$7FF,d1
000A69C6                            
000A69C6                            MenuScreen_ClrObjRam:
000A69C6 22C0                       		move.l	d0,(a1)+
000A69C8 51C9 FFFC                  		dbf		d1,MenuScreen_ClrObjRam
000A69CC                            
000A69CC                            ; ===========================================================================
000A69CC                            
000A69CC 31FC C800 C8FC             		ResetDMAQueue
000A69D2                            
000A69DC 41F9 0000 0000             		lea		(Nem_MenuFont).l,a0
000A69E2 4EB8 12FE                  		jsr	NemDec
000A69F0 41F9 0000 0000             		lea		(Nem_MenuBox).l,a0
000A69F6 4EB8 12FE                  		jsr	NemDec
000A69FA 43F9 00FF 0000             		lea	($FF0000).l,a1
000A6A00 41F9 0000 0000             		lea	(Eni_MenuBg).l,a0 ; load SONIC/MILES mappings
000A6A06 303C 6000                  		move.w	#$6000,d0
000A6A0A 4EB8 1888                  		jsr	EniDec
000A6A0E                            
000A6A0E 43F9 00FF 0000 203C 6000+  		copyTilemap	$FF0000,$E000,$27,$1B
000A6A22                            
000A6A22 6100 0000                  		bsr.w	MenuScreen_Options	; if yes, branch
000A6A26                            
000A6A26                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000A6A26                            
000A6A26                            ; sub_8FBE:
000A6A26                            MenuScreenTextToRAM:
000A6A26 7200                       		moveq	#0,d1
000A6A28 1219                       		move.b	(a1)+,d1
000A6A2A                            
000A6A2A                            MenuScreenTextToRAM_Cont:
000A6A2A 1019                       		move.b	(a1)+,d0
000A6A2C 34C0                       		move.w	d0,(a2)+
000A6A2E 51C9 FFFA                  		dbf	d1,MenuScreenTextToRAM_Cont
000A6A32 4E75                       		rts
000A6A34                            ; End of function MenuScreenTextToRAM
000A6A34                            
000A6A34                            ; ===========================================================================
000A6A34                            ; loc_8FCC:
000A6A34                            MenuScreen_Options:
000A6A34 43F9 00FF 0000             		lea	(v_256x256).l,a1
000A6A3A 41F9 0000 0000             		lea	(Eni_MenuBox).l,a0
000A6A40 303C 0070                  		move.w	#$70,d0
000A6A44 4EB8 1888                  		jsr	EniDec
000A6A48 43F9 00FF 0160             		lea	(v_256x256+$160).l,a1
000A6A4E 41F9 0000 0000             		lea	(Eni_MenuBox).l,a0
000A6A54 303C 2070                  		move.w	#$2070,d0
000A6A58 4EB8 1888                  		jsr	EniDec
000A6A5C 4238 FF8C                  		clr.b	(Options_menu_box).w
000A6A60 6100 0000                  		bsr.w	OptionScreen_DrawSelected
000A6A64 5238 FF8C                  		addq.b	#1,(Options_menu_box).w
000A6A68 6100 0000                  		bsr.w	OptionScreen_DrawUnselected
000A6A6C 5238 FF8C                  		addq.b	#1,(Options_menu_box).w
000A6A70 6100 0000                  		bsr.w	OptionScreen_DrawUnselected
000A6A74 4238 FF8C                  		clr.b	(Options_menu_box).w
000A6A78 4238 F711                  		clr.b	($FFFFF711).w		
000A6A7C 4278 F7F0                  		clr.w	($FFFFF7F0).w					 
000A6A80                            ;-------------------------------------------------------------------------------
000A6A80 4278 F7B8                  		clr.w	($FFFFF7B8).w
000A6A84 45F9 0000 0000             		lea		(Anim_SonicMilesBG).l,a2
000A6A8A 6100 0000                  		bsr.w	Dynamic_Menu
000A6A8E                            ;-------------------------------------------------------------------------------
000A6A8E 7014                       		moveq	#palid_Options,d0
000A6A90 4EB8 242C                  		jsr		PalLoad1
000A6A94 103C 0098                  		move.b	#$98,d0
000A6A98 4EB8 1250                  		jsr	PlaySound_Special ; play options music
000A6A9C 42B8 F700                  		clr.l	(v_screenposx).w
000A6AA0 42B8 F704                  		clr.l	(v_screenposy).w
000A6AA4 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
000A6AAA 4EB8 3A00                  		jsr	WaitForVBla
000A6AAE 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
000A6AB2 0000 0040                  		ori.b	#$40,d0
000A6AB6 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
000A6ABC 4EB8 20DC                  		jsr	PaletteFadeIn
000A6AC0                            ; loc_9060:
000A6AC0                            OptionScreen_Main:
000A6AC0 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
000A6AC6 4EB8 3A00                  		jsr	WaitForVBla		
000A6ACA 4EB8 10A2                  		jsr	ReadJoypads			
000A6ACE 46FC 2700                  		move	#$2700,sr
000A6AD2 6100 0000                  		bsr.w	OptionScreen_DrawUnselected
000A6AD6 6100 0000                  		bsr.w	OptionScreen_Controls			
000A6ADA 6100 0000                  		bsr.w	OptionScreen_DrawSelected
000A6ADE 46FC 2300                  		move	#$2300,sr
000A6AE2 45F9 0000 0000             		lea		(Anim_SonicMilesBG).l,a2		
000A6AE8 6100 0000                  		bsr.w	Dynamic_Menu		
000A6AEC 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; check if Start is pressed
000A6AF2                            
000A6AF2 6600                       		bne.s	OptionScreen_Select		; if yes, branch
000A6AF4 60CA                       		bra.s	OptionScreen_Main
000A6AF6                            ; ===========================================================================
000A6AF6                            ; loc_909A:
000A6AF6                            OptionScreen_Select:
000A6AF6 1038 FF8C                  		move.b	(Options_menu_box).w,d0
000A6AFA 6600                       		bne.s	OptionScreen_Select_Not1P
000A6AFC 7000                       		moveq	#0,d0
000A6AFE 31FC 0000 FE10             		move.w	#(id_GHZ<<8),(v_zone).w	; green_hill_zone_act_1
000A6B04 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
000A6B08 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
000A6B0C 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
000A6B10 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
000A6B16 21FC 0000 1388 FFC0        		move.l	#$1388,(v_scorelife).w ; extra life is awarded at 50000 points
000A6B1E 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; => Level (Zone play mode)
000A6B24 4E75                       		rts
000A6B26                            ; ===========================================================================
000A6B26                            ; loc_90B6:
000A6B26                            OptionScreen_Select_Not1P:
000A6B26 5300                       		subq.b	#1,d0
000A6B28 6600                       		bne.s	OptionScreen_Select_Other
000A6B2A 6094                       		bra.s	OptionScreen_Main
000A6B2C                            ; ===========================================================================
000A6B2C                            ; loc_90D8:
000A6B2C                            OptionScreen_Select_Other:
000A6B2C 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; => SegaScreen
000A6B32 4E75                       		rts
000A6B34                            
000A6B34                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000A6B34                            
000A6B34                            ;sub_90E0:
000A6B34                            OptionScreen_Controls:
000A6B34 7400                       		moveq	#0,d2
000A6B36 1438 FF8C                  		move.b	(Options_menu_box).w,d2			
000A6B3A 1038 F605                  		move.b	(v_jpadpress1).w,d0		; Ctrl_1_Press
000A6B3E 0800 0000                  		btst	#0,d0			; is up pressed?
000A6B42 6700                       		beq.s	Option_Controls_Down	; if not, branch
000A6B44 5302                       		subq.b	#1,d2					; move up 1 selection
000A6B46 6400                       		bcc.s	Option_Controls_Down
000A6B48 143C 0002                  		move.b	#2,d2
000A6B4C                            
000A6B4C                            Option_Controls_Down:
000A6B4C 0800 0001                  		btst	#1,d0			; is down pressed?
000A6B50 6700                       		beq.s	Option_Controls_Refresh	; if not, branch
000A6B52 5202                       		addq.b	#1,d2					; move down 1 selection
000A6B54 0C02 0003                  		cmpi.b	#3,d2
000A6B58 6500                       		blo.s	Option_Controls_Refresh
000A6B5A 7400                       		moveq	#0,d2
000A6B5C                            
000A6B5C                            Option_Controls_Refresh:
000A6B5C 11C2 FF8C                  		move.b	d2,(Options_menu_box).w
000A6B60 E54A                       		lsl.w	#2,d2
000A6B62 163B 2000                  		move.b	OptionScreen_Choices(pc,d2.w),d3 ; number of choices for the option
000A6B66 227B 2000                  		movea.l	OptionScreen_Choices(pc,d2.w),a1 ; location where the choice is stored (in RAM)
000A6B6A 3411                       		move.w	(a1),d2
000A6B6C 0800 0002                  		btst	#2,d0				; is left pressed?
000A6B70 6700                       		beq.s	Option_Controls_Right		; if not, branch
000A6B72 5302                       		subq.b	#1,d2						; subtract 1 from sound test
000A6B74 6400                       		bcc.s	Option_Controls_Right
000A6B76 1403                       		move.b	d3,d2
000A6B78                            
000A6B78                            Option_Controls_Right:
000A6B78 0800 0003                  		btst	#3,d0			; is right pressed?
000A6B7C 6700                       		beq.s	Option_Controls_Button_A	; if not, branch
000A6B7E 5202                       		addq.b	#1,d2						; add 1 to sound test
000A6B80 B403                       		cmp.b	d3,d2
000A6B82 6300                       		bls.s	Option_Controls_Button_A
000A6B84 7400                       		moveq	#0,d2
000A6B86                            
000A6B86                            Option_Controls_Button_A:
000A6B86 0800 0006                  		btst	#6,d0				; is button A pressed?
000A6B8A 6700                       		beq.s	Option_Controls_Refresh2	; if not, branch
000A6B8C 0602 0010                  		addi.b	#$10,d2						; add $10 to sound test
000A6B90 B403                       		cmp.b	d3,d2
000A6B92 6300                       		bls.s	Option_Controls_Refresh2
000A6B94 7400                       		moveq	#0,d2
000A6B96                            
000A6B96                            Option_Controls_Refresh2:
000A6B96 3282                       		move.w	d2,(a1)
000A6B98                            
000A6B98                            Option_Controls_NoMove:
000A6B98 4E75                       		rts
000A6B9A                            ; End of function OptionScreen_Controls
000A6B9A                            
000A6B9A                            ; ===========================================================================
000A6B9A                            ; word_917A:
000A6B9A                            OptionScreen_Choices:
000A6B9A 09FF FFBE                  		dc.l ($A-1)<<24|($FFFFBE&$FFFFFF)
000A6B9E 01FF FF8A                  		dc.l (2-1)<<24|($FFFF8A&$FFFFFF)
000A6BA2 01FF FF84                  		dc.l (2-1)<<24|($FFFF84&$FFFFFF)
000A6BA6                            		even
000A6BA6                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000A6BA6                            
000A6BA6                            
000A6BA6                            OptionScreen_DrawSelected:
000A6BA6 6100 0000                  		bsr.w	loc_9268
000A6BAA 7200                       		moveq	#0,d1
000A6BAC 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000A6BB0 E749                       		lsl.w	#3,d1
000A6BB2 47F9 0000 0000             		lea	(OptScrBoxData).l,a3
000A6BB8 47F3 1000                  		lea	(a3,d1.w),a3
000A6BBC 303C 6000                  		move.w	#$6000,d0
000A6BC0 45F9 FFFF 0030             		lea	($FFFF0030).l,a2
000A6BC6 225B                       		movea.l	(a3)+,a1
000A6BC8 6100 FE5C                  		bsr.w	MenuScreenTextToRAM
000A6BCC 45F9 FFFF 00B6             		lea	($FFFF00B6).l,a2
000A6BD2 7200                       		moveq	#0,d1
000A6BD4 0C38 0002 FF8C             		cmpi.b	#2,(Options_menu_box).w
000A6BDA 6700                       		beq.s	loc_9186
000A6BDC 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000A6BE0 E549                       		lsl.w	#2,d1
000A6BE2 43FA FFB6                  		lea	OptionScreen_Choices(pc),a1
000A6BE6 2271 1000                  		movea.l	(a1,d1.w),a1
000A6BEA 3211                       		move.w	(a1),d1
000A6BEC E549                       		lsl.w	#2,d1
000A6BEE                            
000A6BEE                            loc_9186:		
000A6BEE 2274 1000                  		movea.l	(a4,d1.w),a1
000A6BF2 6100 FE32                  		bsr.w	MenuScreenTextToRAM
000A6BF6                            		;cmpi.b	#2,(Options_menu_box).w
000A6BF6                            		;bne.s	loc2_9186
000A6BF6                            		;lea	($FFFF00C2).l,a2
000A6BF6                            		;bsr.w	loc_9296
000A6BF6                            
000A6BF6                            loc2_9186:		
000A6BF6 43F9 00FF 0000             		lea	(v_256x256).l,a1
000A6BFC 201B                       		move.l	(a3)+,d0
000A6BFE 7215                       		moveq	#$15,d1
000A6C00 7407                       		moveq	#7,d2
000A6C02 4EF8 12D4                  		jmp	TilemapToVRAM
000A6C06                            ; ===========================================================================
000A6C06                            
000A6C06                            OptionScreen_DrawUnselected:
000A6C06 6100 0000                  		bsr.w	loc_9268
000A6C0A 7200                       		moveq	#0,d1
000A6C0C 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000A6C10 E749                       		lsl.w	#3,d1
000A6C12 47F9 0000 0000             		lea	(OptScrBoxData).l,a3
000A6C18 47F3 1000                  		lea	(a3,d1.w),a3
000A6C1C 7000                       		moveq	#0,d0
000A6C1E 45F9 FFFF 0190             		lea	($FFFF0190).l,a2
000A6C24 225B                       		movea.l	(a3)+,a1
000A6C26 6100 FDFE                  		bsr.w	MenuScreenTextToRAM
000A6C2A 45F9 FFFF 0216             		lea	($FFFF0216).l,a2
000A6C30 7200                       		moveq	#0,d1
000A6C32 0C38 0002 FF8C             		cmpi.b	#2,(Options_menu_box).w
000A6C38 6700                       		beq.s	loc2_91F8
000A6C3A 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000A6C3E E549                       		lsl.w	#2,d1
000A6C40 43FA FF58                  		lea	OptionScreen_Choices(pc),a1
000A6C44 2271 1000                  		movea.l	(a1,d1.w),a1
000A6C48 3211                       		move.w	(a1),d1
000A6C4A E549                       		lsl.w	#2,d1
000A6C4C                            
000A6C4C                            loc2_91F8		
000A6C4C 2274 1000                  		movea.l	(a4,d1.w),a1
000A6C50 6100 FDD4                  		bsr.w	MenuScreenTextToRAM
000A6C54                            		;cmpi.b	#2,(Options_menu_box).w
000A6C54                            		;bne.s	loc3_91F8
000A6C54                            		;lea	($FFFF0222).l,a2
000A6C54                            		;bsr.w	loc_9296
000A6C54                            
000A6C54                            loc3_91F8		
000A6C54 43F9 FFFF 0160             		lea	($FFFF0160).l,a1
000A6C5A 201B                       		move.l	(a3)+,d0
000A6C5C 7215                       		moveq	#$15,d1
000A6C5E 7407                       		moveq	#7,d2
000A6C60 4EF8 12D4                  		jmp	TilemapToVRAM
000A6C64                            ; ===========================================================================
000A6C64                            
000A6C64                            loc_9268:
000A6C64 49F9 0000 0000             		lea	(off_92D2).l,a4
000A6C6A 4A38 FFF8                  		tst.b	(v_megadrive).w
000A6C6E 6A00                       		bpl.s	loc2_9268
000A6C70 49F9 0000 0000             		lea	(off_92DE).l,a4
000A6C76                            
000A6C76                            loc2_9268:
000A6C76 4A38 FF8C                  		tst.b	(Options_menu_box).w
000A6C7A 6700                       		beq.s	loc3_9268
000A6C7C 49F9 0000 0000             		lea	(off_92EA).l,a4
000A6C82                            
000A6C82                            loc3_9268:
000A6C82 0C38 0002 FF8C             		cmpi.b	#2,(Options_menu_box).w
000A6C88 6600                       		bne.s	loc4_9268		; rts
000A6C8A 49F9 0000 0000             		lea	(off_92F2).l,a4
000A6C90                            
000A6C90                            loc4_9268:
000A6C90 4E75                       		rts
000A6C92                            ; ===========================================================================
000A6C92                            
000A6C92                            loc_9296:
000A6C92 4E75                       		rts
000A6C94                            
000A6C94                            Dynamic_Menu:
000A6C94 47F8 F7B8                  	lea	($FFFFF7B8).w,a3
000A6C98                            
000A6C98                            loc_3FF30:
000A6C98 3C1A                       	move.w	(a2)+,d6	; loop counter. We start off with 00 the first time.
000A6C9A                            
000A6C9A                            loc_3FF32:
000A6C9A 5313                       	subq.b	#1,(a3)		; decrement timer
000A6C9C 6400                       	bcc.s	loc_3FF78	; if time remains, branch ahead
000A6C9E 7000                       	moveq	#0,d0
000A6CA0 102B 0001                  	move.b	1(a3),d0	; load animation counter from animation data table
000A6CA4 B02A 0006                  	cmp.b	6(a2),d0
000A6CA8 6500                       	blo.s	loc_3FF48
000A6CAA 7000                       	moveq	#0,d0
000A6CAC 1740 0001                  	move.b	d0,1(a3)	; set animation counter
000A6CB0                            
000A6CB0                            loc_3FF48:
000A6CB0 522B 0001                  	addq.b	#1,1(a3)	; increment animation counter
000A6CB4 1692                       	move.b	(a2),(a3)	; set timer
000A6CB6 6A00                       	bpl.s	loc_3FF56
000A6CB8 D040                       	add.w	d0,d0
000A6CBA 16B2 0009                  	move.b	9(a2,d0.w),(a3)
000A6CBE                            
000A6CBE                            loc_3FF56:
000A6CBE 1032 0008                  	move.b	8(a2,d0.w),d0
000A6CC2 EB48                       	lsl.w	#5,d0
000A6CC4 342A 0004                  	move.w	4(a2),d2
000A6CC8 2212                       	move.l	(a2),d1
000A6CCA 0281 00FF FFFF             	andi.l	#$FFFFFF,d1		; Filter out the first byte, which contains the first PLC ID, leaving the address of the zone's art in d0
000A6CD0 D280                       	add.l	d0,d1
000A6CD2 7600                       	moveq	#0,d3
000A6CD4 162A 0007                  	move.b	7(a2),d3
000A6CD8 E94B                       	lsl.w	#4,d3
000A6CDA 4EB9 0000 1426             	jsr	(QueueDMATransfer).l	; Use d1, d2, and d3 to locate the decompressed art and ready for transfer to VRAM
000A6CE0                            
000A6CE0                            loc_3FF78:
000A6CE0 102A 0006                  	move.b	6(a2),d0
000A6CE4 4A12                       	tst.b	(a2)
000A6CE6 6A00                       	bpl.s	loc_3FF82
000A6CE8 D000                       	add.b	d0,d0
000A6CEA                            
000A6CEA                            loc_3FF82:
000A6CEA 5200                       	addq.b	#1,d0
000A6CEC 0240 00FE                  	andi.w	#$FE,d0
000A6CF0 45F2 0008                  	lea	8(a2,d0.w),a2
000A6CF4 544B                       	addq.w	#2,a3
000A6CF6 51CE FFA2                  	dbf	d6,loc_3FF32
000A6CFA 4E75                       	rts
000A6CFC                            ; ------------------------------------------------------------------------
000A6CFC                            ; MENU ANIMATION SCRIPT
000A6CFC                            ; ------------------------------------------------------------------------
000A6CFC                            ;word_87C6:
000A6CFC                            Anim_SonicMilesBG:
000A6CFC 0000                       	dc.w   0
000A6CFE                            ; Sonic/Miles animated background
000A6CFE 0000 0000                  	dc.l $FF<<24|Sonic_Miles_Spr
000A6D02 0020                       	dc.w $20
000A6D04 06                         	dc.b 6
000A6D05 0A                         	dc.b $A
000A6D06 00C7                       	dc.b   0,$C7    ; "SONIC"
000A6D08 0A05                       	dc.b  $A,  5	; 2
000A6D0A 1405                       	dc.b $14,  5	; 4
000A6D0C 1EC7                       	dc.b $1E,$C7	; "TAILS"
000A6D0E 1405                       	dc.b $14,  5	; 8
000A6D10 0A05                       	dc.b  $A,  5	; 10	
000A6D12                            ; ===========================================================================
000A6D12                            ; off_92BA:
000A6D12                            OptScrBoxData:
000A6D12                            
000A6D12 0000 0000                  		dc.l TextOptScr_PlayerSelect
000A6D16 4192                       		dc.w $4192
000A6D18 0003                       		dc.w 3
000A6D1A 0000 0000                  		dc.l TextOptScr_LivesSystem
000A6D1E 4592                       		dc.w $4592
000A6D20 0003                       		dc.w 3
000A6D22 0000 0000                  		dc.l TextOptScr_SoundTest
000A6D26 4992                       		dc.w $4992
000A6D28 0003                       		dc.w 3
000A6D2A                            
000A6D2A                            off_92D2:
000A6D2A 0000 0000                  		dc.l TextOptScr_Default
000A6D2E 0000 0000                  		dc.l TextOptScr_Original
000A6D32 0000 0000                  		dc.l TextOptScr_Beta
000A6D36 0000 0000                  		dc.l TextOptScr_Midnight
000A6D3A 0000 0000                  		dc.l TextOptScr_C2
000A6D3E 0000 0000                  		dc.l TextOptScr_Clackers
000A6D42 0000 0000                  		dc.l TextOptScr_RHS
000A6D46 0000 0000                  		dc.l TextOptScr_Socket
000A6D4A 0000 0000                  		dc.l TextOptScr_Cringe
000A6D4E 0000 0000                  		dc.l TextOptScr_Dark		
000A6D52                            off_92DE:
000A6D52 0000 0000                  		dc.l TextOptScr_Default
000A6D56 0000 0000                  		dc.l TextOptScr_Original
000A6D5A 0000 0000                  		dc.l TextOptScr_Beta
000A6D5E 0000 0000                  		dc.l TextOptScr_Midnight
000A6D62 0000 0000                  		dc.l TextOptScr_C2
000A6D66 0000 0000                  		dc.l TextOptScr_Clackers
000A6D6A 0000 0000                  		dc.l TextOptScr_RHS
000A6D6E 0000 0000                  		dc.l TextOptScr_Socket
000A6D72 0000 0000                  		dc.l TextOptScr_Cringe
000A6D76 0000 0000                  		dc.l TextOptScr_Dark	
000A6D7A                            off_92EA:
000A6D7A 0000 0000                  		dc.l TextOptScr_On
000A6D7E 0000 0000                  		dc.l TextOptScr_Off
000A6D82                            off_92F2:
000A6D82 0000 0000                  		dc.l TextOptScr_Null
000A6D86 0000 0000                  		dc.l TextOptScr_Null2
000A6D8A                            ; ===========================================================================
000A6D8A                            
000A6EA9                            ; ============================================================================
000A6EA9                            
000A6EA9                            Sonic_Miles_Spr:incbin  "artunc/Sonic and Miles text.bin"
000A73AA 00                         		even
000A73AA                            Eni_MenuBg:    incbin    "tilemaps/menubgeni.bin"
000A7556                            		even
000A7556                            Nem_MenuFont:    incbin    "artnem/Standard font.bin"
000A7AC0                            		even
000A7AC0                            Nem_MenuBox:    incbin   "artnem/Menu Box.bin"
000A7B40                            		even
000A7B40                            Eni_MenuBox:    incbin    "tilemaps/menuboxeni.bin"
000A7B6C                            		even
000A7B6C                            		even
000A7B6C                            
000A7B6C                            SHC2022:    incbin "SHC22_Full_Sonic12.bin"
001253F0                                        even
001253F0                            
001253F0                            Art_Dust:	incbin	artunc\spindust.bin
00126D30                            
00126D30                            ; ===============================================================
00126D30                            ; ---------------------------------------------------------------
00126D30                            ; Error handling module
00126D30                            ; ---------------------------------------------------------------
00126D30                             
00126D30 4EBA 0000                  BusError:   jsr ErrorHandler(pc)
00126D34 4255 5320 4552 524F 5200           dc.b    "BUS ERROR",0           ; text
00126D3E 01                                 dc.b    1               ; extended stack frame
00126D40 00                                 even
00126D40                             
00126D40 4EBA 0000                  AddressError:   jsr ErrorHandler(pc)
00126D44 4144 4452 4553 5320 4552+          dc.b    "ADDRESS ERROR",0       ; text
00126D52 01                                 dc.b    1               ; extended stack frame
00126D54 00                                 even
00126D54                             
00126D54 4EBA 0000                  IllegalInstr:   jsr ErrorHandler(pc)
00126D58 494C 4C45 4741 4C20 494E+          dc.b    "ILLEGAL INSTRUCTION",0     ; text
00126D6C 00                                 dc.b    0               ; extended stack frame
00126D6E 00                                 even
00126D6E                             
00126D6E 4EBA 0000                  ZeroDivide: jsr ErrorHandler(pc)
00126D72 5A45 524F 2044 4956 4944+          dc.b    "ZERO DIVIDE",0         ; text
00126D7E 00                                 dc.b    0               ; extended stack frame
00126D80 00                                 even
00126D80                             
00126D80 4EBA 0000                  ChkInstr:   jsr ErrorHandler(pc)
00126D84 4348 4B20 494E 5354 5255+          dc.b    "CHK INSTRUCTION",0         ; text
00126D94 00                                 dc.b    0               ; extended stack frame
00126D96 00                                 even
00126D96                             
00126D96 4EBA 0000                  TrapvInstr: jsr ErrorHandler(pc)
00126D9A 5452 4150 5620 494E 5354+          dc.b    "TRAPV INSTRUCTION",0       ; text
00126DAC 00                                 dc.b    0               ; extended stack frame
00126DAE 00                                 even
00126DAE                             
00126DAE 4EBA 0000                  PrivilegeViol:  jsr ErrorHandler(pc)
00126DB2 5052 4956 494C 4547 4520+          dc.b    "PRIVILEGE VIOLATION",0     ; text
00126DC6 00                                 dc.b    0               ; extended stack frame
00126DC8 00                                 even
00126DC8                             
00126DC8 4EBA 0000                  Trace:      jsr ErrorHandler(pc)
00126DCC 5452 4143 4500                     dc.b    "TRACE",0           ; text
00126DD2 00                                 dc.b    0               ; extended stack frame
00126DD4 00                                 even
00126DD4                             
00126DD4 4EBA 0000                  Line1010Emu:    jsr ErrorHandler(pc)
00126DD8 4C49 4E45 2031 3031 3020+          dc.b    "LINE 1010 EMULATOR",0      ; text
00126DEB 00                                 dc.b    0               ; extended stack frame
00126DEC                                    even
00126DEC                             
00126DEC 4EBA 0000                  Line1111Emu:    jsr ErrorHandler(pc)
00126DF0 4C49 4E45 2031 3131 3120+          dc.b    "LINE 1111 EMULATOR",0      ; text
00126E03 00                                 dc.b    0               ; extended stack frame
00126E04                                    even
00126E04                             
00126E04 4EBA 0000                  ErrorExcept:    jsr ErrorHandler(pc)
00126E08 4552 524F 5220 4558 4345+          dc.b    "ERROR EXCEPTION",0         ; text
00126E18 00                                 dc.b    0               ; extended stack frame
00126E1A 00                                 even
00126E1A                             
00126E1A                            ErrorHandler:   incbin  "ErrorHandler.bin"
001275FE                            
001275FE                            ; end of 'ROM'
001275FE                            		even
001275FE                            EndOfRom:
001275FE                            
001275FE                            
