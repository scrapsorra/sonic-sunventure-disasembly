00000000                            ;  =========================================================================
00000000                            ; |           Sonic the Hedgehog Disassembly for Sega Mega Drive            |
00000000                            ;  =========================================================================
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx, Stealth and Esrael L.G. Neto
00000000                            
00000000                            ; ===========================================================================
00000000                            
00000000                            	include	"_s1smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000001                  SourceDriver = 1 ; Please don't modify the value.
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000 =0000000C                  psgdelta	EQU 12
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =00000088                  smpsPitch10lo	EQU $88
00000000 =00000094                  smpsPitch09lo	EQU $94
00000000 =000000A0                  smpsPitch08lo	EQU $A0
00000000 =000000AC                  smpsPitch07lo	EQU $AC
00000000 =000000B8                  smpsPitch06lo	EQU $B8
00000000 =000000C4                  smpsPitch05lo	EQU $C4
00000000 =000000D0                  smpsPitch04lo	EQU $D0
00000000 =000000DC                  smpsPitch03lo	EQU $DC
00000000 =000000E8                  smpsPitch02lo	EQU $E8
00000000 =000000F4                  smpsPitch01lo	EQU $F4
00000000 =00000000                  smpsPitch00		EQU $00
00000000 =0000000C                  smpsPitch01hi	EQU $0C
00000000 =00000018                  smpsPitch02hi	EQU $18
00000000 =00000024                  smpsPitch03hi	EQU $24
00000000 =00000030                  smpsPitch04hi	EQU $30
00000000 =0000003C                  smpsPitch05hi	EQU $3C
00000000 =00000048                  smpsPitch06hi	EQU $48
00000000 =00000054                  smpsPitch07hi	EQU $54
00000000 =00000060                  smpsPitch08hi	EQU $60
00000000 =0000006C                  smpsPitch09hi	EQU $6C
00000000 =00000078                  smpsPitch10hi	EQU $78
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst		EQU	$80
00000000 =00000081                  nC0			EQU	$81
00000000 =00000082                  nCs0		EQU	$82
00000000 =00000083                  nD0			EQU	$83
00000000 =00000084                  nEb0		EQU	$84
00000000 =00000085                  nE0			EQU	$85
00000000 =00000086                  nF0			EQU	$86
00000000 =00000087                  nFs0		EQU	$87
00000000 =00000088                  nG0			EQU	$88
00000000 =00000089                  nAb0		EQU	$89
00000000 =0000008A                  nA0			EQU	$8A
00000000 =0000008B                  nBb0		EQU	$8B
00000000 =0000008C                  nB0			EQU	$8C
00000000 =0000008D                  nC1			EQU	$8D
00000000 =0000008E                  nCs1		EQU	$8E
00000000 =0000008F                  nD1			EQU	$8F
00000000 =00000090                  nEb1		EQU	$90
00000000 =00000091                  nE1			EQU	$91
00000000 =00000092                  nF1			EQU	$92
00000000 =00000093                  nFs1		EQU	$93
00000000 =00000094                  nG1			EQU	$94
00000000 =00000095                  nAb1		EQU	$95
00000000 =00000096                  nA1			EQU	$96
00000000 =00000097                  nBb1		EQU	$97
00000000 =00000098                  nB1			EQU	$98
00000000 =00000099                  nC2			EQU	$99
00000000 =0000009A                  nCs2		EQU	$9A
00000000 =0000009B                  nD2			EQU	$9B
00000000 =0000009C                  nEb2		EQU	$9C
00000000 =0000009D                  nE2			EQU	$9D
00000000 =0000009E                  nF2			EQU	$9E
00000000 =0000009F                  nFs2		EQU	$9F
00000000 =000000A0                  nG2			EQU	$A0
00000000 =000000A1                  nAb2		EQU	$A1
00000000 =000000A2                  nA2			EQU	$A2
00000000 =000000A3                  nBb2		EQU	$A3
00000000 =000000A4                  nB2			EQU	$A4
00000000 =000000A5                  nC3			EQU	$A5
00000000 =000000A6                  nCs3		EQU	$A6
00000000 =000000A7                  nD3			EQU	$A7
00000000 =000000A8                  nEb3		EQU	$A8
00000000 =000000A9                  nE3			EQU	$A9
00000000 =000000AA                  nF3			EQU	$AA
00000000 =000000AB                  nFs3		EQU	$AB
00000000 =000000AC                  nG3			EQU	$AC
00000000 =000000AD                  nAb3		EQU	$AD
00000000 =000000AE                  nA3			EQU	$AE
00000000 =000000AF                  nBb3		EQU	$AF
00000000 =000000B0                  nB3			EQU	$B0
00000000 =000000B1                  nC4			EQU	$B1
00000000 =000000B2                  nCs4		EQU	$B2
00000000 =000000B3                  nD4			EQU	$B3
00000000 =000000B4                  nEb4		EQU	$B4
00000000 =000000B5                  nE4			EQU	$B5
00000000 =000000B6                  nF4			EQU	$B6
00000000 =000000B7                  nFs4		EQU	$B7
00000000 =000000B8                  nG4			EQU	$B8
00000000 =000000B9                  nAb4		EQU	$B9
00000000 =000000BA                  nA4			EQU	$BA
00000000 =000000BB                  nBb4		EQU	$BB
00000000 =000000BC                  nB4			EQU	$BC
00000000 =000000BD                  nC5			EQU	$BD
00000000 =000000BE                  nCs5		EQU	$BE
00000000 =000000BF                  nD5			EQU	$BF
00000000 =000000C0                  nEb5		EQU	$C0
00000000 =000000C1                  nE5			EQU	$C1
00000000 =000000C2                  nF5			EQU	$C2
00000000 =000000C3                  nFs5		EQU	$C3
00000000 =000000C4                  nG5			EQU	$C4
00000000 =000000C5                  nAb5		EQU	$C5
00000000 =000000C6                  nA5			EQU	$C6
00000000 =000000C7                  nBb5		EQU	$C7
00000000 =000000C8                  nB5			EQU	$C8
00000000 =000000C9                  nC6			EQU	$C9
00000000 =000000CA                  nCs6		EQU	$CA
00000000 =000000CB                  nD6			EQU	$CB
00000000 =000000CC                  nEb6		EQU	$CC
00000000 =000000CD                  nE6			EQU	$CD
00000000 =000000CE                  nF6			EQU	$CE
00000000 =000000CF                  nFs6		EQU	$CF
00000000 =000000D0                  nG6			EQU	$D0
00000000 =000000D1                  nAb6		EQU	$D1
00000000 =000000D2                  nA6			EQU	$D2
00000000 =000000D3                  nBb6		EQU	$D3
00000000 =000000D4                  nB6			EQU	$D4
00000000 =000000D5                  nC7			EQU	$D5
00000000 =000000D6                  nCs7		EQU	$D6
00000000 =000000D7                  nD7			EQU	$D7
00000000 =000000D8                  nEb7		EQU	$D8
00000000 =000000D9                  nE7			EQU	$D9
00000000 =000000DA                  nF7			EQU	$DA
00000000 =000000DB                  nFs7		EQU	$DB
00000000 =000000DC                  nG7			EQU	$DC
00000000 =000000DD                  nAb7		EQU	$DD
00000000 =000000DE                  nA7			EQU	$DE
00000000 =000000DF                  nBb7		EQU	$DF
00000000                            ; SMPS2ASM uses nMaxPSG for songs from S1/S2 drivers.
00000000                            ; nMaxPSG1 and nMaxPSG2 are used only for songs from S3/S&K/S3D drivers.
00000000                            ; The use of psgdelta is intended to undo the effects of PSGPitchConvert
00000000                            ; and ensure that the ending note is indeed the maximum PSG frequency.
00000000 =000000C6                  nMaxPSG				EQU nA5
00000000 =000000D2                  nMaxPSG1			EQU nA5+psgdelta
00000000 =000000D2                  nMaxPSG2			EQU nA5+psgdelta
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG Flutter Equates
00000000 =00000000                  fTone_00	EQU	$00
00000000 =00000001                  fTone_01	EQU	$01
00000000 =00000002                  fTone_02	EQU	$02
00000000 =00000003                  fTone_03	EQU	$03
00000000 =00000004                  fTone_04	EQU	$04
00000000 =00000005                  fTone_05	EQU	$05
00000000 =00000006                  fTone_06	EQU	$06
00000000 =00000007                  fTone_07	EQU	$07
00000000 =00000008                  fTone_08	EQU	$08
00000000 =00000009                  fTone_09	EQU	$09
00000000 =00000007                  fTone_0A	EQU	$07
00000000 =00000005                  fTone_0B	EQU	$05
00000000 =00000000                  fTone_0C	EQU	$00
00000000                            ;fTone_0D	EQU	$00
00000000 =00000002                  sTone_01	EQU	$02
00000000 =00000002                  sTone_02	EQU	$02
00000000 =00000005                  sTone_03	EQU	$05
00000000 =00000003                  sTone_04	EQU	$03
00000000 =00000001                  sTone_05	EQU	$01
00000000 =00000003                  sTone_06	EQU	$03
00000000 =00000000                  sTone_07	EQU	$00	; SFX envelope, probably unused in S3K
00000000 =00000009                  sTone_08	EQU	$09
00000000 =00000005                  sTone_09	EQU	$05
00000000 =00000007                  sTone_0A	EQU	$07
00000000 =00000000                  sTone_0B	EQU	$00	; For FM volume envelopes
00000000 =00000009                  sTone_0C	EQU	$09
00000000 =00000000                  sTone_0D	EQU	$00	; This time it matches 100%
00000000 =00000002                  sTone_0E	EQU	$02	; Duplicate of 01
00000000 =00000002                  sTone_0F	EQU	$02	; Duplicate of 02
00000000 =00000000                  sTone_10	EQU	$00
00000000 =00000006                  sTone_11	EQU	$06
00000000 =00000001                  sTone_12	EQU	$01	; Duplicate of 05
00000000 =00000003                  sTone_13	EQU	$03	; Duplicate of 06
00000000 =00000000                  sTone_14	EQU	$00	; SFX envelope, probably unused in S3K
00000000 =00000009                  sTone_15	EQU	$09	; Duplicate of 08
00000000 =00000005                  sTone_16	EQU	$05	; Duplicate of 09
00000000 =00000007                  sTone_17	EQU	$07	; Duplicate of 0A
00000000 =00000000                  sTone_18	EQU	$00	; For FM volume envelopes
00000000 =00000009                  sTone_19	EQU	$09	; Duplicate of 0C
00000000 =00000002                  sTone_1A	EQU	$02
00000000 =00000009                  sTone_1B	EQU	$09	; Duplicate of 0C
00000000 =00000006                  sTone_1C	EQU	$06
00000000 =00000007                  sTone_1D	EQU	$07
00000000 =00000002                  sTone_1E	EQU	$02
00000000 =00000004                  sTone_1F	EQU	$04
00000000 =00000000                  sTone_20	EQU	$00	; This time it matches 100%
00000000 =00000009                  sTone_21	EQU	$09
00000000 =00000004                  sTone_22	EQU	$04
00000000 =00000007                  sTone_23	EQU	$07
00000000 =00000002                  sTone_24	EQU	$02
00000000 =00000009                  sTone_25	EQU	$09
00000000 =00000007                  sTone_26	EQU	$07
00000000 =00000003                  sTone_27	EQU	$03
00000000                            ;sTone_28	EQU	$09
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick equ $81
00000000 =00000082                  dSnare equ $82
00000000 =00000085                  dCrashCymbal equ $85
00000000 =00000088                  dHiTimpani equ $88
00000000 =00000089                  dMidTimpani equ $89
00000000 =0000008A                  dLowTimpani equ $8A
00000000 =0000008B                  dVLowTimpani equ $8B
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Conversion macros and functions
00000000                            
00000000                            ;conv0To256  macro val 
00000000                            	;if val<$01
00000000                            		;dc.b (256-val+$FF)&$FF
00000000                            	;else	
00000000                            		;dc.b (256-val)&$FF	
00000000                            	;endc
00000000                            	;endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000                            smpsHeaderStartSong macro ver
00000000                            SourceDriver set ver
00000000                            songStart set *
00000000                            	endm
00000000                            
00000000                            smpsHeaderStartSongConvert macro ver
00000000                            SourceDriver set ver
00000000                            songStart set *
00000000                            	endm
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	if songStart<>*
00000000                            		fatal "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endif
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            	if songStart<>*
00000000                            		fatal "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endif
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro div,mod
00000000                            	dc.b	div
00000000                            tempoDivider set div
00000000                            	dc.b    mod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if (narg=2)
00000000                            		dc.b	pitch
00000000                            		if (narg=3)
00000000                            			dc.b	vol
00000000                            		else
00000000                            			dc.b	$00
00000000                            		endif
00000000                            	else
00000000                            		dc.w	$00
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	if SourceDriver>=3
00000000                            		dc.b	(pitch-psgdelta)&$FF
00000000                            	else
00000000                            		dc.b	pitch
00000000                            	endif
00000000                            	dc.b	vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fatal "Using channel ID of FM6 ($06) in Sonic 1 or Sonic 2 drivers is unsupported. Change it to another channel."
00000000                            	endif
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	if (chanid&$80)<>0
00000000                            	if SourceDriver>=3
00000000                            		dc.b	(pitch-psgdelta)&$FF
00000000                            	else
00000000                            		dc.b	pitch
00000000                            	endif
00000000                            	else
00000000                            		dc.b	pitch
00000000                            	endif
00000000                            	dc.b	vol
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            smpsDetune macro val
00000000                            	smpsAlterNote val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000 =000000E6                  sVol	EQU $E6
00000000                            
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000 =000000E7                  smpsNA	EQU smpsNoAttack
00000000 =000000E7                  sNA	EQU smpsNoAttack
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            	dc.b	$E8,val
00000000                            	endm
00000000                            
00000000                            ; Add xx to channel pitch
00000000                            smpsAlterPitch macro val
00000000                            	dc.b	$E9,val
00000000                            	endm
00000000                            
00000000                            smpsChangeTransposition macro val
00000000                            	if SourceDriver>=3
00000000                            		dc.b	$FF,val
00000000                            	else
00000000                            		dc.b	$E9,val
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro val
00000000                            	dc.b	$EA
00000000                            	dc.b    val
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	fatal "Coord. Flag to set volume (instead of volume attenuation) does not exist in S1 or S2 drivers. Complain to Flamewing to add it."
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000 =000000EC                  spVol	EQU $EC
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            	dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	dc.b	$EF,voice
00000000                            	endm
00000000                            
00000000                            ; EFxx - Set Voice of FM channel to xx
00000000                            smpsFMvoice macro voice
00000000                            	dc.b	$EF,voice
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	if SourceDriver>=3
00000000                            		dc.b	wait+1,speed,change,(step*speed-1)&$FF
00000000                            	else
00000000                            		dc.b	wait,speed,change,step
00000000                            	endif
00000000                            	;dc.b	speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	dc.b	$E6,val1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; S1/S2 only coordination flag
00000000                            ; Sets D1L to maximum volume (minimum attenuation) and RR to maximum for operators 3 and 4 of FM1
00000000                            smpsWeirdD1LRR macro
00000000                            	dc.b	$F9
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set op1
00000000                            vcDT2 set op2
00000000                            vcDT3 set op3
00000000                            vcDT4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set op1
00000000                            vcCF2 set op2
00000000                            vcCF3 set op3
00000000                            vcCF4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set op1
00000000                            vcRS2 set op2
00000000                            vcRS3 set op3
00000000                            vcRS4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set op1
00000000                            vcAR2 set op2
00000000                            vcAR3 set op3
00000000                            vcAR4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set op1
00000000                            vcAM2 set op2
00000000                            vcAM3 set op3
00000000                            vcAM4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set op1
00000000                            vcD1R2 set op2
00000000                            vcD1R3 set op3
00000000                            vcD1R4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set op1
00000000                            vcD2R2 set op2
00000000                            vcD2R3 set op3
00000000                            vcD2R4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set op1
00000000                            vcDL2 set op2
00000000                            vcDL3 set op3
00000000                            vcDL4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set op1
00000000                            vcRR2 set op2
00000000                            vcRR3 set op3
00000000                            vcRR4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set op1
00000000                            vcTL2 set op2
00000000                            vcTL3 set op3
00000000                            vcTL4 set op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            	dc.b	(vcDT4<<4)+vcCF4, (vcDT3<<4)+vcCF3, (vcDT2<<4)+vcCF2, (vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4, (vcRS3<<6)+vcAR3, (vcRS2<<6)+vcAR2, (vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4, (vcAM3<<5)+vcD1R3, (vcAM2<<5)+vcD1R2, (vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4, vcD2R3, vcD2R2, vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4, (vcDL3<<4)+vcRR3, (vcDL2<<4)+vcRR2, (vcDL1<<4)+vcRR1
00000000                            	;dc.b	vcTL4|vcTLMask4, vcTL3|vcTLMask3, vcTL2|vcTLMask2, vcTL1|vcTLMask1
00000000                            	if vcAlgorithm=7
00000000                            		dc.b	op4|$80
00000000                            	else
00000000                            		dc.b	op4
00000000                            	endif
00000000                            
00000000                            	if vcAlgorithm>=4
00000000                            		dc.b    op3|$80
00000000                            	else
00000000                            		dc.b    op3
00000000                            	endif
00000000                            
00000000                            	if vcAlgorithm>=5
00000000                            		dc.b    op2|$80
00000000                            	else
00000000                            		dc.b    op2
00000000                            	endif
00000000                            		dc.b    op1|$80
00000000                            	endm
00000000                            
00000000                            
00000000                            	include	"Constants.asm"
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Constants
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000 =00006978                  Size_of_SegaPCM:		equ $6978
00000000                            
00000000                            ; VDP addressses
00000000 =00C00000                  vdp_data_port:		equ $C00000
00000000 =00C00004                  vdp_control_port:	equ $C00004
00000000 =00C00008                  vdp_counter:		equ $C00008
00000000                            
00000000 =00C00011                  psg_input:		equ $C00011
00000000                            
00000000                            ; Z80 addresses
00000000 =00A00000                  z80_ram:		equ $A00000	; start of Z80 RAM
00000000 =00A000EA                  z80_dac3_pitch:		equ $A000EA
00000000 =00A01FFD                  z80_dac_status:		equ $A01FFD
00000000 =00A01FFF                  z80_dac_sample:		equ $A01FFF
00000000 =00A02000                  z80_ram_end:		equ $A02000	; end of non-reserved Z80 RAM
00000000 =00A10001                  z80_version:		equ $A10001
00000000 =00A10002                  z80_port_1_data:	equ $A10002
00000000 =00A10008                  z80_port_1_control:	equ $A10008
00000000 =00A1000A                  z80_port_2_control:	equ $A1000A
00000000 =00A1000C                  z80_expansion_control:	equ $A1000C
00000000 =00A11100                  z80_bus_request:	equ $A11100
00000000 =00A11200                  z80_reset:		equ $A11200
00000000 =00A04000                  ym2612_a0:		equ $A04000
00000000 =00A04001                  ym2612_d0:		equ $A04001
00000000 =00A04002                  ym2612_a1:		equ $A04002
00000000 =00A04003                  ym2612_d1:		equ $A04003
00000000                            
00000000 =00A14000                  security_addr:		equ $A14000
00000000                            
00000000                            ; Sound driver constants
00000000 =00000000                  TrackPlaybackControl:	equ 0		; All tracks
00000000 =00000001                  TrackVoiceControl:	equ 1		; All tracks
00000000 =00000002                  TrackTempoDivider:	equ 2		; All tracks
00000000 =00000004                  TrackDataPointer:	equ 4		; All tracks (4 bytes)
00000000 =00000008                  TrackTranspose:		equ 8		; FM/PSG only (sometimes written to as a word, to include TrackVolume)
00000000 =00000009                  TrackVolume:		equ 9		; FM/PSG only
00000000 =0000000A                  TrackAMSFMSPan:		equ $A		; FM/DAC only
00000000 =0000000B                  TrackVoiceIndex:	equ $B		; FM/PSG only
00000000 =0000000C                  TrackVolEnvIndex:	equ $C		; PSG only
00000000 =0000000D                  TrackStackPointer:	equ $D		; All tracks
00000000 =0000000E                  TrackDurationTimeout:	equ $E		; All tracks
00000000 =0000000F                  TrackSavedDuration:	equ $F		; All tracks
00000000 =00000010                  TrackSavedDAC:		equ $10		; DAC only
00000000 =00000010                  TrackFreq:		equ $10		; FM/PSG only (2 bytes)
00000000 =00000012                  TrackNoteTimeout:	equ $12		; FM/PSG only
00000000 =00000013                  TrackNoteTimeoutMaster:equ $13		; FM/PSG only
00000000 =00000014                  TrackModulationPtr:	equ $14		; FM/PSG only (4 bytes)
00000000 =00000018                  TrackModulationWait:	equ $18		; FM/PSG only
00000000 =00000019                  TrackModulationSpeed:	equ $19		; FM/PSG only
00000000 =0000001A                  TrackModulationDelta:	equ $1A		; FM/PSG only
00000000 =0000001B                  TrackModulationSteps:	equ $1B		; FM/PSG only
00000000 =0000001C                  TrackModulationVal:	equ $1C		; FM/PSG only (2 bytes)
00000000 =0000001E                  TrackDetune:		equ $1E		; FM/PSG only
00000000 =0000001F                  TrackPSGNoise:		equ $1F		; PSG only
00000000 =0000001F                  TrackFeedbackAlgo:	equ $1F		; FM only
00000000 =00000020                  TrackVoicePtr:		equ $20		; FM SFX only (4 bytes)
00000000 =00000024                  TrackLoopCounters:	equ $24		; All tracks (multiple bytes)
00000000                            TrackGoSubStack:	equ TrackSz	; All tracks (multiple bytes. This constant won't get to be used because of an optimisation that just uses zTrackSz)
00000000                            
00000000 =00000030                  TrackSz:	equ $30
00000000                            
00000000                            ; VRAM data
00000000 =0000C000                  vram_fg:	equ $C000	; foreground namespace
00000000 =0000E000                  vram_bg:	equ $E000	; background namespace
00000000 =0000F000                  vram_sonic:	equ $F000	; Sonic graphics
00000000 =0000F800                  vram_sprites:	equ $F800	; sprite table
00000000 =0000FC00                  vram_hscroll:	equ $FC00	; horizontal scroll table
00000000                            
00000000                            ; Game modes
00000000                            id_Sega:	equ ptr_GM_Sega-GameModeArray	; $00
00000000                            id_Title:	equ ptr_GM_Title-GameModeArray	; $04
00000000                            id_Demo:	equ ptr_GM_Demo-GameModeArray	; $08
00000000                            id_Level:	equ ptr_GM_Level-GameModeArray	; $0C
00000000                            id_Special:	equ ptr_GM_Special-GameModeArray; $10
00000000                            id_Continue:	equ ptr_GM_Cont-GameModeArray	; $14
00000000                            id_Ending:	equ ptr_GM_Ending-GameModeArray	; $18
00000000                            id_Credits:	equ ptr_GM_Credits-GameModeArray; $1C
00000000                            
00000000                            ; Levels
00000000 =00000000                  id_GHZ:		equ 0
00000000 =00000001                  id_LZ:		equ 1
00000000 =00000002                  id_MZ:		equ 2
00000000 =00000003                  id_SLZ:		equ 3
00000000 =00000004                  id_SYZ:		equ 4
00000000 =00000005                  id_SBZ:		equ 5
00000000 =00000006                  id_EndZ:	equ 6
00000000 =00000007                  id_SS:		equ 7
00000000                            
00000000                            ; colors
00000000 =00000000                  cBlack:		equ $000		; color black
00000000 =00000EEE                  cWhite:		equ $EEE		; color white
00000000 =00000E00                  cBlue:		equ $E00		; color blue
00000000 =000000E0                  cGreen:		equ $0E0		; color green
00000000 =0000000E                  cRed:		equ $00E		; color red
00000000 =000000EE                  cYellow:	equ cGreen+cRed		; color yellow
00000000 =00000EE0                  cAqua:		equ cGreen+cBlue	; color aqua
00000000 =00000E0E                  cMagenta:	equ cBlue+cRed		; color magenta
00000000                            
00000000                            ; Joypad input
00000000 =00000080                  btnStart:	equ %10000000 ; Start button	($80)
00000000 =00000040                  btnA:		equ %01000000 ; A		($40)
00000000 =00000020                  btnC:		equ %00100000 ; C		($20)
00000000 =00000010                  btnB:		equ %00010000 ; B		($10)
00000000 =00000008                  btnR:		equ %00001000 ; Right		($08)
00000000 =00000004                  btnL:		equ %00000100 ; Left		($04)
00000000 =00000002                  btnDn:		equ %00000010 ; Down		($02)
00000000 =00000001                  btnUp:		equ %00000001 ; Up		($01)
00000000 =0000000F                  btnDir:		equ %00001111 ; Any direction	($0F)
00000000 =00000070                  btnABC:		equ %01110000 ; A, B or C	($70)
00000000 =00000007                  bitStart:	equ 7
00000000 =00000006                  bitA:		equ 6
00000000 =00000005                  bitC:		equ 5
00000000 =00000004                  bitB:		equ 4
00000000 =00000003                  bitR:		equ 3
00000000 =00000002                  bitL:		equ 2
00000000 =00000001                  bitDn:		equ 1
00000000 =00000000                  bitUp:		equ 0
00000000                            
00000000                            ; Object variables
00000000 =00000001                  obRender:	equ 1	; bitfield for x/y flip, display mode
00000000 =00000002                  obGfx:		equ 2	; palette line & VRAM setting (2 bytes)
00000000 =00000004                  obMap:		equ 4	; mappings address (4 bytes)
00000000 =00000008                  obX:		equ 8	; x-axis position (2-4 bytes)
00000000 =0000000A                  obScreenY:	equ $A	; y-axis position for screen-fixed items (2 bytes)
00000000 =0000000C                  obY:		equ $C	; y-axis position (2-4 bytes)
00000000 =00000010                  obVelX:		equ $10	; x-axis velocity (2 bytes)
00000000 =00000012                  obVelY:		equ $12	; y-axis velocity (2 bytes)
00000000 =00000020                  obInertia:	equ $20	; potential speed (2 bytes)
00000000 =00000016                  obHeight:	equ $16	; height/2
00000000 =00000017                  obWidth:	equ $17	; width/2
00000000 =00000018                  obPriority:	equ $18	; sprite stack priority -- 0 is front
00000000 =00000014                  obActWid:	equ $14	; action width
00000000 =0000001A                  obFrame:	equ $1A	; current frame displayed
00000000 =0000001B                  obAniFrame:	equ $1B	; current frame in animation script
00000000 =0000001C                  obAnim:		equ $1C	; current animation
00000000 =0000001D                  obNextAni:	equ $1D	; next animation
00000000 =0000001E                  obTimeFrame:	equ $1E	; time to next frame
00000000 =0000001F                  obDelayAni:	equ $1F	; time to delay animation
00000000 =00000020                  obColType:	equ $20	; collision response type
00000000 =00000021                  obColProp:	equ $21	; collision extra property
00000000 =00000022                  obStatus:	equ $22	; orientation or mode
00000000 =00000023                  obRespawnNo:	equ $23	; respawn list index number
00000000 =00000024                  obRoutine:	equ $24	; routine number
00000000 =00000025                  ob2ndRout:	equ $25	; secondary routine number
00000000 =00000026                  obAngle:	equ $26	; angle
00000000 =00000028                  obSubtype:	equ $28	; object subtype
00000000 =00000025                  obSolid:	equ ob2ndRout ; solid status flag
00000000                            
00000000                            ; Object variables used by Sonic
00000000 =00000030                  flashtime:	equ $30	; time between flashes after getting hit
00000000 =00000032                  invtime:	equ $32	; time left for invincibility
00000000 =00000034                  shoetime:	equ $34	; time left for speed shoes
00000000                            
00000000                            ; Object variables (Sonic 2 disassembly nomenclature)
00000000 =00000001                  render_flags:	equ 1	; bitfield for x/y flip, display mode
00000000 =00000002                  art_tile:	equ 2	; palette line & VRAM setting (2 bytes)
00000000 =00000004                  mappings:	equ 4	; mappings address (4 bytes)
00000000 =00000008                  x_pos:		equ 8	; x-axis position (2-4 bytes)
00000000 =0000000C                  y_pos:		equ $C	; y-axis position (2-4 bytes)
00000000 =00000010                  x_vel:		equ $10	; x-axis velocity (2 bytes)
00000000 =00000012                  y_vel:		equ $12	; y-axis velocity (2 bytes)
00000000 =00000016                  y_radius:	equ $16	; height/2
00000000 =00000017                  x_radius:	equ $17	; width/2
00000000 =00000018                  priority:	equ $18	; sprite stack priority -- 0 is front
00000000 =00000014                  width_pixels:	equ $14	; action width
00000000 =0000001A                  mapping_frame:	equ $1A	; current frame displayed
00000000 =0000001B                  anim_frame:	equ $1B	; current frame in animation script
00000000 =0000001C                  anim:		equ $1C	; current animation
00000000 =0000001D                  next_anim:	equ $1D	; next animation
00000000 =0000001E                  anim_frame_duration: equ $1E ; time to next frame
00000000 =00000020                  collision_flags: equ $20 ; collision response type
00000000 =00000021                  collision_property: equ $21 ; collision extra property
00000000 =00000022                  status:		equ $22	; orientation or mode
00000000 =00000023                  respawn_index:	equ $23	; respawn list index number
00000000 =00000024                  routine:	equ $24	; routine number
00000000 =00000025                  routine_secondary: equ $25 ; secondary routine number
00000000 =00000026                  angle:		equ $26	; angle
00000000 =00000028                  subtype:	equ $28	; object subtype
00000000                            
00000000                            ; Animation flags
00000000 =000000FF                  afEnd:		equ $FF	; return to beginning of animation
00000000 =000000FE                  afBack:		equ $FE	; go back (specified number) bytes
00000000 =000000FD                  afChange:	equ $FD	; run specified animation
00000000 =000000FC                  afRoutine:	equ $FC	; increment routine counter
00000000 =000000FB                  afReset:	equ $FB	; reset animation and 2nd object routine counter
00000000 =000000FA                  af2ndRoutine:	equ $FA	; increment 2nd routine counter
00000000                            
00000000                            ; Background music
00000000 =00000081                  bgm__First:	equ $81
00000000                            bgm_GHZ:	equ ((ptr_mus81-MusicIndex)/4)+bgm__First
00000000                            bgm_LZ:		equ ((ptr_mus82-MusicIndex)/4)+bgm__First
00000000                            bgm_MZ:		equ ((ptr_mus83-MusicIndex)/4)+bgm__First
00000000                            bgm_SLZ:	equ ((ptr_mus84-MusicIndex)/4)+bgm__First
00000000                            bgm_SYZ:	equ ((ptr_mus85-MusicIndex)/4)+bgm__First
00000000                            bgm_SBZ:	equ ((ptr_mus86-MusicIndex)/4)+bgm__First
00000000                            bgm_Invincible:	equ ((ptr_mus87-MusicIndex)/4)+bgm__First
00000000                            bgm_ExtraLife:	equ ((ptr_mus88-MusicIndex)/4)+bgm__First
00000000                            bgm_SS:		equ ((ptr_mus89-MusicIndex)/4)+bgm__First
00000000                            bgm_Title:	equ ((ptr_mus8A-MusicIndex)/4)+bgm__First
00000000                            bgm_Ending:	equ ((ptr_mus8B-MusicIndex)/4)+bgm__First
00000000                            bgm_Boss:	equ ((ptr_mus8C-MusicIndex)/4)+bgm__First
00000000                            bgm_FZ:		equ ((ptr_mus8D-MusicIndex)/4)+bgm__First
00000000                            bgm_GotThrough:	equ ((ptr_mus8E-MusicIndex)/4)+bgm__First
00000000                            bgm_GameOver:	equ ((ptr_mus8F-MusicIndex)/4)+bgm__First
00000000                            bgm_Continue:	equ ((ptr_mus90-MusicIndex)/4)+bgm__First
00000000                            bgm_Credits:	equ ((ptr_mus91-MusicIndex)/4)+bgm__First
00000000                            bgm_Drowning:	equ ((ptr_mus92-MusicIndex)/4)+bgm__First
00000000                            bgm_Emerald:	equ ((ptr_mus93-MusicIndex)/4)+bgm__First
00000000                            bgm_Pinch:		equ ((ptr_mus94-MusicIndex)/4)+bgm__First
00000000                            bgm_Seaside:	equ ((ptr_mus95-MusicIndex)/4)+bgm__First
00000000                            bgm_SBZ3:		equ ((ptr_mus96-MusicIndex)/4)+bgm__First
00000000                            bgm_Granada:	equ ((ptr_mus97-MusicIndex)/4)+bgm__First
00000000                            bgm__Last:	equ ((ptr_musend-MusicIndex-4)/4)+bgm__First
00000000                            
00000000                            ; Sound effects
00000000 =000000A0                  sfx__First:	equ $A0
00000000                            sfx_Jump:	equ ((ptr_sndA0-SoundIndex)/4)+sfx__First
00000000                            sfx_Lamppost:	equ ((ptr_sndA1-SoundIndex)/4)+sfx__First
00000000                            sfx_A2:		equ ((ptr_sndA2-SoundIndex)/4)+sfx__First
00000000                            sfx_Death:	equ ((ptr_sndA3-SoundIndex)/4)+sfx__First
00000000                            sfx_Skid:	equ ((ptr_sndA4-SoundIndex)/4)+sfx__First
00000000                            sfx_LRingBox:	equ ((ptr_sndA5-SoundIndex)/4)+sfx__First
00000000                            sfx_HitSpikes:	equ ((ptr_sndA6-SoundIndex)/4)+sfx__First
00000000                            sfx_Push:	equ ((ptr_sndA7-SoundIndex)/4)+sfx__First
00000000                            sfx_SSGoal:	equ ((ptr_sndA8-SoundIndex)/4)+sfx__First
00000000                            sfx_SSItem:	equ ((ptr_sndA9-SoundIndex)/4)+sfx__First
00000000                            sfx_Splash:	equ ((ptr_sndAA-SoundIndex)/4)+sfx__First
00000000                            sfx_FireShield:	equ ((ptr_FireShield-SoundIndex)/4)+sfx__First
00000000                            sfx_HitBoss:	equ ((ptr_sndAC-SoundIndex)/4)+sfx__First
00000000                            sfx_Bubble:	equ ((ptr_sndAD-SoundIndex)/4)+sfx__First
00000000                            sfx_Fireball:	equ ((ptr_sndAE-SoundIndex)/4)+sfx__First
00000000                            sfx_Shield:	equ ((ptr_sndAF-SoundIndex)/4)+sfx__First
00000000                            sfx_Saw:	equ ((ptr_sndB0-SoundIndex)/4)+sfx__First
00000000                            sfx_Electric:	equ ((ptr_sndB1-SoundIndex)/4)+sfx__First
00000000                            sfx_Drown:	equ ((ptr_sndB2-SoundIndex)/4)+sfx__First
00000000                            sfx_Flamethrower:equ ((ptr_sndB3-SoundIndex)/4)+sfx__First
00000000                            sfx_Bumper:	equ ((ptr_sndB4-SoundIndex)/4)+sfx__First
00000000                            sfx_Ring:	equ ((ptr_sndB5-SoundIndex)/4)+sfx__First
00000000                            sfx_SpikesMove:	equ ((ptr_sndB6-SoundIndex)/4)+sfx__First
00000000                            sfx_Rumbling:	equ ((ptr_sndB7-SoundIndex)/4)+sfx__First
00000000                            sfx_B8:		equ ((ptr_sndB8-SoundIndex)/4)+sfx__First
00000000                            sfx_Collapse:	equ ((ptr_sndB9-SoundIndex)/4)+sfx__First
00000000                            sfx_SSGlass:	equ ((ptr_sndBA-SoundIndex)/4)+sfx__First
00000000                            sfx_Door:	equ ((ptr_sndBB-SoundIndex)/4)+sfx__First
00000000                            sfx_Teleport:	equ ((ptr_sndBC-SoundIndex)/4)+sfx__First
00000000                            sfx_ChainStomp:	equ ((ptr_sndBD-SoundIndex)/4)+sfx__First
00000000                            sfx_Roll:	equ ((ptr_sndBE-SoundIndex)/4)+sfx__First
00000000                            sfx_Continue:	equ ((ptr_sndBF-SoundIndex)/4)+sfx__First
00000000                            sfx_Basaran:	equ ((ptr_sndC0-SoundIndex)/4)+sfx__First
00000000                            sfx_BreakItem:	equ ((ptr_sndC1-SoundIndex)/4)+sfx__First
00000000                            sfx_Warning:	equ ((ptr_sndC2-SoundIndex)/4)+sfx__First
00000000                            sfx_GiantRing:	equ ((ptr_sndC3-SoundIndex)/4)+sfx__First
00000000                            sfx_Bomb:	equ ((ptr_sndC4-SoundIndex)/4)+sfx__First
00000000                            sfx_Cash:	equ ((ptr_sndC5-SoundIndex)/4)+sfx__First
00000000                            sfx_RingLoss:	equ ((ptr_sndC6-SoundIndex)/4)+sfx__First
00000000                            sfx_ChainRise:	equ ((ptr_sndC7-SoundIndex)/4)+sfx__First
00000000                            sfx_Burning:	equ ((ptr_sndC8-SoundIndex)/4)+sfx__First
00000000                            sfx_Bonus:	equ ((ptr_sndC9-SoundIndex)/4)+sfx__First
00000000                            sfx_EnterSS:	equ ((ptr_sndCA-SoundIndex)/4)+sfx__First
00000000                            sfx_WallSmash:	equ ((ptr_sndCB-SoundIndex)/4)+sfx__First
00000000                            sfx_Spring:	equ ((ptr_sndCC-SoundIndex)/4)+sfx__First
00000000                            sfx_Switch:	equ ((ptr_sndCD-SoundIndex)/4)+sfx__First
00000000                            sfx_RingLeft:	equ ((ptr_sndCE-SoundIndex)/4)+sfx__First
00000000                            sfx_Signpost:	equ ((ptr_sndCF-SoundIndex)/4)+sfx__First
00000000                            sfx__Last:	equ ((ptr_sndend-SoundIndex-4)/4)+sfx__First
00000000                            
00000000                            ; Special sound effects
00000000 =000000D0                  spec__First:	equ $D0
00000000                            sfx_Waterfall:	equ ((ptr_sndD0-SpecSoundIndex)/4)+spec__First
00000000                            sfx_LightningShield:	equ ((ptr_sndD1-SpecSoundIndex)/4)+spec__First
00000000                            sfx_Peelout:	equ ((ptr_sndD2-SpecSoundIndex)/4)+spec__First
00000000                            sfx_PeeloutRelease:	equ ((ptr_sndD3-SpecSoundIndex)/4)+spec__First
00000000                            sfx_PeeloutStop:	equ ((ptr_sndD4-SpecSoundIndex)/4)+spec__First
00000000                            sfx_Spindash:	equ ((ptr_sndD5-SpecSoundIndex)/4)+spec__First
00000000                            spec__Last:	equ ((ptr_specend-SpecSoundIndex-4)/4)+spec__First
00000000                            
00000000 =000000E0                  flg__First:	equ $E0
00000000                            bgm_Fade:	equ ((ptr_flgE0-Sound_ExIndex)/4)+flg__First
00000000                            sfx_Sega:	equ ((ptr_flgE1-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Speedup:	equ ((ptr_flgE2-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Slowdown:	equ ((ptr_flgE3-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Stop:	equ ((ptr_flgE4-Sound_ExIndex)/4)+flg__First
00000000                            flg__Last:	equ ((ptr_flgend-Sound_ExIndex-4)/4)+flg__First
00000000                            
00000000                            ; Sonic frame IDs
00000000 =00000000                  fr_Null:	equ 0
00000000 =00000001                  fr_Stand:	equ 1
00000000 =00000002                  fr_Blink:	equ 2
00000000 =00000003                  fr_Wait1:	equ 3
00000000 =00000004                  fr_Wait2:	equ 4
00000000 =00000005                  fr_Wait3:	equ 5
00000000 =00000006                  fr_Wait4:	equ 6
00000000 =00000007                  fr_Wait5:	equ 7
00000000 =00000008                  fr_Wait6:	equ 8
00000000 =00000009                  fr_Wait7:	equ 9
00000000 =0000000A                  fr_Wait8:	equ $A
00000000 =0000000B                  fr_Wait9:	equ $B
00000000 =0000000C                  fr_LookUp1:	equ $C
00000000 =0000000D                  fr_LookUp2:	equ $D
00000000 =0000000E                  fr_Walk11:	equ $E
00000000 =0000000F                  fr_Walk12:	equ $F
00000000 =00000010                  fr_Walk13:	equ $10
00000000 =00000011                  fr_Walk14:	equ $11
00000000 =00000012                  fr_Walk15:	equ $12
00000000 =00000013                  fr_Walk16:	equ $13
00000000 =00000014                  fr_Walk17:	equ $14
00000000 =00000015                  fr_Walk18:	equ $15
00000000 =00000016                  fr_Walk21:	equ $16
00000000 =00000017                  fr_Walk22:	equ $17
00000000 =00000018                  fr_Walk23:	equ $18
00000000 =00000019                  fr_Walk24:	equ $19
00000000 =0000001A                  fr_Walk25:	equ $1A
00000000 =0000001B                  fr_Walk26:	equ $1B
00000000 =0000001C                  fr_Walk27:	equ $1C
00000000 =0000001D                  fr_Walk28:	equ $1D
00000000 =0000001E                  fr_Walk31:	equ $1E
00000000 =0000001F                  fr_Walk32:	equ $1F
00000000 =00000020                  fr_Walk33:	equ $20
00000000 =00000021                  fr_Walk34:	equ $21
00000000 =00000022                  fr_Walk35:	equ $22
00000000 =00000023                  fr_Walk36:	equ $23
00000000 =00000024                  fr_Walk37:	equ $24
00000000 =00000025                  fr_Walk38:	equ $25
00000000 =00000026                  fr_Walk41:	equ $26
00000000 =00000027                  fr_Walk42:	equ $27
00000000 =00000028                  fr_Walk43:	equ $28
00000000 =00000029                  fr_Walk44:	equ $29
00000000 =0000002A                  fr_Walk45:	equ $2A
00000000 =0000002B                  fr_Walk46:	equ $2B
00000000 =0000002C                  fr_Walk47:	equ $2C
00000000 =0000002D                  fr_Walk48:	equ $2D
00000000 =0000002E                  fr_Run11:	equ $2E
00000000 =0000002F                  fr_Run12:	equ $2F
00000000 =00000030                  fr_Run13:	equ $30
00000000 =00000031                  fr_Run14:	equ $31
00000000 =00000032                  fr_Run15:	equ $32
00000000 =00000033                  fr_Run16:	equ $33
00000000 =00000034                  fr_Run17:	equ $34
00000000 =00000035                  fr_Run18:	equ $35
00000000 =00000036                  fr_Run21:	equ $36
00000000 =00000037                  fr_Run22:	equ $37
00000000 =00000038                  fr_Run23:	equ $38
00000000 =00000039                  fr_Run24:	equ $39
00000000 =0000003A                  fr_Run25:	equ $3A
00000000 =0000003B                  fr_Run26:	equ $3B
00000000 =0000003C                  fr_Run27:	equ $3C
00000000 =0000003D                  fr_Run28:	equ $3D
00000000 =0000003E                  fr_Run31:	equ $3E
00000000 =0000003F                  fr_Run32:	equ $3F
00000000 =00000040                  fr_Run33:	equ $40
00000000 =00000041                  fr_Run34:	equ $41
00000000 =00000042                  fr_Run35:	equ $42
00000000 =00000043                  fr_Run36:	equ $43
00000000 =00000044                  fr_Run37:	equ $44
00000000 =00000045                  fr_Run38:	equ $45
00000000 =00000046                  fr_Run41:	equ $46
00000000 =00000047                  fr_Run42:	equ $47
00000000 =00000048                  fr_Run43:	equ $48
00000000 =00000049                  fr_Run44:	equ $49
00000000 =0000004A                  fr_Run45:	equ $4A
00000000 =0000004B                  fr_Run46:	equ $4B
00000000 =0000004C                  fr_Run47:	equ $4C
00000000 =0000004D                  fr_Run48:	equ $4D
00000000 =0000004E                  fr_peelout11:	equ $4E
00000000 =0000004F                  fr_peelout12:	equ $4F
00000000 =00000050                  fr_peelout13:	equ $50
00000000 =00000051                  fr_peelout14:	equ $51
00000000 =00000052                  fr_peelout21:	equ $52
00000000 =00000053                  fr_peelout22:	equ $53
00000000 =00000054                  fr_peelout23:	equ $54
00000000 =00000055                  fr_peelout24:	equ $55
00000000 =00000056                  fr_peelout31:	equ $56
00000000 =00000057                  fr_peelout32:	equ $57
00000000 =00000058                  fr_peelout33:	equ $58
00000000 =00000059                  fr_peelout34:	equ $59
00000000 =0000005A                  fr_peelout41:	equ $5A
00000000 =0000005B                  fr_peelout42:	equ $5B
00000000 =0000005C                  fr_peelout43:	equ $5C
00000000 =0000005D                  fr_peelout44:	equ $5D
00000000 =0000005E                  fr_Roll1:	equ $5E
00000000 =00000060                  fr_Roll2:	equ $60
00000000 =00000062                  fr_Roll3:	equ $62
00000000 =00000064                  fr_Roll4:	equ $64
00000000 =00000066                  fr_Roll5:	equ $66
00000000 =0000005F                  fr_Roll6:	equ $5F
00000000 =00000061                  fr_Roll7:	equ $61
00000000 =00000063                  fr_Roll8:	equ $63
00000000 =00000065                  fr_Roll9:	equ $65
00000000 =00000067                  fr_Warp1:	equ $67
00000000 =00000068                  fr_Warp2:	equ $68
00000000 =00000069                  fr_Warp3:	equ $69
00000000 =0000006A                  fr_Warp4:	equ $6A
00000000 =0000006B                  fr_Stop1:	equ $6B
00000000 =0000006C                  fr_Stop2:	equ $6C
00000000 =0000006D                  fr_Stop3:	equ $6D
00000000 =0000006E                  fr_Stop4:	equ $6E
00000000 =0000006F                  fr_Duck3:	equ $6F
00000000 =00000070                  fr_Duck2:	equ $70
00000000 =00000071                  fr_Duck:	equ $71
00000000 =00000072                  fr_Balance1:	equ $72
00000000 =00000073                  fr_Balance2:	equ $73
00000000 =00000074                  fr_Balance3:	equ $74
00000000 =00000075                  fr_Balance4:	equ $75
00000000 =00000076                  fr_Balance5:	equ $76
00000000 =00000077                  fr_Blank:		equ $77
00000000 =00000078                  fr_VHang1:		equ $78
00000000 =00000079                  fr_VHang2:		equ $79
00000000 =0000007A                  fr_VHang3:		equ $7A
00000000                            
00000000 =0000007C                  fr_Float1:	equ $7C
00000000 =0000007E                  fr_Float2:	equ $7E
00000000 =00000081                  fr_Float3:	equ $81
00000000 =00000082                  fr_Float4:	equ $82
00000000 =00000080                  fr_Float5:	equ $80
00000000 =0000007B                  fr_Float6:	equ $7B
00000000 =0000007D                  fr_float7:	equ $7D
00000000 =0000007F                  fr_float8:	equ $7F
00000000 =00000083                  fr_Spring:	equ $83
00000000 =00000084                  fr_Spring2:	equ $84
00000000 =00000085                  fr_Hang1:	equ $85
00000000 =00000086                  fr_Hang2:	equ $86
00000000 =00000087                  fr_Leap1:	equ $87
00000000 =00000088                  fr_Leap2:	equ $88
00000000 =00000089                  fr_Push1:	equ $89
00000000 =0000008A                  fr_Push2:	equ $8A
00000000 =0000008B                  fr_Push3:	equ $8B
00000000 =0000008C                  fr_Push4:	equ $8C
00000000 =0000008D                  fr_Push5:	equ $8D
00000000 =0000008E                  fr_Push6:	equ $8E
00000000 =0000008F                  fr_Push7:	equ $8F
00000000 =00000090                  fr_Push8:	equ $90
00000000 =00000091                  fr_Surf:	equ $91
00000000 =00000092                  fr_Burnt:	equ $92
00000000 =00000093                  fr_Drown:	equ $93
00000000 =00000094                  fr_Death:	equ $94
00000000 =00000095                  fr_GetAir:	equ $95
00000000 =00000096                  fr_Injury:	equ $96
00000000 =00000097                  fr_WaterSlide:	equ $97
00000000 =00000098                  fr_skele1:	equ $98
00000000 =00000099                  fr_skele2:	equ $99
00000000 =0000009A                  fr_skele3:	equ $9A
00000000 =0000009B                  fr_Spindash1	equ $9B
00000000 =0000009C                  fr_Spindash2	equ $9C
00000000 =0000009D                  fr_Spindash3	equ $9D
00000000 =0000009E                  fr_Spindash4	equ $9E
00000000 =0000009F                  fr_Spindash5	equ $9F
00000000 =000000A0                  fr_Spindash6	equ $A0
00000000 =000000A0                  fr_Spindash6	equ $A0
00000000                            	include	"Variables.asm"
00000000                            ; Variables (v) and Flags (f)
00000000                            
00000000 =FFFFFC00                  v_regbuffer:	equ $FFFFFC00	; stores registers d0-a7 during an error event ($40 bytes)
00000000 =FFFFFC40                  v_spbuffer:	equ $FFFFFC40	; stores most recent sp address (4 bytes)
00000000 =FFFFFC44                  v_errortype:	equ $FFFFFC44	; error type
00000000                            
00000000 =00FF0000                  v_256x256:	equ   $FF0000	; 256x256 tile mappings ($A400 bytes)
00000000 =FFFFA400                  v_lvllayout:	equ $FFFFA400	; level and background layouts ($400 bytes)
00000000 =FFFFA800                  v_bgscroll_buffer:	equ	$FFFFA800	; background scroll buffer ($200 bytes)
00000000 =FFFFAA00                  v_ngfx_buffer:	equ $FFFFAA00	; Nemesis graphics decompression buffer ($200 bytes)
00000000 =FFFFAC00                  v_spritequeue:	equ $FFFFAC00	; sprite display queue, in order of priority ($400 bytes)
00000000 =FFFFB000                  v_16x16:		equ $FFFFB000	; 16x16 tile mappings
00000000 =FFFFC800                  VDP_Command_Buffer:	equ $FFFFC800
00000000                            
00000000 =FFFFC8FC                  VDP_Command_Buffer_Slot:equ VDP_Command_Buffer+7*$12*2
00000000 =FFFFC800                  v_sgfx_buffer:	equ $FFFFC800	; buffered Sonic graphics ($17 cells) ($2E0 bytes)
00000000 =FFFFCB00                  v_tracksonic:	equ $FFFFCB00	; position tracking data for Sonic ($100 bytes)
00000000 =FFFFCC00                  v_hscrolltablebuffer:	equ $FFFFCC00 ; scrolling table data (actually $380 bytes, but $400 is reserved for it)
00000000 =FFFFD000                  v_objspace:	equ $FFFFD000	; object variable space ($40 bytes per object) ($2000 bytes)
00000000 =FFFFD000                  v_player:	equ v_objspace	; object variable space for Sonic ($40 bytes)
00000000 =FFFFD800                  v_lvlobjspace:	equ $FFFFD800	; level object variable space ($1800 bytes)
00000000 =FFFFF015                  v_palmuscounter:	equ $FFFFF015
00000000 =FFFFF000                  v_snddriver_ram:	equ $FFFFF000 ; start of RAM for the sound driver data ($5C0 bytes)
00000000                            
00000000                            ; =================================================================================
00000000                            ; From here on, until otherwise stated, all offsets are relative to v_snddriver_ram
00000000                            ; =================================================================================
00000000 =00000000                  v_startofvariables:	equ $000
00000000 =00000000                  v_sndprio:		equ $000	; sound priority (priority of new music/SFX must be higher or equal to this value or it won't play; bit 7 of priority being set prevents this value from changing)
00000000 =00000001                  v_main_tempo_timeout:	equ $001	; Counts down to zero; when zero, resets to next value and delays song by 1 frame
00000000 =00000002                  v_main_tempo:		equ $002	; Used for music only
00000000 =00000003                  f_pausemusic:		equ $003	; flag set to stop music when paused
00000000 =00000004                  v_fadeout_counter:	equ $004
00000000                            
00000000 =00000006                  v_fadeout_delay:	equ $006
00000000 =00000007                  v_communication_byte:	equ $007	; used in Ristar to sync with a boss' attacks; unused here
00000000 =00000008                  f_updating_dac:		equ $008	; $80 if updating DAC, $00 otherwise
00000000 =00000009                  v_sound_id:		equ $009	; sound or music copied from below
00000000 =0000000A                  v_soundqueue0:		equ $00A	; sound or music to play
00000000 =0000000B                  v_soundqueue1:		equ $00B	; special sound to play
00000000 =0000000C                  v_soundqueue2:		equ $00C	; unused sound to play
00000000                            
00000000 =0000000E                  f_voice_selector:	equ $00E	; $00 = use music voice pointer; $40 = use special voice pointer; $80 = use track voice pointer
00000000                            
00000000 =00000018                  v_voice_ptr:		equ $018	; voice data pointer (4 bytes)
00000000                            
00000000 =00000020                  v_special_voice_ptr:	equ $020	; voice data pointer for special SFX ($D0-$DF) (4 bytes)
00000000                            
00000000 =00000024                  f_fadein_flag:		equ $024	; Flag for fade in
00000000 =00000025                  v_fadein_delay:		equ $025
00000000 =00000026                  v_fadein_counter:	equ $026	; Timer for fade in/out
00000000 =00000027                  f_1up_playing:		equ $027	; flag indicating 1-up song is playing
00000000 =00000028                  v_tempo_mod:		equ $028	; music - tempo modifier
00000000 =00000029                  v_speeduptempo:		equ $029	; music - tempo modifier with speed shoes
00000000 =0000002A                  f_speedup:		equ $02A	; flag indicating whether speed shoes tempo is on ($80) or off ($00)
00000000 =0000002B                  v_ring_speaker:		equ $02B	; which speaker the "ring" sound is played in (00 = right; 01 = left)
00000000 =0000002C                  f_push_playing:		equ $02C	; if set, prevents further push sounds from playing
00000000                            
00000000 =00000040                  v_music_track_ram:	equ $040	; Start of music RAM
00000000                            
00000000 =00000040                  v_music_fmdac_tracks:	equ v_music_track_ram+TrackSz*0
00000000 =00000040                  v_music_dac_track:	equ v_music_fmdac_tracks+TrackSz*0
00000000 =00000070                  v_music_fm_tracks:	equ v_music_fmdac_tracks+TrackSz*1
00000000 =00000070                  v_music_fm1_track:	equ v_music_fm_tracks+TrackSz*0
00000000 =000000A0                  v_music_fm2_track:	equ v_music_fm_tracks+TrackSz*1
00000000 =000000D0                  v_music_fm3_track:	equ v_music_fm_tracks+TrackSz*2
00000000 =00000100                  v_music_fm4_track:	equ v_music_fm_tracks+TrackSz*3
00000000 =00000130                  v_music_fm5_track:	equ v_music_fm_tracks+TrackSz*4
00000000 =00000160                  v_music_fm6_track:	equ v_music_fm_tracks+TrackSz*5
00000000 =00000190                  v_music_fm_tracks_end:	equ v_music_fm_tracks+TrackSz*6
00000000 =00000190                  v_music_fmdac_tracks_end:	equ v_music_fm_tracks_end
00000000 =00000190                  v_music_psg_tracks:	equ v_music_fmdac_tracks_end
00000000 =00000190                  v_music_psg1_track:	equ v_music_psg_tracks+TrackSz*0
00000000 =000001C0                  v_music_psg2_track:	equ v_music_psg_tracks+TrackSz*1
00000000 =000001F0                  v_music_psg3_track:	equ v_music_psg_tracks+TrackSz*2
00000000 =00000220                  v_music_psg_tracks_end:	equ v_music_psg_tracks+TrackSz*3
00000000 =00000220                  v_music_track_ram_end:	equ v_music_psg_tracks_end
00000000                            
00000000 =00000220                  v_sfx_track_ram:	equ v_music_track_ram_end	; Start of SFX RAM, straight after the end of music RAM
00000000                            
00000000 =00000220                  v_sfx_fm_tracks:	equ v_sfx_track_ram+TrackSz*0
00000000 =00000220                  v_sfx_fm3_track:	equ v_sfx_fm_tracks+TrackSz*0
00000000 =00000250                  v_sfx_fm4_track:	equ v_sfx_fm_tracks+TrackSz*1
00000000 =00000280                  v_sfx_fm5_track:	equ v_sfx_fm_tracks+TrackSz*2
00000000 =000002B0                  v_sfx_fm_tracks_end:	equ v_sfx_fm_tracks+TrackSz*3
00000000 =000002B0                  v_sfx_psg_tracks:	equ v_sfx_fm_tracks_end
00000000 =000002B0                  v_sfx_psg1_track:	equ v_sfx_psg_tracks+TrackSz*0
00000000 =000002E0                  v_sfx_psg2_track:	equ v_sfx_psg_tracks+TrackSz*1
00000000 =00000310                  v_sfx_psg3_track:	equ v_sfx_psg_tracks+TrackSz*2
00000000 =00000340                  v_sfx_psg_tracks_end:	equ v_sfx_psg_tracks+TrackSz*3
00000000 =00000340                  v_sfx_track_ram_end:	equ v_sfx_psg_tracks_end
00000000                            
00000000 =00000340                  v_spcsfx_track_ram:	equ v_sfx_track_ram_end	; Start of special SFX RAM, straight after the end of SFX RAM
00000000                            
00000000 =00000340                  v_spcsfx_fm4_track:	equ v_spcsfx_track_ram+TrackSz*0
00000000 =00000370                  v_spcsfx_psg3_track:	equ v_spcsfx_track_ram+TrackSz*1
00000000 =000003A0                  v_spcsfx_track_ram_end:	equ v_spcsfx_track_ram+TrackSz*2
00000000                            
00000000 =000003A0                  v_1up_ram_copy:		equ v_spcsfx_track_ram_end
00000000                            
00000000                            ; =================================================================================
00000000                            ; From here on, no longer relative to sound driver RAM
00000000                            ; =================================================================================
00000000                            
00000000 =FFFFF600                  v_gamemode:	equ $FFFFF600	; game mode (00=Sega; 04=Title; 08=Demo; 0C=Level; 10=SS; 14=Cont; 18=End; 1C=Credit; +8C=PreLevel)
00000000 =FFFFF602                  v_jpadhold2:	equ $FFFFF602	; joypad input - held, duplicate
00000000 =FFFFF603                  v_jpadpress2:	equ $FFFFF603	; joypad input - pressed, duplicate
00000000 =FFFFF604                  v_jpadhold1:	equ $FFFFF604	; joypad input - held
00000000 =FFFFF605                  v_jpadpress1:	equ $FFFFF605	; joypad input - pressed
00000000                            
00000000 =FFFFF60C                  v_vdp_buffer1:	equ $FFFFF60C	; VDP instruction buffer (2 bytes)
00000000                            
00000000 =FFFFF614                  v_demolength:	equ $FFFFF614	; the length of a demo in frames (2 bytes)
00000000 =FFFFF616                  v_scrposy_dup:	equ $FFFFF616	; screen position y (duplicate) (2 bytes)
00000000 =FFFFF618                  v_bgscrposy_dup:	equ $FFFFF618	; background screen position y (duplicate) (2 bytes)
00000000 =FFFFF61A                  v_scrposx_dup:	equ $FFFFF61A	; screen position x (duplicate) (2 bytes)
00000000 =FFFFF61C                  v_bgscreenposx_dup_unused:	equ $FFFFF61C	; background screen position x (duplicate) (2 bytes)
00000000 =FFFFF61E                  v_bg3screenposy_dup_unused:	equ $FFFFF61E	; (2 bytes)
00000000 =FFFFF620                  v_bg3screenposx_dup_unused:	equ $FFFFF620	; (2 bytes)
00000000                            
00000000 =FFFFF624                  v_hbla_hreg:	equ $FFFFF624	; VDP H.interrupt register buffer (8Axx) (2 bytes)
00000000 =FFFFF625                  v_hbla_line:	equ $FFFFF625	; screen line where water starts and palette is changed by HBlank
00000000 =FFFFF626                  v_pfade_start:	equ $FFFFF626	; palette fading - start position in bytes
00000000 =FFFFF627                  v_pfade_size:	equ $FFFFF627	; palette fading - number of colors
00000000 =FFFFF62A                  v_vbla_routine:	equ $FFFFF62A	; VBlank - routine counter
00000000 =FFFFF62C                  v_spritecount:	equ $FFFFF62C	; number of sprites on-screen
00000000 =FFFFF632                  v_pcyc_num:	equ $FFFFF632	; palette cycling - current reference number (2 bytes)
00000000 =FFFFF634                  v_pcyc_time:	equ $FFFFF634	; palette cycling - time until the next change (2 bytes)
00000000 =FFFFF636                  v_random:	equ $FFFFF636	; pseudo random number buffer (4 bytes)
00000000 =FFFFF63A                  f_pause:		equ $FFFFF63A	; flag set to pause the game (2 bytes)
00000000 =FFFFF640                  v_vdp_buffer2:	equ $FFFFF640	; VDP instruction buffer (2 bytes)
00000000 =FFFFF644                  f_hbla_pal:	equ $FFFFF644	; flag set to change palette during HBlank (0000 = no; 0001 = change) (2 bytes)
00000000 =FFFFF646                  v_waterpos1:	equ $FFFFF646	; water height, actual (2 bytes)
00000000 =FFFFF648                  v_waterpos2:	equ $FFFFF648	; water height, ignoring sway (2 bytes)
00000000 =FFFFF64A                  v_waterpos3:	equ $FFFFF64A	; water height, next target (2 bytes)
00000000 =FFFFF64C                  f_water:		equ $FFFFF64C	; flag set for water
00000000 =FFFFF64D                  v_wtr_routine:	equ $FFFFF64D	; water event - routine counter
00000000 =FFFFF64E                  f_wtr_state:	equ $FFFFF64E	; water palette state when water is above/below the screen (00 = partly/all dry; 01 = all underwater)
00000000                            
00000000 =FFFFF650                  v_pal_buffer:	equ $FFFFF650	; palette data buffer (used for palette cycling) ($30 bytes)
00000000 =FFFFF680                  v_plc_buffer:	equ $FFFFF680	; pattern load cues buffer (maximum $10 PLCs) ($60 bytes)
00000000 =FFFFF6E0                  v_ptrnemcode:	equ $FFFFF6E0	; pointer for nemesis decompression code ($1502 or $150C) (4 bytes)
00000000                            
00000000 =FFFFF6F8                  f_plc_execute:	equ $FFFFF6F8	; flag set for pattern load cue execution (2 bytes)
00000000                            
00000000 =FFFFF700                  v_screenposx:	equ $FFFFF700	; screen position x (2 bytes)
00000000 =FFFFF704                  v_screenposy:	equ $FFFFF704	; screen position y (2 bytes)
00000000 =FFFFF708                  v_bgscreenposx:	equ $FFFFF708	; background screen position x (2 bytes)
00000000 =FFFFF70C                  v_bgscreenposy:	equ $FFFFF70C	; background screen position y (2 bytes)
00000000 =FFFFF710                  v_bg2screenposx:	equ $FFFFF710	; 2 bytes
00000000 =FFFFF714                  v_bg2screenposy:	equ $FFFFF714	; 2 bytes
00000000 =FFFFF718                  v_bg3screenposx:	equ $FFFFF718	; 2 bytes
00000000 =FFFFF71C                  v_bg3screenposy:	equ $FFFFF71C	; 2 bytes
00000000                            
00000000 =FFFFF720                  v_limitleft1:	equ $FFFFF720	; left level boundary (2 bytes)
00000000 =FFFFF722                  v_limitright1:	equ $FFFFF722	; right level boundary (2 bytes)
00000000 =FFFFF724                  v_limittop1:	equ $FFFFF724	; top level boundary (2 bytes)
00000000 =FFFFF726                  v_limitbtm1:	equ $FFFFF726	; bottom level boundary (2 bytes)
00000000 =FFFFF728                  v_limitleft2:	equ $FFFFF728	; left level boundary (2 bytes)
00000000 =FFFFF72A                  v_limitright2:	equ $FFFFF72A	; right level boundary (2 bytes)
00000000 =FFFFF72C                  v_limittop2:	equ $FFFFF72C	; top level boundary (2 bytes)
00000000 =FFFFF72E                  v_limitbtm2:	equ $FFFFF72E	; bottom level boundary (2 bytes)
00000000                            
00000000 =FFFFF732                  v_limitleft3:	equ $FFFFF732	; left level boundary, at the end of an act (2 bytes)
00000000                            
00000000 =FFFFF73A                  v_scrshiftx:	equ $FFFFF73A	; x-screen shift (new - last) * $100
00000000 =FFFFF73C                  v_scrshifty:	equ $FFFFF73C	; y-screen shift (new - last) * $100
00000000                            
00000000 =FFFFF73E                  v_lookshift:	equ $FFFFF73E	; screen shift when Sonic looks up/down (2 bytes)
00000000 =FFFFF742                  v_dle_routine:	equ $FFFFF742	; dynamic level event - routine counter
00000000 =FFFFF744                  f_nobgscroll:	equ $FFFFF744	; flag set to cancel background scrolling
00000000                            
00000000 =FFFFF74A                  v_fg_xblock:	equ	$FFFFF74A	; foreground x-block parity (for redraw)
00000000 =FFFFF74B                  v_fg_yblock:	equ	$FFFFF74B	; foreground y-block parity (for redraw)
00000000 =FFFFF74C                  v_bg1_xblock:	equ	$FFFFF74C	; background x-block parity (for redraw)
00000000 =FFFFF74D                  v_bg1_yblock:	equ	$FFFFF74D	; background y-block parity (for redraw)
00000000 =FFFFF74E                  v_bg2_xblock:	equ	$FFFFF74E	; secondary background x-block parity (for redraw)
00000000 =FFFFF74F                  v_bg2_yblock:	equ	$FFFFF74F	; secondary background y-block parity (unused)
00000000 =FFFFF750                  v_bg3_xblock:	equ	$FFFFF750	; teritary background x-block parity (for redraw)
00000000 =FFFFF751                  v_bg3_yblock:	equ	$FFFFF751	; teritary background y-block parity (unused)
00000000                            
00000000 =FFFFF754                  v_fg_scroll_flags:	equ $FFFFF754	; screen redraw flags for foreground
00000000 =FFFFF756                  v_bg1_scroll_flags:	equ $FFFFF756	; screen redraw flags for background 1
00000000 =FFFFF758                  v_bg2_scroll_flags:	equ $FFFFF758	; screen redraw flags for background 2
00000000 =FFFFF75A                  v_bg3_scroll_flags:	equ $FFFFF75A	; screen redraw flags for background 3
00000000 =FFFFF75C                  f_bgscrollvert:	equ $FFFFF75C	; flag for vertical background scrolling
00000000 =FFFFF760                  v_sonspeedmax:	equ $FFFFF760	; Sonic's maximum speed (2 bytes)
00000000 =FFFFF762                  v_sonspeedacc:	equ $FFFFF762	; Sonic's acceleration (2 bytes)
00000000 =FFFFF764                  v_sonspeeddec:	equ $FFFFF764	; Sonic's deceleration (2 bytes)
00000000 =FFFFF766                  v_sonframenum:	equ $FFFFF766	; frame to display for Sonic
00000000 =FFFFF767                  f_sonframechg:	equ $FFFFF767	; flag set to update Sonic's sprite frame
00000000 =FFFFF768                  v_anglebuffer:	equ $FFFFF768	; angle of collision block that Sonic or object is standing on
00000000                            
00000000 =FFFFF76C                  v_opl_routine:	equ $FFFFF76C	; ObjPosLoad - routine counter
00000000 =FFFFF76E                  v_opl_screen:	equ $FFFFF76E	; ObjPosLoad - screen variable
00000000 =FFFFF770                  v_opl_data:	equ $FFFFF770	; ObjPosLoad - data buffer ($10 bytes)
00000000                            
00000000 =FFFFF780                  v_ssangle:	equ $FFFFF780	; Special Stage angle (2 bytes)
00000000 =FFFFF782                  v_ssrotate:	equ $FFFFF782	; Special Stage rotation speed (2 bytes)
00000000 =FFFFF790                  v_btnpushtime1:	equ $FFFFF790	; button push duration - in level (2 bytes)
00000000 =FFFFF792                  v_btnpushtime2:	equ $FFFFF792	; button push duration - in demo (2 bytes)
00000000 =FFFFF794                  v_palchgspeed:	equ $FFFFF794	; palette fade/transition speed (0 is fastest) (2 bytes)
00000000 =FFFFF796                  v_collindex:	equ $FFFFF796	; ROM address for collision index of current level (4 bytes)
00000000 =FFFFF79A                  v_palss_num:	equ $FFFFF79A	; palette cycling in Special Stage - reference number (2 bytes)
00000000 =FFFFF79C                  v_palss_time:	equ $FFFFF79C	; palette cycling in Special Stage - time until next change (2 bytes)
00000000                            
00000000 =FFFFF7A0                  v_camera_pan:	equ $FFFFF7A0    ; Extended Camera - how far the camera/view is panned to the left or right of Sonic (2 bytes)
00000000                            
00000000 =FFFFF7A4                  v_obj31ypos:	equ $FFFFF7A4	; y-position of object 31 (MZ stomper) (2 bytes)
00000000 =FFFFF7A7                  v_bossstatus:	equ $FFFFF7A7	; status of boss and prison capsule (01 = boss defeated; 02 = prison opened)
00000000 =FFFFF7A8                  v_trackpos:	equ $FFFFF7A8	; position tracking reference number (2 bytes)
00000000 =FFFFF7A9                  v_trackbyte:	equ $FFFFF7A9	; low byte for position tracking
00000000 =FFFFF7AA                  f_lockscreen:	equ $FFFFF7AA	; flag set to lock screen during bosses
00000000 =FFFFF7AC                  v_256loop1:	equ $FFFFF7AC	; 256x256 level tile which contains a loop (GHZ/SLZ)
00000000 =FFFFF7AD                  v_256loop2:	equ $FFFFF7AD	; 256x256 level tile which contains a loop (GHZ/SLZ)
00000000 =FFFFF7AE                  v_256roll1:	equ $FFFFF7AE	; 256x256 level tile which contains a roll tunnel (GHZ)
00000000 =FFFFF7AF                  v_256roll2:	equ $FFFFF7AF	; 256x256 level tile which contains a roll tunnel (GHZ)
00000000 =FFFFF7B0                  v_lani0_frame:	equ $FFFFF7B0	; level graphics animation 0 - current frame
00000000 =FFFFF7B1                  v_lani0_time:	equ $FFFFF7B1	; level graphics animation 0 - time until next frame
00000000 =FFFFF7B2                  v_lani1_frame:	equ $FFFFF7B2	; level graphics animation 1 - current frame
00000000 =FFFFF7B3                  v_lani1_time:	equ $FFFFF7B3	; level graphics animation 1 - time until next frame
00000000 =FFFFF7B4                  v_lani2_frame:	equ $FFFFF7B4	; level graphics animation 2 - current frame
00000000 =FFFFF7B5                  v_lani2_time:	equ $FFFFF7B5	; level graphics animation 2 - time until next frame
00000000 =FFFFF7B6                  v_lani3_frame:	equ $FFFFF7B6	; level graphics animation 3 - current frame
00000000 =FFFFF7B7                  v_lani3_time:	equ $FFFFF7B7	; level graphics animation 3 - time until next frame
00000000 =FFFFF7B8                  v_lani4_frame:	equ $FFFFF7B8	; level graphics animation 4 - current frame
00000000 =FFFFF7B9                  v_lani4_time:	equ $FFFFF7B9	; level graphics animation 4 - time until next frame
00000000 =FFFFF7BA                  v_lani5_frame:	equ $FFFFF7BA	; level graphics animation 5 - current frame
00000000 =FFFFF7BB                  v_lani5_time:	equ $FFFFF7BB	; level graphics animation 5 - time until next frame
00000000 =FFFFF7BE                  v_gfxbigring:	equ $FFFFF7BE	; settings for giant ring graphics loading (2 bytes)
00000000 =FFFFF7C0                  f_conveyrev:	equ $FFFFF7C0	; flag set to reverse conveyor belts in LZ/SBZ
00000000 =FFFFF7C1                  v_obj63:		equ $FFFFF7C1	; object 63 (LZ/SBZ platforms) variables (6 bytes)
00000000 =FFFFF7C7                  f_wtunnelmode:	equ $FFFFF7C7	; LZ water tunnel mode
00000000 =FFFFF7C8                  f_lockmulti:	equ $FFFFF7C8	; flag set to lock controls, lock Sonic's position & animation
00000000 =FFFFF7C9                  f_wtunnelallow:	equ $FFFFF7C9	; LZ water tunnels (00 = enabled; 01 = disabled)
00000000 =FFFFF7CA                  f_jumponly:	equ $FFFFF7CA	; flag set to lock controls apart from jumping
00000000 =FFFFF7CB                  v_obj6B:		equ $FFFFF7CB	; object 6B (SBZ stomper) variable
00000000 =FFFFF7CC                  f_lockctrl:	equ $FFFFF7CC	; flag set to lock controls during ending sequence
00000000 =FFFFF7CD                  f_bigring:	equ $FFFFF7CD	; flag set when Sonic collects the giant ring
00000000 =FFFFF7D0                  v_itembonus:	equ $FFFFF7D0	; item bonus from broken enemies, blocks etc. (2 bytes)
00000000 =FFFFF7D2                  v_timebonus:	equ $FFFFF7D2	; time bonus at the end of an act (2 bytes)
00000000 =FFFFF7D4                  v_ringbonus:	equ $FFFFF7D4	; ring bonus at the end of an act (2 bytes)
00000000 =FFFFF7D6                  f_endactbonus:	equ $FFFFF7D6	; time/ring bonus update flag at the end of an act
00000000 =FFFFF7D7                  v_sonicend:	equ $FFFFF7D7	; routine counter for Sonic in the ending sequence
00000000 =FFFFF7D8                  v_lz_deform:	equ	$FFFFF7D8	; LZ deformtaion offset, in units of $80 (2 bytes)
00000000 =FFFFF7E0                  f_switch:	equ $FFFFF7E0	; flags set when Sonic stands on a switch ($10 bytes)
00000000 =FFFFF7F0                  v_scroll_block_1_size:	equ $FFFFF7F0	; (2 bytes)
00000000 =FFFFF7F2                  v_scroll_block_2_size:	equ $FFFFF7F2	; unused (2 bytes)
00000000 =FFFFF7F4                  v_scroll_block_3_size:	equ $FFFFF7F4	; unused (2 bytes)
00000000 =FFFFF7F6                  v_scroll_block_4_size:	equ $FFFFF7F6	; unused (2 bytes)
00000000                            
00000000 =FFFFF800                  v_spritetablebuffer:	equ $FFFFF800 ; sprite table ($280 bytes, last $80 bytes are overwritten by v_pal_water_dup)
00000000 =FFFFFA00                  v_pal_water_dup:	equ $FFFFFA00 ; duplicate underwater palette, used for transitions ($80 bytes)
00000000 =FFFFFA80                  v_pal_water:	equ $FFFFFA80	; main underwater palette ($80 bytes)
00000000 =FFFFFB00                  v_pal_dry:	equ $FFFFFB00	; main palette ($80 bytes)
00000000 =FFFFFB80                  v_pal_dry_dup:	equ $FFFFFB80	; duplicate palette, used for transitions ($80 bytes)
00000000 =FFFFFC00                  v_objstate:	equ $FFFFFC00	; object state list ($200 bytes)
00000000                            
00000000                            
00000000 =FFFFFE00                  v_systemstack:	equ $FFFFFE00
00000000 =FFFFFE02                  f_restart:	equ $FFFFFE02	; restart level flag (2 bytes)
00000000 =FFFFFE04                  v_framecount:	equ $FFFFFE04	; frame counter (adds 1 every frame) (2 bytes)
00000000 =FFFFFE05                  v_framebyte:	equ v_framecount+1; low byte for frame counter
00000000 =FFFFFE06                  v_debugitem:	equ $FFFFFE06	; debug item currently selected (NOT the object number of the item)
00000000 =FFFFFE08                  v_debuguse:	equ $FFFFFE08	; debug mode use & routine counter (when Sonic is a ring/item) (2 bytes)
00000000 =FFFFFE0A                  v_debugxspeed:	equ $FFFFFE0A	; debug mode - horizontal speed
00000000 =FFFFFE0B                  v_debugyspeed:	equ $FFFFFE0B	; debug mode - vertical speed
00000000 =FFFFFE0C                  v_vbla_count:	equ $FFFFFE0C	; vertical interrupt counter (adds 1 every VBlank) (4 bytes)
00000000 =FFFFFE0E                  v_vbla_word:	equ v_vbla_count+2 ; low word for vertical interrupt counter (2 bytes)
00000000 =FFFFFE0F                  v_vbla_byte:	equ v_vbla_word+1	; low byte for vertical interrupt counter
00000000 =FFFFFE10                  v_zone:		equ $FFFFFE10	; current zone number
00000000 =FFFFFE11                  v_act:		equ $FFFFFE11	; current act number
00000000 =FFFFFE12                  v_lives:		equ $FFFFFE12	; number of lives
00000000 =FFFFFE14                  v_air:		equ $FFFFFE14	; air remaining while underwater (2 bytes)
00000000 =FFFFFE15                  v_airbyte:	equ v_air+1	; low byte for air
00000000 =FFFFFE16                  v_lastspecial:	equ $FFFFFE16	; last special stage number
00000000 =FFFFFE18                  v_continues:	equ $FFFFFE18	; number of continues
00000000 =FFFFFE1A                  f_timeover:	equ $FFFFFE1A	; time over flag
00000000 =FFFFFE1B                  v_lifecount:	equ $FFFFFE1B	; lives counter value (for actual number, see "v_lives")
00000000 =FFFFFE1C                  f_lifecount:	equ $FFFFFE1C	; lives counter update flag
00000000 =FFFFFE1D                  f_ringcount:	equ $FFFFFE1D	; ring counter update flag
00000000 =FFFFFE1E                  f_timecount:	equ $FFFFFE1E	; time counter update flag
00000000 =FFFFFE1F                  f_scorecount:	equ $FFFFFE1F	; score counter update flag
00000000 =FFFFFE20                  v_rings:		equ $FFFFFE20	; rings (2 bytes)
00000000 =FFFFFE21                  v_ringbyte:	equ v_rings+1	; low byte for rings
00000000 =FFFFFE22                  v_time:		equ $FFFFFE22	; time (4 bytes)
00000000 =FFFFFE23                  v_timemin:	equ $FFFFFE23	; time - minutes
00000000 =FFFFFE24                  v_timesec:	equ $FFFFFE24	; time - seconds
00000000 =FFFFFE25                  v_timecent:	equ $FFFFFE25	; time - centiseconds
00000000 =FFFFFE26                  v_score:		equ $FFFFFE26	; score (4 bytes)
00000000 =FFFFFE2C                  v_shield:	equ $FFFFFE2C	; shield status (00 = no; 01 = yes)
00000000 =FFFFFE2D                  v_invinc:	equ $FFFFFE2D	; invinciblity status (00 = no; 01 = yes)
00000000 =FFFFFE2E                  v_shoes:		equ $FFFFFE2E	; speed shoes status (00 = no; 01 = yes)
00000000 =FFFFFE30                  v_lastlamp:	equ $FFFFFE30	; number of the last lamppost you hit
00000000 =FFFFFE32                  v_lamp_xpos:	equ v_lastlamp+2	; x-axis for Sonic to respawn at lamppost (2 bytes)
00000000 =FFFFFE34                  v_lamp_ypos:	equ v_lastlamp+4	; y-axis for Sonic to respawn at lamppost (2 bytes)
00000000 =FFFFFE36                  v_lamp_rings:	equ v_lastlamp+6	; rings stored at lamppost (2 bytes)
00000000 =FFFFFE38                  v_lamp_time:	equ v_lastlamp+8	; time stored at lamppost (2 bytes)
00000000 =FFFFFE3C                  v_lamp_dle:	equ v_lastlamp+$C	; dynamic level event routine counter at lamppost
00000000 =FFFFFE3E                  v_lamp_limitbtm:	equ v_lastlamp+$E	; level bottom boundary at lamppost (2 bytes)
00000000 =FFFFFE40                  v_lamp_scrx:	equ v_lastlamp+$10 ; x-axis screen at lamppost (2 bytes)
00000000 =FFFFFE42                  v_lamp_scry:	equ v_lastlamp+$12 ; y-axis screen at lamppost (2 bytes)
00000000                            
00000000 =FFFFFE50                  v_lamp_wtrpos:	equ v_lastlamp+$20 ; water position at lamppost (2 bytes)
00000000 =FFFFFE52                  v_lamp_wtrrout:	equ v_lastlamp+$22 ; water routine at lamppost
00000000 =FFFFFE53                  v_lamp_wtrstat:	equ v_lastlamp+$23 ; water state at lamppost
00000000 =FFFFFE54                  v_lamp_lives:	equ v_lastlamp+$24 ; lives counter at lamppost
00000000 =FFFFFE57                  v_emeralds:	equ $FFFFFE57	; number of chaos emeralds
00000000 =FFFFFE58                  v_emldlist:	equ $FFFFFE58	; which individual emeralds you have (00 = no; 01 = yes) (6 bytes)
00000000 =FFFFFE5E                  v_oscillate:	equ $FFFFFE5E	; values which oscillate - for swinging platforms, et al ($42 bytes)
00000000 =FFFFFEC0                  v_ani0_time:	equ $FFFFFEC0	; synchronised sprite animation 0 - time until next frame (used for synchronised animations)
00000000 =FFFFFEC1                  v_ani0_frame:	equ $FFFFFEC1	; synchronised sprite animation 0 - current frame
00000000 =FFFFFEC2                  v_ani1_time:	equ $FFFFFEC2	; synchronised sprite animation 1 - time until next frame
00000000 =FFFFFEC3                  v_ani1_frame:	equ $FFFFFEC3	; synchronised sprite animation 1 - current frame
00000000 =FFFFFEC4                  v_ani2_time:	equ $FFFFFEC4	; synchronised sprite animation 2 - time until next frame
00000000 =FFFFFEC5                  v_ani2_frame:	equ $FFFFFEC5	; synchronised sprite animation 2 - current frame
00000000 =FFFFFEC6                  v_ani3_time:	equ $FFFFFEC6	; synchronised sprite animation 3 - time until next frame
00000000 =FFFFFEC7                  v_ani3_frame:	equ $FFFFFEC7	; synchronised sprite animation 3 - current frame
00000000 =FFFFFEC8                  v_ani3_buf:	equ $FFFFFEC8	; synchronised sprite animation 3 - info buffer (2 bytes)
00000000 =FFFFFEC9                  v_ani4_frame:	equ $FFFFFEC9	; synchronised sprite animation 4 - current frame
00000000 =FFFFFEF0                  v_limittopdb:	equ $FFFFFEF0	; level upper boundary, buffered for debug mode (2 bytes)
00000000 =FFFFFEF2                  v_limitbtmdb:	equ $FFFFFEF2	; level bottom boundary, buffered for debug mode (2 bytes)
00000000                            
00000000 =FFFFFF10                  v_screenposx_dup:	equ $FFFFFF10	; screen position x (duplicate) (2 bytes)
00000000 =FFFFFF14                  v_screenposy_dup:	equ $FFFFFF14	; screen position y (duplicate) (2 bytes)
00000000 =FFFFFF18                  v_bgscreenposx_dup:	equ $FFFFFF18	; background screen position x (duplicate) (2 bytes)
00000000 =FFFFFF1C                  v_bgscreenposy_dup:	equ $FFFFFF1C	; background screen position y (duplicate) (2 bytes)
00000000 =FFFFFF20                  v_bg2screenposx_dup:	equ $FFFFFF20	; 2 bytes
00000000 =FFFFFF24                  v_bg2screenposy_dup:	equ $FFFFFF24	; 2 bytes
00000000 =FFFFFF28                  v_bg3screenposx_dup:	equ $FFFFFF28	; 2 bytes
00000000 =FFFFFF2C                  v_bg3screenposy_dup:	equ $FFFFFF2C	; 2 bytes
00000000 =FFFFFF30                  v_fg_scroll_flags_dup:	equ $FFFFFF30
00000000 =FFFFFF32                  v_bg1_scroll_flags_dup:	equ $FFFFFF32
00000000 =FFFFFF34                  v_bg2_scroll_flags_dup:	equ $FFFFFF34
00000000 =FFFFFF36                  v_bg3_scroll_flags_dup:	equ $FFFFFF36
00000000                            
00000000 =FFFFFF80                  v_levseldelay:	equ $FFFFFF80	; level select - time until change when up/down is held (2 bytes)
00000000 =FFFFFF82                  v_levselitem:	equ $FFFFFF82	; level select - item selected (2 bytes)
00000000 =FFFFFF84                  v_levselsound:	equ $FFFFFF84	; level select - sound selected (2 bytes)
00000000 =FFFFFFC0                  v_scorecopy:	equ $FFFFFFC0	; score, duplicate (4 bytes)
00000000 =FFFFFFC0                  v_scorelife:	equ $FFFFFFC0	; points required for an extra life (4 bytes) (JP1 only)
00000000 =FFFFFFE0                  f_levselcheat:	equ $FFFFFFE0	; level select cheat flag
00000000 =FFFFFFE1                  f_slomocheat:	equ $FFFFFFE1	; slow motion & frame advance cheat flag
00000000 =FFFFFFE2                  f_debugcheat:	equ $FFFFFFE2	; debug mode cheat flag
00000000 =FFFFFFE3                  f_creditscheat:	equ $FFFFFFE3	; hidden credits & press start cheat flag
00000000 =FFFFFFE4                  v_title_dcount:	equ $FFFFFFE4	; number of times the d-pad is pressed on title screen (2 bytes)
00000000 =FFFFFFE6                  v_title_ccount:	equ $FFFFFFE6	; number of times C is pressed on title screen (2 bytes)
00000000                            
00000000 =FFFFFFF0                  f_demo:		equ $FFFFFFF0	; demo mode flag (0 = no; 1 = yes; $8001 = ending) (2 bytes)
00000000 =FFFFFFF2                  v_demonum:	equ $FFFFFFF2	; demo level number (not the same as the level number) (2 bytes)
00000000 =FFFFFFF4                  v_creditsnum:	equ $FFFFFFF4	; credits index number (2 bytes)
00000000 =FFFFFFF8                  v_megadrive:	equ $FFFFFFF8	; Megadrive machine type
00000000 =FFFFFFFA                  f_debugmode:	equ $FFFFFFFA	; debug mode flag (sometimes 2 bytes)
00000000 =FFFFFFFC                  v_init:		equ $FFFFFFFC	; 'init' text string (4 bytes)
00000000                            
00000000 =FFFFF5C3                  f_emeraldm:	equ $FFFFF5C3
00000000 =FFFFF5C4                  v_tagwater:    	equ $FFFFF5C4   ; TIS  
00000000 =FFFFFF92                  v_watersplashpos:    equ $FFFFFF92    ; TIS  
00000000 =00000039                  f_spindash	= $39
00000000 =FFFFF5C6                  v_Saved_music:	equ $FFFFF5C6
00000000 =FFFFF5C8                  v_rshield:	equ $FFFFF5C8	; shield status (00 = no; 01 = yes)
00000000 =FFFFF5C9                  v_gshield:	equ $FFFFF5C9	; shield status (00 = no; 01 = yes)
00000000 =FFFFF5CA                  v_spshield:	equ $FFFFF5CA	; shield status (00 = no; 01 = yes)
00000000                            
00000000 =FFFFFF8C                  Options_menu_box:	equ  $FFFFFF8C
00000000 =FFFFFF8C                  Options_menu_box:	equ  $FFFFFF8C
00000000                            	include	"Macros.asm"
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; reads ASCII strings and passes them to character generator
00000000                            ; ---------------------------------------------------------------------------
00000000                            asc        macro str
00000000                            ct =    0                            ; accumulates the total num of characters
00000000                                rept narg                        ; repeat for every argumeny
00000000                            lc =        0                        ; the position in the string
00000000                            
00000000                                dc.b strlen(\str)-1                    ; put the string length before the string itself
00000000                                rept strlen(\str)                    ; repeat for each character in string
00000000                            cc         substr lc+1,lc+1,\str                ; get a single character into cc
00000000                            arg =        '\cc'                        ; convert it to a character
00000000                                        char.b arg                ; put the character into the ROM (as byte)
00000000                            
00000000                            lc =        lc+1                        ; go to the next character
00000000                            ct =        ct+1                        ; increment character count
00000000                                    endr
00000000                                shift
00000000                                endr
00000000                                endm
00000000                            
00000000                            ; translates ASCII character to proper hex value
00000000                            char        macro c
00000000                                if c=' '
00000000                                    dc.\0 0                        ; example 1: single letters
00000000                            
00000000                                elseif c='*'
00000000                                    dc.\0 $1A                        ; example 1: single letters
00000000                            
00000000                                elseif (c>='0')&(c<='9')
00000000                                    dc.\0 \c-'0'+$20                ; example 2: range of letters ; gem note: '0' = $30. it's the ascii representation
00000000                            
00000000                                elseif (c>='A')&(c<='Z')
00000000                                    dc.\0 \c-$41+$1E                ; example 2: range of letters ; gem note: '0' = $30. it's the ascii representation
00000000                            
00000000                                else
00000000                                    dc.\0 \c                    ; example 3: any other character
00000000                                endif
00000000                                endm	
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Align and pad
00000000                            ; input: length to align to, value to use as padding (default is 0)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            align:	macro
00000000                            	if (narg=1)
00000000                            	dcb.b \1-(*%\1),0
00000000                            	else
00000000                            	dcb.b \1-(*%\1),\2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Set a VRAM address via the VDP control port.
00000000                            ; input: 16-bit VRAM address, control port (default is ($C00004).l)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            locVRAM:	macro loc,controlport
00000000                            		if (narg=1)
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),(vdp_control_port).l
00000000                            		else
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),controlport
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA copy data from 68K (ROM/RAM) to the VRAM
00000000                            ; input: source, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            writeVRAM:	macro
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.l	#$94000000+(((\2>>1)&$FF00)<<8)+$9300+((\2>>1)&$FF),(a5)
00000000                            		move.l	#$96000000+(((\1>>1)&$FF00)<<8)+$9500+((\1>>1)&$FF),(a5)
00000000                            		move.w	#$9700+((((\1>>1)&$FF0000)>>16)&$7F),(a5)
00000000                            		move.w	#$4000+(\3&$3FFF),(a5)
00000000                            		move.w	#$80+((\3&$C000)>>14),(v_vdp_buffer2).w
00000000                            		move.w	(v_vdp_buffer2).w,(a5)
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA copy data from 68K (ROM/RAM) to the CRAM
00000000                            ; input: source, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            writeCRAM:	macro
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.l	#$94000000+(((\2>>1)&$FF00)<<8)+$9300+((\2>>1)&$FF),(a5)
00000000                            		move.l	#$96000000+(((\1>>1)&$FF00)<<8)+$9500+((\1>>1)&$FF),(a5)
00000000                            		move.w	#$9700+((((\1>>1)&$FF0000)>>16)&$7F),(a5)
00000000                            		move.w	#$C000+(\3&$3FFF),(a5)
00000000                            		move.w	#$80+((\3&$C000)>>14),(v_vdp_buffer2).w
00000000                            		move.w	(v_vdp_buffer2).w,(a5)
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA fill VRAM with a value
00000000                            ; input: value, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            fillVRAM:	macro value,length,loc
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.w	#$8F01,(a5)
00000000                            		move.l	#$94000000+((length&$FF00)<<8)+$9300+(length&$FF),(a5)
00000000                            		move.w	#$9780,(a5)
00000000                            		move.l	#$40000080+((loc&$3FFF)<<16)+((loc&$C000)>>14),(a5)
00000000                            		move.w	#value,(vdp_data_port).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Copy a tilemap from 68K (ROM/RAM) to the VRAM without using DMA
00000000                            ; input: source, destination, width [cells], height [cells]
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            copyTilemap:	macro source,loc,width,height
00000000                            		lea	(source).l,a1
00000000                            		move.l	#$40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14),d0
00000000                            		moveq	#width,d1
00000000                            		moveq	#height,d2
00000000                            		jsr	TilemapToVRAM
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; stop the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            stopZ80:	macro
00000000                            		move.w	#$100,(z80_bus_request).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; wait for Z80 to stop
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            waitZ80:	macro
00000000                            	@wait:	btst	#0,(z80_bus_request).l
00000000                            		bne.s	@wait
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; reset the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            resetZ80:	macro
00000000                            		move.w	#$100,(z80_reset).l
00000000                            		endm
00000000                            
00000000                            resetZ80a:	macro
00000000                            		move.w	#0,(z80_reset).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; start the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            startZ80:	macro
00000000                            		move.w	#0,(z80_bus_request).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; disable interrupts
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            disable_ints:	macro
00000000                            		move	#$2700,sr
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; enable interrupts
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            enable_ints:	macro
00000000                            		move	#$2300,sr
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; long conditional jumps
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            jhi:		macro loc
00000000                            		bls.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jcc:		macro loc
00000000                            		bcs.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jhs:		macro loc
00000000                            		jcc	loc
00000000                            		endm
00000000                            
00000000                            jls:		macro loc
00000000                            		bhi.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jcs:		macro loc
00000000                            		bcc.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jlo:		macro loc
00000000                            		jcs	loc
00000000                            		endm
00000000                            
00000000                            jeq:		macro loc
00000000                            		bne.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jne:		macro loc
00000000                            		beq.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jgt:		macro loc
00000000                            		ble.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jge:		macro loc
00000000                            		blt.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jle:		macro loc
00000000                            		bgt.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jlt:		macro loc
00000000                            		bge.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jpl:		macro loc
00000000                            		bmi.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jmi:		macro loc
00000000                            		bpl.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; check if object moves out of range
00000000                            ; input: location to jump to if out of range, x-axis pos (obX(a0) by default)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            out_of_range:	macro exit,pos
00000000                            		if (narg=2)
00000000                            		move.w	pos,d0		; get object position (if specified as not obX)
00000000                            		else
00000000                            		move.w	obX(a0),d0	; get object position
00000000                            		endc
00000000                            		andi.w	#$FF80,d0	; round down to nearest $80
00000000                            		move.w	(v_screenposx).w,d1 ; get screen position
00000000                            		subi.w	#128,d1
00000000                            		andi.w	#$FF80,d1
00000000                            		sub.w	d1,d0		; approx distance between object and screen
00000000                            		cmpi.w	#128+320+192,d0
00000000                            		bhi.\0	exit
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; play a sound effect or music
00000000                            ; input: track, terminate routine, branch or jump, move operand size
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            music:		macro track,terminate,branch,byte
00000000                            		  if OptimiseSound=1
00000000                            			move.b	#track,(v_snddriver_ram+v_playsnd1).l
00000000                            		    if terminate=1
00000000                            			rts
00000000                            		    endc
00000000                            		  else
00000000                            	 	    if byte=1
00000000                            			move.b	#track,d0
00000000                            		    else
00000000                            			move.w	#track,d0
00000000                            		    endc
00000000                            		    if branch=1
00000000                            		      if terminate=0
00000000                            			bsr.w	PlaySound
00000000                            		      else
00000000                            			bra.w	PlaySound
00000000                            		      endc
00000000                            		    else
00000000                            		      if terminate=0
00000000                            			jsr	(PlaySound).l
00000000                            		      else
00000000                            			jmp	(PlaySound).l
00000000                            		      endc
00000000                            		    endc
00000000                            		  endc
00000000                            		endm
00000000                            
00000000                            sfx:		macro track,terminate,branch,byte
00000000                            		  if OptimiseSound=1
00000000                            			move.b	#track,(v_snddriver_ram+v_playsnd2).l
00000000                            		    if terminate=1
00000000                            			rts
00000000                            		    endc
00000000                            		  else
00000000                            	 	    if byte=1
00000000                            			move.b	#track,d0
00000000                            		    else
00000000                            			move.w	#track,d0
00000000                            		    endc
00000000                            		    if branch=1
00000000                            		      if terminate=0
00000000                            			bsr.w	PlaySound_Special
00000000                            		      else
00000000                            			bra.w	PlaySound_Special
00000000                            		      endc
00000000                            		    else
00000000                            		      if terminate=0
00000000                            			jsr	(PlaySound_Special).l
00000000                            		      else
00000000                            			jmp	(PlaySound_Special).l
00000000                            		      endc
00000000                            		    endc
00000000                            		  endc
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; bankswitch between SRAM and ROM
00000000                            ; (remember to enable SRAM in the header first!)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            gotoSRAM:	macro
00000000                            		move.b  #1,($A130F1).l
00000000                            		endm
00000000                            
00000000                            gotoROM:	macro
00000000                            		move.b  #0,($A130F1).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; compare the size of an index with ZoneCount constant
00000000                            ; (should be used immediately after the index)
00000000                            ; input: index address, element size
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            zonewarning:	macro loc,elementsize
00000000                            	@end:
00000000                            		if (@end-loc)-(ZoneCount*elementsize)<>0
00000000                            		inform 1,"Size of \loc ($%h) does not match ZoneCount ($\#ZoneCount).",(@end-loc)/elementsize
00000000                            		endc
00000000                            		endm
00000000                            		endm
00000000                            
00000000 =00000000                  EnableSRAM:	equ 0	; change to 1 to enable SRAM
00000000 =00000001                  BackupSRAM:	equ 1
00000000 =00000003                  AddressSRAM:	equ 3	; 0 = odd+even; 2 = even only; 3 = odd only
00000000                            
00000000                            ; Change to 0 to build the original version of the game, dubbed REV00
00000000                            ; Change to 1 to build the later vesion, dubbed REV01, which includes various bugfixes and enhancements
00000000                            ; Change to 2 to build the version from Sonic Mega Collection, dubbed REVXB, which fixes the infamous "spike bug"
00000000 =00000002                  Revision:	equ 2
00000000                            
00000000 =00000006                  ZoneCount:	equ 6	; discrete zones are: GHZ, MZ, SYZ, LZ, SLZ, and SBZ
00000000                            
00000000 =00000000                  OptimiseSound:	equ 0	; change to 1 to optimise sound queuing
00000000                            
00000000                            ; ===========================================================================
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00                  Vectors:	dc.l v_systemstack&$FFFFFF	; Initial stack pointer value
00000004 0000 0000                  		dc.l EntryPoint			; Start of program
00000008 0000 0000                  		dc.l BusError			; Bus error
0000000C 0000 0000                  		dc.l AddressError		; Address error (4)
00000010 0000 0000                  		dc.l IllegalInstr		; Illegal instruction
00000014 0000 0000                  		dc.l ZeroDivide			; Division by zero
00000018 0000 0000                  		dc.l ChkInstr			; CHK exception
0000001C 0000 0000                  		dc.l TrapvInstr			; TRAPV exception (8)
00000020 0000 0000                  		dc.l PrivilegeViol		; Privilege violation
00000024 0000 0000                  		dc.l Trace				; TRACE exception
00000028 0000 0000                  		dc.l Line1010Emu		; Line-A emulator
0000002C 0000 0000                  		dc.l Line1111Emu		; Line-F emulator (12)
00000030 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000034 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000038 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
0000003C 0000 0000                  		dc.l ErrorExcept		; Unused (reserved) (16)
00000040 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000044 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000048 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
0000004C 0000 0000                  		dc.l ErrorExcept		; Unused (reserved) (20)
00000050 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000054 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000058 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
0000005C 0000 0000                  		dc.l ErrorExcept		; Unused (reserved) (24)
00000060 0000 0000                  		dc.l ErrorExcept		; Spurious exception
00000064 0000 0000                  		dc.l ErrorTrap			; IRQ level 1
00000068 0000 0000                  		dc.l ErrorTrap			; IRQ level 2
0000006C 0000 0000                  		dc.l ErrorTrap			; IRQ level 3 (28)
00000070 0000 0000                  		dc.l HBlank				; IRQ level 4 (horizontal retrace interrupt)
00000074 0000 0000                  		dc.l ErrorTrap			; IRQ level 5
00000078 0000 0000                  		dc.l VBlank				; IRQ level 6 (vertical retrace interrupt)
0000007C 0000 0000                  		dc.l ErrorTrap			; IRQ level 7 (32)
00000080 0000 0000                  		dc.l ErrorTrap			; TRAP #00 exception
00000084 0000 0000                  		dc.l ErrorTrap			; TRAP #01 exception
00000088 0000 0000                  		dc.l ErrorTrap			; TRAP #02 exception
0000008C 0000 0000                  		dc.l ErrorTrap			; TRAP #03 exception (36)
00000090 0000 0000                  		dc.l ErrorTrap			; TRAP #04 exception
00000094 0000 0000                  		dc.l ErrorTrap			; TRAP #05 exception
00000098 0000 0000                  		dc.l ErrorTrap			; TRAP #06 exception
0000009C 0000 0000                  		dc.l ErrorTrap			; TRAP #07 exception (40)
000000A0 0000 0000                  		dc.l ErrorTrap			; TRAP #08 exception
000000A4 0000 0000                  		dc.l ErrorTrap			; TRAP #09 exception
000000A8 0000 0000                  		dc.l ErrorTrap			; TRAP #10 exception
000000AC 0000 0000                  		dc.l ErrorTrap			; TRAP #11 exception (44)
000000B0 0000 0000                  		dc.l ErrorTrap			; TRAP #12 exception
000000B4 0000 0000                  		dc.l ErrorTrap			; TRAP #13 exception
000000B8 0000 0000                  		dc.l ErrorTrap			; TRAP #14 exception
000000BC 0000 0000                  		dc.l ErrorTrap			; TRAP #15 exception (48)
000000C0 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000C4 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000C8 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000CC 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000D0 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000D4 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000D8 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000DC 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000E0                            loc_E0:
000000E0                            		; Relocated code from Spik_Hurt. REVXB was a nasty hex-edit.
000000E0 2628 000C                  		move.l	obY(a0),d3
000000E4 3028 0012                  		move.w	obVelY(a0),d0
000000E8 48C0                       		ext.l	d0
000000EA E180                       		asl.l	#8,d0
000000EC 4EF9 0000 0000             		jmp	(loc_D5A2).l
000000F2                            
000000F2 0000                       		dc.w ErrorTrap
000000F4 0000 0000                  		dc.l ErrorTrap
000000F8 0000 0000                  		dc.l ErrorTrap
000000FC 0000 0000                  		dc.l ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b "SEGA MEGA DRIVE " ; Hardware system ID (Console name)
00000110 2843 2953 4547 4120 3139+  Date:		dc.b "(C)SEGA 1991.APR" ; Copyright holder and release date (generally year)
00000120 534F 4E49 4320 5355 4E56+  Title_Local:	dc.b "SONIC SUNVENTURE                                " ; Domestic name
00000150 534F 4E49 4320 5355 4E56+  Title_Int:	dc.b "SONIC SUNVENTURE                                " ; International name
00000180 474D 2030 3030 3034 3034+  			dc.b "GM 00004049-01" ; Serial/version number (Rev non-0)
0000018E 0000                       Checksum: dc.w $0
00000190 4A20 2020 2020 2020 2020+  		dc.b "J               " ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; Start address of ROM
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; End address of ROM
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; Start address of RAM
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; End address of RAM
000001B0 2020 2020                  		dc.l $20202020
000001B4 2020 2020                  		dc.l $20202020		; SRAM start ($200001)
000001B8 2020 2020                  		dc.l $20202020		; SRAM end ($20xxxx)
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b "                                                    " ; Notes (unused, anything can be put in this space, but it has to be 52 bytes.)
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b "JUE             " ; Region (Country code)
00000200                            EndOfHeader:
00000200                            
00000200                            ; ===========================================================================
00000200                            ; Crash/Freeze the 68000. Unlike Sonic 2, Sonic 1 uses the 68000 for playing music, so it stops too
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	(z80_port_1_control).l ; test port A & B control registers
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	(z80_expansion_control).l ; test port C control register
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	SkipSetup ; Skip the VDP and Z80 setup code if port A, B or C is ok...?
00000216 4BFA 0000                  		lea	SetupValues(pc),a5	; Load setup values array address.
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version (from $A10001)
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity	; If the console has no TMSS, skip the security stuff.
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1) ; move "SEGA" to TMSS register ($A14000)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0	; clear write-pending flag in VDP to prevent issues if the 68k has been reset in the middle of writing a command long word to the VDP.
00000236 7000                       		moveq	#0,d0	; clear d0
00000238 2C40                       		movea.l	d0,a6	; clear a6
0000023A 4E66                       		move.l	a6,usp	; set usp to $0
0000023C                            
0000023C 7217                       		moveq	#$17,d1
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248                            		
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the VRAM
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254                            
00000254 7425                       		moveq	#$25,d2
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C                            		
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)	; clear 4 bytes of RAM
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; repeat until the entire RAM is clear
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment mode
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C                            
0000026C 761F                       		moveq	#$1F,d3	; set repeat times
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)	; clear 2 palettes
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; repeat until the entire CRAM is clear
00000274 289D                       		move.l	(a5)+,(a4)	; set VDP to VSRAM write
00000276                            
00000276 7813                       		moveq	#$13,d4
00000278                            ClrVSRAMLoop:
00000278 2680                       		move.l	d0,(a3)	; clear 4 bytes of VSRAM.
0000027A 51CC FFFC                  		dbf	d4,ClrVSRAMLoop	; repeat until the entire VSRAM is clear
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop	; repeat for other channels
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear all registers
0000028E 46FC 2700                  		disable_ints
00000292                            
00000292                            SkipSetup:
00000292 6000                       		bra.s	GameProgram	; begin game
00000294                            
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; VDP register start number
00000296 3FFF                       		dc.w $3FFF		; size of RAM/4
00000298 0100                       		dc.w $100		; VDP register diff
0000029A                            
0000029A 00A0 0000                  		dc.l z80_ram		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l z80_bus_request	; Z80 bus request
000002A2 00A1 1200                  		dc.l z80_reset		; Z80 reset
000002A6 00C0 0000                  		dc.l vdp_data_port	; VDP data
000002AA 00C0 0004                  		dc.l vdp_control_port	; VDP control
000002AE                            
000002AE 04                         		dc.b 4			; VDP $80 - 8-colour mode
000002AF 14                         		dc.b $14		; VDP $81 - Megadrive mode, DMA enable
000002B0 30                         		dc.b ($C000>>10)	; VDP $82 - foreground nametable address
000002B1 3C                         		dc.b ($F000>>10)	; VDP $83 - window nametable address
000002B2 07                         		dc.b ($E000>>13)	; VDP $84 - background nametable address
000002B3 6C                         		dc.b ($D800>>9)		; VDP $85 - sprite table address
000002B4 00                         		dc.b 0			; VDP $86 - unused
000002B5 00                         		dc.b 0			; VDP $87 - background colour
000002B6 00                         		dc.b 0			; VDP $88 - unused
000002B7 00                         		dc.b 0			; VDP $89 - unused
000002B8 FF                         		dc.b 255		; VDP $8A - HBlank register
000002B9 00                         		dc.b 0			; VDP $8B - full screen scroll
000002BA 81                         		dc.b $81		; VDP $8C - 40 cell display
000002BB 37                         		dc.b ($DC00>>10)	; VDP $8D - hscroll table address
000002BC 00                         		dc.b 0			; VDP $8E - unused
000002BD 01                         		dc.b 1			; VDP $8F - VDP increment
000002BE 01                         		dc.b 1			; VDP $90 - 64 cell hscroll size
000002BF 00                         		dc.b 0			; VDP $91 - window h position
000002C0 00                         		dc.b 0			; VDP $92 - window v position
000002C1 FFFF                       		dc.w $FFFF		; VDP $93/94 - DMA length
000002C3 0000                       		dc.w 0			; VDP $95/96 - DMA source
000002C5 80                         		dc.b $80		; VDP $97 - DMA fill VRAM
000002C6 4000 0080                  		dc.l $40000080		; VRAM address 0
000002CA                            
000002CA AF                         		dc.b $AF		; xor	a
000002CB 01D9 1F                    		dc.b $01, $D9, $1F	; ld	bc,1fd9h
000002CE 1127 00                    		dc.b $11, $27, $00	; ld	de,0027h
000002D1 2126 00                    		dc.b $21, $26, $00	; ld	hl,0026h
000002D4 F9                         		dc.b $F9		; ld	sp,hl
000002D5 77                         		dc.b $77		; ld	(hl),a
000002D6 EDB0                       		dc.b $ED, $B0		; ldir
000002D8 DDE1                       		dc.b $DD, $E1		; pop	ix
000002DA FDE1                       		dc.b $FD, $E1		; pop	iy
000002DC ED47                       		dc.b $ED, $47		; ld	i,a
000002DE ED4F                       		dc.b $ED, $4F		; ld	r,a
000002E0 D1                         		dc.b $D1		; pop	de
000002E1 E1                         		dc.b $E1		; pop	hl
000002E2 F1                         		dc.b $F1		; pop	af
000002E3 08                         		dc.b $08		; ex	af,af'
000002E4 D9                         		dc.b $D9		; exx
000002E5 C1                         		dc.b $C1		; pop	bc
000002E6 D1                         		dc.b $D1		; pop	de
000002E7 E1                         		dc.b $E1		; pop	hl
000002E8 F1                         		dc.b $F1		; pop	af
000002E9 F9                         		dc.b $F9		; ld	sp,hl
000002EA F3                         		dc.b $F3		; di
000002EB ED56                       		dc.b $ED, $56		; im1
000002ED 36E9                       		dc.b $36, $E9		; ld	(hl),e9h
000002EF E9                         		dc.b $E9		; jp	(hl)
000002F0                            
000002F0 8104                       		dc.w $8104		; VDP display mode
000002F2 8F02                       		dc.w $8F02		; VDP increment
000002F4 C000 0000                  		dc.l $C0000000		; CRAM write mode
000002F8 4000 0010                  		dc.l $40000010		; VSRAM address 0
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	(vdp_control_port).l
00000306 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000030E 6700                       		beq.s	CheckSumCheck
00000310 0CB8 696E 6974 FFFC        		cmpi.l	#'init',(v_init).w ; has checksum routine already run?
00000318 6700 0000                  		beq.w	GameInit	; if yes, branch
0000031C                            
0000031C                            CheckSumCheck:
0000031C 207C 0000 0200             		movea.l	#EndOfHeader,a0	; start	checking bytes after the header	($200)
00000322 227C 0000 01A4             		movea.l	#RomEndLoc,a1	; stop at end of ROM
00000328 2011                       		move.l	(a1),d0
0000032A 7200                       		moveq	#0,d1
0000032C                            
0000032C                            	@loop:
0000032C D258                       		add.w	(a0)+,d1
0000032E B088                       		cmp.l	a0,d0
00000330 64FA                       		bhs.s	@loop
00000332 227C 0000 018E             		movea.l	#Checksum,a1	; read the checksum
00000338 B251                       		cmp.w	(a1),d1		; compare checksum in header to ROM
0000033A 6600 0000                  		bne.w	CheckSumError	; if they don't match, branch
0000033E                            
0000033E                            	CheckSumOk:
0000033E 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000342 7E00                       		moveq	#0,d7
00000344 3C3C 007F                  		move.w	#$7F,d6
00000348                            	@clearRAM:
00000348 2CC7                       		move.l	d7,(a6)+
0000034A 51CE FFFC                  		dbf	d6,@clearRAM	; clear RAM ($FE00-$FFFF)
0000034E                            
0000034E 1039 00A1 0001             		move.b	(z80_version).l,d0
00000354 0200 00C0                  		andi.b	#$C0,d0
00000358 11C0 FFF8                  		move.b	d0,(v_megadrive).w ; get region setting
0000035C 21FC 696E 6974 FFFC        		move.l	#'init',(v_init).w ; set flag so checksum won't run again
00000364                            
00000364                            GameInit:
00000364 4DF9 00FF 0000             		lea	($FF0000).l,a6
0000036A 7E00                       		moveq	#0,d7
0000036C 3C3C 3F7F                  		move.w	#$3F7F,d6
00000370                            	@clearRAM:
00000370 2CC7                       		move.l	d7,(a6)+
00000372 51CE FFFC                  		dbf	d6,@clearRAM	; clear RAM ($0000-$FDFF)
00000376 4EB9 0000 0000                     jsr	(InitDMAQueue).l	
0000037C 6100 0000                  		bsr.w	VDPSetupGame
00000380 6100 0000                  		bsr.w	SoundDriverLoad
00000384 6100 0000                  		bsr.w	JoypadInit
00000388 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; set Game Mode to Sega Screen
0000038E                            
0000038E                            MainGameLoop:
0000038E 1038 F600                  		move.b	(v_gamemode).w,d0 ; load Game Mode
00000392 0240 001C                  		andi.w	#$1C,d0	; limit Game Mode value to $1C max (change to a maximum of 7C to add more game modes)
00000396 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
0000039A 60F2                       		bra.s	MainGameLoop	; loop indefinitely
0000039C                            ; ===========================================================================
0000039C                            ; ---------------------------------------------------------------------------
0000039C                            ; Main game mode array
0000039C                            ; ---------------------------------------------------------------------------
0000039C                            
0000039C                            GameModeArray:
0000039C                            
0000039C 6000 0000                  ptr_GM_Sega:	bra.w	GM_Sega		; Sega Screen ($00)
000003A0                            
000003A0 6000 0000                  ptr_GM_Title:	bra.w	GM_Title	; Title	Screen ($04)
000003A4                            
000003A4 6000 0000                  ptr_GM_Demo:	bra.w	GM_Level	; Demo Mode ($08)
000003A8                            
000003A8 6000 0000                  ptr_GM_Level:	bra.w	GM_Level	; Normal Level ($0C)
000003AC                            
000003AC 6000 0000                  ptr_GM_Special:	bra.w	GM_Special	; Special Stage	($10)
000003B0                            
000003B0 6000 0000                  ptr_GM_Cont:	bra.w	GM_Continue	; Continue Screen ($14)
000003B4                            
000003B4 6000 0000                  ptr_GM_Ending:	bra.w	GM_Ending	; End of game sequence ($18)
000003B8                            
000003B8 6000 0000                  ptr_GM_Credits:	bra.w	GM_Credits	; Credits ($1C)
000003BC                            
000003BC 4E75                       		rts	
000003BE                            ; ===========================================================================
000003BE                            
000003BE                            CheckSumError:
000003BE 6100 0000                  		bsr.w	VDPSetupGame
000003C2 23FC C000 0000 00C0 0004   		move.l	#$C0000000,(vdp_control_port).l ; set VDP to CRAM write
000003CC 7E3F                       		moveq	#$3F,d7
000003CE                            
000003CE                            	@fillred:
000003CE 33FC 000E 00C0 0000        		move.w	#cRed,(vdp_data_port).l ; fill palette with red
000003D6 51CF FFF6                  		dbf	d7,@fillred	; repeat $3F more times
000003DA                            
000003DA                            	@endlessloop:
000003DA 60FE                       		bra.s	@endlessloop
000003DC                            ; ===========================================================================
000003DC                            
000003DC                            
000003DC                            ; ===========================================================================
000003DC                            
000003DC                            loc_43A:
000003DC 46FC 2700                  		disable_ints
000003E0 544F                       		addq.w	#2,sp
000003E2 21DF FC40                  		move.l	(sp)+,(v_spbuffer).w
000003E6 544F                       		addq.w	#2,sp
000003E8 48F8 FFFF FC00             		movem.l	d0-a7,(v_regbuffer).w
000003EE 6100 0000                  		bsr.w	ShowErrorMessage
000003F2 202F 0002                  		move.l	2(sp),d0
000003F6 6100 0000                  		bsr.w	ShowErrorValue
000003FA 2038 FC40                  		move.l	(v_spbuffer).w,d0
000003FE 6100 0000                  		bsr.w	ShowErrorValue
00000402 6000                       		bra.s	loc_478
00000404                            ; ===========================================================================
00000404                            
00000404                            loc_462:
00000404 46FC 2700                  		disable_ints
00000408 48F8 FFFF FC00             		movem.l	d0-a7,(v_regbuffer).w
0000040E 6100 0000                  		bsr.w	ShowErrorMessage
00000412 202F 0002                  		move.l	2(sp),d0
00000416 6100 0000                  		bsr.w	ShowErrorValue
0000041A                            
0000041A                            loc_478:
0000041A 6100 0000                  		bsr.w	ErrorWaitForC
0000041E 4CF8 FFFF FC00             		movem.l	(v_regbuffer).w,d0-a7
00000424 46FC 2300                  		enable_ints
00000428 4E73                       		rte	
0000042A                            
0000042A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000042A                            
0000042A                            
0000042A                            ShowErrorMessage:
0000042A 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0000043A 41F9 0000 0000             		lea	(Art_Text).l,a0
00000440 323C 027F                  		move.w	#$27F,d1
00000444                            	@loadgfx:
00000444 3C98                       		move.w	(a0)+,(a6)
00000446 51C9 FFFC                  		dbf	d1,@loadgfx
0000044A                            
0000044A 7000                       		moveq	#0,d0		; clear	d0
0000044C 1038 FC44                  		move.b	(v_errortype).w,d0 ; load error code
00000450 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
00000454 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
00000462 7212                       		moveq	#$12,d1		; number of characters (minus 1)
00000464                            
00000464                            	@showchars:
00000464 7000                       		moveq	#0,d0
00000466 1018                       		move.b	(a0)+,d0
00000468 0640 0790                  		addi.w	#$790,d0
0000046C 3C80                       		move.w	d0,(a6)
0000046E 51C9 FFF4                  		dbf	d1,@showchars	; repeat for number of characters
00000472 4E75                       		rts	
00000474                            ; End of function ShowErrorMessage
00000474                            
00000474                            ; ===========================================================================
00000474 0000 0000                  ErrorText:	dc.w @exception-ErrorText, @bus-ErrorText
00000478 0000 0000                  		dc.w @address-ErrorText, @illinstruct-ErrorText
0000047C 0000 0000                  		dc.w @zerodivide-ErrorText, @chkinstruct-ErrorText
00000480 0000 0000                  		dc.w @trapv-ErrorText, @privilege-ErrorText
00000484 0000 0000                  		dc.w @trace-ErrorText, @line1010-ErrorText
00000488 0000                       		dc.w @line1111-ErrorText
0000048A 4552 524F 5220 4558 4345+  @exception:	dc.b "ERROR EXCEPTION    "
0000049D 4255 5320 4552 524F 5220+  @bus:		dc.b "BUS ERROR          "
000004B0 4144 4452 4553 5320 4552+  @address:	dc.b "ADDRESS ERROR      "
000004C3 494C 4C45 4741 4C20 494E+  @illinstruct:	dc.b "ILLEGAL INSTRUCTION"
000004D6 4045 524F 2044 4956 4944+  @zerodivide:	dc.b "@ERO DIVIDE        "
000004E9 4348 4B20 494E 5354 5255+  @chkinstruct:	dc.b "CHK INSTRUCTION    "
000004FC 5452 4150 5620 494E 5354+  @trapv:		dc.b "TRAPV INSTRUCTION  "
0000050F 5052 4956 494C 4547 4520+  @privilege:	dc.b "PRIVILEGE VIOLATION"
00000522 5452 4143 4520 2020 2020+  @trace:		dc.b "TRACE              "
00000535 4C49 4E45 2031 3031 3020+  @line1010:	dc.b "LINE 1010 EMULATOR "
00000548 4C49 4E45 2031 3131 3120+  @line1111:	dc.b "LINE 1111 EMULATOR "
0000055C 00                         		even
0000055C                            
0000055C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000055C                            
0000055C                            
0000055C                            ShowErrorValue:
0000055C 3CBC 07CA                  		move.w	#$7CA,(a6)	; display "$" symbol
00000560 7407                       		moveq	#7,d2
00000562                            
00000562                            	@loop:
00000562 E998                       		rol.l	#4,d0
00000564 6100                       		bsr.s	@shownumber	; display 8 numbers
00000566 51CA FFFA                  		dbf	d2,@loop
0000056A 4E75                       		rts	
0000056C                            ; End of function ShowErrorValue
0000056C                            
0000056C                            
0000056C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000056C                            
0000056C                            
0000056C                            @shownumber:
0000056C 3200                       		move.w	d0,d1
0000056E 0241 000F                  		andi.w	#$F,d1
00000572 0C41 000A                  		cmpi.w	#$A,d1
00000576 6500                       		blo.s	@chars0to9
00000578 5E41                       		addq.w	#7,d1		; add 7 for characters A-F
0000057A                            
0000057A                            	@chars0to9:
0000057A 0641 07C0                  		addi.w	#$7C0,d1
0000057E 3C81                       		move.w	d1,(a6)
00000580 4E75                       		rts	
00000582                            ; End of function sub_5CA
00000582                            
00000582                            
00000582                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000582                            
00000582                            
00000582                            ErrorWaitForC:
00000582 6100 0000                  		bsr.w	ReadJoypads
00000586 0C38 0020 F605             		cmpi.b	#btnC,(v_jpadpress1).w ; is button C pressed?
0000058C 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
00000590 4E75                       		rts	
00000592                            ; End of function ErrorWaitForC
00000592                            
00000592                            ; ===========================================================================
00000592                            
00000592                            Art_Text:	incbin	"artunc\menutext.bin" ; text used in level select and debug mode
00000AB2                            		even
00000AB2                            
00000AB2                            ; ===========================================================================
00000AB2                            ; ---------------------------------------------------------------------------
00000AB2                            ; Vertical interrupt
00000AB2                            ; ---------------------------------------------------------------------------
00000AB2                            
00000AB2                            VBlank:
00000AB2 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000AB6 4A38 F62A                  		tst.b	(v_vbla_routine).w
00000ABA 6700                       		beq.s	VBla_00
00000ABC 3039 00C0 0004             		move.w	(vdp_control_port).l,d0
00000AC2 23FC 4000 0010 00C0 0004   		move.l	#$40000010,(vdp_control_port).l
00000ACC 23F8 F616 00C0 0000        		move.l	(v_scrposy_dup).w,(vdp_data_port).l ; send screen y-axis pos. to VSRAM
00000AD4 0838 0006 FFF8             		btst	#6,(v_megadrive).w ; is Megadrive PAL?
00000ADA 6700                       		beq.s	@notPAL		; if not, branch
00000ADC                            
00000ADC 303C 0700                  		move.w	#$700,d0
00000AE0                            	@waitPAL:
00000AE0 51C8 FFFE                  		dbf	d0,@waitPAL ; wait here in a loop doing nothing for a while...
00000AE4                            
00000AE4                            	@notPAL:
00000AE4 1038 F62A                  		move.b	(v_vbla_routine).w,d0
00000AE8 11FC 0000 F62A             		move.b	#0,(v_vbla_routine).w
00000AEE 31FC 0001 F644             		move.w	#1,(f_hbla_pal).w
00000AF4 0240 003E                  		andi.w	#$3E,d0
00000AF8 303B 0000                  		move.w	VBla_Index(pc,d0.w),d0
00000AFC 4EBB 0000                  		jsr	VBla_Index(pc,d0.w)
00000B00                            
00000B00                            VBla_Music:
00000B00 4EB9 0000 0000             		jsr		(UpdateMusic).l
00000B06                            
00000B06                            VBla_Exit:
00000B06 52B8 FE0C                  		addq.l	#1,(v_vbla_count).w
00000B0A 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000B0E 4E73                       		rte	
00000B10                            ; ===========================================================================
00000B10 0000 0000                  VBla_Index:	dc.w VBla_00-VBla_Index, VBla_02-VBla_Index
00000B14 0000 0000                  		dc.w VBla_04-VBla_Index, VBla_06-VBla_Index
00000B18 0000 0000                  		dc.w VBla_08-VBla_Index, VBla_0A-VBla_Index
00000B1C 0000 0000                  		dc.w VBla_0C-VBla_Index, VBla_0E-VBla_Index
00000B20 0000 0000                  		dc.w VBla_10-VBla_Index, VBla_12-VBla_Index
00000B24 0000 0000                  		dc.w VBla_14-VBla_Index, VBla_16-VBla_Index
00000B28 0000                       		dc.w VBla_0C-VBla_Index
00000B2A                            ; ===========================================================================
00000B2A                            
00000B2A                            VBla_00:
00000B2A 0C38 0000 F600             		cmpi.b	#$80+id_Level,(v_gamemode).w
00000B30 6700                       		beq.s	@islevel
00000B32 0C38 0000 F600             		cmpi.b	#id_Level,(v_gamemode).w ; is game on a level?
00000B38 6600 FFC6                  		bne.w	VBla_Music	; if not, branch
00000B3C                            
00000B3C                            	@islevel:
00000B3C 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ ?
00000B42 6600 FFBC                  		bne.w	VBla_Music	; if not, branch
00000B46                            
00000B46 3039 00C0 0004             		move.w	(vdp_control_port).l,d0
00000B4C 0838 0006 FFF8             		btst	#6,(v_megadrive).w ; is Megadrive PAL?
00000B52 6700                       		beq.s	@notPAL		; if not, branch
00000B54                            
00000B54 303C 0700                  		move.w	#$700,d0
00000B58                            	@waitPAL:
00000B58 51C8 FFFE                  		dbf	d0,@waitPAL
00000B5C                            
00000B5C                            	@notPAL:
00000B5C 31FC 0001 F644             		move.w	#1,(f_hbla_pal).w ; set HBlank flag
00000B62 33FC 0100 00A1 1100        		stopZ80
00000B6A 0839 0000 00A1 1100 66F6   		waitZ80
00000B74 4A38 F64E                  		tst.b	(f_wtr_state).w	; is water above top of screen?
00000B78 6600                       		bne.s	@waterabove 	; if yes, branch
00000B7A                            
00000B7A 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000B9E 6000                       		bra.s	@waterbelow
00000BA0                            
00000BA0                            @waterabove:
00000BA0 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000BC4                            
00000BC4                            	@waterbelow:
00000BC4 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000BC8 33FC 0000 00A1 1100        		startZ80
00000BD0 6000 FF2E                  		bra.w	VBla_Music
00000BD4                            ; ===========================================================================
00000BD4                            
00000BD4                            VBla_02:
00000BD4 6100 0000                  		bsr.w	sub_106E
00000BD8                            
00000BD8                            VBla_14:
00000BD8 4A78 F614                  		tst.w	(v_demolength).w
00000BDC 6700 0000                  		beq.w	@end
00000BE0 5378 F614                  		subq.w	#1,(v_demolength).w
00000BE4                            
00000BE4                            	@end:
00000BE4 4E75                       		rts	
00000BE6                            ; ===========================================================================
00000BE6                            
00000BE6                            VBla_04:
00000BE6 6100 0000                  		bsr.w	sub_106E
00000BEA 6100 0000                  		bsr.w	LoadTilesAsYouMove_BGOnly
00000BEE 6100 0000                  		bsr.w	sub_1642
00000BF2 4A78 F614                  		tst.w	(v_demolength).w
00000BF6 6700 0000                  		beq.w	@end
00000BFA 5378 F614                  		subq.w	#1,(v_demolength).w
00000BFE                            
00000BFE                            	@end:
00000BFE 4E75                       		rts	
00000C00                            ; ===========================================================================
00000C00                            
00000C00                            VBla_06:
00000C00 6100 0000                  		bsr.w	sub_106E
00000C04 4E75                       		rts	
00000C06                            ; ===========================================================================
00000C06                            
00000C06                            VBla_10:
00000C06 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is game on special stage?
00000C0C 6700 0000                  		beq.w	VBla_0A		; if yes, branch
00000C10                            
00000C10                            VBla_08:
00000C10 33FC 0100 00A1 1100        		stopZ80
00000C18 0839 0000 00A1 1100 66F6   		waitZ80
00000C22 6100 0000                  		bsr.w	ReadJoypads
00000C26 4A38 F64E                  		tst.b	(f_wtr_state).w
00000C2A 6600                       		bne.s	@waterabove
00000C2C                            
00000C2C 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000C50 6000                       		bra.s	@waterbelow
00000C52                            
00000C52                            @waterabove:
00000C52 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000C76                            
00000C76                            	@waterbelow:
00000C76 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000C7A                            
00000C7A 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000C9E 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000CC2 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000CC8                            
00000CC8                            	@nochg:
00000CC8 33FC 0000 00A1 1100        		startZ80
00000CD0 4CF8 00FF F700             		movem.l	(v_screenposx).w,d0-d7
00000CD6 48F8 00FF FF10             		movem.l	d0-d7,(v_screenposx_dup).w
00000CDC 4CF8 0003 F754             		movem.l	(v_fg_scroll_flags).w,d0-d1
00000CE2 48F8 0003 FF30             		movem.l	d0-d1,(v_fg_scroll_flags_dup).w
00000CE8 0C38 0060 F625             		cmpi.b	#96,(v_hbla_line).w
00000CEE 6400                       		bhs.s	Demo_Time
00000CF0 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000CF6 588F                       		addq.l	#4,sp
00000CF8 6000 FE0C                  		bra.w	VBla_Exit
00000CFC                            
00000CFC                            ; ---------------------------------------------------------------------------
00000CFC                            ; Subroutine to	run a demo for an amount of time
00000CFC                            ; ---------------------------------------------------------------------------
00000CFC                            
00000CFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000CFC                            
00000CFC                            
00000CFC                            Demo_Time:
00000CFC 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000D00 4EB9 0000 0000             		jsr	(AnimateLevelGfx).l
00000D06 4EB9 0000 0000             		jsr	(HUD_Update).l
00000D0C 6100 0000                  		bsr.w	ProcessDPLC2
00000D10 4A78 F614                  		tst.w	(v_demolength).w ; is there time left on the demo?
00000D14 6700 0000                  		beq.w	@end		; if not, branch
00000D18 5378 F614                  		subq.w	#1,(v_demolength).w ; subtract 1 from time left
00000D1C                            
00000D1C                            	@end:
00000D1C 4E75                       		rts	
00000D1E                            ; End of function Demo_Time
00000D1E                            
00000D1E                            ; ===========================================================================
00000D1E                            
00000D1E                            VBla_0A:
00000D1E 33FC 0100 00A1 1100        		stopZ80
00000D26 0839 0000 00A1 1100 66F6   		waitZ80
00000D30 6100 0000                  		bsr.w	ReadJoypads
00000D34 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000D58 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000D7C 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000DA0 33FC 0000 00A1 1100        		startZ80
00000DA8 6100 0000                  		bsr.w	PalCycle_SS
00000DAC 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000DB2                            	@nochg:
00000DB2 4A78 F614                  		tst.w	(v_demolength).w	; is there time left on the demo?
00000DB6 6700 0000                  		beq.w	@end	; if not, return
00000DBA 5378 F614                  		subq.w	#1,(v_demolength).w	; subtract 1 from time left in demo
00000DBE                            
00000DBE                            	@end:
00000DBE 4E75                       		rts	
00000DC0                            ; ===========================================================================
00000DC0                            
00000DC0                            VBla_0C:
00000DC0 33FC 0100 00A1 1100        		stopZ80
00000DC8 0839 0000 00A1 1100 66F6   		waitZ80
00000DD2 6100 0000                  		bsr.w	ReadJoypads
00000DD6 4A38 F64E                  		tst.b	(f_wtr_state).w
00000DDA 6600                       		bne.s	@waterabove
00000DDC                            
00000DDC 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000E00 6000                       		bra.s	@waterbelow
00000E02                            
00000E02                            @waterabove:
00000E02 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000E26                            
00000E26                            	@waterbelow:
00000E26 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000E2A 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000E4E 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000E72 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000E78                            
00000E78                            	@nochg:
00000E78 33FC 0000 00A1 1100        		startZ80
00000E80 4CF8 00FF F700             		movem.l	(v_screenposx).w,d0-d7
00000E86 48F8 00FF FF10             		movem.l	d0-d7,(v_screenposx_dup).w
00000E8C 4CF8 0003 F754             		movem.l	(v_fg_scroll_flags).w,d0-d1
00000E92 48F8 0003 FF30             		movem.l	d0-d1,(v_fg_scroll_flags_dup).w
00000E98 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000E9C 4EB9 0000 0000             		jsr	(AnimateLevelGfx).l
00000EA2 4EB9 0000 0000             		jsr	(HUD_Update).l
00000EA8 6100 0000                  		bsr.w	sub_1642
00000EAC 4E75                       		rts	
00000EAE                            ; ===========================================================================
00000EAE                            
00000EAE                            VBla_0E:
00000EAE 6100 0000                  		bsr.w	sub_106E
00000EB2 5238 F628                  		addq.b	#1,($FFFFF628).w
00000EB6 11FC 000E F62A             		move.b	#$E,(v_vbla_routine).w
00000EBC 4E75                       		rts	
00000EBE                            ; ===========================================================================
00000EBE                            
00000EBE                            VBla_12:
00000EBE 6100 0000                  		bsr.w	sub_106E
00000EC2 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000EC6 6000 0000                  		bra.w	sub_1642
00000ECA                            ; ===========================================================================
00000ECA                            
00000ECA                            Vbla_16:
00000ECA 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000ECE 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000EF2 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000F16 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000F1C                            
00000F1C                            	@nochg:
00000F1C 4A78 F614                  		tst.w	(v_demolength).w
00000F20 6700 0000                  		beq.w	@end
00000F24 5378 F614                  		subq.w	#1,(v_demolength).w
00000F28                            
00000F28                            	@end:
00000F28 4E75                       		rts	
00000F2A                            
00000F2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000F2A                            
00000F2A                            
00000F2A                            sub_106E:
00000F2A 33FC 0100 00A1 1100        		stopZ80
00000F32 0839 0000 00A1 1100 66F6   		waitZ80
00000F3C 6100 0000                  		bsr.w	ReadJoypads
00000F40 4A38 F64E                  		tst.b	(f_wtr_state).w ; is water above top of screen?
00000F44 6600                       		bne.s	@waterabove	; if yes, branch
00000F46 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000F6A 6000                       		bra.s	@waterbelow
00000F6C                            
00000F6C                            	@waterabove:
00000F6C 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000F90                            
00000F90                            	@waterbelow:
00000F90 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000FB4 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000FD8 33FC 0000 00A1 1100        		startZ80
00000FE0 4E75                       		rts	
00000FE2                            ; End of function sub_106E
00000FE2                            
00000FE2                            ; ---------------------------------------------------------------------------
00000FE2                            ; Horizontal interrupt
00000FE2                            ; ---------------------------------------------------------------------------
00000FE2                            
00000FE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000FE2                            
00000FE2                            
00000FE2                            HBlank:
00000FE2 46FC 2700                  		disable_ints
00000FE6 4A78 F644                  		tst.w	(f_hbla_pal).w	; is palette set to change?
00000FEA 6700                       		beq.s	@nochg		; if not, branch
00000FEC 31FC 0000 F644             		move.w	#0,(f_hbla_pal).w
00000FF2 48E7 00C0                  		movem.l	a0-a1,-(sp)
00000FF6 43F9 00C0 0000             		lea	(vdp_data_port).l,a1
00000FFC 41F8 FA80                  		lea	(v_pal_water).w,a0 ; get palette from RAM
00001000 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
00001008 2298                       		move.l	(a0)+,(a1)	; move palette to CRAM
0000100A 2298                       		move.l	(a0)+,(a1)
0000100C 2298                       		move.l	(a0)+,(a1)
0000100E 2298                       		move.l	(a0)+,(a1)
00001010 2298                       		move.l	(a0)+,(a1)
00001012 2298                       		move.l	(a0)+,(a1)
00001014 2298                       		move.l	(a0)+,(a1)
00001016 2298                       		move.l	(a0)+,(a1)
00001018 2298                       		move.l	(a0)+,(a1)
0000101A 2298                       		move.l	(a0)+,(a1)
0000101C 2298                       		move.l	(a0)+,(a1)
0000101E 2298                       		move.l	(a0)+,(a1)
00001020 2298                       		move.l	(a0)+,(a1)
00001022 2298                       		move.l	(a0)+,(a1)
00001024 2298                       		move.l	(a0)+,(a1)
00001026 2298                       		move.l	(a0)+,(a1)
00001028 2298                       		move.l	(a0)+,(a1)
0000102A 2298                       		move.l	(a0)+,(a1)
0000102C 2298                       		move.l	(a0)+,(a1)
0000102E 2298                       		move.l	(a0)+,(a1)
00001030 2298                       		move.l	(a0)+,(a1)
00001032 2298                       		move.l	(a0)+,(a1)
00001034 2298                       		move.l	(a0)+,(a1)
00001036 2298                       		move.l	(a0)+,(a1)
00001038 2298                       		move.l	(a0)+,(a1)
0000103A 2298                       		move.l	(a0)+,(a1)
0000103C 2298                       		move.l	(a0)+,(a1)
0000103E 2298                       		move.l	(a0)+,(a1)
00001040 2298                       		move.l	(a0)+,(a1)
00001042 2298                       		move.l	(a0)+,(a1)
00001044 2298                       		move.l	(a0)+,(a1)
00001046 2298                       		move.l	(a0)+,(a1)
00001048 337C 8ADF 0004             		move.w	#$8A00+223,4(a1) ; reset HBlank register
0000104E 4CDF 0300                  		movem.l	(sp)+,a0-a1
00001052 4A38 F64F                  		tst.b	($FFFFF64F).w
00001056 6600                       		bne.s	loc_119E
00001058                            
00001058                            	@nochg:
00001058 4E73                       		rte	
0000105A                            ; ===========================================================================
0000105A                            
0000105A                            loc_119E:
0000105A 4238 F64F                  		clr.b	($FFFFF64F).w
0000105E 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00001062 6100 FC98                  		bsr.w	Demo_Time	
00001066 4EB9 0000 0000             		jsr	(UpdateMusic).l
0000106C 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00001070 4E73                       		rte	
00001072                            ; End of function HBlank
00001072                            
00001072                            ; ---------------------------------------------------------------------------
00001072                            ; Subroutine to	initialise joypads
00001072                            ; ---------------------------------------------------------------------------
00001072                            
00001072                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001072                            
00001072                            
00001072                            JoypadInit:
00001072 33FC 0100 00A1 1100        		stopZ80
0000107A 0839 0000 00A1 1100 66F6   		waitZ80
00001084 7040                       		moveq	#$40,d0
00001086 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
0000108C 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
00001092 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (expansion/extra)
00001098 33FC 0000 00A1 1100        		startZ80
000010A0 4E75                       		rts	
000010A2                            ; End of function JoypadInit
000010A2                            
000010A2                            ; ---------------------------------------------------------------------------
000010A2                            ; Subroutine to	read joypad input, and send it to the RAM
000010A2                            ; ---------------------------------------------------------------------------
000010A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000010A2                            
000010A2                            
000010A2                            ReadJoypads:
000010A2 41F8 F604                  		lea	(v_jpadhold1).w,a0 ; address where joypad states are written
000010A6 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
000010AC 6100                       		bsr.s	@read		; do the first joypad
000010AE 5449                       		addq.w	#2,a1		; do the second	joypad
000010B0                            
000010B0                            	@read:
000010B0 12BC 0000                  		move.b	#0,(a1)
000010B4 4E71                       		nop	
000010B6 4E71                       		nop	
000010B8 1011                       		move.b	(a1),d0
000010BA E508                       		lsl.b	#2,d0
000010BC 0200 00C0                  		andi.b	#$C0,d0
000010C0 12BC 0040                  		move.b	#$40,(a1)
000010C4 4E71                       		nop	
000010C6 4E71                       		nop	
000010C8 1211                       		move.b	(a1),d1
000010CA 0201 003F                  		andi.b	#$3F,d1
000010CE 8001                       		or.b	d1,d0
000010D0 4600                       		not.b	d0
000010D2 1210                       		move.b	(a0),d1
000010D4 B101                       		eor.b	d0,d1
000010D6 10C0                       		move.b	d0,(a0)+
000010D8 C200                       		and.b	d0,d1
000010DA 10C1                       		move.b	d1,(a0)+
000010DC 4E75                       		rts	
000010DE                            ; End of function ReadJoypads
000010DE                            
000010DE                            
000010DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000010DE                            
000010DE                            
000010DE                            VDPSetupGame:
000010DE 41F9 00C0 0004             		lea	(vdp_control_port).l,a0
000010E4 43F9 00C0 0000             		lea	(vdp_data_port).l,a1
000010EA 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
000010F0 7E12                       		moveq	#$12,d7
000010F2                            
000010F2                            	@setreg:
000010F2 309A                       		move.w	(a2)+,(a0)
000010F4 51CF FFFC                  		dbf	d7,@setreg	; set the VDP registers
000010F8                            
000010F8 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
000010FE 31C0 F60C                  		move.w	d0,(v_vdp_buffer1).w
00001102 31FC 8ADF F624             		move.w	#$8A00+223,(v_hbla_hreg).w	; H-INT every 224th scanline
00001108 7000                       		moveq	#0,d0
0000110A 23FC C000 0000 00C0 0004   		move.l	#$C0000000,(vdp_control_port).l ; set VDP to CRAM write
00001114 3E3C 003F                  		move.w	#$3F,d7
00001118                            
00001118                            	@clrCRAM:
00001118 3280                       		move.w	d0,(a1)
0000111A 51CF FFFC                  		dbf	d7,@clrCRAM	; clear	the CRAM
0000111E                            
0000111E 42B8 F616                  		clr.l	(v_scrposy_dup).w
00001122 42B8 F61A                  		clr.l	(v_scrposx_dup).w
00001126 2F01                       		move.l	d1,-(sp)
00001128 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$FFFF,0
0000114A                            
0000114A                            	@waitforDMA:
0000114A 3215                       		move.w	(a5),d1
0000114C 0801 0001                  		btst	#1,d1		; is DMA (fillVRAM) still running?
00001150 66F8                       		bne.s	@waitforDMA	; if yes, branch
00001152                            
00001152 3ABC 8F02                  		move.w	#$8F02,(a5)	; set VDP increment size
00001156 221F                       		move.l	(sp)+,d1
00001158 4E75                       		rts	
0000115A                            ; End of function VDPSetupGame
0000115A                            
0000115A                            ; ===========================================================================
0000115A 8004                       VDPSetupArray:	dc.w $8004		; 8-colour mode
0000115C 8134                       		dc.w $8134		; enable V.interrupts, enable DMA
0000115E 8230                       		dc.w $8200+(vram_fg>>10) ; set foreground nametable address
00001160 8328                       		dc.w $8300+($A000>>10)	; set window nametable address
00001162 8407                       		dc.w $8400+(vram_bg>>13) ; set background nametable address
00001164 857C                       		dc.w $8500+(vram_sprites>>9) ; set sprite table address
00001166 8600                       		dc.w $8600		; unused
00001168 8700                       		dc.w $8700		; set background colour (palette entry 0)
0000116A 8800                       		dc.w $8800		; unused
0000116C 8900                       		dc.w $8900		; unused
0000116E 8A00                       		dc.w $8A00		; default H.interrupt register
00001170 8B00                       		dc.w $8B00		; full-screen vertical scrolling
00001172 8C81                       		dc.w $8C81		; 40-cell display mode
00001174 8D3F                       		dc.w $8D00+(vram_hscroll>>10) ; set background hscroll address
00001176 8E00                       		dc.w $8E00		; unused
00001178 8F02                       		dc.w $8F02		; set VDP increment size
0000117A 9001                       		dc.w $9001		; 64-cell hscroll size
0000117C 9100                       		dc.w $9100		; window horizontal position
0000117E 9200                       		dc.w $9200		; window vertical position
00001180                            
00001180                            ; ---------------------------------------------------------------------------
00001180                            ; Subroutine to	clear the screen
00001180                            ; ---------------------------------------------------------------------------
00001180                            
00001180                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001180                            
00001180                            
00001180                            ClearScreen:
00001180 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$FFF,vram_fg ; clear foreground namespace
000011A2                            
000011A2                            	@wait1:
000011A2 3215                       		move.w	(a5),d1
000011A4 0801 0001                  		btst	#1,d1
000011A8 66F8                       		bne.s	@wait1
000011AA                            
000011AA 3ABC 8F02                  		move.w	#$8F02,(a5)
000011AE 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$FFF,vram_bg ; clear background namespace
000011D0                            
000011D0                            	@wait2:
000011D0 3215                       		move.w	(a5),d1
000011D2 0801 0001                  		btst	#1,d1
000011D6 66F8                       		bne.s	@wait2
000011D8                            
000011D8 3ABC 8F02                  		move.w	#$8F02,(a5)
000011DC 42B8 F616                  		clr.l	(v_scrposy_dup).w
000011E0 42B8 F61A                  		clr.l	(v_scrposx_dup).w
000011E4                            
000011E4 43F8 F800                  		lea	(v_spritetablebuffer).w,a1
000011E8 7000                       		moveq	#0,d0
000011EA 323C 00A0                  		move.w	#($280/4),d1	; This should be ($280/4)-1, leading to a slight bug (first bit of v_pal_water is cleared)
000011EE                            
000011EE                            	@clearsprites:
000011EE 22C0                       		move.l	d0,(a1)+
000011F0 51C9 FFFC                  		dbf	d1,@clearsprites ; clear sprite table (in RAM)
000011F4                            
000011F4 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
000011F8 7000                       		moveq	#0,d0
000011FA 323C 0100                  		move.w	#($400/4),d1	; This should be ($400/4)-1, leading to a slight bug (first bit of the Sonic object's RAM is cleared)
000011FE                            
000011FE                            	@clearhscroll:
000011FE 22C0                       		move.l	d0,(a1)+
00001200 51C9 FFFC                  		dbf	d1,@clearhscroll ; clear hscroll table (in RAM)
00001204 4E75                       		rts	
00001206                            ; End of function ClearScreen
00001206                            
00001206                            ; ---------------------------------------------------------------------------
00001206                            ; Subroutine to	load the sound driver
00001206                            ; ---------------------------------------------------------------------------
00001206                            
00001206                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001206                            
00001206                            
00001206                            SoundDriverLoad:
00001206 4E71                       		nop	
00001208 33FC 0100 00A1 1100        		stopZ80
00001210 33FC 0100 00A1 1200        		resetZ80
00001218 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
0000121E 43F9 00A0 0000             		lea	(z80_ram).l,a1	; target Z80 RAM
00001224 6100 0000                  		bsr.w	KosDec		; decompress
00001228 33FC 0000 00A1 1200        		resetZ80a
00001230 4E71                       		nop	
00001232 4E71                       		nop	
00001234 4E71                       		nop	
00001236 4E71                       		nop	
00001238 33FC 0100 00A1 1200        		resetZ80
00001240 33FC 0000 00A1 1100        		startZ80
00001248 4E75                       		rts	
0000124A                            ; End of function SoundDriverLoad
0000124A                            
0000124A                            		include	"_incObj\sub PlaySound.asm"
0000124A                            ; ---------------------------------------------------------------------------
0000124A                            ; Subroutine to	play a music track
0000124A                            
0000124A                            ; input:
0000124A                            ;	d0 = track to play
0000124A                            ; ---------------------------------------------------------------------------
0000124A                            
0000124A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000124A                            
0000124A                            
0000124A                            PlaySound:
0000124A 11C0 F00A                  		move.b	d0,(v_snddriver_ram+v_soundqueue0).w
0000124E 4E75                       		rts	
00001250                            ; End of function PlaySound
00001250                            
00001250                            ; ---------------------------------------------------------------------------
00001250                            ; Subroutine to	play a sound effect
00001250                            ; ---------------------------------------------------------------------------
00001250                            
00001250                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001250                            
00001250                            
00001250                            PlaySound_Special:
00001250 11C0 F00B                  		move.b	d0,(v_snddriver_ram+v_soundqueue1).w
00001254 4E75                       		rts	
00001256                            ; End of function PlaySound_Special
00001256                            
00001256                            ; ===========================================================================
00001256                            ; ---------------------------------------------------------------------------
00001256                            ; Unused sound/music subroutine
00001256                            ; ---------------------------------------------------------------------------
00001256                            
00001256                            PlaySound_Unused:
00001256 11C0 F00C                  		move.b	d0,(v_snddriver_ram+v_soundqueue2).w
0000125A 4E75                       		rts	
0000125A 4E75                       		rts	
0000125C                            		include	"_inc\PauseGame.asm"
0000125C                            ; ---------------------------------------------------------------------------
0000125C                            ; Subroutine to	pause the game
0000125C                            ; ---------------------------------------------------------------------------
0000125C                            
0000125C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000125C                            
0000125C                            
0000125C                            PauseGame:
0000125C 4E71                       		nop	
0000125E 4A38 FE12                  		tst.b	(v_lives).w	; do you have any lives	left?
00001262 6700                       		beq.s	Unpause		; if not, branch
00001264 4A78 F63A                  		tst.w	(f_pause).w	; is game already paused?
00001268 6600                       		bne.s	Pause_StopGame	; if yes, branch
0000126A 0838 0007 F605             		btst	#bitStart,(v_jpadpress1).w ; is Start button pressed?
00001270 6700                       		beq.s	Pause_DoNothing	; if not, branch
00001272                            
00001272                            Pause_StopGame:
00001272 31FC 0001 F63A             		move.w	#1,(f_pause).w	; freeze time
00001278 11FC 0001 F003             		move.b	#1,(v_snddriver_ram+f_pausemusic).w ; pause music
0000127E                            
0000127E                            Pause_Loop:
0000127E 11FC 0010 F62A             		move.b	#$10,(v_vbla_routine).w
00001284 6100 0000                  		bsr.w	WaitForVBla
00001288 4A38 FFE1                  		tst.b	(f_slomocheat).w ; is slow-motion cheat on?
0000128C 6700                       		beq.s	Pause_ChkStart	; if not, branch
0000128E 0838 0006 F605             		btst	#bitA,(v_jpadpress1).w ; is button A pressed?
00001294 6700                       		beq.s	Pause_ChkBC	; if not, branch
00001296 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; set game mode to 4 (title screen)
0000129C 4E71                       		nop	
0000129E 6000                       		bra.s	Pause_EndMusic
000012A0                            ; ===========================================================================
000012A0                            
000012A0                            Pause_ChkBC:
000012A0 0838 0004 F604             		btst	#bitB,(v_jpadhold1).w ; is button B pressed?
000012A6 6600                       		bne.s	Pause_SlowMo	; if yes, branch
000012A8 0838 0005 F605             		btst	#bitC,(v_jpadpress1).w ; is button C pressed?
000012AE 6600                       		bne.s	Pause_SlowMo	; if yes, branch
000012B0                            
000012B0                            Pause_ChkStart:
000012B0 0838 0007 F605             		btst	#bitStart,(v_jpadpress1).w ; is Start button pressed?
000012B6 67C6                       		beq.s	Pause_Loop	; if not, branch
000012B8                            
000012B8                            Pause_EndMusic:
000012B8 11FC 0080 F003             		move.b	#$80,(v_snddriver_ram+f_pausemusic).w	; unpause the music
000012BE                            
000012BE                            Unpause:
000012BE 31FC 0000 F63A             		move.w	#0,(f_pause).w	; unpause the game
000012C4                            
000012C4                            Pause_DoNothing:
000012C4 4E75                       		rts	
000012C6                            ; ===========================================================================
000012C6                            
000012C6                            Pause_SlowMo:
000012C6 31FC 0001 F63A             		move.w	#1,(f_pause).w
000012CC 11FC 0080 F003             		move.b	#$80,(v_snddriver_ram+f_pausemusic).w	; Unpause the music
000012D2 4E75                       		rts	
000012D4                            ; End of function PauseGame
000012D4                            ; End of function PauseGame
000012D4                            
000012D4                            ; ---------------------------------------------------------------------------
000012D4                            ; Subroutine to	copy a tile map from RAM to VRAM namespace
000012D4                            
000012D4                            ; input:
000012D4                            ;	a1 = tile map address
000012D4                            ;	d0 = VRAM address
000012D4                            ;	d1 = width (cells)
000012D4                            ;	d2 = height (cells)
000012D4                            ; ---------------------------------------------------------------------------
000012D4                            
000012D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012D4                            
000012D4                            
000012D4                            TilemapToVRAM:
000012D4 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
000012DA 283C 0080 0000             		move.l	#$800000,d4
000012E0                            
000012E0                            	Tilemap_Line:
000012E0 2D40 0004                  		move.l	d0,4(a6)	; move d0 to VDP_control_port
000012E4 3601                       		move.w	d1,d3
000012E6                            
000012E6                            	Tilemap_Cell:
000012E6 3C99                       		move.w	(a1)+,(a6)	; write value to namespace
000012E8 51CB FFFC                  		dbf	d3,Tilemap_Cell	; next tile
000012EC D084                       		add.l	d4,d0		; goto next line
000012EE 51CA FFF0                  		dbf	d2,Tilemap_Line	; next line
000012F2 4E75                       		rts	
000012F4                            ; End of function TilemapToVRAM
000012F4                            
000012F4                            		include	"_inc\Nemesis Decompression.asm"
000012F4                            ; ==============================================================================
000012F4                            ; ------------------------------------------------------------------------------
000012F4                            ; Nemesis decompression routine
000012F4                            ; ------------------------------------------------------------------------------
000012F4                            ; Optimized by vladikcomper
000012F4                            ; ------------------------------------------------------------------------------
000012F4                             
000012F4                            NemDec_RAM:
000012F4 48E7 FFDE                      movem.l d0-a1/a3-a6,-(sp)
000012F8 47FA 0000                      lea NemDec_WriteRowToRAM(pc),a3
000012FC 6000                           bra.s   NemDec_Main
000012FE                             
000012FE                            ; ------------------------------------------------------------------------------
000012FE                            NemDec:
000012FE 48E7 FFDE                      movem.l d0-a1/a3-a6,-(sp)
00001302 49F9 00C0 0000                 lea $C00000,a4      ; load VDP Data Port     
00001308 47FA 0000                      lea NemPCD_WriteRowToVDP(pc),a3
0000130C                             
0000130C                            NemDec_Main:
0000130C 43F8 AA00                      lea $FFFFAA00,a1        ; load Nemesis decompression buffer
00001310 3418                           move.w  (a0)+,d2        ; get number of patterns
00001312 6A00                           bpl.s   @0          ; are we in Mode 0?
00001314 47EB 000A                      lea $A(a3),a3       ; if not, use Mode 1
00001318 E74A                       @0  lsl.w   #3,d2
0000131A 3A42                           movea.w d2,a5
0000131C 7607                           moveq   #7,d3
0000131E 7400                           moveq   #0,d2
00001320 7800                           moveq   #0,d4
00001322 6100 0000                      bsr.w   NemDec_BuildCodeTable
00001326 1A18                           move.b  (a0)+,d5        ; get first byte of compressed data
00001328 E145                           asl.w   #8,d5           ; shift up by a byte
0000132A 1A18                           move.b  (a0)+,d5        ; get second byte of compressed data
0000132C 3C3C 0010                      move.w  #$10,d6         ; set initial shift value
00001330 6100                           bsr.s   NemDec2
00001332 4CDF 7BFF                      movem.l (sp)+,d0-a1/a3-a6
00001336 4E75                           rts
00001338                             
00001338                            ; ---------------------------------------------------------------------------
00001338                            ; Part of the Nemesis decompressor, processes the actual compressed data
00001338                            ; ---------------------------------------------------------------------------
00001338                             
00001338                            NemDec2:
00001338 3E06                           move.w  d6,d7
0000133A 5147                           subq.w  #8,d7           ; get shift value
0000133C 3205                           move.w  d5,d1
0000133E EE69                           lsr.w   d7,d1           ; shift so that high bit of the code is in bit position 7
00001340 0C01 00FC                      cmpi.b  #%11111100,d1       ; are the high 6 bits set?
00001344 6400                           bcc.s   NemDec_InlineData   ; if they are, it signifies inline data
00001346 0241 00FF                      andi.w  #$FF,d1
0000134A D241                           add.w   d1,d1
0000134C 9C31 1000                      sub.b   (a1,d1.w),d6        ; ~~ subtract from shift value so that the next code is read next time around
00001350 0C46 0009                      cmpi.w  #9,d6           ; does a new byte need to be read?
00001354 6400                           bcc.s   @0          ; if not, branch
00001356 5046                           addq.w  #8,d6
00001358 E145                           asl.w   #8,d5
0000135A 1A18                           move.b  (a0)+,d5        ; read next byte
0000135C 1231 1001                  @0  move.b  1(a1,d1.w),d1
00001360 3001                           move.w  d1,d0
00001362 0241 000F                      andi.w  #$F,d1          ; get palette index for pixel
00001366 0240 00F0                      andi.w  #$F0,d0
0000136A                             
0000136A                            NemDec_GetRepeatCount:
0000136A E848                           lsr.w   #4,d0           ; get repeat count
0000136C                             
0000136C                            NemDec_WritePixel:
0000136C E98C                           lsl.l   #4,d4           ; shift up by a nybble
0000136E 8801                           or.b    d1,d4           ; write pixel
00001370 51CB 0000                      dbf d3,NemDec_WritePixelLoop; ~~
00001374 4ED3                           jmp (a3)            ; otherwise, write the row to its destination
00001376                            ; ---------------------------------------------------------------------------
00001376                             
00001376                            NemPCD_NewRow:
00001376 7800                           moveq   #0,d4           ; reset row
00001378 7607                           moveq   #7,d3           ; reset nybble counter
0000137A                             
0000137A                            NemDec_WritePixelLoop:
0000137A 51C8 FFF0                      dbf d0,NemDec_WritePixel
0000137E 60B8                           bra.s   NemDec2
00001380                            ; ---------------------------------------------------------------------------
00001380                             
00001380                            NemDec_InlineData:
00001380 5D46                           subq.w  #6,d6           ; 6 bits needed to signal inline data
00001382 0C46 0009                      cmpi.w  #9,d6
00001386 6400                           bcc.s   @0
00001388 5046                           addq.w  #8,d6
0000138A E145                           asl.w   #8,d5
0000138C 1A18                           move.b  (a0)+,d5
0000138E 5F46                       @0  subq.w  #7,d6           ; and 7 bits needed for the inline data itself
00001390 3205                           move.w  d5,d1
00001392 EC69                           lsr.w   d6,d1           ; shift so that low bit of the code is in bit position 0
00001394 3001                           move.w  d1,d0
00001396 0241 000F                      andi.w  #$F,d1          ; get palette index for pixel
0000139A 0240 0070                      andi.w  #$70,d0         ; high nybble is repeat count for pixel
0000139E 0C46 0009                      cmpi.w  #9,d6
000013A2 64C6                           bcc.s   NemDec_GetRepeatCount
000013A4 5046                           addq.w  #8,d6
000013A6 E145                           asl.w   #8,d5
000013A8 1A18                           move.b  (a0)+,d5
000013AA 60BE                           bra.s   NemDec_GetRepeatCount
000013AC                             
000013AC                            ; ---------------------------------------------------------------------------
000013AC                            ; Subroutines to output decompressed entry
000013AC                            ; Selected depending on current decompression mode
000013AC                            ; ---------------------------------------------------------------------------
000013AC                             
000013AC                            NemPCD_WriteRowToVDP:
000013AC                            loc_1502:
000013AC 2884                           move.l  d4,(a4)         ; write 8-pixel row
000013AE 534D                           subq.w  #1,a5
000013B0 380D                           move.w  a5,d4           ; have all the 8-pixel rows been written?
000013B2 66C2                           bne.s   NemPCD_NewRow         ; if not, branch
000013B4 4E75                           rts
000013B6                            ; ---------------------------------------------------------------------------
000013B6                             
000013B6                            NemPCD_WriteRowToVDP_XOR:
000013B6 B982                           eor.l   d4,d2           ; XOR the previous row by the current row
000013B8 2882                           move.l  d2,(a4)         ; and write the result
000013BA 534D                           subq.w  #1,a5
000013BC 380D                           move.w  a5,d4
000013BE 66B6                           bne.s   NemPCD_NewRow
000013C0 4E75                           rts
000013C2                            ; ---------------------------------------------------------------------------
000013C2                             
000013C2                            NemDec_WriteRowToRAM:
000013C2 28C4                           move.l  d4,(a4)+        ; write 8-pixel row
000013C4 534D                           subq.w  #1,a5
000013C6 380D                           move.w  a5,d4           ; have all the 8-pixel rows been written?
000013C8 66AC                           bne.s   NemPCD_NewRow         ; if not, branch
000013CA 4E75                           rts
000013CC                            ; ---------------------------------------------------------------------------
000013CC                             
000013CC                            NemDec_WriteRowToRAM_XOR:
000013CC B982                           eor.l   d4,d2           ; XOR the previous row by the current row
000013CE 28C2                           move.l  d2,(a4)+        ; and write the result
000013D0 534D                           subq.w  #1,a5
000013D2 380D                           move.w  a5,d4
000013D4 66A0                           bne.s   NemPCD_NewRow
000013D6 4E75                           rts
000013D8                             
000013D8                            ; ---------------------------------------------------------------------------
000013D8                            ; Part of the Nemesis decompressor, builds the code table (in RAM)
000013D8                            ; ---------------------------------------------------------------------------
000013D8                             
000013D8                            NemDec_BuildCodeTable:
000013D8 1018                           move.b  (a0)+,d0        ; read first byte
000013DA                             
000013DA                            @ChkEnd:
000013DA 0C00 00FF                      cmpi.b  #$FF,d0         ; has the end of the code table description been reached?
000013DE 6600                           bne.s   @NewPalIndex        ; if not, branch
000013E0 4E75                           rts
000013E2                            ; ---------------------------------------------------------------------------
000013E2                             
000013E2                            @NewPalIndex:
000013E2 3E00                           move.w  d0,d7
000013E4                             
000013E4                            @ItemLoop:
000013E4 1018                           move.b  (a0)+,d0        ; read next byte
000013E6 6BF2                           bmi.s   @ChkEnd         ; ~~
000013E8 1200                           move.b  d0,d1
000013EA 0247 000F                      andi.w  #$F,d7          ; get palette index
000013EE 0241 0070                      andi.w  #$70,d1         ; get repeat count for palette index
000013F2 8E41                           or.w    d1,d7           ; combine the two
000013F4 0240 000F                      andi.w  #$F,d0          ; get the length of the code in bits
000013F8 1200                           move.b  d0,d1
000013FA E149                           lsl.w   #8,d1
000013FC 8E41                           or.w    d1,d7           ; combine with palette index and repeat count to form code table entry
000013FE 7208                           moveq   #8,d1
00001400 9240                           sub.w   d0,d1           ; is the code 8 bits long?
00001402 6600                           bne.s   @ItemShortCode      ; if not, a bit of extra processing is needed
00001404 1018                           move.b  (a0)+,d0        ; get code
00001406 D040                           add.w   d0,d0           ; each code gets a word-sized entry in the table
00001408 3387 0000                      move.w  d7,(a1,d0.w)        ; store the entry for the code
0000140C 60D6                           bra.s   @ItemLoop       ; repeat
0000140E                            ; ---------------------------------------------------------------------------
0000140E                             
0000140E                            @ItemShortCode:
0000140E 1018                           move.b  (a0)+,d0        ; get code
00001410 E368                           lsl.w   d1,d0           ; shift so that high bit is in bit position 7
00001412 D040                           add.w   d0,d0           ; get index into code table
00001414 7A01                           moveq   #1,d5
00001416 E36D                           lsl.w   d1,d5
00001418 5345                           subq.w  #1,d5           ; d5 = 2^d1 - 1
0000141A 4DF1 0000                      lea (a1,d0.w),a6        ; ~~
0000141E                             
0000141E                            @ItemShortCodeLoop:
0000141E 3CC7                           move.w  d7,(a6)+        ; ~~ store entry
00001420 51CD FFFC                      dbf d5,@ItemShortCodeLoop   ; repeat for required number of entries
00001424 60BE                           bra.s   @ItemLoop
00001424 60BE                           bra.s   @ItemLoop
00001426                            
00001426                              
00001426                                pusho	; buffer local label symbol config
00001426                                opt ws+  ; change local label symbol to '.'
00001426                            
00001426                            ; ---------------------------------------------------------------------------
00001426                            ; MACRO ResetDMAQueue
00001426                            ; Clears the DMA queue, discarding all previously-queued DMAs.
00001426                            ; ---------------------------------------------------------------------------
00001426                            ; ROUTINE Process_DMA_Queue / ProcessDMAQueue
00001426                            ; Performs all queued DMA transfers and clears the DMA queue.
00001426                            ;
00001426                            ; Output:
00001426                            ; 	a1,a5	trashed
00001426                            ; ---------------------------------------------------------------------------
00001426                            ; ROUTINE InitDMAQueue
00001426                            ; Pre-initializes the DMA queue with VDP register numbers in alternating bytes.
00001426                            ; Must be called before the queue is used, and the queue expects that only it
00001426                            ; write to this region of RAM.
00001426                            ;
00001426                            ; Output:
00001426                            ; 	a0,d0,d1	trashed
00001426                            ; ---------------------------------------------------------------------------
00001426                            ; ROUTINE Add_To_DMA_Queue / QueueDMATransfer
00001426                            ; Queues a DMA with parameters given in registers.
00001426                            ;
00001426                            ; Options:
00001426                            ; 	AssumeSourceAddressInBytes (default 1)
00001426                            ; 	AssumeSourceAddressIsRAMSafe (default 0)
00001426                            ; 	UseRAMSourceSafeDMA (default 1&(AssumeSourceAddressIsRAMSafe=0))
00001426                            ; 	Use128kbSafeDMA (default 0)
00001426                            ; 	UseVIntSafeDMA (default 0)
00001426                            ; Input:
00001426                            ; 	d1	Source address (in bytes, or in words if AssumeSourceAddressInBytes is
00001426                            ; 		set to 0)
00001426                            ; 	d2	Destination address
00001426                            ; 	d3	Transfer length (in words)
00001426                            ; Output:
00001426                            ; 	d0,d1,d2,d3,a1	trashed
00001426                            ;
00001426                            ; With the default settings, runs in:
00001426                            ; * 48(11/0) cycles if queue is full (DMA discarded)
00001426                            ; * 184(29/9) cycles otherwise (DMA queued)
00001426                            ;
00001426                            ; With Use128kbSafeDMA = 1, runs in:
00001426                            ; * 48(11/0) cycles if queue is full at the start (DMA discarded)
00001426                            ; * 200(32/9) cycles if the DMA does not cross a 128kB boundary (DMA queued)
00001426                            ; * 226(38/9) cycles if the DMA crosses a 128kB boundary, and the first piece
00001426                            ;   fills the queue (second piece is discarded)
00001426                            ; * 338(56/17) cycles if the DMA crosses a 128kB boundary, and the queue has
00001426                            ;   space for both pieces (both pieces queued)
00001426                            ;
00001426                            ; Setting UseVIntSafeDMA to 1 adds 46(6/1) cycles to all times.
00001426                            ;
00001426                            ; Setting AssumeSourceAddressInBytes to 0 reduces all times by 10(1/0) cycles,
00001426                            ; but only if the DMA is not entirely discarded. However, all callers must be
00001426                            ; edited to make sure the adresss given is correct.
00001426                            ;
00001426                            ; Setting AssumeSourceAddressIsRAMSafe to 1, or UseRAMSourceSafeDMA to 0,
00001426                            ; reduces all times by 14(2/0) cycles, but only if the DMA is not entirely
00001426                            ; discarded. However, all callers must be edited to make sure the adresss given
00001426                            ; in the correct form. You can use the dmaSource function for that.
00001426                            ; ---------------------------------------------------------------------------
00001426                            ; MACRO QueueStaticDMA
00001426                            ; Directly queues a DMA on the spot. Requires all parameters to be known at
00001426                            ; assembly time; that is, no registers. Gives assembly errors when the DMA
00001426                            ; crosses a 128kB boundary, is at an odd ROM location, or is zero length.
00001426                            ;
00001426                            ; Options:
00001426                            ; 	UseVIntSafeDMA (default 0)
00001426                            ; Input:
00001426                            ; 	Source address (in bytes), transfer length (in bytes), destination address
00001426                            ; Output:
00001426                            ; 	d0,a1	trashed
00001426                            ;
00001426                            ; With the default settings, runs in:
00001426                            ; * 32(7/0) cycles if queue is full (DMA discarded)
00001426                            ; * 122(21/8) cycles otherwise (DMA queued)
00001426                            ;
00001426                            ; Setting UseVIntSafeDMA to 1 adds 46(6/1) cycles to both cases.
00001426                            ; ===========================================================================
00001426                            ; option: AssumeSourceAddressInBytes
00001426                            ;
00001426                            ; This option makes the function work as a drop-in replacement of the original
00001426                            ; functions. If you modify all callers to supply a position in words instead of
00001426                            ; bytes (i.e., divide source address by 2) you can set this to 0 to gain 10(1/0)
00001426 =00000001                  AssumeSourceAddressInBytes = 1
00001426                            ; ===========================================================================
00001426                            ; option: AssumeSourceAddressIsRAMSafe
00001426                            ;
00001426                            ; This option (which is disabled by default) makes the DMA queue assume that the
00001426                            ; source address is given to the function in a way that makes them safe to use
00001426                            ; with RAM sources. You need to edit all callers to ensure this.
00001426                            ; Enabling this option turns off UseRAMSourceSafeDMA, and saves 14(2/0).
00001426 =00000000                  AssumeSourceAddressIsRAMSafe = 0
00001426                            ; ===========================================================================
00001426                            ; option: UseRAMSourceSafeDMA
00001426                            ;
00001426                            ; This option (which is enabled by default) makes source addresses in RAM safe
00001426                            ; at the cost of 14(2/0). If you modify all callers so as to clear the top byte
00001426                            ; of source addresses (i.e., by ANDing them with $FFFFFF).
00001426 =00000001                  UseRAMSourceSafeDMA = 1&(AssumeSourceAddressIsRAMSafe=0)
00001426                            ; ===========================================================================
00001426                            ; option: Use128kbSafeDMA
00001426                            ;
00001426                            ; This option breaks DMA transfers that crosses a 128kB block into two. It is
00001426                            ; disabled by default because you can simply align the art in ROM and avoid the
00001426                            ; issue altogether. It is here so that you have a high-performance routine to do
00001426                            ; the job in situations where you can't align it in ROM.
00001426 =00000001                  Use128kbSafeDMA = 1
00001426                            ; ===========================================================================
00001426                            ; option UseVIntSafeDMA
00001426                            ;
00001426                            ; Option to mask interrupts while updating the DMA queue. This fixes many race
00001426                            ; conditions in the DMA funcion, but it costs 46(6/1) cycles. The better way to
00001426                            ; handle these race conditions would be to make unsafe callers (such as S3&K's
00001426                            ; KosM decoder) prevent these by masking off interrupts before calling and then
00001426                            ; restore interrupts after.
00001426 =00000000                  UseVIntSafeDMA = 0
00001426                            ; ===========================================================================
00001426                            
00001426                            
00001426                            ; Convenience macros, for increased maintainability of the code.
00001426 =00000027                  DMA = %100111
00001426 =00000021                  VRAM = %100001
00001426                            ; Like vdpComm, but starting from an address contained in a register
00001426 =00000001                  vdpCommReg_defined = 1
00001426                            vdpCommReg macro reg,type,rwd,clr
00001426                            	lsl.l	#2,\reg							; Move high bits into (word-swapped) position, accidentally moving everything else
00001426                            	if ((\type&\rwd)&3)<>0
00001426                            		addq.w	#((\type&\rwd)&3),\reg			; Add upper access type bits
00001426                            	endif
00001426                            	ror.w	#2,\reg							; Put upper access type bits into place, also moving all other bits into their correct (word-swapped) places
00001426                            	swap	\reg								; Put all bits in proper places
00001426                            	if \clr <> 0
00001426                            		andi.w	#3,\reg						; Strip whatever junk was in upper word of reg
00001426                            	endif
00001426                            	if ((\type&\rwd)&$FC)=$20
00001426                            		tas.b	\reg							; Add in the DMA flag -- tas fails on memory, but works on registers
00001426                            	elseif ((\type&\rwd)&$FC)<>0
00001426                            		ori.w	#(((\type&\rwd)&$FC)<<2),\reg	; Add in missing access type bits
00001426                            	endif
00001426                            	endm
00001426                            ; ---------------------------------------------------------------------------
00001426 =00000001                  intMacros_defined = 1
00001426                            enableInts macro
00001426                            	move	#$2300,sr
00001426                            	endm
00001426                            
00001426                            disableInts macro
00001426                            	move	#$2700,sr
00001426                            	endm
00001426                            ; ---------------------------------------------------------------------------
00001426 =00000001                  DMAEntry_defined = 1
00001426                                    rsreset
00001426 =00000000                  DMAEntry.Reg94:		rs.b	1
00001426                            			  
00001426 =00000001                  DMAEntry.Size:      rs.b    0
00001426 =00000001                  DMAEntry.SizeH:		rs.b	1
00001426 =00000002                  DMAEntry.Reg93:		rs.b	1
00001426 =00000003                  DMAEntry.Source:    rs.b    0
00001426 =00000003                  DMAEntry.SizeL:		rs.b	1
00001426 =00000004                  DMAEntry.Reg97:		rs.b	1
00001426 =00000005                  DMAEntry.SrcH:		rs.b	1
00001426 =00000006                  DMAEntry.Reg96:		rs.b	1
00001426 =00000007                  DMAEntry.SrcM:		rs.b	1
00001426 =00000008                  DMAEntry.Reg95:		rs.b	1
00001426 =00000009                  DMAEntry.SrcL:		rs.b	1
00001426 =0000000A                  DMAEntry.Command:	rs.l	1
00001426 =0000000E                  DMAEntry.len:   rs.w    0
00001426                            ; ---------------------------------------------------------------------------
00001426 =00000012                  QueueSlotCount = (VDP_Command_Buffer_Slot-VDP_Command_Buffer)/DMAEntry.len
00001426                            ; ---------------------------------------------------------------------------
00001426                            						
00001426                            										   
00001426                            									   
00001426                            	  
00001426                            																			 
00001426                            							  
00001426 =00000001                  QueueStaticDMA_defined = 1
00001426                            ; Expects source address and DMA length in bytes. Also, expects source, size, and dest to be known
00001426                            ; at assembly time. Gives errors if DMA starts at an odd address, transfers
00001426                            ; crosses a 128kB boundary, or has size 0.
00001426                            QueueStaticDMA macro src,length,dest
00001426                                local   len
00001426                            		if ((\src)&1)<>0
00001426                            			inform 3,"DMA queued from odd source \1!"
00001426                            		endif
00001426                            		if ((\length)&1)<>0
00001426                            			inform 3,"DMA an odd number of bytes \2!"
00001426                            		endif
00001426                            		if (\length)=0
00001426                            			inform 3,"DMA transferring 0 bytes (becomes a 128kB transfer). If you really mean it, pass 128kB instead."
00001426                            		endif
00001426                            		if (((\src)+(\length)-1)>>17)<>((\src)>>17)
00001426                            			inform 3,"DMA crosses a 128kB boundary. You should either split the DMA manually or align the source adequately."
00001426                            		endif
00001426                            	  
00001426                            	if UseVIntSafeDMA=1
00001426                            		move.w	sr,-(sp)										; Save current interrupt mask
00001426                            		disableInts												; Mask off interrupts
00001426                            	endif ; UseVIntSafeDMA=1
00001426                            	movea.w	(VDP_Command_Buffer_Slot).w,a1
00001426                            	cmpa.w	#VDP_Command_Buffer_Slot,a1
00001426                            	beq.s	.done												; Return if there's no more room in the buffer
00001426                            	len: = ((length>>1)&$7FFF)
00001426                                move.b	#(len>>8)&$FF,DMAEntry.SizeH(a1)		; Write top byte of size/2
00001426                            	move.l	#((len&$FF)<<24)|((src>>1)&$7FFFFF),d0	; Set d0 to bottom byte of size/2 and the low 3 bytes of source/2
00001426                            	movep.l	d0,DMAEntry.SizeL(a1)								; Write it all to the queue
00001426                            	lea	DMAEntry.Command(a1),a1									; Seek to correct RAM address to store VDP DMA command
00001426                            	move.l	#$40000080,(a1)+						; Write VDP DMA command for destination address
00001426                            	move.w	a1,(VDP_Command_Buffer_Slot).w						; Write next queue slot
00001426                            .done:
00001426                            	if UseVIntSafeDMA=1
00001426                            		move.w	(sp)+,sr										; Restore interrupts to previous state
00001426                            	endif ;UseVIntSafeDMA=1
00001426                            	endm
00001426                            
00001426                                
00001426                            
00001426                            ; ---------------------------------------------------------------------------
00001426                            ResetDMAQueue: macro
00001426                            	move.w	#VDP_Command_Buffer,(VDP_Command_Buffer_Slot).w
00001426                            	endm
00001426                            ; ===========================================================================
00001426                            
00001426                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001426                            
00001426                            ; sub_144E: DMA_68KtoVRAM: QueueCopyToVRAM: QueueVDPCommand:
00001426                            Add_To_DMA_Queue:
00001426                            QueueDMATransfer:
00001426 3278 C8FC                  	movea.w	(VDP_Command_Buffer_Slot).w,a1
0000142A B2FC C8FC                  	cmpa.w	#VDP_Command_Buffer_Slot,a1
0000142E 6700                       	beq.s	.done											; Return if there's no more room in the buffer
00001430                            
00001430 E289                       		lsr.l	#1,d1										; Source address is in words for the VDP registers
00001432 0881 0017                  		bclr.l	#23,d1										; Make sure bit 23 is clear (68k->VDP DMA flag)
00001436 03C9 0003                  	movep.l	d1,DMAEntry.Source(a1)							; Write source address; the useless top byte will be overwritten later
0000143A 7000                       	moveq	#0,d0											; We need a zero on d0
0000143C                            
0000143C                            		; Detect if transfer crosses 128KB boundary
0000143C                            		; Using sub+sub instead of move+add handles the following edge cases:
0000143C                            		; (1) d3.w = 0 => 128kB transfer
0000143C                            		;   (a) d1.w = 0 => no carry, don't split the DMA
0000143C                            		;   (b) d1.w != 0 => carry, need to split the DMA
0000143C                            		; (2) d3.w != 0
0000143C                            		;   (a) if there is carry on d1.w + d3.w
0000143C                            		;     (* ) if d1.w + d3.w = 0 => transfer comes entirely from current 128kB block, don't split the DMA
0000143C                            		;     (**) if d1.w + d3.w != 0 => need to split the DMA
0000143C                            		;   (b) if there is no carry on d1.w + d3.w => don't split the DMA
0000143C                            		; The reason this works is that carry on d1.w + d3.w means that
0000143C                            		; d1.w + d3.w >= $10000, whereas carry on (-d3.w) - (d1.w) means that
0000143C                            		; d1.w + d3.w > $10000.
0000143C 9043                       		sub.w	d3,d0										; Using sub instead of move and add allows checking edge cases
0000143E 9041                       		sub.w	d1,d0										; Does the transfer cross over to the next 128kB block?
00001440 6500                       		bcs.s	.doubletransfer								; Branch if yes
00001442                            	; It does not cross a 128kB boundary. So just finish writing it.
00001442 0789 0001                  	movep.w	d3,DMAEntry.Size(a1)							; Write DMA length, overwriting useless top byte of source address
00001446                            
00001446                            .finishxfer:
00001446                            	; Command to specify destination address and begin DMA
00001446 3002                       	move.w	d2,d0											; Use the fact that top word of d0 is zero to avoid clearing on vdpCommReg
00001452 43E9 000A                  	lea	DMAEntry.Command(a1),a1								; Seek to correct RAM address to store VDP DMA command
00001456 22C0                       	move.l	d0,(a1)+										; Write VDP DMA command for destination address
00001458 31C9 C8FC                  	move.w	a1,(VDP_Command_Buffer_Slot).w					; Write next queue slot
0000145C                            
0000145C                            .done:
0000145C 4E75                       	rts
0000145E                            ; ---------------------------------------------------------------------------
0000145E                            .doubletransfer:
0000145E                            		; We need to split the DMA into two parts, since it crosses a 128kB block
0000145E D043                       		add.w	d3,d0										; Set d0 to the number of words until end of current 128kB block
00001460 0189 0001                  		movep.w	d0,DMAEntry.Size(a1)						; Write DMA length of first part, overwriting useless top byte of source addres
00001464                            
00001464 B2FC C8EE                  		cmpa.w	#VDP_Command_Buffer_Slot-DMAEntry.len,a1	; Does the queue have enough space for both parts?
00001468 67DC                       		beq.s	.finishxfer									; Branch if not
0000146A                            
0000146A                            		; Get second transfer's source, destination, and length
0000146A 9640                       		sub.w	d0,d3										; Set d3 to the number of words remaining
0000146C D280                       		add.l	d0,d1										; Offset the source address of the second part by the length of the first part
0000146E D040                       		add.w	d0,d0										; Convert to number of bytes
00001470 D042                       		add.w	d2,d0										; Set d0 to the VRAM destination of the second part
00001472                            
00001472                            		; If we know top word of d2 is clear, the following vdpCommReg can be set to not
00001472                            		; clear it. There is, unfortunately, no faster way to clear it than this.
00001480 2342 000A                  		move.l	d2,DMAEntry.Command(a1)						; Write VDP DMA command for destination address of first part
00001484                            
00001484                            		; Do second transfer
00001484 03C9 0011                  		movep.l	d1,DMAEntry.len+DMAEntry.Source(a1)			; Write source address of second part; useless top byte will be overwritten later
00001488 0789 000F                  		movep.w	d3,DMAEntry.len+DMAEntry.Size(a1)			; Write DMA length of second part, overwriting useless top byte of source addres
0000148C                            
0000148C                            		; Command to specify destination address and begin DMA
00001496 43E9 0018                  		lea	DMAEntry.len+DMAEntry.Command(a1),a1			; Seek to correct RAM address to store VDP DMA command of second part
0000149A 22C0                       		move.l	d0,(a1)+									; Write VDP DMA command for destination address of second part
0000149C                            
0000149C 31C9 C8FC                  		move.w	a1,(VDP_Command_Buffer_Slot).w				; Write next queue slot
000014A0 4E75                       		rts
000014A2                            ; End of function QueueDMATransfer
000014A2                            ; ===========================================================================
000014A2                            
000014A2                            ; ---------------------------------------------------------------------------
000014A2                            ; Subroutine for issuing all VDP commands that were queued
000014A2                            ; (by earlier calls to QueueDMATransfer)
000014A2                            ; Resets the queue when it's done
000014A2                            ; ---------------------------------------------------------------------------
000014A2                            
000014A2                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000014A2                            
000014A2                            ; sub_14AC: CopyToVRAM: IssueVDPCommands: Process_DMA:
000014A2                            Process_DMA_Queue:
000014A2                            ProcessDMAQueue:
000014A2 3278 C8FC                  	movea.w	(VDP_Command_Buffer_Slot).w,a1
000014A6 4EE9 0000                  	jmp	.jump_table-VDP_Command_Buffer(a1)
000014AA                            ; ---------------------------------------------------------------------------
000014AA                            .jump_table:
000014AA 4E75                       	rts
000014AC                            	rept 6
000014AC                            		trap	#0											; Just in case
000014AC 4E40 4E40 4E40 4E40 4E40+  	endr
000014B8                            ; ---------------------------------------------------------------------------
000014B8 =00000001                      c: = 1
000014B8                            	rept QueueSlotCount
000014B8                            		lea	(vdp_control_port).l,a5
000014B8                            		lea	(VDP_Command_Buffer).w,a1
000014B8                            		if c<>QueueSlotCount
000014B8                            			bra.w	.jump0 - c*8
000014B8                            		endif
000014B8                                c: = c + 1
000015B0                            ; ---------------------------------------------------------------------------
000015B0                            	rept QueueSlotCount
000015B0                            		move.l	(a1)+,(a5)									; Transfer length
000015B0                            		move.l	(a1)+,(a5)									; Source address high
000015B0                            		move.l	(a1)+,(a5)									; Source address low + destination high
000015B0                            		move.w	(a1)+,(a5)									; Destination low, trigger DMA
000015B0 2A99 2A99 2A99 3A99 2A99+  	endr
00001640                            
00001640                            .jump0:
00001640 31FC C800 C8FC             	ResetDMAQueue
00001646 4E75                       	rts
00001648                            ; End of function ProcessDMAQueue
00001648                            ; ===========================================================================
00001648                            
00001648                            ; ---------------------------------------------------------------------------
00001648                            ; Subroutine for initializing the DMA queue.
00001648                            ; ---------------------------------------------------------------------------
00001648                            
00001648                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001648                            
00001648                            InitDMAQueue:
00001648 41F8 C800                  	lea	(VDP_Command_Buffer).w,a0
0000164C 7094                       	moveq	#-$6C,d0				; fast-store $94 (sign-extended) in d0
0000164E 223C 9397 9695             	move.l	#$93979695,d1
00001654 =00000000                      c: = 0
00001654                            	rept QueueSlotCount
00001654                            		move.b	d0,c + DMAEntry.Reg94(a0)
00001654                            		movep.l	d1,c + DMAEntry.Reg93(a0)
00001654                                c: = c + DMAEntry.len
00001654 1080 03C8 0002 1140 000E+  	endr
000016E2                            
000016E2 31FC C800 C8FC             	ResetDMAQueue
000016E8 4E75                       	rts
000016EA                            ; End of function ProcessDMAQueue
000016EA                            ; ===========================================================================
000016EA                            
000016EA                            
000016EA                                popo	; buffer local label symbol config
000016EA                            
000016EA                            
000016EA                            ; ---------------------------------------------------------------------------
000016EA                            ; Subroutine to load pattern load cues (aka to queue pattern load requests)
000016EA                            ; ---------------------------------------------------------------------------
000016EA                            
000016EA                            ; ARGUMENTS
000016EA                            ; d0 = index of PLC list
000016EA                            ; ---------------------------------------------------------------------------
000016EA                            
000016EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016EA                            
000016EA                            ; LoadPLC:
000016EA                            AddPLC:
000016EA 48E7 0060                  		movem.l	a1-a2,-(sp)
000016EE 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000016F4 D040                       		add.w	d0,d0
000016F6 3031 0000                  		move.w	(a1,d0.w),d0
000016FA 43F1 0000                  		lea	(a1,d0.w),a1		; jump to relevant PLC
000016FE 45F8 F680                  		lea	(v_plc_buffer).w,a2 ; PLC buffer space
00001702                            
00001702                            	@findspace:
00001702 4A92                       		tst.l	(a2)		; is space available in RAM?
00001704 6700                       		beq.s	@copytoRAM	; if yes, branch
00001706 5C4A                       		addq.w	#6,a2		; if not, try next space
00001708 60F8                       		bra.s	@findspace
0000170A                            ; ===========================================================================
0000170A                            
0000170A                            @copytoRAM:
0000170A 3019                       		move.w	(a1)+,d0	; get length of PLC
0000170C 6B00                       		bmi.s	@skip
0000170E                            
0000170E                            	@loop:
0000170E 24D9                       		move.l	(a1)+,(a2)+
00001710 34D9                       		move.w	(a1)+,(a2)+	; copy PLC to RAM
00001712 51C8 FFFA                  		dbf	d0,@loop	; repeat for length of PLC
00001716                            
00001716                            	@skip:
00001716 4CDF 0600                  		movem.l	(sp)+,a1-a2 ; a1=object
0000171A 4E75                       		rts	
0000171C                            ; End of function AddPLC
0000171C                            
0000171C                            
0000171C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000171C                            ; Queue pattern load requests, but clear the PLQ first
0000171C                            
0000171C                            ; ARGUMENTS
0000171C                            ; d0 = index of PLC list (see ArtLoadCues)
0000171C                            
0000171C                            ; NOTICE: This subroutine does not check for buffer overruns. The programmer
0000171C                            ;	  (or hacker) is responsible for making sure that no more than
0000171C                            ;	  16 load requests are copied into the buffer.
0000171C                            ;	  _________DO NOT PUT MORE THAN 16 LOAD REQUESTS IN A LIST!__________
0000171C                            ;         (or if you change the size of Plc_Buffer, the limit becomes (Plc_Buffer_Only_End-Plc_Buffer)/6)
0000171C                            
0000171C                            ; LoadPLC2:
0000171C                            NewPLC:
0000171C 48E7 0060                  		movem.l	a1-a2,-(sp)
00001720 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
00001726 D040                       		add.w	d0,d0
00001728 3031 0000                  		move.w	(a1,d0.w),d0
0000172C 43F1 0000                  		lea	(a1,d0.w),a1	; jump to relevant PLC
00001730 6100                       		bsr.s	ClearPLC	; erase any data in PLC buffer space
00001732 45F8 F680                  		lea	(v_plc_buffer).w,a2
00001736 3019                       		move.w	(a1)+,d0	; get length of PLC
00001738 6B00                       		bmi.s	@skip		; if it's negative, skip the next loop
0000173A                            
0000173A                            	@loop:
0000173A 24D9                       		move.l	(a1)+,(a2)+
0000173C 34D9                       		move.w	(a1)+,(a2)+	; copy PLC to RAM
0000173E 51C8 FFFA                  		dbf	d0,@loop		; repeat for length of PLC
00001742                            
00001742                            	@skip:
00001742 4CDF 0600                  		movem.l	(sp)+,a1-a2
00001746 4E75                       		rts	
00001748                            ; End of function NewPLC
00001748                            
00001748                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001748                            
00001748                            ; ---------------------------------------------------------------------------
00001748                            ; Subroutine to	clear the pattern load cues
00001748                            ; ---------------------------------------------------------------------------
00001748                            
00001748                            ; Clear the pattern load queue ($FFF680 - $FFF700)
00001748                            
00001748                            
00001748                            ClearPLC:
00001748 45F8 F680                  		lea	(v_plc_buffer).w,a2 ; PLC buffer space in RAM
0000174C 701F                       		moveq	#$1F,d0	; bytesToLcnt(v_plc_buffer_end-v_plc_buffer)
0000174E                            
0000174E                            	@loop:
0000174E 429A                       		clr.l	(a2)+
00001750 51C8 FFFC                  		dbf	d0,@loop
00001754 4E75                       		rts	
00001756                            ; End of function ClearPLC
00001756                            
00001756                            ; ---------------------------------------------------------------------------
00001756                            ; Subroutine to	use graphics listed in a pattern load cue
00001756                            ; ---------------------------------------------------------------------------
00001756                            
00001756                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001756                            
00001756                            
00001756                            RunPLC:
00001756 4AB8 F680                  		tst.l	(v_plc_buffer).w
0000175A 6700                       		beq.s	Rplc_Exit
0000175C 4A78 F6F8                  		tst.w	(f_plc_execute).w
00001760 6600                       		bne.s	Rplc_Exit
00001762 2078 F680                  		movea.l	(v_plc_buffer).w,a0
00001766 47F9 0000 13AC             		lea	(NemPCD_WriteRowToVDP).l,a3
0000176C 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
00001770 3418                       		move.w	(a0)+,d2
00001772 6A00                       		bpl.s	loc_160E
00001774 D6FC 000A                  		adda.w	#$A,a3
00001778                            
00001778                            loc_160E:
00001778 0242 7FFF                  		andi.w	#$7FFF,d2
0000177C 31C2 F6F8                  		move.w	d2,(f_plc_execute).w
00001780 6100 FC56                  		bsr.w	NemDec_BuildCodeTable
00001784 1A18                       		move.b	(a0)+,d5
00001786 E145                       		asl.w	#8,d5
00001788 1A18                       		move.b	(a0)+,d5
0000178A 7C10                       		moveq	#$10,d6
0000178C 7000                       		moveq	#0,d0
0000178E 21C8 F680                  		move.l	a0,(v_plc_buffer).w
00001792 21CB F6E0                  		move.l	a3,(v_ptrnemcode).w
00001796 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
0000179A 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
0000179E 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
000017A2 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000017A6 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000017AA                            
000017AA                            Rplc_Exit:
000017AA 4E75                       		rts	
000017AC                            ; End of function RunPLC
000017AC                            
000017AC                            
000017AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017AC                            
000017AC                            
000017AC                            sub_1642:
000017AC 4A78 F6F8                  		tst.w	(f_plc_execute).w
000017B0 6700 0000                  		beq.w	locret_16DA
000017B4 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
000017BA 7000                       		moveq	#0,d0
000017BC 3038 F684                  		move.w	($FFFFF684).w,d0
000017C0 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
000017C6 6000                       		bra.s	loc_1676
000017C8                            ; End of function sub_1642
000017C8                            
000017C8                            
000017C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017C8                            
000017C8                            
000017C8                            ; sub_165E:
000017C8                            ProcessDPLC2:
000017C8 4A78 F6F8                  		tst.w	(f_plc_execute).w
000017CC 6700                       		beq.s	locret_16DA
000017CE 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
000017D4 7000                       		moveq	#0,d0
000017D6 3038 F684                  		move.w	($FFFFF684).w,d0
000017DA 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
000017E0                            
000017E0                            loc_1676:
000017E0 49F9 00C0 0004             		lea	(vdp_control_port).l,a4
000017E6 E588                       		lsl.l	#2,d0
000017E8 E448                       		lsr.w	#2,d0
000017EA 0040 4000                  		ori.w	#$4000,d0
000017EE 4840                       		swap	d0
000017F0 2880                       		move.l	d0,(a4)
000017F2 594C                       		subq.w	#4,a4
000017F4 2078 F680                  		movea.l	(v_plc_buffer).w,a0
000017F8 2678 F6E0                  		movea.l	(v_ptrnemcode).w,a3
000017FC 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
00001800 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
00001804 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
00001808 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
0000180C 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
00001810 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
00001814                            
00001814                            loc_16AA:
00001814 3A7C 0008                  		movea.w	#8,a5
00001818 6100 FB5C                  		bsr.w	NemPCD_NewRow
0000181C 5378 F6F8                  		subq.w	#1,(f_plc_execute).w
00001820 6700                       		beq.s	loc_16DC
00001822 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
00001826 66EC                       		bne.s	loc_16AA
00001828 21C8 F680                  		move.l	a0,(v_plc_buffer).w
0000182C 21CB F6E0                  		move.l	a3,(v_ptrnemcode).w
00001830 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001834 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
00001838 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
0000183C 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001840 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001844                            
00001844                            locret_16DA:
00001844 4E75                       		rts	
00001846                            ; ===========================================================================
00001846                            
00001846                            loc_16DC:
00001846 41F8 F680                  		lea	(v_plc_buffer).w,a0
0000184A 7015                       		moveq	#$15,d0
0000184C                            
0000184C                            loc_16E2:
0000184C 20E8 0006                  		move.l	6(a0),(a0)+
00001850 51C8 FFFA                  		dbf	d0,loc_16E2
00001854 4E75                       		rts	
00001856                            ; End of function ProcessDPLC2
00001856                            
00001856                            ; ---------------------------------------------------------------------------
00001856                            ; Subroutine to	execute	the pattern load cue
00001856                            ; ---------------------------------------------------------------------------
00001856                            
00001856                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001856                            
00001856                            
00001856                            QuickPLC:
00001856 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
0000185C D040                       		add.w	d0,d0
0000185E 3031 0000                  		move.w	(a1,d0.w),d0
00001862 43F1 0000                  		lea	(a1,d0.w),a1
00001866 3219                       		move.w	(a1)+,d1	; get length of PLC
00001868                            
00001868                            	Qplc_Loop:
00001868 2059                       		movea.l	(a1)+,a0	; get art pointer
0000186A 7000                       		moveq	#0,d0
0000186C 3019                       		move.w	(a1)+,d0	; get VRAM address
0000186E E588                       		lsl.l	#2,d0
00001870 E448                       		lsr.w	#2,d0
00001872 0040 4000                  		ori.w	#$4000,d0
00001876 4840                       		swap	d0
00001878 23C0 00C0 0004             		move.l	d0,(vdp_control_port).l ; converted VRAM address to VDP format
0000187E 6100 FA7E                  		bsr.w	NemDec		; decompress
00001882 51C9 FFE4                  		dbf	d1,Qplc_Loop	; repeat for length of PLC
00001886 4E75                       		rts	
00001888                            ; End of function QuickPLC
00001888                            
00001888                            		include	"_inc\Enigma Decompression.asm"
00001888                            ; ---------------------------------------------------------------------------
00001888                            ; Enigma decompression algorithm
00001888                            
00001888                            ; input:
00001888                            ;	d0 = starting art tile (added to each 8x8 before writing to destination)
00001888                            ;	a0 = source address
00001888                            ;	a1 = destination address
00001888                            
00001888                            ; usage:
00001888                            ;	lea	(source).l,a0
00001888                            ;	lea	(destination).l,a1
00001888                            ;	move.w	#arttile,d0
00001888                            ;	bsr.w	EniDec
00001888                            
00001888                            ; See http://www.segaretro.org/Enigma_compression for format description
00001888                            ; ---------------------------------------------------------------------------
00001888                            
00001888                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001888                            
00001888                            
00001888                            EniDec:
00001888 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
0000188C 3640                       		movea.w	d0,a3		; store starting art tile
0000188E 1018                       		move.b	(a0)+,d0
00001890 4880                       		ext.w	d0
00001892 3A40                       		movea.w	d0,a5		; store number of bits in inline copy value
00001894 1818                       		move.b	(a0)+,d4
00001896 E70C                       		lsl.b	#3,d4		; store PCCVH flags bitfield
00001898 3458                       		movea.w	(a0)+,a2
0000189A D4CB                       		adda.w	a3,a2		; store incremental copy word
0000189C 3858                       		movea.w	(a0)+,a4
0000189E D8CB                       		adda.w	a3,a4		; store literal copy word
000018A0 1A18                       		move.b	(a0)+,d5
000018A2 E145                       		asl.w	#8,d5
000018A4 1A18                       		move.b	(a0)+,d5	; get first word in format list
000018A6 7C10                       		moveq	#16,d6		; initial shift value
000018A8                            ; loc_173E:
000018A8                            Eni_Loop:
000018A8 7007                       		moveq	#7,d0		; assume a format list entry is 7 bits
000018AA 3E06                       		move.w	d6,d7
000018AC 9E40                       		sub.w	d0,d7
000018AE 3205                       		move.w	d5,d1
000018B0 EE69                       		lsr.w	d7,d1
000018B2 0241 007F                  		andi.w	#$7F,d1		; get format list entry
000018B6 3401                       		move.w	d1,d2		; and copy it
000018B8 0C41 0040                  		cmpi.w	#$40,d1		; is the high bit of the entry set?
000018BC 6400                       		bhs.s	@sevenbitentry
000018BE 7006                       		moveq	#6,d0		; if it isn't, the entry is actually 6 bits
000018C0 E24A                       		lsr.w	#1,d2
000018C2                            ; loc_1758:
000018C2                            @sevenbitentry:
000018C2 6100 0000                  		bsr.w	EniDec_FetchByte
000018C6 0242 000F                  		andi.w	#$F,d2		; get repeat count
000018CA E849                       		lsr.w	#4,d1
000018CC D241                       		add.w	d1,d1
000018CE 4EFB 1000                  		jmp	EniDec_Index(pc,d1.w)
000018D2                            ; End of function EniDec
000018D2                            
000018D2                            ; ===========================================================================
000018D2                            ; loc_1768:
000018D2                            EniDec_00:
000018D2 32CA                       @loop:		move.w	a2,(a1)+	; copy incremental copy word
000018D4 524A                       		addq.w	#1,a2		; increment it
000018D6 51CA FFFA                  		dbf	d2,@loop	; repeat
000018DA 60CC                       		bra.s	Eni_Loop
000018DC                            ; ===========================================================================
000018DC                            ; loc_1772:
000018DC                            EniDec_01:
000018DC 32CC                       @loop:		move.w	a4,(a1)+	; copy literal copy word
000018DE 51CA FFFC                  		dbf	d2,@loop	; repeat
000018E2 60C4                       		bra.s	Eni_Loop
000018E4                            ; ===========================================================================
000018E4                            ; loc_177A:
000018E4                            EniDec_100:
000018E4 6100 0000                  		bsr.w	EniDec_FetchInlineValue
000018E8                            ; loc_177E:
000018E8 32C1                       @loop:		move.w	d1,(a1)+	; copy inline value
000018EA 51CA FFFC                  		dbf	d2,@loop	; repeat
000018EE                            
000018EE 60B8                       		bra.s	Eni_Loop
000018F0                            ; ===========================================================================
000018F0                            ; loc_1786:
000018F0                            EniDec_101:
000018F0 6100 0000                  		bsr.w	EniDec_FetchInlineValue
000018F4                            ; loc_178A:
000018F4 32C1                       @loop:		move.w	d1,(a1)+	; copy inline value
000018F6 5241                       		addq.w	#1,d1		; increment
000018F8 51CA FFFA                  		dbf	d2,@loop	; repeat
000018FC                            
000018FC 60AA                       		bra.s	Eni_Loop
000018FE                            ; ===========================================================================
000018FE                            ; loc_1794:
000018FE                            EniDec_110:
000018FE 6100 0000                  		bsr.w	EniDec_FetchInlineValue
00001902                            ; loc_1798:
00001902 32C1                       @loop:		move.w	d1,(a1)+	; copy inline value
00001904 5341                       		subq.w	#1,d1		; decrement
00001906 51CA FFFA                  		dbf	d2,@loop	; repeat
0000190A                            
0000190A 609C                       		bra.s	Eni_Loop
0000190C                            ; ===========================================================================
0000190C                            ; loc_17A2:
0000190C                            EniDec_111:
0000190C 0C42 000F                  		cmpi.w	#$F,d2
00001910 6700                       		beq.s	EniDec_Done
00001912                            ; loc_17A8:
00001912 6100 0000                  @loop:		bsr.w	EniDec_FetchInlineValue	; fetch new inline value
00001916 32C1                       		move.w	d1,(a1)+	; copy it
00001918 51CA FFF8                  		dbf	d2,@loop	; and repeat
0000191C                            
0000191C 608A                       		bra.s	Eni_Loop
0000191E                            ; ===========================================================================
0000191E                            ; loc_17B4:
0000191E                            EniDec_Index:
0000191E 60B2                       		bra.s	EniDec_00
00001920 60B0                       		bra.s	EniDec_00
00001922 60B8                       		bra.s	EniDec_01
00001924 60B6                       		bra.s	EniDec_01
00001926 60BC                       		bra.s	EniDec_100
00001928 60C6                       		bra.s	EniDec_101
0000192A 60D2                       		bra.s	EniDec_110
0000192C 60DE                       		bra.s	EniDec_111
0000192E                            ; ===========================================================================
0000192E                            ; loc_17C4:
0000192E                            EniDec_Done:
0000192E 5348                       		subq.w	#1,a0		; go back by one byte
00001930 0C46 0010                  		cmpi.w	#16,d6		; were we going to start on a completely new byte?
00001934 6600                       		bne.s	@notnewbyte	; if not, branch
00001936 5348                       		subq.w	#1,a0		; and another one if needed
00001938                            ; loc_17CE:
00001938                            @notnewbyte:
00001938 3008                       		move.w	a0,d0
0000193A E248                       		lsr.w	#1,d0		; are we on an odd byte?
0000193C 6400                       		bcc.s	@evenbyte	; if not, branch
0000193E 5248                       		addq.w	#1,a0		; ensure we're on an even byte
00001940                            ; loc_17D6:
00001940                            @evenbyte:
00001940 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
00001944 4E75                       		rts	
00001946                            
00001946                            ; ---------------------------------------------------------------------------
00001946                            ; Part of the Enigma decompressor
00001946                            ; Fetches an inline copy value and stores it in d1
00001946                            ; ---------------------------------------------------------------------------
00001946                            
00001946                            ; =============== S U B R O U T I N E =======================================
00001946                            
00001946                            ; loc_17DC:
00001946                            EniDec_FetchInlineValue:
00001946 360B                       		move.w	a3,d3		; copy starting art tile
00001948 1204                       		move.b	d4,d1		; copy PCCVH bitfield
0000194A D201                       		add.b	d1,d1		; is the priority bit set?
0000194C 6400                       		bcc.s	@skippriority	; if not, branch
0000194E 5346                       		subq.w	#1,d6
00001950 0D05                       		btst	d6,d5		; is the priority bit set in the inline render flags?
00001952 6700                       		beq.s	@skippriority	; if not, branch
00001954 0043 8000                  		ori.w	#$8000,d3	; otherwise set priority bit in art tile
00001958                            ; loc_17EE:
00001958                            @skippriority:
00001958 D201                       		add.b	d1,d1		; is the high palette line bit set?
0000195A 6400                       		bcc.s	@skiphighpal	; if not, branch
0000195C 5346                       		subq.w	#1,d6
0000195E 0D05                       		btst	d6,d5
00001960 6700                       		beq.s	@skiphighpal
00001962 0643 4000                  		addi.w	#$4000,d3	; set second palette line bit
00001966                            ; loc_17FC:
00001966                            @skiphighpal:
00001966 D201                       		add.b	d1,d1		; is the low palette line bit set?
00001968 6400                       		bcc.s	@skiplowpal	; if not, branch
0000196A 5346                       		subq.w	#1,d6
0000196C 0D05                       		btst	d6,d5
0000196E 6700                       		beq.s	@skiplowpal
00001970 0643 2000                  		addi.w	#$2000,d3	; set first palette line bit
00001974                            ; loc_180A:
00001974                            @skiplowpal:
00001974 D201                       		add.b	d1,d1		; is the vertical flip flag set?
00001976 6400                       		bcc.s	@skipyflip	; if not, branch
00001978 5346                       		subq.w	#1,d6
0000197A 0D05                       		btst	d6,d5
0000197C 6700                       		beq.s	@skipyflip
0000197E 0043 1000                  		ori.w	#$1000,d3	; set Y-flip bit
00001982                            ; loc_1818:
00001982                            @skipyflip:
00001982 D201                       		add.b	d1,d1		; is the horizontal flip flag set?
00001984 6400                       		bcc.s	@skipxflip	; if not, branch
00001986 5346                       		subq.w	#1,d6
00001988 0D05                       		btst	d6,d5
0000198A 6700                       		beq.s	@skipxflip
0000198C 0043 0800                  		ori.w	#$800,d3	; set X-flip bit
00001990                            ; loc_1826:
00001990                            @skipxflip:
00001990 3205                       		move.w	d5,d1
00001992 3E06                       		move.w	d6,d7
00001994 9E4D                       		sub.w	a5,d7		; subtract length in bits of inline copy value
00001996 6400                       		bcc.s	@enoughbits	; branch if a new word doesn't need to be read
00001998 3C07                       		move.w	d7,d6
0000199A 0646 0010                  		addi.w	#16,d6
0000199E 4447                       		neg.w	d7		; calculate bit deficit
000019A0 EF69                       		lsl.w	d7,d1		; and make space for that many bits
000019A2 1A10                       		move.b	(a0),d5		; get next byte
000019A4 EF3D                       		rol.b	d7,d5		; and rotate the required bits into the lowest positions
000019A6 DE47                       		add.w	d7,d7
000019A8 CA7B 7000                  		and.w	EniDec_Masks-2(pc,d7.w),d5
000019AC D245                       		add.w	d5,d1		; combine upper bits with lower bits
000019AE                            ; loc_1844:
000019AE                            @maskvalue:
000019AE 300D                       		move.w	a5,d0		; get length in bits of inline copy value
000019B0 D040                       		add.w	d0,d0
000019B2 C27B 0000                  		and.w	EniDec_Masks-2(pc,d0.w),d1	; mask value appropriately
000019B6 D243                       		add.w	d3,d1		; add starting art tile
000019B8 1A18                       		move.b	(a0)+,d5
000019BA E14D                       		lsl.w	#8,d5
000019BC 1A18                       		move.b	(a0)+,d5	; get next word
000019BE 4E75                       		rts	
000019C0                            ; ===========================================================================
000019C0                            ; loc_1856:
000019C0                            @enoughbits:
000019C0 6700                       		beq.s	@justenough	; if the word has been exactly exhausted, branch
000019C2 EE69                       		lsr.w	d7,d1	; get inline copy value
000019C4 300D                       		move.w	a5,d0
000019C6 D040                       		add.w	d0,d0
000019C8 C27B 0000                  		and.w	EniDec_Masks-2(pc,d0.w),d1	; and mask it appropriately
000019CC D243                       		add.w	d3,d1	; add starting art tile
000019CE 300D                       		move.w	a5,d0
000019D0 6000                       		bra.s	EniDec_FetchByte
000019D2                            ; ===========================================================================
000019D2                            ; loc_1868:
000019D2                            @justenough:
000019D2 7C10                       		moveq	#16,d6	; reset shift value
000019D4 60D8                       		bra.s	@maskvalue
000019D6                            ; ===========================================================================
000019D6                            ; word_186C:
000019D6                            EniDec_Masks:
000019D6 0001 0003 0007 000F        		dc.w	 1,    3,    7,   $F
000019DE 001F 003F 007F 00FF        		dc.w   $1F,  $3F,  $7F,  $FF
000019E6 01FF 03FF 07FF 0FFF        		dc.w  $1FF, $3FF, $7FF, $FFF
000019EE 1FFF 3FFF 7FFF FFFF        		dc.w $1FFF,$3FFF,$7FFF,$FFFF
000019F6                            
000019F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000019F6                            
000019F6                            ; sub_188C:
000019F6                            EniDec_FetchByte:
000019F6 9C40                       		sub.w	d0,d6	; subtract length of current entry from shift value so that next entry is read next time around
000019F8 0C46 0009                  		cmpi.w	#9,d6	; does a new byte need to be read?
000019FC 6400                       		bhs.s	@locret	; if not, branch
000019FE 5046                       		addq.w	#8,d6
00001A00 E145                       		asl.w	#8,d5
00001A02 1A18                       		move.b	(a0)+,d5
00001A04                            @locret:
00001A04 4E75                       		rts	
00001A06                            ; End of function EniDec_FetchByte
00001A06                            ; End of function EniDec_FetchByte
00001A06                            		include	"_inc\Kosinski Decompression.asm"
00001A06                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001A06                            ; ---------------------------------------------------------------------------
00001A06                            ; KOSINSKI DECOMPRESSION PROCEDURE
00001A06                            ; (sometimes called KOZINSKI decompression)
00001A06                            ;
00001A06                            ; ARGUMENTS:
00001A06                            ; a0 = source address
00001A06                            ; a1 = destination address
00001A06                            ;
00001A06                            ; For format explanation see http://info.sonicretro.org/Kosinski@compression
00001A06                            ; New faster version by written by vladikcomper, with additional improvements by
00001A06                            ; MarkeyJester and Flamewing
00001A06                            ; Converted to ASM68K by Beta Filter.
00001A06                            ; ---------------------------------------------------------------------------
00001A06 =00000001                  Kos_UseLUT: equ 1
00001A06 =00000003                  Kos_LoopUnroll: equ 3
00001A06 =00000001                  Kos_ExtremeUnrolling: equ 1
00001A06                            
00001A06                            Kos_RunBitStream macro
00001A06                                dbra    d2,@skip\@
00001A06                                moveq   #7,d2                   ; Set repeat count to 8.
00001A06                                move.b  d1,d0                   ; Use the remaining 8 bits.
00001A06                                not.w   d3                      ; Have all 16 bits been used up?
00001A06                                bne.s   @skip\@                   ; Branch if not.
00001A06                                move.b  (a0)+,d0                ; Get desc field low-byte.
00001A06                                move.b  (a0)+,d1                ; Get desc field hi-byte.
00001A06                                if Kos_UseLUT=1
00001A06                                move.b  (a4,d0.w),d0            ; Invert bit order...
00001A06                                move.b  (a4,d1.w),d1            ; ... for both bytes.
00001A06                                endif
00001A06                            @skip\@
00001A06                                endm
00001A06                            
00001A06                            Kos_ReadBit macro
00001A06                                if Kos_UseLUT=1
00001A06                                add.b   d0,d0                   ; Get a bit from the bitstream.
00001A06                                else
00001A06                                lsr.b   #1,d0                   ; Get a bit from the bitstream.
00001A06                                endif
00001A06                                endm
00001A06                            ; ===========================================================================
00001A06                            ; KozDec@193A:
00001A06                            KosDec:
00001A06 7E07                           moveq   #(1<<Kos_LoopUnroll)-1,d7
00001A08 7000                           moveq   #0,d0
00001A0A 7200                           moveq   #0,d1
00001A0C 49FA 0000                      lea KosDec_ByteMap(pc),a4       ; Load LUT pointer.
00001A10 1018                           move.b  (a0)+,d0                ; Get desc field low-byte.
00001A12 1218                           move.b  (a0)+,d1                ; Get desc field hi-byte.
00001A14 1034 0000                      move.b  (a4,d0.w),d0            ; Invert bit order...
00001A18 1234 1000                      move.b  (a4,d1.w),d1            ; ... for both bytes.
00001A1C 7407                           moveq   #7,d2                   ; Set repeat count to 8.
00001A1E 7600                           moveq   #0,d3                   ; d3 will be desc field switcher.
00001A20 6000                           bra.s   @FetchNewCode
00001A22                            ; ---------------------------------------------------------------------------
00001A22                            @FetchCodeLoop:
00001A22                                ; Code 1 (Uncompressed byte).
00001A3A 12D8                           move.b  (a0)+,(a1)+
00001A3C                            
00001A3C                            @FetchNewCode:
00001A3E 65E2                           bcs.s   @FetchCodeLoop          ; If code = 1, branch.
00001A40                            
00001A40                                ; Codes 00 and 01.
00001A40 7AFF                           moveq   #-1,d5
00001A42 4BD1                           lea (a1),a5
00001A5E 6500 0000                      bcs.w   @Code_01
00001A62                            
00001A62                                ; Code 00 (Dictionary ref. short).
00001A7C 6500                           bcs.s   @Copy45
00001A98 6500                           bcs.s   @Copy3
00001AB2 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001AB4 DAC5                           adda.w  d5,a5
00001AB6 12DD                           move.b  (a5)+,(a1)+
00001AB8 12DD                           move.b  (a5)+,(a1)+
00001ABA 6080                           bra.s   @FetchNewCode
00001ABC                            ; ---------------------------------------------------------------------------
00001ABC                            @Copy3:
00001AD4 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001AD6 DAC5                           adda.w  d5,a5
00001AD8 12DD                           move.b  (a5)+,(a1)+
00001ADA 12DD                           move.b  (a5)+,(a1)+
00001ADC 12DD                           move.b  (a5)+,(a1)+
00001ADE 6000 FF5C                      bra.w   @FetchNewCode
00001AE2                            ; ---------------------------------------------------------------------------
00001AE2                            @Copy45:
00001AFC 6500                           bcs.s   @Copy5
00001B16 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001B18 DAC5                           adda.w  d5,a5
00001B1A 12DD                           move.b  (a5)+,(a1)+
00001B1C 12DD                           move.b  (a5)+,(a1)+
00001B1E 12DD                           move.b  (a5)+,(a1)+
00001B20 12DD                           move.b  (a5)+,(a1)+
00001B22 6000 FF18                      bra.w   @FetchNewCode
00001B26                            ; ---------------------------------------------------------------------------
00001B26                            @Copy5:
00001B3E 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001B40 DAC5                           adda.w  d5,a5
00001B42 12DD                           move.b  (a5)+,(a1)+
00001B44 12DD                           move.b  (a5)+,(a1)+
00001B46 12DD                           move.b  (a5)+,(a1)+
00001B48 12DD                           move.b  (a5)+,(a1)+
00001B4A 12DD                           move.b  (a5)+,(a1)+
00001B4C 6000 FEEE                      bra.w   @FetchNewCode
00001B50                            ; ---------------------------------------------------------------------------
00001B50                            ; ---------------------------------------------------------------------------
00001B50                            @Code_01:
00001B50 7800                           moveq   #0,d4                   ; d4 will contain copy count.
00001B52                                ; Code 01 (Dictionary ref. long / special).
00001B6A 1C18                           move.b  (a0)+,d6                ; d6 = %LLLLLLLL.
00001B6C 1818                           move.b  (a0)+,d4                ; d4 = %HHHHHCCC.
00001B6E 1A04                           move.b  d4,d5                   ; d5 = %11111111 HHHHHCCC.
00001B70 EB4D                           lsl.w   #5,d5                   ; d5 = %111HHHHH CCC00000.
00001B72 1A06                           move.b  d6,d5                   ; d5 = %111HHHHH LLLLLLLL.
00001B74 C847                           and.w   d7,d4                   ; d4 = %00000CCC.
00001B76 6600                           bne.s   @StreamCopy             ; if CCC=0, branch.
00001B78                            
00001B78                                ; special mode (extended counter)
00001B78 1818                           move.b  (a0)+,d4                ; Read cnt
00001B7A 6700                           beq.s   @Quit                   ; If cnt=0, quit decompression.
00001B7C 5304                           subq.b  #1,d4
00001B7E 6700 FEBC                      beq.w   @FetchNewCode           ; If cnt=1, fetch a new code.
00001B82                            
00001B82 DAC5                           adda.w  d5,a5
00001B84 12DD                           move.b  (a5)+,(a1)+             ; Do 1 extra copy (to compensate +1 to copy counter).
00001B86 3C04                           move.w  d4,d6
00001B88 4646                           not.w   d6
00001B8A CC47                           and.w   d7,d6
00001B8C DC46                           add.w   d6,d6
00001B8E E64C                           lsr.w   #Kos_LoopUnroll,d4
00001B90 4EFB 6000                      jmp @largecopy(pc,d6.w)
00001B94                            ; ---------------------------------------------------------------------------
00001B94                            @largecopy:
00001B94                                rept (1<<Kos_LoopUnroll)
00001B94                                move.b  (a5)+,(a1)+
00001B94 12DD 12DD 12DD 12DD 12DD+      endr
00001BA4 51CC FFEE                      dbra    d4,@largecopy
00001BA8 6000 FE92                      bra.w   @FetchNewCode
00001BAC                            ; ---------------------------------------------------------------------------
00001BAC                            @StreamCopy:
00001BAC DAC5                           adda.w  d5,a5
00001BAE 12DD                           move.b  (a5)+,(a1)+             ; Do 1 extra copy (to compensate +1 to copy counter).
00001BB0 BF44                           eor.w   d7,d4
00001BB2 D844                           add.w   d4,d4
00001BB4 4EFB 4000                      jmp @mediumcopy(pc,d4.w)
00001BB8                            ; ---------------------------------------------------------------------------
00001BB8                            @mediumcopy:
00001BB8                                rept 8
00001BB8                                move.b  (a5)+,(a1)+
00001BB8 12DD 12DD 12DD 12DD 12DD+      endr
00001BC8 6000 FE72                      bra.w   @FetchNewCode
00001BCC                            ; ---------------------------------------------------------------------------
00001BCC                            @Quit:
00001BCC 4E75                           rts                             ; End of function KosDec.
00001BCE                            ; ===========================================================================
00001BCE                            KosDec_ByteMap:
00001BCE 0080 40C0 20A0 60E0 1090+      dc.b    $00,$80,$40,$C0,$20,$A0,$60,$E0,$10,$90,$50,$D0,$30,$B0,$70,$F0
00001BDE 0888 48C8 28A8 68E8 1898+      dc.b    $08,$88,$48,$C8,$28,$A8,$68,$E8,$18,$98,$58,$D8,$38,$B8,$78,$F8
00001BEE 0484 44C4 24A4 64E4 1494+      dc.b    $04,$84,$44,$C4,$24,$A4,$64,$E4,$14,$94,$54,$D4,$34,$B4,$74,$F4
00001BFE 0C8C 4CCC 2CAC 6CEC 1C9C+      dc.b    $0C,$8C,$4C,$CC,$2C,$AC,$6C,$EC,$1C,$9C,$5C,$DC,$3C,$BC,$7C,$FC
00001C0E 0282 42C2 22A2 62E2 1292+      dc.b    $02,$82,$42,$C2,$22,$A2,$62,$E2,$12,$92,$52,$D2,$32,$B2,$72,$F2
00001C1E 0A8A 4ACA 2AAA 6AEA 1A9A+      dc.b    $0A,$8A,$4A,$CA,$2A,$AA,$6A,$EA,$1A,$9A,$5A,$DA,$3A,$BA,$7A,$FA
00001C2E 0686 46C6 26A6 66E6 1696+      dc.b    $06,$86,$46,$C6,$26,$A6,$66,$E6,$16,$96,$56,$D6,$36,$B6,$76,$F6
00001C3E 0E8E 4ECE 2EAE 6EEE 1E9E+      dc.b    $0E,$8E,$4E,$CE,$2E,$AE,$6E,$EE,$1E,$9E,$5E,$DE,$3E,$BE,$7E,$FE
00001C4E 0181 41C1 21A1 61E1 1191+      dc.b    $01,$81,$41,$C1,$21,$A1,$61,$E1,$11,$91,$51,$D1,$31,$B1,$71,$F1
00001C5E 0989 49C9 29A9 69E9 1999+      dc.b    $09,$89,$49,$C9,$29,$A9,$69,$E9,$19,$99,$59,$D9,$39,$B9,$79,$F9
00001C6E 0585 45C5 25A5 65E5 1595+      dc.b    $05,$85,$45,$C5,$25,$A5,$65,$E5,$15,$95,$55,$D5,$35,$B5,$75,$F5
00001C7E 0D8D 4DCD 2DAD 6DED 1D9D+      dc.b    $0D,$8D,$4D,$CD,$2D,$AD,$6D,$ED,$1D,$9D,$5D,$DD,$3D,$BD,$7D,$FD
00001C8E 0383 43C3 23A3 63E3 1393+      dc.b    $03,$83,$43,$C3,$23,$A3,$63,$E3,$13,$93,$53,$D3,$33,$B3,$73,$F3
00001C9E 0B8B 4BCB 2BAB 6BEB 1B9B+      dc.b    $0B,$8B,$4B,$CB,$2B,$AB,$6B,$EB,$1B,$9B,$5B,$DB,$3B,$BB,$7B,$FB
00001CAE 0787 47C7 27A7 67E7 1797+      dc.b    $07,$87,$47,$C7,$27,$A7,$67,$E7,$17,$97,$57,$D7,$37,$B7,$77,$F7
00001CBE 0F8F 4FCF 2FAF 6FEF 1F9F+      dc.b    $0F,$8F,$4F,$CF,$2F,$AF,$6F,$EF,$1F,$9F,$5F,$DF,$3F,$BF,$7F,$FF
00001CCE                            ; ===========================================================================
00001CCE                            ; ===========================================================================
00001CCE                            
00001CCE                            		include	"_inc\PaletteCycle.asm"
00001CCE                            ; ---------------------------------------------------------------------------
00001CCE                            ; Palette cycling routine loading subroutine
00001CCE                            ; ---------------------------------------------------------------------------
00001CCE                            
00001CCE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CCE                            
00001CCE                            
00001CCE                            PaletteCycle:
00001CCE 7400                       		moveq	#0,d2
00001CD0 7000                       		moveq	#0,d0
00001CD2 1038 FE10                  		move.b	(v_zone).w,d0	; get level number
00001CD6 D040                       		add.w	d0,d0
00001CD8 303B 0000                  		move.w	PCycle_Index(pc,d0.w),d0
00001CDC 4EFB 0000                  		jmp	PCycle_Index(pc,d0.w) ; jump to relevant palette routine
00001CE0                            ; End of function PaletteCycle
00001CE0                            
00001CE0                            ; ===========================================================================
00001CE0                            ; ---------------------------------------------------------------------------
00001CE0                            ; Palette cycling routines
00001CE0                            ; ---------------------------------------------------------------------------
00001CE0 0000                       PCycle_Index:	dc.w PCycle_GHZ-PCycle_Index
00001CE2 0000                       		dc.w PCycle_LZ-PCycle_Index
00001CE4 0000                       		dc.w PCycle_MZ-PCycle_Index
00001CE6 0000                       		dc.w PalCycle_SLZ-PCycle_Index
00001CE8 0000                       		dc.w PalCycle_SYZ-PCycle_Index
00001CEA 0000                       		dc.w PalCycle_SBZ-PCycle_Index
00001CEC 0000                       		dc.w PCycle_GHZ-PCycle_Index	; Ending
00001CEE                            
00001CEE                            
00001CEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CEE                            
00001CEE                            
00001CEE                            PCycle_Title:
00001CEE 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001CF4 6000                       		bra.s	PCycGHZ_Go
00001CF6                            ; ===========================================================================
00001CF6                            
00001CF6                            PCycle_GHZ:
00001CF6 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001CFC                            
00001CFC                            PCycGHZ_Go:
00001CFC 5378 F634                  		subq.w	#1,(v_pcyc_time).w ; decrement timer
00001D00 6A00                       		bpl.s	PCycGHZ_Skip	; if time remains, branch
00001D02                            
00001D02 31FC 0003 F634             		move.w	#3,(v_pcyc_time).w ; reset timer to 5 frames
00001D08 3038 F632                  		move.w	(v_pcyc_num).w,d0 ; get cycle number
00001D0C 5278 F632                  		addq.w	#1,(v_pcyc_num).w ; increment cycle number
00001D10 0240 0003                  		andi.w	#3,d0		; if cycle > 3, reset to 0
00001D14 E748                       		lsl.w	#3,d0
00001D16 43F8 FB50                  		lea	(v_pal_dry+$50).w,a1
00001D1A 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001D1E 22B0 0004                  		move.l	4(a0,d0.w),(a1)	; copy palette data to RAM
00001D22                            
00001D22                            PCycGHZ_Skip:
00001D22 4E75                       		rts	
00001D24                            ; End of function PCycle_GHZ
00001D24                            
00001D24                            
00001D24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D24                            
00001D24                            
00001D24                            PCycle_LZ:
00001D24                            ; Waterfalls
00001D24 5378 F634                  		subq.w	#1,(v_pcyc_time).w ; decrement timer
00001D28 6A00                       		bpl.s	PCycLZ_Skip1	; if time remains, branch
00001D2A                            
00001D2A 31FC 0003 F634             		move.w	#3,(v_pcyc_time).w ; reset timer to 2 frames
00001D30 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001D34 5278 F632                  		addq.w	#1,(v_pcyc_num).w ; increment cycle number
00001D38 0240 0003                  		andi.w	#3,d0		; if cycle > 3, reset to 0
00001D3C E748                       		lsl.w	#3,d0
00001D3E 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001D44 0C38 0003 FE11             		cmpi.b	#3,(v_act).w	; check if level is SBZ3
00001D4A 6600                       		bne.s	PCycLZ_NotSBZ3
00001D4C 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	palette instead
00001D52                            
00001D52                            	PCycLZ_NotSBZ3:
00001D52 43F8 FB56                  		lea	(v_pal_dry+$56).w,a1
00001D56 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001D5A 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001D5E 43F8 FAD6                  		lea	(v_pal_water+$56).w,a1
00001D62 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001D66 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001D6A                            
00001D6A                            PCycLZ_Skip1:
00001D6A                            ; Conveyor belts
00001D6A                            		;move.w	(v_framecount).w,d0
00001D6A                            		;andi.w	#7,d0
00001D6A                            		;move.b	PCycLZ_Seq(pc,d0.w),d0 ; get byte from palette sequence
00001D6A                            		;beq.s	PCycLZ_Skip2	; if byte is 0, branch
00001D6A                            		;moveq	#1,d1
00001D6A                            		;tst.b	(f_conveyrev).w	; have conveyor belts been reversed?
00001D6A                            		;beq.s	PCycLZ_NoRev	; if not, branch
00001D6A                            		;neg.w	d1
00001D6A                            
00001D6A                            	;PCycLZ_NoRev:
00001D6A                            		;move.w	(v_pal_buffer).w,d0
00001D6A                            		;andi.w	#3,d0
00001D6A                            		;add.w	d1,d0
00001D6A                            		;cmpi.w	#3,d0
00001D6A                            		;bcs.s	loc_1A0A
00001D6A                            		;move.w	d0,d1
00001D6A                            		;moveq	#0,d0
00001D6A                            		;tst.w	d1
00001D6A                            		;bpl.s	loc_1A0A
00001D6A                            		;moveq	#2,d0
00001D6A                            
00001D6A                            ;loc_1A0A:
00001D6A                            		;move.w	d0,(v_pal_buffer).w
00001D6A                            		;add.w	d0,d0
00001D6A                            		;move.w	d0,d1
00001D6A                            		;add.w	d0,d0
00001D6A                            		;add.w	d1,d0
00001D6A                            		;lea	(Pal_LZCyc2).l,a0
00001D6A                            		;lea	(v_pal_dry+$76).w,a1
00001D6A                            		;move.l	(a0,d0.w),(a1)+
00001D6A                            		;move.w	4(a0,d0.w),(a1)
00001D6A                            		;lea	(Pal_LZCyc3).l,a0
00001D6A                            		;lea	(v_pal_water+$76).w,a1
00001D6A                            		;move.l	(a0,d0.w),(a1)+
00001D6A                            		;move.w	4(a0,d0.w),(a1)
00001D6A                            
00001D6A                            ;PCycLZ_Skip2:
00001D6A 4E75                       		rts	
00001D6C                            ; End of function PCycle_LZ
00001D6C                            
00001D6C                            ; ===========================================================================
00001D6C 0100 0001 0000 0100        PCycLZ_Seq:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001D74                            ; ===========================================================================
00001D74                            
00001D74                            PCycle_MZ:
00001D74 4E75                       		rts	
00001D76                            
00001D76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D76                            
00001D76                            
00001D76                            PalCycle_SLZ:
00001D76 5378 F634                  		subq.w	#1,(v_pcyc_time).w
00001D7A 6A00                       		bpl.s	locret_1A80
00001D7C 31FC 0007 F634             		move.w	#7,(v_pcyc_time).w
00001D82 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001D86 5240                       		addq.w	#1,d0
00001D88 0C40 0006                  		cmpi.w	#6,d0
00001D8C 6500                       		bcs.s	loc_1A60
00001D8E 7000                       		moveq	#0,d0
00001D90                            
00001D90                            loc_1A60:
00001D90 31C0 F632                  		move.w	d0,(v_pcyc_num).w
00001D94 3200                       		move.w	d0,d1
00001D96 D241                       		add.w	d1,d1
00001D98 D041                       		add.w	d1,d0
00001D9A D040                       		add.w	d0,d0
00001D9C 41F9 0000 0000             		lea	(Pal_SLZCyc).l,a0
00001DA2 43F8 FB56                  		lea	(v_pal_dry+$56).w,a1
00001DA6 32B0 0000                  		move.w	(a0,d0.w),(a1)
00001DAA 2370 0002 0004             		move.l	2(a0,d0.w),4(a1)
00001DB0                            
00001DB0                            locret_1A80:
00001DB0 4E75                       		rts	
00001DB2                            ; End of function PalCycle_SLZ
00001DB2                            
00001DB2                            
00001DB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DB2                            
00001DB2                            
00001DB2                            PalCycle_SYZ:
00001DB2 5378 F634                  		subq.w	#1,(v_pcyc_time).w
00001DB6 6A00                       		bpl.s	locret_1AC6
00001DB8 31FC 0005 F634             		move.w	#5,(v_pcyc_time).w
00001DBE 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001DC2 5278 F632                  		addq.w	#1,(v_pcyc_num).w
00001DC6 0240 0003                  		andi.w	#3,d0
00001DCA E548                       		lsl.w	#2,d0
00001DCC 3200                       		move.w	d0,d1
00001DCE D040                       		add.w	d0,d0
00001DD0 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001DD6 43F8 FB6E                  		lea	(v_pal_dry+$6E).w,a1
00001DDA 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001DDE 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001DE2 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001DE8 43F8 FB76                  		lea	(v_pal_dry+$76).w,a1
00001DEC 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001DF0 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001DF6                            
00001DF6                            locret_1AC6:
00001DF6 4E75                       		rts	
00001DF8                            ; End of function PalCycle_SYZ
00001DF8                            
00001DF8                            
00001DF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DF8                            
00001DF8                            
00001DF8                            PalCycle_SBZ:
00001DF8 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001DFE 4A38 FE11                  		tst.b	(v_act).w
00001E02 6700                       		beq.s	loc_1ADA
00001E04 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001E0A                            
00001E0A                            loc_1ADA:
00001E0A 43F8 F650                  		lea	(v_pal_buffer).w,a1
00001E0E 321A                       		move.w	(a2)+,d1
00001E10                            
00001E10                            loc_1AE0:
00001E10 5311                       		subq.b	#1,(a1)
00001E12 6B00                       		bmi.s	loc_1AEA
00001E14 5489                       		addq.l	#2,a1
00001E16 5C8A                       		addq.l	#6,a2
00001E18 6000                       		bra.s	loc_1B06
00001E1A                            ; ===========================================================================
00001E1A                            
00001E1A                            loc_1AEA:
00001E1A 12DA                       		move.b	(a2)+,(a1)+
00001E1C 1011                       		move.b	(a1),d0
00001E1E 5200                       		addq.b	#1,d0
00001E20 B01A                       		cmp.b	(a2)+,d0
00001E22 6500                       		bcs.s	loc_1AF6
00001E24 7000                       		moveq	#0,d0
00001E26                            
00001E26                            loc_1AF6:
00001E26 12C0                       		move.b	d0,(a1)+
00001E28 0240 000F                  		andi.w	#$F,d0
00001E2C D040                       		add.w	d0,d0
00001E2E 305A                       		movea.w	(a2)+,a0
00001E30 365A                       		movea.w	(a2)+,a3
00001E32 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001E36                            
00001E36                            loc_1B06:
00001E36 51C9 FFD8                  		dbf	d1,loc_1AE0
00001E3A 5378 F634                  		subq.w	#1,(v_pcyc_time).w
00001E3E 6A00                       		bpl.s	locret_1B64
00001E40 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001E46 31FC 0003 F634             		move.w	#3,(v_pcyc_time).w
00001E4C 4A38 FE11                  		tst.b	(v_act).w
00001E50 6700                       		beq.s	loc_1B2E
00001E52 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001E58 31FC 0002 F634             		move.w	#2,(v_pcyc_time).w
00001E5E                            
00001E5E                            loc_1B2E:
00001E5E 72FF                       		moveq	#-1,d1
00001E60 4A38 F7C0                  		tst.b	(f_conveyrev).w
00001E64 6700                       		beq.s	loc_1B38
00001E66 4441                       		neg.w	d1
00001E68                            
00001E68                            loc_1B38:
00001E68 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001E6C 0240 0003                  		andi.w	#3,d0
00001E70 D041                       		add.w	d1,d0
00001E72 0C40 0003                  		cmpi.w	#3,d0
00001E76 6500                       		bcs.s	loc_1B52
00001E78 3200                       		move.w	d0,d1
00001E7A 7000                       		moveq	#0,d0
00001E7C 4A41                       		tst.w	d1
00001E7E 6A00                       		bpl.s	loc_1B52
00001E80 7002                       		moveq	#2,d0
00001E82                            
00001E82                            loc_1B52:
00001E82 31C0 F632                  		move.w	d0,(v_pcyc_num).w
00001E86 D040                       		add.w	d0,d0
00001E88 43F8 FB58                  		lea	(v_pal_dry+$58).w,a1
00001E8C 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001E90 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001E94                            
00001E94                            locret_1B64:
00001E94 4E75                       		rts	
00001E96                            ; End of function PalCycle_SBZ
00001E96                            ; End of function PalCycle_SBZ
00001E96                            
00001E96                            Pal_TitleCyc:	incbin	"palette\Cycle - Title Screen Water.bin"
00001EB6                            Pal_GHZCyc:	incbin	"palette\Cycle - GHZ.bin"
00001ED6                            Pal_LZCyc1:	incbin	"palette\Cycle - LZ Waterfall.bin"
00001EF6                            Pal_LZCyc2:	incbin	"palette\Cycle - LZ Conveyor Belt.bin"
00001F08                            Pal_LZCyc3:	incbin	"palette\Cycle - LZ Conveyor Belt Underwater.bin"
00001F1A                            Pal_SBZ3Cyc1:	incbin	"palette\Cycle - SBZ3 Waterfall.bin"
00001F82                            Pal_SLZCyc:	incbin	"palette\Cycle - SLZ.bin"
00001FA6                            Pal_SYZCyc1:	incbin	"palette\Cycle - SYZ1.bin"
00001FC6                            Pal_SYZCyc2:	incbin	"palette\Cycle - SYZ2.bin"
00001FD6                            
00001FD6                            		include	"_inc\SBZ Palette Scripts.asm"
00001FD6                            ; ---------------------------------------------------------------------------
00001FD6                            ; Scrap Brain Zone palette cycling script
00001FD6                            ; ---------------------------------------------------------------------------
00001FD6                            
00001FD6                            mSBZp:	macro duration,colors,paladdress,ramaddress
00001FD6                            	dc.b duration, colors
00001FD6                            	dc.w paladdress, ramaddress
00001FD6                            	endm
00001FD6                            
00001FD6                            ; duration in frames, number of colors, palette address, RAM address
00001FD6                            
00001FD6                            Pal_SBZCycList1:
00001FD6 0000                       	dc.w ((end_SBZCycList1-Pal_SBZCycList1-2)/6)-1
00001FD8 0708 0000 FB50             	mSBZp	7,8,Pal_SBZCyc1,v_pal_dry+$50
00001FDE 0D08 0000 FB52             	mSBZp	$D,8,Pal_SBZCyc2,v_pal_dry+$52
00001FE4 0E08 0000 FB6E             	mSBZp	$E,8,Pal_SBZCyc3,v_pal_dry+$6E
00001FEA 0B08 0000 FB70             	mSBZp	$B,8,Pal_SBZCyc5,v_pal_dry+$70
00001FF0 0708 0000 FB72             	mSBZp	7,8,Pal_SBZCyc6,v_pal_dry+$72
00001FF6 1C10 0000 FB7E             	mSBZp	$1C,$10,Pal_SBZCyc7,v_pal_dry+$7E
00001FFC 0303 0000 FB78             	mSBZp	3,3,Pal_SBZCyc8,v_pal_dry+$78
00002002 0303 0000 FB7A             	mSBZp	3,3,Pal_SBZCyc8+2,v_pal_dry+$7A
00002008 0303 0000 FB7C             	mSBZp	3,3,Pal_SBZCyc8+4,v_pal_dry+$7C
0000200E                            end_SBZCycList1:
0000200E                            	even
0000200E                            
0000200E                            Pal_SBZCycList2:
0000200E 0000                       	dc.w ((end_SBZCycList2-Pal_SBZCycList2-2)/6)-1
00002010 0708 0000 FB50             	mSBZp	7,8,Pal_SBZCyc1,v_pal_dry+$50
00002016 0D08 0000 FB52             	mSBZp	$D,8,Pal_SBZCyc2,v_pal_dry+$52
0000201C 0908 0000 FB70             	mSBZp	9,8,Pal_SBZCyc9,v_pal_dry+$70
00002022 0708 0000 FB72             	mSBZp	7,8,Pal_SBZCyc6,v_pal_dry+$72
00002028 0303 0000 FB78             	mSBZp	3,3,Pal_SBZCyc8,v_pal_dry+$78
0000202E 0303 0000 FB7A             	mSBZp	3,3,Pal_SBZCyc8+2,v_pal_dry+$7A
00002034 0303 0000 FB7C             	mSBZp	3,3,Pal_SBZCyc8+4,v_pal_dry+$7C
0000203A                            end_SBZCycList2:
0000203A                            	even
0000203A                            	even
0000203A                            
0000203A                            Pal_SBZCyc1:	incbin	"palette\Cycle - SBZ 1.bin"
0000204A                            Pal_SBZCyc2:	incbin	"palette\Cycle - SBZ 2.bin"
0000205A                            Pal_SBZCyc3:	incbin	"palette\Cycle - SBZ 3.bin"
0000206A                            Pal_SBZCyc4:	incbin	"palette\Cycle - SBZ 4.bin"
00002076                            Pal_SBZCyc5:	incbin	"palette\Cycle - SBZ 5.bin"
00002086                            Pal_SBZCyc6:	incbin	"palette\Cycle - SBZ 6.bin"
00002096                            Pal_SBZCyc7:	incbin	"palette\Cycle - SBZ 7.bin"
000020B6                            Pal_SBZCyc8:	incbin	"palette\Cycle - SBZ 8.bin"
000020C0                            Pal_SBZCyc9:	incbin	"palette\Cycle - SBZ 9.bin"
000020D0                            Pal_SBZCyc10:	incbin	"palette\Cycle - SBZ 10.bin"
000020DC                            ; ---------------------------------------------------------------------------
000020DC                            ; Subroutine to	fade in from black
000020DC                            ; ---------------------------------------------------------------------------
000020DC                            
000020DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020DC                            
000020DC                            
000020DC                            PaletteFadeIn:
000020DC 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; set start position = 0; size = $40
000020E2                            
000020E2                            PalFadeIn_Alt:				; start position and size are already set
000020E2 7000                       		moveq	#0,d0
000020E4 41F8 FB00                  		lea	(v_pal_dry).w,a0
000020E8 1038 F626                  		move.b	(v_pfade_start).w,d0
000020EC D0C0                       		adda.w	d0,a0
000020EE 7200                       		moveq	#cBlack,d1
000020F0 1038 F627                  		move.b	(v_pfade_size).w,d0
000020F4                            
000020F4                            	@fill:
000020F4 30C1                       		move.w	d1,(a0)+
000020F6 51C8 FFFC                  		dbf	d0,@fill 	; fill palette with black
000020FA                            
000020FA 383C 0015                  		move.w	#$15,d4
000020FE                            
000020FE                            	@mainloop:
000020FE 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
00002104 6100 0000                  		bsr.w	WaitForVBla
00002108 6100                       		bsr.s	FadeIn_FromBlack
0000210A 6100 F64A                  		bsr.w	RunPLC
0000210E 51CC FFEE                  		dbf	d4,@mainloop
00002112 4E75                       		rts	
00002114                            ; End of function PaletteFadeIn
00002114                            
00002114                            
00002114                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002114                            
00002114                            
00002114                            FadeIn_FromBlack:
00002114 7000                       		moveq	#0,d0
00002116 41F8 FB00                  		lea	(v_pal_dry).w,a0
0000211A 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
0000211E 1038 F626                  		move.b	(v_pfade_start).w,d0
00002122 D0C0                       		adda.w	d0,a0
00002124 D2C0                       		adda.w	d0,a1
00002126 1038 F627                  		move.b	(v_pfade_size).w,d0
0000212A                            
0000212A                            	@addcolour:
0000212A 6100                       		bsr.s	FadeIn_AddColour ; increase colour
0000212C 51C8 FFFC                  		dbf	d0,@addcolour	; repeat for size of palette
00002130                            
00002130 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	; is level Labyrinth?
00002136 6600                       		bne.s	@exit		; if not, branch
00002138                            
00002138 7000                       		moveq	#0,d0
0000213A 41F8 FA80                  		lea	(v_pal_water).w,a0
0000213E 43F8 FA00                  		lea	(v_pal_water_dup).w,a1
00002142 1038 F626                  		move.b	(v_pfade_start).w,d0
00002146 D0C0                       		adda.w	d0,a0
00002148 D2C0                       		adda.w	d0,a1
0000214A 1038 F627                  		move.b	(v_pfade_size).w,d0
0000214E                            
0000214E                            	@addcolour2:
0000214E 6100                       		bsr.s	FadeIn_AddColour ; increase colour again
00002150 51C8 FFFC                  		dbf	d0,@addcolour2 ; repeat
00002154                            
00002154                            @exit:
00002154 4E75                       		rts	
00002156                            ; End of function FadeIn_FromBlack
00002156                            
00002156                            
00002156                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002156                            
00002156                            
00002156                            FadeIn_AddColour:
00002156                            @addblue:
00002156 3419                       		move.w	(a1)+,d2
00002158 3610                       		move.w	(a0),d3
0000215A B642                       		cmp.w	d2,d3		; is colour already at threshold level?
0000215C 6700                       		beq.s	@next		; if yes, branch
0000215E 3203                       		move.w	d3,d1
00002160 0641 0200                  		addi.w	#$200,d1	; increase blue	value
00002164 B242                       		cmp.w	d2,d1		; has blue reached threshold level?
00002166 6200                       		bhi.s	@addgreen	; if yes, branch
00002168 30C1                       		move.w	d1,(a0)+	; update palette
0000216A 4E75                       		rts	
0000216C                            ; ===========================================================================
0000216C                            
0000216C                            @addgreen:
0000216C 3203                       		move.w	d3,d1
0000216E 0641 0020                  		addi.w	#$20,d1		; increase green value
00002172 B242                       		cmp.w	d2,d1
00002174 6200                       		bhi.s	@addred
00002176 30C1                       		move.w	d1,(a0)+	; update palette
00002178 4E75                       		rts	
0000217A                            ; ===========================================================================
0000217A                            
0000217A                            @addred:
0000217A 5458                       		addq.w	#2,(a0)+	; increase red value
0000217C 4E75                       		rts	
0000217E                            ; ===========================================================================
0000217E                            
0000217E                            @next:
0000217E 5448                       		addq.w	#2,a0		; next colour
00002180 4E75                       		rts	
00002182                            ; End of function FadeIn_AddColour
00002182                            
00002182                            
00002182                            ; ---------------------------------------------------------------------------
00002182                            ; Subroutine to fade out to black
00002182                            ; ---------------------------------------------------------------------------
00002182                            
00002182                            
00002182                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002182                            
00002182                            
00002182                            PaletteFadeOut:
00002182 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; start position = 0; size = $40
00002188 383C 0015                  		move.w	#$15,d4
0000218C                            
0000218C                            	@mainloop:
0000218C 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
00002192 6100 0000                  		bsr.w	WaitForVBla
00002196 6100                       		bsr.s	FadeOut_ToBlack
00002198 6100 F5BC                  		bsr.w	RunPLC
0000219C 51CC FFEE                  		dbf	d4,@mainloop
000021A0 4E75                       		rts	
000021A2                            ; End of function PaletteFadeOut
000021A2                            
000021A2                            
000021A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021A2                            
000021A2                            
000021A2                            FadeOut_ToBlack:
000021A2 7000                       		moveq	#0,d0
000021A4 41F8 FB00                  		lea	(v_pal_dry).w,a0
000021A8 1038 F626                  		move.b	(v_pfade_start).w,d0
000021AC D0C0                       		adda.w	d0,a0
000021AE 1038 F627                  		move.b	(v_pfade_size).w,d0
000021B2                            
000021B2                            	@decolour:
000021B2 6100                       		bsr.s	FadeOut_DecColour ; decrease colour
000021B4 51C8 FFFC                  		dbf	d0,@decolour	; repeat for size of palette
000021B8                            
000021B8 7000                       		moveq	#0,d0
000021BA 41F8 FA80                  		lea	(v_pal_water).w,a0
000021BE 1038 F626                  		move.b	(v_pfade_start).w,d0
000021C2 D0C0                       		adda.w	d0,a0
000021C4 1038 F627                  		move.b	(v_pfade_size).w,d0
000021C8                            
000021C8                            	@decolour2:
000021C8 6100                       		bsr.s	FadeOut_DecColour
000021CA 51C8 FFFC                  		dbf	d0,@decolour2
000021CE 4E75                       		rts	
000021D0                            ; End of function FadeOut_ToBlack
000021D0                            
000021D0                            
000021D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021D0                            
000021D0                            
000021D0                            FadeOut_DecColour:
000021D0                            @dered:
000021D0 3410                       		move.w	(a0),d2
000021D2 6700                       		beq.s	@next
000021D4 3202                       		move.w	d2,d1
000021D6 0241 000E                  		andi.w	#$E,d1
000021DA 6700                       		beq.s	@degreen
000021DC 5558                       		subq.w	#2,(a0)+	; decrease red value
000021DE 4E75                       		rts	
000021E0                            ; ===========================================================================
000021E0                            
000021E0                            @degreen:
000021E0 3202                       		move.w	d2,d1
000021E2 0241 00E0                  		andi.w	#$E0,d1
000021E6 6700                       		beq.s	@deblue
000021E8 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
000021EC 4E75                       		rts	
000021EE                            ; ===========================================================================
000021EE                            
000021EE                            @deblue:
000021EE 3202                       		move.w	d2,d1
000021F0 0241 0E00                  		andi.w	#$E00,d1
000021F4 6700                       		beq.s	@next
000021F6 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
000021FA 4E75                       		rts	
000021FC                            ; ===========================================================================
000021FC                            
000021FC                            @next:
000021FC 5448                       		addq.w	#2,a0
000021FE 4E75                       		rts	
00002200                            ; End of function FadeOut_DecColour
00002200                            
00002200                            ; ---------------------------------------------------------------------------
00002200                            ; Subroutine to	fade in from white (Special Stage)
00002200                            ; ---------------------------------------------------------------------------
00002200                            
00002200                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002200                            
00002200                            
00002200                            PaletteWhiteIn:
00002200 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; start position = 0; size = $40
00002206 7000                       		moveq	#0,d0
00002208 41F8 FB00                  		lea	(v_pal_dry).w,a0
0000220C 1038 F626                  		move.b	(v_pfade_start).w,d0
00002210 D0C0                       		adda.w	d0,a0
00002212 323C 0EEE                  		move.w	#cWhite,d1
00002216 1038 F627                  		move.b	(v_pfade_size).w,d0
0000221A                            
0000221A                            	@fill:
0000221A 30C1                       		move.w	d1,(a0)+
0000221C 51C8 FFFC                  		dbf	d0,@fill 	; fill palette with white
00002220                            
00002220 383C 0015                  		move.w	#$15,d4
00002224                            
00002224                            	@mainloop:
00002224 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
0000222A 6100 0000                  		bsr.w	WaitForVBla
0000222E 6100                       		bsr.s	WhiteIn_FromWhite
00002230 6100 F524                  		bsr.w	RunPLC
00002234 51CC FFEE                  		dbf	d4,@mainloop
00002238 4E75                       		rts	
0000223A                            ; End of function PaletteWhiteIn
0000223A                            
0000223A                            
0000223A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000223A                            
0000223A                            
0000223A                            WhiteIn_FromWhite:
0000223A 7000                       		moveq	#0,d0
0000223C 41F8 FB00                  		lea	(v_pal_dry).w,a0
00002240 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
00002244 1038 F626                  		move.b	(v_pfade_start).w,d0
00002248 D0C0                       		adda.w	d0,a0
0000224A D2C0                       		adda.w	d0,a1
0000224C 1038 F627                  		move.b	(v_pfade_size).w,d0
00002250                            
00002250                            	@decolour:
00002250 6100                       		bsr.s	WhiteIn_DecColour ; decrease colour
00002252 51C8 FFFC                  		dbf	d0,@decolour	; repeat for size of palette
00002256                            
00002256 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	; is level Labyrinth?
0000225C 6600                       		bne.s	@exit		; if not, branch
0000225E 7000                       		moveq	#0,d0
00002260 41F8 FA80                  		lea	(v_pal_water).w,a0
00002264 43F8 FA00                  		lea	(v_pal_water_dup).w,a1
00002268 1038 F626                  		move.b	(v_pfade_start).w,d0
0000226C D0C0                       		adda.w	d0,a0
0000226E D2C0                       		adda.w	d0,a1
00002270 1038 F627                  		move.b	(v_pfade_size).w,d0
00002274                            
00002274                            	@decolour2:
00002274 6100                       		bsr.s	WhiteIn_DecColour
00002276 51C8 FFFC                  		dbf	d0,@decolour2
0000227A                            
0000227A                            	@exit:
0000227A 4E75                       		rts	
0000227C                            ; End of function WhiteIn_FromWhite
0000227C                            
0000227C                            
0000227C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000227C                            
0000227C                            
0000227C                            WhiteIn_DecColour:
0000227C                            @deblue:
0000227C 3419                       		move.w	(a1)+,d2
0000227E 3610                       		move.w	(a0),d3
00002280 B642                       		cmp.w	d2,d3
00002282 6700                       		beq.s	@next
00002284 3203                       		move.w	d3,d1
00002286 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
0000228A 6500                       		blo.s	@degreen
0000228C B242                       		cmp.w	d2,d1
0000228E 6500                       		blo.s	@degreen
00002290 30C1                       		move.w	d1,(a0)+
00002292 4E75                       		rts	
00002294                            ; ===========================================================================
00002294                            
00002294                            @degreen:
00002294 3203                       		move.w	d3,d1
00002296 0441 0020                  		subi.w	#$20,d1		; decrease green value
0000229A 6500                       		blo.s	@dered
0000229C B242                       		cmp.w	d2,d1
0000229E 6500                       		blo.s	@dered
000022A0 30C1                       		move.w	d1,(a0)+
000022A2 4E75                       		rts	
000022A4                            ; ===========================================================================
000022A4                            
000022A4                            @dered:
000022A4 5558                       		subq.w	#2,(a0)+	; decrease red value
000022A6 4E75                       		rts	
000022A8                            ; ===========================================================================
000022A8                            
000022A8                            @next:
000022A8 5448                       		addq.w	#2,a0
000022AA 4E75                       		rts	
000022AC                            ; End of function WhiteIn_DecColour
000022AC                            
000022AC                            ; ---------------------------------------------------------------------------
000022AC                            ; Subroutine to fade to white (Special Stage)
000022AC                            ; ---------------------------------------------------------------------------
000022AC                            
000022AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022AC                            
000022AC                            
000022AC                            PaletteWhiteOut:
000022AC 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; start position = 0; size = $40
000022B2 383C 0015                  		move.w	#$15,d4
000022B6                            
000022B6                            	@mainloop:
000022B6 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
000022BC 6100 0000                  		bsr.w	WaitForVBla
000022C0 6100                       		bsr.s	WhiteOut_ToWhite
000022C2 6100 F492                  		bsr.w	RunPLC
000022C6 51CC FFEE                  		dbf	d4,@mainloop
000022CA 4E75                       		rts	
000022CC                            ; End of function PaletteWhiteOut
000022CC                            
000022CC                            
000022CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022CC                            
000022CC                            
000022CC                            WhiteOut_ToWhite:
000022CC 7000                       		moveq	#0,d0
000022CE 41F8 FB00                  		lea	(v_pal_dry).w,a0
000022D2 1038 F626                  		move.b	(v_pfade_start).w,d0
000022D6 D0C0                       		adda.w	d0,a0
000022D8 1038 F627                  		move.b	(v_pfade_size).w,d0
000022DC                            
000022DC                            	@addcolour:
000022DC 6100                       		bsr.s	WhiteOut_AddColour
000022DE 51C8 FFFC                  		dbf	d0,@addcolour
000022E2                            
000022E2 7000                       		moveq	#0,d0
000022E4 41F8 FA80                  		lea	(v_pal_water).w,a0
000022E8 1038 F626                  		move.b	(v_pfade_start).w,d0
000022EC D0C0                       		adda.w	d0,a0
000022EE 1038 F627                  		move.b	(v_pfade_size).w,d0
000022F2                            
000022F2                            	@addcolour2:
000022F2 6100                       		bsr.s	WhiteOut_AddColour
000022F4 51C8 FFFC                  		dbf	d0,@addcolour2
000022F8 4E75                       		rts	
000022FA                            ; End of function WhiteOut_ToWhite
000022FA                            
000022FA                            
000022FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022FA                            
000022FA                            
000022FA                            WhiteOut_AddColour:
000022FA                            @addred:
000022FA 3410                       		move.w	(a0),d2
000022FC 0C42 0EEE                  		cmpi.w	#cWhite,d2
00002300 6700                       		beq.s	@next
00002302 3202                       		move.w	d2,d1
00002304 0241 000E                  		andi.w	#$E,d1
00002308 0C41 000E                  		cmpi.w	#cRed,d1
0000230C 6700                       		beq.s	@addgreen
0000230E 5458                       		addq.w	#2,(a0)+	; increase red value
00002310 4E75                       		rts	
00002312                            ; ===========================================================================
00002312                            
00002312                            @addgreen:
00002312 3202                       		move.w	d2,d1
00002314 0241 00E0                  		andi.w	#$E0,d1
00002318 0C41 00E0                  		cmpi.w	#cGreen,d1
0000231C 6700                       		beq.s	@addblue
0000231E 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
00002322 4E75                       		rts	
00002324                            ; ===========================================================================
00002324                            
00002324                            @addblue:
00002324 3202                       		move.w	d2,d1
00002326 0241 0E00                  		andi.w	#$E00,d1
0000232A 0C41 0E00                  		cmpi.w	#cBlue,d1
0000232E 6700                       		beq.s	@next
00002330 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
00002334 4E75                       		rts	
00002336                            ; ===========================================================================
00002336                            
00002336                            @next:
00002336 5448                       		addq.w	#2,a0
00002338 4E75                       		rts	
0000233A                            ; End of function WhiteOut_AddColour
0000233A                            
0000233A                            ; ---------------------------------------------------------------------------
0000233A                            ; Palette cycling routine - Sega logo
0000233A                            ; ---------------------------------------------------------------------------
0000233A                            
0000233A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000233A                            
0000233A                            
0000233A                            PalCycle_Sega:
0000233A 4A38 F635                  		tst.b	(v_pcyc_time+1).w
0000233E 6600                       		bne.s	loc_206A
00002340 43F8 FB20                  		lea	(v_pal_dry+$20).w,a1
00002344 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
0000234A 7205                       		moveq	#5,d1
0000234C 3038 F632                  		move.w	(v_pcyc_num).w,d0
00002350                            
00002350                            loc_2020:
00002350 6A00                       		bpl.s	loc_202A
00002352 5448                       		addq.w	#2,a0
00002354 5341                       		subq.w	#1,d1
00002356 5440                       		addq.w	#2,d0
00002358 60F6                       		bra.s	loc_2020
0000235A                            ; ===========================================================================
0000235A                            
0000235A                            loc_202A:
0000235A 3400                       		move.w	d0,d2
0000235C 0242 001E                  		andi.w	#$1E,d2
00002360 6600                       		bne.s	loc_2034
00002362 5440                       		addq.w	#2,d0
00002364                            
00002364                            loc_2034:
00002364 0C40 0060                  		cmpi.w	#$60,d0
00002368 6400                       		bhs.s	loc_203E
0000236A 3398 0000                  		move.w	(a0)+,(a1,d0.w)
0000236E                            
0000236E                            loc_203E:
0000236E 5440                       		addq.w	#2,d0
00002370 51C9 FFE8                  		dbf	d1,loc_202A
00002374                            
00002374 3038 F632                  		move.w	(v_pcyc_num).w,d0
00002378 5440                       		addq.w	#2,d0
0000237A 3400                       		move.w	d0,d2
0000237C 0242 001E                  		andi.w	#$1E,d2
00002380 6600                       		bne.s	loc_2054
00002382 5440                       		addq.w	#2,d0
00002384                            
00002384                            loc_2054:
00002384 0C40 0064                  		cmpi.w	#$64,d0
00002388 6D00                       		blt.s	loc_2062
0000238A 31FC 0401 F634             		move.w	#$401,(v_pcyc_time).w
00002390 70F4                       		moveq	#-$C,d0
00002392                            
00002392                            loc_2062:
00002392 31C0 F632                  		move.w	d0,(v_pcyc_num).w
00002396 7001                       		moveq	#1,d0
00002398 4E75                       		rts	
0000239A                            ; ===========================================================================
0000239A                            
0000239A                            loc_206A:
0000239A 5338 F634                  		subq.b	#1,(v_pcyc_time).w
0000239E 6A00                       		bpl.s	loc_20BC
000023A0 11FC 0004 F634             		move.b	#4,(v_pcyc_time).w
000023A6 3038 F632                  		move.w	(v_pcyc_num).w,d0
000023AA 0640 000C                  		addi.w	#$C,d0
000023AE 0C40 0030                  		cmpi.w	#$30,d0
000023B2 6500                       		blo.s	loc_2088
000023B4 7000                       		moveq	#0,d0
000023B6 4E75                       		rts	
000023B8                            ; ===========================================================================
000023B8                            
000023B8                            loc_2088:
000023B8 31C0 F632                  		move.w	d0,(v_pcyc_num).w
000023BC 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
000023C2 41F0 0000                  		lea	(a0,d0.w),a0
000023C6 43F8 FB04                  		lea	(v_pal_dry+$04).w,a1
000023CA 22D8                       		move.l	(a0)+,(a1)+
000023CC 22D8                       		move.l	(a0)+,(a1)+
000023CE 3298                       		move.w	(a0)+,(a1)
000023D0 43F8 FB20                  		lea	(v_pal_dry+$20).w,a1
000023D4 7000                       		moveq	#0,d0
000023D6 722C                       		moveq	#$2C,d1
000023D8                            
000023D8                            loc_20A8:
000023D8 3400                       		move.w	d0,d2
000023DA 0242 001E                  		andi.w	#$1E,d2
000023DE 6600                       		bne.s	loc_20B2
000023E0 5440                       		addq.w	#2,d0
000023E2                            
000023E2                            loc_20B2:
000023E2 3390 0000                  		move.w	(a0),(a1,d0.w)
000023E6 5440                       		addq.w	#2,d0
000023E8 51C9 FFEE                  		dbf	d1,loc_20A8
000023EC                            
000023EC                            loc_20BC:
000023EC 7001                       		moveq	#1,d0
000023EE 4E75                       		rts	
000023F0                            ; End of function PalCycle_Sega
000023F0                            
000023F0                            ; ===========================================================================
000023F0                            
000023F0                            Pal_Sega1:	incbin	"palette\Sega1.bin"
000023FC                            Pal_Sega2:	incbin	"palette\Sega2.bin"
0000242C                            
0000242C                            ; ---------------------------------------------------------------------------
0000242C                            ; Subroutines to load palettes
0000242C                            
0000242C                            ; input:
0000242C                            ;	d0 = index number for palette
0000242C                            ; ---------------------------------------------------------------------------
0000242C                            
0000242C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000242C                            
0000242C                            
0000242C                            ; ---------------------------------------------------------------------------
0000242C                            ; Subroutines to load pallets
0000242C                            ; ---------------------------------------------------------------------------
0000242C                            
0000242C                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000242C                            
0000242C                            PalLoad1:
0000242C 1238 FE11                  		move.b ($FFFFFE11),d1
00002430 43F9 0000 0000             		lea (PalPointers).l,a1
00002436 0C01 0000                  		cmp.b #0,d1
0000243A 6700 0000                  		beq.w PalLoad1_Continue
0000243E 43F9 0000 0000             		lea (PalPointers2).l,a1
00002444 0C01 0001                  		cmp.b #1,d1
00002448 6700 0000                  		beq.w PalLoad1_Continue
0000244C 43F9 0000 0000             		lea (PalPointers3).l,a1
00002452                            
00002452                            PalLoad1_Continue:
00002452 E748                       		lsl.w #3,d0
00002454 D2C0                       		adda.w d0,a1
00002456 2459                       		movea.l (a1)+,a2
00002458 3659                       		movea.w (a1)+,a3
0000245A D6FC 0080                  		adda.w #$80,a3
0000245E 3E19                       		move.w (a1)+,d7
00002460                            
00002460                            loc_2110:
00002460 26DA                       		move.l (a2)+,(a3)+
00002462 51CF FFFC                  		dbf d7,loc_2110
00002466 4E75                       		rts
00002468                             ; End of function PalLoad1
00002468                            
00002468                            
00002468                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00002468                            
00002468                            PalLoad2:
00002468 1238 FE11                  		move.b ($FFFFFE11),d1
0000246C 43F9 0000 0000             		lea (PalPointers).l,a1
00002472 0C01 0000                  		cmp.b #0,d1
00002476 6700 0000                  		beq.w PalLoad2_Continue
0000247A 43F9 0000 0000             		lea (PalPointers2).l,a1
00002480 0C01 0001                  		cmp.b #1,d1
00002484 6700 0000                  		beq.w PalLoad2_Continue
00002488 43F9 0000 0000             		lea (PalPointers3).l,a1
0000248E                            
0000248E                            
0000248E                            PalLoad2_Continue:
0000248E E748                       		lsl.w #3,d0
00002490 D2C0                       		adda.w d0,a1
00002492 2459                       		movea.l (a1)+,a2
00002494 3659                       		movea.w (a1)+,a3
00002496 3E19                       		move.w (a1)+,d7
00002498                            
00002498                            loc_2128:
00002498 26DA                       		move.l (a2)+,(a3)+
0000249A 51CF FFFC                  		dbf d7,loc_2128
0000249E 4E75                       		rts
000024A0                            ; End of function PalLoad2
000024A0                            
000024A0                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
000024A0                            
000024A0                            
000024A0                            PalLoad_Loop: ;Quick load - TIS
000024A0                                    
000024A0 34D9                               move.w    (a1)+,(a2)+              ;Copy pallete data to RAM
000024A2 51C8 FFFC                          dbf    d0,PalLoad_Loop               ;Loop d0 (length)
000024A6 4E75                               rts
000024A8                            
000024A8                            ; ---------------------------------------------------------------------------
000024A8                            ; Underwater pallet loading subroutine
000024A8                            ; ---------------------------------------------------------------------------
000024A8                            
000024A8                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000024A8                            
000024A8                            PalLoad3_Water:
000024A8 1238 FE11                  		move.b ($FFFFFE11),d1
000024AC 43F9 0000 0000             		lea (PalPointers).l,a1
000024B2 0C01 0000                  		cmp.b #0,d1
000024B6 6700 0000                  		beq.w PalLoad3_Continue
000024BA 43F9 0000 0000             		lea (PalPointers2).l,a1
000024C0 0C01 0001                  		cmp.b #1,d1
000024C4 6700 0000                  		beq.w PalLoad3_Continue
000024C8 43F9 0000 0000             		lea (PalPointers3).l,a1
000024CE                            
000024CE                            PalLoad3_Continue:
000024CE E748                       		lsl.w #3,d0
000024D0 D2C0                       		adda.w d0,a1
000024D2 2459                       		movea.l (a1)+,a2
000024D4 3659                       		movea.w (a1)+,a3
000024D6 96FC 0080                  		suba.w #$80,a3
000024DA 3E19                       		move.w (a1)+,d7
000024DC                            
000024DC                            loc_2144:
000024DC 26DA                       		move.l (a2)+,(a3)+
000024DE 51CF FFFC                  		dbf d7,loc_2144
000024E2 4E75                       		rts
000024E4                            ; End of function PalLoad3_Water
000024E4                            
000024E4                            
000024E4                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000024E4                            
000024E4                            
000024E4                            PalLoad4_Water:
000024E4 1238 FE11                  		move.b ($FFFFFE11),d1
000024E8 43F9 0000 0000             		lea (PalPointers).l,a1
000024EE 0C01 0000                  		cmp.b #0,d1
000024F2 6700 0000                  		beq.w PalLoad4_Continue
000024F6 43F9 0000 0000             		lea (PalPointers2).l,a1
000024FC 0C01 0001                  		cmp.b #1,d1
00002500 6700 0000                  		beq.w PalLoad4_Continue
00002504 43F9 0000 0000             		lea (PalPointers3).l,a1
0000250A                            
0000250A                            PalLoad4_Continue:
0000250A E748                       		lsl.w #3,d0
0000250C D2C0                       		adda.w d0,a1
0000250E 2459                       		movea.l (a1)+,a2
00002510 3659                       		movea.w (a1)+,a3
00002512 96FC 0100                  		suba.w #$100,a3
00002516 3E19                       		move.w (a1)+,d7
00002518                            loc_2160:
00002518 26DA                       		move.l (a2)+,(a3)+
0000251A 51CF FFFC                  		dbf d7,loc_2160
0000251E 4E75                       		rts
00002520                             ; End of function PalLoad4_Water
00002520                            
00002520                            ; ===========================================================================
00002520                            
00002520                            		include	"_inc\Palette Pointers.asm"
00002520                            ; ---------------------------------------------------------------------------
00002520                            ; Palette pointers
00002520                            ; ---------------------------------------------------------------------------
00002520                            
00002520                            palp:	macro paladdress,ramaddress,colors
00002520                            	dc.l paladdress
00002520                            	dc.w ramaddress, (colors>>1)-1
00002520                            	endm
00002520                            
00002520                            PalPointers:
00002520                            
00002520                            ; palette address, RAM address, colors
00002520                            
00002520 0000 0000 FB00 001F        ptr_Pal_SegaBG:		palp	Pal_SegaBG,v_pal_dry,$40		; 0 - Sega logo
00002528 0000 0000 FB00 001F        ptr_Pal_Title:		palp	Pal_Title,v_pal_dry,$40		; 1 - title screen
00002530 0000 0000 FB00 001F        ptr_Pal_LevelSel:	palp	Pal_LevelSel,v_pal_dry,$40		; 2 - level select
00002538 0000 0000 FB00 0007        ptr_Pal_Sonic:		palp	Pal_Sonic,v_pal_dry,$10		; 3 - Sonic
00002540                            Pal_Levels:
00002540 0000 0000 FB20 0017        ptr_Pal_GHZ:		palp	Pal_GHZ,v_pal_dry+$20, $30		; 4 - GHZ
00002548 0000 0000 FB20 0017        ptr_Pal_LZ:		palp	Pal_LZ,v_pal_dry+$20,$30		; 5 - LZ
00002550 0000 0000 FB20 0017        ptr_Pal_MZ:		palp	Pal_MZ,v_pal_dry+$20,$30		; 6 - MZ
00002558 0000 0000 FB20 0017        ptr_Pal_SLZ:		palp	Pal_SLZ,v_pal_dry+$20,$30		; 7 - SLZ
00002560 0000 0000 FB20 0017        ptr_Pal_SYZ:		palp	Pal_SYZ,v_pal_dry+$20,$30		; 8 - SYZ
00002568 0000 0000 FB20 0017        ptr_Pal_SBZ1:		palp	Pal_SBZ1,v_pal_dry+$20,$30		; 9 - SBZ1
00002570 0000 0000 FB00 001F        ptr_Pal_Special:	palp	Pal_Special,v_pal_dry,$40		; $A (10) - special stage
00002578 0000 0000 FB00 001F        ptr_Pal_LZWater:	palp	Pal_LZWater,v_pal_dry,$40		; $B (11) - LZ underwater
00002580 0000 0000 FB20 0017        ptr_Pal_SBZ3:		palp	Pal_SBZ3,v_pal_dry+$20,$30		; $C (12) - SBZ3
00002588 0000 0000 FB00 001F        ptr_Pal_SBZ3Water:	palp	Pal_SBZ3Water,v_pal_dry,$40		; $D (13) - SBZ3 underwater
00002590 0000 0000 FB20 0017        ptr_Pal_SBZ2:		palp	Pal_SBZ2,v_pal_dry+$20,$30		; $E (14) - SBZ2
00002598 0000 0000 FB00 0007        ptr_Pal_LZSonWater:	palp	Pal_LZSonWater,v_pal_dry,$10	; $F (15) - LZ Sonic underwater
000025A0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat:	palp	Pal_SBZ3SonWat,v_pal_dry,$10	; $10 (16) - SBZ3 Sonic underwater
000025A8 0000 0000 FB00 001F        ptr_Pal_SSResult:	palp	Pal_SSResult,v_pal_dry,$40		; $11 (17) - special stage results
000025B0 0000 0000 FB00 000F        ptr_Pal_Continue:	palp	Pal_Continue,v_pal_dry,$20		; $12 (18) - special stage results continue
000025B8 0000 0000 FB00 001F        ptr_Pal_Ending:		palp	Pal_Ending,v_pal_dry,$40		; $13 (19) - ending sequence
000025C0 0000 0000 FB00 001F        ptr_Pal_Options:		palp	Pal_Options,v_pal_dry,$40		; $14 (20) - options screen
000025C8 0000 0000 FB00 0007        ptr_Pal_Sonic2:		palp	Pal_Sonic2,v_pal_dry,$10		; $15 (20) - Sonic (Sonic 1)
000025D0 0000 0000 FB00 0007        ptr_Pal_Sonic3:		palp	Pal_Sonic3,v_pal_dry,$10		; $16 (21) - Sonic (Beta)
000025D8 0000 0000 FB00 0007        ptr_Pal_Sonic4:		palp	Pal_Sonic4,v_pal_dry,$10		; $17 (22) - Sonic (Midnight)
000025E0 0000 0000 FB00 0007        ptr_Pal_Sonic5:		palp	Pal_Sonic5,v_pal_dry,$10		; $18 (23) - Sonic (C2)
000025E8 0000 0000 FB00 0007        ptr_Pal_Sonic6:		palp	Pal_Sonic6,v_pal_dry,$10		; $19 (24) - Sonic (Crackers)
000025F0 0000 0000 FB00 0007        ptr_Pal_Sonic7:		palp	Pal_Sonic7,v_pal_dry,$10		; $1A (25) - Sonic (RHS)
000025F8 0000 0000 FB00 0007        ptr_Pal_Sonic8:		palp	Pal_Sonic8,v_pal_dry,$10		; $1B (26) - Sonic (Socket)
00002600 0000 0000 FB00 0007        ptr_Pal_Sonic9:		palp	Pal_Sonic9,v_pal_dry,$10		; $1C (27) - Sonic (Cringe)
00002608 0000 0000 FB00 0007        ptr_Pal_Sonic10:		palp	Pal_Sonic10,v_pal_dry,$10		; $1D (28) - Sonic (Darker)
00002610 0000 0000 FB00 0007        ptr_Pal_SonWater2:		palp	Pal_SonWater2,v_pal_dry,$10		; $15 (20) - Sonic Underwater (Sonic 1)
00002618 0000 0000 FB00 0007        ptr_Pal_SonWater3:		palp	Pal_SonWater3,v_pal_dry,$10		; $16 (21) - Sonic Underwater (Beta)
00002620 0000 0000 FB00 0007        ptr_Pal_SonWater4:		palp	Pal_SonWater4,v_pal_dry,$10		; $17 (22) - Sonic Underwater (Midnight)
00002628 0000 0000 FB00 0007        ptr_Pal_SonWater5:		palp	Pal_SonWater5,v_pal_dry,$10		; $18 (23) - Sonic Underwater (C2)
00002630 0000 0000 FB00 0007        ptr_Pal_SonWater6:		palp	Pal_SonWater6,v_pal_dry,$10		; $19 (24) - Sonic Underwater (Crackers)
00002638 0000 0000 FB00 0007        ptr_Pal_SonWater7:		palp	Pal_SonWater7,v_pal_dry,$10		; $1A (25) - Sonic Underwater (RHS)
00002640 0000 0000 FB00 0007        ptr_Pal_SonWater8:		palp	Pal_SonWater8,v_pal_dry,$10		; $1B (26) - Sonic Underwater (Socket)
00002648 0000 0000 FB00 0007        ptr_Pal_SonWater9:		palp	Pal_SonWater9,v_pal_dry,$10		; $1C (27) - Sonic Underwater (Cringe)
00002650 0000 0000 FB00 0007        ptr_Pal_SonWater10:		palp	Pal_SonWater10,v_pal_dry,$10		; $1D (28) - Sonic Underwater (Darker)
00002658 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat2:	palp	Pal_SBZ3SonWat2,v_pal_dry,$10		; $15 (20) - Sonic Underwater (Sonic 1)
00002660 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat3:	palp	Pal_SBZ3SonWat3,v_pal_dry,$10	; $16 (21) - Sonic Underwater (Beta)
00002668 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat4:	palp	Pal_SBZ3SonWat4,v_pal_dry,$10	; $17 (22) - Sonic Underwater (Midnight)
00002670 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat5:	palp	Pal_SBZ3SonWat5,v_pal_dry,$10	; $18 (23) - Sonic Underwater (C2)
00002678 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat6:	palp	Pal_SBZ3SonWat6,v_pal_dry,$10	; $19 (24) - Sonic Underwater (Crackers)
00002680 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat7:	palp	Pal_SBZ3SonWat7,v_pal_dry,$10	; $1A (25) - Sonic Underwater (RHS)
00002688 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat8:	palp	Pal_SBZ3SonWat8,v_pal_dry,$10	; $1B (26) - Sonic Underwater (Socket)
00002690 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat9:	palp	Pal_SBZ3SonWat9,v_pal_dry,$10	; $1C (27) - Sonic Underwater (Cringe)
00002698 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat10:	palp	Pal_SBZ3SonWat10,v_pal_dry,$10	; $1D (28) - Sonic Underwater (Darker)
000026A0                            			even
000026A0                            
000026A0                            PalPointers2:
000026A0                            
000026A0                            ; palette address, RAM address, colors
000026A0                            ; Note, Uses Duplicate entries to ensure they are in the correct place, but they are not needed in the IDs
000026A0 0000 0000 FB00 001F        ptr_Pal_SegaBG_D:		palp	Pal_SegaBG,v_pal_dry,$40		; 0 - Sega logo
000026A8 0000 0000 FB00 001F        ptr_Pal_Title_D:		palp	Pal_Title,v_pal_dry,$40		; 1 - title screen
000026B0 0000 0000 FB00 001F        ptr_Pal_LevelSel_D:	palp	Pal_LevelSel,v_pal_dry,$40		; 2 - level select
000026B8 0000 0000 FB00 0007        ptr_Pal_SonicD:		palp	Pal_Sonic,v_pal_dry,$10		; 3 - Sonic
000026C0                            Pal_Levels_2:
000026C0 0000 0000 FB20 0017        ptr_Pal_GHZ2:		palp	Pal_GHZ2,v_pal_dry+$20, $30		; 4 - GHZ
000026C8 0000 0000 FB20 0017        ptr_Pal_LZ2:		palp	Pal_LZ2,v_pal_dry+$20,$30		; 5 - LZ
000026D0 0000 0000 FB20 0017        ptr_Pal_MZ2:		palp	Pal_MZ2,v_pal_dry+$20,$30		; 6 - MZ
000026D8 0000 0000 FB20 0017        ptr_Pal_SLZ2:		palp	Pal_SLZ2,v_pal_dry+$20,$30		; 7 - SLZ
000026E0 0000 0000 FB20 0017        ptr_Pal_SYZ2:		palp	Pal_SYZ2,v_pal_dry+$20,$30		; 8 - SYZ
000026E8 0000 0000 FB20 0017        ptr_Pal_SBZ1_D:		palp	Pal_SBZ1,v_pal_dry+$20,$30		; 9 - SBZ1
000026F0 0000 0000 FB00 001F        ptr_Pal_Special_D:	palp	Pal_Special,v_pal_dry,$40		; $A (10) - special stage
000026F8 0000 0000 FB00 001F        ptr_Pal_LZWatr2:	palp	Pal_LZWatr2,v_pal_dry,$40		; $B (11) - LZ underwater
00002700 0000 0000 FB20 0017        ptr_Pal_SBZ3_D:		palp	Pal_SBZ3,v_pal_dry+$20,$30		; $C (12) - SBZ3
00002708 0000 0000 FB00 001F        ptr_Pal_SBZ3Water_D:	palp	Pal_SBZ3Water,v_pal_dry,$40		; $D (13) - SBZ3 underwater
00002710 0000 0000 FB20 0017        ptr_Pal_SBZ2_D:		palp	Pal_SBZ2,v_pal_dry+$20,$30		; $E (14) - SBZ2
00002718 0000 0000 FB00 0007        ptr_Pal_LZSonWatr2:	palp	Pal_LZSonWatr2,v_pal_dry,$10	; $F (15) - LZ Sonic underwater
00002720 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat_D:	palp	Pal_SBZ3SonWat,v_pal_dry,$10	; $10 (16) - SBZ3 Sonic underwater
00002728 0000 0000 FB00 001F        ptr_Pal_SSResult_D:	palp	Pal_SSResult,v_pal_dry,$40		; $11 (17) - special stage results
00002730 0000 0000 FB00 000F        ptr_Pal_Continue_D:	palp	Pal_Continue,v_pal_dry,$20		; $12 (18) - special stage results continue
00002738 0000 0000 FB00 001F        ptr_Pal_Options_D:		palp	Pal_Options,v_pal_dry,$40		; $13 (20) - options screen
00002740 0000 0000 FB00 001F        ptr_Pal_Ending_D:		palp	Pal_Ending,v_pal_dry,$40		; $14 (21) - ending sequence
00002748 0000 0000 FB00 0007        ptr_Pal_Sonic2_D:		palp	Pal_Sonic2,v_pal_dry,$10		; $15 (22) - Sonic (Sonic 1)
00002750 0000 0000 FB00 0007        ptr_Pal_Sonic3_D:		palp	Pal_Sonic3,v_pal_dry,$10		; $16 (23) - Sonic (Beta)
00002758 0000 0000 FB00 0007        ptr_Pal_Sonic4_D:		palp	Pal_Sonic4,v_pal_dry,$10		; $17 (24) - Sonic (Midnight)
00002760 0000 0000 FB00 0007        ptr_Pal_Sonic5_D:		palp	Pal_Sonic5,v_pal_dry,$10		; $18 (25) - Sonic (C2)
00002768 0000 0000 FB00 0007        ptr_Pal_Sonic6_D:		palp	Pal_Sonic6,v_pal_dry,$10		; $19 (26) - Sonic (Crackers)
00002770 0000 0000 FB00 0007        ptr_Pal_Sonic7_D:		palp	Pal_Sonic7,v_pal_dry,$10		; $1A (27) - Sonic (RHS)
00002778 0000 0000 FB00 0007        ptr_Pal_Sonic8_D:		palp	Pal_Sonic8,v_pal_dry,$10		; $1B (28) - Sonic (Socket)
00002780 0000 0000 FB00 0007        ptr_Pal_Sonic9_D:		palp	Pal_Sonic9,v_pal_dry,$10		; $1C (29) - Sonic (Cringe)
00002788 0000 0000 FB00 0007        ptr_Pal_Sonic10_D:		palp	Pal_Sonic10,v_pal_dry,$10		; $1D (30) - Sonic (Darker)
00002790 0000 0000 FB00 0007        ptr_Pal_SonWater2_D:		palp	Pal_SonWater2,v_pal_dry,$10		; $15 (31) - Sonic Underwater (Sonic 1)
00002798 0000 0000 FB00 0007        ptr_Pal_SonWater3_D:		palp	Pal_SonWater3,v_pal_dry,$10		; $16 (32) - Sonic Underwater (Beta)
000027A0 0000 0000 FB00 0007        ptr_Pal_SonWater4_D:		palp	Pal_SonWater4,v_pal_dry,$10		; $17 (33) - Sonic Underwater (Midnight)
000027A8 0000 0000 FB00 0007        ptr_Pal_SonWater5_D:		palp	Pal_SonWater5,v_pal_dry,$10		; $18 (34) - Sonic Underwater (C2)
000027B0 0000 0000 FB00 0007        ptr_Pal_SonWater6_D:		palp	Pal_SonWater6,v_pal_dry,$10		; $19 (35) - Sonic Underwater (Crackers)
000027B8 0000 0000 FB00 0007        ptr_Pal_SonWater7_D:		palp	Pal_SonWater7,v_pal_dry,$10		; $1A (36) - Sonic Underwater (RHS)
000027C0 0000 0000 FB00 0007        ptr_Pal_SonWater8_D:		palp	Pal_SonWater8,v_pal_dry,$10		; $1B (37) - Sonic Underwater (Socket)
000027C8 0000 0000 FB00 0007        ptr_Pal_SonWater9_D:		palp	Pal_SonWater9,v_pal_dry,$10		; $1C (38) - Sonic Underwater (Cringe)
000027D0 0000 0000 FB00 0007        ptr_Pal_SonWater10_D:		palp	Pal_SonWater10,v_pal_dry,$10		; $1D (39) - Sonic Underwater (Darker)
000027D8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat2D:	palp	Pal_SBZ3SonWat2,v_pal_dry,$10		; $15 (40) - Sonic Underwater (Sonic 1)
000027E0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat3D:	palp	Pal_SBZ3SonWat3,v_pal_dry,$10	; $16 (41) - Sonic Underwater (Beta)
000027E8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat4D:	palp	Pal_SBZ3SonWat4,v_pal_dry,$10	; $17 (42) - Sonic Underwater (Midnight)
000027F0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat5D:	palp	Pal_SBZ3SonWat5,v_pal_dry,$10	; $18 (43) - Sonic Underwater (C2)
000027F8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat6D:	palp	Pal_SBZ3SonWat6,v_pal_dry,$10	; $19 (44) - Sonic Underwater (Crackers)
00002800 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat7D:	palp	Pal_SBZ3SonWat7,v_pal_dry,$10	; $1A (45) - Sonic Underwater (RHS)
00002808 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat8D:	palp	Pal_SBZ3SonWat8,v_pal_dry,$10	; $1B (46) - Sonic Underwater (Socket)
00002810 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat9D:	palp	Pal_SBZ3SonWat9,v_pal_dry,$10	; $1C (47) - Sonic Underwater (Cringe)
00002818 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat10D:	palp	Pal_SBZ3SonWat10,v_pal_dry,$10	; $1D (48) - Sonic Underwater (Darker)
00002820                            			even
00002820                            			
00002820                            PalPointers3:
00002820                            			
00002820                            ; Note, Uses Duplicate entries to ensure they are in the correct place, but they are not needed in the IDs
00002820 0000 0000 FB00 001F        ptr_Pal_SegaBG_E:		palp	Pal_SegaBG,v_pal_dry,$40		; 0 - Sega logo
00002828 0000 0000 FB00 001F        ptr_Pal_Title_E:		palp	Pal_Title,v_pal_dry,$40		; 1 - title screen
00002830 0000 0000 FB00 001F        ptr_Pal_LevelSel_E:		palp	Pal_LevelSel,v_pal_dry,$40		; 2 - level select
00002838 0000 0000 FB00 0007        ptr_Pal_SonicE:			palp	Pal_Sonic,v_pal_dry,$10		; 3 - Sonic
00002840                            Pal_Levels_3:
00002840 0000 0000 FB20 0017        ptr_Pal_GHZ3:		palp	Pal_GHZ3,v_pal_dry+$20, $30		; 4 - GHZ
00002848 0000 0000 FB20 0017        ptr_Pal_LZ3:		palp	Pal_LZ3,v_pal_dry+$20,$30		; 5 - LZ
00002850 0000 0000 FB20 0017        ptr_Pal_MZ3:		palp	Pal_MZ3,v_pal_dry+$20,$30		; 6 - MZ
00002858 0000 0000 FB20 0017        ptr_Pal_SLZ3:		palp	Pal_SLZ3,v_pal_dry+$20,$30		; 7 - SLZ
00002860 0000 0000 FB20 0017        ptr_Pal_SYZ3:		palp	Pal_SYZ3,v_pal_dry+$20,$30		; 8 - SYZ
00002868 0000 0000 FB20 0017        ptr_Pal_SBZ1_E:		palp	Pal_SBZ1,v_pal_dry+$20,$30		; 9 - SBZ1
00002870 0000 0000 FB00 001F        ptr_Pal_Special_E:	palp	Pal_Special,v_pal_dry,$40		; $A (10) - special stage
00002878 0000 0000 FB00 001F        ptr_Pal_LZWatr3:	palp	Pal_LZWatr3,v_pal_dry,$40		; $B (11) - LZ underwater
00002880 0000 0000 FB20 0017        ptr_Pal_SBZ3_E:		palp	Pal_SBZ3,v_pal_dry+$20,$30		; $C (12) - SBZ3
00002888 0000 0000 FB00 001F        ptr_Pal_SBZ3Water_E:	palp	Pal_SBZ3Water,v_pal_dry,$40		; $D (13) - SBZ3 underwater
00002890 0000 0000 FB20 0017        ptr_Pal_SBZ2_E:		palp	Pal_SBZ2,v_pal_dry+$20,$30		; $E (14) - SBZ2
00002898 0000 0000 FB00 0007        ptr_Pal_LZSonWatr2E:	palp	Pal_LZSonWatr2,v_pal_dry,$10	; $F (15) - LZ Sonic underwater
000028A0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat_E:	palp	Pal_SBZ3SonWat,v_pal_dry,$10	; $10 (16) - SBZ3 Sonic underwater
000028A8 0000 0000 FB00 001F        ptr_Pal_SSResult_E:	palp	Pal_SSResult,v_pal_dry,$40		; $11 (17) - special stage results
000028B0 0000 0000 FB00 000F        ptr_Pal_Continue_E:	palp	Pal_Continue,v_pal_dry,$20		; $12 (18) - special stage results continue
000028B8 0000 0000 FB00 001F        ptr_Pal_Ending_E:		palp	Pal_Ending,v_pal_dry,$40		; $13 (19) - ending sequence
000028C0 0000 0000 FB00 001F        ptr_Pal_Options_E:		palp	Pal_Options,v_pal_dry,$40		; $14 (21) - options screen
000028C8 0000 0000 FB00 0007        ptr_Pal_Sonic2_E:		palp	Pal_Sonic2,v_pal_dry,$10		; $15 (22) - Sonic (Sonic 1)
000028D0 0000 0000 FB00 0007        ptr_Pal_Sonic3_E:		palp	Pal_Sonic3,v_pal_dry,$10		; $16 (23) - Sonic (Beta)
000028D8 0000 0000 FB00 0007        ptr_Pal_Sonic4_E:		palp	Pal_Sonic4,v_pal_dry,$10		; $17 (24) - Sonic (Midnight)
000028E0 0000 0000 FB00 0007        ptr_Pal_Sonic5_E:		palp	Pal_Sonic5,v_pal_dry,$10		; $18 (25) - Sonic (C2)
000028E8 0000 0000 FB00 0007        ptr_Pal_Sonic6_E:		palp	Pal_Sonic6,v_pal_dry,$10		; $19 (26) - Sonic (Crackers)
000028F0 0000 0000 FB00 0007        ptr_Pal_Sonic7_E:		palp	Pal_Sonic7,v_pal_dry,$10		; $1A (27) - Sonic (RHS)
000028F8 0000 0000 FB00 0007        ptr_Pal_Sonic8_E:		palp	Pal_Sonic8,v_pal_dry,$10		; $1B (28) - Sonic (Socket)
00002900 0000 0000 FB00 0007        ptr_Pal_Sonic9_E:		palp	Pal_Sonic9,v_pal_dry,$10		; $1C (29) - Sonic (Cringe)
00002908 0000 0000 FB00 0007        ptr_Pal_Sonic10_E:		palp	Pal_Sonic10,v_pal_dry,$10		; $1D (30) - Sonic (Darker)
00002910 0000 0000 FB00 0007        ptr_Pal_SonWater2_E:		palp	Pal_SonWater2,v_pal_dry,$10		; $15 (31) - Sonic Underwater (Sonic 1)
00002918 0000 0000 FB00 0007        ptr_Pal_SonWater3_E:		palp	Pal_SonWater3,v_pal_dry,$10		; $16 (32) - Sonic Underwater (Beta)
00002920 0000 0000 FB00 0007        ptr_Pal_SonWater4_E:		palp	Pal_SonWater4,v_pal_dry,$10		; $17 (33) - Sonic Underwater (Midnight)
00002928 0000 0000 FB00 0007        ptr_Pal_SonWater5_E:		palp	Pal_SonWater5,v_pal_dry,$10		; $18 (34) - Sonic Underwater (C2)
00002930 0000 0000 FB00 0007        ptr_Pal_SonWater6_E:		palp	Pal_SonWater6,v_pal_dry,$10		; $19 (35) - Sonic Underwater (Crackers)
00002938 0000 0000 FB00 0007        ptr_Pal_SonWater7_E:		palp	Pal_SonWater7,v_pal_dry,$10		; $1A (36) - Sonic Underwater (RHS)
00002940 0000 0000 FB00 0007        ptr_Pal_SonWater8_E:		palp	Pal_SonWater8,v_pal_dry,$10		; $1B (37) - Sonic Underwater (Socket)
00002948 0000 0000 FB00 0007        ptr_Pal_SonWater9_E:		palp	Pal_SonWater9,v_pal_dry,$10		; $1C (38) - Sonic Underwater (Cringe)
00002950 0000 0000 FB00 0007        ptr_Pal_SonWater10_E:		palp	Pal_SonWater10,v_pal_dry,$10		; $1D (39) - Sonic Underwater (Darker)
00002958 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat2E:	palp	Pal_SBZ3SonWat2,v_pal_dry,$10		; $15 (40) - Sonic Underwater (Sonic 1)
00002960 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat3E:	palp	Pal_SBZ3SonWat3,v_pal_dry,$10	; $16 (41) - Sonic Underwater (Beta)
00002968 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat4E:	palp	Pal_SBZ3SonWat4,v_pal_dry,$10	; $17 (42) - Sonic Underwater (Midnight)
00002970 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat5E:	palp	Pal_SBZ3SonWat5,v_pal_dry,$10	; $18 (43) - Sonic Underwater (C2)
00002978 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat6E:	palp	Pal_SBZ3SonWat6,v_pal_dry,$10	; $19 (44) - Sonic Underwater (Crackers)
00002980 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat7E:	palp	Pal_SBZ3SonWat7,v_pal_dry,$10	; $1A (45) - Sonic Underwater (RHS)
00002988 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat8E:	palp	Pal_SBZ3SonWat8,v_pal_dry,$10	; $1B (46) - Sonic Underwater (Socket)
00002990 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat9E:	palp	Pal_SBZ3SonWat9,v_pal_dry,$10	; $1C (47) - Sonic Underwater (Cringe)
00002998 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat10E:	palp	Pal_SBZ3SonWat10,v_pal_dry,$10	; $1D (48) - Sonic Underwater (Darker)
000029A0                            			even
000029A0                            
000029A0                            
000029A0 =00000000                  palid_SegaBG:		equ (ptr_Pal_SegaBG-PalPointers)/8
000029A0 =00000001                  palid_Title:		equ (ptr_Pal_Title-PalPointers)/8
000029A0 =00000002                  palid_LevelSel:		equ (ptr_Pal_LevelSel-PalPointers)/8
000029A0 =00000003                  palid_Sonic:		equ (ptr_Pal_Sonic-PalPointers)/8
000029A0 =00000004                  palid_GHZ:		equ (ptr_Pal_GHZ-PalPointers)/8
000029A0 =00000005                  palid_LZ:		equ (ptr_Pal_LZ-PalPointers)/8
000029A0 =00000006                  palid_MZ:		equ (ptr_Pal_MZ-PalPointers)/8
000029A0 =00000007                  palid_SLZ:		equ (ptr_Pal_SLZ-PalPointers)/8
000029A0 =00000008                  palid_SYZ:		equ (ptr_Pal_SYZ-PalPointers)/8
000029A0 =00000009                  palid_SBZ1:		equ (ptr_Pal_SBZ1-PalPointers)/8
000029A0 =0000000A                  palid_Special:		equ (ptr_Pal_Special-PalPointers)/8
000029A0 =0000000B                  palid_LZWater:		equ (ptr_Pal_LZWater-PalPointers)/8
000029A0 =0000000C                  palid_SBZ3:		equ (ptr_Pal_SBZ3-PalPointers)/8
000029A0 =0000000D                  palid_SBZ3Water:	equ (ptr_Pal_SBZ3Water-PalPointers)/8
000029A0 =0000000E                  palid_SBZ2:		equ (ptr_Pal_SBZ2-PalPointers)/8
000029A0 =0000000F                  palid_LZSonWater:	equ (ptr_Pal_LZSonWater-PalPointers)/8
000029A0 =00000010                  palid_SBZ3SonWat:	equ (ptr_Pal_SBZ3SonWat-PalPointers)/8
000029A0 =00000011                  palid_SSResult:		equ (ptr_Pal_SSResult-PalPointers)/8
000029A0 =00000012                  palid_Continue:		equ (ptr_Pal_Continue-PalPointers)/8
000029A0 =00000013                  palid_Ending:		equ (ptr_Pal_Ending-PalPointers)/8
000029A0 =00000014                  palid_Options:		equ (ptr_Pal_Options-PalPointers)/8
000029A0 =00000004                  palid_GHZ2:		equ (ptr_Pal_GHZ-PalPointers)/8
000029A0 =00000005                  palid_LZ2:		equ (ptr_Pal_LZ-PalPointers)/8
000029A0 =00000006                  palid_MZ2:		equ (ptr_Pal_MZ-PalPointers)/8
000029A0 =00000007                  palid_SLZ2:		equ (ptr_Pal_SLZ-PalPointers)/8
000029A0 =00000008                  palid_SYZ2:		equ (ptr_Pal_SYZ-PalPointers)/8
000029A0 =0000003B                  palid_LZWatr2:		equ (ptr_Pal_LZWatr2-PalPointers)/8
000029A0 =0000000F                  palid_LZSonWatr2:	equ (ptr_Pal_LZSonWater-PalPointers)/8
000029A0 =00000064                  palid_GHZ3:		equ (ptr_Pal_GHZ3-PalPointers)/8
000029A0 =00000065                  palid_LZ3:		equ (ptr_Pal_LZ3-PalPointers)/8
000029A0 =00000066                  palid_MZ3:		equ (ptr_Pal_MZ3-PalPointers)/8
000029A0 =00000067                  palid_SLZ3:		equ (ptr_Pal_SLZ3-PalPointers)/8
000029A0 =00000068                  palid_SYZ3:		equ (ptr_Pal_SYZ3-PalPointers)/8
000029A0 =0000006B                  palid_LZWatr3:		equ (ptr_Pal_LZWatr3-PalPointers)/8
000029A0 =0000000F                  palid_LZSonWatr3:	equ (ptr_Pal_LZSonWater-PalPointers)/8
000029A0 =00000015                  palid_Sonic2:		equ (ptr_Pal_Sonic2-PalPointers)/8
000029A0 =00000016                  palid_Sonic3:		equ (ptr_Pal_Sonic3-PalPointers)/8
000029A0 =00000017                  palid_Sonic4:		equ (ptr_Pal_Sonic4-PalPointers)/8
000029A0 =00000018                  palid_Sonic5:		equ (ptr_Pal_Sonic5-PalPointers)/8
000029A0 =00000019                  palid_Sonic6:		equ (ptr_Pal_Sonic6-PalPointers)/8
000029A0 =0000001A                  palid_Sonic7:		equ (ptr_Pal_Sonic7-PalPointers)/8
000029A0 =0000001B                  palid_Sonic8:		equ (ptr_Pal_Sonic8-PalPointers)/8
000029A0 =0000001C                  palid_Sonic9:		equ (ptr_Pal_Sonic9-PalPointers)/8
000029A0 =0000001D                  palid_Sonic10:		equ (ptr_Pal_Sonic10-PalPointers)/8
000029A0 =0000001E                  palid_SonWater2:		equ (ptr_Pal_SonWater2-PalPointers)/8
000029A0 =0000001F                  palid_SonWater3:		equ (ptr_Pal_SonWater3-PalPointers)/8
000029A0 =00000020                  palid_SonWater4:		equ (ptr_Pal_SonWater4-PalPointers)/8
000029A0 =00000021                  palid_SonWater5:		equ (ptr_Pal_SonWater5-PalPointers)/8
000029A0 =00000022                  palid_SonWater6:		equ (ptr_Pal_SonWater6-PalPointers)/8
000029A0 =00000023                  palid_SonWater7:		equ (ptr_Pal_SonWater7-PalPointers)/8
000029A0 =00000024                  palid_SonWater8:		equ (ptr_Pal_SonWater8-PalPointers)/8
000029A0 =00000025                  palid_SonWater9:		equ (ptr_Pal_SonWater9-PalPointers)/8
000029A0 =00000026                  palid_SonWater10:		equ (ptr_Pal_SonWater10-PalPointers)/8
000029A0 =00000027                  palid_SBZ3SonWat2:		equ (ptr_Pal_SBZ3SonWat2-PalPointers)/8
000029A0 =00000028                  palid_SBZ3SonWat3:		equ (ptr_Pal_SBZ3SonWat3-PalPointers)/8
000029A0 =00000029                  palid_SBZ3SonWat4:		equ (ptr_Pal_SBZ3SonWat4-PalPointers)/8
000029A0 =0000002A                  palid_SBZ3SonWat5:		equ (ptr_Pal_SBZ3SonWat5-PalPointers)/8
000029A0 =0000002B                  palid_SBZ3SonWat6:		equ (ptr_Pal_SBZ3SonWat6-PalPointers)/8
000029A0 =0000002C                  palid_SBZ3SonWat7:		equ (ptr_Pal_SBZ3SonWat7-PalPointers)/8
000029A0 =0000002D                  palid_SBZ3SonWat8:		equ (ptr_Pal_SBZ3SonWat8-PalPointers)/8
000029A0 =0000002E                  palid_SBZ3SonWat9:		equ (ptr_Pal_SBZ3SonWat9-PalPointers)/8
000029A0 =0000002F                  palid_SBZ3SonWat10:		equ (ptr_Pal_SBZ3SonWat10-PalPointers)/8
000029A0 =0000002F                  palid_SBZ3SonWat10:		equ (ptr_Pal_SBZ3SonWat10-PalPointers)/8
000029A0                            		
000029A0                            		;include	"_inc\Palette Pointers2.asm"
000029A0                            		
000029A0                            		;include	"_inc\Palette Pointers3.asm"
000029A0                            		
000029A0                            
000029A0                            ; ---------------------------------------------------------------------------
000029A0                            ; Palette data
000029A0                            ; ---------------------------------------------------------------------------
000029A0                            Pal_SegaBG:	incbin	"palette\Sega Background.bin"
00002A20                            Pal_Title:	incbin	"palette\Title Screen.bin"
00002AA0                            Pal_LevelSel:	incbin	"palette\Level Select.bin"
00002B20                            Pal_Sonic:	incbin	"palette\Sonic Pal\01 Default.bin"
00002B40                            Pal_GHZ:	incbin	"palette\Green Hill Zone.bin"
00002BA0                            Pal_GHZ2:	incbin	"palette\Green Hill Zone2.bin"
00002C00                            Pal_GHZ3:	incbin	"palette\Green Hill Zone3.bin"
00002C60                            Pal_LZ:		incbin	"palette\Labyrinth Zone.bin"
00002CC0                            Pal_LZ2:	incbin	"palette\Labyrinth Zone2.bin"
00002D20                            Pal_LZ3:	incbin	"palette\Labyrinth Zone3.bin"
00002D80                            Pal_LZWater:	incbin	"palette\Labyrinth Zone Underwater.bin"
00002E00                            Pal_LZWatr2:	incbin	"palette\Labyrinth Zone Underwater2.bin"
00002E80                            Pal_LZWatr3:	incbin	"palette\Labyrinth Zone Underwater3.bin"
00002F00                            Pal_MZ:		incbin	"palette\Marble Zone.bin"
00002F60                            Pal_MZ2:	incbin	"palette\Marble Zone2.bin"
00002FC0                            Pal_MZ3:	incbin	"palette\Marble Zone3.bin"
00003020                            Pal_SLZ:	incbin	"palette\Star Light Zone.bin"
00003080                            Pal_SLZ2:	incbin	"palette\Star Light Zone2.bin"
000030E0                            Pal_SLZ3:	incbin	"palette\Star Light Zone3.bin"
00003140                            Pal_SYZ:	incbin	"palette\Spring Yard Zone.bin"
000031A0                            Pal_SYZ2:	incbin	"palette\Spring Yard Zone2.bin"
00003200                            Pal_SYZ3:	incbin	"palette\Spring Yard Zone3.bin"
00003260                            Pal_SBZ1:	incbin	"palette\SBZ Act 1.bin"
000032C0                            Pal_SBZ2:	incbin	"palette\SBZ Act 2.bin"
00003320                            Pal_Special:	incbin	"palette\Special Stage.bin"
000033A0                            Pal_SBZ3:	incbin	"palette\SBZ Act 3.bin"
00003400                            Pal_SBZ3Water:	incbin	"palette\SBZ Act 3 Underwater.bin"
00003480                            Pal_LZSonWater:	incbin	"palette\Sonic - LZ Underwater.bin"
000034A0                            Pal_LZSonWatr2:	incbin	"palette\Sonic - LZ2 Underwater.bin"
000034C0                            Pal_SBZ3SonWat:	incbin	"palette\Sonic - SBZ3 Underwater.bin"
000034E0                            Pal_SSResult:	incbin	"palette\Special Stage Results.bin"
00003560                            Pal_Continue:	incbin	"palette\Special Stage Continue Bonus.bin"
000035A0                            Pal_Ending:	incbin	"palette\Ending.bin"
00003620                            Pal_Options:	incbin	"palette\Options.bin"
000036A0                            Pal_Sonic2:	incbin	"palette\Sonic Pal\02 Sonic 1.bin"
000036C0                            Pal_Sonic3:	incbin	"palette\Sonic Pal\03 Beta.bin"
000036E0                            Pal_Sonic4:	incbin	"palette\Sonic Pal\04 Midnight.bin"
00003700                            Pal_Sonic5:	incbin	"palette\Sonic Pal\05 C2.bin"
00003720                            Pal_Sonic6:	incbin	"palette\Sonic Pal\06 Clacker.bin"
00003740                            Pal_Sonic7:	incbin	"palette\Sonic Pal\07 Red Hot.bin"
00003760                            Pal_Sonic8:	incbin	"palette\Sonic Pal\08 Socket.bin"
00003780                            Pal_Sonic9:	incbin	"palette\Sonic Pal\09 Cringe.bin"
000037A0                            Pal_Sonic10:	incbin	"palette\Sonic Pal\10 Dark.bin"
000037C0                            Pal_SonWater2:	incbin	"palette\Sonic Pal\02 Sonic 1 Underwater.bin"
000037E0                            Pal_SonWater3:	incbin	"palette\Sonic Pal\03 Beta Underwater.bin"
00003800                            Pal_SonWater4:	incbin	"palette\Sonic Pal\04 Midnight Underwater.bin"
00003820                            Pal_SonWater5:	incbin	"palette\Sonic Pal\05 C2 Underwater.bin"
00003840                            Pal_SonWater6:	incbin	"palette\Sonic Pal\06 Clacker Underwater.bin"
00003860                            Pal_SonWater7:	incbin	"palette\Sonic Pal\07 Red Hot Underwater.bin"
00003880                            Pal_SonWater8:	incbin	"palette\Sonic Pal\08 Socket Underwater.bin"
000038A0                            Pal_SonWater9:	incbin	"palette\Sonic Pal\09 Cringe Underwater.bin"
000038C0                            Pal_SonWater10:	incbin	"palette\Sonic Pal\10 Dark Underwater.bin"
000038E0                            Pal_SBZ3SonWat2:	incbin	"palette\Sonic Pal\02 Sonic 1 SBZ3.bin"
00003900                            Pal_SBZ3SonWat3:	incbin	"palette\Sonic Pal\03 Beta SBZ3.bin"
00003920                            Pal_SBZ3SonWat4:	incbin	"palette\Sonic Pal\04 Midnight SBZ3.bin"
00003940                            Pal_SBZ3SonWat5:	incbin	"palette\Sonic Pal\05 C2 SBZ3.bin"
00003960                            Pal_SBZ3SonWat6:	incbin	"palette\Sonic Pal\06 Clacker SBZ3.bin"
00003980                            Pal_SBZ3SonWat7:	incbin	"palette\Sonic Pal\07 Red Hot SBZ3.bin"
000039A0                            Pal_SBZ3SonWat8:	incbin	"palette\Sonic Pal\08 Socket SBZ3.bin"
000039C0                            Pal_SBZ3SonWat9:	incbin	"palette\Sonic Pal\09 Cringe SBZ3.bin"
000039E0                            Pal_SBZ3SonWat10:	incbin	"palette\Sonic Pal\10 Dark SBZ3.bin"
00003A00                            ; ---------------------------------------------------------------------------
00003A00                            ; Subroutine to	wait for VBlank routines to complete
00003A00                            ; ---------------------------------------------------------------------------
00003A00                            
00003A00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003A00                            
00003A00                            
00003A00                            WaitForVBla:
00003A00 46FC 2300                  		enable_ints
00003A04                            
00003A04                            	@wait:
00003A04 4A38 F62A                  		tst.b	(v_vbla_routine).w ; has VBlank routine finished?
00003A08 66FA                       		bne.s	@wait		; if not, branch
00003A0A 4E75                       		rts	
00003A0C                            ; End of function WaitForVBla
00003A0C                            
00003A0C                            		include	"_incObj\sub RandomNumber.asm"
00003A0C                            ; ---------------------------------------------------------------------------
00003A0C                            ; Subroutine to	generate a pseudo-random number	in d0
00003A0C                            ; ---------------------------------------------------------------------------
00003A0C                            
00003A0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003A0C                            
00003A0C                            
00003A0C                            RandomNumber:
00003A0C 2238 F636                  		move.l	(v_random).w,d1
00003A10 6600                       		bne.s	@scramble	; if d1 is not 0, branch
00003A12 223C 2A6D 365A             		move.l	#$2A6D365A,d1	; if d1 is 0, use seed number
00003A18                            
00003A18                            	@scramble:
00003A18 2001                       		move.l	d1,d0
00003A1A E581                       		asl.l	#2,d1
00003A1C D280                       		add.l	d0,d1
00003A1E E781                       		asl.l	#3,d1
00003A20 D280                       		add.l	d0,d1
00003A22 3001                       		move.w	d1,d0
00003A24 4841                       		swap	d1
00003A26 D041                       		add.w	d1,d0
00003A28 3200                       		move.w	d0,d1
00003A2A 4841                       		swap	d1
00003A2C 21C1 F636                  		move.l	d1,(v_random).w
00003A30 4E75                       		rts	
00003A30 4E75                       		rts	
00003A32                            		include	"_incObj\sub CalcSine.asm"
00003A32                            ; ---------------------------------------------------------------------------
00003A32                            ; Subroutine calculate a sine
00003A32                            
00003A32                            ; input:
00003A32                            ;	d0 = angle
00003A32                            
00003A32                            ; output:
00003A32                            ;	d0 = sine
00003A32                            ;	d1 = cosine
00003A32                            ; ---------------------------------------------------------------------------
00003A32                            
00003A32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003A32                            
00003A32                            
00003A32                            CalcSine:
00003A32 0240 00FF                          andi.w  #$FF,d0
00003A36 5040                               addq.w  #8,d0
00003A38 D040                               add.w   d0,d0
00003A3A 323B 0000                          move.w  Sine_Data+($40*2)-16(pc,d0.w),d1
00003A3E 303B 0000                          move.w  Sine_Data-16(pc,d0.w),d0
00003A42 4E75                               rts
00003A44                            ; End of function CalcSine
00003A44                            
00003A44                            ; ===========================================================================
00003A44                            
00003A44                            Sine_Data:	incbin	"misc\sinewave.bin"	; values for a 360° sine wave
00003CC4                            
00003CC4                            ; ===========================================================================
00003CC4                            ; ===========================================================================
00003CC4                            		include	"_incObj\sub CalcAngle.asm"
00003CC4                            ; ---------------------------------------------------------------------------
00003CC4                            ; Subroutine calculate an angle
00003CC4                            
00003CC4                            ; input:
00003CC4                            ;	d1 = x-axis distance
00003CC4                            ;	d2 = y-axis distance
00003CC4                            
00003CC4                            ; output:
00003CC4                            ;	d0 = angle
00003CC4                            ; ---------------------------------------------------------------------------
00003CC4                            
00003CC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003CC4                            
00003CC4                            
00003CC4                            CalcAngle:
00003CC4 48E7 1800                  		movem.l	d3-d4,-(sp)
00003CC8 7600                       		moveq	#0,d3
00003CCA 7800                       		moveq	#0,d4
00003CCC 3601                       		move.w	d1,d3
00003CCE 3802                       		move.w	d2,d4
00003CD0 8843                       		or.w	d3,d4
00003CD2 6700                       		beq.s	loc_2D04
00003CD4 3802                       		move.w	d2,d4
00003CD6 4A43                       		tst.w	d3
00003CD8 6A00 0000                  		bpl.w	loc_2CC2
00003CDC 4443                       		neg.w	d3
00003CDE                            
00003CDE                            loc_2CC2:
00003CDE 4A44                       		tst.w	d4
00003CE0 6A00 0000                  		bpl.w	loc_2CCA
00003CE4 4444                       		neg.w	d4
00003CE6                            
00003CE6                            loc_2CCA:
00003CE6 B843                       		cmp.w	d3,d4
00003CE8 6400 0000                  		bcc.w	loc_2CDC
00003CEC E18C                       		lsl.l	#8,d4
00003CEE 88C3                       		divu.w	d3,d4
00003CF0 7000                       		moveq	#0,d0
00003CF2 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00003CF6 6000                       		bra.s	loc_2CE6
00003CF8                            ; ===========================================================================
00003CF8                            
00003CF8                            loc_2CDC:
00003CF8 E18B                       		lsl.l	#8,d3
00003CFA 86C4                       		divu.w	d4,d3
00003CFC 7040                       		moveq	#$40,d0
00003CFE 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00003D02                            
00003D02                            loc_2CE6:
00003D02 4A41                       		tst.w	d1
00003D04 6A00 0000                  		bpl.w	loc_2CF2
00003D08 4440                       		neg.w	d0
00003D0A 0640 0080                  		addi.w	#$80,d0
00003D0E                            
00003D0E                            loc_2CF2:
00003D0E 4A42                       		tst.w	d2
00003D10 6A00 0000                  		bpl.w	loc_2CFE
00003D14 4440                       		neg.w	d0
00003D16 0640 0100                  		addi.w	#$100,d0
00003D1A                            
00003D1A                            loc_2CFE:
00003D1A 4CDF 0018                  		movem.l	(sp)+,d3-d4
00003D1E 4E75                       		rts	
00003D20                            ; ===========================================================================
00003D20                            
00003D20                            loc_2D04:
00003D20 303C 0040                  		move.w	#$40,d0
00003D24 4CDF 0018                  		movem.l	(sp)+,d3-d4
00003D28 4E75                       		rts	
00003D2A                            ; End of function CalcAngle
00003D2A                            
00003D2A                            ; ===========================================================================
00003D2A                            
00003D2A                            Angle_Data:	incbin	"misc\angles.bin"
00003E2C                            
00003E2C                            ; ===========================================================================
00003E2C                            ; ===========================================================================
00003E2C                            
00003E2C                            ; ---------------------------------------------------------------------------
00003E2C                            ; Sega screen
00003E2C                            ; ---------------------------------------------------------------------------
00003E2C                            
00003E2C                            GM_Sega:
00003E34 6100 D912                  		bsr.w	ClearPLC
00003E38 6100 E348                  		bsr.w	PaletteFadeOut
00003E3C 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00003E42 3CBC 8004                  		move.w	#$8004,(a6)	; use 8-colour mode
00003E46 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00003E4A 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00003E4E 3CBC 8700                  		move.w	#$8700,(a6)	; set background colour (palette entry 0)
00003E52 3CBC 8B00                  		move.w	#$8B00,(a6)	; full-screen vertical scrolling
00003E56 4238 F64E                  		clr.b	(f_wtr_state).w
00003E5A 46FC 2700                  		disable_ints
00003E5E 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00003E62 0200 00BF                  		andi.b	#$BF,d0
00003E66 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00003E6C 6100 D312                  		bsr.w	ClearScreen
00003E7A 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
00003E80 6100 D47C                  		bsr.w	NemDec
00003E84 43F9 00FF 0000             		lea	($FF0000).l,a1
00003E8A 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
00003E90 303C 0000                  		move.w	#0,d0
00003E94 6100 D9F2                  		bsr.w	EniDec
00003E98                            
00003E98 43F9 00FF 0000 203C 6510+  		copyTilemap	$FF0000,$E510,$17,7
00003EAC 43F9 00FF 0180 203C 4000+  		copyTilemap	$FF0180,$C000,$27,$1B
00003EC0                            
00003EC0 4A38 FFF8                  			tst.b   (v_megadrive).w	; is console Japanese?
00003EC4 6B00                       			bmi.s   @loadpal
00003EC6 43F9 00FF 0A40 203C 453A+  			copyTilemap	$FF0A40,$C53A,2,1 ; hide "TM" with a white rectangle
00003EDA                            
00003EDA                            	@loadpal:
00003EDA 7000                       		moveq	#palid_SegaBG,d0
00003EDC 6100 E58A                  		bsr.w	PalLoad2	; load Sega logo palette
00003EE0 47F9 FFFF FB80                     lea        ($FFFFFB80).l,a3
00003EE6 7E3F                               moveq    #$3F,d7
00003EE8                             
00003EE8                                .loop:
00003EE8 36FC 0000                          move.w    #cBlack,(a3)+    ; move data to RAM
00003EEC 51CF FFFA                          dbf        d7,.loop
00003EF0 6100 E1EA                          bsr.w     PaletteFadeIn ; added to allow fade in			
00003EF4 31FC FFF6 F632             		move.w	#-$A,(v_pcyc_num).w
00003EFA 31FC 0000 F634             		move.w	#0,(v_pcyc_time).w
00003F00 31FC 0000 F662             		move.w	#0,(v_pal_buffer+$12).w
00003F06 31FC 0000 F660             		move.w	#0,(v_pal_buffer+$10).w
00003F0C 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00003F10 0000 0040                  		ori.b	#$40,d0
00003F14 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00003F1A                            
00003F1A                            Sega_WaitPal:
00003F1A 11FC 0002 F62A             		move.b	#2,(v_vbla_routine).w
00003F20 6100 FADE                  		bsr.w	WaitForVBla
00003F24 6100 E414                  		bsr.w	PalCycle_Sega
00003F28 66F0                       		bne.s	Sega_WaitPal
00003F2A                            
00003F32 11FC 0014 F62A             		move.b	#$14,(v_vbla_routine).w
00003F38 6100 FAC6                  		bsr.w	WaitForVBla
00003F3C 31FC 001E F614             		move.w	#$1E,(v_demolength).w
00003F42                            
00003F42                            Sega_WaitEnd:
00003F42 11FC 0002 F62A             		move.b	#2,(v_vbla_routine).w
00003F48 6100 FAB6                  		bsr.w	WaitForVBla
00003F4C 4A78 F614                  		tst.w	(v_demolength).w
00003F50 6700                       		beq.s	Sega_GotoTitle
00003F52 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; is Start button pressed?
00003F58 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
00003F5A                            
00003F5A                            Sega_GotoTitle:
00003F5A 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; go to title screen
00003F60 4E75                       		rts	
00003F62                            ; ===========================================================================
00003F62                            
00003F62                            ; ---------------------------------------------------------------------------
00003F62                            ; Title	screen
00003F62                            ; ---------------------------------------------------------------------------
00003F62                            
00003F62                            GM_Title:
00003F6A 6100 D7DC                  		bsr.w	ClearPLC
00003F6E 6100 E212                  		bsr.w	PaletteFadeOut
00003F72 46FC 2700                  		disable_ints
00003F76 6100 D28E                  		bsr.w	SoundDriverLoad
00003F7A 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00003F80 3CBC 8004                  		move.w	#$8004,(a6)	; 8-colour mode
00003F84 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00003F88 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00003F8C 3CBC 9001                  		move.w	#$9001,(a6)	; 64-cell hscroll size
00003F90 3CBC 9200                  		move.w	#$9200,(a6)	; window vertical position
00003F94 3CBC 8B03                  		move.w	#$8B03,(a6)
00003F98 3CBC 8720                  		move.w	#$8720,(a6)	; set background colour (palette line 2, entry 0)
00003F9C 4238 F64E                  		clr.b	(f_wtr_state).w
00003FA0 6100 D1DE                  		bsr.w	ClearScreen
00003FA4 4EB9 0000 0000             		jsr		SHC2022 
00003FAA                            
00003FAA 43F8 D000                  		lea	(v_objspace).w,a1
00003FAE 7000                       		moveq	#0,d0
00003FB0 323C 07FF                  		move.w	#$7FF,d1
00003FB4                            
00003FB4                            	Tit_ClrObj1:
00003FB4 22C0                       		move.l	d0,(a1)+
00003FB6 51C9 FFFC                  		dbf	d1,Tit_ClrObj1	; fill object space ($D000-$EFFF) with 0
00003FBA                            
00003FC4 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
00003FCA 6100 D332                  		bsr.w	NemDec
00003FD8 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
00003FDE 6100 D31E                  		bsr.w	NemDec
00003FE2 43F9 00FF 0000             		lea	($FF0000).l,a1
00003FE8 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
00003FEE 303C 0000                  		move.w	#0,d0
00003FF2 6100 D894                  		bsr.w	EniDec
00003FF6                            
00003FF6 43F9 00FF 0000 203C 4000+  		copyTilemap	$FF0000,$C000,$27,$1B
0000400A                            
0000400A 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
0000400E 7000                       		moveq	#cBlack,d0
00004010 323C 001F                  		move.w	#$1F,d1
00004014                            
00004014                            	Tit_ClrPal:
00004014 22C0                       		move.l	d0,(a1)+
00004016 51C9 FFFC                  		dbf	d1,Tit_ClrPal	; fill palette with 0 (black)
0000401A                            
0000401A 4EB9 0000 0000             		jsr		LoadPlayerPal
00004020 6100 E40A                  		bsr.w	PalLoad1
00004024 11FC 0000 D080             		move.b	#id_CreditsText,(v_objspace+$80).w ; load "SONIC TEAM PRESENTS" object
0000402A 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004030 4EB9 0000 0000             		jsr	(BuildSprites).l
00004036 6100 E0A4                  		bsr.w	PaletteFadeIn
0000403A 46FC 2700                  		disable_ints
00004048 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
0000404E 6100 D2AE                  		bsr.w	NemDec
0000405C 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
00004062 6100 D29A                  		bsr.w	NemDec
00004066 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00004074 4BF9 0000 0592             		lea	(Art_Text).l,a5	; load level select font
0000407A 323C 028F                  		move.w	#$28F,d1
0000407E                            
0000407E                            	Tit_LoadText:
0000407E 3C9D                       		move.w	(a5)+,(a6)
00004080 51C9 FFFC                  		dbf	d1,Tit_LoadText	; load level select font
00004084                            
00004084 11FC 0000 FE30             		move.b	#0,(v_lastlamp).w ; clear lamppost counter
0000408A 31FC 0000 FE08             		move.w	#0,(v_debuguse).w ; disable debug item placement mode
00004090 31FC 0000 FFF0             		move.w	#0,(f_demo).w	; disable debug mode
00004096 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w ; unused variable
0000409C 31FC 0000 FE10             		move.w	#(id_GHZ<<8),(v_zone).w	; set level to GHZ (00)
000040A2 31FC 0000 F634             		move.w	#0,(v_pcyc_time).w ; disable palette cycling
000040A8 6100 0000                  		bsr.w	LevelSizeLoad
000040AC 6100 0000                  		bsr.w	DeformLayers
000040B0 43F8 B000                  		lea	(v_16x16).w,a1
000040B4 41F9 0000 0000             		lea	(Blk16_TS).l,a0 ; load	GHZ 16x16 mappings
000040BA 303C 0000                  		move.w	#0,d0
000040BE 6100 D7C8                  		bsr.w	EniDec
000040C2 41F9 0000 0000             		lea	(Blk256_TS).l,a0 ; load GHZ 256x256 mappings
000040C8 43F9 00FF 0000             		lea	(v_256x256).l,a1
000040CE 6100 D936                  		bsr.w	KosDec
000040D2 6100 0000                  		bsr.w	LevelLayoutLoad
000040D6 6100 E0AA                  		bsr.w	PaletteFadeOut
000040DA 46FC 2700                  		disable_ints
000040DE 6100 D0A0                  		bsr.w	ClearScreen
000040E2 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
000040E8 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
000040EE 47F8 F708                  		lea	(v_bgscreenposx).w,a3
000040F2 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
000040F6 343C 6000                  		move.w	#$6000,d2
000040FA 6100 0000                  		bsr.w	DrawChunks
000040FE 43F9 00FF 0000             		lea	($FF0000).l,a1
00004104 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
0000410A 303C 0000                  		move.w	#0,d0
0000410E 6100 D778                  		bsr.w	EniDec
00004112                            
00004112 43F9 00FF 0000 203C 4206+  		copyTilemap	$FF0000,$C206,$21,$15
00004126                            
00004130 41F9 0000 0000             		lea	(Nem_TS_1st).l,a0 ; load title screen patterns
00004136 6100 D1C6                  		bsr.w	NemDec
0000413A 7001                       		moveq	#palid_Title,d0	; load title screen palette
0000413C 6100 E2EE                  		bsr.w	PalLoad1
00004148 11FC 0000 FFFA             		move.b	#0,(f_debugmode).w ; disable debug mode
0000414E 31FC 0900 F614             		move.w	#$900,(v_demolength).w ; run title screen for $178 frames
00004154 43F8 D080                  		lea	(v_objspace+$80).w,a1
00004158 7000                       		moveq	#0,d0
0000415A 323C 0007                  		move.w	#7,d1
0000415E                            
0000415E                            	Tit_ClrObj2:
0000415E 22C0                       		move.l	d0,(a1)+
00004160 51C9 FFFC                  		dbf	d1,Tit_ClrObj2
00004164                            
00004164 11FC 0000 D040             		move.b	#id_TitleSonic,(v_objspace+$40).w ; load big Sonic object
0000416A 11FC 0000 D080             		move.b	#id_PSBTM,(v_objspace+$80).w ; load "PRESS START BUTTON" object
00004170 4238 D0A4                  		clr.b	(v_objspace+$80+obRoutine).w ; The 'Mega Games 10' version of Sonic 1 added this line, to fix the 'PRESS START BUTTON' object not appearing
00004174                            
00004174 4A38 FFF8                  			tst.b   (v_megadrive).w	; is console Japanese?
00004178 6A00                       			bpl.s   @isjap		; if yes, branch
0000417A                            
0000417A 11FC 0000 D0C0             		move.b	#id_PSBTM,(v_objspace+$C0).w ; load "TM" object
00004180 11FC 0003 D0DA             		move.b	#3,(v_objspace+$C0+obFrame).w
00004186                            	@isjap:
00004186 11FC 0000 D100             		move.b	#id_PSBTM,(v_objspace+$100).w ; load object which hides part of Sonic
0000418C 11FC 0002 D11A             		move.b	#2,(v_objspace+$100+obFrame).w
00004192 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004198 6100 0000                  		bsr.w	DeformLayers
0000419C 4EB9 0000 0000             		jsr	(BuildSprites).l
000041A2 7000                       		moveq	#plcid_Main,d0
000041A4 6100 D576                  		bsr.w	NewPLC
000041A8 31FC 0000 FFE4             		move.w	#0,(v_title_dcount).w
000041AE 31FC 0000 FFE6             		move.w	#0,(v_title_ccount).w
000041B4 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
000041B8 0000 0040                  		ori.b	#$40,d0
000041BC 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
000041C2 6100 DF18                  		bsr.w	PaletteFadeIn
000041C6                            
000041C6                            Tit_MainLoop:
000041C6 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
000041CC 6100 F832                  		bsr.w	WaitForVBla
000041D0 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000041D6 6100 0000                  		bsr.w	DeformLayers
000041DA 4EB9 0000 0000             		jsr	(BuildSprites).l
000041E0 6100 DB0C                  		bsr.w	PCycle_Title
000041E4 6100 D570                  		bsr.w	RunPLC
000041E8 3038 D008                  		move.w	(v_objspace+obX).w,d0
000041EC 5440                       		addq.w	#2,d0
000041EE 31C0 D008                  		move.w	d0,(v_objspace+obX).w ; move Sonic to the right
000041F2 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed $1C00 on x-axis?
000041F6 6500                       		blo.s	Tit_ChkRegion	; if not, branch
000041F8                            
000041F8 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
000041FE 4E75                       		rts	
00004200                            ; ===========================================================================
00004200                            
00004200                            Tit_ChkRegion:
00004200 4A38 FFF8                  		tst.b	(v_megadrive).w	; check	if the machine is US or	Japanese
00004204 6A00                       		bpl.s	Tit_RegionJap	; if Japanese, branch
00004206                            
00004206 41F9 0000 0000             		lea	(LevSelCode_US).l,a0 ; load US code
0000420C 6000                       		bra.s	Tit_EnterCheat
0000420E                            
0000420E                            	Tit_RegionJap:
0000420E 41F9 0000 0000             		lea	(LevSelCode_J).l,a0 ; load J code
00004214                            
00004214                            Tit_EnterCheat:
00004214 3038 FFE4                  		move.w	(v_title_dcount).w,d0
00004218 D0C0                       		adda.w	d0,a0
0000421A 1038 F605                  		move.b	(v_jpadpress1).w,d0 ; get button press
0000421E 0200 000F                  		andi.b	#btnDir,d0	; read only UDLR buttons
00004222 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
00004224 6600                       		bne.s	Tit_ResetCheat	; if not, branch
00004226 5278 FFE4                  		addq.w	#1,(v_title_dcount).w ; next button press
0000422A 4A00                       		tst.b	d0
0000422C 6600                       		bne.s	Tit_CountC
0000422E 41F8 FFE0                  		lea	(f_levselcheat).w,a0
00004232 3238 FFE6                  		move.w	(v_title_ccount).w,d1
00004236 E249                       		lsr.w	#1,d1
00004238 0241 0003                  		andi.w	#3,d1
0000423C 6700                       		beq.s	Tit_PlayRing
0000423E 4A38 FFF8                  		tst.b	(v_megadrive).w
00004242 6A00                       		bpl.s	Tit_PlayRing
00004244 7201                       		moveq	#1,d1
00004246 1181 1001                  		move.b	d1,1(a0,d1.w)	; cheat depends on how many times C is pressed
0000424A                            
0000424A                            	Tit_PlayRing:
0000424A 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
00004258 6000                       		bra.s	Tit_CountC
0000425A                            ; ===========================================================================
0000425A                            
0000425A                            Tit_ResetCheat:
0000425A 4A00                       		tst.b	d0
0000425C 6700                       		beq.s	Tit_CountC
0000425E 0C78 0009 FFE4             		cmpi.w	#9,(v_title_dcount).w
00004264 6700                       		beq.s	Tit_CountC
00004266 31FC 0000 FFE4             		move.w	#0,(v_title_dcount).w ; reset UDLR counter
0000426C                            
0000426C                            Tit_CountC:
0000426C 1038 F605                  		move.b	(v_jpadpress1).w,d0
00004270 0200 0020                  		andi.b	#btnC,d0	; is C button pressed?
00004274 6700                       		beq.s	loc_3230	; if not, branch
00004276 4EF9 0000 0000             		jmp		MenuScreen ; increment C counter
0000427C                            
0000427C                            loc_3230:
0000427C 4A78 F614                  		tst.w	(v_demolength).w
00004280 6700 0000                  		beq.w	GotoDemo
00004284 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; check if Start is pressed
0000428A 6700 FF3A                  		beq.w	Tit_MainLoop	; if not, branch
0000428E                            
0000428E                            Tit_ChkLevSel:
0000428E 4A38 FFE0                  		tst.b	(f_levselcheat).w ; check if level select code is on
00004292 6700 0000                  		beq.w	PlayLevel	; if not, play level
00004296 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; check if A is pressed
0000429C 6700 0000                  		beq.w	PlayLevel	; if not, play level
000042A0                            
000042A0 7002                       		moveq	#palid_LevelSel,d0
000042A2 6100 E1C4                  		bsr.w	PalLoad2	; load level select palette
000042A6 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
000042AA 7000                       		moveq	#0,d0
000042AC 323C 00DF                  		move.w	#$DF,d1
000042B0                            
000042B0                            	Tit_ClrScroll1:
000042B0 22C0                       		move.l	d0,(a1)+
000042B2 51C9 FFFC                  		dbf	d1,Tit_ClrScroll1 ; clear scroll data (in RAM)
000042B6                            
000042B6 21C0 F616                  		move.l	d0,(v_scrposy_dup).w
000042BA 46FC 2700                  		disable_ints
000042BE 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
000042CE 323C 03FF                  		move.w	#$3FF,d1
000042D2                            
000042D2                            	Tit_ClrScroll2:
000042D2 2C80                       		move.l	d0,(a6)
000042D4 51C9 FFFC                  		dbf	d1,Tit_ClrScroll2 ; clear scroll data (in VRAM)
000042D8                            
000042D8 6100 0000                  		bsr.w	LevSelTextLoad
000042DC                            
000042DC                            ; ---------------------------------------------------------------------------
000042DC                            ; Level	Select
000042DC                            ; ---------------------------------------------------------------------------
000042DC                            
000042DC                            LevelSelect:
000042DC 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
000042E2 6100 F71C                  		bsr.w	WaitForVBla
000042E6 6100 0000                  		bsr.w	LevSelControls
000042EA 6100 D46A                  		bsr.w	RunPLC
000042EE 4AB8 F680                  		tst.l	(v_plc_buffer).w
000042F2 66E8                       		bne.s	LevelSelect
000042F4 0238 00F0 F605             		andi.b	#btnABC+btnStart,(v_jpadpress1).w ; is A, B, C, or Start pressed?
000042FA 67E0                       		beq.s	LevelSelect	; if not, branch
000042FC 3038 FF82                  		move.w	(v_levselitem).w,d0
00004300 0C40 0014                  		cmpi.w	#$14,d0		; have you selected item $14 (sound test)?
00004304 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
00004306 3038 FF84                  		move.w	(v_levselsound).w,d0
0000430A 0640 0080                  		addi.w	#$80,d0
0000430E 0C40 009F                  		cmpi.w	#$9F,d0		; is sound $9F being played?
00004312 6700                       		beq.s	LevSel_Ending	; if yes, branch
00004314 0C40 009E                  		cmpi.w	#$9E,d0		; is sound $9E being played?
00004318 6700                       		beq.s	LevSel_Credits	; if yes, branch
0000431A                            
0000431A                            LevSel_PlaySnd:
0000431A 6100 CF34                  		bsr.w	PlaySound_Special
0000431E 60BC                       		bra.s	LevelSelect
00004320                            ; ===========================================================================
00004320                            
00004320                            LevSel_Ending:
00004320 11FC 0000 F600             		move.b	#id_Ending,(v_gamemode).w ; set screen mode to $18 (Ending)
00004326 31FC 0600 FE10             		move.w	#(id_EndZ<<8),(v_zone).w ; set level to 0600 (Ending)
0000432C 4E75                       		rts	
0000432E                            ; ===========================================================================
0000432E                            
0000432E                            LevSel_Credits:
0000432E 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; set screen mode to $1C (Credits)
0000433C 31FC 0000 FFF4             		move.w	#0,(v_creditsnum).w
00004342 4E75                       		rts	
00004344                            ; ===========================================================================
00004344                            
00004344                            LevSel_Level_SS:
00004344 D040                       		add.w	d0,d0
00004346 303B 0000                  		move.w	LevSel_Ptrs(pc,d0.w),d0 ; load level number
0000434A 6B00 FF90                  		bmi.w	LevelSelect
0000434E 0C40 0700                  		cmpi.w	#id_SS*$100,d0	; check	if level is 0700 (Special Stage)
00004352 6600                       		bne.s	LevSel_Level	; if not, branch
00004354 11FC 0000 F600             		move.b	#id_Special,(v_gamemode).w ; set screen mode to $10 (Special Stage)
0000435A 4278 FE10                  		clr.w	(v_zone).w	; clear	level
0000435E 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
00004364 7000                       		moveq	#0,d0
00004366 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
0000436A 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
0000436E 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
00004372 21FC 0000 1388 FFC0        			move.l	#5000,(v_scorelife).w ; extra life is awarded at 50000 points
0000437A 4E75                       		rts	
0000437C                            ; ===========================================================================
0000437C                            
0000437C                            LevSel_Level:
0000437C 0240 3FFF                  		andi.w	#$3FFF,d0
00004380 31C0 FE10                  		move.w	d0,(v_zone).w	; set level number
00004384                            
00004384                            PlayLevel:
00004384 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; set screen mode to $0C (level)
0000438A 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
00004390 7000                       		moveq	#0,d0
00004392 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
00004396 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
0000439A 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
0000439E 11C0 FE16                  		move.b	d0,(v_lastspecial).w ; clear special stage number
000043A2 11C0 FE57                  		move.b	d0,(v_emeralds).w ; clear emeralds
000043A6 21C0 FE58                  		move.l	d0,(v_emldlist).w ; clear emeralds
000043AA 21C0 FE5C                  		move.l	d0,(v_emldlist+4).w ; clear emeralds
000043AE 11FC 0001 FE18             		move.b	#1,(v_continues).w ; set continues to 1
000043B4 21FC 0000 1388 FFC0        			move.l	#5000,(v_scorelife).w ; extra life is awarded at 50000 points
000043C4 4E75                       		rts	
000043C6                            ; ===========================================================================
000043C6                            ; ---------------------------------------------------------------------------
000043C6                            ; Level	select - level pointers
000043C6                            ; ---------------------------------------------------------------------------
000043C6                            		; correct level order
000043C6 0000                       		dc.b id_GHZ, 0
000043C8 0001                       		dc.b id_GHZ, 1
000043CA 0002                       		dc.b id_GHZ, 2
000043CC 0200                       		dc.b id_MZ, 0
000043CE 0201                       		dc.b id_MZ, 1
000043D0 0202                       		dc.b id_MZ, 2
000043D2 0400                       		dc.b id_SYZ, 0
000043D4 0401                       		dc.b id_SYZ, 1
000043D6 0402                       		dc.b id_SYZ, 2
000043D8 0100                       		dc.b id_LZ, 0
000043DA 0101                       		dc.b id_LZ, 1
000043DC 0102                       		dc.b id_LZ, 2
000043DE 0300                       		dc.b id_SLZ, 0
000043E0 0301                       		dc.b id_SLZ, 1
000043E2 0302                       		dc.b id_SLZ, 2
000043E4 0500                       		dc.b id_SBZ, 0
000043E6 0501                       		dc.b id_SBZ, 1
000043E8 0103                       		dc.b id_LZ, 3
000043EA 0502                       		dc.b id_SBZ, 2
000043EC 0700                       		dc.b id_SS, 0		; Special Stage
000043EE 8000                       		dc.w $8000		; Sound Test
000043F0                            		even
000043F0                            ; ---------------------------------------------------------------------------
000043F0                            ; Level	select codes
000043F0                            ; ---------------------------------------------------------------------------
000043F0 0102 0202 0408 00FF        		dc.b btnUp,btnDn,btnDn,btnDn,btnL,btnR,0,$FF
000043F8                            		even
000043F8                            
000043F8 0102 0408 00FF             LevSelCode_US:	dc.b btnUp,btnDn,btnL,btnR,0,$FF
000043FE                            		even
000043FE                            ; ===========================================================================
000043FE                            
000043FE                            ; ---------------------------------------------------------------------------
000043FE                            ; Demo mode
000043FE                            ; ---------------------------------------------------------------------------
000043FE                            
000043FE                            GotoDemo:
000043FE 31FC 001E F614             		move.w	#$1E,(v_demolength).w
00004404                            
00004404                            loc_33B6:
00004404 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
0000440A 6100 F5F4                  		bsr.w	WaitForVBla
0000440E 6100 0000                  		bsr.w	DeformLayers
00004412 6100 D8BA                  		bsr.w	PaletteCycle
00004416 6100 D33E                  		bsr.w	RunPLC
0000441A 3038 D008                  		move.w	(v_objspace+obX).w,d0
0000441E 5440                       		addq.w	#2,d0
00004420 31C0 D008                  		move.w	d0,(v_objspace+obX).w
00004424 0C40 1C00                  		cmpi.w	#$1C00,d0
00004428 6500                       		blo.s	loc_33E4
0000442A 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w
00004430 4E75                       		rts	
00004432                            ; ===========================================================================
00004432                            
00004432                            loc_33E4:
00004432 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; is Start button pressed?
00004438 6600 FE54                  		bne.w	Tit_ChkLevSel	; if yes, branch
0000443C 4A78 F614                  		tst.w	(v_demolength).w
00004440 6600 FFC2                  		bne.w	loc_33B6
0000444C 3038 FFF2                  		move.w	(v_demonum).w,d0 ; load	demo number
00004450 0240 0007                  		andi.w	#7,d0
00004454 D040                       		add.w	d0,d0
00004456 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
0000445A 31C0 FE10                  		move.w	d0,(v_zone).w
0000445E 5278 FFF2                  		addq.w	#1,(v_demonum).w ; add 1 to demo number
00004462 0C78 0004 FFF2             		cmpi.w	#4,(v_demonum).w ; is demo number less than 4?
00004468 6500                       		blo.s	loc_3422	; if yes, branch
0000446A 31FC 0000 FFF2             		move.w	#0,(v_demonum).w ; reset demo number to	0
00004470                            
00004470                            loc_3422:
00004470 31FC 0001 FFF0             		move.w	#1,(f_demo).w	; turn demo mode on
00004476 11FC 0000 F600             		move.b	#id_Demo,(v_gamemode).w ; set screen mode to 08 (demo)
0000447C 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
00004480 6600                       		bne.s	Demo_Level	; if not, branch
00004482 11FC 0000 F600             		move.b	#id_Special,(v_gamemode).w ; set screen mode to $10 (Special Stage)
00004488 4278 FE10                  		clr.w	(v_zone).w	; clear	level number
0000448C 4238 FE16                  		clr.b	(v_lastspecial).w ; clear special stage number
00004490                            
00004490                            Demo_Level:
00004490 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
00004496 7000                       		moveq	#0,d0
00004498 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
0000449C 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
000044A0 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
000044A4 21FC 0000 1388 FFC0        			move.l	#5000,(v_scorelife).w ; extra life is awarded at 50000 points
000044AC 4E75                       		rts	
000044AE                            ; ===========================================================================
000044AE                            ; ---------------------------------------------------------------------------
000044AE                            ; Levels used in demos
000044AE                            ; ---------------------------------------------------------------------------
000044AE                            Demo_Levels:	incbin	"misc\Demo Level Order - Intro.bin"
000044B6                            		even
000044B6                            
000044B6                            ; ---------------------------------------------------------------------------
000044B6                            ; Subroutine to	change what you're selecting in the level select
000044B6                            ; ---------------------------------------------------------------------------
000044B6                            
000044B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000044B6                            
000044B6                            
000044B6                            LevSelControls:
000044B6 1238 F605                  		move.b	(v_jpadpress1).w,d1
000044BA 0201 0003                  		andi.b	#btnUp+btnDn,d1	; is up/down pressed and held?
000044BE 6600                       		bne.s	LevSel_UpDown	; if yes, branch
000044C0 5378 FF80                  		subq.w	#1,(v_levseldelay).w ; subtract 1 from time to next move
000044C4 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
000044C6                            
000044C6                            LevSel_UpDown:
000044C6 31FC 000B FF80             		move.w	#$B,(v_levseldelay).w ; reset time delay
000044CC 1238 F604                  		move.b	(v_jpadhold1).w,d1
000044D0 0201 0003                  		andi.b	#btnUp+btnDn,d1	; is up/down pressed?
000044D4 6700                       		beq.s	LevSel_SndTest	; if not, branch
000044D6 3038 FF82                  		move.w	(v_levselitem).w,d0
000044DA 0801 0000                  		btst	#bitUp,d1	; is up	pressed?
000044DE 6700                       		beq.s	LevSel_Down	; if not, branch
000044E0 5340                       		subq.w	#1,d0		; move up 1 selection
000044E2 6400                       		bhs.s	LevSel_Down
000044E4 7014                       		moveq	#$14,d0		; if selection moves below 0, jump to selection	$14
000044E6                            
000044E6                            LevSel_Down:
000044E6 0801 0001                  		btst	#bitDn,d1	; is down pressed?
000044EA 6700                       		beq.s	LevSel_Refresh	; if not, branch
000044EC 5240                       		addq.w	#1,d0		; move down 1 selection
000044EE 0C40 0015                  		cmpi.w	#$15,d0
000044F2 6500                       		blo.s	LevSel_Refresh
000044F4 7000                       		moveq	#0,d0		; if selection moves above $14,	jump to	selection 0
000044F6                            
000044F6                            LevSel_Refresh:
000044F6 31C0 FF82                  		move.w	d0,(v_levselitem).w ; set new selection
000044FA 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
000044FE 4E75                       		rts	
00004500                            ; ===========================================================================
00004500                            
00004500                            LevSel_SndTest:
00004500 0C78 0014 FF82             		cmpi.w	#$14,(v_levselitem).w ; is item $14 selected?
00004506 6600                       		bne.s	LevSel_NoMove	; if not, branch
00004508 1238 F605                  		move.b	(v_jpadpress1).w,d1
0000450C 0201 000C                  		andi.b	#btnR+btnL,d1	; is left/right	pressed?
00004510 6700                       		beq.s	LevSel_NoMove	; if not, branch
00004512 3038 FF84                  		move.w	(v_levselsound).w,d0
00004516 0801 0002                  		btst	#bitL,d1	; is left pressed?
0000451A 6700                       		beq.s	LevSel_Right	; if not, branch
0000451C 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
0000451E 6400                       		bhs.s	LevSel_Right
00004520 705F                       		moveq	#$5F,d0		; if sound test	moves below 0, set to $4F
00004522                            
00004522                            LevSel_Right:
00004522 0801 0003                  		btst	#bitR,d1	; is right pressed?
00004526 6700                       		beq.s	LevSel_Refresh2	; if not, branch
00004528 5240                       		addq.w	#1,d0		; add 1	to sound test
0000452A 0C40 0050                  		cmpi.w	#$50,d0
0000452E 6500                       		blo.s	LevSel_Refresh2
00004530 7000                       		moveq	#0,d0		; if sound test	moves above $4F, set to	0
00004532                            
00004532                            LevSel_Refresh2:
00004532 31C0 FF84                  		move.w	d0,(v_levselsound).w ; set sound test number
00004536 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
0000453A                            
0000453A                            LevSel_NoMove:
0000453A 4E75                       		rts	
0000453C                            ; End of function LevSelControls
0000453C                            
0000453C                            ; ---------------------------------------------------------------------------
0000453C                            ; Subroutine to load level select text
0000453C                            ; ---------------------------------------------------------------------------
0000453C                            
0000453C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000453C                            
0000453C                            
0000453C                            LevSelTextLoad:
0000453C                            
0000453C =62100003                  	textpos:	= ($40000000+(($E210&$3FFF)<<16)+(($E210&$C000)>>14))
0000453C                            					; $E210 is a VRAM address
0000453C                            
0000453C 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00004542 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00004548 283C 6210 0003             		move.l	#textpos,d4	; text position on screen
0000454E 363C E680                  		move.w	#$E680,d3	; VRAM setting (4th palette, $680th tile)
00004552 7214                       		moveq	#$14,d1		; number of lines of text
00004554                            
00004554                            	LevSel_DrawAll:
00004554 2D44 0004                  		move.l	d4,4(a6)
00004558 6100 0000                  		bsr.w	LevSel_ChgLine	; draw line of text
0000455C 0684 0080 0000             		addi.l	#$800000,d4	; jump to next line
00004562 51C9 FFF0                  		dbf	d1,LevSel_DrawAll
00004566                            
00004566 7000                       		moveq	#0,d0
00004568 3038 FF82                  		move.w	(v_levselitem).w,d0
0000456C 3200                       		move.w	d0,d1
0000456E 283C 6210 0003             		move.l	#textpos,d4
00004574 EF48                       		lsl.w	#7,d0
00004576 4840                       		swap	d0
00004578 D880                       		add.l	d0,d4
0000457A 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00004580 E749                       		lsl.w	#3,d1
00004582 3001                       		move.w	d1,d0
00004584 D241                       		add.w	d1,d1
00004586 D240                       		add.w	d0,d1
00004588 D2C1                       		adda.w	d1,a1
0000458A 363C C680                  		move.w	#$C680,d3	; VRAM setting (3rd palette, $680th tile)
0000458E 2D44 0004                  		move.l	d4,4(a6)
00004592 6100 0000                  		bsr.w	LevSel_ChgLine	; recolour selected line
00004596 363C E680                  		move.w	#$E680,d3
0000459A 0C78 0014 FF82             		cmpi.w	#$14,(v_levselitem).w
000045A0 6600                       		bne.s	LevSel_DrawSnd
000045A2 363C C680                  		move.w	#$C680,d3
000045A6                            
000045A6                            LevSel_DrawSnd:
000045B0 3038 FF84                  		move.w	(v_levselsound).w,d0
000045B4 0640 0080                  		addi.w	#$80,d0
000045B8 1400                       		move.b	d0,d2
000045BA E808                       		lsr.b	#4,d0
000045BC 6100 0000                  		bsr.w	LevSel_ChgSnd	; draw 1st digit
000045C0 1002                       		move.b	d2,d0
000045C2 6100 0000                  		bsr.w	LevSel_ChgSnd	; draw 2nd digit
000045C6 4E75                       		rts	
000045C8                            ; End of function LevSelTextLoad
000045C8                            
000045C8                            
000045C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000045C8                            
000045C8                            
000045C8                            LevSel_ChgSnd:
000045C8 0240 000F                  		andi.w	#$F,d0
000045CC 0C00 000A                  		cmpi.b	#$A,d0		; is digit $A-$F?
000045D0 6500                       		blo.s	LevSel_Numb	; if not, branch
000045D2 5E00                       		addi.b	#7,d0		; use alpha characters
000045D4                            
000045D4                            	LevSel_Numb:
000045D4 D043                       		add.w	d3,d0
000045D6 3C80                       		move.w	d0,(a6)
000045D8 4E75                       		rts	
000045DA                            ; End of function LevSel_ChgSnd
000045DA                            
000045DA                            
000045DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000045DA                            
000045DA                            
000045DA                            LevSel_ChgLine:
000045DA 7417                       		moveq	#$17,d2		; number of characters per line
000045DC                            
000045DC                            	LevSel_LineLoop:
000045DC 7000                       		moveq	#0,d0
000045DE 1019                       		move.b	(a1)+,d0	; get character
000045E0 6A00                       		bpl.s	LevSel_CharOk	; branch if valid
000045E2 3CBC 0000                  		move.w	#0,(a6)		; use blank character
000045E6 51CA FFF4                  		dbf	d2,LevSel_LineLoop
000045EA 4E75                       		rts	
000045EC                            
000045EC                            
000045EC                            	LevSel_CharOk:
000045EC D043                       		add.w	d3,d0		; combine char with VRAM setting
000045EE 3C80                       		move.w	d0,(a6)		; send to VRAM
000045F0 51CA FFEA                  		dbf	d2,LevSel_LineLoop
000045F4 4E75                       		rts	
000045F6                            ; End of function LevSel_ChgLine
000045F6                            
000045F6                            ; ===========================================================================
000045F6                            ; ---------------------------------------------------------------------------
000045F6                            ; Level	select menu text
000045F6                            ; ---------------------------------------------------------------------------
000045F6                            		incbin	"misc\Level Select Text (JP1).bin"
000047EE                            		even
000047EE                            ; ---------------------------------------------------------------------------
000047EE                            ; Music	playlist
000047EE                            ; ---------------------------------------------------------------------------
000047EE                            MusicList:
000047EE 00                         		dc.b bgm_GHZ    ; GHZ1
000047EF 00                                 	dc.b bgm_LZ    ; GHZ2
000047F0 00                                 	dc.b bgm_LZ   ; GHZ3
000047F1 00                                 	dc.b bgm_LZ    ; GHZ4
000047F2 00                                 	dc.b bgm_Stop    ; LZ1
000047F3 00                                 	dc.b bgm_Stop   ; LZ2
000047F4 00                                 	dc.b bgm_Stop    ; LZ3
000047F5 00                                 	dc.b bgm_SBZ3    ; LZ4
000047F6 00                                 	dc.b bgm_MZ    ; MZ1
000047F7 00                                 	dc.b bgm_SBZ    ; MZ2
000047F8 00                                 	dc.b bgm_SBZ    ; MZ3
000047F9 00                                 	dc.b bgm_SBZ    ; MZ4
000047FA 00                                 	dc.b bgm_LZ    ; SLZ1
000047FB 00                                 	dc.b bgm_LZ    ; SLZ2
000047FC 00                                 	dc.b bgm_LZ    ; SLZ3
000047FD 00                                 	dc.b bgm_LZ    ; SLZ4
000047FE 00                                 	dc.b bgm_SYZ    ; SYZ1
000047FF 00                                 	dc.b bgm_SLZ    ; SYZ2
00004800 00                                 	dc.b bgm_SLZ    ; SYZ3
00004801 00                                 	dc.b bgm_SLZ    ; SYZ4
00004802 00                                 	dc.b bgm_SBZ    ; SBZ1
00004803 00                                 	dc.b bgm_SBZ    ; SBZ2
00004804 00                                 	dc.b bgm_FZ		; SBZ3
00004805 00                                 	dc.b bgm_SBZ    ; SBZ4
00004806 00                                 	dc.b bgm_GHZ    ; GHZ1
00004807 00                                 	dc.b bgm_GHZ    ; GHZ1
00004808 00                                 	dc.b bgm_GHZ    ; GHZ1
00004809 00                                 	dc.b bgm_GHZ    ; GHZ1
0000480A                                    	even
0000480A                            ; ===========================================================================
0000480A                            
0000480A                            ; ---------------------------------------------------------------------------
0000480A                            ; Level
0000480A                            ; ---------------------------------------------------------------------------
0000480A                            
0000480A                            GM_Level:
0000480A 08F8 0007 F600             		bset	#7,(v_gamemode).w ; add $80 to screen mode (for pre level sequence)
00004810 4A78 FFF0                  		tst.w	(f_demo).w
00004814 6B00                       		bmi.s	Level_NoMusicFade
0000481E                            
0000481E                            	Level_NoMusicFade:
0000481E 6100 CF28                  		bsr.w	ClearPLC
00004822 6100 D95E                  		bsr.w	PaletteFadeOut
00004826 4A78 FFF0                  		tst.w	(f_demo).w	; is an ending sequence demo running?
0000482A 6B00                       		bmi.s	Level_ClrRam	; if yes, branch
0000482C 46FC 2700                  		disable_ints
0000483A 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004840 6100 CABC                  		bsr.w	NemDec
00004844 46FC 2300                  		enable_ints
00004848 7000                       		moveq	#0,d0
0000484A 1038 FE10                  		move.b	(v_zone).w,d0
0000484E E948                       		lsl.w	#4,d0
00004850 45F9 0000 0000             		lea	(LevelHeaders).l,a2
00004856 45F2 0000                  		lea	(a2,d0.w),a2
0000485A 7000                       		moveq	#0,d0
0000485C 1012                       		move.b	(a2),d0
0000485E 6700                       		beq.s	loc_37FC
00004860 6100 CE88                  		bsr.w	AddPLC		; load level patterns
00004864                            
00004864                            loc_37FC:
00004864 7000                       		moveq	#plcid_Main2,d0
00004866 6100 CE82                  		bsr.w	AddPLC		; load standard	patterns
0000486A                            
0000486A                            Level_ClrRam:
0000486A 43F8 D000                  		lea	(v_objspace).w,a1
0000486E 7000                       		moveq	#0,d0
00004870 323C 07FF                  		move.w	#$7FF,d1
00004874                            
00004874                            	Level_ClrObjRam:
00004874 22C0                       		move.l	d0,(a1)+
00004876 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
0000487A                            
0000487A 43F8 F628                  		lea	($FFFFF628).w,a1
0000487E 7000                       		moveq	#0,d0
00004880 323C 0015                  		move.w	#$15,d1
00004884                            
00004884                            	Level_ClrVars1:
00004884 22C0                       		move.l	d0,(a1)+
00004886 51C9 FFFC                  		dbf	d1,Level_ClrVars1 ; clear misc variables
0000488A                            
0000488A 43F8 F700                  		lea	(v_screenposx).w,a1
0000488E 7000                       		moveq	#0,d0
00004890 323C 003F                  		move.w	#$3F,d1
00004894                            
00004894                            	Level_ClrVars2:
00004894 22C0                       		move.l	d0,(a1)+
00004896 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
0000489A                            
0000489A 43F8 FE60                  		lea	(v_oscillate+2).w,a1
0000489E 7000                       		moveq	#0,d0
000048A0 323C 0047                  		move.w	#$47,d1
000048A4                            
000048A4                            	Level_ClrVars3:
000048A4 22C0                       		move.l	d0,(a1)+
000048A6 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
000048AA                            
000048AA 46FC 2700                  		disable_ints
000048AE 6100 C8D0                  		bsr.w	ClearScreen
000048B2 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
000048B8 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
000048BC 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
000048C0 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
000048C4 3CBC 857C                  		move.w	#$8500+(vram_sprites>>9),(a6) ; set sprite table address
000048C8 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
000048CC 3CBC 8004                  		move.w	#$8004,(a6)		; 8-colour mode
000048D0 3CBC 8720                  		move.w	#$8720,(a6)		; set background colour (line 3; colour 0)
000048D4 31FC 8ADF F624             		move.w	#$8A00+223,(v_hbla_hreg).w ; set palette change position (for water)
000048DA 3CB8 F624                  		move.w	(v_hbla_hreg).w,(a6)
000048DE 31FC C800 C8FC             		ResetDMAQueue	
000048E4 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ?
000048EA 6600                       		bne.s	Level_LoadPal	; if not, branch
000048EC                            
000048EC 3CBC 8014                  		move.w	#$8014,(a6)	; enable H-interrupts
000048F0 7000                       		moveq	#0,d0
000048F2 1038 FE11                  		move.b	(v_act).w,d0
000048F6 D040                       		add.w	d0,d0
000048F8 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
000048FE 3031 0000                  		move.w	(a1,d0.w),d0
00004902 31C0 F646                  		move.w	d0,(v_waterpos1).w ; set water heights
00004906 31C0 F648                  		move.w	d0,(v_waterpos2).w
0000490A 31C0 F64A                  		move.w	d0,(v_waterpos3).w
0000490E 4238 F64D                  		clr.b	(v_wtr_routine).w ; clear water routine counter
00004912 4238 F64E                  		clr.b	(f_wtr_state).w	; clear	water state
00004916 11FC 0001 F64C             		move.b	#1,(f_water).w	; enable water
0000491C                            
0000491C                            Level_LoadPal:
0000491C 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00004922 46FC 2300                  		move	#$2300,sr
00004926 4EB9 0000 0000             		jsr		LoadPlayerPal
0000492C 6100 DB3A                  		bsr.w	PalLoad2	; load Sonic's pallet line
00004930 0C38 0001 F64C             		cmp.b	#1,(f_water).w ; Is water enabled?
00004936 6600                       		bne.s	Level_GetBgm	; if not, branch
00004938 4EB9 0000 0000             		jsr		LoadPlayerWaterPal
0000493E 6100 DB68                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
00004942 4A38 FE30                  		tst.b	($FFFFFE30).w
00004946 6700                       		beq.s	Level_GetBgm
00004948 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
0000494E                            
0000494E                            	Level_GetBgm:
0000494E 4A78 FFF0                  		tst.w	(f_demo).w
00004952 6B00                               	bmi.s	Level_SkipTtlCard
00004954 7000                               	moveq	#0,d0
00004956 3038 FE10                  		move.w	(v_zone).w,d0
0000495A E418                       		ror.b	#2,d0
0000495C EC48                       		lsr.w   #6,d0
0000495E 43F9 0000 47EE                     	lea	(MusicList).l,a1 ; load    music playlist
00004964 1031 0000                          	move.b	(a1,d0.w),d0
00004968 11C0 F5C6                  		move.b	d0,((v_Saved_music)).w
0000496C 6100 C8DC                          	bsr.w	PlaySound    ; play music
00004970 11FC 0000 D080                     	move.b	#id_TitleCard,(v_objspace+$80).w ; load title card object
00004976                            
00004976                            
00004976                            Level_TtlCardLoop:
00004976 11FC 000C F62A             		move.b	#$C,(v_vbla_routine).w
0000497C 6100 F082                  		bsr.w	WaitForVBla
00004980 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004986 4EB9 0000 0000             		jsr	(BuildSprites).l
0000498C 6100 CDC8                  		bsr.w	RunPLC
00004990 3038 D108                  		move.w	(v_objspace+$108).w,d0
00004994 B078 D130                  		cmp.w	(v_objspace+$130).w,d0 ; has title card sequence finished?
00004998 66DC                       		bne.s	Level_TtlCardLoop ; if not, branch
0000499A 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are there any items in the pattern load cue?
0000499E 66D6                       		bne.s	Level_TtlCardLoop ; if yes, branch
000049A0 4EB9 0000 0000             		jsr	(Hud_Base).l	; load basic HUD gfx
000049A6                            
000049A6                            	Level_SkipTtlCard:
000049A6 4EB9 0000 0000             		jsr		LoadPlayerPal
000049AC 6100 DA7E                  		bsr.w	PalLoad1	; load Sonic's palette
000049B0 6100 0000                  		bsr.w	LevelSizeLoad
000049B4 6100 0000                  		bsr.w	DeformLayers
000049B8 08F8 0002 F754             		bset	#2,(v_fg_scroll_flags).w
000049BE 6100 0000                  		bsr.w	LevelDataLoad ; load block mappings and palettes
000049C2 6100 0000                  		bsr.w	LoadTilesFromStart
000049C6 4EB9 0000 0000             		jsr	(FloorLog_Unk).l
000049CC 6100 0000                  		bsr.w	ColIndexLoad
000049D0 6100 0000                  		bsr.w	LZWaterFeatures
000049D4 11FC 0000 D000             		move.b	#id_SonicPlayer,(v_player).w ; load Sonic object
000049DA 4A78 FFF0                  		tst.w	(f_demo).w
000049DE 6B00                       		bmi.s	Level_ChkDebug
000049E0 11FC 0000 D040             		move.b	#id_HUD,(v_objspace+$40).w ; load HUD object
000049E6                            
000049E6                            Level_ChkDebug:
000049E6 4A38 FFE2                  		tst.b	(f_debugcheat).w ; has debug cheat been entered?
000049EA 6700                       		beq.s	Level_ChkWater	; if not, branch
000049EC 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is A button held?
000049F2 6700                       		beq.s	Level_ChkWater	; if not, branch
000049F4 11FC 0001 FFFA             		move.b	#1,(f_debugmode).w ; enable debug mode
000049FA                            
000049FA                            Level_ChkWater:
000049FA 31FC 0000 F602             		move.w	#0,(v_jpadhold2).w
00004A00 31FC 0000 F604             		move.w	#0,(v_jpadhold1).w
00004A06 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ?
00004A0C 6600                       		bne.s	Level_LoadObj	; if not, branch
00004A0E 11FC 0000 D780             		move.b	#id_WaterSurface,(v_objspace+$780).w ; load water surface object
00004A14 31FC 0060 D788             		move.w	#$60,(v_objspace+$780+obX).w
00004A1A 11FC 0000 D7C0             		move.b	#id_WaterSurface,(v_objspace+$7C0).w
00004A20 31FC 0120 D7C8             		move.w	#$120,(v_objspace+$7C0+obX).w
00004A26                            
00004A26                            Level_LoadObj:
00004A26 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00004A2C 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004A32 4EB9 0000 0000             		jsr	(BuildSprites).l
00004A38 7000                       		moveq	#0,d0
00004A3A 4A38 FE30                  		tst.b	(v_lastlamp).w	; are you starting from	a lamppost?
00004A3E 6600                       		bne.s	Level_SkipClr	; if yes, branch
00004A40 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
00004A44 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
00004A48 11C0 FE1B                  		move.b	d0,(v_lifecount).w ; clear lives counter
00004A4C                            
00004A4C                            	Level_SkipClr:
00004A4C 11C0 FE1A                  		move.b	d0,(f_timeover).w
00004A50 11C0 FE2C                  		move.b	d0,(v_shield).w	; clear shield
00004A54 11C0 F5C8                  		move.b	d0,(v_rshield).w; clear red shield
00004A58 11C0 F5C9                  		move.b	d0,(v_gshield).w; clear gold shield
00004A5C 11C0 F5CA                  		move.b	d0,(v_spshield).w; clear gold shield
00004A60 11C0 FE2D                  		move.b	d0,(v_invinc).w	; clear invincibility
00004A64 11C0 FE2E                  		move.b	d0,(v_shoes).w	; clear speed shoes
00004A68 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00004A6C 31C0 FE08                  		move.w	d0,(v_debuguse).w
00004A70 31C0 FE02                  		move.w	d0,(f_restart).w
00004A74 31C0 FE04                  		move.w	d0,(v_framecount).w
00004A78 6100 0000                  		bsr.w	OscillateNumInit
00004A7C 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w ; update score counter
00004A82 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w ; update rings counter
00004A88 11FC 0001 FE1E             		move.b	#1,(f_timecount).w ; update time counter
00004A8E 31FC 0000 F790             		move.w	#0,(v_btnpushtime1).w
00004A94 43F9 0000 0000             		lea	(DemoDataPtr).l,a1 ; load demo data
00004A9A 7000                       		moveq	#0,d0
00004A9C 1038 FE10                  		move.b	(v_zone).w,d0
00004AA0 E548                       		lsl.w	#2,d0
00004AA2 2271 0000                  		movea.l	(a1,d0.w),a1
00004AA6 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
00004AAA 6A00                       		bpl.s	Level_Demo	; if yes, branch
00004AAC 43F9 0000 0000             		lea	(DemoEndDataPtr).l,a1 ; load ending demo data
00004AB2 3038 FFF4                  		move.w	(v_creditsnum).w,d0
00004AB6 5340                       		subq.w	#1,d0
00004AB8 E548                       		lsl.w	#2,d0
00004ABA 2271 0000                  		movea.l	(a1,d0.w),a1
00004ABE                            
00004ABE                            Level_Demo:
00004ABE 11E9 0001 F792             		move.b	1(a1),(v_btnpushtime2).w ; load key press duration
00004AC4 5338 F792                  		subq.b	#1,(v_btnpushtime2).w ; subtract 1 from duration
00004AC8 31FC 0708 F614             		move.w	#1800,(v_demolength).w
00004ACE 4A78 FFF0                  		tst.w	(f_demo).w
00004AD2 6A00                       		bpl.s	Level_ChkWaterPal
00004AD4 31FC 021C F614             		move.w	#540,(v_demolength).w
00004ADA 0C78 0004 FFF4             		cmpi.w	#4,(v_creditsnum).w
00004AE0 6600                       		bne.s	Level_ChkWaterPal
00004AE2 31FC 01FE F614             		move.w	#510,(v_demolength).w
00004AE8                            
00004AE8                            Level_ChkWaterPal:
00004AE8 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ/SBZ3?
00004AEE 6600                       		bne.s	Level_Delay	; if not, branch
00004AF0 700B                       		moveq	#palid_LZWater,d0 ; palette $B (LZ underwater)
00004AF2 0C38 0003 FE11             		cmpi.b	#3,(v_act).w	; is level SBZ3?
00004AF8 6600                       		bne.s	Level_WtrNotSbz	; if not, branch
00004AFA 700D                       		moveq	#palid_SBZ3Water,d0 ; palette $D (SBZ3 underwater)
00004AFC                            
00004AFC                            	Level_WtrNotSbz:
00004AFC 6100 D9E6                  		bsr.w	PalLoad4_Water
00004B00                            
00004B00                            Level_Delay:
00004B00 323C 0003                  		move.w	#3,d1
00004B04                            
00004B04                            	Level_DelayLoop:
00004B04 11FC 0008 F62A             		move.b	#8,(v_vbla_routine).w
00004B0A 6100 EEF4                  		bsr.w	WaitForVBla
00004B0E 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00004B12                            
00004B12 31FC 202F F626             		move.w	#$202F,(v_pfade_start).w ; fade in 2nd, 3rd & 4th palette lines
00004B18 6100 D5C8                  		bsr.w	PalFadeIn_Alt
00004B1C 4A78 FFF0                  		tst.w	(f_demo).w	; is an ending sequence demo running?
00004B20 6B00                       		bmi.s	Level_ClrCardArt ; if yes, branch
00004B22 5438 D0A4                  		addq.b	#2,(v_objspace+$80+obRoutine).w ; make title card move
00004B26 5838 D0E4                  		addq.b	#4,(v_objspace+$C0+obRoutine).w
00004B2A 5838 D124                  		addq.b	#4,(v_objspace+$100+obRoutine).w
00004B2E 5838 D164                  		addq.b	#4,(v_objspace+$140+obRoutine).w
00004B32 6000                       		bra.s	Level_StartGame
00004B34                            ; ===========================================================================
00004B34                            
00004B34                            Level_ClrCardArt:
00004B34 7000                       		moveq	#plcid_Explode,d0
00004B36 4EB9 0000 16EA             		jsr	(AddPLC).l	; load explosion gfx
00004B3C 7000                       		moveq	#0,d0
00004B3E 1038 FE10                  		move.b	(v_zone).w,d0
00004B42 0640 0000                  		addi.w	#plcid_GHZAnimals,d0
00004B46 4EB9 0000 16EA             		jsr	(AddPLC).l	; load animal gfx (level no. + $15)
00004B4C                            
00004B4C                            Level_StartGame:
00004B4C 08B8 0007 F600             		bclr	#7,(v_gamemode).w ; subtract $80 from mode to end pre-level stuff
00004B52                            
00004B52                            ; ---------------------------------------------------------------------------
00004B52                            ; Main level loop (when	all title card and loading sequences are finished)
00004B52                            ; ---------------------------------------------------------------------------
00004B52                            
00004B52                            Level_MainLoop:
00004B52 6100 C708                  		bsr.w	PauseGame
00004B56 11FC 0008 F62A             		move.b	#8,(v_vbla_routine).w
00004B5C 6100 EEA2                  		bsr.w	WaitForVBla
00004B60 5278 FE04                  		addq.w	#1,(v_framecount).w ; add 1 to level timer
00004B64 6100 0000                  		bsr.w	MoveSonicInDemo
00004B68 6100 0000                  		bsr.w	LZWaterFeatures
00004B6C 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004B72 4A78 FE02                  			tst.w   (f_restart).w
00004B76 6600 FC92                  			bne     GM_Level
00004B7A 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode being used?
00004B7E 6600                       		bne.s	Level_DoScroll	; if yes, branch
00004B80 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; has Sonic just died?
00004B86 6400                       		bhs.s	Level_SkipScroll ; if yes, branch
00004B88                            
00004B88                            	Level_DoScroll:
00004B88 6100 0000                  		bsr.w	DeformLayers
00004B8C                            
00004B8C                            	Level_SkipScroll:
00004B8C 4EB9 0000 0000             		jsr	(BuildSprites).l
00004B92 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00004B98 6100 D134                  		bsr.w	PaletteCycle
00004B9C 6100 CBB8                  		bsr.w	RunPLC
00004BA0 6100 0000                  		bsr.w	OscillateNumDo
00004BA4 6100 0000                  		bsr.w	SynchroAnimate
00004BA8 6100 0000                  		bsr.w	SignpostArtLoad
00004BAC                            
00004BAC 0C38 0000 F600             		cmpi.b	#id_Demo,(v_gamemode).w
00004BB2 6700                       		beq.s	Level_ChkDemo	; if mode is 8 (demo), branch
00004BB4 0C38 0000 F600             		cmpi.b	#id_Level,(v_gamemode).w
00004BBA 6700 FF96                  		beq.w	Level_MainLoop	; if mode is $C (level), branch
00004BBE 4E75                       		rts	
00004BC0                            ; ===========================================================================
00004BC0                            
00004BC0                            Level_ChkDemo:
00004BC0 4A78 FE02                  		tst.w	(f_restart).w	; is level set to restart?
00004BC4 6600                       		bne.s	Level_EndDemo	; if yes, branch
00004BC6 4A78 F614                  		tst.w	(v_demolength).w ; is there time left on the demo?
00004BCA 6700                       		beq.s	Level_EndDemo	; if not, branch
00004BCC 0C38 0000 F600             		cmpi.b	#id_Demo,(v_gamemode).w
00004BD2 6700 FF7E                  		beq.w	Level_MainLoop	; if mode is 8 (demo), branch
00004BD6 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00004BDC 4E75                       		rts	
00004BDE                            ; ===========================================================================
00004BDE                            
00004BDE                            Level_EndDemo:
00004BDE 0C38 0000 F600             		cmpi.b	#id_Demo,(v_gamemode).w
00004BE4 6600                       		bne.s	Level_FadeDemo	; if mode is 8 (demo), branch
00004BE6 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00004BEC 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on & not ending sequence?
00004BF0 6A00                       		bpl.s	Level_FadeDemo	; if yes, branch
00004BF2 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; go to credits
00004BF8                            
00004BF8                            Level_FadeDemo:
00004BF8 31FC 003C F614             		move.w	#$3C,(v_demolength).w
00004BFE 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
00004C04 4278 F794                  		clr.w	(v_palchgspeed).w
00004C08                            
00004C08                            	Level_FDLoop:
00004C08 11FC 0008 F62A             		move.b	#8,(v_vbla_routine).w
00004C0E 6100 EDF0                  		bsr.w	WaitForVBla
00004C12 6100 0000                  		bsr.w	MoveSonicInDemo
00004C16 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004C1C 4EB9 0000 0000             		jsr	(BuildSprites).l
00004C22 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00004C28 5378 F794                  		subq.w	#1,(v_palchgspeed).w
00004C2C 6A00                       		bpl.s	loc_3BC8
00004C2E 31FC 0002 F794             		move.w	#2,(v_palchgspeed).w
00004C34 6100 D56C                  		bsr.w	FadeOut_ToBlack
00004C38                            
00004C38                            loc_3BC8:
00004C38 4A78 F614                  		tst.w	(v_demolength).w
00004C3C 66CA                       		bne.s	Level_FDLoop
00004C3E 4E75                       		rts	
00004C40                            ; ===========================================================================
00004C40                            
00004C40                            		include	"_inc\LZWaterFeatures.asm"
00004C40                            ; ---------------------------------------------------------------------------
00004C40                            ; Subroutine to	do special water effects in Labyrinth Zone
00004C40                            ; ---------------------------------------------------------------------------
00004C40                            
00004C40                            LZWaterFeatures:
00004C40 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00004C46 6600                       		bne.s	@notlabyrinth	; if not, branch
00004C48 4A38 F744                  			tst.b   (f_nobgscroll).w
00004C4C 6600                       			bne.s	@setheight
00004C4E 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; has Sonic just died?
00004C54 6400                       		bcc.s	@setheight	; if yes, skip other effects
00004C56                            
00004C56 6100 0000                  		bsr.w	LZWindTunnels
00004C5A 6100 0000                  		bsr.w	LZWaterSlides
00004C5E 6100 0000                  		bsr.w	LZDynamicWater
00004C62                            
00004C62                            @setheight:
00004C62 4238 F64E                  		clr.b	(f_wtr_state).w
00004C66 7000                       		moveq	#0,d0
00004C68 1038 FE60                  		move.b	(v_oscillate+2).w,d0
00004C6C E248                       		lsr.w	#1,d0
00004C6E D078 F648                  		add.w	(v_waterpos2).w,d0
00004C72 31C0 F646                  		move.w	d0,(v_waterpos1).w
00004C76 3038 F646                  		move.w	(v_waterpos1).w,d0
00004C7A 9078 F704                  		sub.w	(v_screenposy).w,d0
00004C7E 6400                       		bcc.s	@isbelow
00004C80 4A40                       		tst.w	d0
00004C82 6A00                       		bpl.s	@isbelow	; if water is below top of screen, branch
00004C84                            
00004C84 11FC 00DF F625             		move.b	#223,(v_hbla_line).w
00004C8A 11FC 0001 F64E             		move.b	#1,(f_wtr_state).w ; screen is all underwater
00004C90                            
00004C90                            	@isbelow:
00004C90 0C40 00DF                  		cmpi.w	#223,d0		; is water within 223 pixels of top of screen?
00004C94 6500                       		bcs.s	@isvisible	; if yes, branch
00004C96 303C 00DF                  		move.w	#223,d0
00004C9A                            
00004C9A                            	@isvisible:
00004C9A 11C0 F625                  		move.b	d0,(v_hbla_line).w ; set water surface as on-screen
00004C9E                            
00004C9E                            @notlabyrinth:
00004C9E 4E75                       		rts	
00004CA0                            ; ===========================================================================
00004CA0                            ; ---------------------------------------------------------------------------
00004CA0                            ; Initial water heights
00004CA0                            ; ---------------------------------------------------------------------------
00004CA0 0420                       WaterHeight:	dc.w $420	; Labyrinth 1
00004CA2 0328                       		dc.w $328	; Labyrinth 2
00004CA4 0900                       		dc.w $900	; Labyrinth 3
00004CA6 0228                       		dc.w $228	; Scrap Brain 3
00004CA8                            		even
00004CA8                            ; ===========================================================================
00004CA8                            
00004CA8                            ; ---------------------------------------------------------------------------
00004CA8                            ; Labyrinth dynamic water routines
00004CA8                            ; ---------------------------------------------------------------------------
00004CA8                            
00004CA8                            LZDynamicWater:
00004CA8 7000                       		moveq	#0,d0
00004CAA 1038 FE11                  		move.b	(v_act).w,d0
00004CAE D040                       		add.w	d0,d0
00004CB0 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
00004CB4 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
00004CB8 7200                       		moveq	#0,d1
00004CBA 1238 F64C                  		move.b	(f_water).w,d1
00004CBE 3038 F64A                  		move.w	(v_waterpos3).w,d0
00004CC2 9078 F648                  		sub.w	(v_waterpos2).w,d0
00004CC6 6700                       		beq.s	@exit		; if water level is correct, branch
00004CC8 6400                       		bcc.s	@movewater	; if water level is too high, branch
00004CCA 4441                       		neg.w	d1		; set water to move up instead
00004CCC                            
00004CCC                            	@movewater:
00004CCC D378 F648                  		add.w	d1,(v_waterpos2).w ; move water up/down
00004CD0                            
00004CD0                            	@exit:
00004CD0 4E75                       		rts	
00004CD2                            ; ===========================================================================
00004CD2 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
00004CD4 0000                       		dc.w DynWater_LZ2-DynWater_Index
00004CD6 0000                       		dc.w DynWater_LZ3-DynWater_Index
00004CD8 0000                       		dc.w DynWater_SBZ3-DynWater_Index
00004CDA                            ; ===========================================================================
00004CDA                            
00004CDA                            DynWater_LZ1:
00004CDA 4E75                       		rts	
00004CDC                            ; ===========================================================================
00004CDC                            
00004CDC                            DynWater_LZ2:
00004CDC 3038 F700                  		move.w	(v_screenposx).w,d0
00004CE0 323C 0328                  		move.w	#$328,d1
00004CE4 0C40 0500                  		cmpi.w	#$500,d0
00004CE8 6500                       		bcs.s	@setwater
00004CEA 323C 03C8                  		move.w	#$3C8,d1
00004CEE 0C40 0B00                  		cmpi.w	#$B00,d0
00004CF2 6500                       		bcs.s	@setwater
00004CF4 323C 0428                  		move.w	#$428,d1
00004CF8                            
00004CF8                            	@setwater:
00004CF8 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004CFC 4E75                       		rts	
00004CFE                            ; ===========================================================================
00004CFE                            
00004CFE                            DynWater_LZ3:
00004CFE 3038 F700                  		move.w	(v_screenposx).w,d0
00004D02 1438 F64D                  		move.b	(v_wtr_routine).w,d2
00004D06 6600                       		bne.s	@routine2
00004D08                            
00004D08 323C 0900                  		move.w	#$900,d1
00004D0C 0C40 0600                  		cmpi.w	#$600,d0	; has screen reached position?
00004D10 6500                       		bcs.s	@setwaterlz3	; if not, branch
00004D12 0C78 03C0 D00C             		cmpi.w	#$3C0,(v_player+obY).w
00004D18 6500                       		bcs.s	@setwaterlz3
00004D1A 0C78 0600 D00C             		cmpi.w	#$600,(v_player+obY).w ; is Sonic in a y-axis range?
00004D20 6400                       		bcc.s	@setwaterlz3	; if not, branch
00004D22                            
00004D22 323C 04C8                  		move.w	#$4C8,d1	; set new water height
00004D26 11FC 004B A506             		move.b	#$4B,(v_lvllayout+$106).w ; update level layout
00004D2C 11FC 0001 F64D             		move.b	#1,(v_wtr_routine).w ; use second routine next
00004D3A                            
00004D3A                            	@setwaterlz3:
00004D3A 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004D3E 31C1 F648                  		move.w	d1,(v_waterpos2).w ; change water height instantly
00004D42 4E75                       		rts	
00004D44                            ; ===========================================================================
00004D44                            
00004D44                            @routine2:
00004D44 5302                       		subq.b	#1,d2
00004D46 6600                       		bne.s	@routine3
00004D48 323C 04C8                  		move.w	#$4C8,d1
00004D4C 0C40 0770                  		cmpi.w	#$770,d0
00004D50 6500                       		bcs.s	@setwater2
00004D52 323C 0308                  		move.w	#$308,d1
00004D56 0C40 1400                  		cmpi.w	#$1400,d0
00004D5A 6500                       		bcs.s	@setwater2
00004D5C 0C78 0508 F64A             		cmpi.w	#$508,(v_waterpos3).w
00004D62 6700                       		beq.s	@sonicislow
00004D64 0C78 0600 D00C             		cmpi.w	#$600,(v_player+obY).w ; is Sonic below $600 y-axis?
00004D6A 6400                       		bcc.s	@sonicislow	; if yes, branch
00004D6C 0C78 0280 D00C             		cmpi.w	#$280,(v_player+obY).w
00004D72 6400                       		bcc.s	@setwater2
00004D74                            
00004D74                            @sonicislow:
00004D74 323C 0508                  		move.w	#$508,d1
00004D78 31C1 F648                  		move.w	d1,(v_waterpos2).w
00004D7C 0C40 1770                  		cmpi.w	#$1770,d0
00004D80 6500                       		bcs.s	@setwater2
00004D82 11FC 0002 F64D             		move.b	#2,(v_wtr_routine).w
00004D88                            
00004D88                            	@setwater2:
00004D88 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004D8C 4E75                       		rts	
00004D8E                            ; ===========================================================================
00004D8E                            
00004D8E                            @routine3:
00004D8E 5302                       		subq.b	#1,d2
00004D90 6600                       		bne.s	@routine4
00004D92 323C 0508                  		move.w	#$508,d1
00004D96 0C40 1860                  		cmpi.w	#$1860,d0
00004D9A 6500                       		bcs.s	@setwater3
00004D9C 323C 0188                  		move.w	#$188,d1
00004DA0 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004DA4 6400                       		bcc.s	@loc_3DC6
00004DA6 B278 F648                  		cmp.w	(v_waterpos2).w,d1
00004DAA 6600                       		bne.s	@setwater3
00004DAC                            
00004DAC                            	@loc_3DC6:
00004DAC 11FC 0003 F64D             		move.b	#3,(v_wtr_routine).w
00004DB2                            
00004DB2                            	@setwater3:
00004DB2 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004DB6 4E75                       		rts	
00004DB8                            ; ===========================================================================
00004DB8                            
00004DB8                            @routine4:
00004DB8 5302                       		subq.b	#1,d2
00004DBA 6600                       		bne.s	@routine5
00004DBC 323C 0188                  		move.w	#$188,d1
00004DC0 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004DC4 6500                       		bcs.s	@setwater4
00004DC6 323C 0900                  		move.w	#$900,d1
00004DCA 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00004DCE 6500                       		bcs.s	@setwater4
00004DD0 11FC 0004 F64D             		move.b	#4,(v_wtr_routine).w
00004DD6 31FC 0608 F64A             		move.w	#$608,(v_waterpos3).w
00004DDC 31FC 07C0 F648             		move.w	#$7C0,(v_waterpos2).w
00004DE2 11FC 0001 F7E8             		move.b	#1,(f_switch+8).w
00004DE8 4E75                       		rts	
00004DEA                            ; ===========================================================================
00004DEA                            
00004DEA                            @setwater4:
00004DEA 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004DEE 31C1 F648                  		move.w	d1,(v_waterpos2).w
00004DF2 4E75                       		rts	
00004DF4                            ; ===========================================================================
00004DF4                            
00004DF4                            @routine5:
00004DF4 0C40 1E00                  		cmpi.w	#$1E00,d0	; has screen passed final position?
00004DF8 6500                       		bcs.s	@dontset	; if not, branch
00004DFA 31FC 0128 F64A             		move.w	#$128,(v_waterpos3).w
00004E00                            
00004E00                            	@dontset:
00004E00 4E75                       		rts	
00004E02                            ; ===========================================================================
00004E02                            
00004E02                            DynWater_SBZ3:
00004E02 323C 0228                  		move.w	#$228,d1
00004E06 0C78 0F00 F700             		cmpi.w	#$F00,(v_screenposx).w
00004E0C 6500                       		bcs.s	@setwater
00004E0E 323C 04C8                  		move.w	#$4C8,d1
00004E12                            
00004E12                            	@setwater:
00004E12 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004E16 4E75                       		rts
00004E18                            
00004E18                            ; ---------------------------------------------------------------------------
00004E18                            ; Labyrinth Zone "wind tunnels"	subroutine
00004E18                            ; ---------------------------------------------------------------------------
00004E18                            
00004E18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004E18                            
00004E18                            
00004E18                            LZWindTunnels:
00004E18 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
00004E1C 6600 0000                  		bne.w	@quit	; if yes, branch
00004E20 45F9 0000 0000             		lea	(LZWind_Data+8).l,a2
00004E26 7000                       		moveq	#0,d0
00004E28 1038 FE11                  		move.b	(v_act).w,d0	; get act number
00004E2C E748                       		lsl.w	#3,d0		; multiply by 8
00004E2E D4C0                       		adda.w	d0,a2		; add to address for data
00004E30 7200                       		moveq	#0,d1
00004E32 4A38 FE11                  		tst.b	(v_act).w	; is act number 1?
00004E36 6600                       		bne.s	@notact1	; if not, branch
00004E38 7201                       		moveq	#1,d1
00004E3A 514A                       		subq.w	#8,a2		; use different data for act 1
00004E3C                            
00004E3C                            	@notact1:
00004E3C 43F8 D000                  		lea	(v_player).w,a1
00004E40                            
00004E40                            @chksonic:
00004E40 3029 0008                  		move.w	obX(a1),d0
00004E44 B052                       		cmp.w	(a2),d0
00004E46 6500 0000                  		bcs.w	@chknext
00004E4A B06A 0004                  		cmp.w	4(a2),d0
00004E4E 6400 0000                  		bcc.w	@chknext
00004E52 3429 000C                  		move.w	obY(a1),d2
00004E56 B46A 0002                  		cmp.w	2(a2),d2
00004E5A 6500                       		bcs.s	@chknext
00004E5C B46A 0006                  		cmp.w	6(a2),d2
00004E60 6400                       		bcc.s	@chknext	; branch if Sonic is outside a range
00004E62 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00004E66 0200 003F                  		andi.b	#$3F,d0		; does VInt counter fall on 0, $40, $80 or $C0?
00004E6A 6600                       		bne.s	@skipsound	; if not, branch
00004E76                            
00004E76                            	@skipsound:
00004E76 4A38 F7C9                  		tst.b	(f_wtunnelallow).w ; are wind tunnels disabled?
00004E7A 6600 0000                  		bne.w	@quit	; if yes, branch
00004E7E 0C29 0004 0024             		cmpi.b	#4,obRoutine(a1) ; is Sonic hurt/dying?
00004E84 6400                       		bcc.s	@clrquit	; if yes, branch
00004E86 11FC 0001 F7C7             		move.b	#1,(f_wtunnelmode).w
00004E8C 0440 0080                  		subi.w	#$80,d0
00004E90 B052                       		cmp.w	(a2),d0
00004E92 6400                       		bcc.s	@movesonic
00004E94 7002                       		moveq	#2,d0
00004E96 0C38 0001 FE11             		cmpi.b	#1,(v_act).w	; is act number 2?
00004E9C 6600                       		bne.s	@notact2	; if not, branch
00004E9E 4440                       		neg.w	d0
00004EA0                            
00004EA0                            	@notact2:
00004EA0 D169 000C                  		add.w	d0,obY(a1)	; adjust Sonic's y-axis for curve of tunnel
00004EA4                            
00004EA4                            @movesonic:
00004EA4 5869 0008                  		addq.w	#4,obX(a1)
00004EA8 337C 0400 0010             		move.w	#$400,obVelX(a1) ; move Sonic horizontally
00004EAE 337C 0000 0012             		move.w	#0,obVelY(a1)
00004EB4 137C 0000 001C             		move.b	#id_Float2,obAnim(a1)	; use floating animation
00004EBA 08E9 0001 0022             		bset	#1,obStatus(a1)
00004EC0 0838 0000 F602             		btst	#0,(v_jpadhold2).w ; is up pressed?
00004EC6 6700                       		beq.s	@down		; if not, branch
00004EC8 5369 000C                  		subq.w	#1,obY(a1)	; move Sonic up on pole
00004ECC                            
00004ECC                            	@down:
00004ECC 0838 0001 F602             		btst	#1,(v_jpadhold2).w ; is down being pressed?
00004ED2 6700                       		beq.s	@end		; if not, branch
00004ED4 5269 000C                  		addq.w	#1,obY(a1)	; move Sonic down on pole
00004ED8                            
00004ED8                            	@end:
00004ED8 4E75                       		rts	
00004EDA                            ; ===========================================================================
00004EDA                            
00004EDA                            @chknext:
00004EDA 504A                       		addq.w	#8,a2		; use second set of values (act 1 only)
00004EDC 51C9 FF62                  		dbf	d1,@chksonic	; on act 1, repeat for a second tunnel
00004EE0 4A38 F7C7                  		tst.b	(f_wtunnelmode).w ; is Sonic still in a tunnel?
00004EE4 6700                       		beq.s	@quit		; if yes, branch
00004EE6 137C 0000 001C             		move.b	#id_Walk,obAnim(a1)	; use walking animation
00004EEC                            
00004EEC                            @clrquit:
00004EEC 4238 F7C7                  		clr.b	(f_wtunnelmode).w ; finish tunnel
00004EF0                            
00004EF0                            @quit:
00004EF0 4E75                       		rts	
00004EF2                            ; End of function LZWindTunnels
00004EF2                            
00004EF2                            ; ===========================================================================
00004EF2                            
00004EF2                            		;    left, top,  right, bottom boundaries
00004EF2 0A80 0300 0C10 0380        LZWind_Data:	dc.w $A80, $300, $C10,  $380 ; act 1 values (set 1)
00004EFA 0F80 0100 1410 0180        		dc.w $F80, $100, $1410,	$180 ; act 1 values (set 2)
00004F02 0460 0400 0710 0480        		dc.w $460, $400, $710,  $480 ; act 2 values
00004F0A 0A20 0600 1610 06E0        		dc.w $A20, $600, $1610, $6E0 ; act 3 values
00004F12 0C80 0600 13D0 0680        		dc.w $C80, $600, $13D0, $680 ; SBZ act 3 values
00004F1A                            		even
00004F1A                            
00004F1A                            ; ---------------------------------------------------------------------------
00004F1A                            ; Labyrinth Zone water slide subroutine
00004F1A                            ; ---------------------------------------------------------------------------
00004F1A                            
00004F1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004F1A                            
00004F1A                            
00004F1A                            LZWaterSlides:
00004F1A 43F8 D000                  		lea	(v_player).w,a1
00004F1E 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic jumping?
00004F24 6600                       		bne.s	loc_3F6A	; if not, branch
00004F26 3029 000C                  		move.w	obY(a1),d0
00004F2A E248                       		lsr.w	#1,d0
00004F2C 0240 0380                  		andi.w	#$380,d0
00004F30 1229 0008                  		move.b	obX(a1),d1
00004F34 0241 007F                  		andi.w	#$7F,d1
00004F38 D041                       		add.w	d1,d0
00004F3A 45F8 A400                  		lea	(v_lvllayout).w,a2
00004F3E 1032 0000                  		move.b	(a2,d0.w),d0
00004F42 45FA 0000                  		lea	Slide_Chunks_End(pc),a2
00004F46 7200                       		moveq	#Slide_Chunks_End-Slide_Chunks-1,d1
00004F48                            
00004F48                            loc_3F62:
00004F48 B022                       		cmp.b	-(a2),d0
00004F4A 57C9 FFFC                  		dbeq	d1,loc_3F62
00004F4E 6700                       		beq.s	LZSlide_Move
00004F50                            
00004F50                            loc_3F6A:
00004F50 4A38 F7CA                  		tst.b	(f_jumponly).w
00004F54 6700                       		beq.s	locret_3F7A
00004F56 337C 0005 003E             		move.w	#5,$3E(a1)
00004F5C 4238 F7CA                  		clr.b	(f_jumponly).w
00004F60                            
00004F60                            locret_3F7A:
00004F60 4E75                       		rts	
00004F62                            ; ===========================================================================
00004F62                            
00004F62                            LZSlide_Move:
00004F62 0C41 0003                  		cmpi.w	#3,d1
00004F66 6400                       		bcc.s	loc_3F84
00004F68 4E71                       		nop	
00004F6A                            
00004F6A                            loc_3F84:
00004F6A 08A9 0000 0022             		bclr	#0,obStatus(a1)
00004F70 103B 1000                  		move.b	Slide_Speeds(pc,d1.w),d0
00004F74 1340 0020                  		move.b	d0,obInertia(a1)
00004F78 6A00                       		bpl.s	loc_3F9A
00004F7A 08E9 0000 0022             		bset	#0,obStatus(a1)
00004F80                            
00004F80                            loc_3F9A:
00004F80 4229 0021                  		clr.b	obInertia+1(a1)
00004F84 137C 0000 001C             		move.b	#id_WaterSlide,obAnim(a1) ; use Sonic's "sliding" animation
00004F8A 11FC 0001 F7CA             		move.b	#1,(f_jumponly).w ; lock controls (except jumping)
00004F90 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00004F94 0200 001F                  		andi.b	#$1F,d0
00004F98 6600                       		bne.s	locret_3FBE
00004FA4                            
00004FA4                            locret_3FBE:
00004FA4 4E75                       		rts	
00004FA6                            ; End of function LZWaterSlides
00004FA6                            
00004FA6                            ; ===========================================================================
00004FA6                            ; byte_3FC0:
00004FA6                            Slide_Speeds:
00004FA6 0AF5 0AF6 F5F4 0B          		dc.b $A, $F5, $A, $F6, $F5, $F4, $B
00004FAE 00                         		even
00004FAE                            
00004FAE                            Slide_Chunks:
00004FAE 54                         		dc.b $54 ;2, 7, 3, $4C, $4B, 8, 4
00004FAF                            ; byte_3FCF
00004FAF                            Slide_Chunks_End
00004FB0 00                         		even
00004FB0 00                         		even
00004FB0                            		include	"_inc\MoveSonicInDemo.asm"
00004FB0                            ; ---------------------------------------------------------------------------
00004FB0                            ; Subroutine to	move Sonic in demo mode
00004FB0                            ; ---------------------------------------------------------------------------
00004FB0                            
00004FB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004FB0                            
00004FB0                            
00004FB0                            MoveSonicInDemo:
00004FB0 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
00004FB4 6600                       		bne.s	MDemo_On	; if yes, branch
00004FB6 4E75                       		rts	
00004FB8                            ; ===========================================================================
00004FB8                            
00004FB8                            ; This is an unused subroutine for recording a demo
00004FB8                            
00004FB8                            DemoRecorder:
00004FB8 43F9 0008 0000             		lea	($80000).l,a1
00004FBE 3038 F790                  		move.w	(v_btnpushtime1).w,d0
00004FC2 D2C0                       		adda.w	d0,a1
00004FC4 1038 F604                  		move.b	(v_jpadhold1).w,d0
00004FC8 B011                       		cmp.b	(a1),d0
00004FCA 6600                       		bne.s	@next
00004FCC 5229 0001                  		addq.b	#1,1(a1)
00004FD0 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
00004FD6 6700                       		beq.s	@next
00004FD8 4E75                       		rts	
00004FDA                            
00004FDA                            	@next:
00004FDA 1340 0002                  		move.b	d0,2(a1)
00004FDE 137C 0000 0003             		move.b	#0,3(a1)
00004FE4 5478 F790                  		addq.w	#2,(v_btnpushtime1).w
00004FE8 0278 03FF F790             		andi.w	#$3FF,(v_btnpushtime1).w
00004FEE 4E75                       		rts	
00004FF0                            ; ===========================================================================
00004FF0                            
00004FF0                            MDemo_On:
00004FF0 4A38 F604                  		tst.b	(v_jpadhold1).w	; is start button pressed?
00004FF4 6A00                       		bpl.s	@dontquit	; if not, branch
00004FF6 4A78 FFF0                  		tst.w	(f_demo).w	; is this an ending sequence demo?
00004FFA 6B00                       		bmi.s	@dontquit	; if yes, branch
00004FFC 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; go to title screen
00005002                            
00005002                            	@dontquit:
00005002 43F9 0000 0000             		lea	(DemoDataPtr).l,a1
00005008 7000                       		moveq	#0,d0
0000500A 1038 FE10                  		move.b	(v_zone).w,d0
0000500E 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is this a special stage?
00005014 6600                       		bne.s	@notspecial	; if not, branch
00005016 7006                       		moveq	#6,d0		; use demo #6
00005018                            
00005018                            	@notspecial:
00005018 E548                       		lsl.w	#2,d0
0000501A 2271 0000                  		movea.l	(a1,d0.w),a1	; fetch address for demo data
0000501E 4A78 FFF0                  		tst.w	(f_demo).w	; is this an ending sequence demo?
00005022 6A00                       		bpl.s	@notcredits	; if not, branch
00005024 43F9 0000 0000             		lea	(DemoEndDataPtr).l,a1
0000502A 3038 FFF4                  		move.w	(v_creditsnum).w,d0
0000502E 5340                       		subq.w	#1,d0
00005030 E548                       		lsl.w	#2,d0
00005032 2271 0000                  		movea.l	(a1,d0.w),a1	; fetch address for credits demo
00005036                            
00005036                            	@notcredits:
00005036 3038 F790                  		move.w	(v_btnpushtime1).w,d0
0000503A D2C0                       		adda.w	d0,a1
0000503C 1011                       		move.b	(a1),d0
0000503E 41F8 F604                  		lea	(v_jpadhold1).w,a0
00005042 1200                       		move.b	d0,d1
00005044 7400                       			moveq	#0,d2
00005046 B500                       		eor.b	d2,d0
00005048 10C1                       		move.b	d1,(a0)+
0000504A C001                       		and.b	d1,d0
0000504C 10C0                       		move.b	d0,(a0)+
0000504E 5338 F792                  		subq.b	#1,(v_btnpushtime2).w
00005052 6400                       		bcc.s	@end
00005054 11E9 0003 F792             		move.b	3(a1),(v_btnpushtime2).w
0000505A 5478 F790                  		addq.w	#2,(v_btnpushtime1).w
0000505E                            
0000505E                            	@end:
0000505E 4E75                       		rts	
00005060                            ; End of function MoveSonicInDemo
00005060                            
00005060                            ; ===========================================================================
00005060                            ; ---------------------------------------------------------------------------
00005060                            ; Demo sequence	pointers
00005060                            ; ---------------------------------------------------------------------------
00005060 0000 0000                  DemoDataPtr:	dc.l Demo_GHZ		; demos run after the title screen
00005064 0000 0000                  		dc.l Demo_GHZ
00005068 0000 0000                  		dc.l Demo_MZ
0000506C 0000 0000                  		dc.l Demo_MZ
00005070 0000 0000                  		dc.l Demo_SYZ
00005074 0000 0000                  		dc.l Demo_SYZ
00005078 0000 0000                  		dc.l Demo_SS
0000507C 0000 0000                  		dc.l Demo_SS
00005080                            
00005080 0000 0000                  DemoEndDataPtr:	dc.l Demo_EndGHZ1	; demos run during the credits
00005084 0000 0000                  		dc.l Demo_EndMZ
00005088 0000 0000                  		dc.l Demo_EndSYZ
0000508C 0000 0000                  		dc.l Demo_EndLZ
00005090 0000 0000                  		dc.l Demo_EndSLZ
00005094 0000 0000                  		dc.l Demo_EndSBZ1
00005098 0000 0000                  		dc.l Demo_EndSBZ2
0000509C 0000 0000                  		dc.l Demo_EndGHZ2
000050A0                            
000050A0 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
000050B0 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
000050C0 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
000050D0                            		even
000050D0                            		even
000050D0                            
000050D0                            ; ---------------------------------------------------------------------------
000050D0                            ; Collision index pointer loading subroutine
000050D0                            ; ---------------------------------------------------------------------------
000050D0                            
000050D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000050D0                            
000050D0                            
000050D0                            ColIndexLoad:
000050D0 7000                       		moveq	#0,d0
000050D2 1038 FE10                  		move.b	(v_zone).w,d0
000050D6 E548                       		lsl.w	#2,d0
000050D8 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),(v_collindex).w
000050DE 4E75                       		rts	
000050E0                            ; End of function ColIndexLoad
000050E0                            
000050E0                            ; ===========================================================================
000050E0                            ; ---------------------------------------------------------------------------
000050E0                            ; Collision index pointers
000050E0                            ; ---------------------------------------------------------------------------
000050E0 0000 0000                  ColPointers:	dc.l Col_GHZ
000050E4 0000 0000                  		dc.l Col_LZ
000050E8 0000 0000                  		dc.l Col_MZ
000050EC 0000 0000                  		dc.l Col_SLZ
000050F0 0000 0000                  		dc.l Col_SYZ
000050F4 0000 0000                  		dc.l Col_SBZ
000050F8                            ;		dc.l Col_GHZ ; Pointer for Ending is missing by default.
000050F8                            
000050F8                            		include	"_inc\Oscillatory Routines.asm"
000050F8                            ; ---------------------------------------------------------------------------
000050F8                            ; Oscillating number subroutines
000050F8                            ; ---------------------------------------------------------------------------
000050F8                            
000050F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000050F8                            
000050F8                            ; Initialise the values
000050F8                            
000050F8                            OscillateNumInit:
000050F8 43F8 FE5E                  		lea	(v_oscillate).w,a1
000050FC 45F9 0000 0000             		lea	(@baselines).l,a2
00005102 7220                       		moveq	#$20,d1
00005104                            
00005104                            	@loop:
00005104 32DA                       		move.w	(a2)+,(a1)+	; copy baseline values to RAM
00005106 51C9 FFFC                  		dbf	d1,@loop
0000510A 4E75                       		rts	
0000510C                            
0000510C                            
0000510C                            ; ===========================================================================
0000510C 007C                       @baselines:	dc.w %0000000001111100	; oscillation direction bitfield
0000510E 0080 0000                  		dc.w $80, 0
00005112 0080 0000                  		dc.w $80, 0
00005116 0080 0000                  		dc.w $80, 0
0000511A 0080 0000                  		dc.w $80, 0
0000511E 0080 0000                  		dc.w $80, 0
00005122 0080 0000                  		dc.w $80, 0
00005126 0080 0000                  		dc.w $80, 0
0000512A 0080 0000                  		dc.w $80, 0
0000512E 0080 0000                  		dc.w $80, 0
00005132 50F0 011E                  		dc.w $50F0, $11E
00005136 2080 00B4                  		dc.w $2080, $B4
0000513A 3080 010E                  		dc.w $3080, $10E
0000513E 5080 01C2                  		dc.w $5080, $1C2
00005142 7080 0276                  		dc.w $7080, $276
00005146 0080 0000                  		dc.w $80, 0
0000514A 0080 0000                  		dc.w $80, 0
0000514E                            		even
0000514E                            
0000514E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000514E                            
0000514E                            ; Oscillate values
0000514E                            
0000514E                            OscillateNumDo:
0000514E 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; has Sonic just died?
00005154 6400                       		bcc.s	@end		; if yes, branch
00005156 43F8 FE5E                  		lea	(v_oscillate).w,a1
0000515A 45F9 0000 0000             		lea	(@settings).l,a2
00005160 3619                       		move.w	(a1)+,d3	; get oscillation direction bitfield
00005162 720F                       		moveq	#$F,d1
00005164                            
00005164                            @loop:
00005164 341A                       		move.w	(a2)+,d2	; get frequency
00005166 381A                       		move.w	(a2)+,d4	; get amplitude
00005168 0303                       		btst	d1,d3		; check oscillation direction
0000516A 6600                       		bne.s	@down		; branch if 1
0000516C                            
0000516C                            	@up:
0000516C 3029 0002                  		move.w	2(a1),d0	; get current rate
00005170 D042                       		add.w	d2,d0		; add frequency
00005172 3340 0002                  		move.w	d0,2(a1)
00005176 D151                       		add.w	d0,0(a1)	; add rate to value
00005178 B811                       		cmp.b	0(a1),d4
0000517A 6200                       		bhi.s	@next
0000517C 03C3                       		bset	d1,d3
0000517E 6000                       		bra.s	@next
00005180                            
00005180                            	@down:
00005180 3029 0002                  		move.w	2(a1),d0
00005184 9042                       		sub.w	d2,d0
00005186 3340 0002                  		move.w	d0,2(a1)
0000518A D151                       		add.w	d0,0(a1)
0000518C B811                       		cmp.b	0(a1),d4
0000518E 6300                       		bls.s	@next
00005190 0383                       		bclr	d1,d3
00005192                            
00005192                            	@next:
00005192 5849                       		addq.w	#4,a1
00005194 51C9 FFCE                  		dbf	d1,@loop
00005198 31C3 FE5E                  		move.w	d3,(v_oscillate).w
0000519C                            
0000519C                            @end:
0000519C 4E75                       		rts	
0000519E                            ; End of function OscillateNumDo
0000519E                            
0000519E                            ; ===========================================================================
0000519E 0002 0010                  @settings:	dc.w 2,	$10	; frequency, amplitude
000051A2 0002 0018                  		dc.w 2,	$18
000051A6 0002 0020                  		dc.w 2,	$20
000051AA 0002 0030                  		dc.w 2,	$30
000051AE 0004 0020                  		dc.w 4,	$20
000051B2 0008 0008                  		dc.w 8,	8
000051B6 0008 0040                  		dc.w 8,	$40
000051BA 0004 0040                  		dc.w 4,	$40
000051BE 0002 0050                  		dc.w 2,	$50
000051C2 0002 0050                  		dc.w 2,	$50
000051C6 0002 0020                  		dc.w 2,	$20
000051CA 0003 0030                  		dc.w 3,	$30
000051CE 0005 0050                  		dc.w 5,	$50
000051D2 0007 0070                  		dc.w 7,	$70
000051D6 0002 0010                  		dc.w 2,	$10
000051DA 0002 0010                  		dc.w 2,	$10
000051DE                            		even
000051DE                            		even
000051DE                            
000051DE                            ; ---------------------------------------------------------------------------
000051DE                            ; Subroutine to	change synchronised animation variables (rings, giant rings)
000051DE                            ; ---------------------------------------------------------------------------
000051DE                            
000051DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000051DE                            
000051DE                            
000051DE                            SynchroAnimate:
000051DE                            
000051DE                            ; Used for GHZ spiked log
000051DE                            Sync1:
000051DE 5338 FEC0                  		subq.b	#1,(v_ani0_time).w ; has timer reached 0?
000051E2 6A00                       		bpl.s	Sync2		; if not, branch
000051E4 11FC 000B FEC0             		move.b	#$B,(v_ani0_time).w ; reset timer
000051EA 5338 FEC1                  		subq.b	#1,(v_ani0_frame).w ; next frame
000051EE 0238 0007 FEC1             		andi.b	#7,(v_ani0_frame).w ; max frame is 7
000051F4                            
000051F4                            ; Used for rings and giant rings
000051F4                            Sync2:
000051F4 5338 FEC2                  		subq.b	#1,(v_ani1_time).w
000051F8 6A00                       		bpl.s	Sync3
000051FA 11FC 0007 FEC2             		move.b	#7,(v_ani1_time).w
00005200 5238 FEC3                  		addq.b	#1,(v_ani1_frame).w
00005204 0238 0003 FEC3             		andi.b	#3,(v_ani1_frame).w
0000520A                            
0000520A                            ; Used for nothing
0000520A                            Sync3:
0000520A 5338 FEC4                  		subq.b	#1,(v_ani2_time).w
0000520E 6A00                       		bpl.s	Sync4
00005210 11FC 0007 FEC4             		move.b	#7,(v_ani2_time).w
00005216 5238 FEC5                  		addq.b	#1,(v_ani2_frame).w
0000521A 0C38 0006 FEC5             		cmpi.b	#6,(v_ani2_frame).w
00005220 6500                       		blo.s	Sync4
00005222 11FC 0000 FEC5             		move.b	#0,(v_ani2_frame).w
00005228                            
00005228                            ; Used for bouncing rings
00005228                            Sync4:
00005228 4A38 FEC6                  		tst.b	(v_ani3_time).w
0000522C 6700                       		beq.s	SyncEnd
0000522E 7000                       		moveq	#0,d0
00005230 1038 FEC6                  		move.b	(v_ani3_time).w,d0
00005234 D078 FEC8                  		add.w	(v_ani3_buf).w,d0
00005238 31C0 FEC8                  		move.w	d0,(v_ani3_buf).w
0000523C EF58                       		rol.w	#7,d0
0000523E 0240 0003                  		andi.w	#3,d0
00005242 11C0 FEC7                  		move.b	d0,(v_ani3_frame).w
00005246 5338 FEC6                  		subq.b	#1,(v_ani3_time).w
0000524A                            
0000524A                            SyncEnd:
0000524A 4E75                       		rts	
0000524C                            ; End of function SynchroAnimate
0000524C                            
0000524C                            ; ---------------------------------------------------------------------------
0000524C                            ; End-of-act signpost pattern loading subroutine
0000524C                            ; ---------------------------------------------------------------------------
0000524C                            
0000524C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000524C                            
0000524C                            
0000524C                            SignpostArtLoad:
0000524C 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
00005250 6600 0000                  		bne.w	@exit		; if yes, branch
00005254 0C38 0002 FE11             		cmpi.b	#2,(v_act).w	; is act number 02 (act 3)?
0000525A 6700                       		beq.s	@exit		; if yes, branch
0000525C                            
0000525C 3038 F700                  		move.w	(v_screenposx).w,d0
00005260 3238 F72A                  		move.w	(v_limitright2).w,d1
00005264 0441 0100                  		subi.w	#$100,d1
00005268 B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
0000526A 6D00                       		blt.s	@exit		; if not, branch
0000526C 4A38 FE1E                  		tst.b	(f_timecount).w
00005270 6700                       		beq.s	@exit
00005272 B278 F728                  		cmp.w	(v_limitleft2).w,d1
00005276 6700                       		beq.s	@exit
00005278 31C1 F728                  		move.w	d1,(v_limitleft2).w ; move left boundary to current screen position
0000527C 7000                       		moveq	#plcid_Signpost,d0
0000527E 6000 C49C                  		bra.w	NewPLC		; load signpost	patterns
00005282                            
00005282                            	@exit:
00005282 4E75                       		rts	
00005284                            ; End of function SignpostArtLoad
00005284                            
00005284                            ; ===========================================================================
00005284                            Demo_GHZ:	incbin	"demodata\Intro - GHZ.bin"
00005304                            Demo_MZ:	incbin	"demodata\Intro - MZ.bin"
00005434                            Demo_SYZ:	incbin	"demodata\Intro - SYZ.bin"
000054B4                            Demo_SS:	incbin	"demodata\Intro - Special Stage.bin"
000055B4                            ; ===========================================================================
000055B4                            
000055B4                            ; ---------------------------------------------------------------------------
000055B4                            ; Special Stage
000055B4                            ; ---------------------------------------------------------------------------
000055B4                            
000055B4                            GM_Special:
000055BC 6100 CCEE                  		bsr.w	PaletteWhiteOut
000055C0 46FC 2700                  		disable_ints
000055C4 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
000055CA 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
000055CE 3CBC 8004                  		move.w	#$8004,(a6)	; 8-colour mode
000055D2 31FC 8AAF F624             		move.w	#$8A00+175,(v_hbla_hreg).w
000055D8 3CBC 9011                  		move.w	#$9011,(a6)	; 128-cell hscroll size
000055DC 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
000055E0 0200 00BF                  		andi.b	#$BF,d0
000055E4 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
000055EA 6100 BB94                  		bsr.w	ClearScreen
000055EE 46FC 2300                  		enable_ints
000055F2 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$6FFF,$5000
00005614                            
00005614                            	SS_WaitForDMA:
00005614 3215                       		move.w	(a5),d1		; read control port ($C00004)
00005616 0801 0001                  		btst	#1,d1		; is DMA running?
0000561A 66F8                       		bne.s	SS_WaitForDMA	; if yes, branch
0000561C 3ABC 8F02                  		move.w	#$8F02,(a5)	; set VDP increment to 2 bytes
00005620 6100 0000                  		bsr.w	SS_BGLoad
00005624 7000                       		moveq	#plcid_SpecialStage,d0
00005626 6100 C22E                  		bsr.w	QuickPLC	; load special stage patterns
0000562A                            
0000562A 43F8 D000                  		lea	(v_objspace).w,a1
0000562E 7000                       		moveq	#0,d0
00005630 323C 07FF                  		move.w	#$7FF,d1
00005634                            	SS_ClrObjRam:
00005634 22C0                       		move.l	d0,(a1)+
00005636 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
0000563A                            
0000563A 43F8 F700                  		lea	(v_screenposx).w,a1
0000563E 7000                       		moveq	#0,d0
00005640 323C 003F                  		move.w	#$3F,d1
00005644                            	SS_ClrRam1:
00005644 22C0                       		move.l	d0,(a1)+
00005646 51C9 FFFC                  		dbf	d1,SS_ClrRam1	; clear	variables
0000564A                            
0000564A 43F8 FE60                  		lea	(v_oscillate+2).w,a1
0000564E 7000                       		moveq	#0,d0
00005650 323C 0027                  		move.w	#$27,d1
00005654                            	SS_ClrRam2:
00005654 22C0                       		move.l	d0,(a1)+
00005656 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
0000565A                            
0000565A 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
0000565E 7000                       		moveq	#0,d0
00005660 323C 007F                  		move.w	#$7F,d1
00005664                            	SS_ClrNemRam:
00005664 22C0                       		move.l	d0,(a1)+
00005666 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
0000566A                            
0000566A 4238 F64E                  		clr.b	(f_wtr_state).w
0000566E 4278 FE02                  		clr.w	(f_restart).w
00005672 700A                       		moveq	#palid_Special,d0
00005674 6100 CDB6                  		bsr.w	PalLoad1	; load special stage palette
00005678 4EB9 0000 0000             		jsr	(SS_Load).l		; load SS layout data
0000567E 21FC 0000 0000 F700        		move.l	#0,(v_screenposx).w
00005686 21FC 0000 0000 F704        		move.l	#0,(v_screenposy).w
0000568E 11FC 0000 D000             		move.b	#id_SonicSpecial,(v_player).w ; load special stage Sonic object
00005694 6100 0000                  		bsr.w	PalCycle_SS
00005698 4278 F780                  		clr.w	(v_ssangle).w	; set stage angle to "upright"
0000569C 31FC 0040 F782             		move.w	#$40,(v_ssrotate).w ; set stage rotation speed
000056AA 31FC 0000 F790             		move.w	#0,(v_btnpushtime1).w
000056B0 43F9 0000 5060             		lea	(DemoDataPtr).l,a1
000056B6 7006                       		moveq	#6,d0
000056B8 E548                       		lsl.w	#2,d0
000056BA 2271 0000                  		movea.l	(a1,d0.w),a1
000056BE 11E9 0001 F792             		move.b	1(a1),(v_btnpushtime2).w
000056C4 5338 F792                  		subq.b	#1,(v_btnpushtime2).w
000056C8 4278 FE20                  		clr.w	(v_rings).w
000056CC 4238 FE1B                  		clr.b	(v_lifecount).w
000056D0 31FC 0000 FE08             		move.w	#0,(v_debuguse).w
000056D6 31FC 0708 F614             		move.w	#1800,(v_demolength).w
000056DC 4A38 FFE2                  		tst.b	(f_debugcheat).w ; has debug cheat been entered?
000056E0 6700                       		beq.s	SS_NoDebug	; if not, branch
000056E2 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is A button pressed?
000056E8 6700                       		beq.s	SS_NoDebug	; if not, branch
000056EA 11FC 0001 FFFA             		move.b	#1,(f_debugmode).w ; enable debug mode
000056F0                            
000056F0                            	SS_NoDebug:
000056F0 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
000056F4 0000 0040                  		ori.b	#$40,d0
000056F8 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
000056FE 6100 CB00                  		bsr.w	PaletteWhiteIn
00005702                            
00005702                            ; ---------------------------------------------------------------------------
00005702                            ; Main Special Stage loop
00005702                            ; ---------------------------------------------------------------------------
00005702                            
00005702                            SS_MainLoop:
00005702 6100 BB58                  		bsr.w	PauseGame
00005706 11FC 000A F62A             		move.b	#$A,(v_vbla_routine).w
0000570C 6100 E2F2                  		bsr.w	WaitForVBla
00005710 6100 F89E                  		bsr.w	MoveSonicInDemo
00005714 31F8 F604 F602             		move.w	(v_jpadhold1).w,(v_jpadhold2).w
0000571A 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00005720 4EB9 0000 0000             		jsr	(BuildSprites).l
00005726 4EB9 0000 0000             		jsr	(SS_ShowLayout).l
0000572C 6100 0000                  		bsr.w	SS_BGAnimate
00005730 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
00005734 6700                       		beq.s	SS_ChkEnd	; if not, branch
00005736 4A78 F614                  		tst.w	(v_demolength).w ; is there time left on the demo?
0000573A 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
0000573E                            
0000573E                            	SS_ChkEnd:
0000573E 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is game mode $10 (special stage)?
00005744 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
00005748                            
00005748 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
0000574C 6600 0000                  		bne.w	SS_ToLevel
00005750 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; set screen mode to $0C (level)
00005756 0C78 0503 FE10             		cmpi.w	#(id_SBZ<<8)+3,(v_zone).w ; is level number higher than FZ?
0000575C 6500                       		blo.s	SS_Finish	; if not, branch
0000575E 4278 FE10                  		clr.w	(v_zone).w	; set to GHZ1
00005762                            
00005762                            SS_Finish:
00005762 31FC 003C F614             		move.w	#60,(v_demolength).w ; set delay time to 1 second
00005768 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
0000576E 4278 F794                  		clr.w	(v_palchgspeed).w
00005772                            
00005772                            	SS_FinLoop:
00005772 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
00005778 6100 E286                  		bsr.w	WaitForVBla
0000577C 6100 F832                  		bsr.w	MoveSonicInDemo
00005780 31F8 F604 F602             		move.w	(v_jpadhold1).w,(v_jpadhold2).w
00005786 4EB9 0000 0000             		jsr	(ExecuteObjects).l
0000578C 4EB9 0000 0000             		jsr	(BuildSprites).l
00005792 4EB9 0000 0000             		jsr	(SS_ShowLayout).l
00005798 6100 0000                  		bsr.w	SS_BGAnimate
0000579C 5378 F794                  		subq.w	#1,(v_palchgspeed).w
000057A0 6A00                       		bpl.s	loc_47D4
000057A2 31FC 0002 F794             		move.w	#2,(v_palchgspeed).w
000057A8 6100 CB22                  		bsr.w	WhiteOut_ToWhite
000057AC                            
000057AC                            loc_47D4:
000057AC 4A78 F614                  		tst.w	(v_demolength).w
000057B0 66C0                       		bne.s	SS_FinLoop
000057B2                            
000057B2 46FC 2700                  		disable_ints
000057B6 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
000057BC 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
000057C0 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
000057C4 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
000057C8 6100 B9B6                  		bsr.w	ClearScreen
000057D6 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
000057DC 6100 BB20                  		bsr.w	NemDec
000057E0 4EB9 0000 0000             		jsr	(Hud_Base).l
000057E6 31FC C800 C8FC             		ResetDMAQueue	
000057EC 46FC 2300                  		enable_ints
000057F0 7011                       		moveq	#palid_SSResult,d0
000057F2 6100 CC74                  		bsr.w	PalLoad2	; load results screen palette
000057F6 7000                       		moveq	#plcid_Main,d0
000057F8 6100 BF22                  		bsr.w	NewPLC
000057FC 7000                       		moveq	#plcid_SSResult,d0
000057FE 6100 BEEA                  		bsr.w	AddPLC		; load results screen patterns
00005802 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w ; update score counter
00005808 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; update ring bonus counter
0000580E 3038 FE20                  		move.w	(v_rings).w,d0
00005812 C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00005816 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set rings bonus
00005824                            
00005824 43F8 D000                  		lea	(v_objspace).w,a1
00005828 7000                       		moveq	#0,d0
0000582A 323C 07FF                  		move.w	#$7FF,d1
0000582E                            	SS_EndClrObjRam:
0000582E 22C0                       		move.l	d0,(a1)+
00005830 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
00005834                            
00005834 11FC 0000 D5C0             		move.b	#id_SSResult,(v_objspace+$5C0).w ; load results screen object
0000583A                            
0000583A                            SS_NormalExit:
0000583A 6100 BA20                  		bsr.w	PauseGame
0000583E 11FC 000C F62A             		move.b	#$C,(v_vbla_routine).w
00005844 6100 E1BA                  		bsr.w	WaitForVBla
00005848 4EB9 0000 0000             		jsr	(ExecuteObjects).l
0000584E 4EB9 0000 0000             		jsr	(BuildSprites).l
00005854 6100 BF00                  		bsr.w	RunPLC
00005858 4A78 FE02                  		tst.w	(f_restart).w
0000585C 67DC                       		beq.s	SS_NormalExit
0000585E 4AB8 F680                  		tst.l	(v_plc_buffer).w
00005862 66D6                       		bne.s	SS_NormalExit
0000586C 6100 CA3E                  		bsr.w	PaletteWhiteOut
00005870 4E75                       		rts	
00005872                            ; ===========================================================================
00005872                            
00005872                            SS_ToSegaScreen:
00005872 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; goto Sega screen
00005878 4E75                       		rts
0000587A                            
0000587A 0C38 0000 F600             SS_ToLevel:	cmpi.b	#id_Level,(v_gamemode).w
00005880 67F0                       		beq.s	SS_ToSegaScreen
00005882 4E75                       		rts
00005884                            
00005884                            ; ---------------------------------------------------------------------------
00005884                            ; Special stage	background loading subroutine
00005884                            ; ---------------------------------------------------------------------------
00005884                            
00005884                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005884                            
00005884                            
00005884                            SS_BGLoad:
00005884 43F9 00FF 0000             		lea	($FF0000).l,a1
0000588A 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
00005890 303C 4051                  		move.w	#$4051,d0
00005894 6100 BFF2                  		bsr.w	EniDec
00005898 263C 5000 0001             		move.l	#$50000001,d3
0000589E 45F9 00FF 0080             		lea	($FF0080).l,a2
000058A4 7E06                       		moveq	#6,d7
000058A6                            
000058A6                            loc_48BE:
000058A6 2003                       		move.l	d3,d0
000058A8 7C03                       		moveq	#3,d6
000058AA 7800                       		moveq	#0,d4
000058AC 0C47 0003                  		cmpi.w	#3,d7
000058B0 6400                       		bhs.s	loc_48CC
000058B2 7801                       		moveq	#1,d4
000058B4                            
000058B4                            loc_48CC:
000058B4 7A07                       		moveq	#7,d5
000058B6                            
000058B6                            loc_48CE:
000058B6 224A                       		movea.l	a2,a1
000058B8 0A04 0001                  		eori.b	#1,d4
000058BC 6600                       		bne.s	loc_48E2
000058BE 0C47 0006                  		cmpi.w	#6,d7
000058C2 6600                       		bne.s	loc_48F2
000058C4 43F9 00FF 0000             		lea	($FF0000).l,a1
000058CA                            
000058CA                            loc_48E2:
000058CA 48E7 F800                  		movem.l	d0-d4,-(sp)
000058CE 7207                       		moveq	#7,d1
000058D0 7407                       		moveq	#7,d2
000058D2 6100 BA00                  		bsr.w	TilemapToVRAM
000058D6 4CDF 001F                  		movem.l	(sp)+,d0-d4
000058DA                            
000058DA                            loc_48F2:
000058DA 0680 0010 0000             		addi.l	#$100000,d0
000058E0 51CD FFD4                  		dbf	d5,loc_48CE
000058E4 0680 0380 0000             		addi.l	#$3800000,d0
000058EA 0A04 0001                  		eori.b	#1,d4
000058EE 51CE FFC4                  		dbf	d6,loc_48CC
000058F2 0683 1000 0000             		addi.l	#$10000000,d3
000058F8 6A00                       		bpl.s	loc_491C
000058FA 4843                       		swap	d3
000058FC 0683 0000 C000             		addi.l	#$C000,d3
00005902 4843                       		swap	d3
00005904                            
00005904                            loc_491C:
00005904 D4FC 0080                  		adda.w	#$80,a2
00005908 51CF FF9C                  		dbf	d7,loc_48BE
0000590C 43F9 00FF 0000             		lea	($FF0000).l,a1
00005912 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00005918 303C 4000                  		move.w	#$4000,d0
0000591C 6100 BF6A                  		bsr.w	EniDec
00005920 43F9 00FF 0000             		lea	($FF0000).l,a1
00005926 203C 4000 0003             		move.l	#$40000003,d0
0000592C 723F                       		moveq	#$3F,d1
0000592E 741F                       		moveq	#$1F,d2
00005930 6100 B9A2                  		bsr.w	TilemapToVRAM
00005934 43F9 00FF 0000             		lea	($FF0000).l,a1
0000593A 203C 5000 0003             		move.l	#$50000003,d0
00005940 723F                       		moveq	#$3F,d1
00005942 743F                       		moveq	#$3F,d2
00005944 6100 B98E                  		bsr.w	TilemapToVRAM
00005948 4E75                       		rts	
0000594A                            ; End of function SS_BGLoad
0000594A                            
0000594A                            ; ---------------------------------------------------------------------------
0000594A                            ; Palette cycling routine - special stage
0000594A                            ; ---------------------------------------------------------------------------
0000594A                            
0000594A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000594A                            
0000594A                            
0000594A                            PalCycle_SS:
0000594A 4A78 F63A                  		tst.w	(f_pause).w
0000594E 6600                       		bne.s	locret_49E6
00005950 5378 F79C                  		subq.w	#1,(v_palss_time).w
00005954 6A00                       		bpl.s	locret_49E6
00005956 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
0000595C 3038 F79A                  		move.w	(v_palss_num).w,d0
00005960 5278 F79A                  		addq.w	#1,(v_palss_num).w
00005964 0240 001F                  		andi.w	#$1F,d0
00005968 E548                       		lsl.w	#2,d0
0000596A 41F9 0000 0000             		lea	(byte_4A3C).l,a0
00005970 D0C0                       		adda.w	d0,a0
00005972 1018                       		move.b	(a0)+,d0
00005974 6A00                       		bpl.s	loc_4992
00005976 303C 01FF                  		move.w	#$1FF,d0
0000597A                            
0000597A                            loc_4992:
0000597A 31C0 F79C                  		move.w	d0,(v_palss_time).w
0000597E 7000                       		moveq	#0,d0
00005980 1018                       		move.b	(a0)+,d0
00005982 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00005986 43F9 0000 0000             		lea	(byte_4ABC).l,a1
0000598C 43F1 0000                  		lea	(a1,d0.w),a1
00005990 303C 8200                  		move.w	#-$7E00,d0
00005994 1019                       		move.b	(a1)+,d0
00005996 3C80                       		move.w	d0,(a6)
00005998 11D1 F616                  		move.b	(a1),(v_scrposy_dup).w
0000599C 303C 8400                  		move.w	#-$7C00,d0
000059A0 1018                       		move.b	(a0)+,d0
000059A2 3C80                       		move.w	d0,(a6)
000059A4 23FC 4000 0010 00C0 0004   		move.l	#$40000010,(vdp_control_port).l
000059AE 23F8 F616 00C0 0000        		move.l	(v_scrposy_dup).w,(vdp_data_port).l
000059B6 7000                       		moveq	#0,d0
000059B8 1018                       		move.b	(a0)+,d0
000059BA 6B00                       		bmi.s	loc_49E8
000059BC 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
000059C2 D2C0                       		adda.w	d0,a1
000059C4 45F8 FB4E                  		lea	(v_pal_dry+$4E).w,a2
000059C8 24D9                       		move.l	(a1)+,(a2)+
000059CA 24D9                       		move.l	(a1)+,(a2)+
000059CC 24D9                       		move.l	(a1)+,(a2)+
000059CE                            
000059CE                            locret_49E6:
000059CE 4E75                       		rts	
000059D0                            ; ===========================================================================
000059D0                            
000059D0                            loc_49E8:
000059D0 3238 F79E                  		move.w	($FFFFF79E).w,d1
000059D4 0C40 008A                  		cmpi.w	#$8A,d0
000059D8 6500                       		blo.s	loc_49F4
000059DA 5241                       		addq.w	#1,d1
000059DC                            
000059DC                            loc_49F4:
000059DC C2FC 002A                  		mulu.w	#$2A,d1
000059E0 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
000059E6 D2C1                       		adda.w	d1,a1
000059E8 0240 007F                  		andi.w	#$7F,d0
000059EC 0880 0000                  		bclr	#0,d0
000059F0 6700                       		beq.s	loc_4A18
000059F2 45F8 FB6E                  		lea	(v_pal_dry+$6E).w,a2
000059F6 24D1                       		move.l	(a1),(a2)+
000059F8 24E9 0004                  		move.l	4(a1),(a2)+
000059FC 24E9 0008                  		move.l	8(a1),(a2)+
00005A00                            
00005A00                            loc_4A18:
00005A00 D2FC 000C                  		adda.w	#$C,a1
00005A04 45F8 FB5A                  		lea	(v_pal_dry+$5A).w,a2
00005A08 0C40 000A                  		cmpi.w	#$A,d0
00005A0C 6500                       		blo.s	loc_4A2E
00005A0E 0440 000A                  		subi.w	#$A,d0
00005A12 45F8 FB7A                  		lea	(v_pal_dry+$7A).w,a2
00005A16                            
00005A16                            loc_4A2E:
00005A16 3200                       		move.w	d0,d1
00005A18 D040                       		add.w	d0,d0
00005A1A D041                       		add.w	d1,d0
00005A1C D2C0                       		adda.w	d0,a1
00005A1E 24D9                       		move.l	(a1)+,(a2)+
00005A20 34D9                       		move.w	(a1)+,(a2)+
00005A22 4E75                       		rts	
00005A24                            ; End of function PalCycle_SS
00005A24                            
00005A24                            ; ===========================================================================
00005A24 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00005A34                            
00005A34 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00005A44 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00005A54 FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00005A64 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00005A74 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00005A84 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00005A94 FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00005AA4                            		even
00005AA4 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00005AB2                            		even
00005AB2                            
00005AB2                            Pal_SSCyc1:	incbin	"palette\Cycle - Special Stage 1.bin"
00005AFA                            		even
00005AFA                            Pal_SSCyc2:	incbin	"palette\Cycle - Special Stage 2.bin"
00005BCC                            		even
00005BCC                            
00005BCC                            ; ---------------------------------------------------------------------------
00005BCC                            ; Subroutine to	make the special stage background animated
00005BCC                            ; ---------------------------------------------------------------------------
00005BCC                            
00005BCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005BCC                            
00005BCC                            
00005BCC                            SS_BGAnimate:
00005BCC 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00005BD0 6600                       		bne.s	loc_4BF6
00005BD2 31FC 0000 F70C             		move.w	#0,(v_bgscreenposy).w
00005BD8 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00005BDE                            
00005BDE                            loc_4BF6:
00005BDE 0C40 0008                  		cmpi.w	#8,d0
00005BE2 6400                       		bhs.s	loc_4C4E
00005BE4 0C40 0006                  		cmpi.w	#6,d0
00005BE8 6600                       		bne.s	loc_4C10
00005BEA 5278 F718                  		addq.w	#1,(v_bg3screenposx).w
00005BEE 5278 F70C                  		addq.w	#1,(v_bgscreenposy).w
00005BF2 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00005BF8                            
00005BF8                            loc_4C10:
00005BF8 7000                       		moveq	#0,d0
00005BFA 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00005BFE 4440                       		neg.w	d0
00005C00 4840                       		swap	d0
00005C02 43F9 0000 0000             		lea	(byte_4CCC).l,a1
00005C08 47F8 AA00                  		lea	(v_ngfx_buffer).w,a3
00005C0C 7609                       		moveq	#9,d3
00005C0E                            
00005C0E                            loc_4C26:
00005C0E 302B 0002                  		move.w	2(a3),d0
00005C12 6100 DE1E                  		bsr.w	CalcSine
00005C16 7400                       		moveq	#0,d2
00005C18 1419                       		move.b	(a1)+,d2
00005C1A C1C2                       		muls.w	d2,d0
00005C1C E080                       		asr.l	#8,d0
00005C1E 36C0                       		move.w	d0,(a3)+
00005C20 1419                       		move.b	(a1)+,d2
00005C22 4882                       		ext.w	d2
00005C24 D55B                       		add.w	d2,(a3)+
00005C26 51CB FFE6                  		dbf	d3,loc_4C26
00005C2A 47F8 AA00                  		lea	(v_ngfx_buffer).w,a3
00005C2E 45F9 0000 0000             		lea	(byte_4CB8).l,a2
00005C34 6000                       		bra.s	loc_4C7E
00005C36                            ; ===========================================================================
00005C36                            
00005C36                            loc_4C4E:
00005C36 0C40 000C                  		cmpi.w	#$C,d0
00005C3A 6600                       		bne.s	loc_4C74
00005C3C 5378 F718                  		subq.w	#1,(v_bg3screenposx).w
00005C40 47F8 AB00                  		lea	($FFFFAB00).w,a3
00005C44 243C 0001 8000             		move.l	#$18000,d2
00005C4A 7206                       		moveq	#6,d1
00005C4C                            
00005C4C                            loc_4C64:
00005C4C 2013                       		move.l	(a3),d0
00005C4E 9082                       		sub.l	d2,d0
00005C50 26C0                       		move.l	d0,(a3)+
00005C52 0482 0000 2000             		subi.l	#$2000,d2
00005C58 51C9 FFF2                  		dbf	d1,loc_4C64
00005C5C                            
00005C5C                            loc_4C74:
00005C5C 47F8 AB00                  		lea	($FFFFAB00).w,a3
00005C60 45F9 0000 0000             		lea	(byte_4CC4).l,a2
00005C66                            
00005C66                            loc_4C7E:
00005C66 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00005C6A 3038 F718                  		move.w	(v_bg3screenposx).w,d0
00005C6E 4440                       		neg.w	d0
00005C70 4840                       		swap	d0
00005C72 7600                       		moveq	#0,d3
00005C74 161A                       		move.b	(a2)+,d3
00005C76 3438 F70C                  		move.w	(v_bgscreenposy).w,d2
00005C7A 4442                       		neg.w	d2
00005C7C 0242 00FF                  		andi.w	#$FF,d2
00005C80 E54A                       		lsl.w	#2,d2
00005C82                            
00005C82                            loc_4C9A:
00005C82 301B                       		move.w	(a3)+,d0
00005C84 544B                       		addq.w	#2,a3
00005C86 7200                       		moveq	#0,d1
00005C88 121A                       		move.b	(a2)+,d1
00005C8A 5341                       		subq.w	#1,d1
00005C8C                            
00005C8C                            loc_4CA4:
00005C8C 2380 2000                  		move.l	d0,(a1,d2.w)
00005C90 5842                       		addq.w	#4,d2
00005C92 0242 03FC                  		andi.w	#$3FC,d2
00005C96 51C9 FFF4                  		dbf	d1,loc_4CA4
00005C9A 51CB FFE6                  		dbf	d3,loc_4C9A
00005C9E 4E75                       		rts	
00005CA0                            ; End of function SS_BGAnimate
00005CA0                            
00005CA0                            ; ===========================================================================
00005CA0 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00005CAC                            		even
00005CAC 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00005CB4                            		even
00005CB4 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00005CC8                            		even
00005CC8                            
00005CC8                            ; ===========================================================================
00005CC8                            
00005CC8                            ; ---------------------------------------------------------------------------
00005CC8                            ; Continue screen
00005CC8                            ; ---------------------------------------------------------------------------
00005CC8                            
00005CC8                            GM_Continue:
00005CC8 6100 C4B8                  		bsr.w	PaletteFadeOut
00005CCC 46FC 2700                  		disable_ints
00005CD0 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00005CD4 0200 00BF                  		andi.b	#$BF,d0
00005CD8 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00005CDE 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00005CE4 3CBC 8004                  		move.w	#$8004,(a6)	; 8 colour mode
00005CE8 3CBC 8700                  		move.w	#$8700,(a6)	; background colour
00005CEC 6100 B492                  		bsr.w	ClearScreen
00005CF0                            
00005CF0 43F8 D000                  		lea	(v_objspace).w,a1
00005CF4 7000                       		moveq	#0,d0
00005CF6 323C 07FF                  		move.w	#$7FF,d1
00005CFA                            	Cont_ClrObjRam:
00005CFA 22C0                       		move.l	d0,(a1)+
00005CFC 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
00005D00                            
00005D0A 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00005D10 6100 B5EC                  		bsr.w	NemDec
00005D1E 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00005D24 6100 B5D8                  		bsr.w	NemDec
00005D32 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
00005D38 6100 B5C4                  		bsr.w	NemDec
00005D3C 720A                       		moveq	#10,d1
00005D3E 4EB9 0000 0000             		jsr	(ContScrCounter).l	; run countdown	(start from 10)
00005D44 7012                       		moveq	#palid_Continue,d0
00005D46 6100 C6E4                  		bsr.w	PalLoad1	; load continue	screen palette
00005D52 31FC 0293 F614             		move.w	#659,(v_demolength).w ; set time delay to 11 seconds
00005D58 42B8 F700                  		clr.l	(v_screenposx).w
00005D5C 21FC 0100 0000 F704        		move.l	#$1000000,(v_screenposy).w
00005D64 11FC 0000 D000             		move.b	#id_ContSonic,(v_player).w ; load Sonic object
00005D6A 11FC 0000 D040             		move.b	#id_ContScrItem,(v_objspace+$40).w ; load continue screen objects
00005D70 11FC 0000 D080             		move.b	#id_ContScrItem,(v_objspace+$80).w
00005D76 11FC 0003 D098             		move.b	#3,(v_objspace+$80+obPriority).w
00005D7C 11FC 0004 D09A             		move.b	#4,(v_objspace+$80+obFrame).w
00005D82 11FC 0000 D0C0             		move.b	#id_ContScrItem,(v_objspace+$C0).w
00005D88 11FC 0004 D0E4             		move.b	#4,(v_objspace+$C0+obRoutine).w
00005D8E 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00005D94 4EB9 0000 0000             		jsr	(BuildSprites).l
00005D9A 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00005D9E 0000 0040                  		ori.b	#$40,d0
00005DA2 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00005DA8 6100 C332                  		bsr.w	PaletteFadeIn
00005DAC                            
00005DAC                            ; ---------------------------------------------------------------------------
00005DAC                            ; Continue screen main loop
00005DAC                            ; ---------------------------------------------------------------------------
00005DAC                            
00005DAC                            Cont_MainLoop:
00005DAC 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
00005DB2 6100 DC4C                  		bsr.w	WaitForVBla
00005DB6 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
00005DBC 6400                       		bhs.s	loc_4DF2
00005DBE 46FC 2700                  		disable_ints
00005DC2 3238 F614                  		move.w	(v_demolength).w,d1
00005DC6 82FC 003C                  		divu.w	#$3C,d1
00005DCA 0281 0000 000F             		andi.l	#$F,d1
00005DD0 4EB9 0000 0000             		jsr	(ContScrCounter).l
00005DD6 46FC 2300                  		enable_ints
00005DDA                            
00005DDA                            loc_4DF2:
00005DDA 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00005DE0 4EB9 0000 0000             		jsr	(BuildSprites).l
00005DE6 0C78 0180 D008             		cmpi.w	#$180,(v_player+obX).w ; has Sonic run off screen?
00005DEC 6400                       		bhs.s	Cont_GotoLevel	; if yes, branch
00005DEE 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
00005DF4 64B6                       		bhs.s	Cont_MainLoop
00005DF6 4A78 F614                  		tst.w	(v_demolength).w
00005DFA 6600 FFB0                  		bne.w	Cont_MainLoop
00005DFE 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00005E04 4E75                       		rts	
00005E06                            ; ===========================================================================
00005E06                            
00005E06                            Cont_GotoLevel:
00005E06 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; set screen mode to $0C (level)
00005E0C 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
00005E12 7000                       		moveq	#0,d0
00005E14 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
00005E18 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
00005E1C 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
00005E20 11C0 FE30                  		move.b	d0,(v_lastlamp).w ; clear lamppost count
00005E24 5338 FE18                  		subq.b	#1,(v_continues).w ; subtract 1 from continues
00005E28 4E75                       		rts	
00005E2A                            ; ===========================================================================
00005E2A                            
00005E2A                            		include	"_incObj\80 Continue Screen Elements.asm"
00005E2A                            ; ---------------------------------------------------------------------------
00005E2A                            ; Object 80 - Continue screen elements
00005E2A                            ; ---------------------------------------------------------------------------
00005E2A                            
00005E2A                            ContScrItem:
00005E2A 7000                       		moveq	#0,d0
00005E2C 1028 0024                  		move.b	$24(a0),d0
00005E30 323B 0000                  		move.w	CSI_Index(pc,d0.w),d1
00005E34 4EFB 1000                  		jmp	CSI_Index(pc,d1.w)
00005E38                            ; ===========================================================================
00005E38 0000                       CSI_Index:	dc.w CSI_Main-CSI_Index
00005E3A 0000                       		dc.w CSI_Display-CSI_Index
00005E3C 0000                       		dc.w CSI_MakeMiniSonic-CSI_Index
00005E3E 0000                       		dc.w CSI_ChkDel-CSI_Index
00005E40                            ; ===========================================================================
00005E40                            
00005E40                            CSI_Main:	; Routine 0
00005E40 5428 0024                  		addq.b	#2,obRoutine(a0)
00005E44 217C 0000 0000 0004        		move.l	#Map_ContScr,obMap(a0)
00005E4C 317C 8500 0002             		move.w	#$8500,obGfx(a0)
00005E52 117C 0000 0001             		move.b	#0,obRender(a0)
00005E58 117C 003C 0014             		move.b	#$3C,obActWid(a0)
00005E5E 317C 0120 0008             		move.w	#$120,obX(a0)
00005E64 317C 00C0 000A             		move.w	#$C0,obScreenY(a0)
00005E6A 31FC 0000 FE20             		move.w	#0,(v_rings).w	; clear rings
00005E70                            
00005E70                            CSI_Display:	; Routine 2
00005E70 4EF9 0000 0000             		jmp	(DisplaySprite).l
00005E76                            ; ===========================================================================
00005E76                            
00005E76                            	CSI_MiniSonicPos:
00005E76 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
00005E88 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
00005E94                            
00005E94                            CSI_MakeMiniSonic:
00005E94                            		; Routine 4
00005E94 2248                       		movea.l	a0,a1
00005E96 45F9 0000 5E76             		lea	(CSI_MiniSonicPos).l,a2
00005E9C 7200                       		moveq	#0,d1
00005E9E 1238 FE18                  		move.b	(v_continues).w,d1
00005EA2 5501                       		subq.b	#2,d1
00005EA4 6400                       		bcc.s	CSI_MoreThan1
00005EA6 4EF9 0000 0000             		jmp	(DeleteObject).l	; cancel if you have 0-1 continues
00005EAC                            
00005EAC                            	CSI_MoreThan1:
00005EAC 7601                       		moveq	#1,d3
00005EAE 0C01 000E                  		cmpi.b	#14,d1		; do you have fewer than 16 continues
00005EB2 6500                       		bcs.s	CSI_FewerThan16	; if yes, branch
00005EB4                            
00005EB4 7600                       		moveq	#0,d3
00005EB6 720E                       		moveq	#14,d1		; cap at 15 mini-Sonics
00005EB8                            
00005EB8                            	CSI_FewerThan16:
00005EB8 1401                       		move.b	d1,d2
00005EBA 0202 0001                  		andi.b	#1,d2
00005EBE                            
00005EBE                            CSI_MiniSonicLoop:
00005EBE 12BC 0000                  		move.b	#id_ContScrItem,0(a1) ; load mini-Sonic object
00005EC2 335A 0008                  		move.w	(a2)+,obX(a1)	; use above data for x-axis position
00005EC6 4A02                       		tst.b	d2		; do you have an even number of continues?
00005EC8 6700                       		beq.s	CSI_Even	; if yes, branch
00005ECA 0469 000A 0008             		subi.w	#$A,obX(a1)	; shift mini-Sonics slightly to the right
00005ED0                            
00005ED0                            	CSI_Even:
00005ED0 337C 00D0 000A             		move.w	#$D0,obScreenY(a1)
00005ED6 137C 0006 001A             		move.b	#6,obFrame(a1)
00005EDC 137C 0006 0024             		move.b	#6,obRoutine(a1)
00005EE2 237C 0000 0000 0004        		move.l	#Map_ContScr,obMap(a1)
00005EEA 337C 8551 0002             		move.w	#$8551,obGfx(a1)
00005EF0 137C 0000 0001             		move.b	#0,obRender(a1)
00005EF6 43E9 0040                  		lea	$40(a1),a1
00005EFA 51C9 FFC2                  		dbf	d1,CSI_MiniSonicLoop ; repeat for number of continues
00005EFE                            
00005EFE 43E9 FFC0                  		lea	-$40(a1),a1
00005F02 1343 0028                  		move.b	d3,obSubtype(a1)
00005F06                            
00005F06                            CSI_ChkDel:	; Routine 6
00005F06 4A28 0028                  		tst.b	obSubtype(a0)	; do you have 16 or more continues?
00005F0A 6700                       		beq.s	CSI_Animate	; if yes, branch
00005F0C 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; is Sonic running?
00005F12 6500                       		bcs.s	CSI_Animate	; if not, branch
00005F14 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00005F18 0200 0001                  		andi.b	#1,d0
00005F1C 6600                       		bne.s	CSI_Animate
00005F1E 4A78 D010                  		tst.w	(v_player+obVelX).w ; is Sonic running?
00005F22 6600                       		bne.s	CSI_Delete	; if yes, goto delete
00005F24 4E75                       		rts	
00005F26                            
00005F26                            CSI_Animate:
00005F26 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00005F2A 0200 000F                  		andi.b	#$F,d0
00005F2E 6600                       		bne.s	CSI_Display2
00005F30 0868 0000 001A             		bchg	#0,obFrame(a0)
00005F36                            
00005F36                            	CSI_Display2:
00005F36 4EF9 0000 0000             		jmp	(DisplaySprite).l
00005F3C                            ; ===========================================================================
00005F3C                            
00005F3C                            CSI_Delete:
00005F3C 4EF9 0000 0000             		jmp	(DeleteObject).l
00005F3C 4EF9 0000 0000             		jmp	(DeleteObject).l
00005F42                            		include	"_incObj\81 Continue Screen Sonic.asm"
00005F42                            ; ---------------------------------------------------------------------------
00005F42                            ; Object 81 - Sonic on the continue screen
00005F42                            ; ---------------------------------------------------------------------------
00005F42                            
00005F42                            ContSonic:
00005F42 7000                       		moveq	#0,d0
00005F44 1028 0024                  		move.b	obRoutine(a0),d0
00005F48 323B 0000                  		move.w	CSon_Index(pc,d0.w),d1
00005F4C 4EBB 1000                  		jsr	CSon_Index(pc,d1.w)
00005F50 4EF9 0000 0000             		jmp	(DisplaySprite).l
00005F56                            ; ===========================================================================
00005F56 0000                       CSon_Index:	dc.w CSon_Main-CSon_Index
00005F58 0000                       		dc.w CSon_ChkLand-CSon_Index
00005F5A 0000                       		dc.w CSon_Animate-CSon_Index
00005F5C 0000                       		dc.w CSon_Run-CSon_Index
00005F5E                            ; ===========================================================================
00005F5E                            
00005F5E                            CSon_Main:	; Routine 0
00005F5E 5428 0024                  		addq.b	#2,obRoutine(a0)
00005F62 317C 00A0 0008             		move.w	#$A0,obX(a0)
00005F68 317C 00C0 000C             		move.w	#$C0,obY(a0)
00005F6E 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
00005F76 317C 0780 0002             		move.w	#$780,obGfx(a0)
00005F7C 117C 0004 0001             		move.b	#4,obRender(a0)
00005F82 317C 0100 0018             		move.w	#$100,obPriority(a0)
00005F88 117C 0000 001C             		move.b	#id_Float3,obAnim(a0) ; use "floating" animation
00005F8E 317C 0400 0012             		move.w	#$400,obVelY(a0) ; make Sonic fall from above
00005F94                            
00005F94                            CSon_ChkLand:	; Routine 2
00005F94 0C68 01A0 000C             		cmpi.w	#$1A0,obY(a0)	; has Sonic landed yet?
00005F9A 6600                       		bne.s	CSon_ShowFall	; if not, branch
00005F9C                            
00005F9C 5428 0024                  		addq.b	#2,obRoutine(a0)
00005FA0 4268 0012                  		clr.w	obVelY(a0)	; stop Sonic falling
00005FA4 217C 0000 0000 0004        		move.l	#Map_ContScr,obMap(a0)
00005FAC 317C 8500 0002             		move.w	#$8500,obGfx(a0)
00005FB2 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
00005FB8 6000                       		bra.s	CSon_Animate
00005FBA                            
00005FBA                            CSon_ShowFall:
00005FBA 4EB9 0000 0000             		jsr	(SpeedToPos).l
00005FC0 4EB9 0000 0000             		jsr	(Sonic_Animate).l
00005FC6 4EF9 0000 0000             		jmp	(Sonic_LoadGfx).l
00005FCC                            ; ===========================================================================
00005FCC                            
00005FCC                            CSon_Animate:	; Routine 4
00005FCC 4A38 F605                  		tst.b	(v_jpadpress1).w ; is Start button pressed?
00005FD0 6B00                       		bmi.s	CSon_GetUp	; if yes, branch
00005FD2 43F9 0000 0000             		lea	(AniScript_CSon).l,a1
00005FD8 4EF9 0000 0000             		jmp	(AnimateSprite).l
00005FDE                            
00005FDE                            CSon_GetUp:
00005FDE 5428 0024                  		addq.b	#2,obRoutine(a0)
00005FE2 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
00005FEA 317C 0780 0002             		move.w	#$780,obGfx(a0)
00005FF0 117C 0000 001C             		move.b	#id_Float4,obAnim(a0) ; use "getting up" animation
00005FF6 4268 0020                  		clr.w	obInertia(a0)
00005FFA 5168 000C                  		subq.w	#8,obY(a0)
00006006                            
00006006                            CSon_Run:	; Routine 6
00006006 0C68 0800 0020             		cmpi.w	#$800,obInertia(a0) ; check Sonic's inertia
0000600C 6600                       		bne.s	CSon_AddInertia	; if too low, branch
0000600E 317C 1000 0010             		move.w	#$1000,obVelX(a0) ; move Sonic to the right
00006014 6000                       		bra.s	CSon_ShowRun
00006016                            
00006016                            CSon_AddInertia:
00006016 0668 0020 0020             		addi.w	#$20,obInertia(a0) ; increase inertia
0000601C                            
0000601C                            CSon_ShowRun:
0000601C 4EB9 0000 0000             		jsr	(SpeedToPos).l
00006022 4EB9 0000 0000             		jsr	(Sonic_Animate).l
00006028 4EF9 0000 0000             		jmp	(Sonic_LoadGfx).l
00006028 4EF9 0000 0000             		jmp	(Sonic_LoadGfx).l
0000602E                            		include	"_anim\Continue Screen Sonic.asm"
0000602E                            ; ---------------------------------------------------------------------------
0000602E                            ; Animation script - Sonic on the continue screen
0000602E                            ; ---------------------------------------------------------------------------
0000602E 0000                       AniScript_CSon:	dc.w A_CSon_1-AniScript_CSon
00006030 0401 0101 0102 0202 0303+  A_CSon_1:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, afEnd
0000603C 00                         		even
0000603C 00                         		even
0000603C                            Map_ContScr:	include	"_maps\Continue Screen.asm"
0000603C                            ; ---------------------------------------------------------------------------
0000603C                            ; Sprite mappings - Continue screen
0000603C                            ; ---------------------------------------------------------------------------
0000603C                            Map_ContScr_internal:
0000603C 0000                       		dc.w M_Cont_text-Map_ContScr_internal
0000603E 0000                       		dc.w M_Cont_Sonic1-Map_ContScr_internal
00006040 0000                       		dc.w M_Cont_Sonic2-Map_ContScr_internal
00006042 0000                       		dc.w M_Cont_Sonic3-Map_ContScr_internal
00006044 0000                       		dc.w M_Cont_oval-Map_ContScr_internal
00006046 0000                       		dc.w M_Cont_Mini1-Map_ContScr_internal
00006048 0000                       		dc.w M_Cont_Mini1-Map_ContScr_internal
0000604A 0000                       		dc.w M_Cont_Mini2-Map_ContScr_internal
0000604C 0B                         M_Cont_text:	dc.b $B
0000604D F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
00006052 F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
00006057 F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
0000605C F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
00006061 F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
00006066 F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
0000606B F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
00006070 F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
00006075 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
0000607A 3805 2021 08               		dc.b $38, 5, $20, $21, 8
0000607F 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
00006084 03                         M_Cont_Sonic1:	dc.b 3
00006085 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
0000608A F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
0000608F F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00006094 03                         M_Cont_Sonic2:	dc.b 3
00006095 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
0000609A F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
0000609F F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000060A4 03                         M_Cont_Sonic3:	dc.b 3
000060A5 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
000060AA F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000060AF F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000060B4 02                         M_Cont_oval:	dc.b 2
000060B5 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
000060BA 6009 2800 00               		dc.b $60, 9, $28, 0, 0
000060BF 01                         M_Cont_Mini1:	dc.b 1
000060C0 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
000060C5 01                         M_Cont_Mini2:	dc.b 1
000060C6 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
000060CC 00                         		even
000060CC 00                         		even
000060CC                            
000060CC                            ; ===========================================================================
000060CC                            ; ---------------------------------------------------------------------------
000060CC                            ; Ending sequence in Green Hill	Zone
000060CC                            ; ---------------------------------------------------------------------------
000060CC                            
000060CC                            GM_Ending:
000060D4 6100 C0AC                  		bsr.w	PaletteFadeOut
000060D8                            
000060D8 43F8 D000                  		lea	(v_objspace).w,a1
000060DC 7000                       		moveq	#0,d0
000060DE 323C 07FF                  		move.w	#$7FF,d1
000060E2                            	End_ClrObjRam:
000060E2 22C0                       		move.l	d0,(a1)+
000060E4 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
000060E8                            
000060E8 43F8 F628                  		lea	($FFFFF628).w,a1
000060EC 7000                       		moveq	#0,d0
000060EE 323C 0015                  		move.w	#$15,d1
000060F2                            	End_ClrRam1:
000060F2 22C0                       		move.l	d0,(a1)+
000060F4 51C9 FFFC                  		dbf	d1,End_ClrRam1	; clear	variables
000060F8                            
000060F8 43F8 F700                  		lea	(v_screenposx).w,a1
000060FC 7000                       		moveq	#0,d0
000060FE 323C 003F                  		move.w	#$3F,d1
00006102                            	End_ClrRam2:
00006102 22C0                       		move.l	d0,(a1)+
00006104 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
00006108                            
00006108 43F8 FE60                  		lea	(v_oscillate+2).w,a1
0000610C 7000                       		moveq	#0,d0
0000610E 323C 0047                  		move.w	#$47,d1
00006112                            	End_ClrRam3:
00006112 22C0                       		move.l	d0,(a1)+
00006114 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
00006118                            
00006118 46FC 2700                  		disable_ints
0000611C 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00006120 0200 00BF                  		andi.b	#$BF,d0
00006124 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
0000612A 6100 B054                  		bsr.w	ClearScreen
0000612E 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00006134 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
00006138 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
0000613C 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00006140 3CBC 857C                  		move.w	#$8500+(vram_sprites>>9),(a6) ; set sprite table address
00006144 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
00006148 3CBC 8004                  		move.w	#$8004,(a6)		; 8-colour mode
0000614C 3CBC 8720                  		move.w	#$8720,(a6)		; set background colour (line 3; colour 0)
00006150 31FC 8ADF F624             		move.w	#$8A00+223,(v_hbla_hreg).w ; set palette change position (for water)
00006156 3CB8 F624                  		move.w	(v_hbla_hreg).w,(a6)
0000615A 31FC 001E FE14             		move.w	#30,(v_air).w
00006160 31FC 0600 FE10             		move.w	#id_EndZ<<8,(v_zone).w ; set level number to 0600 (extra flowers)
00006166 0C38 0000 FE57             		cmpi.b	#0,(v_emeralds).w ; do you have all 6 emeralds?
0000616C 6700                       		beq.s	End_LoadData	; if yes, branch
0000616E 31FC 0601 FE10             		move.w	#(id_EndZ<<8)+1,(v_zone).w ; set level number to 0601 (no flowers)
00006174                            
00006174                            End_LoadData:
00006174 7000                       		moveq	#plcid_Ending,d0
00006176 6100 B6DE                  		bsr.w	QuickPLC	; load ending sequence patterns
0000617A 4EB9 0000 0000             		jsr	(Hud_Base).l
00006180 6100 0000                  		bsr.w	LevelSizeLoad
00006184 6100 0000                  		bsr.w	DeformLayers
00006188 08F8 0002 F754             		bset	#2,(v_fg_scroll_flags).w
0000618E 6100 0000                  		bsr.w	LevelDataLoad
00006192 6100 0000                  		bsr.w	LoadTilesFromStart
00006196 21FC 0000 0000 F796        		move.l	#Col_GHZ,(v_collindex).w ; load collision index
0000619E 46FC 2300                  		enable_ints
000061A2 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
000061A8 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
000061AC 6100 B858                  		bsr.w	KosDec
000061B0 4EB9 0000 0000             		jsr		LoadPlayerPal
000061B6 6100 C274                  		bsr.w	PalLoad1	; load Sonic's palette
000061C2 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is button A pressed?
000061C8 6700                       		beq.s	End_LoadSonic	; if not, branch
000061CA 11FC 0001 FFFA             		move.b	#1,(f_debugmode).w ; enable debug mode
000061D0                            
000061D0                            End_LoadSonic:
000061D0 11FC 0000 D000             		move.b	#id_SonicPlayer,(v_player).w ; load Sonic object
000061D6 08F8 0000 D022             		bset	#0,(v_player+obStatus).w ; make Sonic face left
000061DC 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock controls
000061E2 31FC 0400 F602             		move.w	#(btnL<<8),(v_jpadhold2).w ; move Sonic to the left
000061E8 31FC F800 D020             		move.w	#$F800,(v_player+obInertia).w ; set Sonic's speed
000061EE 11FC 0000 D040             		move.b	#id_HUD,(v_objspace+$40).w ; load HUD object
000061F4 4EB9 0000 0000             		jsr	(ObjPosLoad).l
000061FA 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00006200 4EB9 0000 0000             		jsr	(BuildSprites).l
00006206 7000                       		moveq	#0,d0
00006208 31C0 FE20                  		move.w	d0,(v_rings).w
0000620C 21C0 FE22                  		move.l	d0,(v_time).w
00006210 11C0 FE1B                  		move.b	d0,(v_lifecount).w
00006214 11C0 FE2C                  		move.b	d0,(v_shield).w
00006218 11C0 FE2D                  		move.b	d0,(v_invinc).w
0000621C 11C0 FE2E                  		move.b	d0,(v_shoes).w
00006220 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00006224 31C0 FE08                  		move.w	d0,(v_debuguse).w
00006228 31C0 FE02                  		move.w	d0,(f_restart).w
0000622C 31C0 FE04                  		move.w	d0,(v_framecount).w
00006230 6100 EEC6                  		bsr.w	OscillateNumInit
00006234 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w
0000623A 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w
00006240 11FC 0000 FE1E             		move.b	#0,(f_timecount).w
00006246 31FC 0708 F614             		move.w	#1800,(v_demolength).w
0000624C 11FC 0018 F62A             		move.b	#$18,(v_vbla_routine).w
00006252 6100 D7AC                  		bsr.w	WaitForVBla
00006256 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
0000625A 0000 0040                  		ori.b	#$40,d0
0000625E 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00006264 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
0000626A 6100 BE70                  		bsr.w	PaletteFadeIn
0000626E                            
0000626E                            ; ---------------------------------------------------------------------------
0000626E                            ; Main ending sequence loop
0000626E                            ; ---------------------------------------------------------------------------
0000626E                            
0000626E                            End_MainLoop:
0000626E 6100 AFEC                  		bsr.w	PauseGame
00006272 11FC 0018 F62A             		move.b	#$18,(v_vbla_routine).w
00006278 6100 D786                  		bsr.w	WaitForVBla
0000627C 5278 FE04                  		addq.w	#1,(v_framecount).w
00006280 6100 0000                  		bsr.w	End_MoveSonic
00006284 4EB9 0000 0000             		jsr	(ExecuteObjects).l
0000628A 6100 0000                  		bsr.w	DeformLayers
0000628E 4EB9 0000 0000             		jsr	(BuildSprites).l
00006294 4EB9 0000 0000             		jsr	(ObjPosLoad).l
0000629A 6100 BA32                  		bsr.w	PaletteCycle
0000629E 6100 EEAE                  		bsr.w	OscillateNumDo
000062A2 6100 EF3A                  		bsr.w	SynchroAnimate
000062A6 0C38 0000 F600             		cmpi.b	#id_Ending,(v_gamemode).w ; is game mode $18 (ending)?
000062AC 6700                       		beq.s	End_ChkEmerald	; if yes, branch
000062AE                            
000062AE 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; goto credits
000062BC 31FC 0000 FFF4             		move.w	#0,(v_creditsnum).w ; set credits index number to 0
000062C2 4E75                       		rts	
000062C4                            ; ===========================================================================
000062C4                            
000062C4                            End_ChkEmerald:
000062C4 4A78 FE02                  		tst.w	(f_restart).w	; has Sonic released the emeralds?
000062C8 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
000062CC                            
000062CC 4278 FE02                  		clr.w	(f_restart).w
000062D0 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
000062D6 4278 F794                  		clr.w	(v_palchgspeed).w
000062DA                            
000062DA                            	End_AllEmlds:
000062DA 6100 AF80                  		bsr.w	PauseGame
000062DE 11FC 0018 F62A             		move.b	#$18,(v_vbla_routine).w
000062E4 6100 D71A                  		bsr.w	WaitForVBla
000062E8 5278 FE04                  		addq.w	#1,(v_framecount).w
000062EC 6100 0000                  		bsr.w	End_MoveSonic
000062F0 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000062F6 6100 0000                  		bsr.w	DeformLayers
000062FA 4EB9 0000 0000             		jsr	(BuildSprites).l
00006300 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00006306 6100 EE46                  		bsr.w	OscillateNumDo
0000630A 6100 EED2                  		bsr.w	SynchroAnimate
0000630E 5378 F794                  		subq.w	#1,(v_palchgspeed).w
00006312 6A00                       		bpl.s	End_SlowFade
00006314 31FC 0002 F794             		move.w	#2,(v_palchgspeed).w
0000631A 6100 BFB0                  		bsr.w	WhiteOut_ToWhite
0000631E                            
0000631E                            	End_SlowFade:
0000631E 4A78 FE02                  		tst.w	(f_restart).w
00006322 6700 FFB6                  		beq.w	End_AllEmlds
00006326 4278 FE02                  		clr.w	(f_restart).w
0000632A 31FC 2829 A480             		move.w	#$2829,(v_lvllayout+$80).w ; modify level layout
00006330 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00006336 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0000633C 47F8 F700                  		lea	(v_screenposx).w,a3
00006340 49F8 A400                  		lea	(v_lvllayout).w,a4
00006344 343C 4000                  		move.w	#$4000,d2
00006348 6100 0000                  		bsr.w	DrawChunks
0000634C 7013                       		moveq	#palid_Ending,d0
0000634E 6100 C0DC                  		bsr.w	PalLoad1	; load ending palette
00006352 6100 BEAC                  		bsr.w	PaletteWhiteIn
00006356 6000 FF16                  		bra.w	End_MainLoop
0000635A                            
0000635A                            ; ---------------------------------------------------------------------------
0000635A                            ; Subroutine controlling Sonic on the ending sequence
0000635A                            ; ---------------------------------------------------------------------------
0000635A                            
0000635A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000635A                            
0000635A                            
0000635A                            End_MoveSonic:
0000635A 1038 F7D7                  		move.b	(v_sonicend).w,d0
0000635E 6600                       		bne.s	End_MoveSon2
00006360 0C78 0090 D008             		cmpi.w	#$90,(v_player+obX).w ; has Sonic passed $90 on x-axis?
00006366 6400                       		bhs.s	End_MoveSonExit	; if not, branch
00006368                            
00006368 5438 F7D7                  		addq.b	#2,(v_sonicend).w
0000636C 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock player's controls
00006372 31FC 0800 F602             		move.w	#(btnR<<8),(v_jpadhold2).w ; move Sonic to the right
00006378 4E75                       		rts	
0000637A                            ; ===========================================================================
0000637A                            
0000637A                            End_MoveSon2:
0000637A 5500                       		subq.b	#2,d0
0000637C 6600                       		bne.s	End_MoveSon3
0000637E 0C78 00A0 D008             		cmpi.w	#$A0,(v_player+obX).w ; has Sonic passed $A0 on x-axis?
00006384 6500                       		blo.s	End_MoveSonExit	; if not, branch
00006386                            
00006386 5438 F7D7                  		addq.b	#2,(v_sonicend).w
0000638A 7000                       		moveq	#0,d0
0000638C 11C0 F7CC                  		move.b	d0,(f_lockctrl).w
00006390 31C0 F602                  		move.w	d0,(v_jpadhold2).w ; stop Sonic moving
00006394 31C0 D020                  		move.w	d0,(v_player+obInertia).w
00006398 11FC 0081 F7C8             		move.b	#$81,(f_lockmulti).w ; lock controls & position
0000639E 11FC 0003 D01A             		move.b	#3,(v_player+obFrame).w
000063A4 31FC 0000 D01C             		move.w	#(id_Wait<<8)+id_Wait,(v_player+obAnim).w ; use "standing" animation
000063AA 11FC 0003 D01E             		move.b	#3,(v_player+obTimeFrame).w
000063B0 4E75                       		rts	
000063B2                            ; ===========================================================================
000063B2                            
000063B2                            End_MoveSon3:
000063B2 5500                       		subq.b	#2,d0
000063B4 6600                       		bne.s	End_MoveSonExit
000063B6 5438 F7D7                  		addq.b	#2,(v_sonicend).w
000063BA 31FC 00A0 D008             		move.w	#$A0,(v_player+obX).w
000063C0 11FC 0000 D000             		move.b	#id_EndSonic,(v_player).w ; load Sonic ending sequence object
000063C6 4278 D024                  		clr.w	(v_player+obRoutine).w
000063CA                            
000063CA                            End_MoveSonExit:
000063CA 4E75                       		rts	
000063CC                            ; End of function End_MoveSonic
000063CC                            
000063CC                            ; ===========================================================================
000063CC                            
000063CC                            		include	"_incObj\87 Ending Sequence Sonic.asm"
000063CC                            ; ---------------------------------------------------------------------------
000063CC                            ; Object 87 - Sonic on ending sequence
000063CC                            ; ---------------------------------------------------------------------------
000063CC                            
000063CC                            EndSonic:
000063CC 7000                       		moveq	#0,d0
000063CE 1028 0025                  		move.b	ob2ndRout(a0),d0
000063D2 323B 0000                  		move.w	ESon_Index(pc,d0.w),d1
000063D6 4EBB 1000                  		jsr	ESon_Index(pc,d1.w)
000063DA 4EF9 0000 0000             		jmp	(DisplaySprite).l
000063E0                            ; ===========================================================================
000063E0 0000 0000                  ESon_Index:	dc.w ESon_Main-ESon_Index, ESon_MakeEmeralds-ESon_Index
000063E4 0000 0000                  		dc.w Obj87_Animate-ESon_Index,	Obj87_LookUp-ESon_Index
000063E8 0000 0000                  		dc.w Obj87_ClrObjRam-ESon_Index, Obj87_Animate-ESon_Index
000063EC 0000 0000                  		dc.w Obj87_MakeLogo-ESon_Index, Obj87_Animate-ESon_Index
000063F0 0000 0000                  		dc.w Obj87_Leap-ESon_Index, Obj87_Animate-ESon_Index
000063F4                            
000063F4 =00000030                  eson_time:	equ $30	; time to wait between events
000063F4                            ; ===========================================================================
000063F4                            
000063F4                            ESon_Main:	; Routine 0
000063F4 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all 6 emeralds?
000063FA 6700                       		beq.s	ESon_Main2	; if yes, branch
000063FC 0628 0010 0025             		addi.b	#$10,ob2ndRout(a0) ; else, skip emerald sequence
00006402 317C 00D8 0030             		move.w	#216,eson_time(a0)
00006408 4E75                       		rts	
0000640A                            ; ===========================================================================
0000640A                            
0000640A                            ESon_Main2:
0000640A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000640E 217C 0000 0000 0004        		move.l	#Map_ESon,obMap(a0)
00006416 317C 03E1 0002             		move.w	#$3E1,obGfx(a0)
0000641C 117C 0004 0001             		move.b	#4,obRender(a0)
00006422 4228 0022                  		clr.b	obStatus(a0)
00006426 317C 0100 0018             		move.w	#$100,obPriority(a0)
0000642C 117C 0000 001A             		move.b	#0,obFrame(a0)
00006432 317C 0050 0030             		move.w	#80,eson_time(a0) ; set duration for Sonic to pause
00006438                            
00006438                            ESon_MakeEmeralds:
00006438                            		; Routine 2
00006438 5368 0030                  		subq.w	#1,eson_time(a0) ; subtract 1 from duration
0000643C 6600                       		bne.s	ESon_Wait
0000643E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00006442 317C 0001 001C             		move.w	#1,obAnim(a0)
00006448 11FC 0000 D400             		move.b	#id_EndChaos,(v_objspace+$400).w ; load chaos emeralds objects
0000644E                            
0000644E                            	ESon_Wait:
0000644E 4E75                       		rts	
00006450                            ; ===========================================================================
00006450                            
00006450                            Obj87_LookUp:	; Routine 6
00006450 0C79 2000 00FF D43C        		cmpi.w	#$2000,((v_objspace&$FFFFFF)+$400+$3C).l
00006458 6600                       		bne.s	locret_5480
0000645A 31FC 0001 FE02             		move.w	#1,(f_restart).w ; set level to	restart	(causes	flash)
00006460 317C 005A 0030             		move.w	#90,eson_time(a0)
00006466 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000646A                            
0000646A                            locret_5480:
0000646A 4E75                       		rts	
0000646C                            ; ===========================================================================
0000646C                            
0000646C                            Obj87_ClrObjRam:
0000646C                            		; Routine 8
0000646C 5368 0030                  		subq.w	#1,eson_time(a0)
00006470 6600                       		bne.s	ESon_Wait2
00006472 43F8 D400                  		lea	(v_objspace+$400).w,a1
00006476 323C 00FF                  		move.w	#$FF,d1
0000647A                            
0000647A                            Obj87_ClrLoop:
0000647A 4299                       		clr.l	(a1)+
0000647C 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
00006480 31FC 0001 FE02             		move.w	#1,(f_restart).w
00006486 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000648A 117C 0001 001C             		move.b	#1,obAnim(a0)
00006490 317C 003C 0030             		move.w	#60,eson_time(a0)
00006496                            
00006496                            ESon_Wait2:
00006496 4E75                       		rts	
00006498                            ; ===========================================================================
00006498                            
00006498                            Obj87_MakeLogo:	; Routine $C
00006498 5368 0030                  		subq.w	#1,eson_time(a0)
0000649C 6600                       		bne.s	ESon_Wait3
0000649E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000064A2 317C 00B4 0030             		move.w	#180,eson_time(a0)
000064A8 117C 0002 001C             		move.b	#2,obAnim(a0)
000064AE 11FC 0000 D400             		move.b	#id_EndSTH,(v_objspace+$400).w ; load "SONIC THE HEDGEHOG" object
000064B4                            
000064B4                            ESon_Wait3:
000064B4 4E75                       		rts	
000064B6                            ; ===========================================================================
000064B6                            
000064B6                            Obj87_Animate:	; Rountine 4, $A, $E, $12
000064B6 43F9 0000 0000             		lea	(AniScript_ESon).l,a1
000064BC 4EF9 0000 0000             		jmp	(AnimateSprite).l
000064C2                            ; ===========================================================================
000064C2                            
000064C2                            Obj87_Leap:	; Routine $10
000064C2 5368 0030                  		subq.w	#1,eson_time(a0)
000064C6 6600                       		bne.s	ESon_Wait4
000064C8 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000064CC 217C 0000 0000 0004        		move.l	#Map_ESon,obMap(a0)
000064D4 317C 03E1 0002             		move.w	#$3E1,obGfx(a0)
000064DA 117C 0004 0001             		move.b	#4,obRender(a0)
000064E0 4228 0022                  		clr.b	obStatus(a0)
000064E4 317C 0100 0018             		move.w	#$100,obPriority(a0)
000064EA 117C 0005 001A             		move.b	#5,obFrame(a0)
000064F0 117C 0002 001C             		move.b	#2,obAnim(a0)	; use "leaping"	animation
000064F6 11FC 0000 D400             		move.b	#id_EndSTH,(v_objspace+$400).w ; load "SONIC THE HEDGEHOG" object
000064FC 60B8                       		bra.s	Obj87_Animate
000064FE                            ; ===========================================================================
000064FE                            
000064FE                            ESon_Wait4:
000064FE 4E75                       		rts	
000064FE 4E75                       		rts	
00006500                            		include "_anim\Ending Sequence Sonic.asm"
00006500                            ; ---------------------------------------------------------------------------
00006500                            ; Animation script - Sonic on the ending sequence
00006500                            ; ---------------------------------------------------------------------------
00006500 0000                       AniScript_ESon:	dc.w byte_551C-AniScript_ESon
00006502 0000                       		dc.w byte_552A-AniScript_ESon
00006504 0000                       		dc.w byte_5534-AniScript_ESon
00006506 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
00006514 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
0000651E 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
00006526                            		even
00006526                            		even
00006526                            		include	"_incObj\88 Ending Sequence Emeralds.asm"
00006526                            ; ---------------------------------------------------------------------------
00006526                            ; Object 88 - chaos emeralds on	the ending sequence
00006526                            ; ---------------------------------------------------------------------------
00006526                            
00006526                            EndChaos:
00006526 7000                       		moveq	#0,d0
00006528 1028 0024                  		move.b	obRoutine(a0),d0
0000652C 323B 0000                  		move.w	ECha_Index(pc,d0.w),d1
00006530 4EBB 1000                  		jsr	ECha_Index(pc,d1.w)
00006534 4EF9 0000 0000             		jmp	(DisplaySprite).l
0000653A                            ; ===========================================================================
0000653A 0000                       ECha_Index:	dc.w ECha_Main-ECha_Index
0000653C 0000                       		dc.w ECha_Move-ECha_Index
0000653E                            
0000653E =00000038                  echa_origX:	equ $38	; x-axis centre of emerald circle (2 bytes)
0000653E =0000003A                  echa_origY:	equ $3A	; y-axis centre of emerald circle (2 bytes)
0000653E =0000003C                  echa_radius:	equ $3C	; radius (2 bytes)
0000653E =0000003E                  echa_angle:	equ $3E	; angle for rotation (2 bytes)
0000653E                            ; ===========================================================================
0000653E                            
0000653E                            ECha_Main:	; Routine 0
0000653E 0C38 0002 D01A             		cmpi.b	#2,(v_player+obFrame).w
00006544 6700                       		beq.s	ECha_CreateEms
00006546 588F                       		addq.l	#4,sp
00006548 4E75                       		rts	
0000654A                            ; ===========================================================================
0000654A                            
0000654A                            ECha_CreateEms:
0000654A 3178 D008 0008             		move.w	(v_player+obX).w,obX(a0) ; match X position with Sonic
00006550 3178 D00C 000C             		move.w	(v_player+obY).w,obY(a0) ; match Y position with Sonic
00006556 2248                       		movea.l	a0,a1
00006558 7600                       		moveq	#0,d3
0000655A 7401                       		moveq	#1,d2
0000655C 7205                       		moveq	#5,d1
0000655E                            
0000655E                            	ECha_LoadLoop:
0000655E 12BC 0000                  		move.b	#id_EndChaos,(a1) ; load chaos emerald object
00006562 5429 0024                  		addq.b	#2,obRoutine(a1)
00006566 237C 0000 0000 0004        		move.l	#Map_ECha,obMap(a1)
0000656E 337C 03C5 0002             		move.w	#$3C5,obGfx(a1)
00006574 137C 0004 0001             		move.b	#4,obRender(a1)
0000657A 337C 0080 0018             		move.w	#$80,obPriority(a1)
00006580 3368 0008 0038             		move.w	obX(a0),echa_origX(a1)
00006586 3368 000C 003A             		move.w	obY(a0),echa_origY(a1)
0000658C 1342 001C                  		move.b	d2,obAnim(a1)
00006590 1342 001A                  		move.b	d2,obFrame(a1)
00006594 5202                       		addq.b	#1,d2
00006596 1343 0026                  		move.b	d3,obAngle(a1)
0000659A 0603 002A                  		addi.b	#$100/6,d3	; angle between each emerald
0000659E 43E9 0040                  		lea	$40(a1),a1
000065A2 51C9 FFBA                  		dbf	d1,ECha_LoadLoop ; repeat 5 more times
000065A6                            
000065A6                            ECha_Move:	; Routine 2
000065A6 3028 003E                  		move.w	echa_angle(a0),d0
000065AA D168 0026                  		add.w	d0,obAngle(a0)
000065AE 1028 0026                  		move.b	obAngle(a0),d0
000065B2 4EB9 0000 3A32             		jsr	(CalcSine).l
000065B8 7800                       		moveq	#0,d4
000065BA 1828 003C                  		move.b	echa_radius(a0),d4
000065BE C3C4                       		muls.w	d4,d1
000065C0 E081                       		asr.l	#8,d1
000065C2 C1C4                       		muls.w	d4,d0
000065C4 E080                       		asr.l	#8,d0
000065C6 D268 0038                  		add.w	echa_origX(a0),d1
000065CA D068 003A                  		add.w	echa_origY(a0),d0
000065CE 3141 0008                  		move.w	d1,obX(a0)
000065D2 3140 000C                  		move.w	d0,obY(a0)
000065D6                            
000065D6                            	ECha_Expand:
000065D6 0C68 2000 003C             		cmpi.w	#$2000,echa_radius(a0)
000065DC 6700                       		beq.s	ECha_Rotate
000065DE 0668 0020 003C             		addi.w	#$20,echa_radius(a0) ; expand circle of emeralds
000065E4                            
000065E4                            	ECha_Rotate:
000065E4 0C68 2000 003E             		cmpi.w	#$2000,echa_angle(a0)
000065EA 6700                       		beq.s	ECha_Rise
000065EC 0668 0020 003E             		addi.w	#$20,echa_angle(a0) ; move emeralds around the centre
000065F2                            
000065F2                            	ECha_Rise:
000065F2 0C68 0140 003A             		cmpi.w	#$140,echa_origY(a0)
000065F8 6700                       		beq.s	ECha_End
000065FA 5368 003A                  		subq.w	#1,echa_origY(a0) ; make circle rise
000065FE                            
000065FE                            ECha_End:
000065FE 4E75                       		rts	
000065FE 4E75                       		rts	
00006600                            		include	"_incObj\89 Ending Sequence STH.asm"
00006600                            ; ---------------------------------------------------------------------------
00006600                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
00006600                            ; ---------------------------------------------------------------------------
00006600                            
00006600                            EndSTH:
00006600 7000                       		moveq	#0,d0
00006602 1028 0024                  		move.b	$24(a0),d0
00006606 323B 0000                  		move.w	ESth_Index(pc,d0.w),d1
0000660A 4EBB 1000                  		jsr	ESth_Index(pc,d1.w)
0000660E 4EF9 0000 0000             		jmp	(DisplaySprite).l
00006614                            ; ===========================================================================
00006614 0000                       ESth_Index:	dc.w ESth_Main-ESth_Index
00006616 0000                       		dc.w ESth_Move-ESth_Index
00006618 0000                       		dc.w ESth_GotoCredits-ESth_Index
0000661A                            
0000661A =00000030                  esth_time:	equ $30		; time until exit
0000661A                            ; ===========================================================================
0000661A                            
0000661A                            ESth_Main:	; Routine 0
0000661A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000661E 317C FFE0 0008             		move.w	#-$20,obX(a0)	; object starts	outside	the level boundary
00006624 317C 00D8 000A             		move.w	#$D8,obScreenY(a0)
0000662A 217C 0000 0000 0004        		move.l	#Map_ESTH,obMap(a0)
00006632 317C 05C5 0002             		move.w	#$5C5,obGfx(a0)
00006638 117C 0000 0001             		move.b	#0,obRender(a0)
0000663E 317C 0000 0018             		move.w	#0,obPriority(a0)
00006644                            
00006644                            ESth_Move:	; Routine 2
00006644 0C68 00C0 0008             		cmpi.w	#$C0,obX(a0)	; has object reached $C0?
0000664A 6700                       		beq.s	ESth_Delay	; if yes, branch
0000664C 0668 0010 0008             		addi.w	#$10,obX(a0)	; move object to the right
00006652 4E75                       		rts
00006654                            
00006654                            ESth_Delay:
00006654 5428 0024                  		addq.b	#2,obRoutine(a0)
00006658 317C 012C 0030             		move.w	#300,esth_time(a0) ; set duration for delay (5 seconds)
0000665E                            
0000665E                            ESth_GotoCredits:
0000665E                            		; Routine 4
0000665E 5368 0030                  		subq.w	#1,esth_time(a0) ; subtract 1 from duration
00006662 6A00                       		bpl.s	ESth_Wait
00006664 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; exit to credits
0000666A                            
0000666A                            	ESth_Wait:
0000666A 4E75                       		rts
0000666C                            Map_ESon:	include	"_maps\Ending Sequence Sonic.asm"
0000666C                            ; ---------------------------------------------------------------------------
0000666C                            ; Sprite mappings - Sonic on the ending	sequence
0000666C                            ; ---------------------------------------------------------------------------
0000666C                            Map_ESon_internal:
0000666C 0000                       		dc.w M_ESon_Hold1-Map_ESon_internal
0000666E 0000                       		dc.w M_ESon_Hold2-Map_ESon_internal
00006670 0000                       		dc.w M_ESon_Up-Map_ESon_internal
00006672 0000                       		dc.w M_ESon_Conf1-Map_ESon_internal
00006674 0000                       		dc.w M_ESon_Conf2-Map_ESon_internal
00006676 0000                       		dc.w M_ESon_Leap1-Map_ESon_internal
00006678 0000                       		dc.w M_ESon_Leap2-Map_ESon_internal
0000667A 0000                       		dc.w M_ESon_Leap3-Map_ESon_internal
0000667C 02                         M_ESon_Hold1:	dc.b 2
0000667D EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
00006682 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00006687 03                         M_ESon_Hold2:	dc.b 3
00006688 FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
0000668D EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
00006692 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00006697 02                         M_ESon_Up:	dc.b 2
00006698 EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
0000669D FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
000066A2 02                         M_ESon_Conf1:	dc.b 2
000066A3 EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
000066A8 FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
000066AD 02                         M_ESon_Conf2:	dc.b 2
000066AE EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
000066B3 FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
000066B8 03                         M_ESon_Leap1:	dc.b 3
000066B9 EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
000066BE EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
000066C3 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
000066C8 07                         M_ESon_Leap2:	dc.b 7
000066C9 B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
000066CE BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
000066D3 BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
000066D8 CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
000066DD DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
000066E2 E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
000066E7 EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
000066EC 18                         M_ESon_Leap3:	dc.b $18
000066ED 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
000066F2 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
000066F7 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
000066FC 980B 0098 30               		dc.b $98, $B, 0, $98, $30
00006701 A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
00006706 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
0000670B 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
00006710 A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
00006715 B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
0000671A B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
0000671F A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
00006724 C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
00006729 C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
0000672E B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
00006733 B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
00006738 D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
0000673D D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
00006742 D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
00006747 E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
0000674C E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
00006751 D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
00006756 E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
0000675B F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
00006760 F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
00006766 00                         		even
00006766 00                         		even
00006766                            Map_ECha:	include	"_maps\Ending Sequence Emeralds.asm"
00006766                            ; --------------------------------------------------------------------------------
00006766                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00006766                            ; --------------------------------------------------------------------------------
00006766                            
00006766                            SME_0ZTmS:	
00006766 0000 0000                  		dc.w SME_0ZTmS_E-SME_0ZTmS, SME_0ZTmS_14-SME_0ZTmS	
0000676A 0000 0000                  		dc.w SME_0ZTmS_1A-SME_0ZTmS, SME_0ZTmS_20-SME_0ZTmS	
0000676E 0000 0000                  		dc.w SME_0ZTmS_26-SME_0ZTmS, SME_0ZTmS_2C-SME_0ZTmS	
00006772 0000                       		dc.w SME_0ZTmS_32-SME_0ZTmS	
00006774 01                         SME_0ZTmS_E:	dc.b 1	
00006775 F805 0000 F8               		dc.b $F8, 5, 0, 0, $F8	
0000677A 01                         SME_0ZTmS_14:	dc.b 1	
0000677B F805 0004 F8               		dc.b $F8, 5, 0, 4, $F8	
00006780 01                         SME_0ZTmS_1A:	dc.b 1	
00006781 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
00006786 01                         SME_0ZTmS_20:	dc.b 1	
00006787 F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8	
0000678C 01                         SME_0ZTmS_26:	dc.b 1	
0000678D F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8	
00006792 01                         SME_0ZTmS_2C:	dc.b 1	
00006793 F805 0008 F8               		dc.b $F8, 5, 0, 8, $F8	
00006798 01                         SME_0ZTmS_32:	dc.b 1	
00006799 F805 000C F8               		dc.b $F8, 5, 0, $C, $F8	
0000679E                            		even
0000679E                            		even
0000679E                            Map_ESth:	include	"_maps\Ending Sequence STH.asm"
0000679E                            ; ---------------------------------------------------------------------------
0000679E                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
0000679E                            ; ---------------------------------------------------------------------------
0000679E                            Map_ESth_internal:
0000679E 0000                       		dc.w M_ESth_1-Map_ESth_internal
000067A0 03                         M_ESth_1:	dc.b 3
000067A1 F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
000067A6 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
000067AB F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
000067B0                            		even
000067B0                            		even
000067B0                            
000067B0                            ; ===========================================================================
000067B0                            ; ---------------------------------------------------------------------------
000067B0                            ; Credits ending sequence
000067B0                            ; ---------------------------------------------------------------------------
000067B0                            
000067B0                            GM_Credits:
000067B0                            		
000067B0 6100 AF96                  		bsr.w	ClearPLC
000067B4 6100 B9CC                  		bsr.w	PaletteFadeOut
000067B8 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
000067BE 3CBC 8004                  		move.w	#$8004,(a6)	; use 8-colour mode
000067C2 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
000067C6 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
000067CA 3CBC 9001                  		move.w	#$9001,(a6)	; 64-cell hscroll size
000067CE 3CBC 9200                  		move.w	#$9200,(a6)	; window vertical position
000067D2 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
000067D6 3CBC 8720                  		move.w	#$8720,(a6)	; set background colour (line 3; colour 0)
000067DA 4238 F64E                  		clr.b	(f_wtr_state).w
000067DE 6100 A9A0                  		bsr.w	ClearScreen
000067E2                            
000067E2 43F8 D000                  		lea	(v_objspace).w,a1
000067E6 7000                       		moveq	#0,d0
000067E8 323C 07FF                  		move.w	#$7FF,d1
000067EC                            	TryAg_ClrObjRam:
000067EC 22C0                       		move.l	d0,(a1)+
000067EE 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
000067F2                            
000067F2 7000                       		moveq	#plcid_TryAgain,d0
000067F4 6100 B060                  		bsr.w	QuickPLC	; load "TRY AGAIN" or "END" patterns
000067F8                            
000067F8 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
000067FC 7000                       		moveq	#0,d0
000067FE 323C 001F                  		move.w	#$1F,d1
00006802                            	TryAg_ClrPal:
00006802 22C0                       		move.l	d0,(a1)+
00006804 51C9 FFFC                  		dbf	d1,TryAg_ClrPal ; fill palette with black
00006808                            
00006808 7013                       		moveq	#palid_Ending,d0
0000680A 6100 BC20                  		bsr.w	PalLoad1	; load ending palette
0000680E 4278 FBC0                  		clr.w	(v_pal_dry_dup+$40).w
00006812 11FC 0000 D080             		move.b	#id_EndEggman,(v_objspace+$80).w ; load Eggman object
00006818 4EB9 0000 0000             		jsr	(ExecuteObjects).l
0000681E 4EB9 0000 0000             		jsr	(BuildSprites).l
00006824 31FC 0708 F614             		move.w	#1800,(v_demolength).w ; show screen for 30 seconds
0000682A 6100 B8B0                  		bsr.w	PaletteFadeIn
0000682E                            
0000682E                            ; ---------------------------------------------------------------------------
0000682E                            ; "TRY AGAIN" and "END"	screen main loop
0000682E                            ; ---------------------------------------------------------------------------
0000682E                            TryAg_MainLoop:
0000682E 6100 AA2C                  		bsr.w	PauseGame
00006832 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
00006838 6100 D1C6                  		bsr.w	WaitForVBla
0000683C 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00006842 4EB9 0000 0000             		jsr	(BuildSprites).l
00006848 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; is Start button pressed?
0000684E 6600                       		bne.s	TryAg_Exit	; if yes, branch
00006850 4A78 F614                  		tst.w	(v_demolength).w ; has 30 seconds elapsed?
00006854 6700                       		beq.s	TryAg_Exit	; if yes, branch
00006856 0C38 0000 F600             		cmpi.b	#id_Credits,(v_gamemode).w
0000685C 67D0                       		beq.s	TryAg_MainLoop
0000685E                            
0000685E                            TryAg_Exit:
0000685E 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; goto Sega screen
00006864 4E75                       		rts	
00006866                            
00006866                            ; ===========================================================================
00006866                            
00006866                            		include	"_incObj\8B Try Again & End Eggman.asm"
00006866                            ; ---------------------------------------------------------------------------
00006866                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00006866                            ; ---------------------------------------------------------------------------
00006866                            
00006866                            EndEggman:
00006866 7000                       		moveq	#0,d0
00006868 1028 0024                  		move.b	obRoutine(a0),d0
0000686C 323B 0000                  		move.w	EEgg_Index(pc,d0.w),d1
00006870 4EBB 1000                  		jsr	EEgg_Index(pc,d1.w)
00006874 4EF9 0000 0000             		jmp	(DisplaySprite).l
0000687A                            ; ===========================================================================
0000687A 0000                       EEgg_Index:	dc.w EEgg_Main-EEgg_Index
0000687C 0000                       		dc.w EEgg_Animate-EEgg_Index
0000687E 0000                       		dc.w EEgg_Juggle-EEgg_Index
00006880 0000                       		dc.w EEgg_Wait-EEgg_Index
00006882                            
00006882 =00000030                  eegg_time:	equ $30		; time between juggle motions
00006882                            ; ===========================================================================
00006882                            
00006882                            EEgg_Main:	; Routine 0
00006882 5428 0024                  		addq.b	#2,obRoutine(a0)
00006886 317C 0120 0008             		move.w	#$120,obX(a0)
0000688C 317C 00F4 000A             		move.w	#$F4,obScreenY(a0)
00006892 217C 0000 0000 0004        		move.l	#Map_EEgg,obMap(a0)
0000689A 317C 03E1 0002             		move.w	#$3E1,obGfx(a0)
000068A0 117C 0000 0001             		move.b	#0,obRender(a0)
000068A6 317C 0100 0018             		move.w	#$100,obPriority(a0)
000068AC 117C 0002 001C             		move.b	#2,obAnim(a0)	; use "END" animation
000068B2 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all 6 emeralds?
000068B8 6700                       		beq.s	EEgg_Animate	; if yes, branch
000068BA                            
000068BA 11FC 0000 D0C0             		move.b	#id_CreditsText,(v_objspace+$C0).w ; load credits object
000068C0 31FC 0009 FFF4             		move.w	#9,(v_creditsnum).w ; use "TRY AGAIN" text
000068C6 11FC 0000 D800             		move.b	#id_TryChaos,(v_objspace+$800).w ; load emeralds object on "TRY AGAIN" screen
000068CC 117C 0000 001C             		move.b	#0,obAnim(a0)	; use "TRY AGAIN" animation
000068D2                            
000068D2                            EEgg_Animate:	; Routine 2
000068D2 43F9 0000 0000             		lea	(Ani_EEgg).l,a1
000068D8 4EF9 0000 0000             		jmp	(AnimateSprite).l
000068DE                            ; ===========================================================================
000068DE                            
000068DE                            EEgg_Juggle:	; Routine 4
000068DE 5428 0024                  		addq.b	#2,obRoutine(a0)
000068E2 7002                       		moveq	#2,d0
000068E4 0828 0000 001C             		btst	#0,obAnim(a0)
000068EA 6700                       		beq.s	@noflip
000068EC 4440                       		neg.w	d0
000068EE                            
000068EE                            	@noflip:
000068EE 43F8 D800                  		lea	(v_objspace+$800).w,a1 ; get RAM address for emeralds
000068F2 7205                       		moveq	#5,d1
000068F4                            
000068F4                            @emeraldloop:
000068F4 1340 003E                  		move.b	d0,$3E(a1)
000068F8 3400                       		move.w	d0,d2
000068FA E742                       		asl.w	#3,d2
000068FC D529 0026                  		add.b	d2,obAngle(a1)
00006900 43E9 0040                  		lea	$40(a1),a1
00006904 51C9 FFEE                  		dbf	d1,@emeraldloop
00006908 5228 001A                  		addq.b	#1,obFrame(a0)
0000690C 317C 0070 0030             		move.w	#112,eegg_time(a0)
00006912                            
00006912                            EEgg_Wait:	; Routine 6
00006912 5368 0030                  		subq.w	#1,eegg_time(a0) ; decrement timer
00006916 6A00                       		bpl.s	@nochg		; branch if time remains
00006918 0868 0000 001C             		bchg	#0,obAnim(a0)
0000691E 117C 0002 0024             		move.b	#2,obRoutine(a0) ; goto EEgg_Animate next
00006924                            
00006924                            	@nochg:
00006924 4E75                       		rts	
00006924 4E75                       		rts	
00006926                            		include "_anim\Try Again & End Eggman.asm"
00006926                            ; ---------------------------------------------------------------------------
00006926                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00006926                            ; ---------------------------------------------------------------------------
00006926 0000                       Ani_EEgg:	dc.w @tryagain1-Ani_EEgg
00006928 0000                       		dc.w @tryagain2-Ani_EEgg
0000692A 0000                       		dc.w @end-Ani_EEgg
0000692C 0500 FC01                  @tryagain1:	dc.b 5,	0, afRoutine, 1
00006930 0502 FC03                  @tryagain2:	dc.b 5,	2, afRoutine, 3
00006934 0704 0506 0504 0506 0504+  @end:		dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	afEnd
00006946                            		even
00006946                            		even
00006946                            		include	"_incObj\8C Try Again Emeralds.asm"
00006946                            ; ---------------------------------------------------------------------------
00006946                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00006946                            ; ---------------------------------------------------------------------------
00006946                            
00006946                            TryChaos:
00006946 7000                       		moveq	#0,d0
00006948 1028 0024                  		move.b	obRoutine(a0),d0
0000694C 323B 0000                  		move.w	TCha_Index(pc,d0.w),d1
00006950 4EBB 1000                  		jsr	TCha_Index(pc,d1.w)
00006954 4EF9 0000 0000             		jmp	(DisplaySprite).l
0000695A                            ; ===========================================================================
0000695A 0000                       TCha_Index:	dc.w TCha_Main-TCha_Index
0000695C 0000                       		dc.w TCha_Move-TCha_Index
0000695E                            ; ===========================================================================
0000695E                            
0000695E                            TCha_Main:	; Routine 0
0000695E 2248                       		movea.l	a0,a1
00006960 7400                       		moveq	#0,d2
00006962 7600                       		moveq	#0,d3
00006964 7205                       		moveq	#5,d1
00006966 9238 FE57                  		sub.b	(v_emeralds).w,d1
0000696A                            
0000696A                            @makeemerald:
0000696A 12BC 0000                  		move.b	#id_TryChaos,(a1) ; load emerald object
0000696E 5429 0024                  		addq.b	#2,obRoutine(a1)
00006972 237C 0000 6766 0004        		move.l	#Map_ECha,obMap(a1)
0000697A 337C 03C5 0002             		move.w	#$3C5,obGfx(a1)
00006980 137C 0000 0001             		move.b	#0,obRender(a1)
00006986 337C 0080 0018             		move.w	#$80,obPriority(a1)
0000698C 337C 0104 0008             		move.w	#$104,obX(a1)
00006992 337C 0120 0038             		move.w	#$120,$38(a1)
00006998 337C 00EC 000A             		move.w	#$EC,obScreenY(a1)
0000699E 3369 000A 003A             		move.w	obScreenY(a1),$3A(a1)
000069A4 137C 001C 003C             		move.b	#$1C,$3C(a1)
000069AA 47F8 FE58                  		lea	(v_emldlist).w,a3
000069AE                            
000069AE                            	@chkemerald:
000069AE 7000                       		moveq	#0,d0
000069B0 1038 FE57                  		move.b	(v_emeralds).w,d0
000069B4 5340                       		subq.w	#1,d0
000069B6 6500                       		bcs.s	@loc_5B42
000069B8                            
000069B8                            	@chkloop:
000069B8 B433 0000                  		cmp.b	(a3,d0.w),d2
000069BC 6600                       		bne.s	@notgot
000069BE 5202                       		addq.b	#1,d2
000069C0 60EC                       		bra.s	@chkemerald
000069C2                            ; ===========================================================================
000069C2                            
000069C2                            	@notgot:
000069C2 51C8 FFF4                  		dbf	d0,@chkloop
000069C6                            
000069C6                            @loc_5B42:
000069C6 1342 001A                  		move.b	d2,obFrame(a1)
000069CA 5229 001A                  		addq.b	#1,obFrame(a1)
000069CE 5202                       		addq.b	#1,d2
000069D0 137C 0080 0026             		move.b	#$80,obAngle(a1)
000069D6 1343 001E                  		move.b	d3,obTimeFrame(a1)
000069DA 1343 001F                  		move.b	d3,obDelayAni(a1)
000069DE 0643 000A                  		addi.w	#10,d3
000069E2 43E9 0040                  		lea	$40(a1),a1
000069E6 51C9 FF82                  		dbf	d1,@makeemerald	; repeat 5 times
000069EA                            
000069EA                            TCha_Move:	; Routine 2
000069EA 4A68 003E                  		tst.w	$3E(a0)
000069EE 6700                       		beq.s	locret_5BBA
000069F0 4A28 001E                  		tst.b	obTimeFrame(a0)
000069F4 6700                       		beq.s	loc_5B78
000069F6 5328 001E                  		subq.b	#1,obTimeFrame(a0)
000069FA 6600                       		bne.s	loc_5B80
000069FC                            
000069FC                            loc_5B78:
000069FC 3028 003E                  		move.w	$3E(a0),d0
00006A00 D168 0026                  		add.w	d0,obAngle(a0)
00006A04                            
00006A04                            loc_5B80:
00006A04 1028 0026                  		move.b	obAngle(a0),d0
00006A08 6700                       		beq.s	loc_5B8C
00006A0A 0C00 0080                  		cmpi.b	#$80,d0
00006A0E 6600                       		bne.s	loc_5B96
00006A10                            
00006A10                            loc_5B8C:
00006A10 4268 003E                  		clr.w	$3E(a0)
00006A14 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
00006A1A                            
00006A1A                            loc_5B96:
00006A1A 4EB9 0000 3A32             		jsr	(CalcSine).l
00006A20 7800                       		moveq	#0,d4
00006A22 1828 003C                  		move.b	$3C(a0),d4
00006A26 C3C4                       		muls.w	d4,d1
00006A28 E081                       		asr.l	#8,d1
00006A2A C1C4                       		muls.w	d4,d0
00006A2C E080                       		asr.l	#8,d0
00006A2E D268 0038                  		add.w	$38(a0),d1
00006A32 D068 003A                  		add.w	$3A(a0),d0
00006A36 3141 0008                  		move.w	d1,obX(a0)
00006A3A 3140 000A                  		move.w	d0,obScreenY(a0)
00006A3E                            
00006A3E                            locret_5BBA:
00006A3E 4E75                       		rts	
00006A3E 4E75                       		rts	
00006A40                            Map_EEgg:	include	"_maps\Try Again & End Eggman.asm"
00006A40                            ; ---------------------------------------------------------------------------
00006A40                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
00006A40                            ; ---------------------------------------------------------------------------
00006A40                            Map_EEgg_internal:
00006A40 0000                       		dc.w M_EEgg_Try1-Map_EEgg_internal
00006A42 0000                       		dc.w M_EEgg_Try2-Map_EEgg_internal
00006A44 0000                       		dc.w M_EEgg_Try3-Map_EEgg_internal
00006A46 0000                       		dc.w M_EEgg_Try4-Map_EEgg_internal
00006A48 0000                       		dc.w M_EEgg_End1-Map_EEgg_internal
00006A4A 0000                       		dc.w M_EEgg_End2-Map_EEgg_internal
00006A4C 0000                       		dc.w M_EEgg_End3-Map_EEgg_internal
00006A4E 0000                       		dc.w M_EEgg_End4-Map_EEgg_internal
00006A50 08                         M_EEgg_Try1:	dc.b 8
00006A51 E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00006A56 F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00006A5B E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00006A60 F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00006A65 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006A6A 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006A6F 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006A74 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006A79 08                         M_EEgg_Try2:	dc.b 8
00006A7A E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00006A7F F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00006A84 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00006A89 F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00006A8E 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006A93 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006A98 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006A9D 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006AA2 08                         M_EEgg_Try3:	dc.b 8
00006AA3 E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00006AA8 F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00006AAD E905 0800 00               		dc.b $E9, 5, 8,	0, 0
00006AB2 F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00006AB7 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006ABC 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006AC1 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006AC6 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006ACB 08                         M_EEgg_Try4:	dc.b 8
00006ACC E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00006AD1 F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
00006AD6 E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
00006ADB F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
00006AE0 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006AE5 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006AEA 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006AEF 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006AF4 0C                         M_EEgg_End1:	dc.b $C
00006AF5 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
00006AFA F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
00006AFF 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
00006B04 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
00006B09 ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
00006B0E F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
00006B13 0504 0835 00               		dc.b 5,	4, 8, $35, 0
00006B18 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
00006B1D 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
00006B22 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
00006B27 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006B2C 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006B31 0A                         M_EEgg_End2:	dc.b $A
00006B32 D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
00006B37 DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
00006B3C F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
00006B41 D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
00006B46 DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
00006B4B F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00006B50 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006B55 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006B5A 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00006B5F 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00006B64 0A                         M_EEgg_End3:	dc.b $A
00006B65 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
00006B6A E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00006B6F EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00006B74 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
00006B79 E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00006B7E EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00006B83 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006B88 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006B8D 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
00006B92 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00006B97 0C                         M_EEgg_End4:	dc.b $C
00006B98 F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
00006B9D FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
00006BA2 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
00006BA7 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
00006BAC F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00006BB1 FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
00006BB6 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
00006BBB 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00006BC0 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00006BC5 180C 0087 00               		dc.b $18, $C, 0, $87, 0
00006BCA 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006BCF 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006BD4                            		even
00006BD4                            		even
00006BD4                            
00006BD4                            ; ---------------------------------------------------------------------------
00006BD4                            ; Ending sequence demos
00006BD4                            ; ---------------------------------------------------------------------------
00006BD4                            Demo_EndGHZ1:	incbin	"demodata\Ending - GHZ1.bin"
00006C02                            		even
00006C02                            Demo_EndMZ:	incbin	"demodata\Ending - MZ.bin"
00006C42                            		even
00006C42                            Demo_EndSYZ:	incbin	"demodata\Ending - SYZ.bin"
00006C72                            		even
00006C72                            Demo_EndLZ:	incbin	"demodata\Ending - LZ.bin"
00006CA2                            		even
00006CA2                            Demo_EndSLZ:	incbin	"demodata\Ending - SLZ.bin"
00006CC2                            		even
00006CC2                            Demo_EndSBZ1:	incbin	"demodata\Ending - SBZ1.bin"
00006CE2                            		even
00006CE2                            Demo_EndSBZ2:	incbin	"demodata\Ending - SBZ2.bin"
00006D12                            		even
00006D12                            Demo_EndGHZ2:	incbin	"demodata\Ending - GHZ2.bin"
00006D42                            		even
00006D42                            
00006D42                            		include	"_inc\LevelSizeLoad & BgScrollSpeed (JP1).asm"
00006D42                            ; ---------------------------------------------------------------------------
00006D42                            ; Subroutine to	load level boundaries and start	locations
00006D42                            ; ---------------------------------------------------------------------------
00006D42                            
00006D42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D42                            
00006D42                            
00006D42                            LevelSizeLoad:
00006D42 7000                       		moveq	#0,d0
00006D44 11C0 F740                  		move.b	d0,($FFFFF740).w
00006D48 11C0 F741                  		move.b	d0,($FFFFF741).w
00006D4C 11C0 F746                  		move.b	d0,($FFFFF746).w
00006D50 11C0 F748                  		move.b	d0,($FFFFF748).w
00006D54 11C0 F742                  		move.b	d0,(v_dle_routine).w
00006D58 3038 FE10                  		move.w	(v_zone).w,d0
00006D5C ED08                       		lsl.b	#6,d0
00006D5E E848                       		lsr.w	#4,d0
00006D60 3200                       		move.w	d0,d1
00006D62 D040                       		add.w	d0,d0
00006D64 D041                       		add.w	d1,d0
00006D66 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
00006D6A 3018                       		move.w	(a0)+,d0
00006D6C 31C0 F730                  		move.w	d0,($FFFFF730).w
00006D70 2018                       		move.l	(a0)+,d0
00006D72 21C0 F728                  		move.l	d0,(v_limitleft2).w
00006D76 21C0 F720                  		move.l	d0,(v_limitleft1).w
00006D7A 2018                       		move.l	(a0)+,d0
00006D7C 21C0 F72C                  		move.l	d0,(v_limittop2).w
00006D80 21C0 F724                  		move.l	d0,(v_limittop1).w
00006D84 3038 F728                  		move.w	(v_limitleft2).w,d0
00006D88 0640 0240                  		addi.w	#$240,d0
00006D8C 31C0 F732                  		move.w	d0,(v_limitleft3).w
00006D90 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
00006D96 3018                       		move.w	(a0)+,d0
00006D98 31C0 F73E                  		move.w	d0,(v_lookshift).w
00006D9C 31FC 00A0 F7A0             		move.w    #160,(v_camera_pan).w    ; reset the horizontal camera pan value to 160 pixels
00006DA2 6000 0000                  		bra.w	LevSz_ChkLamp
00006DA6                            
00006DA6                            ; ===========================================================================
00006DA6                            ; ---------------------------------------------------------------------------
00006DA6                            ; Level size array
00006DA6                            ; ---------------------------------------------------------------------------
00006DA6                            LevelSizeArray:
00006DA6                            		; GHZ
00006DA6 0004 0000 4470 0000 0400+  		dc.w $0004, $0000, $4470, $0000, $0400, $0060
00006DB2 0004 0000 2960 0000 0300+  		dc.w $0004, $0000, $2960, $0000, $0300, $0060
00006DBE 0004 0000 1360 0000 0400+  		dc.w $0004, $0000, $1360, $0000, $0400, $0060
00006DCA 0004 0000 7EC0 0000 0400+  		dc.w $0004, $0000, $7EC0, $0000, $0400, $0060
00006DD6                            		; LZ
00006DD6 0004 0000 19AF 0000 0530+  		dc.w $0004, $0000, $19AF, $0000, $0530, $0060
00006DE2 0004 0000 10AF 0000 0720+  		dc.w $0004, $0000, $10AF, $0000, $0720, $0060
00006DEE 0004 0000 202F FF00 0800+  		dc.w $0004, $0000, $202F, $FF00, $0800, $0060
00006DFA 0004 0000 20BF 0000 0720+  		dc.w $0004, $0000, $20BF, $0000, $0720, $0060
00006E06                            		; MZ
00006E06 0004 0000 21C0 0000 0520+  		dc.w $0004, $0000, $21C0, $0000, $0520, $0060
00006E12 0004 0000 17BF 0000 0520+  		dc.w $0004, $0000, $17BF, $0000, $0520, $0060
00006E1E 0004 0000 1800 0000 0720+  		dc.w $0004, $0000, $1800, $0000, $0720, $0060
00006E2A 0004 0000 16BF 0000 0720+  		dc.w $0004, $0000, $16BF, $0000, $0720, $0060
00006E36                            		; SLZ
00006E36 0004 0000 1FBF 0000 0640+  		dc.w $0004, $0000, $1FBF, $0000, $0640, $0060
00006E42 0004 0000 1FBF 0000 0640+  		dc.w $0004, $0000, $1FBF, $0000, $0640, $0060
00006E4E 0004 0000 2000 0000 0640+  		dc.w $0004, $0000, $2000, $0000, $0640, $0060
00006E5A 0004 0000 3EC0 0000 0720+  		dc.w $0004, $0000, $3EC0, $0000, $0720, $0060
00006E66                            		; SYZ
00006E66 0004 0000 22C0 0000 0520+  		dc.w $0004, $0000, $22C0, $0000, $0520, $0060
00006E72 0004 0000 28C0 0000 0520+  		dc.w $0004, $0000, $28C0, $0000, $0520, $0060
00006E7E 0004 0000 2C00 0000 0620+  		dc.w $0004, $0000, $2C00, $0000, $0620, $0060
00006E8A 0004 0000 2EC0 0000 0620+  		dc.w $0004, $0000, $2EC0, $0000, $0620, $0060
00006E96                            		; SBZ
00006E96 0004 0000 21C0 0000 0720+  		dc.w $0004, $0000, $21C0, $0000, $0720, $0060
00006EA2 0004 0000 1E40 0000 0800+  		dc.w $0004, $0000, $1E40, $0000, $0800, $0060
00006EAE 0004 2080 2460 0510 0510+  		dc.w $0004, $2080, $2460, $0510, $0510, $0060
00006EBA 0004 0000 3EC0 0000 0720+  		dc.w $0004, $0000, $3EC0, $0000, $0720, $0060
00006EC6                            		; Ending
00006EC6 0004 0000 0500 0110 0110+  		dc.w $0004, $0000, $0500, $0110, $0110, $0060
00006ED2 0004 0000 0DC0 0110 0110+  		dc.w $0004, $0000, $0DC0, $0110, $0110, $0060
00006EDE 0004 0000 2FFF 0000 0320+  		dc.w $0004, $0000, $2FFF, $0000, $0320, $0060
00006EEA 0004 0000 2FFF 0000 0320+  		dc.w $0004, $0000, $2FFF, $0000, $0320, $0060
00006EF6                            
00006EF6                            ; ---------------------------------------------------------------------------
00006EF6                            ; Ending start location array
00006EF6                            ; ---------------------------------------------------------------------------
00006EF6                            EndingStLocArray:
00006EF6                            		include	"_inc\Start Location Array - Ending.asm"
00006EF6                            ; ---------------------------------------------------------------------------
00006EF6                            ; Ending start location array
00006EF6                            ; ---------------------------------------------------------------------------
00006EF6                            
00006EF6                            		incbin	"startpos\ghz1 (Credits demo 1).bin"
00006EFA                            		incbin	"startpos\mz2 (Credits demo).bin"
00006EFE                            		incbin	"startpos\syz3 (Credits demo).bin"
00006F02                            		incbin	"startpos\lz3 (Credits demo).bin"
00006F06                            		incbin	"startpos\slz3 (Credits demo).bin"
00006F0A                            		incbin	"startpos\sbz1 (Credits demo).bin"
00006F0E                            		incbin	"startpos\sbz2 (Credits demo).bin"
00006F12                            		incbin	"startpos\ghz1 (Credits demo 2).bin"
00006F16                            		even
00006F16                            		even
00006F16                            
00006F16                            ; ===========================================================================
00006F16                            
00006F16                            LevSz_ChkLamp:
00006F16 4A38 FE30                  		tst.b	(v_lastlamp).w	; have any lampposts been hit?
00006F1A 6700                       		beq.s	LevSz_StartLoc	; if not, branch
00006F1C                            
00006F1C 4EB9 0000 0000             		jsr	(Lamp_LoadInfo).l
00006F22 3238 D008                  		move.w	(v_player+obX).w,d1
00006F26 3038 D00C                  		move.w	(v_player+obY).w,d0
00006F2A 6000                       		bra.s	LevSz_SkipStartPos
00006F2C                            ; ===========================================================================
00006F2C                            
00006F2C                            LevSz_StartLoc:
00006F2C 3038 FE10                  		move.w	(v_zone).w,d0
00006F30 ED08                       		lsl.b	#6,d0
00006F32 E848                       		lsr.w	#4,d0
00006F34 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
00006F38 4A78 FFF0                  		tst.w	(f_demo).w	; is ending demo mode on?
00006F3C 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
00006F3E                            
00006F3E 3038 FFF4                  		move.w	(v_creditsnum).w,d0
00006F42 5340                       		subq.w	#1,d0
00006F44 E548                       		lsl.w	#2,d0
00006F46 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
00006F4A                            
00006F4A                            LevSz_SonicPos:
00006F4A 7200                       		moveq	#0,d1
00006F4C 3219                       		move.w	(a1)+,d1
00006F4E 31C1 D008                  		move.w	d1,(v_player+obX).w ; set Sonic's position on x-axis
00006F52 7000                       		moveq	#0,d0
00006F54 3011                       		move.w	(a1),d0
00006F56 31C0 D00C                  		move.w	d0,(v_player+obY).w ; set Sonic's position on y-axis
00006F5A                            
00006F5A                            SetScreen:
00006F5A                            	LevSz_SkipStartPos:
00006F5A 4278 F7A8                  		clr.w (v_trackpos).w ; reset Sonic's position tracking index 
00006F5E 45F8 CB00                  		lea (v_tracksonic).w,a2 ; load the tracking array into a2 
00006F62 743F                       		moveq #63,d2 ; begin a 64-step loop 
00006F64                            @looppoint: 
00006F64 34C1                       		move.w d1,(a2)+ ; fill in X 
00006F66 34C0                       		move.w d0,(a2)+ ; fill in Y 
00006F68 51CA FFFA                  		dbf d2,@looppoint ; loop	
00006F6C 0441 00A0                  		subi.w	#160,d1		; is Sonic more than 160px from left edge?
00006F70 6400                       		bcc.s	SetScr_WithinLeft ; if yes, branch
00006F72 7200                       		moveq	#0,d1
00006F74                            
00006F74                            	SetScr_WithinLeft:
00006F74 3438 F72A                  		move.w	(v_limitright2).w,d2
00006F78 B242                       		cmp.w	d2,d1		; is Sonic inside the right edge?
00006F7A 6500                       		bcs.s	SetScr_WithinRight ; if yes, branch
00006F7C 3202                       		move.w	d2,d1
00006F7E                            
00006F7E                            	SetScr_WithinRight:
00006F7E 31C1 F700                  		move.w	d1,(v_screenposx).w ; set horizontal screen position
00006F82                            
00006F82 0440 0060                  		subi.w	#96,d0		; is Sonic within 96px of upper edge?
00006F86 6400                       		bcc.s	SetScr_WithinTop ; if yes, branch
00006F88 7000                       		moveq	#0,d0
00006F8A                            
00006F8A                            	SetScr_WithinTop:
00006F8A B078 F72E                  		cmp.w	(v_limitbtm2).w,d0 ; is Sonic above the bottom edge?
00006F8E 6D00                       		blt.s	SetScr_WithinBottom ; if yes, branch
00006F90 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00006F94                            
00006F94                            	SetScr_WithinBottom:
00006F94 31C0 F704                  		move.w	d0,(v_screenposy).w ; set vertical screen position
00006F98 6100 0000                  		bsr.w	BgScrollSpeed
00006F9C 7000                       		moveq	#0,d0
00006F9E 1038 FE10                  		move.b	(v_zone).w,d0
00006FA2 E508                       		lsl.b	#2,d0
00006FA4 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),(v_256loop1).w
00006FAA 4E75                       		rts
00006FAC                            ; ===========================================================================
00006FAC                            ; ---------------------------------------------------------------------------
00006FAC                            ; Sonic start location array
00006FAC                            ; ---------------------------------------------------------------------------
00006FAC                            StartLocArray:	include	"_inc\Start Location Array - Levels.asm"
00006FAC                            ; ---------------------------------------------------------------------------
00006FAC                            ; Sonic start location array
00006FAC                            ; ---------------------------------------------------------------------------
00006FAC                            
00006FAC                            		incbin	"startpos\ghz1.bin"
00006FB0                            		incbin	"startpos\ghz2.bin"
00006FB4                            		incbin	"startpos\ghz3.bin"
00006FB8 0080 00A8                  		dc.w	$80,$A8
00006FBC                            
00006FBC                            		incbin	"startpos\lz1.bin"
00006FC0                            		incbin	"startpos\lz2.bin"
00006FC4                            		incbin	"startpos\lz3.bin"
00006FC8                            		incbin	"startpos\sbz3.bin"
00006FCC                            
00006FCC                            		incbin	"startpos\mz1.bin"
00006FD0                            		incbin	"startpos\mz2.bin"
00006FD4                            		incbin	"startpos\mz3.bin"
00006FD8 0080 00A8                  		dc.w	$80,$A8
00006FDC                            
00006FDC                            		incbin	"startpos\slz1.bin"
00006FE0                            		incbin	"startpos\slz2.bin"
00006FE4                            		incbin	"startpos\slz3.bin"
00006FE8 0080 00A8                  		dc.w	$80,$A8
00006FEC                            
00006FEC                            		incbin	"startpos\syz1.bin"
00006FF0                            		incbin	"startpos\syz2.bin"
00006FF4                            		incbin	"startpos\syz3.bin"
00006FF8 0080 00A8                  		dc.w	$80,$A8
00006FFC                            
00006FFC                            		incbin	"startpos\sbz1.bin"
00007000                            		incbin	"startpos\sbz2.bin"
00007004                            		incbin	"startpos\fz.bin"
00007008 0080 00A8                  		dc.w	$80,$A8
0000700C                            
0000700C                            
0000700C                            		incbin	"startpos\end1.bin"
00007010                            		incbin	"startpos\end2.bin"
00007014 0080 00A8                  		dc.w	$80,$A8
00007018 0080 00A8                  		dc.w	$80,$A8
0000701C                            
0000701C                            		even
0000701C                            		even
0000701C                            
0000701C                            ; ---------------------------------------------------------------------------
0000701C                            ; Which	256x256	tiles contain loops or roll-tunnels
0000701C                            ; ---------------------------------------------------------------------------
0000701C                            
0000701C                            LoopTileNums:
0000701C                            
0000701C                            ; 		loop	loop	tunnel	tunnel
0000701C                            
0000701C B5C0 1F20                  	dc.b	$B5,	$C0,	$1F,	$20	; Green Hill
00007020 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Labyrinth
00007024 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Marble
00007028 AAB4 7F7F                  	dc.b	$AA,	$B4,	$7F,	$7F	; Star Light
0000702C 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Spring Yard
00007030 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Scrap Brain
00007034 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Ending (Green Hill)
00007038                            
00007038                            		even
00007038                            
00007038                            ; ---------------------------------------------------------------------------
00007038                            ; Subroutine to	set scroll speed of some backgrounds
00007038                            ; ---------------------------------------------------------------------------
00007038                            
00007038                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007038                            
00007038                            
00007038                            BgScrollSpeed:
00007038 4A38 FE30                  		tst.b	(v_lastlamp).w
0000703C 6600                       		bne.s	loc_6206
0000703E 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
00007042 31C0 F714                  		move.w	d0,(v_bg2screenposy).w
00007046 31C1 F708                  		move.w	d1,(v_bgscreenposx).w
0000704A 31C1 F710                  		move.w	d1,(v_bg2screenposx).w
0000704E 31C1 F718                  		move.w	d1,(v_bg3screenposx).w
00007052                            
00007052                            loc_6206:
00007052 7400                       		moveq	#0,d2
00007054 1438 FE10                  		move.b	(v_zone).w,d2
00007058 D442                       		add.w	d2,d2
0000705A 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
0000705E 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
00007062                            ; End of function BgScrollSpeed
00007062                            
00007062                            ; ===========================================================================
00007062 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
00007066 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
0000706A 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
0000706E 0000                       		dc.w BgScroll_End-BgScroll_Index
00007070                            ; ===========================================================================
00007070                            
00007070                            BgScroll_GHZ:
00007070 42B8 F708                  		clr.l	(v_bgscreenposx).w
00007074 42B8 F70C                  		clr.l	(v_bgscreenposy).w
00007078 42B8 F714                  		clr.l	(v_bg2screenposy).w
0000707C 42B8 F71C                  		clr.l	(v_bg3screenposy).w
00007080 45F8 A800                  		lea	($FFFFA800).w,a2
00007084 429A                       		clr.l	(a2)+
00007086 429A                       		clr.l	(a2)+
00007088 429A                       		clr.l	(a2)+
0000708A 4E75                       		rts
0000708C                            ; ===========================================================================
0000708C                            
0000708C                            BgScroll_LZ:
0000708C E280                       		asr.l	#1,d0
0000708E 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
00007092 4E75                       		rts	
00007094                            ; ===========================================================================
00007094                            
00007094                            BgScroll_MZ:
00007094 4E75                       		rts	
00007096                            ; ===========================================================================
00007096                            
00007096                            BgScroll_SLZ:
00007096 E280                       		asr.l	#1,d0
00007098 0640 00C0                  		addi.w	#$C0,d0
0000709C 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
000070A0 42B8 F708                  		clr.l	(v_bgscreenposx).w
000070A4 4E75                       		rts	
000070A6                            ; ===========================================================================
000070A6                            
000070A6                            BgScroll_SYZ:
000070A6 E980                       		asl.l	#4,d0
000070A8 2400                       		move.l	d0,d2
000070AA E380                       		asl.l	#1,d0
000070AC D082                       		add.l	d2,d0
000070AE E080                       		asr.l	#8,d0
000070B0 5240                       		addq.w	#1,d0
000070B2 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
000070B6 42B8 F708                  		clr.l	(v_bgscreenposx).w
000070BA 4E75                       		rts	
000070BC                            ; ===========================================================================
000070BC                            
000070BC                            BgScroll_SBZ:
000070BC 0240 07F8                  		andi.w	#$7F8,d0
000070C0 E640                       		asr.w	#3,d0
000070C2 5240                       		addq.w	#1,d0
000070C4 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
000070C8 4E75                       		rts	
000070CA                            ; ===========================================================================
000070CA                            
000070CA                            BgScroll_End:
000070CA 3038 F700                  		move.w	(v_screenposx).w,d0
000070CE E240                       		asr.w	#1,d0
000070D0 31C0 F708                  		move.w	d0,(v_bgscreenposx).w
000070D4 31C0 F710                  		move.w	d0,(v_bg2screenposx).w
000070D8 E440                       		asr.w	#2,d0
000070DA 3200                       		move.w	d0,d1
000070DC D040                       		add.w	d0,d0
000070DE D041                       		add.w	d1,d0
000070E0 31C0 F718                  		move.w	d0,(v_bg3screenposx).w
000070E4 42B8 F70C                  		clr.l	(v_bgscreenposy).w
000070E8 42B8 F714                  		clr.l	(v_bg2screenposy).w
000070EC 42B8 F71C                  		clr.l	(v_bg3screenposy).w
000070F0 45F8 A800                  		lea	($FFFFA800).w,a2
000070F4 429A                       		clr.l	(a2)+
000070F6 429A                       		clr.l	(a2)+
000070F8 429A                       		clr.l	(a2)+
000070FA 4E75                       		rts
000070FA 4E75                       		rts
000070FC                            		include	"_inc\DeformLayers (JP1).asm"
000070FC                            ; ---------------------------------------------------------------------------
000070FC                            ; Background layer deformation subroutines
000070FC                            ; ---------------------------------------------------------------------------
000070FC                            
000070FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000070FC                            
000070FC                            
000070FC                            DeformLayers:
000070FC 4A38 F744                  		tst.b	(f_nobgscroll).w
00007100 6700                       		beq.s	@bgscroll
00007102 4E75                       		rts	
00007104                            ; ===========================================================================
00007104                            
00007104                            	@bgscroll:
00007104 4278 F754                  		clr.w	(v_fg_scroll_flags).w
00007108 4278 F756                  		clr.w	(v_bg1_scroll_flags).w
0000710C 4278 F758                  		clr.w	(v_bg2_scroll_flags).w
00007110 4278 F75A                  		clr.w	(v_bg3_scroll_flags).w
00007114 6100 0000                  		bsr.w	ScrollHoriz
00007118 6100 0000                  		bsr.w	ScrollVertical
0000711C 6100 0000                  		bsr.w	DynamicLevelEvents
00007120 31F8 F704 F616             		move.w	(v_screenposy).w,(v_scrposy_dup).w
00007126 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
0000712C 7000                       		moveq	#0,d0
0000712E 1038 FE10                  		move.b	(v_zone).w,d0
00007132 D040                       		add.w	d0,d0
00007134 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
00007138 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
0000713C                            ; End of function DeformLayers
0000713C                            
0000713C                            ; ===========================================================================
0000713C                            ; ---------------------------------------------------------------------------
0000713C                            ; Offset index for background layer deformation	code
0000713C                            ; ---------------------------------------------------------------------------
0000713C 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
00007140 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
00007144 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
00007148 0000                       		dc.w Deform_GHZ-Deform_Index
0000714A                            ; ---------------------------------------------------------------------------
0000714A                            ; Green	Hill Zone background layer deformation code
0000714A                            ; ---------------------------------------------------------------------------
0000714A                            
0000714A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000714A                            
0000714A                            
0000714A                            Deform_GHZ:
0000714A                            	;cmpi.b    #id_Title,(v_gamemode).w
0000714A                            	;beq.w    Deform_Title
0000714A                            
0000714A                            ;Deform_GHZ_Stage:
0000714A                            	; block 3 - distant mountains
0000714A 3838 F73A                  		move.w	(v_scrshiftx).w,d4
0000714E 48C4                       		ext.l	d4
00007150 EB84                       		asl.l	#5,d4
00007152 2204                       		move.l	d4,d1
00007154 E384                       		asl.l	#1,d4
00007156 D881                       		add.l	d1,d4
00007158 7C00                       		moveq	#0,d6
0000715A 6100 0000                  		bsr.w	BGScroll_Block3
0000715E                            	; block 2 - hills & waterfalls
0000715E 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007162 48C4                       		ext.l	d4
00007164 EF84                       		asl.l	#7,d4
00007166 7C00                       		moveq	#0,d6
00007168 6100 0000                  		bsr.w	BGScroll_Block2
0000716C                            	; calculate Y position
0000716C 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00007170 3038 F704                  		move.w	(v_screenposy).w,d0
00007174 0240 07FF                  		andi.w	#$7FF,d0
00007178 EA48                       		lsr.w	#5,d0
0000717A 4440                       		neg.w	d0
0000717C 0640 0020                  		addi.w	#$20,d0
00007180 6A00                       		bpl.s	@limitY
00007182 7000                       		moveq	#0,d0
00007184                            	@limitY:
00007184 3800                       		move.w	d0,d4
00007186 31C0 F618                  		move.w	d0,(v_bgscrposy_dup).w
0000718A 3038 F700                  		move.w	(v_screenposx).w,d0
0000718E 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w
00007194 6600                       		bne.s	@notTitle
00007196 7000                       		moveq	#0,d0	; reset foreground position in title screen
00007198                            	@notTitle:
00007198 4440                       		neg.w	d0
0000719A 4840                       		swap	d0
0000719C                            	; auto-scroll clouds
0000719C 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
000071A0 069A 0001 0000             		addi.l	#$10000,(a2)+
000071A6 069A 0000 C000             		addi.l	#$C000,(a2)+
000071AC 069A 0000 8000             		addi.l	#$8000,(a2)+
000071B2                            	; calculate background scroll	
000071B2 3038 A800                  		move.w	(v_bgscroll_buffer).w,d0
000071B6 D078 F718                  		add.w	(v_bg3screenposx).w,d0
000071BA 4440                       		neg.w	d0
000071BC 323C 001F                  		move.w	#$1F,d1
000071C0 9244                       		sub.w	d4,d1
000071C2 6500                       		bcs.s	@gotoCloud2
000071C4                            	@cloudLoop1:		; upper cloud (32px)
000071C4 22C0                       		move.l	d0,(a1)+
000071C6 51C9 FFFC                  		dbf	d1,@cloudLoop1
000071CA                            
000071CA                            	@gotoCloud2:
000071CA 3038 A804                  		move.w	(v_bgscroll_buffer+4).w,d0
000071CE D078 F718                  		add.w	(v_bg3screenposx).w,d0
000071D2 4440                       		neg.w	d0
000071D4 323C 000F                  		move.w	#$F,d1
000071D8                            	@cloudLoop2:		; middle cloud (16px)
000071D8 22C0                       		move.l	d0,(a1)+
000071DA 51C9 FFFC                  		dbf	d1,@cloudLoop2
000071DE                            
000071DE 3038 A808                  		move.w	(v_bgscroll_buffer+8).w,d0
000071E2 D078 F718                  		add.w	(v_bg3screenposx).w,d0
000071E6 4440                       		neg.w	d0
000071E8 323C 000F                  		move.w	#$F,d1
000071EC                            	@cloudLoop3:		; lower cloud (16px)
000071EC 22C0                       		move.l	d0,(a1)+
000071EE 51C9 FFFC                  		dbf	d1,@cloudLoop3
000071F2                            
000071F2 323C 002F                  		move.w	#$2F,d1
000071F6 3038 F718                  		move.w	(v_bg3screenposx).w,d0
000071FA 4440                       		neg.w	d0
000071FC                            	@mountainLoop:		; distant mountains (48px)
000071FC 22C0                       		move.l	d0,(a1)+
000071FE 51C9 FFFC                  		dbf	d1,@mountainLoop
00007202                            
00007202 323C 0027                  		move.w	#$27,d1
00007206 3038 F710                  		move.w	(v_bg2screenposx).w,d0
0000720A 4440                       		neg.w	d0
0000720C                            	@hillLoop:			; hills & waterfalls (40px)
0000720C 22C0                       		move.l	d0,(a1)+
0000720E 51C9 FFFC                  		dbf	d1,@hillLoop
00007212                            
00007212 3038 F710                  		move.w	(v_bg2screenposx).w,d0
00007216 3438 F700                  		move.w	(v_screenposx).w,d2
0000721A 9440                       		sub.w	d0,d2
0000721C 48C2                       		ext.l	d2
0000721E E182                       		asl.l	#8,d2
00007220 85FC 0068                  		divs.w	#$68,d2
00007224 48C2                       		ext.l	d2
00007226 E182                       		asl.l	#8,d2
00007228 7600                       		moveq	#0,d3
0000722A 3600                       		move.w	d0,d3
0000722C 323C 0047                  		move.w	#$47,d1
00007230 D244                       		add.w	d4,d1
00007232                            	@waterLoop:			; water deformation
00007232 3003                       		move.w	d3,d0
00007234 4440                       		neg.w	d0
00007236 22C0                       		move.l	d0,(a1)+
00007238 4843                       		swap	d3
0000723A D682                       		add.l	d2,d3
0000723C 4843                       		swap	d3
0000723E 51C9 FFF2                  		dbf	d1,@waterLoop
00007242 4E75                       		rts
00007244                            ; End of function Deform_GHZ
00007244                            
00007244                            Deform_Title:
00007244 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007248 48C4                       		ext.l	d4
0000724A EB84                       		asl.l	#5,d4
0000724C 2204                       		move.l	d4,d1
0000724E E384                       		asl.l	#1,d4
00007250 D881                       		add.l	d1,d4
00007252 7A00                       		moveq	#0,d5
00007254 6100 0000                  		bsr.w	BGScroll_Block1
00007258 6100 0000                  		bsr.w	BGScroll_Block3
0000725C 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00007260 3038 F704                  		move.w	(v_screenposy).w,d0
00007264 0240 07FF                  		andi.w	#$7FF,d0
00007268 EA48                       		lsr.w	#5,d0
0000726A 4440                       		neg.w	d0
0000726C 0640 0026                  		addi.w	#$26,d0
00007270 31C0 F714                  		move.w	d0,(v_bg2screenposy).w
00007274 3800                       		move.w	d0,d4
00007276 6100 0000                  		bsr.w	BGScroll_Block3
0000727A 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007280 323C 006F                  		move.w	#$6F,d1
00007284 9244                       		sub.w	d4,d1
00007286 3038 F700                  		move.w	(v_screenposx).w,d0
0000728A 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w
00007290 6600                       		bne.s	loc_633C
00007292 7000                       		moveq	#0,d0
00007294                            
00007294                            loc_633C:
00007294 4440                       		neg.w	d0
00007296 4840                       		swap	d0
00007298 3038 F708                  		move.w	(v_bgscreenposx).w,d0
0000729C 4440                       		neg.w	d0
0000729E                            
0000729E                            loc_6346:
0000729E 22C0                       		move.l	d0,(a1)+
000072A0 51C9 FFFC                  		dbf	d1,loc_6346
000072A4 323C 0027                  		move.w	#$27,d1
000072A8 3038 F710                  		move.w	(v_bg2screenposx).w,d0
000072AC 4440                       		neg.w	d0
000072AE                            
000072AE                            loc_6356:
000072AE 22C0                       		move.l	d0,(a1)+
000072B0 51C9 FFFC                  		dbf	d1,loc_6356
000072B4 3038 F710                  		move.w	(v_bg2screenposx).w,d0
000072B8 0640 0000                  		addi.w	#0,d0
000072BC 3438 F700                  		move.w	(v_screenposx).w,d2
000072C0 0642 FE00                  		addi.w	#-$200,d2
000072C4 9440                       		sub.w	d0,d2
000072C6 48C2                       		ext.l	d2
000072C8 E182                       		asl.l	#8,d2
000072CA 85FC 0068                  		divs.w	#$68,d2
000072CE 48C2                       		ext.l	d2
000072D0 E182                       		asl.l	#8,d2
000072D2 7600                       		moveq	#0,d3
000072D4 3600                       		move.w	d0,d3
000072D6 323C 0047                  		move.w	#$47,d1
000072DA D244                       		add.w	d4,d1
000072DC                            
000072DC                            loc_6384:
000072DC 3003                       		move.w	d3,d0
000072DE 4440                       		neg.w	d0
000072E0 22C0                       		move.l	d0,(a1)+
000072E2 4843                       		swap	d3
000072E4 D682                       		add.l	d2,d3
000072E6 4843                       		swap	d3
000072E8 51C9 FFF2                  		dbf	d1,loc_6384
000072EC 4E75                       		rts	
000072EE                            
000072EE                            ; ===========================================================================
000072EE                            ; ---------------------------------------------------------------------------
000072EE                            ; Scroll routine for Labyrinth Zone - optimised by MarkeyJester
000072EE                            ; ---------------------------------------------------------------------------
000072EE                             
000072EE                            Deform_LZ:
000072EE 7007                       		moveq	#$07,d0					; prepare multiplication 100 / 2 for BG scrolling
000072F0 3838 F73A                  		move.w	(v_scrshiftx).w,d4			; load horizontal movement distance (Since last frame)
000072F4 48C4                       		ext.l	d4					; extend to long-word signed
000072F6 E1A4                       		asl.l	d0,d4					; align as fixed point 16, but divide by 2 for BG
000072F8 3A38 F73C                  		move.w	(v_scrshifty).w,d5			; load vertical movement distance (Since last frame)
000072FC 48C5                       		ext.l	d5					; extend to long-word signed
000072FE E1A5                       		asl.l	d0,d5					; align as fixed point 16, but divide by 2 for BG
00007300 6100 0000                  		bsr.w	BGScroll_Block1				; adjust BG scroll positions (and set draw code direction flags)
00007304 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w		; set BG V-scroll position
0000730A 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1			; load H-scroll buffer
0000730E 3038 F700                  		move.w	(v_screenposx).w,d0			; load FG X position
00007312 4440                       		neg.w	d0					; reverse
00007314 4840                       		swap	d0					; send to upper word
00007316 3038 F708                  		move.w	(v_bgscreenposx).w,d0			; load BG X position
0000731A 4440                       		neg.w	d0					; reverse
0000731C 7600                       		moveq	#$00,d3					; clear d3
0000731E 1638 F7D8                  		move.b	(v_lz_deform).w,d3			; load wave-scroll timer
00007322 0678 0080 F7D8             		addi.w	#$0080,(v_lz_deform).w			; increase wave-scroll timer
00007328 343C 00E0                  		move.w	#$00E0,d2				; prepare water-line count
0000732C 3238 F646                  		move.w	(v_waterpos1).w,d1			; load water line position
00007330 9278 F704                  		sub.w	(v_screenposy).w,d1			; minus FG Y position
00007334 6B00                       		bmi.s	DLZ_Water				; if the screen is already underwater, branch
00007336 B242                       		cmp.w	d2,d1					; is the water line below the screen?
00007338 6F00                       		ble.s	DLZ_NoWater				; if not, branch
0000733A 3202                       		move.w	d2,d1					; set at maximum
0000733C                             
0000733C                            DLZ_NoWater:
0000733C 9441                       		sub.w	d1,d2					; subtract from water-line count
0000733E D601                       		add.b	d1,d3					; advance scroll wave timer to correct amount
00007340 5301                       		subq.b	#$01,d1					; decrease above water count
00007342 6500                       		bcs.s	DLZ_Water				; if finished, branch
00007344                             
00007344                            DLZ_Above:
00007344 22C0                       		move.l	d0,(a1)+				; save scroll position to buffer
00007346 51C9 FFFC                  		dbf	d1,DLZ_Above				; repeat for all above water lines
0000734A                             
0000734A                            DLZ_Water:
0000734A 5302                       		subq.b	#$01,d2					; decrease below water count
0000734C 6500                       		bcs.s	DLZ_Finish				; if finished, branch
0000734E 3200                       		move.w	d0,d1					; copy BG position back to d1
00007350 4840                       		swap	d0					; move FG position back to lower word in d0
00007352 3803                       		move.w	d3,d4					; copy sroll timer for BG use
00007354 D638 F705                  		add.b	(v_screenposy+$01).w,d3			; add FG Y position
00007358 D838 F70D                  		add.b	(v_bgscreenposy+$01).w,d4			; add BG Y position
0000735C D643                       		add.w	d3,d3					; multiply by word size (2)
0000735E D844                       		add.w	d4,d4					; ''
00007360 47F9 0000 0000             		lea	(DLZ_WaveBG).l,a3			; load beginning of BG wave data
00007366 D6C4                       		adda.w	d4,a3					; advance to correct starting point
00007368 1813                       		move.b	(a3),d4					; get current position byte
0000736A E404                       		asr.b	#$02,d4					; get only the position bits
0000736C 4884                       		ext.w	d4					; extend to word
0000736E D244                       		add.w	d4,d1					; adjust BG's current position
00007370 45FB 3000                  		lea	DLZ_WaveFG(pc,d3.w),a2			; load correct starting point of FG wave data
00007374 1812                       		move.b	(a2),d4					; get current position byte
00007376 E404                       		asr.b	#$02,d4					; get only the position bits
00007378 4884                       		ext.w	d4					; extend to word
0000737A D044                       		add.w	d4,d0					; adjust FG's current position
0000737C                             
0000737C                            DLZ_Below:
0000737C D05A                       		add.w	(a2)+,d0				; alter FG horizontal position
0000737E 32C0                       		move.w	d0,(a1)+				; save to scroll buffer
00007380 D25B                       		add.w	(a3)+,d1				; alter BG horizontal position
00007382 32C1                       		move.w	d1,(a1)+				; save to scroll buffer
00007384 51CA FFF6                  		dbf	d2,DLZ_Below				; repeat for all below water lines
00007388                             
00007388                            DLZ_Finish:
00007388 4E75                       		rts						; return
0000738A                             
0000738A                            ; ---------------------------------------------------------------------------
0000738A                            ; Scroll data for the FG
0000738A                            ; ---------------------------------------------------------------------------
0000738A                             
0000738A                            DLZ_WaveFG:
0000738A                            		rept	$02
0000738A                            		dc.w	$0001,$0400,$0401,$0800,$0801,$0C00,$0C00,$0C00,$0FFF,$0800,$0BFF,$0400,$07FF,$0000,$0000,$0000
0000738A                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000738A                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000738A                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000738A                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000738A                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000738A                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000738A                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000738A                            		dc.w	$03FF,$FC00,$FFFF,$F800,$FBFF,$F400,$F400,$F400,$F401,$F800,$F801,$FC00,$FC01,$0000,$0000,$0000
0000738A                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000738A                            		dc.w	$0001,$0400,$0401,$0800,$0801,$0C00,$0C00,$0C00,$0FFF,$0800,$0BFF,$0400,$07FF,$0000,$0000,$0000
0000738A                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000738A                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000738A                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000738A                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000738A                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000738A 0001 0400 0401 0800 0801+  		endr
0000778A                             
0000778A                            ; ---------------------------------------------------------------------------
0000778A                            ; Scroll data for the BG
0000778A                            ; ---------------------------------------------------------------------------
0000778A                             
0000778A                            DLZ_WaveBG:	rept	$04
0000778A                            		dc.w	$FC01,$0000,$0000,$0000,$0000,$0000,$0001,$0400,$0400,$0400,$0400,$0401,$0800,$0800,$0800,$0800
0000778A                            		dc.w	$0800,$0800,$0801,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00
0000778A                            		dc.w	$0C01,$13FF,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0FFF
0000778A                            		dc.w	$0800,$0800,$0800,$0800,$0800,$0800,$0BFF,$0400,$0400,$0400,$0400,$07FF,$0000,$0000,$0000,$0000
0000778A                            		dc.w	$0000,$03FF,$FC00,$FC00,$FC00,$FC00,$FFFF,$F800,$F800,$F800,$F800,$FBFF,$F400,$F400,$F400,$F400
0000778A                            		dc.w	$F400,$F400,$F7FF,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000
0000778A                            		dc.w	$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F001
0000778A                            		dc.w	$F400,$F400,$F400,$F400,$F400,$F400,$F401,$F800,$F800,$F800,$F800,$F801,$FC00,$FC00,$FC00,$FC00
0000778A FC01 0000 0000 0000 0000+  		endr
00007B8A                             
00007B8A                            ; ===========================================================================
00007B8A                            ; End of function Deform_LZ
00007B8A                            
00007B8A                            ; ---------------------------------------------------------------------------
00007B8A                            ; Marble Zone background layer deformation code
00007B8A                            ; ---------------------------------------------------------------------------
00007B8A                            
00007B8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B8A                            
00007B8A                            
00007B8A                            Deform_MZ:
00007B8A                            	; block 1 - dungeon interior
00007B8A 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007B8E 48C4                       		ext.l	d4
00007B90 ED84                       		asl.l	#6,d4
00007B92 2204                       		move.l	d4,d1
00007B94 E384                       		asl.l	#1,d4
00007B96 D881                       		add.l	d1,d4
00007B98 7C02                       		moveq	#2,d6
00007B9A 6100 0000                  		bsr.w	BGScroll_Block1
00007B9E                            	; block 3 - mountains
00007B9E 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007BA2 48C4                       		ext.l	d4
00007BA4 ED84                       		asl.l	#6,d4
00007BA6 7C06                       		moveq	#6,d6
00007BA8 6100 0000                  		bsr.w	BGScroll_Block3
00007BAC                            	; block 2 - bushes & antique buildings
00007BAC 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007BB0 48C4                       		ext.l	d4
00007BB2 EF84                       		asl.l	#7,d4
00007BB4 7C04                       		moveq	#4,d6
00007BB6 6100 0000                  		bsr.w	BGScroll_Block2
00007BBA                            	; calculate y-position of background
00007BBA 303C 0200                  		move.w	#$200,d0	; start with 512px, ignoring 2 chunks
00007BBE 3238 F704                  		move.w	(v_screenposy).w,d1
00007BC2 0441 01C8                  		subi.w	#$1C8,d1	; 0% scrolling when y <= 56px 
00007BC6 6500                       		bcs.s	@noYscroll
00007BC8 3401                       		move.w	d1,d2
00007BCA D241                       		add.w	d1,d1
00007BCC D242                       		add.w	d2,d1
00007BCE E441                       		asr.w	#2,d1
00007BD0 D041                       		add.w	d1,d0
00007BD2                            	@noYscroll:
00007BD2 31C0 F714                  		move.w	d0,(v_bg2screenposy).w
00007BD6 31C0 F71C                  		move.w	d0,(v_bg3screenposy).w
00007BDA 6100 0000                  		bsr.w	BGScroll_YAbsolute
00007BDE 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007BE4                            	; do something with redraw flags
00007BE4 1038 F756                  		move.b	(v_bg1_scroll_flags).w,d0
00007BE8 8038 F758                  		or.b	(v_bg2_scroll_flags).w,d0
00007BEC 8138 F75A                  		or.b	d0,(v_bg3_scroll_flags).w
00007BF0 4238 F756                  		clr.b	(v_bg1_scroll_flags).w
00007BF4 4238 F758                  		clr.b	(v_bg2_scroll_flags).w
00007BF8                            	; calculate background scroll buffer
00007BF8 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
00007BFC 3438 F700                  		move.w	(v_screenposx).w,d2
00007C00 4442                       		neg.w	d2
00007C02 3002                       		move.w	d2,d0
00007C04 E440                       		asr.w	#2,d0
00007C06 9042                       		sub.w	d2,d0
00007C08 48C0                       		ext.l	d0
00007C0A E780                       		asl.l	#3,d0
00007C0C 81FC 0005                  		divs.w	#5,d0
00007C10 48C0                       		ext.l	d0
00007C12 E980                       		asl.l	#4,d0
00007C14 E180                       		asl.l	#8,d0
00007C16 7600                       		moveq	#0,d3
00007C18 3602                       		move.w	d2,d3
00007C1A E243                       		asr.w	#1,d3
00007C1C 323C 0004                  		move.w	#4,d1
00007C20                            	@cloudLoop:		
00007C20 32C3                       		move.w	d3,(a1)+
00007C22 4843                       		swap	d3
00007C24 D680                       		add.l	d0,d3
00007C26 4843                       		swap	d3
00007C28 51C9 FFF6                  		dbf	d1,@cloudLoop
00007C2C                            
00007C2C 3038 F718                  		move.w	(v_bg3screenposx).w,d0
00007C30 4440                       		neg.w	d0
00007C32 323C 0001                  		move.w	#1,d1
00007C36                            	@mountainLoop:		
00007C36 32C0                       		move.w	d0,(a1)+
00007C38 51C9 FFFC                  		dbf	d1,@mountainLoop
00007C3C                            
00007C3C 3038 F710                  		move.w	(v_bg2screenposx).w,d0
00007C40 4440                       		neg.w	d0
00007C42 323C 0008                  		move.w	#8,d1
00007C46                            	@bushLoop:		
00007C46 32C0                       		move.w	d0,(a1)+
00007C48 51C9 FFFC                  		dbf	d1,@bushLoop
00007C4C                            
00007C4C 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00007C50 4440                       		neg.w	d0
00007C52 323C 000F                  		move.w	#$F,d1
00007C56                            	@interiorLoop:		
00007C56 32C0                       		move.w	d0,(a1)+
00007C58 51C9 FFFC                  		dbf	d1,@interiorLoop
00007C5C                            
00007C5C 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
00007C60 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
00007C64 0440 0200                  		subi.w	#$200,d0	; subtract 512px (unused 2 chunks)
00007C68 3400                       		move.w	d0,d2
00007C6A 0C40 0100                  		cmpi.w	#$100,d0
00007C6E 6500                       		bcs.s	@limitY
00007C70 303C 0100                  		move.w	#$100,d0
00007C74                            	@limitY:
00007C74 0240 01F0                  		andi.w	#$1F0,d0
00007C78 E648                       		lsr.w	#3,d0
00007C7A 45F2 0000                  		lea	(a2,d0),a2
00007C7E 6000 0000                  		bra.w	Bg_Scroll_X
00007C82                            ; End of function Deform_MZ
00007C82                            
00007C82                            ; ---------------------------------------------------------------------------
00007C82                            ; Star Light Zone background layer deformation code
00007C82                            ; ---------------------------------------------------------------------------
00007C82                            
00007C82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C82                            
00007C82                            
00007C82                            Deform_SLZ:
00007C82                            	; vertical scrolling
00007C82 3A38 F73C                  		move.w	(v_scrshifty).w,d5
00007C86 48C5                       		ext.l	d5
00007C88 EF85                       		asl.l	#7,d5
00007C8A 6100 0000                  		bsr.w	Bg_Scroll_Y
00007C8E 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007C94                            	; calculate background scroll buffer
00007C94 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
00007C98 3438 F700                  		move.w	(v_screenposx).w,d2
00007C9C 4442                       		neg.w	d2
00007C9E 3002                       		move.w	d2,d0
00007CA0 E640                       		asr.w	#3,d0
00007CA2 9042                       		sub.w	d2,d0
00007CA4 48C0                       		ext.l	d0
00007CA6 E980                       		asl.l	#4,d0
00007CA8 81FC 001C                  		divs.w	#$1C,d0
00007CAC 48C0                       		ext.l	d0
00007CAE E980                       		asl.l	#4,d0
00007CB0 E180                       		asl.l	#8,d0
00007CB2 7600                       		moveq	#0,d3
00007CB4 3602                       		move.w	d2,d3
00007CB6 323C 001B                  		move.w	#$1B,d1
00007CBA                            	@starLoop:		
00007CBA 32C3                       		move.w	d3,(a1)+
00007CBC 4843                       		swap	d3
00007CBE D680                       		add.l	d0,d3
00007CC0 4843                       		swap	d3
00007CC2 51C9 FFF6                  		dbf	d1,@starLoop
00007CC6                            
00007CC6 3002                       		move.w	d2,d0
00007CC8 E640                       		asr.w	#3,d0
00007CCA 3200                       		move.w	d0,d1
00007CCC E241                       		asr.w	#1,d1
00007CCE D041                       		add.w	d1,d0
00007CD0 323C 0004                  		move.w	#4,d1
00007CD4                            	@buildingLoop1:		; distant black buildings
00007CD4 32C0                       		move.w	d0,(a1)+
00007CD6 51C9 FFFC                  		dbf	d1,@buildingLoop1
00007CDA                            
00007CDA 3002                       		move.w	d2,d0
00007CDC E440                       		asr.w	#2,d0
00007CDE 323C 0004                  		move.w	#4,d1
00007CE2                            	@buildingLoop2:		; closer buildings
00007CE2 32C0                       		move.w	d0,(a1)+
00007CE4 51C9 FFFC                  		dbf	d1,@buildingLoop2
00007CE8                            
00007CE8 3002                       		move.w	d2,d0
00007CEA E240                       		asr.w	#1,d0
00007CEC 323C 001D                  		move.w	#$1D,d1
00007CF0                            	@bottomLoop:		; bottom part of background
00007CF0 32C0                       		move.w	d0,(a1)+
00007CF2 51C9 FFFC                  		dbf	d1,@bottomLoop
00007CF6                            
00007CF6 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
00007CFA 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
00007CFE 3400                       		move.w	d0,d2
00007D00 0440 00C0                  		subi.w	#$C0,d0
00007D04 0240 03F0                  		andi.w	#$3F0,d0
00007D08 E648                       		lsr.w	#3,d0
00007D0A 45F2 0000                  		lea	(a2,d0),a2
00007D0E                            ;-------------------------------------------------------------------------------
00007D0E                            ;-------------------------------------------------------------------------------
00007D0E                            Bg_Scroll_X:
00007D0E 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00007D12 323C 000E                  		move.w	#$E,d1
00007D16 3038 F700                  		move.w	(v_screenposx).w,d0
00007D1A 4440                       		neg.w	d0
00007D1C 4840                       		swap	d0
00007D1E 0242 000F                  		andi.w	#$F,d2
00007D22 D442                       		add.w	d2,d2
00007D24 301A                       		move.w	(a2)+,d0
00007D26 4EFB 2000                  		jmp	@pixelJump(pc,d2.w)		; skip pixels for first row
00007D2A                            	@blockLoop:
00007D2A 301A                       		move.w	(a2)+,d0
00007D2C                            	@pixelJump:		
00007D2C 22C0                       		move.l	d0,(a1)+
00007D2E 22C0                       		move.l	d0,(a1)+
00007D30 22C0                       		move.l	d0,(a1)+
00007D32 22C0                       		move.l	d0,(a1)+
00007D34 22C0                       		move.l	d0,(a1)+
00007D36 22C0                       		move.l	d0,(a1)+
00007D38 22C0                       		move.l	d0,(a1)+
00007D3A 22C0                       		move.l	d0,(a1)+
00007D3C 22C0                       		move.l	d0,(a1)+
00007D3E 22C0                       		move.l	d0,(a1)+
00007D40 22C0                       		move.l	d0,(a1)+
00007D42 22C0                       		move.l	d0,(a1)+
00007D44 22C0                       		move.l	d0,(a1)+
00007D46 22C0                       		move.l	d0,(a1)+
00007D48 22C0                       		move.l	d0,(a1)+
00007D4A 22C0                       		move.l	d0,(a1)+
00007D4C 51C9 FFDC                  		dbf	d1,@blockLoop
00007D50 4E75                       		rts
00007D52                            
00007D52                            ; ---------------------------------------------------------------------------
00007D52                            ; Spring Yard Zone background layer deformation	code
00007D52                            ; ---------------------------------------------------------------------------
00007D52                            
00007D52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D52                            
00007D52                            
00007D52                            Deform_SYZ:
00007D52                            	; vertical scrolling
00007D52 3A38 F73C                  		move.w	(v_scrshifty).w,d5
00007D56 48C5                       		ext.l	d5
00007D58 E985                       		asl.l	#4,d5
00007D5A 2205                       		move.l	d5,d1
00007D5C E385                       		asl.l	#1,d5
00007D5E DA81                       		add.l	d1,d5
00007D60 6100 0000                  		bsr.w	Bg_Scroll_Y
00007D64 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007D6A                            	; calculate background scroll buffer
00007D6A 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
00007D6E 3438 F700                  		move.w	(v_screenposx).w,d2
00007D72 4442                       		neg.w	d2
00007D74 3002                       		move.w	d2,d0
00007D76 E640                       		asr.w	#3,d0
00007D78 9042                       		sub.w	d2,d0
00007D7A 48C0                       		ext.l	d0
00007D7C E780                       		asl.l	#3,d0
00007D7E 81FC 0008                  		divs.w	#8,d0
00007D82 48C0                       		ext.l	d0
00007D84 E980                       		asl.l	#4,d0
00007D86 E180                       		asl.l	#8,d0
00007D88 7600                       		moveq	#0,d3
00007D8A 3602                       		move.w	d2,d3
00007D8C E243                       		asr.w	#1,d3
00007D8E 323C 0007                  		move.w	#7,d1
00007D92                            	@cloudLoop:		
00007D92 32C3                       		move.w	d3,(a1)+
00007D94 4843                       		swap	d3
00007D96 D680                       		add.l	d0,d3
00007D98 4843                       		swap	d3
00007D9A 51C9 FFF6                  		dbf	d1,@cloudLoop
00007D9E                            
00007D9E 3002                       		move.w	d2,d0
00007DA0 E640                       		asr.w	#3,d0
00007DA2 323C 0004                  		move.w	#4,d1
00007DA6                            	@mountainLoop:		
00007DA6 32C0                       		move.w	d0,(a1)+
00007DA8 51C9 FFFC                  		dbf	d1,@mountainLoop
00007DAC                            
00007DAC 3002                       		move.w	d2,d0
00007DAE E440                       		asr.w	#2,d0
00007DB0 323C 0005                  		move.w	#5,d1
00007DB4                            	@buildingLoop:		
00007DB4 32C0                       		move.w	d0,(a1)+
00007DB6 51C9 FFFC                  		dbf	d1,@buildingLoop
00007DBA                            
00007DBA 3002                       		move.w	d2,d0
00007DBC 3202                       		move.w	d2,d1
00007DBE E241                       		asr.w	#1,d1
00007DC0 9041                       		sub.w	d1,d0
00007DC2 48C0                       		ext.l	d0
00007DC4 E980                       		asl.l	#4,d0
00007DC6 81FC 000E                  		divs.w	#$E,d0
00007DCA 48C0                       		ext.l	d0
00007DCC E980                       		asl.l	#4,d0
00007DCE E180                       		asl.l	#8,d0
00007DD0 7600                       		moveq	#0,d3
00007DD2 3602                       		move.w	d2,d3
00007DD4 E243                       		asr.w	#1,d3
00007DD6 323C 000D                  		move.w	#$D,d1
00007DDA                            	@bushLoop:		
00007DDA 32C3                       		move.w	d3,(a1)+
00007DDC 4843                       		swap	d3
00007DDE D680                       		add.l	d0,d3
00007DE0 4843                       		swap	d3
00007DE2 51C9 FFF6                  		dbf	d1,@bushLoop
00007DE6                            
00007DE6 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
00007DEA 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
00007DEE 3400                       		move.w	d0,d2
00007DF0 0240 01F0                  		andi.w	#$1F0,d0
00007DF4 E648                       		lsr.w	#3,d0
00007DF6 45F2 0000                  		lea	(a2,d0),a2
00007DFA 6000 FF12                  		bra.w	Bg_Scroll_X
00007DFE                            ; End of function Deform_SYZ
00007DFE                            
00007DFE                            ; ---------------------------------------------------------------------------
00007DFE                            ; Scrap	Brain Zone background layer deformation	code
00007DFE                            ; ---------------------------------------------------------------------------
00007DFE                            
00007DFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007DFE                            
00007DFE                            
00007DFE                            Deform_SBZ:
00007DFE 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007E02 48C4                       		ext.l	d4
00007E04 ED84                       		asl.l	#6,d4
00007E06 3A38 F73C                  		move.w	(v_scrshifty).w,d5
00007E0A 48C5                       		ext.l	d5
00007E0C E985                       		asl.l	#4,d5
00007E0E E385                       		asl.l	#1,d5
00007E10 6100 0000                  		bsr.w	BGScroll_XY
00007E14 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007E1A 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00007E1E 323C 00DF                  		move.w	#223,d1
00007E22 3038 F700                  		move.w	(v_screenposx).w,d0
00007E26 4440                       		neg.w	d0
00007E28 4840                       		swap	d0
00007E2A 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00007E2E 4440                       		neg.w	d0
00007E30                            
00007E30                            loc_6576:
00007E30 22C0                       		move.l	d0,(a1)+
00007E32 51C9 FFFC                  		dbf	d1,loc_6576
00007E36 4E75                       		rts	
00007E38                            ;-------------------------------------------------------------------------------
00007E38                            Deform_SBZ2:;loc_68A2:
00007E38 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007E3C 48C4                       		ext.l	d4
00007E3E ED84                       		asl.l	#6,d4
00007E40 3A38 F73C                  		move.w	(v_scrshifty).w,d5
00007E44 48C5                       		ext.l	d5
00007E46 E985                       		asl.l	#4,d5
00007E48 E385                       		asl.l	#1,d5
00007E4A 6100 0000                  		bsr.w	BGScroll_XY
00007E4E 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007E54 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00007E58 323C 00DF                  		move.w	#223,d1
00007E5C 3038 F700                  		move.w	(v_screenposx).w,d0
00007E60 4440                       		neg.w	d0
00007E62 4840                       		swap	d0
00007E64 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00007E68 4440                       		neg.w	d0
00007E6A                            
00007E6A                            loc_6577:
00007E6A 22C0                       		move.l	d0,(a1)+
00007E6C 51C9 FFFC                  		dbf	d1,loc_6577
00007E70 4E75                       		rts	
00007E72                            
00007E72                            ; ---------------------------------------------------------------------------
00007E72                            ; Subroutine to	scroll the level horizontally as Sonic moves
00007E72                            ; ---------------------------------------------------------------------------
00007E72                            
00007E72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007E72                            
00007E72                            
00007E72                            ScrollHoriz:
00007E72 3838 F700                  		move.w	(v_screenposx).w,d4 ; save old screen position
00007E76 6100                       		bsr.s	MoveScreenHoriz
00007E78 3038 F700                  		move.w	(v_screenposx).w,d0
00007E7C 0240 0010                  		andi.w	#$10,d0
00007E80 1238 F74A                  		move.b	(v_fg_xblock).w,d1
00007E84 B300                       		eor.b	d1,d0
00007E86 6600                       		bne.s	@return
00007E88 0A38 0010 F74A             		eori.b	#$10,(v_fg_xblock).w
00007E8E 3038 F700                  		move.w	(v_screenposx).w,d0
00007E92 9044                       		sub.w	d4,d0		; compare new with old screen position
00007E94 6A00                       		bpl.s	@scrollRight
00007E96                            
00007E96 08F8 0002 F754             		bset	#2,(v_fg_scroll_flags).w ; screen moves backward
00007E9C 4E75                       		rts	
00007E9E                            
00007E9E                            	@scrollRight:
00007E9E 08F8 0003 F754             		bset	#3,(v_fg_scroll_flags).w ; screen moves forward
00007EA4                            
00007EA4                            	@return:
00007EA4 4E75                       		rts	
00007EA6                            ; End of function ScrollHoriz
00007EA6                            
00007EA6                            
00007EA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007EA6                            
00007EA6                            MoveScreenHoriz:
00007EA6 4A38 FF8B                  		tst.b	($FFFFFF8B).w
00007EAA 6700 0000                  		beq.w	@cont		
00007EAE 4EF9 0000 0000             		jmp	MoveScreenHorizEXT
00007EB4                            		
00007EB4                            	@cont:		
00007EB4 3238 C904                  		move.w	($FFFFC904).w,d1
00007EB8 6700                       		beq.s	@cont1
00007EBA 0441 0100                  		sub.w	#$100,d1
00007EBE 31C1 C904                  		move.w	d1,($FFFFC904).w
00007EC2 7200                       		moveq	#0,d1
00007EC4 1238 C904                  		move.b	($FFFFC904).w,d1
00007EC8 E509                       		lsl.b	#2,d1
00007ECA 5801                       		addq.b	#4,d1
00007ECC 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00007ED0 9001                       		sub.b	d1,d0
00007ED2 43F8 CB00                  		lea	($FFFFCB00).w,a1
00007ED6 3031 0000                  		move.w	(a1,d0.w),d0
00007EDA 0240 3FFF                  		and.w	#$3FFF,d0
00007EDE 6000                       		bra.s	@cont2
00007EE0                            		
00007EE0                            @cont1:
00007EE0 3038 D008                  		move.w	($FFFFD008).w,d0
00007EE4                            		
00007EE4                            @cont2:
00007EE4 9078 F700                  		sub.w	($FFFFF700).w,d0
00007EE8 0440 0090                          subi.w    #144,d0        ; is distance less than 144px?
00007EEC 6500                               bcs.s    SH_BehindMid    ; if yes, branch
00007EEE 0440 0010                          subi.w    #16,d0        ; is distance more than 160px?
00007EF2 6400                               bcc.s    SH_AheadOfMid    ; if yes, branch
00007EF4 4278 F73A                          clr.w    (v_scrshiftx).w
00007EF8 4E75                               rts 
00007EFA                            ; ===========================================================================
00007EFA                            
00007EFA                            SH_AheadOfMid:
00007EFA 0C40 0010                          cmpi.w    #16,d0        ; is Sonic within 16px of middle area?
00007EFE 6500                               bcs.s    SH_Ahead16    ; if yes, branch
00007F00 303C 0010                          move.w    #16,d0        ; set to 16 if greater
00007F04                            
00007F04                                SH_Ahead16:
00007F04 D078 F700                          add.w    (v_screenposx).w,d0
00007F08 B078 F72A                          cmp.w    (v_limitright2).w,d0
00007F0C 6D00                               blt.s    SH_SetScreen
00007F0E 3038 F72A                          move.w    (v_limitright2).w,d0
00007F12                            
00007F12                            SH_SetScreen:
00007F12 3200                               move.w    d0,d1
00007F14 9278 F700                          sub.w    (v_screenposx).w,d1
00007F18 E141                               asl.w    #8,d1
00007F1A 31C0 F700                          move.w    d0,(v_screenposx).w ; set new screen position
00007F1E 31C1 F73A                          move.w    d1,(v_scrshiftx).w ; set distance for screen movement
00007F22 4E75                               rts 
00007F24                            ; ===========================================================================
00007F24                            
00007F24                            SH_BehindMid:
00007F24 0C40 FFF0                  		cmpi.w	#-$10,d0
00007F28 6E00                       		bgt.s	@cont
00007F2A 303C FFF0                  		move.w	#-$10,d0	
00007F2E                            		
00007F2E                            @cont:
00007F2E D078 F700                          add.w    (v_screenposx).w,d0
00007F32 B078 F728                          cmp.w    (v_limitleft2).w,d0
00007F36 6EDA                               bgt.s    SH_SetScreen
00007F38 3038 F728                          move.w    (v_limitleft2).w,d0
00007F3C 60D4                               bra.s    SH_SetScreen
00007F3E                            ; End of function MoveScreenHoriz
00007F3E                            
00007F3E                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
00007F3E                            
00007F3E                            MoveScreenHorizEXT:
00007F3E 3238 C904                  		move.w	($FFFFC904).w,d1
00007F42 6700                       		beq.s	@cont1
00007F44 0441 0100                  		sub.w	#$100,d1
00007F48 31C1 C904                  		move.w	d1,($FFFFC904).w
00007F4C 7200                       		moveq	#0,d1
00007F4E 1238 C904                  		move.b	($FFFFC904).w,d1
00007F52 E509                       		lsl.b	#2,d1
00007F54 5801                       		addq.b	#4,d1
00007F56 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00007F5A 9001                       		sub.b	d1,d0
00007F5C 43F8 CB00                  		lea	($FFFFCB00).w,a1
00007F60 3031 0000                  		move.w	(a1,d0.w),d0
00007F64 0240 3FFF                  		and.w	#$3FFF,d0
00007F68 6000                       		bra.s	@cont2
00007F6A                            		
00007F6A                            @cont1:
00007F6A 3038 D008                  		move.w	($FFFFD008).w,d0
00007F6E                            		
00007F6E                            @cont2:
00007F6E 9078 F700                  		sub.w	($FFFFF700).w,d0
00007F72 9078 F7A0                          sub.w    (v_camera_pan).w,d0    ; Horizontal camera pan value
00007F76 6700                               beq.s    SHEXT_ProperlyFramed    ; if zero, branch
00007F78 6500                               bcs.s    SHEXT_BehindMid    ; if less than, branch
00007F7A 6000                               bra.s    SHEXT_AheadOfMid    ; branch
00007F7C                            ; ===========================================================================
00007F7C                            
00007F7C                            SHEXT_ProperlyFramed:
00007F7C 4278 F73A                          clr.w    (v_scrshiftx).w
00007F80 4E75                               rts 
00007F82                            ; ===========================================================================
00007F82                            
00007F82                            SHEXT_AheadOfMid:
00007F82 0C40 0010                          cmpi.w    #16,d0        ; is Sonic within 16px of middle area?
00007F86 6D00                               blt.s    SHEXT_Ahead16    ; if yes, branch
00007F88 303C 0010                          move.w    #16,d0        ; set to 16 if greater
00007F8C                            
00007F8C                            SHEXT_Ahead16:
00007F8C D078 F700                          add.w    (v_screenposx).w,d0
00007F90 B078 F72A                          cmp.w    (v_limitright2).w,d0
00007F94 6D00                               blt.s    SHEXT_SetScreen
00007F96 3038 F72A                          move.w    (v_limitright2).w,d0
00007F9A                            
00007F9A                            SHEXT_SetScreen:
00007F9A 3200                               move.w    d0,d1
00007F9C 9278 F700                          sub.w    (v_screenposx).w,d1
00007FA0 E141                               asl.w    #8,d1
00007FA2 31C0 F700                          move.w    d0,(v_screenposx).w ; set new screen position
00007FA6 31C1 F73A                          move.w    d1,(v_scrshiftx).w ; set distance for screen movement
00007FAA 4E75                               rts
00007FAC                            
00007FAC                            ; ===========================================================================
00007FAC                            
00007FAC                            SHEXT_BehindMid:
00007FAC 0C40 FFF0                          cmpi.w    #-16,d0        ; is Sonic within 16px of middle area?
00007FB0 6C00                               bge.s    SHEXT_Behind16    ; if no, branch
00007FB2 303C FFF0                          move.w    #-16,d0        ; set to -16 if less
00007FB6                            
00007FB6                            SHEXT_Behind16:
00007FB6 D078 F700                          add.w    (v_screenposx).w,d0
00007FBA B078 F728                          cmp.w    (v_limitleft2).w,d0
00007FBE 6EDA                               bgt.s    SHEXT_SetScreen
00007FC0 3038 F728                          move.w    (v_limitleft2).w,d0
00007FC4 60D4                               bra.s    SHEXT_SetScreen
00007FC6                                  
00007FC6                            ; End of function MoveScreenHoriz
00007FC6                            
00007FC6                            
00007FC6                            ; ---------------------------------------------------------------------------
00007FC6                            ; Subroutine to	scroll the level vertically as Sonic moves
00007FC6                            ; ---------------------------------------------------------------------------
00007FC6                            
00007FC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007FC6                            
00007FC6                            
00007FC6                            ScrollVertical:
00007FC6 7200                       		moveq	#0,d1
00007FC8 3038 D00C                  		move.w	(v_player+obY).w,d0
00007FCC 9078 F704                  		sub.w	(v_screenposy).w,d0 ; Sonic's distance from top of screen
00007FD0 0838 0002 D022             		btst	#2,(v_player+obStatus).w ; is Sonic rolling?
00007FD6 6700                       		beq.s	SV_NotRolling	; if not, branch
00007FD8 5B40                       		subq.w	#5,d0
00007FDA                            
00007FDA                            	SV_NotRolling:
00007FDA 0838 0001 D022             		btst	#1,(v_player+obStatus).w ; is Sonic jumping?
00007FE0 6700                       		beq.s	loc_664A	; if not, branch
00007FE2                            
00007FE2 0640 0020                  		addi.w	#32,d0
00007FE6 9078 F73E                  		sub.w	(v_lookshift).w,d0
00007FEA 6500                       		bcs.s	loc_6696
00007FEC 0440 0040                  		subi.w	#64,d0
00007FF0 6400                       		bcc.s	loc_6696
00007FF2 4A38 F75C                  		tst.b	(f_bgscrollvert).w
00007FF6 6600                       		bne.s	loc_66A8
00007FF8 6000                       		bra.s	loc_6656
00007FFA                            ; ===========================================================================
00007FFA                            
00007FFA                            loc_664A:
00007FFA 9078 F73E                  		sub.w	(v_lookshift).w,d0
00007FFE 6600                       		bne.s	loc_665C
00008000 4A38 F75C                  		tst.b	(f_bgscrollvert).w
00008004 6600                       		bne.s	loc_66A8
00008006                            
00008006                            loc_6656:
00008006 4278 F73C                  		clr.w	(v_scrshifty).w
0000800A 4E75                       		rts	
0000800C                            ; ===========================================================================
0000800C                            
0000800C                            loc_665C:
0000800C 0C78 0060 F73E             		cmpi.w	#$60,(v_lookshift).w
00008012 6600                       		bne.s	loc_6684
00008014 3238 D020                  		move.w	(v_player+obInertia).w,d1
00008018 6A00                       		bpl.s	loc_666C
0000801A 4441                       		neg.w	d1
0000801C                            
0000801C                            loc_666C:
0000801C 0C41 0800                  		cmpi.w	#$800,d1
00008020 6400                       		bcc.s	loc_6696
00008022 323C 0600                  		move.w	#$600,d1
00008026 0C40 0006                  		cmpi.w	#6,d0
0000802A 6E00                       		bgt.s	loc_66F6
0000802C 0C40 FFFA                  		cmpi.w	#-6,d0
00008030 6D00                       		blt.s	loc_66C0
00008032 6000                       		bra.s	loc_66AE
00008034                            ; ===========================================================================
00008034                            
00008034                            loc_6684:
00008034 323C 0200                  		move.w	#$200,d1
00008038 0C40 0002                  		cmpi.w	#2,d0
0000803C 6E00                       		bgt.s	loc_66F6
0000803E 0C40 FFFE                  		cmpi.w	#-2,d0
00008042 6D00                       		blt.s	loc_66C0
00008044 6000                       		bra.s	loc_66AE
00008046                            ; ===========================================================================
00008046                            
00008046                            loc_6696:
00008046 323C 1000                  		move.w	#$1000,d1
0000804A 0C40 0010                  		cmpi.w	#$10,d0
0000804E 6E00                       		bgt.s	loc_66F6
00008050 0C40 FFF0                  		cmpi.w	#-$10,d0
00008054 6D00                       		blt.s	loc_66C0
00008056 6000                       		bra.s	loc_66AE
00008058                            ; ===========================================================================
00008058                            
00008058                            loc_66A8:
00008058 7000                       		moveq	#0,d0
0000805A 11C0 F75C                  		move.b	d0,(f_bgscrollvert).w
0000805E                            
0000805E                            loc_66AE:
0000805E 7200                       		moveq	#0,d1
00008060 3200                       		move.w	d0,d1
00008062 D278 F704                  		add.w	(v_screenposy).w,d1
00008066 4A40                       		tst.w	d0
00008068 6A00 0000                  		bpl.w	loc_6700
0000806C 6000 0000                  		bra.w	loc_66CC
00008070                            ; ===========================================================================
00008070                            
00008070                            loc_66C0:
00008070 4441                       		neg.w	d1
00008072 48C1                       		ext.l	d1
00008074 E181                       		asl.l	#8,d1
00008076 D2B8 F704                  		add.l	(v_screenposy).w,d1
0000807A 4841                       		swap	d1
0000807C                            
0000807C                            loc_66CC:
0000807C B278 F72C                  		cmp.w	(v_limittop2).w,d1
00008080 6E00                       		bgt.s	loc_6724
00008082 0C41 FF00                  		cmpi.w	#-$100,d1
00008086 6E00                       		bgt.s	loc_66F0
00008088 0241 07FF                  		andi.w	#$7FF,d1
0000808C 0278 07FF D00C             		andi.w	#$7FF,(v_player+obY).w
00008092 0278 07FF F704             		andi.w	#$7FF,(v_screenposy).w
00008098 0278 03FF F70C             		andi.w	#$3FF,(v_bgscreenposy).w
0000809E 6000                       		bra.s	loc_6724
000080A0                            ; ===========================================================================
000080A0                            
000080A0                            loc_66F0:
000080A0 3238 F72C                  		move.w	(v_limittop2).w,d1
000080A4 6000                       		bra.s	loc_6724
000080A6                            ; ===========================================================================
000080A6                            
000080A6                            loc_66F6:
000080A6 48C1                       		ext.l	d1
000080A8 E181                       		asl.l	#8,d1
000080AA D2B8 F704                  		add.l	(v_screenposy).w,d1
000080AE 4841                       		swap	d1
000080B0                            
000080B0                            loc_6700:
000080B0 B278 F72E                  		cmp.w	(v_limitbtm2).w,d1
000080B4 6D00                       		blt.s	loc_6724
000080B6 0441 0800                  		subi.w	#$800,d1
000080BA 6500                       		bcs.s	loc_6720
000080BC 0278 07FF D00C             		andi.w	#$7FF,(v_player+obY).w
000080C2 0478 0800 F704             		subi.w	#$800,(v_screenposy).w
000080C8 0278 03FF F70C             		andi.w	#$3FF,(v_bgscreenposy).w
000080CE 6000                       		bra.s	loc_6724
000080D0                            ; ===========================================================================
000080D0                            
000080D0                            loc_6720:
000080D0 3238 F72E                  		move.w	(v_limitbtm2).w,d1
000080D4                            
000080D4                            loc_6724:
000080D4 3838 F704                  		move.w	(v_screenposy).w,d4
000080D8 4841                       		swap	d1
000080DA 2601                       		move.l	d1,d3
000080DC 96B8 F704                  		sub.l	(v_screenposy).w,d3
000080E0 E09B                       		ror.l	#8,d3
000080E2 31C3 F73C                  		move.w	d3,(v_scrshifty).w
000080E6 21C1 F704                  		move.l	d1,(v_screenposy).w
000080EA 3038 F704                  		move.w	(v_screenposy).w,d0
000080EE 0240 0010                  		andi.w	#$10,d0
000080F2 1238 F74B                  		move.b	(v_fg_yblock).w,d1
000080F6 B300                       		eor.b	d1,d0
000080F8 6600                       		bne.s	@return
000080FA 0A38 0010 F74B             		eori.b	#$10,(v_fg_yblock).w
00008100 3038 F704                  		move.w	(v_screenposy).w,d0
00008104 9044                       		sub.w	d4,d0
00008106 6A00                       		bpl.s	@scrollBottom
00008108 08F8 0000 F754             		bset	#0,(v_fg_scroll_flags).w
0000810E 4E75                       		rts	
00008110                            ; ===========================================================================
00008110                            
00008110                            	@scrollBottom:
00008110 08F8 0001 F754             		bset	#1,(v_fg_scroll_flags).w
00008116                            
00008116                            	@return:
00008116 4E75                       		rts	
00008118                            ; End of function ScrollVertical
00008118                            
00008118                            
00008118                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008118                            ; Scrolls background and sets redraw flags.
00008118                            ; d4 - background x offset * $10000
00008118                            ; d5 - background y offset * $10000
00008118                            
00008118                            BGScroll_XY:
00008118 2438 F708                  		move.l	(v_bgscreenposx).w,d2
0000811C 2002                       		move.l	d2,d0
0000811E D084                       		add.l	d4,d0
00008120 21C0 F708                  		move.l	d0,(v_bgscreenposx).w
00008124 2200                       		move.l	d0,d1
00008126 4841                       		swap	d1
00008128 0241 0010                  		andi.w	#$10,d1
0000812C 1638 F74C                  		move.b	(v_bg1_xblock).w,d3
00008130 B701                       		eor.b	d3,d1
00008132 6600                       		bne.s	BGScroll_YRelative	; no change in Y
00008134 0A38 0010 F74C             		eori.b	#$10,(v_bg1_xblock).w
0000813A 9082                       		sub.l	d2,d0	; new - old
0000813C 6A00                       		bpl.s	@scrollRight
0000813E 08F8 0002 F756             		bset	#2,(v_bg1_scroll_flags).w
00008144 6000                       		bra.s	BGScroll_YRelative
00008146                            	@scrollRight:
00008146 08F8 0003 F756             		bset	#3,(v_bg1_scroll_flags).w
0000814C                            BGScroll_YRelative:
0000814C 2638 F70C                  		move.l	(v_bgscreenposy).w,d3
00008150 2003                       		move.l	d3,d0
00008152 D085                       		add.l	d5,d0
00008154 21C0 F70C                  		move.l	d0,(v_bgscreenposy).w
00008158 2200                       		move.l	d0,d1
0000815A 4841                       		swap	d1
0000815C 0241 0010                  		andi.w	#$10,d1
00008160 1438 F74D                  		move.b	(v_bg1_yblock).w,d2
00008164 B501                       		eor.b	d2,d1
00008166 6600                       		bne.s	@return
00008168 0A38 0010 F74D             		eori.b	#$10,(v_bg1_yblock).w
0000816E 9083                       		sub.l	d3,d0
00008170 6A00                       		bpl.s	@scrollBottom
00008172 08F8 0000 F756             		bset	#0,(v_bg1_scroll_flags).w
00008178 4E75                       		rts
0000817A                            	@scrollBottom:
0000817A 08F8 0001 F756             		bset	#1,(v_bg1_scroll_flags).w
00008180                            	@return:
00008180 4E75                       		rts
00008182                            ; End of function BGScroll_XY
00008182                            
00008182                            Bg_Scroll_Y:
00008182 2638 F70C                  		move.l	(v_bgscreenposy).w,d3
00008186 2003                       		move.l	d3,d0
00008188 D085                       		add.l	d5,d0
0000818A 21C0 F70C                  		move.l	d0,(v_bgscreenposy).w
0000818E 2200                       		move.l	d0,d1
00008190 4841                       		swap	d1
00008192 0241 0010                  		andi.w	#$10,d1
00008196 1438 F74D                  		move.b	(v_bg1_yblock).w,d2
0000819A B501                       		eor.b	d2,d1
0000819C 6600                       		bne.s	@return
0000819E 0A38 0010 F74D             		eori.b	#$10,(v_bg1_yblock).w
000081A4 9083                       		sub.l	d3,d0
000081A6 6A00                       		bpl.s	@scrollBottom
000081A8 08F8 0004 F756             		bset	#4,(v_bg1_scroll_flags).w
000081AE 4E75                       		rts
000081B0                            	@scrollBottom:
000081B0 08F8 0005 F756             		bset	#5,(v_bg1_scroll_flags).w
000081B6                            	@return:
000081B6 4E75                       		rts
000081B8                            
000081B8                            
000081B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000081B8                            
000081B8                            
000081B8                            BGScroll_YAbsolute:
000081B8 3638 F70C                  		move.w	(v_bgscreenposy).w,d3
000081BC 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
000081C0 3200                       		move.w	d0,d1
000081C2 0241 0010                  		andi.w	#$10,d1
000081C6 1438 F74D                  		move.b	(v_bg1_yblock).w,d2
000081CA B501                       		eor.b	d2,d1
000081CC 6600                       		bne.s	@return
000081CE 0A38 0010 F74D             		eori.b	#$10,(v_bg1_yblock).w
000081D4 9043                       		sub.w	d3,d0
000081D6 6A00                       		bpl.s	@scrollBottom
000081D8 08F8 0000 F756             		bset	#0,(v_bg1_scroll_flags).w
000081DE 4E75                       		rts
000081E0                            	@scrollBottom:
000081E0 08F8 0001 F756             		bset	#1,(v_bg1_scroll_flags).w
000081E6                            	@return:
000081E6 4E75                       		rts
000081E8                            ; End of function BGScroll_YAbsolute
000081E8                            
000081E8                            
000081E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000081E8                            ; d6 - bit to set for redraw
000081E8                            
000081E8                            BGScroll_Block1:
000081E8 2438 F708                  		move.l	(v_bgscreenposx).w,d2
000081EC 2002                       		move.l	d2,d0
000081EE D084                       		add.l	d4,d0
000081F0 21C0 F708                  		move.l	d0,(v_bgscreenposx).w
000081F4 2200                       		move.l	d0,d1
000081F6 4841                       		swap	d1
000081F8 0241 0010                  		andi.w	#$10,d1
000081FC 1638 F74C                  		move.b	(v_bg1_xblock).w,d3
00008200 B701                       		eor.b	d3,d1
00008202 6600                       		bne.s	@return
00008204 0A38 0010 F74C             		eori.b	#$10,(v_bg1_xblock).w
0000820A 9082                       		sub.l	d2,d0
0000820C 6A00                       		bpl.s	@scrollRight
0000820E 0DF8 F756                  		bset	d6,(v_bg1_scroll_flags).w
00008212 6000                       		bra.s	@return
00008214                            	@scrollRight:
00008214 5206                       		addq.b	#1,d6
00008216 0DF8 F756                  		bset	d6,(v_bg1_scroll_flags).w
0000821A                            	@return:
0000821A 4E75                       		rts
0000821C                            ; End of function BGScroll_Block1
0000821C                            
0000821C                            
0000821C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000821C                            
0000821C                            
0000821C                            BGScroll_Block2:
0000821C 2438 F710                  		move.l	(v_bg2screenposx).w,d2
00008220 2002                       		move.l	d2,d0
00008222 D084                       		add.l	d4,d0
00008224 21C0 F710                  		move.l	d0,(v_bg2screenposx).w
00008228 2200                       		move.l	d0,d1
0000822A 4841                       		swap	d1
0000822C 0241 0010                  		andi.w	#$10,d1
00008230 1638 F74E                  		move.b	(v_bg2_xblock).w,d3
00008234 B701                       		eor.b	d3,d1
00008236 6600                       		bne.s	@return
00008238 0A38 0010 F74E             		eori.b	#$10,(v_bg2_xblock).w
0000823E 9082                       		sub.l	d2,d0
00008240 6A00                       		bpl.s	@scrollRight
00008242 0DF8 F758                  		bset	d6,(v_bg2_scroll_flags).w
00008246 6000                       		bra.s	@return
00008248                            	@scrollRight:
00008248 5206                       		addq.b	#1,d6
0000824A 0DF8 F758                  		bset	d6,(v_bg2_scroll_flags).w
0000824E                            	@return:
0000824E 4E75                       		rts
00008250                            ;-------------------------------------------------------------------------------
00008250                            BGScroll_Block3:
00008250 2438 F718                  		move.l	(v_bg3screenposx).w,d2
00008254 2002                       		move.l	d2,d0
00008256 D084                       		add.l	d4,d0
00008258 21C0 F718                  		move.l	d0,(v_bg3screenposx).w
0000825C 2200                       		move.l	d0,d1
0000825E 4841                       		swap	d1
00008260 0241 0010                  		andi.w	#$10,d1
00008264 1638 F750                  		move.b	(v_bg3_xblock).w,d3
00008268 B701                       		eor.b	d3,d1
0000826A 6600                       		bne.s	@return
0000826C 0A38 0010 F750             		eori.b	#$10,(v_bg3_xblock).w
00008272 9082                       		sub.l	d2,d0
00008274 6A00                       		bpl.s	@scrollRight
00008276 0DF8 F75A                  		bset	d6,(v_bg3_scroll_flags).w
0000827A 6000                       		bra.s	@return
0000827C                            	@scrollRight:
0000827C 5206                       		addq.b	#1,d6
0000827E 0DF8 F75A                  		bset	d6,(v_bg3_scroll_flags).w
00008282                            	@return:
00008282 4E75                       		rts
00008282 4E75                       		rts
00008284                            
00008284                            
00008284                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008284                            
00008284                            ; sub_6886:
00008284                            LoadTilesAsYouMove_BGOnly:
00008284 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
0000828A 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00008290 45F8 F756                  		lea	(v_bg1_scroll_flags).w,a2
00008294 47F8 F708                  		lea	(v_bgscreenposx).w,a3
00008298 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
0000829C 343C 6000                  		move.w	#$6000,d2
000082A0 6100 0000                  		bsr.w	DrawBGScrollBlock1
000082A4 45F8 F758                  		lea	(v_bg2_scroll_flags).w,a2
000082A8 47F8 F710                  		lea	(v_bg2screenposx).w,a3
000082AC 6000 0000                  		bra.w	DrawBGScrollBlock2
000082B0                            ; End of function sub_6886
000082B0                            
000082B0                            ; ---------------------------------------------------------------------------
000082B0                            ; Subroutine to	display	correct	tiles as you move
000082B0                            ; ---------------------------------------------------------------------------
000082B0                            
000082B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000082B0                            
000082B0                            
000082B0                            LoadTilesAsYouMove:
000082B0 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
000082B6 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
000082BC                            		; First, update the background
000082BC 45F8 FF32                  		lea	(v_bg1_scroll_flags_dup).w,a2	; Scroll block 1 scroll flags
000082C0 47F8 FF18                  		lea	(v_bgscreenposx_dup).w,a3	; Scroll block 1 X coordinate
000082C4 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
000082C8 343C 6000                  		move.w	#$6000,d2			; VRAM thing for selecting Plane B
000082CC 6100 0000                  		bsr.w	DrawBGScrollBlock1
000082D0 45F8 FF34                  		lea	(v_bg2_scroll_flags_dup).w,a2	; Scroll block 2 scroll flags
000082D4 47F8 FF20                  		lea	(v_bg2screenposx_dup).w,a3	; Scroll block 2 X coordinate
000082D8 6100 0000                  		bsr.w	DrawBGScrollBlock2
000082DC                            		; REV01 added a third scroll block, though, technically,
000082DC                            		; the RAM for it was already there in REV00
000082DC 45F8 FF36                  		lea	(v_bg3_scroll_flags_dup).w,a2	; Scroll block 3 scroll flags
000082E0 47F8 FF28                  		lea	(v_bg3screenposx_dup).w,a3	; Scroll block 3 X coordinate
000082E4 6100 0000                  		bsr.w	DrawBGScrollBlock3
000082E8                            		; Then, update the foreground
000082E8 45F8 FF30                  		lea	(v_fg_scroll_flags_dup).w,a2	; Foreground scroll flags
000082EC 47F8 FF10                  		lea	(v_screenposx_dup).w,a3		; Foreground X coordinate
000082F0 49F8 A400                  		lea	(v_lvllayout).w,a4
000082F4 343C 4000                  		move.w	#$4000,d2			; VRAM thing for selecting Plane A
000082F8                            		; The FG's update function is inlined here
000082F8 4A12                       		tst.b	(a2)
000082FA 6700                       		beq.s	locret_6952	; If there are no flags set, nothing needs updating
000082FC 0892 0000                  		bclr	#0,(a2)
00008300 6700                       		beq.s	loc_6908
00008302                            		; Draw new tiles at the top
00008302 78F0                       		moveq	#-16,d4	; Y coordinate. Note that 16 is the size of a block in pixels
00008304 7AF0                       		moveq	#-16,d5 ; X coordinate
00008306 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000830A 78F0                       		moveq	#-16,d4 ; Y coordinate
0000830C 7AF0                       		moveq	#-16,d5 ; X coordinate
0000830E 6100 0000                  		bsr.w	DrawBlocks_LR
00008312                            
00008312                            loc_6908:
00008312 0892 0001                  		bclr	#1,(a2)
00008316 6700                       		beq.s	loc_6922
00008318                            		; Draw new tiles at the bottom
00008318 383C 00E0                  		move.w	#224,d4	; Start at bottom of the screen. Since this draws from top to bottom, we don't need 224+16
0000831C 7AF0                       		moveq	#-16,d5
0000831E 6100 0000                  		bsr.w	Calc_VRAM_Pos
00008322 383C 00E0                  		move.w	#224,d4
00008326 7AF0                       		moveq	#-16,d5
00008328 6100 0000                  		bsr.w	DrawBlocks_LR
0000832C                            
0000832C                            loc_6922:
0000832C 0892 0002                  		bclr	#2,(a2)
00008330 6700                       		beq.s	loc_6938
00008332                            		; Draw new tiles on the left
00008332 78F0                       		moveq	#-16,d4
00008334 7AF0                       		moveq	#-16,d5
00008336 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000833A 78F0                       		moveq	#-16,d4
0000833C 7AF0                       		moveq	#-16,d5
0000833E 6100 0000                  		bsr.w	DrawBlocks_TB
00008342                            
00008342                            loc_6938:
00008342 0892 0003                  		bclr	#3,(a2)
00008346 6700                       		beq.s	locret_6952
00008348                            		; Draw new tiles on the right
00008348 78F0                       		moveq	#-16,d4
0000834A 3A3C 0140                  		move.w	#320,d5
0000834E 6100 0000                  		bsr.w	Calc_VRAM_Pos
00008352 78F0                       		moveq	#-16,d4
00008354 3A3C 0140                  		move.w	#320,d5
00008358 6100 0000                  		bsr.w	DrawBlocks_TB
0000835C                            
0000835C                            locret_6952:
0000835C 4E75                       		rts	
0000835E                            ; End of function LoadTilesAsYouMove
0000835E                            
0000835E                            
0000835E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000835E                            
0000835E                            ; sub_6954:
0000835E                            DrawBGScrollBlock1:
0000835E 4A12                       		tst.b	(a2)
00008360 6700 0000                  		beq.w	locret_69F2
00008364 0892 0000                  		bclr	#0,(a2)
00008368 6700                       		beq.s	loc_6972
0000836A                            		; Draw new tiles at the top
0000836A 78F0                       		moveq	#-16,d4
0000836C 7AF0                       		moveq	#-16,d5
0000836E 6100 0000                  		bsr.w	Calc_VRAM_Pos
00008372 78F0                       		moveq	#-16,d4
00008374 7AF0                       		moveq	#-16,d5
00008376 6100 0000                  			bsr.w	DrawBlocks_LR
0000837A                            
0000837A                            loc_6972:
0000837A 0892 0001                  		bclr	#1,(a2)
0000837E 6700                       		beq.s	loc_698E
00008380                            		; Draw new tiles at the top
00008380 383C 00E0                  		move.w	#224,d4
00008384 7AF0                       		moveq	#-16,d5
00008386 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000838A 383C 00E0                  		move.w	#224,d4
0000838E 7AF0                       		moveq	#-16,d5
00008390 6100 0000                  			bsr.w	DrawBlocks_LR
00008394                            
00008394                            loc_698E:
00008394 0892 0002                  		bclr	#2,(a2)
00008398                            
00008398                            
00008398 6700                       			beq.s	locj_6D56
0000839A                            			; Draw new tiles on the left
0000839A 78F0                       			moveq	#-16,d4
0000839C 7AF0                       			moveq	#-16,d5
0000839E 6100 0000                  			bsr.w	Calc_VRAM_Pos
000083A2 78F0                       			moveq	#-16,d4
000083A4 7AF0                       			moveq	#-16,d5
000083A6 6100 0000                  			bsr.w	DrawBlocks_TB
000083AA                            	locj_6D56:
000083AA                            
000083AA 0892 0003                  			bclr	#3,(a2)
000083AE 6700                       			beq.s	locj_6D70
000083B0                            			; Draw new tiles on the right
000083B0 78F0                       			moveq	#-16,d4
000083B2 3A3C 0140                  			move.w	#320,d5
000083B6 6100 0000                  			bsr.w	Calc_VRAM_Pos
000083BA 78F0                       			moveq	#-16,d4
000083BC 3A3C 0140                  			move.w	#320,d5
000083C0 6100 0000                  			bsr.w	DrawBlocks_TB
000083C4                            	locj_6D70:
000083C4                            
000083C4 0892 0004                  			bclr	#4,(a2)
000083C8 6700                       			beq.s	locj_6D88
000083CA                            			; Draw entire row at the top
000083CA 78F0                       			moveq	#-16,d4
000083CC 7A00                       			moveq	#0,d5
000083CE 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
000083D2 78F0                       			moveq	#-16,d4
000083D4 7A00                       			moveq	#0,d5
000083D6 7C1F                       			moveq	#(512/16)-1,d6
000083D8 6100 0000                  			bsr.w	DrawBlocks_LR_3
000083DC                            	locj_6D88:
000083DC                            
000083DC 0892 0005                  			bclr	#5,(a2)
000083E0 6700                       			beq.s	locret_69F2
000083E2                            			; Draw entire row at the bottom
000083E2 383C 00E0                  			move.w	#224,d4
000083E6 7A00                       			moveq	#0,d5
000083E8 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
000083EC 383C 00E0                  			move.w	#224,d4
000083F0 7A00                       			moveq	#0,d5
000083F2 7C1F                       			moveq	#(512/16)-1,d6
000083F4 6100 0000                  			bsr.w	DrawBlocks_LR_3
000083F8                            
000083F8                            locret_69F2:
000083F8 4E75                       		rts	
000083FA                            ; End of function DrawBGScrollBlock1
000083FA                            
000083FA                            
000083FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000083FA                            
000083FA                            ; Essentially, this draws everything that isn't scroll block 1
000083FA                            ; sub_69F4:
000083FA                            DrawBGScrollBlock2:
000083FA                            
000083FA 4A12                       			tst.b	(a2)
000083FC 6700 0000                  			beq.w	locj_6DF2
00008400 0C38 0005 FE10             			cmpi.b	#id_SBZ,(v_zone).w
00008406 6700 0000                  			beq.w	Draw_SBz
0000840A 0892 0000                  			bclr	#0,(a2)
0000840E 6700                       			beq.s	locj_6DD2
00008410                            			; Draw new tiles on the left
00008410 383C 0070                  			move.w	#224/2,d4	; Draw the bottom half of the screen
00008414 7AF0                       			moveq	#-16,d5
00008416 6100 0000                  			bsr.w	Calc_VRAM_Pos
0000841A 383C 0070                  			move.w	#224/2,d4
0000841E 7AF0                       			moveq	#-16,d5
00008420 7C02                       			moveq	#3-1,d6		; Draw three rows... could this be a repurposed version of the above unused code?
00008422 6100 0000                  			bsr.w	DrawBlocks_TB_2
00008426                            	locj_6DD2:
00008426 0892 0001                  			bclr	#1,(a2)
0000842A 6700                       			beq.s	locj_6DF2
0000842C                            			; Draw new tiles on the right
0000842C 383C 0070                  			move.w	#224/2,d4
00008430 3A3C 0140                  			move.w	#320,d5
00008434 6100 0000                  			bsr.w	Calc_VRAM_Pos
00008438 383C 0070                  			move.w	#224/2,d4
0000843C 3A3C 0140                  			move.w	#320,d5
00008440 7C02                       			moveq	#3-1,d6
00008442 6100 0000                  			bsr.w	DrawBlocks_TB_2
00008446                            	locj_6DF2:
00008446 4E75                       			rts
00008448                            ;===============================================================================
00008448                            	locj_6DF4:
00008448 0000 0000 0006 0606 0606+  			dc.b $00,$00,$00,$00,$00,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$04
00008458 0404 0404 0404 0202 0202+  			dc.b $04,$04,$04,$04,$04,$04,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00008468 0200                       			dc.b $02,$00						
0000846A                            ;===============================================================================
0000846A                            	Draw_SBz:
0000846A 78F0                       			moveq	#-16,d4
0000846C 0892 0000                  			bclr	#0,(a2)
00008470 6600                       			bne.s	locj_6E28
00008472 0892 0001                  			bclr	#1,(a2)
00008476 6700                       			beq.s	locj_6E72
00008478 383C 00E0                  			move.w	#224,d4
0000847C                            	locj_6E28:
0000847C 41F9 0000 8449             			lea	(locj_6DF4+1).l,a0
00008482 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008486 D044                       			add.w	d4,d0
00008488 0240 01F0                  			andi.w	#$1F0,d0
0000848C E848                       			lsr.w	#4,d0
0000848E 1030 0000                  			move.b	(a0,d0.w),d0
00008492 47F9 0000 0000             			lea	(locj_6FE4).l,a3
00008498 3673 0000                  			movea.w	(a3,d0.w),a3
0000849C 6700                       			beq.s	locj_6E5E
0000849E 7AF0                       			moveq	#-16,d5
000084A0 48E7 0C00                  			movem.l	d4/d5,-(sp)
000084A4 6100 0000                  			bsr.w	Calc_VRAM_Pos
000084A8 4CDF 0030                  			movem.l	(sp)+,d4/d5
000084AC 6100 0000                  			bsr.w	DrawBlocks_LR
000084B0 6000                       			bra.s	locj_6E72
000084B2                            ;===============================================================================
000084B2                            	locj_6E5E:
000084B2 7A00                       			moveq	#0,d5
000084B4 48E7 0C00                  			movem.l	d4/d5,-(sp)
000084B8 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
000084BC 4CDF 0030                  			movem.l	(sp)+,d4/d5
000084C0 7C1F                       			moveq	#(512/16)-1,d6
000084C2 6100 0000                  			bsr.w	DrawBlocks_LR_3
000084C6                            	locj_6E72:
000084C6 4A12                       			tst.b	(a2)
000084C8 6600                       			bne.s	locj_6E78
000084CA 4E75                       			rts
000084CC                            ;===============================================================================			
000084CC                            	locj_6E78:
000084CC 78F0                       			moveq	#-16,d4
000084CE 7AF0                       			moveq	#-16,d5
000084D0 1012                       			move.b	(a2),d0
000084D2 0200 00A8                  			andi.b	#$A8,d0
000084D6 6700                       			beq.s	locj_6E8C
000084D8 E208                       			lsr.b	#1,d0
000084DA 1480                       			move.b	d0,(a2)
000084DC 3A3C 0140                  			move.w	#320,d5
000084E0                            	locj_6E8C:
000084E0 41F9 0000 8448             			lea	(locj_6DF4).l,a0
000084E6 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
000084EA 0240 01F0                  			andi.w	#$1F0,d0
000084EE E848                       			lsr.w	#4,d0
000084F0 41F0 0000                  			lea	(a0,d0.w),a0
000084F4 6000 0000                  			bra.w	locj_6FEC						
000084F8                            ;===============================================================================
000084F8                            
000084F8                            
000084F8                            	; locj_6EA4:
000084F8                            	DrawBGScrollBlock3:
000084F8 4A12                       			tst.b	(a2)
000084FA 6700 0000                  			beq.w	locj_6EF0
000084FE 0C38 0002 FE10             			cmpi.b	#id_MZ,(v_zone).w
00008504 6700 0000                  			beq.w	Draw_Mz
00008508 0892 0000                  			bclr	#0,(a2)
0000850C 6700                       			beq.s	locj_6ED0
0000850E                            			; Draw new tiles on the left
0000850E 383C 0040                  			move.w	#$40,d4
00008512 7AF0                       			moveq	#-16,d5
00008514 6100 0000                  			bsr.w	Calc_VRAM_Pos
00008518 383C 0040                  			move.w	#$40,d4
0000851C 7AF0                       			moveq	#-16,d5
0000851E 7C02                       			moveq	#3-1,d6
00008520 6100 0000                  			bsr.w	DrawBlocks_TB_2
00008524                            	locj_6ED0:
00008524 0892 0001                  			bclr	#1,(a2)
00008528 6700                       			beq.s	locj_6EF0
0000852A                            			; Draw new tiles on the right
0000852A 383C 0040                  			move.w	#$40,d4
0000852E 3A3C 0140                  			move.w	#320,d5
00008532 6100 0000                  			bsr.w	Calc_VRAM_Pos
00008536 383C 0040                  			move.w	#$40,d4
0000853A 3A3C 0140                  			move.w	#320,d5
0000853E 7C02                       			moveq	#3-1,d6
00008540 6100 0000                  			bsr.w	DrawBlocks_TB_2
00008544                            	locj_6EF0:
00008544 4E75                       			rts
00008546                            	locj_6EF2:
00008546 0000 0000 0000 0606 0404+  			dc.b $00,$00,$00,$00,$00,$00,$06,$06,$04,$04,$04,$04,$04,$04,$04,$04
00008556 0402 0202 0202 0202 0202+  			dc.b $04,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00008566 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00008576 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00008586 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00008596 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
000085A6 0200                       			dc.b $02,$00
000085A8                            ;===============================================================================
000085A8                            	Draw_Mz:
000085A8 78F0                       			moveq	#-16,d4
000085AA 0892 0000                  			bclr	#0,(a2)
000085AE 6600                       			bne.s	locj_6F66
000085B0 0892 0001                  			bclr	#1,(a2)
000085B4 6700                       			beq.s	locj_6FAE
000085B6 383C 00E0                  			move.w	#224,d4
000085BA                            	locj_6F66:
000085BA 41F9 0000 8547             			lea	(locj_6EF2+1).l,a0
000085C0 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
000085C4 0440 0200                  			subi.w	#$200,d0
000085C8 D044                       			add.w	d4,d0
000085CA 0240 07F0                  			andi.w	#$7F0,d0
000085CE E848                       			lsr.w	#4,d0
000085D0 1030 0000                  			move.b	(a0,d0.w),d0
000085D4 367B 0000                  			movea.w	locj_6FE4(pc,d0.w),a3
000085D8 6700                       			beq.s	locj_6F9A
000085DA 7AF0                       			moveq	#-16,d5
000085DC 48E7 0C00                  			movem.l	d4/d5,-(sp)
000085E0 6100 0000                  			bsr.w	Calc_VRAM_Pos
000085E4 4CDF 0030                  			movem.l	(sp)+,d4/d5
000085E8 6100 0000                  			bsr.w	DrawBlocks_LR
000085EC 6000                       			bra.s	locj_6FAE
000085EE                            ;===============================================================================
000085EE                            	locj_6F9A:
000085EE 7A00                       			moveq	#0,d5
000085F0 48E7 0C00                  			movem.l	d4/d5,-(sp)
000085F4 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
000085F8 4CDF 0030                  			movem.l	(sp)+,d4/d5
000085FC 7C1F                       			moveq	#(512/16)-1,d6
000085FE 6100 0000                  			bsr.w	DrawBlocks_LR_3
00008602                            	locj_6FAE:
00008602 4A12                       			tst.b	(a2)
00008604 6600                       			bne.s	locj_6FB4
00008606 4E75                       			rts
00008608                            ;===============================================================================			
00008608                            	locj_6FB4:
00008608 78F0                       			moveq	#-16,d4
0000860A 7AF0                       			moveq	#-16,d5
0000860C 1012                       			move.b	(a2),d0
0000860E 0200 00A8                  			andi.b	#$A8,d0
00008612 6700                       			beq.s	locj_6FC8
00008614 E208                       			lsr.b	#1,d0
00008616 1480                       			move.b	d0,(a2)
00008618 3A3C 0140                  			move.w	#320,d5
0000861C                            	locj_6FC8:
0000861C 41F9 0000 8546             			lea	(locj_6EF2).l,a0
00008622 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008626 0440 0200                  			subi.w	#$200,d0
0000862A 0240 07F0                  			andi.w	#$7F0,d0
0000862E E848                       			lsr.w	#4,d0
00008630 41F0 0000                  			lea	(a0,d0.w),a0
00008634 6000 0000                  			bra.w	locj_6FEC
00008638                            ;===============================================================================			
00008638                            	locj_6FE4:
00008638 FF18 FF18 FF20 FF28        			dc.w v_bgscreenposx_dup, v_bgscreenposx_dup, v_bg2screenposx_dup, v_bg3screenposx_dup
00008640                            	locj_6FEC:
00008640 7C0F                       			moveq	#((224+16+16)/16)-1,d6
00008642 2E3C 0080 0000             			move.l	#$800000,d7
00008648                            	locj_6FF4:			
00008648 7000                       			moveq	#0,d0
0000864A 1018                       			move.b	(a0)+,d0
0000864C 0112                       			btst	d0,(a2)
0000864E 6700                       			beq.s	locj_701C
00008650 367B 00E6                  			move.w	locj_6FE4(pc,d0.w),a3
00008654 48E7 0C80                  			movem.l	d4/d5/a0,-(sp)
00008658 48E7 0C00                  			movem.l	d4/d5,-(sp)
0000865C 6100 0000                  			bsr.w	GetBlockData
00008660 4CDF 0030                  			movem.l	(sp)+,d4/d5
00008664 6100 0000                  			bsr.w	Calc_VRAM_Pos
00008668 6100 0000                  			bsr.w	DrawBlock
0000866C 4CDF 0130                  			movem.l	(sp)+,d4/d5/a0
00008670                            	locj_701C:
00008670 0644 0010                  			addi.w	#16,d4
00008674 51CE FFD2                  			dbf	d6,locj_6FF4
00008678 4212                       			clr.b	(a2)
0000867A 4E75                       			rts			
0000867C                            
0000867C                            
0000867C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000867C                            
0000867C                            ; Don't be fooled by the name: this function's for drawing from left to right
0000867C                            ; when the camera's moving up or down
0000867C                            ; DrawTiles_LR:
0000867C                            DrawBlocks_LR:
0000867C 7C15                       		moveq	#((320+16+16)/16)-1,d6	; Draw the entire width of the screen + two extra columns
0000867E                            ; DrawTiles_LR_2:
0000867E                            DrawBlocks_LR_2:
0000867E 2E3C 0080 0000             		move.l	#$800000,d7	; Delta between rows of tiles
00008684 2200                       		move.l	d0,d1
00008686                            
00008686                            	@loop:
00008686 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000868A 6100 0000                  		bsr.w	GetBlockData
0000868E 2001                       		move.l	d1,d0
00008690 6100 0000                  		bsr.w	DrawBlock
00008694 5801                       		addq.b	#4,d1		; Two tiles ahead
00008696 0201 007F                  		andi.b	#$7F,d1		; Wrap around row
0000869A 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000869E 0645 0010                  		addi.w	#16,d5		; Move X coordinate one block ahead
000086A2 51CE FFE2                  		dbf	d6,@loop
000086A6 4E75                       		rts
000086A8                            ; End of function DrawBlocks_LR
000086A8                            
000086A8                            ; DrawTiles_LR_3:
000086A8                            DrawBlocks_LR_3:
000086A8 2E3C 0080 0000             		move.l	#$800000,d7
000086AE 2200                       		move.l	d0,d1
000086B0                            
000086B0                            	@loop:
000086B0 48E7 0C00                  		movem.l	d4-d5,-(sp)
000086B4 6100 0000                  		bsr.w	GetBlockData_2
000086B8 2001                       		move.l	d1,d0
000086BA 6100 0000                  		bsr.w	DrawBlock
000086BE 5801                       		addq.b	#4,d1
000086C0 0201 007F                  		andi.b	#$7F,d1
000086C4 4CDF 0030                  		movem.l	(sp)+,d4-d5
000086C8 0645 0010                  		addi.w	#16,d5
000086CC 51CE FFE2                  		dbf	d6,@loop
000086D0 4E75                       		rts	
000086D2                            ; End of function DrawBlocks_LR_3
000086D2                            
000086D2                            
000086D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000086D2                            
000086D2                            ; Don't be fooled by the name: this function's for drawing from top to bottom
000086D2                            ; when the camera's moving left or right
000086D2                            ; DrawTiles_TB:
000086D2                            DrawBlocks_TB:
000086D2 7C0F                       		moveq	#((224+16+16)/16)-1,d6	; Draw the entire height of the screen + two extra rows
000086D4                            ; DrawTiles_TB_2:
000086D4                            DrawBlocks_TB_2:
000086D4 2E3C 0080 0000             		move.l	#$800000,d7	; Delta between rows of tiles
000086DA 2200                       		move.l	d0,d1
000086DC                            
000086DC                            	@loop:
000086DC 48E7 0C00                  		movem.l	d4-d5,-(sp)
000086E0 6100 0000                  		bsr.w	GetBlockData
000086E4 2001                       		move.l	d1,d0
000086E6 6100 0000                  		bsr.w	DrawBlock
000086EA 0641 0100                  		addi.w	#$100,d1	; Two rows ahead
000086EE 0241 0FFF                  		andi.w	#$FFF,d1	; Wrap around plane
000086F2 4CDF 0030                  		movem.l	(sp)+,d4-d5
000086F6 0644 0010                  		addi.w	#16,d4		; Move X coordinate one block ahead
000086FA 51CE FFE0                  		dbf	d6,@loop
000086FE 4E75                       		rts	
00008700                            ; End of function DrawBlocks_TB_2
00008700                            
00008700                            
00008700                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008700                            
00008700                            ; Draws a block's worth of tiles
00008700                            ; Parameters:
00008700                            ; a0 = Pointer to block metadata (block index and X/Y flip)
00008700                            ; a1 = Pointer to block
00008700                            ; a5 = Pointer to VDP command port
00008700                            ; a6 = Pointer to VDP data port
00008700                            ; d0 = VRAM command to access plane
00008700                            ; d2 = VRAM plane A/B specifier
00008700                            ; d7 = Plane row delta
00008700                            ; DrawTiles:
00008700                            DrawBlock:
00008700 8042                       		or.w	d2,d0	; OR in that plane A/B specifier to the VRAM command
00008702 4840                       		swap	d0
00008704 0810 0004                  		btst	#4,(a0)	; Check Y-flip bit
00008708 6600                       		bne.s	DrawFlipY
0000870A 0810 0003                  		btst	#3,(a0)	; Check X-flip bit
0000870E 6600                       		bne.s	DrawFlipX
00008710 2A80                       		move.l	d0,(a5)
00008712 2C99                       		move.l	(a1)+,(a6)	; Write top two tiles
00008714 D087                       		add.l	d7,d0		; Next row
00008716 2A80                       		move.l	d0,(a5)
00008718 2C99                       		move.l	(a1)+,(a6)	; Write bottom two tiles
0000871A 4E75                       		rts	
0000871C                            ; ===========================================================================
0000871C                            
0000871C                            DrawFlipX:
0000871C 2A80                       		move.l	d0,(a5)
0000871E 2819                       		move.l	(a1)+,d4
00008720 0A84 0800 0800             		eori.l	#$8000800,d4	; Invert X-flip bits of each tile
00008726 4844                       		swap	d4		; Swap the tiles around
00008728 2C84                       		move.l	d4,(a6)		; Write top two tiles
0000872A D087                       		add.l	d7,d0		; Next row
0000872C 2A80                       		move.l	d0,(a5)
0000872E 2819                       		move.l	(a1)+,d4
00008730 0A84 0800 0800             		eori.l	#$8000800,d4
00008736 4844                       		swap	d4
00008738 2C84                       		move.l	d4,(a6)		; Write bottom two tiles
0000873A 4E75                       		rts	
0000873C                            ; ===========================================================================
0000873C                            
0000873C                            DrawFlipY:
0000873C 0810 0003                  		btst	#3,(a0)
00008740 6600                       		bne.s	DrawFlipXY
00008742 2A80                       		move.l	d0,(a5)
00008744 2A19                       		move.l	(a1)+,d5
00008746 2819                       		move.l	(a1)+,d4
00008748 0A84 1000 1000             		eori.l	#$10001000,d4
0000874E 2C84                       		move.l	d4,(a6)
00008750 D087                       		add.l	d7,d0
00008752 2A80                       		move.l	d0,(a5)
00008754 0A85 1000 1000             		eori.l	#$10001000,d5
0000875A 2C85                       		move.l	d5,(a6)
0000875C 4E75                       		rts	
0000875E                            ; ===========================================================================
0000875E                            
0000875E                            DrawFlipXY:
0000875E 2A80                       		move.l	d0,(a5)
00008760 2A19                       		move.l	(a1)+,d5
00008762 2819                       		move.l	(a1)+,d4
00008764 0A84 1800 1800             		eori.l	#$18001800,d4
0000876A 4844                       		swap	d4
0000876C 2C84                       		move.l	d4,(a6)
0000876E D087                       		add.l	d7,d0
00008770 2A80                       		move.l	d0,(a5)
00008772 0A85 1800 1800             		eori.l	#$18001800,d5
00008778 4845                       		swap	d5
0000877A 2C85                       		move.l	d5,(a6)
0000877C 4E75                       		rts	
0000877E                            ; End of function DrawBlocks
0000877E                            
0000877E                            ; ===========================================================================
0000877E                            ; unused garbage
0000877E                            
0000877E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000877E                            
0000877E                            ; Gets address of block at a certain coordinate
0000877E                            ; Parameters:
0000877E                            ; a4 = Pointer to level layout
0000877E                            ; d4 = Relative Y coordinate
0000877E                            ; d5 = Relative X coordinate
0000877E                            ; Returns:
0000877E                            ; a0 = Address of block metadata
0000877E                            ; a1 = Address of block
0000877E                            ; DrawBlocks:
0000877E                            GetBlockData:
0000877E DA53                       			add.w	(a3),d5
00008780                            	GetBlockData_2:
00008780 D86B 0004                  			add.w	4(a3),d4
00008784 43F8 B000                  			lea	(v_16x16).w,a1
00008788                            		; Turn Y coordinate into index into level layout
00008788 3604                       		move.w	d4,d3
0000878A E24B                       		lsr.w	#1,d3
0000878C 0243 0380                  		andi.w	#$380,d3
00008790                            		; Turn X coordinate into index into level layout
00008790 E64D                       		lsr.w	#3,d5
00008792 3005                       		move.w	d5,d0
00008794 EA48                       		lsr.w	#5,d0
00008796 0240 007F                  		andi.w	#$7F,d0
0000879A                            		; Get chunk from level layout
0000879A D043                       		add.w	d3,d0
0000879C 76FF                       		moveq	#-1,d3
0000879E 1634 0000                  		move.b	(a4,d0.w),d3
000087A2 6700                       		beq.s	locret_6C1E	; If chunk 00, just return a pointer to the first block (expected to be empty)
000087A4                            		; Turn chunk ID into index into chunk table
000087A4 5303                       		subq.b	#1,d3
000087A6 0243 007F                  		andi.w	#$7F,d3
000087AA EE5B                       		ror.w	#7,d3
000087AC                            		; Turn Y coordinate into index into chunk
000087AC D844                       		add.w	d4,d4
000087AE 0244 01E0                  		andi.w	#$1E0,d4
000087B2                            		; Turn X coordinate into index into chunk
000087B2 0245 001E                  		andi.w	#$1E,d5
000087B6                            		; Get block metadata from chunk
000087B6 D644                       		add.w	d4,d3
000087B8 D645                       		add.w	d5,d3
000087BA 2043                       		movea.l	d3,a0
000087BC 3610                       		move.w	(a0),d3
000087BE                            		; Turn block ID into address
000087BE 0243 03FF                  		andi.w	#$3FF,d3
000087C2 E74B                       		lsl.w	#3,d3
000087C4 D2C3                       		adda.w	d3,a1
000087C6                            
000087C6                            locret_6C1E:
000087C6 4E75                       		rts	
000087C8                            ; End of function GetBlockData
000087C8                            
000087C8                            
000087C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000087C8                            
000087C8                            ; Produces a VRAM plane access command from coordinates
000087C8                            ; Parameters:
000087C8                            ; d4 = Relative Y coordinate
000087C8                            ; d5 = Relative X coordinate
000087C8                            ; Returns VDP command in d0
000087C8                            Calc_VRAM_Pos:
000087C8 DA53                       			add.w	(a3),d5
000087CA                            	Calc_VRAM_Pos_2:
000087CA D86B 0004                  			add.w	4(a3),d4
000087CE                            		; Floor the coordinates to the nearest pair of tiles (the size of a block).
000087CE                            		; Also note that this wraps the value to the size of the plane:
000087CE                            		; The plane is 64*8 wide, so wrap at $100, and it's 32*8 tall, so wrap at $200
000087CE 0244 00F0                  		andi.w	#$F0,d4
000087D2 0245 01F0                  		andi.w	#$1F0,d5
000087D6                            		; Transform the adjusted coordinates into a VDP command
000087D6 E94C                       		lsl.w	#4,d4
000087D8 E44D                       		lsr.w	#2,d5
000087DA D845                       		add.w	d5,d4
000087DC 7003                       		moveq	#3,d0	; Highest bits of plane VRAM address
000087DE 4840                       		swap	d0
000087E0 3004                       		move.w	d4,d0
000087E2 4E75                       		rts	
000087E4                            ; End of function Calc_VRAM_Pos
000087E4                            
000087E4                            
000087E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000087E4                            ; not used
000087E4                            
000087E4                            ; This is just like Calc_VRAM_Pos, but seemingly for an earlier
000087E4                            ; VRAM layout: the only difference is the high bits of the
000087E4                            ; plane's VRAM address, which are 10 instead of 11.
000087E4                            ; Both the foreground and background are at $C000 and $E000
000087E4                            ; respectively, so this one starting at $8000 makes no sense.
000087E4                            ; sub_6C3C:
000087E4                            Calc_VRAM_Pos_Unknown:
000087E4 D86B 0004                  		add.w	4(a3),d4
000087E8 DA53                       		add.w	(a3),d5
000087EA 0244 00F0                  		andi.w	#$F0,d4
000087EE 0245 01F0                  		andi.w	#$1F0,d5
000087F2 E94C                       		lsl.w	#4,d4
000087F4 E44D                       		lsr.w	#2,d5
000087F6 D845                       		add.w	d5,d4
000087F8 7002                       		moveq	#2,d0
000087FA 4840                       		swap	d0
000087FC 3004                       		move.w	d4,d0
000087FE 4E75                       		rts	
00008800                            ; End of function Calc_VRAM_Pos_Unknown
00008800                            
00008800                            ; ---------------------------------------------------------------------------
00008800                            ; Subroutine to	load tiles as soon as the level	appears
00008800                            ; ---------------------------------------------------------------------------
00008800                            
00008800                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008800                            
00008800                            
00008800                            LoadTilesFromStart:
00008800 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00008806 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0000880C 47F8 F700                  		lea	(v_screenposx).w,a3
00008810 49F8 A400                  		lea	(v_lvllayout).w,a4
00008814 343C 4000                  		move.w	#$4000,d2
00008818 6100                       		bsr.s	DrawChunks
0000881A 47F8 F708                  		lea	(v_bgscreenposx).w,a3
0000881E 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
00008822 343C 6000                  		move.w	#$6000,d2
00008826 4A38 FE10                  			tst.b	(v_zone).w
0000882A 6700 0000                  			beq.w	Draw_GHz_Bg
0000882E 0C38 0002 FE10             			cmpi.b	#id_MZ,(v_zone).w
00008834 6700 0000                  			beq.w	Draw_Mz_Bg
00008838 0C78 0500 FE10             			cmpi.w	#(id_SBZ<<8)+0,(v_zone).w
0000883E 6700 0000                  			beq.w	Draw_SBz_Bg
00008842 0C38 0006 FE10             			cmpi.b	#id_EndZ,(v_zone).w
00008848 6700 0000                  			beq.w	Draw_GHz_Bg
0000884C                            ; End of function LoadTilesFromStart
0000884C                            
0000884C                            
0000884C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000884C                            
0000884C                            
0000884C                            DrawChunks:
0000884C 78F0                       		moveq	#-16,d4
0000884E 7C0F                       		moveq	#((224+16+16)/16)-1,d6
00008850                            
00008850                            	@loop:
00008850 48E7 0E00                  		movem.l	d4-d6,-(sp)
00008854 7A00                       		moveq	#0,d5
00008856 3204                       		move.w	d4,d1
00008858 6100 FF6E                  		bsr.w	Calc_VRAM_Pos
0000885C 3801                       		move.w	d1,d4
0000885E 7A00                       		moveq	#0,d5
00008860 7C1F                       		moveq	#(512/16)-1,d6
00008862 6100 FE1A                  		bsr.w	DrawBlocks_LR_2
00008866 4CDF 0070                  		movem.l	(sp)+,d4-d6
0000886A 0644 0010                  		addi.w	#16,d4
0000886E 51CE FFE0                  		dbf	d6,@loop
00008872 4E75                       		rts	
00008874                            ; End of function DrawChunks
00008874                            
00008874                            	Draw_GHz_Bg:
00008874 7800                       			moveq	#0,d4
00008876 7C0F                       			moveq	#((224+16+16)/16)-1,d6
00008878                            	locj_7224:			
00008878 48E7 0E00                  			movem.l	d4-d6,-(sp)
0000887C 41F9 0000 0000             			lea	(locj_724a),a0
00008882 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008886 D044                       			add.w	d4,d0
00008888 0240 00F0                  			andi.w	#$F0,d0
0000888C 6100 0000                  			bsr.w	locj_72Ba
00008890 4CDF 0070                  			movem.l	(sp)+,d4-d6
00008894 0644 0010                  			addi.w	#16,d4
00008898 51CE FFDE                  			dbf	d6,locj_7224
0000889C 4E75                       			rts
0000889E                            	locj_724a:
0000889E 0000 0000 0606 0604 0404+  			dc.b $00,$00,$00,$00,$06,$06,$06,$04,$04,$04,$00,$00,$00,$00,$00,$00
000088AE                            ;-------------------------------------------------------------------------------
000088AE                            	Draw_Mz_Bg:;locj_725a:
000088AE 78F0                       			moveq	#-16,d4
000088B0 7C0F                       			moveq	#((224+16+16)/16)-1,d6
000088B2                            	locj_725E:			
000088B2 48E7 0E00                  			movem.l	d4-d6,-(sp)
000088B6 41FA FC8F                  			lea	(locj_6EF2+1),a0
000088BA 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
000088BE 0440 0200                  			subi.w	#$200,d0
000088C2 D044                       			add.w	d4,d0
000088C4 0240 07F0                  			andi.w	#$7F0,d0
000088C8 6100 0000                  			bsr.w	locj_72Ba
000088CC 4CDF 0070                  			movem.l	(sp)+,d4-d6
000088D0 0644 0010                  			addi.w	#16,d4
000088D4 51CE FFDC                  			dbf	d6,locj_725E
000088D8 4E75                       			rts
000088DA                            ;-------------------------------------------------------------------------------
000088DA                            	Draw_SBz_Bg:;locj_7288:
000088DA 78F0                       			moveq	#-16,d4
000088DC 7C0F                       			moveq	#((224+16+16)/16)-1,d6
000088DE                            	locj_728C:			
000088DE 48E7 0E00                  			movem.l	d4-d6,-(sp)
000088E2 41FA FB65                  			lea	(locj_6DF4+1),a0
000088E6 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
000088EA D044                       			add.w	d4,d0
000088EC 0240 01F0                  			andi.w	#$1F0,d0
000088F0 6100 0000                  			bsr.w	locj_72Ba
000088F4 4CDF 0070                  			movem.l	(sp)+,d4-d6
000088F8 0644 0010                  			addi.w	#16,d4
000088FC 51CE FFE0                  			dbf	d6,locj_728C
00008900 4E75                       			rts
00008902                            ;-------------------------------------------------------------------------------
00008902                            	locj_72B2:
00008902 F708 F708 F710 F718        			dc.w v_bgscreenposx, v_bgscreenposx, v_bg2screenposx, v_bg3screenposx
0000890A                            	locj_72Ba:
0000890A E848                       			lsr.w	#4,d0
0000890C 1030 0000                  			move.b	(a0,d0.w),d0
00008910 367B 00F0                  			movea.w	locj_72B2(pc,d0.w),a3
00008914 6700                       			beq.s	locj_72da
00008916 7AF0                       			moveq	#-16,d5
00008918 48E7 0C00                  			movem.l	d4/d5,-(sp)
0000891C 6100 FEAA                  			bsr.w	Calc_VRAM_Pos
00008920 4CDF 0030                  			movem.l	(sp)+,d4/d5
00008924 6100 FD56                  			bsr.w	DrawBlocks_LR
00008928 6000                       			bra.s	locj_72EE
0000892A                            	locj_72da:
0000892A 7A00                       			moveq	#0,d5
0000892C 48E7 0C00                  			movem.l	d4/d5,-(sp)
00008930 6100 FE98                  			bsr.w	Calc_VRAM_Pos_2
00008934 4CDF 0030                  			movem.l	(sp)+,d4/d5
00008938 7C1F                       			moveq	#(512/16)-1,d6
0000893A 6100 FD6C                  			bsr.w	DrawBlocks_LR_3
0000893E                            	locj_72EE:
0000893E 4E75                       			rts
00008940                            
00008940                            ; ---------------------------------------------------------------------------
00008940                            ; Subroutine to load basic level data
00008940                            ; ---------------------------------------------------------------------------
00008940                            
00008940                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008940                            
00008940                            
00008940                            LevelDataLoad:
00008940 7000                       		moveq	#0,d0
00008942 1038 FE10                  		move.b	(v_zone).w,d0
00008946 E948                       		lsl.w	#4,d0
00008948 45F9 0000 0000             		lea	(LevelHeaders).l,a2
0000894E 45F2 0000                  		lea	(a2,d0.w),a2
00008952 2F0A                       		move.l	a2,-(sp)
00008954 588A                       		addq.l	#4,a2
00008956 205A                       		movea.l	(a2)+,a0
00008958 43F8 B000                  		lea	(v_16x16).w,a1	; RAM address for 16x16 mappings
0000895C 303C 0000                  		move.w	#0,d0
00008960 6100 8F26                  		bsr.w	EniDec
00008964 205A                       		movea.l	(a2)+,a0
00008966 43F9 00FF 0000             		lea	(v_256x256).l,a1 ; RAM address for 256x256 mappings
0000896C 6100 9098                  		bsr.w	KosDec
00008970 6100 0000                  		bsr.w	LevelLayoutLoad
00008974 301A                       		move.w	(a2)+,d0
00008976 3012                       		move.w	(a2),d0
00008978 0240 00FF                  		andi.w	#$FF,d0
0000897C 0C78 0103 FE10             		cmpi.w	#(id_LZ<<8)+3,(v_zone).w ; is level SBZ3 (LZ4) ?
00008982 6600                       		bne.s	@notSBZ3	; if not, branch
00008984 700C                       		moveq	#palid_SBZ3,d0	; use SB3 palette
00008986                            
00008986                            	@notSBZ3:
00008986 0C78 0501 FE10             		cmpi.w	#(id_SBZ<<8)+1,(v_zone).w ; is level SBZ2?
0000898C 6700                       		beq.s	@isSBZorFZ	; if yes, branch
0000898E 0C78 0502 FE10             		cmpi.w	#(id_SBZ<<8)+2,(v_zone).w ; is level FZ?
00008994 6600                       		bne.s	@normalpal	; if not, branch
00008996                            
00008996                            	@isSBZorFZ:
00008996 700E                       		moveq	#palid_SBZ2,d0	; use SBZ2/FZ palette
00008998                            
00008998                            	@normalpal:
00008998 6100 9A92                  		bsr.w	PalLoad1	; load palette (based on d0)
0000899C 245F                       		movea.l	(sp)+,a2
0000899E 584A                       		addq.w	#4,a2		; read number for 2nd PLC
000089A0 7000                       		moveq	#0,d0
000089A2 1012                       		move.b	(a2),d0
000089A4 6700                       		beq.s	@skipPLC	; if 2nd PLC is 0 (i.e. the ending sequence), branch
000089A6 6100 8D42                  		bsr.w	AddPLC		; load pattern load cues
000089AA                            
000089AA                            	@skipPLC:
000089AA 4E75                       		rts	
000089AC                            ; End of function LevelDataLoad
000089AC                            
000089AC                            ; ---------------------------------------------------------------------------
000089AC                            ; Level	layout loading subroutine
000089AC                            ; ---------------------------------------------------------------------------
000089AC                            
000089AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000089AC                            
000089AC                            
000089AC                            LevelLayoutLoad:
000089AC 47F8 A400                  		lea	(v_lvllayout).w,a3
000089B0 323C 01FF                  		move.w	#$1FF,d1
000089B4 7000                       		moveq	#0,d0
000089B6                            
000089B6                            LevLoad_ClrRam:
000089B6 26C0                       		move.l	d0,(a3)+
000089B8 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($A400-A7FF)
000089BC                            
000089BC 47F8 A400                  		lea	(v_lvllayout).w,a3 ; RAM address for level layout
000089C0 7200                       		moveq	#0,d1
000089C2 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
000089C6 47F8 A440                  		lea	(v_lvllayout+$40).w,a3 ; RAM address for background layout
000089CA 7202                       		moveq	#2,d1
000089CC                            ; End of function LevelLayoutLoad
000089CC                            
000089CC                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
000089CC                            
000089CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000089CC                            
000089CC                            
000089CC                            LevelLayoutLoad2:
000089CC 3038 FE10                  		move.w	(v_zone).w,d0
000089D0 ED08                       		lsl.b	#6,d0
000089D2 EA48                       		lsr.w	#5,d0
000089D4 3400                       		move.w	d0,d2
000089D6 D040                       		add.w	d0,d0
000089D8 D042                       		add.w	d2,d0
000089DA D041                       		add.w	d1,d0
000089DC 43F9 0000 0000             		lea	(Level_Index).l,a1
000089E2 3031 0000                  		move.w	(a1,d0.w),d0
000089E6 43F1 0000                  		lea	(a1,d0.w),a1
000089EA 7200                       		moveq	#0,d1
000089EC 3401                       		move.w	d1,d2
000089EE 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
000089F0 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
000089F2                            
000089F2                            LevLoad_NumRows:
000089F2 3001                       		move.w	d1,d0
000089F4 204B                       		movea.l	a3,a0
000089F6                            
000089F6                            LevLoad_Row:
000089F6 10D9                       		move.b	(a1)+,(a0)+
000089F8 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
000089FC 47EB 0080                  		lea	$80(a3),a3	; do next row
00008A00 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
00008A04 4E75                       		rts	
00008A06                            ; End of function LevelLayoutLoad2
00008A06                            
00008A06                            		include	"_inc\DynamicLevelEvents.asm"
00008A06                            ; ---------------------------------------------------------------------------
00008A06                            ; Dynamic level events
00008A06                            ; ---------------------------------------------------------------------------
00008A06                            
00008A06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008A06                            
00008A06                            
00008A06                            DynamicLevelEvents:
00008A06 7000                       		moveq	#0,d0
00008A08 1038 FE10                  		move.b	(v_zone).w,d0
00008A0C D040                       		add.w	d0,d0
00008A0E 303B 0000                  		move.w	DLE_Index(pc,d0.w),d0
00008A12 4EBB 0000                  		jsr	DLE_Index(pc,d0.w) ; run level-specific events
00008A16 7202                       		moveq	#2,d1
00008A18 3038 F726                  		move.w	(v_limitbtm1).w,d0
00008A1C 9078 F72E                  		sub.w	(v_limitbtm2).w,d0 ; has lower level boundary changed recently?
00008A20 6700                       		beq.s	DLE_NoChg	; if not, branch
00008A22 6400                       		bcc.s	loc_6DAC
00008A24                            
00008A24 4441                       		neg.w	d1
00008A26 3038 F704                  		move.w	(v_screenposy).w,d0
00008A2A B078 F726                  		cmp.w	(v_limitbtm1).w,d0
00008A2E 6300                       		bls.s	loc_6DA0
00008A30 31C0 F72E                  		move.w	d0,(v_limitbtm2).w
00008A34 0278 FFFE F72E             		andi.w	#$FFFE,(v_limitbtm2).w
00008A3A                            
00008A3A                            loc_6DA0:
00008A3A D378 F72E                  		add.w	d1,(v_limitbtm2).w
00008A3E 11FC 0001 F75C             		move.b	#1,(f_bgscrollvert).w
00008A44                            
00008A44                            DLE_NoChg:
00008A44 4E75                       		rts	
00008A46                            ; ===========================================================================
00008A46                            
00008A46                            loc_6DAC:
00008A46 3038 F704                  		move.w	(v_screenposy).w,d0
00008A4A 5040                       		addq.w	#8,d0
00008A4C B078 F72E                  		cmp.w	(v_limitbtm2).w,d0
00008A50 6500                       		bcs.s	loc_6DC4
00008A52 0838 0001 D022             		btst	#1,(v_player+obStatus).w
00008A58 6700                       		beq.s	loc_6DC4
00008A5A D241                       		add.w	d1,d1
00008A5C D241                       		add.w	d1,d1
00008A5E                            
00008A5E                            loc_6DC4:
00008A5E D378 F72E                  		add.w	d1,(v_limitbtm2).w
00008A62 11FC 0001 F75C             		move.b	#1,(f_bgscrollvert).w
00008A68 4E75                       		rts	
00008A6A                            ; End of function DynamicLevelEvents
00008A6A                            
00008A6A                            ; ===========================================================================
00008A6A                            ; ---------------------------------------------------------------------------
00008A6A                            ; Offset index for dynamic level events
00008A6A                            ; ---------------------------------------------------------------------------
00008A6A 0000 0000                  DLE_Index:	dc.w DLE_GHZ-DLE_Index, DLE_LZ-DLE_Index
00008A6E 0000 0000                  		dc.w DLE_MZ-DLE_Index, DLE_SLZ-DLE_Index
00008A72 0000 0000                  		dc.w DLE_SYZ-DLE_Index, DLE_SBZ-DLE_Index
00008A76 0000                       		dc.w DLE_Ending-DLE_Index
00008A78                            ; ===========================================================================
00008A78                            ; ---------------------------------------------------------------------------
00008A78                            ; Green	Hill Zone dynamic level events
00008A78                            ; ---------------------------------------------------------------------------
00008A78                            
00008A78                            DLE_GHZ:
00008A78 7000                       		moveq	#0,d0
00008A7A 1038 FE11                  		move.b	(v_act).w,d0
00008A7E D040                       		add.w	d0,d0
00008A80 303B 0000                  		move.w	DLE_GHZx(pc,d0.w),d0
00008A84 4EFB 0000                  		jmp	DLE_GHZx(pc,d0.w)
00008A88                            ; ===========================================================================
00008A88 0000                       DLE_GHZx:	dc.w DLE_GHZ1-DLE_GHZx
00008A8A 0000                       		dc.w DLE_GHZ2-DLE_GHZx
00008A8C 0000                       		dc.w DLE_GHZ3-DLE_GHZx
00008A8E                            ; ===========================================================================
00008A8E                            
00008A8E                            DLE_GHZ1:
00008A8E 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w
00008A94 6600                       		bne.s	gohere
00008A96 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w ; set lower y-boundary
00008A9C 4E75                       		rts
00008A9E                            gohere:
00008A9E 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w ; set lower y-boundary
00008AA4 0C78 1680 F700             		cmpi.w	#$1680,(v_screenposx).w ; has the camera reached $1780 on x-axis?
00008AAA 6500                       		bcs.s	locret_6E08	; if not, branch
00008AAC 31FC 0720 F726             		move.w	#$720,(v_limitbtm1).w ; set lower y-boundary
00008AB2                            
00008AB2                            locret_6E08:
00008AB2 4E75                       		rts	
00008AB4                            ; ===========================================================================
00008AB4                            
00008AB4                            DLE_GHZ2:
00008AB4 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008ABA 0C78 0380 F700             		cmpi.w	#$380,(v_screenposx).w
00008AC0 6500                       		bcs.s	locret_6E3A
00008AC2 31FC 0310 F726             		move.w	#$310,(v_limitbtm1).w
00008AC8 0C78 0960 F700             		cmpi.w	#$960,(v_screenposx).w
00008ACE 6500                       		bcs.s	locret_6E3A
00008AD0 0C78 0280 F704             		cmpi.w	#$280,(v_screenposy).w
00008AD6 6500                       		bcs.s	loc_6E9A
00008AD8 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w
00008ADE 0C78 1200 F700             		cmpi.w	#$1200,(v_screenposx).w
00008AE4 6400                       		bcc.s	loc_6E8F
00008AE6 31FC 04C0 F726             		move.w	#$4C0,(v_limitbtm1).w
00008AEC 31FC 04C0 F72E             		move.w	#$4C0,(v_limitbtm2).w
00008AF2                            
00008AF2                            loc_6E8F:
00008AF2 0C78 1200 F700             		cmpi.w	#$1200,(v_screenposx).w
00008AF8 6400                       		bcc.s	loc_6E9A
00008AFA                            
00008AFA                            locret_6E3A:
00008AFA 4E75                       		rts	
00008AFC                            ; ===========================================================================
00008AFC                            
00008AFC                            loc_6E9A:
00008AFC 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008B02 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008B06 4E75                       		rts		
00008B08                            ; ===========================================================================
00008B08                            
00008B08                            DLE_GHZ3:
00008B08 7000                       		moveq	#0,d0
00008B0A 1038 F742                  		move.b	(v_dle_routine).w,d0
00008B0E 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
00008B12 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
00008B16                            ; ===========================================================================
00008B16 0000                       off_6E4A:	dc.w DLE_GHZ3main-off_6E4A
00008B18 0000                       		dc.w DLE_GHZ3boss-off_6E4A
00008B1A 0000                       		dc.w DLE_GHZ3end-off_6E4A
00008B1C                            ; ===========================================================================
00008B1C                            
00008B1C                            DLE_GHZ3main:
00008B1C 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008B22 0C78 0400 F700             		cmpi.w	#$400,(v_screenposx).w
00008B28 6500                       		bcs.s	locret_6E96
00008B2A 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008B30 0C78 0960 F700             		cmpi.w	#$960,(v_screenposx).w
00008B36 6500                       		bcs.s	locret_6E96
00008B38 0C78 0280 F704             		cmpi.w	#$280,(v_screenposy).w
00008B3E 6500                       		bcs.s	loc_6E98
00008B40 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008B46 0C78 1380 F700             		cmpi.w	#$1380,(v_screenposx).w
00008B4C 6400                       		bcc.s	loc_6E8E
00008B4E 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008B54 31FC 0300 F72E             		move.w	#$300,(v_limitbtm2).w
00008B5A                            
00008B5A                            loc_6E8E:
00008B5A 0C78 1700 F700             		cmpi.w	#$1700,(v_screenposx).w
00008B60 6400                       		bcc.s	loc_6E98
00008B62                            
00008B62                            locret_6E96:
00008B62 4E75                       		rts	
00008B64                            ; ===========================================================================
00008B64                            
00008B64                            loc_6E98:
00008B64 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008B6A 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008B6E 4E75                       		rts	
00008B70                            ; ===========================================================================
00008B70                            
00008B70                            DLE_GHZ3boss:
00008B70 0C78 0960 F700             		cmpi.w	#$960,(v_screenposx).w
00008B76 6400                       		bcc.s	loc_6EB0
00008B78 5538 F742                  		subq.b	#2,(v_dle_routine).w
00008B7C                            
00008B7C                            loc_6EB0:
00008B7C 0C78 1360 F700             		cmpi.w	#$1360,(v_screenposx).w
00008B82 6500                       		bcs.s	locret_6EE8
00008B84 6100 0000                  		bsr.w	FindFreeObj
00008B88 6600                       		bne.s	loc_6ED0
00008B8A 12BC 0000                  		move.b	#id_BossGreenHill,0(a1) ; load GHZ boss	object
00008B8E 337C 1460 0008             		move.w	#$1460,obX(a1)
00008B94 337C 0280 000C             		move.w	#$280,obY(a1)
00008B9A                            
00008B9A                            loc_6ED0:
00008BA2 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008BA8 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008BAC 7000                       		moveq	#plcid_Egg,d0
00008BAE 6000 8B3A                  		bra.w	AddPLC		; load boss patterns
00008BB2                            		
00008BB2                            ; ===========================================================================
00008BB2                            
00008BB2                            locret_6EE8:
00008BB2 4E75                       		rts	
00008BB4                            ; ===========================================================================
00008BB4                            
00008BB4                            DLE_GHZ3end:
00008BB4 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008BBA 337C 0280 000C             		move.w	#$280,obY(a1)
00008BC0 4E75                       		rts	
00008BC2                            ; ===========================================================================
00008BC2                            ; ---------------------------------------------------------------------------
00008BC2                            ; Labyrinth Zone dynamic level events
00008BC2                            ; ---------------------------------------------------------------------------
00008BC2                            
00008BC2                            DLE_LZ:
00008BC2 7000                       		moveq	#0,d0
00008BC4 1038 FE11                  		move.b	(v_act).w,d0
00008BC8 D040                       		add.w	d0,d0
00008BCA 303B 0000                  		move.w	DLE_LZx(pc,d0.w),d0
00008BCE 4EFB 0000                  		jmp	DLE_LZx(pc,d0.w)
00008BD2                            ; ===========================================================================
00008BD2 0000                       DLE_LZx:	dc.w DLE_LZ12-DLE_LZx
00008BD4 0000                       		dc.w DLE_LZ12-DLE_LZx
00008BD6 0000                       		dc.w DLE_LZ3-DLE_LZx
00008BD8 0000                       		dc.w DLE_SBZ3-DLE_LZx
00008BDA                            ; ===========================================================================
00008BDA                            
00008BDA                            DLE_LZ12:
00008BDA 4E75                       		rts	
00008BDC                            ; ===========================================================================
00008BDC                            
00008BDC                            DLE_LZ3:
00008BDC 4A38 F7EF                  		tst.b	(f_switch+$F).w	; has switch $F	been pressed?
00008BE0 6700                       		beq.s	loc_6F28	; if not, branch
00008BE2 43F8 A506                  		lea	(v_lvllayout+$106).w,a1
00008BE6 0C11 0007                  		cmpi.b	#7,(a1)
00008BEA 6700                       		beq.s	loc_6F28
00008BEC 12BC 0007                  		move.b	#7,(a1)		; modify level layout
00008BF8                            
00008BF8                            loc_6F28:
00008BF8 4A38 F742                  		tst.b	(v_dle_routine).w
00008BFC 6600                       		bne.s	locret_6F64
00008BFE 0C78 1CA0 F700             		cmpi.w	#$1CA0,(v_screenposx).w
00008C04 6500                       		bcs.s	locret_6F62
00008C06 0C78 0600 F704             		cmpi.w	#$600,(v_screenposy).w
00008C0C 6400                       		bcc.s	locret_6F62
00008C0E 6100 0000                  		bsr.w	FindFreeObj
00008C12 6600                       		bne.s	loc_6F4A
00008C14 12BC 0000                  		move.b	#id_BossLabyrinth,0(a1) ; load LZ boss object
00008C18                            
00008C18                            loc_6F4A:
00008C20 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008C26 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008C2A 7000                       		moveq	#plcid_Boss,d0
00008C2C 6000 8ABC                  		bra.w	AddPLC		; load boss patterns
00008C30                            ; ===========================================================================
00008C30                            
00008C30                            locret_6F62:
00008C30 4E75                       		rts	
00008C32                            ; ===========================================================================
00008C32                            
00008C32                            locret_6F64:
00008C32 4E75                       		rts	
00008C34                            ; ===========================================================================
00008C34                            
00008C34                            DLE_SBZ3:
00008C34 0C78 0D00 F700             		cmpi.w	#$D00,(v_screenposx).w
00008C3A 6500                       		bcs.s	locret_6F8C
00008C3C 0C78 0018 D00C             		cmpi.w	#$18,(v_player+obY).w ; has Sonic reached the top of the level?
00008C42 6400                       		bcc.s	locret_6F8C	; if not, branch
00008C44 4238 FE30                  		clr.b	(v_lastlamp).w
00008C48 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
00008C4E 31FC 0502 FE10             		move.w	#(id_SBZ<<8)+2,(v_zone).w ; set level number to 0502 (FZ)
00008C54 11FC 0001 F7C8             		move.b	#1,(f_lockmulti).w ; freeze Sonic
00008C5A                            
00008C5A                            locret_6F8C:
00008C5A 4E75                       		rts	
00008C5C                            ; ===========================================================================
00008C5C                            ; ---------------------------------------------------------------------------
00008C5C                            ; Marble Zone dynamic level events
00008C5C                            ; ---------------------------------------------------------------------------
00008C5C                            
00008C5C                            DLE_MZ:
00008C5C 7000                       		moveq	#0,d0
00008C5E 1038 FE11                  		move.b	(v_act).w,d0
00008C62 D040                       		add.w	d0,d0
00008C64 303B 0000                  		move.w	DLE_MZx(pc,d0.w),d0
00008C68 4EFB 0000                  		jmp	DLE_MZx(pc,d0.w)
00008C6C                            ; ===========================================================================
00008C6C 0000                       DLE_MZx:	dc.w DLE_MZ1-DLE_MZx
00008C6E 0000                       		dc.w DLE_MZ2-DLE_MZx
00008C70 0000                       		dc.w DLE_MZ3-DLE_MZx
00008C72                            ; ===========================================================================
00008C72                            
00008C72                            DLE_MZ1:
00008C72 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
00008C78 0C78 1F40 F700             		cmpi.w	#$1F40,(v_screenposx).w
00008C7E 6500                       		bcs.s	locret_6FE8
00008C80 31FC 0220 F726             		move.w	#$220,(v_limitbtm1).w
00008C86                            
00008C86                            locret_6FE8:
00008C86 4E75                       		rts	
00008C88                            
00008C88                            ; ===========================================================================
00008C88                            
00008C88                            DLE_MZ2:
00008C88 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
00008C8E 0C78 1700 F700             		cmpi.w	#$1700,(v_screenposx).w
00008C94 6500                       		bcs.s	locret_6FE9
00008C96 31FC 0110 F726             		move.w	#$110,(v_limitbtm1).w
00008C9C                            		
00008C9C                            locret_6FE9:
00008C9C 4E75                       		rts	
00008C9E                            ; ===========================================================================
00008C9E                            
00008C9E                            DLE_MZ3:
00008C9E 7000                       		moveq	#0,d0
00008CA0 1038 F742                  		move.b	(v_dle_routine).w,d0
00008CA4 303B 0000                  		move.w	off_7098(pc,d0.w),d0
00008CA8 4EFB 0000                  		jmp	off_7098(pc,d0.w)
00008CAC                            ; ===========================================================================
00008CAC 0000                       off_7098:	dc.w DLE_MZ3boss-off_7098
00008CAE 0000                       		dc.w DLE_MZ3end-off_7098
00008CB0                            ; ===========================================================================
00008CB0                            
00008CB0                            DLE_MZ3boss:
00008CB0 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008CB6 0C78 0E00 F700             		cmpi.w	#$0E00,(v_screenposx).w
00008CBC 6500                       		bcs.s	locret_70E8
00008CBE 31FC 0210 F726             		move.w	#$210,(v_limitbtm1).w
00008CC4 0C78 17F0 F700             		cmpi.w	#$17F0,(v_screenposx).w
00008CCA 6500                       		bcs.s	locret_70E8
00008CCC 6100 0000                  		bsr.w	FindFreeObj
00008CD0 6600                       		bne.s	loc_70D0
00008CD2 12BC 0000                  		move.b	#id_BossMarble,0(a1) ; load MZ boss object
00008CD6 337C 19F0 0008             		move.w	#$19F0,obX(a1)
00008CDC 337C 022C 000C             		move.w	#$22C,obY(a1)
00008CE2                            
00008CE2                            loc_70D0:
00008CEA 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008CF0 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008CF4 7000                       		moveq	#plcid_Boss,d0
00008CF6 6000 89F2                  		bra.w	AddPLC		; load boss patterns
00008CFA                            ; ===========================================================================
00008CFA                            
00008CFA                            locret_70E8:
00008CFA 4E75                       		rts	
00008CFC                            ; ===========================================================================
00008CFC                            
00008CFC                            DLE_MZ3end:
00008CFC 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008D02 4E75                       		rts	
00008D04                            		
00008D04                            ; ===========================================================================
00008D04                            ; ---------------------------------------------------------------------------
00008D04                            ; Star Light Zone dynamic level events
00008D04                            ; ---------------------------------------------------------------------------
00008D04                            
00008D04                            DLE_SLZ:
00008D04 7000                       		moveq	#0,d0
00008D06 1038 FE11                  		move.b	(v_act).w,d0
00008D0A D040                       		add.w	d0,d0
00008D0C 303B 0000                  		move.w	DLE_SLZx(pc,d0.w),d0
00008D10 4EFB 0000                  		jmp	DLE_SLZx(pc,d0.w)
00008D14                            ; ===========================================================================
00008D14 0000                       DLE_SLZx:	dc.w DLE_SLZ12-DLE_SLZx
00008D16 0000                       		dc.w DLE_SLZ12-DLE_SLZx
00008D18 0000                       		dc.w DLE_SLZ3-DLE_SLZx
00008D1A                            ; ===========================================================================
00008D1A                            
00008D1A                            DLE_SLZ12:
00008D1A 4E75                       		rts	
00008D1C                            ; ===========================================================================
00008D1C                            
00008D1C                            DLE_SLZ3:
00008D1C 7000                       		moveq	#0,d0
00008D1E 1038 F742                  		move.b	(v_dle_routine).w,d0
00008D22 303B 0000                  		move.w	off_7118(pc,d0.w),d0
00008D26 4EFB 0000                  		jmp	off_7118(pc,d0.w)
00008D2A                            ; ===========================================================================
00008D2A 0000                       off_7118:	dc.w DLE_SLZ3main-off_7118
00008D2C 0000                       		dc.w DLE_SLZ3boss-off_7118
00008D2E 0000                       		dc.w DLE_SLZ3end-off_7118
00008D30                            ; ===========================================================================
00008D30                            
00008D30                            DLE_SLZ3main:
00008D30 0C78 1E70 F700             		cmpi.w	#$1E70,(v_screenposx).w
00008D36 6500                       		bcs.s	locret_7130
00008D38 31FC 0210 F726             		move.w	#$210,(v_limitbtm1).w
00008D3E 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008D42                            
00008D42                            locret_7130:
00008D42 4E75                       		rts	
00008D44                            ; ===========================================================================
00008D44                            
00008D44                            DLE_SLZ3boss:
00008D44 0C78 2000 F700             		cmpi.w	#$2000,(v_screenposx).w
00008D4A 6500                       		bcs.s	locret_715C
00008D4C 6100 0000                  		bsr.w	FindFreeObj
00008D50 6600                       		bne.s	loc_7144
00008D52 12BC 0000                  		move.b	#id_BossStarLight,(a1) ; load SLZ boss object
00008D56                            
00008D56                            loc_7144:
00008D5E 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008D64 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008D68 7000                       		moveq	#plcid_Boss,d0
00008D6A 6000 897E                  		bra.w	AddPLC		; load boss patterns
00008D6E                            ; ===========================================================================
00008D6E                            
00008D6E                            locret_715C:
00008D6E 4E75                       		rts	
00008D70                            ; ===========================================================================
00008D70                            
00008D70                            DLE_SLZ3end:
00008D70 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008D76 4E75                       		rts
00008D78 4E75                       		rts
00008D7A                            ; ===========================================================================
00008D7A                            ; ---------------------------------------------------------------------------
00008D7A                            ; Spring Yard Zone dynamic level events
00008D7A                            ; ---------------------------------------------------------------------------
00008D7A                            
00008D7A                            DLE_SYZ:
00008D7A 7000                       		moveq	#0,d0
00008D7C 1038 FE11                  		move.b	(v_act).w,d0
00008D80 D040                       		add.w	d0,d0
00008D82 303B 0000                  		move.w	DLE_SYZx(pc,d0.w),d0
00008D86 4EFB 0000                  		jmp	DLE_SYZx(pc,d0.w)
00008D8A                            ; ===========================================================================
00008D8A 0000                       DLE_SYZx:	dc.w DLE_SYZ1-DLE_SYZx
00008D8C 0000                       		dc.w DLE_SYZ2-DLE_SYZx
00008D8E 0000                       		dc.w DLE_SYZ3-DLE_SYZx
00008D90                            ; ===========================================================================
00008D90                            
00008D90                            DLE_SYZ1:
00008D90 4E75                       		rts	
00008D92                            ; ===========================================================================
00008D92                            
00008D92                            DLE_SYZ2:
00008D92 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
00008D98 0C78 25A0 F700             		cmpi.w	#$25A0,(v_screenposx).w
00008D9E 6500                       		bcs.s	locret_71A2
00008DA0 31FC 0420 F726             		move.w	#$420,(v_limitbtm1).w
00008DA6 0C78 04D0 D00C             		cmpi.w	#$4D0,(v_player+obY).w
00008DAC 6500                       		bcs.s	locret_71A2
00008DAE 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
00008DB4                            
00008DB4                            locret_71A2:
00008DB4 4E75                       		rts	
00008DB6                            ; ===========================================================================
00008DB6                            
00008DB6                            DLE_SYZ3:
00008DB6 7000                       		moveq	#0,d0
00008DB8 1038 F742                  		move.b	(v_dle_routine).w,d0
00008DBC 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
00008DC0 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
00008DC4                            ; ===========================================================================
00008DC4 0000                       off_71B2:	dc.w DLE_SYZ3main-off_71B2
00008DC6 0000                       		dc.w DLE_SYZ3boss-off_71B2
00008DC8 0000                       		dc.w DLE_SYZ3end-off_71B2
00008DCA                            ; ===========================================================================
00008DCA                            
00008DCA                            DLE_SYZ3main:
00008DCA 0C78 2AC0 F700             		cmpi.w	#$2AC0,(v_screenposx).w
00008DD0 6500                       		bcs.s	locret_71CE
00008DD2 6100 0000                  		bsr.w	FindFreeObj
00008DD6 6600                       		bne.s	locret_71CE
00008DD8 12BC 0000                  		move.b	#id_BossBlock,(a1) ; load blocks that boss picks up
00008DDC 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008DE0                            
00008DE0                            locret_71CE:
00008DE0 4E75                       		rts	
00008DE2                            ; ===========================================================================
00008DE2                            
00008DE2                            DLE_SYZ3boss:
00008DE2 0C78 2C00 F700             		cmpi.w	#$2C00,(v_screenposx).w
00008DE8 6500                       		bcs.s	locret_7200
00008DEA 31FC 04CC F726             		move.w	#$4CC,(v_limitbtm1).w
00008DF0 6100 0000                  		bsr.w	FindFreeObj
00008DF4 6600                       		bne.s	loc_71EC
00008DF6 12BC 0000                  		move.b	#id_BossSpringYard,(a1) ; load SYZ boss	object
00008DFA 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008DFE                            
00008DFE                            loc_71EC:
00008E06 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008E0C 7000                       		moveq	#plcid_Boss,d0
00008E0E 6000 88DA                  		bra.w	AddPLC		; load boss patterns
00008E12                            ; ===========================================================================
00008E12                            
00008E12                            locret_7200:
00008E12 4E75                       		rts	
00008E14                            ; ===========================================================================
00008E14                            
00008E14                            DLE_SYZ3end:
00008E14 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008E1A 4E75                       		rts	
00008E1C                            ; ===========================================================================
00008E1C                            ; ---------------------------------------------------------------------------
00008E1C                            ; Scrap	Brain Zone dynamic level events
00008E1C                            ; ---------------------------------------------------------------------------
00008E1C                            
00008E1C                            DLE_SBZ:
00008E1C 7000                       		moveq	#0,d0
00008E1E 1038 FE11                  		move.b	(v_act).w,d0
00008E22 D040                       		add.w	d0,d0
00008E24 303B 0000                  		move.w	DLE_SBZx(pc,d0.w),d0
00008E28 4EFB 0000                  		jmp	DLE_SBZx(pc,d0.w)
00008E2C                            ; ===========================================================================
00008E2C 0000                       DLE_SBZx:	dc.w DLE_SBZ1-DLE_SBZx
00008E2E 0000                       		dc.w DLE_SBZ2-DLE_SBZx
00008E30 0000                       		dc.w DLE_FZ-DLE_SBZx
00008E32                            ; ===========================================================================
00008E32                            
00008E32                            DLE_SBZ1:
00008E32 31FC 0720 F726             		move.w	#$720,(v_limitbtm1).w
00008E38 0C78 1880 F700             		cmpi.w	#$1880,(v_screenposx).w
00008E3E 6500                       		bcs.s	locret_7242
00008E40 31FC 0620 F726             		move.w	#$620,(v_limitbtm1).w
00008E46 0C78 2000 F700             		cmpi.w	#$2000,(v_screenposx).w
00008E4C 6500                       		bcs.s	locret_7242
00008E4E 31FC 02A0 F726             		move.w	#$2A0,(v_limitbtm1).w
00008E54                            
00008E54                            locret_7242:
00008E54 4E75                       		rts	
00008E56                            ; ===========================================================================
00008E56                            
00008E56                            DLE_SBZ2:
00008E56 7000                       		moveq	#0,d0
00008E58 1038 F742                  		move.b	(v_dle_routine).w,d0
00008E5C 303B 0000                  		move.w	off_7252(pc,d0.w),d0
00008E60 4EFB 0000                  		jmp	off_7252(pc,d0.w)
00008E64                            ; ===========================================================================
00008E64 0000                       off_7252:	dc.w DLE_SBZ2main-off_7252
00008E66 0000                       		dc.w DLE_SBZ2boss-off_7252
00008E68 0000                       		dc.w DLE_SBZ2boss2-off_7252
00008E6A 0000                       		dc.w DLE_SBZ2end-off_7252
00008E6C                            ; ===========================================================================
00008E6C                            
00008E6C                            DLE_SBZ2main:
00008E6C 31FC 0800 F726             		move.w	#$800,(v_limitbtm1).w
00008E72 0C78 1800 F700             		cmpi.w	#$1800,(v_screenposx).w
00008E78 6500                       		bcs.s	locret_727A
00008E7A 31FC 0510 F726             		move.w	#$510,(v_limitbtm1).w
00008E80 0C78 1E00 F700             		cmpi.w	#$1E00,(v_screenposx).w
00008E86 6500                       		bcs.s	locret_727A
00008E88 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008E8C                            
00008E8C                            locret_727A:
00008E8C 4E75                       		rts	
00008E8E                            ; ===========================================================================
00008E8E                            
00008E8E                            DLE_SBZ2boss:
00008E8E 0C78 1EB0 F700             		cmpi.w	#$1EB0,(v_screenposx).w
00008E94 6500                       		bcs.s	locret_7298
00008E96 6100 0000                  		bsr.w	FindFreeObj
00008E9A 6600                       		bne.s	locret_7298
00008E9C 12BC 0000                  		move.b	#id_FalseFloor,(a1) ; load collapsing block object
00008EA0 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008EA4 7000                       		moveq	#plcid_EggmanSBZ2,d0
00008EA6 6000 8842                  		bra.w	AddPLC		; load SBZ2 Eggman patterns
00008EAA                            ; ===========================================================================
00008EAA                            
00008EAA                            locret_7298:
00008EAA 4E75                       		rts	
00008EAC                            ; ===========================================================================
00008EAC                            
00008EAC                            DLE_SBZ2boss2:
00008EAC 0C78 1F60 F700             		cmpi.w	#$1F60,(v_screenposx).w
00008EB2 6500                       		bcs.s	loc_72B6
00008EB4 6100 0000                  		bsr.w	FindFreeObj
00008EB8 6600                       		bne.s	loc_72B0
00008EBA 12BC 0000                  		move.b	#id_ScrapEggman,(a1) ; load SBZ2 Eggman object
00008EBE 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008EC2                            
00008EC2                            loc_72B0:
00008EC2 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008EC8                            
00008EC8                            loc_72B6:
00008EC8 6000                       		bra.s	loc_72C2
00008ECA                            ; ===========================================================================
00008ECA                            
00008ECA                            DLE_SBZ2end:
00008ECA 0C78 2050 F700             		cmpi.w	#$2050,(v_screenposx).w
00008ED0 6500                       		bcs.s	loc_72C2
00008ED2 4E75                       		rts	
00008ED4                            ; ===========================================================================
00008ED4                            
00008ED4                            loc_72C2:
00008ED4 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008EDA 4E75                       		rts	
00008EDC                            ; ===========================================================================
00008EDC                            
00008EDC                            DLE_FZ:
00008EDC 7000                       		moveq	#0,d0
00008EDE 1038 F742                  		move.b	(v_dle_routine).w,d0
00008EE2 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
00008EE6 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
00008EEA                            ; ===========================================================================
00008EEA 0000 0000                  off_72D8:	dc.w DLE_FZmain-off_72D8, DLE_FZboss-off_72D8
00008EEE 0000 0000                  		dc.w DLE_FZend-off_72D8, locret_7322-off_72D8
00008EF2 0000                       		dc.w DLE_FZend2-off_72D8
00008EF4                            ; ===========================================================================
00008EF4                            
00008EF4                            DLE_FZmain:
00008EF4 0C78 2148 F700             		cmpi.w	#$2148,(v_screenposx).w
00008EFA 6500                       		bcs.s	loc_72F4
00008EFC 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008F00 7000                       		moveq	#plcid_FZBoss,d0
00008F02 6100 87E6                  		bsr.w	AddPLC		; load FZ boss patterns
00008F06                            
00008F06                            loc_72F4:
00008F06 60CC                       		bra.s	loc_72C2
00008F08                            ; ===========================================================================
00008F08                            
00008F08                            DLE_FZboss:
00008F08 0C78 2300 F700             		cmpi.w	#$2300,(v_screenposx).w
00008F0E 6500                       		bcs.s	loc_7312
00008F10 6100 0000                  		bsr.w	FindFreeObj
00008F14 6600                       		bne.s	loc_7312
00008F16 12BC 0000                  		move.b	#id_BossFinal,(a1) ; load FZ boss object
00008F1A 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008F1E 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008F24                            
00008F24                            loc_7312:
00008F24 60AE                       		bra.s	loc_72C2
00008F26                            ; ===========================================================================
00008F26                            
00008F26                            DLE_FZend:
00008F26 0C78 2450 F700             		cmpi.w	#$2450,(v_screenposx).w
00008F2C 6500                       		bcs.s	loc_7320
00008F2E 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008F32                            
00008F32                            loc_7320:
00008F32 60A0                       		bra.s	loc_72C2
00008F34                            ; ===========================================================================
00008F34                            
00008F34                            locret_7322:
00008F34 4E75                       		rts	
00008F36                            ; ===========================================================================
00008F36                            
00008F36                            DLE_FZend2:
00008F36 609C                       		bra.s	loc_72C2
00008F38                            ; ===========================================================================
00008F38                            ; ---------------------------------------------------------------------------
00008F38                            ; Ending sequence dynamic level events (empty)
00008F38                            ; ---------------------------------------------------------------------------
00008F38                            
00008F38                            DLE_Ending:
00008F38 4E75                       		rts	
00008F38 4E75                       		rts	
00008F3A                            
00008F3A                            		include	"_incObj\11 Bridge (part 1).asm"
00008F3A                            ; ---------------------------------------------------------------------------
00008F3A                            ; Object 11 - GHZ bridge
00008F3A                            ; ---------------------------------------------------------------------------
00008F3A                            
00008F3A                            Bridge:
00008F3A 7000                       		moveq	#0,d0
00008F3C 1028 0024                  		move.b	obRoutine(a0),d0
00008F40 323B 0000                  		move.w	Bri_Index(pc,d0.w),d1
00008F44 4EFB 1000                  		jmp	Bri_Index(pc,d1.w)
00008F48                            ; ===========================================================================
00008F48 0000 0000                  Bri_Index:	dc.w Bri_Main-Bri_Index, Bri_Action-Bri_Index
00008F4C 0000 0000                  		dc.w Bri_Platform-Bri_Index, Bri_Delete-Bri_Index
00008F50 0000 0000                  		dc.w Bri_Delete-Bri_Index, Bri_Display-Bri_Index
00008F54                            ; ===========================================================================
00008F54                            
00008F54                            Bri_Main:	; Routine 0
00008F54 5428 0024                  		addq.b	#2,obRoutine(a0)
00008F58 217C 0000 0000 0004        		move.l	#Map_Bri,obMap(a0)
00008F60 317C 438E 0002             		move.w	#$438E,obGfx(a0)
00008F66 117C 0004 0001             		move.b	#4,obRender(a0)
00008F6C 317C 0180 0018             		move.w	#$180,obPriority(a0)
00008F72 117C 0080 0014             		move.b	#$80,obActWid(a0)
00008F78 3428 000C                  		move.w	obY(a0),d2
00008F7C 3628 0008                  		move.w	obX(a0),d3
00008F80 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00008F82 45E8 0028                  		lea	obSubtype(a0),a2
00008F86 7200                       		moveq	#0,d1
00008F88 1212                       		move.b	(a2),d1		; copy bridge length to d1
00008F8A 14FC 0000                  		move.b	#0,(a2)+	; clear bridge length
00008F8E 3001                       		move.w	d1,d0
00008F90 E248                       		lsr.w	#1,d0
00008F92 E948                       		lsl.w	#4,d0
00008F94 9640                       		sub.w	d0,d3		; d3 is position of leftmost log
00008F96 5501                       		subq.b	#2,d1
00008F98 6500                       		bcs.s	Bri_Action	; don't make more if bridge has only 1 log
00008F9A                            
00008F9A                            @buildloop:
00008F9A 6100 0000                  		bsr.w	FindFreeObj
00008F9E 6600                       		bne.s	Bri_Action
00008FA0 5228 0028                  		addq.b	#1,obSubtype(a0)
00008FA4 B668 0008                  		cmp.w	obX(a0),d3	; is this log the leftmost one?
00008FA8 6600                       		bne.s	@notleftmost	; if not, branch
00008FAA                            
00008FAA 0643 0010                  		addi.w	#$10,d3
00008FAE 3142 000C                  		move.w	d2,obY(a0)
00008FB2 3142 003C                  		move.w	d2,$3C(a0)
00008FB6 3A08                       		move.w	a0,d5
00008FB8 0445 D000                  		subi.w	#$D000,d5
00008FBC EC4D                       		lsr.w	#6,d5
00008FBE 0245 007F                  		andi.w	#$7F,d5
00008FC2 14C5                       		move.b	d5,(a2)+
00008FC4 5228 0028                  		addq.b	#1,obSubtype(a0)
00008FC8                            
00008FC8                            	@notleftmost:
00008FC8 3A09                       		move.w	a1,d5
00008FCA 0445 D000                  		subi.w	#$D000,d5
00008FCE EC4D                       		lsr.w	#6,d5
00008FD0 0245 007F                  		andi.w	#$7F,d5
00008FD4 14C5                       		move.b	d5,(a2)+
00008FD6 137C 000A 0024             		move.b	#$A,obRoutine(a1)
00008FDC 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
00008FDE 3342 000C                  		move.w	d2,obY(a1)
00008FE2 3342 003C                  		move.w	d2,$3C(a1)
00008FE6 3343 0008                  		move.w	d3,obX(a1)
00008FEA 237C 0000 0000 0004        		move.l	#Map_Bri,obMap(a1)
00008FF2 337C 438E 0002             		move.w	#$438E,obGfx(a1)
00008FF8 137C 0004 0001             		move.b	#4,obRender(a1)
00008FFE 337C 0180 0018             		move.w	#$180,obPriority(a1)
00009004 137C 0008 0014             		move.b	#8,obActWid(a1)
0000900A 0643 0010                  		addi.w	#$10,d3
0000900E 51C9 FF8A                  		dbf	d1,@buildloop ; repeat d1 times (length of bridge)
00009012                            
00009012                            Bri_Action:	; Routine 2
00009012 6100                       		bsr.s	Bri_Solid
00009014 4A28 003E                  		tst.b	$3E(a0)
00009018 6700                       		beq.s	@display
0000901A 5928 003E                  		subq.b	#4,$3E(a0)
0000901E 6100 0000                  		bsr.w	Bri_Bend
00009022                            
00009022                            	@display:
00009022 6100 0000                  		bsr.w	DisplaySprite
00009026 6000 0000                  		bra.w	Bri_ChkDel
0000902A                            
0000902A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000902A                            
0000902A                            
0000902A                            Bri_Solid:
0000902A 7200                       		moveq	#0,d1
0000902C 1228 0028                  		move.b	obSubtype(a0),d1
00009030 E749                       		lsl.w	#3,d1
00009032 3401                       		move.w	d1,d2
00009034 5041                       		addq.w	#8,d1
00009036 D442                       		add.w	d2,d2
00009038 43F8 D000                  		lea	(v_player).w,a1
0000903C 4A69 0012                  		tst.w	obVelY(a1)
00009040 6B00 0000                  		bmi.w	Plat_Exit
00009044 3029 0008                  		move.w	obX(a1),d0
00009048 9068 0008                  		sub.w	obX(a0),d0
0000904C D041                       		add.w	d1,d0
0000904E 6B00 0000                  		bmi.w	Plat_Exit
00009052 B042                       		cmp.w	d2,d0
00009054 6400 0000                  		bcc.w	Plat_Exit
00009058 6000                       		bra.s	Plat_NoXCheck
0000905A                            ; End of function Bri_Solid
0000905A                            ; End of function Bri_Solid
0000905A                            
0000905A                            ; ---------------------------------------------------------------------------
0000905A                            ; Platform subroutine
0000905A                            ; ---------------------------------------------------------------------------
0000905A                            
0000905A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000905A                            
0000905A                            PlatformObject:
0000905A 43F8 D000                  		lea	(v_player).w,a1
0000905E 4A69 0012                  		tst.w	obVelY(a1)	; is Sonic moving up/jumping?
00009062 6B00 0000                  		bmi.w	Plat_Exit	; if yes, branch
00009066                            
00009066                            ;		perform x-axis range check
00009066 3029 0008                  		move.w	obX(a1),d0
0000906A 9068 0008                  		sub.w	obX(a0),d0
0000906E D041                       		add.w	d1,d0
00009070 6B00 0000                  		bmi.w	Plat_Exit
00009074 D241                       		add.w	d1,d1
00009076 B041                       		cmp.w	d1,d0
00009078 6400 0000                  		bhs.w	Plat_Exit
0000907C                            
0000907C                            	Plat_NoXCheck:
0000907C 3028 000C                  		move.w	obY(a0),d0
00009080 5140                       		subq.w	#8,d0
00009082                            
00009082                            Platform3:
00009082                            ;		perform y-axis range check
00009082 3429 000C                  		move.w	obY(a1),d2
00009086 1229 0016                  		move.b	obHeight(a1),d1
0000908A 4881                       		ext.w	d1
0000908C D242                       		add.w	d2,d1
0000908E 5841                       		addq.w	#4,d1
00009090 9041                       		sub.w	d1,d0
00009092 6200 0000                  		bhi.w	Plat_Exit
00009096 0C40 FFF0                  		cmpi.w	#-$10,d0
0000909A 6500 0000                  		blo.w	Plat_Exit
0000909E                            
0000909E 4A38 F7C8                  		tst.b	(f_lockmulti).w
000090A2 6B00 0000                  		bmi.w	Plat_Exit
000090A6 0C29 0006 0024             		cmpi.b	#6,obRoutine(a1)
000090AC 6400 0000                  		bhs.w	Plat_Exit
000090B0 D440                       		add.w	d0,d2
000090B2 5642                       		addq.w	#3,d2
000090B4 3342 000C                  		move.w	d2,obY(a1)
000090B8 5428 0024                  		addq.b	#2,obRoutine(a0)
000090BC                            
000090BC                            loc_74AE:
000090BC 0829 0003 0022             		btst	#3,obStatus(a1)
000090C2 6700                       		beq.s	loc_74DC
000090C4 7000                       		moveq	#0,d0
000090C6 1029 003D                  		move.b	$3D(a1),d0
000090CA ED48                       		lsl.w	#6,d0
000090CC 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
000090D2 2440                       		movea.l	d0,a2
000090D4 08AA 0003 0022             		bclr	#3,obStatus(a2)
000090DA 422A 0025                  		clr.b	ob2ndRout(a2)
000090DE 0C2A 0004 0024             		cmpi.b	#4,obRoutine(a2)
000090E4 6600                       		bne.s	loc_74DC
000090E6 552A 0024                  		subq.b	#2,obRoutine(a2)
000090EA                            
000090EA                            loc_74DC:
000090EA 3008                       		move.w	a0,d0
000090EC 0440 D000                  		subi.w	#-$3000,d0
000090F0 EC48                       		lsr.w	#6,d0
000090F2 0240 007F                  		andi.w	#$7F,d0
000090F6 1340 003D                  		move.b	d0,$3D(a1)
000090FA 137C 0000 0026             		move.b	#0,obAngle(a1)
00009100 337C 0000 0012             		move.w	#0,obVelY(a1)
00009106 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
0000910C 0829 0001 0022             		btst	#1,obStatus(a1)
00009112 6700                       		beq.s	loc_7512
00009114 2F08                       		move.l	a0,-(sp)
00009116 2049                       		movea.l	a1,a0
00009118 4EB9 0000 0000             		jsr	(Sonic_ResetOnFloor).l
0000911E 205F                       		movea.l	(sp)+,a0
00009120                            
00009120                            loc_7512:
00009120 08E9 0003 0022             		bset	#3,obStatus(a1)
00009126 08E8 0003 0022             		bset	#3,obStatus(a0)
0000912C                            
0000912C                            Plat_Exit:
0000912C 4E75                       		rts	
0000912E                            ; End of function PlatformObject
0000912E                            
0000912E                            ; ---------------------------------------------------------------------------
0000912E                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
0000912E                            ; ---------------------------------------------------------------------------
0000912E                            
0000912E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000912E                            
0000912E                            
0000912E                            SlopeObject:
0000912E 43F8 D000                  		lea	(v_player).w,a1
00009132 4A69 0012                  		tst.w	obVelY(a1)
00009136 6B00 FFF4                  		bmi.w	Plat_Exit
0000913A 3029 0008                  		move.w	obX(a1),d0
0000913E 9068 0008                  		sub.w	obX(a0),d0
00009142 D041                       		add.w	d1,d0
00009144 6BE6                       		bmi.s	Plat_Exit
00009146 D241                       		add.w	d1,d1
00009148 B041                       		cmp.w	d1,d0
0000914A 64E0                       		bhs.s	Plat_Exit
0000914C 0828 0000 0001             		btst	#0,obRender(a0)
00009152 6700                       		beq.s	loc_754A
00009154 4640                       		not.w	d0
00009156 D041                       		add.w	d1,d0
00009158                            
00009158                            loc_754A:
00009158 E248                       		lsr.w	#1,d0
0000915A 7600                       		moveq	#0,d3
0000915C 1632 0000                  		move.b	(a2,d0.w),d3
00009160 3028 000C                  		move.w	obY(a0),d0
00009164 9043                       		sub.w	d3,d0
00009166 6000 FF1A                  		bra.w	Platform3
0000916A                            ; End of function SlopeObject
0000916A                            
0000916A                            
0000916A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000916A                            
0000916A                            
0000916A                            Swing_Solid:
0000916A 43F8 D000                  		lea	(v_player).w,a1
0000916E 4A69 0012                  		tst.w	obVelY(a1)
00009172 6B00 FFB8                  		bmi.w	Plat_Exit
00009176 3029 0008                  		move.w	obX(a1),d0
0000917A 9068 0008                  		sub.w	obX(a0),d0
0000917E D041                       		add.w	d1,d0
00009180 6B00 FFAA                  		bmi.w	Plat_Exit
00009184 D241                       		add.w	d1,d1
00009186 B041                       		cmp.w	d1,d0
00009188 6400 FFA2                  		bhs.w	Plat_Exit
0000918C 3028 000C                  		move.w	obY(a0),d0
00009190 9043                       		sub.w	d3,d0
00009192 6000 FEEE                  		bra.w	Platform3
00009196                            ; End of function Obj15_Solid
00009196                            
00009196                            ; ===========================================================================
00009196                            
00009196                            		include	"_incObj\11 Bridge (part 2).asm"
00009196                            
00009196                            Bri_Platform:	; Routine 4
00009196 6100                       		bsr.s	Bri_WalkOff
00009198 6100 0000                  		bsr.w	DisplaySprite
0000919C 6000 0000                  		bra.w	Bri_ChkDel
000091A0                            
000091A0                            ; ---------------------------------------------------------------------------
000091A0                            ; Subroutine allowing Sonic to walk off a bridge
000091A0                            ; ---------------------------------------------------------------------------
000091A0                            
000091A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000091A0                            
000091A0                            
000091A0                            Bri_WalkOff:
000091A0 7200                       		moveq	#0,d1
000091A2 1228 0028                  		move.b	obSubtype(a0),d1
000091A6 E749                       		lsl.w	#3,d1
000091A8 3401                       		move.w	d1,d2
000091AA 5041                       		addq.w	#8,d1
000091AC 6100                       		bsr.s	ExitPlatform2
000091AE 6400                       		bcc.s	locret_75BE
000091B0 E848                       		lsr.w	#4,d0
000091B2 1140 003F                  		move.b	d0,$3F(a0)
000091B6 1028 003E                  		move.b	$3E(a0),d0
000091BA 0C00 0040                  		cmpi.b	#$40,d0
000091BE 6700                       		beq.s	loc_75B6
000091C0 5828 003E                  		addq.b	#4,$3E(a0)
000091C4                            
000091C4                            loc_75B6:
000091C4 6100 0000                  		bsr.w	Bri_Bend
000091C8 6100 0000                  		bsr.w	Bri_MoveSonic
000091CC                            
000091CC                            locret_75BE:
000091CC 4E75                       		rts	
000091CE                            ; End of function Bri_WalkOff
000091CE                            ; End of function Bri_WalkOff
000091CE                            
000091CE                            ; ---------------------------------------------------------------------------
000091CE                            ; Subroutine allowing Sonic to walk or jump off	a platform
000091CE                            ; ---------------------------------------------------------------------------
000091CE                            
000091CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000091CE                            
000091CE                            
000091CE                            ExitPlatform:
000091CE 3401                       		move.w	d1,d2
000091D0                            
000091D0                            ExitPlatform2:
000091D0 D442                       		add.w	d2,d2
000091D2 43F8 D000                  		lea	(v_player).w,a1
000091D6 0829 0001 0022             		btst	#1,obStatus(a1)
000091DC 6600                       		bne.s	loc_75E0
000091DE 3029 0008                  		move.w	obX(a1),d0
000091E2 9068 0008                  		sub.w	obX(a0),d0
000091E6 D041                       		add.w	d1,d0
000091E8 6B00                       		bmi.s	loc_75E0
000091EA B042                       		cmp.w	d2,d0
000091EC 6500                       		blo.s	locret_75F2
000091EE                            
000091EE                            loc_75E0:
000091EE 08A9 0003 0022             		bclr	#3,obStatus(a1)
000091F4 117C 0002 0024             		move.b	#2,obRoutine(a0)
000091FA 08A8 0003 0022             		bclr	#3,obStatus(a0)
00009200                            
00009200                            locret_75F2:
00009200 4E75                       		rts	
00009202                            ; End of function ExitPlatform
00009202                            
00009202                            		include	"_incObj\11 Bridge (part 3).asm"
00009202                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009202                            
00009202                            
00009202                            Bri_MoveSonic:
00009202 7000                       		moveq	#0,d0
00009204 1028 003F                  		move.b	$3F(a0),d0
00009208 1030 0029                  		move.b	$29(a0,d0.w),d0
0000920C ED48                       		lsl.w	#6,d0
0000920E 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00009214 2440                       		movea.l	d0,a2
00009216 43F8 D000                  		lea	(v_player).w,a1
0000921A 302A 000C                  		move.w	obY(a2),d0
0000921E 5140                       		subq.w	#8,d0
00009220 7200                       		moveq	#0,d1
00009222 1229 0016                  		move.b	obHeight(a1),d1
00009226 9041                       		sub.w	d1,d0
00009228 3340 000C                  		move.w	d0,obY(a1)	; change Sonic's position on y-axis
0000922C 4E75                       		rts	
0000922E                            ; End of function Bri_MoveSonic
0000922E                            
0000922E                            
0000922E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000922E                            
0000922E                            
0000922E                            Bri_Bend:
0000922E 1028 003E                  		move.b	$3E(a0),d0
00009232 6100 A7FE                  		bsr.w	CalcSine
00009236 3800                       		move.w	d0,d4
00009238 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
0000923E 7000                       		moveq	#0,d0
00009240 1028 0028                  		move.b	obSubtype(a0),d0
00009244 E948                       		lsl.w	#4,d0
00009246 7600                       		moveq	#0,d3
00009248 1628 003F                  		move.b	$3F(a0),d3
0000924C 3403                       		move.w	d3,d2
0000924E D640                       		add.w	d0,d3
00009250 7A00                       		moveq	#0,d5
00009252 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00009258 1A35 3000                  		move.b	(a5,d3.w),d5
0000925C 0243 000F                  		andi.w	#$F,d3
00009260 E94B                       		lsl.w	#4,d3
00009262 47F4 3000                  		lea	(a4,d3.w),a3
00009266 45E8 0029                  		lea	$29(a0),a2
0000926A                            
0000926A                            loc_765C:
0000926A 7000                       		moveq	#0,d0
0000926C 101A                       		move.b	(a2)+,d0
0000926E ED48                       		lsl.w	#6,d0
00009270 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00009276 2240                       		movea.l	d0,a1
00009278 7000                       		moveq	#0,d0
0000927A 101B                       		move.b	(a3)+,d0
0000927C 5240                       		addq.w	#1,d0
0000927E C0C5                       		mulu.w	d5,d0
00009280 C0C4                       		mulu.w	d4,d0
00009282 4840                       		swap	d0
00009284 D069 003C                  		add.w	$3C(a1),d0
00009288 3340 000C                  		move.w	d0,obY(a1)
0000928C 51CA FFDC                  		dbf	d2,loc_765C
00009290 7000                       		moveq	#0,d0
00009292 1028 0028                  		move.b	obSubtype(a0),d0
00009296 7600                       		moveq	#0,d3
00009298 1628 003F                  		move.b	$3F(a0),d3
0000929C 5203                       		addq.b	#1,d3
0000929E 9600                       		sub.b	d0,d3
000092A0 4403                       		neg.b	d3
000092A2 6B00                       		bmi.s	locret_76CA
000092A4 3403                       		move.w	d3,d2
000092A6 E94B                       		lsl.w	#4,d3
000092A8 47F4 3000                  		lea	(a4,d3.w),a3
000092AC D6C2                       		adda.w	d2,a3
000092AE 5342                       		subq.w	#1,d2
000092B0 6500                       		bcs.s	locret_76CA
000092B2                            
000092B2                            loc_76A4:
000092B2 7000                       		moveq	#0,d0
000092B4 101A                       		move.b	(a2)+,d0
000092B6 ED48                       		lsl.w	#6,d0
000092B8 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
000092BE 2240                       		movea.l	d0,a1
000092C0 7000                       		moveq	#0,d0
000092C2 1023                       		move.b	-(a3),d0
000092C4 5240                       		addq.w	#1,d0
000092C6 C0C5                       		mulu.w	d5,d0
000092C8 C0C4                       		mulu.w	d4,d0
000092CA 4840                       		swap	d0
000092CC D069 003C                  		add.w	$3C(a1),d0
000092D0 3340 000C                  		move.w	d0,obY(a1)
000092D4 51CA FFDC                  		dbf	d2,loc_76A4
000092D8                            
000092D8                            locret_76CA:
000092D8 4E75                       		rts	
000092DA                            ; End of function Bri_Bend
000092DA                            
000092DA                            ; ===========================================================================
000092DA                            ; ---------------------------------------------------------------------------
000092DA                            ; GHZ bridge-bending data
000092DA                            ; (Defines how the bridge bends	when Sonic walks across	it)
000092DA                            ; ---------------------------------------------------------------------------
000092DA                            Obj11_BendData:	incbin	"misc\ghzbend1.bin"
000093EA                            		even
000093EA                            Obj11_BendData2:incbin	"misc\ghzbend2.bin"
000094EA                            		even
000094EA                            
000094EA                            ; ===========================================================================
000094EA                            
000094EA                            Bri_ChkDel:
00009508 4E75                       		rts	
0000950A                            ; ===========================================================================
0000950A                            
0000950A                            @deletebridge:
0000950A 7400                       		moveq	#0,d2
0000950C 45E8 0028                  		lea	obSubtype(a0),a2 ; load bridge length
00009510 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
00009512 5302                       		subq.b	#1,d2		; subtract 1
00009514 6500                       		bcs.s	@delparent
00009516                            
00009516                            	@loop:
00009516 7000                       		moveq	#0,d0
00009518 101A                       		move.b	(a2)+,d0
0000951A ED48                       		lsl.w	#6,d0
0000951C 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00009522 2240                       		movea.l	d0,a1
00009524 B048                       		cmp.w	a0,d0
00009526 6700                       		beq.s	@skipdel
00009528 6100 0000                  		bsr.w	DeleteChild
0000952C                            
0000952C                            	@skipdel:
0000952C 51CA FFE8                  		dbf	d2,@loop ; repeat d2 times (bridge length)
00009530                            
00009530                            @delparent:
00009530 6100 0000                  		bsr.w	DeleteObject
00009534 4E75                       		rts	
00009536                            ; ===========================================================================
00009536                            
00009536                            Bri_Delete:	; Routine 6, 8
00009536 6100 0000                  		bsr.w	DeleteObject
0000953A 4E75                       		rts	
0000953C                            ; ===========================================================================
0000953C                            
0000953C                            Bri_Display:	; Routine $A
0000953C 6100 0000                  		bsr.w	DisplaySprite
00009540 4E75                       		rts	
00009540 4E75                       		rts	
00009542                            Map_Bri:	include	"_maps\Bridge.asm"
00009542                            ; ---------------------------------------------------------------------------
00009542                            ; Sprite mappings - GHZ	bridge
00009542                            ; ---------------------------------------------------------------------------
00009542                            Map_Bri_internal:
00009542 0000                       		dc.w M_Bri_Log-Map_Bri_internal
00009544 0000                       		dc.w M_Bri_Stump-Map_Bri_internal
00009546 0000                       		dc.w M_Bri_Rope-Map_Bri_internal
00009548 01                         M_Bri_Log:	dc.b 1
00009549 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; log
0000954E 02                         M_Bri_Stump:	dc.b 2
0000954F F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0	; stump & rope
00009554 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00009559 01                         M_Bri_Rope:	dc.b 1
0000955A FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8	; rope only
00009560 00                         		even
00009560 00                         		even
00009560                            
00009560                            		include	"_incObj\15 Swinging Platforms (part 1).asm"
00009560                            ; ---------------------------------------------------------------------------
00009560                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
00009560                            ;	    - spiked ball on a chain (SBZ)
00009560                            ; ---------------------------------------------------------------------------
00009560                            
00009560                            SwingingPlatform:
00009560 7000                       		moveq	#0,d0
00009562 1028 0024                  		move.b	obRoutine(a0),d0
00009566 323B 0000                  		move.w	Swing_Index(pc,d0.w),d1
0000956A 4EFB 1000                  		jmp	Swing_Index(pc,d1.w)
0000956E                            ; ===========================================================================
0000956E 0000 0000                  Swing_Index:	dc.w Swing_Main-Swing_Index, Swing_SetSolid-Swing_Index
00009572 0000 0000                  		dc.w Swing_Action2-Swing_Index,	Swing_Delete-Swing_Index
00009576 0000 0000                  		dc.w Swing_Delete-Swing_Index, Swing_Display-Swing_Index
0000957A 0000                       		dc.w Swing_Action-Swing_Index
0000957C                            
0000957C =0000003A                  swing_origX:	equ $3A		; original x-axis position
0000957C =00000038                  swing_origY:	equ $38		; original y-axis position
0000957C                            ; ===========================================================================
0000957C                            
0000957C                            Swing_Main:	; Routine 0
0000957C 5428 0024                  		addq.b	#2,obRoutine(a0)
00009580 217C 0000 0000 0004        		move.l	#Map_Swing_GHZ,obMap(a0) ; GHZ and MZ specific code
00009588 317C 4380 0002             		move.w	#$4380,obGfx(a0)
0000958E 117C 0004 0001             		move.b	#4,obRender(a0)
00009594 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000959A 117C 0018 0014             		move.b	#$18,obActWid(a0)
000095A0 117C 0008 0016             		move.b	#8,obHeight(a0)
000095A6 3168 000C 0038             		move.w	obY(a0),swing_origY(a0)
000095AC 3168 0008 003A             		move.w	obX(a0),swing_origX(a0)
000095B2 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
000095B8 6600                       		bne.s	@notSLZ
000095BA                            
000095BA 217C 0000 0000 0004        		move.l	#Map_Swing_SLZ,obMap(a0) ; SLZ specific code
000095C2 317C 43DC 0002             		move.w	#$43DC,obGfx(a0)
000095C8 117C 0020 0014             		move.b	#$20,obActWid(a0)
000095CE 117C 0010 0016             		move.b	#$10,obHeight(a0)
000095D4 117C 0099 0020             		move.b	#$99,obColType(a0)
000095DA                            
000095DA                            	@notSLZ:
000095DA 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
000095E0 6600                       		bne.s	@length
000095E2                            
000095E2 217C 0000 0000 0004        		move.l	#Map_BBall,obMap(a0) ; SBZ specific code
000095EA 317C 0391 0002             		move.w	#$391,obGfx(a0)
000095F0 117C 0018 0014             		move.b	#$18,obActWid(a0)
000095F6 117C 0018 0016             		move.b	#$18,obHeight(a0)
000095FC 117C 0086 0020             		move.b	#$86,obColType(a0)
00009602 117C 000C 0024             		move.b	#$C,obRoutine(a0) ; goto Swing_Action next
00009608                            
00009608                            @length:
00009608 1810                       		move.b	0(a0),d4
0000960A 7200                       		moveq	#0,d1
0000960C 45E8 0028                  		lea	obSubtype(a0),a2 ; move chain length to a2
00009610 1212                       		move.b	(a2),d1		; move a2 to d1
00009612 3F01                       		move.w	d1,-(sp)
00009614 0241 000F                  		andi.w	#$F,d1
00009618 14FC 0000                  		move.b	#0,(a2)+
0000961C 3601                       		move.w	d1,d3
0000961E E94B                       		lsl.w	#4,d3
00009620 5003                       		addq.b	#8,d3
00009622 1143 003C                  		move.b	d3,$3C(a0)
00009626 5103                       		subq.b	#8,d3
00009628 4A28 001A                  		tst.b	obFrame(a0)
0000962C 6700                       		beq.s	@makechain
0000962E 5003                       		addq.b	#8,d3
00009630 5341                       		subq.w	#1,d1
00009632                            
00009632                            @makechain:
00009632 6100 0000                  		bsr.w	FindFreeObj
00009636 6600                       		bne.s	@fail
00009638 5228 0028                  		addq.b	#1,obSubtype(a0)
0000963C 3A09                       		move.w	a1,d5
0000963E 0445 D000                  		subi.w	#$D000,d5
00009642 EC4D                       		lsr.w	#6,d5
00009644 0245 007F                  		andi.w	#$7F,d5
00009648 14C5                       		move.b	d5,(a2)+
0000964A 137C 000A 0024             		move.b	#$A,obRoutine(a1) ; goto Swing_Display next
00009650 1284                       		move.b	d4,0(a1)	; load swinging	object
00009652 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
00009658 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0000965E 08A9 0006 0002             		bclr	#6,obGfx(a1)
00009664 137C 0004 0001             		move.b	#4,obRender(a1)
0000966A 337C 0200 0018             		move.w	#$200,obPriority(a1)
00009670 137C 0008 0014             		move.b	#8,obActWid(a1)
00009676 137C 0001 001A             		move.b	#1,obFrame(a1)
0000967C 1343 003C                  		move.b	d3,$3C(a1)
00009680 0403 0010                  		subi.b	#$10,d3
00009684 6400                       		bcc.s	@notanchor
00009686 137C 0002 001A             		move.b	#2,obFrame(a1)
0000968C 337C 0180 0018             		move.w	#$180,obPriority(a1)
00009692 08E9 0006 0002             		bset	#6,obGfx(a1)
00009698                            
00009698                            	@notanchor:
00009698 51C9 FF98                  		dbf	d1,@makechain ; repeat d1 times (chain length)
0000969C                            
0000969C                            	@fail:
0000969C 3A08                       		move.w	a0,d5
0000969E 0445 D000                  		subi.w	#$D000,d5
000096A2 EC4D                       		lsr.w	#6,d5
000096A4 0245 007F                  		andi.w	#$7F,d5
000096A8 14C5                       		move.b	d5,(a2)+
000096AA 317C 4080 0026             		move.w	#$4080,obAngle(a0)
000096B0 317C FE00 003E             		move.w	#-$200,$3E(a0)
000096B6 321F                       		move.w	(sp)+,d1
000096B8 0801 0004                  		btst	#4,d1		; is object type $1X ?
000096BC 6700                       		beq.s	@not1X	; if not, branch
000096BE 217C 0000 0000 0004        		move.l	#Map_GBall,obMap(a0) ; use GHZ ball mappings
000096C6 317C 43AA 0002             		move.w	#$43AA,obGfx(a0)
000096CC 117C 0001 001A             		move.b	#1,obFrame(a0)
000096D2 317C 0100 0018             		move.w	#$100,obPriority(a0)
000096D8 117C 0081 0020             		move.b	#$81,obColType(a0) ; make object hurt when touched
000096DE                            
000096DE                            	@not1X:
000096DE 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; is zone SBZ?
000096E4 6700                       		beq.s	Swing_Action	; if yes, branch
000096E6                            
000096E6                            Swing_SetSolid:	; Routine 2
000096E6 7200                       		moveq	#0,d1
000096E8 1228 0014                  		move.b	obActWid(a0),d1
000096EC 7600                       		moveq	#0,d3
000096EE 1628 0016                  		move.b	obHeight(a0),d3
000096F2 6100 FA76                  		bsr.w	Swing_Solid
000096F6                            
000096F6                            Swing_Action:	; Routine $C
000096F6 6100 0000                  		bsr.w	Swing_Move
000096FA 6100 0000                  		bsr.w	DisplaySprite
000096FE 6000 0000                  		bra.w	Swing_ChkDel
00009702                            ; ===========================================================================
00009702                            
00009702                            Swing_Action2:	; Routine 4
00009702 7200                       		moveq	#0,d1
00009704 1228 0014                  		move.b	obActWid(a0),d1
00009708 6100 FAC4                  		bsr.w	ExitPlatform
0000970C 3F28 0008                  		move.w	obX(a0),-(sp)
00009710 6100 0000                  		bsr.w	Swing_Move
00009714 341F                       		move.w	(sp)+,d2
00009716 7600                       		moveq	#0,d3
00009718 1628 0016                  		move.b	obHeight(a0),d3
0000971C 5203                       		addq.b	#1,d3
0000971E 6100 0000                  		bsr.w	MvSonicOnPtfm
00009722 6100 0000                  		bsr.w	DisplaySprite
00009726 6000 0000                  		bra.w	Swing_ChkDel
0000972A                            
0000972A 4E75                       		rts
0000972A 4E75                       		rts
0000972C                            
0000972C                            ; ---------------------------------------------------------------------------
0000972C                            ; Subroutine to	change Sonic's position with a platform
0000972C                            ; ---------------------------------------------------------------------------
0000972C                            
0000972C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000972C                            
0000972C                            
0000972C                            MvSonicOnPtfm:
0000972C 43F8 D000                  		lea	(v_player).w,a1
00009730 3028 000C                  		move.w	obY(a0),d0
00009734 9043                       		sub.w	d3,d0
00009736 6000                       		bra.s	MvSonic2
00009738                            ; End of function MvSonicOnPtfm
00009738                            
00009738                            ; ---------------------------------------------------------------------------
00009738                            ; Subroutine to	change Sonic's position with a platform
00009738                            ; ---------------------------------------------------------------------------
00009738                            
00009738                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009738                            
00009738                            
00009738                            MvSonicOnPtfm2:
00009738 43F8 D000                  		lea	(v_player).w,a1
0000973C 3028 000C                  		move.w	obY(a0),d0
00009740 0440 0009                  		subi.w	#9,d0
00009744                            
00009744                            MvSonic2:
00009744 4A38 F7C8                  		tst.b	(f_lockmulti).w
00009748 6B00                       		bmi.s	locret_7B62
0000974A 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
00009750 6400                       		bhs.s	locret_7B62
00009752 4A78 FE08                  		tst.w	(v_debuguse).w
00009756 6600                       		bne.s	locret_7B62
00009758 7200                       		moveq	#0,d1
0000975A 1229 0016                  		move.b	obHeight(a1),d1
0000975E 9041                       		sub.w	d1,d0
00009760 3340 000C                  		move.w	d0,obY(a1)
00009764 9468 0008                  		sub.w	obX(a0),d2
00009768 9569 0008                  		sub.w	d2,obX(a1)
0000976C                            
0000976C                            locret_7B62:
0000976C 4E75                       		rts	
0000976E                            ; End of function MvSonicOnPtfm2
0000976E                            
0000976E                            		include	"_incObj\15 Swinging Platforms (part 2).asm"
0000976E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000976E                            
0000976E                            
0000976E                            Swing_Move:
0000976E 1038 FE78                  		move.b	(v_oscillate+$1A).w,d0
00009772 323C 0080                  		move.w	#$80,d1
00009776 0828 0000 0022             		btst	#0,obStatus(a0)
0000977C 6700                       		beq.s	loc_7B78
0000977E 4440                       		neg.w	d0
00009780 D041                       		add.w	d1,d0
00009782                            
00009782                            loc_7B78:
00009782 6000                       		bra.s	Swing_Move2
00009784                            ; End of function Swing_Move
00009784                            
00009784                            
00009784                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009784                            
00009784                            
00009784                            Obj48_Move:
00009784 4A28 003D                  		tst.b	$3D(a0)
00009788 6600                       		bne.s	loc_7B9C
0000978A 3028 003E                  		move.w	$3E(a0),d0
0000978E 5040                       		addq.w	#8,d0
00009790 3140 003E                  		move.w	d0,$3E(a0)
00009794 D168 0026                  		add.w	d0,obAngle(a0)
00009798 0C40 0200                  		cmpi.w	#$200,d0
0000979C 6600                       		bne.s	loc_7BB6
0000979E 117C 0001 003D             		move.b	#1,$3D(a0)
000097A4 6000                       		bra.s	loc_7BB6
000097A6                            ; ===========================================================================
000097A6                            
000097A6                            loc_7B9C:
000097A6 3028 003E                  		move.w	$3E(a0),d0
000097AA 5140                       		subq.w	#8,d0
000097AC 3140 003E                  		move.w	d0,$3E(a0)
000097B0 D168 0026                  		add.w	d0,obAngle(a0)
000097B4 0C40 FE00                  		cmpi.w	#-$200,d0
000097B8 6600                       		bne.s	loc_7BB6
000097BA 117C 0000 003D             		move.b	#0,$3D(a0)
000097C0                            
000097C0                            loc_7BB6:
000097C0 1028 0026                  		move.b	obAngle(a0),d0
000097C4                            ; End of function Obj48_Move
000097C4                            
000097C4                            
000097C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000097C4                            
000097C4                            
000097C4                            Swing_Move2:
000097C4 6100 A26C                  		bsr.w	CalcSine
000097C8 3428 0038                  		move.w	$38(a0),d2
000097CC 3628 003A                  		move.w	$3A(a0),d3
000097D0 45E8 0028                  		lea	obSubtype(a0),a2
000097D4 7C00                       		moveq	#0,d6
000097D6 1C1A                       		move.b	(a2)+,d6
000097D8                            
000097D8                            loc_7BCE:
000097D8 7800                       		moveq	#0,d4
000097DA 181A                       		move.b	(a2)+,d4
000097DC ED4C                       		lsl.w	#6,d4
000097DE 0684 00FF D000             		addi.l	#v_objspace&$FFFFFF,d4
000097E4 2244                       		movea.l	d4,a1
000097E6 7800                       		moveq	#0,d4
000097E8 1829 003C                  		move.b	$3C(a1),d4
000097EC 2A04                       		move.l	d4,d5
000097EE C9C0                       		muls.w	d0,d4
000097F0 E084                       		asr.l	#8,d4
000097F2 CBC1                       		muls.w	d1,d5
000097F4 E085                       		asr.l	#8,d5
000097F6 D842                       		add.w	d2,d4
000097F8 DA43                       		add.w	d3,d5
000097FA 3344 000C                  		move.w	d4,obY(a1)
000097FE 3345 0008                  		move.w	d5,obX(a1)
00009802 51CE FFD4                  		dbf	d6,loc_7BCE
00009806 4E75                       		rts	
00009808                            ; End of function Swing_Move2
00009808                            
00009808                            ; ===========================================================================
00009808                            
00009808                            Swing_ChkDel:
00009826 4E75                       		rts	
00009828                            ; ===========================================================================
00009828                            
00009828                            Swing_DelAll:
00009828 7400                       		moveq	#0,d2
0000982A 45E8 0028                  		lea	obSubtype(a0),a2
0000982E 141A                       		move.b	(a2)+,d2
00009830                            
00009830                            Swing_DelLoop:
00009830 7000                       		moveq	#0,d0
00009832 101A                       		move.b	(a2)+,d0
00009834 ED48                       		lsl.w	#6,d0
00009836 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
0000983C 2240                       		movea.l	d0,a1
0000983E 6100 0000                  		bsr.w	DeleteChild
00009842 51CA FFEC                  		dbf	d2,Swing_DelLoop ; repeat for length of	chain
00009846 4E75                       		rts	
00009848                            ; ===========================================================================
00009848                            
00009848                            Swing_Delete:	; Routine 6, 8
00009848 6100 0000                  		bsr.w	DeleteObject
0000984C 4E75                       		rts	
0000984E                            ; ===========================================================================
0000984E                            
0000984E                            Swing_Display:	; Routine $A
0000984E 6000 0000                  		bra.w	DisplaySprite
0000984E 6000 0000                  		bra.w	DisplaySprite
00009852                            Map_Swing_GHZ:	include	"_maps\Swinging Platforms (GHZ).asm"
00009852                            ; ---------------------------------------------------------------------------
00009852                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00009852                            ; ---------------------------------------------------------------------------
00009852                            Map_Swing_GHZ_internal:
00009852 0000                       		dc.w @block-Map_Swing_GHZ_internal
00009854 0000                       		dc.w @chain-Map_Swing_GHZ_internal
00009856 0000                       		dc.w @anchor-Map_Swing_GHZ_internal
00009858 02                         @block:		dc.b 2
00009859 F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
0000985E F809 0004 00               		dc.b $F8, 9, 0,	4, 0
00009863 01                         @chain:		dc.b 1
00009864 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00009869 01                         @anchor:	dc.b 1
0000986A F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
00009870 00                         		even
00009870 00                         		even
00009870                            Map_Swing_SLZ:	include	"_maps\Swinging Platforms (SLZ).asm"
00009870                            ; ---------------------------------------------------------------------------
00009870                            ; Sprite mappings - SLZ	swinging platforms
00009870                            ; ---------------------------------------------------------------------------
00009870                            Map_Swing_SLZ_internal:
00009870 0000                       		dc.w @block-Map_Swing_SLZ_internal
00009872 0000                       		dc.w @chain-Map_Swing_SLZ_internal
00009874 0000                       		dc.w @anchor-Map_Swing_SLZ_internal
00009876 08                         @block:		dc.b 8
00009877 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000987C F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
00009881 F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
00009886 F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
0000988B 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
00009890 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
00009895 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
0000989A 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
0000989F 01                         @chain:		dc.b 1
000098A0 F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
000098A5 01                         @anchor:	dc.b 1
000098A6 F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
000098AC 00                         		even
000098AC 00                         		even
000098AC                            		include	"_incObj\17 Spiked Pole Helix.asm"
000098AC                            ; ---------------------------------------------------------------------------
000098AC                            ; Object 17 - helix of spikes on a pole	(GHZ)
000098AC                            ; ---------------------------------------------------------------------------
000098AC                            
000098AC                            Helix:
000098AC 7000                       		moveq	#0,d0
000098AE 1028 0024                  		move.b	obRoutine(a0),d0
000098B2 323B 0000                  		move.w	Hel_Index(pc,d0.w),d1
000098B6 4EFB 1000                  		jmp	Hel_Index(pc,d1.w)
000098BA                            ; ===========================================================================
000098BA 0000                       Hel_Index:	dc.w Hel_Main-Hel_Index
000098BC 0000                       		dc.w Hel_Action-Hel_Index
000098BE 0000                       		dc.w Hel_Action-Hel_Index
000098C0 0000                       		dc.w Hel_Delete-Hel_Index
000098C2 0000                       		dc.w Hel_Display-Hel_Index
000098C4                            
000098C4 =0000003E                  hel_frame:	equ $3E		; start frame (different for each spike)
000098C4                            
000098C4                            ;		$29-38 are used for child object addresses
000098C4                            ; ===========================================================================
000098C4                            
000098C4                            Hel_Main:	; Routine 0
000098C4 5428 0024                  		addq.b	#2,obRoutine(a0)
000098C8 217C 0000 0000 0004        		move.l	#Map_Hel,obMap(a0)
000098D0 317C 4398 0002             		move.w	#$4398,obGfx(a0)
000098D6 117C 0007 0022             		move.b	#7,obStatus(a0)
000098DC 117C 0004 0001             		move.b	#4,obRender(a0)
000098E2 317C 0180 0018             		move.w	#$180,obPriority(a0)
000098E8 117C 0008 0014             		move.b	#8,obActWid(a0)
000098EE 3428 000C                  		move.w	obY(a0),d2
000098F2 3628 0008                  		move.w	obX(a0),d3
000098F6 1810                       		move.b	0(a0),d4
000098F8 45E8 0028                  		lea	obSubtype(a0),a2 ; move helix length to a2
000098FC 7200                       		moveq	#0,d1
000098FE 1212                       		move.b	(a2),d1		; move helix length to d1
00009900 14FC 0000                  		move.b	#0,(a2)+	; clear subtype
00009904 3001                       		move.w	d1,d0
00009906 E248                       		lsr.w	#1,d0
00009908 E948                       		lsl.w	#4,d0
0000990A 9640                       		sub.w	d0,d3		; d3 is x-axis position of leftmost spike
0000990C 5501                       		subq.b	#2,d1
0000990E 6500                       		bcs.s	Hel_Action	; skip to action if length is only 1
00009910 7C00                       		moveq	#0,d6
00009912                            
00009912                            Hel_Build:
00009912 6100 0000                  		bsr.w	FindFreeObj
00009916 6600                       		bne.s	Hel_Action
00009918 5228 0028                  		addq.b	#1,obSubtype(a0)
0000991C 3A09                       		move.w	a1,d5
0000991E 0445 D000                  		subi.w	#$D000,d5
00009922 EC4D                       		lsr.w	#6,d5
00009924 0245 007F                  		andi.w	#$7F,d5
00009928 14C5                       		move.b	d5,(a2)+	; copy child address to parent RAM
0000992A 137C 0008 0024             		move.b	#8,obRoutine(a1)
00009930 1284                       		move.b	d4,0(a1)
00009932 3342 000C                  		move.w	d2,ObY(a1)
00009936 3343 0008                  		move.w	d3,obX(a1)
0000993A 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
00009940 337C 4398 0002             		move.w	#$4398,obGfx(a1)
00009946 137C 0004 0001             		move.b	#4,obRender(a1)
0000994C 337C 0180 0018             		move.w	#$180,obPriority(a1)
00009952 137C 0008 0014             		move.b	#8,obActWid(a1)
00009958 1346 003E                  		move.b	d6,hel_frame(a1)
0000995C 5206                       		addq.b	#1,d6
0000995E 0206 0007                  		andi.b	#7,d6
00009962 0643 0010                  		addi.w	#$10,d3
00009966 B668 0008                  		cmp.w	obX(a0),d3	; is this spike in the centre?
0000996A 6600                       		bne.s	Hel_NotCentre	; if not, branch
0000996C                            
0000996C 1146 003E                  		move.b	d6,hel_frame(a0) ; set parent spike frame
00009970 5206                       		addq.b	#1,d6
00009972 0206 0007                  		andi.b	#7,d6
00009976 0643 0010                  		addi.w	#$10,d3		; skip to next spike
0000997A 5228 0028                  		addq.b	#1,obSubtype(a0)
0000997E                            
0000997E                            	Hel_NotCentre:
0000997E 51C9 FF92                  		dbf	d1,Hel_Build ; repeat d1 times (helix length)
00009982                            
00009982                            Hel_Action:	; Routine 2, 4
00009982 6100 0000                  		bsr.w	Hel_RotateSpikes
00009986 6100 0000                  		bsr.w	DisplaySprite
0000998A 6000 0000                  		bra.w	Hel_ChkDel
0000998E                            
0000998E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000998E                            
0000998E                            
0000998E                            Hel_RotateSpikes:
0000998E 1038 FEC1                  		move.b	(v_ani0_frame).w,d0
00009992 117C 0000 0020             		move.b	#0,obColType(a0) ; make object harmless
00009998 D028 003E                  		add.b	hel_frame(a0),d0
0000999C 0200 0007                  		andi.b	#7,d0
000099A0 1140 001A                  		move.b	d0,obFrame(a0)	; change current frame
000099A4 6600                       		bne.s	locret_7DA6
000099A6 117C 0084 0020             		move.b	#$84,obColType(a0) ; make object harmful
000099AC                            
000099AC                            locret_7DA6:
000099AC 4E75                       		rts	
000099AE                            ; End of function Hel_RotateSpikes
000099AE                            
000099AE                            ; ===========================================================================
000099AE                            
000099AE                            Hel_ChkDel:
000099CC 4E75                       		rts	
000099CE                            ; ===========================================================================
000099CE                            
000099CE                            Hel_DelAll:
000099CE 7400                       		moveq	#0,d2
000099D0 45E8 0028                  		lea	obSubtype(a0),a2 ; move helix length to a2
000099D4 141A                       		move.b	(a2)+,d2	; move helix length to d2
000099D6 5502                       		subq.b	#2,d2
000099D8 6500                       		bcs.s	Hel_Delete
000099DA                            
000099DA                            	Hel_DelLoop:
000099DA 7000                       		moveq	#0,d0
000099DC 101A                       		move.b	(a2)+,d0
000099DE ED48                       		lsl.w	#6,d0
000099E0 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
000099E6 2240                       		movea.l	d0,a1		; get child address
000099E8 6100 0000                  		bsr.w	DeleteChild	; delete object
000099EC 51CA FFEC                  		dbf	d2,Hel_DelLoop ; repeat d2 times (helix length)
000099F0                            
000099F0                            Hel_Delete:	; Routine 6
000099F0 6100 0000                  		bsr.w	DeleteObject
000099F4 4E75                       		rts	
000099F6                            ; ===========================================================================
000099F6                            
000099F6                            Hel_Display:	; Routine 8
000099F6 6100 FF96                  		bsr.w	Hel_RotateSpikes
000099FA 6000 0000                  		bra.w	DisplaySprite
000099FA 6000 0000                  		bra.w	DisplaySprite
000099FE                            Map_Hel:	include	"_maps\Spiked Pole Helix.asm"
000099FE                            ; ---------------------------------------------------------------------------
000099FE                            ; Sprite mappings - helix of spikes on a pole (GHZ)
000099FE                            ; ---------------------------------------------------------------------------
000099FE                            Map_Hel_internal:
000099FE 0000                       		dc.w byte_7E08-Map_Hel_internal
00009A00 0000                       		dc.w byte_7E0E-Map_Hel_internal
00009A02 0000                       		dc.w byte_7E14-Map_Hel_internal
00009A04 0000                       		dc.w byte_7E1A-Map_Hel_internal
00009A06 0000                       		dc.w byte_7E20-Map_Hel_internal
00009A08 0000                       		dc.w byte_7E26-Map_Hel_internal
00009A0A 0000                       		dc.w byte_7E2E-Map_Hel_internal
00009A0C 0000                       		dc.w byte_7E2C-Map_Hel_internal
00009A0E 01                         byte_7E08:	dc.b 1
00009A0F F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC	; points straight up (harmful)
00009A14 01                         byte_7E0E:	dc.b 1
00009A15 F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8	; 45 degree
00009A1A 01                         byte_7E14:	dc.b 1
00009A1B F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8	; 90 degree
00009A20 01                         byte_7E1A:	dc.b 1
00009A21 FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8	; 45 degree
00009A26 01                         byte_7E20:	dc.b 1
00009A27 0001 000E FC               		dc.b 0,	1, 0, $E, $FC	; straight down
00009A2C 01                         byte_7E26:	dc.b 1
00009A2D 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD	; 45 degree
00009A32 01                         byte_7E2C:	dc.b 1
00009A33 F4                         		dc.b $F4
00009A34                            byte_7E2E:	; reads the 0 below	; not visible
00009A34 0000 11FD                  		dc.b 0, 0,	$11, $FD ; 45 degree
00009A38                            		even
00009A38                            		even
00009A38                            		include	"_incObj\18 Platforms.asm"
00009A38                            ; ---------------------------------------------------------------------------
00009A38                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
00009A38                            ; ---------------------------------------------------------------------------
00009A38                            
00009A38                            BasicPlatform:
00009A38 7000                       		moveq	#0,d0
00009A3A 1028 0024                  		move.b	obRoutine(a0),d0
00009A3E 323B 0000                  		move.w	Plat_Index(pc,d0.w),d1
00009A42 4EFB 1000                  		jmp	Plat_Index(pc,d1.w)
00009A46                            ; ===========================================================================
00009A46 0000                       Plat_Index:	dc.w Plat_Main-Plat_Index
00009A48 0000                       		dc.w Plat_Solid-Plat_Index
00009A4A 0000                       		dc.w Plat_Action2-Plat_Index
00009A4C 0000                       		dc.w Plat_Delete-Plat_Index
00009A4E 0000                       		dc.w Plat_Action-Plat_Index
00009A50                            ; ===========================================================================
00009A50                            
00009A50                            Plat_Main:	; Routine 0
00009A50 5428 0024                  		addq.b	#2,obRoutine(a0)
00009A54 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00009A5A 217C 0000 0000 0004        		move.l	#Map_Plat_GHZ,obMap(a0)
00009A62 117C 0020 0014             		move.b	#$20,obActWid(a0)
00009A68 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w ; check if level is SYZ
00009A6E 6600                       		bne.s	@notSYZ
00009A70                            
00009A70 217C 0000 0000 0004        		move.l	#Map_Plat_SYZ,obMap(a0) ; SYZ specific code
00009A78 117C 0020 0014             		move.b	#$20,obActWid(a0)
00009A7E                            
00009A7E                            	@notSYZ:
00009A7E 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
00009A84 6600                       		bne.s	@notSLZ
00009A86 217C 0000 0000 0004        		move.l	#Map_Plat_SLZ,obMap(a0) ; SLZ specific code
00009A8E 117C 0020 0014             		move.b	#$20,obActWid(a0)
00009A94 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00009A9A 117C 0003 0028             		move.b	#3,obSubtype(a0)
00009AA0                            
00009AA0                            	@notSLZ:
00009AA0 117C 0004 0001             		move.b	#4,obRender(a0)
00009AA6 317C 0200 0018             		move.w	#$200,obPriority(a0)
00009AAC 3168 000C 002C             		move.w	obY(a0),$2C(a0)
00009AB2 3168 000C 0034             		move.w	obY(a0),$34(a0)
00009AB8 3168 0008 0032             		move.w	obX(a0),$32(a0)
00009ABE 317C 0080 0026             		move.w	#$80,obAngle(a0)
00009AC4 7200                       		moveq	#0,d1
00009AC6 1028 0028                  		move.b	obSubtype(a0),d0
00009ACA 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
00009ACE 6600                       		bne.s	@setframe	; if not, branch
00009AD0 5201                       		addq.b	#1,d1		; use frame #1
00009AD2 117C 0020 0014             		move.b	#$20,obActWid(a0) ; set width
00009AD8                            
00009AD8                            	@setframe:
00009AD8 1141 001A                  		move.b	d1,obFrame(a0)	; set frame to d1
00009ADC                            
00009ADC                            Plat_Solid:	; Routine 2
00009ADC 4A28 0038                  		tst.b	$38(a0)
00009AE0 6700                       		beq.s	loc_7EE0
00009AE2 5928 0038                  		subq.b	#4,$38(a0)
00009AE6                            
00009AE6                            	loc_7EE0:
00009AE6 7200                       		moveq	#0,d1
00009AE8 1228 0014                  		move.b	obActWid(a0),d1
00009AEC 6100 F56C                  		bsr.w	PlatformObject
00009AF0                            
00009AF0                            Plat_Action:	; Routine 8
00009AF0 6100 0000                  		bsr.w	Plat_Move
00009AF4 6100 0000                  		bsr.w	Plat_Nudge
00009AF8 6100 0000                  		bsr.w	DisplaySprite
00009AFC 6000 0000                  		bra.w	Plat_ChkDel
00009B00                            ; ===========================================================================
00009B00                            
00009B00                            Plat_Action2:	; Routine 4
00009B00 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
00009B06 6700                       		beq.s	loc_7F06
00009B08 5828 0038                  		addq.b	#4,$38(a0)
00009B0C                            
00009B0C                            	loc_7F06:
00009B0C 7200                       		moveq	#0,d1
00009B0E 1228 0014                  		move.b	obActWid(a0),d1
00009B12 6100 F6BA                  		bsr.w	ExitPlatform
00009B16 3F28 0008                  		move.w	obX(a0),-(sp)
00009B1A 6100 0000                  		bsr.w	Plat_Move
00009B1E 6100 0000                  		bsr.w	Plat_Nudge
00009B22 341F                       		move.w	(sp)+,d2
00009B24 6100 FC12                  		bsr.w	MvSonicOnPtfm2
00009B28 6100 0000                  		bsr.w	DisplaySprite
00009B2C 6000 0000                  		bra.w	Plat_ChkDel
00009B30                            
00009B30 4E75                       		rts
00009B32                            
00009B32                            ; ---------------------------------------------------------------------------
00009B32                            ; Subroutine to	move platform slightly when you	stand on it
00009B32                            ; ---------------------------------------------------------------------------
00009B32                            
00009B32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009B32                            
00009B32                            
00009B32                            Plat_Nudge:
00009B32 1028 0038                  		move.b	$38(a0),d0
00009B36 6100 9EFA                  		bsr.w	CalcSine
00009B3A 323C 0400                  		move.w	#$400,d1
00009B3E C1C1                       		muls.w	d1,d0
00009B40 4840                       		swap	d0
00009B42 D068 002C                  		add.w	$2C(a0),d0
00009B46 3140 000C                  		move.w	d0,obY(a0)
00009B4A 4E75                       		rts	
00009B4C                            ; End of function Plat_Nudge
00009B4C                            
00009B4C                            ; ---------------------------------------------------------------------------
00009B4C                            ; Subroutine to	move platforms
00009B4C                            ; ---------------------------------------------------------------------------
00009B4C                            
00009B4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009B4C                            
00009B4C                            
00009B4C                            Plat_Move:
00009B4C 7000                       		moveq	#0,d0
00009B4E 1028 0028                  		move.b	obSubtype(a0),d0
00009B52 0240 000F                  		andi.w	#$F,d0
00009B56 D040                       		add.w	d0,d0
00009B58 323B 0000                  		move.w	@index(pc,d0.w),d1
00009B5C 4EFB 1000                  		jmp	@index(pc,d1.w)
00009B60                            ; End of function Plat_Move
00009B60                            
00009B60                            ; ===========================================================================
00009B60 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00009B64 0000 0000                  		dc.w @type02-@index, @type03-@index
00009B68 0000 0000                  		dc.w @type04-@index, @type05-@index
00009B6C 0000 0000                  		dc.w @type06-@index, @type07-@index
00009B70 0000 0000                  		dc.w @type08-@index, @type00-@index
00009B74 0000 0000                  		dc.w @type0A-@index, @type0B-@index
00009B78 0000                       		dc.w @type0C-@index
00009B7A                            ; ===========================================================================
00009B7A                            
00009B7A                            @type00:
00009B7A 4E75                       		rts			; platform 00 doesn't move
00009B7C                            ; ===========================================================================
00009B7C                            
00009B7C                            @type05:
00009B7C 3028 0032                  		move.w	$32(a0),d0
00009B80 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009B84 4401                       		neg.b	d1		; reverse platform-motion
00009B86 0601 0040                  		addi.b	#$40,d1
00009B8A 6000                       		bra.s	@type01_move
00009B8C                            ; ===========================================================================
00009B8C                            
00009B8C                            @type01:
00009B8C 3028 0032                  		move.w	$32(a0),d0
00009B90 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009B94 0401 0040                  		subi.b	#$40,d1
00009B98                            
00009B98                            	@type01_move:
00009B98 4881                       		ext.w	d1
00009B9A D041                       		add.w	d1,d0
00009B9C 3140 0008                  		move.w	d0,obX(a0)	; change position on x-axis
00009BA0 6000 0000                  		bra.w	@chgmotion
00009BA4                            ; ===========================================================================
00009BA4                            
00009BA4                            @type0C:
00009BA4 3028 0034                  		move.w	$34(a0),d0
00009BA8 1238 FE6C                  		move.b	(v_oscillate+$E).w,d1 ; load platform-motion variable
00009BAC 4401                       		neg.b	d1		; reverse platform-motion
00009BAE 0601 0030                  		addi.b	#$30,d1
00009BB2 6000                       		bra.s	@type02_move
00009BB4                            ; ===========================================================================
00009BB4                            
00009BB4                            @type0B:
00009BB4 3028 0034                  		move.w	$34(a0),d0
00009BB8 1238 FE6C                  		move.b	(v_oscillate+$E).w,d1 ; load platform-motion variable
00009BBC 0401 0030                  		subi.b	#$30,d1
00009BC0 6000                       		bra.s	@type02_move
00009BC2                            ; ===========================================================================
00009BC2                            
00009BC2                            @type06:
00009BC2 3028 0034                  		move.w	$34(a0),d0
00009BC6 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009BCA 4401                       		neg.b	d1		; reverse platform-motion
00009BCC 0601 0040                  		addi.b	#$40,d1
00009BD0 6000                       		bra.s	@type02_move
00009BD2                            ; ===========================================================================
00009BD2                            
00009BD2                            @type02:
00009BD2 3028 0034                  		move.w	$34(a0),d0
00009BD6 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009BDA 0401 0040                  		subi.b	#$40,d1
00009BDE                            
00009BDE                            	@type02_move:
00009BDE 4881                       		ext.w	d1
00009BE0 D041                       		add.w	d1,d0
00009BE2 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00009BE6 6000 0000                  		bra.w	@chgmotion
00009BEA                            ; ===========================================================================
00009BEA                            
00009BEA                            @type03:
00009BEA 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00009BEE 6600                       		bne.s	@type03_wait	; if yes, branch
00009BF0 0828 0003 0022             		btst	#3,obStatus(a0)	; is Sonic standing on the platform?
00009BF6 6700                       		beq.s	@type03_nomove	; if not, branch
00009BF8 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
00009BFE                            
00009BFE                            	@type03_nomove:
00009BFE 4E75                       		rts	
00009C00                            
00009C00                            	@type03_wait:
00009C00 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
00009C04 66F8                       		bne.s	@type03_nomove	; if time is > 0, branch
00009C06 317C 0020 003A             		move.w	#32,$3A(a0)
00009C0C 5228 0028                  		addq.b	#1,obSubtype(a0) ; change to type 04 (falling)
00009C10 4E75                       		rts	
00009C12                            ; ===========================================================================
00009C12                            
00009C12                            @type04:
00009C12 4A68 003A                  		tst.w	$3A(a0)
00009C16 6700                       		beq.s	@loc_8048
00009C18 5368 003A                  		subq.w	#1,$3A(a0)
00009C1C 6600                       		bne.s	@loc_8048
00009C1E 0828 0003 0022             		btst	#3,obStatus(a0)
00009C24 6700                       		beq.s	@loc_8042
00009C26 08E9 0001 0022             		bset	#1,obStatus(a1)
00009C2C 08A9 0003 0022             		bclr	#3,obStatus(a1)
00009C32 137C 0002 0024             		move.b	#2,obRoutine(a1)
00009C38 08A8 0003 0022             		bclr	#3,obStatus(a0)
00009C3E 4228 0025                  		clr.b	$25(a0)
00009C42 3368 0012 0012             		move.w	obVelY(a0),obVelY(a1)
00009C48                            
00009C48                            	@loc_8042:
00009C48 117C 0008 0024             		move.b	#8,obRoutine(a0)
00009C4E                            
00009C4E                            	@loc_8048:
00009C4E 2628 002C                  		move.l	$2C(a0),d3
00009C52 3028 0012                  		move.w	obVelY(a0),d0
00009C56 48C0                       		ext.l	d0
00009C58 E180                       		asl.l	#8,d0
00009C5A D680                       		add.l	d0,d3
00009C5C 2143 002C                  		move.l	d3,$2C(a0)
00009C60 0668 0038 0012             		addi.w	#$38,obVelY(a0)
00009C66 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00009C6A 0640 00E0                  		addi.w	#$E0,d0
00009C6E B068 002C                  		cmp.w	$2C(a0),d0
00009C72 6400                       		bcc.s	@locret_8074
00009C74 117C 0006 0024             		move.b	#6,obRoutine(a0)
00009C7A                            
00009C7A                            	@locret_8074:
00009C7A 4E75                       		rts	
00009C7C                            ; ===========================================================================
00009C7C                            
00009C7C                            @type07:
00009C7C 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00009C80 6600                       		bne.s	@type07_wait	; if yes, branch
00009C82 45F8 F7E0                  		lea	(f_switch).w,a2	; load switch statuses
00009C86 7000                       		moveq	#0,d0
00009C88 1028 0028                  		move.b	obSubtype(a0),d0 ; move object type ($x7) to d0
00009C8C E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
00009C8E 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
00009C92 6700                       		beq.s	@type07_nomove	; if not, branch
00009C94 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00009C9A                            
00009C9A                            	@type07_nomove:
00009C9A 4E75                       		rts	
00009C9C                            
00009C9C                            	@type07_wait:
00009C9C 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00009CA0 66F8                       		bne.s	@type07_nomove	; if time is > 0, branch
00009CA2 5228 0028                  		addq.b	#1,obSubtype(a0) ; change to type 08
00009CA6 4E75                       		rts	
00009CA8                            ; ===========================================================================
00009CA8                            
00009CA8                            @type08:
00009CA8 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
00009CAC 3028 0034                  		move.w	$34(a0),d0
00009CB0 0440 0200                  		subi.w	#$200,d0
00009CB4 B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
00009CB8 6600                       		bne.s	@type08_nostop	; if not, branch
00009CBA 4228 0028                  		clr.b	obSubtype(a0)	; change to type 00 (stop moving)
00009CBE                            
00009CBE                            	@type08_nostop:
00009CBE 4E75                       		rts	
00009CC0                            ; ===========================================================================
00009CC0                            
00009CC0                            @type0A:
00009CC0 3028 0034                  		move.w	$34(a0),d0
00009CC4 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009CC8 0401 0040                  		subi.b	#$40,d1
00009CCC 4881                       		ext.w	d1
00009CCE E241                       		asr.w	#1,d1
00009CD0 D041                       		add.w	d1,d0
00009CD2 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00009CD6                            
00009CD6                            @chgmotion:
00009CD6 1178 FE78 0026             		move.b	(v_oscillate+$1A).w,$26(a0) ; update platform-movement variable
00009CDC 4E75                       		rts	
00009CDE                            ; ===========================================================================
00009CDE                            
00009CDE                            Plat_ChkDel:
00009CFA 4E75                       		rts	
00009CFC                            ; ===========================================================================
00009CFC                            
00009CFC                            Plat_Delete:	; Routine 6
00009CFC 6000 0000                  		bra.w	DeleteObject
00009CFC 6000 0000                  		bra.w	DeleteObject
00009D00                            Map_Plat_Unused:include	"_maps\Platforms (unused).asm"
00009D00                            ; ---------------------------------------------------------------------------
00009D00                            ; Sprite mappings - unused
00009D00                            ; ---------------------------------------------------------------------------
00009D00                            Map_Plat_Unused_internal:
00009D00 0000                       		dc.w @small-Map_Plat_Unused_internal
00009D02 0000                       		dc.w @large-Map_Plat_Unused_internal
00009D04 02                         @small:		dc.b 2
00009D05 F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
00009D0A F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
00009D0F 0A                         @large:		dc.b $A
00009D10 F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
00009D15 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
00009D1A 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
00009D1F 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
00009D24 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
00009D29 F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
00009D2E 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
00009D33 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
00009D38 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
00009D3D 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
00009D42                            		even
00009D42                            		even
00009D42                            Map_Plat_GHZ:	include	"_maps\Platforms (GHZ).asm"
00009D42                            ; ---------------------------------------------------------------------------
00009D42                            ; Sprite mappings - GHZ	platforms
00009D42                            ; ---------------------------------------------------------------------------
00009D42                            Map_Plat_GHZ_internal:
00009D42 0000                       		dc.w @small-Map_Plat_GHZ_internal
00009D44 0000                       		dc.w @large-Map_Plat_GHZ_internal
00009D46 04                         @small:		dc.b 4
00009D47 F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
00009D4C F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
00009D51 F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
00009D56 F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
00009D5B 0A                         @large:		dc.b $A
00009D5C F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
00009D61 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
00009D66 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
00009D6B 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
00009D70 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
00009D75 F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
00009D7A 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
00009D7F 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
00009D84 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
00009D89 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
00009D8E                            		even
00009D8E                            		even
00009D8E                            Map_Plat_SYZ:	include	"_maps\Platforms (SYZ).asm"
00009D8E                            ; ---------------------------------------------------------------------------
00009D8E                            ; Sprite mappings - SYZ	platforms
00009D8E                            ; ---------------------------------------------------------------------------
00009D8E                            Map_Plat_SYZ_internal:
00009D8E 0000                       		dc.w @platform-Map_Plat_SYZ_internal
00009D90 03                         @platform:	dc.b 3
00009D91 F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
00009D96 F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
00009D9B F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
00009DA0                            		even
00009DA0                            		even
00009DA0                            Map_Plat_SLZ:	include	"_maps\Platforms (SLZ).asm"
00009DA0                            ; ---------------------------------------------------------------------------
00009DA0                            ; Sprite mappings - SLZ	platforms
00009DA0                            ; ---------------------------------------------------------------------------
00009DA0                            Map_Plat_SLZ_internal:
00009DA0 0000                       		dc.w @platform-Map_Plat_SLZ_internal
00009DA2 02                         @platform:	dc.b 2
00009DA3 F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
00009DA8 F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
00009DAE 00                         		even
00009DAE 00                         		even
00009DAE                            Map_GBall:	include	"_maps\GHZ Ball.asm"
00009DAE                            ; ---------------------------------------------------------------------------
00009DAE                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00009DAE                            ; ---------------------------------------------------------------------------
00009DAE                            Map_GBall_internal:
00009DAE 0000                       		dc.w @shiny-Map_GBall_internal
00009DB0 0000                       		dc.w @check1-Map_GBall_internal
00009DB2 0000                       		dc.w @check2-Map_GBall_internal
00009DB4 0000                       		dc.w @check3-Map_GBall_internal
00009DB6 06                         @shiny:		dc.b 6
00009DB7 F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
00009DBC F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
00009DC1 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00009DC6 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00009DCB 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00009DD0 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00009DD5 04                         @check1:	dc.b 4
00009DD6 E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
00009DDB E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
00009DE0 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
00009DE5 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
00009DEA 04                         @check2:	dc.b 4
00009DEB E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00009DF0 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00009DF5 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00009DFA 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00009DFF 04                         @check3:	dc.b 4
00009E00 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00009E05 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00009E0A 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00009E0F 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00009E14                            		even
00009E14                            		even
00009E14                            		include	"_incObj\1A Collapsing Ledge (part 1).asm"
00009E14                            ; ---------------------------------------------------------------------------
00009E14                            ; Object 1A - GHZ collapsing ledge
00009E14                            ; ---------------------------------------------------------------------------
00009E14                            
00009E14                            CollapseLedge:
00009E14 7000                       		moveq	#0,d0
00009E16 1028 0024                  		move.b	obRoutine(a0),d0
00009E1A 323B 0000                  		move.w	Ledge_Index(pc,d0.w),d1
00009E1E 4EFB 1000                  		jmp	Ledge_Index(pc,d1.w)
00009E22                            ; ===========================================================================
00009E22 0000 0000                  Ledge_Index:	dc.w Ledge_Main-Ledge_Index, Ledge_Touch-Ledge_Index
00009E26 0000 0000                  		dc.w Ledge_Collapse-Ledge_Index, Ledge_Display-Ledge_Index
00009E2A 0000 0000                  		dc.w Ledge_Delete-Ledge_Index, Ledge_WalkOff-Ledge_Index
00009E2E                            
00009E2E =00000038                  ledge_timedelay:	equ $38		; time between touching the ledge and it collapsing
00009E2E =0000003A                  ledge_collapse_flag:	equ $3A		; collapse flag
00009E2E                            ; ===========================================================================
00009E2E                            
00009E2E                            Ledge_Main:	; Routine 0
00009E2E 5428 0024                  		addq.b	#2,obRoutine(a0)
00009E32 217C 0000 0000 0004        		move.l	#Map_Ledge,obMap(a0)
00009E3A 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00009E40 0028 0004 0001             		ori.b	#4,obRender(a0)
00009E46 317C 0200 0018             		move.w	#$200,obPriority(a0)
00009E4C 117C 0007 0038             		move.b	#7,ledge_timedelay(a0) ; set time delay for collapse
00009E52 117C 0064 0014             		move.b	#$64,obActWid(a0)
00009E58 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
00009E5E 117C 0038 0016             		move.b	#$38,obHeight(a0)
00009E64 08E8 0004 0001             		bset	#4,obRender(a0)
00009E6A                            
00009E6A                            Ledge_Touch:	; Routine 2
00009E6A 4A28 003A                  		tst.b	ledge_collapse_flag(a0)	; is ledge collapsing?
00009E6E 6700                       		beq.s	@slope		; if not, branch
00009E70 4A28 0038                  		tst.b	ledge_timedelay(a0)	; has time reached zero?
00009E74 6700 0000                  		beq.w	Ledge_Fragment	; if yes, branch
00009E78 5328 0038                  		subq.b	#1,ledge_timedelay(a0) ; subtract 1 from time
00009E7C                            
00009E7C                            	@slope:
00009E7C 323C 0030                  		move.w	#$30,d1
00009E80 45F9 0000 0000             		lea	(Ledge_SlopeData).l,a2
00009E86 6100 F2A6                  		bsr.w	SlopeObject
00009E8A 6000 0000                  		bra.w	RememberState
00009E8E                            ; ===========================================================================
00009E8E                            
00009E8E                            Ledge_Collapse:	; Routine 4
00009E8E 4A28 0038                  		tst.b	ledge_timedelay(a0)
00009E92 6700 0000                  		beq.w	loc_847A
00009E96 117C 0001 003A             		move.b	#1,ledge_collapse_flag(a0)	; set collapse flag
00009E9C 5328 0038                  		subq.b	#1,ledge_timedelay(a0)
00009EA0                            
00009EA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009EA0                            
00009EA0                            
00009EA0                            Ledge_WalkOff:	; Routine $A
00009EA0 323C 0030                  		move.w	#$30,d1
00009EA4 6100 F328                  		bsr.w	ExitPlatform
00009EA8 323C 0030                  		move.w	#$30,d1
00009EAC 45F9 0000 0000             		lea	(Ledge_SlopeData).l,a2
00009EB2 3428 0008                  		move.w	obX(a0),d2
00009EB6 6100 0000                  		bsr.w	SlopeObject2
00009EBA 6000 0000                  		bra.w	RememberState
00009EBE                            ; End of function Ledge_WalkOff
00009EBE                            
00009EBE                            ; ===========================================================================
00009EBE                            
00009EBE                            Ledge_Display:	; Routine 6
00009EBE 4A28 0038                  		tst.b	ledge_timedelay(a0)	; has time delay reached zero?
00009EC2 6700                       		beq.s	Ledge_TimeZero	; if yes, branch
00009EC4 4A28 003A                  		tst.b	ledge_collapse_flag(a0)	; is ledge collapsing?
00009EC8 6600 0000                  		bne.w	loc_82D0	; if yes, branch
00009ECC 5328 0038                  		subq.b	#1,ledge_timedelay(a0) ; subtract 1 from time
00009ED0 6000 0000                  		bra.w	DisplaySprite
00009ED4                            ; ===========================================================================
00009ED4                            
00009ED4                            loc_82D0:
00009ED4 5328 0038                  		subq.b	#1,ledge_timedelay(a0)
00009ED8 6100 FFC6                  		bsr.w	Ledge_WalkOff
00009EDC 43F8 D000                  		lea	(v_player).w,a1
00009EE0 0829 0003 0022             		btst	#3,obStatus(a1)
00009EE6 6700                       		beq.s	loc_82FC
00009EE8 4A28 0038                  		tst.b	ledge_timedelay(a0)
00009EEC 6600                       		bne.s	locret_8308
00009EEE 08A9 0003 0022             		bclr	#3,obStatus(a1)
00009EF4 08A9 0005 0022             		bclr	#5,obStatus(a1)
00009EFA 137C 0001 001D             		move.b	#1,obNextAni(a1)
00009F00                            
00009F00                            loc_82FC:
00009F00 117C 0000 003A             		move.b	#0,ledge_collapse_flag(a0)
00009F06 117C 0006 0024             		move.b	#6,obRoutine(a0) ; run "Ledge_Display" routine
00009F0C                            
00009F0C                            locret_8308:
00009F0C 4E75                       		rts	
00009F0E                            ; ===========================================================================
00009F0E                            
00009F0E                            Ledge_TimeZero:
00009F0E 6100 0000                  		bsr.w	ObjectFall
00009F12 6100 0000                  		bsr.w	DisplaySprite
00009F16 4A28 0001                  		tst.b	obRender(a0)
00009F1A 6A00                       		bpl.s	Ledge_Delete
00009F1C 4E75                       		rts	
00009F1E                            ; ===========================================================================
00009F1E                            
00009F1E                            Ledge_Delete:	; Routine 8
00009F1E 6100 0000                  		bsr.w	DeleteObject
00009F22 4E75                       		rts	
00009F22 4E75                       		rts	
00009F24                            		include	"_incObj\53 Collapsing Floors.asm"
00009F24                            ; ---------------------------------------------------------------------------
00009F24                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
00009F24                            ; ---------------------------------------------------------------------------
00009F24                            
00009F24                            CollapseFloor:
00009F24 7000                       		moveq	#0,d0
00009F26 1028 0024                  		move.b	obRoutine(a0),d0
00009F2A 323B 0000                  		move.w	CFlo_Index(pc,d0.w),d1
00009F2E 4EFB 1000                  		jmp	CFlo_Index(pc,d1.w)
00009F32                            ; ===========================================================================
00009F32 0000 0000                  CFlo_Index:	dc.w CFlo_Main-CFlo_Index, CFlo_Touch-CFlo_Index
00009F36 0000 0000                  		dc.w CFlo_Collapse-CFlo_Index, CFlo_Display-CFlo_Index
00009F3A 0000 0000                  		dc.w CFlo_Delete-CFlo_Index, CFlo_WalkOff-CFlo_Index
00009F3E                            
00009F3E =00000038                  cflo_timedelay:		equ $38
00009F3E =0000003A                  cflo_collapse_flag:	equ $3A
00009F3E                            ; ===========================================================================
00009F3E                            
00009F3E                            CFlo_Main:	; Routine 0
00009F3E 5428 0024                  		addq.b	#2,obRoutine(a0)
00009F42 217C 0000 0000 0004        		move.l	#Map_CFlo,obMap(a0)
00009F4A 317C 42B8 0002             		move.w	#$42B8,obGfx(a0)
00009F50 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
00009F56 6600                       		bne.s	@notSLZ
00009F58                            
00009F58 317C 44E0 0002             		move.w	#$44E0,obGfx(a0) ; SLZ specific code
00009F5E 5428 001A                  		addq.b	#2,obFrame(a0)
00009F62                            
00009F62                            	@notSLZ:
00009F62 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
00009F68 6600                       		bne.s	@notSBZ
00009F6A 317C 43F5 0002             		move.w	#$43F5,obGfx(a0) ; SBZ specific code
00009F70                            
00009F70                            	@notSBZ:
00009F70 0028 0004 0001             		ori.b	#4,obRender(a0)
00009F76 317C 0200 0018             		move.w	#$200,obPriority(a0)
00009F7C 117C 0007 0038             		move.b	#7,cflo_timedelay(a0)
00009F82 117C 0044 0014             		move.b	#$44,obActWid(a0)
00009F88                            
00009F88                            CFlo_Touch:	; Routine 2
00009F88 4A28 003A                  		tst.b	cflo_collapse_flag(a0)	; has Sonic touched the	object?
00009F8C 6700                       		beq.s	@solid		; if not, branch
00009F8E 4A28 0038                  		tst.b	cflo_timedelay(a0)	; has time delay reached zero?
00009F92 6700 0000                  		beq.w	CFlo_Fragment	; if yes, branch
00009F96 5328 0038                  		subq.b	#1,cflo_timedelay(a0) ; subtract 1 from time
00009F9A                            
00009F9A                            	@solid:
00009F9A 323C 0020                  		move.w	#$20,d1
00009F9E 6100 F0BA                  		bsr.w	PlatformObject
00009FA2 4A28 0028                  		tst.b	obSubtype(a0)
00009FA6 6A00                       		bpl.s	@remstate
00009FA8 0829 0003 0022             		btst	#3,obStatus(a1)
00009FAE 6700                       		beq.s	@remstate
00009FB0 08A8 0000 0001             		bclr	#0,obRender(a0)
00009FB6 3029 0008                  		move.w	obX(a1),d0
00009FBA 9068 0008                  		sub.w	obX(a0),d0
00009FBE 6400                       		bcc.s	@remstate
00009FC0 08E8 0000 0001             		bset	#0,obRender(a0)
00009FC6                            
00009FC6                            	@remstate:
00009FC6 6000 0000                  		bra.w	RememberState
00009FCA                            ; ===========================================================================
00009FCA                            
00009FCA                            CFlo_Collapse:	; Routine 4
00009FCA 4A28 0038                  		tst.b	cflo_timedelay(a0)
00009FCE 6700 0000                  		beq.w	loc_8458
00009FD2 117C 0001 003A             		move.b	#1,cflo_collapse_flag(a0)	; set object as	"touched"
00009FD8 5328 0038                  		subq.b	#1,cflo_timedelay(a0)
00009FDC                            
00009FDC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009FDC                            
00009FDC                            
00009FDC                            CFlo_WalkOff:	; Routine $A
00009FDC 323C 0020                  		move.w	#$20,d1
00009FE0 6100 F1EC                  		bsr.w	ExitPlatform
00009FE4 3428 0008                  		move.w	obX(a0),d2
00009FE8 6100 F74E                  		bsr.w	MvSonicOnPtfm2
00009FEC 6000 0000                  		bra.w	RememberState
00009FF0                            ; End of function CFlo_WalkOff
00009FF0                            
00009FF0                            ; ===========================================================================
00009FF0                            
00009FF0                            CFlo_Display:	; Routine 6
00009FF0 4A28 0038                  		tst.b	cflo_timedelay(a0)	; has time delay reached zero?
00009FF4 6700                       		beq.s	CFlo_TimeZero	; if yes, branch
00009FF6 4A28 003A                  		tst.b	cflo_collapse_flag(a0)	; has Sonic touched the	object?
00009FFA 6600 0000                  		bne.w	loc_8402	; if yes, branch
00009FFE 5328 0038                  		subq.b	#1,cflo_timedelay(a0); subtract 1 from time
0000A002 6000 0000                  		bra.w	DisplaySprite
0000A006                            ; ===========================================================================
0000A006                            
0000A006                            loc_8402:
0000A006 5328 0038                  		subq.b	#1,cflo_timedelay(a0)
0000A00A 6100 FFD0                  		bsr.w	CFlo_WalkOff
0000A00E 43F8 D000                  		lea	(v_player).w,a1
0000A012 0829 0003 0022             		btst	#3,obStatus(a1)
0000A018 6700                       		beq.s	loc_842E
0000A01A 4A28 0038                  		tst.b	cflo_timedelay(a0)
0000A01E 6600                       		bne.s	locret_843A
0000A020 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000A026 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000A02C 137C 0001 001D             		move.b	#1,obNextAni(a1)
0000A032                            
0000A032                            loc_842E:
0000A032 117C 0000 003A             		move.b	#0,cflo_collapse_flag(a0)
0000A038 117C 0006 0024             		move.b	#6,obRoutine(a0) ; run "CFlo_Display" routine
0000A03E                            
0000A03E                            locret_843A:
0000A03E 4E75                       		rts	
0000A040                            ; ===========================================================================
0000A040                            
0000A040                            CFlo_TimeZero:
0000A040 6100 0000                  		bsr.w	ObjectFall
0000A044 6100 0000                  		bsr.w	DisplaySprite
0000A048 4A28 0001                  		tst.b	obRender(a0)
0000A04C 6A00                       		bpl.s	CFlo_Delete
0000A04E 4E75                       		rts	
0000A050                            ; ===========================================================================
0000A050                            
0000A050                            CFlo_Delete:	; Routine 8
0000A050 6100 0000                  		bsr.w	DeleteObject
0000A054 4E75                       		rts	
0000A056                            ; ===========================================================================
0000A056                            
0000A056                            CFlo_Fragment:
0000A056 117C 0000 003A             		move.b	#0,cflo_collapse_flag(a0)
0000A05C                            
0000A05C                            loc_8458:
0000A05C 49F9 0000 0000             		lea	(CFlo_Data2).l,a4
0000A062 0828 0000 0028             		btst	#0,obSubtype(a0)
0000A068 6700                       		beq.s	loc_846C
0000A06A 49F9 0000 0000             		lea	(CFlo_Data3).l,a4
0000A070                            
0000A070                            loc_846C:
0000A070 7207                       		moveq	#7,d1
0000A072 5228 001A                  		addq.b	#1,obFrame(a0)
0000A076 6000                       		bra.s	loc_8486
0000A076 6000                       		bra.s	loc_8486
0000A078                            
0000A078                            ; ===========================================================================
0000A078                            
0000A078                            Ledge_Fragment:
0000A078 117C 0000 003A             		move.b	#0,ledge_collapse_flag(a0)
0000A07E                            
0000A07E                            loc_847A:
0000A07E 49F9 0000 0000             		lea	(CFlo_Data1).l,a4
0000A084 7218                       		moveq	#$18,d1
0000A086 5428 001A                  		addq.b	#2,obFrame(a0)
0000A08A                            
0000A08A                            loc_8486:
0000A08A 7000                       		moveq	#0,d0
0000A08C 1028 001A                  		move.b	obFrame(a0),d0
0000A090 D040                       		add.w	d0,d0
0000A092 2668 0004                  		movea.l	obMap(a0),a3
0000A096 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000A09A 524B                       		addq.w	#1,a3
0000A09C 08E8 0005 0001             		bset	#5,obRender(a0)
0000A0A2 1810                       		move.b	0(a0),d4
0000A0A4 1A28 0001                  		move.b	obRender(a0),d5
0000A0A8 2248                       		movea.l	a0,a1
0000A0AA 137C 0006 0024             		move.b	#6,obRoutine(a1)
0000A0B0 1284                       		move.b	d4,0(a1)
0000A0B2 234B 0004                  		move.l	a3,obMap(a1)
0000A0B6 1345 0001                  		move.b	d5,obRender(a1)
0000A0BA 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000A0C0 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000A0C6 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0000A0CC 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0000A0D2 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
0000A0D8 135C 0038                  		move.b	(a4)+,ledge_timedelay(a1)
0000A0DC 5341                       		subq.w	#1,d1
0000A0DE 43F8 D800                  		lea		(v_lvlobjspace).w,a1
0000A0E2 303C 005F                  		move.w	#$5F,d0
0000A0E6                            ; ===========================================================================
0000A0E6                            
0000A0E6                            loc_84AA:
0000A0E6 4A11                       		tst.b	(a1)
0000A0E8 6700                       		beq.s	@cont		
0000A0EA 43E9 0040                  		lea		$40(a1),a1
0000A0EE 51C8 FFF6                  		dbf		d0,loc_84AA	
0000A0F2 6600                       		bne.s	loc_84F2	
0000A0F4                            	@cont:
0000A0F4 5A4B                       		addq.w	#5,a3
0000A0F6                            
0000A0F6                            loc_84B2:
0000A0F6 137C 0006 0024             		move.b	#6,obRoutine(a1)
0000A0FC 1284                       		move.b	d4,0(a1)
0000A0FE 234B 0004                  		move.l	a3,obMap(a1)
0000A102 1345 0001                  		move.b	d5,obRender(a1)
0000A106 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000A10C 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000A112 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0000A118 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0000A11E 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
0000A124 135C 0038                  		move.b	(a4)+,ledge_timedelay(a1)
0000A128 6100 0000                  		bsr.w	DisplaySprite1
0000A12C                            
0000A12C                            loc_84EE:
0000A12C 51C9 FFB8                  		dbf	d1,loc_84AA
0000A130                            
0000A130                            loc_84F2:
0000A130 6100 0000                  		bsr.w	DisplaySprite
0000A13E                            ; ===========================================================================
0000A13E                            ; ---------------------------------------------------------------------------
0000A13E                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
0000A13E                            ; ---------------------------------------------------------------------------
0000A13E 1C18 1410 1A16 120E 0A06+  CFlo_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
0000A14E 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
0000A158 1E16 0E06 1A12 0A02        CFlo_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
0000A160 161E 1A12 060E 0A02        CFlo_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
0000A168                            
0000A168                            ; ---------------------------------------------------------------------------
0000A168                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
0000A168                            ; ---------------------------------------------------------------------------
0000A168                            
0000A168                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A168                            
0000A168                            
0000A168                            SlopeObject2:
0000A168 43F8 D000                  		lea	(v_player).w,a1
0000A16C 0829 0003 0022             		btst	#3,obStatus(a1)
0000A172 6700                       		beq.s	locret_856E
0000A174 3029 0008                  		move.w	obX(a1),d0
0000A178 9068 0008                  		sub.w	obX(a0),d0
0000A17C D041                       		add.w	d1,d0
0000A17E E248                       		lsr.w	#1,d0
0000A180 0828 0000 0001             		btst	#0,obRender(a0)
0000A186 6700                       		beq.s	loc_854E
0000A188 4640                       		not.w	d0
0000A18A D041                       		add.w	d1,d0
0000A18C                            
0000A18C                            loc_854E:
0000A18C 7200                       		moveq	#0,d1
0000A18E 1232 0000                  		move.b	(a2,d0.w),d1
0000A192 3028 000C                  		move.w	obY(a0),d0
0000A196 9041                       		sub.w	d1,d0
0000A198 7200                       		moveq	#0,d1
0000A19A 1229 0016                  		move.b	obHeight(a1),d1
0000A19E 9041                       		sub.w	d1,d0
0000A1A0 3340 000C                  		move.w	d0,obY(a1)
0000A1A4 9468 0008                  		sub.w	obX(a0),d2
0000A1A8 9569 0008                  		sub.w	d2,obX(a1)
0000A1AC                            
0000A1AC                            locret_856E:
0000A1AC 4E75                       		rts	
0000A1AE                            ; End of function SlopeObject2
0000A1AE                            
0000A1AE                            ; ===========================================================================
0000A1AE                            ; ---------------------------------------------------------------------------
0000A1AE                            ; Collision data for GHZ collapsing ledge
0000A1AE                            ; ---------------------------------------------------------------------------
0000A1AE                            Ledge_SlopeData:
0000A1AE                            		incbin	"misc\GHZ Collapsing Ledge Heightmap.bin"
0000A1DE                            		even
0000A1DE                            
0000A1DE                            Map_Ledge:	include	"_maps\Collapsing Ledge.asm"
0000A1DE                            ; ---------------------------------------------------------------------------
0000A1DE                            ; Sprite mappings - GHZ	collapsing ledge
0000A1DE                            ; ---------------------------------------------------------------------------
0000A1DE                            Map_Ledge_internal:
0000A1DE 0000                       		dc.w @left-Map_Ledge_internal
0000A1E0 0000                       		dc.w @right-Map_Ledge_internal
0000A1E2 0000                       		dc.w @leftsmash-Map_Ledge_internal
0000A1E4 0000                       		dc.w @rightsmash-Map_Ledge_internal
0000A1E6 10                         @left:		dc.b $10
0000A1E7 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
0000A1EC D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
0000A1F1 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
0000A1F6 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
0000A1FB D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000A200 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
0000A205 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
0000A20A F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
0000A20F F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000A214 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
0000A219 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
0000A21E 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000A223 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
0000A228 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
0000A22D 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
0000A232 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000A237 10                         @right:		dc.b $10
0000A238 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
0000A23D D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
0000A242 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
0000A247 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
0000A24C D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000A251 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
0000A256 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
0000A25B F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
0000A260 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000A265 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
0000A26A 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
0000A26F 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000A274 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
0000A279 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
0000A27E 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
0000A283 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000A288 19                         @leftsmash:	dc.b $19
0000A289 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
0000A28E C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
0000A293 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
0000A298 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
0000A29D E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
0000A2A2 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
0000A2A7 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
0000A2AC E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
0000A2B1 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000A2B6 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
0000A2BB F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
0000A2C0 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
0000A2C5 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
0000A2CA F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
0000A2CF F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000A2D4 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
0000A2D9 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
0000A2DE 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
0000A2E3 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000A2E8 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
0000A2ED 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
0000A2F2 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
0000A2F7 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
0000A2FC 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
0000A301 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000A306 19                         @rightsmash:	dc.b $19
0000A307 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
0000A30C C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
0000A311 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
0000A316 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
0000A31B E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
0000A320 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
0000A325 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
0000A32A E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
0000A32F D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000A334 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
0000A339 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
0000A33E F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
0000A343 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
0000A348 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
0000A34D F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000A352 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
0000A357 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
0000A35C 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
0000A361 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000A366 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
0000A36B 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
0000A370 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
0000A375 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
0000A37A 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
0000A37F 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000A384                            		even
0000A384                            		even
0000A384                            Map_CFlo:	include	"_maps\Collapsing Floors.asm"
0000A384                            ; ---------------------------------------------------------------------------
0000A384                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
0000A384                            ; ---------------------------------------------------------------------------
0000A384                            Map_CFlo_internal:
0000A384 0000                       		dc.w byte_874E-Map_CFlo_internal
0000A386 0000                       		dc.w byte_8763-Map_CFlo_internal
0000A388 0000                       		dc.w byte_878C-Map_CFlo_internal
0000A38A 0000                       		dc.w byte_87A1-Map_CFlo_internal
0000A38C 04                         byte_874E:	dc.b 4
0000A38D F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
0000A392 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
0000A397 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
0000A39C 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
0000A3A1 08                         byte_8763:	dc.b 8
0000A3A2 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000A3A7 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
0000A3AC F805 0000 00               		dc.b $F8, 5, 0,	0, 0
0000A3B1 F805 0000 10               		dc.b $F8, 5, 0,	0, $10
0000A3B6 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
0000A3BB 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
0000A3C0 0805 0000 00               		dc.b 8,	5, 0, 0, 0
0000A3C5 0805 0000 10               		dc.b 8,	5, 0, 0, $10
0000A3CA 04                         byte_878C:	dc.b 4
0000A3CB F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
0000A3D0 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
0000A3D5 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
0000A3DA 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
0000A3DF 08                         byte_87A1:	dc.b 8
0000A3E0 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000A3E5 F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
0000A3EA F805 0000 00               		dc.b $F8, 5, 0,	0, 0
0000A3EF F805 0004 10               		dc.b $F8, 5, 0,	4, $10
0000A3F4 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
0000A3F9 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
0000A3FE 0805 0008 00               		dc.b 8,	5, 0, 8, 0
0000A403 0805 000C 10               		dc.b 8,	5, 0, $C, $10
0000A408                            		even
0000A408                            		even
0000A408                            
0000A408                            		include	"_incObj\1C Scenery.asm"
0000A408                            ; ---------------------------------------------------------------------------
0000A408                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
0000A408                            ; ---------------------------------------------------------------------------
0000A408                            
0000A408                            Scenery:
0000A408 7000                       		moveq	#0,d0
0000A40A 1028 0024                  		move.b	obRoutine(a0),d0
0000A40E 323B 0000                  		move.w	Scen_Index(pc,d0.w),d1
0000A412 4EFB 1000                  		jmp	Scen_Index(pc,d1.w)
0000A416                            ; ===========================================================================
0000A416 0000                       Scen_Index:	dc.w Scen_Main-Scen_Index
0000A418 0000                       		dc.w Scen_ChkDel-Scen_Index
0000A41A                            ; ===========================================================================
0000A41A                            
0000A41A                            Scen_Main:	; Routine 0
0000A41A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A41E 7000                       		moveq	#0,d0
0000A420 1028 0028                  		move.b	obSubtype(a0),d0 ; copy object subtype to d0
0000A424 C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
0000A428 43FB 0000                  		lea	Scen_Values(pc,d0.w),a1
0000A42C 2159 0004                  		move.l	(a1)+,obMap(a0)
0000A430 3159 0002                  		move.w	(a1)+,obGfx(a0)
0000A434 0028 0004 0001             		ori.b	#4,obRender(a0)
0000A43A 1159 001A                  		move.b	(a1)+,obFrame(a0)
0000A43E 1159 0014                  		move.b	(a1)+,obActWid(a0)
0000A442 1159 0018                  		move.b	(a1)+,obPriority(a0)
0000A446 3028 0018                  		move.w obPriority(a0),d0 
0000A44A E248                       		lsr.w #1,d0 
0000A44C 0240 0380                  		andi.w #$380,d0 
0000A450 3140 0018                  		move.w d0,obPriority(a0)		
0000A454 1159 0020                  		move.b	(a1)+,obColType(a0)
0000A458                            
0000A458                            Scen_ChkDel:	; Routine 2
0000A476 6000 0000                  		bra.w	DisplaySprite
0000A47A                            ; ===========================================================================
0000A47A                            ; ---------------------------------------------------------------------------
0000A47A                            ; Variables for	object $1C are stored in an array
0000A47A                            ; ---------------------------------------------------------------------------
0000A47A 0000 0000                  Scen_Values:	dc.l Map_Scen		; mappings address
0000A47E 44D8                       		dc.w $44D8		; VRAM setting
0000A480 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
0000A484 0000 0000                  		dc.l Map_Scen
0000A488 44D8                       		dc.w $44D8
0000A48A 0008 0200                  		dc.b 0,	8, 2, 0
0000A48E 0000 0000                  		dc.l Map_Scen
0000A492 44D8                       		dc.w $44D8
0000A494 0008 0200                  		dc.b 0,	8, 2, 0
0000A498 0000 9542                  		dc.l Map_Bri
0000A49C 438E                       		dc.w $438E
0000A49E 0110 0100                  		dc.b 1,	$10, 1,	0
0000A4A2                            		even
0000A4A2                            		even
0000A4A2                            Map_Scen:	include	"_maps\Scenery.asm"
0000A4A2                            ; ---------------------------------------------------------------------------
0000A4A2                            ; Sprite mappings - SLZ	lava thrower
0000A4A2                            ; ---------------------------------------------------------------------------
0000A4A2                            Map_Scen_internal:
0000A4A2 0000                       		dc.w byte_8858-Map_Scen_internal
0000A4A4 01                         byte_8858:	dc.b 1
0000A4A5 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000A4AA                            		even
0000A4AA                            		even
0000A4AA                            
0000A4AA                            		include	"_incObj\1D Unused Switch.asm"
0000A4AA                            ; ---------------------------------------------------------------------------
0000A4AA                            ; Object 1D - switch that activates when Sonic touches it
0000A4AA                            ; (this	is not used anywhere in	the game)
0000A4AA                            ; ---------------------------------------------------------------------------
0000A4AA                            
0000A4AA                            MagicSwitch:
0000A4AA 7000                       		moveq	#0,d0
0000A4AC 1028 0024                  		move.b	obRoutine(a0),d0
0000A4B0 323B 0000                  		move.w	Swi_Index(pc,d0.w),d1
0000A4B4 4EFB 1000                  		jmp	Swi_Index(pc,d1.w)
0000A4B8                            ; ===========================================================================
0000A4B8 0000                       Swi_Index:	dc.w Swi_Main-Swi_Index
0000A4BA 0000                       		dc.w Swi_Action-Swi_Index
0000A4BC 0000                       		dc.w Swi_Delete-Swi_Index
0000A4BE                            
0000A4BE =00000030                  swi_origY:	equ $30		; original y-axis position
0000A4BE                            ; ===========================================================================
0000A4BE                            
0000A4BE                            Swi_Main:	; Routine 0
0000A4BE 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A4C2 217C 0000 0000 0004        		move.l	#Map_Swi,obMap(a0)
0000A4CA 317C 4000 0002             		move.w	#$4000,obGfx(a0)
0000A4D0 117C 0004 0001             		move.b	#4,obRender(a0)
0000A4D6 3168 000C 0030             		move.w	obY(a0),swi_origY(a0) ; save position on y-axis
0000A4DC 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000A4E2 317C 0280 0018             		move.w	#$280,obPriority(a0)
0000A4E8                            
0000A4E8                            Swi_Action:	; Routine 2
0000A4E8 3168 0030 000C             		move.w	swi_origY(a0),obY(a0) ; restore position on y-axis
0000A4EE 323C 0010                  		move.w	#$10,d1
0000A4F2 6100 0000                  		bsr.w	Swi_ChkTouch	; check if Sonic touches the switch
0000A4F6 6700                       		beq.s	Swi_ChkDel	; if not, branch
0000A4F8                            
0000A4F8 5468 000C                  		addq.w	#2,obY(a0)	; move object 2	pixels
0000A4FC 7001                       		moveq	#1,d0
0000A4FE 31C0 F7E0                  		move.w	d0,(f_switch).w	; set switch 0 as "pressed"
0000A502                            
0000A502                            Swi_ChkDel:
0000A502 6100 0000                  		bsr.w	DisplaySprite
0000A524 4E75                       		rts	
0000A526                            ; ===========================================================================
0000A526                            
0000A526                            Swi_Delete:	; Routine 4
0000A526 6100 0000                  		bsr.w	DeleteObject
0000A52A 4E75                       		rts	
0000A52C                            
0000A52C                            ; ---------------------------------------------------------------------------
0000A52C                            ; Subroutine to	check if Sonic touches the object
0000A52C                            ; ---------------------------------------------------------------------------
0000A52C                            
0000A52C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A52C                            
0000A52C                            
0000A52C                            Swi_ChkTouch:
0000A52C 43F8 D000                  		lea	(v_player).w,a1
0000A530 3029 0008                  		move.w	obX(a1),d0
0000A534 9068 0008                  		sub.w	obX(a0),d0
0000A538 D041                       		add.w	d1,d0
0000A53A 6B00                       		bmi.s	Swi_NoTouch
0000A53C D241                       		add.w	d1,d1
0000A53E B041                       		cmp.w	d1,d0
0000A540 6400                       		bcc.s	Swi_NoTouch
0000A542 3429 000C                  		move.w	obY(a1),d2
0000A546 1229 0016                  		move.b	obHeight(a1),d1
0000A54A 4881                       		ext.w	d1
0000A54C D242                       		add.w	d2,d1
0000A54E 3028 000C                  		move.w	obY(a0),d0
0000A552 0440 0010                  		subi.w	#$10,d0
0000A556 9041                       		sub.w	d1,d0
0000A558 6200                       		bhi.s	Swi_NoTouch
0000A55A 0C40 FFF0                  		cmpi.w	#-$10,d0
0000A55E 6500                       		bcs.s	Swi_NoTouch
0000A560 70FF                       		moveq	#-1,d0		; Sonic has touched it
0000A562 4E75                       		rts	
0000A564                            ; ===========================================================================
0000A564                            
0000A564                            Swi_NoTouch:
0000A564 7000                       		moveq	#0,d0		; Sonic hasn't touched it
0000A566 4E75                       		rts	
0000A568                            ; End of function Swi_ChkTouch
0000A568                            ; End of function Swi_ChkTouch
0000A568                            Map_Swi:	include	"_maps\Unused Switch.asm"
0000A568                            ; ---------------------------------------------------------------------------
0000A568                            ; Sprite mappings - Unused switch thingy
0000A568                            ; ---------------------------------------------------------------------------
0000A568                            Map_Swi_internal:
0000A568 0000                       		dc.w byte_891E-Map_Swi_internal
0000A56A 04                         byte_891E:	dc.b 4
0000A56B E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
0000A570 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
0000A575 E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
0000A57A 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
0000A580 00                         		even
0000A580 00                         		even
0000A580                            
0000A580                            		include	"_incObj\2A SBZ Small Door.asm"
0000A580                            ; ---------------------------------------------------------------------------
0000A580                            ; Object 2A - small vertical door (SBZ)
0000A580                            ; ---------------------------------------------------------------------------
0000A580                            
0000A580                            AutoDoor:
0000A580 7000                       		moveq	#0,d0
0000A582 1028 0024                  		move.b	obRoutine(a0),d0
0000A586 323B 0000                  		move.w	ADoor_Index(pc,d0.w),d1
0000A58A 4EFB 1000                  		jmp	ADoor_Index(pc,d1.w)
0000A58E                            ; ===========================================================================
0000A58E 0000                       ADoor_Index:	dc.w ADoor_Main-ADoor_Index
0000A590 0000                       		dc.w ADoor_OpenShut-ADoor_Index
0000A592                            ; ===========================================================================
0000A592                            
0000A592                            ADoor_Main:	; Routine 0
0000A592 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A596 217C 0000 0000 0004        		move.l	#Map_ADoor,obMap(a0)
0000A59E 317C 42EA 0002             		move.w	#$42EA,obGfx(a0)
0000A5A4 0028 0004 0001             		ori.b	#4,obRender(a0)
0000A5AA 117C 0008 0014             		move.b	#8,obActWid(a0)
0000A5B0                            		;move.b	#4,obPriority(a0)
0000A5B0                            
0000A5B0                            ADoor_OpenShut:	; Routine 2
0000A5B0 323C 0040                  		move.w	#$40,d1		; set range for door detection
0000A5B4 4228 001C                  		clr.b	obAnim(a0)	; use "closing"	animation
0000A5B8 3038 D008                  		move.w	(v_player+obX).w,d0
0000A5BC D041                       		add.w	d1,d0
0000A5BE B068 0008                  		cmp.w	obX(a0),d0
0000A5C2 6500                       		bcs.s	ADoor_Animate
0000A5C4 9041                       		sub.w	d1,d0
0000A5C6 9041                       		sub.w	d1,d0
0000A5C8 B068 0008                  		cmp.w	obX(a0),d0	; is Sonic > $40 pixels from door?
0000A5CC 6400                       		bcc.s	ADoor_Animate	; close door
0000A5CE D041                       		add.w	d1,d0
0000A5D0 B068 0008                  		cmp.w	obX(a0),d0	; is Sonic left of the door?
0000A5D4 6400                       		bcc.s	loc_899A	; if yes, branch
0000A5D6 0828 0000 0022             		btst	#0,obStatus(a0)
0000A5DC 6600                       		bne.s	ADoor_Animate
0000A5DE 6000                       		bra.s	ADoor_Open
0000A5E0                            ; ===========================================================================
0000A5E0                            
0000A5E0                            loc_899A:
0000A5E0 0828 0000 0022             		btst	#0,obStatus(a0)
0000A5E6 6700                       		beq.s	ADoor_Animate
0000A5E8                            
0000A5E8                            ADoor_Open:
0000A5E8 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "opening"	animation
0000A5EE                            
0000A5EE                            ADoor_Animate:
0000A5EE 43F9 0000 0000             		lea	(Ani_ADoor).l,a1
0000A5F4 6100 0000                  		bsr.w	AnimateSprite
0000A5F8 4A28 001A                  		tst.b	obFrame(a0)	; is the door open?
0000A5FC 6600                       		bne.s	@remember	; if yes, branch
0000A5FE 323C 0011                  		move.w	#$11,d1
0000A602 343C 0020                  		move.w	#$20,d2
0000A606 3602                       		move.w	d2,d3
0000A608 5243                       		addq.w	#1,d3
0000A60A 3828 0008                  		move.w	obX(a0),d4
0000A60E 6100 0000                  		bsr.w	SolidObject
0000A612                            
0000A612                            	@remember:
0000A612 6000 0000                  		bra.w	RememberState
0000A612 6000 0000                  		bra.w	RememberState
0000A616                            		include	"_anim\SBZ Small Door.asm"
0000A616                            ; ---------------------------------------------------------------------------
0000A616                            ; Animation script - doors (SBZ)
0000A616                            ; ---------------------------------------------------------------------------
0000A616 0000                       Ani_ADoor:	dc.w @close-Ani_ADoor
0000A618 0000                       		dc.w @open-Ani_ADoor
0000A61A 0008 0706 0504 0302 0100+  @close:		dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, afBack, 1
0000A626 0000 0102 0304 0506 0708+  @open:		dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, afBack, 1
0000A632                            		even
0000A632                            		even
0000A632                            Map_ADoor:	include	"_maps\SBZ Small Door.asm"
0000A632                            ; --------------------------------------------------------------------------------
0000A632                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000A632                            ; --------------------------------------------------------------------------------
0000A632                            
0000A632                            SME_YnmwF:	
0000A632 0000 0000                  		dc.w SME_YnmwF_12-SME_YnmwF, SME_YnmwF_1D-SME_YnmwF	
0000A636 0000 0000                  		dc.w SME_YnmwF_28-SME_YnmwF, SME_YnmwF_33-SME_YnmwF	
0000A63A 0000 0000                  		dc.w SME_YnmwF_3E-SME_YnmwF, SME_YnmwF_49-SME_YnmwF	
0000A63E 0000 0000                  		dc.w SME_YnmwF_54-SME_YnmwF, SME_YnmwF_5F-SME_YnmwF	
0000A642 0000                       		dc.w SME_YnmwF_6A-SME_YnmwF	
0000A644 02                         SME_YnmwF_12:	dc.b 2	
0000A645 E007 0800 F8               		dc.b $E0, 7, 8, 0, $F8	
0000A64A 0007 0800 F8               		dc.b 0, 7, 8, 0, $F8	
0000A64F 02                         SME_YnmwF_1D:	dc.b 2	
0000A650 DC07 0800 F8               		dc.b $DC, 7, 8, 0, $F8	
0000A655 0407 0800 F8               		dc.b 4, 7, 8, 0, $F8	
0000A65A 02                         SME_YnmwF_28:	dc.b 2	
0000A65B D807 0800 F8               		dc.b $D8, 7, 8, 0, $F8	
0000A660 0807 0800 F8               		dc.b 8, 7, 8, 0, $F8	
0000A665 02                         SME_YnmwF_33:	dc.b 2	
0000A666 D407 0800 F8               		dc.b $D4, 7, 8, 0, $F8	
0000A66B 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8	
0000A670 02                         SME_YnmwF_3E:	dc.b 2	
0000A671 D007 0800 F8               		dc.b $D0, 7, 8, 0, $F8	
0000A676 1007 0800 F8               		dc.b $10, 7, 8, 0, $F8	
0000A67B 02                         SME_YnmwF_49:	dc.b 2	
0000A67C CC07 0800 F8               		dc.b $CC, 7, 8, 0, $F8	
0000A681 1407 0800 F8               		dc.b $14, 7, 8, 0, $F8	
0000A686 02                         SME_YnmwF_54:	dc.b 2	
0000A687 C807 0800 F8               		dc.b $C8, 7, 8, 0, $F8	
0000A68C 1807 0800 F8               		dc.b $18, 7, 8, 0, $F8	
0000A691 02                         SME_YnmwF_5F:	dc.b 2	
0000A692 C407 0800 F8               		dc.b $C4, 7, 8, 0, $F8	
0000A697 1C07 0800 F8               		dc.b $1C, 7, 8, 0, $F8	
0000A69C 02                         SME_YnmwF_6A:	dc.b 2	
0000A69D C007 0800 F8               		dc.b $C0, 7, 8, 0, $F8	
0000A6A2 2007 0800 F8               		dc.b $20, 7, 8, 0, $F8	
0000A6A8 00                         		even
0000A6A8 00                         		even
0000A6A8                            
0000A6A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A6A8                            
0000A6A8                            
0000A6A8                            Obj44_SolidWall:
0000A6A8 6100 0000                  		bsr.w	Obj44_SolidWall2
0000A6AC 6700                       		beq.s	loc_8AA8
0000A6AE 6B00 0000                  		bmi.w	loc_8AC4
0000A6B2 4A40                       		tst.w	d0
0000A6B4 6700 0000                  		beq.w	loc_8A92
0000A6B8 6B00                       		bmi.s	loc_8A7C
0000A6BA 4A69 0010                  		tst.w	obVelX(a1)
0000A6BE 6B00                       		bmi.s	loc_8A92
0000A6C0 6000                       		bra.s	loc_8A82
0000A6C2                            ; ===========================================================================
0000A6C2                            
0000A6C2                            loc_8A7C:
0000A6C2 4A69 0010                  		tst.w	obVelX(a1)
0000A6C6 6A00                       		bpl.s	loc_8A92
0000A6C8                            
0000A6C8                            loc_8A82:
0000A6C8 9169 0008                  		sub.w	d0,obX(a1)
0000A6CC 337C 0000 0020             		move.w	#0,obInertia(a1)
0000A6D2 337C 0000 0010             		move.w	#0,obVelX(a1)
0000A6D8                            
0000A6D8                            loc_8A92:
0000A6D8 0829 0001 0022             		btst	#1,obStatus(a1)
0000A6DE 6600                       		bne.s	loc_8AB6
0000A6E0 08E9 0005 0022             		bset	#5,obStatus(a1)
0000A6E6 08E8 0005 0022             		bset	#5,obStatus(a0)
0000A6EC 4E75                       		rts	
0000A6EE                            ; ===========================================================================
0000A6EE                            
0000A6EE                            loc_8AA8:
0000A6EE 0828 0005 0022             		btst	#5,obStatus(a0)
0000A6F4 6700                       		beq.s	locret_8AC2
0000A6F6 337C 0000 001C             		move.w	#id_Run,obAnim(a1)
0000A6FC                            
0000A6FC                            loc_8AB6:
0000A6FC 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000A702 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000A708                            
0000A708                            locret_8AC2:
0000A708 4E75                       		rts	
0000A70A                            ; ===========================================================================
0000A70A                            
0000A70A                            loc_8AC4:
0000A70A 4A69 0012                  		tst.w	obVelY(a1)
0000A70E 6A00                       		bpl.s	locret_8AD8
0000A710 4A43                       		tst.w	d3
0000A712 6A00                       		bpl.s	locret_8AD8
0000A714 9769 000C                  		sub.w	d3,obY(a1)
0000A718 337C 0000 0012             		move.w	#0,obVelY(a1)
0000A71E                            
0000A71E                            locret_8AD8:
0000A71E 4E75                       		rts	
0000A720                            ; End of function Obj44_SolidWall
0000A720                            
0000A720                            
0000A720                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A720                            
0000A720                            
0000A720                            Obj44_SolidWall2:
0000A720 43F8 D000                  		lea	(v_player).w,a1
0000A724 3029 0008                  		move.w	obX(a1),d0
0000A728 9068 0008                  		sub.w	obX(a0),d0
0000A72C D041                       		add.w	d1,d0
0000A72E 6B00                       		bmi.s	loc_8B48
0000A730 3601                       		move.w	d1,d3
0000A732 D643                       		add.w	d3,d3
0000A734 B043                       		cmp.w	d3,d0
0000A736 6200                       		bhi.s	loc_8B48
0000A738 1629 0016                  		move.b	obHeight(a1),d3
0000A73C 4883                       		ext.w	d3
0000A73E D443                       		add.w	d3,d2
0000A740 3629 000C                  		move.w	obY(a1),d3
0000A744 9668 000C                  		sub.w	obY(a0),d3
0000A748 D642                       		add.w	d2,d3
0000A74A 6B00                       		bmi.s	loc_8B48
0000A74C 3802                       		move.w	d2,d4
0000A74E D844                       		add.w	d4,d4
0000A750 B644                       		cmp.w	d4,d3
0000A752 6400                       		bhs.s	loc_8B48
0000A754 4A38 F7C8                  		tst.b	(f_lockmulti).w
0000A758 6B00                       		bmi.s	loc_8B48
0000A75A 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
0000A760 6400                       		bhs.s	loc_8B48
0000A762 4A78 FE08                  		tst.w	(v_debuguse).w
0000A766 6600                       		bne.s	loc_8B48
0000A768 3A00                       		move.w	d0,d5
0000A76A B240                       		cmp.w	d0,d1
0000A76C 6400                       		bhs.s	loc_8B30
0000A76E D241                       		add.w	d1,d1
0000A770 9041                       		sub.w	d1,d0
0000A772 3A00                       		move.w	d0,d5
0000A774 4445                       		neg.w	d5
0000A776                            
0000A776                            loc_8B30:
0000A776 3203                       		move.w	d3,d1
0000A778 B443                       		cmp.w	d3,d2
0000A77A 6400                       		bhs.s	loc_8B3C
0000A77C 9644                       		sub.w	d4,d3
0000A77E 3203                       		move.w	d3,d1
0000A780 4441                       		neg.w	d1
0000A782                            
0000A782                            loc_8B3C:
0000A782 BA41                       		cmp.w	d1,d5
0000A784 6200                       		bhi.s	loc_8B44
0000A786 7801                       		moveq	#1,d4
0000A788 4E75                       		rts	
0000A78A                            ; ===========================================================================
0000A78A                            
0000A78A                            loc_8B44:
0000A78A 78FF                       		moveq	#-1,d4
0000A78C 4E75                       		rts	
0000A78E                            ; ===========================================================================
0000A78E                            
0000A78E                            loc_8B48:
0000A78E 7800                       		moveq	#0,d4
0000A790 4E75                       		rts	
0000A792                            ; End of function Obj44_SolidWall2
0000A792                            
0000A792                            ; ===========================================================================
0000A792                            
0000A792                            		include	"_incObj\1E Ball Hog.asm"
0000A792                            ; ---------------------------------------------------------------------------
0000A792                            ; Object 1E - Ball Hog enemy (SBZ)
0000A792                            ; ---------------------------------------------------------------------------
0000A792                            
0000A792                            BallHog:
0000A792 7000                       		moveq	#0,d0
0000A794 1028 0024                  		move.b	obRoutine(a0),d0
0000A798 323B 0000                  		move.w	Hog_Index(pc,d0.w),d1
0000A79C 4EFB 1000                  		jmp	Hog_Index(pc,d1.w)
0000A7A0                            ; ===========================================================================
0000A7A0 0000                       Hog_Index:	dc.w Hog_Main-Hog_Index
0000A7A2 0000                       		dc.w Hog_Action-Hog_Index
0000A7A4                            
0000A7A4 =00000032                  hog_launchflag:	equ $32		; 0 to launch a cannonball
0000A7A4                            ; ===========================================================================
0000A7A4                            
0000A7A4                            Hog_Main:	; Routine 0
0000A7A4 117C 0013 0016             		move.b	#$13,obHeight(a0)
0000A7AA 117C 0008 0017             		move.b	#8,obWidth(a0)
0000A7B0 217C 0000 0000 0004        		move.l	#Map_Hog,obMap(a0)
0000A7B8 317C 0302 0002             		move.w	#$302,obGfx(a0)
0000A7BE 117C 0004 0001             		move.b	#4,obRender(a0)
0000A7C4 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000A7CA 117C 0005 0020             		move.b	#5,obColType(a0)
0000A7D0 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A7D6 6100 0000                  		bsr.w	ObjectFall
0000A7DA 4EB9 0000 0000             		jsr	(ObjFloorDist).l	; find floor
0000A7E0 4A41                       		tst.w	d1
0000A7E2 6A00                       		bpl.s	@floornotfound
0000A7E4 D368 000C                  		add.w	d1,obY(a0)
0000A7E8 317C 0000 0012             		move.w	#0,obVelY(a0)
0000A7EE 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A7F2                            
0000A7F2                            	@floornotfound:
0000A7F2 4E75                       		rts	
0000A7F4                            ; ===========================================================================
0000A7F4                            
0000A7F4                            Hog_Action:	; Routine 2
0000A7F4 43F9 0000 0000             		lea	(Ani_Hog).l,a1
0000A7FA 6100 0000                  		bsr.w	AnimateSprite
0000A7FE 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)	; is final frame (01) displayed?
0000A804 6600                       		bne.s	@setlaunchflag	; if not, branch
0000A806 4A28 0032                  		tst.b	hog_launchflag(a0)	; is it	set to launch cannonball?
0000A80A 6700                       		beq.s	@makeball	; if yes, branch
0000A80C 6000                       		bra.s	@remember
0000A80E                            ; ===========================================================================
0000A80E                            
0000A80E                            @setlaunchflag:
0000A80E 4228 0032                  		clr.b	hog_launchflag(a0)	; set to launch	cannonball
0000A812                            
0000A812                            @remember:
0000A812 6000 0000                  		bra.w	RememberState
0000A816                            ; ===========================================================================
0000A816                            
0000A816                            @makeball:
0000A816 117C 0001 0032             		move.b	#1,hog_launchflag(a0)
0000A81C 6100 0000                  		bsr.w	FindFreeObj
0000A820 6600                       		bne.s	@fail
0000A822 12BC 0000                  		move.b	#id_Cannonball,0(a1) ; load cannonball object ($20)
0000A826 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000A82C 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000A832 337C FF00 0010             		move.w	#-$100,obVelX(a1) ; cannonball bounces to the left
0000A838 337C 0000 0012             		move.w	#0,obVelY(a1)
0000A83E 70FC                       		moveq	#-4,d0
0000A840 0828 0000 0022             		btst	#0,obStatus(a0)	; is Ball Hog facing right?
0000A846 6700                       		beq.s	@noflip		; if not, branch
0000A848 4440                       		neg.w	d0
0000A84A 4469 0010                  		neg.w	obVelX(a1)	; cannonball bounces to	the right
0000A84E                            
0000A84E                            	@noflip:
0000A84E D169 0008                  		add.w	d0,obX(a1)
0000A852 0669 000C 000C             		addi.w	#$C,obY(a1)
0000A858 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1) ; copy object type from Ball Hog
0000A85E                            
0000A85E                            	@fail:
0000A85E 60B2                       		bra.s	@remember
0000A85E 60B2                       		bra.s	@remember
0000A860                            		include	"_incObj\20 Cannonball.asm"
0000A860                            ; ---------------------------------------------------------------------------
0000A860                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
0000A860                            ; ---------------------------------------------------------------------------
0000A860                            
0000A860                            Cannonball:
0000A860 7000                       		moveq	#0,d0
0000A862 1028 0024                  		move.b	obRoutine(a0),d0
0000A866 323B 0000                  		move.w	Cbal_Index(pc,d0.w),d1
0000A86A 4EFB 1000                  		jmp	Cbal_Index(pc,d1.w)
0000A86E                            ; ===========================================================================
0000A86E 0000                       Cbal_Index:	dc.w Cbal_Main-Cbal_Index
0000A870 0000                       		dc.w Cbal_Bounce-Cbal_Index
0000A872                            
0000A872 =00000030                  cbal_time:	equ $30		; time until the cannonball explodes (2 bytes)
0000A872                            ; ===========================================================================
0000A872                            
0000A872                            Cbal_Main:	; Routine 0
0000A872 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A876 117C 0007 0016             		move.b	#7,obHeight(a0)
0000A87C 217C 0000 0000 0004        		move.l	#Map_Hog,obMap(a0)
0000A884 317C 2302 0002             		move.w	#$2302,obGfx(a0)
0000A88A 117C 0004 0001             		move.b	#4,obRender(a0)
0000A890 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000A896 117C 0087 0020             		move.b	#$87,obColType(a0)
0000A89C 117C 0008 0014             		move.b	#8,obActWid(a0)
0000A8A2 7000                       		moveq	#0,d0
0000A8A4 1028 0028                  		move.b	obSubtype(a0),d0 ; move subtype to d0
0000A8A8 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
0000A8AC 3140 0030                  		move.w	d0,cbal_time(a0) ; set explosion time
0000A8B0 117C 0004 001A             		move.b	#4,obFrame(a0)
0000A8B6                            
0000A8B6                            Cbal_Bounce:	; Routine 2
0000A8B6 4EB9 0000 0000             		jsr	(ObjectFall).l
0000A8BC 4A68 0012                  		tst.w	obVelY(a0)
0000A8C0 6B00                       		bmi.s	Cbal_ChkExplode
0000A8C2 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000A8C8 4A41                       		tst.w	d1		; has ball hit the floor?
0000A8CA 6A00                       		bpl.s	Cbal_ChkExplode	; if not, branch
0000A8CC                            
0000A8CC D368 000C                  		add.w	d1,obY(a0)
0000A8D0 317C FD00 0012             		move.w	#-$300,obVelY(a0) ; bounce
0000A8D6 4A03                       		tst.b	d3
0000A8D8 6700                       		beq.s	Cbal_ChkExplode
0000A8DA 6B00                       		bmi.s	loc_8CA4
0000A8DC 4A68 0010                  		tst.w	obVelX(a0)
0000A8E0 6A00                       		bpl.s	Cbal_ChkExplode
0000A8E2 4468 0010                  		neg.w	obVelX(a0)
0000A8E6 6000                       		bra.s	Cbal_ChkExplode
0000A8E8                            ; ===========================================================================
0000A8E8                            
0000A8E8                            loc_8CA4:
0000A8E8 4A68 0010                  		tst.w	obVelX(a0)
0000A8EC 6B00                       		bmi.s	Cbal_ChkExplode
0000A8EE 4468 0010                  		neg.w	obVelX(a0)
0000A8F2                            
0000A8F2                            Cbal_ChkExplode:
0000A8F2 5368 0030                  		subq.w	#1,cbal_time(a0) ; subtract 1 from explosion time
0000A8F6 6A00                       		bpl.s	Cbal_Animate	; if time is > 0, branch
0000A8F8                            
0000A8F8                            	Cbal_Explode:
0000A8F8 10BC 0000                  		move.b	#id_MissileDissolve,0(a0)
0000A8FC 10BC 0000                  		move.b	#id_ExplosionBomb,0(a0)	; change object	to an explosion	($3F)
0000A900 117C 0000 0024             		move.b	#0,obRoutine(a0) ; reset routine counter
0000A906 6000 0000                  		bra.w	ExplosionBomb	; jump to explosion code
0000A90A                            ; ===========================================================================
0000A90A                            
0000A90A                            Cbal_Animate:
0000A90A 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0000A90E 6A00                       		bpl.s	Cbal_Display
0000A910 117C 0005 001E             		move.b	#5,obTimeFrame(a0) ; set frame duration to 5 frames
0000A916 0868 0000 001A             		bchg	#0,obFrame(a0)	; change frame
0000A91C                            
0000A91C                            Cbal_Display:
0000A91C 6100 0000                  		bsr.w	DisplaySprite
0000A920 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000A924 0640 00E0                  		addi.w	#$E0,d0
0000A928 B068 000C                  		cmp.w	obY(a0),d0	; has object fallen off	the level?
0000A92C 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
0000A930 4E75                       		rts	
0000A930 4E75                       		rts	
0000A932                            		include	"_incObj\24, 27 & 3F Explosions.asm"
0000A932                            ; ---------------------------------------------------------------------------
0000A932                            ; Object 24 - buzz bomber missile vanishing (unused?)
0000A932                            ; ---------------------------------------------------------------------------
0000A932                            
0000A932                            MissileDissolve:
0000A932 7000                       		moveq	#0,d0
0000A934 1028 0024                  		move.b	obRoutine(a0),d0
0000A938 323B 0000                  		move.w	MDis_Index(pc,d0.w),d1
0000A93C 4EFB 1000                  		jmp	MDis_Index(pc,d1.w)
0000A940                            ; ===========================================================================
0000A940 0000                       MDis_Index:	dc.w MDis_Main-MDis_Index
0000A942 0000                       		dc.w MDis_Animate-MDis_Index
0000A944                            ; ===========================================================================
0000A944                            
0000A944                            MDis_Main:	; Routine 0
0000A944 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A948 217C 0000 0000 0004        		move.l	#Map_MisDissolve,obMap(a0)
0000A950 317C 041C 0002             		move.w	#$41C,obGfx(a0)
0000A956 117C 0004 0001             		move.b	#4,obRender(a0)
0000A95C 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000A962 117C 0000 0020             		move.b	#0,obColType(a0)
0000A968 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A96E 117C 0009 001E             		move.b	#9,obTimeFrame(a0)
0000A974 117C 0000 001A             		move.b	#0,obFrame(a0)
0000A984                            
0000A984                            MDis_Animate:	; Routine 2
0000A984 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0000A988 6A00                       		bpl.s	@display
0000A98A 117C 0009 001E             		move.b	#9,obTimeFrame(a0) ; set frame duration to 9 frames
0000A990 5228 001A                  		addq.b	#1,obFrame(a0)	; next frame
0000A994 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)	; has animation completed?
0000A99A 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000A99E                            
0000A99E                            	@display:
0000A99E 6000 0000                  		bra.w	DisplaySprite
0000A9A2                            ; ===========================================================================
0000A9A2                            
0000A9A2                            ; ---------------------------------------------------------------------------
0000A9A2                            ; Object 27 - explosion	from a destroyed enemy or monitor
0000A9A2                            ; ---------------------------------------------------------------------------
0000A9A2                            
0000A9A2                            ExplosionItem:
0000A9A2 7000                       		moveq	#0,d0
0000A9A4 1028 0024                  		move.b	obRoutine(a0),d0
0000A9A8 323B 0000                  		move.w	ExItem_Index(pc,d0.w),d1
0000A9AC 4EFB 1000                  		jmp	ExItem_Index(pc,d1.w)
0000A9B0                            ; ===========================================================================
0000A9B0 0000                       ExItem_Index:	dc.w ExItem_Animal-ExItem_Index
0000A9B2 0000                       		dc.w ExItem_Main-ExItem_Index
0000A9B4 0000                       		dc.w ExItem_Animate-ExItem_Index
0000A9B6                            ; ===========================================================================
0000A9B6                            
0000A9B6                            ExItem_Animal:	; Routine 0
0000A9B6 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A9BA 6100 0000                  		bsr.w	FindFreeObj
0000A9BE 6600                       		bne.s	ExItem_Main
0000A9C0 12BC 0000                  		move.b	#id_Animals,0(a1) ; load animal object
0000A9C4 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000A9CA 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000A9D0 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
0000A9D6                            
0000A9D6                            ExItem_Main:	; Routine 2
0000A9D6 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A9DA 217C 0000 0000 0004        		move.l	#Map_ExplodeItem,obMap(a0)
0000A9E2 317C 05A0 0002             		move.w	#$5A0,obGfx(a0)
0000A9E8 117C 0004 0001             		move.b	#4,obRender(a0)
0000A9EE 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000A9F4 117C 0000 0020             		move.b	#0,obColType(a0)
0000A9FA 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000AA00 117C 0007 001E             		move.b	#7,obTimeFrame(a0) ; set frame duration to 7 frames
0000AA06 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AA16                            
0000AA16                            ExItem_Animate:	; Routine 4 (2 for ExplosionBomb)
0000AA16 5528 001E                  		subq.b	#2,obTimeFrame(a0) ; subtract 1 from frame duration
0000AA1A 6A00                       		bpl.s	@display
0000AA1C 117C 0007 001E             		move.b	#7,obTimeFrame(a0) ; set frame duration to 7 frames
0000AA22 5228 001A                  		addq.b	#1,obFrame(a0)	; next frame
0000AA26 0C28 0005 001A             		cmpi.b	#5,obFrame(a0)	; is the final frame (05) displayed?
0000AA2C 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000AA30                            
0000AA30                            	@display:
0000AA30 6000 0000                  		bra.w	DisplaySprite
0000AA34                            ; ===========================================================================
0000AA34                            ; ---------------------------------------------------------------------------
0000AA34                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
0000AA34                            ; ---------------------------------------------------------------------------
0000AA34                            
0000AA34                            ExplosionBomb:
0000AA34 7000                       		moveq	#0,d0
0000AA36 1028 0024                  		move.b	obRoutine(a0),d0
0000AA3A 323B 0000                  		move.w	ExBom_Index(pc,d0.w),d1
0000AA3E 4EFB 1000                  		jmp	ExBom_Index(pc,d1.w)
0000AA42                            ; ===========================================================================
0000AA42 0000                       ExBom_Index:	dc.w ExBom_Main-ExBom_Index
0000AA44 FFD4                       		dc.w ExItem_Animate-ExBom_Index
0000AA46                            ; ===========================================================================
0000AA46                            
0000AA46                            ExBom_Main:	; Routine 0
0000AA46 5428 0024                  		addq.b	#2,obRoutine(a0)
0000AA4A 217C 0000 0000 0004        		move.l	#Map_ExplodeBomb,obMap(a0)
0000AA52 317C 05A0 0002             		move.w	#$5A0,obGfx(a0)
0000AA58 117C 0004 0001             		move.b	#4,obRender(a0)
0000AA5E 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000AA64 117C 0000 0020             		move.b	#0,obColType(a0)
0000AA6A 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000AA70 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000AA76 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AA86                            		include	"_anim\Ball Hog.asm"
0000AA86                            ; ---------------------------------------------------------------------------
0000AA86                            ; Animation script - doors (SBZ)
0000AA86                            ; ---------------------------------------------------------------------------
0000AA86 0000                       Ani_Hog:	dc.w @hog-Ani_Hog
0000AA88 0900 0002 0203 0200 0002+  @hog:		dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, afEnd
0000AAA0 00                         		even
0000AAA0 00                         		even
0000AAA0                            Map_Hog:	include	"_maps\Ball Hog.asm"
0000AAA0                            ; --------------------------------------------------------------------------------
0000AAA0                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000AAA0                            ; --------------------------------------------------------------------------------
0000AAA0                            
0000AAA0                            SME_ZER01:	
0000AAA0 0000 0000                  		dc.w SME_ZER01_C-SME_ZER01, SME_ZER01_17-SME_ZER01	
0000AAA4 0000 0000                  		dc.w SME_ZER01_22-SME_ZER01, SME_ZER01_2D-SME_ZER01	
0000AAA8 0000 0000                  		dc.w SME_ZER01_38-SME_ZER01, SME_ZER01_3E-SME_ZER01	
0000AAAC 02                         SME_ZER01_C:	dc.b 2	
0000AAAD EF09 2000 F4               		dc.b $EF, 9, $20, 0, $F4	
0000AAB2 FF0A 2006 F4               		dc.b $FF, $A, $20, 6, $F4	
0000AAB7 02                         SME_ZER01_17:	dc.b 2	
0000AAB8 EF09 2000 F4               		dc.b $EF, 9, $20, 0, $F4	
0000AABD FF0A 200F F4               		dc.b $FF, $A, $20, $F, $F4	
0000AAC2 02                         SME_ZER01_22:	dc.b 2	
0000AAC3 F409 2000 F4               		dc.b $F4, 9, $20, 0, $F4	
0000AAC8 0409 2018 F4               		dc.b 4, 9, $20, $18, $F4	
0000AACD 02                         SME_ZER01_2D:	dc.b 2	
0000AACE E409 2000 F4               		dc.b $E4, 9, $20, 0, $F4	
0000AAD3 F40A 201E F4               		dc.b $F4, $A, $20, $1E, $F4	
0000AAD8 01                         SME_ZER01_38:	dc.b 1	
0000AAD9 F805 0027 F8               		dc.b $F8, 5, 0, $27, $F8	
0000AADE 01                         SME_ZER01_3E:	dc.b 1	
0000AADF F805 602B F8               		dc.b $F8, 5, $60, $2B, $F8	
0000AAE4                            		even
0000AAE4                            		even
0000AAE4                            Map_MisDissolve:include	"_maps\Buzz Bomber Missile Dissolve.asm"
0000AAE4                            ; ---------------------------------------------------------------------------
0000AAE4                            ; Sprite mappings - buzz bomber missile vanishing
0000AAE4                            ; ---------------------------------------------------------------------------
0000AAE4                            Map_MisDissolve_internal:
0000AAE4 0000                       		dc.w byte_8EAE-Map_MisDissolve_internal
0000AAE6 0000                       		dc.w byte_8EB4-Map_MisDissolve_internal
0000AAE8 0000                       		dc.w byte_8EBA-Map_MisDissolve_internal
0000AAEA 0000                       		dc.w byte_8EC0-Map_MisDissolve_internal
0000AAEC 01                         byte_8EAE:	dc.b 1
0000AAED F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0000AAF2 01                         byte_8EB4:	dc.b 1
0000AAF3 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0000AAF8 01                         byte_8EBA:	dc.b 1
0000AAF9 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0000AAFE 01                         byte_8EC0:	dc.b 1
0000AAFF F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
0000AB04                            		even
0000AB04                            		even
0000AB04                            		include	"_maps\Explosions.asm"
0000AB04                            ; ---------------------------------------------------------------------------
0000AB04                            ; Sprite mappings - explosion from a badnik or monitor
0000AB04                            ; ---------------------------------------------------------------------------
0000AB04 0000 0000                  Map_ExplodeItem:dc.w byte_8ED0-Map_ExplodeItem, byte_8ED6-Map_ExplodeItem
0000AB08 0000 0000                  		dc.w byte_8EDC-Map_ExplodeItem, byte_8EE2-Map_ExplodeItem
0000AB0C 0000                       		dc.w byte_8EF7-Map_ExplodeItem
0000AB0E 01                         byte_8ED0:	dc.b 1
0000AB0F F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
0000AB14 01                         byte_8ED6:	dc.b 1
0000AB15 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
0000AB1A 01                         byte_8EDC:	dc.b 1
0000AB1B F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
0000AB20 04                         byte_8EE2:	dc.b 4
0000AB21 EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
0000AB26 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
0000AB2B 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
0000AB30 FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
0000AB35 04                         byte_8EF7:	dc.b 4
0000AB36 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
0000AB3B EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
0000AB40 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
0000AB45 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
0000AB4A                            		even
0000AB4A                            ; ---------------------------------------------------------------------------
0000AB4A                            ; Sprite mappings - explosion from when	a boss is destroyed
0000AB4A                            ; ---------------------------------------------------------------------------
0000AB4A FFC4                       Map_ExplodeBomb:dc.w byte_8ED0-Map_ExplodeBomb
0000AB4C 0000                       		dc.w byte_8F16-Map_ExplodeBomb
0000AB4E 0000                       		dc.w byte_8F1C-Map_ExplodeBomb
0000AB50 FFD6                       		dc.w byte_8EE2-Map_ExplodeBomb
0000AB52 FFEB                       		dc.w byte_8EF7-Map_ExplodeBomb
0000AB54 01                         byte_8F16:	dc.b 1
0000AB55 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000AB5A 01                         byte_8F1C:	dc.b 1
0000AB5B F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
0000AB60                            		even
0000AB60                            		even
0000AB60                            
0000AB60                            		include	"_incObj\28 Animals.asm"
0000AB60                            ; ---------------------------------------------------------------------------
0000AB60                            ; Object 28 - animals
0000AB60                            ; ---------------------------------------------------------------------------
0000AB60                            
0000AB60                            Animals:
0000AB60 7000                       		moveq	#0,d0
0000AB62 1028 0024                  		move.b	obRoutine(a0),d0
0000AB66 323B 0000                  		move.w	Anml_Index(pc,d0.w),d1
0000AB6A 4EFB 1000                  		jmp	Anml_Index(pc,d1.w)
0000AB6E                            ; ===========================================================================
0000AB6E 0000 0000                  Anml_Index:	dc.w Anml_Ending-Anml_Index, loc_912A-Anml_Index
0000AB72 0000 0000                  		dc.w loc_9184-Anml_Index, loc_91C0-Anml_Index
0000AB76 0000 0000                  		dc.w loc_9184-Anml_Index, loc_9184-Anml_Index
0000AB7A 0000 0000                  		dc.w loc_9184-Anml_Index, loc_91C0-Anml_Index
0000AB7E 0000 0000                  		dc.w loc_9184-Anml_Index, loc_9240-Anml_Index
0000AB82 0000 0000                  		dc.w loc_9260-Anml_Index, loc_9260-Anml_Index
0000AB86 0000 0000                  		dc.w loc_9280-Anml_Index, loc_92BA-Anml_Index
0000AB8A 0000 0000                  		dc.w loc_9314-Anml_Index, loc_9332-Anml_Index
0000AB8E 0000 0000                  		dc.w loc_9314-Anml_Index, loc_9332-Anml_Index
0000AB92 0000 0000                  		dc.w loc_9314-Anml_Index, loc_9370-Anml_Index
0000AB96 0000                       		dc.w loc_92D6-Anml_Index
0000AB98                            
0000AB98 0005 0203 0603 0405 0401+  Anml_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
0000ABA4                            
0000ABA4 FE00 FC00                  Anml_Variables:	dc.w $FE00, $FC00
0000ABA8 0000 0000                  		dc.l Map_Animal1
0000ABAC FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
0000ABB0 0000 0000                  		dc.l Map_Animal2	; mappings address
0000ABB4 FE80 FD00                  		dc.w $FE80, $FD00
0000ABB8 0000 0000                  		dc.l Map_Animal1
0000ABBC FEC0 FE80                  		dc.w $FEC0, $FE80
0000ABC0 0000 0000                  		dc.l Map_Animal2
0000ABC4 FE40 FD00                  		dc.w $FE40, $FD00
0000ABC8 0000 0000                  		dc.l Map_Animal3
0000ABCC FD00 FC00                  		dc.w $FD00, $FC00
0000ABD0 0000 0000                  		dc.l Map_Animal2
0000ABD4 FD80 FC80                  		dc.w $FD80, $FC80
0000ABD8 0000 0000                  		dc.l Map_Animal3
0000ABDC                            
0000ABDC FBC0 FC00 FBC0 FC00 FBC0+  Anml_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
0000ABEC FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
0000ABFC FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
0000AC08                            
0000AC08 0000 0000 0000 0000 0000+  Anml_EndMap:	dc.l Map_Animal2, Map_Animal2, Map_Animal2, Map_Animal1, Map_Animal1
0000AC1C 0000 0000 0000 0000 0000+  		dc.l Map_Animal1, Map_Animal1, Map_Animal2, Map_Animal3, Map_Animal2
0000AC30 0000 0000                  		dc.l Map_Animal3
0000AC34                            
0000AC34 05A5 05A5 05A5 0553 0553+  Anml_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
0000AC46 0565 05B3                  		dc.w $565, $5B3
0000AC4A                            ; ===========================================================================
0000AC4A                            
0000AC4A                            Anml_Ending:	; Routine 0
0000AC4A 4A28 0028                  		tst.b	obSubtype(a0)	; did animal come from a destroyed enemy?
0000AC4E 6700 0000                  		beq.w	Anml_FromEnemy	; if yes, branch
0000AC52 7000                       		moveq	#0,d0
0000AC54 1028 0028                  		move.b	obSubtype(a0),d0 ; move object type to d0
0000AC58 D040                       		add.w	d0,d0		; multiply d0 by 2
0000AC5A 1140 0024                  		move.b	d0,obRoutine(a0) ; move d0 to routine counter
0000AC5E 0440 0014                  		subi.w	#$14,d0
0000AC62 317B 00D0 0002             		move.w	Anml_EndVram(pc,d0.w),obGfx(a0)
0000AC68 D040                       		add.w	d0,d0
0000AC6A 217B 009C 0004             		move.l	Anml_EndMap(pc,d0.w),obMap(a0)
0000AC70 43FA FF6A                  		lea	Anml_EndSpeed(pc),a1
0000AC74 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
0000AC7A 3171 0000 0010             		move.w	(a1,d0.w),obVelX(a0)
0000AC80 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
0000AC86 3171 0002 0012             		move.w	2(a1,d0.w),obVelY(a0)
0000AC8C 117C 000C 0016             		move.b	#$C,obHeight(a0)
0000AC92 117C 0004 0001             		move.b	#4,obRender(a0)
0000AC98 08E8 0000 0001             		bset	#0,obRender(a0)
0000AC9E 317C 0300 0018             		move.w	#$300,obPriority(a0)
0000ACA4 117C 0008 0014             		move.b	#8,obActWid(a0)
0000ACAA 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000ACB0 6000 0000                  		bra.w	DisplaySprite
0000ACB4                            ; ===========================================================================
0000ACB4                            
0000ACB4                            Anml_FromEnemy:
0000ACB4 5428 0024                  		addq.b	#2,obRoutine(a0)
0000ACB8 6100 8D52                  		bsr.w	RandomNumber
0000ACBC 0240 0001                  		andi.w	#1,d0
0000ACC0 7200                       		moveq	#0,d1
0000ACC2 1238 FE10                  		move.b	(v_zone).w,d1
0000ACC6 D241                       		add.w	d1,d1
0000ACC8 D240                       		add.w	d0,d1
0000ACCA 43FA FECC                  		lea	Anml_VarIndex(pc),a1
0000ACCE 1031 1000                  		move.b	(a1,d1.w),d0
0000ACD2 1140 0030                  		move.b	d0,$30(a0)
0000ACD6 E748                       		lsl.w	#3,d0
0000ACD8 43FA FECA                  		lea	Anml_Variables(pc),a1
0000ACDC D2C0                       		adda.w	d0,a1
0000ACDE 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
0000ACE2 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
0000ACE6 2159 0004                  		move.l	(a1)+,obMap(a0)	; load mappings
0000ACEA 317C 0580 0002             		move.w	#$580,obGfx(a0)	; VRAM setting for 1st animal
0000ACF0 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
0000ACF6 6700                       		beq.s	loc_90C0	; if yes, branch
0000ACF8 317C 0592 0002             		move.w	#$592,obGfx(a0)	; VRAM setting for 2nd animal
0000ACFE                            
0000ACFE                            loc_90C0:
0000ACFE 117C 000C 0016             		move.b	#$C,obHeight(a0)
0000AD04 117C 0004 0001             		move.b	#4,obRender(a0)
0000AD0A 08E8 0000 0001             		bset	#0,obRender(a0)
0000AD10 317C 0300 0018             		move.w	#$300,obPriority(a0)
0000AD16 117C 0008 0014             		move.b	#8,obActWid(a0)
0000AD1C 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000AD22 117C 0002 001A             		move.b	#2,obFrame(a0)
0000AD28 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000AD2E 4A38 F7A7                  		tst.b	(v_bossstatus).w
0000AD32 6600                       		bne.s	loc_911C
0000AD34 6100 0000                  		bsr.w	FindFreeObj
0000AD38 6600                       		bne.s	Anml_Display
0000AD3A 12BC 0000                  		move.b	#id_Points,0(a1) ; load points object
0000AD3E 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000AD44 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000AD4A 3028 003E                  		move.w	$3E(a0),d0
0000AD4E E248                       		lsr.w	#1,d0
0000AD50 1340 001A                  		move.b	d0,obFrame(a1)
0000AD54                            
0000AD54                            Anml_Display:
0000AD54 6000 0000                  		bra.w	DisplaySprite
0000AD58                            ; ===========================================================================
0000AD58                            
0000AD58                            loc_911C:
0000AD58 117C 0012 0024             		move.b	#$12,obRoutine(a0)
0000AD5E 4268 0010                  		clr.w	obVelX(a0)
0000AD62 6000 0000                  		bra.w	DisplaySprite
0000AD66                            ; ===========================================================================
0000AD66                            
0000AD66                            loc_912A:
0000AD66 4A28 0001                  		tst.b	obRender(a0)
0000AD6A 6A00 0000                  		bpl.w	DeleteObject
0000AD6E 6100 0000                  		bsr.w	ObjectFall
0000AD72 4A68 0012                  		tst.w	obVelY(a0)
0000AD76 6B00                       		bmi.s	loc_9180
0000AD78 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AD7E 4A41                       		tst.w	d1
0000AD80 6A00                       		bpl.s	loc_9180
0000AD82 D368 000C                  		add.w	d1,obY(a0)
0000AD86 3168 0032 0010             		move.w	$32(a0),obVelX(a0)
0000AD8C 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AD92 117C 0001 001A             		move.b	#1,obFrame(a0)
0000AD98 1028 0030                  		move.b	$30(a0),d0
0000AD9C D000                       		add.b	d0,d0
0000AD9E 5800                       		addq.b	#4,d0
0000ADA0 1140 0024                  		move.b	d0,obRoutine(a0)
0000ADA4 4A38 F7A7                  		tst.b	(v_bossstatus).w
0000ADA8 6700                       		beq.s	loc_9180
0000ADAA 0838 0004 FE0F             		btst	#4,(v_vbla_byte).w
0000ADB0 6700                       		beq.s	loc_9180
0000ADB2 4468 0010                  		neg.w	obVelX(a0)
0000ADB6 0868 0000 0001             		bchg	#0,obRender(a0)
0000ADBC                            
0000ADBC                            loc_9180:
0000ADBC 6000 0000                  		bra.w	DisplaySprite
0000ADC0                            ; ===========================================================================
0000ADC0                            
0000ADC0                            loc_9184:
0000ADC0 6100 0000                  		bsr.w	ObjectFall
0000ADC4 117C 0001 001A             		move.b	#1,obFrame(a0)
0000ADCA 4A68 0012                  		tst.w	obVelY(a0)
0000ADCE 6B00                       		bmi.s	loc_91AE
0000ADD0 117C 0000 001A             		move.b	#0,obFrame(a0)
0000ADD6 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000ADDC 4A41                       		tst.w	d1
0000ADDE 6A00                       		bpl.s	loc_91AE
0000ADE0 D368 000C                  		add.w	d1,obY(a0)
0000ADE4 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000ADEA                            
0000ADEA                            loc_91AE:
0000ADEA 4A28 0028                  		tst.b	obSubtype(a0)
0000ADEE 6600                       		bne.s	loc_9224
0000ADF0 4A28 0001                  		tst.b	obRender(a0)
0000ADF4 6A00 0000                  		bpl.w	DeleteObject
0000ADF8 6000 0000                  		bra.w	DisplaySprite
0000ADFC                            ; ===========================================================================
0000ADFC                            
0000ADFC                            loc_91C0:
0000ADFC 6100 0000                  		bsr.w	SpeedToPos
0000AE00 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000AE06 4A68 0012                  		tst.w	obVelY(a0)
0000AE0A 6B00                       		bmi.s	loc_91FC
0000AE0C 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AE12 4A41                       		tst.w	d1
0000AE14 6A00                       		bpl.s	loc_91FC
0000AE16 D368 000C                  		add.w	d1,obY(a0)
0000AE1A 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AE20 4A28 0028                  		tst.b	obSubtype(a0)
0000AE24 6700                       		beq.s	loc_91FC
0000AE26 0C28 000A 0028             		cmpi.b	#$A,obSubtype(a0)
0000AE2C 6700                       		beq.s	loc_91FC
0000AE2E 4468 0010                  		neg.w	obVelX(a0)
0000AE32 0868 0000 0001             		bchg	#0,obRender(a0)
0000AE38                            
0000AE38                            loc_91FC:
0000AE38 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000AE3C 6A00                       		bpl.s	loc_9212
0000AE3E 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000AE44 5228 001A                  		addq.b	#1,obFrame(a0)
0000AE48 0228 0001 001A             		andi.b	#1,obFrame(a0)
0000AE4E                            
0000AE4E                            loc_9212:
0000AE4E 4A28 0028                  		tst.b	obSubtype(a0)
0000AE52 6600                       		bne.s	loc_9224
0000AE54 4A28 0001                  		tst.b	obRender(a0)
0000AE58 6A00 0000                  		bpl.w	DeleteObject
0000AE5C 6000 0000                  		bra.w	DisplaySprite
0000AE60                            ; ===========================================================================
0000AE60                            
0000AE60                            loc_9224:
0000AE60 3028 0008                  		move.w	obX(a0),d0
0000AE64 9078 D008                  		sub.w	(v_player+obX).w,d0
0000AE68 6500                       		bcs.s	loc_923C
0000AE6A 0440 0180                  		subi.w	#$180,d0
0000AE6E 6A00                       		bpl.s	loc_923C
0000AE70 4A28 0001                  		tst.b	obRender(a0)
0000AE74 6A00 0000                  		bpl.w	DeleteObject
0000AE78                            
0000AE78                            loc_923C:
0000AE78 6000 0000                  		bra.w	DisplaySprite
0000AE7C                            ; ===========================================================================
0000AE7C                            
0000AE7C                            loc_9240:
0000AE7C 4A28 0001                  		tst.b	obRender(a0)
0000AE80 6A00 0000                  		bpl.w	DeleteObject
0000AE84 5368 0036                  		subq.w	#1,$36(a0)
0000AE88 6600 0000                  		bne.w	loc_925C
0000AE8C 117C 0002 0024             		move.b	#2,obRoutine(a0)
0000AE92 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000AE98                            
0000AE98                            loc_925C:
0000AE98 6000 0000                  		bra.w	DisplaySprite
0000AE9C                            ; ===========================================================================
0000AE9C                            
0000AE9C                            loc_9260:
0000AE9C 6100 0000                  		bsr.w	sub_9404
0000AEA0 6400                       		bcc.s	loc_927C
0000AEA2 3168 0032 0010             		move.w	$32(a0),obVelX(a0)
0000AEA8 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AEAE 117C 000E 0024             		move.b	#$E,obRoutine(a0)
0000AEB4 6000 FF46                  		bra.w	loc_91C0
0000AEB8                            ; ===========================================================================
0000AEB8                            
0000AEB8                            loc_927C:
0000AEB8 6000 FFA6                  		bra.w	loc_9224
0000AEBC                            ; ===========================================================================
0000AEBC                            
0000AEBC                            loc_9280:
0000AEBC 6100 0000                  		bsr.w	sub_9404
0000AEC0 6A00                       		bpl.s	loc_92B6
0000AEC2 4268 0010                  		clr.w	obVelX(a0)
0000AEC6 4268 0032                  		clr.w	$32(a0)
0000AECA 6100 0000                  		bsr.w	SpeedToPos
0000AECE 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000AED4 6100 0000                  		bsr.w	loc_93C4
0000AED8 6100 0000                  		bsr.w	loc_93EC
0000AEDC 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000AEE0 6A00                       		bpl.s	loc_92B6
0000AEE2 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000AEE8 5228 001A                  		addq.b	#1,obFrame(a0)
0000AEEC 0228 0001 001A             		andi.b	#1,obFrame(a0)
0000AEF2                            
0000AEF2                            loc_92B6:
0000AEF2 6000 FF6C                  		bra.w	loc_9224
0000AEF6                            ; ===========================================================================
0000AEF6                            
0000AEF6                            loc_92BA:
0000AEF6 6100 0000                  		bsr.w	sub_9404
0000AEFA 6A00                       		bpl.s	loc_9310
0000AEFC 3168 0032 0010             		move.w	$32(a0),obVelX(a0)
0000AF02 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AF08 117C 0004 0024             		move.b	#4,obRoutine(a0)
0000AF0E 6000 FEB0                  		bra.w	loc_9184
0000AF12                            ; ===========================================================================
0000AF12                            
0000AF12                            loc_92D6:
0000AF12 6100 0000                  		bsr.w	ObjectFall
0000AF16 117C 0001 001A             		move.b	#1,obFrame(a0)
0000AF1C 4A68 0012                  		tst.w	obVelY(a0)
0000AF20 6B00                       		bmi.s	loc_9310
0000AF22 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AF28 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AF2E 4A41                       		tst.w	d1
0000AF30 6A00                       		bpl.s	loc_9310
0000AF32 4628 0029                  		not.b	$29(a0)
0000AF36 6600                       		bne.s	loc_9306
0000AF38 4468 0010                  		neg.w	obVelX(a0)
0000AF3C 0868 0000 0001             		bchg	#0,obRender(a0)
0000AF42                            
0000AF42                            loc_9306:
0000AF42 D368 000C                  		add.w	d1,obY(a0)
0000AF46 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AF4C                            
0000AF4C                            loc_9310:
0000AF4C 6000 FF12                  		bra.w	loc_9224
0000AF50                            ; ===========================================================================
0000AF50                            
0000AF50                            loc_9314:
0000AF50 6100 0000                  		bsr.w	sub_9404
0000AF54 6A00                       		bpl.s	loc_932E
0000AF56 4268 0010                  		clr.w	obVelX(a0)
0000AF5A 4268 0032                  		clr.w	$32(a0)
0000AF5E 6100 0000                  		bsr.w	ObjectFall
0000AF62 6100 0000                  		bsr.w	loc_93C4
0000AF66 6100 0000                  		bsr.w	loc_93EC
0000AF6A                            
0000AF6A                            loc_932E:
0000AF6A 6000 FEF4                  		bra.w	loc_9224
0000AF6E                            ; ===========================================================================
0000AF6E                            
0000AF6E                            loc_9332:
0000AF6E 6100 0000                  		bsr.w	sub_9404
0000AF72 6A00                       		bpl.s	loc_936C
0000AF74 6100 0000                  		bsr.w	ObjectFall
0000AF78 117C 0001 001A             		move.b	#1,obFrame(a0)
0000AF7E 4A68 0012                  		tst.w	obVelY(a0)
0000AF82 6B00                       		bmi.s	loc_936C
0000AF84 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AF8A 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AF90 4A41                       		tst.w	d1
0000AF92 6A00                       		bpl.s	loc_936C
0000AF94 4468 0010                  		neg.w	obVelX(a0)
0000AF98 0868 0000 0001             		bchg	#0,obRender(a0)
0000AF9E D368 000C                  		add.w	d1,obY(a0)
0000AFA2 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AFA8                            
0000AFA8                            loc_936C:
0000AFA8 6000 FEB6                  		bra.w	loc_9224
0000AFAC                            ; ===========================================================================
0000AFAC                            
0000AFAC                            loc_9370:
0000AFAC 6100 0000                  		bsr.w	sub_9404
0000AFB0 6A00                       		bpl.s	loc_93C0
0000AFB2 6100 0000                  		bsr.w	SpeedToPos
0000AFB6 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000AFBC 4A68 0012                  		tst.w	obVelY(a0)
0000AFC0 6B00                       		bmi.s	loc_93AA
0000AFC2 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AFC8 4A41                       		tst.w	d1
0000AFCA 6A00                       		bpl.s	loc_93AA
0000AFCC 4628 0029                  		not.b	$29(a0)
0000AFD0 6600                       		bne.s	loc_93A0
0000AFD2 4468 0010                  		neg.w	obVelX(a0)
0000AFD6 0868 0000 0001             		bchg	#0,obRender(a0)
0000AFDC                            
0000AFDC                            loc_93A0:
0000AFDC D368 000C                  		add.w	d1,obY(a0)
0000AFE0 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AFE6                            
0000AFE6                            loc_93AA:
0000AFE6 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000AFEA 6A00                       		bpl.s	loc_93C0
0000AFEC 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000AFF2 5228 001A                  		addq.b	#1,obFrame(a0)
0000AFF6 0228 0001 001A             		andi.b	#1,obFrame(a0)
0000AFFC                            
0000AFFC                            loc_93C0:
0000AFFC 6000 FE62                  		bra.w	loc_9224
0000B000                            ; ===========================================================================
0000B000                            
0000B000                            loc_93C4:
0000B000 117C 0001 001A             		move.b	#1,obFrame(a0)
0000B006 4A68 0012                  		tst.w	obVelY(a0)
0000B00A 6B00                       		bmi.s	locret_93EA
0000B00C 117C 0000 001A             		move.b	#0,obFrame(a0)
0000B012 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000B018 4A41                       		tst.w	d1
0000B01A 6A00                       		bpl.s	locret_93EA
0000B01C D368 000C                  		add.w	d1,obY(a0)
0000B020 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000B026                            
0000B026                            locret_93EA:
0000B026 4E75                       		rts	
0000B028                            ; ===========================================================================
0000B028                            
0000B028                            loc_93EC:
0000B028 08E8 0000 0001             		bset	#0,obRender(a0)
0000B02E 3028 0008                  		move.w	obX(a0),d0
0000B032 9078 D008                  		sub.w	(v_player+obX).w,d0
0000B036 6400                       		bcc.s	locret_9402
0000B038 08A8 0000 0001             		bclr	#0,obRender(a0)
0000B03E                            
0000B03E                            locret_9402:
0000B03E 4E75                       		rts	
0000B040                            
0000B040                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B040                            
0000B040                            
0000B040                            sub_9404:
0000B040 3038 D008                  		move.w	(v_player+obX).w,d0
0000B044 9068 0008                  		sub.w	obX(a0),d0
0000B048 0440 00B8                  		subi.w	#$B8,d0
0000B04C 4E75                       		rts	
0000B04E                            ; End of function sub_9404
0000B04E                            ; End of function sub_9404
0000B04E                            		include	"_incObj\29 Points.asm"
0000B04E                            ; ---------------------------------------------------------------------------
0000B04E                            ; Object 29 - points that appear when you destroy something
0000B04E                            ; ---------------------------------------------------------------------------
0000B04E                            
0000B04E                            Points:
0000B04E 7000                       		moveq	#0,d0
0000B050 1028 0024                  		move.b	obRoutine(a0),d0
0000B054 323B 0000                  		move.w	Poi_Index(pc,d0.w),d1
0000B058 4EBB 1000                  		jsr	Poi_Index(pc,d1.w)
0000B05C 6000 0000                  		bra.w	DisplaySprite
0000B060                            ; ===========================================================================
0000B060 0000                       Poi_Index:	dc.w Poi_Main-Poi_Index
0000B062 0000                       		dc.w Poi_Slower-Poi_Index
0000B064                            ; ===========================================================================
0000B064                            
0000B064                            Poi_Main:	; Routine 0
0000B064 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B068 217C 0000 0000 0004        		move.l	#Map_Poi,obMap(a0)
0000B070 317C 2561 0002             		move.w	#$2561,obGfx(a0)
0000B076 117C 0004 0001             		move.b	#4,obRender(a0)
0000B07C 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000B082 117C 0008 0014             		move.b	#8,obActWid(a0)
0000B088 317C FD00 0012             		move.w	#-$300,obVelY(a0) ; move object upwards
0000B08E                            
0000B08E                            Poi_Slower:	; Routine 2
0000B08E 4A68 0012                  		tst.w	obVelY(a0)	; is object moving?
0000B092 6A00 0000                  		bpl.w	DeleteObject	; if not, delete
0000B096 6100 0000                  		bsr.w	SpeedToPos
0000B09A 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; reduce object	speed
0000B0A0 4E75                       		rts	
0000B0A0 4E75                       		rts	
0000B0A2                            Map_Animal1:	include	"_maps\Animals 1.asm"
0000B0A2                            ; ---------------------------------------------------------------------------
0000B0A2                            ; Sprite mappings - animals
0000B0A2                            ; ---------------------------------------------------------------------------
0000B0A2                            Map_Animal1_internal:
0000B0A2 0000                       		dc.w byte_9472-Map_Animal1_internal
0000B0A4 0000                       		dc.w byte_9478-Map_Animal1_internal
0000B0A6 0000                       		dc.w byte_946C-Map_Animal1_internal
0000B0A8 01                         byte_946C:	dc.b 1
0000B0A9 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000B0AE 01                         byte_9472:	dc.b 1
0000B0AF F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
0000B0B4 01                         byte_9478:	dc.b 1
0000B0B5 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
0000B0BA                            		even
0000B0BA                            		even
0000B0BA                            Map_Animal2:	include	"_maps\Animals 2.asm"
0000B0BA                            ; ---------------------------------------------------------------------------
0000B0BA                            ; Sprite mappings - animals
0000B0BA                            ; ---------------------------------------------------------------------------
0000B0BA                            Map_Animal2_internal:
0000B0BA 0000                       		dc.w byte_948A-Map_Animal2_internal
0000B0BC 0000                       		dc.w byte_9490-Map_Animal2_internal
0000B0BE 0000                       		dc.w byte_9484-Map_Animal2_internal
0000B0C0 01                         byte_9484:	dc.b 1
0000B0C1 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000B0C6 01                         byte_948A:	dc.b 1
0000B0C7 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
0000B0CC 01                         byte_9490:	dc.b 1
0000B0CD FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
0000B0D2                            		even
0000B0D2                            		even
0000B0D2                            Map_Animal3:	include	"_maps\Animals 3.asm"
0000B0D2                            ; ---------------------------------------------------------------------------
0000B0D2                            ; Sprite mappings - animals
0000B0D2                            ; ---------------------------------------------------------------------------
0000B0D2                            Map_Animal3_internal:
0000B0D2 0000                       		dc.w byte_94A2-Map_Animal3_internal
0000B0D4 0000                       		dc.w byte_94A8-Map_Animal3_internal
0000B0D6 0000                       		dc.w byte_949C-Map_Animal3_internal
0000B0D8 01                         byte_949C:	dc.b 1
0000B0D9 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000B0DE 01                         byte_94A2:	dc.b 1
0000B0DF FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
0000B0E4 01                         byte_94A8:	dc.b 1
0000B0E5 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
0000B0EA                            		even
0000B0EA                            		even
0000B0EA                            Map_Poi:	include	"_maps\Points.asm"
0000B0EA                            ; --------------------------------------------------------------------------------
0000B0EA                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000B0EA                            ; --------------------------------------------------------------------------------
0000B0EA                            
0000B0EA                            SME_qLvsg:	
0000B0EA 0000 0000                  		dc.w SME_qLvsg_E-SME_qLvsg, SME_qLvsg_14-SME_qLvsg	
0000B0EE 0000 0000                  		dc.w SME_qLvsg_1A-SME_qLvsg, SME_qLvsg_20-SME_qLvsg	
0000B0F2 0000 0000                  		dc.w SME_qLvsg_26-SME_qLvsg, SME_qLvsg_2C-SME_qLvsg	
0000B0F6 0000                       		dc.w SME_qLvsg_37-SME_qLvsg	
0000B0F8 01                         SME_qLvsg_E:	dc.b 1	
0000B0F9 FC04 0000 F8               		dc.b $FC, 4, 0, 0, $F8	
0000B0FE 01                         SME_qLvsg_14:	dc.b 1	
0000B0FF FC04 0002 F8               		dc.b $FC, 4, 0, 2, $F8	
0000B104 01                         SME_qLvsg_1A:	dc.b 1	
0000B105 FC04 0004 F8               		dc.b $FC, 4, 0, 4, $F8	
0000B10A 01                         SME_qLvsg_20:	dc.b 1	
0000B10B FC04 0006 F8               		dc.b $FC, 4, 0, 6, $F8	
0000B110 01                         SME_qLvsg_26:	dc.b 1	
0000B111 FC00 0006 FC               		dc.b $FC, 0, 0, 6, $FC	
0000B116 02                         SME_qLvsg_2C:	dc.b 2	
0000B117 FC08 0006 F4               		dc.b $FC, 8, 0, 6, $F4	
0000B11C FC04 0007 01               		dc.b $FC, 4, 0, 7, 1	
0000B121 02                         SME_qLvsg_37:	dc.b 2	
0000B122 FC08 0006 F4               		dc.b $FC, 8, 0, 6, $F4	
0000B127 FC04 0007 06               		dc.b $FC, 4, 0, 7, 6	
0000B12C                            		even
0000B12C                            		even
0000B12C                            
0000B12C                            		include	"_incObj\1F Crabmeat.asm"
0000B12C                            ; ---------------------------------------------------------------------------
0000B12C                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
0000B12C                            ; ---------------------------------------------------------------------------
0000B12C                            
0000B12C                            Crabmeat:
0000B12C 7000                       		moveq	#0,d0
0000B12E 1028 0024                  		move.b	obRoutine(a0),d0
0000B132 323B 0000                  		move.w	Crab_Index(pc,d0.w),d1
0000B136 4EFB 1000                  		jmp	Crab_Index(pc,d1.w)
0000B13A                            ; ===========================================================================
0000B13A                            Crab_Index:
0000B13A 0000                       ptr_Crab_Main:		dc.w Crab_Main-Crab_Index
0000B13C 0000                       ptr_Crab_Action:	dc.w Crab_Action-Crab_Index
0000B13E 0000                       ptr_Crab_Delete:	dc.w Crab_Delete-Crab_Index
0000B140 0000                       ptr_Crab_BallMain:	dc.w Crab_BallMain-Crab_Index
0000B142 0000                       ptr_Crab_BallMove:	dc.w Crab_BallMove-Crab_Index
0000B144                            
0000B144 =00000000                  id_Crab_Main:		equ ptr_Crab_Main-Crab_Index	; 0
0000B144 =00000002                  id_Crab_Action:		equ ptr_Crab_Action-Crab_Index	; 2
0000B144 =00000004                  id_Crab_Delete:		equ ptr_Crab_Delete-Crab_Index	; 4
0000B144 =00000006                  id_Crab_BallMain:	equ ptr_Crab_BallMain-Crab_Index	; 6
0000B144 =00000008                  id_Crab_BallMove:	equ ptr_Crab_BallMove-Crab_Index	; 8
0000B144                            
0000B144 =00000030                  crab_timedelay:	equ $30
0000B144 =00000032                  crab_mode:	equ $32
0000B144                            ; ===========================================================================
0000B144                            
0000B144                            Crab_Main:	; Routine 0
0000B144 117C 0010 0016             		move.b	#$10,obHeight(a0)
0000B14A 117C 0008 0017             		move.b	#8,obWidth(a0)
0000B150 217C 0000 0000 0004        		move.l	#Map_Crab,obMap(a0)
0000B158 317C 0400 0002             		move.w	#$400,obGfx(a0)
0000B15E 117C 0004 0001             		move.b	#4,obRender(a0)
0000B164 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B16A 117C 0006 0020             		move.b	#6,obColType(a0)
0000B170 117C 0015 0014             		move.b	#$15,obActWid(a0)
0000B176 6100 0000                  		bsr.w	ObjectFall
0000B17A 4EB9 0000 0000             		jsr	(ObjFloorDist).l	; find floor
0000B180 4A41                       		tst.w	d1
0000B182 6A00                       		bpl.s	@floornotfound
0000B184 D368 000C                  		add.w	d1,obY(a0)
0000B188 1143 0026                  		move.b	d3,obAngle(a0)
0000B18C 317C 0000 0012             		move.w	#0,obVelY(a0)
0000B192 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B196                            
0000B196                            	@floornotfound:
0000B196 4E75                       		rts	
0000B198                            ; ===========================================================================
0000B198                            
0000B198                            Crab_Action:	; Routine 2
0000B198 7000                       		moveq	#0,d0
0000B19A 1028 0025                  		move.b	ob2ndRout(a0),d0
0000B19E 323B 0000                  		move.w	@index(pc,d0.w),d1
0000B1A2 4EBB 1000                  		jsr	@index(pc,d1.w)
0000B1A6 43F9 0000 0000             		lea	(Ani_Crab).l,a1
0000B1AC 6100 0000                  		bsr.w	AnimateSprite
0000B1B0 6000 0000                  		bra.w	RememberState
0000B1B4                            ; ===========================================================================
0000B1B4 0000                       @index:		dc.w @waittofire-@index
0000B1B6 0000                       		dc.w @walkonfloor-@index
0000B1B8                            ; ===========================================================================
0000B1B8                            
0000B1B8                            @waittofire:
0000B1B8 5368 0030                  		subq.w	#1,crab_timedelay(a0) ; subtract 1 from time delay
0000B1BC 6A00                       		bpl.s	@dontmove
0000B1BE 4A28 0001                  		tst.b	obRender(a0)
0000B1C2 6A00                       		bpl.s	@movecrab
0000B1C4 0868 0001 0032             		bchg	#1,crab_mode(a0)
0000B1CA 6600                       		bne.s	@fire
0000B1CC                            
0000B1CC                            	@movecrab:
0000B1CC 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000B1D0 317C 007F 0030             		move.w	#127,crab_timedelay(a0) ; set time delay to approx 2 seconds
0000B1D6 317C 0080 0010             		move.w	#$80,obVelX(a0)	; move Crabmeat	to the right
0000B1DC 6100 0000                  		bsr.w	Crab_SetAni
0000B1E0 5600                       		addq.b	#3,d0
0000B1E2 1140 001C                  		move.b	d0,obAnim(a0)
0000B1E6 0868 0000 0022             		bchg	#0,obStatus(a0)
0000B1EC 6600                       		bne.s	@noflip
0000B1EE 4468 0010                  		neg.w	obVelX(a0)	; change direction
0000B1F2                            
0000B1F2                            	@dontmove:
0000B1F2                            	@noflip:
0000B1F2 4E75                       		rts	
0000B1F4                            ; ===========================================================================
0000B1F4                            
0000B1F4                            @fire:
0000B1F4 317C 003B 0030             		move.w	#59,crab_timedelay(a0)
0000B1FA 117C 0006 001C             		move.b	#6,obAnim(a0)	; use firing animation
0000B200 6100 0000                  		bsr.w	FindFreeObj
0000B204 6600                       		bne.s	@failleft
0000B206 12BC 0000                  		move.b	#id_Crabmeat,0(a1) ; load left fireball
0000B20A 137C 0006 0024             		move.b	#id_Crab_BallMain,obRoutine(a1)
0000B210 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000B216 0469 0010 0008             		subi.w	#$10,obX(a1)
0000B21C 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000B222 337C FF00 0010             		move.w	#-$100,obVelX(a1)
0000B228                            
0000B228                            	@failleft:
0000B228 6100 0000                  		bsr.w	FindFreeObj
0000B22C 6600                       		bne.s	@failright
0000B22E 12BC 0000                  		move.b	#id_Crabmeat,0(a1) ; load right fireball
0000B232 137C 0006 0024             		move.b	#id_Crab_BallMain,obRoutine(a1)
0000B238 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000B23E 0669 0010 0008             		addi.w	#$10,obX(a1)
0000B244 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000B24A 337C 0100 0010             		move.w	#$100,obVelX(a1)
0000B250                            
0000B250                            	@failright:
0000B250 4E75                       		rts	
0000B252                            ; ===========================================================================
0000B252                            
0000B252                            @walkonfloor:
0000B252 5368 0030                  		subq.w	#1,crab_timedelay(a0)
0000B256 6B00                       		bmi.s	loc_966E
0000B258 6100 0000                  		bsr.w	SpeedToPos
0000B25C 0868 0000 0032             		bchg	#0,crab_mode(a0)
0000B262 6600                       		bne.s	loc_9654
0000B264 3628 0008                  		move.w	obX(a0),d3
0000B268 0643 0010                  		addi.w	#$10,d3
0000B26C 0828 0000 0022             		btst	#0,obStatus(a0)
0000B272 6700                       		beq.s	loc_9640
0000B274 0443 0020                  		subi.w	#$20,d3
0000B278                            
0000B278                            loc_9640:
0000B278 4EB9 0000 0000             		jsr	(ObjFloorDist2).l
0000B27E 0C41 FFF8                  		cmpi.w	#-8,d1
0000B282 6D00                       		blt.s	loc_966E
0000B284 0C41 000C                  		cmpi.w	#$C,d1
0000B288 6C00                       		bge.s	loc_966E
0000B28A 4E75                       		rts	
0000B28C                            ; ===========================================================================
0000B28C                            
0000B28C                            loc_9654:
0000B28C 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000B292 D368 000C                  		add.w	d1,obY(a0)
0000B296 1143 0026                  		move.b	d3,obAngle(a0)
0000B29A 6100 0000                  		bsr.w	Crab_SetAni
0000B29E 5600                       		addq.b	#3,d0
0000B2A0 1140 001C                  		move.b	d0,obAnim(a0)
0000B2A4 4E75                       		rts	
0000B2A6                            ; ===========================================================================
0000B2A6                            
0000B2A6                            loc_966E:
0000B2A6 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000B2AA 317C 003B 0030             		move.w	#59,crab_timedelay(a0)
0000B2B0 317C 0000 0010             		move.w	#0,obVelX(a0)
0000B2B6 6100 0000                  		bsr.w	Crab_SetAni
0000B2BA 1140 001C                  		move.b	d0,obAnim(a0)
0000B2BE 4E75                       		rts	
0000B2C0                            ; ---------------------------------------------------------------------------
0000B2C0                            ; Subroutine to	set the	correct	animation for a	Crabmeat
0000B2C0                            ; ---------------------------------------------------------------------------
0000B2C0                            
0000B2C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B2C0                            
0000B2C0                            
0000B2C0                            Crab_SetAni:
0000B2C0 7000                       		moveq	#0,d0
0000B2C2 1628 0026                  		move.b	obAngle(a0),d3
0000B2C6 6B00                       		bmi.s	loc_96A4
0000B2C8 0C03 0006                  		cmpi.b	#6,d3
0000B2CC 6500                       		bcs.s	locret_96A2
0000B2CE 7001                       		moveq	#1,d0
0000B2D0 0828 0000 0022             		btst	#0,obStatus(a0)
0000B2D6 6600                       		bne.s	locret_96A2
0000B2D8 7002                       		moveq	#2,d0
0000B2DA                            
0000B2DA                            locret_96A2:
0000B2DA 4E75                       		rts	
0000B2DC                            ; ===========================================================================
0000B2DC                            
0000B2DC                            loc_96A4:
0000B2DC 0C03 00FA                  		cmpi.b	#-6,d3
0000B2E0 6200                       		bhi.s	locret_96B6
0000B2E2 7002                       		moveq	#2,d0
0000B2E4 0828 0000 0022             		btst	#0,obStatus(a0)
0000B2EA 6600                       		bne.s	locret_96B6
0000B2EC 7001                       		moveq	#1,d0
0000B2EE                            
0000B2EE                            locret_96B6:
0000B2EE 4E75                       		rts	
0000B2F0                            ; End of function Crab_SetAni
0000B2F0                            
0000B2F0                            ; ===========================================================================
0000B2F0                            
0000B2F0                            Crab_Delete:	; Routine 4
0000B2F0 6100 0000                  		bsr.w	DeleteObject
0000B2F4 4E75                       		rts	
0000B2F6                            ; ===========================================================================
0000B2F6                            ; ---------------------------------------------------------------------------
0000B2F6                            ; Sub-object - missile that the	Crabmeat throws
0000B2F6                            ; ---------------------------------------------------------------------------
0000B2F6                            
0000B2F6                            Crab_BallMain:	; Routine 6
0000B2F6 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B2FA 217C 0000 0000 0004        		move.l	#Map_Crab,obMap(a0)
0000B302 317C 0400 0002             		move.w	#$400,obGfx(a0)
0000B308 117C 0004 0001             		move.b	#4,obRender(a0)
0000B30E 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B314 117C 0087 0020             		move.b	#$87,obColType(a0)
0000B31A 117C 0008 0014             		move.b	#8,obActWid(a0)
0000B320 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000B326 117C 0007 001C             		move.b	#7,obAnim(a0)
0000B32C                            
0000B32C                            Crab_BallMove:	; Routine 8
0000B32C 43F9 0000 0000             		lea	(Ani_Crab).l,a1
0000B332 6100 0000                  		bsr.w	AnimateSprite
0000B336 6100 0000                  		bsr.w	ObjectFall
0000B33A 6100 0000                  		bsr.w	DisplaySprite
0000B33E 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000B342 0640 00E0                  		addi.w	#$E0,d0
0000B346 B068 000C                  		cmp.w	obY(a0),d0	; has object moved below the level boundary?
0000B34A 6500                       		bcs.s	@delete		; if yes, branch
0000B34C 4E75                       		rts	
0000B34E                            
0000B34E                            	@delete:
0000B34E 6000 0000                  		bra.w	DeleteObject
0000B34E 6000 0000                  		bra.w	DeleteObject
0000B352                            		include	"_anim\Crabmeat.asm"
0000B352                            ; ---------------------------------------------------------------------------
0000B352                            ; Animation script - Crabmeat enemy
0000B352                            ; ---------------------------------------------------------------------------
0000B352 0000 0000 0000             Ani_Crab:	dc.w @stand-Ani_Crab, @standslope-Ani_Crab, @standsloperev-Ani_Crab
0000B358 0000 0000 0000             		dc.w @walk-Ani_Crab, @walkslope-Ani_Crab, @walksloperev-Ani_Crab
0000B35E 0000 0000                  		dc.w @firing-Ani_Crab, @ball-Ani_Crab
0000B362 0F00 FF                    @stand:		dc.b $F, 0, afEnd
0000B366 00                         		even
0000B366 0F02 FF                    @standslope:	dc.b $F, 2, afEnd
0000B36A 00                         		even
0000B36A 0F22 FF                    @standsloperev:	dc.b $F, $22, afEnd
0000B36E 00                         		even
0000B36E 0F01 2100 FF               @walk:		dc.b $F, 1, $21, 0, afEnd
0000B374 00                         		even
0000B374 0F21 0302 FF               @walkslope:	dc.b $F, $21, 3, 2, afEnd
0000B37A 00                         		even
0000B37A 0F01 2322 FF               @walksloperev:	dc.b $F, 1, $23, $22, afEnd
0000B380 00                         		even
0000B380 0F04 FF                    @firing:	dc.b $F, 4, afEnd
0000B384 00                         		even
0000B384 0105 06FF                  @ball:		dc.b 1,	5, 6, afEnd
0000B388                            		even
0000B388                            		even
0000B388                            Map_Crab:	include	"_maps\Crabmeat.asm"
0000B388                            ; ---------------------------------------------------------------------------
0000B388                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000B388                            ; ---------------------------------------------------------------------------
0000B388                            Map_Crab_internal:
0000B388 0000                       		dc.w @stand-Map_Crab_internal
0000B38A 0000                       		dc.w @walk-Map_Crab_internal
0000B38C 0000                       		dc.w @slope1-Map_Crab_internal
0000B38E 0000                       		dc.w @slope2-Map_Crab_internal
0000B390 0000                       		dc.w @firing-Map_Crab_internal
0000B392 0000                       		dc.w @ball1-Map_Crab_internal
0000B394 0000                       		dc.w @ball2-Map_Crab_internal
0000B396 04                         @stand:		dc.b 4
0000B397 F009 0000 E8               		dc.b $F0, 9, 0,	0, $E8	; standing/middle walking frame
0000B39C F009 0800 00               		dc.b $F0, 9, 8,	0, 0
0000B3A1 0005 0006 F0               		dc.b 0,	5, 0, 6, $F0
0000B3A6 0005 0806 00               		dc.b 0,	5, 8, 6, 0
0000B3AB 04                         @walk:		dc.b 4
0000B3AC F009 000A E8               		dc.b $F0, 9, 0,	$A, $E8	; walking
0000B3B1 F009 0010 00               		dc.b $F0, 9, 0,	$10, 0
0000B3B6 0005 0016 F0               		dc.b 0,	5, 0, $16, $F0
0000B3BB 0009 001A 00               		dc.b 0,	9, 0, $1A, 0
0000B3C0 04                         @slope1:	dc.b 4
0000B3C1 EC09 0000 E8               		dc.b $EC, 9, 0,	0, $E8	; walking on slope
0000B3C6 EC09 0800 00               		dc.b $EC, 9, 8,	0, 0
0000B3CB FC05 0806 00               		dc.b $FC, 5, 8,	6, 0
0000B3D0 FC06 0020 F0               		dc.b $FC, 6, 0,	$20, $F0
0000B3D5 04                         @slope2:	dc.b 4
0000B3D6 EC09 000A E8               		dc.b $EC, 9, 0,	$A, $E8	; walking on slope
0000B3DB EC09 0010 00               		dc.b $EC, 9, 0,	$10, 0
0000B3E0 FC09 0026 00               		dc.b $FC, 9, 0,	$26, 0
0000B3E5 FC06 002C F0               		dc.b $FC, 6, 0,	$2C, $F0
0000B3EA 06                         @firing:	dc.b 6
0000B3EB F004 0032 F0               		dc.b $F0, 4, 0,	$32, $F0 ; firing projectiles
0000B3F0 F004 0832 00               		dc.b $F0, 4, 8,	$32, 0
0000B3F5 F809 0034 E8               		dc.b $F8, 9, 0,	$34, $E8
0000B3FA F809 0834 00               		dc.b $F8, 9, 8,	$34, 0
0000B3FF 0804 003A F0               		dc.b 8,	4, 0, $3A, $F0
0000B404 0804 083A 00               		dc.b 8,	4, 8, $3A, 0
0000B409 01                         @ball1:		dc.b 1
0000B40A F805 003C F8               		dc.b $F8, 5, 0,	$3C, $F8 ; projectile
0000B40F 01                         @ball2:		dc.b 1
0000B410 F805 0040 F8               		dc.b $F8, 5, 0,	$40, $F8 ; projectile
0000B416 00                         		even
0000B416 00                         		even
0000B416                            		include	"_incObj\06 Mozzietron.asm"
0000B416                            ; ===========================================================================
0000B416                            ; ---------------------------------------------------------------------------
0000B416                            ; Object 06 - Mozzietron enemy	(GHZ)
0000B416                            ; ---------------------------------------------------------------------------
0000B416                            
0000B416                            Mozzietron:					; XREF: Obj_Index
0000B416 7000                       		moveq	#0,d0
0000B418 1028 0024                  		move.b	$24(a0),d0
0000B41C 323B 0000                  		move.w	MozIndex(pc,d0.w),d1
0000B420 4EFB 1000                  		jmp	MozIndex(pc,d1.w)
0000B424                            ; ===========================================================================
0000B424 0000                       MozIndex:	dc.w MozMain-MozIndex
0000B426 0000                       		dc.w MozAction-MozIndex
0000B428 0000                       		dc.w MozDelete-MozIndex
0000B42A                            ; ===========================================================================
0000B42A                            
0000B42A                            MozMain:				; XREF: MozIndex
0000B42A 5428 0024                  		addq.b	#2,$24(a0)
0000B42E 217C 0000 0000 0004        		move.l	#Map_Mozzietron,4(a0)
0000B436 317C 0444 0002             		move.w	#$444,2(a0)
0000B43C 117C 0004 0001             		move.b	#4,1(a0)
0000B442 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B448 117C 0005 0020             		move.b	#5,$20(a0) ; hit box
0000B44E 117C 0018 0014             		move.b	#$18,obActWid(a0)
0000B454                            MozAction:				; XREF: MozIndex
0000B454 7000                       		moveq	#0,d0
0000B456 1028 0025                  		move.b	$25(a0),d0
0000B45A 323B 0000                  		move.w	MozIndex2(pc,d0.w),d1
0000B45E 4EBB 1000                  		jsr	MozIndex2(pc,d1.w)
0000B462 43F9 0000 0000             		lea	(Ani_Mozzietron).l,a1
0000B468 6100 0000                  		bsr.w	AnimateSprite
0000B46C 6000 0000                  		bra.w	RememberState
0000B470                            ; ===========================================================================
0000B470 0000                       MozIndex2:	dc.w MozMove-MozIndex2
0000B472 0000                       		dc.w MozChkNrSonic-MozIndex2
0000B474 0000                       		dc.w MozPinned-MozIndex2
0000B476                            ; ===========================================================================
0000B476                            
0000B476                            MozMove:				; XREF: MozIndex2
0000B476 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000B47A 6A00                       		bpl.s	locret_986C	; if time remains, branch
0000B47C 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
0000B482 6600                       		bne.s	MozFire	; if yes, branch
0000B484 5428 0025                  		addq.b	#2,$25(a0)
0000B488 317C 0064 0032             		move.w	#100,$32(a0)	; set time delay to just over 2	seconds
0000B48E 317C 0100 0010             		move.w	#$100,$10(a0)	; move Buzz Bomber to the right
0000B494 117C 0000 001C             		move.b	#0,$1C(a0)	; use "flying" animation
0000B49A 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000B4A0 6600                       		bne.s	locret_986C	; if not, branch
0000B4A2 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
0000B4A6                            
0000B4A6                            locret_986C:
0000B4A6 4E75                       		rts	
0000B4A8                            ; ===========================================================================
0000B4A8                            
0000B4A8                            MozFire:				; XREF: MozMove
0000B4A8 117C 0002 001C             		move.b	#2,$1C(a0)	; use "diving" animation
0000B4AE 6100 0000                  		bsr.w	ObjectFall
0000B4B2 4EB9 0000 0000             		jsr     ObjFloorDist ; check distance between object and floor
0000B4B8 4A41                       		tst.w	d1 ; is floor distance positive? 
0000B4BA 6A00                       		bpl.s   @return ; if yes, branch 
0000B4BC 303C 00B6                  		move.w    #$B6,d0
0000B4C0 4EB9 0000 1250             		jsr    (PlaySound_Special).l ;    play "spikes moving" sound
0000B4C6 117C 0004 0025             		move.b #4,$25(a0) ; set 2nd state to pinned
0000B4CC D368 000C                  		add.w	d1,$C(a0) ; snap to the ground
0000B4D0 4268 0012                  		clr.w	$12(a0) ; clear Y Velocity 
0000B4D4 4228 0015                  		clr.b	$15(a0) ; $15(a0) is unused in this object, except this line
0000B4D8                            		@return:
0000B4D8 4E75                       	    		rts
0000B4DA                            		
0000B4DA                            
0000B4DA                            ; ===========================================================================
0000B4DA                            
0000B4DA                            MozPinned:
0000B4DA 4E75                               rts
0000B4DC                                    
0000B4DC                            ; ===========================================================================
0000B4DC                            
0000B4DC                            MozChkDel:				; XREF: Obj55_DropFly
0000B4DC 4A28 0001                  		tst.b	1(a0)
0000B4E0 6A00 0000                  		bpl.w	DeleteObject
0000B4E4 4E75                       		rts	
0000B4E6                            ; ===========================================================================
0000B4E6                            
0000B4E6                            MozChkNrSonic:			; XREF: MozIndex2
0000B4E6                            ;		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000B4E6 6B00                       		bmi.s	MozChgDir
0000B4E8 6100 0000                  		bsr.w	SpeedToPos
0000B4EC 4A28 0034                  		tst.b	$34(a0)
0000B4F0 6600                       		bne.s	locret_992A
0000B4F2 3038 D008                  		move.w	($FFFFD008).w,d0
0000B4F6 9068 0008                  		sub.w	8(a0),d0
0000B4FA 6A00                       		bpl.s	MozSetNrSonic
0000B4FC 4440                       		neg.w	d0
0000B4FE                            
0000B4FE                            MozSetNrSonic:
0000B4FE 0C40 0005                  		cmpi.w	#$05,d0		; is Buzz Bomber within	$05 pixels of Sonic?
0000B502 6400                       		bcc.s	locret_992A	; if not, branch
0000B504 4A28 0001                  		tst.b	1(a0)
0000B508 6A00                       		bpl.s	locret_992A
0000B50A 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
0000B510 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
0000B516 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
0000B51C 6000                       		bra.s	MozStop
0000B51E                            ; ===========================================================================
0000B51E                            
0000B51E                            MozChgDir:				; XREF: MozChkNrSonic
0000B51E 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
0000B524 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
0000B52A 317C 003B 0032             		move.w	#59,$32(a0)
0000B530                            
0000B530                            MozStop:				; XREF: MozSetNrSonic
0000B530 5528 0025                  		subq.b	#2,$25(a0)	; run "MozFire" routine
0000B534 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
0000B53A 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
0000B540                            
0000B540                            locret_992A:
0000B540 4E75                       		rts	
0000B542                            ; ===========================================================================
0000B542                            
0000B542                            MozDelete:				; XREF: MozIndex
0000B542 6100 0000                  		bsr.w	DeleteObject
0000B546 4E75                       		rts	
0000B546 4E75                       		rts	
0000B548                            		include	"_incObj\22 Buzz Bomber.asm"
0000B548                            ; ===========================================================================
0000B548                            ; ---------------------------------------------------------------------------
0000B548                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
0000B548                            ; ---------------------------------------------------------------------------
0000B548                            
0000B548                            BuzzBomber:
0000B548 7000                       		moveq	#0,d0
0000B54A 1028 0024                  		move.b	obRoutine(a0),d0
0000B54E 323B 0000                  		move.w	Buzz_Index(pc,d0.w),d1
0000B552 4EFB 1000                  		jmp	Buzz_Index(pc,d1.w)
0000B556                            ; ===========================================================================
0000B556 0000                       Buzz_Index:	dc.w Buzz_Main-Buzz_Index
0000B558 0000                       		dc.w Buzz_Action-Buzz_Index
0000B55A 0000                       		dc.w Buzz_Delete-Buzz_Index
0000B55C                            
0000B55C =00000032                  buzz_timedelay:	equ $32
0000B55C =00000034                  buzz_buzzstatus:	equ $34
0000B55C =0000003C                  buzz_parent:	equ $3C
0000B55C                            ; ===========================================================================
0000B55C                            
0000B55C                            Buzz_Main:	; Routine 0
0000B55C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B560 217C 0000 0000 0004        		move.l	#Map_Buzz,obMap(a0)
0000B568 317C 0444 0002             		move.w	#$444,obGfx(a0)
0000B56E 117C 0004 0001             		move.b	#4,obRender(a0)
0000B574 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B57A 117C 0008 0020             		move.b	#8,obColType(a0)
0000B580 117C 0018 0014             		move.b	#$18,obActWid(a0)
0000B586                            
0000B586                            Buzz_Action:	; Routine 2
0000B586 7000                       		moveq	#0,d0
0000B588 1028 0025                  		move.b	ob2ndRout(a0),d0
0000B58C 323B 0000                  		move.w	@index(pc,d0.w),d1
0000B590 4EBB 1000                  		jsr	@index(pc,d1.w)
0000B594 43F9 0000 0000             		lea	(Ani_Buzz).l,a1
0000B59A 6100 0000                  		bsr.w	AnimateSprite
0000B59E 6000 0000                  		bra.w	RememberState
0000B5A2                            ; ===========================================================================
0000B5A2 0000                       @index:		dc.w @move-@index
0000B5A4 0000                       		dc.w @chknearsonic-@index
0000B5A6                            ; ===========================================================================
0000B5A6                            
0000B5A6                            @move:
0000B5A6 5368 0032                  		subq.w	#1,buzz_timedelay(a0) ; subtract 1 from time delay
0000B5AA 6A00                       		bpl.s	@noflip		; if time remains, branch
0000B5AC 0828 0001 0034             		btst	#1,buzz_buzzstatus(a0) ; is Buzz Bomber near Sonic?
0000B5B2 6600                       		bne.s	@fire		; if yes, branch
0000B5B4 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000B5B8 317C 007F 0032             		move.w	#127,buzz_timedelay(a0) ; set time delay to just over 2 seconds
0000B5BE 317C 0400 0010             		move.w	#$400,obVelX(a0) ; move Buzz Bomber to the right
0000B5C4 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "flying" animation
0000B5CA 0828 0000 0022             		btst	#0,obStatus(a0)	; is Buzz Bomber facing	left?
0000B5D0 6600                       		bne.s	@noflip		; if not, branch
0000B5D2 4468 0010                  		neg.w	obVelX(a0)	; move Buzz Bomber to the left
0000B5D6                            
0000B5D6                            	@noflip:
0000B5D6 4E75                       		rts	
0000B5D8                            ; ===========================================================================
0000B5D8                            
0000B5D8                            	@fire:
0000B5D8 6100 0000                  		bsr.w	FindFreeObj
0000B5DC 6600                       		bne.s	@fail
0000B5DE 12BC 0000                  		move.b	#id_Missile,0(a1) ; load missile object
0000B5E2 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000B5E8 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000B5EE 0669 001C 000C             		addi.w	#$1C,obY(a1)
0000B5F4 337C 0200 0012             		move.w	#$200,obVelY(a1) ; move missile downwards
0000B5FA 337C 0200 0010             		move.w	#$200,obVelX(a1) ; move missile to the right
0000B600 303C 0018                  		move.w	#$18,d0
0000B604 0828 0000 0022             		btst	#0,obStatus(a0)	; is Buzz Bomber facing	left?
0000B60A 6600                       		bne.s	@noflip2	; if not, branch
0000B60C 4440                       		neg.w	d0
0000B60E 4469 0010                  		neg.w	obVelX(a1)	; move missile to the left
0000B612                            
0000B612                            	@noflip2:
0000B612 D169 0008                  		add.w	d0,obX(a1)
0000B616 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
0000B61C 337C 000E 0032             		move.w	#$E,buzz_timedelay(a1)
0000B622 2348 003C                  		move.l	a0,buzz_parent(a1)
0000B626 117C 0001 0034             		move.b	#1,buzz_buzzstatus(a0) ; set to "already fired" to prevent refiring
0000B62C 317C 003B 0032             		move.w	#59,buzz_timedelay(a0)
0000B632 117C 0002 001C             		move.b	#2,obAnim(a0)	; use "firing" animation
0000B638                            
0000B638                            	@fail:
0000B638 4E75                       		rts	
0000B63A                            ; ===========================================================================
0000B63A                            
0000B63A                            @chknearsonic:
0000B63A 5368 0032                  		subq.w	#1,buzz_timedelay(a0) ; subtract 1 from time delay
0000B63E 6B00                       		bmi.s	@chgdirection
0000B640 6100 0000                  		bsr.w	SpeedToPos
0000B644 4A28 0034                  		tst.b	buzz_buzzstatus(a0)
0000B648 6600                       		bne.s	@keepgoing
0000B64A 3038 D008                  		move.w	(v_player+obX).w,d0
0000B64E 9068 0008                  		sub.w	obX(a0),d0
0000B652 6A00                       		bpl.s	@isleft
0000B654 4440                       		neg.w	d0
0000B656                            
0000B656                            	@isleft:
0000B656 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
0000B65A 6400                       		bcc.s	@keepgoing	; if not, branch
0000B65C 4A28 0001                  		tst.b	obRender(a0)
0000B660 6A00                       		bpl.s	@keepgoing
0000B662 117C 0002 0034             		move.b	#2,buzz_buzzstatus(a0) ; set Buzz Bomber to "near Sonic"
0000B668 317C 001D 0032             		move.w	#29,buzz_timedelay(a0) ; set time delay to half a second
0000B66E 6000                       		bra.s	@stop
0000B670                            ; ===========================================================================
0000B670                            
0000B670                            	@chgdirection:
0000B670 117C 0000 0034             		move.b	#0,buzz_buzzstatus(a0) ; set Buzz Bomber to "normal"
0000B676 0868 0000 0022             		bchg	#0,obStatus(a0)	; change direction
0000B67C 317C 003B 0032             		move.w	#59,buzz_timedelay(a0)
0000B682                            
0000B682                            	@stop:
0000B682 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000B686 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop Buzz Bomber moving
0000B68C 117C 0000 001C             		move.b	#0,obAnim(a0)	; use "hovering" animation
0000B692                            
0000B692                            @keepgoing:
0000B692 4E75                       		rts	
0000B694                            ; ===========================================================================
0000B694                            
0000B694                            Buzz_Delete:	; Routine 4
0000B694 6100 0000                  		bsr.w	DeleteObject
0000B698 4E75                       		rts	
0000B698 4E75                       		rts	
0000B69A                            		include	"_incObj\23 Buzz Bomber Missile.asm"
0000B69A                            ; ---------------------------------------------------------------------------
0000B69A                            ; Object 23 - missile that Buzz	Bomber throws
0000B69A                            ; ---------------------------------------------------------------------------
0000B69A                            
0000B69A                            Missile:
0000B69A 7000                       		moveq	#0,d0
0000B69C 1028 0024                  		move.b	obRoutine(a0),d0
0000B6A0 323B 0000                  		move.w	Msl_Index(pc,d0.w),d1
0000B6A4 4EFB 1000                  		jmp	Msl_Index(pc,d1.w)
0000B6A8                            ; ===========================================================================
0000B6A8 0000                       Msl_Index:	dc.w Msl_Main-Msl_Index
0000B6AA 0000                       		dc.w Msl_Animate-Msl_Index
0000B6AC 0000                       		dc.w Msl_FromBuzz-Msl_Index
0000B6AE 0000                       		dc.w Msl_Delete-Msl_Index
0000B6B0 0000                       		dc.w Msl_FromNewt-Msl_Index
0000B6B2                            
0000B6B2 =0000003C                  msl_parent:	equ $3C
0000B6B2                            ; ===========================================================================
0000B6B2                            
0000B6B2                            Msl_Main:	; Routine 0
0000B6B2 5368 0032                  		subq.w	#1,$32(a0)
0000B6B6 6A00                       		bpl.s	Msl_ChkCancel
0000B6B8 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B6BC 217C 0000 0000 0004        		move.l	#Map_Missile,obMap(a0)
0000B6C4 317C 2444 0002             		move.w	#$2444,obGfx(a0)
0000B6CA 117C 0004 0001             		move.b	#4,obRender(a0)
0000B6D0 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B6D6 117C 0008 0014             		move.b	#8,obActWid(a0)
0000B6DC 0228 0003 0022             		andi.b	#3,obStatus(a0)
0000B6E2 4A28 0028                  		tst.b	obSubtype(a0)	; was object created by	a Newtron?
0000B6E6 6700                       		beq.s	Msl_Animate	; if not, branch
0000B6E8                            
0000B6E8 117C 0008 0024             		move.b	#8,obRoutine(a0) ; run "Msl_FromNewt" routine
0000B6EE 117C 0087 0020             		move.b	#$87,obColType(a0)
0000B6F4 117C 0001 001C             		move.b	#1,obAnim(a0)
0000B6FA 6000                       		bra.s	Msl_Animate2
0000B6FC                            ; ===========================================================================
0000B6FC                            
0000B6FC                            Msl_Animate:	; Routine 2
0000B6FC 6100                       		bsr.s	Msl_ChkCancel
0000B6FE 43F9 0000 0000             		lea	(Ani_Missile).l,a1
0000B704 6100 0000                  		bsr.w	AnimateSprite
0000B708 6000 0000                  		bra.w	DisplaySprite
0000B70C                            
0000B70C                            ; ---------------------------------------------------------------------------
0000B70C                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000B70C                            ; destroyed, and if it has, then cancel	the missile
0000B70C                            ; ---------------------------------------------------------------------------
0000B70C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B70C                            
0000B70C                            
0000B70C                            Msl_ChkCancel:
0000B70C 2268 003C                  		movea.l	msl_parent(a0),a1
0000B710 0C11 0000                  		cmpi.b	#id_ExplosionItem,0(a1) ; has Buzz Bomber been destroyed?
0000B714 6700                       		beq.s	Msl_Delete	; if yes, branch
0000B716 4E75                       		rts	
0000B718                            ; End of function Msl_ChkCancel
0000B718                            
0000B718                            ; ===========================================================================
0000B718                            
0000B718                            Msl_FromBuzz:	; Routine 4
0000B718 0828 0007 0022             		btst	#7,obStatus(a0)
0000B71E 6600                       		bne.s	@explode
0000B720 117C 0087 0020             		move.b	#$87,obColType(a0)
0000B726 117C 0001 001C             		move.b	#1,obAnim(a0)
0000B72C 6100 0000                  		bsr.w	SpeedToPos
0000B730 43F9 0000 0000             		lea	(Ani_Missile).l,a1
0000B736 6100 0000                  		bsr.w	AnimateSprite
0000B73A 6100 0000                  		bsr.w	DisplaySprite
0000B73E 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000B742 0640 00E0                  		addi.w	#$E0,d0
0000B746 B068 000C                  		cmp.w	obY(a0),d0	; has object moved below the level boundary?
0000B74A 6500                       		bcs.s	Msl_Delete	; if yes, branch
0000B74C 4E75                       		rts	
0000B74E                            ; ===========================================================================
0000B74E                            
0000B74E                            	@explode:
0000B74E 10BC 0000                  		move.b	#id_MissileDissolve,0(a0) ; change object to an explosion (Obj24)
0000B752 117C 0000 0024             		move.b	#0,obRoutine(a0)
0000B758 6000 F1D8                  		bra.w	MissileDissolve
0000B75C                            ; ===========================================================================
0000B75C                            
0000B75C                            Msl_Delete:	; Routine 6
0000B75C 6100 0000                  		bsr.w	DeleteObject
0000B760 4E75                       		rts	
0000B762                            ; ===========================================================================
0000B762                            
0000B762                            Msl_FromNewt:	; Routine 8
0000B762 4A28 0001                  		tst.b	obRender(a0)
0000B766 6AF4                       		bpl.s	Msl_Delete
0000B768 6100 0000                  		bsr.w	SpeedToPos
0000B76C                            
0000B76C                            Msl_Animate2:
0000B76C 43F9 0000 0000             		lea	(Ani_Missile).l,a1
0000B772 6100 0000                  		bsr.w	AnimateSprite
0000B776 6100 0000                  		bsr.w	DisplaySprite
0000B77A 4E75                       		rts	
0000B77A 4E75                       		rts	
0000B77C                            		include	"_anim\Mozzietron.asm"
0000B77C                            ; ---------------------------------------------------------------------------
0000B77C                            ; Animation script - Buzz Bomber enemy
0000B77C                            ; ---------------------------------------------------------------------------
0000B77C 0000                       Ani_Mozzietron:	dc.w byte_9A1E-Ani_Mozzietron;0
0000B77E 0000                       		dc.w byte_9A22-Ani_Mozzietron;1
0000B780 0000                       		dc.w byte_9A26-Ani_Mozzietron;2
0000B782 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000B786 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000B78A 0502 0304 05FE 01          byte_9A26:	dc.b 5, 2, 3, 4, 5, $FE, 1
0000B792 00                         		even
0000B792 00                         		even
0000B792                            		include	"_anim\Buzz Bomber.asm"
0000B792                            ; ---------------------------------------------------------------------------
0000B792                            ; Animation script - Buzz Bomber enemy
0000B792                            ; ---------------------------------------------------------------------------
0000B792 0000                       Ani_Buzz:	dc.w @fly1-Ani_Buzz
0000B794 0000                       		dc.w @fly2-Ani_Buzz
0000B796 0000                       		dc.w @fires-Ani_Buzz
0000B798 0100 01FF                  @fly1:		dc.b 1,	0, 1, afEnd
0000B79C 0102 03FF                  @fly2:		dc.b 1,	2, 3, afEnd
0000B7A0 0104 05FF                  @fires:		dc.b 1,	4, 5, afEnd
0000B7A4                            		even
0000B7A4                            		even
0000B7A4                            		include	"_anim\Buzz Bomber Missile.asm"
0000B7A4                            ; ---------------------------------------------------------------------------
0000B7A4                            ; Animation script - missile that Buzz Bomber throws
0000B7A4                            ; ---------------------------------------------------------------------------
0000B7A4 0000                       Ani_Missile:	dc.w @flare-Ani_Missile
0000B7A6 0000                       		dc.w @missile-Ani_Missile
0000B7A8 0700 01FC                  @flare:		dc.b 7,	0, 1, afRoutine
0000B7AC 0102 03FF                  @missile:	dc.b 1,	2, 3, afEnd
0000B7B0                            		even
0000B7B0                            		even
0000B7B0                            Map_Mozzietron:	include	"_maps\Mozzietron.asm"
0000B7B0                            ; --------------------------------------------------------------------------------
0000B7B0                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000B7B0                            ; --------------------------------------------------------------------------------
0000B7B0                            
0000B7B0                            SME_qvHIs:	
0000B7B0 0000 0000                  		dc.w SME_qvHIs_C-SME_qvHIs, SME_qvHIs_17-SME_qvHIs	
0000B7B4 0000 0000                  		dc.w SME_qvHIs_1D-SME_qvHIs, SME_qvHIs_28-SME_qvHIs	
0000B7B8 0000 0000                  		dc.w SME_qvHIs_38-SME_qvHIs, SME_qvHIs_4D-SME_qvHIs	
0000B7BC 02                         SME_qvHIs_C:	dc.b 2	
0000B7BD FD0C 2000 F0               		dc.b $FD, $C, $20, 0, $F0	
0000B7C2 ED09 2004 F8               		dc.b $ED, 9, $20, 4, $F8	
0000B7C7 01                         SME_qvHIs_17:	dc.b 1	
0000B7C8 F80D 200A F0               		dc.b $F8, $D, $20, $A, $F0	
0000B7CD 02                         SME_qvHIs_1D:	dc.b 2	
0000B7CE E90A 2012 F8               		dc.b $E9, $A, $20, $12, $F8	
0000B7D3 F901 201B F0               		dc.b $F9, 1, $20, $1B, $F0	
0000B7D8 03                         SME_qvHIs_28:	dc.b 3	
0000B7D9 DF07 2025 FB               		dc.b $DF, 7, $20, $25, $FB	
0000B7DE E700 2030 0B               		dc.b $E7, 0, $20, $30, $B	
0000B7E3 FF00 002D FB               		dc.b $FF, 0, 0, $2D, $FB	
0000B7E8 04                         SME_qvHIs_38:	dc.b 4	
0000B7E9 E509 201D F4               		dc.b $E5, 9, $20, $1D, $F4	
0000B7EE F501 2023 FC               		dc.b $F5, 1, $20, $23, $FC	
0000B7F3 F500 202E F4               		dc.b $F5, 0, $20, $2E, $F4	
0000B7F8 F500 202F 04               		dc.b $F5, 0, $20, $2F, 4	
0000B7FD 04                         SME_qvHIs_4D:	dc.b 4	
0000B7FE E509 201D F4               		dc.b $E5, 9, $20, $1D, $F4	
0000B803 F501 2023 FC               		dc.b $F5, 1, $20, $23, $FC	
0000B808 F500 202E F4               		dc.b $F5, 0, $20, $2E, $F4	
0000B80D F500 202F 04               		dc.b $F5, 0, $20, $2F, 4	
0000B812                            		even
0000B812                            		even
0000B812                            Map_Buzz:	include	"_maps\Buzz Bomber.asm"
0000B812                            ; --------------------------------------------------------------------------------
0000B812                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000B812                            ; --------------------------------------------------------------------------------
0000B812                            
0000B812                            SME_yccqJ:	
0000B812 0000 0000                  		dc.w SME_yccqJ_C-SME_yccqJ, SME_yccqJ_2B-SME_yccqJ	
0000B816 0000 0000                  		dc.w SME_yccqJ_4A-SME_yccqJ, SME_yccqJ_69-SME_yccqJ	
0000B81A 0000 0000                  		dc.w SME_yccqJ_88-SME_yccqJ, SME_yccqJ_AC-SME_yccqJ	
0000B81E 06                         SME_yccqJ_C:	dc.b 6	
0000B81F F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B824 F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B829 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B82E 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B833 EE08 201A E9               		dc.b $EE, 8, $20, $1A, $E9	
0000B838 EE04 201D 01               		dc.b $EE, 4, $20, $1D, 1	
0000B83D 06                         SME_yccqJ_2B:	dc.b 6	
0000B83E F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B843 F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B848 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B84D 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B852 F108 201F EA               		dc.b $F1, 8, $20, $1F, $EA	
0000B857 F104 2022 02               		dc.b $F1, 4, $20, $22, 2	
0000B85C 06                         SME_yccqJ_4A:	dc.b 6	
0000B85D F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B862 F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B867 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B86C 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B871 EE08 201A E9               		dc.b $EE, 8, $20, $1A, $E9	
0000B876 EE04 201D 01               		dc.b $EE, 4, $20, $1D, 1	
0000B87B 06                         SME_yccqJ_69:	dc.b 6	
0000B87C F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B881 F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B886 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B88B 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B890 F108 201F EA               		dc.b $F1, 8, $20, $1F, $EA	
0000B895 F104 2022 02               		dc.b $F1, 4, $20, $22, 2	
0000B89A 07                         SME_yccqJ_88:	dc.b 7	
0000B89B F40D 2000 EC               		dc.b $F4, $D, $20, 0, $EC	
0000B8A0 040C 2008 EC               		dc.b 4, $C, $20, 8, $EC	
0000B8A5 0C00 200C 04               		dc.b $C, 0, $20, $C, 4	
0000B8AA EE04 201D 04               		dc.b $EE, 4, $20, $1D, 4	
0000B8AF 0C00 200E FC               		dc.b $C, 0, $20, $E, $FC	
0000B8B4 0C00 200D F4               		dc.b $C, 0, $20, $D, $F4	
0000B8B9 EE08 201A EC               		dc.b $EE, 8, $20, $1A, $EC	
0000B8BE 04                         SME_yccqJ_AC:	dc.b 4	
0000B8BF F40D 2000 EC               		dc.b $F4, $D, $20, 0, $EC	
0000B8C4 040C 2008 EC               		dc.b 4, $C, $20, 8, $EC	
0000B8C9 0C00 200C 04               		dc.b $C, 0, $20, $C, 4	
0000B8CE 0C04 200D F4               		dc.b $C, 4, $20, $D, $F4	
0000B8D4 00                         		even
0000B8D4 00                         		even
0000B8D4                            Map_Missile:	include	"_maps\Buzz Bomber Missile.asm"
0000B8D4                            ; ---------------------------------------------------------------------------
0000B8D4                            ; Sprite mappings - missile that Buzz Bomber throws
0000B8D4                            ; ---------------------------------------------------------------------------
0000B8D4                            Map_Missile_internal:
0000B8D4 0000                       		dc.w @Flare1-Map_Missile_internal
0000B8D6 0000                       		dc.w @Flare2-Map_Missile_internal
0000B8D8 0000                       		dc.w @Ball1-Map_Missile_internal
0000B8DA 0000                       		dc.w @Ball2-Map_Missile_internal
0000B8DC 01                         @Flare1:	dc.b 1
0000B8DD F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8 ; buzz bomber firing flare
0000B8E2 01                         @Flare2:	dc.b 1
0000B8E3 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000B8E8 01                         @Ball1:		dc.b 1
0000B8E9 F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8 ; missile itself
0000B8EE 01                         @Ball2:		dc.b 1
0000B8EF F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000B8F4                            		even
0000B8F4                            		even
0000B8F4                            
0000B8F4                            		include	"_incObj\25 & 37 Rings.asm"
0000B8F4                            ; ---------------------------------------------------------------------------
0000B8F4                            ; Object 25 - rings
0000B8F4                            ; ---------------------------------------------------------------------------
0000B8F4                            
0000B8F4                            Rings:
0000B8F4 7000                       		moveq	#0,d0
0000B8F6 1028 0024                  		move.b	obRoutine(a0),d0
0000B8FA 323B 0000                  		move.w	Ring_Index(pc,d0.w),d1
0000B8FE 4EFB 1000                  		jmp	Ring_Index(pc,d1.w)
0000B902                            ; ===========================================================================
0000B902                            Ring_Index:
0000B902 0000                       ptr_Ring_Main:		dc.w Ring_Main-Ring_Index
0000B904 0000                       ptr_Ring_Animate:	dc.w Ring_Animate-Ring_Index
0000B906 0000                       ptr_Ring_Collect:	dc.w Ring_Collect-Ring_Index
0000B908 0000                       ptr_Ring_Sparkle:	dc.w Ring_Sparkle-Ring_Index
0000B90A 0000                       ptr_Ring_Delete:	dc.w Ring_Delete-Ring_Index
0000B90C 0000                       ptr_Ring_Attract:	dc.w Ring_Attract-Ring_Index
0000B90E 0000                       ptr_Ring_Collect1:	dc.w Ring_Collect-Ring_Index
0000B910 0000                       ptr_Ring_Sparkle1:	dc.w Ring_Sparkle-Ring_Index
0000B912 0000                       ptr_Ring_Delete1:	dc.w Ring_Delete-Ring_Index
0000B914                            
0000B914 =00000000                  id_Ring_Main:			equ ptr_Ring_Main-Ring_Index	; 0
0000B914 =00000002                  id_Ring_Animate:		equ ptr_Ring_Animate-Ring_Index	; 2
0000B914 =00000004                  id_Ring_Collect:		equ ptr_Ring_Collect-Ring_Index	; 4
0000B914 =00000006                  id_Ring_Sparkle:		equ ptr_Ring_Sparkle-Ring_Index	; 6
0000B914 =00000008                  id_Ring_Delete:			equ ptr_Ring_Delete-Ring_Index	; 8
0000B914 =0000000A                  id_Ring_Attract:		equ ptr_Ring_Attract-Ring_Index	; $A
0000B914 =00000004                  id_Ring_Collect1:		equ ptr_Ring_Collect-Ring_Index	; $C
0000B914 =00000006                  id_Ring_Sparkle1:		equ ptr_Ring_Sparkle-Ring_Index	; $E
0000B914 =00000008                  id_Ring_Delete1:		equ ptr_Ring_Delete-Ring_Index	; $10
0000B914                            ; ---------------------------------------------------------------------------
0000B914                            ; Distances between rings (format: horizontal, vertical)
0000B914                            ; ---------------------------------------------------------------------------
0000B914 1000                       Ring_PosData:	dc.b $10, 0		; horizontal tight
0000B916 1800                       		dc.b $18, 0		; horizontal normal
0000B918 2000                       		dc.b $20, 0		; horizontal wide
0000B91A 0010                       		dc.b 0,	$10		; vertical tight
0000B91C 0018                       		dc.b 0,	$18		; vertical normal
0000B91E 0020                       		dc.b 0,	$20		; vertical wide
0000B920 1010                       		dc.b $10, $10		; diagonal
0000B922 1818                       		dc.b $18, $18
0000B924 2020                       		dc.b $20, $20
0000B926 F010                       		dc.b $F0, $10
0000B928 E818                       		dc.b $E8, $18
0000B92A E020                       		dc.b $E0, $20
0000B92C 1008                       		dc.b $10, 8
0000B92E 1810                       		dc.b $18, $10
0000B930 F008                       		dc.b $F0, 8
0000B932 E810                       		dc.b $E8, $10
0000B934                            ; ===========================================================================
0000B934                            
0000B934                            Ring_Main:	; Routine 0
0000B934 45F8 FC00                  		lea	(v_objstate).w,a2
0000B938 7000                       		moveq	#0,d0
0000B93A 1028 0023                  		move.b	obRespawnNo(a0),d0
0000B93E 45F2 0002                  		lea	2(a2,d0.w),a2
0000B942 1812                       		move.b	(a2),d4
0000B944 1228 0028                  		move.b	obSubtype(a0),d1
0000B948 1001                       		move.b	d1,d0
0000B94A 0241 0007                  		andi.w	#7,d1
0000B94E 0C41 0007                  		cmpi.w	#7,d1
0000B952 6600                       		bne.s	loc_9B80
0000B954 7206                       		moveq	#6,d1
0000B956                            
0000B956                            	loc_9B80:
0000B956 4841                       		swap	d1
0000B958 323C 0000                  		move.w	#0,d1
0000B95C E808                       		lsr.b	#4,d0
0000B95E D040                       		add.w	d0,d0
0000B960 1A3B 00B2                  		move.b	Ring_PosData(pc,d0.w),d5 ; load ring spacing data
0000B964 4885                       		ext.w	d5
0000B966 1C3B 00AD                  		move.b	Ring_PosData+1(pc,d0.w),d6
0000B96A 4886                       		ext.w	d6
0000B96C 2248                       		movea.l	a0,a1
0000B96E 3428 0008                  		move.w	obX(a0),d2
0000B972 3628 000C                  		move.w	obY(a0),d3
0000B976 E20C                       		lsr.b	#1,d4
0000B978 6500                       		bcs.s	loc_9C02
0000B97A 0892 0007                  		bclr	#7,(a2)
0000B97E 6000                       		bra.s	loc_9BBA
0000B980                            ; ===========================================================================
0000B980                            
0000B980                            Ring_MakeRings:
0000B980 4841                       		swap	d1
0000B982 E20C                       		lsr.b	#1,d4
0000B984 6500                       		bcs.s	loc_9C02
0000B986 0892 0007                  		bclr	#7,(a2)
0000B98A 6100 0000                  		bsr.w	FindFreeObj
0000B98E 6600                       		bne.s	loc_9C0E
0000B990                            
0000B990                            loc_9BBA:
0000B990 12BC 0000                  		move.b	#id_Rings,0(a1)	; load ring object
0000B994 5429 0024                  		addq.b	#2,obRoutine(a1)
0000B998 3342 0008                  		move.w	d2,obX(a1)	; set x-axis position based on d2
0000B99C 3368 0008 0032             		move.w	obX(a0),$32(a1)
0000B9A2 3343 000C                  		move.w	d3,obY(a1)	; set y-axis position based on d3
0000B9A6 237C 0000 0000 0004        		move.l	#Map_Ring,obMap(a1)
0000B9AE 337C 2798 0002             		move.w	#$2798,obGfx(a1)
0000B9B4 137C 0004 0001             		move.b	#4,obRender(a1)
0000B9BA 337C 0100 0018             		move.w	#$100,obPriority(a1)
0000B9C0 137C 0047 0020             		move.b	#$47,obColType(a1)
0000B9C6 137C 0008 0014             		move.b	#8,obActWid(a1)
0000B9CC 1368 0023 0023             		move.b	obRespawnNo(a0),obRespawnNo(a1)
0000B9D2 1341 0034                  		move.b	d1,$34(a1)
0000B9D6                            
0000B9D6                            loc_9C02:
0000B9D6 5241                       		addq.w	#1,d1
0000B9D8 D445                       		add.w	d5,d2		; add ring spacing value to d2
0000B9DA D646                       		add.w	d6,d3		; add ring spacing value to d3
0000B9DC 4841                       		swap	d1
0000B9DE 51C9 FFA0                  		dbf	d1,Ring_MakeRings ; repeat for	number of rings
0000B9E2                            
0000B9E2                            loc_9C0E:
0000B9E2 0812 0000                  		btst	#0,(a2)
0000B9E6 6600 0000                  		bne.w	DeleteObject
0000B9EA                            
0000B9EA                            Ring_Animate:	; Routine 2
0000B9EA 4A38 F5C9                  		tst.b	(v_gshield).w
0000B9EE 6700                       		beq.s	@skip
0000B9F0 4A28 0001                  		tst.b	obRender(a0)
0000B9F4 6A00                       		bpl.s	@skip
0000B9F6                            		
0000B9F6 43F8 D000                  		lea (v_player).w,a1
0000B9FA                            		
0000B9FA 3029 0008                  		move.w	obX(a1),d0	; load Sonic's x-axis position
0000B9FE 9068 0008                  		sub.w	obX(a0),d0
0000BA02 6A00                       		bpl.s	@a1
0000BA04 4440                       		neg.w	d0
0000BA06                            		
0000BA06                            	@a1:
0000BA06 0C40 0040                  		cmpi.w	#$40,d0
0000BA0A 6200                       		bhi.s	@skip
0000BA0C                            		
0000BA0C 3029 000C                  		move.w	obY(a1),d0	; load Sonic's y-axis position
0000BA10 9068 000C                  		sub.w	obY(a0),d0
0000BA14 6A00                       		bpl.s	@a2
0000BA16 4440                       		neg.w	d0
0000BA18                            		
0000BA18                            	@a2:
0000BA18 0C40 0040                  		cmpi.w	#$40,d0
0000BA1C 6200                       		bhi.s	@skip
0000BA1E                            		
0000BA1E 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0000BA24 45F8 FC00                  		lea	(v_objstate).w,a2
0000BA28 7000                       		moveq	#0,d0
0000BA2A 1028 0023                  		move.b	obRespawnNo(a0),d0
0000BA2E 1228 0034                  		move.b	$34(a0),d1
0000BA32 03F2 0002                  		bset	d1,2(a2,d0.w)
0000BA36                            		
0000BA36                            	@skip:
0000BA36 1178 FEC5 001A             		move.b	(v_ani2_frame).w,obFrame(a0) ; set frame
0000BA3C 6100 0000                  		bsr.w	DisplaySprite
0000BA5C 4E75                       		rts	
0000BA5E                            ; ===========================================================================
0000BA5E                            
0000BA5E                            Ring_Collect:	; Routine 4
0000BA5E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BA62 117C 0000 0020             		move.b	#0,obColType(a0)
0000BA68 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000BA6E 6100 0000                  		bsr.w	CollectRing
0000BA72 45F8 FC00                  		lea	(v_objstate).w,a2
0000BA76 7000                       		moveq	#0,d0
0000BA78 1028 0023                  		move.b	obRespawnNo(a0),d0
0000BA7C 1228 0034                  		move.b	$34(a0),d1
0000BA80 03F2 0002                  		bset	d1,2(a2,d0.w)
0000BA84                            
0000BA84                            Ring_Sparkle:	; Routine 6
0000BA84 43F9 0000 0000             		lea	(Ani_Ring).l,a1
0000BA8A 6100 0000                  		bsr.w	AnimateSprite
0000BA8E 6000 0000                  		bra.w	DisplaySprite
0000BA92                            ; ===========================================================================
0000BA92                            
0000BA92                            Ring_Delete:	; Routine 8
0000BA92 6000 0000                  		bra.w	DeleteObject
0000BA96                            
0000BA96                            Ring_Attract:	; Routine $A
0000BA96 4A38 F5C9                  		tst.b	(v_gshield).w
0000BA9A 6600                       		bne.s	@skip
0000BA9C 10BC 0000                  		move.b	#id_RingLoss,0(a0)
0000BAA0 117C 0002 0024             		move.b	#2,obRoutine(a0)
0000BAA6 11FC 00FF FEC6             		move.b	#-1,(v_ani3_time).w
0000BAAC 6000                       		bra.s	@display
0000BAAE                            		
0000BAAE                            	@skip:
0000BAAE 323C 0030                  		move.w	#$30,d1	; horizontal
0000BAB2 3038 D008                  		move.w	(v_player+obX).w,d0
0000BAB6 B068 0008                  		cmp.w	obX(a0),d0
0000BABA 6400                       		bcc.s	@a1
0000BABC 4441                       		neg.w	d1
0000BABE 4A68 0010                  		tst.w	obVelX(a0)
0000BAC2 6B00                       		bmi.s	@a2
0000BAC4 D241                       		add.w	d1,d1
0000BAC6 D241                       		add.w	d1,d1
0000BAC8 6000                       		bra.s	@a2
0000BACA                            
0000BACA                            	@a1:
0000BACA 4A68 0010                  		tst.w	obVelX(a0)
0000BACE 6A00                       		bpl.s	@a2
0000BAD0 D241                       		add.w	d1,d1
0000BAD2 D241                       		add.w	d1,d1
0000BAD4                            
0000BAD4                            	@a2:
0000BAD4 D368 0010                  		add.w	d1,obVelX(a0)
0000BAD8 323C 0030                  		move.w	#$30,d1	; vertical
0000BADC 3038 D00C                  		move.w	(v_player+obY).w,d0
0000BAE0 B068 000C                  		cmp.w	obY(a0),d0
0000BAE4 6400                       		bcc.s	@a3
0000BAE6 4441                       		neg.w	d1
0000BAE8 4A68 0012                  		tst.w	obVelY(a0)
0000BAEC 6B00                       		bmi.s	@a4
0000BAEE D241                       		add.w	d1,d1
0000BAF0 D241                       		add.w	d1,d1
0000BAF2 6000                       		bra.s	@a4
0000BAF4                            
0000BAF4                            	@a3:
0000BAF4 4A68 0012                  		tst.w	obVelY(a0)
0000BAF8 6A00                       		bpl.s	@a4
0000BAFA D241                       		add.w	d1,d1
0000BAFC D241                       		add.w	d1,d1
0000BAFE                            
0000BAFE                            	@a4:
0000BAFE D368 0012                  		add.w	d1,obVelY(a0)
0000BB02 6100 0000                  		bsr.w	SpeedToPos
0000BB06                            		
0000BB06                            	@display:
0000BB06 1178 FEC3 001A             		move.b	(v_ani1_frame).w,obFrame(a0) ; set frame
0000BB0C 6000 0000                  		bra.w	DisplaySprite
0000BB10                            
0000BB10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BB10                            
0000BB10                            
0000BB10                            CollectRing:
0000BB10 5278 FE20                  		addq.w	#1,(v_rings).w	; add 1 to rings
0000BB14 0038 0001 FE1D             		ori.b	#1,(f_ringcount).w ; update the rings counter
0000BB1A 303C 0000                  		move.w	#sfx_Ring,d0	; play ring sound
0000BB1E 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; do you have < 100 rings?
0000BB24 6500                       		bcs.s	@playsnd	; if yes, branch
0000BB26 08F8 0001 FE1B             		bset	#1,(v_lifecount).w ; update lives counter
0000BB2C 6700                       		beq.s	@got100
0000BB2E 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; do you have < 200 rings?
0000BB34 6500                       		bcs.s	@playsnd	; if yes, branch
0000BB36 08F8 0002 FE1B             		bset	#2,(v_lifecount).w ; update lives counter
0000BB3C 6600                       		bne.s	@playsnd
0000BB3E                            
0000BB3E                            	@got100:
0000BB3E 5238 FE12                  		addq.b	#1,(v_lives).w	; add 1 to the number of lives you have
0000BB42 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update the lives counter
0000BB46 303C 0000                  		move.w	#bgm_ExtraLife,d0 ; play extra life music
0000BB4A                            		
0000BB4A                            
0000BB4A                            	@playsnd:
0000BB4A 4EF9 0000 1250             		jmp	(PlaySound_Special).l
0000BB50                            ; End of function CollectRing
0000BB50                            
0000BB50                            ; ===========================================================================
0000BB50                            ; ---------------------------------------------------------------------------
0000BB50                            ; Object 37 - rings flying out of Sonic	when he's hit
0000BB50                            ; ---------------------------------------------------------------------------
0000BB50                            
0000BB50                            RingLoss:
0000BB50 7000                       		moveq	#0,d0
0000BB52 1028 0024                  		move.b	obRoutine(a0),d0
0000BB56 323B 0000                  		move.w	RLoss_Index(pc,d0.w),d1
0000BB5A 4EFB 1000                  		jmp	RLoss_Index(pc,d1.w)
0000BB5E                            ; ===========================================================================
0000BB5E 0000                       RLoss_Index:	dc.w RLoss_Count-RLoss_Index
0000BB60 0000                       		dc.w RLoss_Bounce-RLoss_Index
0000BB62 0000                       		dc.w RLoss_Collect-RLoss_Index
0000BB64 0000                       		dc.w RLoss_Sparkle-RLoss_Index
0000BB66 0000                       		dc.w RLoss_Delete-RLoss_Index
0000BB68                            ; ===========================================================================
0000BB68                            
0000BB68                            RLoss_Count:	; Routine 0
0000BB68 2248                       		movea.l	a0,a1
0000BB6A 7A00                       		moveq	#0,d5
0000BB6C 3A38 FE20                  		move.w	(v_rings).w,d5	; check number of rings you have
0000BB70 47F9 0000 0000                     lea     SpillRingData,a3        ; load the address of the array in a3
0000BB76 7018                               moveq   #24,d0                  ; lose a max of 24 rings
0000BB78 45F8 D000                          lea     (v_player).w,a2    ; a2=character
0000BB7C 082A 0006 0022                     btst    #6,obStatus(a2)           ; is Sonic underwater?
0000BB82 6700                               beq.s   @cont                       ; if not, branch
0000BB84 47F9 0000 0000                     lea    SpillRingData_Water,a3        ; load the UNDERWATER address of the array in a3
0000BB8A 7010                               moveq   #16,d0                   ; lose a max of 16 rings underwater
0000BB8C                            @cont:
0000BB8C BA40                               cmp.w   d0,d5
0000BB8E 6500                               bcs.s   @belowmax
0000BB90 3A00                               move.w  d0,d5
0000BB92                            
0000BB92                            @belowmax:
0000BB92 5345                               subq.w  #1,d5
0000BB94 383C 0288                          move.w  #$288,d4
0000BB98 6000                       		bra.s	@makerings
0000BB9A                            ; ===========================================================================
0000BB9A                            
0000BB9A                            	@loop:
0000BB9A 6100 0000                  		bsr.w	FindFreeObj
0000BB9E 6600 0000                  		bne.w	@resetcounter
0000BBA2                            
0000BBA2                            @makerings:
0000BBA2 12BC 0000                  		move.b	#id_RingLoss,0(a1) ; load bouncing ring object
0000BBA6 5429 0024                  		addq.b	#2,obRoutine(a1)
0000BBAA 137C 0008 0016             		move.b	#8,obHeight(a1)
0000BBB0 137C 0008 0017             		move.b	#8,obWidth(a1)
0000BBB6 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000BBBC 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000BBC2 237C 0000 0000 0004        		move.l	#Map_Ring,obMap(a1)
0000BBCA 337C 2798 0002             		move.w	#$2798,obGfx(a1)
0000BBD0 137C 0004 0001             		move.b	#4,obRender(a1)
0000BBD6 137C 0047 0020             		move.b	#$47,obColType(a1)
0000BBDC 137C 0008 0014             		move.b	#8,obActWid(a1)
0000BBE2 4A38 F64C                  		tst.b	($FFFFF64C).w		; Does the level have water?
0000BBE6 6700                       		beq.s	@skiphalvingvel		; If not, branch and skip underwater checks
0000BBE8 3C38 F646                  		move.w	($FFFFF646).w,d6	; Move water level to d6
0000BBEC BC68 000C                  		cmp.w	obY(a0),d6		; Is the ring object underneath the water level?
0000BBF0 6E00                       		bgt.s	@skiphalvingvel		; If not, branch and skip underwater commands
0000BBF2 E240                       		asr.w	d0			; Half d0. Makes the ring's x_vel bounce to the left/right slower
0000BBF4 E241                       		asr.w	d1			; Half d1. Makes the ring's y_vel bounce up/down slower
0000BBF6                            @skiphalvingvel:
0000BBF6 335B 0010                  		move.w  (a3)+,obVelX(a1)         ; move the data contained in the array to the x velocity and increment the address in a3
0000BBFA 335B 0012                  		move.w  (a3)+,obVelY(a1)         ; move the data contained in the array to the y velocity and increment the address in a3	
0000BBFE 51CD FF9A                  		dbf	d5,@loop	; repeat for number of rings (max 31)
0000BC02                            
0000BC02                            @resetcounter:
0000BC02 31FC 0000 FE20             		move.w	#0,(v_rings).w	; reset number of rings to zero
0000BC08 11FC 0080 FE1D             		move.b	#$80,(f_ringcount).w ; update ring counter
0000BC0E 11FC 0000 FE1B             		move.b	#0,(v_lifecount).w
0000BC14 70FF                               moveq   #-1,d0                  ; Move #-1 to d0
0000BC16 1140 001F                          move.b  d0,obDelayAni(a0)       ; Move d0 to new timer
0000BC1A 11C0 FEC6                          move.b  d0,(v_ani3_time).w      ; Move d0 to old timer (for animated purposes)
0000BC28                            
0000BC28                            RLoss_Bounce:	; Routine 2
0000BC28 1178 FEC7 001A             		move.b	(v_ani3_frame).w,obFrame(a0)
0000BC2E 6100 0000                  		bsr.w	SpeedToPos
0000BC32 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000BC38 4A38 F64C                  		tst.b	($FFFFF64C).w		; Does the level have water?
0000BC3C 6700                       		beq.s	@skipbounceslow		; If not, branch and skip underwater checks
0000BC3E 3C38 F646                  		move.w	($FFFFF646).w,d6	; Move water level to d6
0000BC42 BC68 000C                  		cmp.w	obY(a0),d6		; Is the ring object underneath the water level?
0000BC46 6E00                       		bgt.s	@skipbounceslow		; If not, branch and skip underwater commands
0000BC48 0468 000E 0012             		subi.w	#$E,obVelY(a0)		; Reduce gravity by $E ($18-$E=$A), giving the underwater effect
0000BC4E                            	@skipbounceslow:
0000BC4E 6B00                       		bmi.s	@chkdel
0000BC50 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000BC54 D007                       		add.b	d7,d0
0000BC56 0200 0003                  		andi.b	#3,d0
0000BC5A 6600                       		bne.s	@chkdel
0000BC5C 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000BC62 4A41                       		tst.w	d1
0000BC64 6A00                       		bpl.s	@chkdel
0000BC66 D368 000C                  		add.w	d1,obY(a0)
0000BC6A 3028 0012                  		move.w	obVelY(a0),d0
0000BC6E E440                       		asr.w	#2,d0
0000BC70 9168 0012                  		sub.w	d0,obVelY(a0)
0000BC74 4468 0012                  		neg.w	obVelY(a0)
0000BC78                            
0000BC78                            	@chkdel:
0000BC78 5328 001F                  		subq.b  #1,obDelayAni(a0)  ; Subtract 1   ; RHS Ring Timer fix
0000BC7C 6700 0000                          beq.w   DeleteObject       ; If 0, delete ; RHS Ring Timer fix
0000BC80 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000BC84 0640 00E0                  		addi.w	#$E0,d0
0000BC88 B068 000C                  		cmp.w	obY(a0),d0	   ; has object moved below level boundary?
0000BC8C 6500 0000                  		bcs.w	RLoss_Delete	   ; if yes, branch
0000BC90 4A38 F5C9                  		tst.b	(v_gshield).w
0000BC94 6700                       		beq.s	@skip
0000BC96 4A28 0001                  		tst.b	obRender(a0)
0000BC9A 6A00                       		bpl.s	@skip
0000BC9C                            		
0000BC9C 43F8 D000                  		lea (v_player).w,a1
0000BCA0                            		
0000BCA0 3029 0008                  		move.w	obX(a1),d0	; load Sonic's x-axis position
0000BCA4 9068 0008                  		sub.w	obX(a0),d0
0000BCA8 6A00                       		bpl.s	@a1
0000BCAA 4440                       		neg.w	d0
0000BCAC                            		
0000BCAC                            	@a1:
0000BCAC 0C40 00A0                  		cmpi.w	#$A0,d0
0000BCB0 6200                       		bhi.s	@skip
0000BCB2                            		
0000BCB2 3029 000C                  		move.w	obY(a1),d0	; load Sonic's y-axis position
0000BCB6 9068 000C                  		sub.w	obY(a0),d0
0000BCBA 6A00                       		bpl.s	@a2
0000BCBC 4440                       		neg.w	d0
0000BCBE                            		
0000BCBE                            	@a2:
0000BCBE 0C40 00A0                  		cmpi.w	#$A0,d0
0000BCC2 6200                       		bhi.s	@skip
0000BCC4                            		
0000BCC4 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0000BCCA 10BC 0000                  		move.b	#id_Rings,0(a0)
0000BCCE                            		
0000BCCE                            	@skip:		
0000BCCE 43F8 AD80                          lea     v_spritequeue+$180,a1
0000BCD2 D2FC 0080                          adda.w  #$80,a1
0000BCD6 0C51 007E                          cmpi.w  #$7E,(a1)
0000BCDA 6400                               bcc.s   @cont
0000BCDC 5451                               addq.w  #2,(a1)
0000BCDE D2D1                               adda.w  (a1),a1
0000BCE0 3288                               move.w  a0,(a1)
0000BCE2                            		
0000BCE2                            	@cont:
0000BCE2 4E75                               rts		
0000BCE4                            ; ===========================================================================
0000BCE4                            
0000BCE4                            RLoss_Collect:	; Routine 4
0000BCE4 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BCE8 117C 0000 0020             		move.b	#0,obColType(a0)
0000BCEE 6100 FE20                  		bsr.w	CollectRing
0000BCF2                            
0000BCF2                            RLoss_Sparkle:	; Routine 6
0000BCF2 43F9 0000 0000             		lea	(Ani_Ring).l,a1
0000BCF8 6100 0000                  		bsr.w	AnimateSprite
0000BCFC 43F8 AD80                  		lea     v_spritequeue+$180,a1
0000BD00 0C51 007E                          cmpi.w  #$7E,(a1)
0000BD04 6400                               bcc.s   @cont
0000BD06 5451                               addq.w  #2,(a1)
0000BD08 D2D1                               adda.w  (a1),a1
0000BD0A 3288                               move.w  a0,(a1)
0000BD0C                            			
0000BD0C                            	@cont:
0000BD0C 4E75                               rts
0000BD0E                            ; ===========================================================================
0000BD0E                            
0000BD0E                            RLoss_Delete:	; Routine 8
0000BD0E 6000 0000                  		bra.w	DeleteObject
0000BD12                            
0000BD12                            ; ----------------------------------------------------------------------------------------------
0000BD12                            ; Ring Spawn Array 
0000BD12                            ; ----------------------------------------------------------------------------------------------
0000BD12                            
0000BD12 FF3C FC14 00C4 FC14 FDC8+  SpillRingData:  dc.w    $FF3C,$FC14, $00C4,$FC14, $FDC8,$FCB0, $0238,$FCB0 ; 4
0000BD22 FCB0 FDC8 0350 FDC8 FC14+                  dc.w    $FCB0,$FDC8, $0350,$FDC8, $FC14,$FF3C, $03EC,$FF3C ; 8
0000BD32 FC14 00C4 03EC 00C4 FCB0+                  dc.w    $FC14,$00C4, $03EC,$00C4, $FCB0,$0238, $0350,$0238 ; 12
0000BD42 FDC8 0350 0238 0350 FF3C+                  dc.w    $FDC8,$0350, $0238,$0350, $FF3C,$03EC, $00C4,$03EC ; 16
0000BD52 FF9E FE0A 0062 FE0A FEE4+                  dc.w    $FF9E,$FE0A, $0062,$FE0A, $FEE4,$FE58, $011C,$FE58 ; 20
0000BD62 FE58 FEE4 01A8 FEE4 FE0A+                  dc.w    $FE58,$FEE4, $01A8,$FEE4, $FE0A,$FF9E, $01F6,$FF9E ; 24
0000BD72 FE0A 0062 01F6 0062 FE58+                  dc.w    $FE0A,$0062, $01F6,$0062, $FE58,$011C, $01A8,$011C ; 28
0000BD82 FEE4 01A8 011C 01A8 FF9E+                  dc.w    $FEE4,$01A8, $011C,$01A8, $FF9E,$0156, $0062,$0156 ; 32
0000BD92                                            even
0000BD92                            ; ===========================================================================
0000BD92                            ; -------------------------------------------------------------------------------------
0000BD92                            ; Ring Spawn Array - Underwater - same thing as I said above. Edit at your own risk!!!
0000BD92                            ; -------------------------------------------------------------------------------------
0000BD92                            
0000BD92                            SpillRingData_Water:
0000BD92 FF9C FE08 0064 FE08 FEE4+  				dc.w    $FF9C,$FE08, $0064,$FE08, $FEE4,$FE58, $011C,$FE58 ; 4
0000BDA2 FE58 FEE4 01A8 FEE4 FE08+                  dc.w    $FE58,$FEE4, $01A8,$FEE4, $FE08,$FF9C, $01F8,$FF9C ; 8
0000BDB2 FE08 0060 01F8 0060 FE58+                  dc.w    $FE08,$0060, $01F8,$0060, $FE58,$011C, $01A8,$011C ; 12
0000BDC2 FEE4 01A8 011C 01A8 FF9C+                  dc.w    $FEE4,$01A8, $011C,$01A8, $FF9C,$01F4, $0064,$01F4 ; 16
0000BDD2 FFCE FF04 0032 FF04 FF72+                  dc.w    $FFCE,$FF04, $0032,$FF04, $FF72,$FF2C, $008E,$FF2C ; 20
0000BDE2 FF2C FF72 00D4 FF72 FF04+                  dc.w    $FF2C,$FF72, $00D4,$FF72, $FF04,$FFCE, $00FC,$FFCE ; 24
0000BDF2 FF04 0030 00FC 0030 FF2C+                  dc.w    $FF04,$0030, $00FC,$0030, $FF2C,$008E, $00D4,$008E ; 28
0000BE02 FF72 00D4 008E 00D4 FFCE+                  dc.w    $FF72,$00D4, $008E,$00D4, $FFCE,$00FA, $0032,$00FA ; 32
0000BE12                                            even
0000BE12                            ; ===========================================================================				
0000BE12                            ; ===========================================================================				
0000BE12                            		include	"_incObj\4B Giant Ring.asm"
0000BE12                            ; ---------------------------------------------------------------------------
0000BE12                            ; Object 4B - giant ring for entry to special stage
0000BE12                            ; ---------------------------------------------------------------------------
0000BE12                            
0000BE12                            GiantRing:
0000BE12 7000                       		moveq	#0,d0
0000BE14 1028 0024                  		move.b	obRoutine(a0),d0
0000BE18 323B 0000                  		move.w	GRing_Index(pc,d0.w),d1
0000BE1C 4EFB 1000                  		jmp	GRing_Index(pc,d1.w)
0000BE20                            ; ===========================================================================
0000BE20 0000                       GRing_Index:	dc.w GRing_Main-GRing_Index
0000BE22 0000                       		dc.w GRing_Animate-GRing_Index
0000BE24 0000                       		dc.w GRing_Collect-GRing_Index
0000BE26 0000                       		dc.w GRing_Delete-GRing_Index
0000BE28                            ; ===========================================================================
0000BE28                            
0000BE28                            GRing_Main:    ; Routine 0
0000BE28 217C 0000 0000 0004        		move.l	#Map_GRing,obMap(a0)
0000BE30 317C 2400 0002             		move.w	#$2400,obGfx(a0)
0000BE36 0028 0004 0001             		ori.b	#4,obRender(a0)
0000BE3C 117C 0040 0014             		move.b	#$40,obActWid(a0)
0000BE42 4A28 0001                  		tst.b	obRender(a0)
0000BE46 6A00                       		bpl.s	GRing_Animate
0000BE48 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have 6 emeralds?
0000BE4E 6700 0000                  		beq.w	GRing_Delete    ; if yes, branch
0000BE52 0C38 0002 F5C3             		cmpi.b	#2,(f_emeraldm).w    ;TIS Did you  hit the S-Monitor?
0000BE58 6700                       		beq.s	GRing_Okay    ; if yes, branch
0000BE5A                            
0000BE5A 4E75                       		rts    
0000BE5C                            ; ===========================================================================
0000BE5C                            
0000BE5C                            GRing_Okay:
0000BE5C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BE60 317C 0100 0018             		move.w	#$100,obPriority(a0)
0000BE66 117C 0052 0020             		move.b	#$52,obColType(a0)
0000BE6C 31FC 0C40 F7BE             		move.w	#$C40,(v_gfxbigring).w	; Signal that Art_BigRing should be loaded ($C40 is the size of Art_BigRing)
0000BE72                            
0000BE72                            GRing_Animate:	; Routine 2
0000BE72 1178 FEC3 001A             		move.b	(v_ani1_frame).w,obFrame(a0)
0000BE96 6000 0000                  		bra.w	DisplaySprite
0000BE9A                            ; ===========================================================================
0000BE9A                            
0000BE9A                            GRing_Collect:	; Routine 4
0000BE9A 5528 0024                  		subq.b	#2,obRoutine(a0)
0000BE9E 117C 0000 0020             		move.b	#0,obColType(a0)
0000BEA4 6100 0000                  		bsr.w	FindFreeObj
0000BEA8 6600 0000                  		bne.w	GRing_PlaySnd
0000BEAC 12BC 0000                  		move.b	#id_RingFlash,0(a1) ; load giant ring flash object
0000BEB0 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000BEB6 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000BEBC 2348 003C                  		move.l	a0,$3C(a1)
0000BEC0 3038 D008                  		move.w	(v_player+obX).w,d0
0000BEC4 B068 0008                  		cmp.w	obX(a0),d0	; has Sonic come from the left?
0000BEC8 6500                       		bcs.s	GRing_PlaySnd	; if yes, branch
0000BECA 08E9 0000 0001             		bset	#0,obRender(a1)	; reverse flash	object	
0000BED0 11FC 0001 FE57             		move.b  #1,(v_emeralds).w
0000BED6 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0000BEDC                            		
0000BEDC                            GRing_PlaySnd:
0000BEE6 608A                       		bra.s	GRing_Animate
0000BEE8                            ; ===========================================================================
0000BEE8                            
0000BEE8                            GRing_Delete:	; Routine 6
0000BEE8 6000 0000                  		bra.w	DeleteObject
0000BEE8 6000 0000                  		bra.w	DeleteObject
0000BEEC                            		include	"_incObj\7C Ring Flash.asm"
0000BEEC                            ; ---------------------------------------------------------------------------
0000BEEC                            ; Object 7C - flash effect when	you collect the	giant ring
0000BEEC                            ; ---------------------------------------------------------------------------
0000BEEC                            
0000BEEC                            RingFlash:
0000BEEC 7000                       		moveq	#0,d0
0000BEEE 1028 0024                  		move.b	obRoutine(a0),d0
0000BEF2 323B 0000                  		move.w	Flash_Index(pc,d0.w),d1
0000BEF6 4EFB 1000                  		jmp	Flash_Index(pc,d1.w)
0000BEFA                            ; ===========================================================================
0000BEFA 0000                       Flash_Index:	dc.w Flash_Main-Flash_Index
0000BEFC 0000                       		dc.w Flash_ChkDel-Flash_Index
0000BEFE 0000                       		dc.w Flash_Delete-Flash_Index
0000BF00                            ; ===========================================================================
0000BF00                            
0000BF00                            Flash_Main:	; Routine 0
0000BF00 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BF04 217C 0000 0000 0004        		move.l	#Map_Flash,obMap(a0)
0000BF0C 317C 2462 0002             		move.w	#$2462,obGfx(a0)
0000BF12 0028 0004 0001             		ori.b	#4,obRender(a0)
0000BF18 317C 0000 0018             		move.w	#0,obPriority(a0)
0000BF1E 117C 0020 0014             		move.b	#$20,obActWid(a0)
0000BF24 117C 00FF 001A             		move.b	#$FF,obFrame(a0)
0000BF2A                            
0000BF2A                            Flash_ChkDel:	; Routine 2
0000BF2A 6100                       		bsr.s	Flash_Collect
0000BF4A 6000 0000                  		bra.w	DisplaySprite
0000BF4E                            
0000BF4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BF4E                            
0000BF4E                            
0000BF4E                            Flash_Collect:
0000BF4E 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000BF52 6A00                       		bpl.s	locret_9F76
0000BF54 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000BF5A 5228 001A                  		addq.b	#1,obFrame(a0)
0000BF5E 0C28 0008 001A             		cmpi.b	#8,obFrame(a0)	; has animation	finished?
0000BF64 6400                       		bcc.s	Flash_End	; if yes, branch
0000BF66 0C28 0003 001A             		cmpi.b	#3,obFrame(a0)	; is 3rd frame displayed?
0000BF6C 6600                       		bne.s	locret_9F76	; if not, branch
0000BF6E 2268 003C                  		movea.l	$3C(a0),a1	; get parent object address
0000BF72 137C 0006 0024             		move.b	#6,obRoutine(a1) ; delete parent object
0000BF78 11FC 0000 D01C             		move.b	#id_Null,(v_player+obAnim).w ; make Sonic invisible
0000BF7E 11FC 0001 F7CD             		move.b	#1,(f_bigring).w ; stop	Sonic getting bonuses
0000BF84 4238 FE2D                  		clr.b	(v_invinc).w	; remove invincibility
0000BF88 4238 FE2C                  		clr.b	(v_shield).w	; remove shield
0000BF8C                            
0000BF8C                            locret_9F76:
0000BF8C 4E75                       		rts	
0000BF8E                            ; ===========================================================================
0000BF8E                            
0000BF8E                            Flash_End:
0000BF8E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BF92 31FC 0000 D000             		move.w	#0,(v_player).w ; remove Sonic object
0000BF98 588F                       		addq.l	#4,sp
0000BF9A 4E75                       		rts	
0000BF9C                            ; End of function Flash_Collect
0000BF9C                            
0000BF9C                            ; ===========================================================================
0000BF9C                            
0000BF9C                            Flash_Delete:	; Routine 4
0000BF9C 6000 0000                  		bra.w	DeleteObject
0000BF9C 6000 0000                  		bra.w	DeleteObject
0000BFA0                            
0000BFA0                            		include	"_anim\Rings.asm"
0000BFA0                            ; ---------------------------------------------------------------------------
0000BFA0                            ; Animation script - ring
0000BFA0                            ; ---------------------------------------------------------------------------
0000BFA0 0000                       Ani_Ring:	dc.w @ring-Ani_Ring
0000BFA2 0706 0708 09FC             @ring:		dc.b 7,	6, 7, 8, 9, afRoutine
0000BFA8                            		even
0000BFA8                            		even
0000BFA8                            Map_Ring:		include	"_maps\Rings (JP1).asm"
0000BFA8                            ; --------------------------------------------------------------------------------
0000BFA8                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000BFA8                            ; --------------------------------------------------------------------------------
0000BFA8                            
0000BFA8                            SME_aSMQh:	
0000BFA8 0000 0000                  		dc.w SME_aSMQh_14-SME_aSMQh, SME_aSMQh_1A-SME_aSMQh	
0000BFAC 0000 0000                  		dc.w SME_aSMQh_20-SME_aSMQh, SME_aSMQh_26-SME_aSMQh	
0000BFB0 0000 0000                  		dc.w SME_aSMQh_2C-SME_aSMQh, SME_aSMQh_32-SME_aSMQh	
0000BFB4 0000 0000                  		dc.w SME_aSMQh_38-SME_aSMQh, SME_aSMQh_3E-SME_aSMQh	
0000BFB8 0000 0000                  		dc.w SME_aSMQh_44-SME_aSMQh, SME_aSMQh_4A-SME_aSMQh	
0000BFBC 01                         SME_aSMQh_14:	dc.b 1	
0000BFBD F805 0000 F8               		dc.b $F8, 5, 0, 0, $F8	
0000BFC2 01                         SME_aSMQh_1A:	dc.b 1	
0000BFC3 F805 0004 F8               		dc.b $F8, 5, 0, 4, $F8	
0000BFC8 01                         SME_aSMQh_20:	dc.b 1	
0000BFC9 F805 000A F8               		dc.b $F8, 5, 0, $A, $F8	
0000BFCE 01                         SME_aSMQh_26:	dc.b 1	
0000BFCF F801 0008 FC               		dc.b $F8, 1, 0, 8, $FC	
0000BFD4 01                         SME_aSMQh_2C:	dc.b 1	
0000BFD5 F805 080A F8               		dc.b $F8, 5, 8, $A, $F8	
0000BFDA 01                         SME_aSMQh_32:	dc.b 1	
0000BFDB F805 0804 F8               		dc.b $F8, 5, 8, 4, $F8	
0000BFE0 01                         SME_aSMQh_38:	dc.b 1	
0000BFE1 F805 0010 F8               		dc.b $F8, 5, 0, $10, $F8	
0000BFE6 01                         SME_aSMQh_3E:	dc.b 1	
0000BFE7 F805 1810 F8               		dc.b $F8, 5, $18, $10, $F8	
0000BFEC 01                         SME_aSMQh_44:	dc.b 1	
0000BFED F805 0810 F8               		dc.b $F8, 5, 8, $10, $F8	
0000BFF2 01                         SME_aSMQh_4A:	dc.b 1	
0000BFF3 F805 1010 F8               		dc.b $F8, 5, $10, $10, $F8	
0000BFF8                            		even
0000BFF8                            		even
0000BFF8                            Map_GRing:	include	"_maps\Giant Ring.asm"
0000BFF8                            ; ---------------------------------------------------------------------------
0000BFF8                            ; Sprite mappings - giant ring
0000BFF8                            ; ---------------------------------------------------------------------------
0000BFF8                            Map_GRing_internal:
0000BFF8 0000                       		dc.w byte_9FDA-Map_GRing_internal
0000BFFA 0000                       		dc.w byte_A00D-Map_GRing_internal
0000BFFC 0000                       		dc.w byte_A036-Map_GRing_internal
0000BFFE 0000                       		dc.w byte_A04B-Map_GRing_internal
0000C000 0A                         byte_9FDA:	dc.b $A
0000C001 E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8	; ring front
0000C006 E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000C00B E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000C010 E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000C015 F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000C01A F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000C01F 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000C024 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000C029 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000C02E 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000C033 08                         byte_A00D:	dc.b 8
0000C034 E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0 ; ring angle
0000C039 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000C03E E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000C043 F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000C048 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000C04D 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000C052 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000C057 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000C05C 04                         byte_A036:	dc.b 4
0000C05D E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4 ; ring perpendicular
0000C062 E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000C067 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000C06C 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000C071 08                         byte_A04B:	dc.b 8
0000C072 E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0 ; ring angle
0000C077 E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000C07C E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000C081 F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000C086 F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000C08B 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000C090 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000C095 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000C09A                            		even
0000C09A                            		even
0000C09A                            Map_Flash:	include	"_maps\Ring Flash.asm"
0000C09A                            ; ---------------------------------------------------------------------------
0000C09A                            ; Sprite mappings - flash effect when you collect the giant ring
0000C09A                            ; ---------------------------------------------------------------------------
0000C09A                            Map_Flash_internal:
0000C09A 0000                       		dc.w byte_A084-Map_Flash_internal
0000C09C 0000                       		dc.w byte_A08F-Map_Flash_internal
0000C09E 0000                       		dc.w byte_A0A4-Map_Flash_internal
0000C0A0 0000                       		dc.w byte_A0B9-Map_Flash_internal
0000C0A2 0000                       		dc.w byte_A0CE-Map_Flash_internal
0000C0A4 0000                       		dc.w byte_A0E3-Map_Flash_internal
0000C0A6 0000                       		dc.w byte_A0F8-Map_Flash_internal
0000C0A8 0000                       		dc.w byte_A103-Map_Flash_internal
0000C0AA 02                         byte_A084:	dc.b 2
0000C0AB E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000C0B0 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000C0B5 04                         byte_A08F:	dc.b 4
0000C0B6 E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000C0BB E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000C0C0 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000C0C5 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000C0CA 04                         byte_A0A4:	dc.b 4
0000C0CB E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000C0D0 E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000C0D5 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000C0DA 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000C0DF 04                         byte_A0B9:	dc.b 4
0000C0E0 E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000C0E5 E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000C0EA 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000C0EF 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000C0F4 04                         byte_A0CE:	dc.b 4
0000C0F5 E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000C0FA E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000C0FF 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000C104 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000C109 04                         byte_A0E3:	dc.b 4
0000C10A E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000C10F E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000C114 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000C119 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000C11E 02                         byte_A0F8:	dc.b 2
0000C11F E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000C124 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000C129 04                         byte_A103:	dc.b 4
0000C12A E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000C12F E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000C134 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000C139 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000C13E                            		even
0000C13E                            		even
0000C13E                            		include	"_incObj\26 Monitor.asm"
0000C13E                            ; ---------------------------------------------------------------------------
0000C13E                            ; Object 26 - monitors
0000C13E                            ; ---------------------------------------------------------------------------
0000C13E                            
0000C13E                            Monitor:
0000C13E 7000                       		moveq	#0,d0
0000C140 1028 0024                  		move.b	obRoutine(a0),d0
0000C144 323B 0000                  		move.w	Mon_Index(pc,d0.w),d1
0000C148 4EFB 1000                  		jmp	Mon_Index(pc,d1.w)
0000C14C                            ; ===========================================================================
0000C14C 0000                       Mon_Index:	dc.w Mon_Main-Mon_Index
0000C14E 0000                       		dc.w Mon_Solid-Mon_Index
0000C150 0000                       		dc.w Mon_BreakOpen-Mon_Index
0000C152 0000                       		dc.w Mon_Animate-Mon_Index
0000C154 0000                       		dc.w Mon_Display-Mon_Index
0000C156                            ; ===========================================================================
0000C156                            
0000C156                            Mon_Main:	; Routine 0
0000C156 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C15A 117C 000E 0016             		move.b	#$E,obHeight(a0)
0000C160 117C 000E 0017             		move.b	#$E,obWidth(a0)
0000C166 217C 0000 0000 0004        		move.l	#Map_Monitor,obMap(a0)
0000C16E 317C 0680 0002             		move.w	#$680,obGfx(a0)
0000C174 117C 0004 0001             		move.b	#4,obRender(a0)
0000C17A 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000C180 117C 000F 0014             		move.b	#$F,obActWid(a0)
0000C186 45F8 FC00                  		lea	(v_objstate).w,a2
0000C18A 7000                       		moveq	#0,d0
0000C18C 1028 0023                  		move.b	obRespawnNo(a0),d0
0000C190 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000C196 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000C19C 6700                       		beq.s	@notbroken	; if not, branch
0000C19E 117C 0008 0024             		move.b	#8,obRoutine(a0) ; run "Mon_Display" routine
0000C1A4 117C 000B 001A             		move.b	#$B,obFrame(a0)	; use broken monitor frame
0000C1AA 4E75                       		rts	
0000C1AC                            ; ===========================================================================
0000C1AC                            
0000C1AC                            	@notbroken:
0000C1AC 117C 0046 0020             		move.b	#$46,obColType(a0)
0000C1B2 1168 0028 001C             		move.b	obSubtype(a0),obAnim(a0)
0000C1B8                            
0000C1B8                            Mon_Solid:	; Routine 2
0000C1B8 1028 0025                  		move.b	ob2ndRout(a0),d0 ; is monitor set to fall?
0000C1BC 6700                       		beq.s	@normal		; if not, branch
0000C1BE 5500                       		subq.b	#2,d0
0000C1C0 6600                       		bne.s	@fall
0000C1C2                            
0000C1C2                            		; 2nd Routine 2
0000C1C2 7200                       		moveq	#0,d1
0000C1C4 1228 0014                  		move.b	obActWid(a0),d1
0000C1C8 0641 000B                  		addi.w	#$B,d1
0000C1CC 6100 D000                  		bsr.w	ExitPlatform
0000C1D0 0829 0003 0022             		btst	#3,obStatus(a1) ; is Sonic on top of the monitor?
0000C1D6 6600 0000                  		bne.w	@ontop		; if yes, branch
0000C1DA 4228 0025                  		clr.b	ob2ndRout(a0)
0000C1DE 6000 0000                  		bra.w	Mon_Animate
0000C1E2                            ; ===========================================================================
0000C1E2                            
0000C1E2                            	@ontop:
0000C1E2 363C 0010                  		move.w	#$10,d3
0000C1E6 3428 0008                  		move.w	obX(a0),d2
0000C1EA 6100 D540                  		bsr.w	MvSonicOnPtfm
0000C1EE 6000 0000                  		bra.w	Mon_Animate
0000C1F2                            ; ===========================================================================
0000C1F2                            
0000C1F2                            @fall:		; 2nd Routine 4
0000C1F2 6100 0000                  		bsr.w	ObjectFall
0000C1F6 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000C1FC 4A41                       		tst.w	d1
0000C1FE 6A00 0000                  		bpl.w	Mon_Animate
0000C202 D368 000C                  		add.w	d1,obY(a0)
0000C206 4268 0012                  		clr.w	obVelY(a0)
0000C20A 4228 0025                  		clr.b	ob2ndRout(a0)
0000C20E 6000 0000                  		bra.w	Mon_Animate
0000C212                            ; ===========================================================================
0000C212                            
0000C212                            @normal:	; 2nd Routine 0
0000C212 323C 001A                  		move.w	#$1A,d1
0000C216 343C 000F                  		move.w	#$F,d2
0000C21A 6100 0000                  		bsr.w	Mon_SolidSides
0000C21E 6700 0000                  		beq.w	loc_A25C
0000C222 4A69 0012                  		tst.w	obVelY(a1)
0000C226 6B00                       		bmi.s	loc_A20A
0000C228 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1) ; is Sonic rolling?
0000C22E 6700                       		beq.s	loc_A25C	; if yes, branch
0000C230 0C29 0000 001C             		cmpi.b	#id_SpinDash,obAnim(a1) ; is Sonic Spindashing?
0000C236 6700                       		beq.s	loc_A25C	; if yes, branch
0000C238 0C29 0000 001C             		cmpi.b	#id_Peelout,obAnim(a1) ; is Sonic Spindashing?
0000C23E 6700                       		beq.s	loc_A25C	; if yes, branch
0000C240                            
0000C240                            loc_A20A:
0000C240 4A41                       		tst.w	d1
0000C242 6A00                       		bpl.s	loc_A220
0000C244 9769 000C                  		sub.w	d3,obY(a1)
0000C248 6100 CE72                  		bsr.w	loc_74AE
0000C24C 117C 0002 0025             		move.b	#2,ob2ndRout(a0)
0000C252 6000 0000                  		bra.w	Mon_Animate
0000C256                            ; ===========================================================================
0000C256                            
0000C256                            loc_A220:
0000C256 4A40                       		tst.w	d0
0000C258 6700 0000                  		beq.w	loc_A246
0000C25C 6B00                       		bmi.s	loc_A230
0000C25E 4A69 0010                  		tst.w	obVelX(a1)
0000C262 6B00                       		bmi.s	loc_A246
0000C264 6000                       		bra.s	loc_A236
0000C266                            ; ===========================================================================
0000C266                            
0000C266                            loc_A230:
0000C266 4A69 0010                  		tst.w	obVelX(a1)
0000C26A 6A00                       		bpl.s	loc_A246
0000C26C                            
0000C26C                            loc_A236:
0000C26C 9169 0008                  		sub.w	d0,obX(a1)
0000C270 337C 0000 0020             		move.w	#0,obInertia(a1)
0000C276 337C 0000 0010             		move.w	#0,obVelX(a1)
0000C27C                            
0000C27C                            loc_A246:
0000C27C 0829 0001 0022             		btst	#1,obStatus(a1)
0000C282 6600                       		bne.s	loc_A26A
0000C284 08E9 0005 0022             		bset	#5,obStatus(a1)
0000C28A 08E8 0005 0022             		bset	#5,obStatus(a0)
0000C290 6000                       		bra.s	Mon_Animate
0000C292                            ; ===========================================================================
0000C292                            
0000C292                            loc_A25C:
0000C292 0828 0005 0022             		btst	#5,obStatus(a0)
0000C298 6700                       		beq.s	Mon_Animate
0000C29A 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1)	; is Sonic in his jumping/rolling animation?
0000C2A0 6700                       		beq.s	loc_A26A	; if so, branch
0000C2A2 337C 0001 001C             		move.w	#1,obAnim(a1)	; clear obAnim and set obNextAni to 1, putting Sonic in his walking animation
0000C2A8                            
0000C2A8                            loc_A26A:
0000C2A8 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000C2AE 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000C2B4                            
0000C2B4                            Mon_Animate:	; Routine 6
0000C2B4 43F9 0000 0000             		lea	(Ani_Monitor).l,a1
0000C2BA 6100 0000                  		bsr.w	AnimateSprite
0000C2BE                            
0000C2BE                            Mon_Display:	; Routine 8
0000C2BE 6100 0000                  		bsr.w	DisplaySprite
0000C2E0 4E75                       		rts	
0000C2E2                            ; ===========================================================================
0000C2E2                            
0000C2E2                            Mon_BreakOpen:	; Routine 4
0000C2E2 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C2E6 117C 0000 0020             		move.b	#0,obColType(a0)
0000C2EC 6100 0000                  		bsr.w	FindFreeObj
0000C2F0 6600                       		bne.s	Mon_Explode
0000C2F2 12BC 0000                  		move.b	#id_PowerUp,0(a1) ; load monitor contents object
0000C2F6 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000C2FC 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000C302 1368 001C 001C             		move.b	obAnim(a0),obAnim(a1)
0000C308                            
0000C308                            Mon_Explode:
0000C308 6100 0000                  		bsr.w	FindFreeObj
0000C30C 6600                       		bne.s	@fail
0000C30E 12BC 0000                  		move.b	#id_ExplosionItem,0(a1) ; load explosion object
0000C312 5429 0024                  		addq.b	#2,obRoutine(a1) ; don't create an animal
0000C316 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000C31C 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000C322                            
0000C322                            	@fail:
0000C322 45F8 FC00                  		lea	(v_objstate).w,a2
0000C326 7000                       		moveq	#0,d0
0000C328 1028 0023                  		move.b	obRespawnNo(a0),d0
0000C32C 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000C332 117C 0009 001C             		move.b	#9,obAnim(a0)	; set monitor type to broken
0000C338 6000 0000                  		bra.w	DisplaySprite
0000C338 6000 0000                  		bra.w	DisplaySprite
0000C33C                            		include	"_incObj\2E Monitor Content Power-Up.asm"
0000C33C                            ; ---------------------------------------------------------------------------
0000C33C                            ; Object 2E - contents of monitors
0000C33C                            ; ---------------------------------------------------------------------------
0000C33C                            
0000C33C                            PowerUp:
0000C33C 7000                       		moveq	#0,d0
0000C33E 1028 0024                  		move.b	obRoutine(a0),d0
0000C342 323B 0000                  		move.w	Pow_Index(pc,d0.w),d1
0000C346 4EBB 1000                  		jsr	Pow_Index(pc,d1.w)
0000C34A 6000 0000                  		bra.w	DisplaySprite
0000C34E                            ; ===========================================================================
0000C34E 0000                       Pow_Index:	dc.w Pow_Main-Pow_Index
0000C350 0000                       		dc.w Pow_Move-Pow_Index
0000C352 0000                       		dc.w Pow_Delete-Pow_Index
0000C354                            ; ===========================================================================
0000C354                            
0000C354                            Pow_Main:	; Routine 0
0000C354 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C358 317C 0680 0002             		move.w	#$680,obGfx(a0)
0000C35E 117C 0024 0001             		move.b	#$24,obRender(a0)
0000C364 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000C36A 117C 0008 0014             		move.b	#8,obActWid(a0)
0000C370 317C FD00 0012             		move.w	#-$300,obVelY(a0)
0000C376 7000                       		moveq	#0,d0
0000C378 1028 001C                  		move.b	obAnim(a0),d0	; get subtype
0000C37C 5400                       		addq.b	#2,d0
0000C37E 1140 001A                  		move.b	d0,obFrame(a0)	; use correct frame
0000C382 227C 0000 0000             		movea.l	#Map_Monitor,a1
0000C388 D000                       		add.b	d0,d0
0000C38A D2F1 0000                  		adda.w	(a1,d0.w),a1
0000C38E 5249                       		addq.w	#1,a1
0000C390 2149 0004                  		move.l	a1,obMap(a0)
0000C394                            
0000C394                            Pow_Move:	; Routine 2
0000C394 4A68 0012                  		tst.w	obVelY(a0)	; is object moving?
0000C398 6A00 0000                  		bpl.w	Pow_Checks	; if not, branch
0000C39C 6100 0000                  		bsr.w	SpeedToPos
0000C3A0 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; reduce object	speed
0000C3A6 4E75                       		rts	
0000C3A8                            ; ===========================================================================
0000C3A8                            
0000C3A8                            Pow_Checks:
0000C3A8 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C3AC 317C 001D 001E             		move.w	#29,obTimeFrame(a0) ; display icon for half a second
0000C3B2                            
0000C3B2                            Pow_ChkEggman:
0000C3B2 1028 001C                  		move.b	obAnim(a0),d0
0000C3B6 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000C3BA 6600                       		bne.s	Pow_ChkSonic
0000C3BC                            		
0000C3BC 4EF9 0000 0000             		jmp	Spik_Hurt
0000C3C2                            		
0000C3C2 4E75                       		rts
0000C3C4                            ; ===========================================================================
0000C3C4                            
0000C3C4                            Pow_ChkSonic:
0000C3C4 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000C3C8 6600                       		bne.s	Pow_ChkShoes
0000C3CA                            
0000C3CA                            	ExtraLife:
0000C3CA 5238 FE12                  		addq.b	#1,(v_lives).w	; add 1 to the number of lives you have
0000C3CE 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update the lives counter
0000C3DC                            
0000C3DC                            ; ===========================================================================
0000C3DC                            
0000C3DC                            Pow_ChkShoes:
0000C3DC 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000C3E0 6600                       		bne.s	Pow_ChkShield
0000C3E2                            
0000C3E2 11FC 0001 FE2E             		move.b	#1,(v_shoes).w	; speed up the BG music
0000C3E8 31FC 04B0 D034             		move.w	#$4B0,(v_player+$34).w	; time limit for the power-up
0000C3EE 31FC 0C00 F760             		move.w	#$C00,(v_sonspeedmax).w ; change Sonic's top speed
0000C3F4 31FC 0018 F762             		move.w	#$18,(v_sonspeedacc).w	; change Sonic's acceleration
0000C3FA 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w	; change Sonic's deceleration
0000C400 4A38 F7AA                  		tst.b	(f_lockscreen).w ; is boss mode on?
0000C404 6600                       		bne.s	Pow_NoMus	; if yes, branch
0000C406 0C78 000C FE14             			cmpi.w	#$C,(v_air).w
0000C40C 6300                       			bls.s	Pow_NoMus
0000C418                            ; ===========================================================================
0000C418                            
0000C418                            Pow_NoMus:
0000C418 4E75                       		rts	
0000C41A                            ; ===========================================================================
0000C41A                            
0000C41A                            Pow_ChkShield:
0000C41A 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000C41E 6600                       		bne.s	Pow_ChkInvinc
0000C420                            
0000C420 11FC 0000 F5C8             		move.b	#0,(v_rshield).w ; remove red shield
0000C426 11FC 0000 F5C9             		move.b	#0,(v_gshield).w ; remove g shield
0000C42C 11FC 0000 F5CA             		move.b	#0,(v_spshield).w ; remove s shield
0000C432 11FC 0001 FE2C             		move.b	#1,(v_shield).w	; give Sonic a shield
0000C438 11FC 0000 D180             		move.b	#id_ShieldItem,(v_objspace+$180).w ; load shield object ($38)
0000C448                            ; ===========================================================================
0000C448                            
0000C448                            Pow_ChkInvinc:
0000C448 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000C44C 6600                       		bne.s	Pow_ChkRings
0000C44E                            
0000C44E 11FC 0001 FE2D             		move.b	#1,(v_invinc).w	; make Sonic invincible
0000C454 31FC 0560 D032             		move.w	#$560,(v_player+$32).w ; time limit for the power-up
0000C45A 11FC 0000 D200             		move.b	#id_InvStars,(v_objspace+$200).w ; load stars object ($3801)
0000C460 11FC 0001 D21C             		move.b	#1,(v_objspace+$200+obAnim).w
0000C466 11FC 0000 D240             		move.b	#id_InvStars,(v_objspace+$240).w ; load stars object ($3802)
0000C46C 11FC 0002 D25C             		move.b	#2,(v_objspace+$240+obAnim).w
0000C472 11FC 0000 D280             		move.b	#id_InvStars,(v_objspace+$280).w ; load stars object ($3803)
0000C478 11FC 0003 D29C             		move.b	#3,(v_objspace+$280+obAnim).w
0000C47E 11FC 0000 D2C0             		move.b	#id_InvStars,(v_objspace+$2C0).w ; load stars object ($3804)
0000C484 11FC 0004 D2DC             		move.b	#4,(v_objspace+$2C0+obAnim).w
0000C48A 4A38 F7AA                  		tst.b	(f_lockscreen).w ; is boss mode on?
0000C48E 6600                       		bne.s	Pow_NoMusic	; if yes, branch
0000C490 0C78 000C FE14             			cmpi.w	#$C,(v_air).w
0000C496 6300                       			bls.s	Pow_NoMusic
0000C4A2                            ; ===========================================================================
0000C4A2                            
0000C4A2                            Pow_NoMusic:
0000C4A2 4E75                       		rts	
0000C4A4                            ; ===========================================================================
0000C4A4                            
0000C4A4                            Pow_ChkRings:
0000C4A4 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000C4A8 6600                       		bne.s	Pow_ChkS
0000C4AA                            
0000C4AA 0678 000A FE20             		addi.w	#10,(v_rings).w	; add 10 rings to the number of rings you have
0000C4B0 0038 0001 FE1D             		ori.b	#1,(f_ringcount).w ; update the ring counter
0000C4B6 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000C4BC 6500                       		bcs.s	Pow_RingSound
0000C4BE 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000C4C4 6700 FF04                  		beq.w	ExtraLife
0000C4C8 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C4CE 6500                       		bcs.s	Pow_RingSound
0000C4D0 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C4D6 6700 FEF2                  		beq.w	ExtraLife
0000C4DA                            
0000C4DA                            	Pow_RingSound:
0000C4E4                            ; ===========================================================================
0000C4E4                            
0000C4E4                            Pow_ChkS:
0000C4E4 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'?
0000C4E8 6600                       		bne.s	Pow_ChkSRing
0000C4EA                            		
0000C4EA 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all the emeralds?
0000C4F0 6700                       		beq.s	PowS2	; if yes, branch
0000C4F2 0404 003B                  		subi.b	#$3B,d4
0000C4F6 7000                       		moveq	#0,d0
0000C4F8 11FC 0000 F5C3             		move.b	#0,(f_emeraldm).w
0000C4FE 11FC 0001 F5C3             		move.b	#1,(f_emeraldm).w
0000C504 6000                       		bra.s	PowSPlay
0000C506                            
0000C506                            PowS2:
0000C506 0678 0032 FE20             		addi.w	#50,(v_rings).w	; add 50 rings to the number of rings you have
0000C50C 0038 0005 FE1D             		ori.b	#5,(f_ringcount).w ; update the ring counter
0000C512 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000C518 6500                       		bcs.s	PowSPlay
0000C51A 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000C520 6700 FEA8                  		beq.w	ExtraLife
0000C524 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C52A 6500                       		bcs.s	PowSPlay
0000C52C 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C532 6700 FE96                  		beq.w	ExtraLife	
0000C536                            
0000C536                            PowSPlay:
0000C540                            
0000C540                            		
0000C540                            
0000C540                            
0000C540                            Pow_ChkSRing:
0000C540 0C00 0008                  		cmpi.b	#8,d0		; does monitor contain 'S'?
0000C544 6600                       		bne.s	Pow_ChkRShield
0000C546                            
0000C546                            		
0000C546 0678 0014 FE20             		addi.w	#20,(v_rings).w	; add 20 rings to the number of rings you have
0000C54C 0038 0002 FE1D             		ori.b	#2,(f_ringcount).w ; update the ring counter
0000C552 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000C558 6500                       		bcs.s	Pow_ChkSRingSound
0000C55A 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000C560 6700 FE68                  		beq.w	ExtraLife
0000C564 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C56A 6500                       		bcs.s	Pow_ChkSRingSound
0000C56C 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C572 6700 FE56                  		beq.w	ExtraLife	
0000C576                            
0000C576                            Pow_ChkSRingSound:
0000C580                            
0000C580                            
0000C580                            Pow_ChkRShield:
0000C580 0C00 000A                  		cmpi.b	#10,d0		; does monitor contain a g shield?
0000C584 6600                       		bne.s	Pow_ChkGShield
0000C586                            
0000C586 11FC 0000 FE2C             		move.b	#0,(v_shield).w ; remove shield
0000C58C 11FC 0000 F5C9             		move.b	#0,(v_gshield).w ; remove g shield
0000C592 11FC 0000 F5CA             		move.b	#0,(v_spshield).w ; remove s shield
0000C598 11FC 0002 F5C8             		move.b	#2,(v_rshield).w ; give Sonic a red shield
0000C59E 11FC 0000 D180             		move.b	#id_RShieldItem,(v_objspace+$180).w ; load red shield object ($38)
0000C5AE                            
0000C5AE                            Pow_ChkGShield:
0000C5AE 0C00 000B                  		cmpi.b	#11,d0		; does monitor contain a g shield?
0000C5B2 6600                       		bne.s	Pow_ChkSpShield
0000C5B4                            
0000C5B4                            
0000C5B4 11FC 0000 FE2C             		move.b	#0,(v_shield).w ; remove shield
0000C5BA 11FC 0000 F5C8             		move.b	#0,(v_rshield).w ; remove r shield
0000C5C0 11FC 0000 F5CA             		move.b	#0,(v_spshield).w ; remove s shield
0000C5C6 11FC 0001 F5C9             		move.b	#1,(v_gshield).w ; give Sonic a g shield
0000C5CC 11FC 0000 D180             		move.b	#id_GShieldItem,(v_objspace+$180).w ; load g shield object ($38)
0000C5D2                            		
0000C5D2 0678 0023 FE20             		addi.w	#35,(v_rings).w	; add 35 rings to the number of rings you have
0000C5D8 0038 0002 FE1D             		ori.b	#2,(f_ringcount).w ; update the ring counter
0000C5DE 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000C5E4 6500                       		bcs.s	Pow_ChkGSound
0000C5E6 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000C5EC 6700 FDDC                  		beq.w	ExtraLife
0000C5F0 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C5F6 6500                       		bcs.s	Pow_ChkGSound
0000C5F8 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C5FE 6700 FDCA                  		beq.w	ExtraLife	
0000C602                            
0000C602                            Pow_ChkGSound:		
0000C60C                            
0000C60C                            Pow_ChkSpShield:
0000C60C 0C00 000C                  		cmpi.b	#12,d0		; does monitor contain a g shield?
0000C610 6600                       		bne.s	Pow_ChkEnd
0000C612                            
0000C612 11FC 0000 FE2C             		move.b	#0,(v_shield).w 		; remove shield
0000C618 11FC 0000 F5C8             		move.b	#0,(v_rshield).w 		; remove r shield
0000C61E 11FC 0000 F5C9             		move.b	#0,(v_gshield).w 		; remove g shield
0000C624 11FC 0001 F5CA             		move.b	#1,(v_spshield).w 		; give sonic a s shield
0000C62A 11FC 0000 D180             		move.b	#id_SpShieldItem,(v_objspace+$180).w ; load s shield object ($38)	
0000C63A 4E71                       		nop
0000C63C                            
0000C63C                            Pow_ChkEnd:
0000C63C 4E75                       		rts
0000C63E                            ; ===========================================================================
0000C63E                            
0000C63E                            Pow_Delete:	; Routine 4
0000C63E 5368 001E                  		subq.w	#1,obTimeFrame(a0)
0000C642 6B00 0000                  		bmi.w	DeleteObject	; delete after half a second
0000C646 4E75                       		rts	
0000C646 4E75                       		rts	
0000C648                            		include	"_incObj\26 Monitor (SolidSides subroutine).asm"
0000C648                            ; ---------------------------------------------------------------------------
0000C648                            ; Subroutine to	make the sides of a monitor solid
0000C648                            ; ---------------------------------------------------------------------------
0000C648                            
0000C648                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C648                            
0000C648                            
0000C648                            Mon_SolidSides:
0000C648 43F8 D000                  		lea	(v_player).w,a1
0000C64C 3029 0008                  		move.w	obX(a1),d0
0000C650 9068 0008                  		sub.w	obX(a0),d0
0000C654 D041                       		add.w	d1,d0
0000C656 6B00                       		bmi.s	loc_A4E6
0000C658 3601                       		move.w	d1,d3
0000C65A D643                       		add.w	d3,d3
0000C65C B043                       		cmp.w	d3,d0
0000C65E 6200                       		bhi.s	loc_A4E6
0000C660 1629 0016                  		move.b	obHeight(a1),d3
0000C664 4883                       		ext.w	d3
0000C666 D443                       		add.w	d3,d2
0000C668 3629 000C                  		move.w	obY(a1),d3
0000C66C 9668 000C                  		sub.w	obY(a0),d3
0000C670 D642                       		add.w	d2,d3
0000C672 6B00                       		bmi.s	loc_A4E6
0000C674 D442                       		add.w	d2,d2
0000C676 B642                       		cmp.w	d2,d3
0000C678 6400                       		bcc.s	loc_A4E6
0000C67A 4A38 F7C8                  		tst.b	(f_lockmulti).w
0000C67E 6B00                       		bmi.s	loc_A4E6
0000C680 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
0000C686 6400                       		bcc.s	loc_A4E6
0000C688 4A78 FE08                  		tst.w	(v_debuguse).w
0000C68C 6600                       		bne.s	loc_A4E6
0000C68E B240                       		cmp.w	d0,d1
0000C690 6400                       		bcc.s	loc_A4DC
0000C692 D241                       		add.w	d1,d1
0000C694 9041                       		sub.w	d1,d0
0000C696                            
0000C696                            loc_A4DC:
0000C696 0C43 0010                  		cmpi.w	#$10,d3
0000C69A 6500                       		bcs.s	loc_A4EA
0000C69C                            
0000C69C                            loc_A4E2:
0000C69C 7201                       		moveq	#1,d1
0000C69E 4E75                       		rts	
0000C6A0                            ; ===========================================================================
0000C6A0                            
0000C6A0                            loc_A4E6:
0000C6A0 7200                       		moveq	#0,d1
0000C6A2 4E75                       		rts	
0000C6A4                            ; ===========================================================================
0000C6A4                            
0000C6A4                            loc_A4EA:
0000C6A4 7200                       		moveq	#0,d1
0000C6A6 1228 0014                  		move.b	obActWid(a0),d1
0000C6AA 5841                       		addq.w	#4,d1
0000C6AC 3401                       		move.w	d1,d2
0000C6AE D442                       		add.w	d2,d2
0000C6B0 D269 0008                  		add.w	obX(a1),d1
0000C6B4 9268 0008                  		sub.w	obX(a0),d1
0000C6B8 6BE2                       		bmi.s	loc_A4E2
0000C6BA B242                       		cmp.w	d2,d1
0000C6BC 64DE                       		bcc.s	loc_A4E2
0000C6BE 72FF                       		moveq	#-1,d1
0000C6C0 4E75                       		rts	
0000C6C2                            ; End of function Obj26_SolidSides
0000C6C2                            ; End of function Obj26_SolidSides
0000C6C2                            		include	"_anim\Monitor.asm"
0000C6C2                            ; ---------------------------------------------------------------------------
0000C6C2                            ; Animation script - monitors
0000C6C2                            ; ---------------------------------------------------------------------------
0000C6C2 0000 0000 0000             Ani_Monitor:	dc.w @static-Ani_Monitor, @eggman-Ani_Monitor, @sonic-Ani_Monitor
0000C6C8 0000 0000 0000             		dc.w @shoes-Ani_Monitor, @shield-Ani_Monitor, @invincible-Ani_Monitor
0000C6CE 0000 0000 0000             		dc.w @rings-Ani_Monitor, @s-Ani_Monitor, @goggles-Ani_Monitor
0000C6D4 0000 0000 0000             		dc.w @breaking-Ani_Monitor, @rshield-Ani_Monitor, @yshield-Ani_Monitor
0000C6DA 0000                       		dc.w @spshield-Ani_Monitor
0000C6DC                            		
0000C6DC 0100 0102 FF               @static:	dc.b 1,	0, 1, 2, afEnd
0000C6E2 00                         		even
0000C6E2 0100 0303 0103 0302 0303+  @eggman:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, afEnd
0000C6EE 00                         		even
0000C6EE 0100 0404 0104 0402 0404+  @sonic:		dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, afEnd
0000C6FA 00                         		even
0000C6FA 0100 0505 0105 0502 0505+  @shoes:		dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, afEnd
0000C706 00                         		even
0000C706 0100 0606 0106 0602 0606+  @shield:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, afEnd
0000C712 00                         		even
0000C712 0100 0707 0107 0702 0707+  @invincible:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, afEnd
0000C71E 00                         		even
0000C71E 0100 0808 0108 0802 0808+  @rings:		dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, afEnd
0000C72A 00                         		even
0000C72A 0100 0909 0109 0902 0909+  @s:		dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, afEnd
0000C736 00                         		even
0000C736 0100 0A0A 010A 0A02 0A0A+  @goggles:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, afEnd
0000C742 00                         		even
0000C742 0200 0102 0BFE 01          @breaking:	dc.b 2,	0, 1, 2, $B, afBack, 1
0000C74A 00                         		even
0000C74A 0100 0C0C 010C 0C02 0C0C+  @rshield:	dc.b 1,	0, $C, $C, 1, $C, $C, 2, $C, $C, afEnd
0000C756 00                         		even
0000C756 0100 0D0D 010D 0D02 0D0D+  @yshield:	dc.b 1,	0, $D, $D, 1, $D, $D, 2, $D, $D, afEnd
0000C762 00                         		even
0000C762 0100 0E0E 010E 0E02 0E0E+  @spshield:	dc.b 1,	0, $E, $E, 1, $E, $E, 2, $E, $E, afEnd
0000C76E 00                         		even
0000C76E 00                         		even
0000C76E                            Map_Monitor:	include	"_maps\Monitor.asm"
0000C76E                            ; --------------------------------------------------------------------------------
0000C76E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000C76E                            ; --------------------------------------------------------------------------------
0000C76E                            
0000C76E                            SME_VSEMD:	
0000C76E 0000 0000                  		dc.w SME_VSEMD_1E-SME_VSEMD, SME_VSEMD_24-SME_VSEMD	
0000C772 0000 0000                  		dc.w SME_VSEMD_2F-SME_VSEMD, SME_VSEMD_3A-SME_VSEMD	
0000C776 0000 0000                  		dc.w SME_VSEMD_45-SME_VSEMD, SME_VSEMD_50-SME_VSEMD	
0000C77A 0000 0000                  		dc.w SME_VSEMD_5B-SME_VSEMD, SME_VSEMD_66-SME_VSEMD	
0000C77E 0000 0000                  		dc.w SME_VSEMD_71-SME_VSEMD, SME_VSEMD_7C-SME_VSEMD	
0000C782 0000 0000                  		dc.w SME_VSEMD_87-SME_VSEMD, SME_VSEMD_92-SME_VSEMD	
0000C786 0000 0000                  		dc.w SME_VSEMD_AC-SME_VSEMD, SME_VSEMD_B7-SME_VSEMD	
0000C78A 0000                       		dc.w SME_VSEMD_C2-SME_VSEMD	
0000C78C 01                         SME_VSEMD_1E:	dc.b 1	
0000C78D F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C792 02                         SME_VSEMD_24:	dc.b 2	
0000C793 F505 0010 F8               		dc.b $F5, 5, 0, $10, $F8	
0000C798 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C79D 02                         SME_VSEMD_2F:	dc.b 2	
0000C79E F505 0014 F8               		dc.b $F5, 5, 0, $14, $F8	
0000C7A3 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C7A8 02                         SME_VSEMD_3A:	dc.b 2	
0000C7A9 F505 0018 F8               		dc.b $F5, 5, 0, $18, $F8	
0000C7AE F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C7B3 02                         SME_VSEMD_45:	dc.b 2	
0000C7B4 F505 0154 F8               		dc.b $F5, 5, 1, $54, $F8	
0000C7B9 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C7BE 02                         SME_VSEMD_50:	dc.b 2	
0000C7BF F505 0024 F8               		dc.b $F5, 5, 0, $24, $F8	
0000C7C4 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C7C9 02                         SME_VSEMD_5B:	dc.b 2	
0000C7CA F505 2028 F8               		dc.b $F5, 5, $20, $28, $F8	
0000C7CF F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C7D4 02                         SME_VSEMD_66:	dc.b 2	
0000C7D5 F505 002C F8               		dc.b $F5, 5, 0, $2C, $F8	
0000C7DA F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C7DF 02                         SME_VSEMD_71:	dc.b 2	
0000C7E0 F505 2030 F8               		dc.b $F5, 5, $20, $30, $F8	
0000C7E5 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C7EA 02                         SME_VSEMD_7C:	dc.b 2	
0000C7EB F505 0034 F8               		dc.b $F5, 5, 0, $34, $F8	
0000C7F0 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C7F5 02                         SME_VSEMD_87:	dc.b 2	
0000C7F6 F505 0020 F8               		dc.b $F5, 5, 0, $20, $F8	
0000C7FB F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C800 05                         SME_VSEMD_92:	dc.b 5	
0000C801 010C 0038 F0               		dc.b 1, $C, 0, $38, $F0	
0000C806 0900 0003 F0               		dc.b 9, 0, 0, 3, $F0	
0000C80B 0900 0007 F8               		dc.b 9, 0, 0, 7, $F8	
0000C810 0900 000B 00               		dc.b 9, 0, 0, $B, 0	
0000C815 0900 000F 08               		dc.b 9, 0, 0, $F, 8	
0000C81A 02                         SME_VSEMD_AC:	dc.b 2	
0000C81B F505 001C F8               		dc.b $F5, 5, 0, $1C, $F8	
0000C820 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C825 02                         SME_VSEMD_B7:	dc.b 2	
0000C826 F505 2040 F8               		dc.b $F5, 5, $20, $40, $F8	
0000C82B F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C830 02                         SME_VSEMD_C2:	dc.b 2	
0000C831 F505 003C F8               		dc.b $F5, 5, 0, $3C, $F8	
0000C836 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C83C 00                         		even
0000C83C 00                         		even
0000C83C                            
0000C83C                            		include	"_incObj\0E Title Screen Sonic.asm"
0000C83C                            ; ---------------------------------------------------------------------------
0000C83C                            ; Object 0E - Sonic on the title screen
0000C83C                            ; ---------------------------------------------------------------------------
0000C83C                            
0000C83C                            TitleSonic:
0000C83C 7000                       		moveq	#0,d0
0000C83E 1028 0024                  		move.b	obRoutine(a0),d0
0000C842 323B 0000                  		move.w	TSon_Index(pc,d0.w),d1
0000C846 4EFB 1000                  		jmp	TSon_Index(pc,d1.w)
0000C84A                            ; ===========================================================================
0000C84A 0000                       TSon_Index:	dc.w TSon_Main-TSon_Index
0000C84C 0000                       		dc.w TSon_Delay-TSon_Index
0000C84E 0000                       		dc.w TSon_Move-TSon_Index
0000C850 0000                       		dc.w TSon_Animate-TSon_Index
0000C852                            ; ===========================================================================
0000C852                            
0000C852                            TSon_Main:	; Routine 0
0000C852 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C856 317C 00F0 0008             		move.w	#$F0,obX(a0)
0000C85C 317C 00DE 000A             		move.w	#$DE,obScreenY(a0) ; position is fixed to screen
0000C862 217C 0000 0000 0004        		move.l	#Map_TSon,obMap(a0)
0000C86A 317C 2348 0002             		move.w	#$2348,obGfx(a0)
0000C870 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000C876 117C 001D 001F             		move.b	#29,obDelayAni(a0) ; set time delay to 0.5 seconds
0000C87C 43F9 0000 0000             		lea	(Ani_TSon).l,a1
0000C882 6100 0000                  		bsr.w	AnimateSprite
0000C886                            
0000C886                            TSon_Delay:	;Routine 2
0000C886 5328 001F                  		subq.b	#1,obDelayAni(a0) ; subtract 1 from time delay
0000C88A 6A00                       		bpl.s	@wait		; if time remains, branch
0000C88C 5428 0024                  		addq.b	#2,obRoutine(a0) ; go to next routine
0000C890 6000 0000                  		bra.w	DisplaySprite
0000C894                            
0000C894                            	@wait:
0000C894 4E75                       		rts	
0000C896                            ; ===========================================================================
0000C896                            
0000C896                            TSon_Move:	; Routine 4
0000C896 5168 000A                  		subq.w	#8,obScreenY(a0) ; move Sonic up
0000C89A 0C68 0096 000A             		cmpi.w	#$96,obScreenY(a0) ; has Sonic reached final position?
0000C8A0 6600                       		bne.s	@display	; if not, branch
0000C8A2 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C8A6                            
0000C8A6                            	@display:
0000C8A6 6000 0000                  		bra.w	DisplaySprite
0000C8AA                            
0000C8AA 4E75                       		rts	
0000C8AC                            ; ===========================================================================
0000C8AC                            
0000C8AC                            TSon_Animate:	; Routine 6
0000C8AC 43F9 0000 0000             		lea	(Ani_TSon).l,a1
0000C8B2 6100 0000                  		bsr.w	AnimateSprite
0000C8B6 6000 0000                  		bra.w	DisplaySprite
0000C8BA                            
0000C8BA 4E75                       		rts	
0000C8BA 4E75                       		rts	
0000C8BC                            		include	"_incObj\0F Press Start and TM.asm"
0000C8BC                            ; ---------------------------------------------------------------------------
0000C8BC                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000C8BC                            ; ---------------------------------------------------------------------------
0000C8BC                            
0000C8BC                            PSBTM:
0000C8BC 7000                       		moveq	#0,d0
0000C8BE 1028 0024                  		move.b	obRoutine(a0),d0
0000C8C2 323B 0000                  		move.w	PSB_Index(pc,d0.w),d1
0000C8C6 4EBB 1000                  		jsr	PSB_Index(pc,d1.w)
0000C8CA 6000 0000                  		bra.w	DisplaySprite
0000C8CE                            ; ===========================================================================
0000C8CE 0000                       PSB_Index:	dc.w PSB_Main-PSB_Index
0000C8D0 0000                       		dc.w PSB_PrsStart-PSB_Index
0000C8D2 0000                       		dc.w PSB_Exit-PSB_Index
0000C8D4                            ; ===========================================================================
0000C8D4                            
0000C8D4                            PSB_Main:	; Routine 0
0000C8D4 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C8D8 317C 00D0 0008             		move.w	#$D0,obX(a0)
0000C8DE 317C 0130 000A             		move.w	#$130,obScreenY(a0)
0000C8E4 217C 0000 0000 0004        		move.l	#Map_PSB,obMap(a0)
0000C8EC 317C 0200 0002             		move.w	#$200,obGfx(a0)
0000C8F2 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)	; is object "PRESS START"?
0000C8F8 6500                       		bcs.s	PSB_PrsStart	; if yes, branch
0000C8FA                            
0000C8FA 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C8FE 0C28 0003 001A             		cmpi.b	#3,obFrame(a0)	; is the object	"TM"?
0000C904 6600                       		bne.s	PSB_Exit	; if not, branch
0000C906                            
0000C906 317C 2510 0002             		move.w	#$2510,obGfx(a0) ; "TM" specific code
0000C90C 317C 0170 0008             		move.w	#$170,obX(a0)
0000C912 317C 00F8 000A             		move.w	#$F8,obScreenY(a0)
0000C918                            
0000C918                            PSB_Exit:	; Routine 4
0000C918 4E75                       		rts	
0000C91A                            ; ===========================================================================
0000C91A                            
0000C91A                            PSB_PrsStart:	; Routine 2
0000C91A 43F9 0000 0000             		lea	(Ani_PSBTM).l,a1
0000C920 6000 0000                  		bra.w	AnimateSprite	; "PRESS START" is animated
0000C920 6000 0000                  		bra.w	AnimateSprite	; "PRESS START" is animated
0000C924                            
0000C924                            		include	"_anim\Title Screen Sonic.asm"
0000C924                            ; ---------------------------------------------------------------------------
0000C924                            ; Animation script - Sonic on the title screen
0000C924                            ; ---------------------------------------------------------------------------
0000C924 0000                       Ani_TSon:	dc.w byte_A706-Ani_TSon
0000C926 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	afBack, 2
0000C932 00                         		even
0000C932 00                         		even
0000C932                            		include	"_anim\Press Start and TM.asm"
0000C932                            ; ---------------------------------------------------------------------------
0000C932                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000C932                            ; ---------------------------------------------------------------------------
0000C932 0000                       Ani_PSBTM:	dc.w @flash-Ani_PSBTM
0000C934 1F00 01FF                  @flash:		dc.b $1F, 0, 1,	afEnd
0000C938                            		even
0000C938                            		even
0000C938                            
0000C938                            		include	"_incObj\sub AnimateSprite.asm"
0000C938                            ; ---------------------------------------------------------------------------
0000C938                            ; Subroutine to	animate	a sprite using an animation script
0000C938                            ; ---------------------------------------------------------------------------
0000C938                            
0000C938                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C938                            
0000C938                            
0000C938                            AnimateSprite:
0000C938 7000                       		moveq	#0,d0
0000C93A 1028 001C                  		move.b	obAnim(a0),d0	; move animation number	to d0
0000C93E B028 001D                  		cmp.b	obNextAni(a0),d0 ; is animation set to restart?
0000C942 6700                       		beq.s	Anim_Run	; if not, branch
0000C944                            
0000C944 1140 001D                  		move.b	d0,obNextAni(a0) ; set to "no restart"
0000C948 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset animation
0000C94E 117C 0000 001E             		move.b	#0,obTimeFrame(a0) ; reset frame duration
0000C954                            
0000C954                            Anim_Run:
0000C954 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0000C958 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000C95A D040                       		add.w	d0,d0
0000C95C D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000C960 1151 001E                  		move.b	(a1),obTimeFrame(a0) ; load frame duration
0000C964 7200                       		moveq	#0,d1
0000C966 1228 001B                  		move.b	obAniFrame(a0),d1 ; load current frame number
0000C96A 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000C96E 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000C970                            
0000C970                            Anim_Next:
0000C970 1200                       		move.b	d0,d1
0000C972 0200 001F                  		andi.b	#$1F,d0
0000C976 1140 001A                  		move.b	d0,obFrame(a0)	; load sprite number
0000C97A 1028 0022                  		move.b	obStatus(a0),d0
0000C97E E719                       		rol.b	#3,d1
0000C980 B101                       		eor.b	d0,d1
0000C982 0201 0003                  		andi.b	#3,d1
0000C986 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0000C98C 8328 0001                  		or.b	d1,obRender(a0)
0000C990 5228 001B                  		addq.b	#1,obAniFrame(a0) ; next frame number
0000C994                            
0000C994                            Anim_Wait:
0000C994 4E75                       		rts	
0000C996                            ; ===========================================================================
0000C996                            
0000C996                            Anim_End_FF:
0000C996 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000C998 6600                       		bne.s	Anim_End_FE	; if not, branch
0000C99A 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; restart the animation
0000C9A0 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000C9A4 60CA                       		bra.s	Anim_Next
0000C9A6                            ; ===========================================================================
0000C9A6                            
0000C9A6                            Anim_End_FE:
0000C9A6 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000C9A8 6600                       		bne.s	Anim_End_FD	; if not, branch
0000C9AA 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000C9AE 9128 001B                  		sub.b	d0,obAniFrame(a0) ; jump back d0 bytes in the script
0000C9B2 9200                       		sub.b	d0,d1
0000C9B4 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000C9B8 60B6                       		bra.s	Anim_Next
0000C9BA                            ; ===========================================================================
0000C9BA                            
0000C9BA                            Anim_End_FD:
0000C9BA 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000C9BC 6600                       		bne.s	Anim_End_FC	; if not, branch
0000C9BE 1171 1002 001C             		move.b	2(a1,d1.w),obAnim(a0) ; read next byte, run that animation
0000C9C4                            
0000C9C4                            Anim_End_FC:
0000C9C4 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000C9C6 6600                       		bne.s	Anim_End_FB	; if not, branch
0000C9C8 5428 0024                  		addq.b	#2,obRoutine(a0) ; jump to next routine
0000C9CC                            
0000C9CC                            Anim_End_FB:
0000C9CC 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000C9CE 6600                       		bne.s	Anim_End_FA	; if not, branch
0000C9D0 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset animation
0000C9D6 4228 0025                  		clr.b	ob2ndRout(a0)	; reset	2nd routine counter
0000C9DA                            
0000C9DA                            Anim_End_FA:
0000C9DA 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000C9DC 6600                       		bne.s	Anim_End	; if not, branch
0000C9DE 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; jump to next routine
0000C9E2                            
0000C9E2                            Anim_End:
0000C9E2 4E75                       		rts	
0000C9E4                            ; End of function AnimateSprite
0000C9E4                            ; End of function AnimateSprite
0000C9E4                            
0000C9E4                            Map_PSB:	include	"_maps\Press Start and TM.asm"
0000C9E4                            ; ---------------------------------------------------------------------------
0000C9E4                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000C9E4                            ; ---------------------------------------------------------------------------
0000C9E4                            Map_PSB_internal:
0000C9E4 0000                       		dc.w byte_A7CD-Map_PSB_internal
0000C9E6 0000                       		dc.w M_PSB_PSB-Map_PSB_internal
0000C9E8 0000                       		dc.w M_PSB_Limiter-Map_PSB_internal
0000C9EA 0000                       		dc.w M_PSB_TM-Map_PSB_internal
0000C9EC 06                         M_PSB_PSB:	dc.b 6			; "PRESS START BUTTON"
0000C9ED 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000C9F2 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000C9F7 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000C9FC 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000CA01 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000CA06 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000CA0B 1E                         M_PSB_Limiter:	dc.b $1E		; sprite line limiter
0000CA0C B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CA11 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CA16 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CA1B B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CA20 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CA25 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CA2A B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CA2F B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CA34 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CA39 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CA3E D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CA43 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CA48 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CA4D D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CA52 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CA57 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CA5C D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CA61 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CA66 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CA6B D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CA70 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CA75 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CA7A F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CA7F F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CA84 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CA89 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CA8E F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CA93 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CA98 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CA9D F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CAA2 01                         M_PSB_TM:	dc.b 1			; "TM"
0000CAA3 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000CAA8                            		even
0000CAA8                            		even
0000CAA8                            Map_TSon:	include	"_maps\Title Screen Sonic.asm"
0000CAA8                            ; ---------------------------------------------------------------------------
0000CAA8                            ; Sprite mappings - Sonic on the title screen
0000CAA8                            ; ---------------------------------------------------------------------------
0000CAA8                            Map_TSon_internal:
0000CAA8 0000                       		dc.w byte_A898-Map_TSon_internal
0000CAAA 0000                       		dc.w byte_A8CB-Map_TSon_internal
0000CAAC 0000                       		dc.w byte_A917-Map_TSon_internal
0000CAAE 0000                       		dc.w byte_A96D-Map_TSon_internal
0000CAB0 0000                       		dc.w byte_A9AF-Map_TSon_internal
0000CAB2 0000                       		dc.w byte_A9E7-Map_TSon_internal
0000CAB4 0000                       		dc.w byte_AA47-Map_TSon_internal
0000CAB6 0000                       		dc.w byte_AAB1-Map_TSon_internal
0000CAB8 0A                         byte_A898:	dc.b $A
0000CAB9 0808 0000 08               		dc.b 8,	8, 0, 0, 8
0000CABE 100F 0003 08               		dc.b $10, $F, 0, 3, 8
0000CAC3 100F 0013 28               		dc.b $10, $F, 0, $13, $28
0000CAC8 300E 0023 08               		dc.b $30, $E, 0, $23, 8
0000CACD 300E 002F 28               		dc.b $30, $E, 0, $2F, $28
0000CAD2 480D 003B 00               		dc.b $48, $D, 0, $3B, 0
0000CAD7 4809 0043 20               		dc.b $48, 9, 0,	$43, $20
0000CADC 4800 0049 38               		dc.b $48, 0, 0,	$49, $38
0000CAE1 580C 004A 08               		dc.b $58, $C, 0, $4A, 8
0000CAE6 5800 004E 28               		dc.b $58, 0, 0,	$4E, $28
0000CAEB 0F                         byte_A8CB:	dc.b $F
0000CAEC 480E 01BD 20               		dc.b $48, $E, 1, $BD, $20
0000CAF1 3805 01C9 38               		dc.b $38, 5, 1,	$C9, $38
0000CAF6 4000 01CD 30               		dc.b $40, 0, 1,	$CD, $30
0000CAFB 4800 01CE 40               		dc.b $48, 0, 1,	$CE, $40
0000CB00 6000 01CF 20               		dc.b $60, 0, 1,	$CF, $20
0000CB05 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000CB0A 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000CB0F 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000CB14 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000CB19 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000CB1E 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000CB23 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000CB28 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000CB2D 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000CB32 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000CB37 11                         byte_A917:	dc.b $11
0000CB38 380E 01BD 28               		dc.b $38, $E, 1, $BD, $28
0000CB3D 2805 01C9 40               		dc.b $28, 5, 1,	$C9, $40
0000CB42 3000 01CD 38               		dc.b $30, 0, 1,	$CD, $38
0000CB47 3800 01CE 48               		dc.b $38, 0, 1,	$CE, $48
0000CB4C 5000 01CF 28               		dc.b $50, 0, 1,	$CF, $28
0000CB51 200F 01A9 08               		dc.b $20, $F, 1, $A9, 8
0000CB56 2003 01B9 28               		dc.b $20, 3, 1,	$B9, $28
0000CB5B 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000CB60 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000CB65 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000CB6A 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000CB6F 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000CB74 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000CB79 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000CB7E 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000CB83 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000CB88 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000CB8D 0D                         byte_A96D:	dc.b $D
0000CB8E 100F 00A3 08               		dc.b $10, $F, 0, $A3, 8
0000CB93 0808 00B3 28               		dc.b 8,	8, 0, $B3, $28
0000CB98 100F 00B6 28               		dc.b $10, $F, 0, $B6, $28
0000CB9D 1800 00C6 48               		dc.b $18, 0, 0,	$C6, $48
0000CBA2 2006 00C7 48               		dc.b $20, 6, 0,	$C7, $48
0000CBA7 3800 00CD 48               		dc.b $38, 0, 0,	$CD, $48
0000CBAC 300D 00CE 08               		dc.b $30, $D, 0, $CE, 8
0000CBB1 300E 00D6 28               		dc.b $30, $E, 0, $D6, $28
0000CBB6 400B 00E2 10               		dc.b $40, $B, 0, $E2, $10
0000CBBB 4808 00EE 28               		dc.b $48, 8, 0,	$EE, $28
0000CBC0 5001 00F1 08               		dc.b $50, 1, 0,	$F1, 8
0000CBC5 5004 00F3 28               		dc.b $50, 4, 0,	$F3, $28
0000CBCA 5800 00F5 28               		dc.b $58, 0, 0,	$F5, $28
0000CBCF 0B                         byte_A9AF:	dc.b $B
0000CBD0 080F 00F6 10               		dc.b 8,	$F, 0, $F6, $10
0000CBD5 080B 0106 30               		dc.b 8,	$B, 1, 6, $30
0000CBDA 1006 0112 48               		dc.b $10, 6, 1,	$12, $48
0000CBDF 280E 0118 18               		dc.b $28, $E, 1, $18, $18
0000CBE4 280E 0124 38               		dc.b $28, $E, 1, $24, $38
0000CBE9 2801 0130 10               		dc.b $28, 1, 1,	$30, $10
0000CBEE 400E 0132 10               		dc.b $40, $E, 1, $32, $10
0000CBF3 4006 013E 30               		dc.b $40, 6, 1,	$3E, $30
0000CBF8 4004 0144 40               		dc.b $40, 4, 1,	$44, $40
0000CBFD 4800 0146 40               		dc.b $48, 0, 1,	$46, $40
0000CC02 5808 0147 18               		dc.b $58, 8, 1,	$47, $18
0000CC07 13                         byte_A9E7:	dc.b $13
0000CC08 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000CC0D 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000CC12 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000CC17 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000CC1C 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000CC21 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000CC26 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000CC2B 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000CC30 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000CC35 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000CC3A 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000CC3F 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000CC44 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000CC49 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000CC4E 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000CC53 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000CC58 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000CC5D 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000CC62 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000CC67 15                         byte_AA47:	dc.b $15
0000CC68 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000CC6D 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000CC72 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000CC77 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000CC7C 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000CC81 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000CC86 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000CC8B 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000CC90 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000CC95 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000CC9A 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000CC9F 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000CCA4 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000CCA9 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000CCAE 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000CCB3 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000CCB8 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000CCBD 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000CCC2 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000CCC7 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000CCCC 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000CCD1 16                         byte_AAB1:	dc.b $16
0000CCD2 1804 01F9 38               		dc.b $18, 4, 1,	$F9, $38
0000CCD7 2000 01FB 38               		dc.b $20, 0, 1,	$FB, $38
0000CCDC 2808 01FC 30               		dc.b $28, 8, 1,	$FC, $30
0000CCE1 3001 01FF 30               		dc.b $30, 1, 1,	$FF, $30
0000CCE6 300B 0201 38               		dc.b $30, $B, 2, 1, $38
0000CCEB 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000CCF0 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000CCF5 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000CCFA 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000CCFF 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000CD04 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000CD09 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000CD0E 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000CD13 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000CD18 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000CD1D 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000CD22 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000CD27 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000CD2C 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000CD31 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000CD36 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000CD3B 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000CD40                            		even
0000CD40                            		even
0000CD40                            
0000CD40                            		include	"_incObj\2B Chopper.asm"
0000CD40                            ; ---------------------------------------------------------------------------
0000CD40                            ; Object 2B - Chopper enemy (GHZ)
0000CD40                            ; ---------------------------------------------------------------------------
0000CD40                            
0000CD40                            Chopper:
0000CD40 7000                       		moveq	#0,d0
0000CD42 1028 0024                  		move.b	obRoutine(a0),d0
0000CD46 323B 0000                  		move.w	Chop_Index(pc,d0.w),d1
0000CD4A 4EBB 1000                  		jsr	Chop_Index(pc,d1.w)
0000CD4E 6000 0000                  		bra.w	RememberState
0000CD52                            ; ===========================================================================
0000CD52 0000                       Chop_Index:	dc.w Chop_Main-Chop_Index
0000CD54 0000                       		dc.w Chop_ChgSpeed-Chop_Index
0000CD56                            
0000CD56 =00000030                  chop_origY:	equ $30
0000CD56                            ; ===========================================================================
0000CD56                            
0000CD56                            Chop_Main:	; Routine 0
0000CD56 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CD5A 217C 0000 0000 0004        		move.l	#Map_Chop,obMap(a0)
0000CD62 317C 047B 0002             		move.w	#$47B,obGfx(a0)
0000CD68 117C 0004 0001             		move.b	#4,obRender(a0)
0000CD6E 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000CD74 117C 0009 0020             		move.b	#9,obColType(a0)
0000CD7A 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000CD80 317C F900 0012             		move.w	#-$700,obVelY(a0) ; set vertical speed
0000CD86 3168 000C 0030             		move.w	obY(a0),chop_origY(a0) ; save original position
0000CD8C                            
0000CD8C                            Chop_ChgSpeed:	; Routine 2
0000CD8C 43F9 0000 0000             		lea	(Ani_Chop).l,a1
0000CD92 6100 FBA4                  		bsr.w	AnimateSprite
0000CD96 6100 0000                  		bsr.w	SpeedToPos
0000CD9A 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; reduce speed
0000CDA0 3028 0030                  		move.w	chop_origY(a0),d0
0000CDA4 B068 000C                  		cmp.w	obY(a0),d0	; has Chopper returned to its original position?
0000CDA8 6400                       		bcc.s	@chganimation	; if not, branch
0000CDAA 3140 000C                  		move.w	d0,obY(a0)
0000CDAE 317C F900 0012             		move.w	#-$700,obVelY(a0) ; set vertical speed
0000CDB4                            
0000CDB4                            	@chganimation:
0000CDB4 117C 0001 001C             		move.b	#1,obAnim(a0)	; use fast animation
0000CDBA 0440 00C0                  		subi.w	#$C0,d0
0000CDBE B068 000C                  		cmp.w	obY(a0),d0
0000CDC2 6400                       		bcc.s	@nochg
0000CDC4 117C 0000 001C             		move.b	#0,obAnim(a0)	; use slow animation
0000CDCA 4A68 0012                  		tst.w	obVelY(a0)	; is Chopper at	its highest point?
0000CDCE 6B00                       		bmi.s	@nochg		; if not, branch
0000CDD0 117C 0002 001C             		move.b	#2,obAnim(a0)	; use stationary animation
0000CDD6                            
0000CDD6                            	@nochg:
0000CDD6 4E75                       		rts	
0000CDD6 4E75                       		rts	
0000CDD8                            		include	"_anim\Chopper.asm"
0000CDD8                            ; ---------------------------------------------------------------------------
0000CDD8                            ; Animation script - Chopper enemy
0000CDD8                            ; ---------------------------------------------------------------------------
0000CDD8 0000                       Ani_Chop:	dc.w @slow-Ani_Chop
0000CDDA 0000                       		dc.w @fast-Ani_Chop
0000CDDC 0000                       		dc.w @still-Ani_Chop
0000CDDE 0700 01FF                  @slow:		dc.b 7,	0, 1, afEnd
0000CDE2 0300 01FF                  @fast:		dc.b 3,	0, 1, afEnd
0000CDE6 0700 FF                    @still:		dc.b 7,	0, afEnd
0000CDEA 00                         		even
0000CDEA 00                         		even
0000CDEA                            Map_Chop:	include	"_maps\Chopper.asm"
0000CDEA                            ; ---------------------------------------------------------------------------
0000CDEA                            ; Sprite mappings - Chopper enemy (GHZ)
0000CDEA                            ; ---------------------------------------------------------------------------
0000CDEA                            Map_Chop_internal:
0000CDEA 0000                       		dc.w @mouthshut-Map_Chop_internal
0000CDEC 0000                       		dc.w @mouthopen-Map_Chop_internal
0000CDEE 01                         @mouthshut:	dc.b 1
0000CDEF F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0000CDF4 01                         @mouthopen:	dc.b 1
0000CDF5 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000CDFA                            		even
0000CDFA                            		even
0000CDFA                            		include	"_incObj\2C Jaws.asm"
0000CDFA                            ; ---------------------------------------------------------------------------
0000CDFA                            ; Object 2C - Jaws enemy (LZ)
0000CDFA                            ; ---------------------------------------------------------------------------
0000CDFA                            
0000CDFA                            Jaws:
0000CDFA 7000                       		moveq	#0,d0
0000CDFC 1028 0024                  		move.b	obRoutine(a0),d0
0000CE00 323B 0000                  		move.w	Jaws_Index(pc,d0.w),d1
0000CE04 4EFB 1000                  		jmp	Jaws_Index(pc,d1.w)
0000CE08                            ; ===========================================================================
0000CE08 0000                       Jaws_Index:	dc.w Jaws_Main-Jaws_Index
0000CE0A 0000                       		dc.w Jaws_Turn-Jaws_Index
0000CE0C                            
0000CE0C =00000030                  jaws_timecount:	equ $30
0000CE0C =00000032                  jaws_timedelay:	equ $32
0000CE0C                            ; ===========================================================================
0000CE0C                            
0000CE0C                            Jaws_Main:	; Routine 0
0000CE0C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CE10 217C 0000 0000 0004        		move.l	#Map_Jaws,obMap(a0)
0000CE18 317C 2486 0002             		move.w	#$2486,obGfx(a0)
0000CE1E 0028 0004 0001             		ori.b	#4,obRender(a0)
0000CE24 117C 000A 0020             		move.b	#$A,obColType(a0)
0000CE2A 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000CE30 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000CE36 7000                       		moveq	#0,d0
0000CE38 1028 0028                  		move.b	obSubtype(a0),d0 ; load object subtype number
0000CE3C ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000CE3E 5340                       		subq.w	#1,d0
0000CE40 3140 0030                  		move.w	d0,jaws_timecount(a0) ; set turn delay time
0000CE44 3140 0032                  		move.w	d0,jaws_timedelay(a0)
0000CE48 317C FFC0 0010             		move.w	#-$40,obVelX(a0) ; move Jaws to the left
0000CE4E 0828 0000 0022             		btst	#0,obStatus(a0)	; is Jaws facing left?
0000CE54 6700                       		beq.s	Jaws_Turn	; if yes, branch
0000CE56 4468 0010                  		neg.w	obVelX(a0)	; move Jaws to the right
0000CE5A                            
0000CE5A                            Jaws_Turn:	; Routine 2
0000CE5A 5368 0030                  		subq.w	#1,jaws_timecount(a0) ; subtract 1 from turn delay time
0000CE5E 6A00                       		bpl.s	@animate	; if time remains, branch
0000CE60 3168 0032 0030             		move.w	jaws_timedelay(a0),jaws_timecount(a0) ; reset turn delay time
0000CE66 4468 0010                  		neg.w	obVelX(a0)	; change speed direction
0000CE6A 0868 0000 0022             		bchg	#0,obStatus(a0)	; change Jaws facing direction
0000CE70 117C 0001 001D             		move.b	#1,obNextAni(a0) ; reset animation
0000CE76                            
0000CE76                            	@animate:
0000CE76 43F9 0000 0000             		lea	(Ani_Jaws).l,a1
0000CE7C 6100 FABA                  		bsr.w	AnimateSprite
0000CE80 6100 0000                  		bsr.w	SpeedToPos
0000CE84 6000 0000                  		bra.w	RememberState
0000CE84 6000 0000                  		bra.w	RememberState
0000CE88                            		include	"_anim\Jaws.asm"
0000CE88                            ; ---------------------------------------------------------------------------
0000CE88                            ; Animation script - Jaws enemy
0000CE88                            ; ---------------------------------------------------------------------------
0000CE88 0000                       Ani_Jaws:	dc.w @swim-Ani_Jaws
0000CE8A 0700 0102 03FF             @swim:		dc.b 7,	0, 1, 2, 3, afEnd
0000CE90                            		even
0000CE90                            		even
0000CE90                            Map_Jaws:	include	"_maps\Jaws.asm"
0000CE90                            ; --------------------------------------------------------------------------------
0000CE90                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000CE90                            ; --------------------------------------------------------------------------------
0000CE90                            
0000CE90                            SME_O5C0c:	
0000CE90 0000 0000                  		dc.w SME_O5C0c_8-SME_O5C0c, SME_O5C0c_13-SME_O5C0c	
0000CE94 0000 0000                  		dc.w SME_O5C0c_1E-SME_O5C0c, SME_O5C0c_29-SME_O5C0c	
0000CE98 02                         SME_O5C0c_8:	dc.b 2	
0000CE99 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0	
0000CE9E F505 0018 10               		dc.b $F5, 5, 0, $18, $10	
0000CEA3 02                         SME_O5C0c_13:	dc.b 2	
0000CEA4 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0	
0000CEA9 F505 001C 10               		dc.b $F5, 5, 0, $1C, $10	
0000CEAE 02                         SME_O5C0c_1E:	dc.b 2	
0000CEAF F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0	
0000CEB4 F505 0018 10               		dc.b $F5, 5, 0, $18, $10	
0000CEB9 02                         SME_O5C0c_29:	dc.b 2	
0000CEBA F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0	
0000CEBF F505 001C 10               		dc.b $F5, 5, 0, $1C, $10	
0000CEC4                            		even
0000CEC4                            		even
0000CEC4                            		include	"_incObj\2D Burrobot.asm"
0000CEC4                            ; ---------------------------------------------------------------------------
0000CEC4                            ; Object 2D - Burrobot enemy (LZ)
0000CEC4                            ; ---------------------------------------------------------------------------
0000CEC4                            
0000CEC4                            Burrobot:
0000CEC4 7000                       		moveq	#0,d0
0000CEC6 1028 0024                  		move.b	obRoutine(a0),d0
0000CECA 323B 0000                  		move.w	Burro_Index(pc,d0.w),d1
0000CECE 4EFB 1000                  		jmp	Burro_Index(pc,d1.w)
0000CED2                            ; ===========================================================================
0000CED2 0000                       Burro_Index:	dc.w Burro_Main-Burro_Index
0000CED4 0000                       		dc.w Burro_Action-Burro_Index
0000CED6                            
0000CED6 =00000030                  burro_timedelay:	equ $30		; time between direction changes
0000CED6                            ; ===========================================================================
0000CED6                            
0000CED6                            Burro_Main:	; Routine 0
0000CED6 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CEDA 117C 0013 0016             		move.b	#$13,obHeight(a0)
0000CEE0 117C 0008 0017             		move.b	#8,obWidth(a0)
0000CEE6 217C 0000 0000 0004        		move.l	#Map_Burro,obMap(a0)
0000CEEE 317C 04A6 0002             		move.w	#$4A6,obGfx(a0)
0000CEF4 0028 0004 0001             		ori.b	#4,obRender(a0)
0000CEFA 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000CF00 117C 0005 0020             		move.b	#5,obColType(a0)
0000CF06 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000CF0C 5C28 0025                  		addq.b	#6,ob2ndRout(a0) ; run "Burro_ChkSonic" routine
0000CF10 117C 0002 001C             		move.b	#2,obAnim(a0)
0000CF16                            
0000CF16                            Burro_Action:	; Routine 2
0000CF16 7000                       		moveq	#0,d0
0000CF18 1028 0025                  		move.b	ob2ndRout(a0),d0
0000CF1C 323B 0000                  		move.w	@index(pc,d0.w),d1
0000CF20 4EBB 1000                  		jsr	@index(pc,d1.w)
0000CF24 43F9 0000 0000             		lea	(Ani_Burro).l,a1
0000CF2A 6100 FA0C                  		bsr.w	AnimateSprite
0000CF2E 6000 0000                  		bra.w	RememberState
0000CF32                            ; ===========================================================================
0000CF32 0000                       @index:		dc.w @changedir-@index
0000CF34 0000                       		dc.w Burro_Move-@index
0000CF36 0000                       		dc.w Burro_Jump-@index
0000CF38 0000                       		dc.w Burro_ChkSonic-@index
0000CF3A                            ; ===========================================================================
0000CF3A                            
0000CF3A                            @changedir:
0000CF3A 5368 0030                  		subq.w	#1,burro_timedelay(a0)
0000CF3E 6A00                       		bpl.s	@nochg
0000CF40 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000CF44 317C 00FF 0030             		move.w	#255,burro_timedelay(a0)
0000CF4A 317C 0080 0010             		move.w	#$80,obVelX(a0)
0000CF50 117C 0001 001C             		move.b	#1,obAnim(a0)
0000CF56 0868 0000 0022             		bchg	#0,obStatus(a0)	; change direction the Burrobot	is facing
0000CF5C 6700                       		beq.s	@nochg
0000CF5E 4468 0010                  		neg.w	obVelX(a0)	; change direction the Burrobot	is moving
0000CF62                            
0000CF62                            	@nochg:
0000CF62 4E75                       		rts	
0000CF64                            ; ===========================================================================
0000CF64                            
0000CF64                            Burro_Move:
0000CF64 5368 0030                  		subq.w	#1,burro_timedelay(a0)
0000CF68 6B00                       		bmi.s	loc_AD84
0000CF6A 6100 0000                  		bsr.w	SpeedToPos
0000CF6E 0868 0000 0032             		bchg	#0,$32(a0)
0000CF74 6600                       		bne.s	loc_AD78
0000CF76 3628 0008                  		move.w	obX(a0),d3
0000CF7A 0643 000C                  		addi.w	#$C,d3
0000CF7E 0828 0000 0022             		btst	#0,obStatus(a0)
0000CF84 6600                       		bne.s	loc_AD6A
0000CF86 0443 0018                  		subi.w	#$18,d3
0000CF8A                            
0000CF8A                            loc_AD6A:
0000CF8A 4EB9 0000 0000             		jsr	(ObjFloorDist2).l
0000CF90 0C41 000C                  		cmpi.w	#$C,d1
0000CF94 6C00                       		bge.s	loc_AD84
0000CF96 4E75                       		rts	
0000CF98                            ; ===========================================================================
0000CF98                            
0000CF98                            loc_AD78:
0000CF98 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000CF9E D368 000C                  		add.w	d1,obY(a0)
0000CFA2 4E75                       		rts	
0000CFA4                            ; ===========================================================================
0000CFA4                            
0000CFA4                            loc_AD84:
0000CFA4 0838 0002 FE0F             		btst	#2,(v_vbla_byte).w
0000CFAA 6700                       		beq.s	loc_ADA4
0000CFAC 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000CFB0 317C 003B 0030             		move.w	#59,burro_timedelay(a0)
0000CFB6 317C 0000 0010             		move.w	#0,obVelX(a0)
0000CFBC 117C 0000 001C             		move.b	#0,obAnim(a0)
0000CFC2 4E75                       		rts	
0000CFC4                            ; ===========================================================================
0000CFC4                            
0000CFC4                            loc_ADA4:
0000CFC4 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000CFC8 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000CFCE 117C 0002 001C             		move.b	#2,obAnim(a0)
0000CFD4 4E75                       		rts	
0000CFD6                            ; ===========================================================================
0000CFD6                            
0000CFD6                            Burro_Jump:
0000CFD6 6100 0000                  		bsr.w	SpeedToPos
0000CFDA 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000CFE0 6B00                       		bmi.s	locret_ADF0
0000CFE2 117C 0003 001C             		move.b	#3,obAnim(a0)
0000CFE8 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000CFEE 4A41                       		tst.w	d1
0000CFF0 6A00                       		bpl.s	locret_ADF0
0000CFF2 D368 000C                  		add.w	d1,obY(a0)
0000CFF6 317C 0000 0012             		move.w	#0,obVelY(a0)
0000CFFC 117C 0001 001C             		move.b	#1,obAnim(a0)
0000D002 317C 00FF 0030             		move.w	#255,burro_timedelay(a0)
0000D008 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000D00C 6100 0000                  		bsr.w	Burro_ChkSonic2
0000D010                            
0000D010                            locret_ADF0:
0000D010 4E75                       		rts	
0000D012                            ; ===========================================================================
0000D012                            
0000D012                            Burro_ChkSonic:
0000D012 343C 0060                  		move.w	#$60,d2
0000D016 6100 0000                  		bsr.w	Burro_ChkSonic2
0000D01A 6400                       		bcc.s	locret_AE20
0000D01C 3038 D00C                  		move.w	(v_player+obY).w,d0
0000D020 9068 000C                  		sub.w	obY(a0),d0
0000D024 6400                       		bcc.s	locret_AE20
0000D026 0C40 FF80                  		cmpi.w	#-$80,d0
0000D02A 6500                       		bcs.s	locret_AE20
0000D02C 4A78 FE08                  		tst.w	(v_debuguse).w
0000D030 6600                       		bne.s	locret_AE20
0000D032 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000D036 3141 0010                  		move.w	d1,obVelX(a0)
0000D03A 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000D040                            
0000D040                            locret_AE20:
0000D040 4E75                       		rts	
0000D042                            
0000D042                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D042                            
0000D042                            
0000D042                            Burro_ChkSonic2:
0000D042 323C 0080                  		move.w	#$80,d1
0000D046 08E8 0000 0022             		bset	#0,obStatus(a0)
0000D04C 3038 D008                  		move.w	(v_player+obX).w,d0
0000D050 9068 0008                  		sub.w	obX(a0),d0
0000D054 6400                       		bcc.s	loc_AE40
0000D056 4440                       		neg.w	d0
0000D058 4441                       		neg.w	d1
0000D05A 08A8 0000 0022             		bclr	#0,obStatus(a0)
0000D060                            
0000D060                            loc_AE40:
0000D060 B042                       		cmp.w	d2,d0
0000D062 4E75                       		rts	
0000D064                            ; End of function Burro_ChkSonic2
0000D064                            ; End of function Burro_ChkSonic2
0000D064                            		include	"_anim\Burrobot.asm"
0000D064                            ; ---------------------------------------------------------------------------
0000D064                            ; Animation script - Burrobot enemy
0000D064                            ; ---------------------------------------------------------------------------
0000D064 0000                       Ani_Burro:	dc.w @walk1-Ani_Burro
0000D066 0000                       		dc.w @walk2-Ani_Burro
0000D068 0000                       		dc.w @digging-Ani_Burro
0000D06A 0000                       		dc.w @fall-Ani_Burro
0000D06C 0300 06FF                  @walk1:		dc.b 3,	0, 6, afEnd
0000D070 0300 01FF                  @walk2:		dc.b 3,	0, 1, afEnd
0000D074 0302 03FF                  @digging:	dc.b 3,	2, 3, afEnd
0000D078 0304 FF                    @fall:		dc.b 3,	4, afEnd
0000D07C 00                         		even
0000D07C 00                         		even
0000D07C                            Map_Burro:	include	"_maps\Burrobot.asm"
0000D07C                            ; --------------------------------------------------------------------------------
0000D07C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000D07C                            ; --------------------------------------------------------------------------------
0000D07C                            
0000D07C                            SME_Ag_86:	
0000D07C 0000 0000                  		dc.w SME_Ag_86_E-SME_Ag_86, SME_Ag_86_19-SME_Ag_86	
0000D080 0000 0000                  		dc.w SME_Ag_86_24-SME_Ag_86, SME_Ag_86_2F-SME_Ag_86	
0000D084 0000 0000                  		dc.w SME_Ag_86_3A-SME_Ag_86, SME_Ag_86_45-SME_Ag_86	
0000D088 0000                       		dc.w SME_Ag_86_50-SME_Ag_86	
0000D08A 02                         SME_Ag_86_E:	dc.b 2	
0000D08B EC0A 2000 F0               		dc.b $EC, $A, $20, 0, $F0	
0000D090 0409 2009 F4               		dc.b 4, 9, $20, 9, $F4	
0000D095 02                         SME_Ag_86_19:	dc.b 2	
0000D096 EC0A 200F F0               		dc.b $EC, $A, $20, $F, $F0	
0000D09B 0409 2018 F4               		dc.b 4, 9, $20, $18, $F4	
0000D0A0 02                         SME_Ag_86_24:	dc.b 2	
0000D0A1 E80A 201E F4               		dc.b $E8, $A, $20, $1E, $F4	
0000D0A6 000A 2027 F4               		dc.b 0, $A, $20, $27, $F4	
0000D0AB 02                         SME_Ag_86_2F:	dc.b 2	
0000D0AC E80A 2030 F4               		dc.b $E8, $A, $20, $30, $F4	
0000D0B1 000A 2039 F4               		dc.b 0, $A, $20, $39, $F4	
0000D0B6 02                         SME_Ag_86_3A:	dc.b 2	
0000D0B7 E80A 200F F0               		dc.b $E8, $A, $20, $F, $F0	
0000D0BC 000A 2042 F4               		dc.b 0, $A, $20, $42, $F4	
0000D0C1 02                         SME_Ag_86_45:	dc.b 2	
0000D0C2 F406 204B E8               		dc.b $F4, 6, $20, $4B, $E8	
0000D0C7 F40A 2051 F8               		dc.b $F4, $A, $20, $51, $F8	
0000D0CC 02                         SME_Ag_86_50:	dc.b 2	
0000D0CD EC0A 200F F0               		dc.b $EC, $A, $20, $F, $F0	
0000D0D2 0409 2009 F4               		dc.b 4, 9, $20, 9, $F4	
0000D0D8 00                         		even
0000D0D8 00                         		even
0000D0D8                            
0000D0D8                            		include	"_incObj\2F MZ Large Grassy Platforms.asm"
0000D0D8                            ; ---------------------------------------------------------------------------
0000D0D8                            ; Object 2F - large grass-covered platforms (MZ)
0000D0D8                            ; ---------------------------------------------------------------------------
0000D0D8                            
0000D0D8                            LargeGrass:
0000D0D8 7000                       		moveq	#0,d0
0000D0DA 1028 0024                  		move.b	obRoutine(a0),d0
0000D0DE 323B 0000                  		move.w	LGrass_Index(pc,d0.w),d1
0000D0E2 4EFB 1000                  		jmp	LGrass_Index(pc,d1.w)
0000D0E6                            ; ===========================================================================
0000D0E6 0000                       LGrass_Index:	dc.w LGrass_Main-LGrass_Index
0000D0E8 0000                       		dc.w LGrass_Action-LGrass_Index
0000D0EA                            
0000D0EA =0000002A                  lgrass_origX:	equ $2A
0000D0EA =0000002C                  lgrass_origY:	equ $2C
0000D0EA                            
0000D0EA 0000                       LGrass_Data:	dc.w LGrass_Data1-LGrass_Data 	; collision angle data
0000D0EC 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000D0EE 0000                       		dc.w LGrass_Data3-LGrass_Data
0000D0F0 0140                       		dc.b 1,	$40
0000D0F2 0000                       		dc.w LGrass_Data2-LGrass_Data
0000D0F4 0220                       		dc.b 2,	$20
0000D0F6                            ; ===========================================================================
0000D0F6                            
0000D0F6                            LGrass_Main:	; Routine 0
0000D0F6 5428 0024                  		addq.b	#2,obRoutine(a0)
0000D0FA 217C 0000 0000 0004        		move.l	#Map_LGrass,obMap(a0)
0000D102 317C C000 0002             		move.w	#$C000,obGfx(a0)
0000D108 117C 0004 0001             		move.b	#4,obRender(a0)
0000D10E 317C 0280 0018             		move.w	#$280,obPriority(a0)
0000D114 3168 000C 002C             		move.w	obY(a0),lgrass_origY(a0)
0000D11A 3168 0008 002A             		move.w	obX(a0),lgrass_origX(a0)
0000D120 7000                       		moveq	#0,d0
0000D122 1028 0028                  		move.b	obSubtype(a0),d0
0000D126 E448                       		lsr.w	#2,d0
0000D128 0240 001C                  		andi.w	#$1C,d0
0000D12C 43FB 00BC                  		lea	LGrass_Data(pc,d0.w),a1
0000D130 3019                       		move.w	(a1)+,d0
0000D132 45FB 00B6                  		lea	LGrass_Data(pc,d0.w),a2
0000D136 214A 0030                  		move.l	a2,$30(a0)
0000D13A 1159 001A                  		move.b	(a1)+,obFrame(a0)
0000D13E 1151 0014                  		move.b	(a1),obActWid(a0)
0000D142 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
0000D148 117C 0040 0016             		move.b	#$40,obHeight(a0)
0000D14E 08E8 0004 0001             		bset	#4,1(a0)
0000D154                            
0000D154                            LGrass_Action:	; Routine 2
0000D154 6100 0000                  		bsr.w	LGrass_Types
0000D158 4A28 0025                  		tst.b	ob2ndRout(a0)
0000D15C 6700                       		beq.s	LGrass_Solid
0000D15E 7200                       		moveq	#0,d1
0000D160 1228 0014                  		move.b	obActWid(a0),d1
0000D164 0641 000B                  		addi.w	#$B,d1
0000D168 6100 C064                  		bsr.w	ExitPlatform
0000D16C 0829 0003 0022             		btst	#3,obStatus(a1)
0000D172 6600 0000                  		bne.w	LGrass_Slope
0000D176 4228 0025                  		clr.b	ob2ndRout(a0)
0000D17A 6000                       		bra.s	LGrass_Display
0000D17C                            ; ===========================================================================
0000D17C                            
0000D17C                            LGrass_Slope:
0000D17C 7200                       		moveq	#0,d1
0000D17E 1228 0014                  		move.b	obActWid(a0),d1
0000D182 0641 000B                  		addi.w	#$B,d1
0000D186 2468 0030                  		movea.l	$30(a0),a2
0000D18A 3428 0008                  		move.w	obX(a0),d2
0000D18E 6100 CFD8                  		bsr.w	SlopeObject2
0000D192 6000                       		bra.s	LGrass_Display
0000D194                            ; ===========================================================================
0000D194                            
0000D194                            LGrass_Solid:
0000D194 7200                       		moveq	#0,d1
0000D196 1228 0014                  		move.b	obActWid(a0),d1
0000D19A 0641 000B                  		addi.w	#$B,d1
0000D19E 343C 0020                  		move.w	#$20,d2
0000D1A2 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0000D1A8 6600                       		bne.s	loc_AF8E
0000D1AA 343C 0030                  		move.w	#$30,d2
0000D1AE                            
0000D1AE                            loc_AF8E:
0000D1AE 2468 0030                  		movea.l	$30(a0),a2
0000D1B2 6100 0000                  		bsr.w	SolidObject2F
0000D1B6                            
0000D1B6                            LGrass_Display:
0000D1B6 6100 0000                  		bsr.w	DisplaySprite
0000D1BA 6000 0000                  		bra.w	LGrass_ChkDel
0000D1BE                            
0000D1BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D1BE                            
0000D1BE                            
0000D1BE                            LGrass_Types:
0000D1BE 7000                       		moveq	#0,d0
0000D1C0 1028 0028                  		move.b	obSubtype(a0),d0
0000D1C4 0240 0007                  		andi.w	#7,d0
0000D1C8 D040                       		add.w	d0,d0
0000D1CA 323B 0000                  		move.w	LGrass_TypeIndex(pc,d0.w),d1
0000D1CE 4EFB 1000                  		jmp	LGrass_TypeIndex(pc,d1.w)
0000D1D2                            ; End of function LGrass_Types
0000D1D2                            
0000D1D2                            ; ===========================================================================
0000D1D2 0000                       LGrass_TypeIndex:dc.w LGrass_Type00-LGrass_TypeIndex
0000D1D4 0000                       		dc.w LGrass_Type01-LGrass_TypeIndex
0000D1D6 0000                       		dc.w LGrass_Type02-LGrass_TypeIndex
0000D1D8 0000                       		dc.w LGrass_Type03-LGrass_TypeIndex
0000D1DA 0000                       		dc.w LGrass_Type04-LGrass_TypeIndex
0000D1DC 0000                       		dc.w LGrass_Type05-LGrass_TypeIndex
0000D1DE                            ; ===========================================================================
0000D1DE                            
0000D1DE                            LGrass_Type00:
0000D1DE 4E75                       		rts			; type 00 platform doesn't move
0000D1E0                            ; ===========================================================================
0000D1E0                            
0000D1E0                            LGrass_Type01:
0000D1E0 1038 FE60                  		move.b	(v_oscillate+2).w,d0
0000D1E4 323C 0020                  		move.w	#$20,d1
0000D1E8 6000                       		bra.s	LGrass_Move
0000D1EA                            ; ===========================================================================
0000D1EA                            
0000D1EA                            LGrass_Type02:
0000D1EA 1038 FE64                  		move.b	(v_oscillate+6).w,d0
0000D1EE 323C 0030                  		move.w	#$30,d1
0000D1F2 6000                       		bra.s	LGrass_Move
0000D1F4                            ; ===========================================================================
0000D1F4                            
0000D1F4                            LGrass_Type03:
0000D1F4 1038 FE68                  		move.b	(v_oscillate+$A).w,d0
0000D1F8 323C 0040                  		move.w	#$40,d1
0000D1FC 6000                       		bra.s	LGrass_Move
0000D1FE                            ; ===========================================================================
0000D1FE                            
0000D1FE                            LGrass_Type04:
0000D1FE 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
0000D202 323C 0060                  		move.w	#$60,d1
0000D206                            
0000D206                            LGrass_Move:
0000D206 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D20C 6700                       		beq.s	loc_AFF2
0000D20E 4440                       		neg.w	d0
0000D210 D041                       		add.w	d1,d0
0000D212                            
0000D212                            loc_AFF2:
0000D212 3228 002C                  		move.w	lgrass_origY(a0),d1
0000D216 9240                       		sub.w	d0,d1
0000D218 3141 000C                  		move.w	d1,obY(a0)	; update position on y-axis
0000D21C 4E75                       		rts	
0000D21E                            ; ===========================================================================
0000D21E                            
0000D21E                            LGrass_Type05:
0000D21E 1028 0034                  		move.b	$34(a0),d0
0000D222 4A28 0025                  		tst.b	ob2ndRout(a0)
0000D226 6600                       		bne.s	loc_B010
0000D228 5500                       		subq.b	#2,d0
0000D22A 6400                       		bcc.s	loc_B01C
0000D22C 7000                       		moveq	#0,d0
0000D22E 6000                       		bra.s	loc_B01C
0000D230                            ; ===========================================================================
0000D230                            
0000D230                            loc_B010:
0000D230 5800                       		addq.b	#4,d0
0000D232 0C00 0040                  		cmpi.b	#$40,d0
0000D236 6500                       		bcs.s	loc_B01C
0000D238 103C 0040                  		move.b	#$40,d0
0000D23C                            
0000D23C                            loc_B01C:
0000D23C 1140 0034                  		move.b	d0,$34(a0)
0000D240 4EB9 0000 3A32             		jsr	(CalcSine).l
0000D246 E848                       		lsr.w	#4,d0
0000D248 3200                       		move.w	d0,d1
0000D24A D068 002C                  		add.w	lgrass_origY(a0),d0
0000D24E 3140 000C                  		move.w	d0,obY(a0)
0000D252 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000D258 6600                       		bne.s	loc_B07A
0000D25A 4A28 0035                  		tst.b	$35(a0)
0000D25E 6600                       		bne.s	loc_B07A
0000D260 117C 0001 0035             		move.b	#1,$35(a0)
0000D266 6100 0000                  		bsr.w	FindNextFreeObj
0000D26A 6600                       		bne.s	loc_B07A
0000D26C 12BC 0000                  		move.b	#id_GrassFire,0(a1) ; load sitting flame object
0000D270 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D276 3368 002C 002C             		move.w	lgrass_origY(a0),lgrass_origY(a1)
0000D27C 5069 002C                  		addq.w	#8,lgrass_origY(a1)
0000D280 5769 002C                  		subq.w	#3,lgrass_origY(a1)
0000D284 0469 0040 0008             		subi.w	#$40,obX(a1)
0000D28A 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000D290 2348 0038                  		move.l	a0,$38(a1)
0000D294 2448                       		movea.l	a0,a2
0000D296 6100                       		bsr.s	sub_B09C
0000D298                            
0000D298                            loc_B07A:
0000D298 7400                       		moveq	#0,d2
0000D29A 45E8 0036                  		lea	$36(a0),a2
0000D29E 141A                       		move.b	(a2)+,d2
0000D2A0 5302                       		subq.b	#1,d2
0000D2A2 6500                       		bcs.s	locret_B09A
0000D2A4                            
0000D2A4                            loc_B086:
0000D2A4 7000                       		moveq	#0,d0
0000D2A6 101A                       		move.b	(a2)+,d0
0000D2A8 ED48                       		lsl.w	#6,d0
0000D2AA 0640 D000                  		addi.w	#$D000,d0
0000D2AE 3240                       		movea.w	d0,a1
0000D2B0 3341 003C                  		move.w	d1,$3C(a1)
0000D2B4 51CA FFEE                  		dbf	d2,loc_B086
0000D2B8                            
0000D2B8                            locret_B09A:
0000D2B8 4E75                       		rts	
0000D2BA                            
0000D2BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D2BA                            
0000D2BA                            
0000D2BA                            sub_B09C:
0000D2BA 45EA 0036                  		lea	$36(a2),a2
0000D2BE 7000                       		moveq	#0,d0
0000D2C0 1012                       		move.b	(a2),d0
0000D2C2 5212                       		addq.b	#1,(a2)
0000D2C4 45F2 0001                  		lea	1(a2,d0.w),a2
0000D2C8 3009                       		move.w	a1,d0
0000D2CA 0440 D000                  		subi.w	#$D000,d0
0000D2CE EC48                       		lsr.w	#6,d0
0000D2D0 0240 007F                  		andi.w	#$7F,d0
0000D2D4 1480                       		move.b	d0,(a2)
0000D2D6 4E75                       		rts	
0000D2D8                            ; End of function sub_B09C
0000D2D8                            
0000D2D8                            ; ===========================================================================
0000D2D8                            
0000D2D8                            LGrass_ChkDel:
0000D2D8 4A28 0035                  		tst.b	$35(a0)
0000D2DC 6700                       		beq.s	loc_B0C6
0000D2DE 4A28 0001                  		tst.b	obRender(a0)
0000D2E2 6A00                       		bpl.s	LGrass_DelFlames
0000D2E4                            
0000D2E4                            loc_B0C6:
0000D302 4E75                       		rts	
0000D304                            ; ===========================================================================
0000D304                            
0000D304                            LGrass_DelFlames:
0000D304 7400                       		moveq	#0,d2
0000D306                            
0000D306                            loc_B0E8:
0000D306 45E8 0036                  		lea	$36(a0),a2
0000D30A 1412                       		move.b	(a2),d2
0000D30C 421A                       		clr.b	(a2)+
0000D30E 5302                       		subq.b	#1,d2
0000D310 6500                       		bcs.s	locret_B116
0000D312                            
0000D312                            loc_B0F4:
0000D312 7000                       		moveq	#0,d0
0000D314 1012                       		move.b	(a2),d0
0000D316 421A                       		clr.b	(a2)+
0000D318 ED48                       		lsl.w	#6,d0
0000D31A 0640 D000                  		addi.w	#$D000,d0
0000D31E 3240                       		movea.w	d0,a1
0000D320 6100 0000                  		bsr.w	DeleteChild
0000D324 51CA FFEC                  		dbf	d2,loc_B0F4
0000D328 117C 0000 0035             		move.b	#0,$35(a0)
0000D32E 117C 0000 0034             		move.b	#0,$34(a0)
0000D334                            
0000D334                            locret_B116:
0000D334 4E75                       		rts	
0000D336                            ; ===========================================================================
0000D336                            ; ---------------------------------------------------------------------------
0000D336                            ; Collision data for large moving platforms (MZ)
0000D336                            ; ---------------------------------------------------------------------------
0000D336                            LGrass_Data1:	incbin	"misc\mz_pfm1.bin"
0000D382                            		even
0000D382                            LGrass_Data2:	incbin	"misc\mz_pfm2.bin"
0000D3AE                            		even
0000D3AE                            LGrass_Data3:	incbin	"misc\mz_pfm3.bin"
0000D3FA                            		even
0000D3FA                            		even
0000D3FA                            		include	"_incObj\35 Burning Grass.asm"
0000D3FA                            ; ---------------------------------------------------------------------------
0000D3FA                            ; Object 35 - fireball that sits on the	floor (MZ)
0000D3FA                            ; (appears when	you walk on sinking platforms)
0000D3FA                            ; ---------------------------------------------------------------------------
0000D3FA                            
0000D3FA                            GrassFire:
0000D3FA 7000                       		moveq	#0,d0
0000D3FC 1028 0024                  		move.b	obRoutine(a0),d0
0000D400 323B 0000                  		move.w	GFire_Index(pc,d0.w),d1
0000D404 4EFB 1000                  		jmp	GFire_Index(pc,d1.w)
0000D408                            ; ===========================================================================
0000D408 0000                       GFire_Index:	dc.w GFire_Main-GFire_Index
0000D40A 0000                       		dc.w loc_B238-GFire_Index
0000D40C 0000                       		dc.w GFire_Move-GFire_Index
0000D40E                            
0000D40E =0000002A                  gfire_origX:	equ $2A
0000D40E                            ; ===========================================================================
0000D40E                            
0000D40E                            GFire_Main:	; Routine 0
0000D40E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000D412 217C 0000 0000 0004        		move.l	#Map_Fire,obMap(a0)
0000D41A 317C 0345 0002             		move.w	#$345,obGfx(a0)
0000D420 3168 0008 002A             		move.w	obX(a0),gfire_origX(a0)
0000D426 117C 0004 0001             		move.b	#4,obRender(a0)
0000D42C 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000D432 117C 008B 0020             		move.b	#$8B,obColType(a0)
0000D438 117C 0008 0014             		move.b	#8,obActWid(a0)
0000D448 4A28 0028                  		tst.b	obSubtype(a0)
0000D44C 6700                       		beq.s	loc_B238
0000D44E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000D452 6000 0000                  		bra.w	GFire_Move
0000D456                            ; ===========================================================================
0000D456                            
0000D456                            loc_B238:	; Routine 2
0000D456 2268 0030                  		movea.l	$30(a0),a1
0000D45A 3228 0008                  		move.w	obX(a0),d1
0000D45E 9268 002A                  		sub.w	gfire_origX(a0),d1
0000D462 0641 000C                  		addi.w	#$C,d1
0000D466 3001                       		move.w	d1,d0
0000D468 E248                       		lsr.w	#1,d0
0000D46A 1031 0000                  		move.b	(a1,d0.w),d0
0000D46E 4440                       		neg.w	d0
0000D470 D068 002C                  		add.w	$2C(a0),d0
0000D474 3400                       		move.w	d0,d2
0000D476 D068 003C                  		add.w	$3C(a0),d0
0000D47A 3140 000C                  		move.w	d0,obY(a0)
0000D47E 0C41 0084                  		cmpi.w	#$84,d1
0000D482 6400                       		bcc.s	loc_B2B0
0000D484 06A8 0001 0000 0008        		addi.l	#$10000,obX(a0)
0000D48C 0C41 0080                  		cmpi.w	#$80,d1
0000D490 6400                       		bcc.s	loc_B2B0
0000D492 2028 0008                  		move.l	obX(a0),d0
0000D496 0680 0008 0000             		addi.l	#$80000,d0
0000D49C 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000D4A2 6600                       		bne.s	loc_B2B0
0000D4A4 6100 0000                  		bsr.w	FindNextFreeObj
0000D4A8 6600                       		bne.s	loc_B2B0
0000D4AA 12BC 0000                  		move.b	#id_GrassFire,0(a1)
0000D4AE 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D4B4 3342 002C                  		move.w	d2,$2C(a1)
0000D4B8 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000D4BE 137C 0001 0028             		move.b	#1,obSubtype(a1)
0000D4C4 2468 0038                  		movea.l	$38(a0),a2
0000D4C8 6100 FDF0                  		bsr.w	sub_B09C
0000D4CC                            
0000D4CC                            loc_B2B0:
0000D4CC 6000                       		bra.s	GFire_Animate
0000D4CE                            ; ===========================================================================
0000D4CE                            
0000D4CE                            GFire_Move:	; Routine 4
0000D4CE 3028 002C                  		move.w	$2C(a0),d0
0000D4D2 D068 003C                  		add.w	$3C(a0),d0
0000D4D6 3140 000C                  		move.w	d0,obY(a0)
0000D4DA                            
0000D4DA                            GFire_Animate:
0000D4DA 43F9 0000 0000             		lea	(Ani_GFire).l,a1
0000D4E0 6100 F456                  		bsr.w	AnimateSprite
0000D4E4 6000 0000                  		bra.w	DisplaySprite
0000D4E4 6000 0000                  		bra.w	DisplaySprite
0000D4E8                            		include	"_anim\Burning Grass.asm"
0000D4E8                            ; ---------------------------------------------------------------------------
0000D4E8                            ; Animation script - burning grass that sits on the floor (MZ)
0000D4E8                            ; ---------------------------------------------------------------------------
0000D4E8 0000                       Ani_GFire:	dc.w @burn-Ani_GFire
0000D4EA 0500 2001 21FF             @burn:		dc.b 5,	0, $20,	1, $21,	afEnd
0000D4F0                            		even
0000D4F0                            		even
0000D4F0                            Map_LGrass:	include	"_maps\MZ Large Grassy Platforms.asm"
0000D4F0                            ; ---------------------------------------------------------------------------
0000D4F0                            ; Sprite mappings - large moving grass-covered platforms (MZ)
0000D4F0                            ; ---------------------------------------------------------------------------
0000D4F0                            Map_LGrass_internal:
0000D4F0 0000                       		dc.w @wide-Map_LGrass_internal
0000D4F2 0000                       		dc.w @sloped-Map_LGrass_internal
0000D4F4 0000                       		dc.w @narrow-Map_LGrass_internal
0000D4F6 0D                         @wide:		dc.b $D
0000D4F7 D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0 ; wide platform
0000D4FC F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000D501 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000D506 D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000D50B F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000D510 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000D515 D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000D51A D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000D51F F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000D524 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000D529 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000D52E D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000D533 F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000D538 0A                         @sloped:	dc.b $A
0000D539 D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0 ; sloped platform (catches fire)
0000D53E F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000D543 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000D548 C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000D54D E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000D552 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000D557 C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000D55C E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000D561 C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000D566 E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000D56B 06                         @narrow:	dc.b 6
0000D56C D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0 ; narrow platform
0000D571 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000D576 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000D57B D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000D580 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000D585 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000D58A                            		even
0000D58A                            		even
0000D58A                            Map_Fire:	include	"_maps\Fireballs.asm"
0000D58A                            ; --------------------------------------------------------------------------------
0000D58A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000D58A                            ; --------------------------------------------------------------------------------
0000D58A                            
0000D58A                            SME_gyvTV:	
0000D58A 0000 0000                  		dc.w SME_gyvTV_C-SME_gyvTV, SME_gyvTV_12-SME_gyvTV	
0000D58E 0000 0000                  		dc.w SME_gyvTV_18-SME_gyvTV, SME_gyvTV_1E-SME_gyvTV	
0000D592 0000 0000                  		dc.w SME_gyvTV_24-SME_gyvTV, SME_gyvTV_2A-SME_gyvTV	
0000D596 01                         SME_gyvTV_C:	dc.b 1	
0000D597 E807 6000 F8               		dc.b $E8, 7, $60, 0, $F8	
0000D59C 01                         SME_gyvTV_12:	dc.b 1	
0000D59D E807 6008 F8               		dc.b $E8, 7, $60, 8, $F8	
0000D5A2 01                         SME_gyvTV_18:	dc.b 1	
0000D5A3 F006 6010 F8               		dc.b $F0, 6, $60, $10, $F8	
0000D5A8 01                         SME_gyvTV_1E:	dc.b 1	
0000D5A9 F80D 6016 E8               		dc.b $F8, $D, $60, $16, $E8	
0000D5AE 01                         SME_gyvTV_24:	dc.b 1	
0000D5AF F80D 601E E8               		dc.b $F8, $D, $60, $1E, $E8	
0000D5B4 01                         SME_gyvTV_2A:	dc.b 1	
0000D5B5 F809 6026 F0               		dc.b $F8, 9, $60, $26, $F0	
0000D5BA                            		even
0000D5BA                            		even
0000D5BA                            		include	"_incObj\30 MZ Large Green Glass Blocks.asm"
0000D5BA                            ; ---------------------------------------------------------------------------
0000D5BA                            ; Object 30 - large green glass blocks (MZ)
0000D5BA                            ; ---------------------------------------------------------------------------
0000D5BA                            
0000D5BA                            GlassBlock:
0000D5BA 7000                       		moveq	#0,d0
0000D5BC 1028 0024                  		move.b	obRoutine(a0),d0
0000D5C0 323B 0000                  		move.w	Glass_Index(pc,d0.w),d1
0000D5C4 4EBB 1000                  		jsr	Glass_Index(pc,d1.w)
0000D5E6 6000 0000                  		bra.w	DisplaySprite
0000D5EA                            ; ===========================================================================
0000D5EA                            
0000D5EA                            Glass_Delete:
0000D5EA 6000 0000                  		bra.w	DeleteObject
0000D5EE                            ; ===========================================================================
0000D5EE 0000                       Glass_Index:	dc.w Glass_Main-Glass_Index
0000D5F0 0000                       		dc.w Glass_Block012-Glass_Index
0000D5F2 0000                       		dc.w Glass_Reflect012-Glass_Index
0000D5F4 0000                       		dc.w Glass_Block34-Glass_Index
0000D5F6 0000                       		dc.w Glass_Reflect34-Glass_Index
0000D5F8                            
0000D5F8 =00000032                  glass_dist:	equ $32		; distance block moves when switch is pressed
0000D5F8 =0000003C                  glass_parent:	equ $3C		; address of parent object
0000D5F8                            
0000D5F8 0200 00                    Glass_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000D5FB 0400 01                    		dc.b 4,	0, 1
0000D5FE 0600 02                    Glass_Vars2:	dc.b 6,	0, 2
0000D601 0800 01                    		dc.b 8,	0, 1
0000D604                            ; ===========================================================================
0000D604                            
0000D604                            Glass_Main:	; Routine 0
0000D604 45F9 0000 D5F8             		lea	(Glass_Vars1).l,a2
0000D60A 7201                       		moveq	#1,d1
0000D60C 117C 0048 0016             		move.b	#$48,obHeight(a0)
0000D612 0C28 0003 0028             		cmpi.b	#3,obSubtype(a0) ; is object type 0/1/2 ?
0000D618 6500                       		bcs.s	@IsType012	; if yes, branch
0000D61A                            
0000D61A 45F9 0000 D5FE             		lea	(Glass_Vars2).l,a2
0000D620 7201                       		moveq	#1,d1
0000D622 117C 0038 0016             		move.b	#$38,obHeight(a0)
0000D628                            
0000D628                            	@IsType012:
0000D628 2248                       		movea.l	a0,a1
0000D62A 6000                       		bra.s	@Load		; load main object
0000D62C                            ; ===========================================================================
0000D62C                            
0000D62C                            	@Repeat:
0000D62C 6100 0000                  		bsr.w	FindNextFreeObj
0000D630 6600                       		bne.s	@Fail
0000D632                            
0000D632                            @Load:
0000D632 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000D636 12BC 0000                  		move.b	#id_GlassBlock,0(a1)
0000D63A 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D640 101A                       		move.b	(a2)+,d0
0000D642 4880                       		ext.w	d0
0000D644 D068 000C                  		add.w	obY(a0),d0
0000D648 3340 000C                  		move.w	d0,obY(a1)
0000D64C 237C 0000 0000 0004        		move.l	#Map_Glass,obMap(a1)
0000D654 337C C38E 0002             		move.w	#$C38E,obGfx(a1)
0000D65A 137C 0004 0001             		move.b	#4,obRender(a1)
0000D660 3369 000C 0030             		move.w	obY(a1),$30(a1)
0000D666 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000D66C 137C 0020 0014             		move.b	#$20,obActWid(a1)
0000D672 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000D678 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000D67C 2348 003C                  		move.l	a0,glass_parent(a1)
0000D680 51C9 FFAA                  		dbf	d1,@Repeat	; repeat once to load "reflection object"
0000D684                            
0000D684 137C 0010 0014             		move.b	#$10,obActWid(a1)
0000D68A 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000D690 5029 0028                  		addq.b	#8,obSubtype(a1)
0000D694 0229 000F 0028             		andi.b	#$F,obSubtype(a1)
0000D69A                            
0000D69A                            	@Fail:
0000D69A 317C 0090 0032             		move.w	#$90,glass_dist(a0)
0000D6A0 08E8 0004 0001             		bset	#4,obRender(a0)
0000D6A6                            
0000D6A6                            Glass_Block012:	; Routine 2
0000D6A6 6100 0000                  		bsr.w	Glass_Types
0000D6AA 323C 002B                  		move.w	#$2B,d1
0000D6AE 343C 0048                  		move.w	#$48,d2
0000D6B2 363C 0049                  		move.w	#$49,d3
0000D6B6 3828 0008                  		move.w	obX(a0),d4
0000D6BA 6000 0000                  		bra.w	SolidObject
0000D6BE                            ; ===========================================================================
0000D6BE                            
0000D6BE                            Glass_Reflect012:
0000D6BE                            		; Routine 4
0000D6BE 2268 003C                  		movea.l	$3C(a0),a1
0000D6C2 3169 0032 0032             		move.w	glass_dist(a1),glass_dist(a0)
0000D6C8 6000 0000                  		bra.w	Glass_Types
0000D6CC                            ; ===========================================================================
0000D6CC                            
0000D6CC                            Glass_Block34:	; Routine 6
0000D6CC 6100 0000                  		bsr.w	Glass_Types
0000D6D0 323C 002B                  		move.w	#$2B,d1
0000D6D4 343C 0038                  		move.w	#$38,d2
0000D6D8 363C 0039                  		move.w	#$39,d3
0000D6DC 3828 0008                  		move.w	obX(a0),d4
0000D6E0 6000 0000                  		bra.w	SolidObject
0000D6E4                            ; ===========================================================================
0000D6E4                            
0000D6E4                            Glass_Reflect34:
0000D6E4                            		; Routine 8
0000D6E4 2268 003C                  		movea.l	$3C(a0),a1
0000D6E8 3169 0032 0032             		move.w	glass_dist(a1),glass_dist(a0)
0000D6EE 3169 000C 0030             		move.w	obY(a1),$30(a0)
0000D6F4 6000 0000                  		bra.w	Glass_Types
0000D6F8                            
0000D6F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D6F8                            
0000D6F8                            
0000D6F8                            Glass_Types:
0000D6F8 7000                       		moveq	#0,d0
0000D6FA 1028 0028                  		move.b	obSubtype(a0),d0
0000D6FE 0240 0007                  		andi.w	#7,d0
0000D702 D040                       		add.w	d0,d0
0000D704 323B 0000                  		move.w	Glass_TypeIndex(pc,d0.w),d1
0000D708 4EFB 1000                  		jmp	Glass_TypeIndex(pc,d1.w)
0000D70C                            ; End of function Glass_Types
0000D70C                            
0000D70C                            ; ===========================================================================
0000D70C 0000                       Glass_TypeIndex:dc.w Glass_Type00-Glass_TypeIndex
0000D70E 0000                       		dc.w Glass_Type01-Glass_TypeIndex
0000D710 0000                       		dc.w Glass_Type02-Glass_TypeIndex
0000D712 0000                       		dc.w Glass_Type03-Glass_TypeIndex
0000D714 0000                       		dc.w Glass_Type04-Glass_TypeIndex
0000D716                            ; ===========================================================================
0000D716                            
0000D716                            Glass_Type00:
0000D716 4E75                       		rts	
0000D718                            ; ===========================================================================
0000D718                            
0000D718                            Glass_Type01:
0000D718 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D71C 323C 0040                  		move.w	#$40,d1
0000D720 6000                       		bra.s	loc_B514
0000D722                            ; ===========================================================================
0000D722                            
0000D722                            Glass_Type02:
0000D722 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D726 323C 0040                  		move.w	#$40,d1
0000D72A 4440                       		neg.w	d0
0000D72C D041                       		add.w	d1,d0
0000D72E                            
0000D72E                            loc_B514:
0000D72E 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D734 6700                       		beq.s	loc_B526
0000D736 4440                       		neg.w	d0
0000D738 D041                       		add.w	d1,d0
0000D73A E208                       		lsr.b	#1,d0
0000D73C 0640 0020                  		addi.w	#$20,d0
0000D740                            
0000D740                            loc_B526:
0000D740 6000 0000                  		bra.w	loc_B5EE
0000D744                            ; ===========================================================================
0000D744                            
0000D744                            Glass_Type03:
0000D744 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D74A 6700                       		beq.s	loc_B53E
0000D74C 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D750 0440 0010                  		subi.w	#$10,d0
0000D754 6000 0000                  		bra.w	loc_B5EE
0000D758                            ; ===========================================================================
0000D758                            
0000D758                            loc_B53E:
0000D758 0828 0003 0022             		btst	#3,obStatus(a0)
0000D75E 6600                       		bne.s	loc_B54E
0000D760 08A8 0000 0034             		bclr	#0,$34(a0)
0000D766 6000                       		bra.s	loc_B582
0000D768                            ; ===========================================================================
0000D768                            
0000D768                            loc_B54E:
0000D768 4A28 0034                  		tst.b	$34(a0)
0000D76C 6600                       		bne.s	loc_B582
0000D76E 117C 0001 0034             		move.b	#1,$34(a0)
0000D774 08E8 0000 0035             		bset	#0,$35(a0)
0000D77A 6700                       		beq.s	loc_B582
0000D77C 08E8 0007 0034             		bset	#7,$34(a0)
0000D782 317C 0010 0036             		move.w	#$10,$36(a0)
0000D788 117C 000A 0038             		move.b	#$A,$38(a0)
0000D78E 0C68 0040 0032             		cmpi.w	#$40,glass_dist(a0)
0000D794 6600                       		bne.s	loc_B582
0000D796 317C 0040 0036             		move.w	#$40,$36(a0)
0000D79C                            
0000D79C                            loc_B582:
0000D79C 4A28 0034                  		tst.b	$34(a0)
0000D7A0 6A00                       		bpl.s	loc_B5AA
0000D7A2 4A28 0038                  		tst.b	$38(a0)
0000D7A6 6700                       		beq.s	loc_B594
0000D7A8 5328 0038                  		subq.b	#1,$38(a0)
0000D7AC 6600                       		bne.s	loc_B5AA
0000D7AE                            
0000D7AE                            loc_B594:
0000D7AE 4A68 0032                  		tst.w	glass_dist(a0)
0000D7B2 6700                       		beq.s	loc_B5A4
0000D7B4 5368 0032                  		subq.w	#1,glass_dist(a0)
0000D7B8 5368 0036                  		subq.w	#1,$36(a0)
0000D7BC 6600                       		bne.s	loc_B5AA
0000D7BE                            
0000D7BE                            loc_B5A4:
0000D7BE 08A8 0007 0034             		bclr	#7,$34(a0)
0000D7C4                            
0000D7C4                            loc_B5AA:
0000D7C4 3028 0032                  		move.w	glass_dist(a0),d0
0000D7C8 6000                       		bra.s	loc_B5EE
0000D7CA                            ; ===========================================================================
0000D7CA                            
0000D7CA                            Glass_Type04:
0000D7CA 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D7D0 6700                       		beq.s	Glass_ChkSwitch
0000D7D2 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D7D6 0440 0010                  		subi.w	#$10,d0
0000D7DA 6000                       		bra.s	loc_B5EE
0000D7DC                            ; ===========================================================================
0000D7DC                            
0000D7DC                            Glass_ChkSwitch:
0000D7DC 4A28 0034                  		tst.b	$34(a0)
0000D7E0 6600                       		bne.s	loc_B5E0
0000D7E2 45F8 F7E0                  		lea	(f_switch).w,a2
0000D7E6 7000                       		moveq	#0,d0
0000D7E8 1028 0028                  		move.b	obSubtype(a0),d0 ; load object type number
0000D7EC E848                       		lsr.w	#4,d0		; read only the	first nybble
0000D7EE 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000D7F2 6700                       		beq.s	loc_B5EA	; if not, branch
0000D7F4 117C 0001 0034             		move.b	#1,$34(a0)
0000D7FA                            
0000D7FA                            loc_B5E0:
0000D7FA 4A68 0032                  		tst.w	glass_dist(a0)
0000D7FE 6700                       		beq.s	loc_B5EA
0000D800 5568 0032                  		subq.w	#2,glass_dist(a0)
0000D804                            
0000D804                            loc_B5EA:
0000D804 3028 0032                  		move.w	glass_dist(a0),d0
0000D808                            
0000D808                            loc_B5EE:
0000D808 3228 0030                  		move.w	$30(a0),d1
0000D80C 9240                       		sub.w	d0,d1
0000D80E 3141 000C                  		move.w	d1,obY(a0)
0000D812 4E75                       		rts	
0000D812 4E75                       		rts	
0000D814                            Map_Glass:	include	"_maps\MZ Large Green Glass Blocks.asm"
0000D814                            ; --------------------------------------------------------------------------------
0000D814                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000D814                            ; --------------------------------------------------------------------------------
0000D814                            
0000D814                            SME_NEyTf:	
0000D814 0000 0000                  		dc.w SME_NEyTf_6-SME_NEyTf, SME_NEyTf_43-SME_NEyTf	
0000D818 0000                       		dc.w SME_NEyTf_4E-SME_NEyTf	
0000D81A 0C                         SME_NEyTf_6:	dc.b $C	
0000D81B B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0	
0000D820 B80C 0800 00               		dc.b $B8, $C, 8, 0, 0	
0000D825 C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0	
0000D82A C00F 0804 00               		dc.b $C0, $F, 8, 4, 0	
0000D82F E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0	
0000D834 E00F 0804 00               		dc.b $E0, $F, 8, 4, 0	
0000D839 000F 0004 E0               		dc.b 0, $F, 0, 4, $E0	
0000D83E 000F 0804 00               		dc.b 0, $F, 8, 4, 0	
0000D843 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0	
0000D848 200F 0804 00               		dc.b $20, $F, 8, 4, 0	
0000D84D 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0	
0000D852 400C 1800 00               		dc.b $40, $C, $18, 0, 0	
0000D857 02                         SME_NEyTf_43:	dc.b 2	
0000D858 0806 6014 F0               		dc.b 8, 6, $60, $14, $F0	
0000D85D 0006 6014 00               		dc.b 0, 6, $60, $14, 0	
0000D862 0A                         SME_NEyTf_4E:	dc.b $A	
0000D863 C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0	
0000D868 C80C 0800 00               		dc.b $C8, $C, 8, 0, 0	
0000D86D D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0	
0000D872 D00F 0804 00               		dc.b $D0, $F, 8, 4, 0	
0000D877 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0	
0000D87C F00F 0804 00               		dc.b $F0, $F, 8, 4, 0	
0000D881 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0	
0000D886 100F 0804 00               		dc.b $10, $F, 8, 4, 0	
0000D88B 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0	
0000D890 300C 1800 00               		dc.b $30, $C, $18, 0, 0	
0000D896 00                         		even
0000D896 00                         		even
0000D896                            		include	"_incObj\31 Chained Stompers.asm"
0000D896                            ; ---------------------------------------------------------------------------
0000D896                            ; Object 31 - stomping metal blocks on chains (MZ)
0000D896                            ; ---------------------------------------------------------------------------
0000D896                            
0000D896                            ChainStomp:
0000D896 7000                       		moveq	#0,d0
0000D898 1028 0024                  		move.b	obRoutine(a0),d0
0000D89C 323B 0000                  		move.w	CStom_Index(pc,d0.w),d1
0000D8A0 4EFB 1000                  		jmp	CStom_Index(pc,d1.w)
0000D8A4                            ; ===========================================================================
0000D8A4 0000                       CStom_Index:	dc.w CStom_Main-CStom_Index
0000D8A6 0000                       		dc.w loc_B798-CStom_Index
0000D8A8 0000                       		dc.w loc_B7FE-CStom_Index
0000D8AA 0000                       		dc.w CStom_Display2-CStom_Index
0000D8AC 0000                       		dc.w loc_B7E2-CStom_Index
0000D8AE                            
0000D8AE =0000003A                  CStom_switch:	equ $3A			; switch number for the current stomper
0000D8AE                            
0000D8AE 0000                       CStom_SwchNums:	dc.b 0,	0		; switch number, obj number
0000D8B0 0100                       		dc.b 1,	0
0000D8B2                            
0000D8B2 0200 00                    CStom_Var:	dc.b 2,	0, 0		; routine number, y-position, frame number
0000D8B5 041C 01                    		dc.b 4,	$1C, 1
0000D8B8 08CC 03                    		dc.b 8,	$CC, 3
0000D8BB 06F0 02                    		dc.b 6,	$F0, 2
0000D8BE                            
0000D8BE 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000D8C2 5000 7800                  		dc.w $5000, $7800
0000D8C6 3800 5800                  		dc.w $3800, $5800
0000D8CA B800                       		dc.w $B800
0000D8CC                            ; ===========================================================================
0000D8CC                            
0000D8CC                            CStom_Main:	; Routine 0
0000D8CC 7000                       		moveq	#0,d0
0000D8CE 1028 0028                  		move.b	obSubtype(a0),d0
0000D8D2 6A00                       		bpl.s	loc_B6CE
0000D8D4 0240 007F                  		andi.w	#$7F,d0
0000D8D8 D040                       		add.w	d0,d0
0000D8DA 45FB 00D2                  		lea	CStom_SwchNums(pc,d0.w),a2
0000D8DE 115A 003A                  		move.b	(a2)+,CStom_switch(a0)
0000D8E2 101A                       		move.b	(a2)+,d0
0000D8E4 1140 0028                  		move.b	d0,obSubtype(a0)
0000D8E8                            
0000D8E8                            loc_B6CE:
0000D8E8 0200 000F                  		andi.b	#$F,d0
0000D8EC D040                       		add.w	d0,d0
0000D8EE 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000D8F2 4A40                       		tst.w	d0
0000D8F4 6600                       		bne.s	loc_B6E0
0000D8F6 3142 0032                  		move.w	d2,$32(a0)
0000D8FA                            
0000D8FA                            loc_B6E0:
0000D8FA 45F9 0000 D8B2             		lea	(CStom_Var).l,a2
0000D900 2248                       		movea.l	a0,a1
0000D902 7203                       		moveq	#3,d1
0000D904 6000                       		bra.s	CStom_MakeStomper
0000D906                            ; ===========================================================================
0000D906                            
0000D906                            CStom_Loop:
0000D906 6100 0000                  		bsr.w	FindNextFreeObj
0000D90A 6600 0000                  		bne.w	CStom_SetSize
0000D90E                            
0000D90E                            CStom_MakeStomper:
0000D90E 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000D912 12BC 0000                  		move.b	#id_ChainStomp,0(a1)
0000D916 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D91C 101A                       		move.b	(a2)+,d0
0000D91E 4880                       		ext.w	d0
0000D920 D068 000C                  		add.w	obY(a0),d0
0000D924 3340 000C                  		move.w	d0,obY(a1)
0000D928 237C 0000 0000 0004        		move.l	#Map_CStom,obMap(a1)
0000D930 337C 0300 0002             		move.w	#$300,obGfx(a1)
0000D936 137C 0004 0001             		move.b	#4,obRender(a1)
0000D93C 3369 000C 0030             		move.w	obY(a1),$30(a1)
0000D942 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000D948 137C 0010 0014             		move.b	#$10,obActWid(a1)
0000D94E 3342 0034                  		move.w	d2,$34(a1)
0000D952 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000D958 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000D95C 0C29 0001 001A             		cmpi.b	#1,obFrame(a1)
0000D962 6600                       		bne.s	loc_B76A
0000D964 5341                       		subq.w	#1,d1
0000D966 1028 0028                  		move.b	obSubtype(a0),d0
0000D96A 0240 00F0                  		andi.w	#$F0,d0
0000D96E 0C40 0020                  		cmpi.w	#$20,d0
0000D972 679A                       		beq.s	CStom_MakeStomper
0000D974 137C 0038 0014             		move.b	#$38,obActWid(a1)
0000D97A 137C 0090 0020             		move.b	#$90,obColType(a1)
0000D980 5241                       		addq.w	#1,d1
0000D982                            
0000D982                            loc_B76A:
0000D982 2348 003C                  		move.l	a0,$3C(a1)
0000D986 51C9 FF7E                  		dbf	d1,CStom_Loop
0000D98A                            
0000D98A 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000D990                            
0000D990                            CStom_SetSize:
0000D990 7000                       		moveq	#0,d0
0000D992 1028 0028                  		move.b	obSubtype(a0),d0
0000D996 E648                       		lsr.w	#3,d0
0000D998 0200 000E                  		andi.b	#$E,d0
0000D99C 45FB 0000                  		lea	CStom_Var2(pc,d0.w),a2
0000D9A0 115A 0014                  		move.b	(a2)+,obActWid(a0)
0000D9A4 115A 001A                  		move.b	(a2)+,obFrame(a0)
0000D9A8 6000                       		bra.s	loc_B798
0000D9AA                            ; ===========================================================================
0000D9AA 3800                       CStom_Var2:	dc.b $38, 0		; width, frame number
0000D9AC 3009                       		dc.b $30, 9
0000D9AE 100A                       		dc.b $10, $A
0000D9B0                            ; ===========================================================================
0000D9B0                            
0000D9B0                            loc_B798:	; Routine 2
0000D9B0 6100 0000                  		bsr.w	CStom_Types
0000D9B4 31E8 000C F7A4             		move.w	obY(a0),(v_obj31ypos).w
0000D9BA 7200                       		moveq	#0,d1
0000D9BC 1228 0014                  		move.b	obActWid(a0),d1
0000D9C0 0641 000B                  		addi.w	#$B,d1
0000D9C4 343C 000C                  		move.w	#$C,d2
0000D9C8 363C 000D                  		move.w	#$D,d3
0000D9CC 3828 0008                  		move.w	obX(a0),d4
0000D9D0 6100 0000                  		bsr.w	SolidObject
0000D9D4 0828 0003 0022             		btst	#3,obStatus(a0)
0000D9DA 6700                       		beq.s	CStom_Display
0000D9DC 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000D9E2 6400                       		bcc.s	CStom_Display
0000D9E4 2448                       		movea.l	a0,a2
0000D9E6 41F8 D000                  		lea	(v_player).w,a0
0000D9EA 4EB9 0000 0000             		jsr	(KillSonic).l
0000D9F0 204A                       		movea.l	a2,a0
0000D9F2                            
0000D9F2                            CStom_Display:
0000D9F2 6100 0000                  		bsr.w	DisplaySprite
0000D9F6 6000 0000                  		bra.w	CStom_ChkDel
0000D9FA                            ; ===========================================================================
0000D9FA                            
0000D9FA                            loc_B7E2:	; Routine 8
0000D9FA 117C 0080 0016             		move.b	#$80,obHeight(a0)
0000DA00 08E8 0004 0001             		bset	#4,obRender(a0)
0000DA06 2268 003C                  		movea.l	$3C(a0),a1
0000DA0A 1029 0032                  		move.b	$32(a1),d0
0000DA0E EA08                       		lsr.b	#5,d0
0000DA10 5600                       		addq.b	#3,d0
0000DA12 1140 001A                  		move.b	d0,obFrame(a0)
0000DA16                            
0000DA16                            loc_B7FE:	; Routine 4
0000DA16 2268 003C                  		movea.l	$3C(a0),a1
0000DA1A 7000                       		moveq	#0,d0
0000DA1C 1029 0032                  		move.b	$32(a1),d0
0000DA20 D068 0030                  		add.w	$30(a0),d0
0000DA24 3140 000C                  		move.w	d0,obY(a0)
0000DA28                            
0000DA28                            CStom_Display2:	; Routine 6
0000DA28 6100 0000                  		bsr.w	DisplaySprite
0000DA2C                            
0000DA2C                            CStom_ChkDel:
0000DA4A 4E75                       		rts	
0000DA4C                            ; ===========================================================================
0000DA4C                            
0000DA4C                            CStom_Types:
0000DA4C 1028 0028                  		move.b	obSubtype(a0),d0
0000DA50 0240 000F                  		andi.w	#$F,d0
0000DA54 D040                       		add.w	d0,d0
0000DA56 323B 0000                  		move.w	CStom_TypeIndex(pc,d0.w),d1
0000DA5A 4EFB 1000                  		jmp	CStom_TypeIndex(pc,d1.w)
0000DA5E                            ; ===========================================================================
0000DA5E 0000                       CStom_TypeIndex:dc.w CStom_Type00-CStom_TypeIndex
0000DA60 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000DA62 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000DA64 0000                       		dc.w CStom_Type03-CStom_TypeIndex
0000DA66 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000DA68 0000                       		dc.w CStom_Type03-CStom_TypeIndex
0000DA6A 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000DA6C                            ; ===========================================================================
0000DA6C                            
0000DA6C                            CStom_Type00:
0000DA6C 45F8 F7E0                  		lea	(f_switch).w,a2	; load switch statuses
0000DA70 7000                       		moveq	#0,d0
0000DA72 1028 003A                  		move.b	CStom_switch(a0),d0 ; move number 0 or 1 to d0
0000DA76 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000DA7A 6700                       		beq.s	loc_B8A8	; if not, branch
0000DA7C 4A78 F7A4                  		tst.w	(v_obj31ypos).w
0000DA80 6A00                       		bpl.s	loc_B872
0000DA82 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000DA88 6700                       		beq.s	loc_B8A0
0000DA8A                            
0000DA8A                            loc_B872:
0000DA8A 4A68 0032                  		tst.w	$32(a0)
0000DA8E 6700                       		beq.s	loc_B8A0
0000DA90 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000DA94 0200 000F                  		andi.b	#$F,d0
0000DA98 6600                       		bne.s	loc_B892
0000DA9A 4A28 0001                  		tst.b	1(a0)
0000DA9E 6A00                       		bpl.s	loc_B892
0000DAAA                            
0000DAAA                            loc_B892:
0000DAAA 0468 0080 0032             		subi.w	#$80,$32(a0)
0000DAB0 6400                       		bcc.s	CStom_Restart
0000DAB2 317C 0000 0032             		move.w	#0,$32(a0)
0000DAB8                            
0000DAB8                            loc_B8A0:
0000DAB8 317C 0000 0012             		move.w	#0,obVelY(a0)
0000DABE 6000                       		bra.s	CStom_Restart
0000DAC0                            ; ===========================================================================
0000DAC0                            
0000DAC0                            loc_B8A8:
0000DAC0 3228 0034                  		move.w	$34(a0),d1
0000DAC4 B268 0032                  		cmp.w	$32(a0),d1
0000DAC8 6700                       		beq.s	CStom_Restart
0000DACA 3028 0012                  		move.w	obVelY(a0),d0
0000DACE 0668 0070 0012             		addi.w	#$70,obVelY(a0)	; make object fall
0000DAD4 D168 0032                  		add.w	d0,$32(a0)
0000DAD8 B268 0032                  		cmp.w	$32(a0),d1
0000DADC 6200                       		bhi.s	CStom_Restart
0000DADE 3141 0032                  		move.w	d1,$32(a0)
0000DAE2 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop object falling
0000DAE8 4A28 0001                  		tst.b	obRender(a0)
0000DAEC 6A00                       		bpl.s	CStom_Restart
0000DAF8                            
0000DAF8                            CStom_Restart:
0000DAF8 7000                       		moveq	#0,d0
0000DAFA 1028 0032                  		move.b	$32(a0),d0
0000DAFE D068 0030                  		add.w	$30(a0),d0
0000DB02 3140 000C                  		move.w	d0,obY(a0)
0000DB06 4E75                       		rts	
0000DB08                            ; ===========================================================================
0000DB08                            
0000DB08                            CStom_Type01:
0000DB08 4A68 0036                  		tst.w	$36(a0)
0000DB0C 6700                       		beq.s	loc_B938
0000DB0E 4A68 0038                  		tst.w	$38(a0)
0000DB12 6700                       		beq.s	loc_B902
0000DB14 5368 0038                  		subq.w	#1,$38(a0)
0000DB18 6000                       		bra.s	loc_B97C
0000DB1A                            ; ===========================================================================
0000DB1A                            
0000DB1A                            loc_B902:
0000DB1A 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000DB1E 0200 000F                  		andi.b	#$F,d0
0000DB22 6600                       		bne.s	loc_B91C
0000DB24 4A28 0001                  		tst.b	obRender(a0)
0000DB28 6A00                       		bpl.s	loc_B91C
0000DB34                            
0000DB34                            loc_B91C:
0000DB34 0468 0080 0032             		subi.w	#$80,$32(a0)
0000DB3A 6400                       		bcc.s	loc_B97C
0000DB3C 317C 0000 0032             		move.w	#0,$32(a0)
0000DB42 317C 0000 0012             		move.w	#0,obVelY(a0)
0000DB48 317C 0000 0036             		move.w	#0,$36(a0)
0000DB4E 6000                       		bra.s	loc_B97C
0000DB50                            ; ===========================================================================
0000DB50                            
0000DB50                            loc_B938:
0000DB50 3228 0034                  		move.w	$34(a0),d1
0000DB54 B268 0032                  		cmp.w	$32(a0),d1
0000DB58 6700                       		beq.s	loc_B97C
0000DB5A 3028 0012                  		move.w	obVelY(a0),d0
0000DB5E 0668 0070 0012             		addi.w	#$70,obVelY(a0)	; make object fall
0000DB64 D168 0032                  		add.w	d0,$32(a0)
0000DB68 B268 0032                  		cmp.w	$32(a0),d1
0000DB6C 6200                       		bhi.s	loc_B97C
0000DB6E 3141 0032                  		move.w	d1,$32(a0)
0000DB72 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop object falling
0000DB78 317C 0001 0036             		move.w	#1,$36(a0)
0000DB7E 317C 003C 0038             		move.w	#$3C,$38(a0)
0000DB84 4A28 0001                  		tst.b	obRender(a0)
0000DB88 6A00                       		bpl.s	loc_B97C
0000DB94                            
0000DB94                            loc_B97C:
0000DB94 6000 FF62                  		bra.w	CStom_Restart
0000DB98                            ; ===========================================================================
0000DB98                            
0000DB98                            CStom_Type03:
0000DB98 3038 D008                  		move.w	(v_player+obX).w,d0
0000DB9C 9068 0008                  		sub.w	obX(a0),d0
0000DBA0 6400                       		bcc.s	loc_B98C
0000DBA2 4440                       		neg.w	d0
0000DBA4                            
0000DBA4                            loc_B98C:
0000DBA4 0C40 0090                  		cmpi.w	#$90,d0
0000DBA8 6400                       		bcc.s	loc_B996
0000DBAA 5228 0028                  		addq.b	#1,obSubtype(a0)
0000DBAE                            
0000DBAE                            loc_B996:
0000DBAE 6000 FF48                  		bra.w	CStom_Restart
0000DBAE 6000 FF48                  		bra.w	CStom_Restart
0000DBB2                            		include	"_incObj\45 Sideways Stomper.asm"
0000DBB2                            ; ---------------------------------------------------------------------------
0000DBB2                            ; Object 45 - spiked metal block from beta version (MZ)
0000DBB2                            ; ---------------------------------------------------------------------------
0000DBB2                            
0000DBB2                            SideStomp:
0000DBB2 7000                       		moveq	#0,d0
0000DBB4 1028 0024                  		move.b	obRoutine(a0),d0
0000DBB8 323B 0000                  		move.w	SStom_Index(pc,d0.w),d1
0000DBBC 4EFB 1000                  		jmp	SStom_Index(pc,d1.w)
0000DBC0                            ; ===========================================================================
0000DBC0 0000                       SStom_Index:	dc.w SStom_Main-SStom_Index
0000DBC2 0000                       		dc.w SStom_Solid-SStom_Index
0000DBC4 0000                       		dc.w loc_BA8E-SStom_Index
0000DBC6 0000                       		dc.w SStom_Display-SStom_Index
0000DBC8 0000                       		dc.w SStom_Pole-SStom_Index
0000DBCA                            
0000DBCA                            		;	routine		frame
0000DBCA                            		;		 xpos
0000DBCA 0204 00                    SStom_Var:	dc.b	2,  	 4,	0	; main block
0000DBCD 04E4 01                    		dc.b	4,	-$1C,	1	; spikes
0000DBD0 0834 03                    		dc.b	8,	 $34,	3	; pole
0000DBD3 0628 02                    		dc.b	6,	 $28,	2	; wall bracket
0000DBD6                            
0000DBD6                            ;word_B9BE:	; Note that this indicates three subtypes
0000DBD6 3800                       SStom_Len:	dc.w $3800	; short
0000DBD8 A000                       		dc.w $A000	; long
0000DBDA 5000                       		dc.w $5000	; medium
0000DBDC                            ; ===========================================================================
0000DBDC                            
0000DBDC                            SStom_Main:	; Routine 0
0000DBDC 7000                       		moveq	#0,d0
0000DBDE 1028 0028                  		move.b	obSubtype(a0),d0
0000DBE2 D040                       		add.w	d0,d0
0000DBE4 343B 00F0                  		move.w	SStom_Len(pc,d0.w),d2
0000DBE8 45F9 0000 DBCA             		lea	(SStom_Var).l,a2
0000DBEE 2248                       		movea.l	a0,a1
0000DBF0 7203                       		moveq	#3,d1
0000DBF2 6000                       		bra.s	@load
0000DBF4                            
0000DBF4                            	@loop:
0000DBF4 6100 0000                  		bsr.w	FindNextFreeObj
0000DBF8 6600                       		bne.s	@fail
0000DBFA                            
0000DBFA                            	@load:
0000DBFA 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000DBFE 12BC 0000                  		move.b	#id_SideStomp,0(a1)
0000DC02 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000DC08 101A                       		move.b	(a2)+,d0
0000DC0A 4880                       		ext.w	d0
0000DC0C D068 0008                  		add.w	obX(a0),d0
0000DC10 3340 0008                  		move.w	d0,obX(a1)
0000DC14 237C 0000 0000 0004        		move.l	#Map_SStom,obMap(a1)
0000DC1C 337C 0300 0002             		move.w	#$300,obGfx(a1)
0000DC22 137C 0004 0001             		move.b	#4,obRender(a1)
0000DC28 3369 0008 0030             		move.w	obX(a1),$30(a1)
0000DC2E 3368 0008 003A             		move.w	obX(a0),$3A(a1)
0000DC34 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000DC3A 137C 0020 0014             		move.b	#$20,obActWid(a1)
0000DC40 3342 0034                  		move.w	d2,$34(a1)
0000DC44 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000DC4A 0C12 0001                  		cmpi.b	#1,(a2)		; is subobject spikes?
0000DC4E 6600                       		bne.s	@notspikes	; if not, branch
0000DC50 137C 0091 0020             		move.b	#$91,obColType(a1) ; use harmful collision type
0000DC56                            
0000DC56                            	@notspikes:
0000DC56 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000DC5A 2348 003C                  		move.l	a0,$3C(a1)
0000DC5E 51C9 FF94                  		dbf	d1,@loop	; repeat 3 times
0000DC62                            
0000DC62 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000DC68                            
0000DC68                            	@fail:
0000DC68 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000DC6E                            
0000DC6E                            SStom_Solid:	; Routine 2
0000DC6E 3F28 0008                  		move.w	obX(a0),-(sp)
0000DC72 6100 0000                  		bsr.w	SStom_Move
0000DC76 323C 0017                  		move.w	#$17,d1
0000DC7A 343C 0020                  		move.w	#$20,d2
0000DC7E 363C 0020                  		move.w	#$20,d3
0000DC82 381F                       		move.w	(sp)+,d4
0000DC84 6100 0000                  		bsr.w	SolidObject
0000DC88 6100 0000                  		bsr.w	DisplaySprite
0000DC8C 6000 0000                  		bra.w	SStom_ChkDel
0000DC90                            ; ===========================================================================
0000DC90                            
0000DC90                            SStom_Pole:	; Routine 8
0000DC90 2268 003C                  		movea.l	$3C(a0),a1
0000DC94 1029 0032                  		move.b	$32(a1),d0
0000DC98 0600 0010                  		addi.b	#$10,d0
0000DC9C EA08                       		lsr.b	#5,d0
0000DC9E 5600                       		addq.b	#3,d0
0000DCA0 1140 001A                  		move.b	d0,obFrame(a0)
0000DCA4                            
0000DCA4                            loc_BA8E:	; Routine 4
0000DCA4 2268 003C                  		movea.l	$3C(a0),a1
0000DCA8 7000                       		moveq	#0,d0
0000DCAA 1029 0032                  		move.b	$32(a1),d0
0000DCAE 4440                       		neg.w	d0
0000DCB0 D068 0030                  		add.w	$30(a0),d0
0000DCB4 3140 0008                  		move.w	d0,obX(a0)
0000DCB8                            
0000DCB8                            SStom_Display:	; Routine 6
0000DCB8 6100 0000                  		bsr.w	DisplaySprite
0000DCBC                            
0000DCBC                            SStom_ChkDel:
0000DCDA 4E75                       		rts	
0000DCDC                            
0000DCDC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DCDC                            
0000DCDC                            
0000DCDC                            SStom_Move:
0000DCDC 7000                       		moveq	#0,d0
0000DCDE 1028 0028                  		move.b	obSubtype(a0),d0
0000DCE2 D040                       		add.w	d0,d0
0000DCE4 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000DCE8 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000DCEC                            ; End of function SStom_Move
0000DCEC                            
0000DCEC                            ; ===========================================================================
0000DCEC                            		; This indicates only two subtypes... that do the same thing
0000DCEC                            		; Compare to SStom_Len. This breaks subtype 02
0000DCEC 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000DCEE 0000                       		dc.w loc_BADA-off_BAD6
0000DCF0                            ; ===========================================================================
0000DCF0                            
0000DCF0                            loc_BADA:
0000DCF0 4A68 0036                  		tst.w	$36(a0)
0000DCF4 6700                       		beq.s	loc_BB08
0000DCF6 4A68 0038                  		tst.w	$38(a0)
0000DCFA 6700                       		beq.s	loc_BAEC
0000DCFC 5368 0038                  		subq.w	#1,$38(a0)
0000DD00 6000                       		bra.s	loc_BB3C
0000DD02                            ; ===========================================================================
0000DD02                            
0000DD02                            loc_BAEC:
0000DD02 0468 0080 0032             		subi.w	#$80,$32(a0)
0000DD08 6400                       		bcc.s	loc_BB3C
0000DD0A 317C 0000 0032             		move.w	#0,$32(a0)
0000DD10 317C 0000 0010             		move.w	#0,obVelX(a0)
0000DD16 317C 0000 0036             		move.w	#0,$36(a0)
0000DD1C 6000                       		bra.s	loc_BB3C
0000DD1E                            ; ===========================================================================
0000DD1E                            
0000DD1E                            loc_BB08:
0000DD1E 3228 0034                  		move.w	$34(a0),d1
0000DD22 B268 0032                  		cmp.w	$32(a0),d1
0000DD26 6700                       		beq.s	loc_BB3C
0000DD28 3028 0010                  		move.w	obVelX(a0),d0
0000DD2C 0668 0070 0010             		addi.w	#$70,obVelX(a0)
0000DD32 D168 0032                  		add.w	d0,$32(a0)
0000DD36 B268 0032                  		cmp.w	$32(a0),d1
0000DD3A 6200                       		bhi.s	loc_BB3C
0000DD3C 3141 0032                  		move.w	d1,$32(a0)
0000DD40 317C 0000 0010             		move.w	#0,obVelX(a0)
0000DD46 317C 0001 0036             		move.w	#1,$36(a0)
0000DD4C 317C 003C 0038             		move.w	#$3C,$38(a0)
0000DD52                            
0000DD52                            loc_BB3C:
0000DD52 7000                       		moveq	#0,d0
0000DD54 1028 0032                  		move.b	$32(a0),d0
0000DD58 4440                       		neg.w	d0
0000DD5A D068 0030                  		add.w	$30(a0),d0
0000DD5E 3140 0008                  		move.w	d0,obX(a0)
0000DD62 4E75                       		rts	
0000DD62 4E75                       		rts	
0000DD64                            Map_CStom:	include	"_maps\Chained Stompers.asm"
0000DD64                            ; ---------------------------------------------------------------------------
0000DD64                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000DD64                            ; ---------------------------------------------------------------------------
0000DD64                            Map_CStom_internal:
0000DD64 0000                       		dc.w @wideblock-Map_CStom_internal
0000DD66 0000                       		dc.w @spikes-Map_CStom_internal
0000DD68 0000                       		dc.w @ceiling-Map_CStom_internal
0000DD6A 0000                       		dc.w @chain1-Map_CStom_internal
0000DD6C 0000                       		dc.w @chain2-Map_CStom_internal
0000DD6E 0000                       		dc.w @chain3-Map_CStom_internal
0000DD70 0000                       		dc.w @chain4-Map_CStom_internal
0000DD72 0000                       		dc.w @chain5-Map_CStom_internal
0000DD74 0000                       		dc.w @chain5-Map_CStom_internal
0000DD76 0000                       		dc.w @mediumblock-Map_CStom_internal
0000DD78 0000                       		dc.w @smallblock-Map_CStom_internal
0000DD7A 05                         @wideblock:	dc.b 5
0000DD7B F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000DD80 F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000DD85 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000DD8A F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000DD8F F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000DD94 05                         @spikes:	dc.b 5
0000DD95 F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000DD9A F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000DD9F F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000DDA4 F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000DDA9 F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000DDAE 01                         @ceiling:	dc.b 1
0000DDAF DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000DDB4 02                         @chain1:	dc.b 2
0000DDB5 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DDBA 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DDBF 04                         @chain2:	dc.b 4
0000DDC0 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DDC5 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DDCA 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DDCF 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DDD4 06                         @chain3:	dc.b 6
0000DDD5 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000DDDA D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000DDDF E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DDE4 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DDE9 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DDEE 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DDF3 08                         @chain4:	dc.b 8
0000DDF4 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000DDF9 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000DDFE C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000DE03 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000DE08 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DE0D F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DE12 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DE17 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DE1C 0A                         @chain5:	dc.b $A
0000DE1D 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000DE22 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000DE27 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000DE2C B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000DE31 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000DE36 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000DE3B E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DE40 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DE45 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DE4A 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DE4F 05                         @mediumblock:	dc.b 5
0000DE50 F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000DE55 F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000DE5A F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000DE5F F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000DE64 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000DE69 01                         @smallblock:	dc.b 1
0000DE6A EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000DE70 00                         		even
0000DE70 00                         		even
0000DE70                            Map_SStom:	include	"_maps\Sideways Stomper.asm"
0000DE70                            ; ---------------------------------------------------------------------------
0000DE70                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000DE70                            ; ---------------------------------------------------------------------------
0000DE70                            Map_SStom_internal:
0000DE70 0000                       		dc.w @block-Map_SStom_internal
0000DE72 0000                       		dc.w @spikes-Map_SStom_internal
0000DE74 0000                       		dc.w @wallbracket-Map_SStom_internal
0000DE76 0000                       		dc.w @pole1-Map_SStom_internal
0000DE78 0000                       		dc.w @pole2-Map_SStom_internal
0000DE7A 0000                       		dc.w @pole3-Map_SStom_internal
0000DE7C 0000                       		dc.w @pole4-Map_SStom_internal
0000DE7E 0000                       		dc.w @pole5-Map_SStom_internal
0000DE80 0000                       		dc.w @pole5-Map_SStom_internal
0000DE82 03                         @block:		dc.b 3
0000DE83 E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4 ; main metal block
0000DE88 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000DE8D F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000DE92 03                         @spikes:	dc.b 3
0000DE93 E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0 ; three spikes
0000DE98 FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000DE9D 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000DEA2 01                         @wallbracket:	dc.b 1
0000DEA3 F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC ; thing holding it to the wall
0000DEA8 02                         @pole1:		dc.b 2
0000DEA9 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0 ; poles of various lengths
0000DEAE F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DEB3 04                         @pole2:		dc.b 4
0000DEB4 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DEB9 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DEBE F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DEC3 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DEC8 06                         @pole3:		dc.b 6
0000DEC9 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DECE F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DED3 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DED8 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DEDD F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000DEE2 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000DEE7 08                         @pole4:		dc.b 8
0000DEE8 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DEED F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DEF2 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DEF7 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DEFC F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000DF01 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000DF06 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000DF0B F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000DF10 08                         @pole5:		dc.b 8		; Incorrect: this should be $A
0000DF11 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DF16 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DF1B F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DF20 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DF25 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000DF2A F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000DF2F F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000DF34 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000DF39 F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000DF3E F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000DF43                            		; @pole6 should be here, but it isn't...
0000DF44 00                         		even
0000DF44 00                         		even
0000DF44                            
0000DF44                            		include	"_incObj\32 Button.asm"
0000DF44                            ; ---------------------------------------------------------------------------
0000DF44                            ; Object 32 - buttons (MZ, SYZ, LZ, SBZ)
0000DF44                            ; ---------------------------------------------------------------------------
0000DF44                            
0000DF44                            Button:
0000DF44 7000                       		moveq	#0,d0
0000DF46 1028 0024                  		move.b	obRoutine(a0),d0
0000DF4A 323B 0000                  		move.w	But_Index(pc,d0.w),d1
0000DF4E 4EFB 1000                  		jmp	But_Index(pc,d1.w)
0000DF52                            ; ===========================================================================
0000DF52 0000                       But_Index:	dc.w But_Main-But_Index
0000DF54 0000                       		dc.w But_Pressed-But_Index
0000DF56                            ; ===========================================================================
0000DF56                            
0000DF56                            But_Main:	; Routine 0
0000DF56 5428 0024                  		addq.b	#2,obRoutine(a0)
0000DF5A 217C 0000 0000 0004        		move.l	#Map_But,obMap(a0)
0000DF62 317C 4513 0002             		move.w	#$4513,obGfx(a0) ; MZ specific code
0000DF68 0C38 0002 FE10             		cmpi.b	#id_MZ,(v_zone).w ; is level Marble Zone?
0000DF6E 6700                       		beq.s	But_IsMZ	; if yes, branch
0000DF70                            
0000DF70 317C 0513 0002             		move.w	#$513,obGfx(a0)	; SYZ, LZ and SBZ specific code
0000DF76                            
0000DF76                            	But_IsMZ:
0000DF76 117C 0004 0001             		move.b	#4,obRender(a0)
0000DF7C 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000DF82 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000DF88 5668 000C                  		addq.w	#3,obY(a0)
0000DF8C                            
0000DF8C                            But_Pressed:	; Routine 2
0000DF8C 4A28 0001                  		tst.b	obRender(a0)
0000DF90 6A00                       		bpl.s	But_Display
0000DF92 323C 001B                  		move.w	#$1B,d1
0000DF96 343C 0005                  		move.w	#5,d2
0000DF9A 363C 0005                  		move.w	#5,d3
0000DF9E 3828 0008                  		move.w	obX(a0),d4
0000DFA2 6100 0000                  		bsr.w	SolidObject
0000DFA6 08A8 0000 001A             		bclr	#0,obFrame(a0)	; use "unpressed" frame
0000DFAC 1028 0028                  		move.b	obSubtype(a0),d0
0000DFB0 0240 000F                  		andi.w	#$F,d0
0000DFB4 47F8 F7E0                  		lea	(f_switch).w,a3
0000DFB8 47F3 0000                  		lea	(a3,d0.w),a3
0000DFBC 7600                       		moveq	#0,d3
0000DFBE 0828 0006 0028             		btst	#6,obSubtype(a0)
0000DFC4 6700                       		beq.s	loc_BDB2
0000DFC6 7607                       		moveq	#7,d3
0000DFC8                            
0000DFC8                            loc_BDB2:
0000DFC8 4A28 0028                  		tst.b	obSubtype(a0)
0000DFCC 6A00                       		bpl.s	loc_BDBE
0000DFCE 6100 0000                  		bsr.w	But_MZBlock
0000DFD2 6600                       		bne.s	loc_BDC8
0000DFD4                            
0000DFD4                            loc_BDBE:
0000DFD4 4A28 0025                  		tst.b	ob2ndRout(a0)
0000DFD8 6600                       		bne.s	loc_BDC8
0000DFDA 0793                       		bclr	d3,(a3)
0000DFDC 6000                       		bra.s	loc_BDDE
0000DFDE                            ; ===========================================================================
0000DFDE                            
0000DFDE                            loc_BDC8:
0000DFDE 4A13                       		tst.b	(a3)
0000DFE0 6600                       		bne.s	loc_BDD6
0000DFEC                            
0000DFEC                            loc_BDD6:
0000DFEC 07D3                       		bset	d3,(a3)
0000DFEE 08E8 0000 001A             		bset	#0,obFrame(a0)	; use "pressed"	frame
0000DFF4                            
0000DFF4                            loc_BDDE:
0000DFF4 0828 0005 0028             		btst	#5,obSubtype(a0)
0000DFFA 6700                       		beq.s	But_Display
0000DFFC 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000E000 6A00                       		bpl.s	But_Display
0000E002 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000E008 0868 0001 001A             		bchg	#1,obFrame(a0)
0000E00E                            
0000E00E                            But_Display:
0000E00E 6100 0000                  		bsr.w	DisplaySprite
0000E030 4E75                       		rts	
0000E032                            ; ===========================================================================
0000E032                            
0000E032                            But_Delete:
0000E032 6100 0000                  		bsr.w	DeleteObject
0000E036 4E75                       		rts	
0000E038                            
0000E038                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E038                            
0000E038                            
0000E038                            But_MZBlock:
0000E038 3F03                       		move.w	d3,-(sp)
0000E03A 3428 0008                  		move.w	obX(a0),d2
0000E03E 3628 000C                  		move.w	obY(a0),d3
0000E042 0442 0010                  		subi.w	#$10,d2
0000E046 5143                       		subq.w	#8,d3
0000E048 383C 0020                  		move.w	#$20,d4
0000E04C 3A3C 0010                  		move.w	#$10,d5
0000E050 43F8 D800                  		lea	(v_lvlobjspace).w,a1 ; begin checking object RAM
0000E054 3C3C 005F                  		move.w	#$5F,d6
0000E058                            
0000E058                            But_MZLoop:
0000E058 4A29 0001                  		tst.b	obRender(a1)
0000E05C 6A00                       		bpl.s	loc_BE4E
0000E05E 0C11 0000                  		cmpi.b	#id_PushBlock,(a1) ; is the object a green MZ block?
0000E062 6700                       		beq.s	loc_BE5E	; if yes, branch
0000E064                            
0000E064                            loc_BE4E:
0000E064 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000E068 51CE FFEE                  		dbf	d6,But_MZLoop	; repeat $5F times
0000E06C                            
0000E06C 361F                       		move.w	(sp)+,d3
0000E06E 7000                       		moveq	#0,d0
0000E070                            
0000E070                            locret_BE5A:
0000E070 4E75                       		rts	
0000E072                            ; ===========================================================================
0000E072 1010                       But_MZData:	dc.b $10, $10
0000E074                            ; ===========================================================================
0000E074                            
0000E074                            loc_BE5E:
0000E074 7001                       		moveq	#1,d0
0000E076 0240 003F                  		andi.w	#$3F,d0
0000E07A D040                       		add.w	d0,d0
0000E07C 45FB 00F2                  		lea	But_MZData-2(pc,d0.w),a2
0000E080 121A                       		move.b	(a2)+,d1
0000E082 4881                       		ext.w	d1
0000E084 3029 0008                  		move.w	obX(a1),d0
0000E088 9041                       		sub.w	d1,d0
0000E08A 9042                       		sub.w	d2,d0
0000E08C 6400                       		bcc.s	loc_BE80
0000E08E D241                       		add.w	d1,d1
0000E090 D041                       		add.w	d1,d0
0000E092 6500                       		bcs.s	loc_BE84
0000E094 60CE                       		bra.s	loc_BE4E
0000E096                            ; ===========================================================================
0000E096                            
0000E096                            loc_BE80:
0000E096 B044                       		cmp.w	d4,d0
0000E098 62CA                       		bhi.s	loc_BE4E
0000E09A                            
0000E09A                            loc_BE84:
0000E09A 121A                       		move.b	(a2)+,d1
0000E09C 4881                       		ext.w	d1
0000E09E 3029 000C                  		move.w	obY(a1),d0
0000E0A2 9041                       		sub.w	d1,d0
0000E0A4 9043                       		sub.w	d3,d0
0000E0A6 6400                       		bcc.s	loc_BE9A
0000E0A8 D241                       		add.w	d1,d1
0000E0AA D041                       		add.w	d1,d0
0000E0AC 6500                       		bcs.s	loc_BE9E
0000E0AE 60B4                       		bra.s	loc_BE4E
0000E0B0                            ; ===========================================================================
0000E0B0                            
0000E0B0                            loc_BE9A:
0000E0B0 B045                       		cmp.w	d5,d0
0000E0B2 62B0                       		bhi.s	loc_BE4E
0000E0B4                            
0000E0B4                            loc_BE9E:
0000E0B4 361F                       		move.w	(sp)+,d3
0000E0B6 7001                       		moveq	#1,d0
0000E0B8 4E75                       		rts	
0000E0BA                            ; End of function But_MZBlock
0000E0BA                            ; End of function But_MZBlock
0000E0BA                            Map_But:	include	"_maps\Button.asm"
0000E0BA                            ; ---------------------------------------------------------------------------
0000E0BA                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000E0BA                            ; ---------------------------------------------------------------------------
0000E0BA                            Map_But_internal:
0000E0BA 0000                       		dc.w byte_BEAC-Map_But_internal
0000E0BC 0000                       		dc.w byte_BEB7-Map_But_internal
0000E0BE 0000                       		dc.w byte_BEC2-Map_But_internal
0000E0C0 0000                       		dc.w byte_BEB7-Map_But_internal
0000E0C2 02                         byte_BEAC:	dc.b 2
0000E0C3 F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000E0C8 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000E0CD 02                         byte_BEB7:	dc.b 2
0000E0CE F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000E0D3 F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000E0D8 02                         byte_BEC2:	dc.b 2
0000E0D9 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000E0DE F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000E0E3 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000E0E8                            		even
0000E0E8                            		even
0000E0E8                            
0000E0E8                            		include	"_incObj\33 Pushable Blocks.asm"
0000E0E8                            ; ---------------------------------------------------------------------------
0000E0E8                            ; Object 33 - pushable blocks (MZ, LZ)
0000E0E8                            ; ---------------------------------------------------------------------------
0000E0E8                            
0000E0E8                            PushBlock:
0000E0E8 7000                       		moveq	#0,d0
0000E0EA 1028 0024                  		move.b	obRoutine(a0),d0
0000E0EE 323B 0000                  		move.w	PushB_Index(pc,d0.w),d1
0000E0F2 4EFB 1000                  		jmp	PushB_Index(pc,d1.w)
0000E0F6                            ; ===========================================================================
0000E0F6 0000                       PushB_Index:	dc.w PushB_Main-PushB_Index
0000E0F8 0000                       		dc.w loc_BF6E-PushB_Index
0000E0FA 0000                       		dc.w loc_C02C-PushB_Index
0000E0FC                            
0000E0FC 1000                       PushB_Var:	dc.b $10, 0	; object width,	frame number
0000E0FE 4001                       		dc.b $40, 1
0000E100                            ; ===========================================================================
0000E100                            
0000E100                            PushB_Main:	; Routine 0
0000E100 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E104 117C 000F 0016             		move.b	#$F,obHeight(a0)
0000E10A 117C 000F 0017             		move.b	#$F,obWidth(a0)
0000E110 217C 0000 0000 0004        		move.l	#Map_Push,obMap(a0)
0000E118 317C 42B8 0002             		move.w	#$42B8,obGfx(a0) ; MZ specific code
0000E11E 0C38 0001 FE10             		cmpi.b	#1,(v_zone).w
0000E124 6600                       		bne.s	@notLZ
0000E126 317C 43DE 0002             		move.w	#$43DE,obGfx(a0) ; LZ specific code
0000E12C                            
0000E12C                            	@notLZ:
0000E12C 117C 0004 0001             		move.b	#4,obRender(a0)
0000E132 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000E138 3168 0008 0034             		move.w	obX(a0),$34(a0)
0000E13E 3168 000C 0036             		move.w	obY(a0),$36(a0)
0000E144 7000                       		moveq	#0,d0
0000E146 1028 0028                  		move.b	obSubtype(a0),d0
0000E14A D040                       		add.w	d0,d0
0000E14C 0240 000E                  		andi.w	#$E,d0
0000E150 45FB 00AA                  		lea	PushB_Var(pc,d0.w),a2
0000E154 115A 0014                  		move.b	(a2)+,obActWid(a0)
0000E158 115A 001A                  		move.b	(a2)+,obFrame(a0)
0000E15C 4A28 0028                  		tst.b	obSubtype(a0)
0000E160 6700                       		beq.s	@chkgone
0000E162 317C C2B8 0002             		move.w	#$C2B8,obGfx(a0)
0000E168                            
0000E168                            	@chkgone:
0000E168 45F8 FC00                  		lea	(v_objstate).w,a2
0000E16C 7000                       		moveq	#0,d0
0000E16E 1028 0023                  		move.b	obRespawnNo(a0),d0
0000E172 6700                       		beq.s	loc_BF6E
0000E174 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000E17A 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000E180 6600 0000                  		bne.w	DeleteObject
0000E184                            
0000E184                            loc_BF6E:	; Routine 2
0000E184 4A28 0032                  		tst.b	$32(a0)
0000E188 6600 0000                  		bne.w	loc_C046
0000E18C 7200                       		moveq	#0,d1
0000E18E 1228 0014                  		move.b	obActWid(a0),d1
0000E192 0641 000B                  		addi.w	#$B,d1
0000E196 343C 0010                  		move.w	#$10,d2
0000E19A 363C 0011                  		move.w	#$11,d3
0000E19E 3828 0008                  		move.w	obX(a0),d4
0000E1A2 6100 0000                  		bsr.w	loc_C186
0000E1A6 0C78 0200 FE10             		cmpi.w	#(id_MZ<<8)+0,(v_zone).w ; is the level MZ act 1?
0000E1AC 6600                       		bne.s	loc_BFC6	; if not, branch
0000E1AE 08A8 0007 0028             		bclr	#7,obSubtype(a0)
0000E1B4 3028 0008                  		move.w	obX(a0),d0
0000E1B8 0C40 0A20                  		cmpi.w	#$A20,d0
0000E1BC 6500                       		bcs.s	loc_BFC6
0000E1BE 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000E1C2 6400                       		bcc.s	loc_BFC6
0000E1C4 3038 F7A4                  		move.w	(v_obj31ypos).w,d0
0000E1C8 0440 001C                  		subi.w	#$1C,d0
0000E1CC 3140 000C                  		move.w	d0,obY(a0)
0000E1D0 08F8 0007 F7A4             		bset	#7,(v_obj31ypos).w
0000E1D6 08E8 0007 0028             		bset	#7,obSubtype(a0)
0000E1DC                            
0000E1DC                            	loc_BFC6:
0000E1F8 6000 0000                  		bra.w	DisplaySprite
0000E1FC                            ; ===========================================================================
0000E1FC                            
0000E1FC                            loc_ppppp:
0000E218 3168 0034 0008             		move.w	$34(a0),obX(a0)
0000E21E 3168 0036 000C             		move.w	$36(a0),obY(a0)
0000E224 117C 0004 0024             		move.b	#4,obRoutine(a0)
0000E22A 6000                       		bra.s	loc_C02C
0000E22C                            ; ===========================================================================
0000E22C                            
0000E22C                            loc_C016:
0000E22C 45F8 FC00                  		lea	(v_objstate).w,a2
0000E230 7000                       		moveq	#0,d0
0000E232 1028 0023                  		move.b	obRespawnNo(a0),d0
0000E236 6700                       		beq.s	loc_C028
0000E238 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000E23E                            
0000E23E                            loc_C028:
0000E23E 6000 0000                  		bra.w	DeleteObject
0000E242                            ; ===========================================================================
0000E242                            
0000E242                            loc_C02C:	; Routine 4
0000E242 6100 0000                  		bsr.w	ChkPartiallyVisible
0000E246 6700                       		beq.s	locret_C044
0000E248 117C 0002 0024             		move.b	#2,obRoutine(a0)
0000E24E 4228 0032                  		clr.b	$32(a0)
0000E252 4268 0010                  		clr.w	obVelX(a0)
0000E256 4268 0012                  		clr.w	obVelY(a0)
0000E25A                            
0000E25A                            locret_C044:
0000E25A 4E75                       		rts	
0000E25C                            ; ===========================================================================
0000E25C                            
0000E25C                            loc_C046:
0000E25C 3F28 0008                  		move.w	obX(a0),-(sp)
0000E260 0C28 0004 0025             		cmpi.b	#4,ob2ndRout(a0)
0000E266 6400                       		bcc.s	loc_C056
0000E268 6100 0000                  		bsr.w	SpeedToPos
0000E26C                            
0000E26C                            loc_C056:
0000E26C 0828 0001 0022             		btst	#1,obStatus(a0)
0000E272 6700                       		beq.s	loc_C0A0
0000E274 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000E27A 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000E280 4A41                       		tst.w	d1
0000E282 6A00 0000                  		bpl.w	loc_C09E
0000E286 D368 000C                  		add.w	d1,obY(a0)
0000E28A 4268 0012                  		clr.w	obVelY(a0)
0000E28E 08A8 0001 0022             		bclr	#1,obStatus(a0)
0000E294 3011                       		move.w	(a1),d0
0000E296 0240 03FF                  		andi.w	#$3FF,d0
0000E29A 0C40 016A                  		cmpi.w	#$16A,d0
0000E29E 6500                       		bcs.s	loc_C09E
0000E2A0 3028 0030                  		move.w	$30(a0),d0
0000E2A4 E640                       		asr.w	#3,d0
0000E2A6 3140 0010                  		move.w	d0,obVelX(a0)
0000E2AA 117C 0001 0032             		move.b	#1,$32(a0)
0000E2B0 4268 000E                  		clr.w	$E(a0)
0000E2B4                            
0000E2B4                            loc_C09E:
0000E2B4 6000                       		bra.s	loc_C0E6
0000E2B6                            ; ===========================================================================
0000E2B6                            
0000E2B6                            loc_C0A0:
0000E2B6 4A68 0010                  		tst.w	obVelX(a0)
0000E2BA 6700 0000                  		beq.w	loc_C0D6
0000E2BE 6B00                       		bmi.s	loc_C0BC
0000E2C0 7600                       		moveq	#0,d3
0000E2C2 1628 0014                  		move.b	obActWid(a0),d3
0000E2C6 4EB9 0000 0000             		jsr	(ObjHitWallRight).l
0000E2CC 4A41                       		tst.w	d1		; has block touched a wall?
0000E2CE 6B00                       		bmi.s	PushB_StopPush	; if yes, branch
0000E2D0 6000                       		bra.s	loc_C0E6
0000E2D2                            ; ===========================================================================
0000E2D2                            
0000E2D2                            loc_C0BC:
0000E2D2 7600                       		moveq	#0,d3
0000E2D4 1628 0014                  		move.b	obActWid(a0),d3
0000E2D8 4643                       		not.w	d3
0000E2DA 4EB9 0000 0000             		jsr	(ObjHitWallLeft).l
0000E2E0 4A41                       		tst.w	d1		; has block touched a wall?
0000E2E2 6B00                       		bmi.s	PushB_StopPush	; if yes, branch
0000E2E4 6000                       		bra.s	loc_C0E6
0000E2E6                            ; ===========================================================================
0000E2E6                            
0000E2E6                            PushB_StopPush:
0000E2E6 4268 0010                  		clr.w	obVelX(a0)		; stop block moving
0000E2EA 6000                       		bra.s	loc_C0E6
0000E2EC                            ; ===========================================================================
0000E2EC                            
0000E2EC                            loc_C0D6:
0000E2EC 06A8 0000 2001 000C        		addi.l	#$2001,obY(a0)
0000E2F4 0C28 00A0 000F             		cmpi.b	#$A0,obY+3(a0)
0000E2FA 6400                       		bcc.s	loc_C104
0000E2FC                            
0000E2FC                            loc_C0E6:
0000E2FC 7200                       		moveq	#0,d1
0000E2FE 1228 0014                  		move.b	obActWid(a0),d1
0000E302 0641 000B                  		addi.w	#$B,d1
0000E306 343C 0010                  		move.w	#$10,d2
0000E30A 363C 0011                  		move.w	#$11,d3
0000E30E 381F                       		move.w	(sp)+,d4
0000E310 6100 0000                  		bsr.w	loc_C186
0000E314 6100                       		bsr.s	PushB_ChkLava
0000E316 6000 FEC4                  		bra.w	loc_BFC6
0000E31A                            ; ===========================================================================
0000E31A                            
0000E31A                            loc_C104:
0000E31A 381F                       		move.w	(sp)+,d4
0000E31C 43F8 D000                  		lea	(v_player).w,a1
0000E320 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000E326 08A8 0003 0022             		bclr	#3,obStatus(a0)
0000E32C 6000 FECE                  		bra.w	loc_ppppp
0000E330                            ; ===========================================================================
0000E330                            
0000E330                            PushB_ChkLava:
0000E330 0C78 0201 FE10             		cmpi.w	#(id_MZ<<8)+1,(v_zone).w ; is the level MZ act 2?
0000E336 6600                       		bne.s	PushB_ChkLava2	; if not, branch
0000E338 343C FFE0                  		move.w	#-$20,d2
0000E33C 0C68 0DD0 0008             		cmpi.w	#$DD0,obX(a0)
0000E342 6700                       		beq.s	PushB_LoadLava
0000E344 0C68 0CC0 0008             		cmpi.w	#$CC0,obX(a0)
0000E34A 6700                       		beq.s	PushB_LoadLava
0000E34C 0C68 0BA0 0008             		cmpi.w	#$BA0,obX(a0)
0000E352 6700                       		beq.s	PushB_LoadLava
0000E354 4E75                       		rts	
0000E356                            ; ===========================================================================
0000E356                            
0000E356                            PushB_ChkLava2:
0000E356 0C78 0202 FE10             		cmpi.w	#(id_MZ<<8)+2,(v_zone).w ; is the level MZ act 3?
0000E35C 6600                       		bne.s	PushB_NoLava	; if not, branch
0000E35E 343C 0020                  		move.w	#$20,d2
0000E362 0C68 0560 0008             		cmpi.w	#$560,obX(a0)
0000E368 6700                       		beq.s	PushB_LoadLava
0000E36A 0C68 05C0 0008             		cmpi.w	#$5C0,obX(a0)
0000E370 6700                       		beq.s	PushB_LoadLava
0000E372                            
0000E372                            PushB_NoLava:
0000E372 4E75                       		rts	
0000E374                            ; ===========================================================================
0000E374                            
0000E374                            PushB_LoadLava:
0000E374 6100 0000                  		bsr.w	FindFreeObj
0000E378 6600                       		bne.s	locret_C184
0000E37A 12BC 0000                  		move.b	#id_GeyserMaker,0(a1) ; load lava geyser object
0000E37E 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000E384 D569 0008                  		add.w	d2,obX(a1)
0000E388 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000E38E 0669 0010 000C             		addi.w	#$10,obY(a1)
0000E394 2348 003C                  		move.l	a0,$3C(a1)
0000E398                            
0000E398                            locret_C184:
0000E398 4E75                       		rts	
0000E39A                            ; ===========================================================================
0000E39A                            
0000E39A                            loc_C186:
0000E39A 1028 0025                  		move.b	ob2ndRout(a0),d0
0000E39E 6700 0000                  		beq.w	loc_C218
0000E3A2 5500                       		subq.b	#2,d0
0000E3A4 6600                       		bne.s	loc_C1AA
0000E3A6 6100 AE26                  		bsr.w	ExitPlatform
0000E3AA 0829 0003 0022             		btst	#3,obStatus(a1)
0000E3B0 6600                       		bne.s	loc_C1A4
0000E3B2 4228 0025                  		clr.b	ob2ndRout(a0)
0000E3B6 4E75                       		rts	
0000E3B8                            ; ===========================================================================
0000E3B8                            
0000E3B8                            loc_C1A4:
0000E3B8 3404                       		move.w	d4,d2
0000E3BA 6000 B370                  		bra.w	MvSonicOnPtfm
0000E3BE                            ; ===========================================================================
0000E3BE                            
0000E3BE                            loc_C1AA:
0000E3BE 5500                       		subq.b	#2,d0
0000E3C0 6600                       		bne.s	loc_C1F2
0000E3C2 6100 0000                  		bsr.w	SpeedToPos
0000E3C6 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000E3CC 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000E3D2 4A41                       		tst.w	d1
0000E3D4 6A00 0000                  		bpl.w	locret_C1F0
0000E3D8 D368 000C                  		add.w	d1,obY(a0)
0000E3DC 4268 0012                  		clr.w	obVelY(a0)
0000E3E0 4228 0025                  		clr.b	ob2ndRout(a0)
0000E3E4 3011                       		move.w	(a1),d0
0000E3E6 0240 03FF                  		andi.w	#$3FF,d0
0000E3EA 0C40 016A                  		cmpi.w	#$16A,d0
0000E3EE 6500                       		bcs.s	locret_C1F0
0000E3F0 3028 0030                  		move.w	$30(a0),d0
0000E3F4 E640                       		asr.w	#3,d0
0000E3F6 3140 0010                  		move.w	d0,obVelX(a0)
0000E3FA 117C 0001 0032             		move.b	#1,$32(a0)
0000E400 4268 000E                  		clr.w	obY+2(a0)
0000E404                            
0000E404                            locret_C1F0:
0000E404 4E75                       		rts	
0000E406                            ; ===========================================================================
0000E406                            
0000E406                            loc_C1F2:
0000E406 6100 0000                  		bsr.w	SpeedToPos
0000E40A 3028 0008                  		move.w	obX(a0),d0
0000E40E 0240 000C                  		andi.w	#$C,d0
0000E412 6600 0000                  		bne.w	locret_C2E4
0000E416 0268 FFF0 0008             		andi.w	#-$10,obX(a0)
0000E41C 3168 0010 0030             		move.w	obVelX(a0),$30(a0)
0000E422 4268 0010                  		clr.w	obVelX(a0)
0000E426 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000E42A 4E75                       		rts	
0000E42C                            ; ===========================================================================
0000E42C                            
0000E42C                            loc_C218:
0000E42C 6100 0000                  		bsr.w	Solid_ChkEnter
0000E430 4A44                       		tst.w	d4
0000E432 6700 0000                  		beq.w	locret_C2E4
0000E436 6B00 0000                  		bmi.w	locret_C2E4
0000E43A 4A28 0032                  		tst.b	$32(a0)
0000E43E 6700                       		beq.s	loc_C230
0000E440 6000 0000                  		bra.w	locret_C2E4
0000E444                            ; ===========================================================================
0000E444                            
0000E444                            loc_C230:
0000E444 4A40                       		tst.w	d0
0000E446 6700 0000                  		beq.w	locret_C2E4
0000E44A 6B00                       		bmi.s	loc_C268
0000E44C 0829 0000 0022             		btst	#0,obStatus(a1)
0000E452 6600 0000                  		bne.w	locret_C2E4
0000E456 3F00                       		move.w	d0,-(sp)
0000E458 7600                       		moveq	#0,d3
0000E45A 1628 0014                  		move.b	obActWid(a0),d3
0000E45E 4EB9 0000 0000             		jsr	(ObjHitWallRight).l
0000E464 301F                       		move.w	(sp)+,d0
0000E466 4A41                       		tst.w	d1
0000E468 6B00 0000                  		bmi.w	locret_C2E4
0000E46C 06A8 0001 0000 0008        		addi.l	#$10000,obX(a0)
0000E474 7001                       		moveq	#1,d0
0000E476 323C 0040                  		move.w	#$40,d1
0000E47A 6000                       		bra.s	loc_C294
0000E47C                            ; ===========================================================================
0000E47C                            
0000E47C                            loc_C268:
0000E47C 0829 0000 0022             		btst	#0,obStatus(a1)
0000E482 6700                       		beq.s	locret_C2E4
0000E484 3F00                       		move.w	d0,-(sp)
0000E486 7600                       		moveq	#0,d3
0000E488 1628 0014                  		move.b	obActWid(a0),d3
0000E48C 4643                       		not.w	d3
0000E48E 4EB9 0000 0000             		jsr	(ObjHitWallLeft).l
0000E494 301F                       		move.w	(sp)+,d0
0000E496 4A41                       		tst.w	d1
0000E498 6B00                       		bmi.s	locret_C2E4
0000E49A 04A8 0001 0000 0008        		subi.l	#$10000,obX(a0)
0000E4A2 70FF                       		moveq	#-1,d0
0000E4A4 323C FFC0                  		move.w	#-$40,d1
0000E4A8                            
0000E4A8                            loc_C294:
0000E4A8 43F8 D000                  		lea	(v_player).w,a1
0000E4AC D169 0008                  		add.w	d0,obX(a1)
0000E4B0 3341 0020                  		move.w	d1,obInertia(a1)
0000E4B4 337C 0000 0010             		move.w	#0,obVelX(a1)
0000E4BA 3F00                       		move.w	d0,-(sp)
0000E4C6 301F                       		move.w	(sp)+,d0
0000E4C8 4A28 0028                  		tst.b	obSubtype(a0)
0000E4CC 6B00                       		bmi.s	locret_C2E4
0000E4CE 3F00                       		move.w	d0,-(sp)
0000E4D0 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000E4D6 301F                       		move.w	(sp)+,d0
0000E4D8 0C41 0004                  		cmpi.w	#4,d1
0000E4DC 6F00                       		ble.s	loc_C2E0
0000E4DE 317C 0400 0010             		move.w	#$400,obVelX(a0)
0000E4E4 4A40                       		tst.w	d0
0000E4E6 6A00                       		bpl.s	loc_C2D8
0000E4E8 4468 0010                  		neg.w	obVelX(a0)
0000E4EC                            
0000E4EC                            loc_C2D8:
0000E4EC 117C 0006 0025             		move.b	#6,ob2ndRout(a0)
0000E4F2 6000                       		bra.s	locret_C2E4
0000E4F4                            ; ===========================================================================
0000E4F4                            
0000E4F4                            loc_C2E0:
0000E4F4 D368 000C                  		add.w	d1,obY(a0)
0000E4F8                            
0000E4F8                            locret_C2E4:
0000E4F8 4E75                       		rts	
0000E4F8 4E75                       		rts	
0000E4FA                            Map_Push:	include	"_maps\Pushable Blocks.asm"
0000E4FA                            ; ---------------------------------------------------------------------------
0000E4FA                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000E4FA                            ; ---------------------------------------------------------------------------
0000E4FA                            Map_Push_internal:
0000E4FA 0000                       		dc.w @single-Map_Push_internal
0000E4FC 0000                       		dc.w @four-Map_Push_internal
0000E4FE 01                         @single:	dc.b 1
0000E4FF F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000E504 04                         @four:		dc.b 4
0000E505 F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000E50A F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000E50F F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000E514 F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000E51A 00                         		even
0000E51A 00                         		even
0000E51A                            
0000E51A                            		include	"_incObj\34 Title Cards.asm"
0000E51A                            ; ---------------------------------------------------------------------------
0000E51A                            ; Object 34 - zone title cards
0000E51A                            ; ---------------------------------------------------------------------------
0000E51A                            
0000E51A                            TitleCard:
0000E51A 7000                       		moveq	#0,d0
0000E51C 1028 0024                  		move.b	obRoutine(a0),d0
0000E520 323B 0000                  		move.w	Card_Index(pc,d0.w),d1
0000E524 4EFB 1000                  		jmp	Card_Index(pc,d1.w)
0000E528                            ; ===========================================================================
0000E528 0000                       Card_Index:	dc.w Card_CheckSBZ3-Card_Index
0000E52A 0000                       		dc.w Card_ChkPos-Card_Index
0000E52C 0000                       		dc.w Card_Wait-Card_Index
0000E52E 0000                       		dc.w Card_Wait-Card_Index
0000E530                            
0000E530 =00000030                  card_mainX:	equ $30		; position for card to display on
0000E530 =00000032                  card_finalX:	equ $32		; position for card to finish on
0000E530                            ; ===========================================================================
0000E530                            
0000E530                            Card_CheckSBZ3:	; Routine 0
0000E530 2248                       		movea.l	a0,a1
0000E532 7000                       		moveq	#0,d0
0000E534 1038 FE10                  		move.b	(v_zone).w,d0
0000E538 0C78 0103 FE10             		cmpi.w	#(id_LZ<<8)+3,(v_zone).w ; check if level is SBZ 3
0000E53E 6600                       		bne.s	Card_CheckFZ
0000E540 7001                       		moveq	#1,d0		; load title card number 6 (FZ)
0000E542                            
0000E542                            	Card_CheckFZ:
0000E542 3400                       		move.w	d0,d2
0000E544 0C78 0502 FE10             		cmpi.w	#(id_SBZ<<8)+2,(v_zone).w ; check if level is FZ
0000E54A 6600                       		bne.s	Card_LoadConfig
0000E54C 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000E54E 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000E550                            
0000E550                            	Card_LoadConfig:
0000E550 47F9 0000 0000             		lea	(Card_ConData).l,a3
0000E556 E948                       		lsl.w	#4,d0
0000E558 D6C0                       		adda.w	d0,a3
0000E55A 45F9 0000 0000             		lea	(Card_ItemData).l,a2
0000E560 7203                       		moveq	#3,d1
0000E562                            
0000E562                            Card_Loop:
0000E562 12BC 0000                  		move.b	#id_TitleCard,0(a1)
0000E566 3353 0008                  		move.w	(a3),obX(a1)	; load start x-position
0000E56A 335B 0032                  		move.w	(a3)+,card_finalX(a1) ; load finish x-position (same as start)
0000E56E 335B 0030                  		move.w	(a3)+,card_mainX(a1) ; load main x-position
0000E572 335A 000A                  		move.w	(a2)+,obScreenY(a1)
0000E576 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000E57A 101A                       		move.b	(a2)+,d0
0000E57C 6600                       		bne.s	Card_ActNumber
0000E57E 1002                       		move.b	d2,d0
0000E580                            
0000E580                            	Card_ActNumber:
0000E580 0C00 0007                  		cmpi.b	#7,d0
0000E584 6600                       		bne.s	Card_MakeSprite
0000E586 D038 FE11                  		add.b	(v_act).w,d0
0000E58A 0C38 0003 FE11             		cmpi.b	#3,(v_act).w
0000E590 6600                       		bne.s	Card_MakeSprite
0000E592 5300                       		subq.b	#1,d0
0000E594                            
0000E594                            	Card_MakeSprite:
0000E594 1340 001A                  		move.b	d0,obFrame(a1)	; display frame	number d0
0000E598 237C 0000 0000 0004        		move.l	#Map_Card,obMap(a1)
0000E5A0 337C 8580 0002             		move.w	#$8580,obGfx(a1)
0000E5A6 137C 0078 0014             		move.b	#$78,obActWid(a1)
0000E5AC 137C 0000 0001             		move.b	#0,obRender(a1)
0000E5B2 337C 0000 0018             		move.w	#0,obPriority(a1)
0000E5B8 337C 003C 001E             		move.w	#60,obTimeFrame(a1) ; set time delay to 1 second
0000E5BE 43E9 0040                  		lea	$40(a1),a1	; next object
0000E5C2 51C9 FF9E                  		dbf	d1,Card_Loop	; repeat sequence another 3 times
0000E5C6                            
0000E5C6                            Card_ChkPos:	; Routine 2
0000E5C6 7210                       		moveq	#$10,d1		; set horizontal speed
0000E5C8 3028 0030                  		move.w	card_mainX(a0),d0
0000E5CC B068 0008                  		cmp.w	obX(a0),d0	; has item reached the target position?
0000E5D0 6700                       		beq.s	Card_NoMove	; if yes, branch
0000E5D2 6C00                       		bge.s	Card_Move
0000E5D4 4441                       		neg.w	d1
0000E5D6                            
0000E5D6                            Card_Move:
0000E5D6 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E5DA                            
0000E5DA                            Card_NoMove:
0000E5DA 3028 0008                  		move.w	obX(a0),d0
0000E5DE 6B00                       		bmi.s	locret_C3D8
0000E5E0 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E5E4 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000E5E6 6000 0000                  		bra.w	DisplaySprite
0000E5EA                            ; ===========================================================================
0000E5EA                            
0000E5EA                            locret_C3D8:
0000E5EA 4E75                       		rts	
0000E5EC                            ; ===========================================================================
0000E5EC                            
0000E5EC                            Card_Wait:	; Routine 4/6
0000E5EC 4A68 001E                  		tst.w	obTimeFrame(a0)	; is time remaining zero?
0000E5F0 6700                       		beq.s	Card_ChkPos2	; if yes, branch
0000E5F2 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time
0000E5F6 6000 0000                  		bra.w	DisplaySprite
0000E5FA                            ; ===========================================================================
0000E5FA                            
0000E5FA                            Card_ChkPos2:
0000E5FA 4A28 0001                  		tst.b	obRender(a0)
0000E5FE 6A00                       		bpl.s	Card_ChangeArt
0000E600 7220                       		moveq	#$20,d1
0000E602 3028 0032                  		move.w	card_finalX(a0),d0
0000E606 B068 0008                  		cmp.w	obX(a0),d0	; has item reached the finish position?
0000E60A 6700                       		beq.s	Card_ChangeArt	; if yes, branch
0000E60C 6C00                       		bge.s	Card_Move2
0000E60E 4441                       		neg.w	d1
0000E610                            
0000E610                            Card_Move2:
0000E610 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E614 3028 0008                  		move.w	obX(a0),d0
0000E618 6B00                       		bmi.s	locret_C412
0000E61A 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E61E 6400                       		bcc.s	locret_C412	; if yes, branch
0000E620 6000 0000                  		bra.w	DisplaySprite
0000E624                            ; ===========================================================================
0000E624                            
0000E624                            locret_C412:
0000E624 4E75                       		rts	
0000E626                            ; ===========================================================================
0000E626                            
0000E626                            Card_ChangeArt:
0000E626 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0)
0000E62C 6600                       		bne.s	Card_Delete
0000E62E 7000                       		moveq	#plcid_Explode,d0
0000E630 4EB9 0000 16EA             		jsr	(AddPLC).l	; load explosion patterns
0000E636 7000                       		moveq	#0,d0
0000E638 1038 FE10                  		move.b	(v_zone).w,d0
0000E63C 0640 0000                  		addi.w	#plcid_GHZAnimals,d0
0000E640 4EB9 0000 16EA             		jsr	(AddPLC).l	; load animal patterns
0000E646                            
0000E646                            Card_Delete:
0000E646 6000 0000                  		bra.w	DeleteObject
0000E64A                            ; ===========================================================================
0000E64A 00D0                       Card_ItemData:	dc.w $D0	; y-axis position
0000E64C 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000E64E 00E4                       		dc.w $E4
0000E650 0206                       		dc.b 2,	6
0000E652 00EA                       		dc.w $EA
0000E654 0207                       		dc.b 2,	7
0000E656 00E0                       		dc.w $E0
0000E658 020A                       		dc.b 2,	$A
0000E65A                            ; ---------------------------------------------------------------------------
0000E65A                            ; Title	card configuration data
0000E65A                            ; Format:
0000E65A                            ; 4 bytes per item (YYYY XXXX)
0000E65A                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000E65A                            ; ---------------------------------------------------------------------------
0000E65A 0000 0120 FEFC 013C 0414+  Card_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000E66A 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000E67A 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000E68A 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000E69A 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000E6AA 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000E6BA 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000E6CA                            ; ===========================================================================
0000E6CA                            ; ===========================================================================
0000E6CA                            		include	"_incObj\39 Game Over.asm"
0000E6CA                            ; ---------------------------------------------------------------------------
0000E6CA                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000E6CA                            ; ---------------------------------------------------------------------------
0000E6CA                            
0000E6CA                            GameOverCard:
0000E6CA 7000                       		moveq	#0,d0
0000E6CC 1028 0024                  		move.b	obRoutine(a0),d0
0000E6D0 323B 0000                  		move.w	Over_Index(pc,d0.w),d1
0000E6D4 4EFB 1000                  		jmp	Over_Index(pc,d1.w)
0000E6D8                            ; ===========================================================================
0000E6D8 0000                       Over_Index:	dc.w Over_ChkPLC-Over_Index
0000E6DA 0000                       		dc.w Over_Move-Over_Index
0000E6DC 0000                       		dc.w Over_Wait-Over_Index
0000E6DE                            ; ===========================================================================
0000E6DE                            
0000E6DE                            Over_ChkPLC:	; Routine 0
0000E6DE 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are the pattern load cues empty?
0000E6E2 6700                       		beq.s	Over_Main	; if yes, branch
0000E6E4 4E75                       		rts	
0000E6E6                            ; ===========================================================================
0000E6E6                            
0000E6E6                            Over_Main:
0000E6E6 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E6EA 317C 0050 0008             		move.w	#$50,obX(a0)	; set x-position
0000E6F0 0828 0000 001A             		btst	#0,obFrame(a0)	; is the object	"OVER"?
0000E6F6 6700                       		beq.s	Over_1stWord	; if not, branch
0000E6F8 317C 01F0 0008             		move.w	#$1F0,obX(a0)	; set x-position for "OVER"
0000E6FE                            
0000E6FE                            	Over_1stWord:
0000E6FE 317C 00F0 000A             		move.w	#$F0,obScreenY(a0)
0000E704 217C 0000 0000 0004        		move.l	#Map_Over,obMap(a0)
0000E70C 317C 855E 0002             		move.w	#$855E,obGfx(a0)
0000E712 117C 0000 0001             		move.b	#0,obRender(a0)
0000E718 317C 0000 0018             		move.w	#0,obPriority(a0)
0000E71E                            
0000E71E                            Over_Move:	; Routine 2
0000E71E 7210                       		moveq	#$10,d1		; set horizontal speed
0000E720 0C68 0120 0008             		cmpi.w	#$120,obX(a0)	; has item reached its target position?
0000E726 6700                       		beq.s	Over_SetWait	; if yes, branch
0000E728 6500                       		bcs.s	Over_UpdatePos
0000E72A 4441                       		neg.w	d1
0000E72C                            
0000E72C                            	Over_UpdatePos:
0000E72C D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E730 6000 0000                  		bra.w	DisplaySprite
0000E734                            ; ===========================================================================
0000E734                            
0000E734                            Over_SetWait:
0000E734 317C 02D0 001E             		move.w	#720,obTimeFrame(a0) ; set time delay to 12 seconds
0000E73A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E73E 4E75                       		rts	
0000E740                            ; ===========================================================================
0000E740                            
0000E740                            Over_Wait:	; Routine 4
0000E740 1038 F605                  		move.b	(v_jpadpress1).w,d0
0000E744 0200 0070                  		andi.b	#btnABC,d0	; is button A, B or C pressed?
0000E748 6600                       		bne.s	Over_ChgMode	; if yes, branch
0000E74A 0828 0000 001A             		btst	#0,obFrame(a0)
0000E750 6600                       		bne.s	Over_Display
0000E752 4A68 001E                  		tst.w	obTimeFrame(a0)	; has time delay reached zero?
0000E756 6700                       		beq.s	Over_ChgMode	; if yes, branch
0000E758 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000E75C 6000 0000                  		bra.w	DisplaySprite
0000E760                            ; ===========================================================================
0000E760                            
0000E760                            Over_ChgMode:
0000E760 4A38 FE1A                  		tst.b	(f_timeover).w	; is time over flag set?
0000E764 6600                       		bne.s	Over_ResetLvl	; if yes, branch
0000E766 11FC 0000 F600             		move.b	#id_Continue,(v_gamemode).w ; set mode to $14 (continue screen)
0000E76C 4A38 FE18                  		tst.b	(v_continues).w	; do you have any continues?
0000E770 6600                       		bne.s	Over_Display	; if yes, branch
0000E772 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; set mode to 0 (Sega screen)
0000E778 6000                       		bra.s	Over_Display
0000E77A                            ; ===========================================================================
0000E77A                            
0000E77A                            Over_ResetLvl:
0000E77A 42B8 FE38                  			clr.l	(v_lamp_time).w
0000E77E 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000E784                            
0000E784                            Over_Display:
0000E784 6000 0000                  		bra.w	DisplaySprite
0000E784 6000 0000                  		bra.w	DisplaySprite
0000E788                            		include	"_incObj\3A Got Through Card.asm"
0000E788                            ; ---------------------------------------------------------------------------
0000E788                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000E788                            ; ---------------------------------------------------------------------------
0000E788                            
0000E788                            GotThroughCard:
0000E788 7000                       		moveq	#0,d0
0000E78A 1028 0024                  		move.b	obRoutine(a0),d0
0000E78E 323B 0000                  		move.w	Got_Index(pc,d0.w),d1
0000E792 4EFB 1000                  		jmp	Got_Index(pc,d1.w)
0000E796                            ; ===========================================================================
0000E796 0000                       Got_Index:	dc.w Got_ChkPLC-Got_Index
0000E798 0000                       		dc.w Got_Move-Got_Index
0000E79A 0000                       		dc.w Got_Wait-Got_Index
0000E79C 0000                       		dc.w Got_TimeBonus-Got_Index
0000E79E 0000                       		dc.w Got_Wait-Got_Index
0000E7A0 0000                       		dc.w Got_NextLevel-Got_Index
0000E7A2 0000                       		dc.w Got_Wait-Got_Index
0000E7A4 0000                       		dc.w Got_Move2-Got_Index
0000E7A6 0000                       		dc.w loc_C766-Got_Index
0000E7A8                            
0000E7A8 =00000030                  got_mainX:	equ $30		; position for card to display on
0000E7A8 =00000032                  got_finalX:	equ $32		; position for card to finish on
0000E7A8                            ; ===========================================================================
0000E7A8                            
0000E7A8                            Got_ChkPLC:	; Routine 0
0000E7A8 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are the pattern load cues empty?
0000E7AC 6700                       		beq.s	Got_Main	; if yes, branch
0000E7AE 4E75                       		rts	
0000E7B0                            ; ===========================================================================
0000E7B0                            
0000E7B0                            Got_Main:
0000E7B0 2248                       		movea.l	a0,a1
0000E7B2 45F9 0000 0000             		lea	(Got_Config).l,a2
0000E7B8 7206                       		moveq	#6,d1
0000E7BA                            
0000E7BA                            Got_Loop:
0000E7BA 12BC 0000                  		move.b	#id_GotThroughCard,0(a1)
0000E7BE 3352 0008                  		move.w	(a2),obX(a1)	; load start x-position
0000E7C2 335A 0032                  		move.w	(a2)+,got_finalX(a1) ; load finish x-position (same as start)
0000E7C6 335A 0030                  		move.w	(a2)+,got_mainX(a1) ; load main x-position
0000E7CA 335A 000A                  		move.w	(a2)+,obScreenY(a1) ; load y-position
0000E7CE 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000E7D2 101A                       		move.b	(a2)+,d0
0000E7D4 0C00 0006                  		cmpi.b	#6,d0
0000E7D8 6600                       		bne.s	loc_C5CA
0000E7DA D038 FE11                  		add.b	(v_act).w,d0	; add act number to frame number
0000E7DE                            
0000E7DE                            	loc_C5CA:
0000E7DE 1340 001A                  		move.b	d0,obFrame(a1)
0000E7E2 237C 0000 0000 0004        		move.l	#Map_Got,obMap(a1)
0000E7EA 337C 8580 0002             		move.w	#$8580,obGfx(a1)
0000E7F0 137C 0000 0001             		move.b	#0,obRender(a1)
0000E7F6 43E9 0040                  		lea	$40(a1),a1
0000E7FA 51C9 FFBE                  		dbf	d1,Got_Loop	; repeat 6 times
0000E7FE                            
0000E7FE                            Got_Move:	; Routine 2
0000E7FE 7210                       		moveq	#$10,d1		; set horizontal speed
0000E800 3028 0030                  		move.w	got_mainX(a0),d0
0000E804 B068 0008                  		cmp.w	obX(a0),d0	; has item reached its target position?
0000E808 6700                       		beq.s	loc_C61A	; if yes, branch
0000E80A 6C00                       		bge.s	Got_ChgPos
0000E80C 4441                       		neg.w	d1
0000E80E                            
0000E80E                            	Got_ChgPos:
0000E80E D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E812                            
0000E812                            	loc_C5FE:
0000E812 3028 0008                  		move.w	obX(a0),d0
0000E816 6B00                       		bmi.s	locret_C60E
0000E818 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E81C 6400                       		bcc.s	locret_C60E	; if yes, branch
0000E81E 6000 0000                  		bra.w	DisplaySprite
0000E822                            ; ===========================================================================
0000E822                            
0000E822                            locret_C60E:
0000E822 4E75                       		rts	
0000E824                            ; ===========================================================================
0000E824                            
0000E824                            loc_C610:
0000E824 117C 000E 0024             		move.b	#$E,obRoutine(a0)
0000E82A 6000 0000                  		bra.w	Got_Move2
0000E82E                            ; ===========================================================================
0000E82E                            
0000E82E                            loc_C61A:
0000E82E 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000E834 67EE                       		beq.s	loc_C610
0000E836 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)
0000E83C 66D4                       		bne.s	loc_C5FE
0000E83E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E842 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000E848                            		;move.b	#id_SSRChaos,(v_objspace+$800).w ; load chaos emerald object
0000E848                            
0000E848                            Got_Wait:	; Routine 4, 8, $C
0000E848 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000E84C 6600                       		bne.s	Got_Display
0000E84E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E852                            
0000E852                            Got_Display:
0000E852 6000 0000                  		bra.w	DisplaySprite
0000E856                            ; ===========================================================================
0000E856                            
0000E856                            Got_TimeBonus:	; Routine 6
0000E856 6100 0000                  		bsr.w	DisplaySprite
0000E85A 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; set time/ring bonus update flag
0000E860 7000                       		moveq	#0,d0
0000E862 4A78 F7D2                  		tst.w	(v_timebonus).w	; is time bonus	= zero?
0000E866 6700                       		beq.s	Got_RingBonus	; if yes, branch
0000E868 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000E86C 0478 000A F7D2             		subi.w	#10,(v_timebonus).w ; subtract 10 from time bonus
0000E872                            
0000E872                            Got_RingBonus:
0000E872 4A78 F7D4                  		tst.w	(v_ringbonus).w	; is ring bonus	= zero?
0000E876 6700                       		beq.s	Got_ChkBonus	; if yes, branch
0000E878 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000E87C 0478 000A F7D4             		subi.w	#10,(v_ringbonus).w ; subtract 10 from ring bonus
0000E882                            
0000E882                            Got_ChkBonus:
0000E882 4A40                       		tst.w	d0		; is there any bonus?
0000E884 6600                       		bne.s	Got_AddBonus	; if yes, branch
0000E890 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E894 0C78 0501 FE10             		cmpi.w	#(id_SBZ<<8)+1,(v_zone).w
0000E89A 6600                       		bne.s	Got_SetDelay
0000E89C 5828 0024                  		addq.b	#4,obRoutine(a0)
0000E8A0                            
0000E8A0                            Got_SetDelay:
0000E8A0 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000E8A6                            
0000E8A6                            locret_C692:
0000E8A6 4E75                       		rts	
0000E8A8                            ; ===========================================================================
0000E8A8                            
0000E8A8                            Got_AddBonus:
0000E8A8 4EB9 0000 0000             		jsr	(AddPoints).l
0000E8AE 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000E8B2 0200 0003                  		andi.b	#3,d0
0000E8B6 66EE                       		bne.s	locret_C692
0000E8C2                            ; ===========================================================================
0000E8C2                            
0000E8C2                            Got_NextLevel:	; Routine $A
0000E8C2 11FC 0000 F5C2             		move.b  #0,($FFFFF5C2).w ; Clear victory animation flag
0000E8C8 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0000E8CE 1038 FE10                  		move.b	(v_zone).w,d0
0000E8D2 0240 0007                  		andi.w	#7,d0
0000E8D6 E748                       		lsl.w	#3,d0
0000E8D8 1238 FE11                  		move.b	(v_act).w,d1
0000E8DC 0241 0003                  		andi.w	#3,d1
0000E8E0 D241                       		add.w	d1,d1
0000E8E2 D041                       		add.w	d1,d0
0000E8E4 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000E8E8 31C0 FE10                  		move.w	d0,(v_zone).w	; set level number
0000E8EC 4A40                       		tst.w	d0
0000E8EE 6600                       		bne.s	Got_ChkSS
0000E8F0 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w
0000E8F6 6000                       		bra.s	Got_Display2
0000E8F8                            ; ===========================================================================
0000E8F8                            
0000E8F8                            Got_ChkSS:	
0000E8F8 4238 FE30                  		clr.b	(v_lastlamp).w	; clear	lamppost counter
0000E8FC 4A38 F5C3                  		tst.b	(f_emeraldm).w
0000E900 6700                       		beq.s	VBla_08A
0000E902 5238 FE57                  		addq.b	#1,(v_emeralds).w ; add 1 to number of emeralds
0000E910 6000                       		bra.s	Got_Display2
0000E912 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0000E918                            		
0000E918                            ; ===========================================================================
0000E918                            
0000E918                            VBla_08A:
0000E918 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000E91E                            
0000E91E                            Got_Display2:
0000E91E 6000 0000                  		bra.w	DisplaySprite
0000E922                            ; ===========================================================================
0000E922                            ; ---------------------------------------------------------------------------
0000E922                            ; Level	order array
0000E922                            ; ---------------------------------------------------------------------------
0000E922                            LevelOrder:
0000E922                            		; Green Hill Zone
0000E922 0001                       		dc.b id_GHZ, 1	; Act 2
0000E924 0002                       		dc.b id_GHZ, 2	; Act 2
0000E926 0200                       		dc.b id_MZ, 0	; Act 3
0000E928 0000                       		dc.b 0, 0
0000E92A                            
0000E92A                            		; Labyrinth Zone
0000E92A 0101                       		dc.b id_LZ, 1	; Act 1
0000E92C 0102                       		dc.b id_LZ, 2	; Act 2
0000E92E 0000                       		dc.b id_GHZ, 0 	; Act 3
0000E930 0502                       		dc.b id_SBZ, 2	; Scrap Brain Zone Act 3
0000E932                            
0000E932                            		; Marble Zone
0000E932 0201                       		dc.b id_MZ, 1	; Act 1
0000E934 0202                       		dc.b id_MZ, 2	; Act 2
0000E936 0502                       		dc.b id_SBZ, 2	; Act 3
0000E938 0000                       		dc.b 0, 0
0000E93A                            
0000E93A                            		; Star Light Zone
0000E93A 0301                       		dc.b id_SLZ, 1	; Act 1
0000E93C 0302                       		dc.b id_SLZ, 2	; Act 2
0000E93E 0500                       		dc.b id_SBZ, 0	; Act 3
0000E940 0000                       		dc.b 0, 0
0000E942                            
0000E942                            		; Spring Yard Zone
0000E942 0502                       		dc.b id_SBZ, 2	; Act 1
0000E944 0402                       		dc.b id_SYZ, 2	; Act 2
0000E946 0200                       		dc.b id_MZ,	 0	; Act 3
0000E948 0000                       		dc.b 0, 0
0000E94A                            
0000E94A                            		; Scrap Brain Zone
0000E94A 0501                       		dc.b id_SBZ, 1	; Act 1
0000E94C 0103                       		dc.b id_LZ, 3	; Act 2
0000E94E 0000                       		dc.b 0, 0	; Final Zone
0000E950 0000                       		dc.b 0, 0
0000E952                            		even
0000E952                            ; ===========================================================================
0000E952                            
0000E952                            Got_Move2:	; Routine $E
0000E952 7220                       		moveq	#$20,d1		; set horizontal speed
0000E954 3028 0032                  		move.w	got_finalX(a0),d0
0000E958 B068 0008                  		cmp.w	obX(a0),d0	; has item reached its finish position?
0000E95C 6700                       		beq.s	Got_SBZ2	; if yes, branch
0000E95E 6C00                       		bge.s	Got_ChgPos2
0000E960 4441                       		neg.w	d1
0000E962                            
0000E962                            	Got_ChgPos2:
0000E962 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E966 3028 0008                  		move.w	obX(a0),d0
0000E96A 6B00                       		bmi.s	locret_C748
0000E96C 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E970 6400                       		bcc.s	locret_C748	; if yes, branch
0000E972 6000 0000                  		bra.w	DisplaySprite
0000E976                            ; ===========================================================================
0000E976                            
0000E976                            locret_C748:
0000E976 4E75                       		rts	
0000E978                            ; ===========================================================================
0000E978                            
0000E978                            Got_SBZ2:
0000E978 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)
0000E97E 6600 0000                  		bne.w	DeleteObject
0000E982 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E986 4238 F7CC                  		clr.b	(f_lockctrl).w	; unlock controls
0000E98A 11FC 0000 F5C2             		move.b  #0,($FFFFF5C2).w ; Clear victory animation flag
0000E99A                            ; ===========================================================================
0000E99A                            
0000E99A                            loc_C766:	; Routine $10
0000E99A 5478 F72A                  		addq.w	#2,(v_limitright2).w
0000E99E 0C78 2100 F72A             		cmpi.w	#$2100,(v_limitright2).w
0000E9A4 6700 0000                  		beq.w	DeleteObject
0000E9A8 4E75                       		rts	
0000E9AA                            ; ===========================================================================
0000E9AA                            		;    x-start,	x-main,	y-main,
0000E9AA                            		;				routine, frame number
0000E9AA                            
0000E9AA 0004 0124 00BC             Got_Config:	dc.w 4,		$124,	$BC			; "SONIC HAS"
0000E9B0 0200                       		dc.b 				2,	0
0000E9B2                            
0000E9B2 FEE0 0120 00D0             		dc.w -$120,	$120,	$D0			; "PASSED"
0000E9B8 0201                       		dc.b 				2,	1
0000E9BA                            
0000E9BA 040C 014C 00D6             		dc.w $40C,	$14C,	$D6			; "ACT" 1/2/3
0000E9C0 0206                       		dc.b 				2,	6
0000E9C2                            
0000E9C2 0520 0120 0112             		dc.w $520,	$120,	$112			; score
0000E9C8 0202                       		dc.b 				2,	2
0000E9CA                            
0000E9CA 0540 0120 00F2             		dc.w $540,	$120,	$F2			; time bonus
0000E9D0 0203                       		dc.b 				2,	3
0000E9D2                            
0000E9D2 0560 0120 0102             		dc.w $560,	$120,	$102			; ring bonus
0000E9D8 0204                       		dc.b 				2,	4
0000E9DA                            
0000E9DA 020C 014C 00CC             		dc.w $20C,	$14C,	$CC			; oval
0000E9E0 0205                       		dc.b 				2,	5
0000E9E0 0205                       		dc.b 				2,	5
0000E9E2                            		include	"_incObj\7E Special Stage Results.asm"
0000E9E2                            ; ---------------------------------------------------------------------------
0000E9E2                            ; Object 7E - special stage results screen
0000E9E2                            ; ---------------------------------------------------------------------------
0000E9E2                            
0000E9E2                            SSResult:
0000E9E2 7000                       		moveq	#0,d0
0000E9E4 1028 0024                  		move.b	obRoutine(a0),d0
0000E9E8 323B 0000                  		move.w	SSR_Index(pc,d0.w),d1
0000E9EC 4EFB 1000                  		jmp	SSR_Index(pc,d1.w)
0000E9F0                            ; ===========================================================================
0000E9F0 0000                       SSR_Index:	dc.w SSR_ChkPLC-SSR_Index
0000E9F2 0000                       		dc.w SSR_Move-SSR_Index
0000E9F4 0000                       		dc.w SSR_Wait-SSR_Index
0000E9F6 0000                       		dc.w SSR_RingBonus-SSR_Index
0000E9F8 0000                       		dc.w SSR_Wait-SSR_Index
0000E9FA 0000                       		dc.w SSR_Exit-SSR_Index
0000E9FC 0000                       		dc.w SSR_Wait-SSR_Index
0000E9FE 0000                       		dc.w SSR_Continue-SSR_Index
0000EA00 0000                       		dc.w SSR_Wait-SSR_Index
0000EA02 0000                       		dc.w SSR_Exit-SSR_Index
0000EA04 0000                       		dc.w loc_C91A-SSR_Index
0000EA06                            
0000EA06 =00000030                  ssr_mainX:	equ $30		; position for card to display on
0000EA06                            ; ===========================================================================
0000EA06                            
0000EA06                            SSR_ChkPLC:	; Routine 0
0000EA06 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are the pattern load cues empty?
0000EA0A 6700                       		beq.s	SSR_Main	; if yes, branch
0000EA0C 4E75                       		rts	
0000EA0E                            ; ===========================================================================
0000EA0E                            
0000EA0E                            SSR_Main:
0000EA0E 2248                       		movea.l	a0,a1
0000EA10 45F9 0000 0000             		lea	(SSR_Config).l,a2
0000EA16 7203                       		moveq	#3,d1
0000EA18 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; do you have 50 or more rings?
0000EA1E 6500                       		bcs.s	SSR_Loop	; if no, branch
0000EA20 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000EA22                            
0000EA22                            	SSR_Loop:
0000EA22 12BC 0000                  		move.b	#id_SSResult,0(a1)
0000EA26 335A 0008                  		move.w	(a2)+,obX(a1)	; load start x-position
0000EA2A 335A 0030                  		move.w	(a2)+,ssr_mainX(a1) ; load main x-position
0000EA2E 335A 000A                  		move.w	(a2)+,obScreenY(a1) ; load y-position
0000EA32 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000EA36 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000EA3A 237C 0000 0000 0004        		move.l	#Map_SSR,obMap(a1)
0000EA42 337C 8580 0002             		move.w	#$8580,obGfx(a1)
0000EA48 137C 0000 0001             		move.b	#0,obRender(a1)
0000EA4E 43E9 0040                  		lea	$40(a1),a1
0000EA52 51C9 FFCE                  		dbf	d1,SSR_Loop	; repeat sequence 3 or 4 times
0000EA56                            
0000EA56 7007                       		moveq	#7,d0
0000EA58 1238 FE57                  		move.b	(v_emeralds).w,d1
0000EA5C 6700                       		beq.s	loc_C842
0000EA5E 7000                       		moveq	#0,d0
0000EA60 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000EA64 6600                       		bne.s	loc_C842	; if not, branch
0000EA66 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000EA68 317C 0018 0008             		move.w	#$18,obX(a0)
0000EA6E 317C 0118 0030             		move.w	#$118,ssr_mainX(a0) ; change position of text
0000EA74                            
0000EA74                            loc_C842:
0000EA74 1140 001A                  		move.b	d0,obFrame(a0)
0000EA78                            
0000EA78                            SSR_Move:	; Routine 2
0000EA78 7210                       		moveq	#$10,d1		; set horizontal speed
0000EA7A 3028 0030                  		move.w	ssr_mainX(a0),d0
0000EA7E B068 0008                  		cmp.w	obX(a0),d0	; has item reached its target position?
0000EA82 6700                       		beq.s	loc_C86C	; if yes, branch
0000EA84 6C00                       		bge.s	SSR_ChgPos
0000EA86 4441                       		neg.w	d1
0000EA88                            
0000EA88                            SSR_ChgPos:
0000EA88 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000EA8C                            
0000EA8C                            loc_C85A:
0000EA8C 3028 0008                  		move.w	obX(a0),d0
0000EA90 6B00                       		bmi.s	locret_C86A
0000EA92 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000EA96 6400                       		bcc.s	locret_C86A	; if yes, branch
0000EA98 6000 0000                  		bra.w	DisplaySprite
0000EA9C                            ; ===========================================================================
0000EA9C                            
0000EA9C                            locret_C86A:
0000EA9C 4E75                       		rts	
0000EA9E                            ; ===========================================================================
0000EA9E                            
0000EA9E                            loc_C86C:
0000EA9E 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0000EAA4 66E6                       		bne.s	loc_C85A
0000EAA6 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EAAA 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000EAB0 11FC 0000 D800             		move.b	#id_SSRChaos,(v_objspace+$800).w ; load chaos emerald object
0000EAB6                            
0000EAB6                            SSR_Wait:	; Routine 4, 8, $C, $10
0000EAB6 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000EABA 6600                       		bne.s	SSR_Display
0000EABC 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EAC0                            
0000EAC0                            SSR_Display:
0000EAC0 6000 0000                  		bra.w	DisplaySprite
0000EAC4                            ; ===========================================================================
0000EAC4                            
0000EAC4                            SSR_RingBonus:	; Routine 6
0000EAC4 6100 0000                  		bsr.w	DisplaySprite
0000EAC8 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; set ring bonus update flag
0000EACE 4A78 F7D4                  		tst.w	(v_ringbonus).w	; is ring bonus	= zero?
0000EAD2 6700                       		beq.s	loc_C8C4	; if yes, branch
0000EAD4 0478 000A F7D4             		subi.w	#10,(v_ringbonus).w ; subtract 10 from ring bonus
0000EADA 700A                       		moveq	#10,d0		; add 10 to score
0000EADC 4EB9 0000 0000             		jsr	(AddPoints).l
0000EAE2 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000EAE6 0200 0003                  		andi.b	#3,d0
0000EAEA 6600                       		bne.s	locret_C8EA
0000EAF6                            ; ===========================================================================
0000EAF6                            
0000EAF6                            loc_C8C4:
0000EB00 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EB04 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000EB0A 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; do you have at least 50 rings?
0000EB10 6500                       		bcs.s	locret_C8EA	; if not, branch
0000EB12 317C 003C 001E             		move.w	#60,obTimeFrame(a0) ; set time delay to 1 second
0000EB18 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto "SSR_Continue" routine
0000EB1C                            
0000EB1C                            locret_C8EA:
0000EB1C 4E75                       		rts	
0000EB1E                            ; ===========================================================================
0000EB1E                            
0000EB1E                            SSR_Exit:	; Routine $A, $12
0000EB1E 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000EB24 6000 0000                  		bra.w	DisplaySprite
0000EB28                            ; ===========================================================================
0000EB28                            
0000EB28                            SSR_Continue:	; Routine $E
0000EB28 11FC 0004 D6DA             		move.b	#4,(v_objspace+$6C0+obFrame).w
0000EB2E 11FC 0014 D6E4             		move.b	#$14,(v_objspace+$6C0+obRoutine).w
0000EB3E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EB42 317C 0168 001E             		move.w	#360,obTimeFrame(a0) ; set time delay to 6 seconds
0000EB48 6000 0000                  		bra.w	DisplaySprite
0000EB4C                            ; ===========================================================================
0000EB4C                            
0000EB4C                            loc_C91A:	; Routine $14
0000EB4C 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000EB50 0200 000F                  		andi.b	#$F,d0
0000EB54 6600                       		bne.s	SSR_Display2
0000EB56 0868 0000 001A             		bchg	#0,obFrame(a0)
0000EB5C                            
0000EB5C                            SSR_Display2:
0000EB5C 6000 0000                  		bra.w	DisplaySprite
0000EB60                            ; ===========================================================================
0000EB60 0020 0120 00C4             SSR_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000EB66 0200                       		dc.b 2,	0		; rountine number, frame number
0000EB68 0320 0120 0118             		dc.w $320, $120, $118
0000EB6E 0201                       		dc.b 2,	1
0000EB70 0360 0120 0128             		dc.w $360, $120, $128
0000EB76 0202                       		dc.b 2,	2
0000EB78 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000EB7E 0203                       		dc.b 2,	3
0000EB80 03A0 0120 0138             		dc.w $3A0, $120, $138
0000EB86 0206                       		dc.b 2,	6
0000EB86 0206                       		dc.b 2,	6
0000EB88                            		include	"_incObj\7F SS Result Chaos Emeralds.asm"
0000EB88                            ; ---------------------------------------------------------------------------
0000EB88                            ; Object 7F - chaos emeralds from the special stage results screen
0000EB88                            ; ---------------------------------------------------------------------------
0000EB88                            
0000EB88                            SSRChaos:
0000EB88 7000                       		moveq	#0,d0
0000EB8A 1028 0024                  		move.b	obRoutine(a0),d0
0000EB8E 323B 0000                  		move.w	SSRC_Index(pc,d0.w),d1
0000EB92 4EFB 1000                  		jmp	SSRC_Index(pc,d1.w)
0000EB96                            ; ===========================================================================
0000EB96 0000                       SSRC_Index:	dc.w SSRC_Main-SSRC_Index
0000EB98 0000                       		dc.w SSRC_Flash-SSRC_Index
0000EB9A                            
0000EB9A                            ; ---------------------------------------------------------------------------
0000EB9A                            ; X-axis positions for chaos emeralds
0000EB9A                            ; ---------------------------------------------------------------------------
0000EB9A 0110 0128 00F8 0140 00E0+  SSRC_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000EBA6                            ; ===========================================================================
0000EBA6                            
0000EBA6                            SSRC_Main:	; Routine 0
0000EBA6 2248                       		movea.l	a0,a1
0000EBA8 45F9 0000 EB9A             		lea	(SSRC_PosData).l,a2
0000EBAE 7400                       		moveq	#0,d2
0000EBB0 7200                       		moveq	#0,d1
0000EBB2 1238 FE57                  		move.b	(v_emeralds).w,d1 ; d1 is number of emeralds
0000EBB6 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000EBB8 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000EBBC                            
0000EBBC                            	SSRC_Loop:
0000EBBC 12BC 0000                  		move.b	#id_SSRChaos,0(a1)
0000EBC0 335A 0008                  		move.w	(a2)+,obX(a1)	; set x-position
0000EBC4 337C 00F0 000A             		move.w	#$F0,obScreenY(a1) ; set y-position
0000EBCA 47F8 FE58                  		lea	(v_emldlist).w,a3 ; check which emeralds you have
0000EBCE 1633 2000                  		move.b	(a3,d2.w),d3
0000EBD2 1343 001A                  		move.b	d3,obFrame(a1)
0000EBD6 1343 001C                  		move.b	d3,obAnim(a1)
0000EBDA 5202                       		addq.b	#1,d2
0000EBDC 5429 0024                  		addq.b	#2,obRoutine(a1)
0000EBE0 237C 0000 0000 0004        		move.l	#Map_SSRC,obMap(a1)
0000EBE8 337C 8541 0002             		move.w	#$8541,obGfx(a1)
0000EBEE 137C 0000 0001             		move.b	#0,obRender(a1)
0000EBF4 43E9 0040                  		lea	$40(a1),a1	; next object
0000EBF8 51C9 FFC2                  		dbf	d1,SSRC_Loop	; loop for d1 number of	emeralds
0000EBFC                            
0000EBFC                            SSRC_Flash:	; Routine 2
0000EBFC 1028 001A                  		move.b	obFrame(a0),d0
0000EC00 117C 0006 001A             		move.b	#6,obFrame(a0)	; load 6th frame (blank)
0000EC06 0C00 0006                  		cmpi.b	#6,d0
0000EC0A 6600                       		bne.s	SSRC_Display
0000EC0C 1168 001C 001A             		move.b	obAnim(a0),obFrame(a0) ; load visible frame
0000EC12                            
0000EC12                            	SSRC_Display:
0000EC12 6000 0000                  		bra.w	DisplaySprite
0000EC12 6000 0000                  		bra.w	DisplaySprite
0000EC16                            
0000EC16                            ; ---------------------------------------------------------------------------
0000EC16                            ; Sprite mappings - zone title cards
0000EC16                            ; ---------------------------------------------------------------------------
0000EC16 0000                       Map_Card:	dc.w M_Card_GHZ-Map_Card
0000EC18 0000                       		dc.w M_Card_LZ-Map_Card
0000EC1A 0000                       		dc.w M_Card_MZ-Map_Card
0000EC1C 0000                       		dc.w M_Card_SLZ-Map_Card
0000EC1E 0000                       		dc.w M_Card_SYZ-Map_Card
0000EC20 0000                       		dc.w M_Card_SBZ-Map_Card
0000EC22 0000                       		dc.w M_Card_Zone-Map_Card
0000EC24 0000                       		dc.w M_Card_Act1-Map_Card
0000EC26 0000                       		dc.w M_Card_Act2-Map_Card
0000EC28 0000                       		dc.w M_Card_Act3-Map_Card
0000EC2A 0000                       		dc.w M_Card_Oval-Map_Card
0000EC2C 0000                       		dc.w M_Card_FZ-Map_Card
0000EC2E 09                         M_Card_GHZ:	dc.b 9 			; GREEN HILL
0000EC2F F805 0018 B4               		dc.b $F8, 5, 0,	$18, $B4
0000EC34 F805 003A C4               		dc.b $F8, 5, 0,	$3A, $C4
0000EC39 F805 0010 D4               		dc.b $F8, 5, 0,	$10, $D4
0000EC3E F805 0010 E4               		dc.b $F8, 5, 0,	$10, $E4
0000EC43 F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000EC48 F805 001C 14               		dc.b $F8, 5, 0,	$1C, $14
0000EC4D F801 0020 24               		dc.b $F8, 1, 0,	$20, $24
0000EC52 F805 0026 2C               		dc.b $F8, 5, 0,	$26, $2C
0000EC57 F805 0026 3C               		dc.b $F8, 5, 0,	$26, $3C
0000EC5C                            		even
0000EC5C 09                         M_Card_LZ:	dc.b 9			; LABYRINTH
0000EC5D F805 0026 BC               		dc.b $F8, 5, 0,	$26, $BC
0000EC62 F805 0000 CC               		dc.b $F8, 5, 0,	0, $CC
0000EC67 F805 0004 DC               		dc.b $F8, 5, 0,	4, $DC
0000EC6C F805 004A EC               		dc.b $F8, 5, 0,	$4A, $EC
0000EC71 F805 003A FC               		dc.b $F8, 5, 0,	$3A, $FC
0000EC76 F801 0020 0C               		dc.b $F8, 1, 0,	$20, $C
0000EC7B F805 002E 14               		dc.b $F8, 5, 0,	$2E, $14
0000EC80 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000EC85 F805 001C 34               		dc.b $F8, 5, 0,	$1C, $34
0000EC8A                            		even
0000EC8A 0B                         M_Card_MZ:	dc.b $B	;  MARBLE | SCRAP RUINS
0000EC8B F805 003E 80               		dc.b $F8, 5, 0, $3E, $80	; S
0000EC90 F805 0008 90               		dc.b $F8, 5, 0, 8, $90		; C
0000EC95 F805 003A A0               		dc.b $F8, 5, 0, $3A, $A0	; R
0000EC9A F805 0000 B0               		dc.b $F8, 5, 0, 0, $B0		; A
0000EC9F F805 0036 C0               		dc.b $F8, 5, 0, $36, $C0	; P
0000ECA4 F800 0056 D0               		dc.b $F8, 0, 0, $56, $D0	; Space
0000ECA9 F805 003A E0               		dc.b $F8, 5, 0, $3A, $E0	; R
0000ECAE F805 0046 F0               		dc.b $F8, 5, 0, $46, $F0	; U
0000ECB3 F801 0020 00               		dc.b $F8, 1, 0, $20, $0	; I
0000ECB8 F805 002E 08               		dc.b $F8, 5, 0, $2E, $8	; N
0000ECBD F805 003E 18               		dc.b $F8, 5, 0, $3E, $18	; S
0000ECC2 09                         M_Card_SLZ:	dc.b 9			; STAR LIGHT
0000ECC3 F805 003E B4               		dc.b $F8, 5, 0,	$3E, $B4
0000ECC8 F805 0042 C4               		dc.b $F8, 5, 0,	$42, $C4
0000ECCD F805 0000 D4               		dc.b $F8, 5, 0,	0, $D4
0000ECD2 F805 003A E4               		dc.b $F8, 5, 0,	$3A, $E4
0000ECD7 F805 0026 04               		dc.b $F8, 5, 0,	$26, 4
0000ECDC F801 0020 14               		dc.b $F8, 1, 0,	$20, $14
0000ECE1 F805 0018 1C               		dc.b $F8, 5, 0,	$18, $1C
0000ECE6 F805 001C 2C               		dc.b $F8, 5, 0,	$1C, $2C
0000ECEB F805 0042 3C               		dc.b $F8, 5, 0,	$42, $3C
0000ECF0                            		even
0000ECF0 0A                         M_Card_SYZ:	dc.b $A			; SPRING YARD
0000ECF1 F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000ECF6 F805 0036 BC               		dc.b $F8, 5, 0,	$36, $BC
0000ECFB F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000ED00 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000ED05 F805 002E E4               		dc.b $F8, 5, 0,	$2E, $E4
0000ED0A F805 0018 F4               		dc.b $F8, 5, 0,	$18, $F4
0000ED0F F805 004A 14               		dc.b $F8, 5, 0,	$4A, $14
0000ED14 F805 0000 24               		dc.b $F8, 5, 0,	0, $24
0000ED19 F805 003A 34               		dc.b $F8, 5, 0,	$3A, $34
0000ED1E F805 000C 44               		dc.b $F8, 5, 0,	$C, $44
0000ED24 00                         		even
0000ED24 0A                         M_Card_SBZ:	dc.b $A			; SCRAP BRAIN
0000ED25 F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000ED2A F805 0008 BC               		dc.b $F8, 5, 0,	8, $BC
0000ED2F F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000ED34 F805 0000 DC               		dc.b $F8, 5, 0,	0, $DC
0000ED39 F805 0036 EC               		dc.b $F8, 5, 0,	$36, $EC
0000ED3E F805 0004 0C               		dc.b $F8, 5, 0,	4, $C
0000ED43 F805 003A 1C               		dc.b $F8, 5, 0,	$3A, $1C
0000ED48 F805 0000 2C               		dc.b $F8, 5, 0,	0, $2C
0000ED4D F801 0020 3C               		dc.b $F8, 1, 0,	$20, $3C
0000ED52 F805 002E 44               		dc.b $F8, 5, 0,	$2E, $44
0000ED58 00                         		even
0000ED58 04                         M_Card_Zone:	dc.b 4			; ZONE
0000ED59 F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000ED5E F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000ED63 F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000ED68 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000ED6E 00                         		even
0000ED6E 02                         M_Card_Act1:	dc.b 2			; ACT 1
0000ED6F 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000ED74 F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000ED79 02                         M_Card_Act2:	dc.b 2			; ACT 2
0000ED7A 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000ED7F F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000ED84 02                         M_Card_Act3:	dc.b 2			; ACT 3
0000ED85 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000ED8A F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000ED8F 0D                         M_Card_Oval:	dc.b $D			; Oval
0000ED90 E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000ED95 E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000ED9A EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000ED9F F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000EDA4 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000EDA9 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000EDAE 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000EDB3 FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000EDB8 EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000EDBD F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000EDC2 FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000EDC7 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000EDCC 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000EDD2 00                         		even
0000EDD2 05                         M_Card_FZ:	dc.b 5			; FINAL
0000EDD3 F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000EDD8 F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000EDDD F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000EDE2 F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000EDE7 F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000EDEC                            		even
0000EDEC                            
0000EDEC                            Map_Over:	include	"_maps\Game Over.asm"
0000EDEC                            ; ---------------------------------------------------------------------------
0000EDEC                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000EDEC                            ; ---------------------------------------------------------------------------
0000EDEC                            Map_Over_internal:
0000EDEC 0000                       		dc.w byte_CBAC-Map_Over_internal
0000EDEE 0000                       		dc.w byte_CBB7-Map_Over_internal
0000EDF0 0000                       		dc.w byte_CBC2-Map_Over_internal
0000EDF2 0000                       		dc.w byte_CBCD-Map_Over_internal
0000EDF4 02                         byte_CBAC:	dc.b 2			; GAME
0000EDF5 F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000EDFA F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000EDFF 02                         byte_CBB7:	dc.b 2			; OVER
0000EE00 F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000EE05 F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000EE0A 02                         byte_CBC2:	dc.b 2			; TIME
0000EE0B F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000EE10 F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000EE15 02                         byte_CBCD:	dc.b 2			; OVER
0000EE16 F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000EE1B F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000EE20                            		even
0000EE20                            		even
0000EE20                            
0000EE20                            ; ---------------------------------------------------------------------------
0000EE20                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000EE20                            ; ---------------------------------------------------------------------------
0000EE20 0000                       Map_Got:	dc.w M_Got_SonicHas-Map_Got
0000EE22 0000                       		dc.w M_Got_Passed-Map_Got
0000EE24 0000                       		dc.w M_Got_Score-Map_Got
0000EE26 0000                       		dc.w M_Got_TBonus-Map_Got
0000EE28 0000                       		dc.w M_Got_RBonus-Map_Got
0000EE2A FF6F                       		dc.w M_Card_Oval-Map_Got
0000EE2C FF4E                       		dc.w M_Card_Act1-Map_Got
0000EE2E FF59                       		dc.w M_Card_Act2-Map_Got
0000EE30 FF64                       		dc.w M_Card_Act3-Map_Got
0000EE32 08                         M_Got_SonicHas:	dc.b 8			; SONIC HAS
0000EE33 F805 003E B8               		dc.b $F8, 5, 0,	$3E, $B8
0000EE38 F805 0032 C8               		dc.b $F8, 5, 0,	$32, $C8
0000EE3D F805 002E D8               		dc.b $F8, 5, 0,	$2E, $D8
0000EE42 F801 0020 E8               		dc.b $F8, 1, 0,	$20, $E8
0000EE47 F805 0008 F0               		dc.b $F8, 5, 0,	8, $F0
0000EE4C F805 001C 10               		dc.b $F8, 5, 0,	$1C, $10
0000EE51 F805 0000 20               		dc.b $F8, 5, 0,	0, $20
0000EE56 F805 003E 30               		dc.b $F8, 5, 0,	$3E, $30
0000EE5B 06                         M_Got_Passed:	dc.b 6			; PASSED
0000EE5C F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000EE61 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000EE66 F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000EE6B F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000EE70 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000EE75 F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000EE7A 06                         M_Got_Score:	dc.b 6			; SCORE
0000EE7B F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000EE80 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000EE85 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000EE8A F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000EE8F F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000EE94 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000EE99 07                         M_Got_TBonus:	dc.b 7			; TIME BONUS
0000EE9A F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000EE9F F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000EEA4 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000EEA9 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000EEAE FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000EEB3 F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000EEB8 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000EEBD 07                         M_Got_RBonus:	dc.b 7			; RING BONUS
0000EEBE F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000EEC3 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000EEC8 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000EECD F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000EED2 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000EED7 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000EEDC F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000EEE2 00                         		even
0000EEE2                            ; ---------------------------------------------------------------------------
0000EEE2                            ; Sprite mappings - special stage results screen
0000EEE2                            ; ---------------------------------------------------------------------------
0000EEE2 0000                       Map_SSR:	dc.w M_SSR_Chaos-Map_SSR
0000EEE4 0000                       		dc.w M_SSR_Score-Map_SSR
0000EEE6 0000                       		dc.w byte_CD0D-Map_SSR
0000EEE8 FEAD                       		dc.w M_Card_Oval-Map_SSR
0000EEEA 0000                       		dc.w byte_CD31-Map_SSR
0000EEEC 0000                       		dc.w byte_CD46-Map_SSR
0000EEEE 0000                       		dc.w byte_CD5B-Map_SSR
0000EEF0 0000                       		dc.w byte_CD6B-Map_SSR
0000EEF2 0000                       		dc.w byte_CDA8-Map_SSR
0000EEF4 0D                         M_SSR_Chaos:	dc.b $D			; "CHAOS EMERALDS"
0000EEF5 F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000EEFA F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000EEFF F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000EF04 F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000EF09 F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000EF0E F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000EF13 F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000EF18 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000EF1D F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000EF22 F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000EF27 F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000EF2C F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000EF31 F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000EF36 06                         M_SSR_Score:	dc.b 6			; "SCORE"
0000EF37 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000EF3C F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000EF41 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000EF46 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000EF4B F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000EF50 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000EF55 07                         byte_CD0D:	dc.b 7
0000EF56 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000EF5B F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000EF60 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000EF65 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000EF6A FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000EF6F F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000EF74 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000EF79 04                         byte_CD31:	dc.b 4
0000EF7A F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000EF7F F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000EF84 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000EF89 F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000EF8E 04                         byte_CD46:	dc.b 4
0000EF8F F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000EF94 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000EF99 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000EF9E F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000EFA3 03                         byte_CD5B:	dc.b 3
0000EFA4 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000EFA9 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000EFAE F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000EFB3 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000EFB4 F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000EFB9 F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000EFBE F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000EFC3 F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000EFC8 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000EFCD F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000EFD2 F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000EFD7 F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000EFDC F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000EFE1 F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000EFE6 F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000EFEB F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000EFF0 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000EFF1 F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000EFF6 F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000EFFB F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000F000 F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000F005 F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000F00A F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000F00F F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000F014 F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000F019 F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000F01E F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000F023 F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000F028 F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000F02D F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000F032 F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000F037 F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000F03C                            		even
0000F03C                            
0000F03C                            Map_SSRC:	include	"_maps\SS Result Chaos Emeralds.asm"
0000F03C                            ; ---------------------------------------------------------------------------
0000F03C                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000F03C                            ; ---------------------------------------------------------------------------
0000F03C                            Map_SSRC_internal:
0000F03C 0000                       		dc.w byte_CE02-Map_SSRC_internal
0000F03E 0000                       		dc.w byte_CE08-Map_SSRC_internal
0000F040 0000                       		dc.w byte_CE0E-Map_SSRC_internal
0000F042 0000                       		dc.w byte_CE14-Map_SSRC_internal
0000F044 0000                       		dc.w byte_CE1A-Map_SSRC_internal
0000F046 0000                       		dc.w byte_CE20-Map_SSRC_internal
0000F048 0000                       		dc.w byte_CE26-Map_SSRC_internal
0000F04A 01                         byte_CE02:	dc.b 1
0000F04B F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000F050 01                         byte_CE08:	dc.b 1
0000F051 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000F056 01                         byte_CE0E:	dc.b 1
0000F057 F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000F05C 01                         byte_CE14:	dc.b 1
0000F05D F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000F062 01                         byte_CE1A:	dc.b 1
0000F063 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000F068 01                         byte_CE20:	dc.b 1
0000F069 F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000F06E 00                         byte_CE26:	dc.b 0			; Blank frame
0000F070 00                         		even
0000F070 00                         		even
0000F070                            
0000F070                            		include	"_incObj\36 Spikes.asm"
0000F070                            ; ---------------------------------------------------------------------------
0000F070                            ; Object 36 - spikes
0000F070                            ; ---------------------------------------------------------------------------
0000F070                            
0000F070                            Spikes:
0000F070 7000                       		moveq	#0,d0
0000F072 1028 0024                  		move.b	obRoutine(a0),d0
0000F076 323B 0000                  		move.w	Spik_Index(pc,d0.w),d1
0000F07A 4EFB 1000                  		jmp	Spik_Index(pc,d1.w)
0000F07E                            ; ===========================================================================
0000F07E 0000                       Spik_Index:	dc.w Spik_Main-Spik_Index
0000F080 0000                       		dc.w Spik_Solid-Spik_Index
0000F082                            
0000F082 =00000030                  spik_origX:	equ $30		; start X position
0000F082 =00000032                  spik_origY:	equ $32		; start Y position
0000F082                            
0000F082 0014                       Spik_Var:	dc.b 0,	$14		; frame	number,	object width
0000F084 0110                       		dc.b 1,	$10
0000F086 0204                       		dc.b 2,	4
0000F088 031C                       		dc.b 3,	$1C
0000F08A 0440                       		dc.b 4,	$40
0000F08C 0510                       		dc.b 5,	$10
0000F08E                            ; ===========================================================================
0000F08E                            
0000F08E                            Spik_Main:	; Routine 0
0000F08E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F092 217C 0000 0000 0004        		move.l	#Map_Spike,obMap(a0)
0000F09A 317C 051B 0002             		move.w	#$51B,obGfx(a0)
0000F0A0 0028 0004 0001             		ori.b	#4,obRender(a0)
0000F0A6 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000F0AC 1028 0028                  		move.b	obSubtype(a0),d0
0000F0B0 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
0000F0B6 0240 00F0                  		andi.w	#$F0,d0
0000F0BA 43F9 0000 F082             		lea	(Spik_Var).l,a1
0000F0C0 E648                       		lsr.w	#3,d0
0000F0C2 D2C0                       		adda.w	d0,a1
0000F0C4 1159 001A                  		move.b	(a1)+,obFrame(a0)
0000F0C8 1159 0014                  		move.b	(a1)+,obActWid(a0)
0000F0CC 3168 0008 0030             		move.w	obX(a0),spik_origX(a0)
0000F0D2 3168 000C 0032             		move.w	obY(a0),spik_origY(a0)
0000F0D8                            
0000F0D8                            Spik_Solid:	; Routine 2
0000F0D8 6100 0000                  		bsr.w	Spik_Type0x	; make the object move
0000F0DC 343C 0004                  		move.w	#4,d2
0000F0E0 0C28 0005 001A             		cmpi.b	#5,obFrame(a0)	; is object type $5x ?
0000F0E6 6700                       		beq.s	Spik_SideWays	; if yes, branch
0000F0E8 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)	; is object type $1x ?
0000F0EE 6600                       		bne.s	Spik_Upright	; if not, branch
0000F0F0 343C 0014                  		move.w	#$14,d2
0000F0F4                            
0000F0F4                            ; Spikes types $1x and $5x face	sideways
0000F0F4                            
0000F0F4                            Spik_SideWays:
0000F0F4 323C 001B                  		move.w	#$1B,d1
0000F0F8 3602                       		move.w	d2,d3
0000F0FA 5243                       		addq.w	#1,d3
0000F0FC 3828 0008                  		move.w	obX(a0),d4
0000F100 6100 0000                  		bsr.w	SolidObject
0000F104 0828 0003 0022             		btst	#3,obStatus(a0)
0000F10A 6600                       		bne.s	Spik_Display
0000F10C 0C44 0001                  		cmpi.w	#1,d4
0000F110 6700                       		beq.s	Spik_Hurt
0000F112 6000                       		bra.s	Spik_Display
0000F114                            ; ===========================================================================
0000F114                            
0000F114                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000F114                            
0000F114                            Spik_Upright:
0000F114 7200                       		moveq	#0,d1
0000F116 1228 0014                  		move.b	obActWid(a0),d1
0000F11A 0641 000B                  		addi.w	#$B,d1
0000F11E 343C 0010                  		move.w	#$10,d2
0000F122 363C 0011                  		move.w	#$11,d3
0000F126 3828 0008                  		move.w	obX(a0),d4
0000F12A 6100 0000                  		bsr.w	SolidObject
0000F12E 0828 0003 0022             		btst	#3,obStatus(a0)
0000F134 6600                       		bne.s	Spik_Hurt
0000F136 4A44                       		tst.w	d4
0000F138 6A00                       		bpl.s	Spik_Display
0000F13A                            
0000F13A                            Spik_Hurt:
0000F13A 4A38 FE2D                  		tst.b	(v_invinc).w	; is Sonic invincible?
0000F13E 6600                       		bne.s	Spik_Display	; if yes, branch
0000F140 4A78 D030                  		tst.w	(v_player+$30).w ; +++ is Sonic invulnerable?
0000F144 6600                       		bne.s	Spik_Display	; +++ if yes, branch
0000F146 2F08                       		move.l	a0,-(sp)
0000F148 2448                       		movea.l	a0,a2
0000F14A 41F8 D000                  		lea	(v_player).w,a0
0000F14E 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0)
0000F154 6400                       		bcc.s	loc_CF20
0000F156                            		; This fixes the infamous "spike bug"
0000F156 4A68 0030                  		tst.w	flashtime(a0)	; Is Sonic flashing after being hurt?
0000F15A 6600                       		bne.s	loc_CF20	; If so, skip getting hurt
0000F15C 4EF9 0000 00E0             		jmp	(loc_E0).l	; This is a copy of the above code that was pushed aside for this
0000F162                            loc_D5A2:
0000F162 9680                       		sub.l	d0,d3
0000F164 2143 000C                  		move.l	d3,obY(a0)
0000F168 4EB9 0000 0000             		jsr	(HurtSonic).l
0000F16E                            
0000F16E                            loc_CF20:
0000F16E 205F                       		movea.l	(sp)+,a0
0000F170                            
0000F170                            Spik_Display:
0000F170 6100 0000                  		bsr.w	DisplaySprite
0000F192 4E75                       		rts	
0000F194                            ; ===========================================================================
0000F194                            
0000F194                            Spik_Type0x:
0000F194 7000                       		moveq	#0,d0
0000F196 1028 0028                  		move.b	obSubtype(a0),d0
0000F19A D040                       		add.w	d0,d0
0000F19C 323B 0000                  		move.w	Spik_TypeIndex(pc,d0.w),d1
0000F1A0 4EFB 1000                  		jmp	Spik_TypeIndex(pc,d1.w)
0000F1A4                            ; ===========================================================================
0000F1A4 0000                       Spik_TypeIndex:	dc.w Spik_Type00-Spik_TypeIndex
0000F1A6 0000                       		dc.w Spik_Type01-Spik_TypeIndex
0000F1A8 0000                       		dc.w Spik_Type02-Spik_TypeIndex
0000F1AA                            ; ===========================================================================
0000F1AA                            
0000F1AA                            Spik_Type00:
0000F1AA 4E75                       		rts			; don't move the object
0000F1AC                            ; ===========================================================================
0000F1AC                            
0000F1AC                            Spik_Type01:
0000F1AC 6100 0000                  		bsr.w	Spik_Wait
0000F1B0 7000                       		moveq	#0,d0
0000F1B2 1028 0034                  		move.b	$34(a0),d0
0000F1B6 D068 0032                  		add.w	spik_origY(a0),d0
0000F1BA 3140 000C                  		move.w	d0,obY(a0)	; move the object vertically
0000F1BE 4E75                       		rts	
0000F1C0                            ; ===========================================================================
0000F1C0                            
0000F1C0                            Spik_Type02:
0000F1C0 6100 0000                  		bsr.w	Spik_Wait
0000F1C4 7000                       		moveq	#0,d0
0000F1C6 1028 0034                  		move.b	$34(a0),d0
0000F1CA D068 0030                  		add.w	spik_origX(a0),d0
0000F1CE 3140 0008                  		move.w	d0,obX(a0)	; move the object horizontally
0000F1D2 4E75                       		rts	
0000F1D4                            ; ===========================================================================
0000F1D4                            
0000F1D4                            Spik_Wait:
0000F1D4 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000F1D8 6700                       		beq.s	loc_CFA4	; if yes, branch
0000F1DA 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000F1DE 6600                       		bne.s	locret_CFE6
0000F1E0 4A28 0001                  		tst.b	obRender(a0)
0000F1E4 6A00                       		bpl.s	locret_CFE6
0000F1F0 6000                       		bra.s	locret_CFE6
0000F1F2                            ; ===========================================================================
0000F1F2                            
0000F1F2                            loc_CFA4:
0000F1F2 4A68 0036                  		tst.w	$36(a0)
0000F1F6 6700                       		beq.s	loc_CFC6
0000F1F8 0468 0800 0034             		subi.w	#$800,$34(a0)
0000F1FE 6400                       		bcc.s	locret_CFE6
0000F200 317C 0000 0034             		move.w	#0,$34(a0)
0000F206 317C 0000 0036             		move.w	#0,$36(a0)
0000F20C 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000F212 6000                       		bra.s	locret_CFE6
0000F214                            ; ===========================================================================
0000F214                            
0000F214                            loc_CFC6:
0000F214 0668 0800 0034             		addi.w	#$800,$34(a0)
0000F21A 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000F220 6500                       		bcs.s	locret_CFE6
0000F222 317C 2000 0034             		move.w	#$2000,$34(a0)
0000F228 317C 0001 0036             		move.w	#1,$36(a0)
0000F22E 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000F234                            
0000F234                            locret_CFE6:
0000F234 4E75                       		rts	
0000F234 4E75                       		rts	
0000F236                            Map_Spike:	include	"_maps\Spikes.asm"
0000F236                            ; --------------------------------------------------------------------------------
0000F236                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000F236                            ; --------------------------------------------------------------------------------
0000F236                            
0000F236                            SME_XgeaQ:	
0000F236 0000 0000                  		dc.w SME_XgeaQ_C-SME_XgeaQ, SME_XgeaQ_1C-SME_XgeaQ	
0000F23A 0000 0000                  		dc.w SME_XgeaQ_2C-SME_XgeaQ, SME_XgeaQ_32-SME_XgeaQ	
0000F23E 0000 0000                  		dc.w SME_XgeaQ_42-SME_XgeaQ, SME_XgeaQ_61-SME_XgeaQ	
0000F242 03                         SME_XgeaQ_C:	dc.b 3	
0000F243 F003 2004 EC               		dc.b $F0, 3, $20, 4, $EC	
0000F248 F003 2004 FC               		dc.b $F0, 3, $20, 4, $FC	
0000F24D F003 2004 0C               		dc.b $F0, 3, $20, 4, $C	
0000F252 03                         SME_XgeaQ_1C:	dc.b 3	
0000F253 EC0C 2000 F0               		dc.b $EC, $C, $20, 0, $F0	
0000F258 FC0C 2000 F0               		dc.b $FC, $C, $20, 0, $F0	
0000F25D 0C0C 2000 F0               		dc.b $C, $C, $20, 0, $F0	
0000F262 01                         SME_XgeaQ_2C:	dc.b 1	
0000F263 F003 2004 FC               		dc.b $F0, 3, $20, 4, $FC	
0000F268 03                         SME_XgeaQ_32:	dc.b 3	
0000F269 F003 2004 E4               		dc.b $F0, 3, $20, 4, $E4	
0000F26E F003 2004 FC               		dc.b $F0, 3, $20, 4, $FC	
0000F273 F003 2004 14               		dc.b $F0, 3, $20, 4, $14	
0000F278 06                         SME_XgeaQ_42:	dc.b 6	
0000F279 F003 2004 C0               		dc.b $F0, 3, $20, 4, $C0	
0000F27E F003 2004 D8               		dc.b $F0, 3, $20, 4, $D8	
0000F283 F003 2004 F0               		dc.b $F0, 3, $20, 4, $F0	
0000F288 F003 2004 08               		dc.b $F0, 3, $20, 4, 8	
0000F28D F003 2004 20               		dc.b $F0, 3, $20, 4, $20	
0000F292 F003 2004 38               		dc.b $F0, 3, $20, 4, $38	
0000F297 01                         SME_XgeaQ_61:	dc.b 1	
0000F298 FC0C 2000 F0               		dc.b $FC, $C, $20, 0, $F0	
0000F29E 00                         		even
0000F29E 00                         		even
0000F29E                            		include	"_incObj\3B Purple Rock.asm"
0000F29E                            ; ---------------------------------------------------------------------------
0000F29E                            ; Object 3B - purple rock (GHZ)
0000F29E                            ; ---------------------------------------------------------------------------
0000F29E                            
0000F29E                            PurpleRock:
0000F29E 7000                       		moveq	#0,d0
0000F2A0 1028 0024                  		move.b	obRoutine(a0),d0
0000F2A4 323B 0000                  		move.w	Rock_Index(pc,d0.w),d1
0000F2A8 4EFB 1000                  		jmp	Rock_Index(pc,d1.w)
0000F2AC                            ; ===========================================================================
0000F2AC 0000                       Rock_Index:	dc.w Rock_Main-Rock_Index
0000F2AE 0000                       		dc.w Rock_Solid-Rock_Index
0000F2B0                            ; ===========================================================================
0000F2B0                            
0000F2B0                            Rock_Main:	; Routine 0
0000F2B0 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F2B4 217C 0000 0000 0004        		move.l	#Map_PRock,obMap(a0)
0000F2BC 317C 63D0 0002             		move.w	#$63D0,obGfx(a0)
0000F2C2 117C 0004 0001             		move.b	#4,obRender(a0)
0000F2C8 117C 0013 0014             		move.b	#$13,obActWid(a0)
0000F2CE 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000F2D4                            
0000F2D4                            Rock_Solid:	; Routine 2
0000F2D4 323C 001B                  		move.w	#$1B,d1
0000F2D8 343C 0010                  		move.w	#$10,d2
0000F2DC 363C 0010                  		move.w	#$10,d3
0000F2E0 3828 0008                  		move.w	obX(a0),d4
0000F2E4 6100 0000                  		bsr.w	SolidObject
0000F2E8 6100 0000                  		bsr.w	DisplaySprite
0000F30A 4E75                       		rts	
0000F30A 4E75                       		rts	
0000F30C                            		include	"_incObj\49 Waterfall Sound.asm"
0000F30C                            ; ---------------------------------------------------------------------------
0000F30C                            ; Object 49 - waterfall	sound effect (GHZ)
0000F30C                            ; ---------------------------------------------------------------------------
0000F30C                            
0000F30C                            WaterSound:
0000F30C 7000                       		moveq	#0,d0
0000F30E 1028 0024                  		move.b	obRoutine(a0),d0
0000F312 323B 0000                  		move.w	WSnd_Index(pc,d0.w),d1
0000F316 4EFB 1000                  		jmp	WSnd_Index(pc,d1.w)
0000F31A                            ; ===========================================================================
0000F31A 0000                       WSnd_Index:	dc.w WSnd_Main-WSnd_Index
0000F31C 0000                       		dc.w WSnd_PlaySnd-WSnd_Index
0000F31E                            ; ===========================================================================
0000F31E                            
0000F31E                            WSnd_Main:	; Routine 0
0000F31E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F322 117C 0004 0001             		move.b	#4,obRender(a0)
0000F328                            
0000F328                            WSnd_PlaySnd:	; Routine 2
0000F328 1038 FE0F                  		move.b	(v_vbla_byte).w,d0 ; get low byte of VBlank counter
0000F32C 0200 003F                  		andi.b	#$3F,d0
0000F330 6600                       		bne.s	WSnd_ChkDel
0000F33C                            
0000F33C                            	WSnd_ChkDel:
0000F35A 4E75                       		rts	
0000F35A 4E75                       		rts	
0000F35C                            Map_PRock:	include	"_maps\Purple Rock.asm"
0000F35C                            ; ---------------------------------------------------------------------------
0000F35C                            ; Sprite mappings - purple rock	(GHZ)
0000F35C                            ; ---------------------------------------------------------------------------
0000F35C                            Map_PRock_internal:
0000F35C 0000                       		dc.w byte_D110-Map_PRock_internal
0000F35E 02                         byte_D110:	dc.b 2
0000F35F F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000F364 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000F36A 00                         		even
0000F36A 00                         		even
0000F36A                            		include	"_incObj\3C Smashable Wall.asm"
0000F36A                            ; ---------------------------------------------------------------------------
0000F36A                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000F36A                            ; ---------------------------------------------------------------------------
0000F36A                            
0000F36A                            SmashWall:
0000F36A 7000                       		moveq	#0,d0
0000F36C 1028 0024                  		move.b	obRoutine(a0),d0
0000F370 323B 0000                  		move.w	Smash_Index(pc,d0.w),d1
0000F374 4EBB 1000                  		jsr	Smash_Index(pc,d1.w)
0000F378 6000 0000                  		bra.w	RememberState
0000F37C                            ; ===========================================================================
0000F37C 0000                       Smash_Index:	dc.w Smash_Main-Smash_Index
0000F37E 0000                       		dc.w Smash_Solid-Smash_Index
0000F380 0000                       		dc.w Smash_FragMove-Smash_Index
0000F382                            
0000F382 =00000030                  smash_speed:	equ $30		; Sonic's horizontal speed
0000F382                            ; ===========================================================================
0000F382                            
0000F382                            Smash_Main:	; Routine 0
0000F382 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F386 217C 0000 0000 0004        		move.l	#Map_Smash,obMap(a0)
0000F38E 317C 450F 0002             		move.w	#$450F,obGfx(a0)
0000F394 117C 0004 0001             		move.b	#4,obRender(a0)
0000F39A 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000F3A0 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000F3A6 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
0000F3AC                            
0000F3AC                            Smash_Solid:	; Routine 2
0000F3AC 3178 D010 0030             		move.w	(v_player+obVelX).w,smash_speed(a0) ; load Sonic's horizontal speed
0000F3B2 323C 001B                  		move.w	#$1B,d1
0000F3B6 343C 0020                  		move.w	#$20,d2
0000F3BA 363C 0020                  		move.w	#$20,d3
0000F3BE 3828 0008                  		move.w	obX(a0),d4
0000F3C2 6100 0000                  		bsr.w	SolidObject	
0000F3C6 4A04                       		tst.b	d4
0000F3C8 6E00 0000                  		bgt.w	@chkroll	
0000F3CC 6700 0000                  		beq.w	@donothing								
0000F3D0 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing against the wall?
0000F3D6 6700 0000                  		beq.w	@donothing	; if yes, branch
0000F3DA                            ; ===========================================================================
0000F3DA                            
0000F3DA                            @chkroll:
0000F3DA 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1) ; is Sonic rolling?
0000F3E0 6600                       		bne.s	@donothing	; if not, branch	
0000F3E2 3028 0030                  		move.w	smash_speed(a0),d0
0000F3E6 6A00                       		bpl.s	@chkspeed
0000F3E8 4440                       		neg.w	d0
0000F3EA                            
0000F3EA                            	@chkspeed:
0000F3EA 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000F3EE 6500                       		bcs.s	@donothing	; if not, branch	
0000F3F0                            		
0000F3F0                            	@continue:	
0000F3F0 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000F3F6 3368 0030 0010             		move.w	smash_speed(a0),obVelX(a1)
0000F3FC 49F9 0000 0000             		lea	(Smash_FragSpd1).l,a4 ;	use fragments that move	right
0000F402 3028 0008                  		move.w	obX(a0),d0
0000F406 B069 0008                  		cmp.w	obX(a1),d0	; is Sonic to the right	of the block?
0000F40A 6500                       		bcs.s	@smash		; if yes, branch
0000F40C 49F9 0000 0000             		lea	(Smash_FragSpd2).l,a4 ;	use fragments that move	left
0000F412                            
0000F412                            	@smash:
0000F412 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
0000F418 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000F41E 7206                       		moveq	#6,d1		; load 7 fragments
0000F420 343C 0070                  		move.w	#$70,d2
0000F424 6100                       		bsr.s	SmashObject
0000F426                            
0000F426                            @donothing:
0000F426 4E75                       		rts	
0000F428                            
0000F428                            Smash_FragMove:	; Routine 4
0000F428 588F                       		addq.l	#4,sp
0000F42A 6100 0000                  		bsr.w	SpeedToPos
0000F42E 0668 0070 0012             		addi.w	#$70,obVelY(a0)	; make fragment	fall faster
0000F434 4A28 0001                  		tst.b	obRender(a0)
0000F438 6A00 0000                  		bpl.w	DeleteObject
0000F43C 6000 0000                  		bra.w	DisplaySprite
0000F440                            
0000F440                            
0000F440                            
0000F440                            		include	"_incObj\sub SmashObject.asm"
0000F440                            ; ---------------------------------------------------------------------------
0000F440                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000F440                            ; ---------------------------------------------------------------------------
0000F440                            
0000F440                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F440                            
0000F440                            
0000F440                            SmashObject:
0000F440 7000                       		moveq	#0,d0
0000F442 1028 001A                  		move.b	obFrame(a0),d0
0000F446 D040                       		add.w	d0,d0
0000F448 2668 0004                  		movea.l	obMap(a0),a3
0000F44C D6F3 0000                  		adda.w	(a3,d0.w),a3
0000F450 524B                       		addq.w	#1,a3
0000F452 08E8 0005 0001             		bset	#5,obRender(a0)
0000F458 1810                       		move.b	0(a0),d4
0000F45A 1A28 0001                  		move.b	obRender(a0),d5
0000F45E 2248                       		movea.l	a0,a1
0000F460 137C 0004 0024             		move.b	#4,obRoutine(a1)
0000F466 1284                       		move.b	d4,0(a1)
0000F468 234B 0004                  		move.l	a3,obMap(a1)
0000F46C 1345 0001                  		move.b	d5,obRender(a1)
0000F470 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000F476 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000F47C 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0000F482 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0000F488 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
0000F48E 335C 0010                  		move.w	(a4)+,obVelX(a1)
0000F492 335C 0012                  		move.w	(a4)+,obVelY(a1)
0000F496 5341                       		subq.w #1,d1
0000F498 43F8 D800                  		lea (v_lvlobjspace).w,a1
0000F49C 303C 005F                  		move.w #$5F,d0
0000F4A0                            ; ===========================================================================
0000F4A0                            
0000F4A0                            Smash_Loop:
0000F4A0 4A11                       		tst.b	(a1)
0000F4A2 6700                       		beq.s	@cont
0000F4A4 43E9 0040                  		lea		$40(a1),a1
0000F4A8 51C8 FFF6                  		dbf 	d0,Smash_Loop 
0000F4AC 6600                       		bne.s	Smash_PlaySnd
0000F4AE                            
0000F4AE                            	@cont:
0000F4AE 5A4B                       		addq.w #5,a3
0000F4B0                            
0000F4B0                            Smash_LoadFrag:				; XREF: SmashObject
0000F4B0 137C 0004 0024             		move.b	#4,obRoutine(a1)
0000F4B6 1284                       		move.b	d4,0(a1)
0000F4B8 234B 0004                  		move.l	a3,obMap(a1)
0000F4BC 1345 0001                  		move.b	d5,obRender(a1)
0000F4C0 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000F4C6 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000F4CC 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0000F4D2 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0000F4D8 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
0000F4DE 335C 0010                  		move.w	(a4)+,obVelX(a1)
0000F4E2 335C 0012                  		move.w	(a4)+,obVelY(a1)
0000F4E6 51C9 FFB8                  		dbf	d1,Smash_Loop
0000F4EA                            
0000F4EA                            Smash_PlaySnd:
0000F4EA 303C 0000                  		move.w	#sfx_WallSmash,d0
0000F4EE 4EF9 0000 1250             		jmp	(PlaySound_Special).l ; play smashing sound
0000F4F4                            
0000F4F4                            ; End of function SmashObject
0000F4F4                            ; End of function SmashObject
0000F4F4                            
0000F4F4                            ; ===========================================================================
0000F4F4                            ; Smashed block	fragment speeds
0000F4F4                            ;
0000F4F4 0400 FB00                  Smash_FragSpd1:	dc.w $400, -$500	; x-move speed,	y-move speed
0000F4F8 0600 FF00                  		dc.w $600, -$100
0000F4FC 0600 0100                  		dc.w $600, $100
0000F500 0400 0500                  		dc.w $400, $500
0000F504 0600 FA00                  		dc.w $600, -$600
0000F508 0800 FE00                  		dc.w $800, -$200
0000F50C 0800 0200                  		dc.w $800, $200
0000F510 0600 0600                  		dc.w $600, $600
0000F514                            
0000F514 FA00 FA00                  Smash_FragSpd2:	dc.w -$600, -$600
0000F518 F800 FE00                  		dc.w -$800, -$200
0000F51C F800 0200                  		dc.w -$800, $200
0000F520 FA00 0600                  		dc.w -$600, $600
0000F524 FC00 FB00                  		dc.w -$400, -$500
0000F528 FA00 FF00                  		dc.w -$600, -$100
0000F52C FA00 0100                  		dc.w -$600, $100
0000F530 FC00 0500                  		dc.w -$400, $500
0000F534                            
0000F534                            Map_Smash:	include	"_maps\Smashable Walls.asm"
0000F534                            ; ---------------------------------------------------------------------------
0000F534                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000F534                            ; ---------------------------------------------------------------------------
0000F534                            Map_Smash_internal:
0000F534 0000                       		dc.w @left-Map_Smash_internal
0000F536 0000                       		dc.w @middle-Map_Smash_internal
0000F538 0000                       		dc.w @right-Map_Smash_internal
0000F53A 08                         @left:		dc.b 8
0000F53B E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000F540 F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000F545 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000F54A 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000F54F E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000F554 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000F559 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000F55E 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000F563 08                         @middle:	dc.b 8
0000F564 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000F569 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000F56E 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000F573 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000F578 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000F57D F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000F582 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000F587 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000F58C 08                         @right:		dc.b 8
0000F58D E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000F592 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000F597 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000F59C 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000F5A1 E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000F5A6 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000F5AB 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000F5B0 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000F5B6 00                         		even
0000F5B6 00                         		even
0000F5B6                            
0000F5B6                            ; ---------------------------------------------------------------------------
0000F5B6                            ; Object code execution subroutine
0000F5B6                            ; ---------------------------------------------------------------------------
0000F5B6                            
0000F5B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F5B6                            
0000F5B6                            
0000F5B6                            
0000F5B6                            ExecuteObjects: ; XREF: GM_Title; et al
0000F5B6 41F8 D000                  		lea (v_objspace).w,a0 ; set address for object RAM
0000F5BA 7E7F                       		moveq #$7F,d7
0000F5BC 7000                       		moveq #0,d0
0000F5BE 0C38 0006 D024             		cmpi.b #6,(v_player+obRoutine).w
0000F5C4 6400                       		bcc.s loc_D362
0000F5C6                            
0000F5C6                            loc_D348:
0000F5C6 1010                       		move.b (a0),d0 ; load object number from RAM
0000F5C8 6700                       		beq.s loc_D358
0000F5CA D040                       		add.w d0,d0
0000F5CC D040                       		add.w d0,d0
0000F5CE 227B 0000                  		movea.l Obj_Index-4(pc,d0.w),a1
0000F5D2 4E91                       		jsr (a1) ; run the object's code
0000F5D4 7000                       		moveq #0,d0
0000F5D6                            
0000F5D6                            loc_D358:
0000F5D6 41E8 0040                  		lea $40(a0),a0 ; next object
0000F5DA 51CF FFEA                  		dbf d7,loc_D348
0000F5DE 4E75                       		rts
0000F5E0                            ; ===========================================================================
0000F5E0                            
0000F5E0                            loc_D362:
0000F5E0 7E1F                       		moveq #$1F,d7
0000F5E2 61E2                       		bsr.s loc_D348
0000F5E4 7E5F                       		moveq #$5F,d7
0000F5E6                            
0000F5E6                            loc_D368:
0000F5E6 7000                       		moveq #0,d0 ; Clear d0 quickly
0000F5E8 1010                       		move.b (a0),d0 ; get the object's ID
0000F5EA 6700                       		beq.s loc_D37C ; if it's obj00, skip it
0000F5EC 4A28 0001                  		tst.b obRender(a0) ; should we render it?
0000F5F0 6A00                       		bpl.s loc_D37C ; if not, skip it
0000F5F2 3028 0018                  		move.w obpriority(a0),d0 ; move object's priority to d0
0000F5F6 0828 0006 0001             		btst #6,obRender(a0) ; is the compound sprites flag set?
0000F5FC 6700                       		beq.s loc_D378 ; if not, branch
0000F5FE 303C 0200                  		move.w #$200,d0 ; move $200 to d0
0000F602                            
0000F602                            loc_D378:
0000F602 6100 0000                  		bsr.w DisplaySprite2
0000F606                            		
0000F606                            loc_D37C:
0000F606 41E8 0040                  		lea $40(a0),a0
0000F60A 51CF FFDA                  		dbf d7,loc_D368
0000F60E 4E75                       		rts
0000F610                            ; End of function ExecuteObjects
0000F610                            
0000F610                            ; ===========================================================================
0000F610                            ; ---------------------------------------------------------------------------
0000F610                            ; Object pointers
0000F610                            ; ---------------------------------------------------------------------------
0000F610                            Obj_Index:
0000F610                            		include	"_inc\Object Pointers.asm"
0000F610                            ; ---------------------------------------------------------------------------
0000F610                            ; Object pointers
0000F610                            ; ---------------------------------------------------------------------------
0000F610 0000 0000                  ptr_SonicPlayer:	dc.l SonicPlayer	; $01
0000F614 0000 0000                  ptr_Obj02:			dc.l ObjectFall
0000F618 0000 0000                  ptr_Obj03:			dc.l Obj03
0000F61C 0000 0000                  ptr_GShieldItem:	dc.l GShieldItem
0000F620 0000 0000                  ptr_Obj05:		dc.l Spindash_dust
0000F624 0000 B416                  ptr_Mozzietron:		dc.l Mozzietron
0000F628 0000 0000                  ptr_RShieldItem:	dc.l RShieldItem	
0000F62C 0000 0000                  ptr_Splash:		dc.l Splash		; $08
0000F630 0000 0000                  ptr_SonicSpecial:	dc.l SonicSpecial
0000F634 0000 0000                  ptr_DrownCount:		dc.l DrownCount
0000F638 0000 0000                  ptr_Pole:		dc.l Pole
0000F63C 0000 0000                  ptr_FlapDoor:		dc.l FlapDoor
0000F640 0000 0000                  ptr_Signpost:		dc.l Signpost
0000F644 0000 C83C                  ptr_TitleSonic:		dc.l TitleSonic
0000F648 0000 C8BC                  ptr_PSBTM:		dc.l PSBTM
0000F64C 0000 0000                  ptr_Obj10:		dc.l Obj10		; $10
0000F650 0000 8F3A                  ptr_Bridge:		dc.l Bridge
0000F654 0000 0000                  ptr_SpinningLight:	dc.l SpinningLight
0000F658 0000 0000                  ptr_LavaMaker:		dc.l LavaMaker
0000F65C 0000 0000                  ptr_LavaBall:		dc.l LavaBall
0000F660 0000 9560                  ptr_SwingingPlatform:	dc.l SwingingPlatform
0000F664 0000 0000                  ptr_Harpoon:		dc.l Harpoon
0000F668 0000 98AC                  ptr_Helix:		dc.l Helix
0000F66C 0000 9A38                  ptr_BasicPlatform:	dc.l BasicPlatform	; $18
0000F670 0000 0000                  ptr_InvStars:		dc.l InvStarsObj
0000F674 0000 9E14                  ptr_CollapseLedge:	dc.l CollapseLedge
0000F678 0000 0000                  ptr_WaterSurface:	dc.l WaterSurface
0000F67C 0000 A408                  ptr_Scenery:		dc.l Scenery
0000F680 0000 A4AA                  ptr_MagicSwitch:	dc.l MagicSwitch
0000F684 0000 A792                  ptr_BallHog:		dc.l BallHog
0000F688 0000 B12C                  ptr_Crabmeat:		dc.l Crabmeat
0000F68C 0000 A860                  ptr_Cannonball:		dc.l Cannonball		; $20
0000F690 0000 0000                  ptr_HUD:		dc.l HUD
0000F694 0000 B548                  ptr_BuzzBomber:		dc.l BuzzBomber
0000F698 0000 B69A                  ptr_Missile:		dc.l Missile
0000F69C 0000 A932                  ptr_MissileDissolve:	dc.l MissileDissolve
0000F6A0 0000 B8F4                  ptr_Rings:		dc.l Rings
0000F6A4 0000 C13E                  ptr_Monitor:		dc.l Monitor
0000F6A8 0000 A9A2                  ptr_ExplosionItem:	dc.l ExplosionItem
0000F6AC 0000 AB60                  ptr_Animals:		dc.l Animals		; $28
0000F6B0 0000 B04E                  ptr_Points:		dc.l Points
0000F6B4 0000 A580                  ptr_AutoDoor:		dc.l AutoDoor
0000F6B8 0000 CD40                  ptr_Chopper:		dc.l Chopper
0000F6BC 0000 CDFA                  ptr_Jaws:		dc.l Jaws
0000F6C0 0000 CEC4                  ptr_Burrobot:		dc.l Burrobot
0000F6C4 0000 C33C                  ptr_PowerUp:		dc.l PowerUp
0000F6C8 0000 D0D8                  ptr_LargeGrass:		dc.l LargeGrass
0000F6CC 0000 D5BA                  ptr_GlassBlock:		dc.l GlassBlock		; $30
0000F6D0 0000 D896                  ptr_ChainStomp:		dc.l ChainStomp
0000F6D4 0000 DF44                  ptr_Button:		dc.l Button
0000F6D8 0000 E0E8                  ptr_PushBlock:		dc.l PushBlock
0000F6DC 0000 E51A                  ptr_TitleCard:		dc.l TitleCard
0000F6E0 0000 D3FA                  ptr_GrassFire:		dc.l GrassFire
0000F6E4 0000 F070                  ptr_Spikes:		dc.l Spikes
0000F6E8 0000 BB50                  ptr_RingLoss:		dc.l RingLoss
0000F6EC 0000 0000                  ptr_ShieldItem:		dc.l ShieldItem		; $38
0000F6F0 0000 E6CA                  ptr_GameOverCard:	dc.l GameOverCard
0000F6F4 0000 E788                  ptr_GotThroughCard:	dc.l GotThroughCard
0000F6F8 0000 F29E                  ptr_PurpleRock:		dc.l PurpleRock
0000F6FC 0000 F36A                  ptr_SmashWall:		dc.l SmashWall
0000F700 0000 0000                  ptr_BossGreenHill:	dc.l BossGreenHill
0000F704 0000 0000                  ptr_Prison:		dc.l Prison
0000F708 0000 AA34                  ptr_ExplosionBomb:	dc.l ExplosionBomb
0000F70C 0000 0000                  ptr_MotoBug:		dc.l MotoBug		; $40
0000F710 0000 0000                  ptr_Springs:		dc.l Springs
0000F714 0000 0000                  ptr_Newtron:		dc.l Newtron
0000F718 0000 0000                  ptr_Roller:		dc.l Roller
0000F71C 0000 0000                  ptr_EdgeWalls:		dc.l EdgeWalls
0000F720 0000 DBB2                  ptr_SideStomp:		dc.l SideStomp
0000F724 0000 0000                  ptr_MarbleBrick:	dc.l MarbleBrick
0000F728 0000 0000                  ptr_Bumper:		dc.l Bumper
0000F72C 0000 0000                  ptr_BossBall:		dc.l BossBall		; $48
0000F730 0000 F30C                  ptr_WaterSound:		dc.l WaterSound
0000F734 0000 0000                  ptr_VanishSonic:	dc.l VanishSonic
0000F738 0000 BE12                  ptr_GiantRing:		dc.l GiantRing
0000F73C 0000 0000                  ptr_GeyserMaker:	dc.l GeyserMaker
0000F740 0000 0000                  ptr_LavaGeyser:		dc.l LavaGeyser
0000F744 0000 0000                  ptr_SpShieldItem:	dc.l SpShieldItem
0000F748 0000 0000                  ptr_Obj4F:		dc.l Obj4F
0000F74C 0000 0000                  ptr_Yadrin:		dc.l Yadrin		; $50
0000F750 0000 0000                  ptr_SmashBlock:		dc.l SmashBlock
0000F754 0000 0000                  ptr_MovingBlock:	dc.l MovingBlock
0000F758 0000 9F24                  ptr_CollapseFloor:	dc.l CollapseFloor
0000F75C 0000 0000                  ptr_LavaTag:		dc.l LavaTag
0000F760 0000 0000                  ptr_Basaran:		dc.l Basaran
0000F764 0000 0000                  ptr_FloatingBlock:	dc.l FloatingBlock
0000F768 0000 0000                  ptr_SpikeBall:		dc.l SpikeBall
0000F76C 0000 0000                  ptr_BigSpikeBall:	dc.l BigSpikeBall	; $58
0000F770 0000 0000                  ptr_Elevator:		dc.l Elevator
0000F774 0000 0000                  ptr_CirclingPlatform:	dc.l CirclingPlatform
0000F778 0000 0000                  ptr_Staircase:		dc.l Staircase
0000F77C 0000 0000                  ptr_Pylon:		dc.l Pylon
0000F780 0000 0000                  ptr_Fan:		dc.l Fan
0000F784 0000 0000                  ptr_Seesaw:		dc.l Seesaw
0000F788 0000 0000                  ptr_Bomb:		dc.l Bomb
0000F78C 0000 0000                  ptr_Orbinaut:		dc.l Orbinaut		; $60
0000F790 0000 0000                  ptr_LabyrinthBlock:	dc.l LabyrinthBlock
0000F794 0000 0000                  ptr_Gargoyle:		dc.l Gargoyle
0000F798 0000 0000                  ptr_LabyrinthConvey:	dc.l LabyrinthConvey
0000F79C 0000 0000                  ptr_Bubble:		dc.l Bubble
0000F7A0 0000 0000                  ptr_Waterfall:		dc.l Waterfall
0000F7A4 0000 0000                  ptr_Junction:		dc.l Junction
0000F7A8 0000 0000                  ptr_RunningDisc:	dc.l RunningDisc
0000F7AC 0000 0000                  ptr_Conveyor:		dc.l Conveyor		; $68
0000F7B0 0000 0000                  ptr_SpinPlatform:	dc.l SpinPlatform
0000F7B4 0000 0000                  ptr_Saws:		dc.l Saws
0000F7B8 0000 0000                  ptr_ScrapStomp:		dc.l ScrapStomp
0000F7BC 0000 0000                  ptr_VanishPlatform:	dc.l VanishPlatform
0000F7C0 0000 0000                  ptr_Flamethrower:	dc.l Flamethrower
0000F7C4 0000 0000                  ptr_Electro:		dc.l Electro
0000F7C8 0000 0000                  ptr_SpinConvey:		dc.l SpinConvey
0000F7CC 0000 0000                  ptr_Girder:		dc.l Girder		; $70
0000F7D0 0000 0000                  ptr_Invisibarrier:	dc.l Invisibarrier
0000F7D4 0000 0000                  ptr_Teleport:		dc.l Teleport
0000F7D8 0000 0000                  ptr_BossMarble:		dc.l BossMarble
0000F7DC 0000 0000                  ptr_BossFire:		dc.l BossFire
0000F7E0 0000 0000                  ptr_BossSpringYard:	dc.l BossSpringYard
0000F7E4 0000 0000                  ptr_BossBlock:		dc.l BossBlock
0000F7E8 0000 0000                  ptr_BossLabyrinth:	dc.l BossLabyrinth
0000F7EC 0000 0000                  ptr_Caterkiller:	dc.l Caterkiller	; $78
0000F7F0 0000 0000                  ptr_Lamppost:		dc.l Lamppost
0000F7F4 0000 0000                  ptr_BossStarLight:	dc.l BossStarLight
0000F7F8 0000 0000                  ptr_BossSpikeball:	dc.l BossSpikeball
0000F7FC 0000 BEEC                  ptr_RingFlash:		dc.l RingFlash
0000F800 0000 0000                  ptr_HiddenBonus:	dc.l HiddenBonus
0000F804 0000 E9E2                  ptr_SSResult:		dc.l SSResult
0000F808 0000 EB88                  ptr_SSRChaos:		dc.l SSRChaos
0000F80C 0000 5E2A                  ptr_ContScrItem:	dc.l ContScrItem	; $80
0000F810 0000 5F42                  ptr_ContSonic:		dc.l ContSonic
0000F814 0000 0000                  ptr_ScrapEggman:	dc.l ScrapEggman
0000F818 0000 0000                  ptr_FalseFloor:		dc.l FalseFloor
0000F81C 0000 0000                  ptr_EggmanCylinder:	dc.l EggmanCylinder
0000F820 0000 0000                  ptr_BossFinal:		dc.l BossFinal
0000F824 0000 0000                  ptr_BossPlasma:		dc.l BossPlasma
0000F828 0000 63CC                  ptr_EndSonic:		dc.l EndSonic
0000F82C 0000 6526                  ptr_EndChaos:		dc.l EndChaos		; $88
0000F830 0000 6600                  ptr_EndSTH:		dc.l EndSTH
0000F834 0000 0000                  ptr_CreditsText:	dc.l CreditsText
0000F838 0000 6866                  ptr_EndEggman:		dc.l EndEggman
0000F83C 0000 6946                  ptr_TryChaos:		dc.l TryChaos
0000F840                            
0000F840                            NullObject:
0000F840                            		;jmp	(DeleteObject).l	; It would be safer to have this instruction here, but instead it just falls through to ObjectFall
0000F840                            
0000F840 =00000001                  id_SonicPlayer:		equ ((ptr_SonicPlayer-Obj_Index)/4)+1		; $01
0000F840 =00000002                  id_Obj02:		equ ((ptr_Obj02-Obj_Index)/4)+1
0000F840 =00000003                  id_Obj03:		equ ((ptr_Obj03-Obj_Index)/4)+1
0000F840 =00000004                  id_GShielditem:		equ ((ptr_GShieldItem-Obj_Index)/4)+1
0000F840 =00000005                  id_Obj05:		equ ((ptr_Obj05-Obj_Index)/4)+1
0000F840 =00000006                  id_Mozzietron:		equ ((ptr_Mozzietron-Obj_Index)/4)+1
0000F840 =00000007                  id_RShieldItem:		equ ((ptr_RShieldItem-Obj_Index)/4)+1	
0000F840 =00000008                  id_Splash:		equ ((ptr_Splash-Obj_Index)/4)+1		; $08
0000F840 =00000009                  id_SonicSpecial:	equ ((ptr_SonicSpecial-Obj_Index)/4)+1
0000F840 =0000000A                  id_DrownCount:		equ ((ptr_DrownCount-Obj_Index)/4)+1
0000F840 =0000000B                  id_Pole:		equ ((ptr_Pole-Obj_Index)/4)+1
0000F840 =0000000C                  id_FlapDoor:		equ ((ptr_FlapDoor-Obj_Index)/4)+1
0000F840 =0000000D                  id_Signpost:		equ ((ptr_Signpost-Obj_Index)/4)+1
0000F840 =0000000E                  id_TitleSonic:		equ ((ptr_TitleSonic-Obj_Index)/4)+1
0000F840 =0000000F                  id_PSBTM:		equ ((ptr_PSBTM-Obj_Index)/4)+1
0000F840 =00000010                  id_Obj10:		equ ((ptr_Obj10-Obj_Index)/4)+1			; $10
0000F840 =00000011                  id_Bridge:		equ ((ptr_Bridge-Obj_Index)/4)+1
0000F840 =00000012                  id_SpinningLight:	equ ((ptr_SpinningLight-Obj_Index)/4)+1
0000F840 =00000013                  id_LavaMaker:		equ ((ptr_LavaMaker-Obj_Index)/4)+1
0000F840 =00000014                  id_LavaBall:		equ ((ptr_LavaBall-Obj_Index)/4)+1
0000F840 =00000015                  id_SwingingPlatform:	equ ((ptr_SwingingPlatform-Obj_Index)/4)+1
0000F840 =00000016                  id_Harpoon:		equ ((ptr_Harpoon-Obj_Index)/4)+1
0000F840 =00000017                  id_Helix:		equ ((ptr_Helix-Obj_Index)/4)+1
0000F840 =00000018                  id_BasicPlatform:	equ ((ptr_BasicPlatform-Obj_Index)/4)+1		; $18
0000F840 =00000019                  id_InvStars:		equ ((ptr_InvStars-Obj_Index)/4)+1
0000F840 =0000001A                  id_CollapseLedge:	equ ((ptr_CollapseLedge-Obj_Index)/4)+1
0000F840 =0000001B                  id_WaterSurface:	equ ((ptr_WaterSurface-Obj_Index)/4)+1
0000F840 =0000001C                  id_Scenery:		equ ((ptr_Scenery-Obj_Index)/4)+1
0000F840 =0000001D                  id_MagicSwitch:		equ ((ptr_MagicSwitch-Obj_Index)/4)+1
0000F840 =0000001E                  id_BallHog:		equ ((ptr_BallHog-Obj_Index)/4)+1
0000F840 =0000001F                  id_Crabmeat:		equ ((ptr_Crabmeat-Obj_Index)/4)+1
0000F840 =00000020                  id_Cannonball:		equ ((ptr_Cannonball-Obj_Index)/4)+1		; $20
0000F840 =00000021                  id_HUD:			equ ((ptr_HUD-Obj_Index)/4)+1
0000F840 =00000022                  id_BuzzBomber:		equ ((ptr_BuzzBomber-Obj_Index)/4)+1
0000F840 =00000023                  id_Missile:		equ ((ptr_Missile-Obj_Index)/4)+1
0000F840 =00000024                  id_MissileDissolve:	equ ((ptr_MissileDissolve-Obj_Index)/4)+1
0000F840 =00000025                  id_Rings:		equ ((ptr_Rings-Obj_Index)/4)+1
0000F840 =00000026                  id_Monitor:		equ ((ptr_Monitor-Obj_Index)/4)+1
0000F840 =00000027                  id_ExplosionItem:	equ ((ptr_ExplosionItem-Obj_Index)/4)+1
0000F840 =00000028                  id_Animals:		equ ((ptr_Animals-Obj_Index)/4)+1		; $28
0000F840 =00000029                  id_Points:		equ ((ptr_Points-Obj_Index)/4)+1
0000F840 =0000002A                  id_AutoDoor:		equ ((ptr_AutoDoor-Obj_Index)/4)+1
0000F840 =0000002B                  id_Chopper:		equ ((ptr_Chopper-Obj_Index)/4)+1
0000F840 =0000002C                  id_Jaws:		equ ((ptr_Jaws-Obj_Index)/4)+1
0000F840 =0000002D                  id_Burrobot:		equ ((ptr_Burrobot-Obj_Index)/4)+1
0000F840 =0000002E                  id_PowerUp:		equ ((ptr_PowerUp-Obj_Index)/4)+1
0000F840 =0000002F                  id_LargeGrass:		equ ((ptr_LargeGrass-Obj_Index)/4)+1
0000F840 =00000030                  id_GlassBlock:		equ ((ptr_GlassBlock-Obj_Index)/4)+1		; $30
0000F840 =00000031                  id_ChainStomp:		equ ((ptr_ChainStomp-Obj_Index)/4)+1
0000F840 =00000032                  id_Button:		equ ((ptr_Button-Obj_Index)/4)+1
0000F840 =00000033                  id_PushBlock:		equ ((ptr_PushBlock-Obj_Index)/4)+1
0000F840 =00000034                  id_TitleCard:		equ ((ptr_TitleCard-Obj_Index)/4)+1
0000F840 =00000035                  id_GrassFire:		equ ((ptr_GrassFire-Obj_Index)/4)+1
0000F840 =00000036                  id_Spikes:		equ ((ptr_Spikes-Obj_Index)/4)+1
0000F840 =00000037                  id_RingLoss:		equ ((ptr_RingLoss-Obj_Index)/4)+1
0000F840 =00000038                  id_ShieldItem:		equ ((ptr_ShieldItem-Obj_Index)/4)+1		; $38
0000F840 =00000039                  id_GameOverCard:	equ ((ptr_GameOverCard-Obj_Index)/4)+1
0000F840 =0000003A                  id_GotThroughCard:	equ ((ptr_GotThroughCard-Obj_Index)/4)+1
0000F840 =0000003B                  id_PurpleRock:		equ ((ptr_PurpleRock-Obj_Index)/4)+1
0000F840 =0000003C                  id_SmashWall:		equ ((ptr_SmashWall-Obj_Index)/4)+1
0000F840 =0000003D                  id_BossGreenHill:	equ ((ptr_BossGreenHill-Obj_Index)/4)+1
0000F840 =0000003E                  id_Prison:		equ ((ptr_Prison-Obj_Index)/4)+1
0000F840 =0000003F                  id_ExplosionBomb:	equ ((ptr_ExplosionBomb-Obj_Index)/4)+1
0000F840 =00000040                  id_MotoBug:		equ ((ptr_MotoBug-Obj_Index)/4)+1		; $40
0000F840 =00000041                  id_Springs:		equ ((ptr_Springs-Obj_Index)/4)+1
0000F840 =00000042                  id_Newtron:		equ ((ptr_Newtron-Obj_Index)/4)+1
0000F840 =00000043                  id_Roller:		equ ((ptr_Roller-Obj_Index)/4)+1
0000F840 =00000044                  id_EdgeWalls:		equ ((ptr_EdgeWalls-Obj_Index)/4)+1
0000F840 =00000045                  id_SideStomp:		equ ((ptr_SideStomp-Obj_Index)/4)+1
0000F840 =00000046                  id_MarbleBrick:		equ ((ptr_MarbleBrick-Obj_Index)/4)+1
0000F840 =00000047                  id_Bumper:		equ ((ptr_Bumper-Obj_Index)/4)+1
0000F840 =00000048                  id_BossBall:		equ ((ptr_BossBall-Obj_Index)/4)+1		; $48
0000F840 =00000049                  id_WaterSound:		equ ((ptr_WaterSound-Obj_Index)/4)+1
0000F840 =0000004A                  id_VanishSonic:		equ ((ptr_VanishSonic-Obj_Index)/4)+1
0000F840 =0000004B                  id_GiantRing:		equ ((ptr_GiantRing-Obj_Index)/4)+1
0000F840 =0000004C                  id_GeyserMaker:		equ ((ptr_GeyserMaker-Obj_Index)/4)+1
0000F840 =0000004D                  id_LavaGeyser:		equ ((ptr_LavaGeyser-Obj_Index)/4)+1
0000F840 =0000004E                  id_SpShieldItem:		equ ((ptr_SpShieldItem-Obj_Index)/4)+1
0000F840 =0000004F                  id_Obj4F:		equ ((ptr_Obj4F-Obj_Index)/4)+1
0000F840 =00000050                  id_Yadrin:		equ ((ptr_Yadrin-Obj_Index)/4)+1		; $50
0000F840 =00000051                  id_SmashBlock:		equ ((ptr_SmashBlock-Obj_Index)/4)+1
0000F840 =00000052                  id_MovingBlock:		equ ((ptr_MovingBlock-Obj_Index)/4)+1
0000F840 =00000053                  id_CollapseFloor:	equ ((ptr_CollapseFloor-Obj_Index)/4)+1
0000F840 =00000054                  id_LavaTag:		equ ((ptr_LavaTag-Obj_Index)/4)+1
0000F840 =00000055                  id_Basaran:		equ ((ptr_Basaran-Obj_Index)/4)+1
0000F840 =00000056                  id_FloatingBlock:	equ ((ptr_FloatingBlock-Obj_Index)/4)+1
0000F840 =00000057                  id_SpikeBall:		equ ((ptr_SpikeBall-Obj_Index)/4)+1
0000F840 =00000058                  id_BigSpikeBall:	equ ((ptr_BigSpikeBall-Obj_Index)/4)+1		; $58
0000F840 =00000059                  id_Elevator:		equ ((ptr_Elevator-Obj_Index)/4)+1
0000F840 =0000005A                  id_CirclingPlatform:	equ ((ptr_CirclingPlatform-Obj_Index)/4)+1
0000F840 =0000005B                  id_Staircase:		equ ((ptr_Staircase-Obj_Index)/4)+1
0000F840 =0000005C                  id_Pylon:		equ ((ptr_Pylon-Obj_Index)/4)+1
0000F840 =0000005D                  id_Fan:			equ ((ptr_Fan-Obj_Index)/4)+1
0000F840 =0000005E                  id_Seesaw:		equ ((ptr_Seesaw-Obj_Index)/4)+1
0000F840 =0000005F                  id_Bomb:		equ ((ptr_Bomb-Obj_Index)/4)+1
0000F840 =00000060                  id_Orbinaut:		equ ((ptr_Orbinaut-Obj_Index)/4)+1		; $60
0000F840 =00000061                  id_LabyrinthBlock:	equ ((ptr_LabyrinthBlock-Obj_Index)/4)+1
0000F840 =00000062                  id_Gargoyle:		equ ((ptr_Gargoyle-Obj_Index)/4)+1
0000F840 =00000063                  id_LabyrinthConvey:	equ ((ptr_LabyrinthConvey-Obj_Index)/4)+1
0000F840 =00000064                  id_Bubble:		equ ((ptr_Bubble-Obj_Index)/4)+1
0000F840 =00000065                  id_Waterfall:		equ ((ptr_Waterfall-Obj_Index)/4)+1
0000F840 =00000066                  id_Junction:		equ ((ptr_Junction-Obj_Index)/4)+1
0000F840 =00000067                  id_RunningDisc:		equ ((ptr_RunningDisc-Obj_Index)/4)+1
0000F840 =00000068                  id_Conveyor:		equ ((ptr_Conveyor-Obj_Index)/4)+1		; $68
0000F840 =00000069                  id_SpinPlatform:	equ ((ptr_SpinPlatform-Obj_Index)/4)+1
0000F840 =0000006A                  id_Saws:		equ ((ptr_Saws-Obj_Index)/4)+1
0000F840 =0000006B                  id_ScrapStomp:		equ ((ptr_ScrapStomp-Obj_Index)/4)+1
0000F840 =0000006C                  id_VanishPlatform:	equ ((ptr_VanishPlatform-Obj_Index)/4)+1
0000F840 =0000006D                  id_Flamethrower:	equ ((ptr_Flamethrower-Obj_Index)/4)+1
0000F840 =0000006E                  id_Electro:		equ ((ptr_Electro-Obj_Index)/4)+1
0000F840 =0000006F                  id_SpinConvey:		equ ((ptr_SpinConvey-Obj_Index)/4)+1
0000F840 =00000070                  id_Girder:		equ ((ptr_Girder-Obj_Index)/4)+1		; $70
0000F840 =00000071                  id_Invisibarrier:	equ ((ptr_Invisibarrier-Obj_Index)/4)+1
0000F840 =00000072                  id_Teleport:		equ ((ptr_Teleport-Obj_Index)/4)+1
0000F840 =00000073                  id_BossMarble:		equ ((ptr_BossMarble-Obj_Index)/4)+1
0000F840 =00000074                  id_BossFire:		equ ((ptr_BossFire-Obj_Index)/4)+1
0000F840 =00000075                  id_BossSpringYard:	equ ((ptr_BossSpringYard-Obj_Index)/4)+1
0000F840 =00000076                  id_BossBlock:		equ ((ptr_BossBlock-Obj_Index)/4)+1
0000F840 =00000077                  id_BossLabyrinth:	equ ((ptr_BossLabyrinth-Obj_Index)/4)+1
0000F840 =00000078                  id_Caterkiller:		equ ((ptr_Caterkiller-Obj_Index)/4)+1		; $78
0000F840 =00000079                  id_Lamppost:		equ ((ptr_Lamppost-Obj_Index)/4)+1
0000F840 =0000007A                  id_BossStarLight:	equ ((ptr_BossStarLight-Obj_Index)/4)+1
0000F840 =0000007B                  id_BossSpikeball:	equ ((ptr_BossSpikeball-Obj_Index)/4)+1
0000F840 =0000007C                  id_RingFlash:		equ ((ptr_RingFlash-Obj_Index)/4)+1
0000F840 =0000007D                  id_HiddenBonus:		equ ((ptr_HiddenBonus-Obj_Index)/4)+1
0000F840 =0000007E                  id_SSResult:		equ ((ptr_SSResult-Obj_Index)/4)+1
0000F840 =0000007F                  id_SSRChaos:		equ ((ptr_SSRChaos-Obj_Index)/4)+1
0000F840 =00000080                  id_ContScrItem:		equ ((ptr_ContScrItem-Obj_Index)/4)+1		; $80
0000F840 =00000081                  id_ContSonic:		equ ((ptr_ContSonic-Obj_Index)/4)+1
0000F840 =00000082                  id_ScrapEggman:		equ ((ptr_ScrapEggman-Obj_Index)/4)+1
0000F840 =00000083                  id_FalseFloor:		equ ((ptr_FalseFloor-Obj_Index)/4)+1
0000F840 =00000084                  id_EggmanCylinder:	equ ((ptr_EggmanCylinder-Obj_Index)/4)+1
0000F840 =00000085                  id_BossFinal:		equ ((ptr_BossFinal-Obj_Index)/4)+1
0000F840 =00000086                  id_BossPlasma:		equ ((ptr_BossPlasma-Obj_Index)/4)+1
0000F840 =00000087                  id_EndSonic:		equ ((ptr_EndSonic-Obj_Index)/4)+1
0000F840 =00000088                  id_EndChaos:		equ ((ptr_EndChaos-Obj_Index)/4)+1		; $88
0000F840 =00000089                  id_EndSTH:		equ ((ptr_EndSTH-Obj_Index)/4)+1
0000F840 =0000008A                  id_CreditsText:		equ ((ptr_CreditsText-Obj_Index)/4)+1
0000F840 =0000008B                  id_EndEggman:		equ ((ptr_EndEggman-Obj_Index)/4)+1
0000F840 =0000008C                  id_TryChaos:		equ ((ptr_TryChaos-Obj_Index)/4)+1
0000F840 =0000008C                  id_TryChaos:		equ ((ptr_TryChaos-Obj_Index)/4)+1
0000F840                            
0000F840                            		include	"_incObj\sub ObjectFall.asm"
0000F840                            ; ---------------------------------------------------------------------------
0000F840                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000F840                            ; ---------------------------------------------------------------------------
0000F840                            
0000F840                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F840                            
0000F840                            
0000F840                            ObjectFall:
0000F840 0C28 0050 0012             		cmpi.b	#$50,obVelY(a0)
0000F846 6700                       		beq.s	@donothing
0000F848 3028 0010                  		move.w	obVelX(a0),d0
0000F84C 48C0                       		ext.l	d0
0000F84E E188                       		lsl.l	#8,d0
0000F850 D1A8 0008                  		add.l	d0,obX(a0)
0000F854 0C68 0FC8 0012                     cmp.w   #$FC8,obVelY(a0)   ; check if Sonic's Y speed is lower than this value
0000F85A 6F00                               ble.s   @skipline       ; if yes, branch
0000F85C 317C 0FC8 0012                     move.w  #$FC8,obVelY(a0)    ; alter Sonic's Y speed
0000F862                                @skipline:		
0000F862 3028 0012                  		move.w	obVelY(a0),d0
0000F866 0668 0038 0012             		addi.w	#$38,obVelY(a0)	; increase vertical speed
0000F86C 48C0                       		ext.l	d0
0000F86E E188                       		lsl.l	#8,d0
0000F870 D1A8 000C                  		add.l	d0,obY(a0)
0000F874 4E75                       		rts	
0000F876                            	
0000F876                            	@donothing:
0000F876 4E75                       		rts
0000F878                            
0000F878                            ; End of function ObjectFall
0000F878                            ; End of function ObjectFall
0000F878                            		include	"_incObj\sub SpeedToPos.asm"
0000F878                            ; ---------------------------------------------------------------------------
0000F878                            ; Subroutine translating object	speed to update	object position
0000F878                            ; ---------------------------------------------------------------------------
0000F878                            
0000F878                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F878                            
0000F878                            
0000F878                            SpeedToPos:
0000F878 4CA8 0005 0010             		movem.w	obVelX(a0),d0/d2
0000F87E E188                       		lsl.l	#8,d0
0000F880 D1A8 0008                  		add.l	d0,obX(a0)
0000F884 E18A                       		lsl.l	#8,d2
0000F886 D5A8 000C                  		add.l	d2,obY(a0)
0000F88A 4E75                       		rts
0000F88C                            ; End of function SpeedToPos
0000F88C                            ; End of function SpeedToPos
0000F88C                            		include	"_incObj\sub DisplaySprite.asm"
0000F88C                            ; ---------------------------------------------------------------------------
0000F88C                            ; Subroutine to    display    a sprite/object, when a0 is the    object RAM
0000F88C                            ; ---------------------------------------------------------------------------
0000F88C                            
0000F88C                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
0000F88C                            
0000F88C                            
0000F88C                            DisplaySprite:
0000F88C 43F8 AC00                          lea    (v_spritequeue).w,a1
0000F890 D2E8 0018                          adda.w  obpriority(a0),a1 ; get sprite priority
0000F894 0C51 007E                          cmpi.w    #$7E,(a1)    ; is this part of the queue full?
0000F898 6400                               bcc.s    DSpr_Full    ; if yes, branch
0000F89A 5451                               addq.w    #2,(a1)        ; increment sprite count
0000F89C D2D1                               adda.w    (a1),a1        ; jump to empty position
0000F89E 3288                               move.w    a0,(a1)        ; insert RAM address for object
0000F8A0                            
0000F8A0                                DSpr_Full:
0000F8A0 4E75                               rts    
0000F8A2                            
0000F8A2                            ; End of function DisplaySprite
0000F8A2                            
0000F8A2                            
0000F8A2                            ; ---------------------------------------------------------------------------
0000F8A2                            ; Subroutine to    display    a 2nd sprite/object, when a1 is    the object RAM
0000F8A2                            ; ---------------------------------------------------------------------------
0000F8A2                            
0000F8A2                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
0000F8A2                            
0000F8A2                            
0000F8A2                            DisplaySprite1:
0000F8A2 45F8 AC00                          lea    (v_spritequeue).w,a2
0000F8A6 D4E9 0018                          adda.w  obpriority(a1),a2
0000F8AA 0C52 007E                          cmpi.w    #$7E,(a2)
0000F8AE 6400                               bcc.s    DSpr1_Full
0000F8B0 5452                               addq.w    #2,(a2)
0000F8B2 D4D2                               adda.w    (a2),a2
0000F8B4 3489                               move.w    a1,(a2)
0000F8B6                            
0000F8B6                                DSpr1_Full:
0000F8B6 4E75                               rts    
0000F8B8                            
0000F8B8                            ; End of function DisplaySprite1
0000F8B8                            
0000F8B8                            ; ---------------------------------------------------------------------------
0000F8B8                            ; Subroutine to display a sprite/object, when a0 is the object RAM
0000F8B8                            ; and d0 is already (priority/2)&$380
0000F8B8                            ; ---------------------------------------------------------------------------
0000F8B8                            
0000F8B8                            ; loc_16530:
0000F8B8                            DisplaySprite2:
0000F8B8 43F8 AC00                      lea    (v_spritequeue).w,a1
0000F8BC D2C0                           adda.w    d0,a1
0000F8BE 0C51 007E                      cmpi.w    #$7E,(a1)
0000F8C2 6400                           bhs.s    return_16542
0000F8C4 5451                           addq.w    #2,(a1)
0000F8C6 D2D1                           adda.w    (a1),a1
0000F8C8 3288                           move.w    a0,(a1)
0000F8CA                            
0000F8CA                            return_16542:
0000F8CA 4E75                           rts
0000F8CA 4E75                           rts
0000F8CC                            		include	"_incObj\sub DeleteObject.asm"
0000F8CC                            ; ---------------------------------------------------------------------------
0000F8CC                            ; Subroutine to	delete an object
0000F8CC                            ; ---------------------------------------------------------------------------
0000F8CC                            
0000F8CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F8CC                            
0000F8CC                            
0000F8CC                            DeleteObject:
0000F8CC 2248                       		movea.l	a0,a1		; move object RAM address to (a1)
0000F8CE                            
0000F8CE                            DeleteChild:				; child objects are already in (a1)
0000F8CE 7200                       		moveq	#0,d1
0000F8D0 700F                       		moveq	#$F,d0
0000F8D2                            
0000F8D2                            	DelObj_Loop:
0000F8D2 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000F8D4 51C8 FFFC                  		dbf	d0,DelObj_Loop	; repeat for length of object RAM
0000F8D8 4E75                       		rts	
0000F8DA                            
0000F8DA                            ; End of function DeleteObject
0000F8DA                            ; End of function DeleteObject
0000F8DA                            
0000F8DA                            ; ===========================================================================
0000F8DA 0000 0000                  BldSpr_ScrPos:	dc.l 0				; blank
0000F8DE 00FF F700                  		dc.l v_screenposx&$FFFFFF	; main screen x-position
0000F8E2 00FF F708                  		dc.l v_bgscreenposx&$FFFFFF	; background x-position	1
0000F8E6 00FF F718                  		dc.l v_bg3screenposx&$FFFFFF	; background x-position	2
0000F8EA                            ; ---------------------------------------------------------------------------
0000F8EA                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000F8EA                            ; ---------------------------------------------------------------------------
0000F8EA                            
0000F8EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F8EA                            
0000F8EA                            
0000F8EA                            BuildSprites:
0000F8EA 45F8 F800                  		lea	(v_spritetablebuffer).w,a2 ; set address for sprite table
0000F8EE 7A00                       		moveq	#0,d5
0000F8F0 49F8 AC00                  		lea	(v_spritequeue).w,a4
0000F8F4 7E07                       		moveq	#7,d7
0000F8F6                            
0000F8F6                            	@priorityLoop:
0000F8F6 4A54                       		tst.w	(a4)	; are there objects left to draw?
0000F8F8 6700 0000                  		beq.w	@nextPriority	; if not, branch
0000F8FC 7C02                       		moveq	#2,d6
0000F8FE                            
0000F8FE                            	@objectLoop:
0000F8FE 3074 6000                  		movea.w	(a4,d6.w),a0	; load object ID
0000F902 4A10                       		tst.b	(a0)		; if null, branch
0000F904 6700 0000                  		beq.w	@skipObject
0000F908 08A8 0007 0001             		bclr	#7,obRender(a0)		; set as not visible
0000F90E                            
0000F90E 1028 0001                  		move.b	obRender(a0),d0
0000F912 1800                       		move.b	d0,d4
0000F914 0240 000C                  		andi.w	#$C,d0		; get drawing coordinates
0000F918 6700                       		beq.s	@screenCoords	; branch if 0 (screen coordinates)
0000F91A 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000F91E                            	; check object bounds
0000F91E 7000                       		moveq	#0,d0
0000F920 1028 0014                  		move.b	obActWid(a0),d0
0000F924 3628 0008                  		move.w	obX(a0),d3
0000F928 9651                       		sub.w	(a1),d3
0000F92A 3203                       		move.w	d3,d1
0000F92C D240                       		add.w	d0,d1
0000F92E 6B00 0000                  		bmi.w	@skipObject	; left edge out of bounds
0000F932 3203                       		move.w	d3,d1
0000F934 9240                       		sub.w	d0,d1
0000F936 0C41 0140                  		cmpi.w	#320,d1
0000F93A 6C00                       		bge.s	@skipObject	; right edge out of bounds
0000F93C 0643 0080                  		addi.w	#128,d3		; VDP sprites start at 128px
0000F940                            
0000F940 0804 0004                  		btst	#4,d4		; is assume height flag on?
0000F944 6700                       		beq.s	@assumeHeight	; if yes, branch
0000F946 7000                       		moveq	#0,d0
0000F948 1028 0016                  		move.b	obHeight(a0),d0
0000F94C 3428 000C                  		move.w	obY(a0),d2
0000F950 9469 0004                  		sub.w	4(a1),d2
0000F954 3202                       		move.w	d2,d1
0000F956 D240                       		add.w	d0,d1
0000F958 6B00                       		bmi.s	@skipObject	; top edge out of bounds
0000F95A 3202                       		move.w	d2,d1
0000F95C 9240                       		sub.w	d0,d1
0000F95E 0C41 00E0                  		cmpi.w	#224,d1
0000F962 6C00                       		bge.s	@skipObject
0000F964 0642 0080                  		addi.w	#128,d2		; VDP sprites start at 128px
0000F968 6000                       		bra.s	@drawObject
0000F96A                            ; ===========================================================================
0000F96A                            
0000F96A                            	@screenCoords:
0000F96A 3428 000A                  		move.w	$A(a0),d2	; special variable for screen Y
0000F96E 3628 0008                  		move.w	obX(a0),d3
0000F972 6000                       		bra.s	@drawObject
0000F974                            ; ===========================================================================
0000F974                            
0000F974                            	@assumeHeight:
0000F974 3428 000C                  		move.w	obY(a0),d2
0000F978 9469 0004                  		sub.w	obMap(a1),d2
0000F97C 0642 0080                  		addi.w	#$80,d2
0000F980 0C42 0060                  		cmpi.w	#$60,d2
0000F984 6500                       		blo.s	@skipObject
0000F986 0C42 0180                  		cmpi.w	#$180,d2
0000F98A 6400                       		bhs.s	@skipObject
0000F98C                            
0000F98C                            	@drawObject:
0000F98C 2268 0004                  		movea.l	obMap(a0),a1
0000F990 7200                       		moveq	#0,d1
0000F992 0804 0005                  		btst	#5,d4
0000F996 6600                       		bne.s	@drawFrame
0000F998 1228 001A                  		move.b	$1A(a0),d1
0000F99C D241                       		add.w	d1,d1					; MJ: changed from byte to word (we want more than 7F sprites)
0000F99E D2F1 1000                  		adda.w	(a1,d1.w),a1
0000F9A2 7200                       		moveq	#$00,d1					; MJ: clear d1 (because of our byte to word change)
0000F9A4 1219                       		move.b	(a1)+,d1
0000F9A6 5301                       		subq.b	#1,d1
0000F9A8 6B00                       		bmi.s	@setVisible
0000F9AA                            
0000F9AA                            	@drawFrame:
0000F9AA 6100 0000                  		bsr.w	BuildSpr_Draw	; write data from sprite pieces to buffer
0000F9AE                            
0000F9AE                            	@setVisible:
0000F9AE 08E8 0007 0001             		bset	#7,obRender(a0)		; set object as visible
0000F9B4                            
0000F9B4                            	@skipObject:
0000F9B4 5446                       		addq.w	#2,d6
0000F9B6 5554                       		subq.w	#2,(a4)			; number of objects left
0000F9B8 6600 FF44                  		bne.w	@objectLoop
0000F9BC                            
0000F9BC                            	@nextPriority:
0000F9BC 49EC 0080                  		lea	$80(a4),a4
0000F9C0 51CF FF34                  		dbf	d7,@priorityLoop
0000F9C4 11C5 F62C                  		move.b	d5,(v_spritecount).w
0000F9C8 0C05 0050                  		cmpi.b	#$50,d5
0000F9CC 6700                       		beq.s	@spriteLimit
0000F9CE 24BC 0000 0000             		move.l	#0,(a2)
0000F9D4 4E75                       		rts	
0000F9D6                            ; ===========================================================================
0000F9D6                            
0000F9D6                            	@spriteLimit:
0000F9D6 157C 0000 FFFB             		move.b	#0,-5(a2)	; set last sprite link
0000F9DC 4E75                       		rts	
0000F9DE                            ; End of function BuildSprites
0000F9DE                            
0000F9DE                            
0000F9DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F9DE                            
0000F9DE                            
0000F9DE                            BuildSpr_Draw:
0000F9DE 3668 0002                  		movea.w	obGfx(a0),a3
0000F9E2 0804 0000                  		btst	#0,d4
0000F9E6 6600                       		bne.s	BuildSpr_FlipX
0000F9E8 0804 0001                  		btst	#1,d4
0000F9EC 6600 0000                  		bne.w	BuildSpr_FlipY
0000F9F0                            ; End of function BuildSpr_Draw
0000F9F0                            
0000F9F0                            
0000F9F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F9F0                            
0000F9F0                            
0000F9F0                            BuildSpr_Normal:
0000F9F0 0C05 0050                  		cmpi.b	#$50,d5		; check sprite limit
0000F9F4 6700                       		beq.s	@return
0000F9F6 1019                       		move.b	(a1)+,d0	; get y-offset
0000F9F8 4880                       		ext.w	d0
0000F9FA D042                       		add.w	d2,d0		; add y-position
0000F9FC 34C0                       		move.w	d0,(a2)+	; write to buffer
0000F9FE 14D9                       		move.b	(a1)+,(a2)+	; write sprite size
0000FA00 5205                       		addq.b	#1,d5		; increase sprite counter
0000FA02 14C5                       		move.b	d5,(a2)+	; set as sprite link
0000FA04 1019                       		move.b	(a1)+,d0	; get art tile
0000FA06 E148                       		lsl.w	#8,d0
0000FA08 1019                       		move.b	(a1)+,d0
0000FA0A D04B                       		add.w	a3,d0		; add art tile offset
0000FA0C 34C0                       		move.w	d0,(a2)+	; write to buffer
0000FA0E 1019                       		move.b	(a1)+,d0	; get x-offset
0000FA10 4880                       		ext.w	d0
0000FA12 D043                       		add.w	d3,d0		; add x-position
0000FA14 0240 01FF                  		andi.w	#$1FF,d0	; keep within 512px
0000FA18 6600                       		bne.s	@writeX
0000FA1A 5240                       		addq.w	#1,d0
0000FA1C                            
0000FA1C                            	@writeX:
0000FA1C 34C0                       		move.w	d0,(a2)+	; write to buffer
0000FA1E 51C9 FFD0                  		dbf	d1,BuildSpr_Normal	; process next sprite piece
0000FA22                            
0000FA22                            	@return:
0000FA22 4E75                       		rts	
0000FA24                            ; End of function BuildSpr_Normal
0000FA24                            
0000FA24                            ; ===========================================================================
0000FA24                            
0000FA24                            BuildSpr_FlipX:
0000FA24 0804 0001                  		btst	#1,d4		; is object also y-flipped?
0000FA28 6600 0000                  		bne.w	BuildSpr_FlipXY	; if yes, branch
0000FA2C                            
0000FA2C                            	@loop:
0000FA2C 0C05 0050                  		cmpi.b	#$50,d5		; check sprite limit
0000FA30 6700                       		beq.s	@return
0000FA32 1019                       		move.b	(a1)+,d0	; y position
0000FA34 4880                       		ext.w	d0
0000FA36 D042                       		add.w	d2,d0
0000FA38 34C0                       		move.w	d0,(a2)+
0000FA3A 1819                       		move.b	(a1)+,d4	; size
0000FA3C 14C4                       		move.b	d4,(a2)+	
0000FA3E 5205                       		addq.b	#1,d5		; link
0000FA40 14C5                       		move.b	d5,(a2)+
0000FA42 1019                       		move.b	(a1)+,d0	; art tile
0000FA44 E148                       		lsl.w	#8,d0
0000FA46 1019                       		move.b	(a1)+,d0	
0000FA48 D04B                       		add.w	a3,d0
0000FA4A 0A40 0800                  		eori.w	#$800,d0	; toggle flip-x in VDP
0000FA4E 34C0                       		move.w	d0,(a2)+	; write to buffer
0000FA50 1019                       		move.b	(a1)+,d0	; get x-offset
0000FA52 4880                       		ext.w	d0
0000FA54 4440                       		neg.w	d0			; negate it
0000FA56 D804                       		add.b	d4,d4		; calculate flipped position by size
0000FA58 0244 0018                  		andi.w	#$18,d4
0000FA5C 5044                       		addq.w	#8,d4
0000FA5E 9044                       		sub.w	d4,d0
0000FA60 D043                       		add.w	d3,d0
0000FA62 0240 01FF                  		andi.w	#$1FF,d0	; keep within 512px
0000FA66 6600                       		bne.s	@writeX
0000FA68 5240                       		addq.w	#1,d0
0000FA6A                            
0000FA6A                            	@writeX:
0000FA6A 34C0                       		move.w	d0,(a2)+	; write to buffer
0000FA6C 51C9 FFBE                  		dbf	d1,@loop		; process next sprite piece
0000FA70                            
0000FA70                            	@return:
0000FA70 4E75                       		rts	
0000FA72                            ; ===========================================================================
0000FA72                            
0000FA72                            BuildSpr_FlipY:
0000FA72 0C05 0050                  		cmpi.b	#$50,d5		; check sprite limit
0000FA76 6700                       		beq.s	@return
0000FA78 1019                       		move.b	(a1)+,d0	; get y-offset
0000FA7A 1811                       		move.b	(a1),d4		; get size
0000FA7C 4880                       		ext.w	d0
0000FA7E 4440                       		neg.w	d0		; negate y-offset
0000FA80 E70C                       		lsl.b	#3,d4	; calculate flip offset
0000FA82 0244 0018                  		andi.w	#$18,d4
0000FA86 5044                       		addq.w	#8,d4
0000FA88 9044                       		sub.w	d4,d0
0000FA8A D042                       		add.w	d2,d0	; add y-position
0000FA8C 34C0                       		move.w	d0,(a2)+	; write to buffer
0000FA8E 14D9                       		move.b	(a1)+,(a2)+	; size
0000FA90 5205                       		addq.b	#1,d5
0000FA92 14C5                       		move.b	d5,(a2)+	; link
0000FA94 1019                       		move.b	(a1)+,d0	; art tile
0000FA96 E148                       		lsl.w	#8,d0
0000FA98 1019                       		move.b	(a1)+,d0
0000FA9A D04B                       		add.w	a3,d0
0000FA9C 0A40 1000                  		eori.w	#$1000,d0	; toggle flip-y in VDP
0000FAA0 34C0                       		move.w	d0,(a2)+
0000FAA2 1019                       		move.b	(a1)+,d0	; x-position
0000FAA4 4880                       		ext.w	d0
0000FAA6 D043                       		add.w	d3,d0
0000FAA8 0240 01FF                  		andi.w	#$1FF,d0
0000FAAC 6600                       		bne.s	@writeX
0000FAAE 5240                       		addq.w	#1,d0
0000FAB0                            
0000FAB0                            	@writeX:
0000FAB0 34C0                       		move.w	d0,(a2)+	; write to buffer
0000FAB2 51C9 FFBE                  		dbf	d1,BuildSpr_FlipY	; process next sprite piece
0000FAB6                            
0000FAB6                            	@return:
0000FAB6 4E75                       		rts	
0000FAB8                            ; ===========================================================================
0000FAB8                            
0000FAB8                            BuildSpr_FlipXY:
0000FAB8 0C05 0050                  		cmpi.b	#$50,d5		; check sprite limit
0000FABC 6700                       		beq.s	@return
0000FABE 1019                       		move.b	(a1)+,d0	; calculated flipped y
0000FAC0 1811                       		move.b	(a1),d4
0000FAC2 4880                       		ext.w	d0
0000FAC4 4440                       		neg.w	d0
0000FAC6 E70C                       		lsl.b	#3,d4
0000FAC8 0244 0018                  		andi.w	#$18,d4
0000FACC 5044                       		addq.w	#8,d4
0000FACE 9044                       		sub.w	d4,d0
0000FAD0 D042                       		add.w	d2,d0
0000FAD2 34C0                       		move.w	d0,(a2)+	; write to buffer
0000FAD4 1819                       		move.b	(a1)+,d4	; size
0000FAD6 14C4                       		move.b	d4,(a2)+	; link
0000FAD8 5205                       		addq.b	#1,d5
0000FADA 14C5                       		move.b	d5,(a2)+	; art tile
0000FADC 1019                       		move.b	(a1)+,d0
0000FADE E148                       		lsl.w	#8,d0
0000FAE0 1019                       		move.b	(a1)+,d0
0000FAE2 D04B                       		add.w	a3,d0
0000FAE4 0A40 1800                  		eori.w	#$1800,d0	; toggle flip-x/y in VDP
0000FAE8 34C0                       		move.w	d0,(a2)+
0000FAEA 1019                       		move.b	(a1)+,d0	; calculate flipped x
0000FAEC 4880                       		ext.w	d0
0000FAEE 4440                       		neg.w	d0
0000FAF0 D804                       		add.b	d4,d4
0000FAF2 0244 0018                  		andi.w	#$18,d4
0000FAF6 5044                       		addq.w	#8,d4
0000FAF8 9044                       		sub.w	d4,d0
0000FAFA D043                       		add.w	d3,d0
0000FAFC 0240 01FF                  		andi.w	#$1FF,d0
0000FB00 6600                       		bne.s	@writeX
0000FB02 5240                       		addq.w	#1,d0
0000FB04                            
0000FB04                            	@writeX:
0000FB04 34C0                       		move.w	d0,(a2)+	; write to buffer
0000FB06 51C9 FFB0                  		dbf	d1,BuildSpr_FlipXY	; process next sprite piece
0000FB0A                            
0000FB0A                            	@return:
0000FB0A 4E75                       		rts	
0000FB0C                            
0000FB0C                            		include	"_incObj\sub ChkObjectVisible.asm"
0000FB0C                            ; ---------------------------------------------------------------------------
0000FB0C                            ; Subroutine to	check if an object is off screen
0000FB0C                            
0000FB0C                            ; output:
0000FB0C                            ;	d0 = flag set if object is off screen
0000FB0C                            ; ---------------------------------------------------------------------------
0000FB0C                            
0000FB0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FB0C                            
0000FB0C                            
0000FB0C                            ChkObjectVisible:
0000FB0C 3028 0008                  		move.w	obX(a0),d0	; get object x-position
0000FB10 9078 F700                  		sub.w	(v_screenposx).w,d0 ; subtract screen x-position
0000FB14 6B00                       		bmi.s	@offscreen
0000FB16 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000FB1A 6C00                       		bge.s	@offscreen	; if not, branch
0000FB1C                            
0000FB1C 3228 000C                  		move.w	obY(a0),d1	; get object y-position
0000FB20 9278 F704                  		sub.w	(v_screenposy).w,d1 ; subtract screen y-position
0000FB24 6B00                       		bmi.s	@offscreen
0000FB26 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000FB2A 6C00                       		bge.s	@offscreen	; if not, branch
0000FB2C                            
0000FB2C 7000                       		moveq	#0,d0		; set flag to 0
0000FB2E 4E75                       		rts	
0000FB30                            
0000FB30                            	@offscreen:
0000FB30 7001                       		moveq	#1,d0		; set flag to 1
0000FB32 4E75                       		rts	
0000FB34                            ; End of function ChkObjectVisible
0000FB34                            
0000FB34                            ; ---------------------------------------------------------------------------
0000FB34                            ; Subroutine to	check if an object is off screen
0000FB34                            ; More precise than above subroutine, taking width into account
0000FB34                            
0000FB34                            ; output:
0000FB34                            ;	d0 = flag set if object is off screen
0000FB34                            ; ---------------------------------------------------------------------------
0000FB34                            
0000FB34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FB34                            
0000FB34                            
0000FB34                            ChkPartiallyVisible:
0000FB34 7200                       		moveq	#0,d1
0000FB36 1228 0014                  		move.b	obActWid(a0),d1
0000FB3A 3028 0008                  		move.w	obX(a0),d0	; get object x-position
0000FB3E 9078 F700                  		sub.w	(v_screenposx).w,d0 ; subtract screen x-position
0000FB42 D041                       		add.w	d1,d0		; add object width
0000FB44 6B00                       		bmi.s	@offscreen2
0000FB46 D241                       		add.w	d1,d1
0000FB48 9041                       		sub.w	d1,d0
0000FB4A 0C40 0140                  		cmpi.w	#320,d0
0000FB4E 6C00                       		bge.s	@offscreen2
0000FB50                            
0000FB50 3228 000C                  		move.w	obY(a0),d1
0000FB54 9278 F704                  		sub.w	(v_screenposy).w,d1
0000FB58 6B00                       		bmi.s	@offscreen2
0000FB5A 0C41 00E0                  		cmpi.w	#224,d1
0000FB5E 6C00                       		bge.s	@offscreen2
0000FB60                            
0000FB60 7000                       		moveq	#0,d0
0000FB62 4E75                       		rts	
0000FB64                            
0000FB64                            	@offscreen2:
0000FB64 7001                       		moveq	#1,d0
0000FB66 4E75                       		rts	
0000FB68                            ; End of function ChkPartiallyVisible
0000FB68                            ; End of function ChkPartiallyVisible
0000FB68                            
0000FB68                            ; ---------------------------------------------------------------------------
0000FB68                            ; Subroutine to	load a level's objects
0000FB68                            ; ---------------------------------------------------------------------------
0000FB68                            
0000FB68                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FB68                            
0000FB68                            
0000FB68                            ObjPosLoad:
0000FB68 7000                       		moveq	#0,d0
0000FB6A 1038 F76C                  		move.b	(v_opl_routine).w,d0
0000FB6E 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000FB72 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000FB76                            ; End of function ObjPosLoad
0000FB76                            
0000FB76                            ; ===========================================================================
0000FB76 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000FB78 0000                       		dc.w OPL_Next-OPL_Index
0000FB7A                            ; ===========================================================================
0000FB7A                            
0000FB7A                            OPL_Main:
0000FB7A 5438 F76C                  		addq.b	#2,(v_opl_routine).w
0000FB7E 3038 FE10                  		move.w	(v_zone).w,d0
0000FB82 ED08                       		lsl.b	#6,d0
0000FB84 E848                       		lsr.w	#4,d0
0000FB86 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000FB8C 2248                       		movea.l	a0,a1
0000FB8E D0F0 0000                  		adda.w	(a0,d0.w),a0
0000FB92 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FB96 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FB9A D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000FB9E 21C9 F778                  		move.l	a1,(v_opl_data+8).w
0000FBA2 21C9 F77C                  		move.l	a1,(v_opl_data+$C).w
0000FBA6 45F8 FC00                  		lea	(v_objstate).w,a2
0000FBAA 34FC 0101                  		move.w	#$101,(a2)+
0000FBAE 303C 005E                  		move.w	#$5E,d0
0000FBB2                            
0000FBB2                            OPL_ClrList:
0000FBB2 429A                       		clr.l	(a2)+
0000FBB4 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000FBB8                            
0000FBB8 45F8 FC00                  		lea	(v_objstate).w,a2
0000FBBC 7400                       		moveq	#0,d2
0000FBBE 3C38 F700                  		move.w	(v_screenposx).w,d6
0000FBC2 0446 0080                  		subi.w	#$80,d6
0000FBC6 6400                       		bhs.s	loc_D93C
0000FBC8 7C00                       		moveq	#0,d6
0000FBCA                            
0000FBCA                            loc_D93C:
0000FBCA 0246 FF80                  		andi.w	#$FF80,d6
0000FBCE 2078 F770                  		movea.l	(v_opl_data).w,a0
0000FBD2                            
0000FBD2                            loc_D944:
0000FBD2 BC50                       		cmp.w	(a0),d6
0000FBD4 6300                       		bls.s	loc_D956
0000FBD6 4A28 0004                  		tst.b	4(a0)
0000FBDA 6A00                       		bpl.s	loc_D952
0000FBDC 1412                       		move.b	(a2),d2
0000FBDE 5212                       		addq.b	#1,(a2)
0000FBE0                            
0000FBE0                            loc_D952:
0000FBE0 5C48                       		addq.w	#6,a0
0000FBE2 60EE                       		bra.s	loc_D944
0000FBE4                            ; ===========================================================================
0000FBE4                            
0000FBE4                            loc_D956:
0000FBE4 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FBE8 2078 F774                  		movea.l	(v_opl_data+4).w,a0
0000FBEC 0446 0080                  		subi.w	#$80,d6
0000FBF0 6500                       		blo.s	loc_D976
0000FBF2                            
0000FBF2                            loc_D964:
0000FBF2 BC50                       		cmp.w	(a0),d6
0000FBF4 6300                       		bls.s	loc_D976
0000FBF6 4A28 0004                  		tst.b	4(a0)
0000FBFA 6A00                       		bpl.s	loc_D972
0000FBFC 522A 0001                  		addq.b	#1,1(a2)
0000FC00                            
0000FC00                            loc_D972:
0000FC00 5C48                       		addq.w	#6,a0
0000FC02 60EE                       		bra.s	loc_D964
0000FC04                            ; ===========================================================================
0000FC04                            
0000FC04                            loc_D976:
0000FC04 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FC08 31FC FFFF F76E             		move.w	#-1,(v_opl_screen).w
0000FC0E                            
0000FC0E                            OPL_Next:
0000FC0E 45F8 FC00                  		lea	(v_objstate).w,a2
0000FC12 7400                       		moveq	#0,d2
0000FC14 3C38 F700                  		move.w	(v_screenposx).w,d6
0000FC18 0246 FF80                  		andi.w	#$FF80,d6
0000FC1C BC78 F76E                  		cmp.w	(v_opl_screen).w,d6
0000FC20 6700 0000                  		beq.w	locret_DA3A
0000FC24 6C00                       		bge.s	loc_D9F6
0000FC26 31C6 F76E                  		move.w	d6,(v_opl_screen).w
0000FC2A 2078 F774                  		movea.l	(v_opl_data+4).w,a0
0000FC2E 0446 0080                  		subi.w	#$80,d6
0000FC32 6500                       		blo.s	loc_D9D2
0000FC34                            
0000FC34                            loc_D9A6:
0000FC34 BC68 FFFA                  		cmp.w	-6(a0),d6
0000FC38 6C00                       		bge.s	loc_D9D2
0000FC3A 5D48                       		subq.w	#6,a0
0000FC3C 4A28 0004                  		tst.b	4(a0)
0000FC40 6A00                       		bpl.s	loc_D9BC
0000FC42 532A 0001                  		subq.b	#1,1(a2)
0000FC46 142A 0001                  		move.b	1(a2),d2
0000FC4A                            
0000FC4A                            loc_D9BC:
0000FC4A 6100 0000                  		bsr.w	loc_DA3C
0000FC4E 6600                       		bne.s	loc_D9C6
0000FC50 5D48                       		subq.w	#6,a0
0000FC52 60E0                       		bra.s	loc_D9A6
0000FC54                            ; ===========================================================================
0000FC54                            
0000FC54                            loc_D9C6:
0000FC54 4A28 0004                  		tst.b	4(a0)
0000FC58 6A00                       		bpl.s	loc_D9D0
0000FC5A 522A 0001                  		addq.b	#1,1(a2)
0000FC5E                            
0000FC5E                            loc_D9D0:
0000FC5E 5C48                       		addq.w	#6,a0
0000FC60                            
0000FC60                            loc_D9D2:
0000FC60 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FC64 2078 F770                  		movea.l	(v_opl_data).w,a0
0000FC68 0646 0300                  		addi.w	#$300,d6
0000FC6C                            
0000FC6C                            loc_D9DE:
0000FC6C BC68 FFFA                  		cmp.w	-6(a0),d6
0000FC70 6E00                       		bgt.s	loc_D9F0
0000FC72 4A28 FFFE                  		tst.b	-2(a0)
0000FC76 6A00                       		bpl.s	loc_D9EC
0000FC78 5312                       		subq.b	#1,(a2)
0000FC7A                            
0000FC7A                            loc_D9EC:
0000FC7A 5D48                       		subq.w	#6,a0
0000FC7C 60EE                       		bra.s	loc_D9DE
0000FC7E                            ; ===========================================================================
0000FC7E                            
0000FC7E                            loc_D9F0:
0000FC7E 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FC82 4E75                       		rts	
0000FC84                            ; ===========================================================================
0000FC84                            
0000FC84                            loc_D9F6:
0000FC84 31C6 F76E                  		move.w	d6,(v_opl_screen).w
0000FC88 2078 F770                  		movea.l	(v_opl_data).w,a0
0000FC8C 0646 0280                  		addi.w	#$280,d6
0000FC90                            
0000FC90                            loc_DA02:
0000FC90 BC50                       		cmp.w	(a0),d6
0000FC92 6300                       		bls.s	loc_DA16
0000FC94 4A28 0004                  		tst.b	4(a0)
0000FC98 6A00                       		bpl.s	loc_DA10
0000FC9A 1412                       		move.b	(a2),d2
0000FC9C 5212                       		addq.b	#1,(a2)
0000FC9E                            
0000FC9E                            loc_DA10:
0000FC9E 6100 0000                  		bsr.w	loc_DA3C
0000FCA2 67EC                       		beq.s	loc_DA02
0000FCA4                            
0000FCA4                            loc_DA16:
0000FCA4 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FCA8 2078 F774                  		movea.l	(v_opl_data+4).w,a0
0000FCAC 0446 0300                  		subi.w	#$300,d6
0000FCB0 6500                       		blo.s	loc_DA36
0000FCB2                            
0000FCB2                            loc_DA24:
0000FCB2 BC50                       		cmp.w	(a0),d6
0000FCB4 6300                       		bls.s	loc_DA36
0000FCB6 4A28 0004                  		tst.b	4(a0)
0000FCBA 6A00                       		bpl.s	loc_DA32
0000FCBC 522A 0001                  		addq.b	#1,1(a2)
0000FCC0                            
0000FCC0                            loc_DA32:
0000FCC0 5C48                       		addq.w	#6,a0
0000FCC2 60EE                       		bra.s	loc_DA24
0000FCC4                            ; ===========================================================================
0000FCC4                            
0000FCC4                            loc_DA36:
0000FCC4 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FCC8                            
0000FCC8                            locret_DA3A:
0000FCC8 4E75                       		rts	
0000FCCA                            ; ===========================================================================
0000FCCA                            
0000FCCA                            loc_DA3C:
0000FCCA 4A28 0004                  		tst.b	4(a0)
0000FCCE 6A00                       		bpl.s	OPL_MakeItem
0000FCD0 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000FCD6 6700                       		beq.s	OPL_MakeItem
0000FCD8 5C48                       		addq.w	#6,a0
0000FCDA 7000                       		moveq	#0,d0
0000FCDC 4E75                       		rts	
0000FCDE                            ; ===========================================================================
0000FCDE                            
0000FCDE                            OPL_MakeItem:
0000FCDE 6100 0000                  		bsr.w	FindFreeObj
0000FCE2 6600                       		bne.s	locret_DA8A
0000FCE4 3358 0008                  		move.w	(a0)+,obX(a1)
0000FCE8 3018                       		move.w	(a0)+,d0
0000FCEA 3200                       		move.w	d0,d1
0000FCEC 0240 0FFF                  		andi.w	#$FFF,d0
0000FCF0 3340 000C                  		move.w	d0,obY(a1)
0000FCF4 E559                       		rol.w	#2,d1
0000FCF6 0201 0003                  		andi.b	#3,d1
0000FCFA 1341 0001                  		move.b	d1,obRender(a1)
0000FCFE 1341 0022                  		move.b	d1,obStatus(a1)
0000FD02 1018                       		move.b	(a0)+,d0
0000FD04 6A00                       		bpl.s	loc_DA80
0000FD06 0200 007F                  		andi.b	#$7F,d0
0000FD0A 1342 0023                  		move.b	d2,obRespawnNo(a1)
0000FD0E                            
0000FD0E                            loc_DA80:
0000FD0E 1280                       		move.b	d0,0(a1)
0000FD10 1358 0028                  		move.b	(a0)+,obSubtype(a1)
0000FD14 7000                       		moveq	#0,d0
0000FD16                            
0000FD16                            locret_DA8A:
0000FD16 4E75                       		rts	
0000FD18                            
0000FD18                            		include	"_incObj\sub FindFreeObj.asm"
0000FD18                            ; ---------------------------------------------------------------------------
0000FD18                            ; Subroutine to find a free object space
0000FD18                            
0000FD18                            ; output:
0000FD18                            ;	a1 = free position in object RAM
0000FD18                            ; ---------------------------------------------------------------------------
0000FD18                            
0000FD18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FD18                            
0000FD18                            
0000FD18                            FindFreeObj:
0000FD18 43F8 D800                  		lea	(v_objspace+$800).w,a1 ; start address for object RAM
0000FD1C 303C 005F                  		move.w	#$5F,d0
0000FD20                            
0000FD20                            	FFree_Loop:
0000FD20 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000FD22 6700                       		beq.s	FFree_Found	; if yes, branch
0000FD24 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000FD28 51C8 FFF6                  		dbf	d0,FFree_Loop	; repeat $5F times
0000FD2C                            
0000FD2C                            	FFree_Found:
0000FD2C 4E75                       		rts	
0000FD2E                            
0000FD2E                            ; End of function FindFreeObj
0000FD2E                            
0000FD2E                            
0000FD2E                            ; ---------------------------------------------------------------------------
0000FD2E                            ; Subroutine to find a free object space AFTER the current one
0000FD2E                            
0000FD2E                            ; output:
0000FD2E                            ;	a1 = free position in object RAM
0000FD2E                            ; ---------------------------------------------------------------------------
0000FD2E                            
0000FD2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FD2E                            
0000FD2E                            
0000FD2E                            FindNextFreeObj:
0000FD2E 2248                       		movea.l	a0,a1
0000FD30 303C F000                  		move.w	#$F000,d0
0000FD34 9048                       		sub.w	a0,d0
0000FD36 EC48                       		lsr.w	#6,d0
0000FD38 5340                       		subq.w	#1,d0
0000FD3A 6500                       		bcs.s	NFree_Found
0000FD3C                            
0000FD3C                            	NFree_Loop:
0000FD3C 4A11                       		tst.b	(a1)
0000FD3E 6700                       		beq.s	NFree_Found
0000FD40 43E9 0040                  		lea	$40(a1),a1
0000FD44 51C8 FFF6                  		dbf	d0,NFree_Loop
0000FD48                            
0000FD48                            	NFree_Found:
0000FD48 4E75                       		rts	
0000FD4A                            
0000FD4A                            ; End of function FindNextFreeObj
0000FD4A                            ; End of function FindNextFreeObj
0000FD4A                            		include	"_incObj\41 Springs.asm"
0000FD4A                            ; ---------------------------------------------------------------------------
0000FD4A                            ; Object 41 - springs
0000FD4A                            ; ---------------------------------------------------------------------------
0000FD4A                            
0000FD4A                            Springs:
0000FD4A 7000                       		moveq	#0,d0
0000FD4C 1028 0024                  		move.b	obRoutine(a0),d0
0000FD50 323B 0000                  		move.w	Spring_Index(pc,d0.w),d1
0000FD54 4EBB 1000                  		jsr	Spring_Index(pc,d1.w)
0000FD58 6100 FB32                  		bsr.w	DisplaySprite
0000FD7A 4E75                       		rts	
0000FD7C                            ; ===========================================================================
0000FD7C 0000                       Spring_Index:	dc.w Spring_Main-Spring_Index
0000FD7E 0000                       		dc.w Spring_Up-Spring_Index
0000FD80 0000                       		dc.w Spring_AniUp-Spring_Index
0000FD82 0000                       		dc.w Spring_ResetUp-Spring_Index
0000FD84 0000                       		dc.w Spring_LR-Spring_Index
0000FD86 0000                       		dc.w Spring_AniLR-Spring_Index
0000FD88 0000                       		dc.w Spring_ResetLR-Spring_Index
0000FD8A 0000                       		dc.w Spring_Dwn-Spring_Index
0000FD8C 0000                       		dc.w Spring_AniDwn-Spring_Index
0000FD8E 0000                       		dc.w Spring_ResetDwn-Spring_Index
0000FD90                            
0000FD90 =00000030                  spring_pow:	equ $30			; power of current spring
0000FD90                            
0000FD90 F000                       Spring_Powers:	dc.w -$1000		; power	of red spring
0000FD92 F600                       		dc.w -$A00		; power	of yellow spring
0000FD94                            ; ===========================================================================
0000FD94                            
0000FD94                            Spring_Main:	; Routine 0
0000FD94 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FD98 217C 0000 0000 0004        		move.l	#Map_Spring,obMap(a0)
0000FDA0 317C 0523 0002             		move.w	#$523,obGfx(a0)
0000FDA6 0028 0004 0001             		ori.b	#4,obRender(a0)
0000FDAC 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000FDB2 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000FDB8 1028 0028                  		move.b	obSubtype(a0),d0
0000FDBC 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000FDC0 6700                       		beq.s	Spring_NotLR	; if not, branch
0000FDC2                            
0000FDC2 117C 0008 0024             		move.b	#8,obRoutine(a0) ; use "Spring_LR" routine
0000FDC8 117C 0001 001C             		move.b	#1,obAnim(a0)
0000FDCE 117C 0003 001A             		move.b	#3,obFrame(a0)
0000FDD4 317C 0533 0002             		move.w	#$533,obGfx(a0)
0000FDDA 117C 0008 0014             		move.b	#8,obActWid(a0)
0000FDE0                            
0000FDE0                            	Spring_NotLR:
0000FDE0 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000FDE4 6700                       		beq.s	Spring_NotDwn	; if not, branch
0000FDE6                            
0000FDE6 117C 000E 0024             		move.b	#$E,obRoutine(a0) ; use "Spring_Dwn" routine
0000FDEC 08E8 0001 0022             		bset	#1,obStatus(a0)
0000FDF2                            
0000FDF2                            	Spring_NotDwn:
0000FDF2 0800 0001                  		btst	#1,d0
0000FDF6 6700                       		beq.s	loc_DB72
0000FDF8 08E8 0005 0002             		bset	#5,obGfx(a0)
0000FDFE                            
0000FDFE                            loc_DB72:
0000FDFE 0240 000F                  		andi.w	#$F,d0
0000FE02 317B 008C 0030             		move.w	Spring_Powers(pc,d0.w),spring_pow(a0)
0000FE08 4E75                       		rts	
0000FE0A                            ; ===========================================================================
0000FE0A                            
0000FE0A                            Spring_Up:	; Routine 2
0000FE0A 323C 001B                  		move.w	#$1B,d1
0000FE0E 343C 0008                  		move.w	#8,d2
0000FE12 363C 0010                  		move.w	#$10,d3
0000FE16 3828 0008                  		move.w	obX(a0),d4
0000FE1A 6100 0000                  		bsr.w	SolidObject
0000FE1E 4A28 0025                  		tst.b	obSolid(a0)	; is Sonic on top of the spring?
0000FE22 6600                       		bne.s	Spring_BounceUp	; if yes, branch
0000FE24 4E75                       		rts	
0000FE26                            ; ===========================================================================
0000FE26                            
0000FE26                            Spring_BounceUp:
0000FE26 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FE2A 5069 000C                  		addq.w	#8,obY(a1)
0000FE2E 3368 0030 0012             		move.w	spring_pow(a0),obVelY(a1) ; move Sonic upwards
0000FE34 08E9 0001 0022             		bset	#1,obStatus(a1)
0000FE3A 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000FE40 137C 0000 001C             		move.b	#id_Spring,obAnim(a1) ; use "bouncing" animation
0000FE46 137C 0002 0024             		move.b	#2,obRoutine(a1)
0000FE4C 08A8 0003 0022             		bclr	#3,obStatus(a0)
0000FE52 4228 0025                  		clr.b	obSolid(a0)
0000FE60                            
0000FE60                            Spring_AniUp:	; Routine 4
0000FE60 43F9 0000 0000             		lea	(Ani_Spring).l,a1
0000FE66 6000 CAD0                  		bra.w	AnimateSprite
0000FE6A                            ; ===========================================================================
0000FE6A                            
0000FE6A                            Spring_ResetUp:	; Routine 6
0000FE6A 117C 0001 001D             		move.b	#1,obNextAni(a0) ; reset animation
0000FE70 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto "Spring_Up" routine
0000FE74 4E75                       		rts	
0000FE76                            ; ===========================================================================
0000FE76                            
0000FE76                            Spring_LR:	; Routine 8
0000FE76 323C 0013                  		move.w	#$13,d1
0000FE7A 343C 000E                  		move.w	#$E,d2
0000FE7E 363C 000F                  		move.w	#$F,d3
0000FE82 3828 0008                  		move.w	obX(a0),d4
0000FE86 6100 0000                  		bsr.w	SolidObject
0000FE8A 0C28 0002 0024             		cmpi.b	#2,obRoutine(a0)
0000FE90 6600                       		bne.s	loc_DC0C
0000FE92 117C 0008 0024             		move.b	#8,obRoutine(a0)
0000FE98                            
0000FE98                            loc_DC0C:
0000FE98 0828 0005 0022             		btst	#5,obStatus(a0)
0000FE9E 6600                       		bne.s	Spring_BounceLR
0000FEA0 4E75                       		rts	
0000FEA2                            ; ===========================================================================
0000FEA2                            
0000FEA2                            Spring_BounceLR:
0000FEA2 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FEA6 3368 0030 0010             		move.w	spring_pow(a0),obVelX(a1) ; move Sonic to the left
0000FEAC 5069 0008                  		addq.w	#8,obX(a1)
0000FEB0 0828 0000 0022             		btst	#0,obStatus(a0)	; is object flipped?
0000FEB6 6600                       		bne.s	Spring_Flipped	; if yes, branch
0000FEB8 0469 0010 0008             		subi.w	#$10,obX(a1)
0000FEBE 4469 0010                  		neg.w	obVelX(a1)	; move Sonic to	the right
0000FEC2                            
0000FEC2                            	Spring_Flipped:
0000FEC2 337C 000F 003E             		move.w	#$F,$3E(a1)
0000FEC8 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
0000FECE 0869 0000 0022             		bchg	#0,obStatus(a1)
0000FED4 0829 0002 0022             		btst	#2,obStatus(a1)
0000FEDA 6600                       		bne.s	loc_DC56
0000FEDC 137C 0000 001C             		move.b	#id_Walk,obAnim(a1)	; use walking animation
0000FEE2                            
0000FEE2                            loc_DC56:
0000FEE2 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000FEE8 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000FEF8                            
0000FEF8                            Spring_AniLR:	; Routine $A
0000FEF8 4278 C904                  		clr.w ($FFFFC904).w	; clear screen delay counter
0000FEFC 43F9 0000 0000             		lea	(Ani_Spring).l,a1
0000FF02 6000 CA34                  		bra.w	AnimateSprite
0000FF06                            ; ===========================================================================
0000FF06                            
0000FF06                            Spring_ResetLR:	; Routine $C
0000FF06 117C 0002 001D             		move.b	#2,obNextAni(a0) ; reset animation
0000FF0C 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto "Spring_LR" routine
0000FF10 4E75                       		rts	
0000FF12                            ; ===========================================================================
0000FF12                            
0000FF12                            Spring_Dwn:	; Routine $E
0000FF12 323C 001B                  		move.w	#$1B,d1
0000FF16 343C 0008                  		move.w	#8,d2
0000FF1A 363C 0010                  		move.w	#$10,d3
0000FF1E 3828 0008                  		move.w	obX(a0),d4
0000FF22 6100 0000                  		bsr.w	SolidObject
0000FF26 0C28 0002 0024             		cmpi.b	#2,obRoutine(a0)
0000FF2C 6600                       		bne.s	loc_DCA4
0000FF2E 117C 000E 0024             		move.b	#$E,obRoutine(a0)
0000FF34                            
0000FF34                            loc_DCA4:
0000FF34 4A28 0025                  		tst.b	obSolid(a0)
0000FF38 6600                       		bne.s	locret_DCAE
0000FF3A 4A44                       		tst.w	d4
0000FF3C 6B00                       		bmi.s	Spring_BounceDwn
0000FF3E                            
0000FF3E                            locret_DCAE:
0000FF3E 4E75                       		rts	
0000FF40                            ; ===========================================================================
0000FF40                            
0000FF40                            Spring_BounceDwn:
0000FF40 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FF44 5169 000C                  		subq.w	#8,obY(a1)
0000FF48 3368 0030 0012             		move.w	spring_pow(a0),obVelY(a1)
0000FF4E 4469 0012                  		neg.w	obVelY(a1)	; move Sonic downwards
0000FF52 08E9 0001 0022             		bset	#1,obStatus(a1)
0000FF58 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000FF5E 137C 0002 0024             		move.b	#2,obRoutine(a1)
0000FF64 08A8 0003 0022             		bclr	#3,obStatus(a0)
0000FF6A 4228 0025                  		clr.b	obSolid(a0)
0000FF78                            
0000FF78                            Spring_AniDwn:	; Routine $10
0000FF78 43F9 0000 0000             		lea	(Ani_Spring).l,a1
0000FF7E 6000 C9B8                  		bra.w	AnimateSprite
0000FF82                            ; ===========================================================================
0000FF82                            
0000FF82                            Spring_ResetDwn:
0000FF82                            		; Routine $12
0000FF82 117C 0001 001D             		move.b	#1,obNextAni(a0) ; reset animation
0000FF88 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto "Spring_Dwn" routine
0000FF8C 4E75                       		rts	
0000FF8C 4E75                       		rts	
0000FF8E                            		include	"_anim\Springs.asm"
0000FF8E                            ; ---------------------------------------------------------------------------
0000FF8E                            ; Animation script - springs
0000FF8E                            ; ---------------------------------------------------------------------------
0000FF8E 0000                       Ani_Spring:	dc.w byte_DD02-Ani_Spring
0000FF90 0000                       		dc.w byte_DD0E-Ani_Spring
0000FF92 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, afRoutine
0000FF9E 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, afRoutine
0000FFAA                            		even
0000FFAA                            		even
0000FFAA                            Map_Spring:	include	"_maps\Springs.asm"
0000FFAA                            ; ---------------------------------------------------------------------------
0000FFAA                            ; Sprite mappings - springs
0000FFAA                            ; ---------------------------------------------------------------------------
0000FFAA                            Map_Spring_internal:
0000FFAA 0000                       		dc.w M_Spg_Up-Map_Spring_internal
0000FFAC 0000                       		dc.w M_Spg_UpFlat-Map_Spring_internal
0000FFAE 0000                       		dc.w M_Spg_UpExt-Map_Spring_internal
0000FFB0 0000                       		dc.w M_Spg_Left-Map_Spring_internal
0000FFB2 0000                       		dc.w M_Spg_LeftFlat-Map_Spring_internal
0000FFB4 0000                       		dc.w M_Spg_LeftExt-Map_Spring_internal
0000FFB6 02                         M_Spg_Up:	dc.b 2			; facing up
0000FFB7 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000FFBC 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000FFC1 01                         M_Spg_UpFlat:	dc.b 1			; facing up, flattened
0000FFC2 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000FFC7 03                         M_Spg_UpExt:	dc.b 3			; facing up, extended
0000FFC8 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000FFCD F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000FFD2 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000FFD7 01                         M_Spg_Left:	dc.b 1			; facing left
0000FFD8 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000FFDD 01                         M_Spg_LeftFlat:	dc.b 1			; facing left, flattened
0000FFDE F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000FFE3 04                         M_Spg_LeftExt:	dc.b 4			; facing left, extended
0000FFE4 F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000FFE9 F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000FFEE F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000FFF3 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000FFF8                            		even
0000FFF8                            		even
0000FFF8                            
0000FFF8                            		include	"_incObj\42 Newtron.asm"
0000FFF8                            ; ---------------------------------------------------------------------------
0000FFF8                            ; Object 42 - Newtron enemy (GHZ)
0000FFF8                            ; ---------------------------------------------------------------------------
0000FFF8                            
0000FFF8                            Newtron:
0000FFF8 7000                       		moveq	#0,d0
0000FFFA 1028 0024                  		move.b	obRoutine(a0),d0
0000FFFE 323B 0000                  		move.w	Newt_Index(pc,d0.w),d1
00010002 4EFB 1000                  		jmp	Newt_Index(pc,d1.w)
00010006                            ; ===========================================================================
00010006 0000                       Newt_Index:	dc.w Newt_Main-Newt_Index
00010008 0000                       		dc.w Newt_Action-Newt_Index
0001000A 0000                       		dc.w Newt_Delete-Newt_Index
0001000C                            ; ===========================================================================
0001000C                            
0001000C                            Newt_Main:	; Routine 0
0001000C 5428 0024                  		addq.b	#2,obRoutine(a0)
00010010 217C 0000 0000 0004        		move.l	#Map_Newt,obMap(a0)
00010018 317C 049B 0002             		move.w	#$49B,obGfx(a0)
0001001E 117C 0004 0001             		move.b	#4,obRender(a0)
00010024 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001002A 117C 0014 0014             		move.b	#$14,obActWid(a0)
00010030 117C 0010 0016             		move.b	#$10,obHeight(a0)
00010036 117C 0008 0017             		move.b	#8,obWidth(a0)
0001003C                            
0001003C                            Newt_Action:	; Routine 2
0001003C 7000                       		moveq	#0,d0
0001003E 1028 0025                  		move.b	ob2ndRout(a0),d0
00010042 323B 0000                  		move.w	@index(pc,d0.w),d1
00010046 4EBB 1000                  		jsr	@index(pc,d1.w)
0001004A 43F9 0000 0000             		lea	(Ani_Newt).l,a1
00010050 6100 C8E6                  		bsr.w	AnimateSprite
00010054 6000 0000                  		bra.w	RememberState
00010058                            ; ===========================================================================
00010058 0000                       @index:		dc.w @chkdistance-@index
0001005A 0000                       		dc.w @type00-@index
0001005C 0000                       		dc.w @matchfloor-@index
0001005E 0000                       		dc.w @speed-@index
00010060 0000                       		dc.w @type01-@index
00010062                            ; ===========================================================================
00010062                            
00010062                            @chkdistance:
00010062 08E8 0000 0022             		bset	#0,obStatus(a0)
00010068 3038 D008                  		move.w	(v_player+obX).w,d0
0001006C 9068 0008                  		sub.w	obX(a0),d0
00010070 6400                       		bcc.s	@sonicisright
00010072 4440                       		neg.w	d0
00010074 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001007A                            
0001007A                            	@sonicisright:
0001007A 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0001007E 6400                       		bcc.s	@outofrange	; if not, branch
00010080 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto @type00 next
00010084 117C 0001 001C             		move.b	#1,obAnim(a0)
0001008A 4A28 0028                  		tst.b	obSubtype(a0)	; check	object type
0001008E 6700                       		beq.s	@istype00	; if type is 00, branch
00010090                            
00010090 317C 249B 0002             		move.w	#$249B,obGfx(a0)
00010096 117C 0008 0025             		move.b	#8,ob2ndRout(a0) ; goto @type01 next
0001009C 117C 0004 001C             		move.b	#4,obAnim(a0)	; use different	animation
000100A2                            
000100A2                            	@outofrange:
000100A2                            	@istype00:
000100A2 4E75                       		rts	
000100A4                            ; ===========================================================================
000100A4                            
000100A4                            @type00:
000100A4 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)	; has "appearing" animation finished?
000100AA 6400                       		bcc.s	@fall		; is yes, branch
000100AC 08E8 0000 0022             		bset	#0,obStatus(a0)
000100B2 3038 D008                  		move.w	(v_player+obX).w,d0
000100B6 9068 0008                  		sub.w	obX(a0),d0
000100BA 6400                       		bcc.s	@sonicisright2
000100BC 08A8 0000 0022             		bclr	#0,obStatus(a0)
000100C2                            
000100C2                            	@sonicisright2:
000100C2 4E75                       		rts	
000100C4                            ; ===========================================================================
000100C4                            
000100C4                            	@fall:
000100C4 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)
000100CA 6600                       		bne.s	@loc_DE42
000100CC 117C 000C 0020             		move.b	#$C,obColType(a0)
000100D2                            
000100D2                            	@loc_DE42:
000100D2 6100 F76C                  		bsr.w	ObjectFall
000100D6 6100 0000                  		bsr.w	ObjFloorDist
000100DA 4A41                       		tst.w	d1		; has newtron hit the floor?
000100DC 6A00                       		bpl.s	@keepfalling	; if not, branch
000100DE                            
000100DE D368 000C                  		add.w	d1,obY(a0)
000100E2 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop newtron falling
000100E8 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000100EC 117C 0002 001C             		move.b	#2,obAnim(a0)
000100F2 0828 0005 0002             		btst	#5,obGfx(a0)
000100F8 6700                       		beq.s	@pppppppp
000100FA 5228 001C                  		addq.b	#1,obAnim(a0)
000100FE                            
000100FE                            	@pppppppp:
000100FE 117C 000D 0020             		move.b	#$D,obColType(a0)
00010104 317C 0200 0010             		move.w	#$200,obVelX(a0) ; move newtron horizontally
0001010A 0828 0000 0022             		btst	#0,obStatus(a0)
00010110 6600                       		bne.s	@keepfalling
00010112 4468 0010                  		neg.w	obVelX(a0)
00010116                            
00010116                            	@keepfalling:
00010116 4E75                       		rts	
00010118                            ; ===========================================================================
00010118                            
00010118                            @matchfloor:
00010118 6100 F75E                  		bsr.w	SpeedToPos
0001011C 6100 0000                  		bsr.w	ObjFloorDist
00010120 0C41 FFF8                  		cmpi.w	#-8,d1
00010124 6D00                       		blt.s	@nextroutine
00010126 0C41 000C                  		cmpi.w	#$C,d1
0001012A 6C00                       		bge.s	@nextroutine
0001012C D368 000C                  		add.w	d1,obY(a0)	; match	newtron's position with floor
00010130 4E75                       		rts	
00010132                            ; ===========================================================================
00010132                            
00010132                            	@nextroutine:
00010132 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto @speed next
00010136 4E75                       		rts	
00010138                            ; ===========================================================================
00010138                            
00010138                            @speed:
00010138 6100 F73E                  		bsr.w	SpeedToPos
0001013C 4E75                       		rts	
0001013E                            ; ===========================================================================
0001013E                            
0001013E                            @type01:
0001013E 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)
00010144 6600                       		bne.s	@firemissile
00010146 117C 000C 0020             		move.b	#$C,obColType(a0)
0001014C                            
0001014C                            	@firemissile:
0001014C 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
00010152 6600                       		bne.s	@fail
00010154 4A28 0032                  		tst.b	$32(a0)
00010158 6600                       		bne.s	@fail
0001015A 117C 0001 0032             		move.b	#1,$32(a0)
00010160 6100 FBB6                  		bsr.w	FindFreeObj
00010164 6600                       		bne.s	@fail
00010166 12BC 0023                  		move.b	#id_Missile,0(a1) ; load missile object
0001016A 3368 0008 0008             		move.w	obX(a0),obX(a1)
00010170 3368 000C 000C             		move.w	obY(a0),obY(a1)
00010176 5169 000C                  		subq.w	#8,obY(a1)
0001017A 337C 0200 0010             		move.w	#$200,obVelX(a1)
00010180 303C 0014                  		move.w	#$14,d0
00010184 0828 0000 0022             		btst	#0,obStatus(a0)
0001018A 6600                       		bne.s	@noflip
0001018C 4440                       		neg.w	d0
0001018E 4469 0010                  		neg.w	obVelX(a1)
00010192                            
00010192                            	@noflip:
00010192 D169 0008                  		add.w	d0,obX(a1)
00010196 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
0001019C 137C 0001 0028             		move.b	#1,obSubtype(a1)
000101A2                            
000101A2                            	@fail:
000101A2 4E75                       		rts	
000101A4                            ; ===========================================================================
000101A4                            
000101A4                            Newt_Delete:	; Routine 4
000101A4 6000 F726                  		bra.w	DeleteObject
000101A4 6000 F726                  		bra.w	DeleteObject
000101A8                            		include	"_anim\Newtron.asm"
000101A8                            ; ---------------------------------------------------------------------------
000101A8                            ; Animation script - Newtron enemy
000101A8                            ; ---------------------------------------------------------------------------
000101A8 0000                       Ani_Newt:	dc.w A_Newt_Blank-Ani_Newt
000101AA 0000                       		dc.w A_Newt_Drop-Ani_Newt
000101AC 0000                       		dc.w A_Newt_Fly1-Ani_Newt
000101AE 0000                       		dc.w A_Newt_Fly2-Ani_Newt
000101B0 0000                       		dc.w A_Newt_Fires-Ani_Newt
000101B2 0F0A FF                    A_Newt_Blank:	dc.b $F, $A, afEnd
000101B6 00                         		even
000101B6 1300 0103 0405 FE01        A_Newt_Drop:	dc.b $13, 0, 1,	3, 4, 5, afBack, 1
000101BE 0206 07FF                  A_Newt_Fly1:	dc.b 2,	6, 7, afEnd
000101C2 0208 09FF                  A_Newt_Fly2:	dc.b 2,	8, 9, afEnd
000101C6 1300 0101 0201 0100 FC     A_Newt_Fires:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, afRoutine
000101D0 00                         		even
000101D0 00                         		even
000101D0                            Map_Newt:	include	"_maps\Newtron.asm"
000101D0                            ; ---------------------------------------------------------------------------
000101D0                            ; Sprite mappings - Newtron enemy (GHZ)
000101D0                            ; ---------------------------------------------------------------------------
000101D0                            Map_Newt_internal:
000101D0 0000                       		dc.w M_Newt_Trans-Map_Newt_internal
000101D2 0000                       		dc.w M_Newt_Norm-Map_Newt_internal
000101D4 0000                       		dc.w M_Newt_Fires-Map_Newt_internal
000101D6 0000                       		dc.w M_Newt_Drop1-Map_Newt_internal
000101D8 0000                       		dc.w M_Newt_Drop2-Map_Newt_internal
000101DA 0000                       		dc.w M_Newt_Drop3-Map_Newt_internal
000101DC 0000                       		dc.w M_Newt_Fly1a-Map_Newt_internal
000101DE 0000                       		dc.w M_Newt_Fly1b-Map_Newt_internal
000101E0 0000                       		dc.w M_Newt_Fly2a-Map_Newt_internal
000101E2 0000                       		dc.w M_Newt_Fly2b-Map_Newt_internal
000101E4 0000                       		dc.w M_Newt_Blank-Map_Newt_internal
000101E6 03                         M_Newt_Trans:	dc.b 3
000101E7 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC	; partially visible
000101EC F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
000101F1 FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
000101F6 03                         M_Newt_Norm:	dc.b 3
000101F7 EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC ; visible
000101FC EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
00010201 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
00010206 03                         M_Newt_Fires:	dc.b 3
00010207 EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC ; open mouth, firing
0001020C EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
00010211 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
00010216 04                         M_Newt_Drop1:	dc.b 4
00010217 EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC ; dropping
0001021C EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
00010221 FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
00010226 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0001022B 03                         M_Newt_Drop2:	dc.b 3
0001022C F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
00010231 FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
00010236 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0001023B 02                         M_Newt_Drop3:	dc.b 2
0001023C F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
00010241 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
00010246 03                         M_Newt_Fly1a:	dc.b 3
00010247 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC ; flying
0001024C F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
00010251 FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
00010256 03                         M_Newt_Fly1b:	dc.b 3
00010257 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0001025C F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
00010261 FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
00010266 03                         M_Newt_Fly2a:	dc.b 3
00010267 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0001026C F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
00010271 FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
00010276 03                         M_Newt_Fly2b:	dc.b 3
00010277 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0001027C F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
00010281 FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
00010286 00                         M_Newt_Blank:	dc.b 0
00010288 00                         		even
00010288 00                         		even
00010288                            		include	"_incObj\43 Roller.asm"
00010288                            ; ---------------------------------------------------------------------------
00010288                            ; Object 43 - Roller enemy (SYZ)
00010288                            ; ---------------------------------------------------------------------------
00010288                            
00010288                            Roller:
00010288 7000                       		moveq	#0,d0
0001028A 1028 0024                  		move.b	obRoutine(a0),d0
0001028E 323B 0000                  		move.w	Roll_Index(pc,d0.w),d1
00010292 4EFB 1000                  		jmp	Roll_Index(pc,d1.w)
00010296                            ; ===========================================================================
00010296 0000                       Roll_Index:	dc.w Roll_Main-Roll_Index
00010298 0000                       		dc.w Roll_Action-Roll_Index
0001029A                            ; ===========================================================================
0001029A                            
0001029A                            Roll_Main:	; Routine 0
0001029A 117C 000E 0016             		move.b	#$E,obHeight(a0)
000102A0 117C 0008 0017             		move.b	#8,obWidth(a0)
000102A6 6100 F598                  		bsr.w	ObjectFall
000102AA 6100 0000                  		bsr.w	ObjFloorDist
000102AE 4A41                       		tst.w	d1
000102B0 6A00                       		bpl.s	locret_E052
000102B2 D368 000C                  		add.w	d1,obY(a0)	; match	roller's position with the floor
000102B6 317C 0000 0012             		move.w	#0,obVelY(a0)
000102BC 5428 0024                  		addq.b	#2,obRoutine(a0)
000102C0 217C 0000 0000 0004        		move.l	#Map_Roll,obMap(a0)
000102C8 317C 04B8 0002             		move.w	#$4B8,obGfx(a0)
000102CE 117C 0004 0001             		move.b	#4,obRender(a0)
000102D4 317C 0200 0018             		move.w	#$200,obPriority(a0)
000102DA 117C 0010 0014             		move.b	#$10,obActWid(a0)
000102E0                            
000102E0                            	locret_E052:
000102E0 4E75                       		rts	
000102E2                            ; ===========================================================================
000102E2                            
000102E2                            Roll_Action:	; Routine 2
000102E2 7000                       		moveq	#0,d0
000102E4 1028 0025                  		move.b	ob2ndRout(a0),d0
000102E8 323B 0000                  		move.w	Roll_Index2(pc,d0.w),d1
000102EC 4EBB 1000                  		jsr	Roll_Index2(pc,d1.w)
000102F0 43F9 0000 0000             		lea	(Ani_Roll).l,a1
000102F6 6100 C640                  		bsr.w	AnimateSprite
000102FA 3028 0008                  		move.w	obX(a0),d0
000102FE 0240 FF80                  		andi.w	#$FF80,d0
00010302 3238 F700                  		move.w	(v_screenposx).w,d1
00010306 0441 0080                  		subi.w	#$80,d1
0001030A 0241 FF80                  		andi.w	#$FF80,d1
0001030E 9041                       		sub.w	d1,d0
00010310 0C40 0280                  		cmpi.w	#$280,d0
00010314 6E00 0000                  		bgt.w	Roll_ChkGone
00010318 6000 F572                  		bra.w	DisplaySprite
0001031C                            ; ===========================================================================
0001031C                            
0001031C                            Roll_ChkGone:
0001031C 45F8 FC00                  		lea	(v_objstate).w,a2
00010320 7000                       		moveq	#0,d0
00010322 1028 0023                  		move.b	obRespawnNo(a0),d0
00010326 6700                       		beq.s	Roll_Delete
00010328 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001032E                            
0001032E                            Roll_Delete:
0001032E 6000 F59C                  		bra.w	DeleteObject
00010332                            ; ===========================================================================
00010332 0000                       Roll_Index2:	dc.w Roll_RollChk-Roll_Index2
00010334 0000                       		dc.w Roll_RollNoChk-Roll_Index2
00010336 0000                       		dc.w Roll_ChkJump-Roll_Index2
00010338 0000                       		dc.w Roll_MatchFloor-Roll_Index2
0001033A                            ; ===========================================================================
0001033A                            
0001033A                            Roll_RollChk:
0001033A 3038 D008                  		move.w	(v_player+obX).w,d0
0001033E 0440 0100                  		subi.w	#$100,d0
00010342 6500                       		bcs.s	loc_E0D2
00010344 9068 0008                  		sub.w	obX(a0),d0	; check	distance between Roller	and Sonic
00010348 6500                       		bcs.s	loc_E0D2
0001034A 5828 0025                  		addq.b	#4,ob2ndRout(a0)
0001034E 117C 0002 001C             		move.b	#2,obAnim(a0)
00010354 317C 0700 0010             		move.w	#$700,obVelX(a0) ; move Roller horizontally
0001035A 117C 008E 0020             		move.b	#$8E,obColType(a0) ; make Roller invincible
00010360                            
00010360                            loc_E0D2:
00010360 588F                       		addq.l	#4,sp
00010362 4E75                       		rts	
00010364                            ; ===========================================================================
00010364                            
00010364                            Roll_RollNoChk:
00010364 0C28 0002 001C             		cmpi.b	#2,obAnim(a0)
0001036A 6700                       		beq.s	loc_E0F8
0001036C 5368 0030                  		subq.w	#1,$30(a0)
00010370 6A00                       		bpl.s	locret_E0F6
00010372 117C 0001 001C             		move.b	#1,obAnim(a0)
00010378 317C 0700 0010             		move.w	#$700,obVelX(a0)
0001037E 117C 008E 0020             		move.b	#$8E,obColType(a0)
00010384                            
00010384                            locret_E0F6:
00010384 4E75                       		rts	
00010386                            ; ===========================================================================
00010386                            
00010386                            loc_E0F8:
00010386 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001038A 4E75                       		rts	
0001038C                            ; ===========================================================================
0001038C                            
0001038C                            Roll_ChkJump:
0001038C 6100 0000                  		bsr.w	Roll_Stop
00010390 6100 F4E6                  		bsr.w	SpeedToPos
00010394 6100 0000                  		bsr.w	ObjFloorDist
00010398 0C41 FFF8                  		cmpi.w	#-8,d1
0001039C 6D00                       		blt.s	Roll_Jump
0001039E 0C41 000C                  		cmpi.w	#$C,d1
000103A2 6C00                       		bge.s	Roll_Jump
000103A4 D368 000C                  		add.w	d1,obY(a0)
000103A8 4E75                       		rts	
000103AA                            ; ===========================================================================
000103AA                            
000103AA                            Roll_Jump:
000103AA 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000103AE 08E8 0000 0032             		bset	#0,$32(a0)
000103B4 6700                       		beq.s	locret_E12E
000103B6 317C FA00 0012             		move.w	#-$600,obVelY(a0)	; move Roller vertically
000103BC                            
000103BC                            locret_E12E:
000103BC 4E75                       		rts	
000103BE                            ; ===========================================================================
000103BE                            
000103BE                            Roll_MatchFloor:
000103BE 6100 F480                  		bsr.w	ObjectFall
000103C2 4A68 0012                  		tst.w	obVelY(a0)
000103C6 6B00                       		bmi.s	locret_E150
000103C8 6100 0000                  		bsr.w	ObjFloorDist
000103CC 4A41                       		tst.w	d1
000103CE 6A00                       		bpl.s	locret_E150
000103D0 D368 000C                  		add.w	d1,obY(a0)	; match	Roller's position with the floor
000103D4 5528 0025                  		subq.b	#2,ob2ndRout(a0)
000103D8 317C 0000 0012             		move.w	#0,obVelY(a0)
000103DE                            
000103DE                            locret_E150:
000103DE 4E75                       		rts	
000103E0                            
000103E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000103E0                            
000103E0                            
000103E0                            Roll_Stop:
000103E0 4A28 0032                  		tst.b	$32(a0)
000103E4 6B00                       		bmi.s	locret_E188
000103E6 3038 D008                  		move.w	(v_player+obX).w,d0
000103EA 0440 0030                  		subi.w	#$30,d0
000103EE 9068 0008                  		sub.w	obX(a0),d0
000103F2 6400                       		bcc.s	locret_E188
000103F4 117C 0000 001C             		move.b	#0,obAnim(a0)
000103FA 117C 000E 0020             		move.b	#$E,obColType(a0)
00010400 4268 0010                  		clr.w	obVelX(a0)
00010404 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0001040A 117C 0002 0025             		move.b	#2,ob2ndRout(a0)
00010410 08E8 0007 0032             		bset	#7,$32(a0)
00010416                            
00010416                            locret_E188:
00010416 4E75                       		rts	
00010418                            ; End of function Roll_Stop
00010418                            ; End of function Roll_Stop
00010418                            		include	"_anim\Roller.asm"
00010418                            ; ---------------------------------------------------------------------------
00010418                            ; Animation script - Roller enemy
00010418                            ; ---------------------------------------------------------------------------
00010418 0000                       Ani_Roll:	dc.w A_Roll_Unfold-Ani_Roll
0001041A 0000                       		dc.w A_Roll_Fold-Ani_Roll
0001041C 0000                       		dc.w A_Roll_Roll-Ani_Roll
0001041E 0F02 0100 FE01             A_Roll_Unfold:	dc.b $F, 2, 1, 0, afBack, 1
00010424 0F01 02FD 02               A_Roll_Fold:	dc.b $F, 1, 2, afChange, 2
0001042A 00                         		even
0001042A 0303 0402 FF               A_Roll_Roll:	dc.b 3,	3, 4, 2, afEnd
00010430 00                         		even
00010430 00                         		even
00010430                            Map_Roll:	include	"_maps\Roller.asm"
00010430                            ; --------------------------------------------------------------------------------
00010430                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00010430                            ; --------------------------------------------------------------------------------
00010430                            
00010430                            SME_q3BmU:	
00010430 0000 0000                  		dc.w SME_q3BmU_A-SME_q3BmU, SME_q3BmU_15-SME_q3BmU	
00010434 0000 0000                  		dc.w SME_q3BmU_20-SME_q3BmU, SME_q3BmU_26-SME_q3BmU	
00010438 0000                       		dc.w SME_q3BmU_2C-SME_q3BmU	
0001043A 02                         SME_q3BmU_A:	dc.b 2	
0001043B DE0E 0000 F0               		dc.b $DE, $E, 0, 0, $F0	
00010440 F60E 000C F0               		dc.b $F6, $E, 0, $C, $F0	
00010445 02                         SME_q3BmU_15:	dc.b 2	
00010446 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0	
0001044B FE0D 0018 F0               		dc.b $FE, $D, 0, $18, $F0	
00010450 01                         SME_q3BmU_20:	dc.b 1	
00010451 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0	
00010456 01                         SME_q3BmU_26:	dc.b 1	
00010457 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0	
0001045C 01                         SME_q3BmU_2C:	dc.b 1	
0001045D F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0	
00010462                            		even
00010462                            		even
00010462                            
00010462                            		include	"_incObj\44 GHZ Edge Walls.asm"
00010462                            ; ---------------------------------------------------------------------------
00010462                            ; Object 44 - edge walls (GHZ)
00010462                            ; ---------------------------------------------------------------------------
00010462                            
00010462                            EdgeWalls:
00010462 7000                       		moveq	#0,d0
00010464 1028 0024                  		move.b	obRoutine(a0),d0
00010468 323B 0000                  		move.w	Edge_Index(pc,d0.w),d1
0001046C 4EFB 1000                  		jmp	Edge_Index(pc,d1.w)
00010470                            ; ===========================================================================
00010470 0000                       Edge_Index:	dc.w Edge_Main-Edge_Index
00010472 0000                       		dc.w Edge_Solid-Edge_Index
00010474 0000                       		dc.w Edge_Display-Edge_Index
00010476                            ; ===========================================================================
00010476                            
00010476                            Edge_Main:	; Routine 0
00010476 5428 0024                  		addq.b	#2,obRoutine(a0)
0001047A 217C 0000 0000 0004        		move.l	#Map_Edge,obMap(a0)
00010482 317C 434C 0002             		move.w	#$434C,obGfx(a0)
00010488 0028 0004 0001             		ori.b	#4,obRender(a0)
0001048E 117C 0008 0014             		move.b	#8,obActWid(a0)
00010494 317C 0300 0018             		move.w	#$300,obPriority(a0)
0001049A 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0) ; copy object type number to frame number
000104A0 08A8 0004 001A             		bclr	#4,obFrame(a0)	; clear	4th bit	(deduct	$10)
000104A6 6700                       		beq.s	Edge_Solid	; make object solid if 4th bit = 0
000104A8 5428 0024                  		addq.b	#2,obRoutine(a0)
000104AC 6000                       		bra.s	Edge_Display	; don't make it solid if 4th bit = 1
000104AE                            ; ===========================================================================
000104AE                            
000104AE                            Edge_Solid:	; Routine 2
000104AE 323C 0013                  		move.w	#$13,d1
000104B2 343C 0028                  		move.w	#$28,d2
000104B6 6100 A1F0                  		bsr.w	Obj44_SolidWall
000104BA                            
000104BA                            Edge_Display:	; Routine 4
000104BA 6100 F3D0                  		bsr.w	DisplaySprite
000104DC 4E75                       		rts	
000104DC 4E75                       		rts	
000104DE                            Map_Edge:	include	"_maps\GHZ Edge Walls.asm"
000104DE                            ; ---------------------------------------------------------------------------
000104DE                            ; Sprite mappings - walls (GHZ)
000104DE                            ; ---------------------------------------------------------------------------
000104DE                            Map_Edge_internal:
000104DE 0000                       		dc.w M_Edge_Shadow-Map_Edge_internal
000104E0 0000                       		dc.w M_Edge_Light-Map_Edge_internal
000104E2 0000                       		dc.w M_Edge_Dark-Map_Edge_internal
000104E4 04                         M_Edge_Shadow:	dc.b 4
000104E5 E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8	; light with shadow
000104EA F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
000104EF 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
000104F4 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
000104F9 04                         M_Edge_Light:	dc.b 4
000104FA E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8	; light with no shadow
000104FF F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
00010504 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
00010509 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0001050E 04                         M_Edge_Dark:	dc.b 4
0001050F E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8	; all shadow
00010514 F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
00010519 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0001051E 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
00010524 00                         		even
00010524 00                         		even
00010524                            
00010524                            		include	"_incObj\13 Lava Ball Maker.asm"
00010524                            ; ---------------------------------------------------------------------------
00010524                            ; Object 13 - lava ball	maker (MZ, SLZ)
00010524                            ; ---------------------------------------------------------------------------
00010524                            
00010524                            LavaMaker:
00010524 7000                       		moveq	#0,d0
00010526 1028 0024                  		move.b	obRoutine(a0),d0
0001052A 323B 0000                  		move.w	LavaM_Index(pc,d0.w),d1
0001052E 4EBB 1000                  		jsr	LavaM_Index(pc,d1.w)
00010532 6000 0000                  		bra.w	LBall_ChkDel
00010536                            ; ===========================================================================
00010536 0000                       LavaM_Index:	dc.w LavaM_Main-LavaM_Index
00010538 0000                       		dc.w LavaM_MakeLava-LavaM_Index
0001053A                            ; ---------------------------------------------------------------------------
0001053A                            ;
0001053A                            ; Lava ball production rates
0001053A                            ;
0001053A 1E3C 5A78 96B4             LavaM_Rates:	dc.b 30, 60, 90, 120, 150, 180
00010540                            ; ===========================================================================
00010540                            
00010540                            LavaM_Main:	; Routine 0
00010540 5428 0024                  		addq.b	#2,obRoutine(a0)
00010544 1028 0028                  		move.b	obSubtype(a0),d0
00010548 E848                       		lsr.w	#4,d0
0001054A 0240 000F                  		andi.w	#$F,d0
0001054E 117B 00EA 001F             		move.b	LavaM_Rates(pc,d0.w),obDelayAni(a0)
00010554 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0) ; set time delay for lava balls
0001055A 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
00010560                            
00010560                            LavaM_MakeLava:	; Routine 2
00010560 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from time delay
00010564 6600                       		bne.s	LavaM_Wait	; if time still	remains, branch
00010566 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0) ; reset time delay
0001056C 6100 F59E                  		bsr.w	ChkObjectVisible
00010570 6600                       		bne.s	LavaM_Wait
00010572 6100 F7A4                  		bsr.w	FindFreeObj
00010576 6600                       		bne.s	LavaM_Wait
00010578 12BC 0014                  		move.b	#id_LavaBall,0(a1) ; load lava ball object
0001057C 3368 0008 0008             		move.w	obX(a0),obX(a1)
00010582 3368 000C 000C             		move.w	obY(a0),obY(a1)
00010588 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0001058E                            
0001058E                            	LavaM_Wait:
0001058E 4E75                       		rts	
0001058E 4E75                       		rts	
00010590                            		include	"_incObj\14 Lava Ball.asm"
00010590                            ; ---------------------------------------------------------------------------
00010590                            ; Object 14 - lava balls (MZ, SLZ)
00010590                            ; ---------------------------------------------------------------------------
00010590                            
00010590                            LavaBall:
00010590 7000                       		moveq	#0,d0
00010592 1028 0024                  		move.b	obRoutine(a0),d0
00010596 323B 0000                  		move.w	LBall_Index(pc,d0.w),d1
0001059A 4EBB 1000                  		jsr	LBall_Index(pc,d1.w)
0001059E 6000 F2EC                  		bra.w	DisplaySprite
000105A2                            ; ===========================================================================
000105A2 0000                       LBall_Index:	dc.w LBall_Main-LBall_Index
000105A4 0000                       		dc.w LBall_Action-LBall_Index
000105A6 0000                       		dc.w LBall_Delete-LBall_Index
000105A8                            
000105A8 FC00 FB00 FA00 F900 FE00   LBall_Speeds:	dc.w -$400, -$500, -$600, -$700, -$200
000105B2 0200 FE00 0200 0000        		dc.w $200, -$200, $200,	0
000105BA                            ; ===========================================================================
000105BA                            
000105BA                            LBall_Main:	; Routine 0
000105BA 5428 0024                  		addq.b	#2,obRoutine(a0)
000105BE 117C 0008 0016             		move.b	#8,obHeight(a0)
000105C4 117C 0008 0017             		move.b	#8,obWidth(a0)
000105CA 217C 0000 D58A 0004        		move.l	#Map_Fire,obMap(a0)
000105D2 317C 0345 0002             		move.w	#$345,obGfx(a0)
000105D8 0C38 0003 FE10             		cmpi.b	#3,(v_zone).w	; check if level is SLZ
000105DE 6600                       		bne.s	@notSLZ
000105E0 317C 0480 0002             		move.w	#$480,obGfx(a0)	; SLZ specific code
000105E6                            
000105E6                            	@notSLZ:
000105E6 117C 0004 0001             		move.b	#4,obRender(a0)
000105EC 317C 0180 0018             		move.w	#$180,obPriority(a0)
000105F2 117C 008B 0020             		move.b	#$8B,obColType(a0)
000105F8 3168 000C 0030             		move.w	obY(a0),$30(a0)
000105FE 4A28 0029                  		tst.b	$29(a0)
00010602 6700                       		beq.s	@speed
00010604 5428 0018                  		addq.b	#2,obPriority(a0)
00010608                            
00010608                            	@speed:
00010608 7000                       		moveq	#0,d0
0001060A 1028 0028                  		move.b	obSubtype(a0),d0
0001060E D040                       		add.w	d0,d0
00010610 317B 0096 0012             		move.w	LBall_Speeds(pc,d0.w),obVelY(a0) ; load object speed (vertical)
00010616 117C 0008 0014             		move.b	#8,obActWid(a0)
0001061C 0C28 0006 0028             		cmpi.b	#6,obSubtype(a0) ; is object type below $6 ?
00010622 6500                       		bcs.s	@sound		; if yes, branch
00010624                            
00010624 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001062A 117C 0002 001C             		move.b	#2,obAnim(a0)	; use horizontal animation
00010630 3168 0012 0010             		move.w	obVelY(a0),obVelX(a0) ; set horizontal speed
00010636 317C 0000 0012             		move.w	#0,obVelY(a0)	; delete vertical speed
0001063C                            
0001063C                            	@sound:
00010646                            
00010646                            LBall_Action:	; Routine 2
00010646 7000                       		moveq	#0,d0
00010648 1028 0028                  		move.b	obSubtype(a0),d0
0001064C D040                       		add.w	d0,d0
0001064E 323B 0000                  		move.w	LBall_TypeIndex(pc,d0.w),d1
00010652 4EBB 1000                  		jsr	LBall_TypeIndex(pc,d1.w)
00010656 6100 F220                  		bsr.w	SpeedToPos
0001065A 43F9 0000 0000             		lea	(Ani_Fire).l,a1
00010660 6100 C2D6                  		bsr.w	AnimateSprite
00010664                            
00010664                            LBall_ChkDel:
00010682 4E75                       		rts	
00010684                            ; ===========================================================================
00010684 0000 0000                  LBall_TypeIndex:dc.w LBall_Type00-LBall_TypeIndex, LBall_Type00-LBall_TypeIndex
00010688 0000 0000                  		dc.w LBall_Type00-LBall_TypeIndex, LBall_Type00-LBall_TypeIndex
0001068C 0000 0000                  		dc.w LBall_Type04-LBall_TypeIndex, LBall_Type05-LBall_TypeIndex
00010690 0000 0000                  		dc.w LBall_Type06-LBall_TypeIndex, LBall_Type07-LBall_TypeIndex
00010694 0000                       		dc.w LBall_Type08-LBall_TypeIndex
00010696                            ; ===========================================================================
00010696                            ; lavaball types 00-03 fly up and fall back down
00010696                            
00010696                            LBall_Type00:
00010696 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase object's downward speed
0001069C 3028 0030                  		move.w	$30(a0),d0
000106A0 B068 000C                  		cmp.w	obY(a0),d0	; has object fallen back to its	original position?
000106A4 6400                       		bcc.s	loc_E41E	; if not, branch
000106A6 5428 0024                  		addq.b	#2,obRoutine(a0)	; goto "LBall_Delete" routine
000106AA                            
000106AA                            loc_E41E:
000106AA 08A8 0001 0022             		bclr	#1,obStatus(a0)
000106B0 4A68 0012                  		tst.w	obVelY(a0)
000106B4 6A00                       		bpl.s	locret_E430
000106B6 08E8 0001 0022             		bset	#1,obStatus(a0)
000106BC                            
000106BC                            locret_E430:
000106BC 4E75                       		rts	
000106BE                            ; ===========================================================================
000106BE                            ; lavaball type	04 flies up until it hits the ceiling
000106BE                            
000106BE                            LBall_Type04:
000106BE 08E8 0001 0022             		bset	#1,obStatus(a0)
000106C4 6100 0000                  		bsr.w	ObjHitCeiling
000106C8 4A41                       		tst.w	d1
000106CA 6A00                       		bpl.s	locret_E452
000106CC 117C 0008 0028             		move.b	#8,obSubtype(a0)
000106D2 117C 0001 001C             		move.b	#1,obAnim(a0)
000106D8 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop the object when it touches the ceiling
000106DE                            
000106DE                            locret_E452:
000106DE 4E75                       		rts	
000106E0                            ; ===========================================================================
000106E0                            ; lavaball type	05 falls down until it hits the	floor
000106E0                            
000106E0                            LBall_Type05:
000106E0 08A8 0001 0022             		bclr	#1,obStatus(a0)
000106E6 6100 0000                  		bsr.w	ObjFloorDist
000106EA 4A41                       		tst.w	d1
000106EC 6A00                       		bpl.s	locret_E474
000106EE 117C 0008 0028             		move.b	#8,obSubtype(a0)
000106F4 117C 0001 001C             		move.b	#1,obAnim(a0)
000106FA 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop the object when it touches the floor
00010700                            
00010700                            locret_E474:
00010700 4E75                       		rts	
00010702                            ; ===========================================================================
00010702                            ; lavaball types 06-07 move sideways
00010702                            
00010702                            LBall_Type06:
00010702 08E8 0000 0022             		bset	#0,obStatus(a0)
00010708 76F8                       		moveq	#-8,d3
0001070A 6100 0000                  		bsr.w	ObjHitWallLeft
0001070E 4A41                       		tst.w	d1
00010710 6A00                       		bpl.s	locret_E498
00010712 117C 0008 0028             		move.b	#8,obSubtype(a0)
00010718 117C 0003 001C             		move.b	#3,obAnim(a0)
0001071E 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop object when it touches a	wall
00010724                            
00010724                            locret_E498:
00010724 4E75                       		rts	
00010726                            ; ===========================================================================
00010726                            
00010726                            LBall_Type07:
00010726 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001072C 7608                       		moveq	#8,d3
0001072E 6100 0000                  		bsr.w	ObjHitWallRight
00010732 4A41                       		tst.w	d1
00010734 6A00                       		bpl.s	locret_E4BC
00010736 117C 0008 0028             		move.b	#8,obSubtype(a0)
0001073C 117C 0003 001C             		move.b	#3,obAnim(a0)
00010742 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop object when it touches a	wall
00010748                            
00010748                            locret_E4BC:
00010748 4E75                       		rts	
0001074A                            ; ===========================================================================
0001074A                            
0001074A                            LBall_Type08:
0001074A 4E75                       		rts	
0001074C                            ; ===========================================================================
0001074C                            
0001074C                            LBall_Delete:
0001074C 6000 F17E                  		bra.w	DeleteObject
0001074C 6000 F17E                  		bra.w	DeleteObject
00010750                            		include	"_anim\Fireballs.asm"
00010750                            ; ---------------------------------------------------------------------------
00010750                            ; Animation script - lava balls
00010750                            ; ---------------------------------------------------------------------------
00010750 0000                       Ani_Fire:	dc.w @vertical-Ani_Fire
00010752 0000                       		dc.w @vertcollide-Ani_Fire
00010754 0000                       		dc.w @horizontal-Ani_Fire
00010756 0000                       		dc.w @horicollide-Ani_Fire
00010758 0500 2001 21FF             @vertical:	dc.b 5,	0, $20,	1, $21,	afEnd
0001075E 0502 FC                    @vertcollide:	dc.b 5,	2, afRoutine
00010762 00                         		even
00010762 0503 4304 44FF             @horizontal:	dc.b 5,	3, $43,	4, $44,	afEnd
00010768 0505 FC                    @horicollide:	dc.b 5,	5, afRoutine
0001076C 00                         		even
0001076C 00                         		even
0001076C                            
0001076C                            		include	"_incObj\6D Flamethrower.asm"
0001076C                            ; ---------------------------------------------------------------------------
0001076C                            ; Object 6D - flame thrower (SBZ)
0001076C                            ; ---------------------------------------------------------------------------
0001076C                            
0001076C                            Flamethrower:
0001076C 7000                       		moveq	#0,d0
0001076E 1028 0024                  		move.b	obRoutine(a0),d0
00010772 323B 0000                  		move.w	Flame_Index(pc,d0.w),d1
00010776 4EFB 1000                  		jmp	Flame_Index(pc,d1.w)
0001077A                            ; ===========================================================================
0001077A 0000                       Flame_Index:	dc.w Flame_Main-Flame_Index
0001077C 0000                       		dc.w Flame_Action-Flame_Index
0001077E                            ; ===========================================================================
0001077E                            
0001077E                            Flame_Main:	; Routine 0
0001077E 5428 0024                  		addq.b	#2,obRoutine(a0)
00010782 217C 0000 0000 0004        		move.l	#Map_Flame,obMap(a0)
0001078A 317C 83D9 0002             		move.w	#$83D9,obGfx(a0)
00010790 0028 0004 0001             		ori.b	#4,obRender(a0)
00010796 317C 0080 0018             		move.w	#$80,obPriority(a0)
0001079C 3168 000C 0030             		move.w	obY(a0),$30(a0)	; store obY (gets overwritten later though)
000107A2 117C 000C 0014             		move.b	#$C,obActWid(a0)
000107A8 1028 0028                  		move.b	obSubtype(a0),d0
000107AC 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
000107B0 D040                       		add.w	d0,d0		; multiply by 2
000107B2 3140 0030                  		move.w	d0,$30(a0)
000107B6 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
000107BA 1028 0028                  		move.b	obSubtype(a0),d0
000107BE 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
000107C2 EB48                       		lsl.w	#5,d0		; multiply by $20
000107C4 3140 0034                  		move.w	d0,$34(a0)	; set pause time
000107C8 117C 000A 0036             		move.b	#$A,$36(a0)
000107CE 0828 0001 0022             		btst	#1,obStatus(a0)
000107D4 6700                       		beq.s	Flame_Action
000107D6 117C 0002 001C             		move.b	#2,obAnim(a0)
000107DC 117C 0015 0036             		move.b	#$15,$36(a0)
000107E2                            
000107E2                            Flame_Action:	; Routine 2
000107E2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
000107E6 6A00                       		bpl.s	loc_E57A	; if time remains, branch
000107E8 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
000107EE 0868 0000 001C             		bchg	#0,obAnim(a0)
000107F4 6700                       		beq.s	loc_E57A
000107F6 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
00010806                            
00010806                            loc_E57A:
00010806 43F9 0000 0000             		lea	(Ani_Flame).l,a1
0001080C 6100 C12A                  		bsr.w	AnimateSprite
00010810 117C 0000 0020             		move.b	#0,obColType(a0)
00010816 1028 0036                  		move.b	$36(a0),d0
0001081A B028 001A                  		cmp.b	obFrame(a0),d0
0001081E 6600                       		bne.s	Flame_ChkDel
00010820 117C 00A3 0020             		move.b	#$A3,obColType(a0)
00010826                            
00010826                            Flame_ChkDel:
00010844 6000 F046                  		bra.w	DisplaySprite
00010844 6000 F046                  		bra.w	DisplaySprite
00010848                            		include	"_anim\Flamethrower.asm"
00010848                            ; ---------------------------------------------------------------------------
00010848                            ; Animation script - flamethrower (SBZ)
00010848                            ; ---------------------------------------------------------------------------
00010848 0000                       Ani_Flame:	dc.w @pipe1-Ani_Flame
0001084A 0000                       		dc.w @pipe2-Ani_Flame
0001084C 0000                       		dc.w @valve1-Ani_Flame
0001084E 0000                       		dc.w @valve2-Ani_Flame
00010850 0300 0102 0304 0506 0708+  @pipe1:		dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, afBack, 2
0001085E 0009 0705 0301 00FE 01     @pipe2:		dc.b 0,	9, 7, 5, 3, 1, 0, afBack, 1
00010868 00                         		even
00010868 030B 0C0D 0E0F 1011 1213+  @valve1:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, afBack, 2
00010876 0014 1211 0F0D 0BFE 01     @valve2:	dc.b 0,	$14, $12, $11, $F, $D, $B, afBack, 1
00010880 00                         		even
00010880 00                         		even
00010880                            Map_Flame:	include	"_maps\Flamethrower.asm"
00010880                            ; ---------------------------------------------------------------------------
00010880                            ; Sprite mappings - flame thrower (SBZ)
00010880                            ; ---------------------------------------------------------------------------
00010880                            Map_Flame_internal:
00010880 0000                       		dc.w @pipe1-Map_Flame_internal
00010882 0000                       		dc.w @pipe2-Map_Flame_internal
00010884 0000                       		dc.w @pipe3-Map_Flame_internal
00010886 0000                       		dc.w @pipe4-Map_Flame_internal
00010888 0000                       		dc.w @pipe5-Map_Flame_internal
0001088A 0000                       		dc.w @pipe6-Map_Flame_internal
0001088C 0000                       		dc.w @pipe7-Map_Flame_internal
0001088E 0000                       		dc.w @pipe8-Map_Flame_internal
00010890 0000                       		dc.w @pipe9-Map_Flame_internal
00010892 0000                       		dc.w @pipe10-Map_Flame_internal
00010894 0000                       		dc.w @pipe11-Map_Flame_internal
00010896 0000                       		dc.w @valve1-Map_Flame_internal
00010898 0000                       		dc.w @valve2-Map_Flame_internal
0001089A 0000                       		dc.w @valve3-Map_Flame_internal
0001089C 0000                       		dc.w @valve4-Map_Flame_internal
0001089E 0000                       		dc.w @valve5-Map_Flame_internal
000108A0 0000                       		dc.w @valve6-Map_Flame_internal
000108A2 0000                       		dc.w @valve7-Map_Flame_internal
000108A4 0000                       		dc.w @valve8-Map_Flame_internal
000108A6 0000                       		dc.w @valve9-Map_Flame_internal
000108A8 0000                       		dc.w @valve10-Map_Flame_internal
000108AA 0000                       		dc.w @valve11-Map_Flame_internal
000108AC 01                         @pipe1:		dc.b 1
000108AD 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB ; broken pipe style flamethrower
000108B2 02                         @pipe2:		dc.b 2
000108B3 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000108B8 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000108BD 02                         @pipe3:		dc.b 2
000108BE 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000108C3 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000108C8 03                         @pipe4:		dc.b 3
000108C9 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
000108CE 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000108D3 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000108D8 03                         @pipe5:		dc.b 3
000108D9 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000108DE 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000108E3 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000108E8 04                         @pipe6:		dc.b 4
000108E9 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
000108EE 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
000108F3 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000108F8 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000108FD 04                         @pipe7:		dc.b 4
000108FE 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00010903 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010908 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001090D 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010912 05                         @pipe8:		dc.b 5
00010913 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
00010918 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0001091D 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010922 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010927 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0001092C 05                         @pipe9:		dc.b 5
0001092D F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010932 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00010937 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0001093C 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010941 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010946 06                         @pipe10:	dc.b 6
00010947 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0001094C F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
00010951 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010956 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0001095B 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010960 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010965 06                         @pipe11:	dc.b 6
00010966 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0001096B F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010970 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
00010975 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0001097A 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001097F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010984 01                         @valve1:	dc.b 1
00010985 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9 ; valve style flamethrower
0001098A 02                         @valve2:	dc.b 2
0001098B 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010990 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010995 02                         @valve3:	dc.b 2
00010996 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0001099B 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000109A0 03                         @valve4:	dc.b 3
000109A1 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
000109A6 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000109AB 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000109B0 03                         @valve5:	dc.b 3
000109B1 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000109B6 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000109BB 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000109C0 04                         @valve6:	dc.b 4
000109C1 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
000109C6 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
000109CB 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000109D0 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000109D5 04                         @valve7:	dc.b 4
000109D6 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
000109DB 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000109E0 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000109E5 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000109EA 05                         @valve8:	dc.b 5
000109EB F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
000109F0 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
000109F5 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
000109FA 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000109FF 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010A04 05                         @valve9:	dc.b 5
00010A05 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010A0A 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00010A0F 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010A14 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010A19 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010A1E 06                         @valve10:	dc.b 6
00010A1F E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
00010A24 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
00010A29 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010A2E 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
00010A33 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010A38 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010A3D 06                         @valve11:	dc.b 6
00010A3E E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
00010A43 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010A48 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
00010A4D 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010A52 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010A57 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010A5C                            		even
00010A5C                            		even
00010A5C                            
00010A5C                            		include	"_incObj\46 MZ Bricks.asm"
00010A5C                            ; ---------------------------------------------------------------------------
00010A5C                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
00010A5C                            ; ---------------------------------------------------------------------------
00010A5C                            
00010A5C                            MarbleBrick:
00010A5C 7000                       		moveq	#0,d0
00010A5E 1028 0024                  		move.b	obRoutine(a0),d0
00010A62 323B 0000                  		move.w	Brick_Index(pc,d0.w),d1
00010A66 4EFB 1000                  		jmp	Brick_Index(pc,d1.w)
00010A6A                            ; ===========================================================================
00010A6A 0000                       Brick_Index:	dc.w Brick_Main-Brick_Index
00010A6C 0000                       		dc.w Brick_Action-Brick_Index
00010A6E                            
00010A6E =00000030                  brick_origY:	equ $30
00010A6E                            ; ===========================================================================
00010A6E                            
00010A6E                            Brick_Main:	; Routine 0
00010A6E 5428 0024                  		addq.b	#2,obRoutine(a0)
00010A72 117C 000F 0016             		move.b	#$F,obHeight(a0)
00010A78 117C 000F 0017             		move.b	#$F,obWidth(a0)
00010A7E 217C 0000 0000 0004        		move.l	#Map_Brick,obMap(a0)
00010A86 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00010A8C 117C 0004 0001             		move.b	#4,obRender(a0)
00010A92 317C 0180 0018             		move.w	#$180,obPriority(a0)
00010A98 117C 0010 0014             		move.b	#$10,obActWid(a0)
00010A9E 3168 000C 0030             		move.w	obY(a0),brick_origY(a0)
00010AA4 317C 05C0 0032             		move.w	#$5C0,$32(a0)
00010AAA                            
00010AAA                            Brick_Action:	; Routine 2
00010AAA 4A28 0001                  		tst.b	obRender(a0)
00010AAE 6A00                       		bpl.s	@chkdel
00010AB0 7000                       		moveq	#0,d0
00010AB2 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00010AB6 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
00010ABA D040                       		add.w	d0,d0
00010ABC 323B 0000                  		move.w	Brick_TypeIndex(pc,d0.w),d1
00010AC0 4EBB 1000                  		jsr	Brick_TypeIndex(pc,d1.w)
00010AC4 323C 001B                  		move.w	#$1B,d1
00010AC8 343C 0010                  		move.w	#$10,d2
00010ACC 363C 0011                  		move.w	#$11,d3
00010AD0 3828 0008                  		move.w	obX(a0),d4
00010AD4 6100 0000                  		bsr.w	SolidObject
00010AD8                            
00010AD8                            	@chkdel:
00010AF6 6000 ED94                  			bra.w	DisplaySprite
00010AFA                            ; ===========================================================================
00010AFA 0000                       Brick_TypeIndex:dc.w Brick_Type00-Brick_TypeIndex
00010AFC 0000                       		dc.w Brick_Type01-Brick_TypeIndex
00010AFE 0000                       		dc.w Brick_Type02-Brick_TypeIndex
00010B00 0000                       		dc.w Brick_Type03-Brick_TypeIndex
00010B02 0000                       		dc.w Brick_Type04-Brick_TypeIndex
00010B04                            ; ===========================================================================
00010B04                            
00010B04                            Brick_Type00:
00010B04 4E75                       		rts	
00010B06                            ; ===========================================================================
00010B06                            
00010B06                            Brick_Type02:
00010B06 3038 D008                  		move.w	(v_player+obX).w,d0
00010B0A 9068 0008                  		sub.w	obX(a0),d0
00010B0E 6400                       		bcc.s	loc_E888
00010B10 4440                       		neg.w	d0
00010B12                            
00010B12                            loc_E888:
00010B12 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
00010B16 6400                       		bcc.s	Brick_Type01	; if not, resume wobbling
00010B18 117C 0003 0028             		move.b	#3,obSubtype(a0)	; if yes, make the block fall
00010B1E                            
00010B1E                            Brick_Type01:
00010B1E 7000                       		moveq	#0,d0
00010B20 1038 FE74                  		move.b	(v_oscillate+$16).w,d0
00010B24 0828 0003 0028             		btst	#3,obSubtype(a0)
00010B2A 6700                       		beq.s	loc_E8A8
00010B2C 4440                       		neg.w	d0
00010B2E 0640 0010                  		addi.w	#$10,d0
00010B32                            
00010B32                            loc_E8A8:
00010B32 3228 0030                  		move.w	brick_origY(a0),d1
00010B36 9240                       		sub.w	d0,d1
00010B38 3141 000C                  		move.w	d1,obY(a0)	; update the block's position to make it wobble
00010B3C 4E75                       		rts	
00010B3E                            ; ===========================================================================
00010B3E                            
00010B3E                            Brick_Type03:
00010B3E 6100 ED38                  		bsr.w	SpeedToPos
00010B42 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase falling speed
00010B48 6100 0000                  		bsr.w	ObjFloorDist
00010B4C 4A41                       		tst.w	d1		; has the block	hit the	floor?
00010B4E 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
00010B52 D368 000C                  		add.w	d1,obY(a0)
00010B56 4268 0012                  		clr.w	obVelY(a0)	; stop the block falling
00010B5A 3168 000C 0030             		move.w	obY(a0),brick_origY(a0)
00010B60 117C 0004 0028             		move.b	#4,obSubtype(a0)
00010B66 3011                       		move.w	(a1),d0
00010B68 0240 03FF                  		andi.w	#$3FF,d0
00010B6C 0C40 016A                  			cmpi.w	#$16A,d0
00010B70 6400                       		bcc.s	locret_E8EE
00010B72 117C 0000 0028             		move.b	#0,obSubtype(a0)
00010B78                            
00010B78                            locret_E8EE:
00010B78 4E75                       		rts	
00010B7A                            ; ===========================================================================
00010B7A                            
00010B7A                            Brick_Type04:
00010B7A 7000                       		moveq	#0,d0
00010B7C 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
00010B80 E648                       		lsr.w	#3,d0
00010B82 3228 0030                  		move.w	brick_origY(a0),d1
00010B86 9240                       		sub.w	d0,d1
00010B88 3141 000C                  		move.w	d1,obY(a0)	; make the block wobble
00010B8C 4E75                       		rts	
00010B8C 4E75                       		rts	
00010B8E                            Map_Brick:	include	"_maps\MZ Bricks.asm"
00010B8E                            ; ---------------------------------------------------------------------------
00010B8E                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
00010B8E                            ; ---------------------------------------------------------------------------
00010B8E                            Map_Brick_internal:
00010B8E 0000                       		dc.w @brick-Map_Brick_internal
00010B90 01                         @brick:		dc.b 1
00010B91 F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
00010B96                            		even
00010B96                            		even
00010B96                            
00010B96                            		include	"_incObj\12 Light.asm"
00010B96                            ; ---------------------------------------------------------------------------
00010B96                            ; Object 12 - lamp (SYZ)
00010B96                            ; ---------------------------------------------------------------------------
00010B96                            
00010B96                            SpinningLight:
00010B96 7000                       		moveq	#0,d0
00010B98 1028 0024                  		move.b	obRoutine(a0),d0
00010B9C 323B 0000                  		move.w	Light_Index(pc,d0.w),d1
00010BA0 4EFB 1000                  		jmp	Light_Index(pc,d1.w)
00010BA4                            ; ===========================================================================
00010BA4 0000                       Light_Index:	dc.w Light_Main-Light_Index
00010BA6 0000                       		dc.w Light_Animate-Light_Index
00010BA8                            ; ===========================================================================
00010BA8                            
00010BA8                            Light_Main:	; Routine 0
00010BA8 5428 0024                  		addq.b	#2,obRoutine(a0)
00010BAC 217C 0000 0000 0004        		move.l	#Map_Light,obMap(a0)
00010BB4 317C 0000 0002             		move.w	#0,obGfx(a0)
00010BBA 117C 0004 0001             		move.b	#4,obRender(a0)
00010BC0 117C 0010 0014             		move.b	#$10,obActWid(a0)
00010BC6 317C 0300 0018             		move.w	#$300,obPriority(a0)
00010BCC                            
00010BCC                            Light_Animate:	; Routine 2
00010BCC 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00010BD0 6A00                       		bpl.s	@chkdel
00010BD2 117C 000C 001E             		move.b	#12,obTimeFrame(a0)
00010BD8 5228 001A                  		addq.b	#1,obFrame(a0)
00010BDC 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)
00010BE2 6500                       		bcs.s	@chkdel
00010BE4 117C 0000 001A             		move.b	#0,obFrame(a0)
00010BEA                            
00010BEA                            	@chkdel:
00010C08 6000 EC82                  		bra.w	DisplaySprite
00010C08 6000 EC82                  		bra.w	DisplaySprite
00010C0C                            Map_Light	include	"_maps\Light.asm"
00010C0C                            ; --------------------------------------------------------------------------------
00010C0C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00010C0C                            ; --------------------------------------------------------------------------------
00010C0C                            
00010C0C                            SME_FBl1X:	
00010C0C 0000 0000                  		dc.w SME_FBl1X_8-SME_FBl1X, SME_FBl1X_22-SME_FBl1X	
00010C10 0000 0000                  		dc.w SME_FBl1X_3C-SME_FBl1X, SME_FBl1X_5B-SME_FBl1X	
00010C14 05                         SME_FBl1X_8:	dc.b 5	
00010C15 E004 006D 00               		dc.b $E0, 4, 0, $6D, 0	
00010C1A E80C 006F F8               		dc.b $E8, $C, 0, $6F, $F8	
00010C1F F00C 0073 F8               		dc.b $F0, $C, 0, $73, $F8	
00010C24 F800 0090 00               		dc.b $F8, 0, 0, $90, 0	
00010C29 F800 0890 08               		dc.b $F8, 0, 8, $90, 8	
00010C2E 05                         SME_FBl1X_22:	dc.b 5	
00010C2F E004 0077 00               		dc.b $E0, 4, 0, $77, 0	
00010C34 E804 0079 00               		dc.b $E8, 4, 0, $79, 0	
00010C39 E800 007B 10               		dc.b $E8, 0, 0, $7B, $10	
00010C3E F008 007C F8               		dc.b $F0, 8, 0, $7C, $F8	
00010C43 F804 0091 00               		dc.b $F8, 4, 0, $91, 0	
00010C48 06                         SME_FBl1X_3C:	dc.b 6	
00010C49 E000 007F 00               		dc.b $E0, 0, 0, $7F, 0	
00010C4E E000 0078 08               		dc.b $E0, 0, 0, $78, 8	
00010C53 E80C 0080 F8               		dc.b $E8, $C, 0, $80, $F8	
00010C58 F00C 0084 F8               		dc.b $F0, $C, 0, $84, $F8	
00010C5D F800 0093 08               		dc.b $F8, 0, 0, $93, 8	
00010C62 F800 0091 00               		dc.b $F8, 0, 0, $91, 0	
00010C67 05                         SME_FBl1X_5B:	dc.b 5	
00010C68 E004 0088 00               		dc.b $E0, 4, 0, $88, 0	
00010C6D E808 008A F8               		dc.b $E8, 8, 0, $8A, $F8	
00010C72 F008 008D 00               		dc.b $F0, 8, 0, $8D, 0	
00010C77 F800 0094 00               		dc.b $F8, 0, 0, $94, 0	
00010C7C F800 0890 08               		dc.b $F8, 0, 8, $90, 8	
00010C82 00                         		even
00010C82 00                         		even
00010C82                            		include	"_incObj\47 Bumper.asm"
00010C82                            ; ---------------------------------------------------------------------------
00010C82                            ; Object 47 - pinball bumper (SYZ)
00010C82                            ; ---------------------------------------------------------------------------
00010C82                            
00010C82                            Bumper:
00010C82 7000                       		moveq	#0,d0
00010C84 1028 0024                  		move.b	obRoutine(a0),d0
00010C88 323B 0000                  		move.w	Bump_Index(pc,d0.w),d1
00010C8C 4EFB 1000                  		jmp	Bump_Index(pc,d1.w)
00010C90                            ; ===========================================================================
00010C90 0000                       Bump_Index:	dc.w Bump_Main-Bump_Index
00010C92 0000                       		dc.w Bump_Hit-Bump_Index
00010C94                            ; ===========================================================================
00010C94                            
00010C94                            Bump_Main:	; Routine 0
00010C94 5428 0024                  		addq.b	#2,obRoutine(a0)
00010C98 217C 0000 0000 0004        		move.l	#Map_Bump,obMap(a0)
00010CA0 317C 0380 0002             		move.w	#$380,obGfx(a0)
00010CA6 117C 0004 0001             		move.b	#4,obRender(a0)
00010CAC 117C 0010 0014             		move.b	#$10,obActWid(a0)
00010CB2 317C 0080 0018             		move.w	#$80,obPriority(a0)
00010CB8 117C 00D7 0020             		move.b	#$D7,obColType(a0)
00010CBE                            
00010CBE                            Bump_Hit:	; Routine 2
00010CBE 4A28 0021                  		tst.b	obColProp(a0)	; has Sonic touched the	bumper?
00010CC2 6700 0000                  		beq.w	@display	; if not, branch
00010CC6 4228 0021                  		clr.b	obColProp(a0)
00010CCA 43F8 D000                  		lea	(v_player).w,a1
00010CCE 3228 0008                  		move.w	obX(a0),d1
00010CD2 3428 000C                  		move.w	obY(a0),d2
00010CD6 9269 0008                  		sub.w	obX(a1),d1
00010CDA 9469 000C                  		sub.w	obY(a1),d2
00010CDE 4EB9 0000 3CC4             		jsr	(CalcAngle).l
00010CE4 4EB9 0000 3A32             		jsr	(CalcSine).l
00010CEA C3FC F900                  		muls.w	#-$700,d1
00010CEE E081                       		asr.l	#8,d1
00010CF0 3341 0010                  		move.w	d1,obVelX(a1)	; bounce Sonic away
00010CF4 C1FC F900                  		muls.w	#-$700,d0
00010CF8 E080                       		asr.l	#8,d0
00010CFA 3340 0012                  		move.w	d0,obVelY(a1)	; bounce Sonic away
00010CFE 08E9 0001 0022             		bset	#1,obStatus(a1)
00010D04 08A9 0004 0022             		bclr	#4,obStatus(a1)
00010D0A 08A9 0005 0022             		bclr	#5,obStatus(a1)
00010D10 4229 003C                  		clr.b	$3C(a1)
00010D14 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "hit" animation
00010D24 45F8 FC00                  		lea	(v_objstate).w,a2
00010D28 7000                       		moveq	#0,d0
00010D2A 1028 0023                  		move.b	obRespawnNo(a0),d0
00010D2E 6700                       		beq.s	@addscore
00010D30 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit 10 times?
00010D36 6400                       		bcc.s	@display	; if yes, Sonic	gets no	points
00010D38 5232 0002                  		addq.b	#1,2(a2,d0.w)
00010D3C                            
00010D3C                            	@addscore:
00010D3C 7001                       		moveq	#1,d0
00010D3E 4EB9 0000 0000             		jsr	(AddPoints).l	; add 10 to score
00010D44 6100 EFD2                  		bsr.w	FindFreeObj
00010D48 6600                       		bne.s	@display
00010D4A 12BC 0029                  		move.b	#id_Points,0(a1) ; load points object
00010D4E 3368 0008 0008             		move.w	obX(a0),obX(a1)
00010D54 3368 000C 000C             		move.w	obY(a0),obY(a1)
00010D5A 137C 0004 001A             		move.b	#4,obFrame(a1)
00010D60                            
00010D60                            	@display:
00010D60 43F9 0000 0000             		lea	(Ani_Bump).l,a1
00010D66 6100 BBD0                  		bsr.w	AnimateSprite
00010D86 6000 EB04                  		bra.w	DisplaySprite
00010D8A                            ; ===========================================================================
00010D8A                            
00010D8A                            @resetcount:
00010D8A 45F8 FC00                  		lea	(v_objstate).w,a2
00010D8E 7000                       		moveq	#0,d0
00010D90 1028 0023                  		move.b	obRespawnNo(a0),d0
00010D94 6700                       		beq.s	@delete
00010D96 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010D9C                            
00010D9C                            	@delete:
00010D9C 6000 EB2E                  		bra.w	DeleteObject
00010D9C 6000 EB2E                  		bra.w	DeleteObject
00010DA0                            		include	"_anim\Bumper.asm"
00010DA0                            ; ---------------------------------------------------------------------------
00010DA0                            ; Animation script - flamethrower (SBZ)
00010DA0                            ; ---------------------------------------------------------------------------
00010DA0 0000                       Ani_Bump:	dc.w byte_EAF4-Ani_Bump
00010DA2 0000                       		dc.w byte_EAF8-Ani_Bump
00010DA4 0F00 FF                    byte_EAF4:	dc.b $F, 0, afEnd
00010DA8 00                         		even
00010DA8 0301 0201 02FD 00          byte_EAF8:	dc.b 3,	1, 2, 1, 2, afChange, 0
00010DB0 00                         		even
00010DB0 00                         		even
00010DB0                            Map_Bump:	include	"_maps\Bumper.asm"
00010DB0                            ; ---------------------------------------------------------------------------
00010DB0                            ; Sprite mappings - pinball bumper (SYZ)
00010DB0                            ; ---------------------------------------------------------------------------
00010DB0                            Map_Bump_internal:
00010DB0 0000                       		dc.w @normal-Map_Bump_internal
00010DB2 0000                       		dc.w @bumped1-Map_Bump_internal
00010DB4 0000                       		dc.w @bumped2-Map_Bump_internal
00010DB6 02                         @normal:	dc.b 2
00010DB7 F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
00010DBC F007 0800 00               		dc.b $F0, 7, 8,	0, 0
00010DC1 02                         @bumped1:	dc.b 2
00010DC2 F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
00010DC7 F402 0808 04               		dc.b $F4, 2, 8,	8, 4
00010DCC 02                         @bumped2:	dc.b 2
00010DCD F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
00010DD2 F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
00010DD8 00                         		even
00010DD8 00                         		even
00010DD8                            
00010DD8                            		include	"_incObj\0D Signpost.asm" ; includes "GotThroughAct" subroutine
00010DD8                            ; ---------------------------------------------------------------------------
00010DD8                            ; Object 0D - signpost at the end of a level
00010DD8                            ; ---------------------------------------------------------------------------
00010DD8                            
00010DD8                            Signpost:
00010DD8 7000                       		moveq	#0,d0
00010DDA 1028 0024                  		move.b	obRoutine(a0),d0
00010DDE 323B 0000                  		move.w	Sign_Index(pc,d0.w),d1
00010DE2 4EBB 1000                  		jsr	Sign_Index(pc,d1.w)
00010DE6 43F9 0000 0000             		lea	(Ani_Sign).l,a1
00010DEC 6100 BB4A                  		bsr.w	AnimateSprite
00010DF0 6100 EA9A                  		bsr.w	DisplaySprite
00010E12 4E75                       		rts	
00010E14                            ; ===========================================================================
00010E14 0000                       Sign_Index:	dc.w Sign_Main-Sign_Index
00010E16 0000                       		dc.w Sign_Touch-Sign_Index
00010E18 0000                       		dc.w Sign_Spin-Sign_Index
00010E1A 0000                       		dc.w Sign_SonicRun-Sign_Index
00010E1C 0000                       		dc.w Sign_Exit-Sign_Index
00010E1E                            
00010E1E =00000030                  spintime:	equ $30		; time for signpost to spin
00010E1E =00000032                  sparkletime:	equ $32		; time between sparkles
00010E1E =00000034                  sparkle_id:	equ $34		; counter to keep track of sparkles
00010E1E                            ; ===========================================================================
00010E1E                            
00010E1E                            Sign_Main:	; Routine 0
00010E1E 5428 0024                  		addq.b	#2,obRoutine(a0)
00010E22 217C 0000 0000 0004        		move.l	#Map_Sign,obMap(a0)
00010E2A 317C 0680 0002             		move.w	#$680,obGfx(a0)
00010E30 117C 0004 0001             		move.b	#4,obRender(a0)
00010E36 117C 0018 0014             		move.b	#$18,obActWid(a0)
00010E3C 317C 0200 0018             		move.w	#$200,obPriority(a0)
00010E42                            
00010E42                            Sign_Touch:	; Routine 2
00010E42 3038 D008                  		move.w	(v_player+obX).w,d0
00010E46 9068 0008                  		sub.w	obX(a0),d0
00010E4A 6500                       		bcs.s	@notouch
00010E4C 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
00010E50 6400                       		bcc.s	@notouch	; if not, branch
00010E52 11FC 0001 F7AA             		move.b  #1,($FFFFF7AA).w ; Lock the screen
00010E62 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
00010E66 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w ; lock screen position
00010E6C 5428 0024                  		addq.b	#2,obRoutine(a0)
00010E70 11FC 0001 F5C2             		move.b  #1,($FFFFF5C2).w ; Set victory animation flag
00010E76                            
00010E76                            	@notouch:
00010E76 4E75                       		rts	
00010E78                            	
00010E78                            ; ===========================================================================
00010E78                            
00010E78                            Sign_Spin:	; Routine 4
00010E78 5368 0030                  		subq.w	#1,spintime(a0)	; subtract 1 from spin time
00010E7C 6A00                       		bpl.s	@chksparkle	; if time remains, branch
00010E7E 317C 003C 0030             		move.w	#60,spintime(a0) ; set spin cycle time to 1 second
00010E84 5228 001C                  		addq.b	#1,obAnim(a0)	; next spin cycle
00010E88 0C28 0003 001C             		cmpi.b	#3,obAnim(a0)	; have 3 spin cycles completed?
00010E8E 6600                       		bne.s	@chksparkle	; if not, branch
00010E90 5428 0024                  		addq.b	#2,obRoutine(a0)
00010E94                            
00010E94                            	@chksparkle:
00010E94 5368 0032                  		subq.w	#1,sparkletime(a0) ; subtract 1 from time delay
00010E98 6A00                       		bpl.s	@fail		; if time remains, branch
00010E9A 317C 000B 0032             		move.w	#$B,sparkletime(a0) ; set time between sparkles to $B frames
00010EA0 7000                       		moveq	#0,d0
00010EA2 1028 0034                  		move.b	sparkle_id(a0),d0 ; get sparkle id
00010EA6 5428 0034                  		addq.b	#2,sparkle_id(a0) ; increment sparkle counter
00010EAA 0228 000E 0034             		andi.b	#$E,sparkle_id(a0)
00010EB0 45FB 0000                  		lea	Sign_SparkPos(pc,d0.w),a2 ; load sparkle position data
00010EB4 6100 EE62                  		bsr.w	FindFreeObj
00010EB8 6600                       		bne.s	@fail
00010EBA 12BC 0025                  		move.b	#id_Rings,0(a1)	; load rings object
00010EBE 137C 0006 0024             		move.b	#id_Ring_Sparkle,obRoutine(a1) ; jump to ring sparkle subroutine
00010EC4 101A                       		move.b	(a2)+,d0
00010EC6 4880                       		ext.w	d0
00010EC8 D068 0008                  		add.w	obX(a0),d0
00010ECC 3340 0008                  		move.w	d0,obX(a1)
00010ED0 101A                       		move.b	(a2)+,d0
00010ED2 4880                       		ext.w	d0
00010ED4 D068 000C                  		add.w	obY(a0),d0
00010ED8 3340 000C                  		move.w	d0,obY(a1)
00010EDC 237C 0000 BFA8 0004        		move.l	#Map_Ring,obMap(a1)
00010EE4 337C 2798 0002             		move.w	#$2798,obGfx(a1)
00010EEA 137C 0004 0001             		move.b	#4,obRender(a1)
00010EF0 337C 0100 0018             		move.w	#$100,obPriority(a1)
00010EF6 137C 0008 0014             		move.b	#8,obActWid(a1)
00010EFC                            
00010EFC                            	@fail:
00010EFC 4E75                       		rts	
00010EFE                            ; ===========================================================================
00010EFE E8F0                       Sign_SparkPos:	dc.b -$18,-$10		; x-position, y-position
00010F00 0808                       		dc.b	8,   8
00010F02 F000                       		dc.b -$10,   0
00010F04 18F8                       		dc.b  $18,  -8
00010F06 00F8                       		dc.b	0,  -8
00010F08 1000                       		dc.b  $10,   0
00010F0A E808                       		dc.b -$18,   8
00010F0C 1810                       		dc.b  $18, $10
00010F0E                            ; ===========================================================================
00010F0E                            
00010F0E                            Sign_SonicRun:	; Routine 6
00010F0E 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	on?
00010F12 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
00010F16 11FC 0001 F5C2             		move.b  #1,($FFFFF5C2).w ; Set victory animation flag
00010F1C                            		
00010F1C                            
00010F1C                            	loc_EC86:
00010F1C 5428 0024                  		addq.b	#2,obRoutine(a0)
00010F20                            
00010F20                            ; ---------------------------------------------------------------------------
00010F20                            ; Subroutine to	set up bonuses at the end of an	act
00010F20                            ; ---------------------------------------------------------------------------
00010F20                            
00010F20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010F20                            
00010F20                            
00010F20                            GotThroughAct:
00010F20 4A38 D5C0                  		tst.b	(v_objspace+$5C0).w
00010F24 6600                       		bne.s	locret_ECEE
00010F26 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w
00010F2C 4238 FE2D                  		clr.b	(v_invinc).w	; disable invincibility
00010F30 4238 FE2E                  		clr.b	(v_shoes).w	; clear speed shoes
00010F34 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
00010F38 11FC 003A D5C0             		move.b	#id_GotThroughCard,(v_objspace+$5C0).w
00010F3E 7000                       		moveq	#plcid_TitleCard,d0
00010F40 4EB9 0000 171C             		jsr	(NewPLC).l	; load title card patterns
00010F46 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w
00010F4C 7000                       		moveq	#0,d0
00010F4E 1038 FE23                  		move.b	(v_timemin).w,d0
00010F52 C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
00010F56 7200                       		moveq	#0,d1
00010F58 1238 FE24                  		move.b	(v_timesec).w,d1
00010F5C D041                       		add.w	d1,d0		; add up your time
00010F5E 80FC 000F                  		divu.w	#15,d0		; divide by 15
00010F62 7214                       		moveq	#$14,d1
00010F64 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
00010F66 6500                       		bcs.s	hastimebonus	; if not, branch
00010F68 3001                       		move.w	d1,d0		; use minimum time bonus (0)
00010F6A                            
00010F6A                            	hastimebonus:
00010F6A D040                       		add.w	d0,d0
00010F6C 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),(v_timebonus).w ; set time bonus
00010F72 3038 FE20                  		move.w	(v_rings).w,d0	; load number of rings
00010F76 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
00010F7A 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set ring bonus
00010F88 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w ; update rings counter
00010F8E                            
00010F8E                            locret_ECEE:
00010F8E 4E75                       		rts	
00010F90                            
00010F90                            ; End of function GotThroughAct
00010F90                            
00010F90                            ; ===========================================================================
00010F90 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
00010FA4 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
00010FBA                            ; ===========================================================================
00010FBA                            
00010FBA                            Sign_Exit:	; Routine 8
00010FBA 4E75                       		rts	
00010FBC                            
00010FBC                            ; ---------------------------------------------------------------------------
00010FBC                            ; Subroutine to	set up bonuses at the end of an	zone
00010FBC                            ; ---------------------------------------------------------------------------
00010FBC                            
00010FBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010FBC                            
00010FBC                            
00010FBC                            GotThroughAct1:
00010FBC 4A38 D5C0                  		tst.b	(v_objspace+$5C0).w
00010FC0 6600                       		bne.s	locret_ECEE1
00010FC2 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w
00010FC8 4238 FE2D                  		clr.b	(v_invinc).w	; disable invincibility
00010FCC 4238 FE2E                  		clr.b	(v_shoes).w	; clear speed shoes
00010FD0 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
00010FD4 11FC 003A D5C0             		move.b	#id_GotThroughCard,(v_objspace+$5C0).w
00010FDA 7000                       		moveq	#plcid_TitleCard,d0
00010FDC 4EB9 0000 171C             		jsr	(NewPLC).l	; load title card patterns
00010FE2 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w
00010FE8 7000                       		moveq	#0,d0
00010FEA 1038 FE23                  		move.b	(v_timemin).w,d0
00010FEE C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
00010FF2 7200                       		moveq	#0,d1
00010FF4 1238 FE24                  		move.b	(v_timesec).w,d1
00010FF8 D041                       		add.w	d1,d0		; add up your time
00010FFA 80FC 000F                  		divu.w	#15,d0		; divide by 15
00010FFE 7214                       		moveq	#$14,d1
00011000 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
00011002 6500 0000                  		bcs.w	hastimebonus2	; if not, branch
00011006 3001                       		move.w	d1,d0		; use minimum time bonus (0)
00011008                            
00011008                            	hastimebonus2:
00011008 D040                       		add.w	d0,d0
0001100A 31FB 0000 F7D2             		move.w	TimeBonuses1(pc,d0.w),(v_timebonus).w ; set time bonus
00011010 3038 FE20                  		move.w	(v_rings).w,d0	; load number of rings
00011014 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
00011018 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set ring bonus
00011026 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w ; update rings counter
0001102C                            
0001102C                            locret_ECEE1:
0001102C 4E75                       		rts	
0001102E                            
0001102E                            ; End of function GotThroughAct		
0001102E                            
0001102E 1388 1388 03E8 01F4 0190+  TimeBonuses1:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
00011042 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
00011042 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
00011058                            		include	"_anim\Signpost.asm"
00011058                            ; ---------------------------------------------------------------------------
00011058                            ; Animation script - signpost
00011058                            ; ---------------------------------------------------------------------------
00011058 0000                       Ani_Sign:	dc.w @eggman-Ani_Sign
0001105A 0000                       		dc.w @spin1-Ani_Sign
0001105C 0000                       		dc.w @spin2-Ani_Sign
0001105E 0000                       		dc.w @sonic-Ani_Sign
00011060 0F00 FF                    @eggman:	dc.b $F, 0, afEnd
00011064 00                         		even
00011064 0100 0102 03FF             @spin1:		dc.b 1,	0, 1, 2, 3, afEnd
0001106A 0104 0102 03FF             @spin2:		dc.b 1,	4, 1, 2, 3, afEnd
00011070 0F04 FF                    @sonic:		dc.b $F, 4, afEnd
00011074 00                         		even
00011074 00                         		even
00011074                            Map_Sign:	include	"_maps\Signpost.asm"
00011074                            ; --------------------------------------------------------------------------------
00011074                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00011074                            ; --------------------------------------------------------------------------------
00011074                            
00011074                            SME_KvSue:	
00011074 0000 0000                  		dc.w SME_KvSue_A-SME_KvSue, SME_KvSue_1F-SME_KvSue	
00011078 0000 0000                  		dc.w SME_KvSue_2F-SME_KvSue, SME_KvSue_3F-SME_KvSue	
0001107C 0000                       		dc.w SME_KvSue_4F-SME_KvSue	
0001107E 04                         SME_KvSue_A:	dc.b 4	
0001107F F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8	
00011084 F00B 0800 00               		dc.b $F0, $B, 8, 0, 0	
00011089 1001 0038 FC               		dc.b $10, 1, 0, $38, $FC	
0001108E 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
00011093 03                         SME_KvSue_1F:	dc.b 3	
00011094 F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0	
00011099 1001 0038 FC               		dc.b $10, 1, 0, $38, $FC	
0001109E 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
000110A3 03                         SME_KvSue_2F:	dc.b 3	
000110A4 F003 001C FC               		dc.b $F0, 3, 0, $1C, $FC	
000110A9 1001 0838 FC               		dc.b $10, 1, 8, $38, $FC	
000110AE 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
000110B3 03                         SME_KvSue_3F:	dc.b 3	
000110B4 F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0	
000110B9 1001 0838 FC               		dc.b $10, 1, 8, $38, $FC	
000110BE 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
000110C3 04                         SME_KvSue_4F:	dc.b 4	
000110C4 F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8	
000110C9 F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0	
000110CE 1001 0038 FC               		dc.b $10, 1, 0, $38, $FC	
000110D3 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
000110D8                            		even
000110D8                            		even
000110D8                            
000110D8                            		include	"_incObj\4C & 4D Lava Geyser Maker.asm"
000110D8                            ; ---------------------------------------------------------------------------
000110D8                            ; Object 4C - lava geyser / lavafall producer (MZ)
000110D8                            ; ---------------------------------------------------------------------------
000110D8                            
000110D8                            GeyserMaker:
000110D8 7000                       		moveq	#0,d0
000110DA 1028 0024                  		move.b	obRoutine(a0),d0
000110DE 323B 0000                  		move.w	GMake_Index(pc,d0.w),d1
000110E2 4EBB 1000                  		jsr	GMake_Index(pc,d1.w)
000110E6 6000 0000                  		bra.w	Geyser_ChkDel
000110EA                            ; ===========================================================================
000110EA 0000                       GMake_Index:	dc.w GMake_Main-GMake_Index
000110EC 0000                       		dc.w GMake_Wait-GMake_Index
000110EE 0000                       		dc.w GMake_ChkType-GMake_Index
000110F0 0000                       		dc.w GMake_MakeLava-GMake_Index
000110F2 0000                       		dc.w GMake_Display-GMake_Index
000110F4 0000                       		dc.w GMake_Delete-GMake_Index
000110F6                            
000110F6 =00000034                  gmake_time:	equ $34		; time delay (2 bytes)
000110F6 =00000032                  gmake_timer:	equ $32		; current time remaining (2 bytes)
000110F6 =0000003C                  gmake_parent:	equ $3C		; address of parent object
000110F6                            ; ===========================================================================
000110F6                            
000110F6                            GMake_Main:	; Routine 0
000110F6 5428 0024                  		addq.b	#2,obRoutine(a0)
000110FA 217C 0000 0000 0004        		move.l	#Map_Geyser,obMap(a0)
00011102 317C E3A8 0002             		move.w	#$E3A8,obGfx(a0)
00011108 117C 0004 0001             		move.b	#4,obRender(a0)
0001110E 317C 0080 0018             		move.w	#$80,obPriority(a0)
00011114 117C 0038 0014             		move.b	#$38,obActWid(a0)
0001111A 317C 0078 0034             		move.w	#120,gmake_time(a0) ; set time delay to 2 seconds
00011120                            
00011120                            GMake_Wait:	; Routine 2
00011120 5368 0032                  		subq.w	#1,gmake_timer(a0) ; decrement timer
00011124 6A00                       		bpl.s	@cancel		; if time remains, branch
00011126                            
00011126 3168 0034 0032             		move.w	gmake_time(a0),gmake_timer(a0) ; reset timer
0001112C 3038 D00C                  		move.w	(v_player+obY).w,d0
00011130 3228 000C                  		move.w	obY(a0),d1
00011134 B041                       		cmp.w	d1,d0
00011136 6400                       		bcc.s	@cancel
00011138 0441 0170                  		subi.w	#$170,d1
0001113C B041                       		cmp.w	d1,d0
0001113E 6500                       		bcs.s	@cancel
00011140 5428 0024                  		addq.b	#2,obRoutine(a0) ; if Sonic is within range, goto GMake_ChkType
00011144                            
00011144                            	@cancel:
00011144 4E75                       		rts	
00011146                            ; ===========================================================================
00011146                            
00011146                            GMake_MakeLava:	; Routine 6
00011146 5428 0024                  		addq.b	#2,obRoutine(a0)
0001114A 6100 EBE2                  		bsr.w	FindNextFreeObj
0001114E 6600                       		bne.s	@fail
00011150 12BC 004D                  		move.b	#id_LavaGeyser,0(a1) ; load lavafall object
00011154 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001115A 3368 000C 000C             		move.w	obY(a0),obY(a1)
00011160 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
00011166 2348 003C                  		move.l	a0,gmake_parent(a1)
0001116A                            
0001116A                            	@fail:
0001116A 117C 0001 001C             		move.b	#1,obAnim(a0)
00011170 4A28 0028                  		tst.b	obSubtype(a0)	; is object type 0 (geyser) ?
00011174 6700                       		beq.s	@isgeyser	; if yes, branch
00011176 117C 0004 001C             		move.b	#4,obAnim(a0)
0001117C 6000                       		bra.s	GMake_Display
0001117E                            ; ===========================================================================
0001117E                            
0001117E                            	@isgeyser:
0001117E 2268 003C                  		movea.l	gmake_parent(a0),a1 ; get parent object address
00011182 08E9 0001 0022             		bset	#1,obStatus(a1)
00011188 337C FA80 0012             		move.w	#-$580,obVelY(a1)
0001118E 6000                       		bra.s	GMake_Display
00011190                            ; ===========================================================================
00011190                            
00011190                            GMake_ChkType:	; Routine 4
00011190 4A28 0028                  		tst.b	obSubtype(a0)	; is object type 00 (geyser) ?
00011194 6700                       		beq.s	GMake_Display	; if yes, branch
00011196 5428 0024                  		addq.b	#2,obRoutine(a0)
0001119A 4E75                       		rts	
0001119C                            ; ===========================================================================
0001119C                            
0001119C                            GMake_Display:	; Routine 8
0001119C 43F9 0000 0000             		lea	(Ani_Geyser).l,a1
000111A2 6100 B794                  		bsr.w	AnimateSprite
000111A6 6100 E6E4                  		bsr.w	DisplaySprite
000111AA 4E75                       		rts	
000111AC                            ; ===========================================================================
000111AC                            
000111AC                            GMake_Delete:	; Routine $A
000111AC 117C 0000 001C             		move.b	#0,obAnim(a0)
000111B2 117C 0002 0024             		move.b	#2,obRoutine(a0)
000111B8 4A28 0028                  		tst.b	obSubtype(a0)
000111BC 6700 E70E                  		beq.w	DeleteObject
000111C0 4E75                       		rts	
000111C2                            
000111C2                            
000111C2                            ; ---------------------------------------------------------------------------
000111C2                            ; Object 4D - lava geyser / lavafall (MZ)
000111C2                            ; ---------------------------------------------------------------------------
000111C2                            
000111C2                            LavaGeyser:
000111C2 7000                       		moveq	#0,d0
000111C4 1028 0024                  		move.b	obRoutine(a0),d0
000111C8 323B 0000                  		move.w	Geyser_Index(pc,d0.w),d1
000111CC 4EBB 1000                  		jsr	Geyser_Index(pc,d1.w)
000111D0 6000 E6BA                  		bra.w	DisplaySprite
000111D4                            ; ===========================================================================
000111D4 0000                       Geyser_Index:	dc.w Geyser_Main-Geyser_Index
000111D6 0000                       		dc.w Geyser_Action-Geyser_Index
000111D8 0000                       		dc.w loc_EFFC-Geyser_Index
000111DA 0000                       		dc.w Geyser_Delete-Geyser_Index
000111DC                            
000111DC FB00 0000                  Geyser_Speeds:	dc.w $FB00, 0
000111E0                            ; ===========================================================================
000111E0                            
000111E0                            Geyser_Main:	; Routine 0
000111E0 5428 0024                  		addq.b	#2,obRoutine(a0)
000111E4 3168 000C 0030             		move.w	obY(a0),$30(a0)
000111EA 4A28 0028                  		tst.b	obSubtype(a0)
000111EE 6700                       		beq.s	@isgeyser
000111F0 0468 0250 000C             		subi.w	#$250,obY(a0)
000111F6                            
000111F6                            	@isgeyser:
000111F6 7000                       		moveq	#0,d0
000111F8 1028 0028                  		move.b	obSubtype(a0),d0
000111FC D040                       		add.w	d0,d0
000111FE 317B 00DC 0012             		move.w	Geyser_Speeds(pc,d0.w),obVelY(a0)
00011204 2248                       		movea.l	a0,a1
00011206 7201                       		moveq	#1,d1
00011208 6100                       		bsr.s	@makelava
0001120A 6000                       		bra.s	@activate
0001120C                            ; ===========================================================================
0001120C                            
0001120C                            	@loop:
0001120C 6100 EB20                  		bsr.w	FindNextFreeObj
00011210 6600                       		bne.s	@fail
00011212                            
00011212                            @makelava:
00011212 12BC 004D                  		move.b	#id_LavaGeyser,0(a1)
00011216 237C 0000 0000 0004        		move.l	#Map_Geyser,obMap(a1)
0001121E 337C 63A8 0002             		move.w	#$63A8,obGfx(a1)
00011224 137C 0004 0001             		move.b	#4,obRender(a1)
0001122A 137C 0020 0014             		move.b	#$20,obActWid(a1)
00011230 3368 0008 0008             		move.w	obX(a0),obX(a1)
00011236 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001123C 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
00011242 337C 0080 0018             		move.w	#$80,obPriority(a1)
00011248 137C 0005 001C             		move.b	#5,obAnim(a1)
0001124E 4A28 0028                  		tst.b	obSubtype(a0)
00011252 6700                       		beq.s	@fail
00011254 137C 0002 001C             		move.b	#2,obAnim(a1)
0001125A                            
0001125A                            	@fail:
0001125A 51C9 FFB0                  		dbf	d1,@loop
0001125E 4E75                       		rts	
00011260                            ; ===========================================================================
00011260                            
00011260                            @activate:
00011260 0669 0060 000C             		addi.w	#$60,obY(a1)
00011266 3368 0030 0030             		move.w	$30(a0),$30(a1)
0001126C 0669 0060 0030             		addi.w	#$60,$30(a1)
00011272 137C 0093 0020             		move.b	#$93,obColType(a1)
00011278 137C 0080 0016             		move.b	#$80,obHeight(a1)
0001127E 08E9 0004 0001             		bset	#4,obRender(a1)
00011284 5829 0024                  		addq.b	#4,obRoutine(a1)
00011288 2348 003C                  		move.l	a0,$3C(a1)
0001128C 4A28 0028                  		tst.b	obSubtype(a0)
00011290 6700                       		beq.s	@sound
00011292 7200                       		moveq	#0,d1
00011294 6100 FF76                  		bsr.w	@loop
00011298 5429 0024                  		addq.b	#2,obRoutine(a1)
0001129C 08E9 0004 0002             		bset	#4,obGfx(a1)
000112A2 0669 0100 000C             		addi.w	#$100,obY(a1)
000112A8 337C 0000 0018             		move.w	#0,obPriority(a1)
000112AE 3368 0030 0030             		move.w	$30(a0),$30(a1)
000112B4 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
000112BA 117C 0000 0028             		move.b	#0,obSubtype(a0)
000112C0                            
000112C0                            	@sound:
000112CA                            
000112CA                            Geyser_Action:	; Routine 2
000112CA 7000                       		moveq	#0,d0
000112CC 1028 0028                  		move.b	obSubtype(a0),d0
000112D0 D040                       		add.w	d0,d0
000112D2 323B 0000                  		move.w	Geyser_Types(pc,d0.w),d1
000112D6 4EBB 1000                  		jsr	Geyser_Types(pc,d1.w)
000112DA 6100 E59C                  		bsr.w	SpeedToPos
000112DE 43F9 0000 0000             		lea	(Ani_Geyser).l,a1
000112E4 6100 B652                  		bsr.w	AnimateSprite
000112E8                            
000112E8                            Geyser_ChkDel:
00011306 4E75                       		rts	
00011308                            ; ===========================================================================
00011308 0000                       Geyser_Types:	dc.w Geyser_Type00-Geyser_Types
0001130A 0000                       		dc.w Geyser_Type01-Geyser_Types
0001130C                            ; ===========================================================================
0001130C                            
0001130C                            Geyser_Type00:
0001130C 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase object's falling speed
00011312 3028 0030                  		move.w	$30(a0),d0
00011316 B068 000C                  		cmp.w	obY(a0),d0
0001131A 6400                       		bcc.s	locret_EFDA
0001131C 5828 0024                  		addq.b	#4,obRoutine(a0)
00011320 2268 003C                  		movea.l	$3C(a0),a1
00011324 137C 0003 001C             		move.b	#3,obAnim(a1)
0001132A                            
0001132A                            locret_EFDA:
0001132A 4E75                       		rts	
0001132C                            ; ===========================================================================
0001132C                            
0001132C                            Geyser_Type01:
0001132C 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase object's falling speed
00011332 3028 0030                  		move.w	$30(a0),d0
00011336 B068 000C                  		cmp.w	obY(a0),d0
0001133A 6400                       		bcc.s	locret_EFFA
0001133C 5828 0024                  		addq.b	#4,obRoutine(a0)
00011340 2268 003C                  		movea.l	$3C(a0),a1
00011344 137C 0001 001C             		move.b	#1,obAnim(a1)
0001134A                            
0001134A                            locret_EFFA:
0001134A 4E75                       		rts	
0001134C                            ; ===========================================================================
0001134C                            
0001134C                            loc_EFFC:	; Routine 4
0001134C 2268 003C                  		movea.l	$3C(a0),a1
00011350 0C29 0006 0024             		cmpi.b	#6,obRoutine(a1)
00011356 6700 0000                  		beq.w	Geyser_Delete
0001135A 3029 000C                  		move.w	obY(a1),d0
0001135E 0640 0060                  		addi.w	#$60,d0
00011362 3140 000C                  		move.w	d0,obY(a0)
00011366 9068 0030                  		sub.w	$30(a0),d0
0001136A 4440                       		neg.w	d0
0001136C 7208                       		moveq	#8,d1
0001136E 0C40 0040                  		cmpi.w	#$40,d0
00011372 6C00                       		bge.s	loc_F026
00011374 720B                       		moveq	#$B,d1
00011376                            
00011376                            loc_F026:
00011376 0C40 0080                  		cmpi.w	#$80,d0
0001137A 6F00                       		ble.s	loc_F02E
0001137C 720E                       		moveq	#$E,d1
0001137E                            
0001137E                            loc_F02E:
0001137E 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00011382 6A00                       		bpl.s	loc_F04C
00011384 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0001138A 5228 001B                  		addq.b	#1,obAniFrame(a0)
0001138E 0C28 0002 001B             		cmpi.b	#2,obAniFrame(a0)
00011394 6500                       		bcs.s	loc_F04C
00011396 117C 0000 001B             		move.b	#0,obAniFrame(a0)
0001139C                            
0001139C                            loc_F04C:
0001139C 1028 001B                  		move.b	obAniFrame(a0),d0
000113A0 D001                       		add.b	d1,d0
000113A2 1140 001A                  		move.b	d0,obFrame(a0)
000113A6 6000 FF40                  		bra.w	Geyser_ChkDel
000113AA                            ; ===========================================================================
000113AA                            
000113AA                            Geyser_Delete:	; Routine 6
000113AA 6000 E520                  		bra.w	DeleteObject
000113AA 6000 E520                  		bra.w	DeleteObject
000113AE                            		include	"_incObj\54 Lava Tag.asm"
000113AE                            ; ---------------------------------------------------------------------------
000113AE                            ; Object 54 - invisible	lava tag (MZ)
000113AE                            ; ---------------------------------------------------------------------------
000113AE                            
000113AE                            LavaTag:
000113AE 0C28 0002 0028             		cmpi.b	#2,obSubtype(a0)	;TIS
000113B4 6E00 0000                  		bgt	WaterTag	;TIS
000113B8 7000                       		moveq	#0,d0
000113BA 1028 0024                  		move.b	obRoutine(a0),d0
000113BE 323B 0000                  		move.w	LTag_Index(pc,d0.w),d1
000113C2 4EFB 1000                  		jmp	LTag_Index(pc,d1.w)
000113C6                            ; ===========================================================================
000113C6 0000                       LTag_Index:	dc.w LTag_Main-LTag_Index
000113C8 0000                       		dc.w LTag_ChkDel-LTag_Index
000113CA                            
000113CA 9694 95                    LTag_ColTypes:	dc.b $96, $94, $95
000113CE 00                         		even
000113CE                            ; ===========================================================================
000113CE                            
000113CE                            LTag_Main:	; Routine 0
000113CE 5428 0024                  		addq.b	#2,obRoutine(a0)
000113D2 7000                       		moveq	#0,d0
000113D4 1028 0028                  		move.b	obSubtype(a0),d0
000113D8 117B 00F0 0020             		move.b	LTag_ColTypes(pc,d0.w),obColType(a0)
000113DE 217C 0000 0000 0004        		move.l	#Map_LTag,obMap(a0)
000113E6 117C 0084 0001             		move.b	#$84,obRender(a0)
000113EC                            
000113EC                            LTag_ChkDel:	; Routine 2
000113EC 3028 0008                  		move.w	obX(a0),d0
000113F0 0240 FF80                  		andi.w	#$FF80,d0
000113F4 3238 F700                  		move.w	(v_screenposx).w,d1
000113F8 0441 0080                  		subi.w	#$80,d1
000113FC 0241 FF80                  		andi.w	#$FF80,d1
00011400 9041                       		sub.w	d1,d0
00011402 6B00 E4C8                  		bmi.w	DeleteObject
00011406 0C40 0280                  		cmpi.w	#$280,d0
0001140A 6200 E4C0                  		bhi.w	DeleteObject
0001140E 4E75                       		rts
00011410                            
00011410                            
00011410                            ; ---------------------------------------------------------------------------
00011410                            ; Object 54a - invisible	water tag (MZ) - TIS
00011410                            ; ---------------------------------------------------------------------------
00011410                            
00011410                            WaterTag:	
00011410 7000                       		moveq	#0,d0
00011412 1028 0024                  		move.b	obRoutine(a0),d0
00011416 323B 0000                  		move.w	WTag_Index(pc,d0.w),d1
0001141A 4EFB 1000                  		jmp	WTag_Index(pc,d1.w)
0001141E                            ; ===========================================================================
0001141E 0000                       WTag_Index:	dc.w WTag_Main-WTag_Index
00011420 0000                       		dc.w WTag_ChkDel-WTag_Index
00011422                            
00011422 9694 95                    WTag_ColTypes:	dc.b $96, $94, $95
00011426 00                         		even
00011426                            ; ===========================================================================
00011426                            
00011426                            
00011426                            WTag_Main:	; Routine 0
00011426 5428 0024                  		addq.b	#2,obRoutine(a0)
0001142A 7000                       		moveq	#0,d0
0001142C                            		;move.b	obSubtype(a0),d0
0001142C                            		;move.b	WTag_ColTypes(pc,d0.w),obColType(a0)
0001142C 0400 00F0                  		sub.b	#$F0,d0
00011430 1178 0096 0020             		move.b	$96,obColType(a0)							
00011436                            		;move.l	#Map_LTag,obMap(a0)
00011436                            		;move.b	#$84,obRender(a0)
00011436                            
00011436                            WTag_ChkDel:	; Routine 2
00011436 3028 0008                  		move.w	obX(a0),d0
0001143A 0240 FF80                  		andi.w	#$FF80,d0
0001143E 3238 F700                  		move.w	(v_screenposx).w,d1
00011442 0441 0080                  		subi.w	#$80,d1
00011446 0241 FF80                  		andi.w	#$FF80,d1
0001144A 9041                       		sub.w	d1,d0
0001144C 6B00 E47E                  		bmi.w	DeleteObject
00011450 0C40 0280                  		cmpi.w	#$280,d0
00011454 6200 E476                  		bhi.w	DeleteObject
00011458 4E75                       		rts
0001145A                            
0001145A                            
0001145A                            Map_LTag:	include	"_maps\Lava Tag.asm"
0001145A                            ; ---------------------------------------------------------------------------
0001145A                            ; Sprite mappings - invisible lava tag (MZ)
0001145A                            ; ---------------------------------------------------------------------------
0001145A                            Map_LTag_internal:
0001145A 0000                       		dc.w @0-Map_LTag_internal
0001145C 00                         @0:		dc.b 0		; no sprite, because the tag is invisible!
0001145E 00                         		even
0001145E 00                         		even
0001145E                            		include	"_anim\Lava Geyser.asm"
0001145E                            ; ---------------------------------------------------------------------------
0001145E                            ; Animation script - geyser of lava (MZ)
0001145E                            ; ---------------------------------------------------------------------------
0001145E 0000                       Ani_Geyser:	dc.w @bubble1-Ani_Geyser
00011460 0000                       		dc.w @bubble2-Ani_Geyser
00011462 0000                       		dc.w @end-Ani_Geyser
00011464 0000                       		dc.w @bubble3-Ani_Geyser
00011466 0000                       		dc.w @blank-Ani_Geyser
00011468 0000                       		dc.w @bubble4-Ani_Geyser
0001146A 0200 0100 0104 0504 05FC   @bubble1:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	afRoutine
00011474 0202 03FF                  @bubble2:	dc.b 2,	2, 3, afEnd
00011478 0206 07FF                  @end:		dc.b 2,	6, 7, afEnd
0001147C 0202 0300 0100 01FC        @bubble3:	dc.b 2,	2, 3, 0, 1, 0, 1, afRoutine
00011484 0F13 FF                    @blank:		dc.b $F, $13, afEnd
00011488 00                         		even
00011488 0211 12FF                  @bubble4:	dc.b 2,	$11, $12, afEnd
0001148C                            		even
0001148C                            		even
0001148C                            Map_Geyser:	include	"_maps\Lava Geyser.asm"
0001148C                            ; ---------------------------------------------------------------------------
0001148C                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0001148C                            ; ---------------------------------------------------------------------------
0001148C                            Map_Geyser_internal:
0001148C 0000                       		dc.w @bubble1-Map_Geyser_internal
0001148E 0000                       		dc.w @bubble2-Map_Geyser_internal
00011490 0000                       		dc.w @bubble3-Map_Geyser_internal
00011492 0000                       		dc.w @bubble4-Map_Geyser_internal
00011494 0000                       		dc.w @bubble5-Map_Geyser_internal
00011496 0000                       		dc.w @bubble6-Map_Geyser_internal
00011498 0000                       		dc.w @end1-Map_Geyser_internal
0001149A 0000                       		dc.w @end2-Map_Geyser_internal
0001149C 0000                       		dc.w @medcolumn1-Map_Geyser_internal
0001149E 0000                       		dc.w @medcolumn2-Map_Geyser_internal
000114A0 0000                       		dc.w @medcolumn3-Map_Geyser_internal
000114A2 0000                       		dc.w @shortcolumn1-Map_Geyser_internal
000114A4 0000                       		dc.w @shortcolumn2-Map_Geyser_internal
000114A6 0000                       		dc.w @shortcolumn3-Map_Geyser_internal
000114A8 0000                       		dc.w @longcolumn1-Map_Geyser_internal
000114AA 0000                       		dc.w @longcolumn2-Map_Geyser_internal
000114AC 0000                       		dc.w @longcolumn3-Map_Geyser_internal
000114AE 0000                       		dc.w @bubble7-Map_Geyser_internal
000114B0 0000                       		dc.w @bubble8-Map_Geyser_internal
000114B2 0000                       		dc.w @blank-Map_Geyser_internal
000114B4 02                         @bubble1:	dc.b 2
000114B5 EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
000114BA EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
000114BF 02                         @bubble2:	dc.b 2
000114C0 EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
000114C5 EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
000114CA 04                         @bubble3:	dc.b 4
000114CB EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
000114D0 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
000114D5 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
000114DA EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
000114DF 04                         @bubble4:	dc.b 4
000114E0 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
000114E5 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
000114EA F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
000114EF EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
000114F4 06                         @bubble5:	dc.b 6
000114F5 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
000114FA F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
000114FF F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
00011504 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
00011509 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
0001150E E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
00011513 06                         @bubble6:	dc.b 6
00011514 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
00011519 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0001151E F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
00011523 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
00011528 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
0001152D E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
00011532 02                         @end1:		dc.b 2
00011533 E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
00011538 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
0001153D 02                         @end2:		dc.b 2
0001153E E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
00011543 E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
00011548 0A                         @medcolumn1:	dc.b $A
00011549 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0001154E 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00011553 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00011558 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0001155D D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00011562 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00011567 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0001156C F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
00011571 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
00011576 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0001157B 0A                         @medcolumn2:	dc.b $A
0001157C 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00011581 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00011586 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0001158B B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00011590 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00011595 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0001159A F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0001159F F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
000115A4 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
000115A9 100F 0850 00               		dc.b $10, $F, 8, $50, 0
000115AE 0A                         @medcolumn3:	dc.b $A
000115AF 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
000115B4 900F 0860 00               		dc.b $90, $F, 8, $60, 0
000115B9 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
000115BE B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
000115C3 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
000115C8 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
000115CD F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
000115D2 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
000115D7 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
000115DC 100F 0860 00               		dc.b $10, $F, 8, $60, 0
000115E1 06                         @shortcolumn1:	dc.b 6
000115E2 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
000115E7 900F 0840 00               		dc.b $90, $F, 8, $40, 0
000115EC B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
000115F1 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
000115F6 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
000115FB D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00011600 06                         @shortcolumn2:	dc.b 6
00011601 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00011606 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0001160B B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00011610 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00011615 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0001161A D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0001161F 06                         @shortcolumn3:	dc.b 6
00011620 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00011625 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0001162A B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0001162F B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00011634 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00011639 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0001163E 10                         @longcolumn1:	dc.b $10
0001163F 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00011644 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00011649 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0001164E B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00011653 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00011658 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0001165D F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
00011662 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
00011667 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0001166C 100F 0840 00               		dc.b $10, $F, 8, $40, 0
00011671 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
00011676 300F 0840 00               		dc.b $30, $F, 8, $40, 0
0001167B 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
00011680 500F 0840 00               		dc.b $50, $F, 8, $40, 0
00011685 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
0001168A 700F 0840 00               		dc.b $70, $F, 8, $40, 0
0001168F 10                         @longcolumn2:	dc.b $10
00011690 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00011695 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0001169A B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0001169F B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
000116A4 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
000116A9 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
000116AE F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
000116B3 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
000116B8 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
000116BD 100F 0850 00               		dc.b $10, $F, 8, $50, 0
000116C2 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
000116C7 300F 0850 00               		dc.b $30, $F, 8, $50, 0
000116CC 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
000116D1 500F 0850 00               		dc.b $50, $F, 8, $50, 0
000116D6 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
000116DB 700F 0850 00               		dc.b $70, $F, 8, $50, 0
000116E0 10                         @longcolumn3:	dc.b $10
000116E1 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
000116E6 900F 0860 00               		dc.b $90, $F, 8, $60, 0
000116EB B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
000116F0 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
000116F5 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
000116FA D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
000116FF F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
00011704 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
00011709 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0001170E 100F 0860 00               		dc.b $10, $F, 8, $60, 0
00011713 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
00011718 300F 0860 00               		dc.b $30, $F, 8, $60, 0
0001171D 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
00011722 500F 0860 00               		dc.b $50, $F, 8, $60, 0
00011727 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
0001172C 700F 0860 00               		dc.b $70, $F, 8, $60, 0
00011731 06                         @bubble7:	dc.b 6
00011732 E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
00011737 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
0001173C E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
00011741 E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
00011746 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
0001174B D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
00011750 06                         @bubble8:	dc.b 6
00011751 E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
00011756 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
0001175B E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
00011760 E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
00011765 D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
0001176A D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
0001176F 00                         @blank:	dc.b 0
00011770                            		even
00011770                            		even
00011770                            
00011770                            		include	"_incObj\40 Moto Bug.asm" ; includes "_incObj\sub RememberState.asm"
00011770                            ; ---------------------------------------------------------------------------
00011770                            ; Object 40 - Moto Bug enemy (GHZ)
00011770                            ; ---------------------------------------------------------------------------
00011770                            
00011770                            MotoBug:
00011770 7000                       		moveq	#0,d0
00011772 1028 0024                  		move.b	obRoutine(a0),d0
00011776 323B 0000                  		move.w	Moto_Index(pc,d0.w),d1
0001177A 4EFB 1000                  		jmp	Moto_Index(pc,d1.w)
0001177E                            ; ===========================================================================
0001177E 0000                       Moto_Index:	dc.w Moto_Main-Moto_Index
00011780 0000                       		dc.w Moto_Action-Moto_Index
00011782 0000                       		dc.w Moto_Animate-Moto_Index
00011784 0000                       		dc.w Moto_Delete-Moto_Index
00011786                            ; ===========================================================================
00011786                            
00011786                            Moto_Main:	; Routine 0
00011786 217C 0000 0000 0004        		move.l	#Map_Moto,obMap(a0)
0001178E 317C 04F0 0002             		move.w	#$4F0,obGfx(a0)
00011794 117C 0004 0001             		move.b	#4,obRender(a0)
0001179A 317C 0200 0018             		move.w	#$200,obPriority(a0)
000117A0 117C 0014 0014             		move.b	#$14,obActWid(a0)
000117A6 4A28 001C                  		tst.b	obAnim(a0)	; is object a smoke trail?
000117AA 6600                       		bne.s	@smoke		; if yes, branch
000117AC 117C 000E 0016             		move.b	#$E,obHeight(a0)
000117B2 117C 0008 0017             		move.b	#8,obWidth(a0)
000117B8 117C 000C 0020             		move.b	#$C,obColType(a0)
000117BE 6100 E080                  		bsr.w	ObjectFall
000117C2 4EB9 0000 0000             		jsr	(ObjFloorDist).l
000117C8 4A41                       		tst.w	d1
000117CA 6A00                       		bpl.s	@notonfloor
000117CC D368 000C                  		add.w	d1,obY(a0)	; match	object's position with the floor
000117D0 317C 0000 0012             		move.w	#0,obVelY(a0)
000117D6 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Moto_Action next
000117DA 0868 0000 0022             		bchg	#0,obStatus(a0)
000117E0                            
000117E0                            	@notonfloor:
000117E0 4E75                       		rts	
000117E2                            ; ===========================================================================
000117E2                            
000117E2                            @smoke:
000117E2 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto Moto_Animate next
000117E6 6000 0000                  		bra.w	Moto_Animate
000117EA                            ; ===========================================================================
000117EA                            
000117EA                            Moto_Action:	; Routine 2
000117EA 7000                       		moveq	#0,d0
000117EC 1028 0025                  		move.b	ob2ndRout(a0),d0
000117F0 323B 0000                  		move.w	Moto_ActIndex(pc,d0.w),d1
000117F4 4EBB 1000                  		jsr	Moto_ActIndex(pc,d1.w)
000117F8 43F9 0000 0000             		lea	(Ani_Moto).l,a1
000117FE 6100 B138                  		bsr.w	AnimateSprite
00011802                            
00011802                            		include	"_incObj\sub RememberState.asm" ; Moto_Action terminates in this file
00011802                            ; ---------------------------------------------------------------------------
00011802                            ; Subroutine to remember whether an object is destroyed/collected
00011802                            ; ---------------------------------------------------------------------------
00011802                            
00011802                            RememberState:
00011820 6000 E06A                  		bra.w	DisplaySprite
00011824                            
00011824                            	@offscreen:
00011824 45F8 FC00                  		lea	(v_objstate).w,a2
00011828 7000                       		moveq	#0,d0
0001182A 1028 0023                  		move.b	obRespawnNo(a0),d0
0001182E 6700                       		beq.s	@delete
00011830 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00011836                            
00011836                            	@delete:
00011836 6000 E094                  		bra.w	DeleteObject
00011836 6000 E094                  		bra.w	DeleteObject
0001183A                            
0001183A                            ; ===========================================================================
0001183A 0000                       Moto_ActIndex:	dc.w @move-Moto_ActIndex
0001183C 0000                       		dc.w @findfloor-Moto_ActIndex
0001183E                            
0001183E =00000030                  @time:		equ $30
0001183E =00000033                  @smokedelay:	equ $33
0001183E                            ; ===========================================================================
0001183E                            
0001183E                            @move:
0001183E 5368 0030                  		subq.w	#1,@time(a0)	; subtract 1 from pause	time
00011842 6A00                       		bpl.s	@wait		; if time remains, branch
00011844 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00011848 317C FF00 0010             		move.w	#-$100,obVelX(a0) ; move object to the left
0001184E 117C 0001 001C             		move.b	#1,obAnim(a0)
00011854 0868 0000 0022             		bchg	#0,obStatus(a0)
0001185A 6600                       		bne.s	@wait
0001185C 4468 0010                  		neg.w	obVelX(a0)	; change direction
00011860                            
00011860                            	@wait:
00011860 4E75                       		rts	
00011862                            ; ===========================================================================
00011862                            
00011862                            @findfloor:
00011862 6100 E014                  		bsr.w	SpeedToPos
00011866 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0001186C 0C41 FFF8                  		cmpi.w	#-8,d1
00011870 6D00                       		blt.s	@pause
00011872 0C41 000C                  		cmpi.w	#$C,d1
00011876 6C00                       		bge.s	@pause
00011878 D368 000C                  		add.w	d1,obY(a0)	; match	object's position with the floor
0001187C 5328 0033                  		subq.b	#1,@smokedelay(a0)
00011880 6A00                       		bpl.s	@nosmoke
00011882 117C 000F 0033             		move.b	#$F,@smokedelay(a0)
00011888 6100 E48E                  		bsr.w	FindFreeObj
0001188C 6600                       		bne.s	@nosmoke
0001188E 12BC 0040                  		move.b	#id_MotoBug,0(a1) ; load exhaust smoke object
00011892 3368 0008 0008             		move.w	obX(a0),obX(a1)
00011898 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001189E 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
000118A4 137C 0002 001C             		move.b	#2,obAnim(a1)
000118AA                            
000118AA                            	@nosmoke:
000118AA 4E75                       		rts	
000118AC                            
000118AC                            @pause:
000118AC 5528 0025                  		subq.b	#2,ob2ndRout(a0)
000118B0 317C 003B 0030             		move.w	#59,@time(a0)	; set pause time to 1 second
000118B6 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop the object moving
000118BC 117C 0000 001C             		move.b	#0,obAnim(a0)
000118C2 4E75                       		rts	
000118C4                            ; ===========================================================================
000118C4                            
000118C4                            Moto_Animate:	; Routine 4
000118C4 43F9 0000 0000             		lea	(Ani_Moto).l,a1
000118CA 6100 B06C                  		bsr.w	AnimateSprite
000118CE 6000 DFBC                  		bra.w	DisplaySprite
000118D2                            ; ===========================================================================
000118D2                            
000118D2                            Moto_Delete:	; Routine 6
000118D2 6000 DFF8                  		bra.w	DeleteObject
000118D2 6000 DFF8                  		bra.w	DeleteObject
000118D6                            		include	"_anim\Moto Bug.asm"
000118D6                            ; ---------------------------------------------------------------------------
000118D6                            ; Animation script - Motobug enemy
000118D6                            ; ---------------------------------------------------------------------------
000118D6 0000                       Ani_Moto:	dc.w @stand-Ani_Moto
000118D8 0000                       		dc.w @walk-Ani_Moto
000118DA 0000                       		dc.w @smoke-Ani_Moto
000118DC                            
000118DC 0F02 FF                    @stand:		dc.b $F, 2, afEnd
000118E0 00                         		even
000118E0 0700 0100 02FF             @walk:		dc.b 7,	0, 1, 0, 2, afEnd
000118E6 0103 0603 0604 0604 0604+  @smoke:		dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, afRoutine
000118F4 00                         		even
000118F4 00                         		even
000118F4                            Map_Moto:	include	"_maps\Moto Bug.asm"
000118F4                            ; --------------------------------------------------------------------------------
000118F4                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000118F4                            ; --------------------------------------------------------------------------------
000118F4                            
000118F4                            SME_TTY9T:	
000118F4 0000 0000                  		dc.w SME_TTY9T_E-SME_TTY9T, SME_TTY9T_23-SME_TTY9T	
000118F8 0000 0000                  		dc.w SME_TTY9T_38-SME_TTY9T, SME_TTY9T_52-SME_TTY9T	
000118FC 0000 0000                  		dc.w SME_TTY9T_58-SME_TTY9T, SME_TTY9T_5E-SME_TTY9T	
00011900 0000                       		dc.w SME_TTY9T_64-SME_TTY9T	
00011902 04                         SME_TTY9T_E:	dc.b 4	
00011903 F00D 2000 EC               		dc.b $F0, $D, $20, 0, $EC	
00011908 000C 2008 EC               		dc.b 0, $C, $20, 8, $EC	
0001190D F801 200C 0C               		dc.b $F8, 1, $20, $C, $C	
00011912 0808 200E F4               		dc.b 8, 8, $20, $E, $F4	
00011917 04                         SME_TTY9T_23:	dc.b 4	
00011918 F10D 2000 EC               		dc.b $F1, $D, $20, 0, $EC	
0001191D 010C 2008 EC               		dc.b 1, $C, $20, 8, $EC	
00011922 F901 200C 0C               		dc.b $F9, 1, $20, $C, $C	
00011927 0908 2011 F4               		dc.b 9, 8, $20, $11, $F4	
0001192C 05                         SME_TTY9T_38:	dc.b 5	
0001192D F00D 2000 EC               		dc.b $F0, $D, $20, 0, $EC	
00011932 000C 2014 EC               		dc.b 0, $C, $20, $14, $EC	
00011937 F801 200C 0C               		dc.b $F8, 1, $20, $C, $C	
0001193C 0804 2018 EC               		dc.b 8, 4, $20, $18, $EC	
00011941 0804 2012 FC               		dc.b 8, 4, $20, $12, $FC	
00011946 01                         SME_TTY9T_52:	dc.b 1	
00011947 FA00 001A 10               		dc.b $FA, 0, 0, $1A, $10	
0001194C 01                         SME_TTY9T_58:	dc.b 1	
0001194D FA00 001B 10               		dc.b $FA, 0, 0, $1B, $10	
00011952 01                         SME_TTY9T_5E:	dc.b 1	
00011953 FA00 001C 10               		dc.b $FA, 0, 0, $1C, $10	
00011958 00                         SME_TTY9T_64:	dc.b 0	
0001195A 00                         		even
0001195A 00                         		even
0001195A                            		include	"_incObj\4F.asm"
0001195A                            ; ---------------------------------------------------------------------------
0001195A                            ; Object 4F - Splats
0001195A                            ; ---------------------------------------------------------------------------
0001195A                            
0001195A                            Obj4F:
0001195A 7000                                       moveq   #0,d0
0001195C 1028 0024                                  move.b  $24(a0),d0
00011960 323B 0000                                  move.w  ObjSplats_Index(pc,d0.w),d1
00011964 4EFB 1000                                  jmp     ObjSplats_Index(pc,d1.w)
00011968                            ; ---------------------------------------------------------------------------
00011968 0000                       ObjSplats_Index:dc.w ObjSplats_Init-*
0001196A 0000                                       dc.w loc_D246-ObjSplats_Index
0001196C 0000                                       dc.w ObjSplats_Bounce-ObjSplats_Index
0001196E 0000                                       dc.w loc_D2C8-ObjSplats_Index
00011970                            ; ---------------------------------------------------------------------------
00011970                            
00011970                            ObjSplats_Init:
00011970 5428 0024                                  addq.b  #2,$24(a0)
00011974 217C 0000 0000 0004                        move.l  #Map_Splats,4(a0)
0001197C 317C 24E4 0002                             move.w  #$24E4,2(a0)
00011982 117C 0004 0001                             move.b  #4,1(a0)
00011988 117C 0004 0014                             move.b  #4,obActWid(a0)
0001198E 317C 0200 0018             				move.w	#$200,obPriority(a0)
00011994 117C 0014 0016                             move.b  #$14,$16(a0)
0001199A 117C 0002 0020                             move.b  #2,$20(a0)
000119A0 4A28 0028                                  tst.b   $28(a0)
000119A4 6700                                       beq.s   loc_D246
000119A6 343C 0300                                  move.w  #$300,d2
000119AA 6000                                       bra.s   ObjSplats_FaceRight
000119AC                            ; ---------------------------------------------------------------------------
000119AC                            
000119AC                            loc_D246:
000119AC 343C 00E0                                  move.w  #$E0,d2
000119B0                            
000119B0                            ObjSplats_FaceRight:
000119B0 323C 0100                                  move.w  #$100,d1
000119B4 08E8 0000 0001                             bset    #0,1(a0)
000119BA 3038 D008                                  move.w  ($FFFFD008).w,d0
000119BE 9068 0008                                  sub.w   8(a0),d0
000119C2 6400                                       bcc.s   ObjSplats_Move
000119C4 4440                                       neg.w   d0
000119C6 4441                                       neg.w   d1
000119C8 08A8 0000 0001                             bclr    #0,1(a0)
000119CE                            
000119CE                            ObjSplats_Move:
000119CE B042                                       cmp.w   d2,d0
000119D0 6400                                       bcc.s   ObjSplats_Bounce
000119D2 3141 0010                                  move.w  d1,$10(a0)
000119D6 5428 0024                                  addq.b  #2,$24(a0)
000119DA                            
000119DA                            ObjSplats_Bounce:
000119DA 6100 DE64                                  bsr.w   ObjectFall
000119DE 117C 0001 001A                             move.b  #1,$1A(a0)
000119E4 4A68 0012                                  tst.w   $12(a0)
000119E8 6B00                                       bmi.s   ObjSplats_Turn
000119EA 117C 0000 001A                             move.b  #0,$1A(a0)
000119F0 6100 0000                                  bsr.w   ObjFloorDist
000119F4 4A41                                       tst.w   d1
000119F6 6A00                                       bpl.s   ObjSplats_Turn
000119F8 3011                                       move.w  (a1),d0
000119FA 0240 03FF                                  andi.w  #$3FF,d0
000119FE 0C40 02D2                                  cmpi.w  #$2D2,d0
00011A02 6500                                       bcs.s   ObjSplats_Fall
00011A04 5428 0024                                  addq.b  #2,$24(a0)
00011A08 6000                                       bra.s   ObjSplats_Turn
00011A0A                            ; ---------------------------------------------------------------------------
00011A0A                            
00011A0A                            ObjSplats_Fall:
00011A0A D368 000C                                  add.w   d1,$C(a0)
00011A0E 317C FC00 0012                             move.w  #$FC00,$12(a0)
00011A14                            
00011A14                            ObjSplats_Turn:
00011A14 6100 0000                                  bsr.w   Yad_ChkWall
00011A18 6700                                       beq.s   loc_D2C4
00011A1A 4468 0010                                  neg.w   $10(a0)
00011A1E 0868 0000 0001                             bchg    #0,1(a0)
00011A24 0868 0000 0022                             bchg    #0,$22(a0)
00011A2A                            
00011A2A                            loc_D2C4:
00011A2A 6000 FDD6                                  bra.w   RememberState
00011A2E                            ; ---------------------------------------------------------------------------
00011A2E                            
00011A2E                            loc_D2C8:
00011A2E 6100 DE10                                  bsr.w   ObjectFall
00011A32 6100 DE58                                  bsr.w   DisplaySprite
00011A36 4A28 0001                                  tst.b   1(a0)
00011A3A 6A00 DE90                                  bpl.w   DeleteObject
00011A3E 4E75                                       rts
00011A3E 4E75                                       rts
00011A40                            Map_Splats:	include	"_maps\Splats.asm"
00011A40 0000                       Map_Splats_internal:     dc.w unk_D310-*
00011A42 0000                                       dc.w unk_D31B-Map_Splats_internal
00011A44 02                         unk_D310:       dc.b   2
00011A45 EC0B 0000 F40C 0800 0CF4                   dc.b $EC, $B, 0, 0, $F4, $C, 8, 0, $C, $F4
00011A4F 02                         unk_D31B:       dc.b   2
00011A50 EC0B 000F F40C 0400 1BFB                   dc.b $EC, $B, 0, $F, $F4, $C, 4, 0, $1B, $FB
00011A50 EC0B 000F F40C 0400 1BFB                   dc.b $EC, $B, 0, $F, $F4, $C, 4, 0, $1B, $FB
00011A5A                            
00011A5A                            		include	"_incObj\50 Yadrin.asm"
00011A5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011A5A                            
00011A5A                            
00011A5A                            Yad_ChkWall:
00011A5A 3038 FE04                  		move.w	(v_framecount).w,d0
00011A5E D047                       		add.w	d7,d0
00011A60 0240 0003                  		andi.w	#3,d0
00011A64 6600                       		bne.s	loc_F836
00011A66 7600                       		moveq	#0,d3
00011A68 1628 0014                  		move.b	obActWid(a0),d3
00011A6C 4A68 0010                  		tst.w	obVelX(a0)
00011A70 6B00                       		bmi.s	loc_F82C
00011A72 6100 0000                  		bsr.w	ObjHitWallRight
00011A76 4A41                       		tst.w	d1
00011A78 6A00                       		bpl.s	loc_F836
00011A7A                            
00011A7A                            loc_F828:
00011A7A 7001                       		moveq	#1,d0
00011A7C 4E75                       		rts	
00011A7E                            ; ===========================================================================
00011A7E                            
00011A7E                            loc_F82C:
00011A7E 4643                       		not.w	d3
00011A80 6100 0000                  		bsr.w	ObjHitWallLeft
00011A84 4A41                       		tst.w	d1
00011A86 6BF2                       		bmi.s	loc_F828
00011A88                            
00011A88                            loc_F836:
00011A88 7000                       		moveq	#0,d0
00011A8A 4E75                       		rts	
00011A8C                            ; End of function Yad_ChkWall
00011A8C                            
00011A8C                            ; ===========================================================================
00011A8C                            ; ---------------------------------------------------------------------------
00011A8C                            ; Object 50 - Yadrin enemy (SYZ)
00011A8C                            ; ---------------------------------------------------------------------------
00011A8C                            
00011A8C                            Yadrin:
00011A8C 7000                       		moveq	#0,d0
00011A8E 1028 0024                  		move.b	obRoutine(a0),d0
00011A92 323B 0000                  		move.w	Yad_Index(pc,d0.w),d1
00011A96 4EFB 1000                  		jmp	Yad_Index(pc,d1.w)
00011A9A                            ; ===========================================================================
00011A9A 0000                       Yad_Index:	dc.w Yad_Main-Yad_Index
00011A9C 0000                       		dc.w Yad_Action-Yad_Index
00011A9E                            
00011A9E =00000030                  yad_timedelay:	equ $30
00011A9E                            ; ===========================================================================
00011A9E                            
00011A9E                            Yad_Main:	; Routine 0
00011A9E 217C 0000 0000 0004        		move.l	#Map_Yad,obMap(a0)
00011AA6 317C 247B 0002             		move.w	#$247B,obGfx(a0)
00011AAC 117C 0004 0001             		move.b	#4,obRender(a0)
00011AB2 317C 0200 0018             		move.w	#$200,obPriority(a0)
00011AB8 117C 0014 0014             		move.b	#$14,obActWid(a0)
00011ABE 117C 0011 0016             		move.b	#$11,obHeight(a0)
00011AC4 117C 0008 0017             		move.b	#8,obWidth(a0)
00011ACA 117C 00CC 0020             		move.b	#$CC,obColType(a0)
00011AD0 6100 DD6E                  		bsr.w	ObjectFall
00011AD4 6100 0000                  		bsr.w	ObjFloorDist
00011AD8 4A41                       		tst.w	d1
00011ADA 6A00                       		bpl.s	locret_F89E
00011ADC D368 000C                  		add.w	d1,obY(a0)	; match	object's position with the floor
00011AE0 317C 0000 0012             		move.w	#0,obVelY(a0)
00011AE6 5428 0024                  		addq.b	#2,obRoutine(a0)
00011AEA 0868 0000 0022             		bchg	#0,obStatus(a0)
00011AF0                            
00011AF0                            	locret_F89E:
00011AF0 4E75                       		rts	
00011AF2                            ; ===========================================================================
00011AF2                            
00011AF2                            Yad_Action:	; Routine 2
00011AF2 7000                       		moveq	#0,d0
00011AF4 1028 0025                  		move.b	ob2ndRout(a0),d0
00011AF8 323B 0000                  		move.w	Yad_Index2(pc,d0.w),d1
00011AFC 4EBB 1000                  		jsr	Yad_Index2(pc,d1.w)
00011B00 43F9 0000 0000             		lea	(Ani_Yad).l,a1
00011B06 6100 AE30                  		bsr.w	AnimateSprite
00011B0A 6000 FCF6                  		bra.w	RememberState
00011B0E                            ; ===========================================================================
00011B0E 0000                       Yad_Index2:	dc.w Yad_Move-Yad_Index2
00011B10 0000                       		dc.w Yad_FixToFloor-Yad_Index2
00011B12                            ; ===========================================================================
00011B12                            
00011B12                            Yad_Move:
00011B12 5368 0030                  		subq.w	#1,yad_timedelay(a0) ; subtract 1 from pause time
00011B16 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
00011B18 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00011B1C 317C FF00 0010             		move.w	#-$100,obVelX(a0) ; move object
00011B22 117C 0001 001C             		move.b	#1,obAnim(a0)
00011B28 0868 0000 0022             		bchg	#0,obStatus(a0)
00011B2E 6600                       		bne.s	locret_F8E2
00011B30 4468 0010                  		neg.w	obVelX(a0)	; change direction
00011B34                            
00011B34                            	locret_F8E2:
00011B34 4E75                       		rts	
00011B36                            ; ===========================================================================
00011B36                            
00011B36                            Yad_FixToFloor:
00011B36 6100 DD40                  		bsr.w	SpeedToPos
00011B3A 6100 0000                  		bsr.w	ObjFloorDist
00011B3E 0C41 FFF8                  		cmpi.w	#-8,d1
00011B42 6D00                       		blt.s	Yad_Pause
00011B44 0C41 000C                  		cmpi.w	#$C,d1
00011B48 6C00                       		bge.s	Yad_Pause
00011B4A D368 000C                  		add.w	d1,obY(a0)	; match	object's position to the floor
00011B4E 6100 FF0A                  		bsr.w	Yad_ChkWall
00011B52 6600                       		bne.s	Yad_Pause
00011B54 4E75                       		rts	
00011B56                            ; ===========================================================================
00011B56                            
00011B56                            Yad_Pause:
00011B56 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00011B5A 317C 003B 0030             		move.w	#59,yad_timedelay(a0) ; set pause time to 1 second
00011B60 317C 0000 0010             		move.w	#0,obVelX(a0)
00011B66 117C 0000 001C             		move.b	#0,obAnim(a0)
00011B6C 4E75                       		rts	
00011B6C 4E75                       		rts	
00011B6E                            		include	"_anim\Yadrin.asm"
00011B6E                            ; ---------------------------------------------------------------------------
00011B6E                            ; Animation script - Yadrin enemy
00011B6E                            ; ---------------------------------------------------------------------------
00011B6E 0000                       Ani_Yad:	dc.w @stand-Ani_Yad
00011B70 0000                       		dc.w @walk-Ani_Yad
00011B72                            
00011B72 0800 FF                    @stand:		dc.b 8,	0, afEnd
00011B76 00                         		even
00011B76 0800 0002 0000 0101 0103+  @walk:		dc.b 8, 0, 0, 2, 0, 0, 1, 1, 1, 3, 1, 1, 1, afEnd
00011B84                            		even
00011B84                            		even
00011B84                            Map_Yad:	include	"_maps\Yadrin.asm"
00011B84                            ; --------------------------------------------------------------------------------
00011B84                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00011B84                            ; --------------------------------------------------------------------------------
00011B84                            
00011B84                            SME_4WhIu:	
00011B84 0000 0000                  		dc.w SME_4WhIu_C-SME_4WhIu, SME_4WhIu_3A-SME_4WhIu	
00011B88 0000 0000                  		dc.w SME_4WhIu_68-SME_4WhIu, SME_4WhIu_A5-SME_4WhIu	
00011B8C 0000 0000                  		dc.w SME_4WhIu_E2-SME_4WhIu, SME_4WhIu_FC-SME_4WhIu	
00011B90 09                         SME_4WhIu_C:	dc.b 9	
00011B91 F308 6000 F4               		dc.b $F3, 8, $60, 0, $F4	
00011B96 EB04 600F FC               		dc.b $EB, 4, $60, $F, $FC	
00011B9B 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011BA0 FB06 6003 EC               		dc.b $FB, 6, $60, 3, $EC	
00011BA5 FB00 6009 FC               		dc.b $FB, 0, $60, 9, $FC	
00011BAA FB00 600C 04               		dc.b $FB, 0, $60, $C, 4	
00011BAF FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011BB4 F300 600A EC               		dc.b $F3, 0, $60, $A, $EC	
00011BB9 EB00 600D F4               		dc.b $EB, 0, $60, $D, $F4	
00011BBE 09                         SME_4WhIu_3A:	dc.b 9	
00011BBF F308 6037 EC               		dc.b $F3, 8, $60, $37, $EC	
00011BC4 FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011BC9 FB06 6003 EC               		dc.b $FB, 6, $60, 3, $EC	
00011BCE FB00 6009 FC               		dc.b $FB, 0, $60, 9, $FC	
00011BD3 FB00 600C 04               		dc.b $FB, 0, $60, $C, 4	
00011BD8 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011BDD F300 603A 04               		dc.b $F3, 0, $60, $3A, 4	
00011BE2 EB04 603B F4               		dc.b $EB, 4, $60, $3B, $F4	
00011BE7 EB00 6022 04               		dc.b $EB, 0, $60, $22, 4	
00011BEC 0C                         SME_4WhIu_68:	dc.b $C	
00011BED EB04 600F FC               		dc.b $EB, 4, $60, $F, $FC	
00011BF2 FB00 601D FC               		dc.b $FB, 0, $60, $1D, $FC	
00011BF7 FB00 6020 04               		dc.b $FB, 0, $60, $20, 4	
00011BFC 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011C01 FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011C06 F300 600A EC               		dc.b $F3, 0, $60, $A, $EC	
00011C0B EB00 600D F4               		dc.b $EB, 0, $60, $D, $F4	
00011C10 FB01 6017 EC               		dc.b $FB, 1, $60, $17, $EC	
00011C15 FB01 601A F4               		dc.b $FB, 1, $60, $1A, $F4	
00011C1A F308 6000 F4               		dc.b $F3, 8, $60, 0, $F4	
00011C1F 0B00 6008 F4               		dc.b $B, 0, $60, 8, $F4	
00011C24 0B00 6005 EC               		dc.b $B, 0, $60, 5, $EC	
00011C29 0C                         SME_4WhIu_A5:	dc.b $C	
00011C2A F308 6037 EC               		dc.b $F3, 8, $60, $37, $EC	
00011C2F FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011C34 FB00 6009 FC               		dc.b $FB, 0, $60, 9, $FC	
00011C39 FB00 600C 04               		dc.b $FB, 0, $60, $C, 4	
00011C3E 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011C43 F300 603A 04               		dc.b $F3, 0, $60, $3A, 4	
00011C48 EB04 603B F4               		dc.b $EB, 4, $60, $3B, $F4	
00011C4D EB00 6022 04               		dc.b $EB, 0, $60, $22, 4	
00011C52 FB01 6017 EC               		dc.b $FB, 1, $60, $17, $EC	
00011C57 FB01 601A F4               		dc.b $FB, 1, $60, $1A, $F4	
00011C5C 0B00 6005 EC               		dc.b $B, 0, $60, 5, $EC	
00011C61 0B00 6008 F4               		dc.b $B, 0, $60, 8, $F4	
00011C66 05                         SME_4WhIu_E2:	dc.b 5	
00011C67 F409 0023 F4               		dc.b $F4, 9, 0, $23, $F4	
00011C6C 040D 0029 EC               		dc.b 4, $D, 0, $29, $EC	
00011C71 EC04 000F FC               		dc.b $EC, 4, 0, $F, $FC	
00011C76 F402 0011 0C               		dc.b $F4, 2, 0, $11, $C	
00011C7B 0409 0031 FC               		dc.b 4, 9, 0, $31, $FC	
00011C80 05                         SME_4WhIu_FC:	dc.b 5	
00011C81 F409 0023 F4               		dc.b $F4, 9, 0, $23, $F4	
00011C86 040D 0029 EC               		dc.b 4, $D, 0, $29, $EC	
00011C8B EC04 000F FC               		dc.b $EC, 4, 0, $F, $FC	
00011C90 F402 0011 0C               		dc.b $F4, 2, 0, $11, $C	
00011C95 0409 0037 FC               		dc.b 4, 9, 0, $37, $FC	
00011C9A                            		even
00011C9A                            		even
00011C9A                            
00011C9A                            		include	"_incObj\sub SolidObject.asm"
00011C9A                            ; ---------------------------------------------------------------------------
00011C9A                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
00011C9A                            ;
00011C9A                            ; input:
00011C9A                            ;	d1 = width
00011C9A                            ;	d2 = height / 2 (when jumping)
00011C9A                            ;	d3 = height / 2 (when walking)
00011C9A                            ;	d4 = x-axis position
00011C9A                            ; ---------------------------------------------------------------------------
00011C9A                            
00011C9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011C9A                            
00011C9A                            
00011C9A                            SolidObject:
00011C9A 4A28 0025                  		tst.b	obSolid(a0)	; is Sonic standing on the object?
00011C9E 6700 0000                  		beq.w	Solid_ChkEnter	; if not, branch
00011CA2 3401                       		move.w	d1,d2
00011CA4 D442                       		add.w	d2,d2
00011CA6 43F8 D000                  		lea	(v_player).w,a1
00011CAA 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011CB0 6600                       		bne.s	@leave		; if yes, branch
00011CB2 3029 0008                  		move.w	obX(a1),d0
00011CB6 9068 0008                  		sub.w	obX(a0),d0
00011CBA D041                       		add.w	d1,d0
00011CBC 6B00                       		bmi.s	@leave		; if Sonic moves off the left, branch
00011CBE B042                       		cmp.w	d2,d0		; has Sonic moved off the right?
00011CC0 6500                       		bcs.s	@stand		; if not, branch
00011CC2                            
00011CC2                            	@leave:
00011CC2 08A9 0003 0022             		bclr	#3,obStatus(a1)	; clear Sonic's standing flag
00011CC8 08A8 0003 0022             		bclr	#3,obStatus(a0)	; clear object's standing flag
00011CCE 4228 0025                  		clr.b	obSolid(a0)
00011CD2 7800                       		moveq	#0,d4
00011CD4 4E75                       		rts	
00011CD6                            
00011CD6                            	@stand:
00011CD6 3404                       		move.w	d4,d2
00011CD8 4EB9 0000 972C             		jsr	MvSonicOnPtfm
00011CDE 7800                       		moveq	#0,d4
00011CE0 4E75                       		rts	
00011CE2                            ; ===========================================================================
00011CE2                            
00011CE2                            SolidObject71:
00011CE2 4A28 0025                  		tst.b	obSolid(a0)
00011CE6 6700 0000                  		beq.w	loc_FAD0
00011CEA 3401                       		move.w	d1,d2
00011CEC D442                       		add.w	d2,d2
00011CEE 43F8 D000                  		lea	(v_player).w,a1
00011CF2 0829 0001 0022             		btst	#1,obStatus(a1)
00011CF8 6600                       		bne.s	@leave
00011CFA 3029 0008                  		move.w	obX(a1),d0
00011CFE 9068 0008                  		sub.w	obX(a0),d0
00011D02 D041                       		add.w	d1,d0
00011D04 6B00                       		bmi.s	@leave
00011D06 B042                       		cmp.w	d2,d0
00011D08 6500                       		bcs.s	@stand
00011D0A                            
00011D0A                            	@leave:
00011D0A 08A9 0003 0022             		bclr	#3,obStatus(a1)
00011D10 08A8 0003 0022             		bclr	#3,obStatus(a0)
00011D16 4228 0025                  		clr.b	obSolid(a0)
00011D1A 7800                       		moveq	#0,d4
00011D1C 4E75                       		rts	
00011D1E                            
00011D1E                            	@stand:
00011D1E 3404                       		move.w	d4,d2
00011D20 4EB9 0000 972C             		jsr	MvSonicOnPtfm
00011D26 7800                       		moveq	#0,d4
00011D28 4E75                       		rts	
00011D2A                            ; ===========================================================================
00011D2A                            
00011D2A                            SolidObject2F:
00011D2A 43F8 D000                  		lea	(v_player).w,a1
00011D2E 4A28 0001                  		tst.b	obRender(a0)
00011D32 6A00 0000                  		bpl.w	Solid_Ignore
00011D36 3029 0008                  		move.w	obX(a1),d0
00011D3A 9068 0008                  		sub.w	obX(a0),d0
00011D3E D041                       		add.w	d1,d0
00011D40 6B00 0000                  		bmi.w	Solid_Ignore
00011D44 3601                       		move.w	d1,d3
00011D46 D643                       		add.w	d3,d3
00011D48 B043                       		cmp.w	d3,d0
00011D4A 6200 0000                  		bhi.w	Solid_Ignore
00011D4E 3A00                       		move.w	d0,d5
00011D50 0828 0000 0001             		btst	#0,obRender(a0)	; is object horizontally flipped?
00011D56 6700                       		beq.s	@notflipped	; if not, branch
00011D58 4645                       		not.w	d5
00011D5A DA43                       		add.w	d3,d5
00011D5C                            
00011D5C                            	@notflipped:
00011D5C E24D                       		lsr.w	#1,d5
00011D5E 7600                       		moveq	#0,d3
00011D60 1632 5000                  		move.b	(a2,d5.w),d3
00011D64 9612                       		sub.b	(a2),d3
00011D66 3A28 000C                  		move.w	obY(a0),d5
00011D6A 9A43                       		sub.w	d3,d5
00011D6C 1629 0016                  		move.b	obHeight(a1),d3
00011D70 4883                       		ext.w	d3
00011D72 D443                       		add.w	d3,d2
00011D74 3629 000C                  		move.w	obY(a1),d3
00011D78 9645                       		sub.w	d5,d3
00011D7A 5843                       		addq.w	#4,d3
00011D7C D642                       		add.w	d2,d3
00011D7E 6B00 0000                  		bmi.w	Solid_Ignore
00011D82 3802                       		move.w	d2,d4
00011D84 D844                       		add.w	d4,d4
00011D86 B644                       		cmp.w	d4,d3
00011D88 6400 0000                  		bcc.w	Solid_Ignore
00011D8C 6000 0000                  		bra.w	loc_FB0E
00011D90                            ; ===========================================================================
00011D90                            
00011D90                            Solid_ChkEnter:
00011D90 4A28 0001                  		tst.b	obRender(a0)
00011D94 6A00 0000                  		bpl.w	Solid_Ignore
00011D98                            
00011D98                            loc_FAD0:
00011D98 43F8 D000                  		lea	(v_player).w,a1
00011D9C 3029 0008                  		move.w	obX(a1),d0
00011DA0 9068 0008                  		sub.w	obX(a0),d0
00011DA4 D041                       		add.w	d1,d0
00011DA6 6B00 0000                  		bmi.w	Solid_Ignore	; if Sonic moves off the left, branch
00011DAA 3601                       		move.w	d1,d3
00011DAC D643                       		add.w	d3,d3
00011DAE B043                       		cmp.w	d3,d0		; has Sonic moved off the right?
00011DB0 6200 0000                  		bhi.w	Solid_Ignore	; if yes, branch
00011DB4 1629 0016                  		move.b	obHeight(a1),d3
00011DB8 4883                       		ext.w	d3
00011DBA D443                       		add.w	d3,d2
00011DBC 3629 000C                  		move.w	obY(a1),d3
00011DC0 9668 000C                  		sub.w	obY(a0),d3
00011DC4 5843                       		addq.w	#4,d3
00011DC6 D642                       		add.w	d2,d3
00011DC8 6B00 0000                  		bmi.w	Solid_Ignore	; if Sonic moves above, branch
00011DCC 3802                       		move.w	d2,d4
00011DCE D844                       		add.w	d4,d4
00011DD0 B644                       		cmp.w	d4,d3		; has Sonic moved below?
00011DD2 6400 0000                  		bcc.w	Solid_Ignore	; if yes, branch
00011DD6                            
00011DD6                            loc_FB0E:
00011DD6 4A38 F7C8                  		tst.b	(f_lockmulti).w	; are controls locked?
00011DDA 6B00 0000                  		bmi.w	Solid_Ignore	; if yes, branch
00011DDE 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; is Sonic dying?
00011DE4 6400 0000                  			bcc.w	Solid_Debug
00011DE8 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode being used?
00011DEC 6600 0000                  		bne.w	Solid_Debug	; if yes, branch
00011DF0 3A00                       		move.w	d0,d5
00011DF2 B240                       		cmp.w	d0,d1		; is Sonic right of centre of object?
00011DF4 6400                       		bcc.s	@isright	; if yes, branch
00011DF6 D241                       		add.w	d1,d1
00011DF8 9041                       		sub.w	d1,d0
00011DFA 3A00                       		move.w	d0,d5
00011DFC 4445                       		neg.w	d5
00011DFE                            
00011DFE                            	@isright:
00011DFE 3203                       		move.w	d3,d1
00011E00 B443                       		cmp.w	d3,d2		; is Sonic below centre of object?
00011E02 6400                       		bcc.s	@isbelow	; if yes, branch
00011E04                            
00011E04 5943                       		subq.w	#4,d3
00011E06 9644                       		sub.w	d4,d3
00011E08 3203                       		move.w	d3,d1
00011E0A 4441                       		neg.w	d1
00011E0C                            
00011E0C                            	@isbelow:
00011E0C BA41                       		cmp.w	d1,d5
00011E0E 6200 0000                  		bhi.w	Solid_TopBottom	; if Sonic hits top or bottom, branch
00011E12 0C41 0004                  		cmpi.w	#4,d1
00011E16 6300                       		bls.s	Solid_SideAir
00011E18 4A40                       		tst.w	d0		; where is Sonic?
00011E1A 6700                       		beq.s	Solid_Centre	; if inside the object, branch
00011E1C 6B00                       		bmi.s	Solid_Right	; if right of the object, branch
00011E1E 4A69 0010                  		tst.w	obVelX(a1)	; is Sonic moving left?
00011E22 6B00                       		bmi.s	Solid_Centre	; if yes, branch
00011E24 6000                       		bra.s	Solid_Left
00011E26                            ; ===========================================================================
00011E26                            
00011E26                            Solid_Right:
00011E26 4A69 0010                  		tst.w	obVelX(a1)	; is Sonic moving right?
00011E2A 6A00                       		bpl.s	Solid_Centre	; if yes, branch
00011E2C                            
00011E2C                            Solid_Left:
00011E2C 337C 0000 0020             		move.w	#0,obInertia(a1)
00011E32 337C 0000 0010             		move.w	#0,obVelX(a1)	; stop Sonic moving
00011E38                            
00011E38                            Solid_Centre:
00011E38 9169 0008                  		sub.w	d0,obX(a1)	; correct Sonic's position
00011E3C 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011E42 6600                       		bne.s	Solid_SideAir	; if yes, branch
00011E44 08E9 0005 0022             		bset	#5,obStatus(a1)	; make Sonic push object
00011E4A 08E8 0005 0022             		bset	#5,obStatus(a0)	; make object be pushed
00011E50 7801                       		moveq	#1,d4		; return side collision
00011E52 4E75                       		rts	
00011E54                            ; ===========================================================================
00011E54                            
00011E54                            Solid_SideAir:
00011E54 6100                       		bsr.s	Solid_NotPushing
00011E56 7801                       		moveq	#1,d4		; return side collision
00011E58 4E75                       		rts	
00011E5A                            ; ===========================================================================
00011E5A                            
00011E5A                            Solid_Ignore:
00011E5A 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing?
00011E60 6700                       		beq.s	Solid_Debug	; if not, branch
00011E62 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1)	; is Sonic in his jumping/rolling animation?
00011E68 6700                       		beq.s	Solid_NotPushing	; if so, branch
00011E6A 0C29 0000 001C             		cmpi.b	#id_Drown,obAnim(a1)	; is Sonic in his drowning animation?
00011E70 6700                       		beq.s	Solid_NotPushing	; if so, branch
00011E72 0C29 0000 001C             		cmpi.b	#id_Hurt,obAnim(a1)	; is Sonic in his hurt animation?
00011E78 6700                       		beq.s	Solid_NotPushing	; if so, branch
00011E7A 337C 0000 001C             		move.w	#id_Run,obAnim(a1) ; use running animation
00011E80                            
00011E80                            
00011E80                            Solid_NotPushing:
00011E80 08A8 0005 0022             		bclr	#5,obStatus(a0)	; clear pushing flag
00011E86 08A9 0005 0022             		bclr	#5,obStatus(a1)	; clear Sonic's pushing flag
00011E8C                            
00011E8C                            Solid_Debug:
00011E8C 7800                       		moveq	#0,d4		; return no collision
00011E8E 4E75                       		rts	
00011E90                            ; ===========================================================================
00011E90                            
00011E90                            Solid_TopBottom:
00011E90 4A43                       		tst.w	d3		; is Sonic below the object?
00011E92 6B00                       		bmi.s	Solid_Below	; if yes, branch
00011E94 0C43 0010                  		cmpi.w	#$10,d3		; has Sonic landed on the object?
00011E98 6500                       		bcs.s	Solid_Landed	; if yes, branch
00011E9A 60BE                       		bra.s	Solid_Ignore
00011E9C                            ; ===========================================================================
00011E9C                            
00011E9C                            Solid_Below:
00011E9C 4A69 0012                  		tst.w	obVelY(a1)	; is Sonic moving vertically?
00011EA0 6700                       		beq.s	Solid_Squash	; if not, branch
00011EA2 6A00                       		bpl.s	Solid_TopBtmAir	; if moving downwards, branch
00011EA4 4A43                       		tst.w	d3		; is Sonic above the object?
00011EA6 6A00                       		bpl.s	Solid_TopBtmAir	; if yes, branch
00011EA8 9769 000C                  		sub.w	d3,obY(a1)	; correct Sonic's position
00011EAC 337C 0000 0012             		move.w	#0,obVelY(a1)	; stop Sonic moving
00011EB2                            
00011EB2                            Solid_TopBtmAir:
00011EB2 78FF                       		moveq	#-1,d4
00011EB4 4E75                       		rts	
00011EB6                            ; ===========================================================================
00011EB6                            
00011EB6                            Solid_Squash:
00011EB6 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011EBC 66F4                       		bne.s	Solid_TopBtmAir	; if yes, branch
00011EBE 2F08                       		move.l	a0,-(sp)
00011EC0 2049                       		movea.l	a1,a0
00011EC2 4EB9 0000 0000             		jsr	(KillSonic).l	; kill Sonic
00011EC8 205F                       		movea.l	(sp)+,a0
00011ECA 78FF                       		moveq	#-1,d4
00011ECC 4E75                       		rts	
00011ECE                            ; ===========================================================================
00011ECE                            
00011ECE                            Solid_Landed:
00011ECE 5943                       		subq.w	#4,d3
00011ED0 7200                       		moveq	#0,d1
00011ED2 1228 0014                  		move.b	obActWid(a0),d1
00011ED6 3401                       		move.w	d1,d2
00011ED8 D442                       		add.w	d2,d2
00011EDA D269 0008                  		add.w	obX(a1),d1
00011EDE 9268 0008                  		sub.w	obX(a0),d1
00011EE2 6B00                       		bmi.s	Solid_Miss	; if Sonic is right of object, branch
00011EE4 B242                       		cmp.w	d2,d1		; is Sonic left of object?
00011EE6 6400                       		bcc.s	Solid_Miss	; if yes, branch
00011EE8 4A69 0012                  		tst.w	obVelY(a1)	; is Sonic moving upwards?
00011EEC 6B00                       		bmi.s	Solid_Miss	; if yes, branch
00011EEE 9769 000C                  		sub.w	d3,obY(a1)	; correct Sonic's position
00011EF2 5369 000C                  		subq.w	#1,obY(a1)
00011EF6 6100                       		bsr.s	Solid_ResetFloor
00011EF8 117C 0002 0025             		move.b	#2,obSolid(a0) ; set standing flags
00011EFE 08E8 0003 0022             		bset	#3,obStatus(a0)
00011F04 78FF                       		moveq	#-1,d4		; return top/bottom collision
00011F06 4E75                       		rts	
00011F08                            ; ===========================================================================
00011F08                            
00011F08                            Solid_Miss:
00011F08 7800                       		moveq	#0,d4
00011F0A 4E75                       		rts	
00011F0C                            ; End of function SolidObject
00011F0C                            
00011F0C                            
00011F0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011F0C                            
00011F0C                            
00011F0C                            Solid_ResetFloor:
00011F0C 0829 0003 0022             		btst	#3,obStatus(a1)	; is Sonic standing on something?
00011F12 6700                       		beq.s	@notonobj	; if not, branch
00011F14                            
00011F14 7000                       		moveq	#0,d0
00011F16 1029 003D                  		move.b	$3D(a1),d0	; get object being stood on
00011F1A ED48                       		lsl.w	#6,d0
00011F1C 0680 00FF D000             		addi.l	#(v_objspace&$FFFFFF),d0
00011F22 2440                       		movea.l	d0,a2
00011F24 08AA 0003 0022             		bclr	#3,obStatus(a2)	; clear object's standing flags
00011F2A 422A 0025                  		clr.b	obSolid(a2)
00011F2E                            
00011F2E                            	@notonobj:
00011F2E 3008                       		move.w	a0,d0
00011F30 0440 D000                  		subi.w	#$D000,d0
00011F34 EC48                       		lsr.w	#6,d0
00011F36 0240 007F                  		andi.w	#$7F,d0
00011F3A 1340 003D                  		move.b	d0,$3D(a1)	; set object being stood on
00011F3E 137C 0000 0026             		move.b	#0,obAngle(a1)	; clear Sonic's angle
00011F44 337C 0000 0012             		move.w	#0,obVelY(a1)	; stop Sonic
00011F4A 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
00011F50 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011F56 6700                       		beq.s	@notinair	; if not, branch
00011F58 2F08                       		move.l	a0,-(sp)
00011F5A 2049                       		movea.l	a1,a0
00011F5C 4EB9 0000 0000             		jsr	(Sonic_ResetOnFloor).l ; reset Sonic as if on floor
00011F62 205F                       		movea.l	(sp)+,a0
00011F64                            
00011F64                            	@notinair:
00011F64 08E9 0003 0022             		bset	#3,obStatus(a1)	; set object standing flag
00011F6A 08E8 0003 0022             		bset	#3,obStatus(a0)	; set Sonic standing on object flag
00011F70 4E75                       		rts	
00011F72                            ; End of function Solid_ResetFloor
00011F72                            ; End of function Solid_ResetFloor
00011F72                            
00011F72                            		include	"_incObj\51 Smashable Green Block.asm"
00011F72                            ; ---------------------------------------------------------------------------
00011F72                            ; Object 51 - smashable	green block (MZ)
00011F72                            ; ---------------------------------------------------------------------------
00011F72                            
00011F72                            SmashBlock:
00011F72 7000                       		moveq	#0,d0
00011F74 1028 0024                  		move.b	obRoutine(a0),d0
00011F78 323B 0000                  		move.w	Smab_Index(pc,d0.w),d1
00011F7C 4EBB 1000                  		jsr	Smab_Index(pc,d1.w)
00011F80 6000 F880                  		bra.w	RememberState
00011F84                            ; ===========================================================================
00011F84 0000                       Smab_Index:	dc.w Smab_Main-Smab_Index
00011F86 0000                       		dc.w Smab_Solid-Smab_Index
00011F88 0000                       		dc.w Smab_Points-Smab_Index
00011F8A                            ; ===========================================================================
00011F8A                            
00011F8A                            Smab_Main:	; Routine 0
00011F8A 5428 0024                  		addq.b	#2,obRoutine(a0)
00011F8E 217C 0000 0000 0004        		move.l	#Map_Smab,obMap(a0)
00011F96 317C 42B8 0002             		move.w	#$42B8,obGfx(a0)
00011F9C 117C 0004 0001             		move.b	#4,obRender(a0)
00011FA2 117C 0010 0014             		move.b	#$10,obActWid(a0)
00011FA8 317C 0200 0018             		move.w	#$200,obPriority(a0)
00011FAE 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
00011FB4                            
00011FB4                            Smab_Solid:	; Routine 2
00011FB4                            
00011FB4 =00000032                  sonicAniFrame:	equ $32		; Sonic's current animation number
00011FB4 =00000034                  @count:		equ $34		; number of blocks hit + previous stuff
00011FB4                            
00011FB4 3178 F7D0 0034             		move.w	(v_itembonus).w,$34(a0)
00011FBA 1178 D01C 0032             		move.b	(v_player+obAnim).w,sonicAniFrame(a0) ; load Sonic's animation number
00011FC0 323C 001B                  		move.w	#$1B,d1
00011FC4 343C 0010                  		move.w	#$10,d2
00011FC8 363C 0011                  		move.w	#$11,d3
00011FCC 3828 0008                  		move.w	obX(a0),d4
00011FD0 6100 FCC8                  		bsr.w	SolidObject
00011FD4 0828 0003 0022             		btst	#3,obStatus(a0)	; has Sonic landed on the block?
00011FDA 6600                       		bne.s	@smash		; if yes, branch
00011FDC                            
00011FDC                            	@notspinning:
00011FDC 4E75                       		rts	
00011FDE                            ; ===========================================================================
00011FDE                            
00011FDE                            @smash:
00011FDE 0C28 0000 0032             		cmpi.b	#id_Roll,sonicAniFrame(a0) ; is Sonic rolling/jumping?
00011FE4 66F6                       		bne.s	@notspinning	; if not, branch
00011FE6 31E8 0034 F7D0             		move.w	@count(a0),(v_itembonus).w
00011FEC 08E9 0002 0022             		bset	#2,obStatus(a1)
00011FF2 137C 000E 0016             		move.b	#$E,obHeight(a1)
00011FF8 137C 0007 0017             		move.b	#7,obWidth(a1)
00011FFE 137C 0000 001C             		move.b	#id_Roll,obAnim(a1) ; make Sonic roll
00012004 337C FD00 0012             		move.w	#-$300,obVelY(a1) ; rebound Sonic
0001200A 08E9 0001 0022             		bset	#1,obStatus(a1)
00012010 08A9 0003 0022             		bclr	#3,obStatus(a1)
00012016 137C 0002 0024             		move.b	#2,obRoutine(a1)
0001201C 08A8 0003 0022             		bclr	#3,obStatus(a0)
00012022 4228 0025                  		clr.b	obSolid(a0)
00012026 117C 0001 001A             		move.b	#1,obFrame(a0)
0001202C 49F9 0000 0000             		lea	(Smab_Speeds).l,a4 ; load broken fragment speed data
00012032 7203                       		moveq	#3,d1		; set number of	fragments to 4
00012034 343C 0038                  		move.w	#$38,d2
00012038 6100 D406                  		bsr.w	SmashObject
0001203C 6100 DCDA                  		bsr.w	FindFreeObj
00012040 6600                       		bne.s	Smab_Points
00012042 12BC 0029                  		move.b	#id_Points,0(a1) ; load points object
00012046 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001204C 3368 000C 000C             		move.w	obY(a0),obY(a1)
00012052 3438 F7D0                  		move.w	(v_itembonus).w,d2
00012056 5478 F7D0                  		addq.w	#2,(v_itembonus).w ; increment bonus counter
0001205A 0C42 0006                  		cmpi.w	#6,d2		; have fewer than 3 blocks broken?
0001205E 6500                       		bcs.s	@bonus		; if yes, branch
00012060 7406                       		moveq	#6,d2		; set cap for points
00012062                            
00012062                            	@bonus:
00012062 7000                       		moveq	#0,d0
00012064 303B 2000                  		move.w	Smab_Scores(pc,d2.w),d0
00012068 0C78 0020 F7D0             		cmpi.w	#$20,(v_itembonus).w ; have 16 blocks been smashed?
0001206E 6500                       		bcs.s	@givepoints	; if not, branch
00012070 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
00012074 740A                       		moveq	#10,d2
00012076                            
00012076                            	@givepoints:
00012076 4EB9 0000 0000             		jsr	(AddPoints).l
0001207C E24A                       		lsr.w	#1,d2
0001207E 1342 001A                  		move.b	d2,obFrame(a1)
00012082                            
00012082                            Smab_Points:	; Routine 4
00012082 6100 D7F4                  		bsr.w	SpeedToPos
00012086 0668 0038 0012             		addi.w	#$38,obVelY(a0)
0001208C 6100 D7FE                  		bsr.w	DisplaySprite
00012090 4A28 0001                  		tst.b	obRender(a0)
00012094 6A00 D836                  		bpl.w	DeleteObject
00012098 4E75                       		rts	
0001209A                            ; ===========================================================================
0001209A FE00 FE00                  Smab_Speeds:	dc.w -$200, -$200	; x-speed, y-speed
0001209E FF00 FF00                  		dc.w -$100, -$100
000120A2 0200 FE00                  		dc.w $200, -$200
000120A6 0100 FF00                  		dc.w $100, -$100
000120AA                            
000120AA 000A 0014 0032 0064        Smab_Scores:	dc.w 10, 20, 50, 100
000120AA 000A 0014 0032 0064        Smab_Scores:	dc.w 10, 20, 50, 100
000120B2                            Map_Smab:	include	"_maps\Smashable Green Block.asm"
000120B2                            ; ---------------------------------------------------------------------------
000120B2                            ; Sprite mappings - smashable green block (MZ)
000120B2                            ; ---------------------------------------------------------------------------
000120B2                            Map_Smab_internal:
000120B2 0000                       		dc.w @two-Map_Smab_internal
000120B4 0000                       		dc.w @four-Map_Smab_internal
000120B6 02                         @two:		dc.b 2
000120B7 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0	; two fragments, arranged vertically
000120BC 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
000120C1 04                         @four:		dc.b 4
000120C2 F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0 ; four fragments
000120C7 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
000120CC F005 8000 00               		dc.b $F0, 5, $80, 0, 0
000120D1 0005 8000 00               		dc.b 0,	5, $80,	0, 0
000120D6                            		even
000120D6                            		even
000120D6                            
000120D6                            		include	"_incObj\52 Moving Blocks.asm"
000120D6                            ; ---------------------------------------------------------------------------
000120D6                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
000120D6                            ; ---------------------------------------------------------------------------
000120D6                            
000120D6                            MovingBlock:
000120D6 7000                       		moveq	#0,d0
000120D8 1028 0024                  		move.b	obRoutine(a0),d0
000120DC 323B 0000                  		move.w	MBlock_Index(pc,d0.w),d1
000120E0 4EFB 1000                  		jmp	MBlock_Index(pc,d1.w)
000120E4                            ; ===========================================================================
000120E4 0000                       MBlock_Index:	dc.w MBlock_Main-MBlock_Index
000120E6 0000                       		dc.w MBlock_Platform-MBlock_Index
000120E8 0000                       		dc.w MBlock_StandOn-MBlock_Index
000120EA                            
000120EA =00000030                  mblock_origX:	equ $30
000120EA =00000032                  mblock_origY:	equ $32
000120EA                            
000120EA 1000                       MBlock_Var:	dc.b $10, 0		; object width,	frame number
000120EC 2001                       		dc.b $20, 1
000120EE 2002                       		dc.b $20, 2
000120F0 4003                       		dc.b $40, 3
000120F2 3004                       		dc.b $30, 4
000120F4                            ; ===========================================================================
000120F4                            
000120F4                            MBlock_Main:	; Routine 0
000120F4 5428 0024                  		addq.b	#2,obRoutine(a0)
000120F8 217C 0000 0000 0004        		move.l	#Map_MBlock,obMap(a0)
00012100 317C 42B8 0002             		move.w	#$42B8,obGfx(a0)
00012106 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
0001210C 6600                       		bne.s	loc_FE44
0001210E 217C 0000 0000 0004        		move.l	#Map_MBlockLZ,obMap(a0) ; LZ specific code
00012116 317C 43BC 0002             		move.w	#$43BC,obGfx(a0)
0001211C 117C 0007 0016             		move.b	#7,obHeight(a0)
00012122                            
00012122                            loc_FE44:
00012122 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
00012128 6600                       		bne.s	loc_FE60
0001212A 317C 22C0 0002             		move.w	#$22C0,obGfx(a0) ; SBZ specific code (object 5228)
00012130 0C28 0028 0028             		cmpi.b	#$28,obSubtype(a0) ; is object 5228 ?
00012136 6700                       		beq.s	loc_FE60	; if yes, branch
00012138 317C 4460 0002             		move.w	#$4460,obGfx(a0) ; SBZ specific code (object 523x)
0001213E                            
0001213E                            loc_FE60:
0001213E 117C 0004 0001             		move.b	#4,obRender(a0)
00012144 7000                       		moveq	#0,d0
00012146 1028 0028                  		move.b	obSubtype(a0),d0
0001214A E648                       		lsr.w	#3,d0
0001214C 0240 001E                  		andi.w	#$1E,d0
00012150 45FB 0098                  		lea	MBlock_Var(pc,d0.w),a2
00012154 115A 0014                  		move.b	(a2)+,obActWid(a0)
00012158 115A 001A                  		move.b	(a2)+,obFrame(a0)
0001215C 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012162 3168 0008 0030             		move.w	obX(a0),mblock_origX(a0)
00012168 3168 000C 0032             		move.w	obY(a0),mblock_origY(a0)
0001216E 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
00012174                            
00012174                            MBlock_Platform: ; Routine 2
00012174 6100 0000                  		bsr.w	MBlock_Move
00012178 7200                       		moveq	#0,d1
0001217A 1228 0014                  		move.b	obActWid(a0),d1
0001217E 4EB9 0000 905A             		jsr	(PlatformObject).l
00012184 6000                       		bra.s	MBlock_ChkDel
00012186                            ; ===========================================================================
00012186                            
00012186                            MBlock_StandOn:	; Routine 4
00012186 7200                       		moveq	#0,d1
00012188 1228 0014                  		move.b	obActWid(a0),d1
0001218C 4EB9 0000 91CE             		jsr	(ExitPlatform).l
00012192 3F28 0008                  		move.w	obX(a0),-(sp)
00012196 6100 0000                  		bsr.w	MBlock_Move
0001219A 341F                       		move.w	(sp)+,d2
0001219C 4EB9 0000 9738             		jsr	(MvSonicOnPtfm2).l
000121A2                            
000121A2                            MBlock_ChkDel:
000121C0 6000 D6CA                  		bra.w	DisplaySprite
000121C4                            ; ===========================================================================
000121C4                            
000121C4                            MBlock_Move:
000121C4 7000                       		moveq	#0,d0
000121C6 1028 0028                  		move.b	obSubtype(a0),d0
000121CA 0240 000F                  		andi.w	#$F,d0
000121CE D040                       		add.w	d0,d0
000121D0 323B 0000                  		move.w	MBlock_TypeIndex(pc,d0.w),d1
000121D4 4EFB 1000                  		jmp	MBlock_TypeIndex(pc,d1.w)
000121D8                            ; ===========================================================================
000121D8 0000 0000                  MBlock_TypeIndex:dc.w MBlock_Type00-MBlock_TypeIndex, MBlock_Type01-MBlock_TypeIndex
000121DC 0000 0000                  		dc.w MBlock_Type02-MBlock_TypeIndex, MBlock_Type03-MBlock_TypeIndex
000121E0 0000 0000                  		dc.w MBlock_Type02-MBlock_TypeIndex, MBlock_Type05-MBlock_TypeIndex
000121E4 0000 0000                  		dc.w MBlock_Type06-MBlock_TypeIndex, MBlock_Type07-MBlock_TypeIndex
000121E8 0000 0000                  		dc.w MBlock_Type08-MBlock_TypeIndex, MBlock_Type02-MBlock_TypeIndex
000121EC 0000                       		dc.w MBlock_Type0A-MBlock_TypeIndex
000121EE                            ; ===========================================================================
000121EE                            
000121EE                            MBlock_Type00:
000121EE 4E75                       		rts	
000121F0                            ; ===========================================================================
000121F0                            
000121F0                            MBlock_Type01:
000121F0 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
000121F4 323C 0060                  		move.w	#$60,d1
000121F8 0828 0000 0022             		btst	#0,obStatus(a0)
000121FE 6700                       		beq.s	loc_FF26
00012200 4440                       		neg.w	d0
00012202 D041                       		add.w	d1,d0
00012204                            
00012204                            loc_FF26:
00012204 3228 0030                  		move.w	mblock_origX(a0),d1
00012208 9240                       		sub.w	d0,d1
0001220A 3141 0008                  		move.w	d1,obX(a0)
0001220E 4E75                       		rts	
00012210                            ; ===========================================================================
00012210                            
00012210                            MBlock_Type02:
00012210 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0) ; is Sonic standing on the platform?
00012216 6600                       		bne.s	MBlock_02_Wait
00012218 5228 0028                  		addq.b	#1,obSubtype(a0) ; if yes, add 1 to type
0001221C                            
0001221C                            MBlock_02_Wait:
0001221C 4E75                       		rts	
0001221E                            ; ===========================================================================
0001221E                            
0001221E                            MBlock_Type03:
0001221E 7600                       		moveq	#0,d3
00012220 1628 0014                  		move.b	obActWid(a0),d3
00012224 6100 0000                  		bsr.w	ObjHitWallRight
00012228 4A41                       		tst.w	d1		; has the platform hit a wall?
0001222A 6B00                       		bmi.s	MBlock_03_End	; if yes, branch
0001222C 5268 0008                  		addq.w	#1,obX(a0)	; move platform	to the right
00012230 3168 0008 0030             		move.w	obX(a0),mblock_origX(a0)
00012236 4E75                       		rts	
00012238                            ; ===========================================================================
00012238                            
00012238                            MBlock_03_End:
00012238 4228 0028                  		clr.b	obSubtype(a0)	; change to type 00 (non-moving	type)
0001223C 4E75                       		rts	
0001223E                            ; ===========================================================================
0001223E                            
0001223E                            MBlock_Type05:
0001223E 7600                       		moveq	#0,d3
00012240 1628 0014                  		move.b	obActWid(a0),d3
00012244 6100 0000                  		bsr.w	ObjHitWallRight
00012248 4A41                       		tst.w	d1		; has the platform hit a wall?
0001224A 6B00                       		bmi.s	MBlock_05_End	; if yes, branch
0001224C 5268 0008                  		addq.w	#1,obX(a0)	; move platform	to the right
00012250 3168 0008 0030             		move.w	obX(a0),mblock_origX(a0)
00012256 4E75                       		rts	
00012258                            ; ===========================================================================
00012258                            
00012258                            MBlock_05_End:
00012258 5228 0028                  		addq.b	#1,obSubtype(a0) ; change to type 06 (falling)
0001225C 4E75                       		rts	
0001225E                            ; ===========================================================================
0001225E                            
0001225E                            MBlock_Type06:
0001225E 6100 D618                  		bsr.w	SpeedToPos
00012262 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; make the platform fall
00012268 6100 0000                  		bsr.w	ObjFloorDist
0001226C 4A41                       		tst.w	d1		; has platform hit the floor?
0001226E 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
00012272 D368 000C                  		add.w	d1,obY(a0)
00012276 4268 0012                  		clr.w	obVelY(a0)	; stop platform	falling
0001227A 4228 0028                  		clr.b	obSubtype(a0)	; change to type 00 (non-moving)
0001227E                            
0001227E                            locret_FFA0:
0001227E 4E75                       		rts	
00012280                            ; ===========================================================================
00012280                            
00012280                            MBlock_Type07:
00012280 4A38 F7E2                  		tst.b	(f_switch+2).w	; has switch number 02 been pressed?
00012284 6700                       		beq.s	MBlock_07_ChkDel
00012286 5728 0028                  		subq.b	#3,obSubtype(a0) ; if yes, change object type to 04
0001228A                            
0001228A                            MBlock_07_ChkDel:
0001228A 588F                       		addq.l	#4,sp
000122AA 4E75                       		rts	
000122AC                            ; ===========================================================================
000122AC                            
000122AC                            MBlock_Type08:
000122AC 1038 FE7C                  		move.b	(v_oscillate+$1E).w,d0
000122B0 323C 0080                  		move.w	#$80,d1
000122B4 0828 0000 0022             		btst	#0,obStatus(a0)
000122BA 6700                       		beq.s	loc_FFE2
000122BC 4440                       		neg.w	d0
000122BE D041                       		add.w	d1,d0
000122C0                            
000122C0                            loc_FFE2:
000122C0 3228 0032                  		move.w	mblock_origY(a0),d1
000122C4 9240                       		sub.w	d0,d1
000122C6 3141 000C                  		move.w	d1,obY(a0)
000122CA 4E75                       		rts	
000122CC                            ; ===========================================================================
000122CC                            
000122CC                            MBlock_Type0A:
000122CC 7600                       		moveq	#0,d3
000122CE 1628 0014                  		move.b	obActWid(a0),d3
000122D2 D643                       		add.w	d3,d3
000122D4 7208                       		moveq	#8,d1
000122D6 0828 0000 0022             		btst	#0,obStatus(a0)
000122DC 6700                       		beq.s	loc_10004
000122DE 4441                       		neg.w	d1
000122E0 4443                       		neg.w	d3
000122E2                            
000122E2                            loc_10004:
000122E2 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
000122E6 6600                       		bne.s	MBlock_0A_Back	; if yes, branch
000122E8 3028 0008                  		move.w	obX(a0),d0
000122EC 9068 0030                  		sub.w	mblock_origX(a0),d0
000122F0 B043                       		cmp.w	d3,d0
000122F2 6700                       		beq.s	MBlock_0A_Wait
000122F4 D368 0008                  		add.w	d1,obX(a0)	; move platform
000122F8 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
000122FE 4E75                       		rts	
00012300                            ; ===========================================================================
00012300                            
00012300                            MBlock_0A_Wait:
00012300 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
00012304 6600                       		bne.s	locret_1002E	; if time remains, branch
00012306 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
0001230C                            
0001230C                            locret_1002E:
0001230C 4E75                       		rts	
0001230E                            ; ===========================================================================
0001230E                            
0001230E                            MBlock_0A_Back:
0001230E 3028 0008                  		move.w	obX(a0),d0
00012312 9068 0030                  		sub.w	mblock_origX(a0),d0
00012316 6700                       		beq.s	MBlock_0A_Reset
00012318 9368 0008                  		sub.w	d1,obX(a0)	; return platform to its original position
0001231C 4E75                       		rts	
0001231E                            ; ===========================================================================
0001231E                            
0001231E                            MBlock_0A_Reset:
0001231E 4268 0036                  		clr.w	$36(a0)
00012322 5328 0028                  		subq.b	#1,obSubtype(a0)
00012326 4E75                       		rts	
00012326 4E75                       		rts	
00012328                            Map_MBlock:	include	"_maps\Moving Blocks (MZ and SBZ).asm"
00012328                            ; ---------------------------------------------------------------------------
00012328                            ; Sprite mappings - moving blocks (MZ, SBZ)
00012328                            ; ---------------------------------------------------------------------------
00012328                            Map_MBlock_internal:
00012328 0000                       		dc.w @mz1-Map_MBlock_internal
0001232A 0000                       		dc.w @mz2-Map_MBlock_internal
0001232C 0000                       		dc.w @sbz-Map_MBlock_internal
0001232E 0000                       		dc.w @sbzwide-Map_MBlock_internal
00012330 0000                       		dc.w @mz3-Map_MBlock_internal
00012332 01                         @mz1:		dc.b 1
00012333 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00012338 02                         @mz2:		dc.b 2
00012339 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
0001233E F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
00012343 04                         @sbz:		dc.b 4
00012344 F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
00012349 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
0001234E F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
00012353 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
00012358 04                         @sbzwide:	dc.b 4
00012359 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
0001235E F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
00012363 F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
00012368 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
0001236D 03                         @mz3:		dc.b 3
0001236E F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
00012373 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00012378 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
0001237E 00                         		even
0001237E 00                         		even
0001237E                            Map_MBlockLZ:	include	"_maps\Moving Blocks (LZ).asm"
0001237E                            ; ---------------------------------------------------------------------------
0001237E                            ; Sprite mappings - moving block (LZ)
0001237E                            ; ---------------------------------------------------------------------------
0001237E                            Map_MBlockLZ_internal:
0001237E 0000                       		dc.w @0-Map_MBlockLZ_internal
00012380 01                         @0:		dc.b 1
00012381 F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
00012386                            		even
00012386                            		even
00012386                            
00012386                            		include	"_incObj\55 Basaran.asm"
00012386                            ; ---------------------------------------------------------------------------
00012386                            ; Object 55 - Basaran enemy (MZ)
00012386                            ; ---------------------------------------------------------------------------
00012386                            
00012386                            Basaran:
00012386 7000                       		moveq	#0,d0
00012388 1028 0024                  		move.b	obRoutine(a0),d0
0001238C 323B 0000                  		move.w	Bas_Index(pc,d0.w),d1
00012390 4EFB 1000                  		jmp	Bas_Index(pc,d1.w)
00012394                            ; ===========================================================================
00012394 0000                       Bas_Index:	dc.w Bas_Main-Bas_Index
00012396 0000                       		dc.w Bas_Action-Bas_Index
00012398                            ; ===========================================================================
00012398                            
00012398                            Bas_Main:	; Routine 0
00012398 5428 0024                  		addq.b	#2,obRoutine(a0)
0001239C 217C 0000 0000 0004        		move.l	#Map_Bas,obMap(a0)
000123A4 317C 84B8 0002             		move.w	#$84B8,obGfx(a0)
000123AA 117C 0004 0001             		move.b	#4,obRender(a0)
000123B0 117C 000C 0016             		move.b	#$C,obHeight(a0)
000123B6 317C 0100 0018             		move.w	#$100,obPriority(a0)
000123BC 117C 000B 0020             		move.b	#$B,obColType(a0)
000123C2 117C 0010 0014             		move.b	#$10,obActWid(a0)
000123C8                            
000123C8                            Bas_Action:	; Routine 2
000123C8 7000                       		moveq	#0,d0
000123CA 1028 0025                  		move.b	ob2ndRout(a0),d0
000123CE 323B 0000                  		move.w	@index(pc,d0.w),d1
000123D2 4EBB 1000                  		jsr	@index(pc,d1.w)
000123D6 43F9 0000 0000             		lea	(Ani_Bas).l,a1
000123DC 6100 A55A                  		bsr.w	AnimateSprite
000123E0 6000 F420                  		bra.w	RememberState
000123E4                            ; ===========================================================================
000123E4 0000                       @index:		dc.w @dropcheck-@index
000123E6 0000                       		dc.w @dropfly-@index
000123E8 0000                       		dc.w @flapsound-@index
000123EA 0000                       		dc.w @flyup-@index
000123EC                            ; ===========================================================================
000123EC                            
000123EC                            @dropcheck:
000123EC 343C 0080                  		move.w	#$80,d2
000123F0 6100 0000                  		bsr.w	@chkdistance	; is Sonic < $80 pixels from basaran?
000123F4 6400                       		bcc.s	@nodrop		; if not, branch
000123F6 3038 D00C                  		move.w	(v_player+obY).w,d0
000123FA 3140 0036                  		move.w	d0,$36(a0)
000123FE 9068 000C                  		sub.w	obY(a0),d0
00012402 6500                       		bcs.s	@nodrop
00012404 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic < $80 pixels from basaran?
00012408 6400                       		bcc.s	@nodrop		; if not, branch
0001240A 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	on?
0001240E 6600                       		bne.s	@nodrop		; if yes, branch
00012410                            
00012410 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00012414 D007                       		add.b	d7,d0
00012416 0200 0007                  		andi.b	#7,d0
0001241A 6600                       		bne.s	@nodrop
0001241C 117C 0001 001C             		move.b	#1,obAnim(a0)
00012422 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00012426                            
00012426                            	@nodrop:
00012426 4E75                       		rts	
00012428                            ; ===========================================================================
00012428                            
00012428                            @dropfly:
00012428 6100 D44E                  		bsr.w	SpeedToPos
0001242C 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; make basaran fall
00012432 343C 0080                  		move.w	#$80,d2
00012436 6100 0000                  		bsr.w	@chkdistance
0001243A 3028 0036                  		move.w	$36(a0),d0
0001243E 9068 000C                  		sub.w	obY(a0),d0
00012442 6500                       		bcs.s	@chkdel
00012444 0C40 0010                  		cmpi.w	#$10,d0		; is basaran close to Sonic vertically?
00012448 6400                       		bcc.s	@dropmore	; if not, branch
0001244A 3141 0010                  		move.w	d1,obVelX(a0)	; make basaran fly horizontally
0001244E 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop basaran falling
00012454 117C 0002 001C             		move.b	#2,obAnim(a0)
0001245A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001245E                            
0001245E                            	@dropmore:
0001245E 4E75                       		rts	
00012460                            
00012460                            	@chkdel:
00012460 4A28 0001                  		tst.b	obRender(a0)
00012464 6A00 D466                  		bpl.w	DeleteObject
00012468 4E75                       		rts	
0001246A                            ; ===========================================================================
0001246A                            
0001246A                            @flapsound:
0001246A 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0001246E 0200 000F                  		andi.b	#$F,d0
00012472 6600                       		bne.s	@nosound
0001247E                            
0001247E                            	@nosound:
0001247E 6100 D3F8                  		bsr.w	SpeedToPos
00012482 3038 D008                  		move.w	(v_player+obX).w,d0
00012486 9068 0008                  		sub.w	obX(a0),d0
0001248A 6400                       		bcc.s	@isright	; if Sonic is right of basaran, branch
0001248C 4440                       		neg.w	d0
0001248E                            
0001248E                            	@isright:
0001248E 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of basaran?
00012492 6500                       		bcs.s	@dontflyup	; if yes, branch
00012494 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00012498 D007                       		add.b	d7,d0
0001249A 0200 0007                  		andi.b	#7,d0
0001249E 6600                       		bne.s	@dontflyup
000124A0 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000124A4                            
000124A4                            @dontflyup:
000124A4 4E75                       		rts	
000124A6                            ; ===========================================================================
000124A6                            
000124A6                            @flyup:
000124A6 6100 D3D0                  		bsr.w	SpeedToPos
000124AA 0468 0018 0012             		subi.w	#$18,obVelY(a0)	; make basaran fly upwards
000124B0 6100 0000                  		bsr.w	ObjHitCeiling
000124B4 4A41                       		tst.w	d1		; has basaran hit the ceiling?
000124B6 6A00                       		bpl.s	@noceiling	; if not, branch
000124B8 9368 000C                  		sub.w	d1,obY(a0)
000124BC 0268 FFF8 0008             		andi.w	#$FFF8,obX(a0)
000124C2 4268 0010                  		clr.w	obVelX(a0)	; stop basaran moving
000124C6 4268 0012                  		clr.w	obVelY(a0)
000124CA 4228 001C                  		clr.b	obAnim(a0)
000124CE 4228 0025                  		clr.b	ob2ndRout(a0)
000124D2                            
000124D2                            	@noceiling:
000124D2 4E75                       		rts	
000124D4                            ; ===========================================================================
000124D4                            
000124D4                            ; Subroutine to check Sonic's distance from the basaran
000124D4                            
000124D4                            ; input:
000124D4                            ;	d2 = distance to compare
000124D4                            
000124D4                            ; output:
000124D4                            ;	d0 = distance between Sonic and basaran
000124D4                            ;	d1 = speed/direction for basaran to fly
000124D4                            
000124D4                            @chkdistance:
000124D4 323C 0100                  		move.w	#$100,d1
000124D8 08E8 0000 0022             		bset	#0,obStatus(a0)
000124DE 3038 D008                  		move.w	(v_player+obX).w,d0
000124E2 9068 0008                  		sub.w	obX(a0),d0
000124E6 6400                       		bcc.s	@right		; if Sonic is right of basaran, branch
000124E8 4440                       		neg.w	d0
000124EA 4441                       		neg.w	d1
000124EC 08A8 0000 0022             		bclr	#0,obStatus(a0)
000124F2                            
000124F2                            	@right:
000124F2 B042                       		cmp.w	d2,d0
000124F4 4E75                       		rts	
000124F6                            ; ===========================================================================
000124F6                            ; unused crap
000124F6 6100 D380                  		bsr.w	SpeedToPos
000124FA 6100 D390                  		bsr.w	DisplaySprite
000124FE 4A28 0001                  		tst.b	obRender(a0)
00012502 6A00 D3C8                  		bpl.w	DeleteObject
00012506 4E75                       		rts	
00012506 4E75                       		rts	
00012508                            		include	"_anim\Basaran.asm"
00012508                            ; ---------------------------------------------------------------------------
00012508                            ; Animation script - Basaran enemy
00012508                            ; ---------------------------------------------------------------------------
00012508 0000                       Ani_Bas:	dc.w @still-Ani_Bas
0001250A 0000                       		dc.w @fall-Ani_Bas
0001250C 0000                       		dc.w @fly-Ani_Bas
0001250E 0F00 FF                    @still:		dc.b $F, 0, afEnd
00012512 00                         		even
00012512 0F01 FF                    @fall:		dc.b $F, 1, afEnd
00012516 00                         		even
00012516 0301 0203 02FF             @fly:		dc.b 3,	1, 2, 3, 2, afEnd
0001251C                            		even
0001251C                            		even
0001251C                            Map_Bas:	include	"_maps\Basaran.asm"
0001251C                            ; --------------------------------------------------------------------------------
0001251C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001251C                            ; --------------------------------------------------------------------------------
0001251C                            
0001251C                            SME_RhYYA:	
0001251C 0000 0000                  		dc.w SME_RhYYA_8-SME_RhYYA, SME_RhYYA_E-SME_RhYYA	
00012520 0000 0000                  		dc.w SME_RhYYA_1E-SME_RhYYA, SME_RhYYA_33-SME_RhYYA	
00012524 01                         SME_RhYYA_8:	dc.b 1	
00012525 F406 2000 F8               		dc.b $F4, 6, $20, 0, $F8	
0001252A 03                         SME_RhYYA_E:	dc.b 3	
0001252B F20E 2006 F4               		dc.b $F2, $E, $20, 6, $F4	
00012530 0A04 2012 FC               		dc.b $A, 4, $20, $12, $FC	
00012535 0200 2027 0C               		dc.b 2, 0, $20, $27, $C	
0001253A 04                         SME_RhYYA_1E:	dc.b 4	
0001253B F804 2014 F8               		dc.b $F8, 4, $20, $14, $F8	
00012540 000C 2016 F0               		dc.b 0, $C, $20, $16, $F0	
00012545 0804 201A 00               		dc.b 8, 4, $20, $1A, 0	
0001254A 0000 2028 0C               		dc.b 0, 0, $20, $28, $C	
0001254F 04                         SME_RhYYA_33:	dc.b 4	
00012550 F609 201C F5               		dc.b $F6, 9, $20, $1C, $F5	
00012555 0608 2022 F4               		dc.b 6, 8, $20, $22, $F4	
0001255A 0E04 2025 F4               		dc.b $E, 4, $20, $25, $F4	
0001255F FE00 2027 0C               		dc.b $FE, 0, $20, $27, $C	
00012564                            		even
00012564                            		even
00012564                            
00012564                            		include	"_incObj\56 Floating Blocks and Doors.asm"
00012564                            ; ---------------------------------------------------------------------------
00012564                            ; Object 56 - floating blocks (SYZ/SLZ), large doors (LZ)
00012564                            ; ---------------------------------------------------------------------------
00012564                            
00012564                            FloatingBlock:
00012564 7000                       		moveq	#0,d0
00012566 1028 0024                  		move.b	obRoutine(a0),d0
0001256A 323B 0000                  		move.w	FBlock_Index(pc,d0.w),d1
0001256E 4EFB 1000                  		jmp	FBlock_Index(pc,d1.w)
00012572                            ; ===========================================================================
00012572 0000                       FBlock_Index:	dc.w FBlock_Main-FBlock_Index
00012574 0000                       		dc.w FBlock_Action-FBlock_Index
00012576                            
00012576 =00000034                  fb_origX:	equ $34		; original x-axis position
00012576 =00000030                  fb_origY:	equ $30		; original y-axis position
00012576 =0000003A                  fb_height:	equ $3A		; total object height
00012576 =0000003C                  fb_type:		equ $3C		; subtype (2nd digit only)
00012576                            
00012576                            FBlock_Var:	; width/2, height/2
00012576 1010                       		dc.b  $10, $10	; subtype 0x/8x
00012578 2020                       		dc.b  $20, $20	; subtype 1x/9x
0001257A 1020                       		dc.b  $10, $20	; subtype 2x/Ax
0001257C 201A                       		dc.b  $20, $1A	; subtype 3x/Bx
0001257E 1027                       		dc.b  $10, $27	; subtype 4x/Cx
00012580 1010                       		dc.b  $10, $10	; subtype 5x/Dx
00012582 0820                       		dc.b	8, $20	; subtype 6x/Ex
00012584 4010                       		dc.b  $40, $10	; subtype 7x/Fx
00012586                            ; ===========================================================================
00012586                            
00012586                            FBlock_Main:	; Routine 0
00012586 5428 0024                  		addq.b	#2,obRoutine(a0)
0001258A 217C 0000 0000 0004        		move.l	#Map_FBlock,obMap(a0)
00012592 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00012598 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
0001259E 6600                       		bne.s	@notLZ
000125A0 317C 43C4 0002             		move.w	#$43C4,obGfx(a0) ; LZ specific code
000125A6                            
000125A6                            	@notLZ:
000125A6 117C 0004 0001             		move.b	#4,obRender(a0)
000125AC 317C 0180 0018             		move.w	#$180,obPriority(a0)
000125B2 7000                       		moveq	#0,d0
000125B4 1028 0028                  		move.b	obSubtype(a0),d0 ; get subtype
000125B8 E648                       		lsr.w	#3,d0
000125BA 0240 000E                  		andi.w	#$E,d0		; read only the 1st digit
000125BE 45FB 00B6                  		lea	FBlock_Var(pc,d0.w),a2 ; get size data
000125C2 115A 0014                  		move.b	(a2)+,obActWid(a0)
000125C6 1152 0016                  		move.b	(a2),obHeight(a0)
000125CA E248                       		lsr.w	#1,d0
000125CC 1140 001A                  		move.b	d0,obFrame(a0)
000125D0 3168 0008 0034             		move.w	obX(a0),fb_origX(a0)
000125D6 3168 000C 0030             		move.w	obY(a0),fb_origY(a0)
000125DC 7000                       		moveq	#0,d0
000125DE 1012                       		move.b	(a2),d0
000125E0 D040                       		add.w	d0,d0
000125E2 3140 003A                  		move.w	d0,fb_height(a0)
000125E6 0C28 0037 0028             			cmpi.b	#$37,obSubtype(a0)
000125EC 6600                       			bne.s	@dontdelete
000125EE 0C68 1BB8 0008             			cmpi.w	#$1BB8,obX(a0)
000125F4 6600                       			bne.s	@notatpos
000125F6 4A38 F7CE                  			tst.b	($FFFFF7CE).w
000125FA 6700                       			beq.s	@dontdelete
000125FC 4EF9 0000 F8CC             			jmp	(DeleteObject).l
00012602                            	@notatpos:
00012602 4228 0028                  			clr.b	obSubtype(a0)
00012606 4A38 F7CE                  			tst.b	($FFFFF7CE).w
0001260A 6600                       			bne.s	@dontdelete
0001260C 4EF9 0000 F8CC             			jmp	(DeleteObject).l
00012612                            	@dontdelete:
00012612 7000                       		moveq	#0,d0
00012614 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
0001261A 6700                       		beq.s	@stillnotLZ
0001261C 1028 0028                  		move.b	obSubtype(a0),d0 ; SYZ/SLZ specific code
00012620 0240 000F                  		andi.w	#$F,d0
00012624 5140                       		subq.w	#8,d0
00012626 6500                       		bcs.s	@stillnotLZ
00012628 E548                       		lsl.w	#2,d0
0001262A 45F8 FE8A                  		lea	(v_oscillate+$2C).w,a2
0001262E 45F2 0000                  		lea	(a2,d0.w),a2
00012632 4A52                       		tst.w	(a2)
00012634 6A00                       		bpl.s	@stillnotLZ
00012636 0868 0000 0022             		bchg	#0,obStatus(a0)
0001263C                            
0001263C                            	@stillnotLZ:
0001263C 1028 0028                  		move.b	obSubtype(a0),d0
00012640 6A00                       		bpl.s	FBlock_Action
00012642 0200 000F                  		andi.b	#$F,d0
00012646 1140 003C                  		move.b	d0,fb_type(a0)
0001264A 117C 0005 0028             		move.b	#5,obSubtype(a0)
00012650 0C28 0007 001A             		cmpi.b	#7,obFrame(a0)
00012656 6600                       		bne.s	@chkstate
00012658 117C 000C 0028             		move.b	#$C,obSubtype(a0)
0001265E 317C 0080 003A             		move.w	#$80,fb_height(a0)
00012664                            
00012664                            @chkstate:
00012664 45F8 FC00                  		lea	(v_objstate).w,a2
00012668 7000                       		moveq	#0,d0
0001266A 1028 0023                  		move.b	obRespawnNo(a0),d0
0001266E 6700                       		beq.s	FBlock_Action
00012670 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00012676 0832 0000 0002             		btst	#0,2(a2,d0.w)
0001267C 6700                       		beq.s	FBlock_Action
0001267E 5228 0028                  		addq.b	#1,obSubtype(a0)
00012682 4268 003A                  		clr.w	fb_height(a0)
00012686                            
00012686                            FBlock_Action:	; Routine 2
00012686 3F28 0008                  		move.w	obX(a0),-(sp)
0001268A 7000                       		moveq	#0,d0
0001268C 1028 0028                  		move.b	obSubtype(a0),d0 ; get object subtype
00012690 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00012694 D040                       		add.w	d0,d0
00012696 323B 0000                  		move.w	@index(pc,d0.w),d1
0001269A 4EBB 1000                  		jsr	@index(pc,d1.w)	; move block subroutines
0001269E 381F                       		move.w	(sp)+,d4
000126A0 4A28 0001                  		tst.b	obRender(a0)
000126A4 6A00                       		bpl.s	@chkdel
000126A6 7200                       		moveq	#0,d1
000126A8 1228 0014                  		move.b	obActWid(a0),d1
000126AC 0641 000B                  		addi.w	#$B,d1
000126B0 7400                       		moveq	#0,d2
000126B2 1428 0016                  		move.b	obHeight(a0),d2
000126B6 3602                       		move.w	d2,d3
000126B8 5243                       		addq.w	#1,d3
000126BA 6100 F5DE                  		bsr.w	SolidObject
000126BE                            
000126BE                            	@chkdel:
000126DA                            		@display:
000126DA 6000 D1B0                  			bra.w	DisplaySprite
000126DE                            		@chkdel2:
000126DE 0C28 0037 0028             			cmpi.b	#$37,obSubtype(a0)
000126E4 6600                       			bne.s	@delete
000126E6 4A28 0038                  			tst.b	$38(a0)
000126EA 66EE                       			bne.s	@display
000126EC                            		@delete:
000126EC 4EF9 0000 F8CC             			jmp	(DeleteObject).l
000126F2                            ; ===========================================================================
000126F2 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
000126F6 0000 0000                  		dc.w @type02-@index, @type03-@index
000126FA 0000 0000                  		dc.w @type04-@index, @type05-@index
000126FE 0000 0000                  		dc.w @type06-@index, @type07-@index
00012702 0000 0000                  		dc.w @type08-@index, @type09-@index
00012706 0000 0000                  		dc.w @type0A-@index, @type0B-@index
0001270A 0000 0000                  		dc.w @type0C-@index, @type0D-@index
0001270E                            ; ===========================================================================
0001270E                            
0001270E                            @type00:
0001270E                            ; doesn't move
0001270E 4E75                       		rts	
00012710                            ; ===========================================================================
00012710                            
00012710                            @type01:
00012710                            ; moves side-to-side
00012710 323C 0040                  		move.w	#$40,d1		; set move distance
00012714 7000                       		moveq	#0,d0
00012716 1038 FE68                  		move.b	(v_oscillate+$A).w,d0
0001271A 6000                       		bra.s	@moveLR
0001271C                            ; ===========================================================================
0001271C                            
0001271C                            @type02:
0001271C                            ; moves side-to-side
0001271C 323C 0080                  		move.w	#$80,d1		; set move distance
00012720 7000                       		moveq	#0,d0
00012722 1038 FE7C                  		move.b	(v_oscillate+$1E).w,d0
00012726                            
00012726                            	@moveLR:
00012726 0828 0000 0022             		btst	#0,obStatus(a0)
0001272C 6700                       		beq.s	@noflip
0001272E 4440                       		neg.w	d0
00012730 D041                       		add.w	d1,d0
00012732                            
00012732                            	@noflip:
00012732 3228 0034                  		move.w	fb_origX(a0),d1
00012736 9240                       		sub.w	d0,d1
00012738 3141 0008                  		move.w	d1,obX(a0)	; move object horizontally
0001273C 4E75                       		rts	
0001273E                            ; ===========================================================================
0001273E                            
0001273E                            @type03:
0001273E                            ; moves up/down
0001273E 323C 0040                  		move.w	#$40,d1		; set move distance
00012742 7000                       		moveq	#0,d0
00012744 1038 FE68                  		move.b	(v_oscillate+$A).w,d0
00012748 6000                       		bra.s	@moveUD
0001274A                            ; ===========================================================================
0001274A                            
0001274A                            @type04:
0001274A                            ; moves up/down
0001274A 323C 0080                  		move.w	#$80,d1		; set move distance
0001274E 7000                       		moveq	#0,d0
00012750 1038 FE7C                  		move.b	(v_oscillate+$1E).w,d0
00012754                            
00012754                            	@moveUD:
00012754 0828 0000 0022             		btst	#0,obStatus(a0)
0001275A 6700                       		beq.s	@noflip04
0001275C 4440                       		neg.w	d0
0001275E D041                       		add.w	d1,d0
00012760                            
00012760                            	@noflip04:
00012760 3228 0030                  		move.w	fb_origY(a0),d1
00012764 9240                       		sub.w	d0,d1
00012766 3141 000C                  		move.w	d1,obY(a0)	; move object vertically
0001276A 4E75                       		rts	
0001276C                            ; ===========================================================================
0001276C                            
0001276C                            @type05:
0001276C                            ; moves up when a switch is pressed
0001276C 4A28 0038                  		tst.b	$38(a0)
00012770 6600                       		bne.s	@loc_104A4
00012772 0C78 0100 FE10             		cmpi.w	#(id_LZ<<8)+0,(v_zone).w ; is level LZ1 ?
00012778 6600                       		bne.s	@aaa		; if not, branch
0001277A 0C28 0003 003C             		cmpi.b	#3,fb_type(a0)
00012780 6600                       		bne.s	@aaa
00012782 4238 F7C9                  		clr.b	(f_wtunnelallow).w
00012786 3038 D008                  		move.w	(v_player+obX).w,d0
0001278A B068 0008                  		cmp.w	obX(a0),d0
0001278E 6400                       		bcc.s	@aaa
00012790 11FC 0001 F7C9             		move.b	#1,(f_wtunnelallow).w
00012796                            
00012796                            	@aaa:
00012796 45F8 F7E0                  		lea	(f_switch).w,a2
0001279A 7000                       		moveq	#0,d0
0001279C 1028 003C                  		move.b	fb_type(a0),d0
000127A0 0832 0000 0000             		btst	#0,(a2,d0.w)
000127A6 6700                       		beq.s	@loc_104AE
000127A8 0C78 0100 FE10             		cmpi.w	#(id_LZ<<8)+0,(v_zone).w ; is level LZ1 ?
000127AE 6600                       		bne.s	@loc_1049E	; if not, branch
000127B0 0C00 0003                  		cmpi.b	#3,d0
000127B4 6600                       		bne.s	@loc_1049E
000127B6 4238 F7C9                  		clr.b	(f_wtunnelallow).w
000127BA                            
000127BA                            @loc_1049E:
000127BA 117C 0001 0038             		move.b	#1,$38(a0)
000127C0                            
000127C0                            @loc_104A4:
000127C0 4A68 003A                  		tst.w	fb_height(a0)
000127C4 6700                       		beq.s	@loc_104C8
000127C6 5568 003A                  		subq.w	#2,fb_height(a0)
000127CA                            
000127CA                            @loc_104AE:
000127CA 3028 003A                  		move.w	fb_height(a0),d0
000127CE 0828 0000 0022             		btst	#0,$22(a0)
000127D4 6700                       		beq.s	@loc_104BC
000127D6 4440                       		neg.w	d0
000127D8                            
000127D8                            @loc_104BC:
000127D8 3228 0030                  		move.w	fb_origY(a0),d1
000127DC D240                       		add.w	d0,d1
000127DE 3141 000C                  		move.w	d1,obY(a0)
000127E2 4E75                       		rts	
000127E4                            ; ===========================================================================
000127E4                            
000127E4                            @loc_104C8:
000127E4 5228 0028                  		addq.b	#1,$28(a0)
000127E8 4228 0038                  		clr.b	$38(a0)
000127EC 45F8 FC00                  		lea	(v_objstate).w,a2
000127F0 7000                       		moveq	#0,d0
000127F2 1028 0023                  		move.b	obRespawnNo(a0),d0
000127F6 67D2                       		beq.s	@loc_104AE
000127F8 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000127FE 60CA                       		bra.s	@loc_104AE
00012800                            ; ===========================================================================
00012800                            
00012800                            @type06:
00012800 4A28 0038                  		tst.b	$38(a0)
00012804 6600                       		bne.s	@loc_10500
00012806 45F8 F7E0                  		lea	(f_switch).w,a2
0001280A 7000                       		moveq	#0,d0
0001280C 1028 003C                  		move.b	fb_type(a0),d0
00012810 4A32 0000                  		tst.b	(a2,d0.w)
00012814 6A00                       		bpl.s	@loc_10512
00012816 117C 0001 0038             		move.b	#1,$38(a0)
0001281C                            
0001281C                            @loc_10500:
0001281C 7000                       		moveq	#0,d0
0001281E 1028 0016                  		move.b	obHeight(a0),d0
00012822 D040                       		add.w	d0,d0
00012824 B068 003A                  		cmp.w	fb_height(a0),d0
00012828 6700                       		beq.s	@loc_1052C
0001282A 5468 003A                  		addq.w	#2,fb_height(a0)
0001282E                            
0001282E                            @loc_10512:
0001282E 3028 003A                  		move.w	fb_height(a0),d0
00012832 0828 0000 0022             		btst	#0,obStatus(a0)
00012838 6700                       		beq.s	@loc_10520
0001283A 4440                       		neg.w	d0
0001283C                            
0001283C                            @loc_10520:
0001283C 3228 0030                  		move.w	fb_origY(a0),d1
00012840 D240                       		add.w	d0,d1
00012842 3141 000C                  		move.w	d1,obY(a0)
00012846 4E75                       		rts	
00012848                            ; ===========================================================================
00012848                            
00012848                            @loc_1052C:
00012848 5328 0028                  		subq.b	#1,obSubtype(a0)
0001284C 4228 0038                  		clr.b	$38(a0)
00012850 45F8 FC00                  		lea	(v_objstate).w,a2
00012854 7000                       		moveq	#0,d0
00012856 1028 0023                  		move.b	obRespawnNo(a0),d0
0001285A 67D2                       		beq.s	@loc_10512
0001285C 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00012862 60CA                       		bra.s	@loc_10512
00012864                            ; ===========================================================================
00012864                            
00012864                            @type07:
00012864 4A28 0038                  		tst.b	$38(a0)
00012868 6600                       		bne.s	@loc_1055E
0001286A 4A38 F7EF                  		tst.b	(f_switch+$F).w	; has switch number $F been pressed?
0001286E 6700                       		beq.s	@locret_10578
00012870 117C 0001 0038             		move.b	#1,$38(a0)
00012876 4268 003A                  		clr.w	fb_height(a0)
0001287A                            
0001287A                            @loc_1055E:
0001287A 5268 0008                  		addq.w	#1,obX(a0)
0001287E 3168 0008 0034             		move.w	obX(a0),fb_origX(a0)
00012884 5268 003A                  		addq.w	#1,fb_height(a0)
00012888 0C68 0380 003A             		cmpi.w	#$380,fb_height(a0)
0001288E 6600                       		bne.s	@locret_10578
00012890 11FC 0001 F7CE             			move.b	#1,($FFFFF7CE).w
00012896 4228 0038                  			clr.b	$38(a0)
0001289A 4228 0028                  		clr.b	obSubtype(a0)
0001289E                            
0001289E                            @locret_10578:
0001289E 4E75                       		rts	
000128A0                            ; ===========================================================================
000128A0                            
000128A0                            @type0C:
000128A0 4A28 0038                  		tst.b	$38(a0)
000128A4 6600                       		bne.s	@loc_10598
000128A6 45F8 F7E0                  		lea	(f_switch).w,a2
000128AA 7000                       		moveq	#0,d0
000128AC 1028 003C                  		move.b	fb_type(a0),d0
000128B0 0832 0000 0000             		btst	#0,(a2,d0.w)
000128B6 6700                       		beq.s	@loc_105A2
000128B8 117C 0001 0038             		move.b	#1,$38(a0)
000128BE                            
000128BE                            @loc_10598:
000128BE 4A68 003A                  		tst.w	fb_height(a0)
000128C2 6700                       		beq.s	@loc_105C0
000128C4 5568 003A                  		subq.w	#2,fb_height(a0)
000128C8                            
000128C8                            @loc_105A2:
000128C8 3028 003A                  		move.w	fb_height(a0),d0
000128CC 0828 0000 0022             		btst	#0,obStatus(a0)
000128D2 6700                       		beq.s	@loc_105B4
000128D4 4440                       		neg.w	d0
000128D6 0640 0080                  		addi.w	#$80,d0
000128DA                            
000128DA                            @loc_105B4:
000128DA 3228 0034                  		move.w	fb_origX(a0),d1
000128DE D240                       		add.w	d0,d1
000128E0 3141 0008                  		move.w	d1,obX(a0)
000128E4 4E75                       		rts	
000128E6                            ; ===========================================================================
000128E6                            
000128E6                            @loc_105C0:
000128E6 5228 0028                  		addq.b	#1,obSubtype(a0)
000128EA 4228 0038                  		clr.b	$38(a0)
000128EE 45F8 FC00                  		lea	(v_objstate).w,a2
000128F2 7000                       		moveq	#0,d0
000128F4 1028 0023                  		move.b	obRespawnNo(a0),d0
000128F8 67CE                       		beq.s	@loc_105A2
000128FA 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00012900 60C6                       		bra.s	@loc_105A2
00012902                            ; ===========================================================================
00012902                            
00012902                            @type0D:
00012902 4A28 0038                  		tst.b	$38(a0)
00012906 6600                       		bne.s	@loc_105F8
00012908 45F8 F7E0                  		lea	(f_switch).w,a2
0001290C 7000                       		moveq	#0,d0
0001290E 1028 003C                  		move.b	fb_type(a0),d0
00012912 4A32 0000                  		tst.b	(a2,d0.w)
00012916 6A00                       		bpl.s	@wtf
00012918 117C 0001 0038             		move.b	#1,$38(a0)
0001291E                            
0001291E                            @loc_105F8:
0001291E 303C 0080                  		move.w	#$80,d0
00012922 B068 003A                  		cmp.w	fb_height(a0),d0
00012926 6700                       		beq.s	@loc_10624
00012928 5468 003A                  		addq.w	#2,fb_height(a0)
0001292C                            
0001292C                            @wtf:
0001292C 3028 003A                  		move.w	fb_height(a0),d0
00012930 0828 0000 0022             		btst	#0,obStatus(a0)
00012936 6700                       		beq.s	@loc_10618
00012938 4440                       		neg.w	d0
0001293A 0640 0080                  		addi.w	#$80,d0
0001293E                            
0001293E                            @loc_10618:
0001293E 3228 0034                  		move.w	fb_origX(a0),d1
00012942 D240                       		add.w	d0,d1
00012944 3141 0008                  		move.w	d1,obX(a0)
00012948 4E75                       		rts	
0001294A                            ; ===========================================================================
0001294A                            
0001294A                            @loc_10624:
0001294A 5328 0028                  		subq.b	#1,obSubtype(a0)
0001294E 4228 0038                  		clr.b	$38(a0)
00012952 45F8 FC00                  		lea	(v_objstate).w,a2
00012956 7000                       		moveq	#0,d0
00012958 1028 0023                  		move.b	obRespawnNo(a0),d0
0001295C 67CE                       		beq.s	@wtf
0001295E 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00012964 60C6                       		bra.s	@wtf
00012966                            ; ===========================================================================
00012966                            
00012966                            @type08:
00012966 323C 0010                  		move.w	#$10,d1
0001296A 7000                       		moveq	#0,d0
0001296C 1038 FE88                  		move.b	(v_oscillate+$2A).w,d0
00012970 E248                       		lsr.w	#1,d0
00012972 3638 FE8A                  		move.w	(v_oscillate+$2C).w,d3
00012976 6000                       		bra.s	@square
00012978                            ; ===========================================================================
00012978                            
00012978                            @type09:
00012978 323C 0030                  		move.w	#$30,d1
0001297C 7000                       		moveq	#0,d0
0001297E 1038 FE8C                  		move.b	(v_oscillate+$2E).w,d0
00012982 3638 FE8E                  		move.w	(v_oscillate+$30).w,d3
00012986 6000                       		bra.s	@square
00012988                            ; ===========================================================================
00012988                            
00012988                            @type0A:
00012988 323C 0050                  		move.w	#$50,d1
0001298C 7000                       		moveq	#0,d0
0001298E 1038 FE90                  		move.b	(v_oscillate+$32).w,d0
00012992 3638 FE92                  		move.w	(v_oscillate+$34).w,d3
00012996 6000                       		bra.s	@square
00012998                            ; ===========================================================================
00012998                            
00012998                            @type0B:
00012998 323C 0070                  		move.w	#$70,d1
0001299C 7000                       		moveq	#0,d0
0001299E 1038 FE94                  		move.b	(v_oscillate+$36).w,d0
000129A2 3638 FE96                  		move.w	(v_oscillate+$38).w,d3
000129A6                            
000129A6                            @square:
000129A6 4A43                       		tst.w	d3
000129A8 6600                       		bne.s	@loc_1068E
000129AA 5228 0022                  		addq.b	#1,obStatus(a0)
000129AE 0228 0003 0022             		andi.b	#3,obStatus(a0)
000129B4                            
000129B4                            @loc_1068E:
000129B4 1428 0022                  		move.b	obStatus(a0),d2
000129B8 0202 0003                  		andi.b	#3,d2
000129BC 6600                       		bne.s	@loc_106AE
000129BE 9041                       		sub.w	d1,d0
000129C0 D068 0034                  		add.w	fb_origX(a0),d0
000129C4 3140 0008                  		move.w	d0,obX(a0)
000129C8 4441                       		neg.w	d1
000129CA D268 0030                  		add.w	fb_origY(a0),d1
000129CE 3141 000C                  		move.w	d1,obY(a0)
000129D2 4E75                       		rts	
000129D4                            ; ===========================================================================
000129D4                            
000129D4                            @loc_106AE:
000129D4 5302                       		subq.b	#1,d2
000129D6 6600                       		bne.s	@loc_106CC
000129D8 5341                       		subq.w	#1,d1
000129DA 9041                       		sub.w	d1,d0
000129DC 4440                       		neg.w	d0
000129DE D068 0030                  		add.w	fb_origY(a0),d0
000129E2 3140 000C                  		move.w	d0,obY(a0)
000129E6 5241                       		addq.w	#1,d1
000129E8 D268 0034                  		add.w	fb_origX(a0),d1
000129EC 3141 0008                  		move.w	d1,obX(a0)
000129F0 4E75                       		rts	
000129F2                            ; ===========================================================================
000129F2                            
000129F2                            @loc_106CC:
000129F2 5302                       		subq.b	#1,d2
000129F4 6600                       		bne.s	@loc_106EA
000129F6 5341                       		subq.w	#1,d1
000129F8 9041                       		sub.w	d1,d0
000129FA 4440                       		neg.w	d0
000129FC D068 0034                  		add.w	fb_origX(a0),d0
00012A00 3140 0008                  		move.w	d0,obX(a0)
00012A04 5241                       		addq.w	#1,d1
00012A06 D268 0030                  		add.w	fb_origY(a0),d1
00012A0A 3141 000C                  		move.w	d1,obY(a0)
00012A0E 4E75                       		rts	
00012A10                            ; ===========================================================================
00012A10                            
00012A10                            @loc_106EA:
00012A10 9041                       		sub.w	d1,d0
00012A12 D068 0030                  		add.w	fb_origY(a0),d0
00012A16 3140 000C                  		move.w	d0,obY(a0)
00012A1A 4441                       		neg.w	d1
00012A1C D268 0034                  		add.w	fb_origX(a0),d1
00012A20 3141 0008                  		move.w	d1,obX(a0)
00012A24 4E75                       		rts	
00012A24 4E75                       		rts	
00012A26                            Map_FBlock:	include	"_maps\Floating Blocks and Doors.asm"
00012A26                            ; ---------------------------------------------------------------------------
00012A26                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00012A26                            ; ---------------------------------------------------------------------------
00012A26                            Map_FBlock_internal:
00012A26 0000                       		dc.w @syz1x1-Map_FBlock_internal
00012A28 0000                       		dc.w @syz2x2-Map_FBlock_internal
00012A2A 0000                       		dc.w @syz1x2-Map_FBlock_internal
00012A2C 0000                       		dc.w @syzrect2x2-Map_FBlock_internal
00012A2E 0000                       		dc.w @syzrect1x3-Map_FBlock_internal
00012A30 0000                       		dc.w @slz-Map_FBlock_internal
00012A32 0000                       		dc.w @lzvert-Map_FBlock_internal
00012A34 0000                       		dc.w @lzhoriz-Map_FBlock_internal
00012A36 01                         @syz1x1:	dc.b 1
00012A37 F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0 ; SYZ - 1x1 square block
00012A3C 04                         @syz2x2:	dc.b 4
00012A3D E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0 ; SYZ - 2x2 square blocks
00012A42 E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00012A47 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
00012A4C 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00012A51 02                         @syz1x2:	dc.b 2
00012A52 E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0 ; SYZ - 1x2 square blocks
00012A57 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
00012A5C 04                         @syzrect2x2:	dc.b 4
00012A5D E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0 ; SYZ - 2x2 rectangular blocks
00012A62 E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00012A67 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
00012A6C 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00012A71 03                         @syzrect1x3:	dc.b 3
00012A72 D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0 ; SYZ - 1x3 rectangular blocks
00012A77 F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
00012A7C 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00012A81 01                         @slz:		dc.b 1
00012A82 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0 ; SLZ - 1x1 square block
00012A87 02                         @lzvert:	dc.b 2
00012A88 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8	; LZ - small vertical door
00012A8D 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00012A92 04                         @lzhoriz:	dc.b 4
00012A93 F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0 ; LZ - large horizontal door
00012A98 F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
00012A9D F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
00012AA2 F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
00012AA8 00                         		even
00012AA8 00                         		even
00012AA8                            
00012AA8                            		include	"_incObj\57 Spiked Ball and Chain.asm"
00012AA8                            ; ---------------------------------------------------------------------------
00012AA8                            ; Object 57 - spiked balls (SYZ, LZ)
00012AA8                            ; ---------------------------------------------------------------------------
00012AA8                            
00012AA8                            SpikeBall:
00012AA8 7000                       		moveq	#0,d0
00012AAA 1028 0024                  		move.b	obRoutine(a0),d0
00012AAE 323B 0000                  		move.w	SBall_Index(pc,d0.w),d1
00012AB2 4EFB 1000                  		jmp	SBall_Index(pc,d1.w)
00012AB6                            ; ===========================================================================
00012AB6 0000                       SBall_Index:	dc.w SBall_Main-SBall_Index
00012AB8 0000                       		dc.w SBall_Move-SBall_Index
00012ABA 0000                       		dc.w SBall_Display-SBall_Index
00012ABC                            
00012ABC =00000029                  sball_childs:	equ $29		; number of child objects (1 byte)
00012ABC                            		; $30-$37	; object RAM numbers of childs (1 byte each)
00012ABC =0000003A                  sball_origX:	equ $3A		; centre x-axis position (2 bytes)
00012ABC =00000038                  sball_origY:	equ $38		; centre y-axis position (2 bytes)
00012ABC =0000003C                  sball_radius:	equ $3C		; radius (1 byte)
00012ABC =0000003E                  sball_speed:	equ $3E		; rate of spin (2 bytes)
00012ABC                            ; ===========================================================================
00012ABC                            
00012ABC                            SBall_Main:	; Routine 0
00012ABC 5428 0024                  		addq.b	#2,obRoutine(a0)
00012AC0 217C 0000 0000 0004        		move.l	#Map_SBall,obMap(a0)
00012AC8 317C 03BA 0002             		move.w	#$3BA,obGfx(a0)
00012ACE 117C 0004 0001             		move.b	#4,obRender(a0)
00012AD4 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012ADA 117C 0008 0014             		move.b	#8,obActWid(a0)
00012AE0 3168 0008 003A             		move.w	obX(a0),sball_origX(a0)
00012AE6 3168 000C 0038             		move.w	obY(a0),sball_origY(a0)
00012AEC 117C 0098 0020             		move.b	#$98,obColType(a0) ; SYZ specific code (chain hurts Sonic)
00012AF2 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012AF8 6600                       		bne.s	@notlz
00012AFA                            
00012AFA 117C 0000 0020             		move.b	#0,obColType(a0) ; LZ specific code (chain doesn't hurt)
00012B00 317C 0310 0002             		move.w	#$310,obGfx(a0)
00012B06 217C 0000 0000 0004        		move.l	#Map_SBall2,obMap(a0)
00012B0E                            
00012B0E                            	@notlz:
00012B0E 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00012B12 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00012B16 4881                       		ext.w	d1
00012B18 E741                       		asl.w	#3,d1		; multiply by 8
00012B1A 3141 003E                  		move.w	d1,sball_speed(a0) ; set object twirl speed
00012B1E 1028 0022                  		move.b	obStatus(a0),d0
00012B22 E418                       		ror.b	#2,d0
00012B24 0200 00C0                  		andi.b	#$C0,d0
00012B28 1140 0026                  		move.b	d0,obAngle(a0)
00012B2C 45E8 0029                  		lea	sball_childs(a0),a2
00012B30 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00012B34 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
00012B38 14FC 0000                  		move.b	#0,(a2)+
00012B3C 3601                       		move.w	d1,d3
00012B3E E94B                       		lsl.w	#4,d3
00012B40 1143 003C                  		move.b	d3,sball_radius(a0)
00012B44 5341                       		subq.w	#1,d1		; set chain length (type-1)
00012B46 6500                       		bcs.s	@fail
00012B48 0828 0003 0028             		btst	#3,obSubtype(a0)
00012B4E 6700                       		beq.s	@makechain
00012B50 5341                       		subq.w	#1,d1
00012B52 6500                       		bcs.s	@fail
00012B54                            
00012B54                            @makechain:
00012B54 6100 D1C2                  		bsr.w	FindFreeObj
00012B58 6600                       		bne.s	@fail
00012B5A 5228 0029                  		addq.b	#1,sball_childs(a0) ; increment child object counter
00012B5E 3A09                       		move.w	a1,d5		; get child object RAM address
00012B60 0445 D000                  		subi.w	#$D000,d5	; subtract $D000
00012B64 EC4D                       		lsr.w	#6,d5		; divide by $40
00012B66 0245 007F                  		andi.w	#$7F,d5
00012B6A 14C5                       		move.b	d5,(a2)+	; copy child RAM number
00012B6C 137C 0004 0024             		move.b	#4,obRoutine(a1)
00012B72 1290                       		move.b	0(a0),0(a1)
00012B74 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
00012B7A 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00012B80 1368 0001 0001             		move.b	obRender(a0),obRender(a1)
00012B86 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
00012B8C 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
00012B92 1368 0020 0020             		move.b	obColType(a0),obColType(a1)
00012B98 0403 0010                  		subi.b	#$10,d3
00012B9C 1343 003C                  		move.b	d3,sball_radius(a1)
00012BA0 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012BA6 6600                       		bne.s	@notlzagain
00012BA8                            
00012BA8 4A03                       		tst.b	d3
00012BAA 6600                       		bne.s	@notlzagain
00012BAC 137C 0002 001A             		move.b	#2,obFrame(a1)	; use different frame for LZ chain
00012BB2                            
00012BB2                            	@notlzagain:
00012BB2 51C9 FFA0                  		dbf	d1,@makechain ; repeat for length of chain
00012BB6                            
00012BB6                            	@fail:
00012BB6 3A08                       		move.w	a0,d5
00012BB8 0445 D000                  		subi.w	#$D000,d5
00012BBC EC4D                       		lsr.w	#6,d5
00012BBE 0245 007F                  		andi.w	#$7F,d5
00012BC2 14C5                       		move.b	d5,(a2)+
00012BC4 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012BCA 6600                       		bne.s	SBall_Move
00012BCC                            
00012BCC 117C 008B 0020             		move.b	#$8B,obColType(a0) ; if yes, make last spikeball larger
00012BD2 117C 0001 001A             		move.b	#1,obFrame(a0)	; use different	frame
00012BD8                            
00012BD8                            SBall_Move:	; Routine 2
00012BD8 6100 0000                  		bsr.w	@movesub
00012BDC 6000 0000                  		bra.w	@chkdel
00012BE0                            ; ===========================================================================
00012BE0                            
00012BE0                            @movesub:
00012BE0 3028 003E                  		move.w	sball_speed(a0),d0
00012BE4 D168 0026                  		add.w	d0,obAngle(a0)
00012BE8 1028 0026                  		move.b	obAngle(a0),d0
00012BEC 4EB9 0000 3A32             		jsr	(CalcSine).l
00012BF2 3428 0038                  		move.w	sball_origY(a0),d2
00012BF6 3628 003A                  		move.w	sball_origX(a0),d3
00012BFA 45E8 0029                  		lea	sball_childs(a0),a2
00012BFE 7C00                       		moveq	#0,d6
00012C00 1C1A                       		move.b	(a2)+,d6
00012C02                            
00012C02                            	@loop:
00012C02 7800                       		moveq	#0,d4
00012C04 181A                       		move.b	(a2)+,d4
00012C06 ED4C                       		lsl.w	#6,d4
00012C08 0684 00FF D000             		addi.l	#v_objspace&$FFFFFF,d4
00012C0E 2244                       		movea.l	d4,a1
00012C10 7800                       		moveq	#0,d4
00012C12 1829 003C                  		move.b	sball_radius(a1),d4
00012C16 2A04                       		move.l	d4,d5
00012C18 C9C0                       		muls.w	d0,d4
00012C1A E084                       		asr.l	#8,d4
00012C1C CBC1                       		muls.w	d1,d5
00012C1E E085                       		asr.l	#8,d5
00012C20 D842                       		add.w	d2,d4
00012C22 DA43                       		add.w	d3,d5
00012C24 3344 000C                  		move.w	d4,obY(a1)
00012C28 3345 0008                  		move.w	d5,obX(a1)
00012C2C 51CE FFD4                  		dbf	d6,@loop
00012C30 4E75                       		rts	
00012C32                            ; ===========================================================================
00012C32                            
00012C32                            @chkdel:
00012C50 6000 CC3A                  		bra.w	DisplaySprite
00012C54                            ; ===========================================================================
00012C54                            
00012C54                            @delete:
00012C54 7400                       		moveq	#0,d2
00012C56 45E8 0029                  		lea	sball_childs(a0),a2
00012C5A 141A                       		move.b	(a2)+,d2
00012C5C                            
00012C5C                            	@deleteloop:
00012C5C 7000                       		moveq	#0,d0
00012C5E 101A                       		move.b	(a2)+,d0
00012C60 ED48                       		lsl.w	#6,d0
00012C62 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00012C68 2240                       		movea.l	d0,a1
00012C6A 6100 CC62                  		bsr.w	DeleteChild
00012C6E 51CA FFEC                  		dbf	d2,@deleteloop ; delete all pieces of	chain
00012C72                            
00012C72 4E75                       		rts	
00012C74                            ; ===========================================================================
00012C74                            
00012C74                            SBall_Display:	; Routine 4
00012C74 6000 CC16                  		bra.w	DisplaySprite
00012C74 6000 CC16                  		bra.w	DisplaySprite
00012C78                            Map_SBall:	include	"_maps\Spiked Ball and Chain (SYZ).asm"
00012C78                            ; ---------------------------------------------------------------------------
00012C78                            ; Sprite mappings - chain of spiked balls (SYZ)
00012C78                            ; ---------------------------------------------------------------------------
00012C78                            Map_SBall_internal:
00012C78 0000                       		dc.w @0-Map_SBall_internal
00012C7A 01                         @0:		dc.b 1
00012C7B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00012C80                            		even
00012C80                            		even
00012C80                            Map_SBall2:	include	"_maps\Spiked Ball and Chain (LZ).asm"
00012C80                            ; ---------------------------------------------------------------------------
00012C80                            ; Sprite mappings - spiked ball	on a chain (LZ)
00012C80                            ; ---------------------------------------------------------------------------
00012C80                            Map_SBall2_internal:
00012C80 0000                       		dc.w @chain-Map_SBall2_internal
00012C82 0000                       		dc.w @spikeball-Map_SBall2_internal
00012C84 0000                       		dc.w @base-Map_SBall2_internal
00012C86 01                         @chain:		dc.b 1
00012C87 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; chain link
00012C8C 01                         @spikeball:	dc.b 1
00012C8D F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0	; spikeball
00012C92 01                         @base:		dc.b 1
00012C93 F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8 ; wall attachment
00012C98                            		even
00012C98                            		even
00012C98                            		include	"_incObj\58 Big Spiked Ball.asm"
00012C98                            ; ---------------------------------------------------------------------------
00012C98                            ; Object 58 - giant spiked balls (SYZ)
00012C98                            ; ---------------------------------------------------------------------------
00012C98                            
00012C98                            BigSpikeBall:
00012C98 7000                       		moveq	#0,d0
00012C9A 1028 0024                  		move.b	obRoutine(a0),d0
00012C9E 323B 0000                  		move.w	BBall_Index(pc,d0.w),d1
00012CA2 4EFB 1000                  		jmp	BBall_Index(pc,d1.w)
00012CA6                            ; ===========================================================================
00012CA6 0000                       BBall_Index:	dc.w BBall_Main-BBall_Index
00012CA8 0000                       		dc.w BBall_Move-BBall_Index
00012CAA                            
00012CAA =0000003A                  bball_origX:	equ $3A		; original x-axis position
00012CAA =00000038                  bball_origY:	equ $38		; original y-axis position
00012CAA =0000003C                  bball_radius:	equ $3C		; radius of circle
00012CAA =0000003E                  bball_speed:	equ $3E		; speed
00012CAA                            ; ===========================================================================
00012CAA                            
00012CAA                            BBall_Main:	; Routine 0
00012CAA 5428 0024                  		addq.b	#2,obRoutine(a0)
00012CAE 217C 0000 0000 0004        		move.l	#Map_BBall,obMap(a0)
00012CB6 317C 0396 0002             		move.w	#$396,obGfx(a0)
00012CBC 117C 0004 0001             		move.b	#4,obRender(a0)
00012CC2 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012CC8 117C 0018 0014             		move.b	#$18,obActWid(a0)
00012CCE 3168 0008 003A             		move.w	obX(a0),bball_origX(a0)
00012CD4 3168 000C 0038             		move.w	obY(a0),bball_origY(a0)
00012CDA 117C 0086 0020             		move.b	#$86,obColType(a0)
00012CE0 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00012CE4 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00012CE8 4881                       		ext.w	d1
00012CEA E741                       		asl.w	#3,d1		; multiply by 8
00012CEC 3141 003E                  		move.w	d1,bball_speed(a0) ; set object speed
00012CF0 1028 0022                  		move.b	obStatus(a0),d0
00012CF4 E418                       		ror.b	#2,d0
00012CF6 0200 00C0                  		andi.b	#$C0,d0
00012CFA 1140 0026                  		move.b	d0,obAngle(a0)
00012CFE 117C 0050 003C             		move.b	#$50,bball_radius(a0) ; set radius of circle motion
00012D04                            
00012D04                            BBall_Move:	; Routine 2
00012D04 7000                       		moveq	#0,d0
00012D06 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00012D0A 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
00012D0E D040                       		add.w	d0,d0
00012D10 323B 0000                  		move.w	@index(pc,d0.w),d1
00012D14 4EBB 1000                  		jsr	@index(pc,d1.w)
00012D36 6000 CB54                  		bra.w	DisplaySprite
00012D3A                            ; ===========================================================================
00012D3A 0000                       @index:		dc.w @type00-@index
00012D3C 0000                       		dc.w @type01-@index
00012D3E 0000                       		dc.w @type02-@index
00012D40 0000                       		dc.w @type03-@index
00012D42                            ; ===========================================================================
00012D42                            
00012D42                            @type00:
00012D42 4E75                       		rts	
00012D44                            ; ===========================================================================
00012D44                            
00012D44                            @type01:
00012D44 323C 0060                  		move.w	#$60,d1
00012D48 7000                       		moveq	#0,d0
00012D4A 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
00012D4E 0828 0000 0022             		btst	#0,obStatus(a0)
00012D54 6700                       		beq.s	@noflip1
00012D56 4440                       		neg.w	d0
00012D58 D041                       		add.w	d1,d0
00012D5A                            
00012D5A                            	@noflip1:
00012D5A 3228 003A                  		move.w	bball_origX(a0),d1
00012D5E 9240                       		sub.w	d0,d1
00012D60 3141 0008                  		move.w	d1,obX(a0)	; move object horizontally
00012D64 4E75                       		rts	
00012D66                            ; ===========================================================================
00012D66                            
00012D66                            @type02:
00012D66 323C 0060                  		move.w	#$60,d1
00012D6A 7000                       		moveq	#0,d0
00012D6C 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
00012D70 0828 0000 0022             		btst	#0,obStatus(a0)
00012D76 6700                       		beq.s	@noflip2
00012D78 4440                       		neg.w	d0
00012D7A 0640 0080                  		addi.w	#$80,d0
00012D7E                            
00012D7E                            	@noflip2:
00012D7E 3228 0038                  		move.w	bball_origY(a0),d1
00012D82 9240                       		sub.w	d0,d1
00012D84 3141 000C                  		move.w	d1,obY(a0)	; move object vertically
00012D88 4E75                       		rts	
00012D8A                            ; ===========================================================================
00012D8A                            
00012D8A                            @type03:
00012D8A 3028 003E                  		move.w	bball_speed(a0),d0
00012D8E D168 0026                  		add.w	d0,obAngle(a0)
00012D92 1028 0026                  		move.b	obAngle(a0),d0
00012D96 4EB9 0000 3A32             		jsr	(CalcSine).l
00012D9C 3428 0038                  		move.w	bball_origY(a0),d2
00012DA0 3628 003A                  		move.w	bball_origX(a0),d3
00012DA4 7800                       		moveq	#0,d4
00012DA6 1828 003C                  		move.b	bball_radius(a0),d4
00012DAA 2A04                       		move.l	d4,d5
00012DAC C9C0                       		muls.w	d0,d4
00012DAE E084                       		asr.l	#8,d4
00012DB0 CBC1                       		muls.w	d1,d5
00012DB2 E085                       		asr.l	#8,d5
00012DB4 D842                       		add.w	d2,d4
00012DB6 DA43                       		add.w	d3,d5
00012DB8 3144 000C                  		move.w	d4,obY(a0)	; move object circularly
00012DBC 3145 0008                  		move.w	d5,obX(a0)
00012DC0 4E75                       		rts	
00012DC0 4E75                       		rts	
00012DC2                            Map_BBall:	include	"_maps\Big Spiked Ball.asm"
00012DC2                            ; --------------------------------------------------------------------------------
00012DC2                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00012DC2                            ; --------------------------------------------------------------------------------
00012DC2                            
00012DC2                            SME_u_DKx:	
00012DC2 0000 0000                  		dc.w SME_u_DKx_6-SME_u_DKx, SME_u_DKx_20-SME_u_DKx	
00012DC6 0000                       		dc.w SME_u_DKx_26-SME_u_DKx	
00012DC8 05                         SME_u_DKx_6:	dc.b 5	
00012DC9 E804 0000 F8               		dc.b $E8, 4, 0, 0, $F8	
00012DCE F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0	
00012DD3 F801 0012 E8               		dc.b $F8, 1, 0, $12, $E8	
00012DD8 F801 0014 10               		dc.b $F8, 1, 0, $14, $10	
00012DDD 1004 0016 F8               		dc.b $10, 4, 0, $16, $F8	
00012DE2 01                         SME_u_DKx_20:	dc.b 1	
00012DE3 F805 0020 F8               		dc.b $F8, 5, 0, $20, $F8	
00012DE8 02                         SME_u_DKx_26:	dc.b 2	
00012DE9 F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0	
00012DEE E80D 1018 F0               		dc.b $E8, $D, $10, $18, $F0	
00012DF4 00                         		even
00012DF4 00                         		even
00012DF4                            		include	"_incObj\59 SLZ Elevators.asm"
00012DF4                            ; ---------------------------------------------------------------------------
00012DF4                            ; Object 59 - platforms	that move when you stand on them (SLZ)
00012DF4                            ; ---------------------------------------------------------------------------
00012DF4                            
00012DF4                            Elevator:
00012DF4 7000                       		moveq	#0,d0
00012DF6 1028 0024                  		move.b	obRoutine(a0),d0
00012DFA 323B 0000                  		move.w	Elev_Index(pc,d0.w),d1
00012DFE 4EBB 1000                  		jsr	Elev_Index(pc,d1.w)
00012E20 6000 CA6A                  		bra.w	DisplaySprite
00012E24                            ; ===========================================================================
00012E24 0000                       Elev_Index:	dc.w Elev_Main-Elev_Index
00012E26 0000                       		dc.w Elev_Platform-Elev_Index
00012E28 0000                       		dc.w Elev_Action-Elev_Index
00012E2A 0000                       		dc.w Elev_MakeMulti-Elev_Index
00012E2C                            
00012E2C =00000032                  elev_origX:	equ $32		; original x-axis position
00012E2C =00000030                  elev_origY:	equ $30		; original y-axis position
00012E2C =0000003C                  elev_dist:	equ $3C		; distance to move (2 bytes)
00012E2C                            
00012E2C 2800                       Elev_Var1:	dc.b $28, 0		; width, frame number
00012E2E                            
00012E2E 1001                       Elev_Var2:	dc.b $10, 1		; distance to move, action type
00012E30 2001                       		dc.b $20, 1
00012E32 3401                       		dc.b $34, 1
00012E34 1003                       		dc.b $10, 3
00012E36 2003                       		dc.b $20, 3
00012E38 3403                       		dc.b $34, 3
00012E3A 1401                       		dc.b $14, 1
00012E3C 2401                       		dc.b $24, 1
00012E3E 2C01                       		dc.b $2C, 1
00012E40 1403                       		dc.b $14, 3
00012E42 2403                       		dc.b $24, 3
00012E44 2C03                       		dc.b $2C, 3
00012E46 2005                       		dc.b $20, 5
00012E48 2007                       		dc.b $20, 7
00012E4A 3009                       		dc.b $30, 9
00012E4C                            ; ===========================================================================
00012E4C                            
00012E4C                            Elev_Main:	; Routine 0
00012E4C 5428 0024                  		addq.b	#2,obRoutine(a0)
00012E50 7000                       		moveq	#0,d0
00012E52 1028 0028                  		move.b	obSubtype(a0),d0
00012E56 6A00                       		bpl.s	@normal		; branch for types 00-7F
00012E58 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto Elev_MakeMulti next
00012E5C 0240 007F                  		andi.w	#$7F,d0
00012E60 C0FC 0006                  		mulu.w	#6,d0
00012E64 3140 003C                  		move.w	d0,elev_dist(a0)
00012E68 3140 003E                  		move.w	d0,$3E(a0)
00012E6C 588F                       		addq.l	#4,sp
00012E6E 4E75                       		rts	
00012E70                            ; ===========================================================================
00012E70                            
00012E70                            	@normal:
00012E70 E648                       		lsr.w	#3,d0
00012E72 0240 001E                  		andi.w	#$1E,d0
00012E76 45FB 00B4                  		lea	Elev_Var1(pc,d0.w),a2
00012E7A 115A 0014                  		move.b	(a2)+,obActWid(a0) ; set width
00012E7E 115A 001A                  		move.b	(a2)+,obFrame(a0) ; set frame
00012E82 7000                       		moveq	#0,d0
00012E84 1028 0028                  		move.b	obSubtype(a0),d0
00012E88 D040                       		add.w	d0,d0
00012E8A 0240 001E                  		andi.w	#$1E,d0
00012E8E 45FB 009E                  		lea	Elev_Var2(pc,d0.w),a2
00012E92 101A                       		move.b	(a2)+,d0
00012E94 E548                       		lsl.w	#2,d0
00012E96 3140 003C                  		move.w	d0,elev_dist(a0)	; set distance to move
00012E9A 115A 0028                  		move.b	(a2)+,obSubtype(a0)	; set type
00012E9E 217C 0000 0000 0004        		move.l	#Map_Elev,obMap(a0)
00012EA6 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00012EAC 117C 0004 0001             		move.b	#4,obRender(a0)
00012EB2 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012EB8 3168 0008 0032             		move.w	obX(a0),elev_origX(a0)
00012EBE 3168 000C 0030             		move.w	obY(a0),elev_origY(a0)
00012EC4                            
00012EC4                            Elev_Platform:	; Routine 2
00012EC4 7200                       		moveq	#0,d1
00012EC6 1228 0014                  		move.b	obActWid(a0),d1
00012ECA 4EB9 0000 905A             		jsr	(PlatformObject).l
00012ED0 6000 0000                  		bra.w	Elev_Types
00012ED4                            ; ===========================================================================
00012ED4                            
00012ED4                            Elev_Action:	; Routine 4
00012ED4 7200                       		moveq	#0,d1
00012ED6 1228 0014                  		move.b	obActWid(a0),d1
00012EDA 4EB9 0000 91CE             		jsr	(ExitPlatform).l
00012EE0 3F28 0008                  		move.w	obX(a0),-(sp)
00012EE4 6100 0000                  		bsr.w	Elev_Types
00012EE8 341F                       		move.w	(sp)+,d2
00012EEA 4A10                       		tst.b	0(a0)
00012EEC 6700                       		beq.s	@deleted
00012EEE 4EF9 0000 9738             		jmp	(MvSonicOnPtfm2).l
00012EF4                            
00012EF4                            	@deleted:
00012EF4 4E75                       		rts	
00012EF6                            ; ===========================================================================
00012EF6                            
00012EF6                            Elev_Types:
00012EF6 7000                       		moveq	#0,d0
00012EF8 1028 0028                  		move.b	obSubtype(a0),d0
00012EFC 0240 000F                  		andi.w	#$F,d0
00012F00 D040                       		add.w	d0,d0
00012F02 323B 0000                  		move.w	@index(pc,d0.w),d1
00012F06 4EFB 1000                  		jmp	@index(pc,d1.w)
00012F0A                            ; ===========================================================================
00012F0A 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00012F0E 0000 0000                  		dc.w @type02-@index, @type01-@index
00012F12 0000 0000                  		dc.w @type04-@index, @type01-@index
00012F16 0000 0000                  		dc.w @type06-@index, @type01-@index
00012F1A 0000 0000                  		dc.w @type08-@index, @type09-@index
00012F1E                            ; ===========================================================================
00012F1E                            
00012F1E                            @type00:
00012F1E 4E75                       		rts	
00012F20                            ; ===========================================================================
00012F20                            
00012F20                            @type01:
00012F20 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0) ; check if Sonic is standing on the object
00012F26 6600                       		bne.s	@notstanding
00012F28 5228 0028                  		addq.b	#1,obSubtype(a0) ; if yes, add 1 to type
00012F2C                            
00012F2C                            	@notstanding:
00012F2C 4E75                       		rts	
00012F2E                            ; ===========================================================================
00012F2E                            
00012F2E                            @type02:
00012F2E 6100 0000                  		bsr.w	Elev_Move
00012F32 3028 0034                  		move.w	$34(a0),d0
00012F36 4440                       		neg.w	d0
00012F38 D068 0030                  		add.w	elev_origY(a0),d0
00012F3C 3140 000C                  		move.w	d0,obY(a0)
00012F40 4E75                       		rts	
00012F42                            ; ===========================================================================
00012F42                            
00012F42                            @type04:
00012F42 6100 0000                  		bsr.w	Elev_Move
00012F46 3028 0034                  		move.w	$34(a0),d0
00012F4A D068 0030                  		add.w	elev_origY(a0),d0
00012F4E 3140 000C                  		move.w	d0,obY(a0)
00012F52 4E75                       		rts	
00012F54                            ; ===========================================================================
00012F54                            
00012F54                            @type06:
00012F54 6100 0000                  		bsr.w	Elev_Move
00012F58 3028 0034                  		move.w	$34(a0),d0
00012F5C E240                       		asr.w	#1,d0
00012F5E 4440                       		neg.w	d0
00012F60 D068 0030                  		add.w	elev_origY(a0),d0
00012F64 3140 000C                  		move.w	d0,obY(a0)
00012F68 3028 0034                  		move.w	$34(a0),d0
00012F6C D068 0032                  		add.w	elev_origX(a0),d0
00012F70 3140 0008                  		move.w	d0,obX(a0)
00012F74 4E75                       		rts	
00012F76                            ; ===========================================================================
00012F76                            
00012F76                            @type08:
00012F76 6100 0000                  		bsr.w	Elev_Move
00012F7A 3028 0034                  		move.w	$34(a0),d0
00012F7E E240                       		asr.w	#1,d0
00012F80 D068 0030                  		add.w	elev_origY(a0),d0
00012F84 3140 000C                  		move.w	d0,obY(a0)
00012F88 3028 0034                  		move.w	$34(a0),d0
00012F8C 4440                       		neg.w	d0
00012F8E D068 0032                  		add.w	elev_origX(a0),d0
00012F92 3140 0008                  		move.w	d0,obX(a0)
00012F96 4E75                       		rts	
00012F98                            ; ===========================================================================
00012F98                            
00012F98                            @type09:
00012F98 6100 0000                  		bsr.w	Elev_Move
00012F9C 3028 0034                  		move.w	$34(a0),d0
00012FA0 4440                       		neg.w	d0
00012FA2 D068 0030                  		add.w	elev_origY(a0),d0
00012FA6 3140 000C                  		move.w	d0,obY(a0)
00012FAA 4A28 0028                  		tst.b	obSubtype(a0)
00012FAE 6700 0000                  		beq.w	@typereset
00012FB2 4E75                       		rts	
00012FB4                            ; ===========================================================================
00012FB4                            
00012FB4                            	@typereset:
00012FB4 0828 0003 0022             		btst	#3,obStatus(a0)
00012FBA 6700                       		beq.s	@delete
00012FBC 08E9 0001 0022             		bset	#1,obStatus(a1)
00012FC2 08A9 0003 0022             		bclr	#3,obStatus(a1)
00012FC8 137C 0002 0024             		move.b	#2,obRoutine(a1)
00012FCE                            
00012FCE                            	@delete:
00012FCE 6000 C8FC                  		bra.w	DeleteObject
00012FD2                            
00012FD2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012FD2                            
00012FD2                            
00012FD2                            Elev_Move:
00012FD2 3028 0038                  		move.w	$38(a0),d0
00012FD6 4A28 003A                  		tst.b	$3A(a0)
00012FDA 6600                       		bne.s	loc_10CC8
00012FDC 0C40 0800                  		cmpi.w	#$800,d0
00012FE0 6400                       		bcc.s	loc_10CD0
00012FE2 0640 0010                  		addi.w	#$10,d0
00012FE6 6000                       		bra.s	loc_10CD0
00012FE8                            ; ===========================================================================
00012FE8                            
00012FE8                            loc_10CC8:
00012FE8 4A40                       		tst.w	d0
00012FEA 6700                       		beq.s	loc_10CD0
00012FEC 0440 0010                  		subi.w	#$10,d0
00012FF0                            
00012FF0                            loc_10CD0:
00012FF0 3140 0038                  		move.w	d0,$38(a0)
00012FF4 48C0                       		ext.l	d0
00012FF6 E180                       		asl.l	#8,d0
00012FF8 D0A8 0034                  		add.l	$34(a0),d0
00012FFC 2140 0034                  		move.l	d0,$34(a0)
00013000 4840                       		swap	d0
00013002 3428 003C                  		move.w	elev_dist(a0),d2
00013006 B042                       		cmp.w	d2,d0
00013008 6300                       		bls.s	loc_10CF0
0001300A 117C 0001 003A             		move.b	#1,$3A(a0)
00013010                            
00013010                            loc_10CF0:
00013010 D442                       		add.w	d2,d2
00013012 B042                       		cmp.w	d2,d0
00013014 6600                       		bne.s	locret_10CFA
00013016 4228 0028                  		clr.b	obSubtype(a0)
0001301A                            
0001301A                            locret_10CFA:
0001301A 4E75                       		rts	
0001301C                            ; End of function Elev_Move
0001301C                            
0001301C                            ; ===========================================================================
0001301C                            
0001301C                            Elev_MakeMulti:	; Routine 6
0001301C 5368 003C                  		subq.w	#1,elev_dist(a0)
00013020 6600                       		bne.s	@chkdel
00013022 3168 003E 003C             		move.w	$3E(a0),elev_dist(a0)
00013028 6100 CCEE                  		bsr.w	FindFreeObj
0001302C 6600                       		bne.s	@chkdel
0001302E 12BC 0059                  		move.b	#id_Elevator,0(a1) ; duplicate the object
00013032 3368 0008 0008             		move.w	obX(a0),obX(a1)
00013038 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001303E 137C 000E 0028             		move.b	#$E,obSubtype(a1)
00013044                            
00013044                            @chkdel:
00013044 588F                       		addq.l	#4,sp
00013064 4E75                       		rts	
00013064 4E75                       		rts	
00013066                            Map_Elev:	include	"_maps\SLZ Elevators.asm"
00013066                            ; ---------------------------------------------------------------------------
00013066                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00013066                            ; ---------------------------------------------------------------------------
00013066                            Map_Elev_internal:
00013066 0000                       		dc.w @elevator-Map_Elev_internal
00013068 03                         @elevator:	dc.b 3
00013069 F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
0001306E F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
00013073 F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
00013078                            		even
00013078                            		even
00013078                            		include	"_incObj\5A SLZ Circling Platform.asm"
00013078                            ; ---------------------------------------------------------------------------
00013078                            ; Object 5A - platforms	moving in circles (SLZ)
00013078                            ; ---------------------------------------------------------------------------
00013078                            
00013078                            CirclingPlatform:
00013078 7000                       		moveq	#0,d0
0001307A 1028 0024                  		move.b	obRoutine(a0),d0
0001307E 323B 0000                  		move.w	Circ_Index(pc,d0.w),d1
00013082 4EBB 1000                  		jsr	Circ_Index(pc,d1.w)
000130A4 6000 C7E6                  		bra.w	DisplaySprite
000130A8                            ; ===========================================================================
000130A8 0000                       Circ_Index:	dc.w Circ_Main-Circ_Index
000130AA 0000                       		dc.w Circ_Platform-Circ_Index
000130AC 0000                       		dc.w Circ_Action-Circ_Index
000130AE                            
000130AE =00000032                  circ_origX:	equ $32		; original x-axis position
000130AE =00000030                  circ_origY:	equ $30		; original y-axis position
000130AE                            ; ===========================================================================
000130AE                            
000130AE                            Circ_Main:	; Routine 0
000130AE 5428 0024                  		addq.b	#2,obRoutine(a0)
000130B2 217C 0000 0000 0004        		move.l	#Map_Circ,obMap(a0)
000130BA 317C 4000 0002             		move.w	#$4000,obGfx(a0)
000130C0 117C 0004 0001             		move.b	#4,obRender(a0)
000130C6 317C 0200 0018             		move.w	#$200,obPriority(a0)
000130CC 117C 0018 0014             		move.b	#$18,obActWid(a0)
000130D2 3168 0008 0032             		move.w	obX(a0),circ_origX(a0)
000130D8 3168 000C 0030             		move.w	obY(a0),circ_origY(a0)
000130DE                            
000130DE                            Circ_Platform:	; Routine 2
000130DE 7200                       		moveq	#0,d1
000130E0 1228 0014                  		move.b	obActWid(a0),d1
000130E4 4EB9 0000 905A             		jsr	(PlatformObject).l
000130EA 6000 0000                  		bra.w	Circ_Types
000130EE                            ; ===========================================================================
000130EE                            
000130EE                            Circ_Action:	; Routine 4
000130EE 7200                       		moveq	#0,d1
000130F0 1228 0014                  		move.b	obActWid(a0),d1
000130F4 4EB9 0000 91CE             		jsr	(ExitPlatform).l
000130FA 3F28 0008                  		move.w	obX(a0),-(sp)
000130FE 6100 0000                  		bsr.w	Circ_Types
00013102 341F                       		move.w	(sp)+,d2
00013104 4EF9 0000 9738             		jmp	(MvSonicOnPtfm2).l
0001310A                            ; ===========================================================================
0001310A                            
0001310A                            Circ_Types:
0001310A 7000                       		moveq	#0,d0
0001310C 1028 0028                  		move.b	obSubtype(a0),d0
00013110 0240 000C                  		andi.w	#$C,d0
00013114 E248                       		lsr.w	#1,d0
00013116 323B 0000                  		move.w	@index(pc,d0.w),d1
0001311A 4EFB 1000                  		jmp	@index(pc,d1.w)
0001311E                            ; ===========================================================================
0001311E 0000                       @index:		dc.w @type00-@index
00013120 0000                       		dc.w @type04-@index
00013122                            ; ===========================================================================
00013122                            
00013122                            @type00:
00013122 1238 FE80                  		move.b	(v_oscillate+$22).w,d1 ; get rotating value
00013126 0401 0050                  		subi.b	#$50,d1		; set radius of circle
0001312A 4881                       		ext.w	d1
0001312C 1438 FE84                  		move.b	(v_oscillate+$26).w,d2
00013130 0402 0050                  		subi.b	#$50,d2
00013134 4882                       		ext.w	d2
00013136 0828 0000 0028             		btst	#0,obSubtype(a0)
0001313C 6700                       		beq.s	@noshift00a
0001313E 4441                       		neg.w	d1
00013140 4442                       		neg.w	d2
00013142                            
00013142                            	@noshift00a:
00013142 0828 0001 0028             		btst	#1,obSubtype(a0)
00013148 6700                       		beq.s	@noshift00b
0001314A 4441                       		neg.w	d1
0001314C C342                       		exg	d1,d2
0001314E                            
0001314E                            	@noshift00b:
0001314E D268 0032                  		add.w	circ_origX(a0),d1
00013152 3141 0008                  		move.w	d1,obX(a0)
00013156 D468 0030                  		add.w	circ_origY(a0),d2
0001315A 3142 000C                  		move.w	d2,obY(a0)
0001315E 4E75                       		rts	
00013160                            ; ===========================================================================
00013160                            
00013160                            @type04:
00013160 1238 FE80                  		move.b	(v_oscillate+$22).w,d1
00013164 0401 0050                  		subi.b	#$50,d1
00013168 4881                       		ext.w	d1
0001316A 1438 FE84                  		move.b	(v_oscillate+$26).w,d2
0001316E 0402 0050                  		subi.b	#$50,d2
00013172 4882                       		ext.w	d2
00013174 0828 0000 0028             		btst	#0,obSubtype(a0)
0001317A 6700                       		beq.s	@noshift04a
0001317C 4441                       		neg.w	d1
0001317E 4442                       		neg.w	d2
00013180                            
00013180                            	@noshift04a:
00013180 0828 0001 0028             		btst	#1,obSubtype(a0)
00013186 6700                       		beq.s	@noshift04b
00013188 4441                       		neg.w	d1
0001318A C342                       		exg	d1,d2
0001318C                            
0001318C                            	@noshift04b:
0001318C 4441                       		neg.w	d1
0001318E D268 0032                  		add.w	circ_origX(a0),d1
00013192 3141 0008                  		move.w	d1,obX(a0)
00013196 D468 0030                  		add.w	circ_origY(a0),d2
0001319A 3142 000C                  		move.w	d2,obY(a0)
0001319E 4E75                       		rts	
0001319E 4E75                       		rts	
000131A0                            Map_Circ:	include	"_maps\SLZ Circling Platform.asm"
000131A0                            ; ---------------------------------------------------------------------------
000131A0                            ; Sprite mappings - platforms that move	in circles (SLZ)
000131A0                            ; ---------------------------------------------------------------------------
000131A0                            Map_Circ_internal:
000131A0 0000                       		dc.w @platform-Map_Circ_internal
000131A2 02                         @platform:	dc.b 2
000131A3 F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
000131A8 F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
000131AE 00                         		even
000131AE 00                         		even
000131AE                            		include	"_incObj\5B Staircase.asm"
000131AE                            ; ---------------------------------------------------------------------------
000131AE                            ; Object 5B - blocks that form a staircase (SLZ)
000131AE                            ; ---------------------------------------------------------------------------
000131AE                            
000131AE                            Staircase:
000131AE 7000                       		moveq	#0,d0
000131B0 1028 0024                  		move.b	obRoutine(a0),d0
000131B4 323B 0000                  		move.w	Stair_Index(pc,d0.w),d1
000131B8 4EBB 1000                  		jsr	Stair_Index(pc,d1.w)
000131DA 6000 C6B0                  		bra.w	DisplaySprite
000131DE                            ; ===========================================================================
000131DE 0000                       Stair_Index:	dc.w Stair_Main-Stair_Index
000131E0 0000                       		dc.w Stair_Move-Stair_Index
000131E2 0000                       		dc.w Stair_Solid-Stair_Index
000131E4                            
000131E4 =00000030                  stair_origX:	equ $30		; original x-axis position
000131E4 =00000032                  stair_origY:	equ $32		; original y-axis position
000131E4                            
000131E4 =0000003C                  stair_parent:	equ $3C		; address of parent object (4 bytes)
000131E4                            ; ===========================================================================
000131E4                            
000131E4                            Stair_Main:	; Routine 0
000131E4 5428 0024                  		addq.b	#2,obRoutine(a0)
000131E8 7638                       		moveq	#$38,d3
000131EA 7801                       		moveq	#1,d4
000131EC 0828 0000 0022             		btst	#0,obStatus(a0)	; is object flipped?
000131F2 6700                       		beq.s	@notflipped	; if not, branch
000131F4 763B                       		moveq	#$3B,d3
000131F6 78FF                       		moveq	#-1,d4
000131F8                            
000131F8                            	@notflipped:
000131F8 3428 0008                  		move.w	obX(a0),d2
000131FC 2248                       		movea.l	a0,a1
000131FE 7203                       		moveq	#3,d1
00013200 6000                       		bra.s	@makeblocks
00013202                            ; ===========================================================================
00013202                            
00013202                            @loop:
00013202 6100 CB2A                  		bsr.w	FindNextFreeObj
00013206 6600 0000                  		bne.w	@fail
0001320A 137C 0004 0024             		move.b	#4,obRoutine(a1)
00013210                            
00013210                            @makeblocks:
00013210 12BC 005B                  		move.b	#id_Staircase,0(a1) ; load another block object
00013214 237C 0000 0000 0004        		move.l	#Map_Stair,obMap(a1)
0001321C 337C 4000 0002             		move.w	#$4000,obGfx(a1)
00013222 137C 0004 0001             		move.b	#4,obRender(a1)
00013228 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001322E 137C 0010 0014             		move.b	#$10,obActWid(a1)
00013234 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0001323A 3342 0008                  		move.w	d2,obX(a1)
0001323E 3368 000C 000C             		move.w	obY(a0),obY(a1)
00013244 3368 0008 0030             		move.w	obX(a0),stair_origX(a1)
0001324A 3369 000C 0032             		move.w	obY(a1),stair_origY(a1)
00013250 0642 0020                  		addi.w	#$20,d2
00013254 1343 0037                  		move.b	d3,$37(a1)
00013258 2348 003C                  		move.l	a0,stair_parent(a1)
0001325C D604                       		add.b	d4,d3
0001325E 51C9 FFA2                  		dbf	d1,@loop	; repeat sequence 3 times
00013262                            
00013262                            	@fail:
00013262                            
00013262                            Stair_Move:	; Routine 2
00013262 7000                       		moveq	#0,d0
00013264 1028 0028                  		move.b	obSubtype(a0),d0
00013268 0240 0007                  		andi.w	#7,d0
0001326C D040                       		add.w	d0,d0
0001326E 323B 0000                  		move.w	Stair_TypeIndex(pc,d0.w),d1
00013272 4EBB 1000                  		jsr	Stair_TypeIndex(pc,d1.w)
00013276                            
00013276                            Stair_Solid:	; Routine 4
00013276 2468 003C                  		movea.l	stair_parent(a0),a2
0001327A 7000                       		moveq	#0,d0
0001327C 1028 0037                  		move.b	$37(a0),d0
00013280 1032 0000                  		move.b	(a2,d0.w),d0
00013284 D068 0032                  		add.w	stair_origY(a0),d0
00013288 3140 000C                  		move.w	d0,obY(a0)
0001328C 7200                       		moveq	#0,d1
0001328E 1228 0014                  		move.b	obActWid(a0),d1
00013292 0641 000B                  		addi.w	#$B,d1
00013296 343C 0010                  		move.w	#$10,d2
0001329A 363C 0011                  		move.w	#$11,d3
0001329E 3828 0008                  		move.w	obX(a0),d4
000132A2 6100 E9F6                  		bsr.w	SolidObject
000132A6 4A04                       		tst.b	d4
000132A8 6A00                       		bpl.s	loc_10F92
000132AA 1544 0036                  		move.b	d4,$36(a2)
000132AE                            
000132AE                            loc_10F92:
000132AE 0828 0003 0022             		btst	#3,obStatus(a0)
000132B4 6700                       		beq.s	locret_10FA0
000132B6 157C 0001 0036             		move.b	#1,$36(a2)
000132BC                            
000132BC                            locret_10FA0:
000132BC 4E75                       		rts	
000132BE                            ; ===========================================================================
000132BE 0000                       Stair_TypeIndex:dc.w Stair_Type00-Stair_TypeIndex
000132C0 0000                       		dc.w Stair_Type01-Stair_TypeIndex
000132C2 0000                       		dc.w Stair_Type02-Stair_TypeIndex
000132C4 0000                       		dc.w Stair_Type01-Stair_TypeIndex
000132C6                            ; ===========================================================================
000132C6                            
000132C6                            Stair_Type00:
000132C6 4A68 0034                  		tst.w	$34(a0)
000132CA 6600                       		bne.s	loc_10FC0
000132CC 0C28 0001 0036             		cmpi.b	#1,$36(a0)
000132D2 6600                       		bne.s	locret_10FBE
000132D4 317C 001E 0034             		move.w	#$1E,$34(a0)
000132DA                            
000132DA                            locret_10FBE:
000132DA 4E75                       		rts	
000132DC                            ; ===========================================================================
000132DC                            
000132DC                            loc_10FC0:
000132DC 5368 0034                  		subq.w	#1,$34(a0)
000132E0 66F8                       		bne.s	locret_10FBE
000132E2 5228 0028                  		addq.b	#1,obSubtype(a0) ; add 1 to type
000132E6 4E75                       		rts	
000132E8                            ; ===========================================================================
000132E8                            
000132E8                            Stair_Type02:
000132E8 4A68 0034                  		tst.w	$34(a0)
000132EC 6600                       		bne.s	loc_10FE0
000132EE 4A28 0036                  		tst.b	$36(a0)
000132F2 6A00                       		bpl.s	locret_10FDE
000132F4 317C 003C 0034             		move.w	#$3C,$34(a0)
000132FA                            
000132FA                            locret_10FDE:
000132FA 4E75                       		rts	
000132FC                            ; ===========================================================================
000132FC                            
000132FC                            loc_10FE0:
000132FC 5368 0034                  		subq.w	#1,$34(a0)
00013300 6600                       		bne.s	loc_10FEC
00013302 5228 0028                  		addq.b	#1,obSubtype(a0) ; add 1 to type
00013306 4E75                       		rts	
00013308                            ; ===========================================================================
00013308                            
00013308                            loc_10FEC:
00013308 43E8 0038                  		lea	$38(a0),a1
0001330C 3028 0034                  		move.w	$34(a0),d0
00013310 E408                       		lsr.b	#2,d0
00013312 0200 0001                  		andi.b	#1,d0
00013316 12C0                       		move.b	d0,(a1)+
00013318 0A00 0001                  		eori.b	#1,d0
0001331C 12C0                       		move.b	d0,(a1)+
0001331E 0A00 0001                  		eori.b	#1,d0
00013322 12C0                       		move.b	d0,(a1)+
00013324 0A00 0001                  		eori.b	#1,d0
00013328 12C0                       		move.b	d0,(a1)+
0001332A 4E75                       		rts	
0001332C                            ; ===========================================================================
0001332C                            
0001332C                            Stair_Type01:
0001332C 43E8 0038                  		lea	$38(a0),a1
00013330 0C11 0080                  		cmpi.b	#$80,(a1)
00013334 6700                       		beq.s	locret_11038
00013336 5211                       		addq.b	#1,(a1)
00013338 7200                       		moveq	#0,d1
0001333A 1219                       		move.b	(a1)+,d1
0001333C 4841                       		swap	d1
0001333E E289                       		lsr.l	#1,d1
00013340 2401                       		move.l	d1,d2
00013342 E289                       		lsr.l	#1,d1
00013344 2601                       		move.l	d1,d3
00013346 D682                       		add.l	d2,d3
00013348 4841                       		swap	d1
0001334A 4842                       		swap	d2
0001334C 4843                       		swap	d3
0001334E 12C3                       		move.b	d3,(a1)+
00013350 12C2                       		move.b	d2,(a1)+
00013352 12C1                       		move.b	d1,(a1)+
00013354                            
00013354                            locret_11038:
00013354 4E75                       		rts	
00013356 4E75                       		rts	
00013356 4E75                       		rts	
00013358                            Map_Stair:	include	"_maps\Staircase.asm"
00013358                            ; ---------------------------------------------------------------------------
00013358                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00013358                            ; ---------------------------------------------------------------------------
00013358                            Map_Stair_internal:
00013358 0000                       		dc.w @block-Map_Stair_internal
0001335A 01                         @block:		dc.b 1
0001335B F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00013360                            		even
00013360                            		even
00013360                            		include	"_incObj\5C Pylon.asm"
00013360                            ; ---------------------------------------------------------------------------
00013360                            ; Object 5C - metal pylons in foreground (SLZ)
00013360                            ; ---------------------------------------------------------------------------
00013360                            
00013360                            Pylon:
00013360 7000                       		moveq	#0,d0
00013362 1028 0024                  		move.b	obRoutine(a0),d0
00013366 323B 0000                  		move.w	Pyl_Index(pc,d0.w),d1
0001336A 4EFB 1000                  		jmp	Pyl_Index(pc,d1.w)
0001336E                            ; ===========================================================================
0001336E 0000                       Pyl_Index:	dc.w Pyl_Main-Pyl_Index
00013370 0000                       		dc.w Pyl_Display-Pyl_Index
00013372                            ; ===========================================================================
00013372                            
00013372                            Pyl_Main:	; Routine 0
00013372 5428 0024                  		addq.b	#2,obRoutine(a0)
00013376 217C 0000 0000 0004        		move.l	#Map_Pylon,obMap(a0)
0001337E 317C 83CC 0002             		move.w	#$83CC,obGfx(a0)
00013384 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001338A                            
0001338A                            Pyl_Display:	; Routine 2
0001338A 2238 F700                  		move.l	(v_screenposx).w,d1
0001338E D281                       		add.l	d1,d1
00013390 4841                       		swap	d1
00013392 4441                       		neg.w	d1
00013394 3141 0008                  		move.w	d1,obX(a0)
00013398 2238 F704                  		move.l	(v_screenposy).w,d1
0001339C D281                       		add.l	d1,d1
0001339E 4841                       		swap	d1
000133A0 0241 003F                  		andi.w	#$3F,d1
000133A4 4441                       		neg.w	d1
000133A6 0641 0100                  		addi.w	#$100,d1
000133AA 3141 000A                  		move.w	d1,obScreenY(a0)
000133AE 6000 C4DC                  		bra.w	DisplaySprite
000133AE 6000 C4DC                  		bra.w	DisplaySprite
000133B2                            Map_Pylon:	include	"_maps\Pylon.asm"
000133B2                            ; ---------------------------------------------------------------------------
000133B2                            ; Sprite mappings - metal pylons in foreground (SLZ)
000133B2                            ; ---------------------------------------------------------------------------
000133B2                            Map_Pylon_internal:
000133B2 0000                       		dc.w @pylon-Map_Pylon_internal
000133B4 09                         @pylon:		dc.b 9
000133B5 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
000133BA A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
000133BF C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
000133C4 E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
000133C9 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
000133CE 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
000133D3 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
000133D8 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
000133DD 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
000133E2                            		even
000133E2                            		even
000133E2                            
000133E2                            		include	"_incObj\1B Water Surface.asm"
000133E2                            ; ---------------------------------------------------------------------------
000133E2                            ; Object 1B - water surface (LZ)
000133E2                            ; ---------------------------------------------------------------------------
000133E2                            
000133E2                            WaterSurface:
000133E2 7000                       		moveq	#0,d0
000133E4 1028 0024                  		move.b	obRoutine(a0),d0
000133E8 323B 0000                  		move.w	Surf_Index(pc,d0.w),d1
000133EC 4EFB 1000                  		jmp	Surf_Index(pc,d1.w)
000133F0                            ; ===========================================================================
000133F0 0000                       Surf_Index:	dc.w Surf_Main-Surf_Index
000133F2 0000                       		dc.w Surf_Action-Surf_Index
000133F4                            
000133F4 =00000030                  surf_origX:	equ $30		; original x-axis position
000133F4 =00000032                  surf_freeze:	equ $32		; flag to freeze animation
000133F4                            ; ===========================================================================
000133F4                            
000133F4                            Surf_Main:	; Routine 0
000133F4 5428 0024                  		addq.b	#2,obRoutine(a0)
000133F8 217C 0000 0000 0004        		move.l	#Map_Surf,obMap(a0)
00013400 317C C300 0002             		move.w	#$C300,obGfx(a0)
00013406 117C 0004 0001             		move.b	#4,obRender(a0)
0001340C 117C 0080 0014             		move.b	#$80,obActWid(a0)
00013412 3168 0008 0030             		move.w	obX(a0),surf_origX(a0)
00013418                            
00013418                            Surf_Action:	; Routine 2
00013418 3238 F700                  		move.w	(v_screenposx).w,d1
0001341C 0241 FFE0                  		andi.w	#$FFE0,d1
00013420 D268 0030                  		add.w	surf_origX(a0),d1
00013424 0838 0000 FE05             		btst	#0,(v_framebyte).w
0001342A 6700                       		beq.s	@even		; branch on even frames
0001342C 0641 0020                  		addi.w	#$20,d1
00013430                            
00013430                            	@even:
00013430 3141 0008                  		move.w	d1,obX(a0)	; match	obj x-position to screen position
00013434 3238 F646                  		move.w	(v_waterpos1).w,d1
00013438 3141 000C                  		move.w	d1,obY(a0)	; match	obj y-position to water	height
0001343C 4A28 0032                  		tst.b	surf_freeze(a0)
00013440 6600                       		bne.s	@stopped
00013442 0838 0007 F605             		btst	#bitStart,(v_jpadpress1).w ; is Start button pressed?
00013448 6700                       		beq.s	@animate	; if not, branch
0001344A 5628 001A                  		addq.b	#3,obFrame(a0)	; use different	frames
0001344E 117C 0001 0032             		move.b	#1,surf_freeze(a0) ; stop animation
00013454 6000                       		bra.s	@display
00013456                            ; ===========================================================================
00013456                            
00013456                            @stopped:
00013456 4A78 F63A                  		tst.w	(f_pause).w	; is the game paused?
0001345A 6600                       		bne.s	@display	; if yes, branch
0001345C 117C 0000 0032             		move.b	#0,surf_freeze(a0) ; resume animation
00013462 5728 001A                  		subq.b	#3,obFrame(a0)	; use normal frames
00013466                            
00013466                            @animate:
00013466 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0001346A 6A00                       		bpl.s	@display
0001346C 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
00013472 5228 001A                  		addq.b	#1,obFrame(a0)
00013476 0C28 0003 001A             		cmpi.b	#3,obFrame(a0)
0001347C 6500                       		bcs.s	@display
0001347E 117C 0000 001A             		move.b	#0,obFrame(a0)
00013484                            
00013484                            @display:
00013484 6000 C406                  		bra.w	DisplaySprite
00013484 6000 C406                  		bra.w	DisplaySprite
00013488                            Map_Surf:	include	"_maps\Water Surface.asm"
00013488                            ; --------------------------------------------------------------------------------
00013488                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00013488                            ; --------------------------------------------------------------------------------
00013488                            
00013488                            SME_LGSi8:	
00013488 0000 0000                  		dc.w SME_LGSi8_C-SME_LGSi8, SME_LGSi8_1C-SME_LGSi8	
0001348C 0000 0000                  		dc.w SME_LGSi8_2C-SME_LGSi8, SME_LGSi8_3C-SME_LGSi8	
00013490 0000 0000                  		dc.w SME_LGSi8_5B-SME_LGSi8, SME_LGSi8_7A-SME_LGSi8	
00013494 03                         SME_LGSi8_C:	dc.b 3	
00013495 F80D 0000 A0               		dc.b $F8, $D, 0, 0, $A0	
0001349A F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	
0001349F F80D 0000 20               		dc.b $F8, $D, 0, 0, $20	
000134A4 03                         SME_LGSi8_1C:	dc.b 3	
000134A5 F80D 0008 A0               		dc.b $F8, $D, 0, 8, $A0	
000134AA F80D 0008 E0               		dc.b $F8, $D, 0, 8, $E0	
000134AF F80D 0008 20               		dc.b $F8, $D, 0, 8, $20	
000134B4 03                         SME_LGSi8_2C:	dc.b 3	
000134B5 F80D 0800 A0               		dc.b $F8, $D, 8, 0, $A0	
000134BA F80D 0800 E0               		dc.b $F8, $D, 8, 0, $E0	
000134BF F80D 0800 20               		dc.b $F8, $D, 8, 0, $20	
000134C4 06                         SME_LGSi8_3C:	dc.b 6	
000134C5 F80D 0000 A0               		dc.b $F8, $D, 0, 0, $A0	
000134CA F80D 0000 C0               		dc.b $F8, $D, 0, 0, $C0	
000134CF F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	
000134D4 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0	
000134D9 F80D 0000 20               		dc.b $F8, $D, 0, 0, $20	
000134DE F80D 0000 40               		dc.b $F8, $D, 0, 0, $40	
000134E3 06                         SME_LGSi8_5B:	dc.b 6	
000134E4 F80D 0008 A0               		dc.b $F8, $D, 0, 8, $A0	
000134E9 F80D 0008 C0               		dc.b $F8, $D, 0, 8, $C0	
000134EE F80D 0008 E0               		dc.b $F8, $D, 0, 8, $E0	
000134F3 F80D 0008 00               		dc.b $F8, $D, 0, 8, 0	
000134F8 F80D 0008 20               		dc.b $F8, $D, 0, 8, $20	
000134FD F80D 0008 40               		dc.b $F8, $D, 0, 8, $40	
00013502 06                         SME_LGSi8_7A:	dc.b 6	
00013503 F80D 0800 A0               		dc.b $F8, $D, 8, 0, $A0	
00013508 F80D 0800 C0               		dc.b $F8, $D, 8, 0, $C0	
0001350D F80D 0800 E0               		dc.b $F8, $D, 8, 0, $E0	
00013512 F80D 0800 00               		dc.b $F8, $D, 8, 0, 0	
00013517 F80D 0800 20               		dc.b $F8, $D, 8, 0, $20	
0001351C F80D 0800 40               		dc.b $F8, $D, 8, 0, $40	
00013522 00                         		even
00013522 00                         		even
00013522                            		include	"_incObj\0B Pole that Breaks.asm"
00013522                            ; ---------------------------------------------------------------------------
00013522                            ; Object 0B - pole that	breaks (LZ)
00013522                            ; ---------------------------------------------------------------------------
00013522                            
00013522                            Pole:
00013522 7000                       		moveq	#0,d0
00013524 1028 0024                  		move.b	obRoutine(a0),d0
00013528 323B 0000                  		move.w	Pole_Index(pc,d0.w),d1
0001352C 4EFB 1000                  		jmp	Pole_Index(pc,d1.w)
00013530                            ; ===========================================================================
00013530 0000                       Pole_Index:	dc.w Pole_Main-Pole_Index
00013532 0000                       		dc.w Pole_Action-Pole_Index
00013534 0000                       		dc.w Pole_Display-Pole_Index
00013536                            
00013536 =00000030                  pole_time:	equ $30		; time between grabbing the pole & breaking
00013536 =00000032                  pole_grabbed:	equ $32		; flag set when Sonic grabs the pole
00013536                            ; ===========================================================================
00013536                            
00013536                            Pole_Main:	; Routine 0
00013536 5428 0024                  		addq.b	#2,obRoutine(a0)
0001353A 217C 0000 0000 0004        		move.l	#Map_Pole,obMap(a0)
00013542 317C 43DE 0002             		move.w	#$43DE,obGfx(a0)
00013548 117C 0004 0001             		move.b	#4,obRender(a0)
0001354E 117C 0008 0014             		move.b	#8,obActWid(a0)
00013554 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001355A 117C 00E1 0020             		move.b	#$E1,obColType(a0)
00013560 7000                       		moveq	#0,d0
00013562 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00013566 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
0001356A 3140 0030                  		move.w	d0,pole_time(a0) ; set breakage time
0001356E                            
0001356E                            Pole_Action:	; Routine 2
0001356E 4A28 0032                  		tst.b	pole_grabbed(a0) ; has pole already been grabbed?
00013572 6700                       		beq.s	@grab		; if not, branch
00013574 4A68 0030                  		tst.w	pole_time(a0)
00013578 6700                       		beq.s	@moveup
0001357A 5368 0030                  		subq.w	#1,pole_time(a0) ; decrement time until break
0001357E 6600                       		bne.s	@moveup
00013580 117C 0001 001A             		move.b	#1,obFrame(a0)	; break	the pole
00013586 6000                       		bra.s	@release
00013588                            ; ===========================================================================
00013588                            
00013588                            @moveup:
00013588 43F8 D000                  		lea	(v_player).w,a1
0001358C 3028 000C                  		move.w	obY(a0),d0
00013590 0440 0018                  		subi.w	#$18,d0
00013594 0838 0000 F604             		btst	#bitUp,(v_jpadhold1).w ; is "up" pressed?
0001359A 6700                       		beq.s	@movedown	; if not, branch
0001359C 5369 000C                  		subq.w	#1,obY(a1)	; move Sonic up
000135A0 B069 000C                  		cmp.w	obY(a1),d0
000135A4 6500                       		bcs.s	@movedown
000135A6 3340 000C                  		move.w	d0,obY(a1)
000135AA                            
000135AA                            @movedown:
000135AA 0640 0024                  		addi.w	#$24,d0
000135AE 0838 0001 F604             		btst	#bitDn,(v_jpadhold1).w ; is "down" pressed?
000135B4 6700                       		beq.s	@letgo		; if not, branch
000135B6 5269 000C                  		addq.w	#1,obY(a1)	; move Sonic down
000135BA B069 000C                  		cmp.w	obY(a1),d0
000135BE 6400                       		bcc.s	@letgo
000135C0 3340 000C                  		move.w	d0,obY(a1)
000135C4                            
000135C4                            @letgo:
000135C4 1038 F603                  		move.b	(v_jpadpress2).w,d0
000135C8 0240 0070                  		andi.w	#btnABC,d0	; is A/B/C pressed?
000135CC 6700                       		beq.s	Pole_Display	; if not, branch
000135CE                            
000135CE                            @release:
000135CE 4228 0020                  		clr.b	obColType(a0)
000135D2 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Pole_Display next
000135D6 4238 F7C8                  		clr.b	(f_lockmulti).w
000135DA 4238 F7C9                  		clr.b	(f_wtunnelallow).w
000135DE 4228 0032                  		clr.b	pole_grabbed(a0)
000135E2 6000                       		bra.s	Pole_Display
000135E4                            ; ===========================================================================
000135E4                            
000135E4                            @grab:
000135E4 4A28 0021                  		tst.b	obColProp(a0)	; has Sonic touched the	pole?
000135E8 6700                       		beq.s	Pole_Display	; if not, branch
000135EA 43F8 D000                  		lea	(v_player).w,a1
000135EE 3028 0008                  		move.w	obX(a0),d0
000135F2 0640 0014                  		addi.w	#$14,d0
000135F6 B069 0008                  		cmp.w	obX(a1),d0
000135FA 6400                       		bcc.s	Pole_Display
000135FC 4228 0021                  		clr.b	obColProp(a0)
00013600 0C29 0004 0024             		cmpi.b	#4,obRoutine(a1)
00013606 6400                       		bcc.s	Pole_Display
00013608 4269 0010                  		clr.w	obVelX(a1)	; stop Sonic moving
0001360C 4269 0012                  		clr.w	obVelY(a1)	; stop Sonic moving
00013610 3028 0008                  		move.w	obX(a0),d0
00013614 0640 0014                  		addi.w	#$14,d0
00013618 3340 0008                  		move.w	d0,obX(a1)
0001361C 08A9 0000 0022             		bclr	#0,obStatus(a1)
00013622 137C 0000 001C             		move.b	#id_Hang,obAnim(a1) ; set Sonic's animation to "hanging" ($11)
00013628 11FC 0001 F7C8             		move.b	#1,(f_lockmulti).w ; lock controls
0001362E 11FC 0001 F7C9             		move.b	#1,(f_wtunnelallow).w ; disable wind tunnel
00013634 117C 0001 0032             		move.b	#1,pole_grabbed(a0) ; begin countdown to breakage
0001363A                            
0001363A                            Pole_Display:	; Routine 4
0001363A 6000 E1C6                  		bra.w	RememberState
0001363A 6000 E1C6                  		bra.w	RememberState
0001363E                            Map_Pole:	include	"_maps\Pole that Breaks.asm"
0001363E                            ; ---------------------------------------------------------------------------
0001363E                            ; Sprite mappings - pole that breaks (LZ)
0001363E                            ; ---------------------------------------------------------------------------
0001363E                            Map_Pole_internal:
0001363E 0000                       		dc.w @normal-Map_Pole_internal
00013640 0000                       		dc.w @broken-Map_Pole_internal
00013642 02                         @normal:	dc.b 2			; normal pole
00013643 E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
00013648 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
0001364D 04                         @broken:	dc.b 4			; broken pole
0001364E E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
00013653 F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
00013658 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
0001365D 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
00013662                            		even
00013662                            		even
00013662                            		include	"_incObj\0C Flapping Door.asm"
00013662                            ; ---------------------------------------------------------------------------
00013662                            ; Object 0C - flapping door (LZ)
00013662                            ; ---------------------------------------------------------------------------
00013662                            
00013662                            FlapDoor:
00013662 7000                       		moveq	#0,d0
00013664 1028 0024                  		move.b	obRoutine(a0),d0
00013668 323B 0000                  		move.w	Flap_Index(pc,d0.w),d1
0001366C 4EFB 1000                  		jmp	Flap_Index(pc,d1.w)
00013670                            ; ===========================================================================
00013670 0000                       Flap_Index:	dc.w Flap_Main-Flap_Index
00013672 0000                       		dc.w Flap_OpenClose-Flap_Index
00013674                            
00013674 =00000032                  flap_time:	equ $32		; time between opening/closing
00013674 =00000030                  flap_wait:	equ $30		; time until change
00013674                            ; ===========================================================================
00013674                            
00013674                            Flap_Main:	; Routine 0
00013674 5428 0024                  		addq.b	#2,obRoutine(a0)
00013678 217C 0000 0000 0004        		move.l	#Map_Flap,obMap(a0)
00013680 317C 4328 0002             		move.w	#$4328,obGfx(a0)
00013686 0028 0004 0001             		ori.b	#4,obRender(a0)
0001368C 117C 0028 0014             		move.b	#$28,obActWid(a0)
00013692 7000                       		moveq	#0,d0
00013694 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00013698 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
0001369C 3140 0032                  		move.w	d0,flap_time(a0) ; set flap delay time
000136A0                            
000136A0                            Flap_OpenClose:	; Routine 2
000136A0 5368 0030                  		subq.w	#1,flap_wait(a0) ; decrement time delay
000136A4 6A00                       		bpl.s	@wait		; if time remains, branch
000136A6 3168 0032 0030             		move.w	flap_time(a0),flap_wait(a0) ; reset time delay
000136AC 0868 0000 001C             		bchg	#0,obAnim(a0)	; open/close door
000136B2 4A28 0001                  		tst.b	obRender(a0)
000136B6 6A00                       		bpl.s	@nosound
000136C2                            
000136C2                            	@wait:
000136C2                            	@nosound:
000136C2 43F9 0000 0000             		lea	(Ani_Flap).l,a1
000136C8 6100 926E                  		bsr.w	AnimateSprite
000136CC 4238 F7C9                  		clr.b	(f_wtunnelallow).w ; enable wind tunnel
000136D0 4A28 001A                  		tst.b	obFrame(a0)	; is the door open?
000136D4 6600                       		bne.s	@display	; if yes, branch
000136D6 3038 D008                  		move.w	(v_player+obX).w,d0
000136DA B068 0008                  		cmp.w	obX(a0),d0	; has Sonic passed through the door?
000136DE 6400                       		bcc.s	@display	; if yes, branch
000136E0 11FC 0001 F7C9             		move.b	#1,(f_wtunnelallow).w ; disable wind tunnel
000136E6 323C 0013                  		move.w	#$13,d1
000136EA 343C 0020                  		move.w	#$20,d2
000136EE 3602                       		move.w	d2,d3
000136F0 5243                       		addq.w	#1,d3
000136F2 3828 0008                  		move.w	obX(a0),d4
000136F6 6100 E5A2                  		bsr.w	SolidObject	; make the door	solid
000136FA                            
000136FA                            	@display:
000136FA 6000 E106                  		bra.w	RememberState
000136FA 6000 E106                  		bra.w	RememberState
000136FE                            		include	"_anim\Flapping Door.asm"
000136FE                            ; ---------------------------------------------------------------------------
000136FE                            ; Animation script - flapping door (LZ)
000136FE                            ; ---------------------------------------------------------------------------
000136FE 0000                       Ani_Flap:	dc.w @opening-Ani_Flap
00013700 0000                       		dc.w @closing-Ani_Flap
00013702 0300 0102 FE01             @opening:	dc.b 3,	0, 1, 2, afBack, 1
00013708 0302 0100 FE01             @closing:	dc.b 3,	2, 1, 0, afBack, 1
0001370E                            		even
0001370E                            		even
0001370E                            Map_Flap:	include	"_maps\Flapping Door.asm"
0001370E                            ; ---------------------------------------------------------------------------
0001370E                            ; Sprite mappings - flapping door (LZ)
0001370E                            ; ---------------------------------------------------------------------------
0001370E                            Map_Flap_internal:
0001370E 0000                       		dc.w @closed-Map_Flap_internal
00013710 0000                       		dc.w @halfway-Map_Flap_internal
00013712 0000                       		dc.w @open-Map_Flap_internal
00013714 02                         @closed:	dc.b 2
00013715 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
0001371A 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
0001371F 02                         @halfway:	dc.b 2
00013720 DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00013725 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
0001372A 02                         @open:		dc.b 2
0001372B D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
00013730 180D 1018 00               		dc.b $18, $D, $10, $18,	0
00013736 00                         		even
00013736 00                         		even
00013736                            
00013736                            		include	"_incObj\71 Invisible Barriers.asm"
00013736                            ; ---------------------------------------------------------------------------
00013736                            ; Object 71 - invisible	solid barriers
00013736                            ; ---------------------------------------------------------------------------
00013736                            
00013736                            Invisibarrier:
00013736 7000                       		moveq	#0,d0
00013738 1028 0024                  		move.b	obRoutine(a0),d0
0001373C 323B 0000                  		move.w	Invis_Index(pc,d0.w),d1
00013740 4EFB 1000                  		jmp	Invis_Index(pc,d1.w)
00013744                            ; ===========================================================================
00013744 0000                       Invis_Index:	dc.w Invis_Main-Invis_Index
00013746 0000                       		dc.w Invis_Solid-Invis_Index
00013748                            
00013748 =00000016                  invis_height:	equ $16		; height in pixels
00013748                            ; ===========================================================================
00013748                            
00013748                            Invis_Main:	; Routine 0
00013748 5428 0024                  		addq.b	#2,obRoutine(a0)
0001374C 217C 0000 0000 0004        		move.l	#Map_Invis,obMap(a0)
00013754 317C 8680 0002             		move.w	#$8680,obGfx(a0)
0001375A 0028 0004 0001             		ori.b	#4,obRender(a0)
00013760 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00013764 1200                       		move.b	d0,d1
00013766 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
0001376A 0640 0010                  		addi.w	#$10,d0
0001376E E248                       		lsr.w	#1,d0
00013770 1140 0014                  		move.b	d0,obActWid(a0)	; set object width
00013774 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
00013778 5241                       		addq.w	#1,d1
0001377A E749                       		lsl.w	#3,d1
0001377C 1141 0016                  		move.b	d1,invis_height(a0) ; set object height
00013780                            
00013780                            Invis_Solid:	; Routine 2
00013780 6100 C38A                  		bsr.w	ChkObjectVisible
00013784 6600                       		bne.s	@chkdel
00013786 7200                       		moveq	#0,d1
00013788 1228 0014                  		move.b	obActWid(a0),d1
0001378C 0641 000B                  		addi.w	#$B,d1
00013790 7400                       		moveq	#0,d2
00013792 1428 0016                  		move.b	invis_height(a0),d2
00013796 3602                       		move.w	d2,d3
00013798 5243                       		addq.w	#1,d3
0001379A 3828 0008                  		move.w	obX(a0),d4
0001379E 6100 E542                  		bsr.w	SolidObject71
000137A2                            
000137A2                            @chkdel:
000137BE 4A78 FE08                  		tst.w	(v_debuguse).w	; are you using	debug mode?
000137C2 6700                       		beq.s	@nodisplay	; if not, branch
000137C4 4EF9 0000 F88C             		jmp	(DisplaySprite).l	; if yes, display the object
000137CA                            
000137CA                            	@nodisplay:
000137CA 4E75                       		rts	
000137CC                            
000137CC                            	@delete:
000137CC 4EF9 0000 F8CC             		jmp	(DeleteObject).l
000137CC 4EF9 0000 F8CC             		jmp	(DeleteObject).l
000137D2                            Map_Invis:	include	"_maps\Invisible Barriers.asm"
000137D2                            ; --------------------------------------------------------------------------------
000137D2                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000137D2                            ; --------------------------------------------------------------------------------
000137D2                            
000137D2                            SME_t60cE:	
000137D2 0000 0000                  		dc.w SME_t60cE_6-SME_t60cE, SME_t60cE_1B-SME_t60cE	
000137D6 0000                       		dc.w SME_t60cE_30-SME_t60cE	
000137D8 04                         SME_t60cE_6:	dc.b 4	
000137D9 0005 0028 F0               		dc.b 0, 5, 0, $28, $F0	
000137DE 0005 0028 00               		dc.b 0, 5, 0, $28, 0	
000137E3 F005 0028 00               		dc.b $F0, 5, 0, $28, 0	
000137E8 F005 0028 F0               		dc.b $F0, 5, 0, $28, $F0	
000137ED 04                         SME_t60cE_1B:	dc.b 4	
000137EE E005 0028 C0               		dc.b $E0, 5, 0, $28, $C0	
000137F3 E005 0028 30               		dc.b $E0, 5, 0, $28, $30	
000137F8 1005 0028 30               		dc.b $10, 5, 0, $28, $30	
000137FD 1005 0028 C0               		dc.b $10, 5, 0, $28, $C0	
00013802 04                         SME_t60cE_30:	dc.b 4	
00013803 E005 0028 80               		dc.b $E0, 5, 0, $28, $80	
00013808 E005 0028 70               		dc.b $E0, 5, 0, $28, $70	
0001380D 1005 0028 70               		dc.b $10, 5, 0, $28, $70	
00013812 1005 0028 80               		dc.b $10, 5, 0, $28, $80	
00013818 00                         		even
00013818 00                         		even
00013818                            
00013818                            		include	"_incObj\5D Fan.asm"
00013818                            ; ---------------------------------------------------------------------------
00013818                            ; Object 5D - fans (SLZ)
00013818                            ; ---------------------------------------------------------------------------
00013818                            
00013818                            Fan:
00013818 7000                       		moveq	#0,d0
0001381A 1028 0024                  		move.b	obRoutine(a0),d0
0001381E 323B 0000                  		move.w	Fan_Index(pc,d0.w),d1
00013822 4EFB 1000                  		jmp	Fan_Index(pc,d1.w)
00013826                            ; ===========================================================================
00013826 0000                       Fan_Index:	dc.w Fan_Main-Fan_Index
00013828 0000                       		dc.w Fan_Delay-Fan_Index
0001382A                            
0001382A =00000030                  fan_time:	equ $30		; time between switching on/off
0001382A =00000032                  fan_switch:	equ $32		; on/off switch
0001382A                            ; ===========================================================================
0001382A                            
0001382A                            Fan_Main:	; Routine 0
0001382A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001382E 217C 0000 0000 0004        		move.l	#Map_Fan,obMap(a0)
00013836 317C 43A0 0002             		move.w	#$43A0,obGfx(a0)
0001383C 0028 0004 0001             		ori.b	#4,obRender(a0)
00013842 117C 0010 0014             		move.b	#$10,obActWid(a0)
00013848 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001384E                            
0001384E                            Fan_Delay:	; Routine 2
0001384E 0828 0001 0028             		btst	#1,obSubtype(a0) ; is object type 02/03 (always on)?
00013854 6600                       		bne.s	@blow		; if yes, branch
00013856 5368 0030                  		subq.w	#1,fan_time(a0)	; subtract 1 from time delay
0001385A 6A00                       		bpl.s	@blow		; if time remains, branch
0001385C 317C 0078 0030             		move.w	#120,fan_time(a0) ; set delay to 2 seconds
00013862 0868 0000 0032             		bchg	#0,fan_switch(a0) ; switch fan on/off
00013868 6700                       		beq.s	@blow		; if fan is off, branch
0001386A 317C 00B4 0030             		move.w	#180,fan_time(a0) ; set delay to 3 seconds
00013870                            
00013870                            @blow:
00013870 4A28 0032                  		tst.b	fan_switch(a0)	; is fan switched on?
00013874 6600 0000                  		bne.w	@chkdel		; if not, branch
00013878 43F8 D000                  		lea	(v_player).w,a1
0001387C 3029 0008                  		move.w	obX(a1),d0
00013880 9068 0008                  		sub.w	obX(a0),d0
00013884 0828 0000 0022             		btst	#0,obStatus(a0)	; is fan facing right?
0001388A 6600                       		bne.s	@chksonic	; if yes, branch
0001388C 4440                       		neg.w	d0
0001388E                            
0001388E                            @chksonic:
0001388E 0640 0050                  		addi.w	#$50,d0
00013892 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
00013896 6400                       		bcc.s	@animate	; if yes, branch
00013898 3229 000C                  		move.w	obY(a1),d1
0001389C 0641 0060                  		addi.w	#$60,d1
000138A0 9268 000C                  		sub.w	obY(a0),d1
000138A4 6500                       		bcs.s	@animate	; branch if Sonic is too low
000138A6 0C41 0070                  		cmpi.w	#$70,d1
000138AA 6400                       		bcc.s	@animate	; branch if Sonic is too high
000138AC 0440 0050                  		subi.w	#$50,d0		; is Sonic more than $50 pixels from the fan?
000138B0 6400                       		bcc.s	@faraway	; if yes, branch
000138B2 4640                       		not.w	d0
000138B4 D040                       		add.w	d0,d0
000138B6                            
000138B6                            	@faraway:
000138B6 0640 0060                  		addi.w	#$60,d0
000138BA 0828 0000 0022             		btst	#0,obStatus(a0)	; is fan facing right?
000138C0 6600                       		bne.s	@right		; if yes, branch
000138C2 4440                       		neg.w	d0
000138C4                            
000138C4                            	@right:
000138C4 4400                       		neg.b	d0
000138C6 E840                       		asr.w	#4,d0
000138C8 0828 0000 0028             		btst	#0,obSubtype(a0)
000138CE 6700                       		beq.s	@movesonic
000138D0 4440                       		neg.w	d0
000138D2                            
000138D2                            	@movesonic:
000138D2 D169 0008                  		add.w	d0,obX(a1)	; push Sonic away from the fan
000138D6                            
000138D6                            @animate:
000138D6 5328 001E                  		subq.b	#1,obTimeFrame(a0)
000138DA 6A00                       		bpl.s	@chkdel
000138DC 117C 0000 001E             		move.b	#0,obTimeFrame(a0)
000138E2 5228 001B                  		addq.b	#1,obAniFrame(a0)
000138E6 0C28 0003 001B             		cmpi.b	#3,obAniFrame(a0)
000138EC 6500                       		bcs.s	@noreset
000138EE 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset after 4 frames
000138F4                            
000138F4                            	@noreset:
000138F4 7000                       		moveq	#0,d0
000138F6 0828 0000 0028             		btst	#0,obSubtype(a0)
000138FC 6700                       		beq.s	@noflip
000138FE 7002                       		moveq	#2,d0
00013900                            
00013900                            	@noflip:
00013900 D028 001B                  		add.b	obAniFrame(a0),d0
00013904 1140 001A                  		move.b	d0,obFrame(a0)
00013908                            
00013908                            @chkdel:
00013908 6100 BF82                  		bsr.w	DisplaySprite
0001392A 4E75                       		rts	
0001392A 4E75                       		rts	
0001392C                            Map_Fan:	include	"_maps\Fan.asm"
0001392C                            ; ---------------------------------------------------------------------------
0001392C                            ; Sprite mappings - fans (SLZ)
0001392C                            ; ---------------------------------------------------------------------------
0001392C                            Map_Fan_internal:
0001392C 0000                       		dc.w @fan1-Map_Fan_internal
0001392E 0000                       		dc.w @fan2-Map_Fan_internal
00013930 0000                       		dc.w @fan3-Map_Fan_internal
00013932 0000                       		dc.w @fan2-Map_Fan_internal
00013934 0000                       		dc.w @fan1-Map_Fan_internal
00013936 02                         @fan1:		dc.b 2
00013937 F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
0001393C 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
00013941 02                         @fan2:		dc.b 2
00013942 F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00013947 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
0001394C 02                         @fan3:		dc.b 2
0001394D F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00013952 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00013958 00                         		even
00013958 00                         		even
00013958                            		include	"_incObj\5E Seesaw.asm"
00013958                            ; ---------------------------------------------------------------------------
00013958                            ; Object 5E - seesaws (SLZ)
00013958                            ; ---------------------------------------------------------------------------
00013958                            
00013958                            Seesaw:
00013958 7000                       		moveq	#0,d0
0001395A 1028 0024                  		move.b	obRoutine(a0),d0
0001395E 323B 0000                  		move.w	See_Index(pc,d0.w),d1
00013962 4EBB 1000                  		jsr	See_Index(pc,d1.w)
00013966 3028 0000                  		move.w	see_origX(a0),d0
0001396A 0240 FF80                  		andi.w	#$FF80,d0
0001396E 3238 F700                  		move.w	(v_screenposx).w,d1
00013972 0441 0080                  		subi.w	#$80,d1
00013976 0241 FF80                  		andi.w	#$FF80,d1
0001397A 9041                       		sub.w	d1,d0
0001397C 6B00 BF4E                  		bmi.w	DeleteObject
00013980 0C40 0280                  		cmpi.w	#$280,d0
00013984 6200 BF46                  		bhi.w	DeleteObject
00013988 6000 BF02                  		bra.w	DisplaySprite
0001398C                            ; ===========================================================================
0001398C 0000                       See_Index:	dc.w See_Main-See_Index
0001398E 0000                       		dc.w See_Slope-See_Index
00013990 0000                       		dc.w See_Slope2-See_Index
00013992 0000                       		dc.w See_Spikeball-See_Index
00013994 0000                       		dc.w See_MoveSpike-See_Index
00013996 0000                       		dc.w See_SpikeFall-See_Index
00013998                            
00013998 =00000030                  see_origX:	equ $30		; original x-axis position
00013998 =00000034                  see_origY:	equ $34		; original y-axis position
00013998 =00000038                  see_speed:	equ $38		; speed of collision
00013998 =0000003A                  see_frame:	equ $3A		; 
00013998 =0000003C                  see_parent:	equ $3C		; RAM address of parent object
00013998                            ; ===========================================================================
00013998                            
00013998                            See_Main:	; Routine 0
00013998 5428 0024                  		addq.b	#2,obRoutine(a0)
0001399C 217C 0000 0000 0004        		move.l	#Map_Seesaw,obMap(a0)
000139A4 317C 03D4 0002             		move.w	#$3D4,obGfx(a0)
000139AA 0028 0004 0001             		ori.b	#4,obRender(a0)
000139B0 317C 0200 0018             		move.w	#$200,obPriority(a0)
000139B6 117C 0030 0014             		move.b	#$30,obActWid(a0)
000139BC 3168 0008 0030             		move.w	obX(a0),see_origX(a0)
000139C2 4A28 0028                  		tst.b	obSubtype(a0)	; is object type 00 ?
000139C6 6600                       		bne.s	@noball		; if not, branch
000139C8                            
000139C8 6100 C364                  		bsr.w	FindNextFreeObj
000139CC 6600                       		bne.s	@noball
000139CE 12BC 005E                  		move.b	#id_Seesaw,0(a1) ; load spikeball object
000139D2 5C29 0024                  		addq.b	#6,obRoutine(a1) ; use See_Spikeball routine
000139D6 3368 0008 0008             		move.w	obX(a0),obX(a1)
000139DC 3368 000C 000C             		move.w	obY(a0),obY(a1)
000139E2 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
000139E8 2348 003C                  		move.l	a0,see_parent(a1)
000139EC                            
000139EC                            	@noball:
000139EC 0828 0000 0022             		btst	#0,obStatus(a0)	; is seesaw flipped?
000139F2 6700                       		beq.s	@noflip		; if not, branch
000139F4 117C 0002 001A             		move.b	#2,obFrame(a0)	; use different frame
000139FA                            
000139FA                            	@noflip:
000139FA 1168 001A 003A             		move.b	obFrame(a0),see_frame(a0)
00013A00                            
00013A00                            See_Slope:	; Routine 2
00013A00 1228 003A                  		move.b	see_frame(a0),d1
00013A04 6100 0000                  		bsr.w	See_ChgFrame
00013A08 45F9 0000 0000             		lea	(See_DataSlope).l,a2
00013A0E 0828 0000 001A             		btst	#0,obFrame(a0)	; is seesaw flat?
00013A14 6700                       		beq.s	@notflat	; if not, branch
00013A16 45F9 0000 0000             		lea	(See_DataFlat).l,a2
00013A1C                            
00013A1C                            	@notflat:
00013A1C 43F8 D000                  		lea	(v_player).w,a1
00013A20 3169 0012 0038             		move.w	obVelY(a1),see_speed(a0)
00013A26 323C 0030                  		move.w	#$30,d1
00013A2A 4EB9 0000 912E             		jsr	(SlopeObject).l
00013A30 4E75                       		rts	
00013A32                            ; ===========================================================================
00013A32                            
00013A32                            See_Slope2:	; Routine 4
00013A32 6100 0000                  		bsr.w	See_ChkSide
00013A36 45F9 0000 0000             		lea	(See_DataSlope).l,a2
00013A3C 0828 0000 001A             		btst	#0,obFrame(a0)	; is seesaw flat?
00013A42 6700                       		beq.s	@notflat	; if not, branch
00013A44 45F9 0000 0000             		lea	(See_DataFlat).l,a2
00013A4A                            
00013A4A                            	@notflat:
00013A4A 323C 0030                  		move.w	#$30,d1
00013A4E 4EB9 0000 91CE             		jsr	(ExitPlatform).l
00013A54 323C 0030                  		move.w	#$30,d1
00013A58 3428 0008                  		move.w	obX(a0),d2
00013A5C 4EB9 0000 A168             		jsr	(SlopeObject2).l
00013A62 4E75                       		rts	
00013A64                            ; ===========================================================================
00013A64                            
00013A64                            See_ChkSide:
00013A64 7202                       		moveq	#2,d1
00013A66 43F8 D000                  		lea	(v_player).w,a1
00013A6A 3028 0008                  		move.w	obX(a0),d0
00013A6E 9069 0008                  		sub.w	obX(a1),d0	; is Sonic on the left side of the seesaw?
00013A72 6400                       		bcc.s	@leftside	; if yes, branch
00013A74 4440                       		neg.w	d0
00013A76 7200                       		moveq	#0,d1
00013A78                            
00013A78                            	@leftside:
00013A78 0C40 0008                  		cmpi.w	#8,d0
00013A7C 6400                       		bcc.s	See_ChgFrame
00013A7E 7201                       		moveq	#1,d1
00013A80                            
00013A80                            See_ChgFrame:
00013A80 1028 001A                  		move.b	obFrame(a0),d0
00013A84 B001                       		cmp.b	d1,d0		; does frame need to change?
00013A86 6700                       		beq.s	@noflip		; if not, branch
00013A88 6400                       		bcc.s	@loc_11772
00013A8A 5400                       		addq.b	#2,d0
00013A8C                            
00013A8C                            	@loc_11772:
00013A8C 5300                       		subq.b	#1,d0
00013A8E 1140 001A                  		move.b	d0,obFrame(a0)
00013A92 1141 003A                  		move.b	d1,see_frame(a0)
00013A96 08A8 0000 0001             		bclr	#0,obRender(a0)
00013A9C 0828 0001 001A             		btst	#1,obFrame(a0)
00013AA2 6700                       		beq.s	@noflip
00013AA4 08E8 0000 0001             		bset	#0,obRender(a0)
00013AAA                            
00013AAA                            	@noflip:
00013AAA 4E75                       		rts	
00013AAC                            ; ===========================================================================
00013AAC                            
00013AAC                            See_Spikeball:	; Routine 6
00013AAC 5428 0024                  		addq.b	#2,obRoutine(a0)
00013AB0 217C 0000 0000 0004        		move.l	#Map_SSawBall,obMap(a0)
00013AB8 317C 04F0 0002             		move.w	#$4F0,obGfx(a0)
00013ABE 0028 0004 0001             		ori.b	#4,obRender(a0)
00013AC4 317C 0200 0018             		move.w	#$200,obPriority(a0)
00013ACA 117C 008B 0020             		move.b	#$8B,obColType(a0)
00013AD0 117C 000C 0014             		move.b	#$C,obActWid(a0)
00013AD6 3168 0008 0030             		move.w	obX(a0),see_origX(a0)
00013ADC 0668 0028 0008             		addi.w	#$28,obX(a0)
00013AE2 3168 000C 0034             		move.w	obY(a0),see_origY(a0)
00013AE8 117C 0001 001A             		move.b	#1,obFrame(a0)
00013AEE 0828 0000 0022             		btst	#0,obStatus(a0)	; is seesaw flipped?
00013AF4 6700                       		beq.s	See_MoveSpike	; if not, branch
00013AF6 0468 0050 0008             		subi.w	#$50,obX(a0)	; move spikeball to the other side
00013AFC 117C 0002 003A             		move.b	#2,see_frame(a0)
00013B02                            
00013B02                            See_MoveSpike:	; Routine 8
00013B02 2268 003C                  		movea.l	see_parent(a0),a1
00013B06 7000                       		moveq	#0,d0
00013B08 1028 003A                  		move.b	see_frame(a0),d0
00013B0C 9029 003A                  		sub.b	see_frame(a1),d0
00013B10 6700                       		beq.s	loc_1183E
00013B12 6400                       		bcc.s	loc_117FC
00013B14 4400                       		neg.b	d0
00013B16                            
00013B16                            loc_117FC:
00013B16 323C F7E8                  		move.w	#-$818,d1
00013B1A 343C FEEC                  		move.w	#-$114,d2
00013B1E 0C00 0001                  		cmpi.b	#1,d0
00013B22 6700                       		beq.s	loc_11822
00013B24 323C F510                  		move.w	#-$AF0,d1
00013B28 343C FF34                  		move.w	#-$CC,d2
00013B2C 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
00013B32 6D00                       		blt.s	loc_11822
00013B34 323C F200                  		move.w	#-$E00,d1
00013B38 343C FF60                  		move.w	#-$A0,d2
00013B3C                            
00013B3C                            loc_11822:
00013B3C 3141 0012                  		move.w	d1,obVelY(a0)
00013B40 3142 0010                  		move.w	d2,obVelX(a0)
00013B44 3028 0008                  		move.w	obX(a0),d0
00013B48 9068 0030                  		sub.w	see_origX(a0),d0
00013B4C 6400                       		bcc.s	loc_11838
00013B4E 4468 0010                  		neg.w	obVelX(a0)
00013B52                            
00013B52                            loc_11838:
00013B52 5428 0024                  		addq.b	#2,obRoutine(a0)
00013B56 6000                       		bra.s	See_SpikeFall
00013B58                            ; ===========================================================================
00013B58                            
00013B58                            loc_1183E:
00013B58 45F9 0000 0000             		lea	(See_Speeds).l,a2
00013B5E 7000                       		moveq	#0,d0
00013B60 1029 001A                  		move.b	obFrame(a1),d0
00013B64 343C 0028                  		move.w	#$28,d2
00013B68 3228 0008                  		move.w	obX(a0),d1
00013B6C 9268 0030                  		sub.w	see_origX(a0),d1
00013B70 6400                       		bcc.s	loc_1185C
00013B72 4442                       		neg.w	d2
00013B74 5440                       		addq.w	#2,d0
00013B76                            
00013B76                            loc_1185C:
00013B76 D040                       		add.w	d0,d0
00013B78 3228 0034                  		move.w	see_origY(a0),d1
00013B7C D272 0000                  		add.w	(a2,d0.w),d1
00013B80 3141 000C                  		move.w	d1,obY(a0)
00013B84 D468 0030                  		add.w	see_origX(a0),d2
00013B88 3142 0008                  		move.w	d2,obX(a0)
00013B8C 4268 000E                  		clr.w	obY+2(a0)
00013B90 4268 000A                  		clr.w	obX+2(a0)
00013B94 4E75                       		rts	
00013B96                            ; ===========================================================================
00013B96                            
00013B96                            See_SpikeFall:	; Routine $A
00013B96 4A68 0012                  		tst.w	obVelY(a0)	; is spikeball falling down?
00013B9A 6A00                       		bpl.s	loc_1189A	; if yes, branch
00013B9C 6100 BCA2                  		bsr.w	ObjectFall
00013BA0 3028 0034                  		move.w	see_origY(a0),d0
00013BA4 0440 002F                  		subi.w	#$2F,d0
00013BA8 B068 000C                  		cmp.w	obY(a0),d0
00013BAC 6E00                       		bgt.s	locret_11898
00013BAE 6100 BC90                  		bsr.w	ObjectFall
00013BB2                            
00013BB2                            locret_11898:
00013BB2 4E75                       		rts	
00013BB4                            ; ===========================================================================
00013BB4                            
00013BB4                            loc_1189A:
00013BB4 6100 BC8A                  		bsr.w	ObjectFall
00013BB8 2268 003C                  		movea.l	see_parent(a0),a1
00013BBC 45F9 0000 0000             		lea	(See_Speeds).l,a2
00013BC2 7000                       		moveq	#0,d0
00013BC4 1029 001A                  		move.b	obFrame(a1),d0
00013BC8 3228 0008                  		move.w	obX(a0),d1
00013BCC 9268 0030                  		sub.w	see_origX(a0),d1
00013BD0 6400                       		bcc.s	loc_118BA
00013BD2 5440                       		addq.w	#2,d0
00013BD4                            
00013BD4                            loc_118BA:
00013BD4 D040                       		add.w	d0,d0
00013BD6 3228 0034                  		move.w	see_origY(a0),d1
00013BDA D272 0000                  		add.w	(a2,d0.w),d1
00013BDE B268 000C                  		cmp.w	obY(a0),d1
00013BE2 6E00                       		bgt.s	locret_11938
00013BE4 2268 003C                  		movea.l	see_parent(a0),a1
00013BE8 7202                       		moveq	#2,d1
00013BEA 4A68 0010                  		tst.w	obVelX(a0)
00013BEE 6B00                       		bmi.s	See_Spring
00013BF0 7200                       		moveq	#0,d1
00013BF2                            
00013BF2                            See_Spring:
00013BF2 1341 003A                  		move.b	d1,$3A(a1)
00013BF6 1141 003A                  		move.b	d1,see_frame(a0)
00013BFA B229 001A                  		cmp.b	obFrame(a1),d1
00013BFE 6700                       		beq.s	loc_1192C
00013C00 08A9 0003 0022             		bclr	#3,obStatus(a1)
00013C06 6700                       		beq.s	loc_1192C
00013C08 4229 0025                  		clr.b	ob2ndRout(a1)
00013C0C 137C 0002 0024             		move.b	#2,obRoutine(a1)
00013C12 45F8 D000                  		lea	(v_player).w,a2
00013C16 3568 0012 0012             		move.w	obVelY(a0),obVelY(a2)
00013C1C 446A 0012                  		neg.w	obVelY(a2)
00013C20 08EA 0001 0022             		bset	#1,obStatus(a2)
00013C26 08AA 0003 0022             		bclr	#3,obStatus(a2)
00013C2C 422A 003C                  		clr.b	$3C(a2)
00013C30 157C 0000 001C             		move.b	#id_Spring,obAnim(a2) ; change Sonic's animation to "spring" ($10)
00013C36 157C 0002 0024             		move.b	#2,obRoutine(a2)
00013C46                            
00013C46                            loc_1192C:
00013C46 4268 0010                  		clr.w	obVelX(a0)
00013C4A 4268 0012                  		clr.w	obVelY(a0)
00013C4E 5528 0024                  		subq.b	#2,obRoutine(a0)
00013C52                            
00013C52                            locret_11938:
00013C52 4E75                       		rts	
00013C54                            ; ===========================================================================
00013C54 FFF8 FFE4 FFD1 FFE4 FFF8   See_Speeds:	dc.w -8, -$1C, -$2F, -$1C, -8
00013C5E                            
00013C5E                            See_DataSlope:	incbin	"misc\slzssaw1.bin"
00013C8E                            		even
00013C8E                            See_DataFlat:	incbin	"misc\slzssaw2.bin"
00013CBE                            		even
00013CBE                            		even
00013CBE                            Map_Seesaw:	include	"_maps\Seesaw.asm"
00013CBE                            ; ---------------------------------------------------------------------------
00013CBE                            ; Sprite mappings - seesaws (SLZ)
00013CBE                            ; ---------------------------------------------------------------------------
00013CBE                            Map_Seesaw_internal:
00013CBE 0000                       		dc.w @sloping-Map_Seesaw_internal
00013CC0 0000                       		dc.w @flat-Map_Seesaw_internal
00013CC2 0000                       		dc.w @sloping-Map_Seesaw_internal
00013CC4 0000                       		dc.w @flat-Map_Seesaw_internal
00013CC6 07                         @sloping:	dc.b 7
00013CC7 D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
00013CCC DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
00013CD1 E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
00013CD6 EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
00013CDB FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
00013CE0 F406 0006 13               		dc.b $F4, 6, 0,	6, $13
00013CE5 FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
00013CEA 04                         @flat:		dc.b 4
00013CEB E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
00013CF0 E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
00013CF5 E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
00013CFA E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
00013D00 00                         		even
00013D00 00                         		even
00013D00                            Map_SSawBall:	include	"_maps\Seesaw Ball.asm"
00013D00                            ; ---------------------------------------------------------------------------
00013D00                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00013D00                            ; ---------------------------------------------------------------------------
00013D00                            Map_SSawBall_internal:
00013D00 0000                       		dc.w @red-Map_SSawBall_internal
00013D02 0000                       		dc.w @silver-Map_SSawBall_internal
00013D04 01                         @red:		dc.b 1
00013D05 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00013D0A 01                         @silver:	dc.b 1
00013D0B F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00013D10                            		even
00013D10                            		even
00013D10                            		include	"_incObj\5F Bomb Enemy.asm"
00013D10                            ; ---------------------------------------------------------------------------
00013D10                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
00013D10                            ; ---------------------------------------------------------------------------
00013D10                            
00013D10                            Bomb:
00013D10 7000                       		moveq	#0,d0
00013D12 1028 0024                  		move.b	obRoutine(a0),d0
00013D16 323B 0000                  		move.w	Bom_Index(pc,d0.w),d1
00013D1A 4EFB 1000                  		jmp	Bom_Index(pc,d1.w)
00013D1E                            ; ===========================================================================
00013D1E 0000                       Bom_Index:	dc.w Bom_Main-Bom_Index
00013D20 0000                       		dc.w Bom_Action-Bom_Index
00013D22 0000                       		dc.w Bom_Display-Bom_Index
00013D24 0000                       		dc.w Bom_End-Bom_Index
00013D26                            
00013D26 =00000030                  bom_time:	equ $30		; time of fuse
00013D26 =00000034                  bom_origY:	equ $34		; original y-axis position
00013D26 =0000003C                  bom_parent:	equ $3C		; address of parent object
00013D26                            ; ===========================================================================
00013D26                            
00013D26                            Bom_Main:	; Routine 0
00013D26 5428 0024                  		addq.b	#2,obRoutine(a0)
00013D2A 217C 0000 0000 0004        		move.l	#Map_Bomb,obMap(a0)
00013D32 317C 0400 0002             		move.w	#$400,obGfx(a0)
00013D38 0028 0004 0001             		ori.b	#4,obRender(a0)
00013D3E 317C 0180 0018             		move.w	#$180,obPriority(a0)
00013D44 117C 000C 0014             		move.b	#$C,obActWid(a0)
00013D4A 1028 0028                  		move.b	obSubtype(a0),d0
00013D4E 6700                       		beq.s	loc_11A3C
00013D50 1140 0024                  		move.b	d0,obRoutine(a0)
00013D54 4E75                       		rts	
00013D56                            ; ===========================================================================
00013D56                            
00013D56                            loc_11A3C:
00013D56 117C 009A 0020             		move.b	#$9A,obColType(a0)
00013D5C 0868 0000 0022             		bchg	#0,obStatus(a0)
00013D62                            
00013D62                            Bom_Action:	; Routine 2
00013D62 7000                       		moveq	#0,d0
00013D64 1028 0025                  		move.b	ob2ndRout(a0),d0
00013D68 323B 0000                  		move.w	@index(pc,d0.w),d1
00013D6C 4EBB 1000                  		jsr	@index(pc,d1.w)
00013D70 43F9 0000 0000             		lea	(Ani_Bomb).l,a1
00013D76 6100 8BC0                  		bsr.w	AnimateSprite
00013D7A 6000 DA86                  		bra.w	RememberState
00013D7E                            ; ===========================================================================
00013D7E 0000                       @index:		dc.w @walk-@index
00013D80 0000                       		dc.w @wait-@index
00013D82 0000                       		dc.w @explode-@index
00013D84                            ; ===========================================================================
00013D84                            
00013D84                            @walk:
00013D84 6100 0000                  		bsr.w	@chksonic
00013D88 5368 0030                  		subq.w	#1,bom_time(a0)	; subtract 1 from time delay
00013D8C 6A00                       		bpl.s	@noflip		; if time remains, branch
00013D8E 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto @wait
00013D92 317C 05FF 0030             		move.w	#1535,bom_time(a0) ; set time delay to 25 seconds
00013D98 317C 0010 0010             		move.w	#$10,obVelX(a0)
00013D9E 117C 0001 001C             		move.b	#1,obAnim(a0)	; use walking animation
00013DA4 0868 0000 0022             		bchg	#0,obStatus(a0)
00013DAA 6700                       		beq.s	@noflip
00013DAC 4468 0010                  		neg.w	obVelX(a0)	; change direction
00013DB0                            
00013DB0                            	@noflip:
00013DB0 4E75                       		rts	
00013DB2                            ; ===========================================================================
00013DB2                            
00013DB2                            @wait:
00013DB2 6100 0000                  		bsr.w	@chksonic
00013DB6 5368 0030                  		subq.w	#1,bom_time(a0)	; subtract 1 from time delay
00013DBA 6B00                       		bmi.s	@stopwalking	; if time expires, branch
00013DBC 6100 BABA                  		bsr.w	SpeedToPos
00013DC0 4E75                       		rts	
00013DC2                            ; ===========================================================================
00013DC2                            
00013DC2                            	@stopwalking:
00013DC2 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00013DC6 317C 00B3 0030             		move.w	#179,bom_time(a0) ; set time delay to 3 seconds
00013DCC 4268 0010                  		clr.w	obVelX(a0)	; stop walking
00013DD0 117C 0000 001C             		move.b	#0,obAnim(a0)	; use waiting animation
00013DD6 4E75                       		rts	
00013DD8                            ; ===========================================================================
00013DD8                            
00013DD8                            @explode:
00013DD8 5368 0030                  		subq.w	#1,bom_time(a0)	; subtract 1 from time delay
00013DDC 6A00                       		bpl.s	@noexplode	; if time remains, branch
00013DDE 10BC 003F                  		move.b	#id_ExplosionBomb,0(a0) ; change bomb into an explosion
00013DE2 117C 0000 0024             		move.b	#0,obRoutine(a0)
00013DE8                            
00013DE8                            	@noexplode:
00013DE8 4E75                       		rts	
00013DEA                            ; ===========================================================================
00013DEA                            
00013DEA                            @chksonic:
00013DEA 3038 D008                  		move.w	(v_player+obX).w,d0
00013DEE 9068 0008                  		sub.w	obX(a0),d0
00013DF2 6400                       		bcc.s	@isleft
00013DF4 4440                       		neg.w	d0
00013DF6                            
00013DF6                            	@isleft:
00013DF6 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels?
00013DFA 6400                       		bcc.s	@outofrange	; if not, branch
00013DFC 3038 D00C                  		move.w	(v_player+obY).w,d0
00013E00 9068 000C                  		sub.w	obY(a0),d0
00013E04 6400                       		bcc.s	@isabove
00013E06 4440                       		neg.w	d0
00013E08                            
00013E08                            	@isabove:
00013E08 0C40 0060                  		cmpi.w	#$60,d0
00013E0C 6400                       		bcc.s	@outofrange
00013E0E 4A78 FE08                  		tst.w	(v_debuguse).w
00013E12 6600                       		bne.s	@outofrange
00013E14                            
00013E14 117C 0004 0025             		move.b	#4,ob2ndRout(a0)
00013E1A 317C 008F 0030             		move.w	#143,bom_time(a0) ; set fuse time
00013E20 4268 0010                  		clr.w	obVelX(a0)
00013E24 117C 0002 001C             		move.b	#2,obAnim(a0)	; use activated animation
00013E2A 6100 BF02                  		bsr.w	FindNextFreeObj
00013E2E 6600                       		bne.s	@outofrange
00013E30 12BC 005F                  		move.b	#id_Bomb,0(a1)	; load fuse object
00013E34 3368 0008 0008             		move.w	obX(a0),obX(a1)
00013E3A 3368 000C 000C             		move.w	obY(a0),obY(a1)
00013E40 3368 000C 0034             		move.w	obY(a0),bom_origY(a1)
00013E46 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00013E4C 137C 0004 0028             		move.b	#4,obSubtype(a1)
00013E52 137C 0003 001C             		move.b	#3,obAnim(a1)
00013E58 337C 0010 0012             		move.w	#$10,obVelY(a1)
00013E5E 0828 0001 0022             		btst	#1,obStatus(a0)	; is bomb upside-down?
00013E64 6700                       		beq.s	@normal		; if not, branch
00013E66 4469 0012                  		neg.w	obVelY(a1)	; reverse direction for fuse
00013E6A                            
00013E6A                            	@normal:
00013E6A 337C 008F 0030             		move.w	#143,bom_time(a1) ; set fuse time
00013E70 2348 003C                  		move.l	a0,bom_parent(a1)
00013E74                            
00013E74                            @outofrange:
00013E74 4E75                       		rts	
00013E76                            ; ===========================================================================
00013E76                            
00013E76                            Bom_Display:	; Routine 4
00013E76 6100                       		bsr.s	loc_11B70
00013E78 43F9 0000 0000             		lea	(Ani_Bomb).l,a1
00013E7E 6100 8AB8                  		bsr.w	AnimateSprite
00013E82 6000 D97E                  		bra.w	RememberState
00013E86                            ; ===========================================================================
00013E86                            
00013E86                            loc_11B70:
00013E86 5368 0030                  		subq.w	#1,bom_time(a0)
00013E8A 6B00                       		bmi.s	loc_11B7C
00013E8C 6100 B9EA                  		bsr.w	SpeedToPos
00013E90 4E75                       		rts	
00013E92                            ; ===========================================================================
00013E92                            
00013E92                            loc_11B7C:
00013E92 4268 0030                  		clr.w	bom_time(a0)
00013E96 4228 0024                  		clr.b	obRoutine(a0)
00013E9A 3168 0034 000C             		move.w	bom_origY(a0),obY(a0)
00013EA0 7203                       		moveq	#3,d1
00013EA2 2248                       		movea.l	a0,a1
00013EA4 45F9 0000 0000             		lea	(Bom_ShrSpeed).l,a2 ; load shrapnel speed data
00013EAA 6000                       		bra.s	@makeshrapnel
00013EAC                            ; ===========================================================================
00013EAC                            
00013EAC                            	@loop:
00013EAC 6100 BE80                  		bsr.w	FindNextFreeObj
00013EB0 6600                       		bne.s	@fail
00013EB2                            
00013EB2                            @makeshrapnel:
00013EB2 12BC 005F                  		move.b	#id_Bomb,0(a1)	; load shrapnel	object
00013EB6 3368 0008 0008             		move.w	obX(a0),obX(a1)
00013EBC 3368 000C 000C             		move.w	obY(a0),obY(a1)
00013EC2 137C 0006 0028             		move.b	#6,obSubtype(a1)
00013EC8 137C 0004 001C             		move.b	#4,obAnim(a1)
00013ECE 335A 0010                  		move.w	(a2)+,obVelX(a1)
00013ED2 335A 0012                  		move.w	(a2)+,obVelY(a1)
00013ED6 137C 0098 0020             		move.b	#$98,obColType(a1)
00013EDC 08E9 0007 0001             		bset	#7,obRender(a1)
00013EE2                            
00013EE2                            	@fail:
00013EE2 51C9 FFC8                  		dbf	d1,@loop	; repeat 3 more	times
00013EE6                            
00013EE6 117C 0006 0024             		move.b	#6,obRoutine(a0)
00013EEC                            
00013EEC                            Bom_End:	; Routine 6
00013EEC 6100 B98A                  		bsr.w	SpeedToPos
00013EF0 0668 0018 0012             		addi.w	#$18,obVelY(a0)
00013EF6 43F9 0000 0000             		lea	(Ani_Bomb).l,a1
00013EFC 6100 8A3A                  		bsr.w	AnimateSprite
00013F00 4A28 0001                  		tst.b	obRender(a0)
00013F04 6A00 B9C6                  		bpl.w	DeleteObject
00013F08 6000 B982                  		bra.w	DisplaySprite
00013F0C                            ; ===========================================================================
00013F0C FE00 FD00 FF00 FE00 0200+  Bom_ShrSpeed:	dc.w -$200, -$300, -$100, -$200, $200, -$300, $100, -$200
00013F0C FE00 FD00 FF00 FE00 0200+  Bom_ShrSpeed:	dc.w -$200, -$300, -$100, -$200, $200, -$300, $100, -$200
00013F1C                            		include	"_anim\Bomb Enemy.asm"
00013F1C                            ; ---------------------------------------------------------------------------
00013F1C                            ; Animation script - Bomb enemy
00013F1C                            ; ---------------------------------------------------------------------------
00013F1C 0000                       Ani_Bomb:	dc.w @stand-Ani_Bomb
00013F1E 0000                       		dc.w @walk-Ani_Bomb
00013F20 0000                       		dc.w @activated-Ani_Bomb
00013F22 0000                       		dc.w @fuse-Ani_Bomb
00013F24 0000                       		dc.w @shrapnel-Ani_Bomb
00013F26 1301 00FF                  @stand:		dc.b $13, 1, 0,	afEnd
00013F2A 1305 0403 02FF             @walk:		dc.b $13, 5, 4,	3, 2, afEnd
00013F30 1307 06FF                  @activated:	dc.b $13, 7, 6,	afEnd
00013F34 0308 09FF                  @fuse:		dc.b 3,	8, 9, afEnd
00013F38 030A 0BFF                  @shrapnel:	dc.b 3,	$A, $B,	afEnd
00013F3C                            		even
00013F3C                            		even
00013F3C                            Map_Bomb:	include	"_maps\Bomb Enemy.asm"
00013F3C                            ; ---------------------------------------------------------------------------
00013F3C                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00013F3C                            ; ---------------------------------------------------------------------------
00013F3C                            Map_Bomb_internal:
00013F3C 0000                       		dc.w @stand1-Map_Bomb_internal
00013F3E 0000                       		dc.w @stand2-Map_Bomb_internal
00013F40 0000                       		dc.w @walk1-Map_Bomb_internal
00013F42 0000                       		dc.w @walk2-Map_Bomb_internal
00013F44 0000                       		dc.w @walk3-Map_Bomb_internal
00013F46 0000                       		dc.w @walk4-Map_Bomb_internal
00013F48 0000                       		dc.w @activate1-Map_Bomb_internal
00013F4A 0000                       		dc.w @activate2-Map_Bomb_internal
00013F4C 0000                       		dc.w @fuse1-Map_Bomb_internal
00013F4E 0000                       		dc.w @fuse2-Map_Bomb_internal
00013F50 0000                       		dc.w @shrapnel1-Map_Bomb_internal
00013F52 0000                       		dc.w @shrapnel2-Map_Bomb_internal
00013F54 03                         @stand1:	dc.b 3
00013F55 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4	; bomb standing still
00013F5A 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00013F5F E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00013F64 03                         @stand2:	dc.b 3
00013F65 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013F6A 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00013F6F E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00013F74 03                         @walk1:		dc.b 3
00013F75 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4	; bomb walking
00013F7A 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
00013F7F E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00013F84 03                         @walk2:		dc.b 3
00013F85 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013F8A 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
00013F8F E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00013F94 03                         @walk3:		dc.b 3
00013F95 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00013F9A 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
00013F9F E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00013FA4 03                         @walk4:		dc.b 3
00013FA5 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013FAA 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
00013FAF E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00013FB4 02                         @activate1:	dc.b 2
00013FB5 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4	; bomb during detonation countdown
00013FBA 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00013FBF 02                         @activate2:	dc.b 2
00013FC0 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013FC5 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00013FCA 01                         @fuse1:		dc.b 1
00013FCB E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC ; fuse	(just before it	explodes)
00013FD0 01                         @fuse2:		dc.b 1
00013FD1 E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
00013FD6 01                         @shrapnel1:	dc.b 1
00013FD7 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC ; shrapnel (after it exploded)
00013FDC 01                         @shrapnel2:	dc.b 1
00013FDD FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00013FE2                            		even
00013FE2                            		even
00013FE2                            
00013FE2                            		include	"_incObj\60 Orbinaut.asm"
00013FE2                            ; ---------------------------------------------------------------------------
00013FE2                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
00013FE2                            ; ---------------------------------------------------------------------------
00013FE2                            
00013FE2                            Orbinaut:
00013FE2 7000                       		moveq	#0,d0
00013FE4 1028 0024                  		move.b	obRoutine(a0),d0
00013FE8 323B 0000                  		move.w	Orb_Index(pc,d0.w),d1
00013FEC 4EFB 1000                  		jmp	Orb_Index(pc,d1.w)
00013FF0                            ; ===========================================================================
00013FF0 0000                       Orb_Index:	dc.w Orb_Main-Orb_Index
00013FF2 0000                       		dc.w Orb_ChkSonic-Orb_Index
00013FF4 0000                       		dc.w Orb_Display-Orb_Index
00013FF6 0000                       		dc.w Orb_MoveOrb-Orb_Index
00013FF8 0000                       		dc.w Orb_ChkDel2-Orb_Index
00013FFA                            
00013FFA =0000003C                  orb_parent:	equ $3C		; address of parent object
00013FFA                            ; ===========================================================================
00013FFA                            
00013FFA                            Orb_Main:	; Routine 0
00013FFA 217C 0000 0000 0004        		move.l	#Map_Orb,obMap(a0)
00014002 317C 0429 0002             		move.w	#$429,obGfx(a0)	; SBZ specific code
00014008 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
0001400E 6700                       		beq.s	@isscrap
00014010 317C 2429 0002             		move.w	#$2429,obGfx(a0) ; SLZ specific code
00014016                            
00014016                            	@isscrap:
00014016 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
0001401C 6600                       		bne.s	@notlabyrinth
0001401E 317C 0467 0002             		move.w	#$467,obGfx(a0)	; LZ specific code
00014024                            
00014024                            	@notlabyrinth:
00014024 0028 0004 0001             		ori.b	#4,obRender(a0)
0001402A 317C 0200 0018             		move.w	#$200,obPriority(a0)
00014030 117C 000B 0020             		move.b	#$B,obColType(a0)
00014036 117C 000C 0014             		move.b	#$C,obActWid(a0)
0001403C 7400                       		moveq	#0,d2
0001403E 45E8 0037                  		lea	$37(a0),a2
00014042 264A                       		movea.l	a2,a3
00014044 524A                       		addq.w	#1,a2
00014046 7203                       		moveq	#3,d1
00014048                            
00014048                            @makesatellites:
00014048 6100 BCE4                  		bsr.w	FindNextFreeObj
0001404C 6600                       		bne.s	@fail
0001404E 5213                       		addq.b	#1,(a3)
00014050 3A09                       		move.w	a1,d5
00014052 0445 D000                  		subi.w	#$D000,d5
00014056 EC4D                       		lsr.w	#6,d5
00014058 0245 007F                  		andi.w	#$7F,d5
0001405C 14C5                       		move.b	d5,(a2)+
0001405E 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
00014060 137C 0006 0024             		move.b	#6,obRoutine(a1) ; use Orb_MoveOrb routine
00014066 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
0001406C 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00014072 0029 0004 0001             		ori.b	#4,obRender(a1)
00014078 337C 0200 0018             		move.w	#$200,obPriority(a1)
0001407E 137C 0008 0014             		move.b	#8,obActWid(a1)
00014084 137C 0003 001A             		move.b	#3,obFrame(a1)
0001408A 137C 0098 0020             		move.b	#$98,obColType(a1)
00014090 1342 0026                  		move.b	d2,obAngle(a1)
00014094 0602 0040                  		addi.b	#$40,d2
00014098 2348 003C                  		move.l	a0,orb_parent(a1)
0001409C 51C9 FFAA                  		dbf	d1,@makesatellites ; repeat sequence 3 more times
000140A0                            
000140A0                            	@fail:
000140A0 7001                       		moveq	#1,d0
000140A2 0828 0000 0022             		btst	#0,obStatus(a0)	; is orbinaut facing left?
000140A8 6700                       		beq.s	@noflip		; if not, branch
000140AA 4440                       		neg.w	d0
000140AC                            
000140AC                            	@noflip:
000140AC 1140 0036                  		move.b	d0,$36(a0)
000140B0 1168 0028 0024             		move.b	obSubtype(a0),obRoutine(a0) ; if type is 02, skip Orb_ChkSonic
000140B6 5428 0024                  		addq.b	#2,obRoutine(a0)
000140BA 317C FFC0 0010             		move.w	#-$40,obVelX(a0) ; move orbinaut to the left
000140C0 0828 0000 0022             		btst	#0,obStatus(a0)	; is orbinaut facing left??
000140C6 6700                       		beq.s	@noflip2	; if not, branch
000140C8 4468 0010                  		neg.w	obVelX(a0)	; move orbinaut	to the right
000140CC                            
000140CC                            	@noflip2:
000140CC 4E75                       		rts	
000140CE                            ; ===========================================================================
000140CE                            
000140CE                            Orb_ChkSonic:	; Routine 2
000140CE 3038 D008                  		move.w	(v_player+obX).w,d0
000140D2 9068 0008                  		sub.w	obX(a0),d0	; is Sonic to the right of the orbinaut?
000140D6 6400                       		bcc.s	@isright	; if yes, branch
000140D8 4440                       		neg.w	d0
000140DA                            
000140DA                            	@isright:
000140DA 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
000140DE 6400                       		bcc.s	@animate	; if not, branch
000140E0 3038 D00C                  		move.w	(v_player+obY).w,d0
000140E4 9068 000C                  		sub.w	obY(a0),d0	; is Sonic above the orbinaut?
000140E8 6400                       		bcc.s	@isabove	; if yes, branch
000140EA 4440                       		neg.w	d0
000140EC                            
000140EC                            	@isabove:
000140EC 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
000140F0 6400                       		bcc.s	@animate	; if not, branch
000140F2 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	on?
000140F6 6600                       		bne.s	@animate	; if yes, branch
000140F8 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "angry" animation
000140FE                            
000140FE                            @animate:
000140FE 43F9 0000 0000             		lea	(Ani_Orb).l,a1
00014104 6100 8832                  		bsr.w	AnimateSprite
00014108 6000 0000                  		bra.w	Orb_ChkDel
0001410C                            ; ===========================================================================
0001410C                            
0001410C                            Orb_Display:	; Routine 4
0001410C 6100 B76A                  		bsr.w	SpeedToPos
00014110                            
00014110                            Orb_ChkDel:
0001412E 6000 B75C                  		bra.w	DisplaySprite
00014132                            
00014132                            @chkgone:
00014132 45F8 FC00                  		lea	(v_objstate).w,a2
00014136 7000                       		moveq	#0,d0
00014138 1028 0023                  		move.b	obRespawnNo(a0),d0
0001413C 6700                       		beq.s	loc_11E34
0001413E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00014144                            
00014144                            loc_11E34:
00014144 45E8 0037                  		lea	$37(a0),a2
00014148 7400                       		moveq	#0,d2
0001414A 141A                       		move.b	(a2)+,d2
0001414C 5342                       		subq.w	#1,d2
0001414E 6500                       		bcs.s	Orb_Delete
00014150                            
00014150                            loc_11E40:
00014150 7000                       		moveq	#0,d0
00014152 101A                       		move.b	(a2)+,d0
00014154 ED48                       		lsl.w	#6,d0
00014156 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
0001415C 2240                       		movea.l	d0,a1
0001415E 6100 B76E                  		bsr.w	DeleteChild
00014162 51CA FFEC                  		dbf	d2,loc_11E40
00014166                            
00014166                            Orb_Delete:
00014166 6000 B764                  		bra.w	DeleteObject
0001416A                            ; ===========================================================================
0001416A                            
0001416A                            Orb_MoveOrb:	; Routine 6
0001416A 2268 003C                  		movea.l	orb_parent(a0),a1
0001416E 0C11 0060                  		cmpi.b	#id_Orbinaut,0(a1) ; does parent object still exist?
00014172 6600 B758                  		bne.w	DeleteObject	; if not, delete
00014176 0C29 0002 001A             		cmpi.b	#2,obFrame(a1)	; is orbinaut angry?
0001417C 6600                       		bne.s	@circle		; if not, branch
0001417E 0C28 0040 0026             		cmpi.b	#$40,obAngle(a0) ; is spikeorb directly under the orbinaut?
00014184 6600                       		bne.s	@circle		; if not, branch
00014186 5428 0024                  		addq.b	#2,obRoutine(a0)
0001418A 5329 0037                  		subq.b	#1,$37(a1)
0001418E 6600                       		bne.s	@fire
00014190 5429 0024                  		addq.b	#2,obRoutine(a1)
00014194                            
00014194                            	@fire:
00014194 317C FE00 0010             		move.w	#-$200,obVelX(a0) ; move orb to the left (quickly)
0001419A 0829 0000 0022             		btst	#0,obStatus(a1)
000141A0 6700                       		beq.s	@noflip
000141A2 4468 0010                  		neg.w	obVelX(a0)
000141A6                            
000141A6                            	@noflip:
000141A6 6000 B6E4                  		bra.w	DisplaySprite
000141AA                            ; ===========================================================================
000141AA                            
000141AA                            @circle:
000141AA 1028 0026                  		move.b	obAngle(a0),d0
000141AE 4EB9 0000 3A32             		jsr	(CalcSine).l
000141B4 E841                       		asr.w	#4,d1
000141B6 D269 0008                  		add.w	obX(a1),d1
000141BA 3141 0008                  		move.w	d1,obX(a0)
000141BE E840                       		asr.w	#4,d0
000141C0 D069 000C                  		add.w	obY(a1),d0
000141C4 3140 000C                  		move.w	d0,obY(a0)
000141C8 1029 0036                  		move.b	$36(a1),d0
000141CC D128 0026                  		add.b	d0,obAngle(a0)
000141D0 6000 B6BA                  		bra.w	DisplaySprite
000141D4                            ; ===========================================================================
000141D4                            
000141D4                            Orb_ChkDel2:	; Routine 8
000141D4 6100 B6A2                  		bsr.w	SpeedToPos
000141D8 4A28 0001                  		tst.b	obRender(a0)
000141DC 6A00 B6EE                  		bpl.w	DeleteObject
000141E0 6000 B6AA                  		bra.w	DisplaySprite
000141E0 6000 B6AA                  		bra.w	DisplaySprite
000141E4                            		include	"_anim\Orbinaut.asm"
000141E4                            ; ---------------------------------------------------------------------------
000141E4                            ; Animation script - Orbinaut enemy
000141E4                            ; ---------------------------------------------------------------------------
000141E4 0000                       Ani_Orb:	dc.w @normal-Ani_Orb
000141E6 0000                       		dc.w @angers-Ani_Orb
000141E8 0F00 FF                    @normal:	dc.b $F, 0, afEnd
000141EC 00                         		even
000141EC 0F01 02FE 01               @angers:	dc.b $F, 1, 2, afBack, 1
000141F2 00                         		even
000141F2 00                         		even
000141F2                            Map_Orb:	include	"_maps\Orbinaut.asm"
000141F2                            ; ---------------------------------------------------------------------------
000141F2                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
000141F2                            ; ---------------------------------------------------------------------------
000141F2                            Map_Orb_internal:
000141F2 0000                       		dc.w @normal-Map_Orb_internal
000141F4 0000                       		dc.w @medium-Map_Orb_internal
000141F6 0000                       		dc.w @angry-Map_Orb_internal
000141F8 0000                       		dc.w @spikeball-Map_Orb_internal
000141FA 01                         @normal:	dc.b 1
000141FB F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00014200 01                         @medium:	dc.b 1
00014201 F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
00014206 01                         @angry:		dc.b 1
00014207 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001420C 01                         @spikeball:	dc.b 1
0001420D F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
00014212                            		even
00014212                            		even
00014212                            
00014212                            		include	"_incObj\16 Harpoon.asm"
00014212                            ; ---------------------------------------------------------------------------
00014212                            ; Object 16 - harpoon (LZ)
00014212                            ; ---------------------------------------------------------------------------
00014212                            
00014212                            Harpoon:
00014212 7000                       		moveq	#0,d0
00014214 1028 0024                  		move.b	obRoutine(a0),d0
00014218 323B 0000                  		move.w	Harp_Index(pc,d0.w),d1
0001421C 4EFB 1000                  		jmp	Harp_Index(pc,d1.w)
00014220                            ; ===========================================================================
00014220 0000                       Harp_Index:	dc.w Harp_Main-Harp_Index
00014222 0000                       		dc.w Harp_Move-Harp_Index
00014224 0000                       		dc.w Harp_Wait-Harp_Index
00014226                            
00014226 =00000030                  harp_time:	equ $30		; time between stabbing/retracting
00014226                            ; ===========================================================================
00014226                            
00014226                            Harp_Main:	; Routine 0
00014226 5428 0024                  		addq.b	#2,obRoutine(a0)
0001422A 217C 0000 0000 0004        		move.l	#Map_Harp,obMap(a0)
00014232 317C 03CC 0002             		move.w	#$3CC,obGfx(a0)
00014238 0028 0004 0001             		ori.b	#4,obRender(a0)
0001423E 317C 0200 0018             		move.w	#$200,obPriority(a0)
00014244 1168 0028 001C             		move.b	obSubtype(a0),obAnim(a0) ; get type (vert/horiz)
0001424A 117C 0014 0014             		move.b	#$14,obActWid(a0)
00014250 317C 003C 0030             		move.w	#60,harp_time(a0) ; set time to 1 second
00014256                            
00014256                            Harp_Move:	; Routine 2
00014256 43F9 0000 0000             		lea	(Ani_Harp).l,a1
0001425C 6100 86DA                  		bsr.w	AnimateSprite
00014260 7000                       		moveq	#0,d0
00014262 1028 001A                  		move.b	obFrame(a0),d0	; get frame number
00014266 117B 0000 0020             		move.b	@types(pc,d0.w),obColType(a0) ; get collision type
0001426C 6000 D594                  		bra.w	RememberState
00014270                            
00014270                            	@types:
00014270 9B9C 9D9E 9FA0             		dc.b $9B, $9C, $9D, $9E, $9F, $A0
00014276                            		even
00014276                            
00014276                            Harp_Wait:	; Routine 4
00014276 5368 0030                  		subq.w	#1,harp_time(a0) ; decrement timer
0001427A 6A00                       		bpl.s	@chkdel		; branch if time remains
0001427C 317C 003C 0030             		move.w	#60,harp_time(a0) ; reset timer
00014282 5528 0024                  		subq.b	#2,obRoutine(a0) ; run "Harp_Move" subroutine
00014286 0868 0000 001C             		bchg	#0,obAnim(a0)	; reverse animation
0001428C                            
0001428C                            	@chkdel:
0001428C 6000 D574                  		bra.w	RememberState
0001428C 6000 D574                  		bra.w	RememberState
00014290                            		include	"_anim\Harpoon.asm"
00014290                            ; ---------------------------------------------------------------------------
00014290                            ; Animation script - harpoon (LZ)
00014290                            ; ---------------------------------------------------------------------------
00014290 0000                       Ani_Harp:	dc.w @h_extending-Ani_Harp
00014292 0000                       		dc.w @h_retracting-Ani_Harp
00014294 0000                       		dc.w @v_extending-Ani_Harp
00014296 0000                       		dc.w @v_retracting-Ani_Harp
00014298 0301 02FC                  @h_extending:	dc.b 3,	1, 2, afRoutine
0001429C 0301 00FC                  @h_retracting:	dc.b 3,	1, 0, afRoutine
000142A0 0304 05FC                  @v_extending:	dc.b 3,	4, 5, afRoutine
000142A4 0304 03FC                  @v_retracting:	dc.b 3,	4, 3, afRoutine
000142A8                            		even
000142A8                            		even
000142A8                            Map_Harp:	include	"_maps\Harpoon.asm"
000142A8                            ; ---------------------------------------------------------------------------
000142A8                            ; Sprite mappings - harpoon (LZ)
000142A8                            ; ---------------------------------------------------------------------------
000142A8                            Map_Harp_internal:
000142A8 0000                       		dc.w @h_retracted-Map_Harp_internal
000142AA 0000                       		dc.w @h_middle-Map_Harp_internal
000142AC 0000                       		dc.w @h_extended-Map_Harp_internal
000142AE 0000                       		dc.w @v_retracted-Map_Harp_internal
000142B0 0000                       		dc.w @v_middle-Map_Harp_internal
000142B2 0000                       		dc.w @v_extended-Map_Harp_internal
000142B4 01                         @h_retracted:	dc.b 1
000142B5 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
000142BA 01                         @h_middle:	dc.b 1
000142BB FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
000142C0 02                         @h_extended:	dc.b 2
000142C1 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
000142C6 FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
000142CB 01                         @v_retracted:	dc.b 1
000142CC F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
000142D1 01                         @v_middle:	dc.b 1
000142D2 E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
000142D7 02                         @v_extended:	dc.b 2
000142D8 D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
000142DD F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
000142E2                            		even
000142E2                            		even
000142E2                            		include	"_incObj\61 LZ Blocks.asm"
000142E2                            ; ---------------------------------------------------------------------------
000142E2                            ; Object 61 - blocks (LZ)
000142E2                            ; ---------------------------------------------------------------------------
000142E2                            
000142E2                            LabyrinthBlock:
000142E2 7000                       		moveq	#0,d0
000142E4 1028 0024                  		move.b	obRoutine(a0),d0
000142E8 323B 0000                  		move.w	LBlk_Index(pc,d0.w),d1
000142EC 4EFB 1000                  		jmp	LBlk_Index(pc,d1.w)
000142F0                            ; ===========================================================================
000142F0 0000                       LBlk_Index:	dc.w LBlk_Main-LBlk_Index
000142F2 0000                       		dc.w LBlk_Action-LBlk_Index
000142F4                            
000142F4 1010                       LBlk_Var:	dc.b $10, $10		; width, height
000142F6 200C                       		dc.b $20, $C
000142F8 1010                       		dc.b $10, $10
000142FA 1010                       		dc.b $10, $10
000142FC                            
000142FC =00000016                  lblk_height:	equ $16		; block height
000142FC =00000034                  lblk_origX:	equ $34		; original x-axis position
000142FC =00000030                  lblk_origY:	equ $30		; original y-axis position
000142FC =00000036                  lblk_time:	equ $36		; time delay for block movement
000142FC =00000038                  lblk_untouched:	equ $38		; flag block as untouched
000142FC                            ; ===========================================================================
000142FC                            
000142FC                            LBlk_Main:	; Routine 0
000142FC 5428 0024                  		addq.b	#2,obRoutine(a0)
00014300 217C 0000 0000 0004        		move.l	#Map_LBlock,obMap(a0)
00014308 317C 43E6 0002             		move.w	#$43E6,obGfx(a0)
0001430E 117C 0004 0001             		move.b	#4,obRender(a0)
00014314 317C 0180 0018             		move.w	#$180,obPriority(a0)
0001431A 7000                       		moveq	#0,d0
0001431C 1028 0028                  		move.b	obSubtype(a0),d0 ; get block type
00014320 E648                       		lsr.w	#3,d0		; read only the 1st digit
00014322 0240 000E                  		andi.w	#$E,d0
00014326 45FB 00CC                  		lea	LBlk_Var(pc,d0.w),a2
0001432A 115A 0014                  		move.b	(a2)+,obActWid(a0) ; set width
0001432E 1152 0016                  		move.b	(a2),lblk_height(a0) ; set height
00014332 E248                       		lsr.w	#1,d0
00014334 1140 001A                  		move.b	d0,obFrame(a0)
00014338 3168 0008 0034             		move.w	obX(a0),lblk_origX(a0)
0001433E 3168 000C 0030             		move.w	obY(a0),lblk_origY(a0)
00014344 1028 0028                  		move.b	obSubtype(a0),d0 ; get block type
00014348 0200 000F                  		andi.b	#$F,d0		; read only the 2nd digit
0001434C 6700                       		beq.s	LBlk_Action	; branch if 0
0001434E 0C00 0007                  		cmpi.b	#7,d0
00014352 6700                       		beq.s	LBlk_Action	; branch if 7
00014354 117C 0001 0038             		move.b	#1,lblk_untouched(a0)
0001435A                            
0001435A                            LBlk_Action:	; Routine 2
0001435A 3F28 0008                  		move.w	obX(a0),-(sp)
0001435E 7000                       		moveq	#0,d0
00014360 1028 0028                  		move.b	obSubtype(a0),d0
00014364 0240 000F                  		andi.w	#$F,d0
00014368 D040                       		add.w	d0,d0
0001436A 323B 0000                  		move.w	@index(pc,d0.w),d1
0001436E 4EBB 1000                  		jsr	@index(pc,d1.w)
00014372 381F                       		move.w	(sp)+,d4
00014374 4A28 0001                  		tst.b	obRender(a0)
00014378 6A00                       		bpl.s	@chkdel
0001437A 7200                       		moveq	#0,d1
0001437C 1228 0014                  		move.b	obActWid(a0),d1
00014380 0641 000B                  		addi.w	#$B,d1
00014384 7400                       		moveq	#0,d2
00014386 1428 0016                  		move.b	lblk_height(a0),d2
0001438A 3602                       		move.w	d2,d3
0001438C 5243                       		addq.w	#1,d3
0001438E 6100 D90A                  		bsr.w	SolidObject
00014392 1144 003F                  		move.b	d4,$3F(a0)
00014396 6100 0000                  		bsr.w	loc_12180
0001439A                            
0001439A                            @chkdel:
000143B8 6000 B4D2                  		bra.w	DisplaySprite
000143BC                            ; ===========================================================================
000143BC 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
000143C0 0000 0000                  		dc.w @type02-@index, @type03-@index
000143C4 0000 0000                  		dc.w @type04-@index, @type05-@index
000143C8 0000 0000                  		dc.w @type06-@index, @type07-@index
000143CC                            ; ===========================================================================
000143CC                            
000143CC                            @type00:
000143CC 4E75                       		rts	
000143CE                            ; ===========================================================================
000143CE                            
000143CE                            @type01:
000143CE                            @type03:
000143CE 4A68 0036                  		tst.w	lblk_time(a0)	; does time remain?
000143D2 6600                       		bne.s	@wait01		; if yes, branch
000143D4 0828 0003 0022             		btst	#3,obStatus(a0)	; is Sonic standing on the object?
000143DA 6700                       		beq.s	@donothing01	; if not, branch
000143DC 317C 001E 0036             		move.w	#30,lblk_time(a0) ; wait for half second
000143E2                            
000143E2                            	@donothing01:
000143E2 4E75                       		rts	
000143E4                            ; ===========================================================================
000143E4                            
000143E4                            	@wait01:
000143E4 5368 0036                  		subq.w	#1,lblk_time(a0); decrement waiting time
000143E8 66F8                       		bne.s	@donothing01	; if time remains, branch
000143EA 5228 0028                  		addq.b	#1,obSubtype(a0) ; goto @type02 or @type04
000143EE 4228 0038                  		clr.b	lblk_untouched(a0) ; flag block as touched
000143F2 4E75                       		rts	
000143F4                            ; ===========================================================================
000143F4                            
000143F4                            @type02:
000143F4                            @type06:
000143F4 6100 B482                  		bsr.w	SpeedToPos
000143F8 5068 0012                  		addq.w	#8,obVelY(a0)	; make block fall
000143FC 6100 0000                  		bsr.w	ObjFloorDist
00014400 4A41                       		tst.w	d1		; has block hit the floor?
00014402 6A00 0000                  		bpl.w	@nofloor02	; if not, branch
00014406 5241                       		addq.w	#1,d1
00014408 D368 000C                  		add.w	d1,obY(a0)
0001440C 4268 0012                  		clr.w	obVelY(a0)	; stop when it touches the floor
00014410 4228 0028                  		clr.b	obSubtype(a0)	; set type to 00 (non-moving type)
00014414                            
00014414                            	@nofloor02:
00014414 4E75                       		rts	
00014416                            ; ===========================================================================
00014416                            
00014416                            @type04:
00014416 6100 B460                  		bsr.w	SpeedToPos
0001441A 5168 0012                  		subq.w	#8,obVelY(a0)	; make block rise
0001441E 6100 0000                  		bsr.w	ObjHitCeiling
00014422 4A41                       		tst.w	d1		; has block hit the ceiling?
00014424 6A00 0000                  		bpl.w	@noceiling04	; if not, branch
00014428 9368 000C                  		sub.w	d1,obY(a0)
0001442C 4268 0012                  		clr.w	obVelY(a0)	; stop when it touches the ceiling
00014430 4228 0028                  		clr.b	obSubtype(a0)	; set type to 00 (non-moving type)
00014434                            
00014434                            	@noceiling04:
00014434 4E75                       		rts	
00014436                            ; ===========================================================================
00014436                            
00014436                            @type05:
00014436 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	block?
0001443C 6600                       		bne.s	@notouch05	; if not, branch
0001443E 5228 0028                  		addq.b	#1,obSubtype(a0) ; goto @type06
00014442 4228 0038                  		clr.b	lblk_untouched(a0)
00014446                            
00014446                            	@notouch05:
00014446 4E75                       		rts	
00014448                            ; ===========================================================================
00014448                            
00014448                            @type07:
00014448 3038 F646                  		move.w	(v_waterpos1).w,d0
0001444C 9068 000C                  		sub.w	obY(a0),d0	; is block level with water?
00014450 6700                       		beq.s	@stop07		; if yes, branch
00014452 6400                       		bcc.s	@fall07		; branch if block is above water
00014454 0C40 FFFE                  		cmpi.w	#-2,d0
00014458 6C00                       		bge.s	@loc_1214E
0001445A 70FE                       		moveq	#-2,d0
0001445C                            
0001445C                            	@loc_1214E:
0001445C D168 000C                  		add.w	d0,obY(a0)	; make the block rise with water level
00014460 6100 0000                  		bsr.w	ObjHitCeiling
00014464 4A41                       		tst.w	d1		; has block hit the ceiling?
00014466 6A00 0000                  		bpl.w	@noceiling07	; if not, branch
0001446A 9368 000C                  		sub.w	d1,obY(a0)	; stop block
0001446E                            
0001446E                            	@noceiling07:
0001446E 4E75                       		rts	
00014470                            ; ===========================================================================
00014470                            
00014470                            @fall07:
00014470 0C40 0002                  		cmpi.w	#2,d0
00014474 6F00                       		ble.s	@loc_1216A
00014476 7002                       		moveq	#2,d0
00014478                            
00014478                            	@loc_1216A:
00014478 D168 000C                  		add.w	d0,obY(a0)	; make the block sink with water level
0001447C 6100 0000                  		bsr.w	ObjFloorDist
00014480 4A41                       		tst.w	d1
00014482 6A00 0000                  		bpl.w	@stop07
00014486 5241                       		addq.w	#1,d1
00014488 D368 000C                  		add.w	d1,obY(a0)
0001448C                            
0001448C                            	@stop07:
0001448C 4E75                       		rts	
0001448E                            ; ===========================================================================
0001448E                            
0001448E                            loc_12180:
0001448E 4A28 0038                  		tst.b	lblk_untouched(a0) ; has block been stood on or touched?
00014492 6700                       		beq.s	locret_121C0	; if yes, branch
00014494 0828 0003 0022             		btst	#3,obStatus(a0)	; is Sonic standing on it now?
0001449A 6600                       		bne.s	loc_1219A	; if yes, branch
0001449C 4A28 003E                  		tst.b	$3E(a0)
000144A0 6700                       		beq.s	locret_121C0
000144A2 5928 003E                  		subq.b	#4,$3E(a0)
000144A6 6000                       		bra.s	loc_121A6
000144A8                            ; ===========================================================================
000144A8                            
000144A8                            loc_1219A:
000144A8 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
000144AE 6700                       		beq.s	locret_121C0
000144B0 5828 003E                  		addq.b	#4,$3E(a0)
000144B4                            
000144B4                            loc_121A6:
000144B4 1028 003E                  		move.b	$3E(a0),d0
000144B8 4EB9 0000 3A32             		jsr	(CalcSine).l
000144BE 323C 0400                  		move.w	#$400,d1
000144C2 C1C1                       		muls.w	d1,d0
000144C4 4840                       		swap	d0
000144C6 D068 0030                  		add.w	lblk_origY(a0),d0
000144CA 3140 000C                  		move.w	d0,obY(a0)
000144CE                            
000144CE                            locret_121C0:
000144CE 4E75                       		rts	
000144CE 4E75                       		rts	
000144D0                            Map_LBlock:	include	"_maps\LZ Blocks.asm"
000144D0                            Map_6865:
000144D0 0000                       Map_6865_0: 	dc.w Map_6865_8-Map_6865
000144D2 0000                       Map_6865_2: 	dc.w Map_6865_E-Map_6865
000144D4 0000                       Map_6865_4: 	dc.w Map_6865_19-Map_6865
000144D6 0000                       Map_6865_6: 	dc.w Map_6865_1F-Map_6865
000144D8 01                         Map_6865_8: 	dc.b $1
000144D9 F00F 2000 F0               	dc.b $F0, $F, $20, $0, $F0
000144DE 02                         Map_6865_E: 	dc.b $2
000144DF F40E 0069 E0               	dc.b $F4, $E, $0, $69, $E0
000144E4 F40E 0075 00               	dc.b $F4, $E, $0, $75, $0
000144E9 01                         Map_6865_19: 	dc.b $1
000144EA F00F 011A F0               	dc.b $F0, $F, $1, $1A, $F0
000144EF 01                         Map_6865_1F: 	dc.b $1
000144F0 F00F FDFA F0               	dc.b $F0, $F, $FD, $FA, $F0
000144F6 00                         	even
000144F6 00                         	even
000144F6                            		include	"_incObj\62 Gargoyle.asm"
000144F6                            ; ---------------------------------------------------------------------------
000144F6                            ; Object 62 - gargoyle head (LZ)
000144F6                            ; ---------------------------------------------------------------------------
000144F6                            
000144F6                            Gargoyle:
000144F6 7000                       		moveq	#0,d0
000144F8 1028 0024                  		move.b	obRoutine(a0),d0
000144FC 323B 0000                  		move.w	Gar_Index(pc,d0.w),d1
00014500 4EBB 1000                  		jsr	Gar_Index(pc,d1.w)
00014504 6000 D2FC                  		bra.w	RememberState
00014508                            ; ===========================================================================
00014508 0000                       Gar_Index:	dc.w Gar_Main-Gar_Index
0001450A 0000                       		dc.w Gar_MakeFire-Gar_Index
0001450C 0000                       		dc.w Gar_FireBall-Gar_Index
0001450E 0000                       		dc.w Gar_AniFire-Gar_Index
00014510                            
00014510 1E3C 5A78 96B4 D2F0        Gar_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
00014518                            ; ===========================================================================
00014518                            
00014518                            Gar_Main:	; Routine 0
00014518 5428 0024                  		addq.b	#2,obRoutine(a0)
0001451C 217C 0000 0000 0004        		move.l	#Map_Gar,obMap(a0)
00014524 317C 42E9 0002             		move.w	#$42E9,obGfx(a0)
0001452A 0028 0004 0001             		ori.b	#4,obRender(a0)
00014530 317C 0180 0018             		move.w	#$180,obPriority(a0)
00014536 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001453C 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00014540 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00014544 117B 00CA 001F             		move.b	Gar_SpitRate(pc,d0.w),obDelayAni(a0) ; set fireball spit rate
0001454A 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
00014550 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
00014556                            
00014556                            Gar_MakeFire:	; Routine 2
00014556 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; decrement timer
0001455A 6600                       		bne.s	@nofire		; if time remains, branch
0001455C                            
0001455C 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0) ; reset timer
00014562 6100 B5A8                  		bsr.w	ChkObjectVisible
00014566 6600                       		bne.s	@nofire
00014568 6100 B7AE                  		bsr.w	FindFreeObj
0001456C 6600                       		bne.s	@nofire
0001456E 12BC 0062                  		move.b	#id_Gargoyle,0(a1) ; load fireball object
00014572 5829 0024                  		addq.b	#4,obRoutine(a1) ; use Gar_FireBall routine
00014576 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001457C 3368 000C 000C             		move.w	obY(a0),obY(a1)
00014582 1368 0001 0001             		move.b	obRender(a0),obRender(a1)
00014588 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
0001458E                            
0001458E                            	@nofire:
0001458E 4E75                       		rts	
00014590                            ; ===========================================================================
00014590                            
00014590                            Gar_FireBall:	; Routine 4
00014590 5428 0024                  		addq.b	#2,obRoutine(a0)
00014594 117C 0008 0016             		move.b	#8,obHeight(a0)
0001459A 117C 0008 0017             		move.b	#8,obWidth(a0)
000145A0 217C 0000 0000 0004        		move.l	#Map_Gar,obMap(a0)
000145A8 317C 02E9 0002             		move.w	#$2E9,obGfx(a0)
000145AE 0028 0004 0001             		ori.b	#4,obRender(a0)
000145B4 317C 0200 0018             		move.w	#$200,obPriority(a0)
000145BA 117C 0098 0020             		move.b	#$98,obColType(a0)
000145C0 117C 0008 0014             		move.b	#8,obActWid(a0)
000145C6 117C 0002 001A             		move.b	#2,obFrame(a0)
000145CC 5068 000C                  		addq.w	#8,obY(a0)
000145D0 317C 0200 0010             		move.w	#$200,obVelX(a0)
000145D6 0828 0000 0022             		btst	#0,obStatus(a0)	; is gargoyle facing left?
000145DC 6600                       		bne.s	@noflip		; if not, branch
000145DE 4468 0010                  		neg.w	obVelX(a0)
000145E2                            
000145E2                            	@noflip:
000145EC                            
000145EC                            Gar_AniFire:	; Routine 6
000145EC 1038 FE05                  		move.b	(v_framebyte).w,d0
000145F0 0200 0007                  		andi.b	#7,d0
000145F4 6600                       		bne.s	@nochg
000145F6 0868 0000 001A             		bchg	#0,obFrame(a0)	; change every 8 frames
000145FC                            
000145FC                            	@nochg:
000145FC 6100 B27A                  		bsr.w	SpeedToPos
00014600 0828 0000 0022             		btst	#0,obStatus(a0) ; is fireball moving left?
00014606 6600                       		bne.s	@isright	; if not, branch
00014608 76F8                       		moveq	#-8,d3
0001460A 6100 0000                  		bsr.w	ObjHitWallLeft
0001460E 4A41                       		tst.w	d1
00014610 6B00 B2BA                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00014614 4E75                       		rts	
00014616                            
00014616                            	@isright:
00014616 7608                       		moveq	#8,d3
00014618 6100 0000                  		bsr.w	ObjHitWallRight
0001461C 4A41                       		tst.w	d1
0001461E 6B00 B2AC                  		bmi.w	DeleteObject
00014622 4E75                       		rts	
00014622 4E75                       		rts	
00014624                            Map_Gar:	include	"_maps\Gargoyle.asm"
00014624                            ; ---------------------------------------------------------------------------
00014624                            ; Sprite mappings - gargoyle head (LZ)
00014624                            ; ---------------------------------------------------------------------------
00014624                            Map_Gar_internal:
00014624 0000                       		dc.w @head-Map_Gar_internal
00014626 0000                       		dc.w @head-Map_Gar_internal
00014628 0000                       		dc.w @fireball1-Map_Gar_internal
0001462A 0000                       		dc.w @fireball2-Map_Gar_internal
0001462C 03                         @head:		dc.b 3
0001462D F004 0000 00               		dc.b $F0, 4, 0,	0, 0
00014632 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00014637 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
0001463C 01                         @fireball1:	dc.b 1
0001463D FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
00014642 01                         @fireball2:	dc.b 1
00014643 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00014648                            		even
00014648                            		even
00014648                            		include	"_incObj\63 LZ Conveyor.asm"
00014648                            ; ---------------------------------------------------------------------------
00014648                            ; Object 63 - platforms	on a conveyor belt (LZ)
00014648                            ; ---------------------------------------------------------------------------
00014648                            
00014648                            LabyrinthConvey:
00014648 7000                       		moveq	#0,d0
0001464A 1028 0024                  		move.b	obRoutine(a0),d0
0001464E 323B 0000                  		move.w	LCon_Index(pc,d0.w),d1
00014652 4EBB 1000                  		jsr	LCon_Index(pc,d1.w)
00014672                            
00014672                            LCon_Display:
00014672 6000 B218                  		bra.w	DisplaySprite
00014676                            ; ===========================================================================
00014676                            
00014676                            loc_1236A:
00014676 0C38 0002 FE11             		cmpi.b	#2,(v_act).w
0001467C 6600                       		bne.s	loc_12378
0001467E 0C40 FF80                  		cmpi.w	#-$80,d0
00014682 64EE                       		bcc.s	LCon_Display
00014684                            
00014684                            loc_12378:
00014684 1028 002F                  		move.b	$2F(a0),d0
00014688 6A00 B242                  		bpl.w	DeleteObject
0001468C 0240 007F                  		andi.w	#$7F,d0
00014690 45F8 F7C1                  		lea	(v_obj63).w,a2
00014694 08B2 0000 0000             		bclr	#0,(a2,d0.w)
0001469A 6000 B230                  		bra.w	DeleteObject
0001469E                            ; ===========================================================================
0001469E 0000                       LCon_Index:	dc.w LCon_Main-LCon_Index
000146A0 0000                       		dc.w loc_124B2-LCon_Index
000146A2 0000                       		dc.w loc_124C2-LCon_Index
000146A4 0000                       		dc.w loc_124DE-LCon_Index
000146A6                            ; ===========================================================================
000146A6                            
000146A6                            LCon_Main:	; Routine 0
000146A6 1028 0028                  		move.b	obSubtype(a0),d0
000146AA 6B00 0000                  		bmi.w	loc_12460
000146AE 5428 0024                  		addq.b	#2,obRoutine(a0)
000146B2 217C 0000 0000 0004        		move.l	#Map_LConv,obMap(a0)
000146BA 317C 43F6 0002             		move.w	#$43F6,obGfx(a0)
000146C0 0028 0004 0001             		ori.b	#4,obRender(a0)
000146C6 117C 0010 0014             		move.b	#$10,obActWid(a0)
000146CC 317C 0200 0018             		move.w	#$200,obPriority(a0)
000146D2 0C28 007F 0028             		cmpi.b	#$7F,obSubtype(a0)
000146D8 6600                       		bne.s	loc_123E2
000146DA 5828 0024                  		addq.b	#4,obRoutine(a0)
000146DE 317C 03F6 0002             		move.w	#$3F6,obGfx(a0)
000146E4 317C 0080 0018             		move.w	#$80,obPriority(a0)
000146EA 6000 0000                  		bra.w	loc_124DE
000146EE                            ; ===========================================================================
000146EE                            
000146EE                            loc_123E2:
000146EE 117C 0004 001A             		move.b	#4,obFrame(a0)
000146F4 7000                       		moveq	#0,d0
000146F6 1028 0028                  		move.b	obSubtype(a0),d0
000146FA 3200                       		move.w	d0,d1
000146FC E648                       		lsr.w	#3,d0
000146FE 0240 001E                  		andi.w	#$1E,d0
00014702 45FA 0000                  		lea	LCon_Data(pc),a2
00014706 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001470A 315A 0038                  		move.w	(a2)+,$38(a0)
0001470E 315A 0030                  		move.w	(a2)+,$30(a0)
00014712 214A 003C                  		move.l	a2,$3C(a0)
00014716 0241 000F                  		andi.w	#$F,d1
0001471A E549                       		lsl.w	#2,d1
0001471C 1141 0038                  		move.b	d1,$38(a0)
00014720 117C 0004 003A             		move.b	#4,$3A(a0)
00014726 4A38 F7C0                  		tst.b	(f_conveyrev).w
0001472A 6700                       		beq.s	loc_1244C
0001472C 117C 0001 003B             		move.b	#1,$3B(a0)
00014732 4428 003A                  		neg.b	$3A(a0)
00014736 7200                       		moveq	#0,d1
00014738 1228 0038                  		move.b	$38(a0),d1
0001473C D228 003A                  		add.b	$3A(a0),d1
00014740 B228 0039                  		cmp.b	$39(a0),d1
00014744 6500                       		bcs.s	loc_12448
00014746 1001                       		move.b	d1,d0
00014748 7200                       		moveq	#0,d1
0001474A 4A00                       		tst.b	d0
0001474C 6A00                       		bpl.s	loc_12448
0001474E 1228 0039                  		move.b	$39(a0),d1
00014752 5901                       		subq.b	#4,d1
00014754                            
00014754                            loc_12448:
00014754 1141 0038                  		move.b	d1,$38(a0)
00014758                            
00014758                            loc_1244C:
00014758 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
0001475E 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00014764 6100 0000                  		bsr.w	LCon_ChangeDir
00014768 6000 0000                  		bra.w	loc_124B2
0001476C                            ; ===========================================================================
0001476C                            
0001476C                            loc_12460:
0001476C 1140 002F                  		move.b	d0,$2F(a0)
00014770 0240 007F                  		andi.w	#$7F,d0
00014774 45F8 F7C1                  		lea	(v_obj63).w,a2
00014778 08F2 0000 0000             		bset	#0,(a2,d0.w)
0001477E 6600 B14C                  		bne.w	DeleteObject
00014782 D040                       		add.w	d0,d0
00014784 0240 001E                  		andi.w	#$1E,d0
00014788 0640 0000                  		addi.w	#ObjPosLZPlatform_Index-ObjPos_Index,d0
0001478C 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00014792 D4F2 0000                  		adda.w	(a2,d0.w),a2
00014796 321A                       		move.w	(a2)+,d1
00014798 2248                       		movea.l	a0,a1
0001479A 6000                       		bra.s	LCon_MakePtfms
0001479C                            ; ===========================================================================
0001479C                            
0001479C                            LCon_Loop:
0001479C 6100 B57A                  		bsr.w	FindFreeObj
000147A0 6600                       		bne.s	loc_124AA
000147A2                            
000147A2                            LCon_MakePtfms:
000147A2 12BC 0063                  		move.b	#id_LabyrinthConvey,0(a1)
000147A6 335A 0008                  		move.w	(a2)+,obX(a1)
000147AA 335A 000C                  		move.w	(a2)+,obY(a1)
000147AE 301A                       		move.w	(a2)+,d0
000147B0 1340 0028                  		move.b	d0,obSubtype(a1)
000147B4                            
000147B4                            loc_124AA:
000147B4 51C9 FFE6                  		dbf	d1,LCon_Loop
000147B8                            
000147B8 588F                       		addq.l	#4,sp
000147BA 4E75                       		rts	
000147BC                            ; ===========================================================================
000147BC                            
000147BC                            loc_124B2:	; Routine 2
000147BC 7200                       		moveq	#0,d1
000147BE 1228 0014                  		move.b	obActWid(a0),d1
000147C2 4EB9 0000 905A             		jsr	(PlatformObject).l
000147C8 6000 0000                  		bra.w	sub_12502
000147CC                            ; ===========================================================================
000147CC                            
000147CC                            loc_124C2:	; Routine 4
000147CC 7200                       		moveq	#0,d1
000147CE 1228 0014                  		move.b	obActWid(a0),d1
000147D2 4EB9 0000 91CE             		jsr	(ExitPlatform).l
000147D8 3F28 0008                  		move.w	obX(a0),-(sp)
000147DC 6100 0000                  		bsr.w	sub_12502
000147E0 341F                       		move.w	(sp)+,d2
000147E2 4EF9 0000 9738             		jmp	(MvSonicOnPtfm2).l
000147E8                            ; ===========================================================================
000147E8                            
000147E8                            loc_124DE:	; Routine 6
000147E8 3038 FE04                  		move.w	(v_framecount).w,d0
000147EC 0240 0003                  		andi.w	#3,d0
000147F0 6600                       		bne.s	loc_124FC
000147F2 7201                       		moveq	#1,d1
000147F4 4A38 F7C0                  		tst.b	(f_conveyrev).w
000147F8 6700                       		beq.s	loc_124F2
000147FA 4401                       		neg.b	d1
000147FC                            
000147FC                            loc_124F2:
000147FC D328 001A                  		add.b	d1,obFrame(a0)
00014800 0228 0003 001A             		andi.b	#3,obFrame(a0)
00014806                            
00014806                            loc_124FC:
00014806 588F                       		addq.l	#4,sp
00014808 6000 CFF8                  		bra.w	RememberState
0001480C                            
0001480C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001480C                            
0001480C                            
0001480C                            sub_12502:
0001480C 4A38 F7EE                  		tst.b	(f_switch+$E).w
00014810 6700                       		beq.s	loc_12520
00014812 4A28 003B                  		tst.b	$3B(a0)
00014816 6600                       		bne.s	loc_12520
00014818 117C 0001 003B             		move.b	#1,$3B(a0)
0001481E 11FC 0001 F7C0             		move.b	#1,(f_conveyrev).w
00014824 4428 003A                  		neg.b	$3A(a0)
00014828 6000                       		bra.s	loc_12534
0001482A                            ; ===========================================================================
0001482A                            
0001482A                            loc_12520:
0001482A 3028 0008                  		move.w	obX(a0),d0
0001482E B068 0034                  		cmp.w	$34(a0),d0
00014832 6600                       		bne.s	loc_1256A
00014834 3028 000C                  		move.w	obY(a0),d0
00014838 B068 0036                  		cmp.w	$36(a0),d0
0001483C 6600                       		bne.s	loc_1256A
0001483E                            
0001483E                            loc_12534:
0001483E 7200                       		moveq	#0,d1
00014840 1228 0038                  		move.b	$38(a0),d1
00014844 D228 003A                  		add.b	$3A(a0),d1
00014848 B228 0039                  		cmp.b	$39(a0),d1
0001484C 6500                       		bcs.s	loc_12552
0001484E 1001                       		move.b	d1,d0
00014850 7200                       		moveq	#0,d1
00014852 4A00                       		tst.b	d0
00014854 6A00                       		bpl.s	loc_12552
00014856 1228 0039                  		move.b	$39(a0),d1
0001485A 5901                       		subq.b	#4,d1
0001485C                            
0001485C                            loc_12552:
0001485C 1141 0038                  		move.b	d1,$38(a0)
00014860 2268 003C                  		movea.l	$3C(a0),a1
00014864 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
0001486A 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00014870 6100 0000                  		bsr.w	LCon_ChangeDir
00014874                            
00014874                            loc_1256A:
00014874 6100 B002                  		bsr.w	SpeedToPos
00014878 4E75                       		rts	
0001487A                            ; End of function sub_12502
0001487A                            
0001487A                            
0001487A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001487A                            
0001487A                            
0001487A                            LCon_ChangeDir:
0001487A 7000                       		moveq	#0,d0
0001487C 343C FF00                  		move.w	#-$100,d2
00014880 3028 0008                  		move.w	obX(a0),d0
00014884 9068 0034                  		sub.w	$34(a0),d0
00014888 6400                       		bcc.s	loc_12584
0001488A 4440                       		neg.w	d0
0001488C 4442                       		neg.w	d2
0001488E                            
0001488E                            loc_12584:
0001488E 7200                       		moveq	#0,d1
00014890 363C FF00                  		move.w	#-$100,d3
00014894 3228 000C                  		move.w	obY(a0),d1
00014898 9268 0036                  		sub.w	$36(a0),d1
0001489C 6400                       		bcc.s	loc_12598
0001489E 4441                       		neg.w	d1
000148A0 4443                       		neg.w	d3
000148A2                            
000148A2                            loc_12598:
000148A2 B240                       		cmp.w	d0,d1
000148A4 6500                       		bcs.s	loc_125C2
000148A6 3028 0008                  		move.w	obX(a0),d0
000148AA 9068 0034                  		sub.w	$34(a0),d0
000148AE 6700                       		beq.s	loc_125AE
000148B0 48C0                       		ext.l	d0
000148B2 E180                       		asl.l	#8,d0
000148B4 81C1                       		divs.w	d1,d0
000148B6 4440                       		neg.w	d0
000148B8                            
000148B8                            loc_125AE:
000148B8 3140 0010                  		move.w	d0,obVelX(a0)
000148BC 3143 0012                  		move.w	d3,obVelY(a0)
000148C0 4840                       		swap	d0
000148C2 3140 000A                  		move.w	d0,obX+2(a0)
000148C6 4268 000E                  		clr.w	obY+2(a0)
000148CA 4E75                       		rts	
000148CC                            ; ===========================================================================
000148CC                            
000148CC                            loc_125C2:
000148CC 3228 000C                  		move.w	obY(a0),d1
000148D0 9268 0036                  		sub.w	$36(a0),d1
000148D4 6700                       		beq.s	loc_125D4
000148D6 48C1                       		ext.l	d1
000148D8 E181                       		asl.l	#8,d1
000148DA 83C0                       		divs.w	d0,d1
000148DC 4441                       		neg.w	d1
000148DE                            
000148DE                            loc_125D4:
000148DE 3141 0012                  		move.w	d1,obVelY(a0)
000148E2 3142 0010                  		move.w	d2,obVelX(a0)
000148E6 4841                       		swap	d1
000148E8 3141 000E                  		move.w	d1,obY+2(a0)
000148EC 4268 000A                  		clr.w	obX+2(a0)
000148F0 4E75                       		rts	
000148F2                            ; End of function LCon_ChangeDir
000148F2                            
000148F2                            ; ===========================================================================
000148F2 0000                       LCon_Data:	dc.w word_125F4-LCon_Data
000148F4 0000                       		dc.w word_12610-LCon_Data
000148F6 0000                       		dc.w word_12628-LCon_Data
000148F8 0000                       		dc.w word_1263C-LCon_Data
000148FA 0000                       		dc.w word_12650-LCon_Data
000148FC 0000                       		dc.w word_12668-LCon_Data
000148FE 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
0001490E 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
0001491A 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
0001492A 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00014932 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00014946 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
0001495A 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
00014972 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00014972 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00014986                            Map_LConv:	include	"_maps\LZ Conveyor.asm"
00014986                            ; ---------------------------------------------------------------------------
00014986                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00014986                            ; ---------------------------------------------------------------------------
00014986                            Map_LConv_internal:
00014986 0000                       		dc.w @wheel1-Map_LConv_internal
00014988 0000                       		dc.w @wheel2-Map_LConv_internal
0001498A 0000                       		dc.w @wheel3-Map_LConv_internal
0001498C 0000                       		dc.w @wheel4-Map_LConv_internal
0001498E 0000                       		dc.w @platform-Map_LConv_internal
00014990 01                         @wheel1:	dc.b 1
00014991 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00014996 01                         @wheel2:	dc.b 1
00014997 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0001499C 01                         @wheel3:	dc.b 1
0001499D F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
000149A2 01                         @wheel4:	dc.b 1
000149A3 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
000149A8 01                         @platform:	dc.b 1
000149A9 F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
000149AE                            		even
000149AE                            		even
000149AE                            		include	"_incObj\64 Bubbles.asm"
000149AE                            ; ---------------------------------------------------------------------------
000149AE                            ; Object 64 - bubbles (LZ)
000149AE                            ; ---------------------------------------------------------------------------
000149AE                            
000149AE                            Bubble:
000149AE 7000                       		moveq	#0,d0
000149B0 1028 0024                  		move.b	obRoutine(a0),d0
000149B4 323B 0000                  		move.w	Bub_Index(pc,d0.w),d1
000149B8 4EFB 1000                  		jmp	Bub_Index(pc,d1.w)
000149BC                            ; ===========================================================================
000149BC 0000                       Bub_Index:	dc.w Bub_Main-Bub_Index
000149BE 0000                       		dc.w Bub_Animate-Bub_Index
000149C0 0000                       		dc.w Bub_ChkWater-Bub_Index
000149C2 0000                       		dc.w Bub_Display-Bub_Index
000149C4 0000                       		dc.w Bub_Delete-Bub_Index
000149C6 0000                       		dc.w Bub_BblMaker-Bub_Index
000149C8                            
000149C8 =0000002E                  bub_inhalable:	equ $2E		; flag set when bubble is collectable
000149C8 =00000030                  bub_origX:	equ $30		; original x-axis position
000149C8 =00000032                  bub_time:	equ $32		; time until next bubble spawn
000149C8 =00000033                  bub_freq:	equ $33		; frequency of bubble spawn
000149C8                            ; ===========================================================================
000149C8                            
000149C8                            Bub_Main:	; Routine 0
000149C8 5428 0024                  		addq.b	#2,obRoutine(a0)
000149CC 217C 0000 0000 0004        		move.l	#Map_Bub,obMap(a0)
000149D4 317C 8348 0002             		move.w	#$8348,obGfx(a0)
000149DA 117C 0084 0001             		move.b	#$84,obRender(a0)
000149E0 117C 0010 0014             		move.b	#$10,obActWid(a0)
000149E6 317C 0080 0018             		move.w	#$80,obPriority(a0)
000149EC 1028 0028                  		move.b	obSubtype(a0),d0 ; get bubble type
000149F0 6A00                       		bpl.s	@bubble		; if type is $0-$7F, branch
000149F2                            
000149F2 5028 0024                  		addq.b	#8,obRoutine(a0) ; goto Bub_BblMaker next
000149F6 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
000149FA 1140 0032                  		move.b	d0,bub_time(a0)
000149FE 1140 0033                  		move.b	d0,bub_freq(a0)	; set bubble frequency
00014A02 117C 0006 001C             		move.b	#6,obAnim(a0)
00014A08 6000 0000                  		bra.w	Bub_BblMaker
00014A0C                            ; ===========================================================================
00014A0C                            
00014A0C                            @bubble:
00014A0C 1140 001C                  		move.b	d0,obAnim(a0)
00014A10 3168 0008 0030             		move.w	obX(a0),bub_origX(a0)
00014A16 317C FF78 0012             		move.w	#-$88,obVelY(a0) ; float bubble upwards
00014A1C 4EB9 0000 3A0C             		jsr	(RandomNumber).l
00014A22 1140 0026                  		move.b	d0,obAngle(a0)
00014A26                            
00014A26                            Bub_Animate:	; Routine 2
00014A26 43F9 0000 0000             		lea	(Ani_Bub).l,a1
00014A2C 4EB9 0000 C938             		jsr	(AnimateSprite).l
00014A32 0C28 0006 001A             		cmpi.b	#6,obFrame(a0)	; is bubble full-size?
00014A38 6600                       		bne.s	Bub_ChkWater	; if not, branch
00014A3A                            
00014A3A 117C 0001 002E             		move.b	#1,bub_inhalable(a0) ; set "inhalable" flag
00014A40                            
00014A40                            Bub_ChkWater:	; Routine 4
00014A40 3038 F646                  		move.w	(v_waterpos1).w,d0
00014A44 B068 000C                  		cmp.w	obY(a0),d0	; is bubble underwater?
00014A48 6500                       		bcs.s	@wobble		; if yes, branch
00014A4A                            
00014A4A                            @burst:
00014A4A 117C 0006 0024             		move.b	#6,obRoutine(a0) ; goto Bub_Display next
00014A50 5628 001C                  		addq.b	#3,obAnim(a0)	; run "bursting" animation
00014A54 6000 0000                  		bra.w	Bub_Display
00014A58                            ; ===========================================================================
00014A58                            
00014A58                            @wobble:
00014A58 1028 0026                  		move.b	obAngle(a0),d0
00014A5C 5228 0026                  		addq.b	#1,obAngle(a0)
00014A60 0240 007F                  		andi.w	#$7F,d0
00014A64 43F9 0000 0000             		lea	(Drown_WobbleData).l,a1
00014A6A 1031 0000                  		move.b	(a1,d0.w),d0
00014A6E 4880                       		ext.w	d0
00014A70 D068 0030                  		add.w	bub_origX(a0),d0
00014A74 3140 0008                  		move.w	d0,obX(a0)	; change bubble's x-axis position
00014A78 4A28 002E                  		tst.b	bub_inhalable(a0)
00014A7C 6700                       		beq.s	@display
00014A7E 6100 0000                  		bsr.w	Bub_ChkSonic	; has Sonic touched the	bubble?
00014A82 6700                       		beq.s	@display	; if not, branch
00014A84                            
00014A84 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
00014A92 43F8 D000                  		lea	(v_player).w,a1
00014A96 4269 0010                  		clr.w	obVelX(a1)
00014A9A 4269 0012                  		clr.w	obVelY(a1)
00014A9E 4269 0020                  		clr.w	obInertia(a1)	; stop Sonic
00014AA2 137C 0000 001C             		move.b	#id_GetAir,obAnim(a1) ; use bubble-collecting animation
00014AA8 337C 0023 003E             		move.w	#$23,$3E(a1)
00014AAE 137C 0000 003C             		move.b	#0,$3C(a1)
00014AB4 08A9 0005 0022             		bclr	#5,obStatus(a1)
00014ABA 08A9 0004 0022             		bclr	#4,obStatus(a1)
00014AC0 0829 0002 0022             		btst	#2,obStatus(a1)
00014AC6 6700 FF82                  		beq.w	@burst
00014ACA 08A9 0002 0022             		bclr	#2,obStatus(a1)
00014AD0 137C 0013 0016             		move.b	#$13,obHeight(a1)
00014AD6 137C 0009 0017             		move.b	#9,obWidth(a1)
00014ADC 5B69 000C                  		subq.w	#5,obY(a1)
00014AE0 6000 FF68                  		bra.w	@burst
00014AE4                            ; ===========================================================================
00014AE4                            
00014AE4                            @display:
00014AE4 6100 AD92                  		bsr.w	SpeedToPos
00014AE8 4A28 0001                  		tst.b	obRender(a0)
00014AEC 6A00                       		bpl.s	@delete
00014AEE 4EF9 0000 F88C             		jmp	(DisplaySprite).l
00014AF4                            
00014AF4                            	@delete:
00014AF4 4EF9 0000 F8CC             		jmp	(DeleteObject).l
00014AFA                            ; ===========================================================================
00014AFA                            
00014AFA                            Bub_Display:	; Routine 6
00014AFA 43F9 0000 0000             		lea	(Ani_Bub).l,a1
00014B00 4EB9 0000 C938             		jsr	(AnimateSprite).l
00014B06 4A28 0001                  		tst.b	obRender(a0)
00014B0A 6A00                       		bpl.s	@delete
00014B0C 4EF9 0000 F88C             		jmp	(DisplaySprite).l
00014B12                            
00014B12                            	@delete:
00014B12 4EF9 0000 F8CC             		jmp	(DeleteObject).l
00014B18                            ; ===========================================================================
00014B18                            
00014B18                            Bub_Delete:	; Routine 8
00014B18 6000 ADB2                  		bra.w	DeleteObject
00014B1C                            ; ===========================================================================
00014B1C                            
00014B1C                            Bub_BblMaker:	; Routine $A
00014B1C 4A68 0036                  		tst.w	$36(a0)
00014B20 6600                       		bne.s	@loc_12874
00014B22 3038 F646                  		move.w	(v_waterpos1).w,d0
00014B26 B068 000C                  		cmp.w	obY(a0),d0	; is bubble maker underwater?
00014B2A 6400 0000                  		bcc.w	@chkdel		; if not, branch
00014B2E 4A28 0001                  		tst.b	obRender(a0)
00014B32 6A00 0000                  		bpl.w	@chkdel
00014B36 5368 0038                  		subq.w	#1,$38(a0)
00014B3A 6A00 0000                  		bpl.w	@loc_12914
00014B3E 317C 0001 0036             		move.w	#1,$36(a0)
00014B44                            
00014B44                            	@tryagain:
00014B44 4EB9 0000 3A0C             		jsr	(RandomNumber).l
00014B4A 3200                       		move.w	d0,d1
00014B4C 0240 0007                  		andi.w	#7,d0
00014B50 0C40 0006                  		cmpi.w	#6,d0		; random number over 6?
00014B54 64EE                       		bcc.s	@tryagain	; if yes, branch
00014B56                            
00014B56 1140 0034                  		move.b	d0,$34(a0)
00014B5A 0241 000C                  		andi.w	#$C,d1
00014B5E 43F9 0000 0000             		lea	(Bub_BblTypes).l,a1
00014B64 D2C1                       		adda.w	d1,a1
00014B66 2149 003C                  		move.l	a1,$3C(a0)
00014B6A 5328 0032                  		subq.b	#1,bub_time(a0)
00014B6E 6A00                       		bpl.s	@loc_12872
00014B70 1168 0033 0032             		move.b	bub_freq(a0),bub_time(a0)
00014B76 08E8 0007 0036             		bset	#7,$36(a0)
00014B7C                            
00014B7C                            @loc_12872:
00014B7C 6000                       		bra.s	@loc_1287C
00014B7E                            ; ===========================================================================
00014B7E                            
00014B7E                            @loc_12874:
00014B7E 5368 0038                  		subq.w	#1,$38(a0)
00014B82 6A00 0000                  		bpl.w	@loc_12914
00014B86                            
00014B86                            @loc_1287C:
00014B86 4EB9 0000 3A0C             		jsr	(RandomNumber).l
00014B8C 0240 001F                  		andi.w	#$1F,d0
00014B90 3140 0038                  		move.w	d0,$38(a0)
00014B94 6100 B182                  		bsr.w	FindFreeObj
00014B98 6600                       		bne.s	@fail
00014B9A 12BC 0064                  		move.b	#id_Bubble,0(a1) ; load bubble object
00014B9E 3368 0008 0008             		move.w	obX(a0),obX(a1)
00014BA4 4EB9 0000 3A0C             		jsr	(RandomNumber).l
00014BAA 0240 000F                  		andi.w	#$F,d0
00014BAE 5140                       		subq.w	#8,d0
00014BB0 D169 0008                  		add.w	d0,obX(a1)
00014BB4 3368 000C 000C             		move.w	obY(a0),obY(a1)
00014BBA 7000                       		moveq	#0,d0
00014BBC 1028 0034                  		move.b	$34(a0),d0
00014BC0 2468 003C                  		movea.l	$3C(a0),a2
00014BC4 1372 0000 0028             		move.b	(a2,d0.w),obSubtype(a1)
00014BCA 0828 0007 0036             		btst	#7,$36(a0)
00014BD0 6700                       		beq.s	@fail
00014BD2 4EB9 0000 3A0C             		jsr	(RandomNumber).l
00014BD8 0240 0003                  		andi.w	#3,d0
00014BDC 6600                       		bne.s	@loc_buh
00014BDE 08E8 0006 0036             		bset	#6,$36(a0)
00014BE4 6600                       		bne.s	@fail
00014BE6 137C 0002 0028             		move.b	#2,obSubtype(a1)
00014BEC                            
00014BEC                            @loc_buh:
00014BEC 4A28 0034                  		tst.b	$34(a0)
00014BF0 6600                       		bne.s	@fail
00014BF2 08E8 0006 0036             		bset	#6,$36(a0)
00014BF8 6600                       		bne.s	@fail
00014BFA 137C 0002 0028             		move.b	#2,obSubtype(a1)
00014C00                            
00014C00                            	@fail:
00014C00 5328 0034                  		subq.b	#1,$34(a0)
00014C04 6A00                       		bpl.s	@loc_12914
00014C06 4EB9 0000 3A0C             		jsr	(RandomNumber).l
00014C0C 0240 007F                  		andi.w	#$7F,d0
00014C10 0640 0080                  		addi.w	#$80,d0
00014C14 D168 0038                  		add.w	d0,$38(a0)
00014C18 4268 0036                  		clr.w	$36(a0)
00014C1C                            
00014C1C                            @loc_12914:
00014C1C 43F9 0000 0000             		lea	(Ani_Bub).l,a1
00014C22 4EB9 0000 C938             		jsr	(AnimateSprite).l
00014C28                            
00014C28                            @chkdel:
00014C46 3038 F646                  		move.w	(v_waterpos1).w,d0
00014C4A B068 000C                  		cmp.w	obY(a0),d0
00014C4E 6500 AC3C                  		bcs.w	DisplaySprite
00014C52 4E75                       		rts	
00014C54                            ; ===========================================================================
00014C54                            ; bubble production sequence
00014C54                            
00014C54                            ; 0 = small bubble, 1 =	large bubble
00014C54                            
00014C54 0001 0000 0000 0100 0000+  Bub_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
00014C66                            
00014C66                            ; ===========================================================================
00014C66                            
00014C66                            Bub_ChkSonic:
00014C66 4A38 F7C8                  		tst.b	(f_lockmulti).w
00014C6A 6B00                       		bmi.s	@loc_12998
00014C6C 43F8 D000                  		lea	(v_player).w,a1
00014C70 3029 0008                  		move.w	obX(a1),d0
00014C74 3228 0008                  		move.w	obX(a0),d1
00014C78 0441 0010                  		subi.w	#$10,d1
00014C7C B240                       		cmp.w	d0,d1
00014C7E 6400                       		bcc.s	@loc_12998
00014C80 0641 0020                  		addi.w	#$20,d1
00014C84 B240                       		cmp.w	d0,d1
00014C86 6500                       		bcs.s	@loc_12998
00014C88 3029 000C                  		move.w	obY(a1),d0
00014C8C 3228 000C                  		move.w	obY(a0),d1
00014C90 B240                       		cmp.w	d0,d1
00014C92 6400                       		bcc.s	@loc_12998
00014C94 0641 0010                  		addi.w	#$10,d1
00014C98 B240                       		cmp.w	d0,d1
00014C9A 6500                       		bcs.s	@loc_12998
00014C9C 7001                       		moveq	#1,d0
00014C9E 4E75                       		rts	
00014CA0                            ; ===========================================================================
00014CA0                            
00014CA0                            @loc_12998:
00014CA0 7000                       		moveq	#0,d0
00014CA2 4E75                       		rts	
00014CA2 4E75                       		rts	
00014CA4                            		include	"_anim\Bubbles.asm"
00014CA4                            ; ---------------------------------------------------------------------------
00014CA4                            ; Animation script - bubbles (LZ)
00014CA4                            ; ---------------------------------------------------------------------------
00014CA4 0000                       Ani_Bub:	dc.w @small-Ani_Bub
00014CA6 0000                       		dc.w @medium-Ani_Bub
00014CA8 0000                       		dc.w @large-Ani_Bub
00014CAA 0000                       		dc.w @incroutine-Ani_Bub
00014CAC 0000                       		dc.w @incroutine-Ani_Bub
00014CAE 0000                       		dc.w @burst-Ani_Bub
00014CB0 0000                       		dc.w @bubmaker-Ani_Bub
00014CB2 0D00 0102 FC               @small:		dc.b $D, 0, 1, 2, afRoutine ; small bubble forming
00014CB8 00                         		even
00014CB8 0D01 0203 04FC             @medium:	dc.b $D, 1, 2, 3, 4, afRoutine ; medium bubble forming
00014CBE 0D02 0304 0506 FC          @large:		dc.b $D, 2, 3, 4, 5, 6,	afRoutine ; full size bubble forming
00014CC6 00                         		even
00014CC6 04FC                       @incroutine:	dc.b 4,	afRoutine	; increment routine counter (no animation)
00014CC8 0406 0708 FC               @burst:		dc.b 4,	6, 7, 8, afRoutine ; large bubble bursts
00014CCE 00                         		even
00014CCE 0E13 1415 FF               @bubmaker:	dc.b $E, $13, $14, $15,	afEnd ; bubble maker on the floor
00014CD4 00                         		even
00014CD4 00                         		even
00014CD4                            Map_Bub:	include	"_maps\Bubbles.asm"
00014CD4                            ; ---------------------------------------------------------------------------
00014CD4                            ; Sprite mappings - bubbles (LZ)
00014CD4                            ; ---------------------------------------------------------------------------
00014CD4                            Map_Bub_internal:
00014CD4 0000                       		dc.w @bubble1-Map_Bub_internal
00014CD6 0000                       		dc.w @bubble2-Map_Bub_internal
00014CD8 0000                       		dc.w @bubble3-Map_Bub_internal
00014CDA 0000                       		dc.w @bubble4-Map_Bub_internal
00014CDC 0000                       		dc.w @bubble5-Map_Bub_internal
00014CDE 0000                       		dc.w @bubble6-Map_Bub_internal
00014CE0 0000                       		dc.w @bubblefull-Map_Bub_internal
00014CE2 0000                       		dc.w @burst1-Map_Bub_internal
00014CE4 0000                       		dc.w @burst2-Map_Bub_internal
00014CE6 0000                       		dc.w @zero_sm-Map_Bub_internal
00014CE8 0000                       		dc.w @five_sm-Map_Bub_internal
00014CEA 0000                       		dc.w @three_sm-Map_Bub_internal
00014CEC 0000                       		dc.w @one_sm-Map_Bub_internal
00014CEE 0000                       		dc.w @zero-Map_Bub_internal
00014CF0 0000                       		dc.w @five-Map_Bub_internal
00014CF2 0000                       		dc.w @four-Map_Bub_internal
00014CF4 0000                       		dc.w @three-Map_Bub_internal
00014CF6 0000                       		dc.w @two-Map_Bub_internal
00014CF8 0000                       		dc.w @one-Map_Bub_internal
00014CFA 0000                       		dc.w @bubmaker1-Map_Bub_internal
00014CFC 0000                       		dc.w @bubmaker2-Map_Bub_internal
00014CFE 0000                       		dc.w @bubmaker3-Map_Bub_internal
00014D00 0000                       		dc.w @blank-Map_Bub_internal
00014D02 01                         @bubble1:	dc.b 1
00014D03 FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC	; bubbles, increasing in size
00014D08 01                         @bubble2:	dc.b 1
00014D09 FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
00014D0E 01                         @bubble3:	dc.b 1
00014D0F FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
00014D14 01                         @bubble4:	dc.b 1
00014D15 F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
00014D1A 01                         @bubble5:	dc.b 1
00014D1B F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
00014D20 01                         @bubble6:	dc.b 1
00014D21 F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
00014D26 01                         @bubblefull:	dc.b 1
00014D27 F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
00014D2C 04                         @burst1:	dc.b 4
00014D2D F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0 ; large bubble bursting
00014D32 F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
00014D37 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
00014D3C 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
00014D41 04                         @burst2:	dc.b 4
00014D42 F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00014D47 F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
00014D4C 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
00014D51 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00014D56 01                         @zero_sm:	dc.b 1
00014D57 F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8 ; small, partially-formed countdown numbers
00014D5C 01                         @five_sm:	dc.b 1
00014D5D F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
00014D62 01                         @three_sm:	dc.b 1
00014D63 F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
00014D68 01                         @one_sm:	dc.b 1
00014D69 F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
00014D6E 01                         @zero:		dc.b 1
00014D6F F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8 ; fully-formed countdown numbers
00014D74 01                         @five:		dc.b 1
00014D75 F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
00014D7A 01                         @four:		dc.b 1
00014D7B F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
00014D80 01                         @three:		dc.b 1
00014D81 F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
00014D86 01                         @two:		dc.b 1
00014D87 F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
00014D8C 01                         @one:		dc.b 1
00014D8D F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
00014D92 01                         @bubmaker1:	dc.b 1
00014D93 F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
00014D98 01                         @bubmaker2:	dc.b 1
00014D99 F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
00014D9E 01                         @bubmaker3:	dc.b 1
00014D9F F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
00014DA4 00                         @blank:		dc.b 0
00014DA6 00                         		even
00014DA6 00                         		even
00014DA6                            		include	"_incObj\65 Waterfalls.asm"
00014DA6                            ; ---------------------------------------------------------------------------
00014DA6                            ; Object 65 - waterfalls (LZ)
00014DA6                            ; ---------------------------------------------------------------------------
00014DA6                            
00014DA6                            Waterfall:
00014DA6 7000                       		moveq	#0,d0
00014DA8 1028 0024                  		move.b	obRoutine(a0),d0
00014DAC 323B 0000                  		move.w	WFall_Index(pc,d0.w),d1
00014DB0 4EFB 1000                  		jmp	WFall_Index(pc,d1.w)
00014DB4                            ; ===========================================================================
00014DB4 0000                       WFall_Index:	dc.w WFall_Main-WFall_Index
00014DB6 0000                       		dc.w WFall_Animate-WFall_Index
00014DB8 0000                       		dc.w WFall_ChkDel-WFall_Index
00014DBA 0000                       		dc.w WFall_OnWater-WFall_Index
00014DBC 0000                       		dc.w loc_12B36-WFall_Index
00014DBE                            ; ===========================================================================
00014DBE                            
00014DBE                            WFall_Main:	; Routine 0
00014DBE 5828 0024                  		addq.b	#4,obRoutine(a0)
00014DC2 217C 0000 0000 0004        		move.l	#Map_WFall,obMap(a0)
00014DCA 317C 4259 0002             		move.w	#$4259,obGfx(a0)
00014DD0 0028 0004 0001             		ori.b	#4,obRender(a0)
00014DD6 117C 0018 0014             		move.b	#$18,obActWid(a0)
00014DDC 317C 0080 0018             		move.w	#$80,obPriority(a0)
00014DE2 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00014DE6 6A00                       		bpl.s	@under80	; branch if $00-$7F
00014DE8 08E8 0007 0002             		bset	#7,obGfx(a0)
00014DEE                            
00014DEE                            	@under80:
00014DEE 0200 000F                  		andi.b	#$F,d0		; read only the	2nd digit
00014DF2 1140 001A                  		move.b	d0,obFrame(a0)	; set frame number
00014DF6 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
00014DFA 6600                       		bne.s	WFall_ChkDel	; if not, branch
00014DFC                            
00014DFC 4228 0018                  		clr.b	obPriority(a0)	; object is in front of Sonic
00014E00 5528 0024                  		subq.b	#2,obRoutine(a0) ; goto WFall_Animate next
00014E04 0828 0006 0028             		btst	#6,obSubtype(a0) ; is object type $49 ?
00014E0A 6700                       		beq.s	@not49		; if not, branch
00014E0C                            
00014E0C 117C 0006 0024             		move.b	#6,obRoutine(a0) ; goto WFall_OnWater next
00014E12                            
00014E12                            	@not49:
00014E12 0828 0005 0028             		btst	#5,obSubtype(a0) ; is object type $A9 ?
00014E18 6700                       		beq.s	WFall_Animate	; if not, branch
00014E1A 117C 0008 0024             		move.b	#8,obRoutine(a0) ; goto loc_12B36 next
00014E20                            
00014E20                            WFall_Animate:	; Routine 2
00014E20 43F9 0000 0000             		lea	(Ani_WFall).l,a1
00014E26 4EB9 0000 C938             		jsr	(AnimateSprite).l
00014E2C                            
00014E2C                            WFall_ChkDel:	; Routine 4
00014E2C 6000 C9D4                  		bra.w	RememberState
00014E30                            ; ===========================================================================
00014E30                            
00014E30                            WFall_OnWater:	; Routine 6
00014E30 3038 F646                  		move.w	(v_waterpos1).w,d0
00014E34 0440 0010                  		subi.w	#$10,d0
00014E38 3140 000C                  		move.w	d0,obY(a0)	; match	object position	to water height
00014E3C 60E2                       		bra.s	WFall_Animate
00014E3E                            ; ===========================================================================
00014E3E                            
00014E3E                            loc_12B36:	; Routine 8
00014E3E 08A8 0007 0002             		bclr	#7,obGfx(a0)
00014E44 0C38 0007 A506             		cmpi.b	#7,(v_lvllayout+$106).w
00014E4A 6600                       		bne.s	@animate
00014E4C 08E8 0007 0002             		bset	#7,obGfx(a0)
00014E52                            
00014E52                            	@animate:
00014E52 60CC                       		bra.s	WFall_Animate
00014E52 60CC                       		bra.s	WFall_Animate
00014E54                            		include	"_anim\Waterfalls.asm"
00014E54                            ; ---------------------------------------------------------------------------
00014E54                            ; Animation script - waterfall (LZ)
00014E54                            ; ---------------------------------------------------------------------------
00014E54 0000                       Ani_WFall:	dc.w @splash-Ani_WFall
00014E56 0509 0A0B FF               @splash:	dc.b 5,	9, $A, $B, afEnd
00014E5C 00                         		even
00014E5C 00                         		even
00014E5C                            Map_WFall	include	"_maps\Waterfalls.asm"
00014E5C                            ; ---------------------------------------------------------------------------
00014E5C                            ; Sprite mappings - waterfalls (LZ)
00014E5C                            ; ---------------------------------------------------------------------------
00014E5C                            Map_WFall_internal:
00014E5C 0000                       		dc.w @vertnarrow-Map_WFall_internal
00014E5E 0000                       		dc.w @cornerwide-Map_WFall_internal
00014E60 0000                       		dc.w @cornermedium-Map_WFall_internal
00014E62 0000                       		dc.w @cornernarrow-Map_WFall_internal
00014E64 0000                       		dc.w @cornermedium2-Map_WFall_internal
00014E66 0000                       		dc.w @cornernarrow2-Map_WFall_internal
00014E68 0000                       		dc.w @cornernarrow3-Map_WFall_internal
00014E6A 0000                       		dc.w @vertwide-Map_WFall_internal
00014E6C 0000                       		dc.w @diagonal-Map_WFall_internal
00014E6E 0000                       		dc.w @splash1-Map_WFall_internal
00014E70 0000                       		dc.w @splash2-Map_WFall_internal
00014E72 0000                       		dc.w @splash3-Map_WFall_internal
00014E74 01                         @vertnarrow:	dc.b 1
00014E75 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00014E7A 02                         @cornerwide:	dc.b 2
00014E7B F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
00014E80 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
00014E85 02                         @cornermedium:	dc.b 2
00014E86 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00014E8B 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00014E90 01                         @cornernarrow:	dc.b 1
00014E91 F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
00014E96 02                         @cornermedium2:	dc.b 2
00014E97 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00014E9C 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00014EA1 01                         @cornernarrow2:	dc.b 1
00014EA2 F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
00014EA7 01                         @cornernarrow3:	dc.b 1
00014EA8 F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
00014EAD 01                         @vertwide:	dc.b 1
00014EAE F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
00014EB3 02                         @diagonal:	dc.b 2
00014EB4 F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
00014EB9 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
00014EBE 02                         @splash1:	dc.b 2
00014EBF F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
00014EC4 F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
00014EC9 02                         @splash2:	dc.b 2
00014ECA F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
00014ECF F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
00014ED4 02                         @splash3:	dc.b 2
00014ED5 F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
00014EDA F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
00014EE0 00                         		even
00014EE0 00                         		even
00014EE0                            
00014EE0                            
00014EE0                            SpinDash_dust:
00014EE0                            Sprite_1DD20:				; DATA XREF: ROM:0001600C?o
00014EE0 7000                       		moveq	#0,d0
00014EE2 1028 0024                  		move.b	$24(a0),d0
00014EE6 323B 0000                  		move	off_1DD2E(pc,d0.w),d1
00014EEA 4EFB 1000                  		jmp	off_1DD2E(pc,d1.w)
00014EEE                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014EEE 0000                       off_1DD2E:	dc loc_1DD36-off_1DD2E; 0 ; DATA XREF: h+6DBA?o h+6DBC?o ...
00014EF0 0000                       		dc loc_1DD90-off_1DD2E; 1
00014EF2 0000                       		dc loc_1DE46-off_1DD2E; 2
00014EF4 0000                       		dc loc_1DE4A-off_1DD2E; 3
00014EF6                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014EF6                            
00014EF6                            loc_1DD36:				; DATA XREF: h+6DBA?o
00014EF6 5428 0024                  		addq.b	#2,$24(a0)
00014EFA 217C 0000 0000 0004        		move.l	#MapUnc_1DF5E,4(a0)
00014F02 0028 0004 0001             		or.b	#4,1(a0)
00014F08 317C 0080 0018             		move.w	#$80,obPriority(a0)
00014F0E 117C 0010 0014             		move.b	#$10,obActWid(a0)
00014F14 317C 07AC 0002             		move	#$7AC,2(a0)
00014F1A 317C D000 003E             		move	#-$3000,$3E(a0)
00014F20 317C F580 003C             		move	#$F580,$3C(a0)
00014F26 B0FC D1C0                  		cmp	#-$2E40,a0
00014F2A 6700                       		beq.s	loc_1DD8C
00014F2C 117C 0001 0034             		move.b	#1,$34(a0)
00014F32                            ;		cmp	#2,($FFFFFF70).w
00014F32                            ;		beq.s	loc_1DD8C
00014F32                            ;		move	#$48C,2(a0)
00014F32                            ;		move	#-$4FC0,$3E(a0)
00014F32                            ;		move	#-$6E80,$3C(a0)
00014F32                            
00014F32                            loc_1DD8C:				; CODE XREF: h+6DF6?j h+6E04?j
00014F32                            ;		bsr.w	sub_16D6E
00014F32                            
00014F32                            loc_1DD90:				; DATA XREF: h+6DBA?o
00014F32 3468 003E                  		movea.w	$3E(a0),a2
00014F36 7000                       		moveq	#0,d0
00014F38 1028 001C                  		move.b	$1C(a0),d0
00014F3C D040                       		add	d0,d0
00014F3E 323B 0000                  		move	off_1DDA4(pc,d0.w),d1
00014F42 4EFB 1000                  		jmp	off_1DDA4(pc,d1.w)
00014F46                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014F46 0000                       off_1DDA4:	dc loc_1DE28-off_1DDA4; 0 ; DATA XREF: h+6E30?o h+6E32?o ...
00014F48 0000                       		dc loc_1DDAC-off_1DDA4; 1
00014F4A 0000                       		dc loc_1DDCC-off_1DDA4; 2
00014F4C 0000                       		dc loc_1DE20-off_1DDA4; 3
00014F4E                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014F4E                            
00014F4E                            loc_1DDAC:				; DATA XREF: h+6E30?o
00014F4E 3178 F646 000C             		move	($FFFFF646).w,$C(a0)
00014F54 4A28 001D                  		tst.b	$1D(a0)
00014F58 6600                       		bne.s	loc_1DE28
00014F5A 316A 0008 0008             		move	8(a2),8(a0)
00014F60 117C 0000 0022             		move.b	#0,$22(a0)
00014F66 0268 7FFF 0002             		and	#$7FFF,2(a0)
00014F6C 6000                       		bra.s	loc_1DE28
00014F6E                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014F6E                            
00014F6E                            loc_1DDCC:				; DATA XREF: h+6E30?o
00014F6E                            ;		cmp.b	#$C,$28(a2)
00014F6E                            ;		bcs.s	loc_1DE3E
00014F6E 0C2A 0004 0024             		cmp.b	#4,$24(a2)
00014F74 6400                       		bcc.s	loc_1DE3E
00014F76 4A2A 0039                  		tst.b	$39(a2)
00014F7A 6700                       		beq.s	loc_1DE3E
00014F7C 316A 0008 0008             		move	8(a2),8(a0)
00014F82 316A 000C 000C             		move	$C(a2),$C(a0)
00014F88 116A 0022 0022             		move.b	$22(a2),$22(a0)
00014F8E 0228 0001 0022             		and.b	#1,$22(a0)
00014F94 4A28 0034                  		tst.b	$34(a0)
00014F98 6700                       		beq.s	loc_1DE06
00014F9A 5968 000C                  		sub	#4,$C(a0)
00014F9E                            
00014F9E                            loc_1DE06:				; CODE XREF: h+6E8A?j
00014F9E 4A28 001D                  		tst.b	$1D(a0)
00014FA2 6600                       		bne.s	loc_1DE28
00014FA4 0268 7FFF 0002             		and	#$7FFF,2(a0)
00014FAA 4A6A 0002                  		tst	2(a2)
00014FAE 6A00                       		bpl.s	loc_1DE28
00014FB0 0068 8000 0002             		or	#-$8000,2(a0)
00014FB6                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014FB6                            
00014FB6                            loc_1DE20:				; DATA XREF: h+6E30?o
00014FB6                            loc_1DE28:				; CODE XREF: h+6E42?j h+6E56?j ...
00014FB6 43F9 0000 0000             		lea	(off_1DF38).l,a1
00014FBC 4EB9 0000 C938             		jsr	AnimateSprite
00014FC2 6100 0000                  		bsr.w	loc_1DEE4
00014FC6 4EFA A8C4                  		jmp	DisplaySprite
00014FCA                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014FCA                            
00014FCA                            loc_1DE3E:				; CODE XREF: h+6E5E?j h+6E66?j ...
00014FCA 117C 0000 001C             		move.b	#0,$1C(a0)
00014FD0 4E75                       		rts	
00014FD2                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014FD2                            
00014FD2                            loc_1DE46:				; DATA XREF: h+6DBA?o
00014FD2 6000 A8F8                  		bra.w	DeleteObject
00014FD6                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014FD6                            
00014FD6                            
00014FD6                            
00014FD6                            loc_1DE4A:
00014FD6 3468 003E                  	movea.w	$3E(a0),a2
00014FDA 7210                       	moveq	#$10,d1
00014FDC 0C2A 000D 001C             	cmp.b	#$D,$1C(a2)
00014FE2 6700                       	beq.s	loc_1DE64
00014FE4 7206                       	moveq	#$6,d1
00014FE6 0C2A 0003 0021             	cmp.b	#$3,$21(a2)
00014FEC 6700                       	beq.s	loc_1DE64
00014FEE 117C 0002 0024             	move.b	#2,$24(a0)
00014FF4 117C 0000 0032             	move.b	#0,$32(a0)
00014FFA 4E75                       	rts
00014FFC                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014FFC                            
00014FFC                            loc_1DE64:				; CODE XREF: h+6EE0?j
00014FFC 5328 0032                  		subq.b	#1,$32(a0)
00015000 6A00                       		bpl.s	loc_1DEE0
00015002 117C 0003 0032             		move.b	#3,$32(a0)
00015008 4EBA AD0E                  		jsr	FindFreeObj
0001500C 6600                       		bne.s	loc_1DEE0
0001500E 1290                       		move.b	0(a0),0(a1)
00015010 336A 0008 0008             		move	8(a2),8(a1)
00015016 336A 000C 000C             		move	$C(a2),$C(a1)
0001501C 4A28 0034                  		tst.b	$34(a0)
00015020 6700                       		beq.s	loc_1DE9A
00015022 5941                       		sub	#4,d1
00015024                            
00015024                            loc_1DE9A:				; CODE XREF: h+6F1E?j
00015024 D369 000C                  		add	d1,$C(a1)
00015028 137C 0000 0022             		move.b	#0,$22(a1)
0001502E 137C 0003 001C             		move.b	#3,$1C(a1)
00015034 5429 0024                  		addq.b	#2,$24(a1)
00015038 2368 0004 0004             		move.l	4(a0),4(a1)
0001503E 1368 0001 0001             		move.b	1(a0),1(a1)
00015044 337C 0080 0018             		move.w	#$80,obPriority(a1)
0001504A 137C 0004 0014             		move.b	#4,obActWid(a1)
00015050 3368 0002 0002             		move	2(a0),2(a1)
00015056 3368 003E 003E             		move	$3E(a0),$3E(a1)
0001505C 0269 7FFF 0002             		and	#$7FFF,2(a1)
00015062 4A6A 0002                  		tst	2(a2)
00015066 6A00                       		bpl.s	loc_1DEE0
00015068 0069 8000 0002             		or	#-$8000,2(a1)
0001506E                            
0001506E                            loc_1DEE0:				; CODE XREF: h+6EF4?j h+6F00?j ...
0001506E 6100                       		bsr.s	loc_1DEE4
00015070 4E75                       		rts	
00015072                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00015072                            
00015072                            loc_1DEE4:				; CODE XREF: h+6EC0?p h+6F6C?p
00015072 7000                       		moveq	#0,d0
00015074 1028 001A                  		move.b	$1A(a0),d0
00015078 B028 0030                  		cmp.b	$30(a0),d0
0001507C 6700 0000                  		beq.w	locret_1DF36
00015080 1140 0030                  		move.b	d0,$30(a0)
00015084 45F9 0000 0000             		lea	(off_1E074).l,a2
0001508A D040                       		add	d0,d0
0001508C D4F2 0000                  		add	(a2,d0.w),a2
00015090 3A1A                       		move	(a2)+,d5
00015092 5345                       		subq	#1,d5
00015094 6B00 0000                  		bmi.w	locret_1DF36
00015098 3828 003C                  		move $3C(a0),d4
0001509C                            
0001509C                            loc_1DF0A:				; CODE XREF: h+6FBE?j
0001509C 7200                       		moveq	#0,d1
0001509E 321A                       		move	(a2)+,d1
000150A0 3601                       		move	d1,d3
000150A2 E04B                       		lsr.w	#8,d3
000150A4 0243 00F0                  		and	#$F0,d3	; 'ð'
000150A8 0643 0010                  		add	#$10,d3
000150AC 0241 0FFF                  		and	#$FFF,d1
000150B0 EB89                       		lsl.l	#5,d1
000150B2 0681 0000 0000             		add.l	#Art_Dust,d1
000150B8 3404                       		move	d4,d2
000150BA D843                       		add	d3,d4
000150BC D843                       		add	d3,d4
000150BE 4EB9 0000 1426             		jsr	(QueueDMATransfer).l
000150C4 51CD FFD6                  		dbf	d5,loc_1DF0A
000150C8 4E75                           rts
000150CA                            
000150CA                            locret_1DF36:				; CODE XREF: h+6F7A?j h+6F90?j
000150CA 4E75                       		rts	
000150CC                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000150CC 0000                       off_1DF38:	dc byte_1DF40-off_1DF38; 0 ; DATA XREF: h+6EB4?o h+6FC4?o ...
000150CE 0000                       		dc byte_1DF43-off_1DF38; 1
000150D0 0000                       		dc byte_1DF4F-off_1DF38; 2
000150D2 0000                       		dc byte_1DF58-off_1DF38; 3
000150D4 1F00 FF                    byte_1DF40:	dc.b $1F,  0,$FF	; 0 ; DATA XREF: h+6FC4?o
000150D7 0301 0203 0405 0607 0809+  byte_1DF43:	dc.b   3,  1,  2,  3,  4,  5,  6,  7,  8,  9,$FD,  0; 0	; DATA XREF: h+6FC4?o
000150E3 010A 0B0C 0D0E 0F10 FF     byte_1DF4F:	dc.b   1, $A, $B, $C, $D, $E, $F,$10,$FF; 0 ; DATA XREF: h+6FC4?o
000150EC 0311 1213 14FC             byte_1DF58:	dc.b   3,$11,$12,$13,$14,$FC; 0	; DATA XREF: h+6FC4?o
000150F2                            ; -------------------------------------------------------------------------------
000150F2                            ; Unknown Sprite Mappings
000150F2                            ; -------------------------------------------------------------------------------
000150F2                            MapUnc_1DF5E:
000150F2 0000                       	dc word_1DF8A-MapUnc_1DF5E; 0
000150F4 0000                       	dc word_1DF8C-MapUnc_1DF5E; 1
000150F6 0000                       	dc word_1DF96-MapUnc_1DF5E; 2
000150F8 0000                       	dc word_1DFA0-MapUnc_1DF5E; 3
000150FA 0000                       	dc word_1DFAA-MapUnc_1DF5E; 4
000150FC 0000                       	dc word_1DFB4-MapUnc_1DF5E; 5
000150FE 0000                       	dc word_1DFBE-MapUnc_1DF5E; 6
00015100 0000                       	dc word_1DFC8-MapUnc_1DF5E; 7
00015102 0000                       	dc word_1DFD2-MapUnc_1DF5E; 8
00015104 0000                       	dc word_1DFDC-MapUnc_1DF5E; 9
00015106 0000                       	dc word_1DFE6-MapUnc_1DF5E; 10
00015108 0000                       	dc word_1DFF0-MapUnc_1DF5E; 11
0001510A 0000                       	dc word_1DFFA-MapUnc_1DF5E; 12
0001510C 0000                       	dc word_1E004-MapUnc_1DF5E; 13
0001510E 0000                       	dc word_1E016-MapUnc_1DF5E; 14
00015110 0000                       	dc word_1E028-MapUnc_1DF5E; 15
00015112 0000                       	dc word_1E03A-MapUnc_1DF5E; 16
00015114 0000                       	dc word_1E04C-MapUnc_1DF5E; 17
00015116 0000                       	dc word_1E056-MapUnc_1DF5E; 18
00015118 0000                       	dc word_1E060-MapUnc_1DF5E; 19
0001511A 0000                       	dc word_1E06A-MapUnc_1DF5E; 20
0001511C 0000                       	dc word_1DF8A-MapUnc_1DF5E; 21
0001511E 00                         word_1DF8A:	dc.b 0
0001511F 01                         word_1DF8C:	dc.b 1
00015120 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00015125 01                         word_1DF96:	dc.b 1
00015126 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
0001512B 01                         word_1DFA0:	dc.b 1
0001512C E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00015131 01                         word_1DFAA:	dc.b 1
00015132 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00015137 01                         word_1DFB4:	dc.b 1
00015138 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
0001513D 01                         word_1DFBE:	dc.b 1
0001513E E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00015143 01                         word_1DFC8:	dc.b 1
00015144 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00015149 01                         word_1DFD2:	dc.b 1
0001514A F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
0001514F 01                         word_1DFDC:	dc.b 1
00015150 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00015155 01                         word_1DFE6:	dc.b 1
00015156 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
0001515B 01                         word_1DFF0:	dc.b 1
0001515C 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
00015161 01                         word_1DFFA:	dc.b 1
00015162 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
00015167 02                         word_1E004:	dc.b 2
00015168 F401 0000 E8               	dc.b $F4, $01, $0, 0,$E8; 0
0001516D 040D 0002 E0               	dc.b $4, $0D, $0, 2,$E0; 4
00015172 02                         word_1E016:	dc.b 2
00015173 F405 0000 E8               	dc.b $F4, $05, $0, 0,$E8; 0
00015178 040D 0004 E0               	dc.b $4, $0D, $0, 4,$E0; 4
0001517D 02                         word_1E028:	dc.b 2
0001517E F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
00015183 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
00015188 02                         word_1E03A:	dc.b 2
00015189 F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
0001518E 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
00015193 01                         word_1E04C:	dc.b 1
00015194 F805 0000 F8               	dc.b $F8, $05, $0, 0,$F8; 0
00015199 01                         word_1E056:	dc.b 1
0001519A F805 0004 F8               	dc.b $F8, $05, $0, 4,$F8; 0
0001519F 01                         word_1E060:	dc.b 1
000151A0 F805 0008 F8               	dc.b $F8, $05, $0, 8,$F8; 0
000151A5 01                         word_1E06A:	dc.b 1
000151A6 F805 000C F8               	dc.b $F8, $05, $0, $C,$F8; 0
000151AB 00                         	dc.b 0
000151AC 0000                       off_1E074:	dc word_1E0A0-off_1E074; 0
000151AE 0000                       	dc word_1E0A2-off_1E074; 1
000151B0 0000                       	dc word_1E0A6-off_1E074; 2
000151B2 0000                       	dc word_1E0AA-off_1E074; 3
000151B4 0000                       	dc word_1E0AE-off_1E074; 4
000151B6 0000                       	dc word_1E0B2-off_1E074; 5
000151B8 0000                       	dc word_1E0B6-off_1E074; 6
000151BA 0000                       	dc word_1E0BA-off_1E074; 7
000151BC 0000                       	dc word_1E0BE-off_1E074; 8
000151BE 0000                       	dc word_1E0C2-off_1E074; 9
000151C0 0000                       	dc word_1E0C6-off_1E074; 10
000151C2 0000                       	dc word_1E0CA-off_1E074; 11
000151C4 0000                       	dc word_1E0CE-off_1E074; 12
000151C6 0000                       	dc word_1E0D2-off_1E074; 13
000151C8 0000                       	dc word_1E0D8-off_1E074; 14
000151CA 0000                       	dc word_1E0DE-off_1E074; 15
000151CC 0000                       	dc word_1E0E4-off_1E074; 16
000151CE 0000                       	dc word_1E0EA-off_1E074; 17
000151D0 0000                       	dc word_1E0EA-off_1E074; 18
000151D2 0000                       	dc word_1E0EA-off_1E074; 19
000151D4 0000                       	dc word_1E0EA-off_1E074; 20
000151D6 0000                       	dc word_1E0EC-off_1E074; 21
000151D8 0000                       word_1E0A0:	dc 0
000151DA 0001                       word_1E0A2:	dc 1
000151DC 7000                       	dc $7000
000151DE 0001                       word_1E0A6:	dc 1
000151E0 F008                       	dc $F008
000151E2 0001                       word_1E0AA:	dc 1
000151E4 F018                       	dc $F018
000151E6 0001                       word_1E0AE:	dc 1
000151E8 F028                       	dc $F028
000151EA 0001                       word_1E0B2:	dc 1
000151EC F038                       	dc $F038
000151EE 0001                       word_1E0B6:	dc 1
000151F0 F048                       	dc $F048
000151F2 0001                       word_1E0BA:	dc 1
000151F4 7058                       	dc $7058
000151F6 0001                       word_1E0BE:	dc 1
000151F8 7060                       	dc $7060
000151FA 0001                       word_1E0C2:	dc 1
000151FC 7068                       	dc $7068
000151FE 0001                       word_1E0C6:	dc 1
00015200 7070                       	dc $7070
00015202 0001                       word_1E0CA:	dc 1
00015204 7078                       	dc $7078
00015206 0001                       word_1E0CE:	dc 1
00015208 7080                       	dc $7080
0001520A 0002                       word_1E0D2:	dc 2
0001520C 1088                       	dc $1088
0001520E 708A                       	dc $708A
00015210 0002                       word_1E0D8:	dc 2
00015212 3092                       	dc $3092
00015214 7096                       	dc $7096
00015216 0002                       word_1E0DE:	dc 2
00015218 509E                       	dc $509E
0001521A 70A4                       	dc $70A4
0001521C 0002                       word_1E0E4:	dc 2
0001521E 50AC                       	dc $50AC
00015220 70B2                       	dc $70B2
00015222 0000                       word_1E0EA:	dc 0
00015224 0001                       word_1E0EC:	dc 1
00015226 F0BA                       	dc $F0BA
00015228                            	even
00015228                            
00015228                            ; ===========================================================================
00015228                            
00015228                            LoadPlayerPal:
00015228 7000                       		moveq	#0,d0
0001522A 1038 FFBF                  		move.b	($FFFFFFBF).w,d0
0001522E 103B 0000                  		move.b	@palLUT(pc,d0.w),d0
00015232 4E75                       		rts
00015234                            
00015234                            	@palLUT:
00015234 0315 1617 18               		dc.b	palid_Sonic, palid_Sonic2, palid_Sonic3, palid_Sonic4, palid_Sonic5
00015239 191A 1B1C 1D               		dc.b	palid_Sonic6, palid_Sonic7, palid_Sonic8, palid_Sonic9, palid_Sonic10
0001523E                            
0001523E                            LoadPlayerWaterPal:
0001523E 7000                       		moveq	#0,d0
00015240 1038 FFBF                  		move.b	($FFFFFFBF).w,d0
00015244 103B 0000                  		move.b	@palLUT(pc,d0.w),d0
00015248 4E75                       		rts
0001524A                            
0001524A                            	@palLUT:
0001524A 101E 1F20 21               		dc.b	palid_SBZ3SonWat, palid_SonWater2, palid_SonWater3, palid_SonWater4, palid_SonWater5
0001524F 2223 2425 26               		dc.b	palid_SonWater6, palid_SonWater7, palid_SonWater8, palid_SonWater9, palid_SonWater10
00015254                            
00015254                            ; ---------------------------------------------------------------------------
00015254                            ; Object 01 - Sonic
00015254                            ; ---------------------------------------------------------------------------
00015254                            
00015254                            SonicPlayer:
00015254 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
00015258 6700                       		beq.s	Sonic_Normal	; if not, branch
0001525A 4EF9 0000 0000             		jmp	(DebugMode).l
00015260                            ; ===========================================================================
00015260                            
00015260                            Sonic_Normal:
00015260 7000                       		moveq	#0,d0
00015262 1028 0024                  		move.b	obRoutine(a0),d0
00015266 323B 0000                  		move.w	Sonic_Index(pc,d0.w),d1
0001526A 4EFB 1000                  		jmp	Sonic_Index(pc,d1.w)
0001526E                            ; ===========================================================================
0001526E 0000                       Sonic_Index:	dc.w Sonic_Main-Sonic_Index
00015270 0000                       		dc.w Sonic_Control-Sonic_Index
00015272 0000                       		dc.w Sonic_Hurt-Sonic_Index
00015274 0000                       		dc.w Sonic_Death-Sonic_Index
00015276 0000                       		dc.w Sonic_ResetLevel-Sonic_Index
00015278                            ; ===========================================================================
00015278                            
00015278                            Sonic_Main:	; Routine 0
00015278 11FC 0005 D1C0             		move.b	#5,$FFFFD1C0.w
0001527E 5428 0024                  		addq.b	#2,obRoutine(a0)
00015282 117C 0013 0016             		move.b	#$13,obHeight(a0)
00015288 117C 0009 0017             		move.b	#9,obWidth(a0)
0001528E 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
00015296 317C 0780 0002             		move.w	#$780,obGfx(a0)
0001529C 317C 0100 0018             		move.w	#$100,obPriority(a0)
000152A2 117C 0018 0014             		move.b	#$18,obActWid(a0)
000152A8 117C 0004 0001             		move.b	#4,obRender(a0)
000152AE 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w ; Sonic's top speed
000152B4 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w ; Sonic's acceleration
000152BA 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w ; Sonic's deceleration
000152C0 11FC 0005 D1C0             		move.b	#5,$FFFFD1C0.w
000152C6                            
000152C6                            Sonic_Control:    ; Routine 2
000152C6 4A38 FF8B                   		tst.b	($FFFFFF8B).w
000152CA 6700 0000                  		beq.w	@cont    
000152CE 6100                       		bsr.s    Sonic_PanCamera    ; ++add this++
000152D0                             
000152D0                            	@cont: 
000152D0 4A78 FFFA                  		tst.w    (f_debugmode).w    ; is debug cheat enabled?
000152D4 6700                       		beq.s    loc_12C58    ; if not, branch
000152D6 0838 0004 F605             		btst    #bitB,(v_jpadpress1).w ; is button B pressed?
000152DC 6700                       		beq.s    loc_12C58    ; if not, branch
000152DE 31FC 0001 FE08             		move.w    #1,(v_debuguse).w ; change Sonic into a ring/item
000152E4 4238 F7CC                  		clr.b    (f_lockctrl).w
000152E8 4E75                       		rts
000152EA                            		
000152EA                            		include    "_incObj\Sonic PanCamera.asm"    ; ++add this++
000152EA                            ; ---------------------------------------------------------------------------
000152EA                            ; Subroutine to    horizontally pan the camera view ahead of the player
000152EA                            ; (Ported from the US version of Sonic CD's "R11A__.MMD" by Nat The Porcupine)
000152EA                            ; ---------------------------------------------------------------------------
000152EA                            
000152EA                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
000152EA                            
000152EA                            
000152EA                            Sonic_PanCamera:
000152EA 3238 F7A0                          move.w    (v_camera_pan).w,d1        ; get the current camera pan value
000152EE 3028 0020                          move.w    obInertia(a0),d0        ; get sonic's inertia
000152F2 6A00                               bpl.s    @abs_inertia            ; if sonic's inertia is positive, branch ahead
000152F4 4440                               neg.w    d0                        ; otherwise, we negate it to get the absolute value
000152F6                            
000152F6                                @abs_inertia:
000152F6                            
000152F6                            ; These lines were intended to prevent the Camera from panning while
000152F6                            ; going up the very first giant ramp in Palmtree Panic Zone Act 1.
000152F6                            ; However, given that no such object exists in Sonic 1, I just went
000152F6                            ; ahead and commented these out.
000152F6                            ;        btst    #1,$2C(a0)                ; is sonic going up a giant ramp in PPZ?
000152F6                            ;        beq.s    @skip                    ; if not, branch
000152F6                            ;        cmpi.w    #$1B00,obX(a0)            ; is sonic's x position lower than $1B00?
000152F6                            ;        bcs.s    @reset_pan                ; if so, branch
000152F6                            
000152F6                            ; These lines aren't part of the original routine; I added them myself.
000152F6                            ; If you've ported the Spin Dash, uncomment the following lines of code
000152F6                            ; to allow the camera to pan ahead while charging the Spin Dash:
000152F6 4A28 0039                          tst.b    $39(a0)                    ; is sonic charging up a spin dash?
000152FA 6700                               beq.s    @skip                    ; if not, branch
000152FC 0828 0000 0022                     btst    #0,obStatus(a0)            ; check the direction that sonic is facing
00015302 6600                               bne.s    @pan_right                ; if he's facing right, pan the camera to the right
00015304 6000                               bra.s    @pan_left                ; otherwise, pan the camera to the left
00015306                            
00015306                                @skip:
00015306 0C40 0600                          cmpi.w    #$600,d0                ; is sonic's inertia greater than $600
0001530A 6500                               bcs.s    @reset_pan                ; if not, recenter the screen (if needed)
0001530C 4A68 0020                          tst.w    obInertia(a0)            ; otherwise, check the direction of inertia (by subtracting it from 0)
00015310 6A00                               bpl.s    @pan_left                ; if the result was positive, then inertia was negative, so we pan the screen left
00015312                            
00015312                                @pan_right:
00015312 5441                               addq.w    #2,d1                    ; add 2 to the pan value
00015314 0C41 00E0                          cmpi.w    #224,d1                    ; is the pan value greater than 224 pixels?
00015318 6500                               bcs.s    @update_pan                ; if not, branch
0001531A 323C 00E0                          move.w    #224,d1                    ; otherwise, cap the value at the maximum of 224 pixels
0001531E 6000                               bra.s    @update_pan                ; branch
00015320                            ; ---------------------------------------------------------------------------
00015320                            
00015320                                @pan_left:
00015320 5541                               subq.w    #2,d1                    ; subtract 2 from the pan value
00015322 0C41 0060                          cmpi.w    #96,d1                    ; is the pan value less than 96 pixels?
00015326 6400                               bcc.s    @update_pan                ; if not, branch
00015328 323C 0060                          move.w    #96,d1                    ; otherwise, cap the value at the minimum of 96 pixels
0001532C 6000                               bra.s    @update_pan                ; branch
0001532E                            ; ---------------------------------------------------------------------------
0001532E                            
0001532E                                @reset_pan:
0001532E 0C41 00A0                          cmpi.w    #160,d1                    ; is the pan value 160 pixels?
00015332 6700                               beq.s    @update_pan                ; if so, branch
00015334 6400                               bcc.s    @reset_left                ; otherwise, branch if it greater than 160
00015336                                 
00015336                                @reset_right:
00015336 5441                               addq.w    #2,d1                    ; add 2 to the pan value
00015338 6000                               bra.s    @update_pan                ; branch
0001533A                            ; ---------------------------------------------------------------------------
0001533A                            
0001533A                                @reset_left:
0001533A 5541                               subq.w    #2,d1                    ; subtract 2 from the pan value
0001533C                            
0001533C                                @update_pan:
0001533C 31C1 F7A0                          move.w    d1,(v_camera_pan).w        ; update the camera pan value
00015340 4E75                               rts                                ; return
00015342                                 
00015342                            ; End of function Sonic_PanCamera
00015342                            
00015342                            
00015342                            ; ===========================================================================
00015342                            
00015342                            loc_12C58:
00015342 4A38 F7CC                  		tst.b	(f_lockctrl).w	; are controls locked?
00015346 6600                       		bne.s	loc_12C64	; if yes, branch
00015348 31F8 F604 F602             		move.w	(v_jpadhold1).w,(v_jpadhold2).w ; enable joypad control
0001534E                            
0001534E                            loc_12C64:
0001534E 0838 0000 F7C8             		btst	#0,(f_lockmulti).w ; are controls locked?
00015354 6600                       		bne.s	loc_12C7E	; if yes, branch
00015356 7000                       		moveq	#0,d0
00015358 1028 0022                  		move.b	obStatus(a0),d0
0001535C 0240 0006                  		andi.w	#6,d0
00015360 323B 0000                  		move.w	Sonic_Modes(pc,d0.w),d1
00015364 4EBB 1000                  		jsr	Sonic_Modes(pc,d1.w)
00015368                            
00015368                            loc_12C7E:
00015368 6100                       		bsr.s	Sonic_Display
0001536A 6100 0000                  		bsr.w	Sonic_RecordPosition
0001536E 6100 0000                  		bsr.w	Sonic_Water
00015372 1178 F768 0036             		move.b	(v_anglebuffer).w,$36(a0)
00015378 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
0001537E 4A38 F7C7                  		tst.b	(f_wtunnelmode).w
00015382 6700                       		beq.s	loc_12CA6
00015384 4A28 001C                  		tst.b	obAnim(a0)
00015388 6600                       		bne.s	loc_12CA6
0001538A 1168 001D 001C             		move.b	obNextAni(a0),obAnim(a0)
00015390                            
00015390                            loc_12CA6:
00015390 6100 0000                  		bsr.w	Sonic_Animate
00015394 4A38 F7C8                  		tst.b	(f_lockmulti).w
00015398 6B00                       		bmi.s	loc_12CB6
0001539A 4EB9 0000 0000             		jsr	(ReactToItem).l
000153A0                            
000153A0                            loc_12CB6:
000153A0 6100 0000                  		bsr.w	Sonic_Loops
000153A4 6100 0000                  		bsr.w	Sonic_LoadGfx
000153A8 4E75                       		rts	
000153AA                            ; ===========================================================================
000153AA 0000                       Sonic_Modes:	dc.w Sonic_MdNormal-Sonic_Modes
000153AC 0000                       		dc.w Sonic_MdJump-Sonic_Modes
000153AE 0000                       		dc.w Sonic_MdRoll-Sonic_Modes
000153B0 0000                       		dc.w Sonic_MdJump2-Sonic_Modes
000153B2                            ; ---------------------------------------------------------------------------
000153B2                            ; Music	to play	after invincibility wears off
000153B2                            ; ---------------------------------------------------------------------------
000153B2                            MusicList2:
000153B2 00                         		dc.b bgm_GHZ
000153B3 00                         		dc.b bgm_LZ
000153B4 00                         		dc.b bgm_MZ
000153B5 00                         		dc.b bgm_SLZ
000153B6 00                         		dc.b bgm_SYZ
000153B7 00                         		dc.b bgm_SBZ
000153B8                            		; The ending doesn't get an entry
000153B8                            		even
000153B8                            
000153B8                            		include	"_incObj\Sonic Display.asm"
000153B8                            ; ---------------------------------------------------------------------------
000153B8                            ; Subroutine to display Sonic and set music
000153B8                            ; ---------------------------------------------------------------------------
000153B8                            
000153B8                            Sonic_Display:
000153B8 3028 0030                  		move.w    flashtime(a0),d0
000153BC 6700                       		beq.s    @showAfterImage
000153BE 5368 0030                  		subq.w    #1,flashtime(a0)
000153C2 E648                               	lsr.w    #3,d0
000153C4 6400                               	bcc.s    @chkinvincible
000153C6                            
000153C6                            	@showAfterImage:
000153C6 3028 0020                          	move.w    obInertia(a0),d0            ; get inertia
000153CA 4A40                       		tst.w    d0                    ; is inertia greater than 0?
000153CC 6C00                       		bge.s    @AfterImage_Start    ; if yes, don't negate it
000153CE 4440                       		neg        d0                    ; if not, negate it
000153D0                            
000153D0                            	@AfterImage_Start:        
000153D0 4A38 FE2E                  		tst.b	(v_shoes).w	; does Sonic have speed	shoes?
000153D4 6700                       		beq.s	@display	; if not, don't show the After Image
000153D6                            		;cmpi.w    #$900,d0	; is the sonic inertia greater than A00?
000153D6                            		;blt.s    @display	; if not, don't show the After Image
000153D6                            	
000153D6                            	@AfterImage_Start2:    
000153D6 6100 A940                          	bsr.w    FindFreeObj    ; search a free space in object RAM
000153DA 6600                               	bne.s    @display    ; if not have, don't load the After Image
000153DC 12BC 0010                          	move.b  #$10,0(a1)        ; load after-image object
000153E0 2368 0004 0004                     	move.l    obMap(a0),obMap(a1)        ; copy Sonic mappings to after-image mappings
000153E6 3368 0008 0008                     	move.w    obX(a0),obX(a1)        ; copy Sonic x-pos to after-image x-pos
000153EC 3368 000C 000C                     	move.w    obY(a0),obY(a1)    ; copy Sonic y-pos to after-image y-pos
000153F2                            
000153F2                                	@display:
000153F2 4EB9 0000 F88C                     	jsr    (DisplaySprite).l
000153F8                            
000153F8                            	@chkinvincible:
000153F8 4A38 FE2D                  		tst.b	(v_invinc).w	; does Sonic have invincibility?
000153FC 6700                       		beq.s	@chkshoes	; if not, branch
000153FE 4A68 0032                  		tst.w	invtime(a0)	; check	time remaining for invinciblity
00015402 6700                       		beq.s	@chkshoes	; if no	time remains, branch
00015404 5368 0032                  		subq.w	#1,invtime(a0)	; subtract 1 from time
00015408 6600                       		bne.s	@chkshoes
0001540A 4A38 F7AA                  		tst.b	(f_lockscreen).w
0001540E 6600                       		bne.s	@removeinvincible
00015410 0C78 000C FE14             		cmpi.w	#$C,(v_air).w
00015416 6500                       		bcs.s	@removeinvincible
00015418 1038 F5C6                  		move.b  (v_Saved_music),d0    ; loads song number from RAM
0001541C 4EB9 0000 124A                     	jsr	(PlaySound).l    ; play normal music
00015422                            
00015422                            	@removeinvincible:
00015422 11FC 0000 FE2D             		move.b	#0,(v_invinc).w ; cancel invincibility
00015428                            
00015428                            	@chkshoes:
00015428 4A38 FE2E                  		tst.b	(v_shoes).w	; does Sonic have speed	shoes?
0001542C 6700                       		beq.s	@exit		; if not, branch
0001542E 4A68 0034                  		tst.w	shoetime(a0)	; check	time remaining
00015432 6700                       		beq.s	@exit
00015434 5368 0034                  		subq.w	#1,shoetime(a0)	; subtract 1 from time
00015438 6600                       		bne.s	@exit
0001543A 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w ; restore Sonic's speed
00015440 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w ; restore Sonic's acceleration
00015446 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w ; restore Sonic's deceleration
0001544C 11FC 0000 FE2E             		move.b	#0,(v_shoes).w	; cancel speed shoes
00015452 1038 F5C6                  		move.b  (v_Saved_music),d0    ; loads song number from RAM
00015456 4EB9 0000 124A                     	jsr	(PlaySound).l    ; play normal music
0001545C                            		
0001545C                            	@exit:
0001545C 4E75                       		rts	
0001545C 4E75                       		rts	
0001545E                            		include	"_incObj\Sonic RecordPosition.asm"
0001545E                            ; ---------------------------------------------------------------------------
0001545E                            ; Subroutine to	record Sonic's previous positions for invincibility stars
0001545E                            ; ---------------------------------------------------------------------------
0001545E                            
0001545E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001545E                            
0001545E                            
0001545E                            Sonic_RecordPosition:
0001545E 3038 F7A8                  		move.w	(v_trackpos).w,d0
00015462 43F8 CB00                  		lea	(v_tracksonic).w,a1
00015466 43F1 0000                  		lea	(a1,d0.w),a1
0001546A 32E8 0008                  		move.w	obX(a0),(a1)+
0001546E 32E8 000C                  		move.w	obY(a0),(a1)+
00015472 5838 F7A9                  		addq.b	#4,(v_trackbyte).w
00015476 4E75                       		rts	
00015478                            ; End of function Sonic_RecordPosition
00015478                            ; End of function Sonic_RecordPosition
00015478                            		include	"_incObj\Sonic Water.asm"
00015478                            ; ---------------------------------------------------------------------------
00015478                            ; Subroutine for Sonic when he's underwater
00015478                            ; ---------------------------------------------------------------------------
00015478                            
00015478                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015478                            
00015478                            
00015478                            Sonic_Water:
00015478 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w	;TIS is level MZ?
0001547E 6700                       		beq.s	WaterTagforMZ	; if yes, branch
00015480 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	; is level LZ?
00015486 6700                       		beq.s	Sonic_Water_LZ	; if yes, branch
00015488                            
00015488                            	Sonic_Water_Exit:
00015488 4E75                       		rts	
0001548A                            ; ===========================================================================
0001548A                            
0001548A                            	Sonic_Water_LZ:
0001548A 3038 F646                  		move.w	(v_waterpos1).w,d0
0001548E B068 000C                  		cmp.w	obY(a0),d0	; is Sonic above the water?
00015492 6C00 0000                  		bge.w	Abovewater	; if yes, branch
00015496 6000 0000                  		bra	WaterStatus
0001549A                            	WaterTagforMZ:
0001549A 0C38 0000 F5C4             		cmpi.b	#0,(v_tagwater).w	;TIS Lava Tag?
000154A0 6700 0000                  		beq.w	Abovewater	; if yes, branch
000154A4 303C 000F                  		move.w #$F,d0             ;TIS Length ($F = full line)
000154A8 43F8 34A0                  		lea    (Pal_LZSonWatr2),a1  ;Palette location
000154AC 45F8 FB00                          	lea    ($FFFFFB00),a2        ;RAM location ($FB00 = line 1)
000154B0 4EB8 24A0                  		jsr	Palload_Loop
000154B4                            	WaterStatus:
000154B4 08E8 0006 0022             		bset	#6,obStatus(a0)
000154BA 6600 FFCC                  		bne.w	Sonic_Water_Exit
000154BE 6100 0000                  		bsr.w	ResumeMusic
000154C2 31F8 D00C FF92             		move.w	(v_player+obY).w,(v_watersplashpos).w	;TIS copy y-pos
000154C8                            
000154C8 11FC 000A D340             		move.b	#id_DrownCount,(v_objspace+$340).w ; load bubbles object from Sonic's mouth
000154CE 11FC 0081 D368             		move.b	#$81,(v_objspace+$340+obSubtype).w
000154D4 31FC 0300 F760             		move.w	#$300,(v_sonspeedmax).w ; change Sonic's top speed
000154DA 31FC 0006 F762             		move.w	#6,(v_sonspeedacc).w ; change Sonic's acceleration
000154E0 31FC 0040 F764             		move.w	#$40,(v_sonspeeddec).w ; change Sonic's deceleration
000154E6 E0E8 0010                  		asr	obVelX(a0)
000154EA E0E8 0012                  		asr	obVelY(a0)
000154EE E0E8 0012                  		asr	obVelY(a0)	; slow Sonic
000154F2 6700 FF94                  		beq.w	Sonic_Water_Exit		; branch if Sonic stops moving
000154F6                            		;move.w	(v_player+obY).w,(v_watersplashpos).w	;TIS copy y-pos
000154F6 31FC 0100 D1DC                     move.w    #$100,($FFFFD1DC).w    ; set the spin dash dust animation to splash
00015506 0C38 0000 F5C4             		cmpi.b	#0,(v_tagwater).w	;TIS Lava Tag?
0001550C 6600 0000                  		bne.w	@return
00015510                            		
00015510                            		
00015510                            	@return:
00015510 4E75                       		rts
00015512                            ; ===========================================================================
00015512                            
00015512                            Abovewater:
00015512 08A8 0006 0022             		bclr	#6,obStatus(a0)
00015518 6700 FF6E                  		beq.w	Sonic_Water_Exit
0001551C 6100 0000                  		bsr.w	ResumeMusic
00015520 31F8 D00C FF92             		move.w	(v_player+obY).w,(v_watersplashpos).w	;TIS copy y-pos
00015526                            
00015526 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w ; restore Sonic's speed
0001552C 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w ; restore Sonic's acceleration
00015532 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w ; restore Sonic's deceleration
00015538 E1E8 0012                  		asl	obVelY(a0)
0001553C 6700 FF4A                  		beq.w	Sonic_Water_Exit
00015540 31FC 0100 D1DC                     move.w    #$100,($FFFFD1DC).w    ; set the spin dash dust animation to splash
00015546 0C68 F000 0012             		cmpi.w	#-$1000,obVelY(a0)
0001554C 6E00                       		bgt.s	@belowmaxspeed
0001554E 317C F000 0012             		move.w	#-$1000,obVelY(a0) ; set maximum speed on leaving water
00015554                            
00015554                            	@belowmaxspeed:
0001555E                            ; End of function Sonic_Water
0001555E                            ; End of function Sonic_Water
0001555E                            		include "_incObj\03 Hangable Sprite.asm"
0001555E                            ; ===========================================================================
0001555E                            ; ----------------------------------------------------------------------------
0001555E                            ; Object 03 - Invisible sprite that you can hang on to
0001555E                            ; ----------------------------------------------------------------------------
0001555E                            ; Sprite_2C92C:
0001555E                            Obj03:
0001555E 7000                       	moveq    #0,d0
00015560 1028 0024                      move.b    obRoutine(a0),d0            ;just use s1 version of this variable
00015564 323B 0000                      move.w    Obj03_Index(pc,d0.w),d1
00015568 4EFB 1000                      jmp    Obj03_Index(pc,d1.w)
0001556C                            ; ===========================================================================
0001556C                            ; off_2C93A:
0001556C                            Obj03_Index:
0001556C 0000                           dc.w Obj03_Main-Obj03_Index
0001556E 0000                               dc.w Obj03_Init-Obj03_Index
00015570                            ; ===========================================================================
00015570                            ; loc_2C93E:
00015570                            Obj03_Init:
00015570 5428 0024                      addq.b    #2,obRoutine(a0)        ;just use s1 version of this variable
00015574 117C 0004 0001                 move.b    #4,obRender(a0)    ;just use s1 version of this variable
0001557A 117C 0018 0014                 move.b    #$18,obActWid(a0)    ;just use s1 version of this variable
00015580 317C 0200 0018                 move.w    #$200,obPriority(a0)            ;just use s1 version of this variable
00015586                            ; loc_2C954:
00015586                            Obj03_Main:
00015586 45E8 0030                      lea    $30(a0),a2
0001558A 43F8 D000                      lea    (v_player).w,a1 ; a1=character
0001558E 3038 F604                      move.w    (v_jpadhold1).w,d0 			;S1 has same ram address for controller as S2 just different variable name like on the line above
00015592 6100                           bsr.s    Obj03_Check
00015594                            ;    lea    (Sidekick).w,a1 ; a1=character  ;disabled
00015594                            ;    addq.w    #1,a2                          ;disabled
00015594                            ;    move.w    (Ctrl_2).w,d0                    ;disabled
00015594                            ;    bsr.s    Obj03_Check         	;disabled
00015594 4EF9 0000 0000             	jmp		bonu_chkdel
0001559A                            ; ===========================================================================
0001559A                            ; loc_2C972:
0001559A                            Obj03_Check:
0001559A 4A12                       		tst.b	(a2)
0001559C 6700                       		beq.s	loc_2C9A0
0001559E 0200 0070                  		andi.b	#btnABC,d0
000155A2 6700 0000                  		beq.w	Obj03_Check_End
000155A6 4238 F7C8                  		clr.b	f_lockmulti.w
000155AA 4212                       		clr.b	(a2)
000155AC 157C 0012 0002             		move.b	#$12,2(a2)
000155B2 0240 0F00                  		andi.w	#$F00,d0
000155B6 6700                       		beq.s	loc_2C954
000155B8 157C 003C 0002             		move.b	#$3C,2(a2)
000155BE                            	
000155BE                            loc_2C954:
000155BE 337C FD00 0012             		move.w	#-$300,y_vel(a1)
000155C4 6000 0000                  		bra.w	Obj03_Check_End
000155C8                            ; ===========================================================================
000155C8                            
000155C8                            loc_2C9A0:
000155C8 4A2A 0002                  		tst.b	2(a2)
000155CC 6700                       		beq.s	loc_2C972
000155CE 532A 0002                  		subq.b	#1,2(a2)
000155D2 6600 0000                  		bne.w	Obj03_Check_End
000155D6                            
000155D6                            loc_2C972:
000155D6 3029 0008                  		move.w	obX(a1),d0
000155DA 9068 0008                  		sub.w	obX(a0),d0
000155DE 0640 0018                  		addi.w	#$18,d0
000155E2 0C40 0030                  		cmpi.w	#$30,d0
000155E6 6400 0000                  		bhs.w	Obj03_Check_End
000155EA 3229 000C                  		move.w	obY(a1),d1
000155EE 9268 000C                  		sub.w	obY(a0),d1
000155F2 0C41 0010                  		cmpi.w	#$10,d1
000155F6 6400 0000                  		bhs.w	Obj03_Check_End
000155FA 4A38 F7C8                  		tst.b	f_lockmulti.w
000155FE 6B00                       		bmi.s	Obj03_Check_End
00015600 0C29 0006 0024             		cmpi.b	#6,obRoutine(a1)
00015606 6400                       		bhs.s	Obj03_Check_End
00015608 4A78 FFFA                  		tst.w	(f_debugmode).w
0001560C 6600                       		bne.s	Obj03_Check_End
0001560E 4269 0010                  		clr.w	x_vel(a1)
00015612 4269 0012                  		clr.w	y_vel(a1)
00015616 4269 0020                  		clr.w	obInertia(a1)
0001561A 3368 000C 000C             		move.w	obY(a0),obY(a1)
00015620 137C 0000 001C             		move.b	#id_Hang2,obAnim(a1)
00015626 11FC 0001 F7C8             		move.b	#1,f_lockmulti.w
0001562C 14BC 0001                  		move.b	#1,(a2)
00015630                            
00015630                            ; return_2CA08:
00015630                            Obj03_Check_End:
00015630 4E75                       		rts
00015630 4E75                       		rts
00015632                            
00015632                            ; ===========================================================================
00015632                            ; ---------------------------------------------------------------------------
00015632                            ; Modes	for controlling	Sonic
00015632                            ; ---------------------------------------------------------------------------
00015632                            
00015632                            Sonic_MdNormal:
00015632 6100 0000                  		bsr.w	Sonic_Peelout
00015636 6100 0000                  		bsr.w	Sonic_SpinDash
0001563A 6100 0000                  		bsr.w	Sonic_Jump
0001563E 6100 0000                  		bsr.w	Sonic_SlopeResist
00015642 6100 0000                  		bsr.w	Sonic_Move
00015646 6100 0000                  		bsr.w	Sonic_Roll
0001564A 6100 0000                  		bsr.w	Sonic_LevelBound
0001564E 4EB9 0000 F878             		jsr	(SpeedToPos).l
00015654 6100 0000                  		bsr.w	Sonic_AnglePos
00015658 6100 0000                  		bsr.w	Sonic_SlopeRepel
0001565C 4E75                       		rts	
0001565E                            
0001565E                            ; ===========================================================================
0001565E                            
0001565E                            Sonic_MdJump:
0001565E 6100 0000                  		bsr.w   Sonic_AirRoll
00015662 6100 0000                  		bsr.w	Sonic_JumpHeight
00015666 6100 0000                  		bsr.w	Sonic_JumpDirection
0001566A 6100 0000                  		bsr.w	Sonic_LevelBound
0001566E 4EB9 0000 F840             		jsr	(ObjectFall).l
00015674 0828 0006 0022             		btst	#6,obStatus(a0)
0001567A 6700                       		beq.s	loc_12E5C
0001567C 0468 0028 0012             		subi.w	#$28,obVelY(a0)
00015682                            
00015682                            loc_12E5C:
00015682 6100 0000                  		bsr.w	Sonic_JumpAngle
00015686 6100 0000                  		bsr.w	Sonic_Floor
0001568A 4E75                       		rts	
0001568C                            ; ===========================================================================
0001568C                            
0001568C                            Sonic_MdRoll:
0001568C 6100 0000                  		bsr.w	Sonic_Jump
00015690 6100 0000                  		bsr.w	Sonic_RollRepel
00015694 6100 0000                  		bsr.w	Sonic_RollSpeed
00015698 6100 0000                  		bsr.w	Sonic_LevelBound
0001569C 4EB9 0000 F878             		jsr	(SpeedToPos).l
000156A2 6100 0000                  		bsr.w	Sonic_AnglePos
000156A6 6100 0000                  		bsr.w	Sonic_SlopeRepel
000156AA 4E75                       		rts	
000156AC                            ; ===========================================================================
000156AC                            
000156AC                            Sonic_MdJump2:
000156AC 6100 0000                  		bsr.w	Sonic_JumpHeight
000156B0 6100 0000                  		bsr.w	Sonic_JumpDirection
000156B4 6100 0000                  		bsr.w	Sonic_LevelBound
000156B8 4EB9 0000 F840             		jsr	(ObjectFall).l
000156BE 0828 0006 0022             		btst	#6,obStatus(a0)
000156C4 6700                       		beq.s	loc_12EA6
000156C6 0468 0028 0012             		subi.w	#$28,obVelY(a0)
000156CC                            
000156CC                            loc_12EA6:
000156CC 6100 0000                  		bsr.w	Sonic_JumpAngle
000156D0 6100 0000                  		bsr.w	Sonic_Floor
000156D4 4E75                       		rts	
000156D6                            
000156D6                            		include	"_incObj\Sonic Move.asm"
000156D6                            ; ---------------------------------------------------------------------------
000156D6                            ; Subroutine to	make Sonic walk/run
000156D6                            ; ---------------------------------------------------------------------------
000156D6                            
000156D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000156D6                            
000156D6                            
000156D6                            Sonic_Move:
000156D6 3C38 F760                  		move.w	(v_sonspeedmax).w,d6
000156DA 3A38 F762                  		move.w	(v_sonspeedacc).w,d5
000156DE 3838 F764                  		move.w	(v_sonspeeddec).w,d4
000156E2 4A38 F7CA                  		tst.b	(f_jumponly).w
000156E6 6600 0000                  		bne.w	loc_12FEE
000156EA 4A68 003E                  		tst.w	$3E(a0)
000156EE 6600 0000                  		bne.w	Sonic_ResetScr
000156F2 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
000156F8 6700                       		beq.s	@notleft	; if not, branch
000156FA 6100 0000                  		bsr.w	Sonic_MoveLeft
000156FE                            
000156FE                            	@notleft:
000156FE 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
00015704 6700                       		beq.s	@notright	; if not, branch
00015706 6100 0000                  		bsr.w	Sonic_MoveRight
0001570A                            
0001570A                            	@notright:
0001570A 1028 0026                  		move.b	obAngle(a0),d0
0001570E 0600 0020                  		addi.b	#$20,d0
00015712 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
00015716 6600 0000                  		bne.w	Sonic_ResetScr	; if yes, branch
0001571A 4A68 0020                  		tst.w	obInertia(a0)	; is Sonic moving?
0001571E 6600 0000                  		bne.w	Sonic_ResetScr	; if yes, branch
00015722 08A8 0005 0022             		bclr	#5,obStatus(a0)
00015728 117C 0000 001C             		move.b	#id_Wait,obAnim(a0) ; use "standing" animation
0001572E 0828 0003 0022             		btst	#3,obStatus(a0)
00015734 6700                       		beq.s	Sonic_Balance
00015736 7000                       		moveq	#0,d0
00015738 1028 003D                  		move.b	$3D(a0),d0
0001573C ED48                       		lsl.w	#6,d0
0001573E 43F8 D000                  		lea	(v_objspace).w,a1
00015742 43F1 0000                  		lea	(a1,d0.w),a1
00015746 4A29 0022                  		tst.b	obStatus(a1)
0001574A 6B00                       		bmi.s	Sonic_LookUp
0001574C 7200                       		moveq	#0,d1
0001574E 1229 0014                  		move.b	obActWid(a1),d1
00015752 3401                       		move.w	d1,d2
00015754 D442                       		add.w	d2,d2
00015756 5942                       		subq.w	#4,d2
00015758 D268 0008                  		add.w	obX(a0),d1
0001575C 9269 0008                  		sub.w	obX(a1),d1
00015760 0C41 0004                  		cmpi.w	#4,d1
00015764 6D00                       		blt.s	loc_12F6A
00015766 B242                       		cmp.w	d2,d1
00015768 6C00                       		bge.s	loc_12F5A
0001576A 6000                       		bra.s	Sonic_LookUp
0001576C                            ; ===========================================================================
0001576C                            
0001576C                            Sonic_Balance:
0001576C 4EB9 0000 0000             		jsr	(ObjFloorDist).l
00015772 0C41 000C                  		cmpi.w	#$C,d1
00015776 6D00                       		blt.s	Sonic_LookUp
00015778 0C28 0003 0036             		cmpi.b	#3,$36(a0)
0001577E 6600                       		bne.s	loc_12F62
00015780                            
00015780                            loc_12F5A:
00015780 08A8 0000 0022             		bclr	#0,obStatus(a0)
00015786 6000                       		bra.s	loc_12F70
00015788                            ; ===========================================================================
00015788                            
00015788                            loc_12F62:
00015788 0C28 0003 0037             		cmpi.b	#3,$37(a0)
0001578E 6600                       		bne.s	Sonic_LookUp
00015790                            
00015790                            loc_12F6A:
00015790 08E8 0000 0022             		bset	#0,obStatus(a0)
00015796                            
00015796                            loc_12F70:
00015796 117C 0000 001C             		move.b	#id_Balance,obAnim(a0) ; use "balancing" animation
0001579C 6000 0000                  		bra.w	Sonic_ResetScr
000157A0                            ; ===========================================================================
000157A0                            
000157A0                            Sonic_LookUp:
000157A0 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
000157A6 6700                       		beq.s	Sonic_Duck	; if not, branch
000157A8 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
000157AE 5238 C903                  		addq.b	#1,($FFFFC903).w
000157B2 0C38 0078 C903             		cmp.b	#$78,($FFFFC903).w
000157B8 6500                       		bcs.s	Sonic_ResetScr_Part2
000157BA 11FC 0078 C903             		move.b	#$78,($FFFFC903).w
000157C0 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
000157C6 6700                       		beq.s	loc_12FC2
000157C8 5478 F73E                  		addq.w	#2,($FFFFF73E).w
000157CC 6000                       		bra.s	loc_12FC2
000157CE                            ; ===========================================================================
000157CE                            
000157CE                            Sonic_Duck:
000157CE 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
000157D4 6700                       		beq.s	Sonic_ResetScr	; if not, branch
000157D6 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
000157DC 5238 C903                  		addq.b	#1,($FFFFC903).w
000157E0 0C38 0078 C903             		cmpi.b	#$78,($FFFFC903).w
000157E6 6500                       		bcs.s	Sonic_ResetScr_Part2
000157E8 11FC 0078 C903             		move.b	#$78,($FFFFC903).w
000157EE 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
000157F4 6700                       		beq.s	loc_12FC2
000157F6 5578 F73E                  		subq.w	#2,($FFFFF73E).w
000157FA 6000                       		bra.s	loc_12FC2
000157FC                            ; ===========================================================================
000157FC                            
000157FC                            Sonic_ResetScr:
000157FC 11FC 0000 C903             		move.b	#0,($FFFFC903).w
00015802                            		
00015802                            Sonic_ResetScr_Part2:
00015802 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
00015808 6700                       		beq.s	loc_12FC2	; if yes, branch
0001580A 6400                       		bcc.s	loc_12FBE
0001580C 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
00015810                            
00015810                            loc_12FBE:
00015810 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
00015814                            
00015814                            loc_12FC2:
00015814 1038 F602                  		move.b	(v_jpadhold2).w,d0
00015818 0200 000C                  		andi.b	#btnL+btnR,d0	; is left/right	pressed?
0001581C 6600                       		bne.s	loc_12FEE	; if yes, branch
0001581E 3028 0020                  		move.w	obInertia(a0),d0
00015822 6700                       		beq.s	loc_12FEE
00015824 6B00                       		bmi.s	loc_12FE2
00015826 9045                       		sub.w	d5,d0
00015828 6400                       		bcc.s	loc_12FDC
0001582A 303C 0000                  		move.w	#0,d0
0001582E                            
0001582E                            loc_12FDC:
0001582E 3140 0020                  		move.w	d0,obInertia(a0)
00015832 6000                       		bra.s	loc_12FEE
00015834                            ; ===========================================================================
00015834                            
00015834                            loc_12FE2:
00015834 D045                       		add.w	d5,d0
00015836 6400                       		bcc.s	loc_12FEA
00015838 303C 0000                  		move.w	#0,d0
0001583C                            
0001583C                            loc_12FEA:
0001583C 3140 0020                  		move.w	d0,obInertia(a0)
00015840                            
00015840                            loc_12FEE:
00015840 4A28 0039                  		tst.b	$39(a0) 	;Peelout
00015844 6600                       		bne.s	loc_1300C 	;Peelout
00015846 1028 0026                  		move.b	obAngle(a0),d0
0001584A 4EB9 0000 3A32             		jsr	(CalcSine).l
00015850 C3E8 0020                  		muls.w	obInertia(a0),d1
00015854 E081                       		asr.l	#8,d1
00015856 3141 0010                  		move.w	d1,obVelX(a0)
0001585A C1E8 0020                  		muls.w	obInertia(a0),d0
0001585E E080                       		asr.l	#8,d0
00015860 3140 0012                  		move.w	d0,obVelY(a0)
00015864                            
00015864                            loc_1300C:
00015864 1028 0026                  		move.b	obAngle(a0),d0
00015868 0600 0040                  		addi.b	#$40,d0
0001586C 6B00                       		bmi.s	locret_1307C
0001586E 123C 0040                  		move.b	#$40,d1
00015872 4A68 0020                  		tst.w	obInertia(a0)
00015876 6700                       		beq.s	locret_1307C
00015878 6B00                       		bmi.s	loc_13024
0001587A 4441                       		neg.w	d1
0001587C                            
0001587C                            loc_13024:
0001587C 1028 0026                  		move.b	obAngle(a0),d0
00015880 D001                       		add.b	d1,d0
00015882 3F00                       		move.w	d0,-(sp)
00015884 6100 0000                  		bsr.w	Sonic_WalkSpeed
00015888 301F                       		move.w	(sp)+,d0
0001588A 4A41                       		tst.w	d1
0001588C 6A00                       		bpl.s	locret_1307C
0001588E E141                       		asl.w	#8,d1
00015890 0600 0020                  		addi.b	#$20,d0
00015894 0200 00C0                  		andi.b	#$C0,d0
00015898 6700                       		beq.s	loc_13078
0001589A 0C00 0040                  		cmpi.b	#$40,d0
0001589E 6700                       		beq.s	loc_13066
000158A0 0C00 0080                  		cmpi.b	#$80,d0
000158A4 6700                       		beq.s	loc_13060
000158A6 D368 0010                  		add.w	d1,obVelX(a0)
000158AA 08E8 0005 0022             		bset	#5,obStatus(a0)
000158B0 317C 0000 0020             		move.w	#0,obInertia(a0)
000158B6 4E75                       		rts	
000158B8                            ; ===========================================================================
000158B8                            
000158B8                            loc_13060:
000158B8 9368 0012                  		sub.w	d1,obVelY(a0)
000158BC 4E75                       		rts	
000158BE                            ; ===========================================================================
000158BE                            
000158BE                            loc_13066:
000158BE 9368 0010                  		sub.w	d1,obVelX(a0)
000158C2 08E8 0005 0022             		bset	#5,obStatus(a0)
000158C8 317C 0000 0020             		move.w	#0,obInertia(a0)
000158CE 4E75                       		rts	
000158D0                            ; ===========================================================================
000158D0                            
000158D0                            loc_13078:
000158D0 D368 0012                  		add.w	d1,obVelY(a0)
000158D4                            
000158D4                            locret_1307C:
000158D4 4E75                       		rts	
000158D6                            ; End of function Sonic_Move
000158D6                            
000158D6                            
000158D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000158D6                            
000158D6                            
000158D6                            Sonic_MoveLeft:
000158D6 3028 0020                  		move.w	obInertia(a0),d0
000158DA 6700                       		beq.s	loc_13086
000158DC 6A00                       		bpl.s	loc_130B2
000158DE                            
000158DE                            loc_13086:
000158DE 08E8 0000 0022             		bset	#0,$22(a0)
000158E4 6600                       		bne.s	loc_1309A
000158E6 08A8 0005 0022             		bclr	#5,$22(a0)
000158EC 117C 0001 001D             		move.b	#1,$1D(a0)
000158F2                            
000158F2                            loc_1309A:
000158F2 9045                       		sub.w	d5,d0
000158F4 3206                       		move.w	d6,d1
000158F6 4441                       		neg.w	d1
000158F8 B041                       		cmp.w	d1,d0
000158FA 6E00                       		bgt.s	loc_130A6
000158FC D045                       		add.w	d5,d0
000158FE B041                       		cmp.w	d1,d0
00015900 6F00                       		ble.s	loc_130A6
00015902 3001                       		move.w	d1,d0
00015904                            
00015904                            loc_130A6:
00015904 3140 0020                  		move.w	d0,obInertia(a0)
00015908 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
0001590E 4E75                       		rts
00015910                            ; ===========================================================================
00015910                            
00015910                            loc_130B2:
00015910 9044                       		sub.w	d4,d0
00015912 6400                       		bcc.s	loc_130BA
00015914 303C FF80                  		move.w	#-$80,d0
00015918                            
00015918                            loc_130BA:
00015918 3140 0020                  		move.w	d0,obInertia(a0)
0001591C 1228 0026                  		move.b	obAngle(a0),d1
00015920 0601 0020                  		addi.b	#$20,d1
00015924 0201 00C0                  		andi.b	#$C0,d1
00015928 6600                       		bne.s	locret_130E8
0001592A 0C40 0400                  		cmpi.w	#$400,d0
0001592E 6D00                       		blt.s	locret_130E8
00015930 117C 0000 001C             		move.b	#id_Stop,obAnim(a0) ; use "stopping" animation
00015936 08A8 0000 0022             		bclr	#0,obStatus(a0)
00015946 11FC 0006 D1E4                     move.b    #6,($FFFFD1E4).w    ; set the spin dash dust routine to skid dust
0001594C 11FC 0015 D1DA                     move.b    #$15,($FFFFD1DA).w
00015952                            		
00015952                            locret_130E8:
00015952 4E75                       		rts	
00015954                            ; End of function Sonic_MoveLeft
00015954                            
00015954                            
00015954                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015954                            
00015954                            
00015954                            Sonic_MoveRight:
00015954 3028 0020                  		move.w	obInertia(a0),d0
00015958 6B00                       		bmi.s	loc_13118
0001595A 08A8 0000 0022             		bclr	#0,$22(a0)
00015960 6700                       		beq.s	loc_13104
00015962 08A8 0005 0022             		bclr	#5,$22(a0)
00015968 117C 0001 001D             		move.b	#1,$1D(a0)
0001596E                            
0001596E                            loc_13104:
0001596E D045                       		add.w	d5,d0
00015970 B046                       		cmp.w	d6,d0
00015972 6D00                       		blt.s	loc_1310C
00015974 9045                       		sub.w	d5,d0
00015976 B046                       		cmp.w	d6,d0
00015978 6C00                       		bge.s	loc_1310C
0001597A 3006                       		move.w	d6,d0
0001597C                            
0001597C                            loc_1310C:
0001597C 3140 0020                  		move.w	d0,obInertia(a0)
00015980 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
00015986 4E75                       		rts
00015988                            ; ===========================================================================
00015988                            
00015988                            loc_13118:
00015988 D044                       		add.w	d4,d0
0001598A 6400                       		bcc.s	loc_13120
0001598C 303C 0080                  		move.w	#$80,d0
00015990                            
00015990                            loc_13120:
00015990 3140 0020                  		move.w	d0,obInertia(a0)
00015994 1228 0026                  		move.b	obAngle(a0),d1
00015998 0601 0020                  		addi.b	#$20,d1
0001599C 0201 00C0                  		andi.b	#$C0,d1
000159A0 6600                       		bne.s	locret_1314E
000159A2 0C40 FC00                  		cmpi.w	#-$400,d0
000159A6 6E00                       		bgt.s	locret_1314E
000159A8 117C 0000 001C             		move.b	#id_Stop,obAnim(a0) ; use "stopping" animation
000159AE 08E8 0000 0022             		bset	#0,obStatus(a0)
000159BE 11FC 0006 D1E4                     move.b    #6,($FFFFD1E4).w    ; set the spin dash dust routine to skid dust
000159C4 11FC 0015 D1DA                     move.b    #$15,($FFFFD1DA).w
000159CA                            		
000159CA                            locret_1314E:
000159CA 4E75                       		rts	
000159CC                            ; End of function Sonic_MoveRight
000159CC                            ; End of function Sonic_MoveRight
000159CC                            		include	"_incObj\Sonic RollSpeed.asm"
000159CC                            ; ---------------------------------------------------------------------------
000159CC                            ; Subroutine to	change Sonic's speed as he rolls
000159CC                            ; ---------------------------------------------------------------------------
000159CC                            
000159CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000159CC                            
000159CC                            
000159CC                            Sonic_RollSpeed:
000159CC 3C38 F760                  		move.w	(v_sonspeedmax).w,d6
000159D0 E346                       		asl.w	#1,d6
000159D2 7A06                       		moveq	#6,d5	; natural roll deceleration = 1/2 normal acceleration
000159D4 3838 F764                  		move.w	(v_sonspeeddec).w,d4
000159D8 E444                       		asr.w	#2,d4
000159DA 4A38 F7CA                  		tst.b	(f_jumponly).w
000159DE 6600 0000                  		bne.w	loc_131CC
000159E2 4A68 003E                  		tst.w	$3E(a0)
000159E6 6600                       		bne.s	@notright
000159E8 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
000159EE 6700                       		beq.s	@notleft	; if not, branch
000159F0 6100 0000                  		bsr.w	Sonic_RollLeft
000159F4                            
000159F4                            	@notleft:
000159F4 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
000159FA 6700                       		beq.s	@notright	; if not, branch
000159FC 6100 0000                  		bsr.w	Sonic_RollRight
00015A00                            
00015A00                            	@notright:
00015A00 3028 0020                  		move.w	obInertia(a0),d0
00015A04 6700                       		beq.s	loc_131AA
00015A06 6B00                       		bmi.s	loc_1319E
00015A08 9045                       		sub.w	d5,d0
00015A0A 6400                       		bcc.s	loc_13198
00015A0C 303C 0000                  		move.w	#0,d0
00015A10                            
00015A10                            loc_13198:
00015A10 3140 0020                  		move.w	d0,obInertia(a0)
00015A14 6000                       		bra.s	loc_131AA
00015A16                            ; ===========================================================================
00015A16                            
00015A16                            loc_1319E:
00015A16 D045                       		add.w	d5,d0
00015A18 6400                       		bcc.s	loc_131A6
00015A1A 303C 0000                  		move.w	#0,d0
00015A1E                            
00015A1E                            loc_131A6:
00015A1E 3140 0020                  		move.w	d0,obInertia(a0)
00015A22                            
00015A22                            loc_131AA:
00015A22 4A68 0020                  		tst.w	obInertia(a0)	; is Sonic moving?
00015A26 6600                       		bne.s	loc_131CC	; if yes, branch
00015A28 08A8 0002 0022             		bclr	#2,obStatus(a0)
00015A2E 117C 0013 0016             		move.b	#$13,obHeight(a0)
00015A34 117C 0009 0017             		move.b	#9,obWidth(a0)
00015A3A 117C 0000 001C             		move.b	#id_Wait,obAnim(a0) ; use "standing" animation
00015A40 5B68 000C                  		subq.w	#5,obY(a0)
00015A44                            
00015A44                            loc_131CC:
00015A44 0C78 0060 F73E             		cmp.w	#$60,($FFFFF73E).w
00015A4A 6700                       		beq.s	@cont2
00015A4C 6400                       		bcc.s	@cont1
00015A4E 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00015A52                            		
00015A52                            @cont1:
00015A52 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00015A56                            		
00015A56                            @cont2:
00015A56 1028 0026                  		move.b	obAngle(a0),d0
00015A5A 4EB9 0000 3A32             		jsr	(CalcSine).l
00015A60 C1E8 0020                  		muls.w	obInertia(a0),d0
00015A64 E080                       		asr.l	#8,d0
00015A66 3140 0012                  		move.w	d0,obVelY(a0)
00015A6A C3E8 0020                  		muls.w	obInertia(a0),d1
00015A6E E081                       		asr.l	#8,d1
00015A70 0C41 1000                  		cmpi.w	#$1000,d1
00015A74 6F00                       		ble.s	loc_131F0
00015A76 323C 1000                  		move.w	#$1000,d1
00015A7A                            
00015A7A                            loc_131F0:
00015A7A 0C41 F000                  		cmpi.w	#-$1000,d1
00015A7E 6C00                       		bge.s	loc_131FA
00015A80 323C F000                  		move.w	#-$1000,d1
00015A84                            
00015A84                            loc_131FA:
00015A84 3141 0010                  		move.w	d1,obVelX(a0)
00015A88 6000 FDDA                  		bra.w	loc_1300C
00015A8C                            ; End of function Sonic_RollSpeed
00015A8C                            
00015A8C                            
00015A8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015A8C                            
00015A8C                            
00015A8C                            Sonic_RollLeft:
00015A8C 3028 0020                  		move.w	obInertia(a0),d0
00015A90 6700                       		beq.s	loc_1320A
00015A92 6A00                       		bpl.s	loc_13218
00015A94                            
00015A94                            loc_1320A:
00015A94 08E8 0000 0022             		bset	#0,obStatus(a0)
00015A9A 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
00015AA0 4E75                       		rts	
00015AA2                            ; ===========================================================================
00015AA2                            
00015AA2                            loc_13218:
00015AA2 9044                       		sub.w	d4,d0
00015AA4 6400                       		bcc.s	loc_13220
00015AA6 303C FF80                  		move.w	#-$80,d0
00015AAA                            
00015AAA                            loc_13220:
00015AAA 3140 0020                  		move.w	d0,obInertia(a0)
00015AAE 4E75                       		rts	
00015AB0                            ; End of function Sonic_RollLeft
00015AB0                            
00015AB0                            
00015AB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015AB0                            
00015AB0                            
00015AB0                            Sonic_RollRight:
00015AB0 3028 0020                  		move.w	obInertia(a0),d0
00015AB4 6B00                       		bmi.s	loc_1323A
00015AB6 08A8 0000 0022             		bclr	#0,obStatus(a0)
00015ABC 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
00015AC2 4E75                       		rts	
00015AC4                            ; ===========================================================================
00015AC4                            
00015AC4                            loc_1323A:
00015AC4 D044                       		add.w	d4,d0
00015AC6 6400                       		bcc.s	loc_13242
00015AC8 303C 0080                  		move.w	#$80,d0
00015ACC                            
00015ACC                            loc_13242:
00015ACC 3140 0020                  		move.w	d0,obInertia(a0)
00015AD0 4E75                       		rts	
00015AD2                            ; End of function Sonic_RollRight
00015AD2                            ; End of function Sonic_RollRight
00015AD2                            		include	"_incObj\Sonic JumpDirection.asm"
00015AD2                            ; ---------------------------------------------------------------------------
00015AD2                            ; Subroutine to	change Sonic's direction while jumping
00015AD2                            ; ---------------------------------------------------------------------------
00015AD2                            
00015AD2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015AD2                            
00015AD2                            
00015AD2                            Sonic_JumpDirection:
00015AD2 3C38 F760                  		move.w	($FFFFF760).w,d6
00015AD6 3A38 F762                  		move.w	($FFFFF762).w,d5
00015ADA E345                       		asl.w	#1,d5
00015ADC 3028 0010                  		move.w	$10(a0),d0	
00015AE0 0838 0002 F602             		btst	#2,($FFFFF602).w; is left being pressed?	
00015AE6 6700                       		beq.s	loc_13278; if not, branch	
00015AE8 08E8 0000 0022             		bset	#0,$22(a0)	
00015AEE 9045                       		sub.w	d5,d0	
00015AF0 3206                       		move.w	d6,d1	
00015AF2 4441                       		neg.w	d1	
00015AF4 B041                       		cmp.w	d1,d0	
00015AF6 6E00                       		bgt.s	loc_13278	
00015AF8 D045                       		add.w	d5,d0		; +++ remove this frame's acceleration change
00015AFA B041                       		cmp.w	d1,d0		; +++ compare speed with top speed
00015AFC 6F00                       		ble.s	loc_13278	; +++ if speed was already greater than the maximum, branch	
00015AFE 3001                       		move.w	d1,d0
00015B00                            
00015B00                            loc_13278:
00015B00 0838 0003 F602             		btst	#3,($FFFFF602).w; is right being pressed?	
00015B06 6700                       		beq.s	Obj01_JumpMove; if not, branch	
00015B08 08A8 0000 0022             		bclr	#0,$22(a0)	
00015B0E D045                       		add.w	d5,d0	
00015B10 B046                       		cmp.w	d6,d0	
00015B12 6D00                       		blt.s	Obj01_JumpMove
00015B14 9045                       		sub.w	d5,d0		; +++ remove this frame's acceleration change
00015B16 B046                       		cmp.w	d6,d0		; +++ compare speed with top speed
00015B18 6C00                       		bge.s	Obj01_JumpMove	; +++ if speed was already greater than the maximum, branch
00015B1A 3006                       		move.w	d6,d0
00015B1C                            
00015B1C                            Obj01_JumpMove:
00015B1C 3140 0010                  		move.w	d0,obVelX(a0)	; change Sonic's horizontal speed
00015B20                            
00015B20                            Obj01_ResetScr2:
00015B20 0C78 0060 F73E             		cmpi.w	#$60,(v_lookshift).w ; is the screen in its default position?
00015B26 6700                       		beq.s	loc_132A4	; if yes, branch
00015B28 6400                       		bcc.s	loc_132A0
00015B2A 5878 F73E                  		addq.w	#4,(v_lookshift).w
00015B2E                            
00015B2E                            loc_132A0:
00015B2E 5578 F73E                  		subq.w	#2,(v_lookshift).w
00015B32                            
00015B32                            loc_132A4:
00015B32 0C68 FC00 0012             		cmpi.w	#-$400,obVelY(a0) ; is Sonic moving faster than -$400 upwards?
00015B38 6500                       		bcs.s	locret_132D2	; if yes, branch
00015B3A 3028 0010                  		move.w	obVelX(a0),d0
00015B3E 3200                       		move.w	d0,d1
00015B40 EA41                       		asr.w	#5,d1
00015B42 6700                       		beq.s	locret_132D2
00015B44 6B00                       		bmi.s	loc_132C6
00015B46 9041                       		sub.w	d1,d0
00015B48 6400                       		bcc.s	loc_132C0
00015B4A 303C 0000                  		move.w	#0,d0
00015B4E                            
00015B4E                            loc_132C0:
00015B4E 3140 0010                  		move.w	d0,obVelX(a0)
00015B52 4E75                       		rts	
00015B54                            ; ===========================================================================
00015B54                            
00015B54                            loc_132C6:
00015B54 9041                       		sub.w	d1,d0
00015B56 6500                       		bcs.s	loc_132CE
00015B58 303C 0000                  		move.w	#0,d0
00015B5C                            
00015B5C                            loc_132CE:
00015B5C 3140 0010                  		move.w	d0,obVelX(a0)
00015B60                            
00015B60                            locret_132D2:
00015B60 4E75                       		rts	
00015B62                            ; End of function Sonic_JumpDirection
00015B62                            ; End of function Sonic_JumpDirection
00015B62                            		include "_incObj\Sonic Peelout.asm"
00015B62                            ; ---------------------------------------------------------------------------
00015B62                            ; Subroutine to make Sonic perform a peelout
00015B62                            ; ---------------------------------------------------------------------------
00015B62                            ; If you use this makes sure to search for ;Peelout in Sonic1.asm
00015B62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015B62                            
00015B62                            Sonic_Peelout:
00015B62 0828 0001 0039             		btst	#1,$39(a0)
00015B68 6600                       		bne.s	SCDPeelout_Launch
00015B6A 0C28 0007 001C             		cmpi.b	#7,$1C(a0) ;check to see if your looking up
00015B70 6600                       		bne.s	@return
00015B72 1038 F603                  		move.b	($FFFFF603).w,d0
00015B76 0200 0070                  		andi.b	#%01110000,d0
00015B7A 6700 0000                  		beq.w	@return
00015B7E 117C 0001 001C             		move.b	#1,$1C(a0)
00015B84 317C 0000 003A             		move.w	#0,$3A(a0)
00015B8A 303C 00D2                  		move.w	#$D2,d0
00015B8E 4EB9 0000 1250             		jsr	(PlaySound_Special).l 		; Play peelout charge sound
00015B94                            	;	sfx 	sfx_PeeloutCharge 		; These are if you use AMPS
00015B94 588F                       		addq.l	#4,sp
00015B96 08E8 0001 0039             		bset	#1,$39(a0)
00015B9C                            		
00015B9C 4268 0020                  		clr.w	obInertia(a0)
00015BA0                             
00015BA0 6100 0000                  		bsr.w	Sonic_LevelBound
00015BA4 6100 0000                  		bsr.w	Sonic_AnglePos
00015BA8                             
00015BA8                            	@return:
00015BA8 4E75                       		rts	
00015BAA                            ; ---------------------------------------------------------------------------
00015BAA                             
00015BAA                            SCDPeelout_Launch:
00015BAA 0828 0001 0039             		btst	#1,$39(a0)
00015BB0 1038 F602                  		move.b	($FFFFF602).w,d0
00015BB4 0800 0000                  		btst	#0,d0
00015BB8 6600 0000                  		bne.w	SCDPeelout_Charge
00015BBC 08A8 0001 0039             		bclr	#1,$39(a0)	; stop Dashing
00015BC2 0C28 001E 003A             		cmpi.b	#$1E,$3A(a0)	; have we been charging long enough?
00015BC8 6600 0000                  		bne.w	SCDPeelout_Stop_Sound
00015BCC 117C 0000 001C             		move.b	#0,$1C(a0)	; launches here (peelout sprites)
00015BD2 317C 0001 0010             		move.w	#1,$10(a0)	; force X speed to nonzero for camera lag's benefit
00015BD8 3028 0020                  		move.w	obInertia(a0),d0
00015BDC 0440 0800                  		subi.w	#$800,d0
00015BE0 D040                       		add.w	d0,d0
00015BE2 0240 1F00                  		andi.w	#$1F00,d0
00015BE6 4440                       		neg.w	d0
00015BE8 0640 2000                  		addi.w	#$2000,d0
00015BEC 31C0 C904                  		move.w	d0,($FFFFC904).w
00015BF0 0828 0000 0022             		btst	#0,$22(a0)
00015BF6 6700                       		beq.s	@dontflip
00015BF8 4468 0020                  		neg.w	obInertia(a0)
00015BFC                             
00015BFC                            @dontflip:
00015BFC 08A8 0007 0022             		bclr	#7,$22(a0)
00015C02 303C 00D3                  		move.w	#$D3,d0
00015C06 4EB9 0000 1250             		jsr	(PlaySound_Special).l
00015C0C                            	;	sfx 	sfx_PeeloutRelease
00015C0C 1028 0026                  		move.b	obAngle(a0),d0
00015C10 4EB9 0000 3A32             		jsr	(CalcSine).l
00015C16 C3E8 0020                  		muls.w	obInertia(a0),d1
00015C1A E081                       		asr.l	#8,d1
00015C1C 3141 0010                  		move.w	d1,obVelX(a0)
00015C20 C1E8 0020                  		muls.w	obInertia(a0),d0
00015C24 E080                       		asr.l	#8,d0
00015C26 3140 0012                  		move.w	d0,obVelY(a0)	
00015C2A 6000 0000                  		bra.w	SCDPeelout_ResetScr
00015C2E                            ; ---------------------------------------------------------------------------
00015C2E                             
00015C2E                            SCDPeelout_Charge:				; If still charging the dash...
00015C2E 3238 F760                  		move.w	($FFFFF760).w,d1	; get top peelout speed
00015C32 3401                       		move.w	d1,d2
00015C34 D241                       		add.w	d1,d1
00015C36 4A38 FE2E                  		tst.b   ($FFFFFE2E).w 		; test for speed shoes
00015C3A 6700                       		beq.s	@noshoes
00015C3C E242                       		asr.w	#1,d2
00015C3E 9242                       		sub.w	d2,d1
00015C40                            
00015C40                            @noshoes:
00015C40 0668 0064 0020             		addi.w	#$64,obInertia(a0)		; increment speed
00015C46 B268 0020                  		cmp.w	obInertia(a0),d1
00015C4A 6E00                       		bgt.s	@inctimer
00015C4C 3141 0020                  		move.w	d1,obInertia(a0)
00015C50                            
00015C50                            @inctimer:
00015C50 5228 003A                  		addq.b	#1,$3A(a0)		; increment timer
00015C54 0C28 001E 003A             		cmpi.b	#$1E,$3A(a0)
00015C5A 6500                       		bcs.s	SCDPeelout_ResetScr
00015C5C 117C 001E 003A             		move.b	#$1E,$3A(a0)
00015C62 4EF9 0000 0000             		jmp 	SCDPeelout_ResetScr
00015C68                            		
00015C68                            SCDPeelout_Stop_Sound:
00015C68 303C 00D4                  		move.w	#$D4,d0
00015C6C 4EB9 0000 1250             		jsr		(PlaySound_Special).l
00015C72                            	;	sfx 	sfx_PeeloutStop
00015C72 4268 0020                  		clr.w	obInertia(a0)
00015C76                            
00015C76                            SCDPeelout_ResetScr:
00015C76 588F                       		addq.l	#4,sp			; increase stack ptr ; was 4
00015C78 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00015C7E 6700                       		beq.s	@finish
00015C80 6400                       		bcc.s	@skip
00015C82 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00015C86                             
00015C86                            	@skip:
00015C86 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00015C8A                             
00015C8A                            	@finish:
00015C8A 6100 0000                  		bsr.w	Sonic_LevelBound
00015C8E 6100 0000                  		bsr.w	Sonic_AnglePos
00015C92 4E75                       		rts
00015C94                            		
00015C94                            		
00015C94                            		include "_incObj\Sonic Spindash.asm"
00015C94                            ; ---------------------------------------------------------------------------
00015C94                            ; Subroutine to make Sonic perform a spindash
00015C94                            ; ---------------------------------------------------------------------------
00015C94                             
00015C94                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015C94                             
00015C94                             
00015C94                            Sonic_SpinDash:
00015C94 4A28 0039                  		tst.b	f_spindash(a0)			; already Spin Dashing?
00015C98 6600                       		bne.s	loc2_1AC8E		; if set, branch
00015C9A 0C28 0000 001C             		cmpi.b	#id_duck,obAnim(a0)		; is anim duck
00015CA0 6600                       		bne.s	locret2_1AC8C		; if not, return
00015CA2 1038 F603                  		move.b	(v_jpadpress2).w,d0	; read controller
00015CA6 0200 0070                  		andi.b	#$70,d0			; pressing A/B/C ?
00015CAA 6700 0000                  		beq.w	locret2_1AC8C		; if not, return
00015CAE 117C 0000 001C             		move.b	#id_spindash,obAnim(a0)		; set Spin Dash anim (9 in s2)
00015CB4 303C 00D5                  		move.w	#$D5,d0			; spin sound ($E0 in s2)
00015CB8 4EB9 0000 1250             		jsr	(PlaySound_Special).l	; play spin sound
00015CBE 588F                       		addq.l	#4,sp			; Add 4 bytes to the stack return address to skip Sonic_Jump on next rts to Obj01_MdNormal, preventing conflicts with button presses.
00015CC0 117C 0001 0039             		move.b	#1,f_spindash(a0)		; set Spin Dash flag
00015CC6 317C 0000 003A             		move.w	#0,$3A(a0)		; set charge count to 0
00015CCC                            		;cmpi.b	#$C,$28(a0)		; ??? oxygen remaining?
00015CCC                            		;bcs.s	loc2_1AC84		; ??? branch if carry
00015CCC 11FC 0002 D1DC             		move.b	#2,($FFFFD1DC).w	; Set the Spin Dash dust animation to $2.
00015CD2                            						; the smoke/dust object
00015CD2                            loc2_1AC84:
00015CD2 6100 0000                  		bsr.w	Sonic_LevelBound
00015CD6 6100 0000                  		bsr.w	Sonic_AnglePos
00015CDA                            
00015CDA                            locret2_1AC8C:
00015CDA 4E75                       		rts	
00015CDC                            ; ---------------------------------------------------------------------------
00015CDC                            
00015CDC                            loc2_1AC8E:	
00015CDC 117C 001F 001C             		move.b	#$1F,$1C(a0)
00015CE2 1038 F602                  		move.b	(v_jpadhold2).w,d0	; read controller
00015CE6 0800 0001                  		btst	#1,d0			; check down button
00015CEA 6600 0000                  		bne.w	loc2_1AD30		; if set, branch
00015CEE 117C 000E 0016             		move.b	#$E,$16(a0)		; $16(a0) is height/2
00015CF4 117C 0007 0017             		move.b	#7,$17(a0)		; $17(a0) is width/2
00015CFA 117C 0000 001C             		move.b	#id_roll,obAnim(a0)		; set animation to roll
00015D00 5A68 000C                  		addq.w	#5,$C(a0)		; $C(a0) is Y coordinate
00015D04 117C 0000 0039             		move.b	#0,f_spindash(a0)		; clear Spin Dash flag
00015D0A 7000                       		moveq	#0,d0
00015D0C 1028 003A                  		move.b	$3A(a0),d0		; copy charge count
00015D10 D040                       		add.w	d0,d0			; double it
00015D12 317B 0000 0020             		move.w	Dash_Speeds(pc,d0.w),obInertia(a0) ; get normal speed
00015D18 3028 0020                  		move.w	obInertia(a0),d0		; get inertia
00015D1C 0440 0800                  		subi.w	#$800,d0		; subtract $800
00015D20 D040                       		add.w	d0,d0			; double it
00015D22 0240 1F00                  		andi.w	#$1F00,d0		; mask it against $1F00
00015D26 4440                       		neg.w	d0			; negate it
00015D28 0640 2000                  		addi.w	#$2000,d0		; add $2000
00015D2C 31C0 C904                  		move.w	d0,($FFFFC904).w	; move to $EED0
00015D30 0828 0000 0022             		btst	#0,$22(a0)		; is sonic facing right?
00015D36 6700                       		beq.s	loc2_1ACF4		; if not, branch
00015D38 4468 0020                  		neg.w	obInertia(a0)			; negate inertia
00015D3C                            
00015D3C                            loc2_1ACF4:
00015D3C 08E8 0002 0022             		bset	#2,$22(a0)		; set unused (in s1) flag
00015D42 11FC 0000 D1DC             		move.b	#0,($FFFFD1DC).w	; clear Spin Dash dust animation.
00015D48 303C 00BC                  		move.w	#$BC,d0			; spin release sound
00015D4C 4EB9 0000 1250             		jsr	(PlaySound_Special).l	; play it!
00015D52 1028 0026                  		move.b	obAngle(a0),d0
00015D56 4EB9 0000 3A32             		jsr	(CalcSine).l
00015D5C C3E8 0020                  		muls.w	obInertia(a0),d1
00015D60 E081                       		asr.l	#8,d1
00015D62 3141 0010                  		move.w	d1,obVelX(a0)
00015D66 C1E8 0020                  		muls.w	obInertia(a0),d0
00015D6A E080                       		asr.l	#8,d0
00015D6C 3140 0012                  		move.w	d0,obVelY(a0)
00015D70                            	
00015D70 6000                       		bra.s	loc2_1AD78
00015D72                            ; ===========================================================================
00015D72                            Dash_Speeds:
00015D72 0600                       		dc.w  $600		; 0
00015D74 0680                       		dc.w  $680		; 1
00015D76 0700                       		dc.w  $700		; 2
00015D78 0780                       		dc.w  $780		; 3
00015D7A 0800                       		dc.w  $800		; 4
00015D7C 0880                       		dc.w  $880		; 5
00015D7E 0900                       		dc.w  $900		; 6
00015D80 0980                       		dc.w  $980		; 7
00015D82 0A00                       		dc.w  $A00		; 8
00015D84                            ; ===========================================================================
00015D84                            
00015D84                            loc2_1AD30:				; If still charging the dash...
00015D84 4A68 003A                  		tst.w	$3A(a0)		; check charge count
00015D88 6700                       		beq.s	loc2_1AD48	; if zero, branch
00015D8A 3028 003A                  		move.w	$3A(a0),d0	; otherwise put it in d0
00015D8E EA48                       		lsr.w	#5,d0		; shift right 5 (divide it by 32)
00015D90 9168 003A                  		sub.w	d0,$3A(a0)	; subtract from charge count
00015D94 6400                       		bcc.s	loc2_1AD48	; ??? branch if carry clear
00015D96 317C 0000 003A             		move.w	#0,$3A(a0)	; set charge count to 0
00015D9C                            
00015D9C                            loc2_1AD48:
00015D9C 1038 F603                  		move.b	(v_jpadpress2).w,d0	; read controller
00015DA0 0200 0070                  		andi.b	#$70,d0			; pressing A/B/C?
00015DA4 6700 0000                  		beq.w	loc2_1AD78		; if not, branch
00015DA8 317C 1F00 001C             		move.w	#$1F00,obAnim(a0)	; reset spdsh animation
00015DAE 303C 00D5                  		move.w	#$D5,d0			; was $E0 in sonic 2
00015DB2 11FC 0002 D1DC             		move.b	#2,$FFFFD1DC.w		; Set the Spin Dash dust animation to $2.
00015DB8 4EB9 0000 1250             		jsr	(PlaySound_Special).l	; play charge sound
00015DBE 0668 0200 003A             		addi.w	#$200,$3A(a0)		; increase charge count
00015DC4 0C68 0800 003A             		cmpi.w	#$800,$3A(a0)		; check if it's maxed
00015DCA 6500                       		bcs.s	loc2_1AD78		; if not, then branch
00015DCC 317C 0800 003A             		move.w	#$800,$3A(a0)		; reset it to max
00015DD2                            
00015DD2                            loc2_1AD78:
00015DD2 588F                       		addq.l	#4,sp			; Add 4 bytes to the stack return address to skip Sonic_Jump on next rts to Obj01_MdNormal, preventing conflicts with button presses.
00015DD4 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w	; $EED8 only ever seems
00015DDA 6700                       		beq.s	loc2_1AD8C		; to be used in Spin Dash
00015DDC 6400                       		bcc.s	loc2_1AD88
00015DDE 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00015DE2                            
00015DE2                            loc2_1AD88:
00015DE2 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00015DE6                            
00015DE6                            loc2_1AD8C:
00015DE6 6100 0000                  		bsr.w	Sonic_LevelBound
00015DEA 6100 0000                  		bsr.w	Sonic_AnglePos
00015DEE                            		;move.w	#$60,(v_lookshift).w	; reset looking up/down
00015DEE 4E75                       		rts
00015DF0                            ; End of subroutine Sonic_SpinDash
00015DF0                            ; End of subroutine Sonic_SpinDash
00015DF0                            
00015DF0                            Sonic_AirRoll:
00015DF0 0C28 0000 001C             	cmpi.b  #id_spring,$1C(a0)      ; is sonic in the spring animation?
00015DF6 6600                               bne.s   AirRoll_Return   ; if not, return
00015DF8                            
00015DF8                            AirRoll_CheckBtn:
00015DF8 1038 F603                          move.b	($FFFFF603).w,d0 ; Move $FFFFF603 to d0
00015DFC 0200 0070                          andi.b	#btnABC,d0 ; Has A/B/C been pressed?
00015E00 6700                               beq.s	AirRoll_Return
00015E02 117C 0000 001C             	move.b	#id_roll,$1C(a0) ; Set Sonic's animation to rolling.
00015E08                                   ; move.w	#$BC,d0
00015E08                                   ; jsr	(PlaySound_Special).l ;    play Sonic rolling sound
00015E08                            
00015E08                            AirRoll_Return:
00015E08 4E75                               rts
00015E0A                            ; ===========================================================================
00015E0A                            ; ---------------------------------------------------------------------------
00015E0A                            ; Unused subroutine to squash Sonic
00015E0A                            ; ---------------------------------------------------------------------------
00015E0A 1028 0026                  		move.b	obAngle(a0),d0
00015E0E 0600 0020                  		addi.b	#$20,d0
00015E12 0200 00C0                  		andi.b	#$C0,d0
00015E16 6600                       		bne.s	locret_13302
00015E18 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00015E1C 4A41                       		tst.w	d1
00015E1E 6A00                       		bpl.s	locret_13302
00015E20 317C 0000 0020             		move.w	#0,obInertia(a0) ; stop Sonic moving
00015E26 317C 0000 0010             		move.w	#0,obVelX(a0)
00015E2C 317C 0000 0012             		move.w	#0,obVelY(a0)
00015E32 117C 0000 001C             		move.b	#id_Warp3,obAnim(a0) ; use "warping" animation
00015E38                            
00015E38                            locret_13302:
00015E38 4E75                       		rts		
00015E3A                            		include	"_incObj\Sonic LevelBound.asm"
00015E3A                            ; ---------------------------------------------------------------------------
00015E3A                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
00015E3A                            ; ---------------------------------------------------------------------------
00015E3A                            
00015E3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015E3A                            
00015E3A                            
00015E3A                            Sonic_LevelBound:
00015E3A 2228 0008                  		move.l	obX(a0),d1
00015E3E 3028 0010                  		move.w	obVelX(a0),d0
00015E42 48C0                       		ext.l	d0
00015E44 E180                       		asl.l	#8,d0
00015E46 D280                       		add.l	d0,d1
00015E48 4841                       		swap	d1
00015E4A 3038 F728                  		move.w	(v_limitleft2).w,d0
00015E4E 0640 0010                  		addi.w	#$10,d0
00015E52 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00015E54 6200                       		bhi.s	@sides		; if yes, branch
00015E56 3038 F72A                  		move.w	(v_limitright2).w,d0
00015E5A 0640 0128                  		addi.w	#$128,d0
00015E5E 4A38 F7AA                  		tst.b	(f_lockscreen).w
00015E62 6600                       		bne.s	@screenlocked
00015E64 0640 0040                  		addi.w	#$40,d0
00015E68                            
00015E68                            	@screenlocked:
00015E68 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00015E6A 6300                       		bls.s	@sides		; if yes, branch
00015E6C                            
00015E6C                            	@chkbottom:
00015E6C 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00015E70 0640 00E0                  		addi.w	#$E0,d0
00015E74 B068 000C                  		cmp.w	obY(a0),d0	; has Sonic touched the	bottom boundary?
00015E78 6D00                       		blt.s	@bottom		; if yes, branch
00015E7A 4E75                       		rts	
00015E7C                            ; ===========================================================================
00015E7C                            
00015E7C                            @bottom:
00015E7C 3038 F726                  		move.w (v_limitbtm1).w,d0 
00015E80 3238 F72E                  		move.w (v_limitbtm2).w,d1 
00015E84 B240                       		cmp.w d0,d1 ; screen still scrolling down? 
00015E86 6D00                       		blt.s @dontkill; if so, don't kill Sonic 
00015E88 0C78 0501 FE10             		cmpi.w	#(id_SBZ<<8)+1,(v_zone).w ; is level SBZ2 ?
00015E8E 6600 0000                  		bne.w	Kill_transport	; if not, kill Sonic
00015E92 0C78 2000 D008             		cmpi.w	#$2000,(v_player+obX).w
00015E98 6500 0000                  		bcs.w	Kill_transport
00015E9C 4238 FE30                  		clr.b	(v_lastlamp).w	; clear	lamppost counter
00015EA0 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart the level
00015EA6 31FC 0103 FE10             		move.w	#(id_LZ<<8)+3,(v_zone).w ; set level to SBZ3 (LZ4)
00015EAC 4E75                       		rts	
00015EAE                            @dontkill: 
00015EAE 4E75                       		rts
00015EB0                            ; ===========================================================================
00015EB0                            
00015EB0                            @sides:
00015EB0 3140 0008                  		move.w	d0,obX(a0)
00015EB4 317C 0000 000A             		move.w	#0,obX+2(a0)
00015EBA 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop Sonic moving
00015EC0 317C 0000 0020             		move.w	#0,obInertia(a0)
00015EC6 60A4                       		bra.s	@chkbottom
00015EC8                            
00015EC8                            Kill_transport: 
00015EC8 4EF9 0000 0000                     	jmp        (KillSonic).l
00015ECE                            
00015ECE                            ; End of function Sonic_LevelBound
00015ECE                            ; End of function Sonic_LevelBound
00015ECE                            		include	"_incObj\Sonic Roll.asm"
00015ECE                            ; ---------------------------------------------------------------------------
00015ECE                            ; Subroutine allowing Sonic to roll when he's moving
00015ECE                            ; ---------------------------------------------------------------------------
00015ECE                            
00015ECE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015ECE                            
00015ECE                            
00015ECE                            Sonic_Roll:
00015ECE 4A38 F7CA                  		tst.b	(f_jumponly).w
00015ED2 6600                       		bne.s	@noroll
00015ED4 3028 0020                  		move.w	obInertia(a0),d0
00015ED8 6A00                       		bpl.s	@ispositive
00015EDA 4440                       		neg.w	d0
00015EDC                            
00015EDC                            	@ispositive:
00015EDC 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00015EE0 6500                       		bcs.s	@noroll		; if not, branch
00015EE2 1038 F602                  		move.b	(v_jpadhold2).w,d0
00015EE6 0200 000C                  		andi.b	#btnL+btnR,d0	; is left/right	being pressed?
00015EEA 6600                       		bne.s	@noroll		; if yes, branch
00015EEC 0838 0001 F602             		btst	#bitDn,(v_jpadhold2).w ; is down being pressed?
00015EF2 6600                       		bne.s	Sonic_ChkRoll	; if yes, branch
00015EF4                            
00015EF4                            	@noroll:
00015EF4 4E75                       		rts	
00015EF6                            ; ===========================================================================
00015EF6                            
00015EF6                            Sonic_ChkRoll:
00015EF6 0828 0002 0022             		btst	#2,obStatus(a0)	; is Sonic already rolling?
00015EFC 6700                       		beq.s	@roll		; if not, branch
00015EFE 4E75                       		rts	
00015F00                            ; ===========================================================================
00015F00                            
00015F00                            @roll:
00015F00 08E8 0002 0022             		bset	#2,obStatus(a0)
00015F06 117C 000E 0016             		move.b	#$E,obHeight(a0)
00015F0C 117C 0007 0017             		move.b	#7,obWidth(a0)
00015F12 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
00015F18 5A68 000C                  		addq.w	#5,obY(a0)
00015F26 4A68 0020                  		tst.w	obInertia(a0)
00015F2A 6600                       		bne.s	@ismoving
00015F2C 317C 0200 0020             		move.w	#$200,obInertia(a0) ; set inertia if 0
00015F32                            
00015F32                            	@ismoving:
00015F32 4E75                       		rts	
00015F34                            ; End of function Sonic_Roll
00015F34                            ; End of function Sonic_Roll
00015F34                            		include	"_incObj\Sonic Jump.asm"
00015F34                            ; ---------------------------------------------------------------------------
00015F34                            ; Subroutine allowing Sonic to jump
00015F34                            ; ---------------------------------------------------------------------------
00015F34                            
00015F34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015F34                            
00015F34                            
00015F34                            Sonic_Jump:
00015F34 1038 F603                  		move.b	(v_jpadpress2).w,d0
00015F38 0200 0070                  		andi.b	#btnABC,d0	; is A, B or C pressed?
00015F3C 6700 0000                  		beq.w	locret_1348E	; if not, branch
00015F40 7000                       		moveq	#0,d0
00015F42 1028 0026                  		move.b	obAngle(a0),d0
00015F46 0600 0080                  		addi.b	#$80,d0
00015F4A 6100 0000                  		bsr.w	sub_14D48
00015F4E 0C41 0006                  		cmpi.w	#6,d1
00015F52 6D00 0000                  		blt.w	locret_1348E
00015F56 343C 0680                  		move.w	#$680,d2
00015F5A 0828 0006 0022             		btst	#6,obStatus(a0)
00015F60 6700                       		beq.s	loc_1341C
00015F62 343C 0380                  		move.w	#$380,d2
00015F66                            
00015F66                            loc_1341C:
00015F66 7000                       		moveq	#0,d0
00015F68 1028 0026                  		move.b	obAngle(a0),d0
00015F6C 0400 0040                  		subi.b	#$40,d0
00015F70 4EB9 0000 3A32             		jsr	(CalcSine).l
00015F76 C3C2                       		muls.w	d2,d1
00015F78 E081                       		asr.l	#8,d1
00015F7A D368 0010                  		add.w	d1,obVelX(a0)	; make Sonic jump
00015F7E C1C2                       		muls.w	d2,d0
00015F80 E080                       		asr.l	#8,d0
00015F82 D168 0012                  		add.w	d0,obVelY(a0)	; make Sonic jump
00015F86 08E8 0001 0022             		bset	#1,obStatus(a0)
00015F8C 08A8 0005 0022             		bclr	#5,obStatus(a0)
00015F92 588F                       		addq.l	#4,sp
00015F94 117C 0001 003C             		move.b	#1,$3C(a0)
00015F9A 4228 0038                  		clr.b	$38(a0)
00015FA8 117C 0013 0016             		move.b	#$13,obHeight(a0)
00015FAE 117C 0009 0017             		move.b	#9,obWidth(a0)
00015FB4 117C 000E 0016             		move.b	#$E,obHeight(a0)
00015FBA 117C 0007 0017             		move.b	#7,obWidth(a0)
00015FC0                            Result_Check:
00015FC0 4A38 F5C2                  		tst.b   ($FFFFF5C2).w ; Has the victory animation flag been set?
00015FC4 6700                       		beq.s   NormalJump ; If not, branch
00015FC6 117C 0013 001C             		move.b  #$13,$1C(a0) ; Play the victory animation
00015FCC 6000                       		bra.s   cont ; Continue
00015FCE                            NormalJump:
00015FCE 117C 0002 001C             		move.b  #2,$1C(a0)    ; use "jumping"    animation
00015FD4                            cont:
00015FD4 08E8 0002 0022             		bset	#2,obStatus(a0)
00015FDA 5A68 000C                  		addq.w	#5,obY(a0)
00015FDE                            
00015FDE                            locret_1348E:
00015FDE 4E75                       		rts	
00015FE0                            ; ===========================================================================
00015FE0                            
00015FE0                            ; End of function Sonic_Jump
00015FE0                            ; End of function Sonic_Jump
00015FE0                            		include	"_incObj\Sonic JumpHeight.asm"
00015FE0                            ; ---------------------------------------------------------------------------
00015FE0                            ; Subroutine controlling Sonic's jump height/duration
00015FE0                            ; ---------------------------------------------------------------------------
00015FE0                            
00015FE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015FE0                            
00015FE0                            
00015FE0                            Sonic_JumpHeight:
00015FE0 4A28 003C                  		tst.b	$3C(a0)
00015FE4 6700                       		beq.s	loc_134C4
00015FE6 323C FC00                  		move.w	#-$400,d1
00015FEA 0828 0006 0022             		btst	#6,obStatus(a0)
00015FF0 6700                       		beq.s	loc_134AE
00015FF2 323C FE00                  		move.w	#-$200,d1
00015FF6                            
00015FF6                            loc_134AE:
00015FF6 B268 0012                  		cmp.w	obVelY(a0),d1
00015FFA 6F00                       		ble.s	locret_134C2
00015FFC 1038 F602                  		move.b	(v_jpadhold2).w,d0
00016000 0200 0070                  		andi.b	#btnABC,d0	; is A, B or C pressed?
00016004 6600                       		bne.s	locret_134C2	; if yes, branch
00016006 3141 0012                  		move.w	d1,obVelY(a0)
0001600A                            
0001600A                            locret_134C2:
0001600A 4E75                       		rts	
0001600C                            ; ===========================================================================
0001600C                            
0001600C                            loc_134C4:
0001600C 0C68 F040 0012             		cmpi.w	#-$FC0,obVelY(a0)
00016012 6C00                       		bge.s	locret_134D2
00016014 317C F040 0012             		move.w	#-$FC0,obVelY(a0)
0001601A                            
0001601A                            locret_134D2:
0001601A 4E75                       		rts	
0001601C                            ; End of function Sonic_JumpHeight
0001601C                            ; End of function Sonic_JumpHeight
0001601C                            		include	"_incObj\Sonic SlopeResist.asm"
0001601C                            ; ---------------------------------------------------------------------------
0001601C                            ; Subroutine to	slow Sonic walking up a	slope
0001601C                            ; ---------------------------------------------------------------------------
0001601C                            
0001601C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001601C                            
0001601C                            
0001601C                            Sonic_SlopeResist:
0001601C 1028 0026                  		move.b	obAngle(a0),d0
00016020 0600 0060                  		addi.b	#$60,d0
00016024 0C00 00C0                  		cmpi.b	#$C0,d0
00016028 6400                       		bcc.s	locret_13508
0001602A 1028 0026                  		move.b	obAngle(a0),d0
0001602E 4EB9 0000 3A32             		jsr	(CalcSine).l
00016034 C1FC 0020                  		muls.w	#$20,d0
00016038 E080                       		asr.l	#8,d0
0001603A 4A68 0020                  		tst.w	obInertia(a0)
0001603E 6700                       		beq.s	locret_13508
00016040 6B00                       		bmi.s	loc_13504
00016042 4A40                       		tst.w	d0
00016044 6700                       		beq.s	locret_13502
00016046 D168 0020                  		add.w	d0,obInertia(a0) ; change Sonic's inertia
0001604A                            
0001604A                            locret_13502:
0001604A 4E75                       		rts	
0001604C                            ; ===========================================================================
0001604C                            
0001604C                            loc_13504:
0001604C D168 0020                  		add.w	d0,obInertia(a0)
00016050                            
00016050                            locret_13508:
00016050 4E75                       		rts	
00016052                            ; End of function Sonic_SlopeResist
00016052                            ; End of function Sonic_SlopeResist
00016052                            		include	"_incObj\Sonic RollRepel.asm"
00016052                            ; ---------------------------------------------------------------------------
00016052                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00016052                            ; ---------------------------------------------------------------------------
00016052                            
00016052                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016052                            
00016052                            
00016052                            Sonic_RollRepel:
00016052 1028 0026                  		move.b	obAngle(a0),d0
00016056 0600 0060                  		addi.b	#$60,d0
0001605A 0C00 00C0                  		cmpi.b	#-$40,d0
0001605E 6400                       		bcc.s	locret_13544
00016060 1028 0026                  		move.b	obAngle(a0),d0
00016064 4EB9 0000 3A32             		jsr	(CalcSine).l
0001606A C1FC 0050                  		muls.w	#$50,d0
0001606E E080                       		asr.l	#8,d0
00016070 4A68 0020                  		tst.w	obInertia(a0)
00016074 6B00                       		bmi.s	loc_1353A
00016076 4A40                       		tst.w	d0
00016078 6A00                       		bpl.s	loc_13534
0001607A E480                       		asr.l	#2,d0
0001607C                            
0001607C                            loc_13534:
0001607C D168 0020                  		add.w	d0,obInertia(a0)
00016080 4E75                       		rts	
00016082                            ; ===========================================================================
00016082                            
00016082                            loc_1353A:
00016082 4A40                       		tst.w	d0
00016084 6B00                       		bmi.s	loc_13540
00016086 E480                       		asr.l	#2,d0
00016088                            
00016088                            loc_13540:
00016088 D168 0020                  		add.w	d0,obInertia(a0)
0001608C                            
0001608C                            locret_13544:
0001608C 4E75                       		rts	
0001608E                            ; End of function Sonic_RollRepel
0001608E                            ; End of function Sonic_RollRepel
0001608E                            		include	"_incObj\Sonic SlopeRepel.asm"
0001608E                            ; ---------------------------------------------------------------------------
0001608E                            ; Subroutine to	push Sonic down	a slope
0001608E                            ; ---------------------------------------------------------------------------
0001608E                            
0001608E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001608E                            
0001608E                            
0001608E                            Sonic_SlopeRepel:
0001608E 4E71                       		nop	
00016090 4A28 0038                  		tst.b	$38(a0)
00016094 6600                       		bne.s	locret_13580
00016096 4A68 003E                  		tst.w	$3E(a0)
0001609A 6600                       		bne.s	loc_13582
0001609C 1028 0026                  		move.b	obAngle(a0),d0
000160A0 0600 0020                  		addi.b	#$20,d0
000160A4 0200 00C0                  		andi.b	#$C0,d0
000160A8 6700                       		beq.s	locret_13580
000160AA 3028 0020                  		move.w	obInertia(a0),d0
000160AE 6A00                       		bpl.s	loc_1356A
000160B0 4440                       		neg.w	d0
000160B2                            
000160B2                            loc_1356A:
000160B2 0C40 0280                  		cmpi.w	#$280,d0
000160B6 6400                       		bcc.s	locret_13580
000160B8 4268 0020                  		clr.w	obInertia(a0)
000160BC 08E8 0001 0022             		bset	#1,obStatus(a0)
000160C2 317C 001E 003E             		move.w	#$1E,$3E(a0)
000160C8                            
000160C8                            locret_13580:
000160C8 4E75                       		rts	
000160CA                            ; ===========================================================================
000160CA                            
000160CA                            loc_13582:
000160CA 5368 003E                  		subq.w	#1,$3E(a0)
000160CE 4E75                       		rts	
000160D0                            ; End of function Sonic_SlopeRepel
000160D0                            ; End of function Sonic_SlopeRepel
000160D0                            		include	"_incObj\Sonic JumpAngle.asm"
000160D0                            ; ---------------------------------------------------------------------------
000160D0                            ; Subroutine to	return Sonic's angle to 0 as he jumps
000160D0                            ; ---------------------------------------------------------------------------
000160D0                            
000160D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000160D0                            
000160D0                            
000160D0                            Sonic_JumpAngle:
000160D0 1028 0026                  		move.b	obAngle(a0),d0	; get Sonic's angle
000160D4 6700                       		beq.s	locret_135A2	; if already 0,	branch
000160D6 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
000160D8                            
000160D8 5400                       		addq.b	#2,d0		; increase angle
000160DA 6400                       		bcc.s	loc_13596
000160DC 7000                       		moveq	#0,d0
000160DE                            
000160DE                            loc_13596:
000160DE 6000                       		bra.s	loc_1359E
000160E0                            ; ===========================================================================
000160E0                            
000160E0                            loc_13598:
000160E0 5500                       		subq.b	#2,d0		; decrease angle
000160E2 6400                       		bcc.s	loc_1359E
000160E4 7000                       		moveq	#0,d0
000160E6                            
000160E6                            loc_1359E:
000160E6 1140 0026                  		move.b	d0,obAngle(a0)
000160EA                            
000160EA                            locret_135A2:
000160EA 4E75                       		rts	
000160EC                            ; End of function Sonic_JumpAngle
000160EC                            ; End of function Sonic_JumpAngle
000160EC                            		include	"_incObj\Sonic Floor.asm"
000160EC                            ; ---------------------------------------------------------------------------
000160EC                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
000160EC                            ; ---------------------------------------------------------------------------
000160EC                            
000160EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000160EC                            
000160EC                            
000160EC                            Sonic_Floor:
000160EC 3228 0010                  		move.w	obVelX(a0),d1
000160F0 3428 0012                  		move.w	obVelY(a0),d2
000160F4 4EB9 0000 3CC4             		jsr	(CalcAngle).l
000160FA 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
000160FE 0400 0020                  		subi.b	#$20,d0
00016102 11C0 FFED                  		move.b	d0,($FFFFFFED).w
00016106 0200 00C0                  		andi.b	#$C0,d0
0001610A 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
0001610E 0C00 0040                  		cmpi.b	#$40,d0
00016112 6700 0000                  		beq.w	loc_13680
00016116 0C00 0080                  		cmpi.b	#$80,d0
0001611A 6700 0000                  		beq.w	loc_136E2
0001611E 0C00 00C0                  		cmpi.b	#$C0,d0
00016122 6700 0000                  		beq.w	loc_1373E
00016126 6100 0000                  		bsr.w	Sonic_HitWall
0001612A 4A41                       		tst.w	d1
0001612C 6A00                       		bpl.s	loc_135F0
0001612E 9368 0008                  		sub.w	d1,obX(a0)
00016132 317C 0000 0010             		move.w	#0,obVelX(a0)
00016138                            
00016138                            loc_135F0:
00016138 6100 0000                  		bsr.w	sub_14EB4
0001613C 4A41                       		tst.w	d1
0001613E 6A00                       		bpl.s	loc_13602
00016140 D368 0008                  		add.w	d1,obX(a0)
00016144 317C 0000 0010             		move.w	#0,obVelX(a0)
0001614A                            
0001614A                            loc_13602:
0001614A 6100 0000                  		bsr.w	Sonic_HitFloor
0001614E 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00016152 4A41                       		tst.w	d1
00016154 6A00                       		bpl.s	locret_1367E
00016156 1428 0012                  		move.b	obVelY(a0),d2
0001615A 5002                       		addq.b	#8,d2
0001615C 4402                       		neg.b	d2
0001615E B202                       		cmp.b	d2,d1
00016160 6C00                       		bge.s	loc_1361E
00016162 B002                       		cmp.b	d2,d0
00016164 6D00                       		blt.s	locret_1367E
00016166                            
00016166                            loc_1361E:
00016166 D368 000C                  		add.w	d1,obY(a0)
0001616A 1143 0026                  		move.b	d3,obAngle(a0)
0001616E 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00016172 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
00016178 1003                       		move.b	d3,d0
0001617A 0600 0020                  		addi.b	#$20,d0
0001617E 0200 0040                  		andi.b	#$40,d0
00016182 6600                       		bne.s	loc_1365C
00016184 1003                       		move.b	d3,d0
00016186 0600 0010                  		addi.b	#$10,d0
0001618A 0200 0020                  		andi.b	#$20,d0
0001618E 6700                       		beq.s	loc_1364E
00016190 E0E8 0012                  		asr	obVelY(a0)
00016194 6000                       		bra.s	loc_13670
00016196                            ; ===========================================================================
00016196                            
00016196                            loc_1364E:
00016196 317C 0000 0012             		move.w	#0,obVelY(a0)
0001619C 3168 0010 0020             		move.w	obVelX(a0),obInertia(a0)
000161A2 4E75                       		rts	
000161A4                            ; ===========================================================================
000161A4                            
000161A4                            loc_1365C:
000161A4 317C 0000 0010             		move.w	#0,obVelX(a0)
000161AA 0C68 0FC0 0012             		cmpi.w	#$FC0,obVelY(a0)
000161B0 6F00                       		ble.s	loc_13670
000161B2 317C 0FC0 0012             		move.w	#$FC0,obVelY(a0)
000161B8                            
000161B8                            loc_13670:
000161B8 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
000161BE 4A03                       		tst.b	d3
000161C0 6A00                       		bpl.s	locret_1367E
000161C2 4468 0020                  		neg.w	obInertia(a0)
000161C6                            
000161C6                            locret_1367E:
000161C6 4E75                       		rts	
000161C8                            ; ===========================================================================
000161C8                            
000161C8                            loc_13680:
000161C8 6100 0000                  		bsr.w	Sonic_HitWall
000161CC 4A41                       		tst.w	d1
000161CE 6A00                       		bpl.s	loc_1369A
000161D0 9368 0008                  		sub.w	d1,obX(a0)
000161D4 317C 0000 0010             		move.w	#0,obVelX(a0)
000161DA 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
000161E0 4E75                       		rts	
000161E2                            ; ===========================================================================
000161E2                            
000161E2                            loc_1369A:
000161E2 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000161E6 4A41                       		tst.w	d1
000161E8 6A00                       		bpl.s	loc_136B4
000161EA 9368 000C                  		sub.w	d1,obY(a0)
000161EE 4A68 0012                  		tst.w	obVelY(a0)
000161F2 6A00                       		bpl.s	locret_136B2
000161F4 317C 0000 0012             		move.w	#0,obVelY(a0)
000161FA                            
000161FA                            locret_136B2:
000161FA 4E75                       		rts	
000161FC                            ; ===========================================================================
000161FC                            
000161FC                            loc_136B4:
000161FC 4A68 0012                  		tst.w	obVelY(a0)
00016200 6B00                       		bmi.s	locret_136E0
00016202 6100 0000                  		bsr.w	Sonic_HitFloor
00016206 4A41                       		tst.w	d1
00016208 6A00                       		bpl.s	locret_136E0
0001620A D368 000C                  		add.w	d1,obY(a0)
0001620E 1143 0026                  		move.b	d3,obAngle(a0)
00016212 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00016216 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
0001621C 317C 0000 0012             		move.w	#0,obVelY(a0)
00016222 3168 0010 0020             		move.w	obVelX(a0),obInertia(a0)
00016228                            
00016228                            locret_136E0:
00016228 4E75                       		rts	
0001622A                            ; ===========================================================================
0001622A                            
0001622A                            loc_136E2:
0001622A 6100 0000                  		bsr.w	Sonic_HitWall
0001622E 4A41                       		tst.w	d1
00016230 6A00                       		bpl.s	loc_136F4
00016232 9368 0008                  		sub.w	d1,obX(a0)
00016236 317C 0000 0010             		move.w	#0,obVelX(a0)
0001623C                            
0001623C                            loc_136F4:
0001623C 6100 0000                  		bsr.w	sub_14EB4
00016240 4A41                       		tst.w	d1
00016242 6A00                       		bpl.s	loc_13706
00016244 D368 0008                  		add.w	d1,obX(a0)
00016248 317C 0000 0010             		move.w	#0,obVelX(a0)
0001624E                            
0001624E                            loc_13706:
0001624E 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00016252 4A41                       		tst.w	d1
00016254 6A00                       		bpl.s	locret_1373C
00016256 9368 000C                  		sub.w	d1,obY(a0)
0001625A 1003                       		move.b	d3,d0
0001625C 0600 0020                  		addi.b	#$20,d0
00016260 0200 0040                  		andi.b	#$40,d0
00016264 6600                       		bne.s	loc_13726
00016266 317C 0000 0012             		move.w	#0,obVelY(a0)
0001626C 4E75                       		rts	
0001626E                            ; ===========================================================================
0001626E                            
0001626E                            loc_13726:
0001626E 1143 0026                  		move.b	d3,obAngle(a0)
00016272 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00016276 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
0001627C 4A03                       		tst.b	d3
0001627E 6A00                       		bpl.s	locret_1373C
00016280 4468 0020                  		neg.w	obInertia(a0)
00016284                            
00016284                            locret_1373C:
00016284 4E75                       		rts	
00016286                            ; ===========================================================================
00016286                            
00016286                            loc_1373E:
00016286 6100 0000                  		bsr.w	sub_14EB4
0001628A 4A41                       		tst.w	d1
0001628C 6A00                       		bpl.s	loc_13758
0001628E D368 0008                  		add.w	d1,obX(a0)
00016292 317C 0000 0010             		move.w	#0,obVelX(a0)
00016298 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
0001629E 4E75                       		rts	
000162A0                            ; ===========================================================================
000162A0                            
000162A0                            loc_13758:
000162A0 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000162A4 4A41                       		tst.w	d1
000162A6 6A00                       		bpl.s	loc_13772
000162A8 9368 000C                  		sub.w	d1,obY(a0)
000162AC 4A68 0012                  		tst.w	obVelY(a0)
000162B0 6A00                       		bpl.s	locret_13770
000162B2 317C 0000 0012             		move.w	#0,obVelY(a0)
000162B8                            
000162B8                            locret_13770:
000162B8 4E75                       		rts	
000162BA                            ; ===========================================================================
000162BA                            
000162BA                            loc_13772:
000162BA 4A68 0012                  		tst.w	obVelY(a0)
000162BE 6B00                       		bmi.s	locret_1379E
000162C0 6100 0000                  		bsr.w	Sonic_HitFloor
000162C4 4A41                       		tst.w	d1
000162C6 6A00                       		bpl.s	locret_1379E
000162C8 D368 000C                  		add.w	d1,obY(a0)
000162CC 1143 0026                  		move.b	d3,obAngle(a0)
000162D0 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000162D4 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
000162DA 317C 0000 0012             		move.w	#0,obVelY(a0)
000162E0 3168 0010 0020             		move.w	obVelX(a0),obInertia(a0)
000162E6                            
000162E6                            locret_1379E:
000162E6 4E75                       		rts	
000162E8                            ; End of function Sonic_Floor
000162E8                            ; End of function Sonic_Floor
000162E8                            		include	"_incObj\Sonic ResetOnFloor.asm"
000162E8                            ; ---------------------------------------------------------------------------
000162E8                            ; Subroutine to	reset Sonic's mode when he lands on the floor
000162E8                            ; ---------------------------------------------------------------------------
000162E8                            
000162E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000162E8                            
000162E8                            
000162E8                            Sonic_ResetOnFloor:            ; XREF: PlatformObject; et al
000162E8 08A8 0005 0022                     	bclr    #5,$22(a0)
000162EE 08A8 0001 0022                     	bclr    #1,$22(a0)
000162F4 0828 0002 0022                     	btst    #2,$22(a0)
000162FA 6700                               	beq.s    loc_137E4
000162FC 08A8 0002 0022             		bclr	#2,obStatus(a0)
00016302 117C 0013 0016             		move.b	#$13,obHeight(a0)
00016308 117C 0009 0017             		move.b	#9,obWidth(a0)
0001630E 117C 0000 001C             		move.b	#id_Walk,obAnim(a0) ; use running/walking animation
00016314 5B68 000C                  		subq.w	#5,obY(a0)
00016318                            
00016318                            loc_137E4:
00016318 117C 0000 003C             		move.b	#0,$3C(a0)
0001631E 31FC 0000 F7D0             		move.w	#0,(v_itembonus).w
00016324 4E75                       		rts	
00016326                            ; End of function Sonic_ResetOnFloor
00016326                            ; End of function Sonic_ResetOnFloor
00016326                            		include	"_incObj\Sonic (part 2).asm"
00016326                            ; ---------------------------------------------------------------------------
00016326                            ; Sonic	when he	gets hurt
00016326                            ; ---------------------------------------------------------------------------
00016326                            
00016326                            Sonic_Hurt:	; Routine 4
00016326 4EB9 0000 F878             		jsr	(SpeedToPos).l
0001632C 0668 0030 0012             		addi.w	#$30,obVelY(a0)
00016332 0828 0006 0022             		btst	#6,obStatus(a0)
00016338 6700                       		beq.s	loc_1380C
0001633A 0468 0020 0012             		subi.w	#$20,obVelY(a0)
00016340                            
00016340                            loc_1380C:
00016340 6100 0000                  		bsr.w	Sonic_HurtStop
00016344 6100 FAF4                  		bsr.w	Sonic_LevelBound
00016348 6100 F114                  		bsr.w	Sonic_RecordPosition
0001634C 6100 0000                  		bsr.w	Sonic_Animate
00016350 6100 0000                  		bsr.w	Sonic_LoadGfx
00016354 4EF9 0000 F88C             		jmp	(DisplaySprite).l
0001635A                            
0001635A                            ; ---------------------------------------------------------------------------
0001635A                            ; Subroutine to	stop Sonic falling after he's been hurt
0001635A                            ; ---------------------------------------------------------------------------
0001635A                            
0001635A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001635A                            
0001635A                            
0001635A                            Sonic_HurtStop:
0001635A 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0001635E 0640 00E0                  		addi.w	#$E0,d0
00016362                            		;cmp.w	obY(a0),d0
00016362                            		;bcs.w	KillSonic
00016362 6100 FD88                  		bsr.w	Sonic_Floor
00016366 0828 0001 0022             		btst	#1,obStatus(a0)
0001636C 6600                       		bne.s	locret_13860
0001636E 7000                       		moveq	#0,d0
00016370 3140 0012                  		move.w	d0,obVelY(a0)
00016374 3140 0010                  		move.w	d0,obVelX(a0)
00016378 3140 0020                  		move.w	d0,obInertia(a0)
0001637C 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
00016382 5528 0024                  		subq.b	#2,obRoutine(a0)
00016386 317C 0078 0030             		move.w	#$78,$30(a0)
0001638C                            
0001638C                            locret_13860:
0001638C 4E75                       		rts	
0001638E                            ; End of function Sonic_HurtStop
0001638E                            
0001638E                            ; ---------------------------------------------------------------------------
0001638E                            ; Sonic	when he	dies
0001638E                            ; ---------------------------------------------------------------------------
0001638E                            
0001638E                            Sonic_Death:	; Routine 6
0001638E 6100 0000                  		bsr.w	GameOver
00016392 4EB9 0000 F840             		jsr	(ObjectFall).l
00016398 6100 F0C4                  		bsr.w	Sonic_RecordPosition
0001639C 6100 0000                  		bsr.w	Sonic_Animate
000163A0 6100 0000                  		bsr.w	Sonic_LoadGfx
000163A4 4EF9 0000 F88C             		jmp	(DisplaySprite).l
000163AA                            
000163AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000163AA                            
000163AA                            GameOver:
000163AA 3038 F72E                  		move.w	(v_limitbtm2).w,d0
000163AE 0640 0100                  		addi.w	#$100,d0
000163B2 B068 000C                  		cmp.w	obY(a0),d0
000163B6 6400 0000                  		bcc.w	locret_13900
000163BA 317C FFC8 0012             		move.w	#-$38,obVelY(a0)
000163C0 5428 0024                  		addq.b	#2,obRoutine(a0)
000163C4 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
000163C8 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update lives counter
000163CC 5338 FE12                  		subq.b	#1,(v_lives).w	; subtract 1 from number of lives
000163D0 6600                       		bne.s	loc_138D4
000163D2 317C 0000 003A             		move.w	#0,$3A(a0)
000163D8 11FC 0039 D080             		move.b	#id_GameOverCard,(v_objspace+$80).w ; load GAME object
000163DE 11FC 0039 D0C0             		move.b	#id_GameOverCard,(v_objspace+$C0).w ; load OVER object
000163E4 11FC 0001 D0DA             		move.b	#1,(v_objspace+$C0+obFrame).w ; set OVER object to correct frame
000163EA 4238 FE1A                  		clr.b	(f_timeover).w
000163EE                            
000163EE                            loc_138C2:
000163F8 7003                       		moveq	#3,d0
000163FA 4EF9 0000 16EA             		jmp	(AddPLC).l	; load game over patterns
00016400                            		
00016400                            loc_138C3:
0001640A 7003                       		moveq	#3,d0
0001640C 4EF9 0000 16EA             		jmp	(AddPLC).l	; load game over patterns
00016412                            ; ===========================================================================
00016412                            
00016412                            loc_138D4:
00016412 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00016418 4A38 FE1A                  		tst.b	(f_timeover).w	; is TIME OVER tag set?
0001641C 6700                       		beq.s	locret_13900	; if not, branch
0001641E 317C 0000 003A             		move.w	#0,$3A(a0)
00016424 11FC 0039 D080             		move.b	#id_GameOverCard,(v_objspace+$80).w ; load TIME object
0001642A 11FC 0039 D0C0             		move.b	#id_GameOverCard,(v_objspace+$C0).w ; load OVER object
00016430 11FC 0002 D09A             		move.b	#2,(v_objspace+$80+obFrame).w
00016436 11FC 0003 D0DA             		move.b	#3,(v_objspace+$C0+obFrame).w
0001643C 60B0                       		bra.s	loc_138C2
0001643E                            		
0001643E                            
0001643E                            ; ===========================================================================
0001643E                            
0001643E                            locret_13900:
0001643E 4E75                       		rts	
00016440                            ; End of function GameOver
00016440                            
00016440                            ; ---------------------------------------------------------------------------
00016440                            ; Sonic	when the level is restarted
00016440                            ; ---------------------------------------------------------------------------
00016440                            
00016440                            Sonic_ResetLevel:; Routine 8
00016440 4A68 003A                  		tst.w	$3A(a0)
00016444 6700                       		beq.s	locret_13914
00016446 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
0001644A 6600                       		bne.s	locret_13914
0001644C 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart the level
00016452                            
00016452                            	locret_13914:
00016452 4E75                       		rts	
00016452 4E75                       		rts	
00016454                            		include	"_incObj\Sonic Loops.asm"
00016454                            ; ---------------------------------------------------------------------------
00016454                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
00016454                            ; ---------------------------------------------------------------------------
00016454                            
00016454                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016454                            
00016454                            
00016454                            Sonic_Loops:
00016454 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; is level SLZ ?
0001645A 6700                       		beq.s	@isstarlight	; if yes, branch
0001645C 4A38 FE10                  		tst.b	(v_zone).w	; is level GHZ ?
00016460 6600 0000                  		bne.w	@noloops	; if not, branch
00016464                            
00016464                            	@isstarlight:
00016464 3028 000C                  		move.w	obY(a0),d0
00016468 E248                       		lsr.w	#1,d0
0001646A 0240 0380                  		andi.w	#$380,d0
0001646E 1228 0008                  		move.b	obX(a0),d1
00016472 0241 007F                  		andi.w	#$7F,d1
00016476 D041                       		add.w	d1,d0
00016478 43F8 A400                  		lea	(v_lvllayout).w,a1
0001647C 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
00016480                            
00016480 B238 F7AE                  		cmp.b	(v_256roll1).w,d1 ; is Sonic on a "roll tunnel" tile?
00016484 6700 FA70                  		beq.w	Sonic_ChkRoll	; if yes, branch
00016488 B238 F7AF                  		cmp.b	(v_256roll2).w,d1
0001648C 6700 FA68                  		beq.w	Sonic_ChkRoll
00016490                            
00016490 B238 F7AC                  		cmp.b	(v_256loop1).w,d1 ; is Sonic on a loop tile?
00016494 6700                       		beq.s	@chkifleft	; if yes, branch
00016496 B238 F7AD                  		cmp.b	(v_256loop2).w,d1
0001649A 6700                       		beq.s	@chkifinair
0001649C 08A8 0006 0001             		bclr	#6,obRender(a0) ; return Sonic to high plane
000164A2 4E75                       		rts	
000164A4                            ; ===========================================================================
000164A4                            
000164A4                            @chkifinair:
000164A4 0828 0001 0022             		btst	#1,obStatus(a0)	; is Sonic in the air?
000164AA 6700                       		beq.s	@chkifleft	; if not, branch
000164AC                            
000164AC 08A8 0006 0001             		bclr	#6,obRender(a0)	; return Sonic to high plane
000164B2 4E75                       		rts	
000164B4                            ; ===========================================================================
000164B4                            
000164B4                            @chkifleft:
000164B4 3428 0008                  		move.w	obX(a0),d2
000164B8 0C02 002C                  		cmpi.b	#$2C,d2
000164BC 6400                       		bcc.s	@chkifright
000164BE                            
000164BE 08A8 0006 0001             		bclr	#6,obRender(a0)	; return Sonic to high plane
000164C4 4E75                       		rts	
000164C6                            ; ===========================================================================
000164C6                            
000164C6                            @chkifright:
000164C6 0C02 00E0                  		cmpi.b	#$E0,d2
000164CA 6500                       		bcs.s	@chkangle1
000164CC                            
000164CC 08E8 0006 0001             		bset	#6,obRender(a0)	; send Sonic to	low plane
000164D2 4E75                       		rts	
000164D4                            ; ===========================================================================
000164D4                            
000164D4                            @chkangle1:
000164D4 0828 0006 0001             		btst	#6,obRender(a0) ; is Sonic on low plane?
000164DA 6600                       		bne.s	@chkangle2	; if yes, branch
000164DC                            
000164DC 1228 0026                  		move.b	obAngle(a0),d1
000164E0 6700                       		beq.s	@done
000164E2 0C01 0080                  		cmpi.b	#$80,d1		; is Sonic upside-down?
000164E6 6200                       		bhi.s	@done		; if yes, branch
000164E8 08E8 0006 0001             		bset	#6,obRender(a0)	; send Sonic to	low plane
000164EE 4E75                       		rts	
000164F0                            ; ===========================================================================
000164F0                            
000164F0                            @chkangle2:
000164F0 1228 0026                  		move.b	obAngle(a0),d1
000164F4 0C01 0080                  		cmpi.b	#$80,d1		; is Sonic upright?
000164F8 6300                       		bls.s	@done		; if yes, branch
000164FA 08A8 0006 0001             		bclr	#6,obRender(a0)	; send Sonic to	high plane
00016500                            
00016500                            @noloops:
00016500                            @done:
00016500 4E75                       		rts	
00016502                            ; End of function Sonic_Loops
00016502                            ; End of function Sonic_Loops
00016502                            		include	"_incObj\Sonic Animate.asm"
00016502                            ; ---------------------------------------------------------------------------
00016502                            ; Subroutine to	animate	Sonic's sprites
00016502                            ; ---------------------------------------------------------------------------
00016502                            
00016502                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016502                            
00016502                            
00016502                            Sonic_Animate:				; XREF: Obj01_Control; et al
00016502 43F9 0000 0000             		lea	(Ani_Sonic).l,a1
00016508 7000                       		moveq	#0,d0
0001650A 1028 001C                  		move.b	obAnim(a0),d0
0001650E B028 001D                  		cmp.b	obNextAni(a0),d0 ; is animation set to restart?
00016512 6700                       		beq.s	@do		; if not, branch
00016514 1140 001D                  		move.b	d0,obNextAni(a0) ; set to "no restart"
00016518 4228 001B                  		clr.b	obAniFrame(a0) ; reset animation
0001651C 4228 001E                  		clr.b	obTimeFrame(a0) ; reset frame duration
00016520                            		
00016520 08A8 0005 0022             		bclr	#5,obStatus(a0)	; clear pushing flag	;Mercury Pushing While Walking Fix	;Mercury Constants
00016526                            
00016526                            	@do:
00016526 D040                       		add.w	d0,d0
00016528 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0001652C 1011                       		move.b	(a1),d0
0001652E 6B00                       		bmi.s	@walkrunroll	; if animation is walk/run/roll/jump, branch
00016530 1228 0022                  		move.b	obStatus(a0),d1
00016534 0201 0001                  		andi.b	#1,d1
00016538 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001653E 8328 0001                  		or.b	d1,obRender(a0)
00016542 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
00016546 6A00                       		bpl.s	@delay		; if time remains, branch
00016548 1140 001E                  		move.b	d0,obTimeFrame(a0) ; load frame duration
0001654C                            
0001654C                            @loadframe:
0001654C 7200                       		moveq	#0,d1
0001654E 1228 001B                  		move.b	obAniFrame(a0),d1 ; load current frame number
00016552 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
00016556 0C00 00FD                  		cmp.b	#$FD,d0				; MJ: is it a flag from FD to FF?
0001655A 6400 0000                  		bhs		@end_FF				; MJ: if so, branch to flag routines
0001655E                            
0001655E                            	@next:
0001655E 1140 001A                  		move.b	d0,obFrame(a0)	; load sprite number
00016562 5228 001B                  		addq.b	#1,obAniFrame(a0) ; next frame number
00016566                            
00016566                            	@delay:
00016566 4E75                       		rts	
00016568                            ; ===========================================================================
00016568                            
00016568                            @end_FF:
00016568 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0001656A 6600                       		bne.s	@end_FE		; if not, branch
0001656C 4228 001B                  		clr.b	obAniFrame(a0) ; restart the animation
00016570 1029 0001                  		move.b	1(a1),d0	; read sprite number
00016574 60E8                       		bra.s	@next
00016576                            ; ===========================================================================
00016576                            
00016576                            @end_FE:
00016576 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
00016578 6600                       		bne.s	@end_FD		; if not, branch
0001657A 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0001657E 9128 001B                  		sub.b	d0,obAniFrame(a0) ; jump back d0 bytes in the script
00016582 9200                       		sub.b	d0,d1
00016584 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
00016588 60D4                       		bra.s	@next
0001658A                            ; ===========================================================================
0001658A                            
0001658A                            @end_FD:
0001658A 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0001658C 6600                       		bne.s	@end		; if not, branch
0001658E 1171 1002 001C             		move.b	2(a1,d1.w),obAnim(a0) ; read next byte, run that animation
00016594                            
00016594                            	@end:
00016594 4E75                       		rts	
00016596                            ; ===========================================================================
00016596                            
00016596                            @walkrunroll:
00016596 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0001659A 6ACA                       		bpl.s	@delay		; if time remains, branch
0001659C 5200                       		addq.b	#1,d0		; is animation walking/running?
0001659E 6600 0000                  		bne.w	@rolljump	; if not, branch
000165A2 7200                       		moveq	#0,d1
000165A4 1028 0026                  		move.b	obAngle(a0),d0	; get Sonic's angle
000165A8 6B00                       		bmi.s	@ble 			; better handling of angles
000165AA 6700                       		beq.s	@ble
000165AC 5300                       		subq.b	#1,d0
000165AE                            
000165AE                            	@ble:																
000165AE 1428 0022                  		move.b	obStatus(a0),d2
000165B2 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
000165B6 6600                       		bne.s	@flip		; if yes, branch
000165B8 4600                       		not.b	d0		; reverse angle
000165BA                            
000165BA                            	@flip:
000165BA 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
000165BE 6A00                       		bpl.s	@noinvert	; if angle is $0-$7F, branch
000165C0 7203                       		moveq	#3,d1
000165C2                            
000165C2                            	@noinvert:
000165C2 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
000165C8 B302                       		eor.b	d1,d2
000165CA 8528 0001                  		or.b	d2,obRender(a0)
000165CE 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing something?	;Mercury Constants
000165D4 6600 0000                  		bne.w	@push		; if yes, branch
000165D8                            
000165D8 E808                       		lsr.b	#4,d0		; divide angle by $10
000165DA 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
000165DE 3428 0020                  		move.w	obInertia(a0),d2 ; get Sonic's speed
000165E2 6A00                       		bpl.s	@nomodspeed
000165E4 4442                       		neg.w	d2		; modulus speed
000165E6                            
000165E6                            	@nomodspeed:
000165E6 43F9 0000 0000             		lea	(SonAni_MaxRun).l,a1 ; use	Dashing	animation
000165EC 0C42 0A00                  		cmpi.w	#$A00,d2	; is Sonic at Dashing speed?
000165F0 6400                       		bcc.s	@maxrunning	; if yes, branch
000165F2                            
000165F2 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
000165F8 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
000165FC 6400                       		bcc.s	@running	; if yes, branch
000165FE                            
000165FE 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
00016604                            
00016604                            	@running:
00016604 D000                       		add.b	d0,d0
00016606 D000                       		add.b	d0,d0
00016608 1600                       		move.b	d0,d3
0001660A 4442                       		neg.w	d2
0001660C 0642 0780                  		addi.w	#$780,d2
00016610 6A00                       		bpl.s	@belowmax
00016612 7400                       		moveq	#0,d2		; max animation speed
00016614 6000                       		bra.s	@belowmax
00016616                            
00016616                            	@maxrunning:
00016616 D000                       		add.b d0,d0
00016618 1600                       		move.b d0,d3
0001661A 4442                       		neg.w d2
0001661C 0642 0800                  		addi.w #$800, d2
00016620 6A00                       		bpl.s @belowmax
00016622 7400                       		moveq #0, d2 
00016624                            
00016624                            	@belowmax:
00016624 E04A                       		lsr.w	#8,d2
00016626 1142 001E                  		move.b	d2,obTimeFrame(a0) ; modify frame duration
0001662A 6100 FF20                  		bsr.w	@loadframe
0001662E D728 001A                  		add.b	d3,obFrame(a0)	; modify frame number
00016632 4E75                       		rts	
00016634                            ; ===========================================================================
00016634                            
00016634                            @rolljump:
00016634 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
00016636 6600                       		bne.s	@push		; if not, branch
00016638 3428 0020                  		move.w	obInertia(a0),d2 ; get Sonic's speed
0001663C 6A00                       		bpl.s	@nomodspeed2
0001663E 4442                       		neg.w	d2
00016640                            
00016640                            	@nomodspeed2:
00016640 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
00016646 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
0001664A 6400                       		bcc.s	@rollfast	; if yes, branch
0001664C 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
00016652                            
00016652                            	@rollfast:
00016652 4442                       		neg.w	d2
00016654 0642 0400                  		addi.w	#$400,d2
00016658 6A00                       		bpl.s	@belowmax2
0001665A 7400                       		moveq	#0,d2
0001665C                            
0001665C                            	@belowmax2:
0001665C E04A                       		lsr.w	#8,d2
0001665E 1142 001E                  		move.b	d2,obTimeFrame(a0) ; modify frame duration
00016662 1228 0022                  		move.b	obStatus(a0),d1
00016666 0201 0001                  		andi.b	#1,d1
0001666A 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
00016670 8328 0001                  		or.b	d1,obRender(a0)
00016674 6000 FED6                  		bra.w	@loadframe
00016678                            ; ===========================================================================
00016678                            
00016678                            @push:
00016678 3428 0020                  		move.w	obInertia(a0),d2 ; get Sonic's speed
0001667C 6B00                       		bmi.s	@negspeed
0001667E 4442                       		neg.w	d2
00016680                            
00016680                            	@negspeed:
00016680 0642 0800                  		addi.w	#$800,d2
00016684 6A00                       		bpl.s	@belowmax3	
00016686 7400                       		moveq	#0,d2
00016688                            
00016688                            	@belowmax3:
00016688 EC4A                       		lsr.w	#6,d2
0001668A 1142 001E                  		move.b	d2,obTimeFrame(a0) ; modify frame duration
0001668E 43F9 0000 0000             		lea	(SonAni_Push).l,a1
00016694 1228 0022                  		move.b	obStatus(a0),d1
00016698 0201 0001                  		andi.b	#1,d1
0001669C 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
000166A2 8328 0001                  		or.b	d1,obRender(a0)
000166A6 6000 FEA4                  		bra.w	@loadframe
000166AA                            
000166AA                            ; End of function Sonic_Animate
000166AA                            ; End of function Sonic_Animate
000166AA                            		include	"_anim\Sonic.asm"
000166AA                            ; ---------------------------------------------------------------------------
000166AA                            ; Animation script - Sonic
000166AA                            ; ---------------------------------------------------------------------------
000166AA                            Ani_Sonic:
000166AA                            
000166AA 0000                       ptr_Walk:	dc.w SonAni_Walk-Ani_Sonic
000166AC 0000                       ptr_Run:	dc.w SonAni_Run-Ani_Sonic
000166AE 0000                       ptr_Roll:	dc.w SonAni_Roll-Ani_Sonic
000166B0 0000                       ptr_Roll2:	dc.w SonAni_Roll2-Ani_Sonic
000166B2 0000                       ptr_Push:	dc.w SonAni_Push-Ani_Sonic
000166B4 0000                       ptr_Wait:	dc.w SonAni_Wait-Ani_Sonic
000166B6 0000                       ptr_Balance:	dc.w SonAni_Balance-Ani_Sonic
000166B8 0000                       ptr_LookUp:	dc.w SonAni_LookUp-Ani_Sonic
000166BA 0000                       ptr_Duck:	dc.w SonAni_Duck-Ani_Sonic
000166BC 0000                       ptr_Warp1:	dc.w SonAni_Warp1-Ani_Sonic
000166BE 0000                       ptr_Warp2:	dc.w SonAni_Warp2-Ani_Sonic
000166C0 0000                       ptr_Warp3:	dc.w SonAni_Warp3-Ani_Sonic
000166C2 0000                       ptr_Warp4:	dc.w SonAni_Warp4-Ani_Sonic
000166C4 0000                       ptr_Stop:	dc.w SonAni_Stop-Ani_Sonic
000166C6 0000                       ptr_Float1:	dc.w SonAni_Float1-Ani_Sonic
000166C8 0000                       ptr_Float2:	dc.w SonAni_Float2-Ani_Sonic
000166CA 0000                       ptr_Spring:	dc.w SonAni_Spring-Ani_Sonic
000166CC 0000                       ptr_Hang:	dc.w SonAni_Hang-Ani_Sonic
000166CE 0000                       ptr_Leap1:	dc.w SonAni_Leap1-Ani_Sonic
000166D0 0000                       ptr_Leap2:	dc.w SonAni_Leap2-Ani_Sonic
000166D2 0000                       ptr_Surf:	dc.w SonAni_Surf-Ani_Sonic
000166D4 0000                       ptr_GetAir:	dc.w SonAni_GetAir-Ani_Sonic
000166D6 0000                       ptr_Burnt:	dc.w SonAni_Burnt-Ani_Sonic
000166D8 0000                       ptr_Drown:	dc.w SonAni_Drown-Ani_Sonic
000166DA 0000                       ptr_Death:	dc.w SonAni_Death-Ani_Sonic
000166DC 0000                       ptr_Hurt:	dc.w SonAni_Hurt-Ani_Sonic
000166DE 0000                       ptr_WaterSlide:	dc.w SonAni_WaterSlide-Ani_Sonic
000166E0 0000                       ptr_Null:	dc.w SonAni_Null-Ani_Sonic
000166E2 0000                       ptr_Float3:	dc.w SonAni_Float3-Ani_Sonic
000166E4 0000                       ptr_Float4:	dc.w SonAni_Float4-Ani_Sonic
000166E6 0000                       ptr_MaxRun:	dc.w SonAni_MaxRun-Ani_Sonic
000166E8 0000                       ptr_Spindash:	dc.w SonAni_SpinDash-Ani_Sonic ;1F
000166EA 0000                       ptr_Hurt2:	dc.w SonAni_Hurt2-Ani_Sonic
000166EC 0000                       ptr_GetUp:	dc.w SonAni_GetUp-Ani_Sonic
000166EE 0000                       ptr_Blink:	dc.w SonAni_Blink-Ani_Sonic
000166F0 0000                       ptr_Sit:	dc.w SonAni_Sit-Ani_Sonic
000166F2 0000                       ptr_Peelout:	dc.w SonAni_Peelout-Ani_Sonic
000166F4 0000                       ptr_Hang2:	dc.w SonAni_Hang2-Ani_Sonic
000166F6                            
000166F6 FF10 1112 1314 150E 0FFF+  SonAni_Walk:	dc.b $FF, fr_walk13, fr_walk14,	fr_walk15, fr_walk16, fr_walk17, fr_walk18, fr_walk11, fr_walk12, afEnd, afEnd, afEnd, afEnd
00016704 00                         		even
00016704 FF2E 2F30 3132 3334 35FF+  SonAni_Run:	dc.b $FF, fr_run11,  fr_run12,  fr_run13,  fr_run14, fr_run15,  fr_run16,  fr_run17,  fr_run18, afEnd, afEnd, afEnd, afEnd
00016712 00                         		even
00016712 FE5E 5F60 6162 66          SonAni_Roll:	dc.b $FE, fr_Roll1, fr_Roll6, fr_Roll2, fr_Roll7, fr_Roll3, fr_Roll5
00016719 6364 6566 FFFF             		dc.b fr_Roll8, fr_Roll4, fr_Roll9, fr_Roll5, afEnd, afEnd
00016720 00                         		even
00016720 FE5E 5F60 6162 66          SonAni_Roll2:	dc.b $FE, fr_Roll1, fr_Roll6, fr_Roll2, fr_Roll7, fr_Roll3, fr_Roll5
00016727 6364 6566 FFFF             		dc.b fr_Roll8, fr_Roll4, fr_Roll9, fr_Roll5, afEnd, afEnd
0001672E 00                         		even
0001672E FD89 8A8B 8C8D 8E8F 90FF+  SonAni_Push:	dc.b $FD,  fr_push1,  fr_push2,  fr_push3,  fr_push4, fr_push5,  fr_push6,  fr_push7,  fr_push8, afEnd, afEnd, afEnd, afEnd
0001673C 00                         		even
0001673C                            SonAni_Wait:	
0001673C 0501 0101 0101 0101 0102+  		dc.b   5,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
0001674B 0101 0101 0101 0101 0102+  		dc.b   1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
0001675A 0101 0101 0101 0101 0102+  		dc.b   1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
00016769 0203 0303 0404 0505 0506+  		dc.b   2,  3,  3,  3,  4,  4,  5,  5,  5,  6,  6,  6,  7,  7,  7
00016778 0606 0607 0707 0606 0607+  		dc.b   6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6
00016787 0707 0706 0606 0707 0706+  		dc.b   7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7
00016796 0606 0607 0707 0606 0607+  		dc.b   6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6
000167A5 0707 0706 0606 0707 0706+  		dc.b   7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7
000167B4 0808 0909 0A0A FE04        		dc.b   8,  8,  9,  9,  $A, $A, $FE, 4
000167BC                            		even
000167BC 0F72 7374 75FF             SonAni_Balance:	dc.b $F, fr_balance1, fr_balance2, fr_balance3, fr_balance4, afEnd
000167C2                            		even
000167C2 030C 0DFE 01               SonAni_LookUp:	dc.b $3, fr_lookup1, fr_lookup2, afBack, 1
000167C8 00                         		even
000167C8 026F 7071 FE01             SonAni_Duck:	dc.b $2, fr_duck3, fr_duck2, fr_duck, afBack, 1
000167CE                            		even
000167CE 3F67 FF                    SonAni_Warp1:	dc.b $3F, fr_warp1, afEnd
000167D2 00                         		even
000167D2 3F68 FF                    SonAni_Warp2:	dc.b $3F, fr_warp2, afEnd
000167D6 00                         		even
000167D6 3F69 FF                    SonAni_Warp3:	dc.b $3F, fr_warp3, afEnd
000167DA 00                         		even
000167DA 3F6A FF                    SonAni_Warp4:	dc.b $3F, fr_warp4, afEnd
000167DE 00                         		even
000167DE 026B 6C6C 6D6D 6E6E FD00   SonAni_Stop:	dc.b 2,	fr_stop1, fr_stop2, fr_stop2, fr_stop3, fr_stop3, fr_stop4, fr_stop4, $FD,  0
000167E8                            		even
000167E8 077C 82FE 02               SonAni_Float1:	dc.b 7,	fr_float1, fr_float4, afBack, 2
000167EE 00                         		even
000167EE 037C 7D7E 7F80 817B FF     SonAni_Float2:	dc.b 3,	fr_float1, fr_float7, fr_float2, fr_float8, fr_float5, fr_float3, fr_float6, afEnd
000167F8 00                         		even
000167F8 0783 8483 8483 84FD 00     SonAni_Spring:	dc.b 7, fr_spring, fr_spring2, fr_spring, fr_spring2, fr_spring, fr_spring2, afChange, id_Walk
00016802 00                         		even
00016802 0485 86FF                  SonAni_Hang:	dc.b 4,	fr_hang1, fr_hang2, afEnd
00016806                            		even
00016806 0F87 8787 FE01             SonAni_Leap1:	dc.b $F, fr_leap1, fr_leap1, fr_leap1,	afBack, 1
0001680C                            		even
0001680C 0F87 88FE 01               SonAni_Leap2:	dc.b $F, fr_leap1, fr_leap2, afBack, 1
00016812 00                         		even
00016812 3F91 FF                    SonAni_Surf:	dc.b $3F, fr_surf, afEnd
00016816 00                         		even
00016816 0B95 9512 13FD 00          SonAni_GetAir:	dc.b $B, fr_getair, fr_getair, fr_walk15, fr_walk16, afChange, id_Walk
0001681E 00                         		even
0001681E 2092 FF                    SonAni_Burnt:	dc.b $20, fr_burnt, afEnd
00016822 00                         		even
00016822 2F93 FF                    SonAni_Drown:	dc.b $2F, fr_drown, afEnd
00016826 00                         		even
00016826 0394 FF                    SonAni_Death:	dc.b 3,	fr_death, afEnd
0001682A 00                         		even
0001682A 0396 FF                    SonAni_Hurt:	dc.b 3,	fr_injury, afEnd
0001682E 00                         		even
0001682E                            SonAni_WaterSlide:
0001682E 0796 97FF                  		dc.b 7, fr_injury, fr_waterslide, afEnd
00016832                            		even
00016832 7700 FD00                  SonAni_Null:	dc.b $77, fr_null, afChange, id_Walk
00016836                            		even
00016836 037C 7E80 817B FF          SonAni_Float3:	dc.b 3,	fr_float1, fr_float2, fr_float5, fr_float3, fr_float6, afEnd
0001683E 00                         		even
0001683E 037C FD00                  SonAni_Float4:	dc.b 3,	fr_float1, afChange, id_Walk
00016842                            		even
00016842 FF4E 4F50 51FF FFFF FFFF+  SonAni_MaxRun:  dc.b $FF, fr_peelout11, fr_peelout12, fr_peelout13, fr_peelout14, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd
00016850 00                         		even
00016850 009B 9C9B 9D9B 9E9B 9F9B+  SonAni_SpinDash: dc.b 0, fr_Spindash1, fr_spindash2, fr_spindash1, fr_spindash3, fr_spindash1, fr_spindash4, fr_spindash1, fr_spindash5, fr_spindash1, fr_spindash6, afEnd
0001685C                            		even
0001685C 0298 99FF                  SonAni_Hurt2:	dc.b 2, fr_skele1, fr_skele2, afEnd	
00016860                            		even
00016860 030B FD00                  SonAni_GetUp:	dc.b 3, $B,$FD,  0
00016864                            		even
00016864 0102 FD00                  SonAni_Blink:	dc.b   1,  2,$FD,  0
00016868                            		even
00016868 0808 0909 0A0A 09FE 05     SonAni_Sit:	dc.b   8, 8, 9, 9, $A, $A,  9, $FE, 5
00016872 00                         		even
00016872 000E 0E0E 0E0E 0E0F 0F     SonAni_Peelout: dc.b 	0, $E, $E, $E, $E, $E, $E, $F, $F
0001687B 0F0F 1010 1111 1213        		dc.b	$F, $F, $10, $10, $11, $11, $12, $13
00016883 1415 2E2F 3031 32          		dc.b	$14, $15, $2E, $2F, $30, $31, $32
0001688A 3334 35                    		dc.b	$33, $34, $35
0001688D 4E4F 5051 FE04 FE          		dc.b	$4E, $4F, $50,  $51, -2, 4, $FE
00016894                            		even
00016894 137A 7879 78FF             SonAni_Hang2:	dc.b $13, fr_vhang3, fr_vhang1, fr_vhang2, fr_vhang1, $FF	
0001689A                            		even
0001689A                            
0001689A                            
0001689A =00000000                  id_Walk:	equ (ptr_Walk-Ani_Sonic)/2	; 0
0001689A =00000001                  id_Run:		equ (ptr_Run-Ani_Sonic)/2	; 1
0001689A =00000002                  id_Roll:	equ (ptr_Roll-Ani_Sonic)/2	; 2
0001689A =00000003                  id_Roll2:	equ (ptr_Roll2-Ani_Sonic)/2	; 3
0001689A =00000004                  id_Push:	equ (ptr_Push-Ani_Sonic)/2	; 4
0001689A =00000005                  id_Wait:	equ (ptr_Wait-Ani_Sonic)/2	; 5
0001689A =00000006                  id_Balance:	equ (ptr_Balance-Ani_Sonic)/2	; 6
0001689A =00000007                  id_LookUp:	equ (ptr_LookUp-Ani_Sonic)/2	; 7
0001689A =00000008                  id_Duck:	equ (ptr_Duck-Ani_Sonic)/2	; 8
0001689A =00000009                  id_Warp1:	equ (ptr_Warp1-Ani_Sonic)/2	; 9
0001689A =0000000A                  id_Warp2:	equ (ptr_Warp2-Ani_Sonic)/2	; $A
0001689A =0000000B                  id_Warp3:	equ (ptr_Warp3-Ani_Sonic)/2	; $B
0001689A =0000000C                  id_Warp4:	equ (ptr_Warp4-Ani_Sonic)/2	; $C
0001689A =0000000D                  id_Stop:	equ (ptr_Stop-Ani_Sonic)/2	; $D
0001689A =0000000E                  id_Float1:	equ (ptr_Float1-Ani_Sonic)/2	; $E
0001689A =0000000F                  id_Float2:	equ (ptr_Float2-Ani_Sonic)/2	; $F
0001689A =00000010                  id_Spring:	equ (ptr_Spring-Ani_Sonic)/2	; $10
0001689A =00000011                  id_Hang:	equ (ptr_Hang-Ani_Sonic)/2	; $11
0001689A =00000012                  id_Leap1:	equ (ptr_Leap1-Ani_Sonic)/2	; $12
0001689A =00000013                  id_Leap2:	equ (ptr_Leap2-Ani_Sonic)/2	; $13
0001689A =00000014                  id_Surf:	equ (ptr_Surf-Ani_Sonic)/2	; $14
0001689A =00000015                  id_GetAir:	equ (ptr_GetAir-Ani_Sonic)/2	; $15
0001689A =00000016                  id_Burnt:	equ (ptr_Burnt-Ani_Sonic)/2	; $16
0001689A =00000017                  id_Drown:	equ (ptr_Drown-Ani_Sonic)/2	; $17
0001689A =00000018                  id_Death:	equ (ptr_Death-Ani_Sonic)/2	; $18
0001689A =00000019                  id_Hurt:	equ (ptr_Hurt-Ani_Sonic)/2	; $19
0001689A =0000001A                  id_WaterSlide:	equ (ptr_WaterSlide-Ani_Sonic)/2 ; $1A
0001689A =0000001B                  id_Null:	equ (ptr_Null-Ani_Sonic)/2	; $1B
0001689A =0000001C                  id_Float3:	equ (ptr_Float3-Ani_Sonic)/2	; $1C
0001689A =0000001D                  id_Float4:	equ (ptr_Float4-Ani_Sonic)/2	; $1D
0001689A =0000001E                  id_MaxRun:	equ (ptr_MaxRun-Ani_Sonic)/2	; $1E
0001689A =0000001F                  id_Spindash:	equ (ptr_Spindash-Ani_Sonic)/2	; $1F
0001689A =00000020                  id_Hurt2:	equ (ptr_Hurt2-Ani_Sonic)/2	; $21
0001689A =00000021                  id_GetUp:	equ (ptr_GetUp-Ani_Sonic)/2	; $22
0001689A =00000022                  id_Blink:	equ (ptr_Blink-Ani_Sonic)/2	; $23
0001689A =00000023                  id_Sit:		equ (ptr_Sit-Ani_Sonic)/2	; $24
0001689A =00000024                  id_Peelout:	equ (ptr_Peelout-Ani_Sonic)/2	; $25
0001689A =00000025                  id_Hang2:		equ	(ptr_Hang2-Ani_Sonic)/2
0001689A =00000025                  id_Hang2:		equ	(ptr_Hang2-Ani_Sonic)/2
0001689A                            		include	"_incObj\Sonic LoadGfx.asm"
0001689A                            ; ---------------------------------------------------------------------------
0001689A                            ; Sonic	graphics loading subroutine
0001689A                            ; ---------------------------------------------------------------------------
0001689A                            
0001689A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001689A                            
0001689A                            
0001689A                            Sonic_LoadGfx:			; XREF: Obj01_Control; et al
0001689A 7000                       		moveq	#0,d0
0001689C 1028 001A                  		move.b	$1A(a0),d0	; load frame number
000168A0 B038 F766                  		cmp.b	($FFFFF766).w,d0
000168A4 6700                       		beq.s	locret_13C96
000168A6 11C0 F766                  		move.b	d0,($FFFFF766).w
000168AA 45F9 0000 0000             		lea	(SonicDynPLC).l,a2
000168B0 D040                       		add.w	d0,d0
000168B2 D4F2 0000                  		adda.w	(a2,d0.w),a2
000168B6 7A00                       		moveq	#0,d5
000168B8 1A1A                       		move.b	(a2)+,d5
000168BA 5345                       		subq.w	#1,d5
000168BC 6B00                       		bmi.s	locret_13C96
000168BE 383C F000                  		move.w	#$F000,d4
000168C2 2C3C 0000 0000             		move.l	#Art_Sonic,d6
000168C8                            
000168C8                            SPLC_ReadEntry:
000168C8 7200                       		moveq	#0,d1
000168CA 121A                       		move.b	(a2)+,d1
000168CC E149                       		lsl.w	#8,d1
000168CE 121A                       		move.b	(a2)+,d1
000168D0 3601                       		move.w	d1,d3
000168D2 E04B                       		lsr.w	#8,d3
000168D4 0243 00F0                  		andi.w	#$F0,d3
000168D8 0643 0010                  		addi.w	#$10,d3
000168DC 0241 0FFF                  		andi.w	#$FFF,d1
000168E0 EB89                       		lsl.l	#5,d1
000168E2 D286                       		add.l	d6,d1
000168E4 3404                       		move.w	d4,d2
000168E6 D843                       		add.w	d3,d4
000168E8 D843                       		add.w	d3,d4
000168EA 4EB9 0000 1426             		jsr	(QueueDMATransfer).l
000168F0 51CD FFD6                  		dbf	d5,SPLC_ReadEntry	; repeat for number of entries
000168F4                            
000168F4                            locret_13C96:
000168F4 4E75                       		rts	
000168F6                            ; End of function Sonic_LoadGfx
000168F6                            ; End of function Sonic_LoadGfx
000168F6                            
000168F6                            		include	"_incObj\0A Drowning Countdown.asm"
000168F6                            ; ---------------------------------------------------------------------------
000168F6                            ; Object 0A - drowning countdown numbers and small bubbles that float out of
000168F6                            ; Sonic's mouth (LZ)
000168F6                            ; ---------------------------------------------------------------------------
000168F6                            
000168F6                            DrownCount:
000168F6 7000                       		moveq	#0,d0
000168F8 1028 0024                  		move.b	obRoutine(a0),d0
000168FC 323B 0000                  		move.w	Drown_Index(pc,d0.w),d1
00016900 4EFB 1000                  		jmp	Drown_Index(pc,d1.w)
00016904                            ; ===========================================================================
00016904                            Drown_Index:
00016904 0000                       ptr_Drown_Main:		dc.w Drown_Main-Drown_Index
00016906 0000                       ptr_Drown_Animate:	dc.w Drown_Animate-Drown_Index
00016908 0000                       ptr_Drown_ChkWater:	dc.w Drown_ChkWater-Drown_Index
0001690A 0000                       ptr_Drown_Display:	dc.w Drown_Display-Drown_Index
0001690C 0000                       ptr_Drown_Delete:	dc.w Drown_Delete-Drown_Index
0001690E 0000                       ptr_Drown_Countdown:	dc.w Drown_Countdown-Drown_Index
00016910 0000                       ptr_Drown_AirLeft:	dc.w Drown_AirLeft-Drown_Index
00016912 0000                       			dc.w Drown_Display-Drown_Index
00016914 0000                       			dc.w Drown_Delete-Drown_Index
00016916                            
00016916 =00000030                  drown_origX:		equ $30		; original x-axis position
00016916 =00000038                  drown_time:		equ $38		; time between each number changes
00016916                            
00016916 =00000000                  id_Drown_Main:		equ ptr_Drown_Main-Drown_Index		; 0
00016916 =00000002                  id_Drown_Animate:	equ ptr_Drown_Animate-Drown_Index		; 2
00016916 =00000004                  id_Drown_ChkWater:	equ ptr_Drown_ChkWater-Drown_Index	; 4
00016916 =00000006                  id_Drown_Display:	equ ptr_Drown_Display-Drown_Index		; 6
00016916 =00000008                  id_Drown_Delete:		equ ptr_Drown_Delete-Drown_Index		; 8
00016916 =0000000A                  id_Drown_Countdown:	equ ptr_Drown_Countdown-Drown_Index	; $A
00016916 =0000000C                  id_Drown_AirLeft:	equ ptr_Drown_AirLeft-Drown_Index		; $C
00016916                            ; ===========================================================================
00016916                            
00016916                            Drown_Main:	; Routine 0
00016916 5428 0024                  		addq.b	#2,obRoutine(a0)
0001691A 217C 0001 4CD4 0004        		move.l	#Map_Bub,obMap(a0)
00016922 317C 8348 0002             		move.w	#$8348,obGfx(a0)
00016928 117C 0084 0001             		move.b	#$84,obRender(a0)
0001692E 117C 0010 0014             		move.b	#$10,obActWid(a0)
00016934 317C 0080 0018             		move.w	#$80,obPriority(a0)
0001693A 1028 0028                  		move.b	obSubtype(a0),d0 ; get bubble type
0001693E 6A00                       		bpl.s	@smallbubble	; branch if $00-$7F
00016940                            
00016940 5028 0024                  		addq.b	#8,obRoutine(a0) ; goto Drown_Countdown next
00016944 217C 0000 0000 0004        		move.l	#Map_Drown,obMap(a0)
0001694C 317C 0440 0002             		move.w	#$440,obGfx(a0)
00016952 0240 007F                  		andi.w	#$7F,d0
00016956 1140 0033                  		move.b	d0,$33(a0)
0001695A 6000 0000                  		bra.w	Drown_Countdown
0001695E                            ; ===========================================================================
0001695E                            
0001695E                            @smallbubble:
0001695E 1140 001C                  		move.b	d0,obAnim(a0)
00016962 3168 0008 0030             		move.w	obX(a0),drown_origX(a0)
00016968 317C FF78 0012             		move.w	#-$88,obVelY(a0)
0001696E                            
0001696E                            Drown_Animate:	; Routine 2
0001696E 43F9 0000 0000             		lea	(Ani_Drown).l,a1
00016974 4EB9 0000 C938             		jsr	(AnimateSprite).l
0001697A                            
0001697A                            Drown_ChkWater:	; Routine 4
0001697A 3038 F646                  		move.w	(v_waterpos1).w,d0
0001697E B068 000C                  		cmp.w	obY(a0),d0	; has bubble reached the water surface?
00016982 6500                       		bcs.s	@wobble		; if not, branch
00016984                            
00016984 117C 0006 0024             		move.b	#id_Drown_Display,obRoutine(a0) ; goto Drown_Display next
0001698A 5E28 001C                  		addq.b	#7,obAnim(a0)
0001698E 0C28 000D 001C             		cmpi.b	#$D,obAnim(a0)
00016994 6700                       		beq.s	Drown_Display
00016996 6000                       		bra.s	Drown_Display
00016998                            ; ===========================================================================
00016998                            
00016998                            @wobble:
00016998 4A38 F7C7                  		tst.b	(f_wtunnelmode).w ; is Sonic in a water tunnel?
0001699C 6700                       		beq.s	@notunnel	; if not, branch
0001699E 5868 0030                  		addq.w	#4,drown_origX(a0)
000169A2                            
000169A2                            	@notunnel:
000169A2 1028 0026                  		move.b	obAngle(a0),d0
000169A6 5228 0026                  		addq.b	#1,obAngle(a0)
000169AA 0240 007F                  		andi.w	#$7F,d0
000169AE 43F9 0000 0000             		lea	(Drown_WobbleData).l,a1
000169B4 1031 0000                  		move.b	(a1,d0.w),d0
000169B8 4880                       		ext.w	d0
000169BA D068 0030                  		add.w	drown_origX(a0),d0
000169BE 3140 0008                  		move.w	d0,obX(a0)
000169C2 6100                       		bsr.s	Drown_ShowNumber
000169C4 4EB9 0000 F878             		jsr	(SpeedToPos).l
000169CA 4A28 0001                  		tst.b	obRender(a0)
000169CE 6A00                       		bpl.s	@delete
000169D0 4EF9 0000 F88C             		jmp	(DisplaySprite).l
000169D6                            
000169D6                            	@delete:
000169D6 4EF9 0000 F8CC             		jmp	(DeleteObject).l
000169DC                            ; ===========================================================================
000169DC                            
000169DC                            Drown_Display:	; Routine 6, Routine $E
000169DC 6100                       		bsr.s	Drown_ShowNumber
000169DE 43F9 0000 0000             		lea	(Ani_Drown).l,a1
000169E4 4EB9 0000 C938             		jsr	(AnimateSprite).l
000169EA 4EF9 0000 F88C             		jmp	(DisplaySprite).l
000169F0                            ; ===========================================================================
000169F0                            
000169F0                            Drown_Delete:	; Routine 8, Routine $10
000169F0 4EF9 0000 F8CC             		jmp	(DeleteObject).l
000169F6                            ; ===========================================================================
000169F6                            
000169F6                            Drown_AirLeft:	; Routine $C
000169F6 0C78 000C FE14             		cmpi.w	#$C,(v_air).w	; check air remaining
000169FC 6200                       		bhi.s	Drown_AirLeft_Delete		; if higher than $C, branch
000169FE 5368 0038                  		subq.w	#1,drown_time(a0)
00016A02 6600                       		bne.s	@display
00016A04 117C 000E 0024             		move.b	#id_Drown_Display+8,obRoutine(a0) ; goto Drown_Display next
00016A0A 5E28 001C                  		addq.b	#7,obAnim(a0)
00016A0E 60CC                       		bra.s	Drown_Display
00016A10                            ; ===========================================================================
00016A10                            
00016A10                            	@display:
00016A10 43F9 0000 0000             		lea	(Ani_Drown).l,a1
00016A16 4EB9 0000 C938             		jsr	(AnimateSprite).l
00016A1C 4A28 0001                  		tst.b	obRender(a0)
00016A20 6A00                       		bpl.s	Drown_AirLeft_Delete
00016A22 4EF9 0000 F88C             		jmp	(DisplaySprite).l
00016A28                            
00016A28                            Drown_AirLeft_Delete:	
00016A28 4EF9 0000 F8CC             		jmp	(DeleteObject).l
00016A2E                            ; ===========================================================================
00016A2E                            
00016A2E                            Drown_ShowNumber:
00016A2E 4A68 0038                  		tst.w	drown_time(a0)
00016A32 6700                       		beq.s	@nonumber
00016A34 5368 0038                  		subq.w	#1,drown_time(a0)	; decrement timer
00016A38 6600                       		bne.s	@nonumber	; if time remains, branch
00016A3A 0C28 0007 001C             		cmpi.b	#7,obAnim(a0)
00016A40 6400                       		bcc.s	@nonumber
00016A42                            
00016A42 317C 000F 0038             		move.w	#15,drown_time(a0)
00016A48 4268 0012                  		clr.w	obVelY(a0)
00016A4C 117C 0080 0001             		move.b	#$80,obRender(a0)
00016A52 3028 0008                  		move.w	obX(a0),d0
00016A56 9078 F700                  		sub.w	(v_screenposx).w,d0
00016A5A 0640 0080                  		addi.w	#$80,d0
00016A5E 3140 0008                  		move.w	d0,obX(a0)
00016A62 3028 000C                  		move.w	obY(a0),d0
00016A66 9078 F704                  		sub.w	(v_screenposy).w,d0
00016A6A 0640 0080                  		addi.w	#$80,d0
00016A6E 3140 000A                  		move.w	d0,obScreenY(a0)
00016A72 117C 000C 0024             		move.b	#id_Drown_AirLeft,obRoutine(a0) ; goto Drown_AirLeft next
00016A78                            
00016A78                            	@nonumber:
00016A78 4E75                       		rts	
00016A7A                            ; ===========================================================================
00016A7A                            Drown_WobbleData:
00016A7A 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
00016A8A 0202 0303 0303 0303 0303+  		dc.b 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
00016A9A 0303 0303 0303 0303 0303+  		dc.b 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2
00016AAA 0202 0202 0202 0101 0101+  		dc.b 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0
00016ABA 00FF FFFF FFFF FEFE FEFE+  		dc.b 0, -1, -1, -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00016ACA FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00016ADA FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -3
00016AEA FDFD FDFD FDFD FEFE FEFE+  		dc.b -3, -3, -3, -3, -3, -3, -2, -2, -2, -2, -2, -1, -1, -1, -1, -1
00016AFA 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
00016B0A 0202 0303 0303 0303 0303+  		dc.b 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
00016B1A 0303 0303 0303 0303 0303+  		dc.b 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2
00016B2A 0202 0202 0202 0101 0101+  		dc.b 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0
00016B3A 00FF FFFF FFFF FEFE FEFE+  		dc.b 0, -1, -1, -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00016B4A FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00016B5A FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -3
00016B6A FDFD FDFD FDFD FEFE FEFE+  		dc.b -3, -3, -3, -3, -3, -3, -2, -2, -2, -2, -2, -1, -1, -1, -1, -1
00016B7A                            ; ===========================================================================
00016B7A                            
00016B7A                            Drown_Countdown:; Routine $A
00016B7A 4A68 002C                  		tst.w	$2C(a0)
00016B7E 6600 0000                  		bne.w	@loc_13F86
00016B82 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
00016B88 6400 0000                  		bcc.w	@nocountdown
00016B8C 0838 0006 D022             		btst	#6,(v_player+obStatus).w ; is Sonic underwater?
00016B92 6700 0000                  		beq.w	@nocountdown	; if not, branch
00016B96                            
00016B96 5368 0038                  		subq.w	#1,drown_time(a0)	; decrement timer
00016B9A 6A00 0000                  		bpl.w	@nochange	; branch if time remains
00016B9E 317C 003B 0038             		move.w	#59,drown_time(a0)
00016BA4 317C 0001 0036             		move.w	#1,$36(a0)
00016BAA 4EB9 0000 3A0C             		jsr	(RandomNumber).l
00016BB0 0240 0001                  		andi.w	#1,d0
00016BB4 1140 0034                  		move.b	d0,$34(a0)
00016BB8 3038 FE14                  		move.w	(v_air).w,d0	; check air remaining
00016BBC 0C40 0019                  		cmpi.w	#25,d0
00016BC0 6700                       		beq.s	@warnsound	; play sound if	air is 25
00016BC2 0C40 0014                  		cmpi.w	#20,d0
00016BC6 6700                       		beq.s	@warnsound
00016BC8 0C40 000F                  		cmpi.w	#15,d0
00016BCC 6700                       		beq.s	@warnsound
00016BCE 0C40 000C                  		cmpi.w	#12,d0
00016BD2 6200                       		bhi.s	@reduceair	; if air is above 12, branch
00016BD4                            
00016BD4                            	@skipmusic:
00016BDE 5328 0032                  		subq.b	#1,$32(a0)
00016BE2 6A00                       		bpl.s	@reduceair
00016BE4 1168 0033 0032             		move.b	$33(a0),$32(a0)
00016BEA 08E8 0007 0036             		bset	#7,$36(a0)
00016BF0 6000                       		bra.s	@reduceair
00016BF2                            ; ===========================================================================
00016BF2                            
00016BF2                            @warnsound:
00016BFC                            
00016BFC                            @reduceair:
00016BFC 5378 FE14                  		subq.w	#1,(v_air).w	; subtract 1 from air remaining
00016C00 6400 0000                  		bcc.w	@gotomakenum	; if air is above 0, branch
00016C04                            
00016C04                            		; Sonic drowns here
00016C04 6100 0000                  		bsr.w	ResumeMusic
00016C08 11FC 0081 F7C8             		move.b	#$81,(f_lockmulti).w ; lock controls
00016C18 117C 000A 0034             		move.b	#$A,$34(a0)
00016C1E 317C 0001 0036             		move.w	#1,$36(a0)
00016C24 317C 0078 002C             		move.w	#$78,$2C(a0)
00016C2A 2F08                       		move.l	a0,-(sp)
00016C2C 41F8 D000                  		lea	(v_player).w,a0
00016C30 6100 F6B6                  		bsr.w	Sonic_ResetOnFloor
00016C34 117C 0017 001C             		move.b	#id_Drown,obAnim(a0)	; use Sonic's drowning animation
00016C3A 08E8 0001 0022             		bset	#1,obStatus(a0)
00016C40 08E8 0007 0002             		bset	#7,obGfx(a0)
00016C46 317C 0000 0012             		move.w	#0,obVelY(a0)
00016C4C 317C 0000 0010             		move.w	#0,obVelX(a0)
00016C52 317C 0000 0020             		move.w	#0,obInertia(a0)
00016C58 11FC 0001 F744             		move.b	#1,(f_nobgscroll).w
00016C5E 205F                       		movea.l	(sp)+,a0
00016C60 4E75                       		rts	
00016C62                            ; ===========================================================================
00016C62                            
00016C62                            @loc_13F86:
00016C62 5368 002C                  		subq.w	#1,$2C(a0)
00016C66 6600                       		bne.s	@loc_13F94
00016C68 11FC 0006 D024             		move.b	#6,(v_player+obRoutine).w
00016C6E 4E75                       		rts	
00016C70                            ; ===========================================================================
00016C70                            
00016C70                            	@loc_13F94:
00016C70 2F08                       		move.l	a0,-(sp)
00016C72 41F8 D000                  		lea	(v_player).w,a0
00016C76 4EB9 0000 F878             		jsr	(SpeedToPos).l
00016C7C 0668 0010 0012             		addi.w	#$10,obVelY(a0)
00016C82 205F                       		movea.l	(sp)+,a0
00016C84 6000                       		bra.s	@nochange
00016C86                            ; ===========================================================================
00016C86                            
00016C86                            @gotomakenum:
00016C86 6000                       		bra.s	@makenum
00016C88                            ; ===========================================================================
00016C88                            
00016C88                            @nochange:
00016C88 4A68 0036                  		tst.w	$36(a0)
00016C8C 6700 0000                  		beq.w	@nocountdown
00016C90 5368 003A                  		subq.w	#1,$3A(a0)
00016C94 6A00 0000                  		bpl.w	@nocountdown
00016C98                            
00016C98                            @makenum:
00016C98 4EB9 0000 3A0C             		jsr	(RandomNumber).l
00016C9E 0240 000F                  		andi.w	#$F,d0
00016CA2 3140 003A                  		move.w	d0,$3A(a0)
00016CA6 4EB9 0000 FD18             		jsr	(FindFreeObj).l
00016CAC 6600 0000                  		bne.w	@nocountdown
00016CB0 12BC 000A                  		move.b	#id_DrownCount,0(a1) ; load object
00016CB4 3378 D008 0008             		move.w	(v_player+obX).w,obX(a1) ; match X position to Sonic
00016CBA 7006                       		moveq	#6,d0
00016CBC 0838 0000 D022             		btst	#0,(v_player+obStatus).w
00016CC2 6700                       		beq.s	@noflip
00016CC4 4440                       		neg.w	d0
00016CC6 137C 0040 0026             		move.b	#$40,obAngle(a1)
00016CCC                            
00016CCC                            	@noflip:
00016CCC D169 0008                  		add.w	d0,obX(a1)
00016CD0 3378 D00C 000C             		move.w	(v_player+obY).w,obY(a1)
00016CD6 137C 0006 0028             		move.b	#6,obSubtype(a1)
00016CDC 4A68 002C                  		tst.w	$2C(a0)
00016CE0 6700 0000                  		beq.w	@loc_1403E
00016CE4 0268 0007 003A             		andi.w	#7,$3A(a0)
00016CEA 0668 0000 003A             		addi.w	#0,$3A(a0)
00016CF0 3038 D00C                  		move.w	(v_player+obY).w,d0
00016CF4 0440 000C                  		subi.w	#$C,d0
00016CF8 3340 000C                  		move.w	d0,obY(a1)
00016CFC 4EB9 0000 3A0C             		jsr	(RandomNumber).l
00016D02 1340 0026                  		move.b	d0,obAngle(a1)
00016D06 3038 FE04                  		move.w	(v_framecount).w,d0
00016D0A 0200 0003                  		andi.b	#3,d0
00016D0E 6600                       		bne.s	@loc_14082
00016D10 137C 000E 0028             		move.b	#$E,obSubtype(a1)
00016D16 6000                       		bra.s	@loc_14082
00016D18                            ; ===========================================================================
00016D18                            
00016D18                            @loc_1403E:
00016D18 0828 0007 0036             		btst	#7,$36(a0)
00016D1E 6700                       		beq.s	@loc_14082
00016D20 3438 FE14                  		move.w	(v_air).w,d2
00016D24 E24A                       		lsr.w	#1,d2
00016D26 4EB9 0000 3A0C             		jsr	(RandomNumber).l
00016D2C 0240 0003                  		andi.w	#3,d0
00016D30 6600                       		bne.s	@loc_1406A
00016D32 08E8 0006 0036             		bset	#6,$36(a0)
00016D38 6600                       		bne.s	@loc_14082
00016D3A 1342 0028                  		move.b	d2,obSubtype(a1)
00016D3E 337C 001C 0038             		move.w	#$1C,drown_time(a1)
00016D44                            
00016D44                            	@loc_1406A:
00016D44 4A28 0034                  		tst.b	$34(a0)
00016D48 6600                       		bne.s	@loc_14082
00016D4A 08E8 0006 0036             		bset	#6,$36(a0)
00016D50 6600                       		bne.s	@loc_14082
00016D52 1342 0028                  		move.b	d2,obSubtype(a1)
00016D56 337C 001C 0038             		move.w	#$1C,drown_time(a1)
00016D5C                            
00016D5C                            @loc_14082:
00016D5C 5328 0034                  		subq.b	#1,$34(a0)
00016D60 6A00                       		bpl.s	@nocountdown
00016D62 4268 0036                  		clr.w	$36(a0)
00016D66                            
00016D66                            @nocountdown:
00016D66 4E75                       		rts	
00016D66 4E75                       		rts	
00016D68                            
00016D68                            
00016D68                            ; ---------------------------------------------------------------------------
00016D68                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
00016D68                            ; ---------------------------------------------------------------------------
00016D68                            
00016D68                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016D68                            
00016D68                            
00016D68                            ResumeMusic:
00016D68                            		;cmpi.w	#12,(v_air).w	; more than 12 seconds of air left?
00016D68                            		;bhi.s	@over12		; if yes, branch
00016D68                            		;move.b	(v_Saved_music),d0
00016D68                            		;tst.b	(v_invinc).w ; is Sonic invincible?
00016D68                            		;beq.s	@notinvinc ; if not, branch
00016D68                            		;move.w	#bgm_Invincible,d0
00016D68                            		;tst.b	(v_shoes).w ; is Sonic speed shoes?
00016D68                            		;beq.s	@notinvinc	; if not, branch
00016D68                            		;move.w	#bgm_Ending,d0
00016D68                            
00016D68                            	;@notinvinc:
00016D68                            		;tst.b	(f_lockscreen).w ; is Sonic at a boss?
00016D68                            		;beq.s	@playselected ; if not, branch
00016D68                            		;move.w	#bgm_Boss,d0
00016D68                            
00016D68                            	;@playselected:
00016D68                            		;jsr	(PlaySound).l
00016D68                            
00016D68                            	;@over12:
00016D68 31FC 001E FE14             		move.w	#30,(v_air).w	; reset air to 30 seconds
00016D6E 4238 D372                  		clr.b	(v_objspace+$340+$32).w
00016D72 4E75                       		rts	
00016D74                            
00016D74                            ;End of function ResumeMusic
00016D74                            
00016D74                            ; ===========================================================================
00016D74                            
00016D74                            		include	"_anim\Drowning Countdown.asm"
00016D74                            ; ---------------------------------------------------------------------------
00016D74                            ; Animation script - countdown numbers and bubbles (LZ)
00016D74                            ; ---------------------------------------------------------------------------
00016D74 0000                       Ani_Drown:	dc.w @zeroappear-Ani_Drown
00016D76 0000                       		dc.w @oneappear-Ani_Drown
00016D78 0000                       		dc.w @twoappear-Ani_Drown
00016D7A 0000                       		dc.w @threeappear-Ani_Drown
00016D7C 0000                       		dc.w @fourappear-Ani_Drown
00016D7E 0000                       		dc.w @fiveappear-Ani_Drown
00016D80 0000                       		dc.w @smallbubble-Ani_Drown
00016D82 0000                       		dc.w @zeroflash-Ani_Drown
00016D84 0000                       		dc.w @oneflash-Ani_Drown
00016D86 0000                       		dc.w @twoflash-Ani_Drown
00016D88 0000                       		dc.w @threeflash-Ani_Drown
00016D8A 0000                       		dc.w @fourflash-Ani_Drown
00016D8C 0000                       		dc.w @fiveflash-Ani_Drown
00016D8E 0000                       		dc.w @blank-Ani_Drown
00016D90 0000                       		dc.w @mediumbubble-Ani_Drown
00016D92 0500 0102 0304 090D FC     @zeroappear:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, afRoutine
00016D9C 00                         		even
00016D9C 0500 0102 0304 0C12 FC     @oneappear:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	afRoutine
00016DA6 00                         		even
00016DA6 0500 0102 0304 0C11 FC     @twoappear:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	afRoutine
00016DB0 00                         		even
00016DB0 0500 0102 0304 0B10 FC     @threeappear:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	afRoutine
00016DBA 00                         		even
00016DBA 0500 0102 0304 090F FC     @fourappear:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, afRoutine
00016DC4 00                         		even
00016DC4 0500 0102 0304 0A0E FC     @fiveappear:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, afRoutine
00016DCE 00                         		even
00016DCE 0E00 0102 FC               @smallbubble:	dc.b $E, 0, 1, 2, afRoutine
00016DD4 00                         		even
00016DD4 0716 0D16 0D16 0DFC        @zeroflash:	dc.b 7,	$16, $D, $16, $D, $16, $D, afRoutine
00016DDC 0716 1216 1216 12FC        @oneflash:	dc.b 7,	$16, $12, $16, $12, $16, $12, afRoutine
00016DE4 0716 1116 1116 11FC        @twoflash:	dc.b 7,	$16, $11, $16, $11, $16, $11, afRoutine
00016DEC 0716 1016 1016 10FC        @threeflash:	dc.b 7,	$16, $10, $16, $10, $16, $10, afRoutine
00016DF4 0716 0F16 0F16 0FFC        @fourflash:	dc.b 7,	$16, $F, $16, $F, $16, $F, afRoutine
00016DFC 0716 0E16 0E16 0EFC        @fiveflash:	dc.b 7,	$16, $E, $16, $E, $16, $E, afRoutine
00016E04 0EFC                       @blank:		dc.b $E, afRoutine
00016E06 0E01 0203 04FC             @mediumbubble:	dc.b $E, 1, 2, 3, 4, afRoutine
00016E0C                            		even
00016E0C                            		even
00016E0C                            Map_Drown:	include	"_maps\Drowning Countdown.asm"
00016E0C                            ; ---------------------------------------------------------------------------
00016E0C                            ; Sprite mappings - drowning countdown numbers (LZ)
00016E0C                            ; ---------------------------------------------------------------------------
00016E0C                            Map_Drown_internal:
00016E0C 0000                       		dc.w @num-Map_Drown_internal
00016E0E 01                         @num:		dc.b 1
00016E0F E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00016E14                            		even
00016E14                            		even
00016E14                            
00016E14                            		include	"_incObj\4E Silver Shield.asm"
00016E14                            ; ---------------------------------------------------------------------------
00016E14                            ; Object 4E - Silver Shield
00016E14                            ; ---------------------------------------------------------------------------
00016E14                            
00016E14                            SpShieldItem:
00016E14 223C 0000 0000             		move.l #Unc_SpShield,d1 ; Call for Silver Shield Art
00016E1A 343C A820                  		move.w #$A820,d2 ; Load Art from this location (VRAM location*20)
00016E1E                            		; In this case, VRAM = $541*20
00016E1E 363C 0200                  		move.w #$200,d3
00016E22 4EB9 0000 1426             		jsr (QueueDMATransfer).l
00016E28                            ; ---------------------------------------------------------------------------
00016E28                            SpShieldObj_Main:
00016E28 7000                       		moveq #0,d0
00016E2A 1028 0024                  		move.b $24(a0),d0
00016E2E 323B 0000                  		move.w SpShield_Index(pc,d0.w),d1
00016E32 4EFB 1000                  		jmp SpShield_Index(pc,d1.w)
00016E36                            ; ===========================================================================
00016E36                            SpShield_Index:
00016E36 0000                       		dc.w SpShield_Init-SpShield_Index
00016E38 0000                       		dc.w SpShieldChecks-SpShield_Index
00016E3A                            ; ===========================================================================
00016E3A                            SpShield_Init:
00016E3A 5428 0024                  		addq.b #2,$24(a0)
00016E3E 217C 0000 0000 0004        		move.l #Map_Shield,$4(A0) ; Load Shield Map into place
00016E46 117C 0004 0001             		move.b #4,1(a0)
00016E4C 317C 0080 0018             		move.w #$80,$18(a0)
00016E52 117C 0018 0014             		move.b #$18,obActWid(a0)
00016E58 317C 0541 0002             		move.w #$541,2(a0) ; Set VRAM location
00016E5E 0838 0007 D002             		btst #7,($FFFFD002).w
00016E64 6700                       		beq.s SpShieldChecks
00016E66 08E8 0007 0002             		bset #7,2(a0)
00016E6C                            ; ---------------------------------------------------------------------------
00016E6C                            SpShieldChecks:
00016E6C 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; Test if Sonic has a shield
00016E70 6600                       		bne.s SpSonicHasShield ; If so, branch to do nothing
00016E72 4A38 F5CA                  		tst.b (v_SpShield).w ; Test if Sonic got invisibility
00016E76 6700                       		beq.s Spjmp_DeleteObj38 ; If so, delete object temporarily
00016E78                            SpShieldProperties:
00016E78 3178 D008 0008             		move.w ($FFFFD008).w,8(a0) ; Load Main Character X-position
00016E7E 3178 D00C 000C             		move.w ($FFFFD00C).w,$C(a0) ; Load Main Character Y-position
00016E84 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0) ; Something about Character status
00016E8A 43F9 0000 0000             		lea (Ani_Shield).l, a1 ; Load Animation Scripts into a1
00016E90 4EB9 0000 C938             		jsr AnimateSprite
00016E96 4EFA 89F4                  		jmp DisplaySprite
00016E9A                            SpSonicHasShield:
00016E9A 4E75                       		rts
00016E9C                            Spjmp_DeleteObj38: ; loc_12648:
00016E9C 4EFA 8A2E                  		jmp DeleteObject
00016E9C 4EFA 8A2E                  		jmp DeleteObject
00016EA0                            		include	"_incObj\04 Gold Shield.asm"
00016EA0                            ; ---------------------------------------------------------------------------
00016EA0                            ; Object 04 - Gold shield
00016EA0                            ; ---------------------------------------------------------------------------
00016EA0                            
00016EA0                            GShieldItem:
00016EA0 223C 0000 0000             		move.l #Unc_GShield,d1 ; Call for Gold Shield Art
00016EA6 343C A820                  		move.w #$A820,d2 ; Load Art from this location (VRAM location*20)
00016EAA                            		; In this case, VRAM = $541*20
00016EAA 363C 0200                  		move.w #$200,d3
00016EAE 4EB9 0000 1426             		jsr (QueueDMATransfer).l
00016EB4                            ; ---------------------------------------------------------------------------
00016EB4                            GShieldObj_Main:
00016EB4 7000                       		moveq #0,d0
00016EB6 1028 0024                  		move.b $24(a0),d0
00016EBA 323B 0000                  		move.w GShield_Index(pc,d0.w),d1
00016EBE 4EFB 1000                  		jmp GShield_Index(pc,d1.w)
00016EC2                            ; ===========================================================================
00016EC2                            GShield_Index:
00016EC2 0000                       		dc.w GShield_Init-GShield_Index
00016EC4 0000                       		dc.w GShieldChecks-GShield_Index
00016EC6                            ; ===========================================================================
00016EC6                            GShield_Init:
00016EC6 5428 0024                  		addq.b #2,$24(a0)
00016ECA 217C 0000 0000 0004        		move.l #Map_Shield,$4(A0) ; Load Shield Map into place
00016ED2 117C 0004 0001             		move.b #4,1(a0)
00016ED8 317C 0080 0018             		move.w #$80,$18(a0)
00016EDE 117C 0018 0014             		move.b #$18,obActWid(a0)
00016EE4 317C 0541 0002             		move.w #$541,2(a0) ; Set VRAM location
00016EEA 0838 0007 D002             		btst #7,($FFFFD002).w
00016EF0 6700                       		beq.s GShieldChecks
00016EF2 08E8 0007 0002             		bset #7,2(a0)
00016EF8                            ; ---------------------------------------------------------------------------
00016EF8                            GShieldChecks:
00016EF8 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; Test if Sonic has a shield
00016EFC 6600                       		bne.s GSonicHasShield ; If so, branch to do nothing
00016EFE 4A38 F5C9                  		tst.b (v_GShield).w ; Test if Sonic got invisibility
00016F02 6700                       		beq.s Gjmp_DeleteObj38 ; If so, delete object temporarily
00016F04                            GShieldProperties:
00016F04 3178 D008 0008             		move.w ($FFFFD008).w,8(a0) ; Load Main Character X-position
00016F0A 3178 D00C 000C             		move.w ($FFFFD00C).w,$C(a0) ; Load Main Character Y-position
00016F10 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0) ; Something about Character status
00016F16 43F9 0000 0000             		lea (Ani_Shield).l, a1 ; Load Animation Scripts into a1
00016F1C 4EB9 0000 C938             		jsr AnimateSprite
00016F22 4EFA 8968                  		jmp DisplaySprite
00016F26                            GSonicHasShield:
00016F26 4E75                       		rts
00016F28                            Gjmp_DeleteObj38: ; loc_12648:
00016F28 4EFA 89A2                  		jmp DeleteObject
00016F28 4EFA 89A2                  		jmp DeleteObject
00016F2C                            		include	"_incObj\07 Red Shield.asm"
00016F2C                            ; ---------------------------------------------------------------------------
00016F2C                            ; Object 07 - red shield
00016F2C                            ; ---------------------------------------------------------------------------
00016F2C                            
00016F2C                            RShieldItem:
00016F2C 223C 0000 0000             		move.l #Unc_RedShield,d1 ; Call for Red Shield Art
00016F32 343C A820                  		move.w #$A820,d2 ; Load Art from this location (VRAM location*20)
00016F36                            		; In this case, VRAM = $541*20
00016F36 363C 0200                  		move.w #$200,d3
00016F3A 4EB9 0000 1426             		jsr (QueueDMATransfer).l
00016F40                            ; ---------------------------------------------------------------------------
00016F40                            RShieldObj_Main:
00016F40 7000                       		moveq #0,d0
00016F42 1028 0024                  		move.b $24(a0),d0
00016F46 323B 0000                  		move.w RShield_Index(pc,d0.w),d1
00016F4A 4EFB 1000                  		jmp RShield_Index(pc,d1.w)
00016F4E                            ; ===========================================================================
00016F4E                            RShield_Index:
00016F4E 0000                       		dc.w RShield_Init-RShield_Index
00016F50 0000                       		dc.w RShieldChecks-RShield_Index
00016F52                            ; ===========================================================================
00016F52                            RShield_Init:
00016F52 5428 0024                  		addq.b #2,$24(a0)
00016F56 217C 0000 0000 0004        		move.l #Map_Shield,$4(A0) ; Load Shield Map into place
00016F5E 117C 0004 0001             		move.b #4,1(a0)
00016F64 317C 0080 0018             		move.w #$80,$18(a0)
00016F6A 117C 0018 0014             		move.b #$18,obActWid(a0)
00016F70 317C 0541 0002             		move.w #$541,2(a0) ; Set VRAM location
00016F76 0838 0007 D002             		btst #7,($FFFFD002).w
00016F7C 6700                       		beq.s RShieldChecks
00016F7E 08E8 0007 0002             		bset #7,2(a0)
00016F84                            ; ---------------------------------------------------------------------------
00016F84                            RShieldChecks:
00016F84 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; Test if Sonic has a shield
00016F88 6600                       		bne.s RSonicHasShield ; If so, branch to do nothing
00016F8A 4A38 F5C8                  		tst.b (v_rshield).w ; Test if Sonic got invisibility
00016F8E 6700                       		beq.s Rjmp_DeleteObj38 ; If so, delete object temporarily
00016F90                            RShieldProperties:
00016F90 3178 D008 0008             		move.w ($FFFFD008).w,8(a0) ; Load Main Character X-position
00016F96 3178 D00C 000C             		move.w ($FFFFD00C).w,$C(a0) ; Load Main Character Y-position
00016F9C 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0) ; Something about Character status
00016FA2 43F9 0000 0000             		lea (Ani_Shield).l, a1 ; Load Animation Scripts into a1
00016FA8 4EB9 0000 C938             		jsr AnimateSprite
00016FAE 4EFA 88DC                  		jmp DisplaySprite
00016FB2                            RSonicHasShield:
00016FB2 4E75                       		rts
00016FB4                            Rjmp_DeleteObj38: ; loc_12648:
00016FB4 4EFA 8916                  		jmp DeleteObject
00016FB4 4EFA 8916                  		jmp DeleteObject
00016FB8                            		include	"_incObj\38 Shield.asm"
00016FB8                            ; ---------------------------------------------------------------------------
00016FB8                            ; Object 38 - shield
00016FB8                            ; ---------------------------------------------------------------------------
00016FB8                            
00016FB8                            ShieldItem:
00016FB8 223C 0000 0000             		move.l #Unc_Shield,d1 ; Call for Regular Shield Art
00016FBE 343C A820                  		move.w #$A820,d2 ; Load Art from this location (VRAM location*20)
00016FC2                            		; In this case, VRAM = $541*20
00016FC2 363C 0200                  		move.w #$200,d3
00016FC6 4EB9 0000 1426             		jsr (QueueDMATransfer).l
00016FCC                            ; ---------------------------------------------------------------------------
00016FCC                            ShieldObj_Main:
00016FCC 7000                       		moveq #0,d0
00016FCE 1028 0024                  		move.b $24(a0),d0
00016FD2 323B 0000                  		move.w Shield_Index(pc,d0.w),d1
00016FD6 4EFB 1000                  		jmp Shield_Index(pc,d1.w)
00016FDA                            ; ===========================================================================
00016FDA                            Shield_Index:
00016FDA 0000                       		dc.w Shield_Init-Shield_Index
00016FDC 0000                       		dc.w ShieldChecks-Shield_Index
00016FDE                            ; ===========================================================================
00016FDE                            Shield_Init:
00016FDE 5428 0024                  		addq.b #2,$24(a0)
00016FE2 217C 0000 0000 0004        		move.l #Map_Shield,$4(A0) ; Load Shield Map into place
00016FEA 117C 0004 0001             		move.b #4,1(a0)
00016FF0 317C 0080 0018             		move.w #$80,$18(a0)
00016FF6 117C 0018 0014             		move.b #$18,obActWid(a0)
00016FFC 317C 0541 0002             		move.w #$541,2(a0) ; Set VRAM location
00017002 0838 0007 D002             		btst #7,($FFFFD002).w
00017008 6700                       		beq.s ShieldChecks
0001700A 08E8 0007 0002             		bset #7,2(a0)
00017010                            ; ---------------------------------------------------------------------------
00017010                            ShieldChecks:
00017010 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; Test if Sonic has a shield
00017014 6600                       		bne.s SonicHasShield ; If so, branch to do nothing
00017016 4A38 FE2C                  		tst.b ($FFFFFE2C).w ; Test if Sonic got invisibility
0001701A 6700                       		beq.s jmp_DeleteObj38 ; If so, delete object temporarily
0001701C                            ShieldProperties:
0001701C 3178 D008 0008             		move.w ($FFFFD008).w,8(a0) ; Load Main Character X-position
00017022 3178 D00C 000C             		move.w ($FFFFD00C).w,$C(a0) ; Load Main Character Y-position
00017028 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0) ; Something about Character status
0001702E 43F9 0000 0000             		lea (Ani_Shield).l, a1 ; Load Animation Scripts into a1
00017034 4EB9 0000 C938             		jsr AnimateSprite
0001703A 4EFA 8850                  		jmp DisplaySprite
0001703E                            SonicHasShield:
0001703E 4E75                       		rts
00017040                            jmp_DeleteObj38: ; loc_12648:
00017040 4EFA 888A                  		jmp DeleteObject
00017040 4EFA 888A                  		jmp DeleteObject
00017044                            		include	"_incObj\19 Invincibility Stars.asm"		
00017044                            ; ---------------------------------------------------------------------------
00017044                            ; Object 19 - Invincibility Stars
00017044                            ; ---------------------------------------------------------------------------
00017044                            
00017044                            InvStarsObj:
00017044 223C 0000 0000             		move.l #Unc_Stars,d1
0001704A 343C A820                  		move.w #$A820,d2
0001704E 363C 0200                  		move.w #$200,d3
00017052 4EB9 0000 1426             		jsr (QueueDMATransfer).l
00017058                            Invincibility_Main:
00017058 7000                       		moveq #0,d0
0001705A 1028 0024                  		move.b $24(a0),d0
0001705E                            Invincibility_Init:
0001705E 5428 0024                  		addq.b #2,$24(a0)
00017062 217C 0000 0000 0004        		move.l #Map_Shield,4(a0) ; loads mapping
0001706A 117C 0004 0001             		move.b #4,1(a0)
00017070 317C 0080 0018             		move.w #$80,$18(a0)
00017076 117C 0010 0014             		move.b #$10,obActWid(a0)
0001707C 317C 0541 0002             		move.w #$541,2(a0) ; shield specific code
00017082                            ; ===========================================================================
00017082                            
00017082                            Obj19_Stars: ; XREF: Obj38_Index
00017082 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; does Sonic have invincibility?
00017086 6700                       		beq.s Obj19_Delete2 ; if not, branch
00017088 3038 F7A8                  		move.w ($FFFFF7A8).w,d0
0001708C 1228 001C                  		move.b $1C(a0),d1
00017090 5301                       		subq.b #1,d1
00017092 6000                       		bra.s Obj19_StarTrail
00017094                            ; ===========================================================================
00017094 E909                       		lsl.b #4,d1
00017096 5801                       		addq.b #4,d1
00017098 9001                       		sub.b d1,d0
0001709A 1228 0030                  		move.b $30(a0),d1
0001709E 9001                       		sub.b d1,d0
000170A0 5801                       		addq.b #4,d1
000170A2 0201 000F                  		andi.b #$F,d1
000170A6 1141 0030                  		move.b d1,$30(a0)
000170AA 6000                       		bra.s Obj19_StarTrail2a
000170AC                            ; ===========================================================================
000170AC                            
000170AC                            Obj19_StarTrail: ; XREF: Obj19_Stars
000170AC E709                       		lsl.b #3,d1
000170AE 1401                       		move.b d1,d2
000170B0 D201                       		add.b d1,d1
000170B2 D202                       		add.b d2,d1
000170B4 5801                       		addq.b #4,d1
000170B6 9001                       		sub.b d1,d0
000170B8 1228 0030                  		move.b $30(a0),d1
000170BC 9001                       		sub.b d1,d0
000170BE 5801                       		addq.b #4,d1
000170C0 0C01 0018                  		cmpi.b #$18,d1
000170C4 6500                       		bcs.s Obj19_StarTrail2
000170C6 7200                       		moveq #0,d1
000170C8                            
000170C8                            Obj19_StarTrail2:
000170C8 1141 0030                  		move.b d1,$30(a0)
000170CC                            
000170CC                            Obj19_StarTrail2a:
000170CC 43F8 CB00                  		lea ($FFFFCB00).w,a1
000170D0 43F1 0000                  		lea (a1,d0.w),a1
000170D4 3159 0008                  		move.w (a1)+,8(a0)
000170D8 3159 000C                  		move.w (a1)+,$C(a0)
000170DC 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0)
000170E2 43F9 0000 0000             		lea (Ani_Shield).l,a1
000170E8 4EB9 0000 C938             		jsr (AnimateSprite).l
000170EE 4EF9 0000 F88C             		jmp (DisplaySprite).l
000170F4                            ; ===========================================================================
000170F4                            
000170F4                            Obj19_Delete2: ; XREF: Obj19_Stars
000170F4 4EF9 0000 F8CC             		jmp (DeleteObject).l
000170F4 4EF9 0000 F8CC             		jmp (DeleteObject).l
000170FA                            		include	"_incObj\4A Special Stage Entry (Unused).asm"
000170FA                            ; ---------------------------------------------------------------------------
000170FA                            ; Object 4A - special stage entry from beta
000170FA                            ; ---------------------------------------------------------------------------
000170FA                            
000170FA                            VanishSonic:
000170FA 7000                       		moveq	#0,d0
000170FC 1028 0024                  		move.b	obRoutine(a0),d0
00017100 323B 0000                  		move.w	Van_Index(pc,d0.w),d1
00017104 4EFB 1000                  		jmp	Van_Index(pc,d1.w)
00017108                            ; ===========================================================================
00017108 0000                       Van_Index:	dc.w Van_Main-Van_Index
0001710A 0000                       		dc.w Van_RmvSonic-Van_Index
0001710C 0000                       		dc.w Van_LoadSonic-Van_Index
0001710E                            
0001710E =00000030                  van_time:	equ $30		; time for Sonic to disappear
0001710E                            ; ===========================================================================
0001710E                            
0001710E                            Van_Main:	; Routine 0
0001710E 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are pattern load cues empty?
00017112 6700                       		beq.s	@isempty	; if yes, branch
00017114 4E75                       		rts	
00017116                            
00017116                            	@isempty:
00017116 5428 0024                  		addq.b	#2,obRoutine(a0)
0001711A 217C 0000 0000 0004        		move.l	#Map_Vanish,obMap(a0)
00017122 117C 0004 0001             		move.b	#4,obRender(a0)
00017128 317C 0080 0018             		move.w	#$80,obPriority(a0)
0001712E 117C 0038 0014             		move.b	#$38,obActWid(a0)
00017134 317C 0541 0002             		move.w	#$541,obGfx(a0)
0001713A 317C 0078 0030             		move.w	#120,van_time(a0) ; set time for Sonic's disappearance to 2 seconds
00017140                            
00017140                            Van_RmvSonic:	; Routine 2
00017140 3178 D008 0008             		move.w	(v_player+obX).w,obX(a0)
00017146 3178 D00C 000C             		move.w	(v_player+obY).w,obY(a0)
0001714C 1178 D022 0022             		move.b	(v_player+obStatus).w,obStatus(a0)
00017152 43F9 0000 0000             		lea	(Ani_Vanish).l,a1
00017158 4EB9 0000 C938             		jsr	(AnimateSprite).l
0001715E 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
00017164 6600                       		bne.s	@display
00017166 4A38 D000                  		tst.b	(v_player).w
0001716A 6700                       		beq.s	@display
0001716C 11FC 0000 D000             		move.b	#0,(v_player).w	; remove Sonic
0001717C                            
0001717C                            	@display:
0001717C 4EF9 0000 F88C             		jmp	(DisplaySprite).l
00017182                            ; ===========================================================================
00017182                            
00017182                            Van_LoadSonic:	; Routine 4
00017182 5368 0030                  		subq.w	#1,van_time(a0)	; subtract 1 from time
00017186 6600                       		bne.s	@wait		; if time remains, branch
00017188 11FC 0001 D000             		move.b	#id_SonicPlayer,(v_player).w ; load Sonic object
0001718E 4EF9 0000 F8CC             		jmp	(DeleteObject).l
00017194                            
00017194                            	@wait:
00017194 4E75                       		rts	
00017194 4E75                       		rts	
00017196                            		include	"_incObj\08 Water Splash.asm"
00017196                            ; ---------------------------------------------------------------------------
00017196                            ; Object 08 - water splash (LZ)
00017196                            ; ---------------------------------------------------------------------------
00017196                            
00017196                            Splash:
00017196 7000                       		moveq	#0,d0
00017198 1028 0024                  		move.b	obRoutine(a0),d0
0001719C 323B 0000                  		move.w	Spla_Index(pc,d0.w),d1
000171A0 4EFB 1000                  		jmp	Spla_Index(pc,d1.w)
000171A4                            ; ===========================================================================
000171A4 0000                       Spla_Index:	dc.w Spla_Main-Spla_Index
000171A6 0000                       		dc.w Spla_Display-Spla_Index
000171A8 0000                       		dc.w Spla_Delete-Spla_Index
000171AA                            ; ===========================================================================
000171AA                            
000171AA                            Spla_Main:    ; Routine 0
000171AA 5428 0024                          addq.b    #2,obRoutine(a0)
000171AE 217C 0000 0000 0004                move.l    #Map_Splash,obMap(a0)
000171B6 0028 0004 0001                     ori.b    #4,obRender(a0)
000171BC 117C 0001 0018                     move.b    #1,obPriority(a0)
000171C2 117C 0010 0014                     move.b    #$10,obActWid(a0)
000171C8 317C 4259 0002                     move.w    #$4259,obGfx(a0)
000171CE 3178 D008 0008                     move.w    (v_player+obX).w,obX(a0) ; copy x-position from Sonic
000171D4                            
000171D4                            Spla_Display:    ; Routine 2
000171D4                                    ;move.w    (v_waterpos1).w,obY(a0) ; copy y-position from water height
000171D4 3178 FF92 000C                     move.w    (v_watersplashpos).w,obY(a0) ;TIS copy y-position from player
000171DA 43F9 0000 0000                     lea    (Ani_Splash).l,a1
000171E0 4EB9 0000 C938                     jsr    (AnimateSprite).l
000171E6 4EF9 0000 F88C                     jmp    (DisplaySprite).l
000171EC                            ; ===========================================================================
000171EC                            
000171EC                            Spla_Delete:	; Routine 4
000171EC 4EF9 0000 F8CC             		jmp	(DeleteObject).l	; delete when animation	is complete
000171EC 4EF9 0000 F8CC             		jmp	(DeleteObject).l	; delete when animation	is complete
000171F2                            		include	"_anim\Shield and Invincibility.asm"
000171F2                            ; ---------------------------------------------------------------------------
000171F2                            ; Animation script - shield and invincibility stars
000171F2                            ; ---------------------------------------------------------------------------
000171F2 0000                       Ani_Shield:	dc.w @shield-Ani_Shield
000171F4 0000                       		dc.w @stars1-Ani_Shield
000171F6 0000                       		dc.w @stars2-Ani_Shield
000171F8 0000                       		dc.w @stars3-Ani_Shield
000171FA 0000                       		dc.w @stars4-Ani_Shield
000171FC 0101 0002 0003 00FF        @shield:	dc.b 1,	1, 0, 2, 0, 3, 0, afEnd
00017204 0504 0506 07FF             @stars1:	dc.b 5,	4, 5, 6, 7, afEnd
0001720A 0004 0400 0404 0005 0500+  @stars2:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
0001721B 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, afEnd
00017224 0004 0400 0400 0005 0500+  @stars3:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
00017235 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, afEnd
0001723E 0004 0000 0400 0005 0000+  @stars4:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
0001724F 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, afEnd
00017258                            		even
00017258                            		even
00017258                            Map_Shield:	include	"_maps\Shield and Invincibility.asm"
00017258                            ; --------------------------------------------------------------------------------
00017258                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00017258                            ; --------------------------------------------------------------------------------
00017258                            
00017258                            SME_7M_8q:	
00017258 0000 0000                  		dc.w SME_7M_8q_10-SME_7M_8q, SME_7M_8q_11-SME_7M_8q	
0001725C 0000 0000                  		dc.w SME_7M_8q_26-SME_7M_8q, SME_7M_8q_3B-SME_7M_8q	
00017260 0000 0000                  		dc.w SME_7M_8q_50-SME_7M_8q, SME_7M_8q_65-SME_7M_8q	
00017264 0000 0000                  		dc.w SME_7M_8q_7A-SME_7M_8q, SME_7M_8q_8F-SME_7M_8q	
00017268 00                         SME_7M_8q_10:	dc.b 0	
00017269 04                         SME_7M_8q_11:	dc.b 4	
0001726A E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8	
0001726F E80A 0009 00               		dc.b $E8, $A, 0, 9, 0	
00017274 000A 1000 E8               		dc.b 0, $A, $10, 0, $E8	
00017279 000A 1009 00               		dc.b 0, $A, $10, 9, 0	
0001727E 04                         SME_7M_8q_26:	dc.b 4	
0001727F E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9	
00017284 E80A 0012 00               		dc.b $E8, $A, 0, $12, 0	
00017289 000A 1812 E9               		dc.b 0, $A, $18, $12, $E9	
0001728E 000A 1012 00               		dc.b 0, $A, $10, $12, 0	
00017293 04                         SME_7M_8q_3B:	dc.b 4	
00017294 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8	
00017299 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0	
0001729E 000A 1809 E8               		dc.b 0, $A, $18, 9, $E8	
000172A3 000A 1800 00               		dc.b 0, $A, $18, 0, 0	
000172A8 04                         SME_7M_8q_50:	dc.b 4	
000172A9 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8	
000172AE E80A 0009 00               		dc.b $E8, $A, 0, 9, 0	
000172B3 000A 1809 E8               		dc.b 0, $A, $18, 9, $E8	
000172B8 000A 1800 00               		dc.b 0, $A, $18, 0, 0	
000172BD 04                         SME_7M_8q_65:	dc.b 4	
000172BE E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8	
000172C3 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0	
000172C8 000A 1000 E8               		dc.b 0, $A, $10, 0, $E8	
000172CD 000A 1009 00               		dc.b 0, $A, $10, 9, 0	
000172D2 04                         SME_7M_8q_7A:	dc.b 4	
000172D3 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8	
000172D8 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0	
000172DD 000A 181B E8               		dc.b 0, $A, $18, $1B, $E8	
000172E2 000A 1812 00               		dc.b 0, $A, $18, $12, 0	
000172E7 04                         SME_7M_8q_8F:	dc.b 4	
000172E8 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8	
000172ED E80A 0812 00               		dc.b $E8, $A, 8, $12, 0	
000172F2 000A 1012 E8               		dc.b 0, $A, $10, $12, $E8	
000172F7 000A 101B 00               		dc.b 0, $A, $10, $1B, 0	
000172FC                            		even
000172FC                            		even
000172FC                            Map_Shield2:	include	"_maps\Shield 2.asm"
000172FC                            ; --------------------------------------------------------------------------------
000172FC                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000172FC                            ; --------------------------------------------------------------------------------
000172FC                            
000172FC                            SME_X5P7B:	
000172FC 0000 0000                  		dc.w SME_X5P7B_10-SME_X5P7B, SME_X5P7B_11-SME_X5P7B	
00017300 0000 0000                  		dc.w SME_X5P7B_26-SME_X5P7B, SME_X5P7B_3B-SME_X5P7B	
00017304 0000 0000                  		dc.w SME_X5P7B_50-SME_X5P7B, SME_X5P7B_65-SME_X5P7B	
00017308 0000 0000                  		dc.w SME_X5P7B_7A-SME_X5P7B, SME_X5P7B_8F-SME_X5P7B	
0001730C 00                         SME_X5P7B_10:	dc.b 0	
0001730D 04                         SME_X5P7B_11:	dc.b 4	
0001730E E80A 2000 E8               		dc.b $E8, $A, $20, 0, $E8	
00017313 E80A 2009 00               		dc.b $E8, $A, $20, 9, 0	
00017318 000A 3000 E8               		dc.b 0, $A, $30, 0, $E8	
0001731D 000A 3009 00               		dc.b 0, $A, $30, 9, 0	
00017322 04                         SME_X5P7B_26:	dc.b 4	
00017323 E80A 2812 E9               		dc.b $E8, $A, $28, $12, $E9	
00017328 E80A 2012 00               		dc.b $E8, $A, $20, $12, 0	
0001732D 000A 3812 E9               		dc.b 0, $A, $38, $12, $E9	
00017332 000A 3012 00               		dc.b 0, $A, $30, $12, 0	
00017337 04                         SME_X5P7B_3B:	dc.b 4	
00017338 E80A 2809 E8               		dc.b $E8, $A, $28, 9, $E8	
0001733D E80A 2800 00               		dc.b $E8, $A, $28, 0, 0	
00017342 000A 3809 E8               		dc.b 0, $A, $38, 9, $E8	
00017347 000A 3800 00               		dc.b 0, $A, $38, 0, 0	
0001734C 04                         SME_X5P7B_50:	dc.b 4	
0001734D E80A 2000 E8               		dc.b $E8, $A, $20, 0, $E8	
00017352 E80A 2009 00               		dc.b $E8, $A, $20, 9, 0	
00017357 000A 3809 E8               		dc.b 0, $A, $38, 9, $E8	
0001735C 000A 3800 00               		dc.b 0, $A, $38, 0, 0	
00017361 04                         SME_X5P7B_65:	dc.b 4	
00017362 E80A 2809 E8               		dc.b $E8, $A, $28, 9, $E8	
00017367 E80A 2800 00               		dc.b $E8, $A, $28, 0, 0	
0001736C 000A 3000 E8               		dc.b 0, $A, $30, 0, $E8	
00017371 000A 3009 00               		dc.b 0, $A, $30, 9, 0	
00017376 04                         SME_X5P7B_7A:	dc.b 4	
00017377 E80A 2012 E8               		dc.b $E8, $A, $20, $12, $E8	
0001737C E80A 201B 00               		dc.b $E8, $A, $20, $1B, 0	
00017381 000A 381B E8               		dc.b 0, $A, $38, $1B, $E8	
00017386 000A 3812 00               		dc.b 0, $A, $38, $12, 0	
0001738B 04                         SME_X5P7B_8F:	dc.b 4	
0001738C E80A 281B E8               		dc.b $E8, $A, $28, $1B, $E8	
00017391 E80A 2812 00               		dc.b $E8, $A, $28, $12, 0	
00017396 000A 3012 E8               		dc.b 0, $A, $30, $12, $E8	
0001739B 000A 301B 00               		dc.b 0, $A, $30, $1B, 0	
000173A0                            		even
000173A0                            		even
000173A0                            
000173A0                            Map_Shield3:	include	"_maps\Shield 3.asm"
000173A0                            ; --------------------------------------------------------------------------------
000173A0                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000173A0                            ; --------------------------------------------------------------------------------
000173A0                            
000173A0                            SME__wWzO:	
000173A0 0000 0000                  		dc.w SME__wWzO_10-SME__wWzO, SME__wWzO_11-SME__wWzO	
000173A4 0000 0000                  		dc.w SME__wWzO_26-SME__wWzO, SME__wWzO_3B-SME__wWzO	
000173A8 0000 0000                  		dc.w SME__wWzO_50-SME__wWzO, SME__wWzO_65-SME__wWzO	
000173AC 0000 0000                  		dc.w SME__wWzO_7A-SME__wWzO, SME__wWzO_8F-SME__wWzO	
000173B0 00                         SME__wWzO_10:	dc.b 0	
000173B1 04                         SME__wWzO_11:	dc.b 4	
000173B2 E80A 2000 E8               		dc.b $E8, $A, $20, 0, $E8	
000173B7 E80A 2009 00               		dc.b $E8, $A, $20, 9, 0	
000173BC 000A 3000 E8               		dc.b 0, $A, $30, 0, $E8	
000173C1 000A 3009 00               		dc.b 0, $A, $30, 9, 0	
000173C6 04                         SME__wWzO_26:	dc.b 4	
000173C7 E80A 2812 E9               		dc.b $E8, $A, $28, $12, $E9	
000173CC E80A 2012 00               		dc.b $E8, $A, $20, $12, 0	
000173D1 000A 3812 E9               		dc.b 0, $A, $38, $12, $E9	
000173D6 000A 3012 00               		dc.b 0, $A, $30, $12, 0	
000173DB 04                         SME__wWzO_3B:	dc.b 4	
000173DC E80A 2809 E8               		dc.b $E8, $A, $28, 9, $E8	
000173E1 E80A 2800 00               		dc.b $E8, $A, $28, 0, 0	
000173E6 000A 3809 E8               		dc.b 0, $A, $38, 9, $E8	
000173EB 000A 3800 00               		dc.b 0, $A, $38, 0, 0	
000173F0 04                         SME__wWzO_50:	dc.b 4	
000173F1 E80A 2000 E8               		dc.b $E8, $A, $20, 0, $E8	
000173F6 E80A 2009 00               		dc.b $E8, $A, $20, 9, 0	
000173FB 000A 3809 E8               		dc.b 0, $A, $38, 9, $E8	
00017400 000A 3800 00               		dc.b 0, $A, $38, 0, 0	
00017405 04                         SME__wWzO_65:	dc.b 4	
00017406 E80A 2809 E8               		dc.b $E8, $A, $28, 9, $E8	
0001740B E80A 2800 00               		dc.b $E8, $A, $28, 0, 0	
00017410 000A 3000 E8               		dc.b 0, $A, $30, 0, $E8	
00017415 000A 3009 00               		dc.b 0, $A, $30, 9, 0	
0001741A 04                         SME__wWzO_7A:	dc.b 4	
0001741B E80A 2012 E8               		dc.b $E8, $A, $20, $12, $E8	
00017420 E80A 201B 00               		dc.b $E8, $A, $20, $1B, 0	
00017425 000A 381B E8               		dc.b 0, $A, $38, $1B, $E8	
0001742A 000A 3812 00               		dc.b 0, $A, $38, $12, 0	
0001742F 04                         SME__wWzO_8F:	dc.b 4	
00017430 E80A 281B E8               		dc.b $E8, $A, $28, $1B, $E8	
00017435 E80A 2812 00               		dc.b $E8, $A, $28, $12, 0	
0001743A 000A 3012 E8               		dc.b 0, $A, $30, $12, $E8	
0001743F 000A 301B 00               		dc.b 0, $A, $30, $1B, 0	
00017444                            		even
00017444                            		even
00017444                            		include	"_anim\Special Stage Entry (Unused).asm"
00017444                            ; ---------------------------------------------------------------------------
00017444                            ; Animation script - special stage entry effect from beta
00017444                            ; ---------------------------------------------------------------------------
00017444 0000                       Ani_Vanish:	dc.w @vanish-Ani_Vanish
00017446 0500 0100 0100 0701 0702+  @vanish:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, afRoutine
0001745A                            		even
0001745A                            		even
0001745A                            Map_Vanish:	include	"_maps\Special Stage Entry (Unused).asm"
0001745A                            ; ---------------------------------------------------------------------------
0001745A                            ; Sprite mappings - special stage entry	from beta
0001745A                            ; ---------------------------------------------------------------------------
0001745A                            Map_Vanish_internal:
0001745A 0000                       		dc.w @flash1-Map_Vanish_internal
0001745C 0000                       		dc.w @flash2-Map_Vanish_internal
0001745E 0000                       		dc.w @flash3-Map_Vanish_internal
00017460 0000                       		dc.w @sparkle1-Map_Vanish_internal
00017462 0000                       		dc.w @sparkle2-Map_Vanish_internal
00017464 0000                       		dc.w @sparkle3-Map_Vanish_internal
00017466 0000                       		dc.w @sparkle4-Map_Vanish_internal
00017468 0000                       		dc.w @blank-Map_Vanish_internal
0001746A 03                         @flash1:	dc.b 3
0001746B F800 0000 08               		dc.b $F8, 0, 0,	0, 8
00017470 0004 0001 00               		dc.b 0,	4, 0, 1, 0
00017475 0800 1000 08               		dc.b 8,	0, $10,	0, 8
0001747A 03                         @flash2:	dc.b 3
0001747B F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
00017480 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
00017485 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
0001748A 05                         @flash3:	dc.b 5
0001748B E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
00017490 EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
00017495 FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
0001749A 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
0001749F 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
000174A4 09                         @sparkle1:	dc.b 9
000174A5 F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
000174AA F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
000174AF 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
000174B4 0005 0034 10               		dc.b 0,	5, 0, $34, $10
000174B9 F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
000174BE F000 1836 18               		dc.b $F0, 0, $18, $36, $18
000174C3 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
000174C8 0000 0825 28               		dc.b 0,	0, 8, $25, $28
000174CD F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
000174D2 12                         @sparkle2:	dc.b $12
000174D3 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
000174D8 F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
000174DD F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
000174E2 0000 0025 00               		dc.b 0,	0, 0, $25, 0
000174E7 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
000174EC 1000 1026 00               		dc.b $10, 0, $10, $26, 0
000174F1 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
000174F6 F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
000174FB 0000 0026 10               		dc.b 0,	0, 0, $26, $10
00017500 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
00017505 0800 0826 18               		dc.b 8,	0, 8, $26, $18
0001750A 0800 0029 20               		dc.b 8,	0, 0, $29, $20
0001750F F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
00017514 F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
00017519 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
0001751E F800 1826 30               		dc.b $F8, 0, $18, $26, $30
00017523 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
00017528 F800 1025 40               		dc.b $F8, 0, $10, $25, $40
0001752D 11                         @sparkle3:	dc.b $11
0001752E F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
00017533 F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
00017538 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
0001753D 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
00017542 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
00017547 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
0001754C 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
00017551 F800 1025 30               		dc.b $F8, 0, $10, $25, $30
00017556 0000 0025 30               		dc.b 0,	0, 0, $25, $30
0001755B 0800 0825 30               		dc.b 8,	0, 8, $25, $30
00017560 0000 0826 38               		dc.b 0,	0, 8, $26, $38
00017565 0800 0029 38               		dc.b 8,	0, 0, $29, $38
0001756A F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
0001756F 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
00017574 F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
00017579 0000 0025 48               		dc.b 0,	0, 0, $25, $48
0001757E 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
00017583 09                         @sparkle4:	dc.b 9
00017584 FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
00017589 0400 0825 28               		dc.b 4,	0, 8, $25, $28
0001758E 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
00017593 0400 0826 40               		dc.b 4,	0, 8, $26, $40
00017598 FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
0001759D FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
000175A2 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
000175A7 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
000175AC 04                         		dc.b 4
000175AD 0008 2758 00               @blank:		dc.b 0,	8, $27,	$58, 0
000175B2                            		even
000175B2                            		even
000175B2                            		include	"_anim\Water Splash.asm"
000175B2                            ; ---------------------------------------------------------------------------
000175B2                            ; Animation script - water splash (LZ)
000175B2                            ; ---------------------------------------------------------------------------
000175B2 0000                       Ani_Splash:	dc.w @splash-Ani_Splash
000175B4 0400 0102 FC               @splash:	dc.b 4,	0, 1, 2, afRoutine
000175BA 00                         		even
000175BA 00                         		even
000175BA                            Map_Splash:	include	"_maps\Water Splash.asm"
000175BA                            ; ---------------------------------------------------------------------------
000175BA                            ; Sprite mappings - water splash (LZ)
000175BA                            ; ---------------------------------------------------------------------------
000175BA                            Map_Splash_internal:
000175BA 0000                       		dc.w @splash1-Map_Splash_internal
000175BC 0000                       		dc.w @splash2-Map_Splash_internal
000175BE 0000                       		dc.w @splash3-Map_Splash_internal
000175C0 02                         @splash1:	dc.b 2
000175C1 F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
000175C6 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
000175CB 02                         @splash2:	dc.b 2
000175CC E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
000175D1 EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
000175D6 01                         @splash3:	dc.b 1
000175D7 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
000175DC                            		even
000175DC                            		even
000175DC                            
000175DC                            		include	"_incObj\Sonic AnglePos.asm"
000175DC                            ; ---------------------------------------------------------------------------
000175DC                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
000175DC                            ; ---------------------------------------------------------------------------
000175DC                            
000175DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000175DC                            
000175DC                            
000175DC                            Sonic_AnglePos:
000175DC 0828 0003 0022             		btst	#3,obStatus(a0)
000175E2 6700                       		beq.s	loc_14602
000175E4 7000                       		moveq	#0,d0
000175E6 11C0 F768                  		move.b	d0,($FFFFF768).w
000175EA 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000175EE 4E75                       		rts	
000175F0                            ; ===========================================================================
000175F0                            
000175F0                            loc_14602:
000175F0 7003                       		moveq	#3,d0
000175F2 11C0 F768                  		move.b	d0,($FFFFF768).w
000175F6 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000175FA 1028 0026                  		move.b	obAngle(a0),d0
000175FE 0600 0020                  		addi.b	#$20,d0
00017602 6A00                       		bpl.s	loc_14624
00017604 1028 0026                  		move.b	obAngle(a0),d0
00017608 6A00                       		bpl.s	loc_1461E
0001760A 5300                       		subq.b	#1,d0
0001760C                            
0001760C                            loc_1461E:
0001760C 0600 0020                  		addi.b	#$20,d0
00017610 6000                       		bra.s	loc_14630
00017612                            ; ===========================================================================
00017612                            
00017612                            loc_14624:
00017612 1028 0026                  		move.b	obAngle(a0),d0
00017616 6A00                       		bpl.s	loc_1462C
00017618 5200                       		addq.b	#1,d0
0001761A                            
0001761A                            loc_1462C:
0001761A 0600 001F                  		addi.b	#$1F,d0
0001761E                            
0001761E                            loc_14630:
0001761E 0200 00C0                  		andi.b	#$C0,d0
00017622 0C00 0040                  		cmpi.b	#$40,d0
00017626 6700 0000                  		beq.w	Sonic_WalkVertL
0001762A 0C00 0080                  		cmpi.b	#$80,d0
0001762E 6700 0000                  		beq.w	Sonic_WalkCeiling
00017632 0C00 00C0                  		cmpi.b	#$C0,d0
00017636 6700 0000                  		beq.w	Sonic_WalkVertR
0001763A 3428 000C                  		move.w	obY(a0),d2
0001763E 3628 0008                  		move.w	obX(a0),d3
00017642 7000                       		moveq	#0,d0
00017644 1028 0016                  		move.b	obHeight(a0),d0
00017648 4880                       		ext.w	d0
0001764A D440                       		add.w	d0,d2
0001764C 1028 0017                  		move.b	obWidth(a0),d0
00017650 4880                       		ext.w	d0
00017652 D640                       		add.w	d0,d3
00017654 49F8 F768                  		lea	($FFFFF768).w,a4
00017658 367C 0010                  		movea.w	#$10,a3
0001765C 3C3C 0000                  		move.w	#0,d6
00017660 7A0D                       		moveq	#$D,d5
00017662 6100 0000                  		bsr.w	FindFloor
00017666 3F01                       		move.w	d1,-(sp)
00017668 3428 000C                  		move.w	obY(a0),d2
0001766C 3628 0008                  		move.w	obX(a0),d3
00017670 7000                       		moveq	#0,d0
00017672 1028 0016                  		move.b	obHeight(a0),d0
00017676 4880                       		ext.w	d0
00017678 D440                       		add.w	d0,d2
0001767A 1028 0017                  		move.b	obWidth(a0),d0
0001767E 4880                       		ext.w	d0
00017680 4440                       		neg.w	d0
00017682 D640                       		add.w	d0,d3
00017684 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017688 367C 0010                  		movea.w	#$10,a3
0001768C 3C3C 0000                  		move.w	#0,d6
00017690 7A0D                       		moveq	#$D,d5
00017692 6100 0000                  		bsr.w	FindFloor
00017696 301F                       		move.w	(sp)+,d0
00017698 6100 0000                  		bsr.w	Sonic_Angle
0001769C 4A41                       		tst.w	d1
0001769E 6700                       		beq.s	locret_146BE
000176A0 6A00                       		bpl.s	loc_146C0
000176A2 0C41 FFF2                  		cmpi.w	#-$E,d1
000176A6 6D00                       		blt.s	locret_146E6
000176A8 D368 000C                  		add.w	d1,obY(a0)
000176AC                            
000176AC                            locret_146BE:
000176AC 4E75                       		rts	
000176AE                            ; ===========================================================================
000176AE                            
000176AE                            loc_146C0:
000176AE 0C41 000E                  		cmpi.w	#$E,d1
000176B2 6E00                       		bgt.s	loc_146CC
000176B4                            
000176B4                            loc_146C6:
000176B4 D368 000C                  		add.w	d1,obY(a0)
000176B8 4E75                       		rts	
000176BA                            ; ===========================================================================
000176BA                            
000176BA                            loc_146CC:
000176BA 4A28 0038                  		tst.b	$38(a0)
000176BE 66F4                       		bne.s	loc_146C6
000176C0 08E8 0001 0022             		bset	#1,obStatus(a0)
000176C6 08A8 0005 0022             		bclr	#5,obStatus(a0)
000176CC 117C 0001 001D             		move.b	#1,obNextAni(a0)
000176D2 4E75                       		rts	
000176D4                            ; ===========================================================================
000176D4                            
000176D4                            locret_146E6:
000176D4 4E75                       		rts	
000176D6                            ; End of function Sonic_AnglePos
000176D6                            
000176D6                            ; ===========================================================================
000176D6 2428 0008                  		move.l	obX(a0),d2
000176DA 3028 0010                  		move.w	obVelX(a0),d0
000176DE 48C0                       		ext.l	d0
000176E0 E180                       		asl.l	#8,d0
000176E2 9480                       		sub.l	d0,d2
000176E4 2142 0008                  		move.l	d2,obX(a0)
000176E8 303C 0038                  		move.w	#$38,d0
000176EC 48C0                       		ext.l	d0
000176EE E180                       		asl.l	#8,d0
000176F0 9680                       		sub.l	d0,d3
000176F2 2143 000C                  		move.l	d3,obY(a0)
000176F6 4E75                       		rts	
000176F8                            ; ===========================================================================
000176F8                            
000176F8                            locret_1470A:
000176F8 4E75                       		rts	
000176FA                            ; ===========================================================================
000176FA 2628 000C                  		move.l	obY(a0),d3
000176FE 3028 0012                  		move.w	obVelY(a0),d0
00017702 0440 0038                  		subi.w	#$38,d0
00017706 3140 0012                  		move.w	d0,obVelY(a0)
0001770A 48C0                       		ext.l	d0
0001770C E180                       		asl.l	#8,d0
0001770E 9680                       		sub.l	d0,d3
00017710 2143 000C                  		move.l	d3,obY(a0)
00017714 4E75                       		rts	
00017716 4E75                       		rts	
00017718                            ; ===========================================================================
00017718 2428 0008                  		move.l	obX(a0),d2
0001771C 2628 000C                  		move.l	obY(a0),d3
00017720 3028 0010                  		move.w	obVelX(a0),d0
00017724 48C0                       		ext.l	d0
00017726 E180                       		asl.l	#8,d0
00017728 9480                       		sub.l	d0,d2
0001772A 3028 0012                  		move.w	obVelY(a0),d0
0001772E 48C0                       		ext.l	d0
00017730 E180                       		asl.l	#8,d0
00017732 9680                       		sub.l	d0,d3
00017734 2142 0008                  		move.l	d2,obX(a0)
00017738 2143 000C                  		move.l	d3,obY(a0)
0001773C 4E75                       		rts	
0001773E                            
0001773E                            ; ---------------------------------------------------------------------------
0001773E                            ; Subroutine to	change Sonic's angle as he walks along the floor
0001773E                            ; ---------------------------------------------------------------------------
0001773E                            
0001773E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001773E                            
0001773E                            
0001773E                            Sonic_Angle:
0001773E 1438 F76A                  		move.b	($FFFFF76A).w,d2
00017742 B240                       		cmp.w	d0,d1
00017744 6F00                       		ble.s	loc_1475E
00017746 1438 F768                  		move.b	($FFFFF768).w,d2
0001774A 3200                       		move.w	d0,d1
0001774C                            
0001774C                            loc_1475E:
0001774C 0802 0000                  		btst	#0,d2
00017750 6600                       		bne.s	loc_1476A
00017752 1142 0026                  		move.b	d2,obAngle(a0)
00017756 4E75                       		rts	
00017758                            ; ===========================================================================
00017758                            
00017758                            loc_1476A:
00017758 1428 0026                  		move.b	obAngle(a0),d2
0001775C 0602 0020                  		addi.b	#$20,d2
00017760 0202 00C0                  		andi.b	#$C0,d2
00017764 1142 0026                  		move.b	d2,obAngle(a0)
00017768 4E75                       		rts	
0001776A                            ; End of function Sonic_Angle
0001776A                            
0001776A                            ; ---------------------------------------------------------------------------
0001776A                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
0001776A                            ; ---------------------------------------------------------------------------
0001776A                            
0001776A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001776A                            
0001776A                            
0001776A                            Sonic_WalkVertR:
0001776A 3428 000C                  		move.w	obY(a0),d2
0001776E 3628 0008                  		move.w	obX(a0),d3
00017772 7000                       		moveq	#0,d0
00017774 1028 0017                  		move.b	obWidth(a0),d0
00017778 4880                       		ext.w	d0
0001777A 4440                       		neg.w	d0
0001777C D440                       		add.w	d0,d2
0001777E 1028 0016                  		move.b	obHeight(a0),d0
00017782 4880                       		ext.w	d0
00017784 D640                       		add.w	d0,d3
00017786 49F8 F768                  		lea	($FFFFF768).w,a4
0001778A 367C 0010                  		movea.w	#$10,a3
0001778E 3C3C 0000                  		move.w	#0,d6
00017792 7A0D                       		moveq	#$D,d5
00017794 6100 0000                  		bsr.w	FindWall
00017798 3F01                       		move.w	d1,-(sp)
0001779A 3428 000C                  		move.w	obY(a0),d2
0001779E 3628 0008                  		move.w	obX(a0),d3
000177A2 7000                       		moveq	#0,d0
000177A4 1028 0017                  		move.b	obWidth(a0),d0
000177A8 4880                       		ext.w	d0
000177AA D440                       		add.w	d0,d2
000177AC 1028 0016                  		move.b	obHeight(a0),d0
000177B0 4880                       		ext.w	d0
000177B2 D640                       		add.w	d0,d3
000177B4 49F8 F76A                  		lea	($FFFFF76A).w,a4
000177B8 367C 0010                  		movea.w	#$10,a3
000177BC 3C3C 0000                  		move.w	#0,d6
000177C0 7A0D                       		moveq	#$D,d5
000177C2 6100 0000                  		bsr.w	FindWall
000177C6 301F                       		move.w	(sp)+,d0
000177C8 6100 FF74                  		bsr.w	Sonic_Angle
000177CC 4A41                       		tst.w	d1
000177CE 6700                       		beq.s	locret_147F0
000177D0 6A00                       		bpl.s	loc_147F2
000177D2 0C41 FFF2                  		cmpi.w	#-$E,d1
000177D6 6D00 FF20                  		blt.w	locret_1470A
000177DA D368 0008                  		add.w	d1,obX(a0)
000177DE                            
000177DE                            locret_147F0:
000177DE 4E75                       		rts	
000177E0                            ; ===========================================================================
000177E0                            
000177E0                            loc_147F2:
000177E0 0C41 000E                  		cmpi.w	#$E,d1
000177E4 6E00                       		bgt.s	loc_147FE
000177E6                            
000177E6                            loc_147F8:
000177E6 D368 0008                  		add.w	d1,obX(a0)
000177EA 4E75                       		rts	
000177EC                            ; ===========================================================================
000177EC                            
000177EC                            loc_147FE:
000177EC 4A28 0038                  		tst.b	$38(a0)
000177F0 66F4                       		bne.s	loc_147F8
000177F2 08E8 0001 0022             		bset	#1,obStatus(a0)
000177F8 08A8 0005 0022             		bclr	#5,obStatus(a0)
000177FE 117C 0001 001D             		move.b	#1,obNextAni(a0)
00017804 4E75                       		rts	
00017806                            ; End of function Sonic_WalkVertR
00017806                            
00017806                            ; ---------------------------------------------------------------------------
00017806                            ; Subroutine allowing Sonic to walk upside-down
00017806                            ; ---------------------------------------------------------------------------
00017806                            
00017806                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017806                            
00017806                            
00017806                            Sonic_WalkCeiling:
00017806 3428 000C                  		move.w	obY(a0),d2
0001780A 3628 0008                  		move.w	obX(a0),d3
0001780E 7000                       		moveq	#0,d0
00017810 1028 0016                  		move.b	obHeight(a0),d0
00017814 4880                       		ext.w	d0
00017816 9440                       		sub.w	d0,d2
00017818 0A42 000F                  		eori.w	#$F,d2
0001781C 1028 0017                  		move.b	obWidth(a0),d0
00017820 4880                       		ext.w	d0
00017822 D640                       		add.w	d0,d3
00017824 49F8 F768                  		lea	($FFFFF768).w,a4
00017828 367C FFF0                  		movea.w	#-$10,a3
0001782C 3C3C 1000                  		move.w	#$1000,d6
00017830 7A0D                       		moveq	#$D,d5
00017832 6100 0000                  		bsr.w	FindFloor
00017836 3F01                       		move.w	d1,-(sp)
00017838 3428 000C                  		move.w	obY(a0),d2
0001783C 3628 0008                  		move.w	obX(a0),d3
00017840 7000                       		moveq	#0,d0
00017842 1028 0016                  		move.b	obHeight(a0),d0
00017846 4880                       		ext.w	d0
00017848 9440                       		sub.w	d0,d2
0001784A 0A42 000F                  		eori.w	#$F,d2
0001784E 1028 0017                  		move.b	obWidth(a0),d0
00017852 4880                       		ext.w	d0
00017854 9640                       		sub.w	d0,d3
00017856 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001785A 367C FFF0                  		movea.w	#-$10,a3
0001785E 3C3C 1000                  		move.w	#$1000,d6
00017862 7A0D                       		moveq	#$D,d5
00017864 6100 0000                  		bsr.w	FindFloor
00017868 301F                       		move.w	(sp)+,d0
0001786A 6100 FED2                  		bsr.w	Sonic_Angle
0001786E 4A41                       		tst.w	d1
00017870 6700                       		beq.s	locret_14892
00017872 6A00                       		bpl.s	loc_14894
00017874 0C41 FFF2                  		cmpi.w	#-$E,d1
00017878 6D00 FE5A                  		blt.w	locret_146E6
0001787C 9368 000C                  		sub.w	d1,obY(a0)
00017880                            
00017880                            locret_14892:
00017880 4E75                       		rts	
00017882                            ; ===========================================================================
00017882                            
00017882                            loc_14894:
00017882 0C41 000E                  		cmpi.w	#$E,d1
00017886 6E00                       		bgt.s	loc_148A0
00017888                            
00017888                            loc_1489A:
00017888 9368 000C                  		sub.w	d1,obY(a0)
0001788C 4E75                       		rts	
0001788E                            ; ===========================================================================
0001788E                            
0001788E                            loc_148A0:
0001788E 4A28 0038                  		tst.b	$38(a0)
00017892 66F4                       		bne.s	loc_1489A
00017894 08E8 0001 0022             		bset	#1,obStatus(a0)
0001789A 08A8 0005 0022             		bclr	#5,obStatus(a0)
000178A0 117C 0001 001D             		move.b	#1,obNextAni(a0)
000178A6 4E75                       		rts	
000178A8                            ; End of function Sonic_WalkCeiling
000178A8                            
000178A8                            ; ---------------------------------------------------------------------------
000178A8                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
000178A8                            ; ---------------------------------------------------------------------------
000178A8                            
000178A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000178A8                            
000178A8                            
000178A8                            Sonic_WalkVertL:
000178A8 3428 000C                  		move.w	obY(a0),d2
000178AC 3628 0008                  		move.w	obX(a0),d3
000178B0 7000                       		moveq	#0,d0
000178B2 1028 0017                  		move.b	obWidth(a0),d0
000178B6 4880                       		ext.w	d0
000178B8 9440                       		sub.w	d0,d2
000178BA 1028 0016                  		move.b	obHeight(a0),d0
000178BE 4880                       		ext.w	d0
000178C0 9640                       		sub.w	d0,d3
000178C2 0A43 000F                  		eori.w	#$F,d3
000178C6 49F8 F768                  		lea	($FFFFF768).w,a4
000178CA 367C FFF0                  		movea.w	#-$10,a3
000178CE 3C3C 0800                  		move.w	#$800,d6
000178D2 7A0D                       		moveq	#$D,d5
000178D4 6100 0000                  		bsr.w	FindWall
000178D8 3F01                       		move.w	d1,-(sp)
000178DA 3428 000C                  		move.w	obY(a0),d2
000178DE 3628 0008                  		move.w	obX(a0),d3
000178E2 7000                       		moveq	#0,d0
000178E4 1028 0017                  		move.b	obWidth(a0),d0
000178E8 4880                       		ext.w	d0
000178EA D440                       		add.w	d0,d2
000178EC 1028 0016                  		move.b	obHeight(a0),d0
000178F0 4880                       		ext.w	d0
000178F2 9640                       		sub.w	d0,d3
000178F4 0A43 000F                  		eori.w	#$F,d3
000178F8 49F8 F76A                  		lea	($FFFFF76A).w,a4
000178FC 367C FFF0                  		movea.w	#-$10,a3
00017900 3C3C 0800                  		move.w	#$800,d6
00017904 7A0D                       		moveq	#$D,d5
00017906 6100 0000                  		bsr.w	FindWall
0001790A 301F                       		move.w	(sp)+,d0
0001790C 6100 FE30                  		bsr.w	Sonic_Angle
00017910 4A41                       		tst.w	d1
00017912 6700                       		beq.s	locret_14934
00017914 6A00                       		bpl.s	loc_14936
00017916 0C41 FFF2                  		cmpi.w	#-$E,d1
0001791A 6D00 FDDC                  		blt.w	locret_1470A
0001791E 9368 0008                  		sub.w	d1,obX(a0)
00017922                            
00017922                            locret_14934:
00017922 4E75                       		rts	
00017924                            ; ===========================================================================
00017924                            
00017924                            loc_14936:
00017924 0C41 000E                  		cmpi.w	#$E,d1
00017928 6E00                       		bgt.s	loc_14942
0001792A                            
0001792A                            loc_1493C:
0001792A 9368 0008                  		sub.w	d1,obX(a0)
0001792E 4E75                       		rts	
00017930                            ; ===========================================================================
00017930                            
00017930                            loc_14942:
00017930 4A28 0038                  		tst.b	$38(a0)
00017934 66F4                       		bne.s	loc_1493C
00017936 08E8 0001 0022             		bset	#1,obStatus(a0)
0001793C 08A8 0005 0022             		bclr	#5,obStatus(a0)
00017942 117C 0001 001D             		move.b	#1,obNextAni(a0)
00017948 4E75                       		rts	
0001794A                            ; End of function Sonic_WalkVertL
0001794A                            ; End of function Sonic_WalkVertL
0001794A                            
0001794A                            		include	"_incObj\sub FindNearestTile.asm"
0001794A                            ; ---------------------------------------------------------------------------
0001794A                            ; Subroutine to	find which tile	the object is standing on
0001794A                            
0001794A                            ; input:
0001794A                            ;	d2 = y-position of object's bottom edge
0001794A                            ;	d3 = x-position of object
0001794A                            
0001794A                            ; output:
0001794A                            ;	a1 = address within 256x256 mappings where object is standing
0001794A                            ;	     (refers to a 16x16 tile number)
0001794A                            ; ---------------------------------------------------------------------------
0001794A                            
0001794A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001794A                            
0001794A                            
0001794A                            FindNearestTile:
0001794A 3002                       		move.w	d2,d0		; get y-pos. of bottom edge of object
0001794C E248                       		lsr.w	#1,d0
0001794E 0240 0380                  		andi.w	#$380,d0
00017952 3203                       		move.w	d3,d1		; get x-pos. of object
00017954 E049                       		lsr.w	#8,d1
00017956 0241 007F                  		andi.w	#$7F,d1
0001795A D041                       		add.w	d1,d0		; combine
0001795C 72FF                       		moveq	#-1,d1
0001795E 43F8 A400                  		lea	(v_lvllayout).w,a1
00017962 1231 0000                  		move.b	(a1,d0.w),d1	; get 256x256 tile number
00017966 6700                       		beq.s	@blanktile	; branch if 0
00017968 6B00                       		bmi.s	@specialtile	; branch if >$7F
0001796A 5301                       		subq.b	#1,d1
0001796C 4881                       		ext.w	d1
0001796E EE59                       		ror.w	#7,d1
00017970 3002                       		move.w	d2,d0
00017972 D040                       		add.w	d0,d0
00017974 0240 01E0                  		andi.w	#$1E0,d0
00017978 D240                       		add.w	d0,d1
0001797A 3003                       		move.w	d3,d0
0001797C E648                       		lsr.w	#3,d0
0001797E 0240 001E                  		andi.w	#$1E,d0
00017982 D240                       		add.w	d0,d1
00017984                            
00017984                            @blanktile:
00017984 2241                       		movea.l	d1,a1
00017986 4E75                       		rts	
00017988                            ; ===========================================================================
00017988                            
00017988                            @specialtile:
00017988 0241 007F                  		andi.w	#$7F,d1
0001798C 0828 0006 0001             		btst	#6,obRender(a0) ; is object "behind a loop"?
00017992 6700                       		beq.s	@treatasnormal	; if not, branch
00017994 5241                       		addq.w	#1,d1
00017996 0C41 0029                  		cmpi.w	#$29,d1
0001799A 6600                       		bne.s	@treatasnormal
0001799C 323C 0051                  		move.w	#$51,d1
000179A0                            
000179A0                            	@treatasnormal:
000179A0 5301                       		subq.b	#1,d1
000179A2 EE59                       		ror.w	#7,d1
000179A4 3002                       		move.w	d2,d0
000179A6 D040                       		add.w	d0,d0
000179A8 0240 01E0                  		andi.w	#$1E0,d0
000179AC D240                       		add.w	d0,d1
000179AE 3003                       		move.w	d3,d0
000179B0 E648                       		lsr.w	#3,d0
000179B2 0240 001E                  		andi.w	#$1E,d0
000179B6 D240                       		add.w	d0,d1
000179B8 2241                       		movea.l	d1,a1
000179BA 4E75                       		rts	
000179BC                            ; End of function FindNearestTile
000179BC                            ; End of function FindNearestTile
000179BC                            		include	"_incObj\sub FindFloor.asm"
000179BC                            ; ---------------------------------------------------------------------------
000179BC                            ; Subroutine to	find the floor
000179BC                            
000179BC                            ; input:
000179BC                            ;	d2 = y-position of object's bottom edge
000179BC                            ;	d3 = x-position of object
000179BC                            ;	d5 = bit to test for solidness
000179BC                            
000179BC                            ; output:
000179BC                            ;	d1 = distance to the floor
000179BC                            ;	a1 = address within 256x256 mappings where object is standing
000179BC                            ;	     (refers to a 16x16 tile number)
000179BC                            ;	(a4) = floor angle
000179BC                            ; ---------------------------------------------------------------------------
000179BC                            
000179BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000179BC                            
000179BC                            
000179BC                            FindFloor:
000179BC 618C                       		bsr.s	FindNearestTile
000179BE 3011                       		move.w	(a1),d0		; get value for solidness, orientation and 16x16 tile number
000179C0 3800                       		move.w	d0,d4
000179C2 0240 07FF                  		andi.w	#$7FF,d0
000179C6 6700                       		beq.s	@isblank	; branch if tile is blank
000179C8 0B04                       		btst	d5,d4		; is the tile solid?
000179CA 6600                       		bne.s	@issolid	; if yes, branch
000179CC                            
000179CC                            @isblank:
000179CC D44B                       		add.w	a3,d2
000179CE 6100 0000                  		bsr.w	FindFloor2	; try tile below the nearest
000179D2 944B                       		sub.w	a3,d2
000179D4 0641 0010                  		addi.w	#$10,d1		; return distance to floor
000179D8 4E75                       		rts	
000179DA                            ; ===========================================================================
000179DA                            
000179DA                            @issolid:
000179DA 2478 F796                  		movea.l	(v_collindex).w,a2
000179DE 1032 0000                  		move.b	(a2,d0.w),d0	; get collision block number
000179E2 0240 00FF                  		andi.w	#$FF,d0
000179E6 67E4                       		beq.s	@isblank	; branch if 0
000179E8 45F9 0000 0000             		lea	(AngleMap).l,a2
000179EE 18B2 0000                  		move.b	(a2,d0.w),(a4)	; get collision angle value
000179F2 E948                       		lsl.w	#4,d0
000179F4 3203                       		move.w	d3,d1		; get x-pos. of object
000179F6 0804 000B                  		btst	#$B,d4		; is block flipped horizontally?
000179FA 6700                       		beq.s	@noflip		; if not, branch
000179FC 4641                       		not.w	d1
000179FE 4414                       		neg.b	(a4)
00017A00                            
00017A00                            	@noflip:
00017A00 0804 000C                  		btst	#$C,d4		; is block flipped vertically?
00017A04 6700                       		beq.s	@noflip2	; if not, branch
00017A06 0614 0040                  		addi.b	#$40,(a4)
00017A0A 4414                       		neg.b	(a4)
00017A0C 0414 0040                  		subi.b	#$40,(a4)
00017A10                            
00017A10                            	@noflip2:
00017A10 0241 000F                  		andi.w	#$F,d1
00017A14 D240                       		add.w	d0,d1		; (block num. * $10) + x-pos. = place in array
00017A16 45F9 0000 0000             		lea	(CollArray1).l,a2
00017A1C 1032 1000                  		move.b	(a2,d1.w),d0	; get collision height
00017A20 4880                       		ext.w	d0
00017A22 BD44                       		eor.w	d6,d4
00017A24 0804 000C                  		btst	#$C,d4		; is block flipped vertically?
00017A28 6700                       		beq.s	@noflip3	; if not, branch
00017A2A 4440                       		neg.w	d0
00017A2C                            
00017A2C                            	@noflip3:
00017A2C 4A40                       		tst.w	d0
00017A2E 679C                       		beq.s	@isblank	; branch if height is 0
00017A30 6B00                       		bmi.s	@negfloor	; branch if height is negative
00017A32 0C00 0010                  		cmpi.b	#$10,d0
00017A36 6700                       		beq.s	@maxfloor	; branch if height is $10 (max)
00017A38 3202                       		move.w	d2,d1		; get y-pos. of object
00017A3A 0241 000F                  		andi.w	#$F,d1
00017A3E D041                       		add.w	d1,d0
00017A40 323C 000F                  		move.w	#$F,d1
00017A44 9240                       		sub.w	d0,d1		; return distance to floor
00017A46 4E75                       		rts	
00017A48                            ; ===========================================================================
00017A48                            
00017A48                            @negfloor:
00017A48 3202                       		move.w	d2,d1
00017A4A 0241 000F                  		andi.w	#$F,d1
00017A4E D041                       		add.w	d1,d0
00017A50 6A00 FF7A                  		bpl.w	@isblank
00017A54                            
00017A54                            @maxfloor:
00017A54 944B                       		sub.w	a3,d2
00017A56 6100 0000                  		bsr.w	FindFloor2	; try tile above the nearest
00017A5A D44B                       		add.w	a3,d2
00017A5C 0441 0010                  		subi.w	#$10,d1		; return distance to floor
00017A60 4E75                       		rts	
00017A62                            ; End of function FindFloor
00017A62                            
00017A62                            
00017A62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017A62                            
00017A62                            
00017A62                            FindFloor2:
00017A62 6100 FEE6                  		bsr.w	FindNearestTile
00017A66 3011                       		move.w	(a1),d0
00017A68 3800                       		move.w	d0,d4
00017A6A 0240 07FF                  		andi.w	#$7FF,d0
00017A6E 6700                       		beq.s	@isblank2
00017A70 0B04                       		btst	d5,d4
00017A72 6600                       		bne.s	@issolid
00017A74                            
00017A74                            @isblank2:
00017A74 323C 000F                  		move.w	#$F,d1
00017A78 3002                       		move.w	d2,d0
00017A7A 0240 000F                  		andi.w	#$F,d0
00017A7E 9240                       		sub.w	d0,d1
00017A80 4E75                       		rts	
00017A82                            ; ===========================================================================
00017A82                            
00017A82                            @issolid:
00017A82 2478 F796                  		movea.l	(v_collindex).w,a2
00017A86 1032 0000                  		move.b	(a2,d0.w),d0
00017A8A 0240 00FF                  		andi.w	#$FF,d0
00017A8E 67E4                       		beq.s	@isblank2
00017A90 45F9 0000 0000             		lea	(AngleMap).l,a2
00017A96 18B2 0000                  		move.b	(a2,d0.w),(a4)
00017A9A E948                       		lsl.w	#4,d0
00017A9C 3203                       		move.w	d3,d1
00017A9E 0804 000B                  		btst	#$B,d4
00017AA2 6700                       		beq.s	@noflip
00017AA4 4641                       		not.w	d1
00017AA6 4414                       		neg.b	(a4)
00017AA8                            
00017AA8                            	@noflip:
00017AA8 0804 000C                  		btst	#$C,d4
00017AAC 6700                       		beq.s	@noflip2
00017AAE 0614 0040                  		addi.b	#$40,(a4)
00017AB2 4414                       		neg.b	(a4)
00017AB4 0414 0040                  		subi.b	#$40,(a4)
00017AB8                            
00017AB8                            	@noflip2:
00017AB8 0241 000F                  		andi.w	#$F,d1
00017ABC D240                       		add.w	d0,d1
00017ABE 45F9 0000 0000             		lea	(CollArray1).l,a2
00017AC4 1032 1000                  		move.b	(a2,d1.w),d0
00017AC8 4880                       		ext.w	d0
00017ACA BD44                       		eor.w	d6,d4
00017ACC 0804 000C                  		btst	#$C,d4
00017AD0 6700                       		beq.s	@noflip3
00017AD2 4440                       		neg.w	d0
00017AD4                            
00017AD4                            	@noflip3:
00017AD4 4A40                       		tst.w	d0
00017AD6 679C                       		beq.s	@isblank2
00017AD8 6B00                       		bmi.s	@negfloor
00017ADA 3202                       		move.w	d2,d1
00017ADC 0241 000F                  		andi.w	#$F,d1
00017AE0 D041                       		add.w	d1,d0
00017AE2 323C 000F                  		move.w	#$F,d1
00017AE6 9240                       		sub.w	d0,d1
00017AE8 4E75                       		rts	
00017AEA                            ; ===========================================================================
00017AEA                            
00017AEA                            @negfloor:
00017AEA 3202                       		move.w	d2,d1
00017AEC 0241 000F                  		andi.w	#$F,d1
00017AF0 D041                       		add.w	d1,d0
00017AF2 6A00 FF80                  		bpl.w	@isblank2
00017AF6 4641                       		not.w	d1
00017AF8 4E75                       		rts	
00017AFA                            ; End of function FindFloor2
00017AFA                            ; End of function FindFloor2
00017AFA                            		include	"_incObj\sub FindWall.asm"
00017AFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017AFA                            
00017AFA                            
00017AFA                            FindWall:
00017AFA 6100 FE4E                  		bsr.w	FindNearestTile
00017AFE 3011                       		move.w	(a1),d0
00017B00 3800                       		move.w	d0,d4
00017B02 0240 07FF                  		andi.w	#$7FF,d0
00017B06 6700                       		beq.s	loc_14B1E
00017B08 0B04                       		btst	d5,d4
00017B0A 6600                       		bne.s	loc_14B2C
00017B0C                            
00017B0C                            loc_14B1E:
00017B0C D64B                       		add.w	a3,d3
00017B0E 6100 0000                  		bsr.w	FindWall2
00017B12 964B                       		sub.w	a3,d3
00017B14 0641 0010                  		addi.w	#$10,d1
00017B18 4E75                       		rts	
00017B1A                            ; ===========================================================================
00017B1A                            
00017B1A                            loc_14B2C:
00017B1A 2478 F796                  		movea.l	(v_collindex).w,a2
00017B1E 1032 0000                  		move.b	(a2,d0.w),d0
00017B22 0240 00FF                  		andi.w	#$FF,d0
00017B26 67E4                       		beq.s	loc_14B1E
00017B28 45F9 0000 0000             		lea	(AngleMap).l,a2
00017B2E 18B2 0000                  		move.b	(a2,d0.w),(a4)
00017B32 E948                       		lsl.w	#4,d0
00017B34 3202                       		move.w	d2,d1
00017B36 0804 000C                  		btst	#$C,d4
00017B3A 6700                       		beq.s	loc_14B5A
00017B3C 4641                       		not.w	d1
00017B3E 0614 0040                  		addi.b	#$40,(a4)
00017B42 4414                       		neg.b	(a4)
00017B44 0414 0040                  		subi.b	#$40,(a4)
00017B48                            
00017B48                            loc_14B5A:
00017B48 0804 000B                  		btst	#$B,d4
00017B4C 6700                       		beq.s	loc_14B62
00017B4E 4414                       		neg.b	(a4)
00017B50                            
00017B50                            loc_14B62:
00017B50 0241 000F                  		andi.w	#$F,d1
00017B54 D240                       		add.w	d0,d1
00017B56 45F9 0000 0000             		lea	(CollArray2).l,a2
00017B5C 1032 1000                  		move.b	(a2,d1.w),d0
00017B60 4880                       		ext.w	d0
00017B62 BD44                       		eor.w	d6,d4
00017B64 0804 000B                  		btst	#$B,d4
00017B68 6700                       		beq.s	loc_14B7E
00017B6A 4440                       		neg.w	d0
00017B6C                            
00017B6C                            loc_14B7E:
00017B6C 4A40                       		tst.w	d0
00017B6E 679C                       		beq.s	loc_14B1E
00017B70 6B00                       		bmi.s	loc_14B9A
00017B72 0C00 0010                  		cmpi.b	#$10,d0
00017B76 6700                       		beq.s	loc_14BA6
00017B78 3203                       		move.w	d3,d1
00017B7A 0241 000F                  		andi.w	#$F,d1
00017B7E D041                       		add.w	d1,d0
00017B80 323C 000F                  		move.w	#$F,d1
00017B84 9240                       		sub.w	d0,d1
00017B86 4E75                       		rts	
00017B88                            ; ===========================================================================
00017B88                            
00017B88                            loc_14B9A:
00017B88 3203                       		move.w	d3,d1
00017B8A 0241 000F                  		andi.w	#$F,d1
00017B8E D041                       		add.w	d1,d0
00017B90 6A00 FF7A                  		bpl.w	loc_14B1E
00017B94                            
00017B94                            loc_14BA6:
00017B94 964B                       		sub.w	a3,d3
00017B96 6100 0000                  		bsr.w	FindWall2
00017B9A D64B                       		add.w	a3,d3
00017B9C 0441 0010                  		subi.w	#$10,d1
00017BA0 4E75                       		rts	
00017BA2                            ; End of function FindWall
00017BA2                            
00017BA2                            
00017BA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017BA2                            
00017BA2                            
00017BA2                            FindWall2:
00017BA2 6100 FDA6                  		bsr.w	FindNearestTile
00017BA6 3011                       		move.w	(a1),d0
00017BA8 3800                       		move.w	d0,d4
00017BAA 0240 07FF                  		andi.w	#$7FF,d0
00017BAE 6700                       		beq.s	loc_14BC6
00017BB0 0B04                       		btst	d5,d4
00017BB2 6600                       		bne.s	loc_14BD4
00017BB4                            
00017BB4                            loc_14BC6:
00017BB4 323C 000F                  		move.w	#$F,d1
00017BB8 3003                       		move.w	d3,d0
00017BBA 0240 000F                  		andi.w	#$F,d0
00017BBE 9240                       		sub.w	d0,d1
00017BC0 4E75                       		rts	
00017BC2                            ; ===========================================================================
00017BC2                            
00017BC2                            loc_14BD4:
00017BC2 2478 F796                  		movea.l	(v_collindex).w,a2
00017BC6 1032 0000                  		move.b	(a2,d0.w),d0
00017BCA 0240 00FF                  		andi.w	#$FF,d0
00017BCE 67E4                       		beq.s	loc_14BC6
00017BD0 45F9 0000 0000             		lea	(AngleMap).l,a2
00017BD6 18B2 0000                  		move.b	(a2,d0.w),(a4)
00017BDA E948                       		lsl.w	#4,d0
00017BDC 3202                       		move.w	d2,d1
00017BDE 0804 000C                  		btst	#$C,d4
00017BE2 6700                       		beq.s	loc_14C02
00017BE4 4641                       		not.w	d1
00017BE6 0614 0040                  		addi.b	#$40,(a4)
00017BEA 4414                       		neg.b	(a4)
00017BEC 0414 0040                  		subi.b	#$40,(a4)
00017BF0                            
00017BF0                            loc_14C02:
00017BF0 0804 000B                  		btst	#$B,d4
00017BF4 6700                       		beq.s	loc_14C0A
00017BF6 4414                       		neg.b	(a4)
00017BF8                            
00017BF8                            loc_14C0A:
00017BF8 0241 000F                  		andi.w	#$F,d1
00017BFC D240                       		add.w	d0,d1
00017BFE 45F9 0000 0000             		lea	(CollArray2).l,a2
00017C04 1032 1000                  		move.b	(a2,d1.w),d0
00017C08 4880                       		ext.w	d0
00017C0A BD44                       		eor.w	d6,d4
00017C0C 0804 000B                  		btst	#$B,d4
00017C10 6700                       		beq.s	loc_14C26
00017C12 4440                       		neg.w	d0
00017C14                            
00017C14                            loc_14C26:
00017C14 4A40                       		tst.w	d0
00017C16 679C                       		beq.s	loc_14BC6
00017C18 6B00                       		bmi.s	loc_14C3C
00017C1A 3203                       		move.w	d3,d1
00017C1C 0241 000F                  		andi.w	#$F,d1
00017C20 D041                       		add.w	d1,d0
00017C22 323C 000F                  		move.w	#$F,d1
00017C26 9240                       		sub.w	d0,d1
00017C28 4E75                       		rts	
00017C2A                            ; ===========================================================================
00017C2A                            
00017C2A                            loc_14C3C:
00017C2A 3203                       		move.w	d3,d1
00017C2C 0241 000F                  		andi.w	#$F,d1
00017C30 D041                       		add.w	d1,d0
00017C32 6A00 FF80                  		bpl.w	loc_14BC6
00017C36 4641                       		not.w	d1
00017C38 4E75                       		rts	
00017C3A                            ; End of function FindWall2
00017C3A                            ; End of function FindWall2
00017C3A                            
00017C3A                            ; ---------------------------------------------------------------------------
00017C3A                            ; Unused floor/wall subroutine - logs something	to do with collision
00017C3A                            ; ---------------------------------------------------------------------------
00017C3A                            
00017C3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017C3A                            
00017C3A                            
00017C3A                            FloorLog_Unk:
00017C3A 4E75                       		rts	
00017C3C                            
00017C3C 43F9 0000 0000             		lea	(CollArray1).l,a1
00017C42 45F9 0000 0000             		lea	(CollArray1).l,a2
00017C48 363C 00FF                  		move.w	#$FF,d3
00017C4C                            
00017C4C                            loc_14C5E:
00017C4C 7A10                       		moveq	#$10,d5
00017C4E 343C 000F                  		move.w	#$F,d2
00017C52                            
00017C52                            loc_14C64:
00017C52 7800                       		moveq	#0,d4
00017C54 323C 000F                  		move.w	#$F,d1
00017C58                            
00017C58                            loc_14C6A:
00017C58 3019                       		move.w	(a1)+,d0
00017C5A EAA8                       		lsr.l	d5,d0
00017C5C D944                       		addx.w	d4,d4
00017C5E 51C9 FFF8                  		dbf	d1,loc_14C6A
00017C62                            
00017C62 34C4                       		move.w	d4,(a2)+
00017C64 92FC 0020                  		suba.w	#$20,a1
00017C68 5345                       		subq.w	#1,d5
00017C6A 51CA FFE6                  		dbf	d2,loc_14C64
00017C6E                            
00017C6E D2FC 0020                  		adda.w	#$20,a1
00017C72 51CB FFD8                  		dbf	d3,loc_14C5E
00017C76                            
00017C76 43F9 0000 0000             		lea	(CollArray1).l,a1
00017C7C 45F9 0000 0000             		lea	(CollArray2).l,a2
00017C82 6100                       		bsr.s	FloorLog_Unk2
00017C84 43F9 0000 0000             		lea	(CollArray1).l,a1
00017C8A 45F9 0000 0000             		lea	(CollArray1).l,a2
00017C90                            
00017C90                            ; End of function FloorLog_Unk
00017C90                            
00017C90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017C90                            
00017C90                            
00017C90                            FloorLog_Unk2:
00017C90 363C 0FFF                  		move.w	#$FFF,d3
00017C94                            
00017C94                            loc_14CA6:
00017C94 7400                       		moveq	#0,d2
00017C96 323C 000F                  		move.w	#$F,d1
00017C9A 3019                       		move.w	(a1)+,d0
00017C9C 6700                       		beq.s	loc_14CD4
00017C9E 6B00                       		bmi.s	loc_14CBE
00017CA0                            
00017CA0                            loc_14CB2:
00017CA0 E248                       		lsr.w	#1,d0
00017CA2 6400                       		bhs.s	loc_14CB8
00017CA4 5202                       		addq.b	#1,d2
00017CA6                            
00017CA6                            loc_14CB8:
00017CA6 51C9 FFF8                  		dbf	d1,loc_14CB2
00017CAA                            
00017CAA 6000                       		bra.s	loc_14CD6
00017CAC                            ; ===========================================================================
00017CAC                            
00017CAC                            loc_14CBE:
00017CAC 0C40 FFFF                  		cmpi.w	#-1,d0
00017CB0 6700                       		beq.s	loc_14CD0
00017CB2                            
00017CB2                            loc_14CC4:
00017CB2 E348                       		lsl.w	#1,d0
00017CB4 6400                       		bhs.s	loc_14CCA
00017CB6 5302                       		subq.b	#1,d2
00017CB8                            
00017CB8                            loc_14CCA:
00017CB8 51C9 FFF8                  		dbf	d1,loc_14CC4
00017CBC                            
00017CBC 6000                       		bra.s	loc_14CD6
00017CBE                            ; ===========================================================================
00017CBE                            
00017CBE                            loc_14CD0:
00017CBE 303C 0010                  		move.w	#$10,d0
00017CC2                            
00017CC2                            loc_14CD4:
00017CC2 3400                       		move.w	d0,d2
00017CC4                            
00017CC4                            loc_14CD6:
00017CC4 14C2                       		move.b	d2,(a2)+
00017CC6 51CB FFCC                  		dbf	d3,loc_14CA6
00017CCA                            
00017CCA 4E75                       		rts	
00017CCC                            
00017CCC                            ; End of function FloorLog_Unk2
00017CCC                            
00017CCC                            
00017CCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017CCC                            
00017CCC                            
00017CCC                            Sonic_WalkSpeed:
00017CCC 2628 0008                  		move.l	obX(a0),d3
00017CD0 2428 000C                  		move.l	obY(a0),d2
00017CD4 3228 0010                  		move.w	obVelX(a0),d1
00017CD8 48C1                       		ext.l	d1
00017CDA E181                       		asl.l	#8,d1
00017CDC D681                       		add.l	d1,d3
00017CDE 3228 0012                  		move.w	obVelY(a0),d1
00017CE2 48C1                       		ext.l	d1
00017CE4 E181                       		asl.l	#8,d1
00017CE6 D481                       		add.l	d1,d2
00017CE8 4842                       		swap	d2
00017CEA 4843                       		swap	d3
00017CEC 11C0 F768                  		move.b	d0,(v_anglebuffer).w
00017CF0 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00017CF4 1200                       		move.b	d0,d1
00017CF6 0600 0020                  		addi.b	#$20,d0
00017CFA 6A00                       		bpl.s	loc_14D1A
00017CFC 1001                       		move.b	d1,d0
00017CFE 6A00                       		bpl.s	loc_14D14
00017D00 5300                       		subq.b	#1,d0
00017D02                            
00017D02                            loc_14D14:
00017D02 0600 0020                  		addi.b	#$20,d0
00017D06 6000                       		bra.s	loc_14D24
00017D08                            ; ===========================================================================
00017D08                            
00017D08                            loc_14D1A:
00017D08 1001                       		move.b	d1,d0
00017D0A 6A00                       		bpl.s	loc_14D20
00017D0C 5200                       		addq.b	#1,d0
00017D0E                            
00017D0E                            loc_14D20:
00017D0E 0600 001F                  		addi.b	#$1F,d0
00017D12                            
00017D12                            loc_14D24:
00017D12 0200 00C0                  		andi.b	#$C0,d0
00017D16 6700 0000                  		beq.w	loc_14DF0
00017D1A 0C00 0080                  		cmpi.b	#$80,d0
00017D1E 6700 0000                  		beq.w	loc_14F7C
00017D22 0201 0038                  		andi.b	#$38,d1
00017D26 6600                       		bne.s	loc_14D3C
00017D28 5042                       		addq.w	#8,d2
00017D2A                            
00017D2A                            loc_14D3C:
00017D2A 0C00 0040                  		cmpi.b	#$40,d0
00017D2E 6700 0000                  		beq.w	loc_1504A
00017D32 6000 0000                  		bra.w	loc_14EBC
00017D36                            
00017D36                            ; End of function Sonic_WalkSpeed
00017D36                            
00017D36                            
00017D36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017D36                            
00017D36                            
00017D36                            sub_14D48:
00017D36 11C0 F768                  		move.b	d0,(v_anglebuffer).w
00017D3A 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00017D3E 0600 0020                  		addi.b	#$20,d0
00017D42 0200 00C0                  		andi.b	#$C0,d0
00017D46 0C00 0040                  		cmpi.b	#$40,d0
00017D4A 6700 0000                  		beq.w	loc_14FD6
00017D4E 0C00 0080                  		cmpi.b	#$80,d0
00017D52 6700 0000                  		beq.w	Sonic_DontRunOnWalls
00017D56 0C00 00C0                  		cmpi.b	#$C0,d0
00017D5A 6700 0000                  		beq.w	sub_14E50
00017D5E                            
00017D5E                            ; End of function sub_14D48
00017D5E                            
00017D5E                            ; ---------------------------------------------------------------------------
00017D5E                            ; Subroutine to	make Sonic land	on the floor after jumping
00017D5E                            ; ---------------------------------------------------------------------------
00017D5E                            
00017D5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017D5E                            
00017D5E                            
00017D5E                            Sonic_HitFloor:
00017D5E 3428 000C                  		move.w	obY(a0),d2
00017D62 3628 0008                  		move.w	obX(a0),d3
00017D66 7000                       		moveq	#0,d0
00017D68 1028 0016                  		move.b	obHeight(a0),d0
00017D6C 4880                       		ext.w	d0
00017D6E D440                       		add.w	d0,d2
00017D70 1028 0017                  		move.b	obWidth(a0),d0
00017D74 4880                       		ext.w	d0
00017D76 D640                       		add.w	d0,d3
00017D78 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017D7C 367C 0010                  		movea.w	#$10,a3
00017D80 3C3C 0000                  		move.w	#0,d6
00017D84 7A0D                       		moveq	#$D,d5
00017D86 6100 FC34                  		bsr.w	FindFloor
00017D8A 3F01                       		move.w	d1,-(sp)
00017D8C 3428 000C                  		move.w	obY(a0),d2
00017D90 3628 0008                  		move.w	obX(a0),d3
00017D94 7000                       		moveq	#0,d0
00017D96 1028 0016                  		move.b	obHeight(a0),d0
00017D9A 4880                       		ext.w	d0
00017D9C D440                       		add.w	d0,d2
00017D9E 1028 0017                  		move.b	obWidth(a0),d0
00017DA2 4880                       		ext.w	d0
00017DA4 9640                       		sub.w	d0,d3
00017DA6 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017DAA 367C 0010                  		movea.w	#$10,a3
00017DAE 3C3C 0000                  		move.w	#0,d6
00017DB2 7A0D                       		moveq	#$D,d5
00017DB4 6100 FC06                  		bsr.w	FindFloor
00017DB8 301F                       		move.w	(sp)+,d0
00017DBA 143C 0000                  		move.b	#0,d2
00017DBE                            
00017DBE                            loc_14DD0:
00017DBE 1638 F76A                  		move.b	($FFFFF76A).w,d3
00017DC2 B240                       		cmp.w	d0,d1
00017DC4 6F00                       		ble.s	loc_14DDE
00017DC6 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017DCA C141                       		exg	d0,d1
00017DCC                            
00017DCC                            loc_14DDE:
00017DCC 0803 0000                  		btst	#0,d3
00017DD0 6700                       		beq.s	locret_14DE6
00017DD2 1602                       		move.b	d2,d3
00017DD4                            
00017DD4                            locret_14DE6:
00017DD4 4E75                       		rts	
00017DD6                            
00017DD6                            ; End of function Sonic_HitFloor
00017DD6                            
00017DD6                            ; ===========================================================================
00017DD6 3428 000C                  		move.w	obY(a0),d2
00017DDA 3628 0008                  		move.w	obX(a0),d3
00017DDE                            
00017DDE                            loc_14DF0:
00017DDE 0642 000A                  		addi.w	#$A,d2
00017DE2 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017DE6 367C 0010                  		movea.w	#$10,a3
00017DEA 3C3C 0000                  		move.w	#0,d6
00017DEE 7A0E                       		moveq	#$E,d5
00017DF0 6100 FBCA                  		bsr.w	FindFloor
00017DF4 143C 0000                  		move.b	#0,d2
00017DF8                            
00017DF8                            loc_14E0A:
00017DF8 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017DFC 0803 0000                  		btst	#0,d3
00017E00 6700                       		beq.s	locret_14E16
00017E02 1602                       		move.b	d2,d3
00017E04                            
00017E04                            locret_14E16:
00017E04 4E75                       		rts	
00017E06                            
00017E06                            		include	"_incObj\sub ObjFloorDist.asm"
00017E06                            ; ---------------------------------------------------------------------------
00017E06                            ; Subroutine to find the distance of an object to the floor
00017E06                            
00017E06                            ; input:
00017E06                            ;	d3 = x-pos. of object (ObjFloorDist2 only)
00017E06                            
00017E06                            ; output:
00017E06                            ;	d1 = distance to the floor
00017E06                            ;	d3 = floor angle
00017E06                            ;	a1 = address within 256x256 mappings where object is standing
00017E06                            ;	     (refers to a 16x16 tile number)
00017E06                            ;	(a4) = floor angle
00017E06                            ; ---------------------------------------------------------------------------
00017E06                            
00017E06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017E06                            
00017E06                            
00017E06                            ObjFloorDist:
00017E06 3628 0008                  		move.w	obX(a0),d3
00017E0A                            
00017E0A                            
00017E0A                            ObjFloorDist2:
00017E0A 3428 000C                  		move.w	obY(a0),d2
00017E0E 7000                       		moveq	#0,d0
00017E10 1028 0016                  		move.b	obHeight(a0),d0
00017E14 4880                       		ext.w	d0
00017E16 D440                       		add.w	d0,d2
00017E18 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017E1C 18BC 0000                  		move.b	#0,(a4)
00017E20 367C 0010                  		movea.w	#$10,a3		; height of a 16x16 tile
00017E24 3C3C 0000                  		move.w	#0,d6
00017E28 7A0D                       		moveq	#$D,d5		; bit to test for solidness
00017E2A 6100 FB90                  		bsr.w	FindFloor
00017E2E 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017E32 0803 0000                  		btst	#0,d3
00017E36 6700                       		beq.s	locret_14E4E
00017E38 163C 0000                  		move.b	#0,d3
00017E3C                            
00017E3C                            	locret_14E4E:
00017E3C 4E75                       		rts	
00017E3E                            
00017E3E                            ; End of function ObjFloorDist2
00017E3E                            ; End of function ObjFloorDist2
00017E3E                            
00017E3E                            
00017E3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017E3E                            
00017E3E                            
00017E3E                            sub_14E50:
00017E3E 3428 000C                  		move.w	obY(a0),d2
00017E42 3628 0008                  		move.w	obX(a0),d3
00017E46 7000                       		moveq	#0,d0
00017E48 1028 0017                  		move.b	obWidth(a0),d0
00017E4C 4880                       		ext.w	d0
00017E4E 9440                       		sub.w	d0,d2
00017E50 1028 0016                  		move.b	obHeight(a0),d0
00017E54 4880                       		ext.w	d0
00017E56 D640                       		add.w	d0,d3
00017E58 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017E5C 367C 0010                  		movea.w	#$10,a3
00017E60 3C3C 0000                  		move.w	#0,d6
00017E64 7A0E                       		moveq	#$E,d5
00017E66 6100 FC92                  		bsr.w	FindWall
00017E6A 3F01                       		move.w	d1,-(sp)
00017E6C 3428 000C                  		move.w	obY(a0),d2
00017E70 3628 0008                  		move.w	obX(a0),d3
00017E74 7000                       		moveq	#0,d0
00017E76 1028 0017                  		move.b	obWidth(a0),d0
00017E7A 4880                       		ext.w	d0
00017E7C D440                       		add.w	d0,d2
00017E7E 1028 0016                  		move.b	obHeight(a0),d0
00017E82 4880                       		ext.w	d0
00017E84 D640                       		add.w	d0,d3
00017E86 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017E8A 367C 0010                  		movea.w	#$10,a3
00017E8E 3C3C 0000                  		move.w	#0,d6
00017E92 7A0E                       		moveq	#$E,d5
00017E94 6100 FC64                  		bsr.w	FindWall
00017E98 301F                       		move.w	(sp)+,d0
00017E9A 143C 00C0                  		move.b	#-$40,d2
00017E9E 6000 FF1E                  		bra.w	loc_14DD0
00017EA2                            
00017EA2                            ; End of function sub_14E50
00017EA2                            
00017EA2                            
00017EA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017EA2                            
00017EA2                            
00017EA2                            sub_14EB4:
00017EA2 3428 000C                  		move.w	obY(a0),d2
00017EA6 3628 0008                  		move.w	obX(a0),d3
00017EAA                            
00017EAA                            loc_14EBC:
00017EAA 0643 000A                  		addi.w	#$A,d3
00017EAE 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017EB2 367C 0010                  		movea.w	#$10,a3
00017EB6 3C3C 0000                  		move.w	#0,d6
00017EBA 7A0E                       		moveq	#$E,d5
00017EBC 6100 FC3C                  		bsr.w	FindWall
00017EC0 143C 00C0                  		move.b	#-$40,d2
00017EC4 6000 FF32                  		bra.w	loc_14E0A
00017EC8                            
00017EC8                            ; End of function sub_14EB4
00017EC8                            
00017EC8                            ; ---------------------------------------------------------------------------
00017EC8                            ; Subroutine to	detect when an object hits a wall to its right
00017EC8                            ; ---------------------------------------------------------------------------
00017EC8                            
00017EC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017EC8                            
00017EC8                            
00017EC8                            ObjHitWallRight:
00017EC8 D668 0008                  		add.w	obX(a0),d3
00017ECC 3428 000C                  		move.w	obY(a0),d2
00017ED0 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017ED4 18BC 0000                  		move.b	#0,(a4)
00017ED8 367C 0010                  		movea.w	#$10,a3
00017EDC 3C3C 0000                  		move.w	#0,d6
00017EE0 7A0E                       		moveq	#$E,d5
00017EE2 6100 FC16                  		bsr.w	FindWall
00017EE6 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017EEA 0803 0000                  		btst	#0,d3
00017EEE 6700                       		beq.s	locret_14F06
00017EF0 163C 00C0                  		move.b	#-$40,d3
00017EF4                            
00017EF4                            locret_14F06:
00017EF4 4E75                       		rts	
00017EF6                            
00017EF6                            ; End of function ObjHitWallRight
00017EF6                            
00017EF6                            ; ---------------------------------------------------------------------------
00017EF6                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
00017EF6                            ; touches them
00017EF6                            ; ---------------------------------------------------------------------------
00017EF6                            
00017EF6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017EF6                            
00017EF6                            
00017EF6                            Sonic_DontRunOnWalls:
00017EF6 3428 000C                  		move.w	obY(a0),d2
00017EFA 3628 0008                  		move.w	obX(a0),d3
00017EFE 7000                       		moveq	#0,d0
00017F00 1028 0016                  		move.b	obHeight(a0),d0
00017F04 4880                       		ext.w	d0
00017F06 9440                       		sub.w	d0,d2
00017F08 0A42 000F                  		eori.w	#$F,d2
00017F0C 1028 0017                  		move.b	obWidth(a0),d0
00017F10 4880                       		ext.w	d0
00017F12 D640                       		add.w	d0,d3
00017F14 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017F18 367C FFF0                  		movea.w	#-$10,a3
00017F1C 3C3C 1000                  		move.w	#$1000,d6
00017F20 7A0E                       		moveq	#$E,d5
00017F22 6100 FA98                  		bsr.w	FindFloor
00017F26 3F01                       		move.w	d1,-(sp)
00017F28 3428 000C                  		move.w	obY(a0),d2
00017F2C 3628 0008                  		move.w	obX(a0),d3
00017F30 7000                       		moveq	#0,d0
00017F32 1028 0016                  		move.b	obHeight(a0),d0
00017F36 4880                       		ext.w	d0
00017F38 9440                       		sub.w	d0,d2
00017F3A 0A42 000F                  		eori.w	#$F,d2
00017F3E 1028 0017                  		move.b	obWidth(a0),d0
00017F42 4880                       		ext.w	d0
00017F44 9640                       		sub.w	d0,d3
00017F46 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017F4A 367C FFF0                  		movea.w	#-$10,a3
00017F4E 3C3C 1000                  		move.w	#$1000,d6
00017F52 7A0E                       		moveq	#$E,d5
00017F54 6100 FA66                  		bsr.w	FindFloor
00017F58 301F                       		move.w	(sp)+,d0
00017F5A 143C 0080                  		move.b	#-$80,d2
00017F5E 6000 FE5E                  		bra.w	loc_14DD0
00017F62                            ; End of function Sonic_DontRunOnWalls
00017F62                            
00017F62                            ; ===========================================================================
00017F62 3428 000C                  		move.w	obY(a0),d2
00017F66 3628 0008                  		move.w	obX(a0),d3
00017F6A                            
00017F6A                            loc_14F7C:
00017F6A 0442 000A                  		subi.w	#$A,d2
00017F6E 0A42 000F                  		eori.w	#$F,d2
00017F72 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017F76 367C FFF0                  		movea.w	#-$10,a3
00017F7A 3C3C 1000                  		move.w	#$1000,d6
00017F7E 7A0E                       		moveq	#$E,d5
00017F80 6100 FA3A                  		bsr.w	FindFloor
00017F84 143C 0080                  		move.b	#-$80,d2
00017F88 6000 FE6E                  		bra.w	loc_14E0A
00017F8C                            
00017F8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017F8C                            
00017F8C                            
00017F8C                            ObjHitCeiling:
00017F8C 3428 000C                  		move.w	obY(a0),d2
00017F90 3628 0008                  		move.w	obX(a0),d3
00017F94 7000                       		moveq	#0,d0
00017F96 1028 0016                  		move.b	obHeight(a0),d0
00017F9A 4880                       		ext.w	d0
00017F9C 9440                       		sub.w	d0,d2
00017F9E 0A42 000F                  		eori.w	#$F,d2
00017FA2 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017FA6 367C FFF0                  		movea.w	#-$10,a3
00017FAA 3C3C 1000                  		move.w	#$1000,d6
00017FAE 7A0E                       		moveq	#$E,d5
00017FB0 6100 FA0A                  		bsr.w	FindFloor
00017FB4 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017FB8 0803 0000                  		btst	#0,d3
00017FBC 6700                       		beq.s	locret_14FD4
00017FBE 163C 0080                  		move.b	#-$80,d3
00017FC2                            
00017FC2                            locret_14FD4:
00017FC2 4E75                       		rts	
00017FC4                            ; End of function ObjHitCeiling
00017FC4                            
00017FC4                            ; ===========================================================================
00017FC4                            
00017FC4                            loc_14FD6:
00017FC4 3428 000C                  		move.w	obY(a0),d2
00017FC8 3628 0008                  		move.w	obX(a0),d3
00017FCC 7000                       		moveq	#0,d0
00017FCE 1028 0017                  		move.b	obWidth(a0),d0
00017FD2 4880                       		ext.w	d0
00017FD4 9440                       		sub.w	d0,d2
00017FD6 1028 0016                  		move.b	obHeight(a0),d0
00017FDA 4880                       		ext.w	d0
00017FDC 9640                       		sub.w	d0,d3
00017FDE 0A43 000F                  		eori.w	#$F,d3
00017FE2 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017FE6 367C FFF0                  		movea.w	#-$10,a3
00017FEA 3C3C 0800                  		move.w	#$800,d6
00017FEE 7A0E                       		moveq	#$E,d5
00017FF0 6100 FB08                  		bsr.w	FindWall
00017FF4 3F01                       		move.w	d1,-(sp)
00017FF6 3428 000C                  		move.w	obY(a0),d2
00017FFA 3628 0008                  		move.w	obX(a0),d3
00017FFE 7000                       		moveq	#0,d0
00018000 1028 0017                  		move.b	obWidth(a0),d0
00018004 4880                       		ext.w	d0
00018006 D440                       		add.w	d0,d2
00018008 1028 0016                  		move.b	obHeight(a0),d0
0001800C 4880                       		ext.w	d0
0001800E 9640                       		sub.w	d0,d3
00018010 0A43 000F                  		eori.w	#$F,d3
00018014 49F8 F76A                  		lea	($FFFFF76A).w,a4
00018018 367C FFF0                  		movea.w	#-$10,a3
0001801C 3C3C 0800                  		move.w	#$800,d6
00018020 7A0E                       		moveq	#$E,d5
00018022 6100 FAD6                  		bsr.w	FindWall
00018026 301F                       		move.w	(sp)+,d0
00018028 143C 0040                  		move.b	#$40,d2
0001802C 6000 FD90                  		bra.w	loc_14DD0
00018030                            
00018030                            ; ---------------------------------------------------------------------------
00018030                            ; Subroutine to	stop Sonic when	he jumps at a wall
00018030                            ; ---------------------------------------------------------------------------
00018030                            
00018030                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018030                            
00018030                            
00018030                            Sonic_HitWall:
00018030 3428 000C                  		move.w	obY(a0),d2
00018034 3628 0008                  		move.w	obX(a0),d3
00018038                            
00018038                            loc_1504A:
00018038 0443 000A                  		subi.w	#$A,d3
0001803C 0A43 000F                  		eori.w	#$F,d3
00018040 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018044 367C FFF0                  		movea.w	#-$10,a3
00018048 3C3C 0800                  		move.w	#$800,d6
0001804C 7A0E                       		moveq	#$E,d5
0001804E 6100 FAAA                  		bsr.w	FindWall
00018052 143C 0040                  		move.b	#$40,d2
00018056 6000 FDA0                  		bra.w	loc_14E0A
0001805A                            ; End of function Sonic_HitWall
0001805A                            
0001805A                            ; ---------------------------------------------------------------------------
0001805A                            ; Subroutine to	detect when an object hits a wall to its left
0001805A                            ; ---------------------------------------------------------------------------
0001805A                            
0001805A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001805A                            
0001805A                            
0001805A                            ObjHitWallLeft:
0001805A D668 0008                  		add.w	obX(a0),d3
0001805E 3428 000C                  		move.w	obY(a0),d2
00018062                            		; Engine bug: colliding with left walls is erratic with this function.
00018062                            		; The cause is this: a missing instruction to flip collision on the found
00018062                            		; 16x16 block; this one:
00018062                            		;eori.w	#$F,d3
00018062 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018066 18BC 0000                  		move.b	#0,(a4)
0001806A 367C FFF0                  		movea.w	#-$10,a3
0001806E 3C3C 0800                  		move.w	#$800,d6
00018072 7A0E                       		moveq	#$E,d5
00018074 6100 FA84                  		bsr.w	FindWall
00018078 1638 F768                  		move.b	(v_anglebuffer).w,d3
0001807C 0803 0000                  		btst	#0,d3
00018080 6700                       		beq.s	locret_15098
00018082 163C 0040                  		move.b	#$40,d3
00018086                            
00018086                            locret_15098:
00018086 4E75                       		rts	
00018088                            ; End of function ObjHitWallLeft
00018088                            
00018088                            ; ===========================================================================
00018088                            
00018088                            		include	"_incObj\66 Rotating Junction.asm"
00018088                            ; ---------------------------------------------------------------------------
00018088                            ; Object 66 - rotating disc junction that grabs Sonic (SBZ)
00018088                            ; ---------------------------------------------------------------------------
00018088                            
00018088                            Junction:
00018088 7000                       		moveq	#0,d0
0001808A 1028 0024                  		move.b	obRoutine(a0),d0
0001808E 323B 0000                  		move.w	Jun_Index(pc,d0.w),d1
00018092 4EFB 1000                  		jmp	Jun_Index(pc,d1.w)
00018096                            ; ===========================================================================
00018096 0000                       Jun_Index:	dc.w Jun_Main-Jun_Index
00018098 0000                       		dc.w Jun_Action-Jun_Index
0001809A 0000                       		dc.w Jun_Display-Jun_Index
0001809C 0000                       		dc.w Jun_Release-Jun_Index
0001809E                            
0001809E =00000034                  jun_frame:	equ $34		; current frame
0001809E =00000036                  jun_reverse:	equ $36		; flag set when switch is pressed
0001809E =00000038                  jun_switch:	equ $38		; which switch will reverse the disc
0001809E                            ; ===========================================================================
0001809E                            
0001809E                            Jun_Main:	; Routine 0
0001809E 5428 0024                  		addq.b	#2,obRoutine(a0)
000180A2 323C 0001                  		move.w	#1,d1
000180A6 2248                       		movea.l	a0,a1
000180A8 6000                       		bra.s	@makeitem
000180AA                            ; ===========================================================================
000180AA                            
000180AA                            	@repeat:
000180AA 4EB9 0000 FD18             		jsr	FindFreeObj
000180B0 6600                       		bne.s	@fail
000180B2 12BC 0066                  		move.b	#id_Junction,0(a1)
000180B6 5829 0024                  		addq.b	#4,obRoutine(a1) ; goto Jun_Display next
000180BA 3368 0008 0008             		move.w	obX(a0),obX(a1)
000180C0 3368 000C 000C             		move.w	obY(a0),obY(a1)
000180C6 337C 0180 0018             		move.w	#$180,obPriority(a1)
000180CC 137C 0010 001A             		move.b	#$10,obFrame(a1) ; use large circular sprite
000180D2                            
000180D2                            @makeitem:
000180D2 237C 0000 0000 0004        		move.l	#Map_Jun,obMap(a1)
000180DA 337C 4348 0002             		move.w	#$4348,obGfx(a1)
000180E0 0029 0004 0001             		ori.b	#4,obRender(a1)
000180E6 137C 0038 0014             		move.b	#$38,obActWid(a1)
000180EC                            
000180EC                            	@fail:
000180EC 51C9 FFBC                  		dbf	d1,@repeat
000180F0                            
000180F0 117C 0030 0014             		move.b	#$30,obActWid(a0)
000180F6 317C 0200 0018             		move.w	#$200,obPriority(a0)
000180FC 317C 003C 0030             		move.w	#$3C,$30(a0)
00018102 117C 0001 0034             		move.b	#1,jun_frame(a0)
00018108 1168 0028 0038             		move.b	obSubtype(a0),jun_switch(a0)
0001810E                            
0001810E                            Jun_Action:	; Routine 2
0001810E 6100 0000                  		bsr.w	Jun_ChkSwitch
00018112 4A28 0001                  		tst.b	obRender(a0)
00018116 6A00 0000                  		bpl.w	Jun_Display
0001811A 323C 0030                  		move.w	#$30,d1
0001811E 3401                       		move.w	d1,d2
00018120 3602                       		move.w	d2,d3
00018122 5243                       		addq.w	#1,d3
00018124 3828 0008                  		move.w	obX(a0),d4
00018128 6100 9B70                  		bsr.w	SolidObject
0001812C 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing the disc?
00018132 6700 0000                  		beq.w	Jun_Display	; if not, branch
00018136                            
00018136 43F8 D000                  		lea	(v_player).w,a1
0001813A 720E                       		moveq	#$E,d1
0001813C 3029 0008                  		move.w	obX(a1),d0
00018140 B068 0008                  		cmp.w	obX(a0),d0	; is Sonic to the left of the disc?
00018144 6500                       		bcs.s	@isleft		; if yes, branch
00018146 7207                       		moveq	#7,d1		
00018148                            
00018148                            	@isleft:
00018148 B228 001A                  		cmp.b	obFrame(a0),d1	; is the gap next to Sonic?
0001814C 6600                       		bne.s	Jun_Display	; if not, branch
0001814E                            
0001814E 1141 0032                  		move.b	d1,$32(a0)
00018152 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto Jun_Release next
00018156 11FC 0001 F7C8             		move.b	#1,(f_lockmulti).w ; lock controls
0001815C 137C 0002 001C             		move.b	#id_Roll,obAnim(a1) ; make Sonic use "rolling" animation
00018162 337C 0800 0020             		move.w	#$800,obInertia(a1)
00018168 337C 0000 0010             		move.w	#0,obVelX(a1)
0001816E 337C 0000 0012             		move.w	#0,obVelY(a1)
00018174 08A8 0005 0022             		bclr	#5,obStatus(a0)
0001817A 08A9 0005 0022             		bclr	#5,obStatus(a1)
00018180 08E9 0001 0022             		bset	#1,obStatus(a1)
00018186 3429 0008                  		move.w	obX(a1),d2
0001818A 3629 000C                  		move.w	obY(a1),d3
0001818E 6100 0000                  		bsr.w	Jun_ChgPos
00018192 D569 0008                  		add.w	d2,obX(a1)
00018196 D769 000C                  		add.w	d3,obY(a1)
0001819A E0E9 0008                  		asr	obX(a1)
0001819E E0E9 000C                  		asr	obY(a1)
000181A2                            
000181A2                            Jun_Display:	; Routine 4
000181A2 6000 965E                  		bra.w	RememberState
000181A6                            ; ===========================================================================
000181A6                            
000181A6                            Jun_Release:	; Routine 6
000181A6 1028 001A                  		move.b	obFrame(a0),d0
000181AA 0C00 0004                  		cmpi.b	#4,d0		; is gap pointing down?
000181AE 6700                       		beq.s	@release	; if yes, branch
000181B0 0C00 0007                  		cmpi.b	#7,d0		; is gap pointing right?
000181B4 6600                       		bne.s	@dontrelease	; if not, branch
000181B6                            
000181B6                            	@release:
000181B6 B028 0032                  		cmp.b	$32(a0),d0
000181BA 6700                       		beq.s	@dontrelease
000181BC 43F8 D000                  		lea	(v_player).w,a1
000181C0 337C 0000 0010             		move.w	#0,obVelX(a1)
000181C6 337C 0800 0012             		move.w	#$800,obVelY(a1)
000181CC 0C00 0004                  		cmpi.b	#4,d0
000181D0 6700                       		beq.s	@isdown
000181D2 337C 0800 0010             		move.w	#$800,obVelX(a1)
000181D8 337C 0800 0012             		move.w	#$800,obVelY(a1)
000181DE                            
000181DE                            	@isdown:
000181DE 4238 F7C8                  		clr.b	(f_lockmulti).w	; unlock controls
000181E2 5928 0024                  		subq.b	#4,obRoutine(a0)
000181E6                            
000181E6                            	@dontrelease:
000181E6 6100                       		bsr.s	Jun_ChkSwitch
000181E8 6100                       		bsr.s	Jun_ChgPos
000181EA 6000 9616                  		bra.w	RememberState
000181EE                            
000181EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000181EE                            
000181EE                            
000181EE                            Jun_ChkSwitch:
000181EE 45F8 F7E0                  		lea	(f_switch).w,a2
000181F2 7000                       		moveq	#0,d0
000181F4 1028 0038                  		move.b	jun_switch(a0),d0
000181F8 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
000181FE 6700                       		beq.s	@unpressed	; if not, branch
00018200                            
00018200 4A28 0036                  		tst.b	jun_reverse(a0)	; has switch previously	been pressed?
00018204 6600                       		bne.s	@animate	; if yes, branch
00018206 4428 0034                  		neg.b	jun_frame(a0)
0001820A 117C 0001 0036             		move.b	#1,jun_reverse(a0) ; set to "previously pressed"
00018210 6000                       		bra.s	@animate
00018212                            ; ===========================================================================
00018212                            
00018212                            @unpressed:
00018212 4228 0036                  		clr.b	jun_reverse(a0)	; set to "not yet pressed"
00018216                            
00018216                            @animate:
00018216 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; decrement frame timer
0001821A 6A00                       		bpl.s	@nochange	; if time remains, branch
0001821C 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
00018222 1228 0034                  		move.b	jun_frame(a0),d1
00018226 1028 001A                  		move.b	obFrame(a0),d0
0001822A D001                       		add.b	d1,d0
0001822C 0200 000F                  		andi.b	#$F,d0
00018230 1140 001A                  		move.b	d0,obFrame(a0)	; update frame
00018234                            
00018234                            	@nochange:
00018234 4E75                       		rts	
00018236                            ; End of function Jun_ChkSwitch
00018236                            
00018236                            
00018236                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018236                            
00018236                            
00018236                            Jun_ChgPos:
00018236 43F8 D000                  		lea	(v_player).w,a1
0001823A 7000                       		moveq	#0,d0
0001823C 1028 001A                  		move.b	obFrame(a0),d0
00018240 D040                       		add.w	d0,d0
00018242 45FB 0000                  		lea	@data(pc,d0.w),a2
00018246 101A                       		move.b	(a2)+,d0
00018248 4880                       		ext.w	d0
0001824A D068 0008                  		add.w	obX(a0),d0
0001824E 3340 0008                  		move.w	d0,obX(a1)
00018252 101A                       		move.b	(a2)+,d0
00018254 4880                       		ext.w	d0
00018256 D068 000C                  		add.w	obY(a0),d0
0001825A 3340 000C                  		move.w	d0,obY(a1)
0001825E 4E75                       		rts	
00018260                            
00018260                            
00018260 E000 E20E                  @data:		dc.b -$20,    0, -$1E,   $E ; disc x-pos, Sonic x-pos, disc y-pos, Sonic y-pos
00018264 E818 F21E                  		dc.b -$18,  $18,  -$E,  $1E
00018268 0020 0E1E                  		dc.b    0,  $20,   $E,  $1E
0001826C 1818 1E0E                  		dc.b  $18,  $18,  $1E,   $E
00018270 2000 1EF2                  		dc.b  $20,    0,  $1E,  -$E
00018274 18E8 0EE2                  		dc.b  $18, -$18,   $E, -$1E
00018278 00E0 F2E2                  		dc.b    0, -$20,  -$E, -$1E
0001827C E8E8 E2F2                  		dc.b -$18, -$18, -$1E,  -$E
0001827C E8E8 E2F2                  		dc.b -$18, -$18, -$1E,  -$E
00018280                            Map_Jun:	include	"_maps\Rotating Junction.asm"
00018280                            ; ---------------------------------------------------------------------------
00018280                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00018280                            ; ---------------------------------------------------------------------------
00018280                            Map_Jun_internal:
00018280 0000                       		dc.w @gap0-Map_Jun_internal
00018282 0000                       		dc.w @gap1-Map_Jun_internal
00018284 0000                       		dc.w @gap2-Map_Jun_internal
00018286 0000                       		dc.w @gap3-Map_Jun_internal
00018288 0000                       		dc.w @gap4-Map_Jun_internal
0001828A 0000                       		dc.w @gap5-Map_Jun_internal
0001828C 0000                       		dc.w @gap6-Map_Jun_internal
0001828E 0000                       		dc.w @gap7-Map_Jun_internal
00018290 0000                       		dc.w @gap8-Map_Jun_internal
00018292 0000                       		dc.w @gap9-Map_Jun_internal
00018294 0000                       		dc.w @gapA-Map_Jun_internal
00018296 0000                       		dc.w @gapB-Map_Jun_internal
00018298 0000                       		dc.w @gapC-Map_Jun_internal
0001829A 0000                       		dc.w @gapD-Map_Jun_internal
0001829C 0000                       		dc.w @gapE-Map_Jun_internal
0001829E 0000                       		dc.w @gapF-Map_Jun_internal
000182A0 0000                       		dc.w @circle-Map_Jun_internal
000182A2 06                         @gap0:		dc.b 6
000182A3 E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
000182A8 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
000182AD E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
000182B2 E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
000182B7 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
000182BC 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
000182C1 06                         @gap1:		dc.b 6
000182C2 F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
000182C7 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
000182CC F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
000182D1 F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
000182D6 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
000182DB 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
000182E0 06                         @gap2:		dc.b 6
000182E1 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
000182E6 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
000182EB 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
000182F0 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
000182F5 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
000182FA 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
000182FF 06                         @gap3:		dc.b 6
00018300 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
00018305 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
0001830A 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
0001830F 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
00018314 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00018319 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
0001831E 06                         @gap4:		dc.b 6
0001831F 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00018324 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00018329 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
0001832E 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00018333 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00018338 200A 1800 00               		dc.b $20, $A, $18, 0, 0
0001833D 06                         @gap5:		dc.b 6
0001833E 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
00018343 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00018348 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
0001834D 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
00018352 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00018357 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
0001835C 06                         @gap6:		dc.b 6
0001835D 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
00018362 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00018367 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
0001836C 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
00018371 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00018376 180A 1800 18               		dc.b $18, $A, $18, 0, $18
0001837B 06                         @gap7:		dc.b 6
0001837C 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
00018381 F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
00018386 F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
0001838B F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
00018390 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
00018395 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
0001839A 06                         @gap8:		dc.b 6
0001839B E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
000183A0 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
000183A5 E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
000183AA E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
000183AF 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
000183B4 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
000183B9 06                         @gap9:		dc.b 6
000183BA D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
000183BF E803 1826 28               		dc.b $E8, 3, $18, $26, $28
000183C4 DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
000183C9 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
000183CE F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
000183D3 F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
000183D8 06                         @gapA:		dc.b 6
000183D9 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
000183DE E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
000183E3 D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
000183E8 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
000183ED E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
000183F2 E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
000183F7 06                         @gapB:		dc.b 6
000183F8 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
000183FD D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
00018402 CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00018407 CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
0001840C E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00018411 E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00018416 06                         @gapC:		dc.b 6
00018417 D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
0001841C D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00018421 C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00018426 C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
0001842B E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
00018430 E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00018435 06                         @gapD:		dc.b 6
00018436 D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
0001843B D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
00018440 CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00018445 CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
0001844A E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
0001844F E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
00018454 06                         @gapE:		dc.b 6
00018455 E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
0001845A D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
0001845F D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
00018464 D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00018469 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
0001846E E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
00018473 06                         @gapF:		dc.b 6
00018474 E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00018479 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
0001847E DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
00018483 DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00018488 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
0001848D F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
00018492 0C                         @circle:	dc.b $C
00018493 C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00018498 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
0001849D E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
000184A2 C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
000184A7 D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
000184AC E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
000184B1 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
000184B6 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
000184BB 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
000184C0 280D 1809 00               		dc.b $28, $D, $18, 9, 0
000184C5 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
000184CA 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
000184D0 00                         		even
000184D0 00                         		even
000184D0                            		include	"_incObj\67 Running Disc.asm"
000184D0                            ; ---------------------------------------------------------------------------
000184D0                            ; Object 67 - disc that	you run	around (SBZ)
000184D0                            ; ---------------------------------------------------------------------------
000184D0                            
000184D0                            RunningDisc:
000184D0 7000                       		moveq	#0,d0
000184D2 1028 0024                  		move.b	obRoutine(a0),d0
000184D6 323B 0000                  		move.w	Disc_Index(pc,d0.w),d1
000184DA 4EFB 1000                  		jmp	Disc_Index(pc,d1.w)
000184DE                            ; ===========================================================================
000184DE 0000                       Disc_Index:	dc.w Disc_Main-Disc_Index
000184E0 0000                       		dc.w Disc_Action-Disc_Index
000184E2                            
000184E2 =00000032                  disc_origX:	equ $32		; original x-axis position
000184E2 =00000030                  disc_origY:	equ $30		; original y-axis position
000184E2                            ; ===========================================================================
000184E2                            
000184E2                            Disc_Main:	; Routine 0
000184E2 5428 0024                  		addq.b	#2,obRoutine(a0)
000184E6 217C 0000 0000 0004        		move.l	#Map_Disc,obMap(a0)
000184EE 317C C344 0002             		move.w	#$C344,obGfx(a0)
000184F4 117C 0004 0001             		move.b	#4,obRender(a0)
000184FA 317C 0200 0018             		move.w	#$200,obPriority(a0)
00018500 117C 0008 0014             		move.b	#8,obActWid(a0)
00018506 3168 0008 0032             		move.w	obX(a0),disc_origX(a0)
0001850C 3168 000C 0030             		move.w	obY(a0),disc_origY(a0)
00018512 117C 0018 0034             		move.b	#$18,$34(a0)
00018518 117C 0048 0038             		move.b	#$48,$38(a0)
0001851E 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00018522 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00018526 6700                       		beq.s	@typeis0	; branch if 0
00018528 117C 0010 0034             		move.b	#$10,$34(a0)
0001852E 117C 0038 0038             		move.b	#$38,$38(a0)
00018534                            
00018534                            	@typeis0:
00018534 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00018538 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
0001853C 4881                       		ext.w	d1
0001853E E741                       		asl.w	#3,d1
00018540 3141 0036                  		move.w	d1,$36(a0)
00018544 1028 0022                  		move.b	obStatus(a0),d0
00018548 E418                       		ror.b	#2,d0
0001854A 0200 00C0                  		andi.b	#$C0,d0
0001854E 1140 0026                  		move.b	d0,obAngle(a0)
00018552                            
00018552                            Disc_Action:	; Routine 2
00018552 6100 0000                  		bsr.w	Disc_MoveSonic
00018556 6100 0000                  		bsr.w	Disc_MoveSpot
0001855A 6000 0000                  		bra.w	Disc_ChkDel
0001855E                            ; ===========================================================================
0001855E                            
0001855E                            Disc_MoveSonic:
0001855E 7400                       		moveq	#0,d2
00018560 1428 0038                  		move.b	$38(a0),d2
00018564 3602                       		move.w	d2,d3
00018566 D643                       		add.w	d3,d3
00018568 43F8 D000                  		lea	(v_player).w,a1
0001856C 3029 0008                  		move.w	obX(a1),d0
00018570 9068 0032                  		sub.w	disc_origX(a0),d0
00018574 D042                       		add.w	d2,d0
00018576 B043                       		cmp.w	d3,d0
00018578 6400                       		bcc.s	loc_155A8
0001857A 3229 000C                  		move.w	obY(a1),d1
0001857E 9268 0030                  		sub.w	disc_origY(a0),d1
00018582 D242                       		add.w	d2,d1
00018584 B243                       		cmp.w	d3,d1
00018586 6400                       		bcc.s	loc_155A8
00018588 0829 0001 0022             		btst	#1,obStatus(a1)
0001858E 6700                       		beq.s	loc_155B8
00018590 4228 003A                  		clr.b	$3A(a0)
00018594 4E75                       		rts	
00018596                            ; ===========================================================================
00018596                            
00018596                            loc_155A8:
00018596 4A28 003A                  		tst.b	$3A(a0)
0001859A 6700                       		beq.s	locret_155B6
0001859C 4229 0038                  		clr.b	$38(a1)
000185A0 4228 003A                  		clr.b	$3A(a0)
000185A4                            
000185A4                            locret_155B6:
000185A4 4E75                       		rts	
000185A6                            ; ===========================================================================
000185A6                            
000185A6                            loc_155B8:
000185A6 4A28 003A                  		tst.b	$3A(a0)
000185AA 6600                       		bne.s	loc_155E2
000185AC 117C 0001 003A             		move.b	#1,$3A(a0)
000185B2 0829 0002 0022             		btst	#2,obStatus(a1)
000185B8 6600                       		bne.s	loc_155D0
000185BA 4229 001C                  		clr.b	obAnim(a1)
000185BE                            
000185BE                            loc_155D0:
000185BE 08A9 0005 0022             		bclr	#5,obStatus(a1)
000185C4 137C 0001 001D             		move.b	#1,obNextAni(a1)
000185CA 137C 0001 0038             		move.b	#1,$38(a1)
000185D0                            
000185D0                            loc_155E2:
000185D0 3029 0020                  		move.w	obInertia(a1),d0
000185D4 4A68 0036                  		tst.w	$36(a0)
000185D8 6A00                       		bpl.s	loc_15608
000185DA 0C40 FC00                  		cmpi.w	#-$400,d0
000185DE 6F00                       		ble.s	loc_155FA
000185E0 337C FC00 0020             		move.w	#-$400,obInertia(a1)
000185E6 4E75                       		rts	
000185E8                            ; ===========================================================================
000185E8                            
000185E8                            loc_155FA:
000185E8 0C40 F100                  		cmpi.w	#-$F00,d0
000185EC 6C00                       		bge.s	locret_15606
000185EE 337C F100 0020             		move.w	#-$F00,obInertia(a1)
000185F4                            
000185F4                            locret_15606:
000185F4 4E75                       		rts	
000185F6                            ; ===========================================================================
000185F6                            
000185F6                            loc_15608:
000185F6 0C40 0400                  		cmpi.w	#$400,d0
000185FA 6C00                       		bge.s	loc_15616
000185FC 337C 0400 0020             		move.w	#$400,obInertia(a1)
00018602 4E75                       		rts	
00018604                            ; ===========================================================================
00018604                            
00018604                            loc_15616:
00018604 0C40 0F00                  		cmpi.w	#$F00,d0
00018608 6F00                       		ble.s	locret_15622
0001860A 337C 0F00 0020             		move.w	#$F00,obInertia(a1)
00018610                            
00018610                            locret_15622:
00018610 4E75                       		rts	
00018612                            ; ===========================================================================
00018612                            
00018612                            Disc_MoveSpot:
00018612 3028 0036                  		move.w	$36(a0),d0
00018616 D168 0026                  		add.w	d0,obAngle(a0)
0001861A 1028 0026                  		move.b	obAngle(a0),d0
0001861E 4EB9 0000 3A32             		jsr	(CalcSine).l
00018624 3428 0030                  		move.w	disc_origY(a0),d2
00018628 3628 0032                  		move.w	disc_origX(a0),d3
0001862C 7800                       		moveq	#0,d4
0001862E 1828 0034                  		move.b	$34(a0),d4
00018632 E14C                       		lsl.w	#8,d4
00018634 2A04                       		move.l	d4,d5
00018636 C9C0                       		muls.w	d0,d4
00018638 4844                       		swap	d4
0001863A CBC1                       		muls.w	d1,d5
0001863C 4845                       		swap	d5
0001863E D842                       		add.w	d2,d4
00018640 DA43                       		add.w	d3,d5
00018642 3144 000C                  		move.w	d4,obY(a0)
00018646 3145 0008                  		move.w	d5,obX(a0)
0001864A 4E75                       		rts	
0001864C                            ; ===========================================================================
0001864C                            
0001864C                            Disc_ChkDel:
00018668 4EF9 0000 F88C             		jmp	(DisplaySprite).l
0001866E                            
0001866E                            	@delete:
0001866E 4EF9 0000 F8CC             		jmp	(DeleteObject).l
0001866E 4EF9 0000 F8CC             		jmp	(DeleteObject).l
00018674                            Map_Disc:	include	"_maps\Running Disc.asm"
00018674                            ; ---------------------------------------------------------------------------
00018674                            ; Sprite mappings - disc that you run around (SBZ)
00018674                            ; (It's just a small blob that moves around in a circle. The disc itself is
00018674                            ; part of the level tiles.)
00018674                            ; ---------------------------------------------------------------------------
00018674                            Map_Disc_internal:
00018674 0000                       		dc.w @spot-Map_Disc_internal
00018676 01                         @spot:		dc.b 1
00018677 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001867C                            		even
0001867C                            		even
0001867C                            		include	"_incObj\68 Conveyor Belt.asm"
0001867C                            ; ---------------------------------------------------------------------------
0001867C                            ; Object 68 - conveyor belts (SBZ)
0001867C                            ; ---------------------------------------------------------------------------
0001867C                            
0001867C                            Conveyor:
0001867C 7000                       		moveq	#0,d0
0001867E 1028 0024                  		move.b	obRoutine(a0),d0
00018682 323B 0000                  		move.w	Conv_Index(pc,d0.w),d1
00018686 4EFB 1000                  		jmp	Conv_Index(pc,d1.w)
0001868A                            ; ===========================================================================
0001868A 0000                       Conv_Index:	dc.w Conv_Main-Conv_Index
0001868C 0000                       		dc.w Conv_Action-Conv_Index
0001868E                            
0001868E =00000036                  conv_speed:	equ $36
0001868E =00000038                  conv_width:	equ $38
0001868E                            ; ===========================================================================
0001868E                            
0001868E                            Conv_Main:	; Routine 0
0001868E 5428 0024                  		addq.b	#2,obRoutine(a0)
00018692 117C 0080 0038             		move.b	#128,conv_width(a0) ; set width to 128 pixels
00018698 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
0001869C 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
000186A0 6700                       		beq.s	@typeis0	; if zero, branch
000186A2 117C 0038 0038             		move.b	#56,conv_width(a0) ; set width to 56 pixels
000186A8                            
000186A8                            	@typeis0:
000186A8 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
000186AC 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000186B0 4881                       		ext.w	d1
000186B2 E841                       		asr.w	#4,d1
000186B4 3141 0036                  		move.w	d1,conv_speed(a0) ; set belt speed
000186B8                            
000186B8                            Conv_Action:	; Routine 2
000186B8 6100                       		bsr.s	@movesonic
000186D6 4E75                       		rts	
000186D8                            
000186D8                            	@delete:
000186D8 4EF9 0000 F8CC             		jmp	(DeleteObject).l
000186DE                            ; ===========================================================================
000186DE                            
000186DE                            @movesonic:
000186DE 7400                       		moveq	#0,d2
000186E0 1428 0038                  		move.b	conv_width(a0),d2
000186E4 3602                       		move.w	d2,d3
000186E6 D643                       		add.w	d3,d3
000186E8 43F8 D000                  		lea	(v_player).w,a1
000186EC 3029 0008                  		move.w	obX(a1),d0
000186F0 9068 0008                  		sub.w	obX(a0),d0
000186F4 D042                       		add.w	d2,d0
000186F6 B043                       		cmp.w	d3,d0
000186F8 6400                       		bcc.s	@notonconveyor
000186FA 3229 000C                  		move.w	obY(a1),d1
000186FE 9268 000C                  		sub.w	obY(a0),d1
00018702 0641 0030                  		addi.w	#$30,d1
00018706 0C41 0030                  		cmpi.w	#$30,d1
0001870A 6400                       		bcc.s	@notonconveyor
0001870C 0829 0001 0022             		btst	#1,obStatus(a1)
00018712 6600                       		bne.s	@notonconveyor
00018714 3028 0036                  		move.w	conv_speed(a0),d0
00018718 D169 0008                  		add.w	d0,obX(a1)
0001871C                            
0001871C                            	@notonconveyor:
0001871C 4E75                       		rts	
0001871C 4E75                       		rts	
0001871E                            		include	"_incObj\69 SBZ Spinning Platforms.asm"
0001871E                            ; ---------------------------------------------------------------------------
0001871E                            ; Object 69 - spinning platforms and trapdoors (SBZ)
0001871E                            ; ---------------------------------------------------------------------------
0001871E                            
0001871E                            SpinPlatform:
0001871E 7000                       		moveq	#0,d0
00018720 1028 0024                  		move.b	obRoutine(a0),d0
00018724 323B 0000                  		move.w	Spin_Index(pc,d0.w),d1
00018728 4EFB 1000                  		jmp	Spin_Index(pc,d1.w)
0001872C                            ; ===========================================================================
0001872C 0000                       Spin_Index:	dc.w Spin_Main-Spin_Index
0001872E 0000                       		dc.w Spin_Trapdoor-Spin_Index
00018730 0000                       		dc.w Spin_Spinner-Spin_Index
00018732                            
00018732 =00000030                  spin_timer:	equ $30		; time counter until change
00018732 =00000032                  spin_timelen:	equ $32		; time between changes (general)
00018732                            ; ===========================================================================
00018732                            
00018732                            Spin_Main:	; Routine 0
00018732 5428 0024                  		addq.b	#2,obRoutine(a0)
00018736 217C 0000 0000 0004        		move.l	#Map_Trap,obMap(a0)
0001873E 317C 4492 0002             		move.w	#$4492,obGfx(a0)
00018744 0028 0004 0001             		ori.b	#4,obRender(a0)
0001874A 117C 0080 0014             		move.b	#$80,obActWid(a0)
00018750 7000                       		moveq	#0,d0
00018752 1028 0028                  		move.b	obSubtype(a0),d0
00018756 0240 000F                  		andi.w	#$F,d0
0001875A C0FC 003C                  		mulu.w	#$3C,d0
0001875E 3140 0032                  		move.w	d0,spin_timelen(a0)
00018762 4A28 0028                  		tst.b	obSubtype(a0)	; is subtype $8x?
00018766 6A00                       		bpl.s	Spin_Trapdoor	; if not, branch
00018768                            
00018768 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Spin_Spinner next
0001876C 217C 0000 0000 0004        		move.l	#Map_Spin,obMap(a0)
00018774 317C 04DF 0002             		move.w	#$4DF,obGfx(a0)
0001877A 117C 0010 0014             		move.b	#$10,obActWid(a0)
00018780 117C 0002 001C             		move.b	#2,obAnim(a0)
00018786 7000                       		moveq	#0,d0
00018788 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
0001878C 3200                       		move.w	d0,d1
0001878E 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00018792 C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
00018796 3140 0030                  		move.w	d0,spin_timer(a0)
0001879A 3140 0032                  		move.w	d0,spin_timelen(a0) ; set time delay
0001879E 0241 0070                  		andi.w	#$70,d1
000187A2 0641 0010                  		addi.w	#$10,d1
000187A6 E549                       		lsl.w	#2,d1
000187A8 5341                       		subq.w	#1,d1
000187AA 3141 0036                  		move.w	d1,$36(a0)
000187AE 6000                       		bra.s	Spin_Spinner
000187B0                            ; ===========================================================================
000187B0                            
000187B0                            Spin_Trapdoor:	; Routine 2
000187B0 5368 0030                  		subq.w	#1,spin_timer(a0) ; decrement timer
000187B4 6A00                       		bpl.s	@animate	; if time remains, branch
000187B6                            
000187B6 3168 0032 0030             		move.w	spin_timelen(a0),spin_timer(a0)
000187BC 0868 0000 001C             		bchg	#0,obAnim(a0)
000187C2 4A28 0001                  		tst.b	obRender(a0)
000187C6 6A00                       		bpl.s	@animate
000187D2                            
000187D2                            	@animate:
000187D2 43F9 0000 0000             		lea	(Ani_Spin).l,a1
000187D8 4EB9 0000 C938             		jsr	(AnimateSprite).l
000187DE 4A28 001A                  		tst.b	obFrame(a0)	; is frame number 0 displayed?
000187E2 6600                       		bne.s	@notsolid	; if not, branch
000187E4 323C 004B                  		move.w	#$4B,d1
000187E8 343C 000C                  		move.w	#$C,d2
000187EC 3602                       		move.w	d2,d3
000187EE 5243                       		addq.w	#1,d3
000187F0 3828 0008                  		move.w	obX(a0),d4
000187F4 6100 94A4                  		bsr.w	SolidObject
000187F8 6000 9008                  		bra.w	RememberState
000187FC                            ; ===========================================================================
000187FC                            
000187FC                            @notsolid:
000187FC 0828 0003 0022             		btst	#3,obStatus(a0) ; is Sonic standing on the trapdoor?
00018802 6700                       		beq.s	@display	; if not, branch
00018804 43F8 D000                  		lea	(v_player).w,a1
00018808 08A9 0003 0022             		bclr	#3,obStatus(a1)
0001880E 08A8 0003 0022             		bclr	#3,obStatus(a0)
00018814 4228 0025                  		clr.b	obSolid(a0)
00018818                            
00018818                            	@display:
00018818 6000 8FE8                  		bra.w	RememberState
0001881C                            ; ===========================================================================
0001881C                            
0001881C                            Spin_Spinner:	; Routine 4
0001881C 3038 FE04                  		move.w	(v_framecount).w,d0
00018820 C068 0036                  		and.w	$36(a0),d0
00018824 6600                       		bne.s	@delay
00018826 117C 0001 0034             		move.b	#1,$34(a0)
0001882C                            
0001882C                            	@delay:
0001882C 4A28 0034                  		tst.b	$34(a0)
00018830 6700                       		beq.s	@animate
00018832 5368 0030                  		subq.w	#1,spin_timer(a0)
00018836 6A00                       		bpl.s	@animate
00018838 3168 0032 0030             		move.w	spin_timelen(a0),spin_timer(a0)
0001883E 4228 0034                  		clr.b	$34(a0)
00018842 0868 0000 001C             		bchg	#0,obAnim(a0)
00018848                            
00018848                            	@animate:
00018848 43F9 0000 0000             		lea	(Ani_Spin).l,a1
0001884E 4EB9 0000 C938             		jsr	(AnimateSprite).l
00018854 4A28 001A                  		tst.b	obFrame(a0)	; check	if frame number	0 is displayed
00018858 6600                       		bne.s	@notsolid2	; if not, branch
0001885A 323C 001B                  		move.w	#$1B,d1
0001885E 343C 0007                  		move.w	#7,d2
00018862 3602                       		move.w	d2,d3
00018864 5243                       		addq.w	#1,d3
00018866 3828 0008                  		move.w	obX(a0),d4
0001886A 6100 942E                  		bsr.w	SolidObject
0001886E 6000 8F92                  		bra.w	RememberState
00018872                            ; ===========================================================================
00018872                            
00018872                            @notsolid2:
00018872 0828 0003 0022             		btst	#3,obStatus(a0)
00018878 6700                       		beq.s	@display
0001887A 43F8 D000                  		lea	(v_player).w,a1
0001887E 08A9 0003 0022             		bclr	#3,obStatus(a1)
00018884 08A8 0003 0022             		bclr	#3,obStatus(a0)
0001888A 4228 0025                  		clr.b	obSolid(a0)
0001888E                            
0001888E                            	@display:
0001888E 6000 8F72                  		bra.w	RememberState
0001888E 6000 8F72                  		bra.w	RememberState
00018892                            		include	"_anim\SBZ Spinning Platforms.asm"
00018892                            ; ---------------------------------------------------------------------------
00018892                            ; Animation script - trapdoor (SBZ)
00018892                            ; ---------------------------------------------------------------------------
00018892 0000                       Ani_Spin:	dc.w @trapopen-Ani_Spin
00018894 0000                       		dc.w @trapclose-Ani_Spin
00018896 0000                       		dc.w @spin1-Ani_Spin
00018898 0000                       		dc.w @spin2-Ani_Spin
0001889A 0300 0102 FE01             @trapopen:	dc.b 3,	0, 1, 2, afBack, 1
000188A0 0302 0100 FE01             @trapclose:	dc.b 3,	2, 1, 0, afBack, 1
000188A6 0100 0102 0304 4342 4140+  @spin1:		dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63, $64, $23, $22, $21, 0, afBack, 1
000188BA 0100 0102 0304 4342 4140+  @spin2:		dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63, $64, $23, $22, $21, 0, afBack, 1
000188CE                            		even
000188CE                            		even
000188CE                            Map_Trap:	include	"_maps\Trapdoor.asm"
000188CE                            ; ---------------------------------------------------------------------------
000188CE                            ; Sprite mappings - trapdoor (SBZ)
000188CE                            ; ---------------------------------------------------------------------------
000188CE                            Map_Trap_internal:
000188CE 0000                       		dc.w @closed-Map_Trap_internal
000188D0 0000                       		dc.w @half-Map_Trap_internal
000188D2 0000                       		dc.w @open-Map_Trap_internal
000188D4 04                         @closed:	dc.b 4
000188D5 F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
000188DA F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
000188DF F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
000188E4 F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
000188E9 08                         @half:		dc.b 8
000188EA F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
000188EF 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
000188F4 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
000188F9 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
000188FE F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
00018903 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
00018908 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
0001890D 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
00018912 04                         @open:		dc.b 4
00018913 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
00018918 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
0001891D 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
00018922 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
00018928 00                         		even
00018928 00                         		even
00018928                            Map_Spin:	include	"_maps\SBZ Spinning Platforms.asm"
00018928                            ; ---------------------------------------------------------------------------
00018928                            ; Sprite mappings - spinning platforms (SBZ)
00018928                            ; ---------------------------------------------------------------------------
00018928                            Map_Spin_internal:
00018928 0000                       		dc.w @flat-Map_Spin_internal
0001892A 0000                       		dc.w @spin1-Map_Spin_internal
0001892C 0000                       		dc.w @spin2-Map_Spin_internal
0001892E 0000                       		dc.w @spin3-Map_Spin_internal
00018930 0000                       		dc.w @spin4-Map_Spin_internal
00018932 02                         @flat:		dc.b 2
00018933 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00018938 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
0001893D 02                         @spin1:		dc.b 2
0001893E F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
00018943 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
00018948 02                         @spin2:		dc.b 2
00018949 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
0001894E 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
00018953 02                         @spin3:		dc.b 2
00018954 F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
00018959 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
0001895E 02                         @spin4:		dc.b 2
0001895F F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
00018964 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
0001896A 00                         		even
0001896A 00                         		even
0001896A                            		include	"_incObj\6A Saws and Pizza Cutters.asm"
0001896A                            ; ---------------------------------------------------------------------------
0001896A                            ; Object 6A - ground saws and pizza cutters (SBZ)
0001896A                            ; ---------------------------------------------------------------------------
0001896A                            
0001896A                            Saws:
0001896A 7000                       		moveq	#0,d0
0001896C 1028 0024                  		move.b	obRoutine(a0),d0
00018970 323B 0000                  		move.w	Saw_Index(pc,d0.w),d1
00018974 4EFB 1000                  		jmp	Saw_Index(pc,d1.w)
00018978                            ; ===========================================================================
00018978 0000                       Saw_Index:	dc.w Saw_Main-Saw_Index
0001897A 0000                       		dc.w Saw_Action-Saw_Index
0001897C                            
0001897C =0000003A                  saw_origX:	equ $3A		; original x-axis position
0001897C =00000038                  saw_origY:	equ $38		; original y-axis position
0001897C =0000003D                  saw_here:	equ $3D		; flag set when the ground saw appears
0001897C                            ; ===========================================================================
0001897C                            
0001897C                            Saw_Main:	; Routine 0
0001897C 5428 0024                  		addq.b	#2,obRoutine(a0)
00018980 217C 0000 0000 0004        		move.l	#Map_Saw,obMap(a0)
00018988 317C 43AD 0002             		move.w	#$43AD,obGfx(a0)
0001898E 117C 0004 0001             		move.b	#4,obRender(a0)
00018994 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001899A 117C 0020 0014             		move.b	#$20,obActWid(a0)
000189A0 3168 0008 003A             		move.w	obX(a0),saw_origX(a0)
000189A6 3168 000C 0038             		move.w	obY(a0),saw_origY(a0)
000189AC 0C28 0003 0028             		cmpi.b	#3,obSubtype(a0) ; is object a ground saw?
000189B2 6400                       		bcc.s	Saw_Action	; if yes, branch
000189B4 117C 00A2 0020             		move.b	#$A2,obColType(a0)
000189BA                            
000189BA                            Saw_Action:	; Routine 2
000189BA 7000                       		moveq	#0,d0
000189BC 1028 0028                  		move.b	obSubtype(a0),d0
000189C0 0240 0007                  		andi.w	#7,d0
000189C4 D040                       		add.w	d0,d0
000189C6 323B 0000                  		move.w	@index(pc,d0.w),d1
000189CA 4EBB 1000                  		jsr	@index(pc,d1.w)
000189EA 4EF9 0000 F88C             		jmp	(DisplaySprite).l
000189F0                            
000189F0                            	@delete:
000189F0 4EF9 0000 F8CC             		jmp	(DeleteObject).l
000189F6                            ; ===========================================================================
000189F6 0000 0000 0000             @index:		dc.w @type00-@index, @type01-@index, @type02-@index ; pizza cutters
000189FC 0000 0000                  		dc.w @type03-@index, @type04-@index ; ground saws
00018A00                            ; ===========================================================================
00018A00                            
00018A00                            @type00:
00018A00 4E75                       		rts			; doesn't move
00018A02                            ; ===========================================================================
00018A02                            
00018A02                            @type01:
00018A02 323C 0060                  		move.w	#$60,d1
00018A06 7000                       		moveq	#0,d0
00018A08 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
00018A0C 0828 0000 0022             		btst	#0,obStatus(a0)
00018A12 6700                       		beq.s	@noflip01
00018A14 4440                       		neg.w	d0
00018A16 D041                       		add.w	d1,d0
00018A18                            
00018A18                            	@noflip01:
00018A18 3228 003A                  		move.w	saw_origX(a0),d1
00018A1C 9240                       		sub.w	d0,d1
00018A1E 3141 0008                  		move.w	d1,obX(a0)	; move saw sideways
00018A22                            
00018A22 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00018A26 6A00                       		bpl.s	@sameframe01
00018A28 117C 0002 001E             		move.b	#2,obTimeFrame(a0) ; time between frame changes
00018A2E 0868 0000 001A             		bchg	#0,obFrame(a0)	; change frame
00018A34                            
00018A34                            	@sameframe01:
00018A34 4A28 0001                  		tst.b	obRender(a0)
00018A38 6A00                       		bpl.s	@nosound01
00018A3A 3038 FE04                  		move.w	(v_framecount).w,d0
00018A3E 0240 000F                  		andi.w	#$F,d0
00018A42 6600                       		bne.s	@nosound01
00018A4E                            
00018A4E                            	@nosound01:
00018A4E 4E75                       		rts	
00018A50                            ; ===========================================================================
00018A50                            
00018A50                            @type02:
00018A50 323C 0030                  		move.w	#$30,d1
00018A54 7000                       		moveq	#0,d0
00018A56 1038 FE64                  		move.b	(v_oscillate+6).w,d0
00018A5A 0828 0000 0022             		btst	#0,obStatus(a0)
00018A60 6700                       		beq.s	@noflip02
00018A62 4440                       		neg.w	d0
00018A64 0640 0080                  		addi.w	#$80,d0
00018A68                            
00018A68                            	@noflip02:
00018A68 3228 0038                  		move.w	saw_origY(a0),d1
00018A6C 9240                       		sub.w	d0,d1
00018A6E 3141 000C                  		move.w	d1,obY(a0)	; move saw vertically
00018A72 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00018A76 6A00                       		bpl.s	@sameframe02
00018A78 117C 0002 001E             		move.b	#2,obTimeFrame(a0)
00018A7E 0868 0000 001A             		bchg	#0,obFrame(a0)
00018A84                            
00018A84                            	@sameframe02:
00018A84 4A28 0001                  		tst.b	obRender(a0)
00018A88 6A00                       		bpl.s	@nosound02
00018A8A 1038 FE64                  		move.b	(v_oscillate+6).w,d0
00018A8E 0C00 0018                  		cmpi.b	#$18,d0
00018A92 6600                       		bne.s	@nosound02
00018A9E                            
00018A9E                            	@nosound02:
00018A9E 4E75                       		rts	
00018AA0                            ; ===========================================================================
00018AA0                            
00018AA0                            @type03:
00018AA0 4A28 003D                  		tst.b	saw_here(a0)	; has the saw appeared already?
00018AA4 6600                       		bne.s	@here03		; if yes, branch
00018AA6                            
00018AA6 3038 D008                  		move.w	(v_player+obX).w,d0
00018AAA 0440 00C0                  		subi.w	#$C0,d0
00018AAE 6500                       		bcs.s	@nosaw03x
00018AB0 9068 0008                  		sub.w	obX(a0),d0
00018AB4 6500                       		bcs.s	@nosaw03x
00018AB6 3038 D00C                  		move.w	(v_player+obY).w,d0
00018ABA 0440 0080                  		subi.w	#$80,d0
00018ABE B068 000C                  		cmp.w	obY(a0),d0
00018AC2 6400                       		bcc.s	@nosaw03y
00018AC4 0640 0100                  		addi.w	#$100,d0
00018AC8 B068 000C                  		cmp.w	obY(a0),d0
00018ACC 6500                       		bcs.s	@nosaw03y
00018ACE 117C 0001 003D             		move.b	#1,saw_here(a0)
00018AD4 317C 0600 0010             		move.w	#$600,obVelX(a0) ; move object to the right
00018ADA 117C 00A2 0020             		move.b	#$A2,obColType(a0)
00018AE0 117C 0002 001A             		move.b	#2,obFrame(a0)
00018AF0                            
00018AF0                            	@nosaw03x:
00018AF0 588F                       		addq.l	#4,sp
00018AF2                            
00018AF2                            	@nosaw03y:
00018AF2 4E75                       		rts	
00018AF4                            ; ===========================================================================
00018AF4                            
00018AF4                            @here03:
00018AF4 4EB9 0000 F878             		jsr	(SpeedToPos).l
00018AFA 3168 0008 003A             		move.w	obX(a0),saw_origX(a0)
00018B00 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00018B04 6A00                       		bpl.s	@sameframe03
00018B06 117C 0002 001E             		move.b	#2,obTimeFrame(a0)
00018B0C 0868 0000 001A             		bchg	#0,obFrame(a0)
00018B12                            
00018B12                            	@sameframe03:
00018B12 4E75                       		rts	
00018B14                            ; ===========================================================================
00018B14                            
00018B14                            @type04:
00018B14 4A28 003D                  		tst.b	saw_here(a0)
00018B18 6600                       		bne.s	@here04
00018B1A 3038 D008                  		move.w	(v_player+obX).w,d0
00018B1E 0640 00E0                  		addi.w	#$E0,d0
00018B22 9068 0008                  		sub.w	obX(a0),d0
00018B26 6400                       		bcc.s	@nosaw04x
00018B28 3038 D00C                  		move.w	(v_player+obY).w,d0
00018B2C 0440 0080                  		subi.w	#$80,d0
00018B30 B068 000C                  		cmp.w	obY(a0),d0
00018B34 6400                       		bcc.s	@nosaw04y
00018B36 0640 0100                  		addi.w	#$100,d0
00018B3A B068 000C                  		cmp.w	obY(a0),d0
00018B3E 6500                       		bcs.s	@nosaw04y
00018B40 117C 0001 003D             		move.b	#1,saw_here(a0)
00018B46 317C FA00 0010             		move.w	#-$600,obVelX(a0) ; move object to the left
00018B4C 117C 00A2 0020             		move.b	#$A2,obColType(a0)
00018B52 117C 0002 001A             		move.b	#2,obFrame(a0)
00018B62                            
00018B62                            	@nosaw04x:
00018B62 588F                       		addq.l	#4,sp
00018B64                            
00018B64                            	@nosaw04y:
00018B64 4E75                       		rts	
00018B66                            ; ===========================================================================
00018B66                            
00018B66                            @here04:
00018B66 4EB9 0000 F878             		jsr	(SpeedToPos).l
00018B6C 3168 0008 003A             		move.w	obX(a0),saw_origX(a0)
00018B72 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00018B76 6A00                       		bpl.s	@sameframe04
00018B78 117C 0002 001E             		move.b	#2,obTimeFrame(a0)
00018B7E 0868 0000 001A             		bchg	#0,obFrame(a0)
00018B84                            
00018B84                            	@sameframe04:
00018B84 4E75                       		rts	
00018B84 4E75                       		rts	
00018B86                            Map_Saw:	include	"_maps\Saws and Pizza Cutters.asm"
00018B86                            ; ---------------------------------------------------------------------------
00018B86                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00018B86                            ; ---------------------------------------------------------------------------
00018B86                            Map_Saw_internal:
00018B86 0000                       		dc.w @pizzacutter1-Map_Saw_internal
00018B88 0000                       		dc.w @pizzacutter2-Map_Saw_internal
00018B8A 0000                       		dc.w @groundsaw1-Map_Saw_internal
00018B8C 0000                       		dc.w @groundsaw2-Map_Saw_internal
00018B8E 07                         @pizzacutter1:	dc.b 7
00018B8F C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00018B94 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00018B99 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00018B9E E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00018BA3 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00018BA8 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00018BAD 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00018BB2 07                         @pizzacutter2:	dc.b 7
00018BB3 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00018BB8 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00018BBD E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00018BC2 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00018BC7 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00018BCC 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00018BD1 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00018BD6 04                         @groundsaw1:	dc.b 4
00018BD7 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00018BDC E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00018BE1 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00018BE6 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00018BEB 04                         @groundsaw2:	dc.b 4
00018BEC E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00018BF1 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00018BF6 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00018BFB 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00018C00                            		even
00018C00                            		even
00018C00                            		include	"_incObj\6B SBZ Stomper and Door.asm"
00018C00                            ; ---------------------------------------------------------------------------
00018C00                            ; Object 6B - stomper and sliding door (SBZ)
00018C00                            ; ---------------------------------------------------------------------------
00018C00                            
00018C00                            ScrapStomp:
00018C00 7000                       		moveq	#0,d0
00018C02 1028 0024                  		move.b	obRoutine(a0),d0
00018C06 323B 0000                  		move.w	Sto_Index(pc,d0.w),d1
00018C0A 4EFB 1000                  		jmp	Sto_Index(pc,d1.w)
00018C0E                            ; ===========================================================================
00018C0E 0000                       Sto_Index:	dc.w Sto_Main-Sto_Index
00018C10 0000                       		dc.w Sto_Action-Sto_Index
00018C12                            
00018C12 =00000016                  sto_height:	equ $16
00018C12 =00000034                  sto_origX:	equ $34		; original x-axis position
00018C12 =00000030                  sto_origY:	equ $30		; original y-axis position
00018C12 =00000038                  sto_active:	equ $38		; flag set when a switch is pressed
00018C12                            
00018C12 400C 8001                  Sto_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
00018C16 1C20 3803                  		dc.b  $1C, $20,	$38,   3
00018C1A 1C20 4004                  		dc.b  $1C, $20,	$40,   4
00018C1E 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00018C22 8040 0005                  		dc.b  $80, $40,	  0,   5
00018C26                            ; ===========================================================================
00018C26                            
00018C26                            Sto_Main:	; Routine 0
00018C26 5428 0024                  		addq.b	#2,obRoutine(a0)
00018C2A 7000                       		moveq	#0,d0
00018C2C 1028 0028                  		move.b	obSubtype(a0),d0
00018C30 E448                       		lsr.w	#2,d0
00018C32 0240 001C                  		andi.w	#$1C,d0
00018C36 47FB 00DA                  		lea	Sto_Var(pc,d0.w),a3
00018C3A 115B 0014                  		move.b	(a3)+,obActWid(a0)
00018C3E 115B 0016                  		move.b	(a3)+,sto_height(a0)
00018C42 E448                       		lsr.w	#2,d0
00018C44 1140 001A                  		move.b	d0,obFrame(a0)
00018C48 217C 0000 0000 0004        		move.l	#Map_Stomp,obMap(a0)
00018C50 317C 22C0 0002             		move.w	#$22C0,obGfx(a0)
00018C56 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ/SBZ3
00018C5C 6600                       		bne.s	@isSBZ12	; if not, branch
00018C5E 08F8 0000 F7CB             		bset	#0,(v_obj6B).w
00018C64 6700                       		beq.s	@isSBZ3
00018C66                            
00018C66                            @chkdel:
00018C66 45F8 FC00                  		lea	(v_objstate).w,a2
00018C6A 7000                       		moveq	#0,d0
00018C6C 1028 0023                  		move.b	obRespawnNo(a0),d0
00018C70 6700                       		beq.s	@delete
00018C72 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00018C78                            
00018C78                            	@delete:
00018C78 4EF9 0000 F8CC             		jmp	(DeleteObject).l
00018C7E                            ; ===========================================================================
00018C7E                            
00018C7E                            @isSBZ3:
00018C7E 317C 41F0 0002             		move.w	#$41F0,obGfx(a0)
00018C84 0C68 0A80 0008             		cmpi.w	#$A80,obX(a0)
00018C8A 6600                       		bne.s	@isSBZ12
00018C8C 45F8 FC00                  		lea	(v_objstate).w,a2
00018C90 7000                       		moveq	#0,d0
00018C92 1028 0023                  		move.b	obRespawnNo(a0),d0
00018C96 6700                       		beq.s	@isSBZ12
00018C98 0832 0000 0002             		btst	#0,2(a2,d0.w)
00018C9E 6700                       		beq.s	@isSBZ12
00018CA0 4238 F7CB                  		clr.b	(v_obj6B).w
00018CA4 60C0                       		bra.s	@chkdel
00018CA6                            ; ===========================================================================
00018CA6                            
00018CA6                            @isSBZ12:
00018CA6 0028 0004 0001             		ori.b	#4,obRender(a0)
00018CAC 317C 0200 0018             		move.w	#$200,obPriority(a0)
00018CB2 3168 0008 0034             		move.w	obX(a0),sto_origX(a0)
00018CB8 3168 000C 0030             		move.w	obY(a0),sto_origY(a0)
00018CBE 7000                       		moveq	#0,d0
00018CC0 101B                       		move.b	(a3)+,d0
00018CC2 3140 003C                  		move.w	d0,$3C(a0)
00018CC6 7000                       		moveq	#0,d0
00018CC8 1028 0028                  		move.b	obSubtype(a0),d0
00018CCC 6A00                       		bpl.s	Sto_Action
00018CCE 0200 000F                  		andi.b	#$F,d0
00018CD2 1140 003E                  		move.b	d0,$3E(a0)
00018CD6 1153 0028                  		move.b	(a3),obSubtype(a0)
00018CDA 0C13 0005                  		cmpi.b	#5,(a3)
00018CDE 6600                       		bne.s	@chkgone
00018CE0 08E8 0004 0001             		bset	#4,obRender(a0)
00018CE6                            
00018CE6                            	@chkgone:
00018CE6 45F8 FC00                  		lea	(v_objstate).w,a2
00018CEA 7000                       		moveq	#0,d0
00018CEC 1028 0023                  		move.b	obRespawnNo(a0),d0
00018CF0 6700                       		beq.s	Sto_Action
00018CF2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00018CF8                            
00018CF8                            Sto_Action:	; Routine 2
00018CF8 3F28 0008                  		move.w	obX(a0),-(sp)
00018CFC 7000                       		moveq	#0,d0
00018CFE 1028 0028                  		move.b	obSubtype(a0),d0
00018D02 0240 000F                  		andi.w	#$F,d0
00018D06 D040                       		add.w	d0,d0
00018D08 323B 0000                  		move.w	@index(pc,d0.w),d1
00018D0C 4EBB 1000                  		jsr	@index(pc,d1.w)
00018D10 381F                       		move.w	(sp)+,d4
00018D12 4A28 0001                  		tst.b	obRender(a0)
00018D16 6A00                       		bpl.s	@chkdel
00018D18 7200                       		moveq	#0,d1
00018D1A 1228 0014                  		move.b	obActWid(a0),d1
00018D1E 0641 000B                  		addi.w	#$B,d1
00018D22 7400                       		moveq	#0,d2
00018D24 1428 0016                  		move.b	sto_height(a0),d2
00018D28 3602                       		move.w	d2,d3
00018D2A 5243                       		addq.w	#1,d3
00018D2C 6100 8F6C                  		bsr.w	SolidObject
00018D30                            
00018D30                            	@chkdel:
00018D4C 4EF9 0000 F88C             		jmp	(DisplaySprite).l
00018D52                            
00018D52                            	@chkgone:
00018D52 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w
00018D58 6600                       		bne.s	@delete
00018D5A 4238 F7CB                  		clr.b	(v_obj6B).w
00018D5E 45F8 FC00                  		lea	(v_objstate).w,a2
00018D62 7000                       		moveq	#0,d0
00018D64 1028 0023                  		move.b	obRespawnNo(a0),d0
00018D68 6700                       		beq.s	@delete
00018D6A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00018D70                            
00018D70                            	@delete:
00018D70 4EF9 0000 F8CC             		jmp	(DeleteObject).l
00018D76                            ; ===========================================================================
00018D76 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00018D7A 0000 0000                  		dc.w @type02-@index, @type03-@index
00018D7E 0000 0000                  		dc.w @type04-@index, @type05-@index
00018D82                            ; ===========================================================================
00018D82                            
00018D82                            @type00:
00018D82 4E75                       		rts
00018D84                            ; ===========================================================================
00018D84                            
00018D84                            @type01:
00018D84 4A28 0038                  		tst.b	sto_active(a0)
00018D88 6600                       		bne.s	@isactive01
00018D8A 45F8 F7E0                  		lea	(f_switch).w,a2
00018D8E 7000                       		moveq	#0,d0
00018D90 1028 003E                  		move.b	$3E(a0),d0
00018D94 0832 0000 0000             		btst	#0,(a2,d0.w)
00018D9A 6700                       		beq.s	@loc_15DC2
00018D9C 117C 0001 0038             		move.b	#1,sto_active(a0)
00018DA2                            
00018DA2                            	@isactive01:
00018DA2 3028 003C                  		move.w	$3C(a0),d0
00018DA6 B068 003A                  		cmp.w	$3A(a0),d0
00018DAA 6700                       		beq.s	@loc_15DE0
00018DAC 5468 003A                  		addq.w	#2,$3A(a0)
00018DB0                            
00018DB0                            	@loc_15DC2:
00018DB0 3028 003A                  		move.w	$3A(a0),d0
00018DB4 0828 0000 0022             		btst	#0,obStatus(a0)
00018DBA 6700                       		beq.s	@noflip01
00018DBC 4440                       		neg.w	d0
00018DBE 0640 0080                  		addi.w	#$80,d0
00018DC2                            
00018DC2                            	@noflip01:
00018DC2 3228 0034                  		move.w	sto_origX(a0),d1
00018DC6 9240                       		sub.w	d0,d1
00018DC8 3141 0008                  		move.w	d1,obX(a0)
00018DCC 4E75                       		rts	
00018DCE                            ; ===========================================================================
00018DCE                            
00018DCE                            @loc_15DE0:
00018DCE 5228 0028                  		addq.b	#1,obSubtype(a0)
00018DD2 317C 00B4 0036             		move.w	#$B4,$36(a0)
00018DD8 4228 0038                  		clr.b	sto_active(a0)
00018DDC 45F8 FC00                  		lea	(v_objstate).w,a2
00018DE0 7000                       		moveq	#0,d0
00018DE2 1028 0023                  		move.b	obRespawnNo(a0),d0
00018DE6 67C8                       		beq.s	@loc_15DC2
00018DE8 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00018DEE 60C0                       		bra.s	@loc_15DC2
00018DF0                            ; ===========================================================================
00018DF0                            
00018DF0                            @type02:
00018DF0 4A28 0038                  		tst.b	sto_active(a0)
00018DF4 6600                       		bne.s	@isactive02
00018DF6 5368 0036                  		subq.w	#1,$36(a0)
00018DFA 6600                       		bne.s	@loc_15E1E
00018DFC 117C 0001 0038             		move.b	#1,sto_active(a0)
00018E02                            
00018E02                            	@isactive02:
00018E02 4A68 003A                  		tst.w	$3A(a0)
00018E06 6700                       		beq.s	@loc_15E3C
00018E08 5568 003A                  		subq.w	#2,$3A(a0)
00018E0C                            
00018E0C                            	@loc_15E1E:
00018E0C 3028 003A                  		move.w	$3A(a0),d0
00018E10 0828 0000 0022             		btst	#0,obStatus(a0)
00018E16 6700                       		beq.s	@noflip02
00018E18 4440                       		neg.w	d0
00018E1A 0640 0080                  		addi.w	#$80,d0
00018E1E                            
00018E1E                            	@noflip02:
00018E1E 3228 0034                  		move.w	sto_origX(a0),d1
00018E22 9240                       		sub.w	d0,d1
00018E24 3141 0008                  		move.w	d1,obX(a0)
00018E28 4E75                       		rts	
00018E2A                            ; ===========================================================================
00018E2A                            
00018E2A                            @loc_15E3C:
00018E2A 5328 0028                  		subq.b	#1,obSubtype(a0)
00018E2E 4228 0038                  		clr.b	sto_active(a0)
00018E32 45F8 FC00                  		lea	(v_objstate).w,a2
00018E36 7000                       		moveq	#0,d0
00018E38 1028 0023                  		move.b	obRespawnNo(a0),d0
00018E3C 67CE                       		beq.s	@loc_15E1E
00018E3E 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00018E44 60C6                       		bra.s	@loc_15E1E
00018E46                            ; ===========================================================================
00018E46                            
00018E46                            @type03:
00018E46 4A28 0038                  		tst.b	sto_active(a0)
00018E4A 6600                       		bne.s	@isactive03
00018E4C 4A68 003A                  		tst.w	$3A(a0)
00018E50 6700                       		beq.s	@loc_15E6A
00018E52 5368 003A                  		subq.w	#1,$3A(a0)
00018E56 6000                       		bra.s	@loc_15E8E
00018E58                            ; ===========================================================================
00018E58                            
00018E58                            @loc_15E6A:
00018E58 5368 0036                  		subq.w	#1,$36(a0)
00018E5C 6A00                       		bpl.s	@loc_15E8E
00018E5E 317C 003C 0036             		move.w	#$3C,$36(a0)
00018E64 117C 0001 0038             		move.b	#1,sto_active(a0)
00018E6A                            
00018E6A                            @isactive03:
00018E6A 5068 003A                  		addq.w	#8,$3A(a0)
00018E6E 3028 003A                  		move.w	$3A(a0),d0
00018E72 B068 003C                  		cmp.w	$3C(a0),d0
00018E76 6600                       		bne.s	@loc_15E8E
00018E78 4228 0038                  		clr.b	sto_active(a0)
00018E7C                            
00018E7C                            @loc_15E8E:
00018E7C 3028 003A                  		move.w	$3A(a0),d0
00018E80 0828 0000 0022             		btst	#0,obStatus(a0)
00018E86 6700                       		beq.s	@noflip03
00018E88 4440                       		neg.w	d0
00018E8A 0640 0038                  		addi.w	#$38,d0
00018E8E                            
00018E8E                            	@noflip03:
00018E8E 3228 0030                  		move.w	sto_origY(a0),d1
00018E92 D240                       		add.w	d0,d1
00018E94 3141 000C                  		move.w	d1,obY(a0)
00018E98 4E75                       		rts	
00018E9A                            ; ===========================================================================
00018E9A                            
00018E9A                            @type04:
00018E9A 4A28 0038                  		tst.b	sto_active(a0)
00018E9E 6600                       		bne.s	@isactive04
00018EA0 4A68 003A                  		tst.w	$3A(a0)
00018EA4 6700                       		beq.s	@loc_15EBE
00018EA6 5168 003A                  		subq.w	#8,$3A(a0)
00018EAA 6000                       		bra.s	@loc_15EF0
00018EAC                            ; ===========================================================================
00018EAC                            
00018EAC                            @loc_15EBE:
00018EAC 5368 0036                  		subq.w	#1,$36(a0)
00018EB0 6A00                       		bpl.s	@loc_15EF0
00018EB2 317C 003C 0036             		move.w	#$3C,$36(a0)
00018EB8 117C 0001 0038             		move.b	#1,sto_active(a0)
00018EBE                            
00018EBE                            @isactive04:
00018EBE 3028 003A                  		move.w	$3A(a0),d0
00018EC2 B068 003C                  		cmp.w	$3C(a0),d0
00018EC6 6700                       		beq.s	@loc_15EE0
00018EC8 5068 003A                  		addq.w	#8,$3A(a0)
00018ECC 6000                       		bra.s	@loc_15EF0
00018ECE                            ; ===========================================================================
00018ECE                            
00018ECE                            @loc_15EE0:
00018ECE 5368 0036                  		subq.w	#1,$36(a0)
00018ED2 6A00                       		bpl.s	@loc_15EF0
00018ED4 317C 003C 0036             		move.w	#$3C,$36(a0)
00018EDA 4228 0038                  		clr.b	sto_active(a0)
00018EDE                            
00018EDE                            @loc_15EF0:
00018EDE 3028 003A                  		move.w	$3A(a0),d0
00018EE2 0828 0000 0022             		btst	#0,obStatus(a0)
00018EE8 6700                       		beq.s	@noflip04
00018EEA 4440                       		neg.w	d0
00018EEC 0640 0038                  		addi.w	#$38,d0
00018EF0                            
00018EF0                            	@noflip04:
00018EF0 3228 0030                  		move.w	sto_origY(a0),d1
00018EF4 D240                       		add.w	d0,d1
00018EF6 3141 000C                  		move.w	d1,obY(a0)
00018EFA 4E75                       		rts	
00018EFC                            ; ===========================================================================
00018EFC                            
00018EFC                            @type05:
00018EFC 4A28 0038                  		tst.b	sto_active(a0)
00018F00 6600                       		bne.s	@loc_15F3E
00018F02 45F8 F7E0                  		lea	(f_switch).w,a2
00018F06 7000                       		moveq	#0,d0
00018F08 1028 003E                  		move.b	$3E(a0),d0
00018F0C 0832 0000 0000             		btst	#0,(a2,d0.w)
00018F12 6700                       		beq.s	@locret_15F5C
00018F14 117C 0001 0038             		move.b	#1,sto_active(a0)
00018F1A 45F8 FC00                  		lea	(v_objstate).w,a2
00018F1E 7000                       		moveq	#0,d0
00018F20 1028 0023                  		move.b	obRespawnNo(a0),d0
00018F24 6700                       		beq.s	@loc_15F3E
00018F26 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00018F2C                            
00018F2C                            @loc_15F3E:
00018F2C 04A8 0001 0000 0008        		subi.l	#$10000,obX(a0)
00018F34 06A8 0000 8000 000C        		addi.l	#$8000,obY(a0)
00018F3C 3168 0008 0034             		move.w	obX(a0),sto_origX(a0)
00018F42 0C68 0980 0008             		cmpi.w	#$980,obX(a0)
00018F48 6700                       		beq.s	@loc_15F5E
00018F4A                            
00018F4A                            @locret_15F5C:
00018F4A 4E75                       		rts	
00018F4C                            ; ===========================================================================
00018F4C                            
00018F4C                            @loc_15F5E:
00018F4C 4228 0028                  		clr.b	obSubtype(a0)
00018F50 4228 0038                  		clr.b	sto_active(a0)
00018F54 4E75                       		rts	
00018F54 4E75                       		rts	
00018F56                            Map_Stomp:	include	"_maps\SBZ Stomper and Door.asm"
00018F56                            ; ---------------------------------------------------------------------------
00018F56                            ; Sprite mappings - stomper and	platforms (SBZ)
00018F56                            ; ---------------------------------------------------------------------------
00018F56                            Map_Stomp_internal:
00018F56 0000                       		dc.w @door-Map_Stomp_internal
00018F58 0000                       		dc.w @stomper-Map_Stomp_internal
00018F5A 0000                       		dc.w @stomper-Map_Stomp_internal
00018F5C 0000                       		dc.w @stomper-Map_Stomp_internal
00018F5E 0000                       		dc.w @bigdoor-Map_Stomp_internal
00018F60 04                         @door:		dc.b 4
00018F61 F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0 ; horizontal sliding door
00018F66 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
00018F6B F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
00018F70 F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
00018F75 08                         @stomper:	dc.b 8
00018F76 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4 ; stomper block with yellow/black stripes
00018F7B E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
00018F80 E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
00018F85 E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
00018F8A 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
00018F8F 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
00018F94 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00018F99 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
00018F9E 0E                         @bigdoor:	dc.b $E
00018F9F C00F 0000 80               		dc.b $C0, $F, 0, 0, $80	; huge diagonal sliding door from SBZ3
00018FA4 C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
00018FA9 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
00018FAE C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
00018FB3 C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
00018FB8 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
00018FBD C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
00018FC2 C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
00018FC7 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
00018FCC E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
00018FD1 E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
00018FD6 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
00018FDB 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
00018FE0 200F 0058 80               		dc.b $20, $F, 0, $58, $80
00018FE6 00                         		even
00018FE6 00                         		even
00018FE6                            		include	"_incObj\6C SBZ Vanishing Platforms.asm"
00018FE6                            ; ---------------------------------------------------------------------------
00018FE6                            ; Object 6C - vanishing	platforms (SBZ)
00018FE6                            ; ---------------------------------------------------------------------------
00018FE6                            
00018FE6                            VanishPlatform:
00018FE6 7000                       		moveq	#0,d0
00018FE8 1028 0024                  		move.b	obRoutine(a0),d0
00018FEC 323B 0000                  		move.w	VanP_Index(pc,d0.w),d1
00018FF0 4EFB 1000                  		jmp	VanP_Index(pc,d1.w)
00018FF4                            ; ===========================================================================
00018FF4 0000                       VanP_Index:	dc.w VanP_Main-VanP_Index
00018FF6 0000                       		dc.w VanP_Vanish-VanP_Index
00018FF8 0000                       		dc.w VanP_Appear-VanP_Index
00018FFA 0000                       		dc.w loc_16068-VanP_Index
00018FFC                            
00018FFC =00000030                  vanp_timer:	equ $30		; counter for time until event
00018FFC =00000032                  vanp_timelen:	equ $32		; time between events (general)
00018FFC                            ; ===========================================================================
00018FFC                            
00018FFC                            VanP_Main:	; Routine 0
00018FFC 5C28 0024                  		addq.b	#6,obRoutine(a0)
00019000 217C 0000 0000 0004        		move.l	#Map_VanP,obMap(a0)
00019008 317C 44C3 0002             		move.w	#$44C3,obGfx(a0)
0001900E 0028 0004 0001             		ori.b	#4,obRender(a0)
00019014 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001901A 317C 0200 0018             		move.w	#$200,obPriority(a0)
00019020 7000                       		moveq	#0,d0
00019022 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00019026 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001902A 5240                       		addq.w	#1,d0		; add 1
0001902C EF48                       		lsl.w	#7,d0		; multiply by $80
0001902E 3200                       		move.w	d0,d1
00019030 5340                       		subq.w	#1,d0
00019032 3140 0030                  		move.w	d0,vanp_timer(a0)
00019036 3140 0032                  		move.w	d0,vanp_timelen(a0)
0001903A 7000                       		moveq	#0,d0
0001903C 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00019040 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
00019044 0641 0080                  		addi.w	#$80,d1
00019048 C0C1                       		mulu.w	d1,d0
0001904A E088                       		lsr.l	#8,d0
0001904C 3140 0036                  		move.w	d0,$36(a0)
00019050 5341                       		subq.w	#1,d1
00019052 3141 0038                  		move.w	d1,$38(a0)
00019056                            
00019056                            loc_16068:	; Routine 6
00019056 3038 FE04                  		move.w	(v_framecount).w,d0
0001905A 9068 0036                  		sub.w	$36(a0),d0
0001905E C068 0038                  		and.w	$38(a0),d0
00019062 6600                       		bne.s	@animate
00019064 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto VanP_Vanish next
00019068 6000                       		bra.s	VanP_Vanish
0001906A                            ; ===========================================================================
0001906A                            
0001906A                            @animate:
0001906A 43F9 0000 0000             		lea	(Ani_Van).l,a1
00019070 4EB9 0000 C938             		jsr	(AnimateSprite).l
00019076 6000 878A                  		bra.w	RememberState
0001907A                            ; ===========================================================================
0001907A                            
0001907A                            VanP_Vanish:	; Routine 2
0001907A                            VanP_Appear:	; Routine 4
0001907A 5368 0030                  		subq.w	#1,vanp_timer(a0)
0001907E 6A00                       		bpl.s	@wait
00019080 317C 007F 0030             		move.w	#127,vanp_timer(a0)
00019086 4A28 001C                  		tst.b	obAnim(a0)	; is platform vanishing?
0001908A 6700                       		beq.s	@isvanishing	; if yes, branch
0001908C 3168 0032 0030             		move.w	vanp_timelen(a0),vanp_timer(a0)
00019092                            
00019092                            	@isvanishing:
00019092 0868 0000 001C             		bchg	#0,obAnim(a0)
00019098                            
00019098                            	@wait:
00019098 43F9 0000 0000             		lea	(Ani_Van).l,a1
0001909E 4EB9 0000 C938             		jsr	(AnimateSprite).l
000190A4 0828 0001 001A             		btst	#1,obFrame(a0)	; has platform vanished?
000190AA 6600                       		bne.s	@notsolid	; if yes, branch
000190AC 0C28 0002 0024             		cmpi.b	#2,obRoutine(a0)
000190B2 6600                       		bne.s	@loc_160D6
000190B4 7200                       		moveq	#0,d1
000190B6 1228 0014                  		move.b	obActWid(a0),d1
000190BA 4EB9 0000 905A             		jsr	(PlatformObject).l
000190C0 6000 8740                  		bra.w	RememberState
000190C4                            ; ===========================================================================
000190C4                            
000190C4                            @loc_160D6:
000190C4 7200                       		moveq	#0,d1
000190C6 1228 0014                  		move.b	obActWid(a0),d1
000190CA 4EB9 0000 91CE             		jsr	(ExitPlatform).l
000190D0 3428 0008                  		move.w	obX(a0),d2
000190D4 4EB9 0000 9738             		jsr	(MvSonicOnPtfm2).l
000190DA 6000 8726                  		bra.w	RememberState
000190DE                            ; ===========================================================================
000190DE                            
000190DE                            @notsolid:
000190DE 0828 0003 0022             		btst	#3,obStatus(a0)
000190E4 6700                       		beq.s	@display
000190E6 43F8 D000                  		lea	(v_player).w,a1
000190EA 08A9 0003 0022             		bclr	#3,obStatus(a1)
000190F0 08A8 0003 0022             		bclr	#3,obStatus(a0)
000190F6 117C 0002 0024             		move.b	#2,obRoutine(a0)
000190FC 4228 0025                  		clr.b	obSolid(a0)
00019100                            
00019100                            	@display:
00019100 6000 8700                  		bra.w	RememberState
00019100 6000 8700                  		bra.w	RememberState
00019104                            		include	"_anim\SBZ Vanishing Platforms.asm"
00019104                            ; ---------------------------------------------------------------------------
00019104                            ; Animation script - vanishing platforms (SBZ)
00019104                            ; ---------------------------------------------------------------------------
00019104 0000                       Ani_Van:	dc.w @vanish-Ani_Van
00019106 0000                       		dc.w @appear-Ani_Van
00019108 0700 0102 03FE 01          @vanish:	dc.b 7,	0, 1, 2, 3, afBack, 1
00019110 00                         		even
00019110 0703 0201 00FE 01          @appear:	dc.b 7,	3, 2, 1, 0, afBack, 1
00019118 00                         		even
00019118 00                         		even
00019118                            Map_VanP:	include	"_maps\SBZ Vanishing Platforms.asm"
00019118                            ; ---------------------------------------------------------------------------
00019118                            ; Sprite mappings - vanishing platforms	(SBZ)
00019118                            ; ---------------------------------------------------------------------------
00019118                            Map_VanP_internal:
00019118 0000                       		dc.w @whole-Map_VanP_internal
0001911A 0000                       		dc.w @half-Map_VanP_internal
0001911C 0000                       		dc.w @quarter-Map_VanP_internal
0001911E 0000                       		dc.w @gone-Map_VanP_internal
00019120 01                         @whole:		dc.b 1
00019121 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00019126 01                         @half:		dc.b 1
00019127 F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
0001912C 01                         @quarter:	dc.b 1
0001912D F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
00019132 00                         @gone:		dc.b 0
00019134 00                         		even
00019134 00                         		even
00019134                            		include	"_incObj\6E Electrocuter.asm"
00019134                            ; ---------------------------------------------------------------------------
00019134                            ; Object 6E - electrocution orbs (SBZ)
00019134                            ; ---------------------------------------------------------------------------
00019134                            
00019134                            Electro:
00019134 7000                       		moveq	#0,d0
00019136 1028 0024                  		move.b	obRoutine(a0),d0
0001913A 323B 0000                  		move.w	Elec_Index(pc,d0.w),d1
0001913E 4EFB 1000                  		jmp	Elec_Index(pc,d1.w)
00019142                            ; ===========================================================================
00019142 0000                       Elec_Index:	dc.w Elec_Main-Elec_Index
00019144 0000                       		dc.w Elec_Shock-Elec_Index
00019146                            
00019146 =00000034                  elec_freq:	equ $34		; frequency
00019146                            ; ===========================================================================
00019146                            
00019146                            Elec_Main:	; Routine 0
00019146 5428 0024                  		addq.b	#2,obRoutine(a0)
0001914A 217C 0000 0000 0004        		move.l	#Map_Elec,obMap(a0)
00019152 317C 047E 0002             		move.w	#$47E,obGfx(a0)
00019158 0028 0004 0001             		ori.b	#4,obRender(a0)
0001915E 117C 0028 0014             		move.b	#$28,obActWid(a0)
00019164 7000                       		moveq	#0,d0
00019166 1028 0028                  		move.b	obSubtype(a0),d0 ; read object type
0001916A E948                       		lsl.w	#4,d0		; multiply by $10
0001916C 5340                       		subq.w	#1,d0
0001916E 3140 0034                  		move.w	d0,elec_freq(a0)
00019172                            
00019172                            Elec_Shock:	; Routine 2
00019172 3038 FE04                  		move.w	(v_framecount).w,d0
00019176 C068 0034                  		and.w	elec_freq(a0),d0 ; is it time to zap?
0001917A 6600                       		bne.s	@animate	; if not, branch
0001917C                            
0001917C 117C 0001 001C             		move.b	#1,obAnim(a0)	; run "zap" animation
00019182 4A28 0001                  		tst.b	obRender(a0)
00019186 6A00                       		bpl.s	@animate
00019192                            
00019192                            	@animate:
00019192 43F9 0000 0000             		lea	(Ani_Elec).l,a1
00019198 4EB9 0000 C938             		jsr	(AnimateSprite).l
0001919E 117C 0000 0020             		move.b	#0,obColType(a0)
000191A4 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)	; is 4th frame displayed?
000191AA 6600                       		bne.s	@display	; if not, branch
000191AC 117C 00A4 0020             		move.b	#$A4,obColType(a0) ; if yes, make object hurt Sonic
000191B2                            
000191B2                            	@display:
000191B2 6000 864E                  		bra.w	RememberState
000191B2 6000 864E                  		bra.w	RememberState
000191B6                            		include	"_anim\Electrocuter.asm"
000191B6                            ; ---------------------------------------------------------------------------
000191B6                            ; Animation script - electrocution orbs (SBZ)
000191B6                            ; ---------------------------------------------------------------------------
000191B6 0000                       Ani_Elec:	dc.w byte_161CC-Ani_Elec
000191B8 0000                       		dc.w byte_161D0-Ani_Elec
000191BA 0700 FF                    byte_161CC:	dc.b 7,	0, afEnd
000191BE 00                         		even
000191BE 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, afChange, 0
000191CE                            		even
000191CE                            		even
000191CE                            Map_Elec:	include	"_maps\Electrocuter.asm"
000191CE                            ; --------------------------------------------------------------------------------
000191CE                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000191CE                            ; --------------------------------------------------------------------------------
000191CE                            
000191CE                            SME_KiF9w:	
000191CE 0000 0000                  		dc.w SME_KiF9w_C-SME_KiF9w, SME_KiF9w_17-SME_KiF9w	
000191D2 0000 0000                  		dc.w SME_KiF9w_27-SME_KiF9w, SME_KiF9w_41-SME_KiF9w	
000191D6 0000 0000                  		dc.w SME_KiF9w_56-SME_KiF9w, SME_KiF9w_75-SME_KiF9w	
000191DA 02                         SME_KiF9w_C:	dc.b 2	
000191DB F804 2000 F8               		dc.b $F8, 4, $20, 0, $F8	
000191E0 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
000191E5 03                         SME_KiF9w_17:	dc.b 3	
000191E6 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
000191EB F804 0000 F8               		dc.b $F8, 4, 0, 0, $F8	
000191F0 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
000191F5 05                         SME_KiF9w_27:	dc.b 5	
000191F6 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
000191FB F804 0000 F8               		dc.b $F8, 4, 0, 0, $F8	
00019200 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
00019205 F60D 200C 08               		dc.b $F6, $D, $20, $C, 8	
0001920A F60D 280C DC               		dc.b $F6, $D, $28, $C, $DC	
0001920F 04                         SME_KiF9w_41:	dc.b 4	
00019210 F804 2000 F8               		dc.b $F8, 4, $20, 0, $F8	
00019215 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
0001921A F60D 200C 08               		dc.b $F6, $D, $20, $C, 8	
0001921F F60D 280C DC               		dc.b $F6, $D, $28, $C, $DC	
00019224 06                         SME_KiF9w_56:	dc.b 6	
00019225 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
0001922A 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
0001922F F60D 300C 08               		dc.b $F6, $D, $30, $C, 8	
00019234 F60D 380C DC               		dc.b $F6, $D, $38, $C, $DC	
00019239 F60D 200C 24               		dc.b $F6, $D, $20, $C, $24	
0001923E F60D 280C C0               		dc.b $F6, $D, $28, $C, $C0	
00019243 04                         SME_KiF9w_75:	dc.b 4	
00019244 F804 2000 F8               		dc.b $F8, 4, $20, 0, $F8	
00019249 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
0001924E F60D 300C 24               		dc.b $F6, $D, $30, $C, $24	
00019253 F60D 380C C0               		dc.b $F6, $D, $38, $C, $C0	
00019258                            		even
00019258                            		even
00019258                            		include	"_incObj\6F SBZ Spin Platform Conveyor.asm"
00019258                            ; ---------------------------------------------------------------------------
00019258                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00019258                            ; ---------------------------------------------------------------------------
00019258                            
00019258                            SpinConvey:
00019258 7000                       		moveq	#0,d0
0001925A 1028 0024                  		move.b	obRoutine(a0),d0
0001925E 323B 0000                  		move.w	SpinC_Index(pc,d0.w),d1
00019262 4EBB 1000                  		jsr	SpinC_Index(pc,d1.w)
00019282                            
00019282                            SpinC_Display:
00019282 4EF9 0000 F88C             		jmp	(DisplaySprite).l
00019288                            ; ===========================================================================
00019288                            
00019288                            loc_1629A:
00019288 0C38 0002 FE11             		cmpi.b	#2,(v_act).w	; check if act is 3
0001928E 6600                       		bne.s	SpinC_Act1or2	; if not, branch
00019290 0C40 FF80                  		cmpi.w	#-$80,d0
00019294 64EC                       		bcc.s	SpinC_Display
00019296                            
00019296                            SpinC_Act1or2:
00019296 1028 002F                  		move.b	$2F(a0),d0
0001929A 6A00                       		bpl.s	SpinC_Delete
0001929C 0240 007F                  		andi.w	#$7F,d0
000192A0 45F8 F7C1                  		lea	(v_obj63).w,a2
000192A4 08B2 0000 0000             		bclr	#0,(a2,d0.w)
000192AA                            
000192AA                            SpinC_Delete:
000192AA 4EF9 0000 F8CC             		jmp	(DeleteObject).l
000192B0                            ; ===========================================================================
000192B0 0000                       SpinC_Index:	dc.w SpinC_Main-SpinC_Index
000192B2 0000                       		dc.w loc_163D8-SpinC_Index
000192B4                            ; ===========================================================================
000192B4                            
000192B4                            SpinC_Main:	; Routine 0
000192B4 1028 0028                  		move.b	obSubtype(a0),d0
000192B8 6B00 0000                  		bmi.w	loc_16380
000192BC 5428 0024                  		addq.b	#2,obRoutine(a0)
000192C0 217C 0001 8928 0004        		move.l	#Map_Spin,obMap(a0)
000192C8 317C 04DF 0002             		move.w	#$4DF,obGfx(a0)
000192CE 117C 0010 0014             		move.b	#$10,obActWid(a0)
000192D4 0028 0004 0001             		ori.b	#4,obRender(a0)
000192DA 317C 0200 0018             		move.w	#$200,obPriority(a0)
000192E0 7000                       		moveq	#0,d0
000192E2 1028 0028                  		move.b	obSubtype(a0),d0
000192E6 3200                       		move.w	d0,d1
000192E8 E648                       		lsr.w	#3,d0
000192EA 0240 001E                  		andi.w	#$1E,d0
000192EE 45FA 0000                  		lea	off_164A6(pc),a2
000192F2 D4F2 0000                  		adda.w	(a2,d0.w),a2
000192F6 315A 0038                  		move.w	(a2)+,$38(a0)
000192FA 315A 0030                  		move.w	(a2)+,$30(a0)
000192FE 214A 003C                  		move.l	a2,$3C(a0)
00019302 0241 000F                  		andi.w	#$F,d1
00019306 E549                       		lsl.w	#2,d1
00019308 1141 0038                  		move.b	d1,$38(a0)
0001930C 117C 0004 003A             		move.b	#4,$3A(a0)
00019312 4A38 F7C0                  		tst.b	(f_conveyrev).w
00019316 6700                       		beq.s	loc_16356
00019318 117C 0001 003B             		move.b	#1,$3B(a0)
0001931E 4428 003A                  		neg.b	$3A(a0)
00019322 7200                       		moveq	#0,d1
00019324 1228 0038                  		move.b	$38(a0),d1
00019328 D228 003A                  		add.b	$3A(a0),d1
0001932C B228 0039                  		cmp.b	$39(a0),d1
00019330 6500                       		bcs.s	loc_16352
00019332 1001                       		move.b	d1,d0
00019334 7200                       		moveq	#0,d1
00019336 4A00                       		tst.b	d0
00019338 6A00                       		bpl.s	loc_16352
0001933A 1228 0039                  		move.b	$39(a0),d1
0001933E 5901                       		subq.b	#4,d1
00019340                            
00019340                            loc_16352:
00019340 1141 0038                  		move.b	d1,$38(a0)
00019344                            
00019344                            loc_16356:
00019344 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
0001934A 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00019350 4A41                       		tst.w	d1
00019352 6600                       		bne.s	loc_1636C
00019354 117C 0001 001C             		move.b	#1,obAnim(a0)
0001935A                            
0001935A                            loc_1636C:
0001935A 0C41 0008                  		cmpi.w	#8,d1
0001935E 6600                       		bne.s	loc_16378
00019360 117C 0000 001C             		move.b	#0,obAnim(a0)
00019366                            
00019366                            loc_16378:
00019366 6100 B512                  		bsr.w	LCon_ChangeDir
0001936A 6000 0000                  		bra.w	loc_163D8
0001936E                            ; ===========================================================================
0001936E                            
0001936E                            loc_16380:
0001936E 1140 002F                  		move.b	d0,$2F(a0)
00019372 0240 007F                  		andi.w	#$7F,d0
00019376 45F8 F7C1                  		lea	(v_obj63).w,a2
0001937A 08F2 0000 0000             		bset	#0,(a2,d0.w)
00019380 6700                       		beq.s	loc_1639A
00019382 4EF9 0000 F8CC             		jmp	(DeleteObject).l
00019388                            ; ===========================================================================
00019388                            
00019388                            loc_1639A:
00019388 D040                       		add.w	d0,d0
0001938A 0240 001E                  		andi.w	#$1E,d0
0001938E 0640 0000                  		addi.w	#ObjPosSBZPlatform_Index-ObjPos_Index,d0
00019392 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00019398 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001939C 321A                       		move.w	(a2)+,d1
0001939E 2248                       		movea.l	a0,a1
000193A0 6000                       		bra.s	SpinC_LoadPform
000193A2                            ; ===========================================================================
000193A2                            
000193A2                            SpinC_Loop:
000193A2 4EB9 0000 FD18             		jsr	(FindFreeObj).l
000193A8 6600                       		bne.s	loc_163D0
000193AA                            
000193AA                            SpinC_LoadPform:
000193AA 12BC 006F                  		move.b	#id_SpinConvey,0(a1)
000193AE 335A 0008                  		move.w	(a2)+,obX(a1)
000193B2 335A 000C                  		move.w	(a2)+,obY(a1)
000193B6 301A                       		move.w	(a2)+,d0
000193B8 1340 0028                  		move.b	d0,obSubtype(a1)
000193BC                            
000193BC                            loc_163D0:
000193BC 51C9 FFE4                  		dbf	d1,SpinC_Loop
000193C0                            
000193C0 588F                       		addq.l	#4,sp
000193C2 4E75                       		rts	
000193C4                            ; ===========================================================================
000193C4                            
000193C4                            loc_163D8:	; Routine 2
000193C4 43F9 0000 0000             		lea	(Ani_SpinConvey).l,a1
000193CA 4EB9 0000 C938             		jsr	(AnimateSprite).l
000193D0 4A28 001A                  		tst.b	obFrame(a0)
000193D4 6600                       		bne.s	loc_16404
000193D6 3F28 0008                  		move.w	obX(a0),-(sp)
000193DA 6100 0000                  		bsr.w	loc_16424
000193DE 323C 001B                  		move.w	#$1B,d1
000193E2 343C 0007                  		move.w	#7,d2
000193E6 3602                       		move.w	d2,d3
000193E8 5243                       		addq.w	#1,d3
000193EA 381F                       		move.w	(sp)+,d4
000193EC 6000 88AC                  		bra.w	SolidObject
000193F0                            ; ===========================================================================
000193F0                            
000193F0                            loc_16404:
000193F0 0828 0003 0022             		btst	#3,obStatus(a0)
000193F6 6700                       		beq.s	loc_16420
000193F8 43F8 D000                  		lea	(v_objspace).w,a1
000193FC 08A9 0003 0022             		bclr	#3,obStatus(a1)
00019402 08A8 0003 0022             		bclr	#3,obStatus(a0)
00019408 4228 0025                  		clr.b	obSolid(a0)
0001940C                            
0001940C                            loc_16420:
0001940C 6000 0000                  		bra.w	loc_16424
00019410                            
00019410                            loc_16424:
00019410 3028 0008                  		move.w	obX(a0),d0
00019414 B068 0034                  		cmp.w	$34(a0),d0
00019418 6600                       		bne.s	loc_16484
0001941A 3028 000C                  		move.w	obY(a0),d0
0001941E B068 0036                  		cmp.w	$36(a0),d0
00019422 6600                       		bne.s	loc_16484
00019424 7200                       		moveq	#0,d1
00019426 1228 0038                  		move.b	$38(a0),d1
0001942A D228 003A                  		add.b	$3A(a0),d1
0001942E B228 0039                  		cmp.b	$39(a0),d1
00019432 6500                       		bcs.s	loc_16456
00019434 1001                       		move.b	d1,d0
00019436 7200                       		moveq	#0,d1
00019438 4A00                       		tst.b	d0
0001943A 6A00                       		bpl.s	loc_16456
0001943C 1228 0039                  		move.b	$39(a0),d1
00019440 5901                       		subq.b	#4,d1
00019442                            
00019442                            loc_16456:
00019442 1141 0038                  		move.b	d1,$38(a0)
00019446 2268 003C                  		movea.l	$3C(a0),a1
0001944A 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00019450 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00019456 4A41                       		tst.w	d1
00019458 6600                       		bne.s	loc_16474
0001945A 117C 0001 001C             		move.b	#1,obAnim(a0)
00019460                            
00019460                            loc_16474:
00019460 0C41 0008                  		cmpi.w	#8,d1
00019464 6600                       		bne.s	loc_16480
00019466 117C 0000 001C             		move.b	#0,obAnim(a0)
0001946C                            
0001946C                            loc_16480:
0001946C 6100 B40C                  		bsr.w	LCon_ChangeDir
00019470                            
00019470                            loc_16484:
00019470 4EF9 0000 F878             		jmp	(SpeedToPos).l
00019470 4EF9 0000 F878             		jmp	(SpeedToPos).l
00019476                            		include	"_anim\SBZ Spin Platform Conveyor.asm"
00019476                            ; ---------------------------------------------------------------------------
00019476                            ; Animation script - platform on conveyor belt (SBZ)
00019476                            ; ---------------------------------------------------------------------------
00019476 0000                       Ani_SpinConvey:	dc.w @spin-Ani_SpinConvey
00019478 0000                       		dc.w @still-Ani_SpinConvey
0001947A 0000 0102 0304 4342 4140+  @spin:		dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00019487 6423 2221 00FF             		dc.b $64, $23, $22, $21, 0, afEnd
0001948E 00                         		even
0001948E 0F00 FF                    @still:		dc.b $F, 0, afEnd
00019492 00                         		even
00019492 00                         		even
00019492                            
00019492 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
00019498 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
0001949E 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
000194B2 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
000194C6 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
000194DA 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
000194EE 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
00019502 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00019516                            ; ===========================================================================
00019516                            
00019516                            		include	"_incObj\70 Girder Block.asm"
00019516                            ; ---------------------------------------------------------------------------
00019516                            ; Object 70 - large girder block (SBZ)
00019516                            ; ---------------------------------------------------------------------------
00019516                            
00019516                            Girder:
00019516 7000                       		moveq	#0,d0
00019518 1028 0024                  		move.b	obRoutine(a0),d0
0001951C 323B 0000                  		move.w	Gird_Index(pc,d0.w),d1
00019520 4EFB 1000                  		jmp	Gird_Index(pc,d1.w)
00019524                            ; ===========================================================================
00019524 0000                       Gird_Index:	dc.w Gird_Main-Gird_Index
00019526 0000                       		dc.w Gird_Action-Gird_Index
00019528                            
00019528 =00000016                  gird_height:	equ $16
00019528 =00000032                  gird_origX:	equ $32		; original x-axis position
00019528 =00000030                  gird_origY:	equ $30		; original y-axis position
00019528 =00000034                  gird_time:	equ $34		; duration for movement in a direction
00019528 =00000038                  gird_set:	equ $38		; which movement settings to use (0/8/16/24)
00019528 =0000003A                  gird_delay:	equ $3A		; delay for movement
00019528                            ; ===========================================================================
00019528                            
00019528                            Gird_Main:	; Routine 0
00019528 5428 0024                  		addq.b	#2,obRoutine(a0)
0001952C 217C 0000 0000 0004        		move.l	#Map_Gird,obMap(a0)
00019534 317C 42F0 0002             		move.w	#$42F0,obGfx(a0)
0001953A 0028 0004 0001             		ori.b	#4,obRender(a0)
00019540 317C 0200 0018             		move.w	#$200,obPriority(a0)
00019546 117C 0060 0014             		move.b	#$60,obActWid(a0)
0001954C 117C 0018 0016             		move.b	#$18,gird_height(a0)
00019552 3168 0008 0032             		move.w	obX(a0),gird_origX(a0)
00019558 3168 000C 0030             		move.w	obY(a0),gird_origY(a0)
0001955E 6100 0000                  		bsr.w	Gird_ChgMove
00019562                            
00019562                            Gird_Action:	; Routine 2
00019562 3F28 0008                  		move.w	obX(a0),-(sp)
00019566 4A68 003A                  		tst.w	gird_delay(a0)
0001956A 6700                       		beq.s	@beginmove
0001956C 5368 003A                  		subq.w	#1,gird_delay(a0)
00019570 6600                       		bne.s	@solid
00019572                            
00019572                            	@beginmove:
00019572 4EB9 0000 F878             		jsr	(SpeedToPos).l
00019578 5368 0034                  		subq.w	#1,gird_time(a0) ; decrement movement duration
0001957C 6600                       		bne.s	@solid		; if time remains, branch
0001957E 6100 0000                  		bsr.w	Gird_ChgMove	; if time is zero, branch
00019582                            
00019582                            	@solid:
00019582 381F                       		move.w	(sp)+,d4
00019584 4A28 0001                  		tst.b	obRender(a0)
00019588 6A00                       		bpl.s	@chkdel
0001958A 7200                       		moveq	#0,d1
0001958C 1228 0014                  		move.b	obActWid(a0),d1
00019590 0641 000B                  		addi.w	#$B,d1
00019594 7400                       		moveq	#0,d2
00019596 1428 0016                  		move.b	gird_height(a0),d2
0001959A 3602                       		move.w	d2,d3
0001959C 5243                       		addq.w	#1,d3
0001959E 6100 86FA                  		bsr.w	SolidObject
000195A2                            
000195A2                            	@chkdel:
000195BE 4EF9 0000 F88C             		jmp	(DisplaySprite).l
000195C4                            
000195C4                            	@delete:
000195C4 4EF9 0000 F8CC             		jmp	(DeleteObject).l
000195CA                            ; ===========================================================================
000195CA                            
000195CA                            Gird_ChgMove:
000195CA 1028 0038                  		move.b	gird_set(a0),d0
000195CE 0240 0018                  		andi.w	#$18,d0
000195D2 43F9 0000 0000             		lea	(@settings).l,a1
000195D8 43F1 0000                  		lea	(a1,d0.w),a1
000195DC 3159 0010                  		move.w	(a1)+,obVelX(a0)
000195E0 3159 0012                  		move.w	(a1)+,obVelY(a0)
000195E4 3159 0034                  		move.w	(a1)+,gird_time(a0)
000195E8 5028 0038                  		addq.b	#8,gird_set(a0)	; use next settings
000195EC 317C 0007 003A             		move.w	#7,gird_delay(a0)
000195F2 4E75                       		rts	
000195F4                            ; ===========================================================================
000195F4                            @settings:	;   x-speed, y-speed, duration
000195F4 0100 0000 0060 0000        		dc.w   $100,	 0,   $60,     0 ; right
000195FC 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0 ; down
00019604 FF00 FFC0 0060 0000        		dc.w  -$100,  -$40,   $60,     0 ; up/left
0001960C 0000 FF00 0018 0000        		dc.w	  0, -$100,   $18,     0 ; up
0001960C 0000 FF00 0018 0000        		dc.w	  0, -$100,   $18,     0 ; up
00019614                            Map_Gird:	include	"_maps\Girder Block.asm"
00019614                            ; ---------------------------------------------------------------------------
00019614                            ; Sprite mappings - large girder block (SBZ)
00019614                            ; ---------------------------------------------------------------------------
00019614                            Map_Gird_internal:
00019614 0000                       		dc.w @girder-Map_Gird_internal
00019616 0C                         @girder:	dc.b $C
00019617 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
0001961C 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
00019621 E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00019626 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
0001962B E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
00019630 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
00019635 E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
0001963A 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
0001963F E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
00019644 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
00019649 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
0001964E 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
00019654 00                         		even
00019654 00                         		even
00019654                            		include	"_incObj\72 Teleporter.asm"
00019654                            ; ---------------------------------------------------------------------------
00019654                            ; Object 72 - teleporter (SBZ)
00019654                            ; ---------------------------------------------------------------------------
00019654                            
00019654                            Teleport:
00019654 7000                       		moveq	#0,d0
00019656 1028 0024                  		move.b	obRoutine(a0),d0
0001965A 323B 0000                  		move.w	Tele_Index(pc,d0.w),d1
0001965E 4EBB 1000                  		jsr	Tele_Index(pc,d1.w)
0001967E 4E75                       		rts	
00019680                            
00019680                            	@delete:
00019680 4EF9 0000 F8CC             		jmp	(DeleteObject).l
00019686                            ; ===========================================================================
00019686 0000                       Tele_Index:	dc.w Tele_Main-Tele_Index
00019688 0000                       		dc.w loc_166C8-Tele_Index
0001968A 0000                       		dc.w loc_1675E-Tele_Index
0001968C 0000                       		dc.w loc_16798-Tele_Index
0001968E                            ; ===========================================================================
0001968E                            
0001968E                            Tele_Main:	; Routine 0
0001968E 5428 0024                  		addq.b	#2,obRoutine(a0)
00019692 1028 0028                  		move.b	obSubtype(a0),d0
00019696 D040                       		add.w	d0,d0
00019698 0240 001E                  		andi.w	#$1E,d0
0001969C 45FA 0000                  		lea	Tele_Data(pc),a2
000196A0 D4F2 0000                  		adda.w	(a2,d0.w),a2
000196A4 315A 003A                  		move.w	(a2)+,$3A(a0)
000196A8 214A 003C                  		move.l	a2,$3C(a0)
000196AC 315A 0036                  		move.w	(a2)+,$36(a0)
000196B0 315A 0038                  		move.w	(a2)+,$38(a0)
000196B4                            
000196B4                            loc_166C8:	; Routine 2
000196B4 43F8 D000                  		lea	(v_player).w,a1
000196B8 3029 0008                  		move.w	obX(a1),d0
000196BC 9068 0008                  		sub.w	obX(a0),d0
000196C0 0828 0000 0022             		btst	#0,obStatus(a0)
000196C6 6700                       		beq.s	loc_166E0
000196C8 0640 000F                  		addi.w	#$F,d0
000196CC                            
000196CC                            loc_166E0:
000196CC 0C40 0010                  		cmpi.w	#$10,d0
000196D0 6400                       		bcc.s	locret_1675C
000196D2 3229 000C                  		move.w	obY(a1),d1
000196D6 9268 000C                  		sub.w	obY(a0),d1
000196DA 0641 0020                  		addi.w	#$20,d1
000196DE 0C41 0040                  		cmpi.w	#$40,d1
000196E2 6400                       		bcc.s	locret_1675C
000196E4 4A38 F7C8                  		tst.b	(f_lockmulti).w
000196E8 6600                       		bne.s	locret_1675C
000196EA 0C28 0007 0028             		cmpi.b	#7,obSubtype(a0)
000196F0 6600                       		bne.s	loc_1670E
000196F2 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w
000196F8 6500                       		bcs.s	locret_1675C
000196FA                            
000196FA                            loc_1670E:
000196FA 5428 0024                  		addq.b	#2,obRoutine(a0)
000196FE 11FC 0081 F7C8             		move.b	#$81,(f_lockmulti).w ; lock controls
00019704 137C 0002 001C             		move.b	#id_Roll,obAnim(a1) ; use Sonic's rolling animation
0001970A 337C 0800 0020             		move.w	#$800,obInertia(a1)
00019710 337C 0000 0010             		move.w	#0,obVelX(a1)
00019716 337C 0000 0012             		move.w	#0,obVelY(a1)
0001971C 08A8 0005 0022             		bclr	#5,obStatus(a0)
00019722 08A9 0005 0022             		bclr	#5,obStatus(a1)
00019728 08E9 0001 0022             		bset	#1,obStatus(a1)
0001972E 3368 0008 0008             		move.w	obX(a0),obX(a1)
00019734 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001973A 4228 0032                  		clr.b	$32(a0)
00019748                            
00019748                            locret_1675C:
00019748 4E75                       		rts	
0001974A                            ; ===========================================================================
0001974A                            
0001974A                            loc_1675E:	; Routine 4
0001974A 43F8 D000                  		lea	(v_player).w,a1
0001974E 1028 0032                  		move.b	$32(a0),d0
00019752 5428 0032                  		addq.b	#2,$32(a0)
00019756 4EB9 0000 3A32             		jsr	(CalcSine).l
0001975C EA40                       		asr.w	#5,d0
0001975E 3428 000C                  		move.w	obY(a0),d2
00019762 9440                       		sub.w	d0,d2
00019764 3342 000C                  		move.w	d2,obY(a1)
00019768 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
0001976E 6600                       		bne.s	locret_16796
00019770 6100 0000                  		bsr.w	sub_1681C
00019774 5428 0024                  		addq.b	#2,obRoutine(a0)
00019782                            
00019782                            locret_16796:
00019782 4E75                       		rts	
00019784                            ; ===========================================================================
00019784                            
00019784                            loc_16798:	; Routine 6
00019784 588F                       		addq.l	#4,sp
00019786 43F8 D000                  		lea	(v_player).w,a1
0001978A 5328 002E                  		subq.b	#1,$2E(a0)
0001978E 6A00                       		bpl.s	loc_167DA
00019790 3368 0036 0008             		move.w	$36(a0),obX(a1)
00019796 3368 0038 000C             		move.w	$38(a0),obY(a1)
0001979C 7200                       		moveq	#0,d1
0001979E 1228 003A                  		move.b	$3A(a0),d1
000197A2 5801                       		addq.b	#4,d1
000197A4 B228 003B                  		cmp.b	$3B(a0),d1
000197A8 6500                       		bcs.s	loc_167C2
000197AA 7200                       		moveq	#0,d1
000197AC 6000                       		bra.s	loc_16800
000197AE                            ; ===========================================================================
000197AE                            
000197AE                            loc_167C2:
000197AE 1141 003A                  		move.b	d1,$3A(a0)
000197B2 2468 003C                  		movea.l	$3C(a0),a2
000197B6 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
000197BC 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
000197C2 6000 0000                  		bra.w	sub_1681C
000197C6                            ; ===========================================================================
000197C6                            
000197C6                            loc_167DA:
000197C6 2429 0008                  		move.l	obX(a1),d2
000197CA 2629 000C                  		move.l	obY(a1),d3
000197CE 3029 0010                  		move.w	obVelX(a1),d0
000197D2 48C0                       		ext.l	d0
000197D4 E180                       		asl.l	#8,d0
000197D6 D480                       		add.l	d0,d2
000197D8 3029 0012                  		move.w	obVelY(a1),d0
000197DC 48C0                       		ext.l	d0
000197DE E180                       		asl.l	#8,d0
000197E0 D680                       		add.l	d0,d3
000197E2 2342 0008                  		move.l	d2,obX(a1)
000197E6 2343 000C                  		move.l	d3,obY(a1)
000197EA 4E75                       		rts	
000197EC                            ; ===========================================================================
000197EC                            
000197EC                            loc_16800:
000197EC 0269 07FF 000C             		andi.w	#$7FF,obY(a1)
000197F2 4228 0024                  		clr.b	obRoutine(a0)
000197F6 4238 F7C8                  		clr.b	(f_lockmulti).w
000197FA 337C 0000 0010             		move.w	#0,obVelX(a1)
00019800 337C 0200 0012             		move.w	#$200,obVelY(a1)
00019806 4E75                       		rts	
00019808                            
00019808                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019808                            
00019808                            
00019808                            sub_1681C:
00019808 7000                       		moveq	#0,d0
0001980A 343C 1000                  		move.w	#$1000,d2
0001980E 3028 0036                  		move.w	$36(a0),d0
00019812 9069 0008                  		sub.w	obX(a1),d0
00019816 6C00                       		bge.s	loc_16830
00019818 4440                       		neg.w	d0
0001981A 4442                       		neg.w	d2
0001981C                            
0001981C                            loc_16830:
0001981C 7200                       		moveq	#0,d1
0001981E 363C 1000                  		move.w	#$1000,d3
00019822 3228 0038                  		move.w	$38(a0),d1
00019826 9269 000C                  		sub.w	obY(a1),d1
0001982A 6C00                       		bge.s	loc_16844
0001982C 4441                       		neg.w	d1
0001982E 4443                       		neg.w	d3
00019830                            
00019830                            loc_16844:
00019830 B240                       		cmp.w	d0,d1
00019832 6500                       		bcs.s	loc_1687A
00019834 7200                       		moveq	#0,d1
00019836 3228 0038                  		move.w	$38(a0),d1
0001983A 9269 000C                  		sub.w	obY(a1),d1
0001983E 4841                       		swap	d1
00019840 83C3                       		divs.w	d3,d1
00019842 7000                       		moveq	#0,d0
00019844 3028 0036                  		move.w	$36(a0),d0
00019848 9069 0008                  		sub.w	obX(a1),d0
0001984C 6700                       		beq.s	loc_16866
0001984E 4840                       		swap	d0
00019850 81C1                       		divs.w	d1,d0
00019852                            
00019852                            loc_16866:
00019852 3340 0010                  		move.w	d0,obVelX(a1)
00019856 3343 0012                  		move.w	d3,obVelY(a1)
0001985A 4A41                       		tst.w	d1
0001985C 6A00                       		bpl.s	loc_16874
0001985E 4441                       		neg.w	d1
00019860                            
00019860                            loc_16874:
00019860 3141 002E                  		move.w	d1,$2E(a0)
00019864 4E75                       		rts	
00019866                            ; ===========================================================================
00019866                            
00019866                            loc_1687A:
00019866 7000                       		moveq	#0,d0
00019868 3028 0036                  		move.w	$36(a0),d0
0001986C 9069 0008                  		sub.w	obX(a1),d0
00019870 4840                       		swap	d0
00019872 81C2                       		divs.w	d2,d0
00019874 7200                       		moveq	#0,d1
00019876 3228 0038                  		move.w	$38(a0),d1
0001987A 9269 000C                  		sub.w	obY(a1),d1
0001987E 6700                       		beq.s	loc_16898
00019880 4841                       		swap	d1
00019882 83C0                       		divs.w	d0,d1
00019884                            
00019884                            loc_16898:
00019884 3341 0012                  		move.w	d1,obVelY(a1)
00019888 3342 0010                  		move.w	d2,obVelX(a1)
0001988C 4A40                       		tst.w	d0
0001988E 6A00                       		bpl.s	loc_168A6
00019890 4440                       		neg.w	d0
00019892                            
00019892                            loc_168A6:
00019892 3140 002E                  		move.w	d0,$2E(a0)
00019896 4E75                       		rts	
00019898                            ; End of function sub_1681C
00019898                            
00019898                            ; ===========================================================================
00019898 0000 0000 0000             Tele_Data:	dc.w @type00-Tele_Data, @type01-Tele_Data, @type02-Tele_Data
0001989E 0000 0000 0000             		dc.w @type03-Tele_Data, @type04-Tele_Data, @type05-Tele_Data
000198A4 0000 0000                  		dc.w @type06-Tele_Data, @type07-Tele_Data
000198A8 0004 0794 098C             @type00:	dc.w 4,	$794, $98C
000198AE 0004 0094 038C             @type01:	dc.w 4,	$94, $38C
000198B4 001C 0794 02E8             @type02:	dc.w $1C, $794,	$2E8
000198BA 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
000198C0 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
000198C6 0884 0298 0894             		dc.w $884, $298, $894
000198CC 0270 0894 0190             		dc.w $270, $894, $190
000198D2 0004 0894 0690             @type03:	dc.w 4,	$894, $690
000198D8 001C 1194 0470             @type04:	dc.w $1C, $1194, $470
000198DE 1184 0498 1158             		dc.w $1184, $498, $1158
000198E4 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
000198EA 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
000198F0 04E8 0F94 0590             		dc.w $4E8, $F94, $590
000198F6 0004 1294 0490             @type05:	dc.w 4,	$1294, $490
000198FC 001C 1594 FFE8             @type06:	dc.w $1C, $1594, $FFE8
00019902 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
00019908 FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
0001990E 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
00019914 FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
0001991A 0004 0894 0090             @type07:	dc.w 4,	$894, $90
0001991A 0004 0894 0090             @type07:	dc.w 4,	$894, $90
00019920                            
00019920                            		include	"_incObj\78 Caterkiller.asm"
00019920                            ; ---------------------------------------------------------------------------
00019920                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
00019920                            ; ---------------------------------------------------------------------------
00019920                            
00019920                            Caterkiller:
00019920 7000                       		moveq	#0,d0
00019922 1028 0024                  		move.b	obRoutine(a0),d0
00019926 323B 0000                  		move.w	Cat_Index(pc,d0.w),d1
0001992A 4EFB 1000                  		jmp	Cat_Index(pc,d1.w)
0001992E                            ; ===========================================================================
0001992E 0000                       Cat_Index:	dc.w Cat_Main-Cat_Index
00019930 0000                       		dc.w Cat_Head-Cat_Index
00019932 0000                       		dc.w Cat_BodySeg1-Cat_Index
00019934 0000                       		dc.w Cat_BodySeg2-Cat_Index
00019936 0000                       		dc.w Cat_BodySeg1-Cat_Index
00019938 0000                       		dc.w Cat_Delete-Cat_Index
0001993A 0000                       		dc.w loc_16CC0-Cat_Index
0001993C                            
0001993C =0000003C                  cat_parent:	equ $3C		; address of parent object
0001993C                            ; ===========================================================================
0001993C                            
0001993C                            locret_16950:
0001993C 4E75                       		rts	
0001993E                            ; ===========================================================================
0001993E                            
0001993E                            Cat_Main:	; Routine 0
0001993E 117C 0007 0016             		move.b	#7,obHeight(a0)
00019944 117C 0008 0017             		move.b	#8,obWidth(a0)
0001994A 4EB9 0000 F840             		jsr	(ObjectFall).l
00019950 4EB9 0001 7E06             		jsr	(ObjFloorDist).l
00019956 4A41                       		tst.w	d1
00019958 6AE2                       		bpl.s	locret_16950
0001995A D368 000C                  		add.w	d1,obY(a0)
0001995E 4268 0012                  		clr.w	obVelY(a0)
00019962 5428 0024                  		addq.b	#2,obRoutine(a0)
00019966 217C 0000 0000 0004        		move.l	#Map_Cat,obMap(a0)
0001996E 317C 22B0 0002             		move.w	#$22B0,obGfx(a0)
00019974 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; if level is SBZ, branch
0001997A 6700                       		beq.s	@isscrapbrain
0001997C 317C 24FF 0002             		move.w	#$24FF,obGfx(a0) ; MZ specific code
00019982                            
00019982                            	@isscrapbrain:
00019982 0228 0003 0001             		andi.b	#3,obRender(a0)
00019988 0028 0004 0001             		ori.b	#4,obRender(a0)
0001998E 1168 0001 0022             		move.b	obRender(a0),obStatus(a0)
00019994 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001999A 117C 0008 0014             		move.b	#8,obActWid(a0)
000199A0 117C 000B 0020             		move.b	#$B,obColType(a0)
000199A6 3428 0008                  		move.w	obX(a0),d2
000199AA 7A0C                       		moveq	#$C,d5
000199AC 0828 0000 0022             		btst	#0,obStatus(a0)
000199B2 6700                       		beq.s	@noflip
000199B4 4445                       		neg.w	d5
000199B6                            
000199B6                            	@noflip:
000199B6 1C3C 0004                  		move.b	#4,d6
000199BA 7600                       		moveq	#0,d3
000199BC 7804                       		moveq	#4,d4
000199BE 2448                       		movea.l	a0,a2
000199C0 7202                       		moveq	#2,d1
000199C2                            
000199C2                            Cat_Loop:
000199C2 4EB9 0000 FD2E             		jsr	(FindNextFreeObj).l
000199C8 6600 0000                  			bne.w	Cat_ChkGone
000199CC 12BC 0078                  		move.b	#id_Caterkiller,0(a1) ; load body segment object
000199D0 1346 0024                  		move.b	d6,obRoutine(a1) ; goto Cat_BodySeg1 or Cat_BodySeg2 next
000199D4 5406                       		addq.b	#2,d6		; alternate between the two
000199D6 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
000199DC 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
000199E2 337C 0280 0018             		move.w	#$280,obPriority(a1)
000199E8 137C 0008 0014             		move.b	#8,obActWid(a1)
000199EE 137C 00CB 0020             		move.b	#$CB,obColType(a1)
000199F4 D445                       		add.w	d5,d2
000199F6 3342 0008                  		move.w	d2,obX(a1)
000199FA 3368 000C 000C             		move.w	obY(a0),obY(a1)
00019A00 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00019A06 1368 0022 0001             		move.b	obStatus(a0),obRender(a1)
00019A0C 137C 0008 001A             		move.b	#8,obFrame(a1)
00019A12 234A 003C                  		move.l	a2,cat_parent(a1)
00019A16 1344 003C                  		move.b	d4,cat_parent(a1)
00019A1A 5804                       		addq.b	#4,d4
00019A1C 2449                       		movea.l	a1,a2
00019A1E                            
00019A1E                            	@fail:
00019A1E 51C9 FFA2                  		dbf	d1,Cat_Loop	; repeat sequence 2 more times
00019A22                            
00019A22 117C 0007 002A             		move.b	#7,$2A(a0)
00019A28 4228 003C                  		clr.b	cat_parent(a0)
00019A2C                            
00019A2C                            Cat_Head:	; Routine 2
00019A2C 4A28 0022                  		tst.b	obStatus(a0)
00019A30 6B00 0000                  		bmi.w	loc_16C96
00019A34 7000                       		moveq	#0,d0
00019A36 1028 0025                  		move.b	ob2ndRout(a0),d0
00019A3A 323B 0000                  		move.w	Cat_Index2(pc,d0.w),d1
00019A3E 4EBB 1000                  		jsr	Cat_Index2(pc,d1.w)
00019A42 1228 002B                  		move.b	$2B(a0),d1
00019A46 6A00                       		bpl.s	@display
00019A48 43F9 0000 0000             		lea	(Ani_Cat).l,a1
00019A4E 1028 0026                  		move.b	obAngle(a0),d0
00019A52 0240 007F                  		andi.w	#$7F,d0
00019A56 5828 0026                  		addq.b	#4,obAngle(a0)
00019A5A 1031 0000                  		move.b	(a1,d0.w),d0
00019A5E 6A00                       		bpl.s	@animate
00019A60 08A8 0007 002B             		bclr	#7,$2B(a0)
00019A66 6000                       		bra.s	@display
00019A68                            
00019A68                            	@animate:
00019A68 0201 0010                  		andi.b	#$10,d1
00019A6C D001                       		add.b	d1,d0
00019A6E 1140 001A                  		move.b	d0,obFrame(a0)
00019A72                            
00019A72                            	@display:
00019A90 4EF9 0000 F88C             		jmp	(DisplaySprite).l
00019A96                            
00019A96                            	Cat_ChkGone:
00019A96 45F8 FC00                  		lea	(v_objstate).w,a2
00019A9A 7000                       		moveq	#0,d0
00019A9C 1028 0023                  		move.b	obRespawnNo(a0),d0
00019AA0 6700                       		beq.s	@delete
00019AA2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00019AA8                            
00019AA8                            	@delete:
00019AA8 117C 000A 0024             		move.b	#$A,obRoutine(a0)	; goto Cat_Delete next
00019AAE 4E75                       		rts	
00019AB0                            ; ===========================================================================
00019AB0                            
00019AB0                            Cat_Delete:	; Routine $A
00019AB0 4EF9 0000 F8CC             		jmp	(DeleteObject).l
00019AB6                            ; ===========================================================================
00019AB6 0000                       Cat_Index2:	dc.w @wait-Cat_Index2
00019AB8 0000                       		dc.w loc_16B02-Cat_Index2
00019ABA                            ; ===========================================================================
00019ABA                            
00019ABA                            @wait:
00019ABA 5328 002A                  		subq.b	#1,$2A(a0)
00019ABE 6B00                       		bmi.s	@move
00019AC0 4E75                       		rts	
00019AC2                            ; ===========================================================================
00019AC2                            
00019AC2                            @move:
00019AC2 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00019AC6 117C 0010 002A             		move.b	#$10,$2A(a0)
00019ACC 317C FF40 0010             		move.w	#-$C0,obVelX(a0)
00019AD2 317C 0040 001C             		move.w	#$40,obAnim(a0)
00019AD8 0868 0004 002B             		bchg	#4,$2B(a0)
00019ADE 6600                       		bne.s	loc_16AFC
00019AE0 4268 0010                  		clr.w	obVelX(a0)
00019AE4 4468 001C                  		neg.w	obAnim(a0)
00019AE8                            
00019AE8                            loc_16AFC:
00019AE8 08E8 0007 002B             		bset	#7,$2B(a0)
00019AEE                            
00019AEE                            loc_16B02:
00019AEE 5328 002A                  		subq.b	#1,$2A(a0)
00019AF2 6B00                       		bmi.s	@loc_16B5E
00019AF4 4A68 0010                  			tst.w	obVelX(a0)
00019AF8 6700                       			beq.s	@notmoving
00019AFA 2428 0008                  			move.l	obX(a0),d2
00019AFE 2602                       			move.l	d2,d3
00019B00 3028 0010                  		move.w	obVelX(a0),d0
00019B04 0828 0000 0022             		btst	#0,obStatus(a0)
00019B0A 6700                       		beq.s	@noflip
00019B0C 4440                       		neg.w	d0
00019B0E                            
00019B0E                            	@noflip:
00019B0E 48C0                       		ext.l	d0
00019B10 E180                       		asl.l	#8,d0
00019B12 D480                       		add.l	d0,d2
00019B14 2142 0008                  		move.l	d2,obX(a0)
00019B18 4843                       			swap	d3
00019B1A B668 0008                  			cmp.w	obX(a0),d3
00019B1E 6700                       			beq.s	@notmoving
00019B20 4EB9 0001 7E06             			jsr	(ObjFloorDist).l
00019B26 0C41 FFF8                  			cmpi.w	#-8,d1
00019B2A 6D00                       			blt.s	@loc_16B70
00019B2C 0C41 000C                  			cmpi.w	#$C,d1
00019B30 6C00                       			bge.s	@loc_16B70
00019B32 D368 000C                  			add.w	d1,obY(a0)
00019B36 7000                       		moveq	#0,d0
00019B38 1028 003C                  		move.b	cat_parent(a0),d0
00019B3C 5228 003C                  		addq.b	#1,cat_parent(a0)
00019B40 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
00019B46 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00019B4A                            
00019B4A                            	@notmoving:
00019B4A 4E75                       		rts	
00019B4C                            ; ===========================================================================
00019B4C                            
00019B4C                            @loc_16B5E:
00019B4C 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00019B50 117C 0007 002A             		move.b	#7,$2A(a0)
00019B56 4268 0010                  			clr.w	obVelX(a0)
00019B5A 4268 001C                  			clr.w	obAnim(a0)
00019B5E 4E75                       		rts	
00019B60                            ; ===========================================================================
00019B60                            
00019B60                            @loc_16B70:
00019B60 7000                       			moveq	#0,d0
00019B62 1028 003C                  			move.b	cat_parent(a0),d0
00019B66 11BC 0080 002C             			move.b	#$80,$2C(a0,d0)
00019B6C 4468 000A                  			neg.w	obX+2(a0)
00019B70 6700                       			beq.s	@loc_1730A
00019B72 0828 0000 0022             			btst	#0,obStatus(a0)
00019B78 6700                       			beq.s	@loc_1730A
00019B7A 5368 0008                  			subq.w	#1,obX(a0)
00019B7E 5228 003C                  			addq.b	#1,cat_parent(a0)
00019B82 7000                       			moveq	#0,d0
00019B84 1028 003C                  			move.b	cat_parent(a0),d0
00019B88 4230 002C                  			clr.b	$2C(a0,d0)
00019B8C                            	@loc_1730A:
00019B8C 0868 0000 0022             			bchg	#0,obStatus(a0)
00019B92 1168 0022 0001             			move.b	obStatus(a0),obRender(a0)
00019B98 5228 003C                  		addq.b	#1,cat_parent(a0)
00019B9C 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
00019BA2 4E75                       		rts	
00019BA4                            ; ===========================================================================
00019BA4                            
00019BA4                            Cat_BodySeg2:	; Routine 6
00019BA4 2268 003C                  		movea.l	cat_parent(a0),a1
00019BA8 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00019BAE 6A00                       		bpl.s	Cat_BodySeg1
00019BB0 43F9 0000 0000             		lea	(Ani_Cat).l,a1
00019BB6 1028 0026                  		move.b	obAngle(a0),d0
00019BBA 0240 007F                  		andi.w	#$7F,d0
00019BBE 5828 0026                  		addq.b	#4,obAngle(a0)
00019BC2 4A31 0004                  		tst.b	4(a1,d0.w)
00019BC6 6A00                       		bpl.s	Cat_AniBody
00019BC8 5828 0026                  		addq.b	#4,obAngle(a0)
00019BCC                            
00019BCC                            Cat_AniBody:
00019BCC 1031 0000                  		move.b	(a1,d0.w),d0
00019BD0 5000                       		addq.b	#8,d0
00019BD2 1140 001A                  		move.b	d0,obFrame(a0)
00019BD6                            
00019BD6                            Cat_BodySeg1:	; Routine 4, 8
00019BD6 2268 003C                  		movea.l	cat_parent(a0),a1
00019BDA 4A28 0022                  		tst.b	obStatus(a0)
00019BDE 6B00 0000                  		bmi.w	loc_16C90
00019BE2 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00019BE8 1169 0025 0025             		move.b	ob2ndRout(a1),ob2ndRout(a0)
00019BEE 6700 0000                  		beq.w	loc_16C64
00019BF2 3169 001C 001C             		move.w	obAnim(a1),obAnim(a0)
00019BF8 3029 0010                  		move.w	obVelX(a1),d0
00019BFC D068 001C                  			add.w	obAnim(a0),d0
00019C00 3140 0010                  		move.w	d0,obVelX(a0)
00019C04 2428 0008                  		move.l	obX(a0),d2
00019C08 2602                       		move.l	d2,d3
00019C0A 3028 0010                  		move.w	obVelX(a0),d0
00019C0E 0828 0000 0022             		btst	#0,obStatus(a0)
00019C14 6700                       		beq.s	loc_16C0C
00019C16 4440                       		neg.w	d0
00019C18                            
00019C18                            loc_16C0C:
00019C18 48C0                       		ext.l	d0
00019C1A E180                       		asl.l	#8,d0
00019C1C D480                       		add.l	d0,d2
00019C1E 2142 0008                  		move.l	d2,obX(a0)
00019C22 4843                       		swap	d3
00019C24 B668 0008                  		cmp.w	obX(a0),d3
00019C28 6700                       		beq.s	loc_16C64
00019C2A 7000                       		moveq	#0,d0
00019C2C 1028 003C                  		move.b	cat_parent(a0),d0
00019C30 1231 002C                  		move.b	$2C(a1,d0.w),d1
00019C34 0C01 0080                  		cmpi.b	#$80,d1
00019C38 6600                       		bne.s	loc_16C50
00019C3A 1181 002C                  			move.b	d1,$2C(a0,d0)
00019C3E 4468 000A                  			neg.w	obX+2(a0)
00019C42 6700                       			beq.s	locj_173E4
00019C44 0828 0000 0022             			btst	#0,obStatus(a0)
00019C4A 6700                       			beq.s	locj_173E4
00019C4C 0C68 FF40 0010             			cmpi.w	#-$C0,obVelX(a0)
00019C52 6600                       			bne.s	locj_173E4
00019C54 5368 0008                  			subq.w	#1,obX(a0)
00019C58 5228 003C                  			addq.b	#1,cat_parent(a0)
00019C5C 7000                       			moveq	#0,d0
00019C5E 1028 003C                  			move.b	cat_parent(a0),d0
00019C62 4230 002C                  			clr.b	$2C(a0,d0)
00019C66                            	locj_173E4:
00019C66 0868 0000 0022             		bchg	#0,obStatus(a0)
00019C6C 1168 0022 0001             		move.b	obStatus(a0),1(a0)
00019C72 5228 003C                  		addq.b	#1,cat_parent(a0)
00019C76 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
00019C7C 6000                       		bra.s	loc_16C64
00019C7E                            ; ===========================================================================
00019C7E                            
00019C7E                            loc_16C50:
00019C7E 4881                       		ext.w	d1
00019C80 D368 000C                  		add.w	d1,obY(a0)
00019C84 5228 003C                  		addq.b	#1,cat_parent(a0)
00019C88 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
00019C8E 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00019C92                            
00019C92                            loc_16C64:
00019C92 0C29 000C 0024             		cmpi.b	#$C,obRoutine(a1)
00019C98 6700                       		beq.s	loc_16C90
00019C9A 0C11 0027                  		cmpi.b	#id_ExplosionItem,0(a1)
00019C9E 6700                       		beq.s	loc_16C7C
00019CA0 0C29 000A 0024             		cmpi.b	#$A,obRoutine(a1)
00019CA6 6600                       		bne.s	loc_16C82
00019CA8                            
00019CA8                            loc_16C7C:
00019CA8 4229 0020                  		clr.b    $20(a1)
00019CAC 117C 000A 0024             		move.b	#$A,obRoutine(a0)
00019CB2                            
00019CB2                            loc_16C82:
00019CB2 4EF9 0000 F88C             		jmp	(DisplaySprite).l
00019CB8                            
00019CB8                            ; ===========================================================================
00019CB8 FE00 FE80 0180 0200        Cat_FragSpeed:	dc.w -$200, -$180, $180, $200
00019CC0                            ; ===========================================================================
00019CC0                            
00019CC0                            loc_16C90:
00019CC0 08E9 0007 0022             		bset	#7,obStatus(a1)
00019CC6                            
00019CC6                            loc_16C96:
00019CC6 7000                       		moveq	#0,d0
00019CC8 1028 0024                  		move.b	obRoutine(a0),d0
00019CCC 303B 00E8                  		move.w	Cat_FragSpeed-2(pc,d0.w),d0
00019CD0 0828 0000 0022             		btst	#0,obStatus(a0)
00019CD6 6700                       		beq.s	loc_16CAA
00019CD8 4440                       		neg.w	d0
00019CDA                            
00019CDA                            loc_16CAA:
00019CDA 3140 0010                  		move.w	d0,obVelX(a0)
00019CDE 317C FC00 0012             		move.w	#-$400,obVelY(a0)
00019CE4 117C 000C 0024             		move.b	#$C,obRoutine(a0)
00019CEA 0228 00F8 001A             		andi.b	#$F8,obFrame(a0)
00019CF0                            
00019CF0                            loc_16CC0:	; Routine $C
00019CF0 4EB9 0000 F840             		jsr	(ObjectFall).l
00019CF6 4A68 0012                  		tst.w	obVelY(a0)
00019CFA 6B00                       		bmi.s	loc_16CE0
00019CFC 4EB9 0001 7E06             		jsr	(ObjFloorDist).l
00019D02 4A41                       		tst.w	d1
00019D04 6A00                       		bpl.s	loc_16CE0
00019D06 D368 000C                  		add.w	d1,obY(a0)
00019D0A 317C FC00 0012             		move.w	#-$400,obVelY(a0)
00019D10                            
00019D10                            loc_16CE0:
00019D10 4A28 0001                  		tst.b	obRender(a0)
00019D14 6A00 FD80                  		bpl.w	Cat_ChkGone
00019D18 4EF9 0000 F88C             		jmp	(DisplaySprite).l
00019D18 4EF9 0000 F88C             		jmp	(DisplaySprite).l
00019D1E                            		include	"_anim\Caterkiller.asm"
00019D1E                            ; ---------------------------------------------------------------------------
00019D1E                            ; Animation script - Caterkiller enemy (uses non-standard format)
00019D1E                            ; ---------------------------------------------------------------------------
00019D1E 0000 0000 0000 0000 0000+  Ani_Cat:	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
00019D2E 0101 0101 0101 0202 0202+  		dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
00019D3E 0404 0404 0404 0505 0505+  		dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
00019D4E 0606 0707 0707 0707 0707+  		dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
00019D5E 0707 0707 0707 0707 0707+  		dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
00019D6E 0606 0606 0606 0505 0505+  		dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
00019D7E 0403 0303 0303 0202 0202+  		dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
00019D8E 0101 0000 0000 0000 0000+  		dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
00019D9E                            		even
00019D9E                            		even
00019D9E                            Map_Cat:	include	"_maps\Caterkiller.asm"
00019D9E                            ; ---------------------------------------------------------------------------
00019D9E                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00019D9E                            ; ---------------------------------------------------------------------------
00019D9E                            Map_Cat_internal:
00019D9E 0000                       		dc.w byte_16D9E-Map_Cat_internal
00019DA0 0000                       		dc.w byte_16DA4-Map_Cat_internal
00019DA2 0000                       		dc.w byte_16DAA-Map_Cat_internal
00019DA4 0000                       		dc.w byte_16DB0-Map_Cat_internal
00019DA6 0000                       		dc.w byte_16DB6-Map_Cat_internal
00019DA8 0000                       		dc.w byte_16DBC-Map_Cat_internal
00019DAA 0000                       		dc.w byte_16DC2-Map_Cat_internal
00019DAC 0000                       		dc.w byte_16DC8-Map_Cat_internal
00019DAE 0000                       		dc.w byte_16DCE-Map_Cat_internal
00019DB0 0000                       		dc.w byte_16DD4-Map_Cat_internal
00019DB2 0000                       		dc.w byte_16DDA-Map_Cat_internal
00019DB4 0000                       		dc.w byte_16DE0-Map_Cat_internal
00019DB6 0000                       		dc.w byte_16DE6-Map_Cat_internal
00019DB8 0000                       		dc.w byte_16DEC-Map_Cat_internal
00019DBA 0000                       		dc.w byte_16DF2-Map_Cat_internal
00019DBC 0000                       		dc.w byte_16DF8-Map_Cat_internal
00019DBE 0000                       		dc.w byte_16DFE-Map_Cat_internal
00019DC0 0000                       		dc.w byte_16E04-Map_Cat_internal
00019DC2 0000                       		dc.w byte_16E0A-Map_Cat_internal
00019DC4 0000                       		dc.w byte_16E10-Map_Cat_internal
00019DC6 0000                       		dc.w byte_16E16-Map_Cat_internal
00019DC8 0000                       		dc.w byte_16E1C-Map_Cat_internal
00019DCA 0000                       		dc.w byte_16E22-Map_Cat_internal
00019DCC 0000                       		dc.w byte_16E28-Map_Cat_internal
00019DCE 01                         byte_16D9E:	dc.b 1
00019DCF F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
00019DD4 01                         byte_16DA4:	dc.b 1
00019DD5 F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
00019DDA 01                         byte_16DAA:	dc.b 1
00019DDB F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
00019DE0 01                         byte_16DB0:	dc.b 1
00019DE1 EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
00019DE6 01                         byte_16DB6:	dc.b 1
00019DE7 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
00019DEC 01                         byte_16DBC:	dc.b 1
00019DED ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
00019DF2 01                         byte_16DC2:	dc.b 1
00019DF3 EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
00019DF8 01                         byte_16DC8:	dc.b 1
00019DF9 EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
00019DFE 01                         byte_16DCE:	dc.b 1
00019DFF F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00019E04 01                         byte_16DD4:	dc.b 1
00019E05 F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
00019E0A 01                         byte_16DDA:	dc.b 1
00019E0B F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
00019E10 01                         byte_16DE0:	dc.b 1
00019E11 F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
00019E16 01                         byte_16DE6:	dc.b 1
00019E17 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
00019E1C 01                         byte_16DEC:	dc.b 1
00019E1D F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
00019E22 01                         byte_16DF2:	dc.b 1
00019E23 F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
00019E28 01                         byte_16DF8:	dc.b 1
00019E29 F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
00019E2E 01                         byte_16DFE:	dc.b 1
00019E2F F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
00019E34 01                         byte_16E04:	dc.b 1
00019E35 F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
00019E3A 01                         byte_16E0A:	dc.b 1
00019E3B F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
00019E40 01                         byte_16E10:	dc.b 1
00019E41 EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
00019E46 01                         byte_16E16:	dc.b 1
00019E47 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
00019E4C 01                         byte_16E1C:	dc.b 1
00019E4D ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
00019E52 01                         byte_16E22:	dc.b 1
00019E53 EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
00019E58 01                         byte_16E28:	dc.b 1
00019E59 EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
00019E5E                            		even
00019E5E                            		even
00019E5E                            
00019E5E                            		include	"_incObj\79 Lamppost.asm"
00019E5E                            ; ---------------------------------------------------------------------------
00019E5E                            ; Object 79 - lamppost
00019E5E                            ; ---------------------------------------------------------------------------
00019E5E                            
00019E5E                            Lamppost:
00019E5E 7000                       		moveq	#0,d0
00019E60 1028 0024                  		move.b	obRoutine(a0),d0
00019E64 323B 0000                  		move.w	Lamp_Index(pc,d0.w),d1
00019E68 4EBB 1000                  		jsr	Lamp_Index(pc,d1.w)
00019E6C 4EF9 0001 1802             		jmp	(RememberState).l
00019E72                            ; ===========================================================================
00019E72 0000                       Lamp_Index:	dc.w Lamp_Main-Lamp_Index
00019E74 0000                       		dc.w Lamp_Blue-Lamp_Index
00019E76 0000                       		dc.w Lamp_Finish-Lamp_Index
00019E78 0000                       		dc.w Lamp_Twirl-Lamp_Index
00019E7A                            
00019E7A =00000030                  lamp_origX:	equ $30		; original x-axis position
00019E7A =00000032                  lamp_origY:	equ $32		; original y-axis position
00019E7A =00000036                  lamp_time:	equ $36		; length of time to twirl the lamp
00019E7A                            ; ===========================================================================
00019E7A                            
00019E7A                            Lamp_Main:	; Routine 0
00019E7A 5428 0024                  		addq.b	#2,obRoutine(a0)
00019E7E 217C 0000 0000 0004        		move.l	#Map_Lamp,obMap(a0)
00019E86 317C 06C0 0002             		move.w	#($D800/$20),2(a0)
00019E8C 117C 0004 0001             		move.b	#4,obRender(a0)
00019E92 117C 0008 0014             		move.b	#8,obActWid(a0)
00019E98 317C 0280 0018             		move.w	#$280,obPriority(a0)
00019E9E 45F8 FC00                  		lea	(v_objstate).w,a2
00019EA2 7000                       		moveq	#0,d0
00019EA4 1028 0023                  		move.b	obRespawnNo(a0),d0
00019EA8 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00019EAE 0832 0000 0002             		btst	#0,2(a2,d0.w)
00019EB4 6600                       		bne.s	@red
00019EB6 1238 FE30                  		move.b	(v_lastlamp).w,d1
00019EBA 0201 007F                  		andi.b	#$7F,d1
00019EBE 1428 0028                  		move.b	obSubtype(a0),d2 ; get lamppost number
00019EC2 0202 007F                  		andi.b	#$7F,d2
00019EC6 B202                       		cmp.b	d2,d1		; is this a "new" lamppost?
00019EC8 6500                       		bcs.s	Lamp_Blue	; if yes, branch
00019ECA                            
00019ECA                            @red:
00019ECA 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00019ED0 117C 0004 0024             		move.b	#4,obRoutine(a0) ; goto Lamp_Finish next
00019ED6 117C 0003 001A             		move.b	#3,obFrame(a0)
00019EDC 4E75                       		rts	
00019EDE                            
00019EDE                            ; ===========================================================================
00019EDE                            
00019EDE                            Lamp_Blue:	; Routine 2
00019EDE 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
00019EE2 6600 0000                  		bne.w	@donothing	; if yes, branch
00019EE6 4A38 F7C8                  		tst.b	(f_lockmulti).w
00019EEA 6B00 0000                  		bmi.w	@donothing
00019EEE 1238 FE30                  		move.b	(v_lastlamp).w,d1
00019EF2 0201 007F                  		andi.b	#$7F,d1
00019EF6 1428 0028                  		move.b	obSubtype(a0),d2
00019EFA 0202 007F                  		andi.b	#$7F,d2
00019EFE B202                       		cmp.b	d2,d1		; is this a "new" lamppost?
00019F00 6500                       		bcs.s	@chkhit		; if yes, branch
00019F02 45F8 FC00                  		lea	(v_objstate).w,a2
00019F06 7000                       		moveq	#0,d0
00019F08 1028 0023                  		move.b	obRespawnNo(a0),d0
00019F0C 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00019F12 117C 0004 0024             		move.b	#4,obRoutine(a0)
00019F18 117C 0003 001A             		move.b	#3,obFrame(a0)
00019F1E 6000 0000                  		bra.w	@donothing
00019F22                            ; ===========================================================================
00019F22                            
00019F22                            @chkhit:
00019F22 3038 D008                  		move.w	(v_player+obX).w,d0
00019F26 9068 0008                  		sub.w	obX(a0),d0
00019F2A 5040                       		addq.w	#8,d0
00019F2C 0C40 0010                  		cmpi.w	#$10,d0
00019F30 6400 0000                  		bcc.w	@donothing
00019F34 3038 D00C                  		move.w	(v_player+obY).w,d0
00019F38 9068 000C                  		sub.w	obY(a0),d0
00019F3C 0640 0040                  		addi.w	#$40,d0
00019F40 0C40 0068                  		cmpi.w	#$68,d0
00019F44 6400                       		bcc.s	@donothing
00019F46                            
00019F50 5428 0024                  		addq.b	#2,obRoutine(a0)
00019F54 4EB9 0000 FD18             		jsr	(FindFreeObj).l
00019F5A 6600                       		bne.s	@fail
00019F5C 12BC 0079                  		move.b	#id_Lamppost,0(a1)	; load twirling	lamp object
00019F60 137C 0006 0024             		move.b	#6,obRoutine(a1) ; goto Lamp_Twirl next
00019F66 3368 0008 0030             		move.w	obX(a0),lamp_origX(a1)
00019F6C 3368 000C 0032             		move.w	obY(a0),lamp_origY(a1)
00019F72 0469 0018 0032             		subi.w	#$18,lamp_origY(a1)
00019F78 237C 0000 0000 0004        		move.l	#Map_Lamp,obMap(a1)
00019F80 337C 06C0 0002             		move.w	#($D800/$20),2(a1)
00019F86 137C 0004 0001             		move.b	#4,obRender(a1)
00019F8C 137C 0008 0014             		move.b	#8,obActWid(a1)
00019F92 337C 0200 0018             		move.w	#$200,obPriority(a1)
00019F98 137C 0002 001A             		move.b	#2,obFrame(a1)	; use "ball only" frame
00019F9E 337C 0020 0036             		move.w	#$20,lamp_time(a1)
00019FA4                            
00019FA4                            	@fail:
00019FA4 117C 0001 001A             		move.b	#1,obFrame(a0)	; use "post only" frame
00019FAA 6100 0000                  		bsr.w	Lamp_StoreInfo
00019FAE 45F8 FC00                  		lea	(v_objstate).w,a2
00019FB2 7000                       		moveq	#0,d0
00019FB4 1028 0023                  		move.b	obRespawnNo(a0),d0
00019FB8 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00019FBE                            
00019FBE                            	@donothing:
00019FBE 4E75                       		rts	
00019FC0                            ; ===========================================================================
00019FC0                            
00019FC0                            Lamp_Finish:	; Routine 4	
00019FC0 4E75                       		rts	
00019FC2                            ; ===========================================================================
00019FC2                            
00019FC2                            Lamp_Twirl:	; Routine 6
00019FC2 5368 0036                  		subq.w	#1,lamp_time(a0) ; decrement timer
00019FC6 6A00                       		bpl.s	@continue	; if time remains, keep twirling
00019FC8 117C 0004 0024             		move.b	#4,obRoutine(a0) ; goto Lamp_Finish next
00019FCE                            
00019FCE                            	@continue:
00019FCE 1028 0026                  		move.b	obAngle(a0),d0
00019FD2 0428 0010 0026             		subi.b	#$10,obAngle(a0)
00019FD8 0400 0040                  		subi.b	#$40,d0
00019FDC 4EB9 0000 3A32             		jsr	(CalcSine).l
00019FE2 C3FC 0C00                  		muls.w	#$C00,d1
00019FE6 4841                       		swap	d1
00019FE8 D268 0030                  		add.w	lamp_origX(a0),d1
00019FEC 3141 0008                  		move.w	d1,obX(a0)
00019FF0 C1FC 0C00                  		muls.w	#$C00,d0
00019FF4 4840                       		swap	d0
00019FF6 D068 0032                  		add.w	lamp_origY(a0),d0
00019FFA 3140 000C                  		move.w	d0,obY(a0)
00019FFE 4E75                       		rts	
0001A000                            ; ===========================================================================
0001A000                            ; ---------------------------------------------------------------------------
0001A000                            ; Subroutine to	store information when you hit a lamppost
0001A000                            ; ---------------------------------------------------------------------------
0001A000                            
0001A000                            Lamp_StoreInfo:
0001A000 11E8 0028 FE30             		move.b	obSubtype(a0),(v_lastlamp).w 	; lamppost number
0001A006 11F8 FE30 FE31             		move.b	(v_lastlamp).w,($FFFFFE31).w
0001A00C 31E8 0008 FE32             		move.w	obX(a0),($FFFFFE32).w		; x-position
0001A012 31E8 000C FE34             		move.w	obY(a0),($FFFFFE34).w		; y-position
0001A018 31F8 FE20 FE36             		move.w	(v_rings).w,($FFFFFE36).w 	; rings
0001A01E 11F8 FE1B FE54             		move.b	(v_lifecount).w,($FFFFFE54).w 	; lives
0001A024 21F8 FE22 FE38             		move.l	(v_time).w,($FFFFFE38).w 	; time
0001A02A 11F8 F742 FE3C             		move.b	(v_dle_routine).w,($FFFFFE3C).w ; routine counter for dynamic level mod
0001A030 31F8 F72E FE3E             		move.w	(v_limitbtm2).w,($FFFFFE3E).w 	; lower y-boundary of level
0001A036 31F8 F700 FE40             		move.w	(v_screenposx).w,($FFFFFE40).w 	; screen x-position
0001A03C 31F8 F704 FE42             		move.w	(v_screenposy).w,($FFFFFE42).w 	; screen y-position
0001A042 31F8 F708 FE44             		move.w	(v_bgscreenposx).w,($FFFFFE44).w ; bg position
0001A048 31F8 F70C FE46             		move.w	(v_bgscreenposy).w,($FFFFFE46).w 	; bg position
0001A04E 31F8 F710 FE48             		move.w	(v_bg2screenposx).w,($FFFFFE48).w 	; bg position
0001A054 31F8 F714 FE4A             		move.w	(v_bg2screenposy).w,($FFFFFE4A).w 	; bg position
0001A05A 31F8 F718 FE4C             		move.w	(v_bg3screenposx).w,($FFFFFE4C).w 	; bg position
0001A060 31F8 F71C FE4E             		move.w	(v_bg3screenposy).w,($FFFFFE4E).w 	; bg position
0001A066 31F8 F648 FE50             		move.w	(v_waterpos2).w,($FFFFFE50).w 	; water height
0001A06C 11F8 F64D FE52             		move.b	(v_wtr_routine).w,($FFFFFE52).w ; rountine counter for water
0001A072 11F8 F64E FE53             		move.b	(f_wtr_state).w,($FFFFFE53).w 	; water direction
0001A078 11F8 F5C3 FE54             		move.b	(f_emeraldm).w,($FFFFFE54).w 	; emerald monitor
0001A07E 4E75                       		rts	
0001A080                            
0001A080                            ; ---------------------------------------------------------------------------
0001A080                            ; Subroutine to	load stored info when you start	a level	from a lamppost
0001A080                            ; ---------------------------------------------------------------------------
0001A080                            
0001A080                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A080                            
0001A080                            
0001A080                            Lamp_LoadInfo:
0001A080 11F8 FE31 FE30             		move.b	($FFFFFE31).w,(v_lastlamp).w
0001A086 31F8 FE32 D008             		move.w	($FFFFFE32).w,(v_player+obX).w
0001A08C 31F8 FE34 D00C             		move.w	($FFFFFE34).w,(v_player+obY).w
0001A092 31F8 FE36 FE20             		move.w	($FFFFFE36).w,(v_rings).w
0001A098 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,(v_lifecount).w
0001A09E 4278 FE20                  		clr.w	(v_rings).w
0001A0A2 4238 FE1B                  		clr.b	(v_lifecount).w
0001A0A6 21F8 FE38 FE22             		move.l	($FFFFFE38).w,(v_time).w
0001A0AC 11FC 003B FE25             		move.b	#59,(v_timecent).w
0001A0B2 5338 FE24                  		subq.b	#1,(v_timesec).w
0001A0B6 11F8 FE3C F742             		move.b	($FFFFFE3C).w,(v_dle_routine).w
0001A0BC 11F8 FE52 F64D             		move.b	($FFFFFE52).w,(v_wtr_routine).w
0001A0C2 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,(v_limitbtm2).w
0001A0C8 31F8 FE3E F726             		move.w	($FFFFFE3E).w,(v_limitbtm1).w
0001A0CE 31F8 FE40 F700             		move.w	($FFFFFE40).w,(v_screenposx).w
0001A0D4 31F8 FE42 F704             		move.w	($FFFFFE42).w,(v_screenposy).w
0001A0DA 31F8 FE44 F708             		move.w	($FFFFFE44).w,(v_bgscreenposx).w
0001A0E0 31F8 FE46 F70C             		move.w	($FFFFFE46).w,(v_bgscreenposy).w
0001A0E6 31F8 FE48 F710             		move.w	($FFFFFE48).w,(v_bg2screenposx).w
0001A0EC 31F8 FE4A F714             		move.w	($FFFFFE4A).w,(v_bg2screenposy).w
0001A0F2 31F8 FE4C F718             		move.w	($FFFFFE4C).w,(v_bg3screenposx).w
0001A0F8 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,(v_bg3screenposy).w
0001A0FE 11F8 FE54 F5C3             		move.b	($FFFFFE54).w,(f_emeraldm).w	;emerald monitor count
0001A104 0C38 0001 FE10             		cmpi.b	#1,(v_zone).w	; is this Labyrinth Zone?
0001A10A 6600                       		bne.s	@notlabyrinth	; if not, branch
0001A10C                            
0001A10C 31F8 FE50 F648             		move.w	($FFFFFE50).w,(v_waterpos2).w
0001A112 11F8 FE52 F64D             		move.b	($FFFFFE52).w,(v_wtr_routine).w
0001A118 11F8 FE53 F64E             		move.b	($FFFFFE53).w,(f_wtr_state).w
0001A11E                            
0001A11E                            	@notlabyrinth:
0001A11E 4A38 FE30                  		tst.b	(v_lastlamp).w
0001A122 6A00                       		bpl.s	locret_170F6
0001A124 3038 FE32                  		move.w	($FFFFFE32).w,d0
0001A128 0440 00A0                  		subi.w	#$A0,d0
0001A12C 31C0 F728                  		move.w	d0,(v_limitleft2).w
0001A130                            
0001A130                            locret_170F6:
0001A130 4E75                       		rts	
0001A130 4E75                       		rts	
0001A132                            Map_Lamp:	include	"_maps\Lamppost.asm"
0001A132                            ; --------------------------------------------------------------------------------
0001A132                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001A132                            ; --------------------------------------------------------------------------------
0001A132                            
0001A132                            SME_JfaKr:	
0001A132 0000 0000                  		dc.w SME_JfaKr_A-SME_JfaKr, SME_JfaKr_3D-SME_JfaKr	
0001A136 0000 0000                  		dc.w SME_JfaKr_66-SME_JfaKr, SME_JfaKr_71-SME_JfaKr	
0001A13A 0000                       		dc.w SME_JfaKr_A4-SME_JfaKr	
0001A13C 0A                         SME_JfaKr_A:	dc.b $A	
0001A13D E401 0000 F8               		dc.b $E4, 1, 0, 0, $F8	
0001A142 E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001A147 D401 0006 F8               		dc.b $D4, 1, 0, 6, $F8	
0001A14C D401 0806 00               		dc.b $D4, 1, 8, 6, 0	
0001A151 F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001A156 F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001A15B 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001A160 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001A165 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001A16A 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001A16F 08                         SME_JfaKr_3D:	dc.b 8	
0001A170 E401 2000 F8               		dc.b $E4, 1, $20, 0, $F8	
0001A175 E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001A17A F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001A17F F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001A184 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001A189 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001A18E 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001A193 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001A198 02                         SME_JfaKr_66:	dc.b 2	
0001A199 F801 0008 F8               		dc.b $F8, 1, 0, 8, $F8	
0001A19E F801 0808 00               		dc.b $F8, 1, 8, 8, 0	
0001A1A3 0A                         SME_JfaKr_71:	dc.b $A	
0001A1A4 E401 2000 F8               		dc.b $E4, 1, $20, 0, $F8	
0001A1A9 E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001A1AE F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001A1B3 F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001A1B8 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001A1BD 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001A1C2 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001A1C7 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001A1CC D401 0008 F8               		dc.b $D4, 1, 0, 8, $F8	
0001A1D1 D401 0808 00               		dc.b $D4, 1, 8, 8, 0	
0001A1D6 0A                         SME_JfaKr_A4:	dc.b $A	
0001A1D7 E401 2000 F8               		dc.b $E4, 1, $20, 0, $F8	
0001A1DC E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001A1E1 F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001A1E6 F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001A1EB 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001A1F0 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001A1F5 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001A1FA 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001A1FF D401 0008 F8               		dc.b $D4, 1, 0, 8, $F8	
0001A204 D401 2808 00               		dc.b $D4, 1, $28, 8, 0	
0001A20A 00                         		even
0001A20A 00                         		even
0001A20A                            		include	"_incObj\7D Hidden Bonuses.asm"
0001A20A                            ; ---------------------------------------------------------------------------
0001A20A                            ; Object 7D - hidden points at the end of a level
0001A20A                            ; ---------------------------------------------------------------------------
0001A20A                            
0001A20A                            HiddenBonus:
0001A20A 7000                       		moveq	#0,d0
0001A20C 1028 0024                  		move.b	obRoutine(a0),d0
0001A210 323B 0000                  		move.w	Bonus_Index(pc,d0.w),d1
0001A214 4EFB 1000                  		jmp	Bonus_Index(pc,d1.w)
0001A218                            ; ===========================================================================
0001A218 0000                       Bonus_Index:	dc.w Bonus_Main-Bonus_Index
0001A21A 0000                       		dc.w Bonus_Display-Bonus_Index
0001A21C                            
0001A21C =00000030                  bonus_timelen:	equ $30		; length of time to display bonus sprites
0001A21C                            ; ===========================================================================
0001A21C                            
0001A21C                            Bonus_Main:	; Routine 0
0001A21C 7410                       		moveq	#$10,d2
0001A21E 3602                       		move.w	d2,d3
0001A220 D643                       		add.w	d3,d3
0001A222 43F8 D000                  		lea	(v_player).w,a1
0001A226 3029 0008                  		move.w	obX(a1),d0
0001A22A 9068 0008                  		sub.w	obX(a0),d0
0001A22E D042                       		add.w	d2,d0
0001A230 B043                       		cmp.w	d3,d0
0001A232 6400                       		bcc.s	bonu_chkdel
0001A234 3229 000C                  		move.w	obY(a1),d1
0001A238 9268 000C                  		sub.w	obY(a0),d1
0001A23C D242                       		add.w	d2,d1
0001A23E B243                       		cmp.w	d3,d1
0001A240 6400                       		bcc.s	bonu_chkdel
0001A242 4A78 FE08                  		tst.w	(v_debuguse).w
0001A246 6600                       		bne.s	bonu_chkdel
0001A248 4A38 F7CD                  		tst.b	(f_bigring).w
0001A24C 6600                       		bne.s	bonu_chkdel
0001A24E 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A252 217C 0000 0000 0004        		move.l	#Map_Bonus,obMap(a0)
0001A25A 317C 84B6 0002             		move.w	#$84B6,obGfx(a0)
0001A260 0028 0004 0001             		ori.b	#4,obRender(a0)
0001A266 317C 0000 0018             		move.w	#0,obPriority(a0)
0001A26C 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001A272 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
0001A278 317C 0077 0030             		move.w	#119,bonus_timelen(a0) ; set display time to 2 seconds
0001A288 7000                       		moveq	#0,d0
0001A28A 1028 0028                  		move.b	obSubtype(a0),d0
0001A28E D040                       		add.w	d0,d0
0001A290 303B 0000                  		move.w	obj7d_points(pc,d0.w),d0 ; load bonus points array
0001A294 4EB9 0000 0000             		jsr	(AddPoints).l
0001A29A                            
0001A29A                            bonu_chkdel:
0001A2B6 4E75                       		rts	
0001A2B8                            
0001A2B8                            	@delete:
0001A2B8 4EF9 0000 F8CC             		jmp	(DeleteObject).l
0001A2BE                            
0001A2BE                            ; ===========================================================================
0001A2BE 0000                       obj7d_points:	dc.w 0			; Bonus	points array
0001A2C0 03E8                       		dc.w 1000
0001A2C2 0064                       		dc.w 100
0001A2C4 000A                       		dc.w 10
0001A2C6                            ; ===========================================================================
0001A2C6                            
0001A2C6                            Bonus_Display:	; Routine 2
0001A2C6 5368 0030                  		subq.w	#1,bonus_timelen(a0) ; decrement display time
0001A2CA 6B00                       		bmi.s	Bonus_Display_Delete		; if time is zero, branch
0001A2E8 4EF9 0000 F88C             		jmp	(DisplaySprite).l
0001A2EE                            
0001A2EE                            Bonus_Display_Delete:	
0001A2EE 4EF9 0000 F8CC             		jmp	(DeleteObject).l
0001A2EE 4EF9 0000 F8CC             		jmp	(DeleteObject).l
0001A2F4                            Map_Bonus:	include	"_maps\Hidden Bonuses.asm"
0001A2F4                            ; ---------------------------------------------------------------------------
0001A2F4                            ; Sprite mappings - hidden points at the end of	a level
0001A2F4                            ; ---------------------------------------------------------------------------
0001A2F4                            Map_Bonus_internal:
0001A2F4 0000                       		dc.w @blank-Map_Bonus_internal
0001A2F6 0000                       		dc.w @10000-Map_Bonus_internal
0001A2F8 0000                       		dc.w @1000-Map_Bonus_internal
0001A2FA 0000                       		dc.w @100-Map_Bonus_internal
0001A2FC 00                         @blank:		dc.b 0
0001A2FD 01                         @10000:		dc.b 1
0001A2FE F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0001A303 01                         @1000:		dc.b 1
0001A304 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0001A309 01                         @100:		dc.b 1
0001A30A F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
0001A310 00                         		even
0001A310 00                         		even
0001A310                            
0001A310                            		include	"_incObj\8A Credits.asm"
0001A310                            ; ---------------------------------------------------------------------------
0001A310                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
0001A310                            ; ---------------------------------------------------------------------------
0001A310                            
0001A310                            CreditsText:
0001A310 7000                       		moveq	#0,d0
0001A312 1028 0024                  		move.b	obRoutine(a0),d0
0001A316 323B 0000                  		move.w	Cred_Index(pc,d0.w),d1
0001A31A 4EFB 1000                  		jmp	Cred_Index(pc,d1.w)
0001A31E                            ; ===========================================================================
0001A31E 0000                       Cred_Index:	dc.w Cred_Main-Cred_Index
0001A320 0000                       		dc.w Cred_Display-Cred_Index
0001A322                            ; ===========================================================================
0001A322                            
0001A322                            Cred_Main:	; Routine 0
0001A322 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A326 317C 0120 0008             		move.w	#$120,obX(a0)
0001A32C 317C 00F0 000A             		move.w	#$F0,obScreenY(a0)
0001A332 217C 0000 0000 0004        		move.l	#Map_Cred,obMap(a0)
0001A33A 317C 05A0 0002             		move.w	#$5A0,obGfx(a0)
0001A340 3038 FFF4                  		move.w	(v_creditsnum).w,d0 ; load credits index number
0001A344 1140 001A                  		move.b	d0,obFrame(a0)	; display appropriate sprite
0001A348 117C 0000 0001             		move.b	#0,obRender(a0)
0001A34E 317C 0000 0018             		move.w	#0,obPriority(a0)
0001A354                            
0001A354 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w ; is the mode #4 (title screen)?
0001A35A 6600                       		bne.s	Cred_Display	; if not, branch
0001A35C                            
0001A35C 317C 00A6 0002             		move.w	#$A6,obGfx(a0)
0001A362 117C 000A 001A             		move.b	#$A,obFrame(a0)	; display "SONIC TEAM PRESENTS"
0001A368 4A38 FFE3                  		tst.b	(f_creditscheat).w ; is hidden credits cheat on?
0001A36C 6700                       		beq.s	Cred_Display	; if not, branch
0001A36E 0C38 0072 F604             		cmpi.b	#btnABC+btnDn,(v_jpadhold1).w ; is A+B+C+Down being pressed? ($72)
0001A374 6600                       		bne.s	Cred_Display	; if not, branch
0001A376 31FC 0EEE FBC0             		move.w	#cWhite,(v_pal_dry_dup+$40).w ; 3rd palette, 1st entry = white
0001A37C 31FC 0880 FBC2             		move.w	#$880,(v_pal_dry_dup+$42).w ; 3rd palette, 2nd entry = cyan
0001A382 4EF9 0000 F8CC             		jmp	(DeleteObject).l
0001A388                            ; ===========================================================================
0001A388                            
0001A388                            Cred_Display:	; Routine 2
0001A388 4EF9 0000 F88C             		jmp	DisplaySprite
0001A388 4EF9 0000 F88C             		jmp	DisplaySprite
0001A38E                            Map_Cred:	include	"_maps\Credits.asm"
0001A38E                            ; ---------------------------------------------------------------------------
0001A38E                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
0001A38E                            ; ---------------------------------------------------------------------------
0001A38E                            Map_Cred_internal:
0001A38E 0000                       		dc.w @staff-Map_Cred_internal
0001A390 0000                       		dc.w @gameplan-Map_Cred_internal
0001A392 0000                       		dc.w @program-Map_Cred_internal
0001A394 0000                       		dc.w @character-Map_Cred_internal
0001A396 0000                       		dc.w @design-Map_Cred_internal
0001A398 0000                       		dc.w @soundproduce-Map_Cred_internal
0001A39A 0000                       		dc.w @soundprogram-Map_Cred_internal
0001A39C 0000                       		dc.w @thanks-Map_Cred_internal
0001A39E 0000                       		dc.w @presentedby-Map_Cred_internal
0001A3A0 0000                       		dc.w @tryagain-Map_Cred_internal
0001A3A2 0000                       		dc.w @sonicteam-Map_Cred_internal
0001A3A4 0E                         @staff:		dc.b $E			 ; SONIC TEAM STAFF
0001A3A5 F805 002E 88               		dc.b $F8, 5, 0,	$2E, $88
0001A3AA F805 0026 98               		dc.b $F8, 5, 0,	$26, $98
0001A3AF F805 001A A8               		dc.b $F8, 5, 0,	$1A, $A8
0001A3B4 F801 0046 B8               		dc.b $F8, 1, 0,	$46, $B8
0001A3B9 F805 001E C0               		dc.b $F8, 5, 0,	$1E, $C0
0001A3BE F805 003E D8               		dc.b $F8, 5, 0,	$3E, $D8
0001A3C3 F805 000E E8               		dc.b $F8, 5, 0,	$E, $E8
0001A3C8 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001A3CD F809 0008 08               		dc.b $F8, 9, 0,	8, 8
0001A3D2 F805 002E 28               		dc.b $F8, 5, 0,	$2E, $28
0001A3D7 F805 003E 38               		dc.b $F8, 5, 0,	$3E, $38
0001A3DC F805 0004 48               		dc.b $F8, 5, 0,	4, $48
0001A3E1 F805 005C 58               		dc.b $F8, 5, 0,	$5C, $58
0001A3E6 F805 005C 68               		dc.b $F8, 5, 0,	$5C, $68
0001A3EB 0E                         @gameplan:	dc.b $E	;  GAME PLAN CAROL YAS | GAME PLAN SORRA    
0001A3EC 9005 0000 90               		dc.b $90, 5, 0, 0, $90		; G
0001A3F1 9005 0004 A0               		dc.b $90, 5, 0, 4, $A0		; A
0001A3F6 9009 0008 B0               		dc.b $90, 9, 0, 8, $B0		; M
0001A3FB 9005 000E C4               		dc.b $90, 5, 0, $0E, $C4	; E
0001A400 9000 0060 0C               		dc.b $90, 0, 0, $60, $C    ;Space
0001A405 9005 0012 E4               		dc.b $90, 5, 0, $12, $E4	; P
0001A40A 9005 0016 F4               		dc.b $90, 5, 0, $16, $F4	; L
0001A40F 9005 0004 04               		dc.b $90, 5, 0, 4, $4		; A
0001A414 9005 001A 14               		dc.b $90, 5, 0, $1A, $14	; N
0001A419                            
0001A419 B805 002E C0               		dc.b $B8, 5, 0, $2E, $C0	; S
0001A41E B805 0026 D0               		dc.b $B8, 5, 0, $26, $D0	; O
0001A423 B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
0001A428 B805 0022 F0               		dc.b $B8, 5, 0, $22, $F0	; R
0001A42D B805 0004 00               		dc.b $B8, 5, 0, 4, $0		; A
0001A432 1B                         @program:	dc.b $1B	;  CHARACTER DESIGN BIGISLAND | PROGRAM ANGELKOR INVISIBLE SUN  
0001A433 9005 0012 90               		dc.b $90, 5, 0, $12, $90	; P
0001A438 9005 0022 A0               		dc.b $90, 5, 0, $22, $A0	; R
0001A43D 9005 0026 B0               		dc.b $90, 5, 0, $26, $B0	; O
0001A442 9005 0000 C0               		dc.b $90, 5, 0, 0, $C0		; G
0001A447 9005 0022 D0               		dc.b $90, 5, 0, $22, $D0	; R
0001A44C 9005 0004 E0               		dc.b $90, 5, 0, 4, $E0		; A
0001A451 9009 0008 F0               		dc.b $90, 9, 0, 8, $F0		; M
0001A456                            
0001A456 B805 0004 C0               		dc.b $B8, 5, 0, 4, $C0		; A
0001A45B B805 001A D0               		dc.b $B8, 5, 0, $1A, $D0	; N
0001A460 B805 0000 E0               		dc.b $B8, 5, 0, 0, $E0		; G
0001A465 B805 000E F0               		dc.b $B8, 5, 0, $0E, $F0	; E
0001A46A B805 0016 00               		dc.b $B8, 5, 0, $16, $0	; L
0001A46F B805 0058 10               		dc.b $B8, 5, 0, $58, $10	; K
0001A474 B805 0026 20               		dc.b $B8, 5, 0, $26, $20	; O
0001A479 B805 0022 30               		dc.b $B8, 5, 0, $22, $30	; R
0001A47E                            
0001A47E D801 0046 C0               		dc.b $D8, 1, 0, $46, $C0	; I
0001A483 D805 001A C8               		dc.b $D8, 5, 0, $1A, $C8	; N
0001A488                            
0001A488 D801 0046 E8               		dc.b $D8, 1, 0, $46, $E8	; I
0001A48D D805 002E F0               		dc.b $D8, 5, 0, $2E, $F0	; S
0001A492 D801 0046 00               		dc.b $D8, 1, 0, $46, $0	; I
0001A497 D805 0048 08               		dc.b $D8, 5, 0, $48, $8	; B
0001A49C D805 0016 18               		dc.b $D8, 5, 0, $16, $18	; L
0001A4A1 D805 000E 28               		dc.b $D8, 5, 0, $0E, $28	; E
0001A4A6                            
0001A4A6 F805 002E C0               		dc.b $F8, 5, 0, $2E, $C0	; S
0001A4AB F805 0032 D0               		dc.b $F8, 5, 0, $32, $D0	; U
0001A4B0 F805 001A E0               		dc.b $F8, 5, 0, $1A, $E0	; N
0001A4B5 08                         @character:	dc.b $8	;  CHARACTER DESIGN BIGISLAND | ART SORRA    
0001A4B6 9005 0004 90               		dc.b $90, 5, 0, 4, $90		; A
0001A4BB 9005 0022 A0               		dc.b $90, 5, 0, $22, $A0	; R
0001A4C0 9005 003E B0               		dc.b $90, 5, 0, $3E, $B0	; T
0001A4C5                            
0001A4C5 B805 002E C0               		dc.b $B8, 5, 0, $2E, $C0	; S
0001A4CA B805 0026 D0               		dc.b $B8, 5, 0, $26, $D0	; O
0001A4CF B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
0001A4D4 B805 0022 F0               		dc.b $B8, 5, 0, $22, $F0	; R
0001A4D9 B805 0004 00               		dc.b $B8, 5, 0, 4, $0
0001A4DE 0B                         @design:	dc.b $B	;  DESIGN JINYA PHENIX RIE | DESIGN SORRA    
0001A4DF 9005 0042 90               		dc.b $90, 5, 0, $42, $90	; D
0001A4E4 9005 000E A0               		dc.b $90, 5, 0, $0E, $A0	; E
0001A4E9 9005 002E B0               		dc.b $90, 5, 0, $2E, $B0	; S
0001A4EE 9001 0046 C0               		dc.b $90, 1, 0, $46, $C0	; I
0001A4F3 9005 0000 C8               		dc.b $90, 5, 0, 0, $C8		; G
0001A4F8 9005 001A D8               		dc.b $90, 5, 0, $1A, $D8	; N
0001A4FD                            
0001A4FD B805 002E C0               		dc.b $B8, 5, 0, $2E, $C0	; S
0001A502 B805 0026 D0               		dc.b $B8, 5, 0, $26, $D0	; O
0001A507 B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
0001A50C B805 0022 F0               		dc.b $B8, 5, 0, $22, $F0	; R
0001A511 B805 0004 00               		dc.b $B8, 5, 0, 4, $0		; A
0001A516 1C                         @soundproduce:	dc.b $1C	;  SOUND PRODUCE MASATO NAKAMURA | SOUND PORT MR JOKER PRODUCTION   
0001A517 9005 002E 90               		dc.b $90, 5, 0, $2E, $90	; S
0001A51C 9005 0026 A0               		dc.b $90, 5, 0, $26, $A0	; O
0001A521 9005 0032 B0               		dc.b $90, 5, 0, $32, $B0	; U
0001A526 9005 001A C0               		dc.b $90, 5, 0, $1A, $C0	; N
0001A52B 9005 0042 D0               		dc.b $90, 5, 0, $42, $D0	; D
0001A530 9000 0060 0C               		dc.b $90, 0, 0, $60, $C    ;Space
0001A535 9005 0012 F0               		dc.b $90, 5, 0, $12, $F0	; P
0001A53A 9005 0026 00               		dc.b $90, 5, 0, $26, $0	; O
0001A53F 9005 0022 10               		dc.b $90, 5, 0, $22, $10	; R
0001A544 9005 003E 20               		dc.b $90, 5, 0, $3E, $20	; T
0001A549                            
0001A549 B809 0008 C0               		dc.b $B8, 9, 0, 8, $C0		; M
0001A54E B805 0022 D4               		dc.b $B8, 5, 0, $22, $D4	; R
0001A553 B800 0060 0C               		dc.b $B8, 0, 0, $60, $C    ;Space
0001A558 B805 004C F4               		dc.b $B8, 5, 0, $4C, $F4	; J
0001A55D B805 0026 04               		dc.b $B8, 5, 0, $26, $4	; O
0001A562 B805 0058 14               		dc.b $B8, 5, 0, $58, $14	; K
0001A567 B805 000E 24               		dc.b $B8, 5, 0, $0E, $24	; E
0001A56C B805 0022 34               		dc.b $B8, 5, 0, $22, $34	; R
0001A571                            
0001A571 D805 0012 C0               		dc.b $D8, 5, 0, $12, $C0	; P
0001A576 D805 0022 D0               		dc.b $D8, 5, 0, $22, $D0	; R
0001A57B D805 0026 E0               		dc.b $D8, 5, 0, $26, $E0	; O
0001A580 D805 0042 F0               		dc.b $D8, 5, 0, $42, $F0	; D
0001A585 D805 0032 00               		dc.b $D8, 5, 0, $32, $0	; U
0001A58A D805 001E 10               		dc.b $D8, 5, 0, $1E, $10	; C
0001A58F D805 003E 20               		dc.b $D8, 5, 0, $3E, $20	; T
0001A594 D801 0046 30               		dc.b $D8, 1, 0, $46, $30	; I
0001A599 D805 0026 38               		dc.b $D8, 5, 0, $26, $38	; O
0001A59E D805 001A 48               		dc.b $D8, 5, 0, $1A, $48	; N
0001A5A3 17                         @soundprogram:	dc.b $17		 ; SOUND PROGRAM JIMITA	MACKY
0001A5A4 D005 002E 98               		dc.b $D0, 5, 0,	$2E, $98
0001A5A9 D005 0026 A8               		dc.b $D0, 5, 0,	$26, $A8
0001A5AE D005 0032 B8               		dc.b $D0, 5, 0,	$32, $B8
0001A5B3 D005 001A C8               		dc.b $D0, 5, 0,	$1A, $C8
0001A5B8 D005 0054 D8               		dc.b $D0, 5, 0,	$54, $D8
0001A5BD D005 0012 F8               		dc.b $D0, 5, 0,	$12, $F8
0001A5C2 D005 0022 08               		dc.b $D0, 5, 0,	$22, 8
0001A5C7 D005 0026 18               		dc.b $D0, 5, 0,	$26, $18
0001A5CC D005 0000 28               		dc.b $D0, 5, 0,	0, $28
0001A5D1 D005 0022 38               		dc.b $D0, 5, 0,	$22, $38
0001A5D6 D005 0004 48               		dc.b $D0, 5, 0,	4, $48
0001A5DB D009 0008 58               		dc.b $D0, 9, 0,	8, $58
0001A5E0 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
0001A5E5 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
0001A5EA 0009 0008 E8               		dc.b 0,	9, 0, 8, $E8
0001A5EF 0001 0046 FC               		dc.b 0,	1, 0, $46, $FC
0001A5F4 0005 003E 04               		dc.b 0,	5, 0, $3E, 4
0001A5F9 0005 0004 14               		dc.b 0,	5, 0, 4, $14
0001A5FE 2009 0008 D0               		dc.b $20, 9, 0,	8, $D0
0001A603 2005 0004 E4               		dc.b $20, 5, 0,	4, $E4
0001A608 2005 001E F4               		dc.b $20, 5, 0,	$1E, $F4
0001A60D 2005 0058 04               		dc.b $20, 5, 0,	$58, 4
0001A612 2005 002A 14               		dc.b $20, 5, 0,	$2A, $14
0001A617 11                         @thanks:	dc.b $11	;  SPECIAL THANKS FUJIO MINEGISHI PAPA | SPECIAL  THANKS YOU   
0001A618 9005 002E 90               		dc.b $90, 5, 0, $2E, $90	; S
0001A61D 9005 0012 A0               		dc.b $90, 5, 0, $12, $A0	; P
0001A622 9005 000E B0               		dc.b $90, 5, 0, $0E, $B0	; E
0001A627 9005 001E C0               		dc.b $90, 5, 0, $1E, $C0	; C
0001A62C 9001 0046 D0               		dc.b $90, 1, 0, $46, $D0	; I
0001A631 9005 0004 D8               		dc.b $90, 5, 0, 4, $D8		; A
0001A636 9005 0016 E8               		dc.b $90, 5, 0, $16, $E8	; L
0001A63B 9000 0060 0C               		dc.b $90, 0, 0, $60, $C    ;Space
0001A640                            
0001A640 B805 003E C0               		dc.b $B8, 5, 0, $3E, $C0	; T
0001A645 B805 003A D0               		dc.b $B8, 5, 0, $3A, $D0	; H
0001A64A B805 0004 E0               		dc.b $B8, 5, 0, 4, $E0		; A
0001A64F B805 001A F0               		dc.b $B8, 5, 0, $1A, $F0	; N
0001A654 B805 0058 00               		dc.b $B8, 5, 0, $58, $0	; K
0001A659 B805 002E 10               		dc.b $B8, 5, 0, $2E, $10	; S
0001A65E                            
0001A65E D805 002A C0               		dc.b $D8, 5, 0, $2A, $C0	; Y
0001A663 D805 0026 D0               		dc.b $D8, 5, 0, $26, $D0	; O
0001A668 D805 0032 E0               		dc.b $D8, 5, 0, $32, $E0	; U
0001A66D 10                         @presentedby:	dc.b $10	;  PRESENTED BY SEGA | PRESENTED BY SORRA   
0001A66E 9005 0012 90               		dc.b $90, 5, 0, $12, $90	; P
0001A673 9005 0022 A0               		dc.b $90, 5, 0, $22, $A0	; R
0001A678 9005 000E B0               		dc.b $90, 5, 0, $0E, $B0	; E
0001A67D 9005 002E C0               		dc.b $90, 5, 0, $2E, $C0	; S
0001A682 9005 000E D0               		dc.b $90, 5, 0, $0E, $D0	; E
0001A687 9005 001A E0               		dc.b $90, 5, 0, $1A, $E0	; N
0001A68C 9005 003E F0               		dc.b $90, 5, 0, $3E, $F0	; T
0001A691 9005 000E 00               		dc.b $90, 5, 0, $0E, $0	; E
0001A696 9005 0042 10               		dc.b $90, 5, 0, $42, $10	; D
0001A69B                            
0001A69B B805 0048 C0               		dc.b $B8, 5, 0, $48, $C0	; B
0001A6A0 B805 002A D0               		dc.b $B8, 5, 0, $2A, $D0	; Y
0001A6A5                            
0001A6A5 D805 002E C0               		dc.b $D8, 5, 0, $2E, $C0	; S
0001A6AA D805 0026 D0               		dc.b $D8, 5, 0, $26, $D0	; O
0001A6AF D805 0022 E0               		dc.b $D8, 5, 0, $22, $E0	; R
0001A6B4 D805 0022 F0               		dc.b $D8, 5, 0, $22, $F0	; R
0001A6B9 D805 0004 00               		dc.b $D8, 5, 0, 4, $0		; A
0001A6BE 08                         @tryagain:	dc.b 8			 ; TRY AGAIN
0001A6BF 3005 003E C0               		dc.b $30, 5, 0,	$3E, $C0
0001A6C4 3005 0022 D0               		dc.b $30, 5, 0,	$22, $D0
0001A6C9 3005 002A E0               		dc.b $30, 5, 0,	$2A, $E0
0001A6CE 3005 0004 F8               		dc.b $30, 5, 0,	4, $F8
0001A6D3 3005 0000 08               		dc.b $30, 5, 0,	0, 8
0001A6D8 3005 0004 18               		dc.b $30, 5, 0,	4, $18
0001A6DD 3001 0046 28               		dc.b $30, 1, 0,	$46, $28
0001A6E2 3005 001A 30               		dc.b $30, 5, 0,	$1A, $30
0001A6E7 0E                         @sonicteam:	dc.b $E	;  SONIC TEAM PRESENTS | SORRA PRESENTS
0001A6E8 E805 002E D0               		dc.b $E8, 5, 0, $2E, $D0	; S
0001A6ED E805 0026 E0               		dc.b $E8, 5, 0, $26, $E0	; O
0001A6F2 E805 0022 F0               		dc.b $E8, 5, 0, $22, $F0	; R
0001A6F7 E805 0022 00               		dc.b $E8, 5, 0, $22, $0	; R
0001A6FC E805 0004 10               		dc.b $E8, 5, 0, 4, $10		; A
0001A701 E800 0060 0C               		dc.b $E8, 0, 0, $60, $C   	 ; Space
0001A706                            
0001A706 0005 0012 C0               		dc.b 0,	5, 0, $12, $C0	; P
0001A70B 0005 0022 D0               		dc.b 0,	5, 0, $22, $D0	; R
0001A710 0005 000E E0               		dc.b 0,	5, 0, $E, $E0	; E
0001A715 0005 002E F0               		dc.b 0,	5, 0, $2E, $F0	; S
0001A71A 0005 000E 00               		dc.b 0,	5, 0, $E, 0	; E
0001A71F 0005 001A 10               		dc.b 0,	5, 0, $1A, $10	; N
0001A724 0005 003E 20               		dc.b 0,	5, 0, $3E, $20	; T
0001A729 0005 002E 30               		dc.b 0,	5, 0, $2E, $30	; S
0001A72E                            		even
0001A72E                            		even
0001A72E                            
0001A72E                            		include	"_incObj\3D Boss - Green Hill (part 1).asm"
0001A72E                            ; ---------------------------------------------------------------------------
0001A72E                            ; Object 3D - Eggman (GHZ)
0001A72E                            ; ---------------------------------------------------------------------------
0001A72E                            
0001A72E                            BossGreenHill:
0001A72E 7000                       		moveq	#0,d0
0001A730 1028 0024                  		move.b	obRoutine(a0),d0
0001A734 323B 0000                  		move.w	BGHZ_Index(pc,d0.w),d1
0001A738 4EFB 1000                  		jmp	BGHZ_Index(pc,d1.w)
0001A73C                            ; ===========================================================================
0001A73C 0000                       BGHZ_Index:	dc.w BGHZ_Main-BGHZ_Index
0001A73E 0000                       		dc.w BGHZ_ShipMain-BGHZ_Index
0001A740 0000                       		dc.w BGHZ_FaceMain-BGHZ_Index
0001A742 0000                       		dc.w BGHZ_FlameMain-BGHZ_Index
0001A744                            
0001A744 0200                       BGHZ_ObjData:	dc.b 2,	0		; routine counter, animation
0001A746 0401                       		dc.b 4,	1
0001A748 0607                       		dc.b 6,	7
0001A74A                            ; ===========================================================================
0001A74A                            
0001A74A                            BGHZ_Main:	; Routine 0
0001A74A 45F9 0001 A744             		lea	(BGHZ_ObjData).l,a2
0001A750 2248                       		movea.l	a0,a1
0001A752 7202                       		moveq	#2,d1
0001A754 6000                       		bra.s	BGHZ_LoadBoss
0001A756                            ; ===========================================================================
0001A756                            
0001A756                            BGHZ_Loop:
0001A756 4EB9 0000 FD2E             		jsr	(FindNextFreeObj).l
0001A75C 6600                       		bne.s	loc_17772
0001A75E                            
0001A75E                            BGHZ_LoadBoss:
0001A75E 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001A762 12BC 003D                  		move.b	#id_BossGreenHill,0(a1)
0001A766 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001A76C 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001A772 237C 0000 0000 0004        		move.l	#Map_Eggman,obMap(a1)
0001A77A 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001A780 137C 0004 0001             		move.b	#4,obRender(a1)
0001A786 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001A78C 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001A792 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001A796 2348 0034                  		move.l	a0,$34(a1)
0001A79A 51C9 FFBA                  		dbf	d1,BGHZ_Loop	; repeat sequence 2 more times
0001A79E                            
0001A79E                            loc_17772:
0001A79E 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001A7A4 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001A7AA 117C 000F 0020             		move.b	#$F,obColType(a0)
0001A7B0 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001A7B6                            
0001A7B6                            
0001A7B6                            BGHZ_ShipMain:	; Routine 2
0001A7B6 7000                       		moveq	#0,d0
0001A7B8 1028 0025                  		move.b	ob2ndRout(a0),d0
0001A7BC 323B 0000                  		move.w	BGHZ_ShipIndex(pc,d0.w),d1
0001A7C0 4EBB 1000                  		jsr	BGHZ_ShipIndex(pc,d1.w)
0001A7C4 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0001A7CA 4EB9 0000 C938             		jsr	(AnimateSprite).l
0001A7D0 1028 0022                  		move.b	obStatus(a0),d0
0001A7D4 0200 0003                  		andi.b	#3,d0
0001A7D8 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001A7DE 8128 0001                  		or.b	d0,obRender(a0)
0001A7E2 4EF9 0000 F88C             		jmp	(DisplaySprite).l
0001A7E8                            ; ===========================================================================
0001A7E8 0000                       BGHZ_ShipIndex:	dc.w BGHZ_ShipStart-BGHZ_ShipIndex
0001A7EA 0000                       		dc.w BGHZ_MakeBall-BGHZ_ShipIndex
0001A7EC 0000                       		dc.w BGHZ_ShipMove-BGHZ_ShipIndex
0001A7EE 0000                       		dc.w loc_17954-BGHZ_ShipIndex
0001A7F0 0000                       		dc.w loc_1797A-BGHZ_ShipIndex
0001A7F2 0000                       		dc.w loc_179AC-BGHZ_ShipIndex
0001A7F4 0000                       		dc.w loc_179F6-BGHZ_ShipIndex
0001A7F6                            ; ===========================================================================
0001A7F6                            
0001A7F6                            BGHZ_ShipStart:
0001A7F6 317C 0100 0012             		move.w	#$100,obVelY(a0) ; move ship down
0001A7FC 6100 0000                  		bsr.w	BossMove
0001A800 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
0001A806 6600                       		bne.s	loc_177E6
0001A808 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop ship
0001A80E 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto next routine
0001A812                            
0001A812                            loc_177E6:
0001A812 1028 003F                  		move.b	$3F(a0),d0
0001A816 4EB9 0000 3A32             		jsr	(CalcSine).l
0001A81C EC40                       		asr.w	#6,d0
0001A81E D068 0038                  		add.w	$38(a0),d0
0001A822 3140 000C                  		move.w	d0,obY(a0)
0001A826 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001A82C 5428 003F                  		addq.b	#2,$3F(a0)
0001A830 0C28 0008 0025             		cmpi.b	#8,ob2ndRout(a0)
0001A836 6400                       		bcc.s	locret_1784A
0001A838 4A28 0022                  		tst.b	obStatus(a0)
0001A83C 6B00                       		bmi.s	loc_1784C
0001A83E 4A28 0020                  		tst.b	obColType(a0)
0001A842 6600                       		bne.s	locret_1784A
0001A844 4A28 003E                  		tst.b	$3E(a0)
0001A848 6600                       		bne.s	BGHZ_ShipFlash
0001A84A 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
0001A85A                            
0001A85A                            BGHZ_ShipFlash:
0001A85A 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1 ; load 2nd pallet, 2nd entry
0001A85E 7000                       		moveq	#0,d0		; move 0 (black) to d0
0001A860 4A51                       		tst.w	(a1)
0001A862 6600                       		bne.s	loc_1783C
0001A864 303C 0EEE                  		move.w	#cWhite,d0	; move 0EEE (white) to d0
0001A868                            
0001A868                            loc_1783C:
0001A868 3280                       		move.w	d0,(a1)		; load color stored in	d0
0001A86A 5328 003E                  		subq.b	#1,$3E(a0)
0001A86E 6600                       		bne.s	locret_1784A
0001A870 117C 000F 0020             		move.b	#$F,obColType(a0)
0001A876                            
0001A876                            locret_1784A:
0001A876 4E75                       		rts	
0001A878                            ; ===========================================================================
0001A878                            
0001A878                            loc_1784C:
0001A878 7064                       		moveq	#100,d0
0001A87A 6100 0000                  		bsr.w	AddPoints
0001A87E 117C 0008 0025             		move.b	#8,ob2ndRout(a0)
0001A884 317C 00B3 003C             		move.w	#$B3,$3C(a0)
0001A88A 4E75                       		rts	
0001A88A 4E75                       		rts	
0001A88C                            
0001A88C                            ; ---------------------------------------------------------------------------
0001A88C                            ; Defeated boss	subroutine
0001A88C                            ; ---------------------------------------------------------------------------
0001A88C                            
0001A88C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A88C                            
0001A88C                            
0001A88C                            BossDefeated:
0001A88C 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0001A890 0200 0007                  		andi.b	#7,d0
0001A894 6600                       		bne.s	locret_178A2
0001A896 4EB9 0000 FD18             		jsr	(FindFreeObj).l
0001A89C 6600                       		bne.s	locret_178A2
0001A89E 12BC 003F                  		move.b	#id_ExplosionBomb,0(a1)	; load explosion object
0001A8A2 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001A8A8 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001A8AE 4EB9 0000 3A0C             		jsr	(RandomNumber).l
0001A8B4 3200                       		move.w	d0,d1
0001A8B6 7200                       		moveq	#0,d1
0001A8B8 1200                       		move.b	d0,d1
0001A8BA E409                       		lsr.b	#2,d1
0001A8BC 0441 0020                  		subi.w	#$20,d1
0001A8C0 D369 0008                  		add.w	d1,obX(a1)
0001A8C4 E048                       		lsr.w	#8,d0
0001A8C6 E608                       		lsr.b	#3,d0
0001A8C8 D169 000C                  		add.w	d0,obY(a1)
0001A8CC                            
0001A8CC                            locret_178A2:
0001A8CC 4E75                       		rts	
0001A8CE                            ; End of function BossDefeated
0001A8CE                            
0001A8CE                            ; ---------------------------------------------------------------------------
0001A8CE                            ; Subroutine to	move a boss
0001A8CE                            ; ---------------------------------------------------------------------------
0001A8CE                            
0001A8CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A8CE                            
0001A8CE                            
0001A8CE                            BossMove:
0001A8CE 4CA8 0005 0010             		movem.w	obVelX(a0),d0/d2
0001A8D4 E188                       		lsl.l	#8,d0
0001A8D6 D1A8 0030                  		add.l	d0,$30(a0)
0001A8DA E18A                       		lsl.l	#8,d2
0001A8DC D5A8 0038                  		add.l	d2,$38(a0)
0001A8E0 4E75                       		rts
0001A8E2                            ; End of function BossMove
0001A8E2                            
0001A8E2                            ; ===========================================================================
0001A8E2                            
0001A8E2                            		include	"_incObj\3D Boss - Green Hill (part 2).asm"
0001A8E2                            
0001A8E2                            BGHZ_MakeBall:
0001A8E2 317C FE00 0010             		move.w	#-$200,obVelX(a0)
0001A8E8 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001A8EE 6100 FFDE                  		bsr.w	BossMove
0001A8F2 0C68 1400 0030             		cmpi.w	#$1400,$30(a0)
0001A8F8 6600                       		bne.s	loc_17916
0001A8FA 317C 0000 0010             		move.w	#0,obVelX(a0)
0001A900 317C 0000 0012             		move.w	#0,obVelY(a0)
0001A906 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001A90A 4EB9 0000 FD2E             		jsr	(FindNextFreeObj).l
0001A910 6600                       		bne.s	loc_17910
0001A912 12BC 0048                  		move.b	#id_BossBall,0(a1) ; load swinging ball object
0001A916 3368 0300 0008             		move.w	$300(a0),obX(a1)
0001A91C 3368 0038 000C             		move.w	$38(a0),obY(a1)
0001A922 2348 0034                  		move.l	a0,$34(a1)
0001A926                            
0001A926                            loc_17910:
0001A926 317C 0077 003C             		move.w	#$77,$3C(a0)
0001A92C                            
0001A92C                            loc_17916:
0001A92C 6000 FEE4                  		bra.w	loc_177E6
0001A930                            ; ===========================================================================
0001A930                            
0001A930                            BGHZ_ShipMove:
0001A930 5368 003C                  		subq.w	#1,$3C(a0)
0001A934 6A00                       		bpl.s	BGHZ_Reverse
0001A936 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001A93A 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001A940 317C 0200 0010             		move.w	#$200,obVelX(a0) ; move the ship sideways
0001A946 0C68 1400 0030             		cmpi.w	#$1400,$30(a0)
0001A94C 6600                       		bne.s	BGHZ_Reverse
0001A94E 317C 007F 003C             		move.w	#$7F,$3C(a0)
0001A954 317C 0040 0010             		move.w	#$40,obVelX(a0)
0001A95A                            
0001A95A                            BGHZ_Reverse:
0001A95A 0828 0000 0022             		btst	#0,obStatus(a0)
0001A960 6600                       		bne.s	loc_17950
0001A962 4468 0010                  		neg.w	obVelX(a0)	; reverse direction of the ship
0001A966                            
0001A966                            loc_17950:
0001A966 6000 FEAA                  		bra.w	loc_177E6
0001A96A                            ; ===========================================================================
0001A96A                            
0001A96A                            loc_17954:
0001A96A 5368 003C                  		subq.w	#1,$3C(a0)
0001A96E 6B00                       		bmi.s	loc_17960
0001A970 6100 FF5C                  		bsr.w	BossMove
0001A974 6000                       		bra.s	loc_17976
0001A976                            ; ===========================================================================
0001A976                            
0001A976                            loc_17960:
0001A976 0868 0000 0022             		bchg	#0,obStatus(a0)
0001A97C 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001A982 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001A986 317C 0000 0010             		move.w	#0,obVelX(a0)
0001A98C                            
0001A98C                            loc_17976:
0001A98C 6000 FE84                  		bra.w	loc_177E6
0001A990                            ; ===========================================================================
0001A990                            
0001A990                            loc_1797A:
0001A990 5368 003C                  		subq.w	#1,$3C(a0)
0001A994 6B00                       		bmi.s	loc_17984
0001A996 6000 FEF4                  		bra.w	BossDefeated
0001A99A                            ; ===========================================================================
0001A99A                            
0001A99A                            loc_17984:
0001A99A 08E8 0000 0022             		bset	#0,obStatus(a0)
0001A9A0 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001A9A6 4268 0010                  		clr.w	obVelX(a0)
0001A9AA 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001A9AE 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001A9B4 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001A9B8 6600                       		bne.s	locret_179AA
0001A9BA 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001A9C0                            
0001A9C0                            locret_179AA:
0001A9C0 4E75                       		rts	
0001A9C2                            ; ===========================================================================
0001A9C2                            
0001A9C2                            loc_179AC:
0001A9C2 5268 003C                  		addq.w	#1,$3C(a0)
0001A9C6 6700                       		beq.s	loc_179BC
0001A9C8 6A00                       		bpl.s	loc_179C2
0001A9CA 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001A9D0 6000                       		bra.s	loc_179EE
0001A9D2                            ; ===========================================================================
0001A9D2                            
0001A9D2                            loc_179BC:
0001A9D2 4268 0012                  		clr.w	obVelY(a0)
0001A9D6 6000                       		bra.s	loc_179EE
0001A9D8                            ; ===========================================================================
0001A9D8                            
0001A9D8                            loc_179C2:
0001A9D8 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001A9DE 6500                       		bcs.s	loc_179DA
0001A9E0 6700                       		beq.s	loc_179E0
0001A9E2 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001A9E8 6500                       		bcs.s	loc_179EE
0001A9EA 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001A9EE 6000                       		bra.s	loc_179EE
0001A9F0                            ; ===========================================================================
0001A9F0                            
0001A9F0                            loc_179DA:
0001A9F0 5168 0012                  		subq.w	#8,obVelY(a0)
0001A9F4 6000                       		bra.s	loc_179EE
0001A9F6                            ; ===========================================================================
0001A9F6                            
0001A9F6                            loc_179E0:
0001A9F6 4268 0012                          clr.w    obVelY(a0)
0001A9FA 4A38 FE2D                          tst.b     (v_invinc).w
0001A9FE 6600                               bne.s   @boss_invinc
0001AA00 4A38 FE2E                          tst.b     (v_shoes).w
0001AA04 6600                               bne.s   @boss_shoes
0001AA06                            
0001AA06 1038 F5C6                          move.b   (v_Saved_music),d0
0001AA0A 6000 0000                          bra.w      @boss_play
0001AA0E                            
0001AA0E                            @boss_invinc:
0001AA0E 103C 0000                          move.b #bgm_Invincible,d0
0001AA12                            
0001AA12                            @boss_shoes:
0001AA12 103C 0000                          move.b #bgm_Ending,d0
0001AA16                            
0001AA16                            @boss_play:
0001AA16 4EB8 124A                          jsr PlaySound
0001AA1A                            
0001AA1A                            loc_179EE:
0001AA1A 6100 FEB2                  		bsr.w	BossMove
0001AA1E 6000 FDF2                  		bra.w	loc_177E6
0001AA22                            ; ===========================================================================
0001AA22                            
0001AA22                            loc_179F6:
0001AA22 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001AA28 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001AA2E 0C78 14C0 F72A             		cmpi.w	#$14C0,(v_limitright2).w
0001AA34 6700                       		beq.s	loc_17A10
0001AA36 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001AA3A 6000                       		bra.s	loc_17A16
0001AA3C                            ; ===========================================================================
0001AA3C                            
0001AA3C                            loc_17A10:
0001AA3C 4A28 0001                  		tst.b	obRender(a0)
0001AA40 6A00                       		bpl.s	BGHZ_ShipDel
0001AA42                            
0001AA42                            loc_17A16:
0001AA42 6100 FE8A                  		bsr.w	BossMove
0001AA46 6000 FDCA                  		bra.w	loc_177E6
0001AA4A                            ; ===========================================================================
0001AA4A                            
0001AA4A                            BGHZ_ShipDel:
0001AA4A 4EF9 0000 F8CC             		jmp	(DeleteObject).l
0001AA50                            ; ===========================================================================
0001AA50                            
0001AA50                            BGHZ_FaceMain:	; Routine 4
0001AA50 7000                       		moveq	#0,d0
0001AA52 7201                       		moveq	#1,d1
0001AA54 2268 0034                  		movea.l	$34(a0),a1
0001AA58 1029 0025                  		move.b	ob2ndRout(a1),d0
0001AA5C 5900                       		subq.b	#4,d0
0001AA5E 6600                       		bne.s	loc_17A3E
0001AA60 0C69 1400 0030             		cmpi.w	#$1400,$30(a1)
0001AA66 6600                       		bne.s	loc_17A46
0001AA68 7204                       		moveq	#4,d1
0001AA6A                            
0001AA6A                            loc_17A3E:
0001AA6A 5D00                       		subq.b	#6,d0
0001AA6C 6B00                       		bmi.s	loc_17A46
0001AA6E 720A                       		moveq	#$A,d1
0001AA70 6000                       		bra.s	loc_17A5A
0001AA72                            ; ===========================================================================
0001AA72                            
0001AA72                            loc_17A46:
0001AA72 4A29 0020                  		tst.b	obColType(a1)
0001AA76 6600                       		bne.s	loc_17A50
0001AA78 7205                       		moveq	#5,d1
0001AA7A 6000                       		bra.s	loc_17A5A
0001AA7C                            ; ===========================================================================
0001AA7C                            
0001AA7C                            loc_17A50:
0001AA7C 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001AA82 6500                       		bcs.s	loc_17A5A
0001AA84 7204                       		moveq	#4,d1
0001AA86                            
0001AA86                            loc_17A5A:
0001AA86 1141 001C                  		move.b	d1,obAnim(a0)
0001AA8A 5500                       		subq.b	#2,d0
0001AA8C 6600                       		bne.s	BGHZ_FaceDisp
0001AA8E 117C 0006 001C             		move.b	#6,obAnim(a0)
0001AA94 4A28 0001                  		tst.b	obRender(a0)
0001AA98 6A00                       		bpl.s	BGHZ_FaceDel
0001AA9A                            
0001AA9A                            BGHZ_FaceDisp:
0001AA9A 6000                       		bra.s	BGHZ_Display
0001AA9C                            ; ===========================================================================
0001AA9C                            
0001AA9C                            BGHZ_FaceDel:
0001AA9C 4EF9 0000 F8CC             		jmp	(DeleteObject).l
0001AAA2                            ; ===========================================================================
0001AAA2                            
0001AAA2                            BGHZ_FlameMain:	; Routine 6
0001AAA2 117C 0007 001C             		move.b	#7,obAnim(a0)
0001AAA8 2268 0034                  		movea.l	$34(a0),a1
0001AAAC 0C29 000C 0025             		cmpi.b	#$C,ob2ndRout(a1)
0001AAB2 6600                       		bne.s	loc_17A96
0001AAB4 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001AABA 4A28 0001                  		tst.b	obRender(a0)
0001AABE 6A00                       		bpl.s	BGHZ_FlameDel
0001AAC0 6000                       		bra.s	BGHZ_FlameDisp
0001AAC2                            ; ===========================================================================
0001AAC2                            
0001AAC2                            loc_17A96:
0001AAC2 3029 0010                  		move.w	obVelX(a1),d0
0001AAC6 6700                       		beq.s	BGHZ_FlameDisp
0001AAC8 117C 0008 001C             		move.b	#8,obAnim(a0)
0001AACE                            
0001AACE                            BGHZ_FlameDisp:
0001AACE 6000                       		bra.s	BGHZ_Display
0001AAD0                            ; ===========================================================================
0001AAD0                            
0001AAD0                            BGHZ_FlameDel:
0001AAD0 4EF9 0000 F8CC             		jmp	(DeleteObject).l
0001AAD6                            ; ===========================================================================
0001AAD6                            
0001AAD6                            BGHZ_Display:
0001AAD6 2268 0034                  		movea.l	$34(a0),a1
0001AADA 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001AAE0 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001AAE6 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001AAEC 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0001AAF2 4EB9 0000 C938             		jsr	(AnimateSprite).l
0001AAF8 1028 0022                  		move.b	obStatus(a0),d0
0001AAFC 0200 0003                  		andi.b	#3,d0
0001AB00 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001AB06 8128 0001                  		or.b	d0,obRender(a0)
0001AB0A 4EF9 0000 F88C             		jmp	(DisplaySprite).l
0001AB0A 4EF9 0000 F88C             		jmp	(DisplaySprite).l
0001AB10                            		include	"_incObj\48 Eggman's Swinging Ball.asm"
0001AB10                            ; ---------------------------------------------------------------------------
0001AB10                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
0001AB10                            ; ---------------------------------------------------------------------------
0001AB10                            
0001AB10                            BossBall:
0001AB10 7000                       		moveq	#0,d0
0001AB12 1028 0024                  		move.b	obRoutine(a0),d0
0001AB16 323B 0000                  		move.w	GBall_Index(pc,d0.w),d1
0001AB1A 4EFB 1000                  		jmp	GBall_Index(pc,d1.w)
0001AB1E                            ; ===========================================================================
0001AB1E 0000                       GBall_Index:	dc.w GBall_Main-GBall_Index
0001AB20 0000                       		dc.w GBall_Base-GBall_Index
0001AB22 0000                       		dc.w GBall_Display2-GBall_Index
0001AB24 0000                       		dc.w loc_17C68-GBall_Index
0001AB26 0000                       		dc.w GBall_ChkVanish-GBall_Index
0001AB28                            ; ===========================================================================
0001AB28                            
0001AB28                            GBall_Main:	; Routine 0
0001AB28 5428 0024                  		addq.b	#2,obRoutine(a0)
0001AB2C 317C 4080 0026             		move.w	#$4080,obAngle(a0)
0001AB32 317C FE00 003E             		move.w	#-$200,$3E(a0)
0001AB38 217C 0000 0000 0004        		move.l	#Map_BossItems,obMap(a0)
0001AB40 317C 046C 0002             		move.w	#$46C,obGfx(a0)
0001AB46 45E8 0028                  		lea	obSubtype(a0),a2
0001AB4A 14FC 0000                  		move.b	#0,(a2)+
0001AB4E 7205                       		moveq	#5,d1
0001AB50 2248                       		movea.l	a0,a1
0001AB52 6000                       		bra.s	loc_17B60
0001AB54                            ; ===========================================================================
0001AB54                            
0001AB54                            GBall_MakeLinks:
0001AB54 4EB9 0000 FD2E             		jsr	(FindNextFreeObj).l
0001AB5A 6600                       		bne.s	GBall_MakeBall
0001AB5C 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001AB62 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001AB68 12BC 0048                  		move.b	#id_BossBall,0(a1) ; load chain link object
0001AB6C 137C 0006 0024             		move.b	#6,obRoutine(a1)
0001AB72 237C 0000 9852 0004        		move.l	#Map_Swing_GHZ,obMap(a1)
0001AB7A 337C 0380 0002             		move.w	#$380,obGfx(a1)
0001AB80 137C 0001 001A             		move.b	#1,obFrame(a1)
0001AB86 5228 0028                  		addq.b	#1,obSubtype(a0)
0001AB8A                            
0001AB8A                            loc_17B60:
0001AB8A 3A09                       		move.w	a1,d5
0001AB8C 0445 D000                  		subi.w	#$D000,d5
0001AB90 EC4D                       		lsr.w	#6,d5
0001AB92 0245 007F                  		andi.w	#$7F,d5
0001AB96 14C5                       		move.b	d5,(a2)+
0001AB98 137C 0004 0001             		move.b	#4,obRender(a1)
0001AB9E 137C 0008 0014             		move.b	#8,obActWid(a1)
0001ABA4 337C 0300 0018             		move.w	#$300,obPriority(a1)
0001ABAA 2368 0034 0034             		move.l	$34(a0),$34(a1)
0001ABB0 51C9 FFA2                  		dbf	d1,GBall_MakeLinks ; repeat sequence 5 more times
0001ABB4                            
0001ABB4                            GBall_MakeBall:
0001ABB4 137C 0008 0024             		move.b	#8,obRoutine(a1)
0001ABBA 237C 0000 9DAE 0004        		move.l	#Map_GBall,obMap(a1) ; load different mappings for final link
0001ABC2 337C 43AA 0002             		move.w	#$43AA,obGfx(a1) ; use different graphics
0001ABC8 137C 0001 001A             		move.b	#1,obFrame(a1)
0001ABCE 337C 0280 0018             		move.w	#$280,obPriority(a1)
0001ABD4 137C 0081 0020             		move.b	#$81,obColType(a1) ; make object hurt Sonic
0001ABDA 4E75                       		rts	
0001ABDC                            ; ===========================================================================
0001ABDC                            
0001ABDC 0010 2030 4060             GBall_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
0001ABE2                            
0001ABE2                            ; ===========================================================================
0001ABE2                            
0001ABE2                            GBall_Base:	; Routine 2
0001ABE2 47F9 0001 ABDC             		lea	(GBall_PosData).l,a3
0001ABE8 45E8 0028                  		lea	obSubtype(a0),a2
0001ABEC 7C00                       		moveq	#0,d6
0001ABEE 1C1A                       		move.b	(a2)+,d6
0001ABF0                            
0001ABF0                            loc_17BC6:
0001ABF0 7800                       		moveq	#0,d4
0001ABF2 181A                       		move.b	(a2)+,d4
0001ABF4 ED4C                       		lsl.w	#6,d4
0001ABF6 0684 00FF D000             		addi.l	#v_objspace&$FFFFFF,d4
0001ABFC 2244                       		movea.l	d4,a1
0001ABFE 101B                       		move.b	(a3)+,d0
0001AC00 B029 003C                  		cmp.b	$3C(a1),d0
0001AC04 6700                       		beq.s	loc_17BE0
0001AC06 5229 003C                  		addq.b	#1,$3C(a1)
0001AC0A                            
0001AC0A                            loc_17BE0:
0001AC0A 51CE FFE4                  		dbf	d6,loc_17BC6
0001AC0E                            
0001AC0E B029 003C                  		cmp.b	$3C(a1),d0
0001AC12 6600                       		bne.s	loc_17BFA
0001AC14 2268 0034                  		movea.l	$34(a0),a1
0001AC18 0C29 0006 0025             		cmpi.b	#6,ob2ndRout(a1)
0001AC1E 6600                       		bne.s	loc_17BFA
0001AC20 5428 0024                  		addq.b	#2,obRoutine(a0)
0001AC24                            
0001AC24                            loc_17BFA:
0001AC24 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
0001AC2A 6700                       		beq.s	GBall_Display
0001AC2C 5268 0032                  		addq.w	#1,$32(a0)
0001AC30                            
0001AC30                            GBall_Display:
0001AC30 6100 0000                  		bsr.w	sub_17C2A
0001AC34 1028 0026                  		move.b	obAngle(a0),d0
0001AC38 4EB9 0000 97C4             		jsr	(Swing_Move2).l
0001AC3E 4EF9 0000 F88C             		jmp	(DisplaySprite).l
0001AC44                            ; ===========================================================================
0001AC44                            
0001AC44                            GBall_Display2:	; Routine 4
0001AC44 6100 0000                  		bsr.w	sub_17C2A
0001AC48 4EB9 0000 9784             		jsr	(Obj48_Move).l
0001AC4E 4EF9 0000 F88C             		jmp	(DisplaySprite).l
0001AC54                            
0001AC54                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001AC54                            
0001AC54                            
0001AC54                            sub_17C2A:
0001AC54 2268 0034                  		movea.l	$34(a0),a1
0001AC58 0628 0020 001B             		addi.b	#$20,obAniFrame(a0)
0001AC5E 6400                       		bcc.s	loc_17C3C
0001AC60 0868 0000 001A             		bchg	#0,obFrame(a0)
0001AC66                            
0001AC66                            loc_17C3C:
0001AC66 3169 0008 003A             		move.w	obX(a1),$3A(a0)
0001AC6C 3029 000C                  		move.w	obY(a1),d0
0001AC70 D068 0032                  		add.w	$32(a0),d0
0001AC74 3140 0038                  		move.w	d0,$38(a0)
0001AC78 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001AC7E 4A29 0022                  		tst.b	obStatus(a1)
0001AC82 6A00                       		bpl.s	locret_17C66
0001AC84 10BC 003F                  		move.b	#id_ExplosionBomb,0(a0)
0001AC88 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001AC8E                            
0001AC8E                            locret_17C66:
0001AC8E 4E75                       		rts	
0001AC90                            ; End of function sub_17C2A
0001AC90                            
0001AC90                            ; ===========================================================================
0001AC90                            
0001AC90                            loc_17C68:	; Routine 6
0001AC90 2268 0034                  		movea.l	$34(a0),a1
0001AC94 4A29 0022                  		tst.b	obStatus(a1)
0001AC98 6A00                       		bpl.s	GBall_Display3
0001AC9A 10BC 003F                  		move.b	#id_ExplosionBomb,0(a0)
0001AC9E 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001ACA4                            
0001ACA4                            GBall_Display3:
0001ACA4 4EF9 0000 F88C             		jmp	(DisplaySprite).l
0001ACAA                            ; ===========================================================================
0001ACAA                            
0001ACAA                            GBall_ChkVanish:; Routine 8
0001ACAA 7000                       		moveq	#0,d0
0001ACAC 4A28 001A                  		tst.b	obFrame(a0)
0001ACB0 6600                       		bne.s	GBall_Vanish
0001ACB2 5200                       		addq.b	#1,d0
0001ACB4                            
0001ACB4                            GBall_Vanish:
0001ACB4 1140 001A                  		move.b	d0,obFrame(a0)
0001ACB8 2268 0034                  		movea.l	$34(a0),a1
0001ACBC 4A29 0022                  		tst.b	obStatus(a1)
0001ACC0 6A00                       		bpl.s	GBall_Display4
0001ACC2 117C 0000 0020             		move.b	#0,obColType(a0)
0001ACC8 6100 FBC2                  		bsr.w	BossDefeated
0001ACCC 5328 003C                  		subq.b	#1,$3C(a0)
0001ACD0 6A00                       		bpl.s	GBall_Display4
0001ACD2 10BC 003F                  		move.b	#id_ExplosionBomb,(a0)
0001ACD6 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001ACDC                            
0001ACDC                            GBall_Display4:
0001ACDC 4EF9 0000 F88C             		jmp	(DisplaySprite).l
0001ACDC 4EF9 0000 F88C             		jmp	(DisplaySprite).l
0001ACE2                            		include	"_anim\Eggman.asm"
0001ACE2                            ; ---------------------------------------------------------------------------
0001ACE2                            ; Animation script - Eggman (bosses)
0001ACE2                            ; ---------------------------------------------------------------------------
0001ACE2 0000                       Ani_Eggman:	dc.w @ship-Ani_Eggman
0001ACE4 0000                       		dc.w @facenormal1-Ani_Eggman
0001ACE6 0000                       		dc.w @facenormal2-Ani_Eggman
0001ACE8 0000                       		dc.w @facenormal3-Ani_Eggman
0001ACEA 0000                       		dc.w @facelaugh-Ani_Eggman
0001ACEC 0000                       		dc.w @facehit-Ani_Eggman
0001ACEE 0000                       		dc.w @facepanic-Ani_Eggman
0001ACF0 0000                       		dc.w @blank-Ani_Eggman
0001ACF2 0000                       		dc.w @flame1-Ani_Eggman
0001ACF4 0000                       		dc.w @flame2-Ani_Eggman
0001ACF6 0000                       		dc.w @facedefeat-Ani_Eggman
0001ACF8 0000                       		dc.w @escapeflame-Ani_Eggman
0001ACFA 0F00 FF                    @ship:		dc.b $F, 0, afEnd
0001ACFE 00                         		even
0001ACFE 0501 02FF                  @facenormal1:	dc.b 5,	1, 2, afEnd
0001AD02                            		even
0001AD02 0301 02FF                  @facenormal2:	dc.b 3,	1, 2, afEnd
0001AD06                            		even
0001AD06 0101 02FF                  @facenormal3:	dc.b 1,	1, 2, afEnd
0001AD0A                            		even
0001AD0A 0403 04FF                  @facelaugh:	dc.b 4,	3, 4, afEnd
0001AD0E                            		even
0001AD0E 1F05 01FF                  @facehit:	dc.b $1F, 5, 1,	afEnd
0001AD12                            		even
0001AD12 0306 01FF                  @facepanic:	dc.b 3,	6, 1, afEnd
0001AD16                            		even
0001AD16 0F0A FF                    @blank:		dc.b $F, $A, afEnd
0001AD1A 00                         		even
0001AD1A 0308 09FF                  @flame1:	dc.b 3,	8, 9, afEnd
0001AD1E                            		even
0001AD1E 0108 09FF                  @flame2:	dc.b 1,	8, 9, afEnd
0001AD22                            		even
0001AD22 0F07 FF                    @facedefeat:	dc.b $F, 7, afEnd
0001AD26 00                         		even
0001AD26 0209 080B 0C0B 0C09 08FE+  @escapeflame:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, afBack, 2
0001AD32 00                         		even
0001AD32 00                         		even
0001AD32                            Map_Eggman:	include	"_maps\Eggman.asm"
0001AD32                            ; --------------------------------------------------------------------------------
0001AD32                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001AD32                            ; --------------------------------------------------------------------------------
0001AD32                            
0001AD32                            SME_F_pyS:	
0001AD32 0000 0000                  		dc.w SME_F_pyS_1A-SME_F_pyS, SME_F_pyS_34-SME_F_pyS	
0001AD36 0000 0000                  		dc.w SME_F_pyS_44-SME_F_pyS, SME_F_pyS_54-SME_F_pyS	
0001AD3A 0000 0000                  		dc.w SME_F_pyS_69-SME_F_pyS, SME_F_pyS_7E-SME_F_pyS	
0001AD3E 0000 0000                  		dc.w SME_F_pyS_93-SME_F_pyS, SME_F_pyS_A8-SME_F_pyS	
0001AD42 0000 0000                  		dc.w SME_F_pyS_CC-SME_F_pyS, SME_F_pyS_D2-SME_F_pyS	
0001AD46 0000 0000                  		dc.w SME_F_pyS_D8-SME_F_pyS, SME_F_pyS_D9-SME_F_pyS	
0001AD4A 0000                       		dc.w SME_F_pyS_E4-SME_F_pyS	
0001AD4C 05                         SME_F_pyS_1A:	dc.b 5	
0001AD4D EC01 000A E4               		dc.b $EC, 1, 0, $A, $E4	
0001AD52 FC0E 2010 E4               		dc.b $FC, $E, $20, $10, $E4	
0001AD57 FC0E 201C 04               		dc.b $FC, $E, $20, $1C, 4	
0001AD5C 140C 2028 EC               		dc.b $14, $C, $20, $28, $EC	
0001AD61 1400 202C 0C               		dc.b $14, 0, $20, $2C, $C	
0001AD66 03                         SME_F_pyS_34:	dc.b 3	
0001AD67 E404 0000 F4               		dc.b $E4, 4, 0, 0, $F4	
0001AD6C EC0D 0002 EC               		dc.b $EC, $D, 0, 2, $EC	
0001AD71 EC05 000C 0C               		dc.b $EC, 5, 0, $C, $C	
0001AD76 03                         SME_F_pyS_44:	dc.b 3	
0001AD77 E404 0000 F4               		dc.b $E4, 4, 0, 0, $F4	
0001AD7C EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC	
0001AD81 EC05 000C 0C               		dc.b $EC, 5, 0, $C, $C	
0001AD86 04                         SME_F_pyS_54:	dc.b 4	
0001AD87 E408 003D F4               		dc.b $E4, 8, 0, $3D, $F4	
0001AD8C EC09 0040 EC               		dc.b $EC, 9, 0, $40, $EC	
0001AD91 EC05 0046 04               		dc.b $EC, 5, 0, $46, 4	
0001AD96 EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001AD9B 04                         SME_F_pyS_69:	dc.b 4	
0001AD9C E408 004A F4               		dc.b $E4, 8, 0, $4A, $F4	
0001ADA1 EC09 004D EC               		dc.b $EC, 9, 0, $4D, $EC	
0001ADA6 EC05 0053 04               		dc.b $EC, 5, 0, $53, 4	
0001ADAB EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001ADB0 04                         SME_F_pyS_7E:	dc.b 4	
0001ADB1 E408 0057 F4               		dc.b $E4, 8, 0, $57, $F4	
0001ADB6 EC09 005A EC               		dc.b $EC, 9, 0, $5A, $EC	
0001ADBB EC05 0060 04               		dc.b $EC, 5, 0, $60, 4	
0001ADC0 EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001ADC5 04                         SME_F_pyS_93:	dc.b 4	
0001ADC6 E404 0064 04               		dc.b $E4, 4, 0, $64, 4	
0001ADCB E404 0000 F4               		dc.b $E4, 4, 0, 0, $F4	
0001ADD0 EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC	
0001ADD5 EC05 000C 0C               		dc.b $EC, 5, 0, $C, $C	
0001ADDA 07                         SME_F_pyS_A8:	dc.b 7	
0001ADDB E409 0066 F4               		dc.b $E4, 9, 0, $66, $F4	
0001ADE0 E408 0057 F4               		dc.b $E4, 8, 0, $57, $F4	
0001ADE5 EC05 0060 04               		dc.b $EC, 5, 0, $60, 4	
0001ADEA EC01 0035 EC               		dc.b $EC, 1, 0, $35, $EC	
0001ADEF F400 005D F4               		dc.b $F4, 0, 0, $5D, $F4	
0001ADF4 F400 005F FC               		dc.b $F4, 0, 0, $5F, $FC	
0001ADF9 EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001ADFE 01                         SME_F_pyS_CC:	dc.b 1	
0001ADFF 0405 002D 22               		dc.b 4, 5, 0, $2D, $22	
0001AE04 01                         SME_F_pyS_D2:	dc.b 1	
0001AE05 0405 0031 22               		dc.b 4, 5, 0, $31, $22	
0001AE0A 00                         SME_F_pyS_D8:	dc.b 0	
0001AE0B 02                         SME_F_pyS_D9:	dc.b 2	
0001AE0C 0008 012A 22               		dc.b 0, 8, 1, $2A, $22	
0001AE11 0808 112A 22               		dc.b 8, 8, $11, $2A, $22	
0001AE16 02                         SME_F_pyS_E4:	dc.b 2	
0001AE17 F80B 012D 22               		dc.b $F8, $B, 1, $2D, $22	
0001AE1C 0001 0139 3A               		dc.b 0, 1, 1, $39, $3A	
0001AE22 00                         		even
0001AE22 00                         		even
0001AE22                            Map_BossItems:	include	"_maps\Boss Items.asm"
0001AE22                            ; ---------------------------------------------------------------------------
0001AE22                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
0001AE22                            ; ---------------------------------------------------------------------------
0001AE22                            Map_BossItems_internal:
0001AE22 0000                       		dc.w @chainanchor1-Map_BossItems_internal
0001AE24 0000                       		dc.w @chainanchor2-Map_BossItems_internal
0001AE26 0000                       		dc.w @cross-Map_BossItems_internal
0001AE28 0000                       		dc.w @widepipe-Map_BossItems_internal
0001AE2A 0000                       		dc.w @pipe-Map_BossItems_internal
0001AE2C 0000                       		dc.w @spike-Map_BossItems_internal
0001AE2E 0000                       		dc.w @legmask-Map_BossItems_internal
0001AE30 0000                       		dc.w @legs-Map_BossItems_internal
0001AE32 01                         @chainanchor1:	dc.b 1
0001AE33 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; GHZ boss
0001AE38 02                         @chainanchor2:	dc.b 2
0001AE39 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; GHZ boss
0001AE3E F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001AE44 00                         		even
0001AE44 01                         @cross:		dc.b 1
0001AE45 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; unknown
0001AE4A 01                         @widepipe:	dc.b 1
0001AE4B 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4	; SLZ boss
0001AE50 01                         @pipe:		dc.b 1
0001AE51 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8	; MZ boss
0001AE56 04                         @spike:		dc.b 4
0001AE57 F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8 ; SYZ boss
0001AE5C F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
0001AE61 F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
0001AE66 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
0001AE6C 00                         		even
0001AE6C 02                         @legmask:	dc.b 2
0001AE6D 0005 0017 00               		dc.b 0,	5, 0, $17, 0	; FZ post-boss: sprite covering part of legs
0001AE72 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
0001AE78 00                         		even
0001AE78 02                         @legs:		dc.b 2
0001AE79 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0	; FZ post-boss
0001AE7E 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
0001AE84 00                         		even
0001AE84 00                         		even
0001AE84                            		include	"_incObj\77 Boss - Labyrinth.asm"
0001AE84                            ; ---------------------------------------------------------------------------
0001AE84                            ; Object 77 - Eggman (LZ)
0001AE84                            ; ---------------------------------------------------------------------------
0001AE84                            
0001AE84                            BossLabyrinth:
0001AE84 7000                       		moveq	#0,d0
0001AE86 1028 0024                  		move.b	obRoutine(a0),d0
0001AE8A 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
0001AE8E 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
0001AE92                            ; ===========================================================================
0001AE92 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
0001AE94 0000                       		dc.w Obj77_ShipMain-Obj77_Index
0001AE96 0000                       		dc.w Obj77_FaceMain-Obj77_Index
0001AE98 0000                       		dc.w Obj77_FlameMain-Obj77_Index
0001AE9A                            
0001AE9A 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
0001AE9C 0401                       		dc.b 4,	1
0001AE9E 0607                       		dc.b 6,	7
0001AEA0                            ; ===========================================================================
0001AEA0                            
0001AEA0                            Obj77_Main:	; Routine 0
0001AEA0 317C 1E10 0008             		move.w	#$1E10,obX(a0)
0001AEA6 317C 05C0 000C             		move.w	#$5C0,obY(a0)
0001AEAC 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001AEB2 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001AEB8 117C 000F 0020             		move.b	#$F,obColType(a0)
0001AEBE 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001AEC4 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001AECA 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
0001AECE 2248                       		movea.l	a0,a1
0001AED0 7202                       		moveq	#2,d1
0001AED2 6000                       		bra.s	Obj77_LoadBoss
0001AED4                            ; ===========================================================================
0001AED4                            
0001AED4                            Obj77_Loop:
0001AED4 4EB9 0000 FD2E             		jsr	(FindNextFreeObj).l
0001AEDA 6600                       		bne.s	Obj77_ShipMain
0001AEDC 12BC 0077                  		move.b	#id_BossLabyrinth,0(a1)
0001AEE0 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001AEE6 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001AEEC                            
0001AEEC                            Obj77_LoadBoss:
0001AEEC 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001AEF2 4229 0025                  		clr.b	ob2ndRout(a1)
0001AEF6 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001AEFA 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001AEFE 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0001AF04 237C 0001 AD32 0004        		move.l	#Map_Eggman,obMap(a1)
0001AF0C 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001AF12 137C 0004 0001             		move.b	#4,obRender(a1)
0001AF18 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001AF1E 2348 0034                  		move.l	a0,$34(a1)
0001AF22 51C9 FFB0                  		dbf	d1,Obj77_Loop
0001AF26                            
0001AF26                            Obj77_ShipMain:	; Routine 2
0001AF26 43F8 D000                  		lea	(v_player).w,a1
0001AF2A 7000                       		moveq	#0,d0
0001AF2C 1028 0025                  		move.b	ob2ndRout(a0),d0
0001AF30 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
0001AF34 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
0001AF38 43F9 0001 ACE2             		lea	(Ani_Eggman).l,a1
0001AF3E 4EB9 0000 C938             		jsr	(AnimateSprite).l
0001AF44 7003                       		moveq	#3,d0
0001AF46 C028 0022                  		and.b	obStatus(a0),d0
0001AF4A 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001AF50 8128 0001                  		or.b	d0,obRender(a0)
0001AF54 4EF9 0000 F88C             		jmp	(DisplaySprite).l
0001AF5A                            ; ===========================================================================
0001AF5A 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
0001AF5E 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
0001AF62 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
0001AF66 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
0001AF6A                            ; ===========================================================================
0001AF6A                            
0001AF6A                            loc_17F1E:
0001AF6A 3029 0008                  		move.w	obX(a1),d0
0001AF6E 0C40 1DA0                  		cmpi.w	#$1DA0,d0
0001AF72 6500                       		bcs.s	loc_17F38
0001AF74 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001AF7A 317C 0060 0010             		move.w	#$60,obVelX(a0)
0001AF80 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001AF84                            
0001AF84                            loc_17F38:
0001AF84 6100 F948                  		bsr.w	BossMove
0001AF88 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001AF8E 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001AF94                            
0001AF94                            loc_17F48:
0001AF94 4A28 003D                  		tst.b	$3D(a0)
0001AF98 6600                       		bne.s	loc_17F8E
0001AF9A 4A28 0022                  		tst.b	obStatus(a0)
0001AF9E 6B00                       		bmi.s	loc_17F92
0001AFA0 4A28 0020                  		tst.b	obColType(a0)
0001AFA4 6600                       		bne.s	locret_17F8C
0001AFA6 4A28 003E                  		tst.b	$3E(a0)
0001AFAA 6600                       		bne.s	loc_17F70
0001AFAC 117C 0020 003E             		move.b	#$20,$3E(a0)
0001AFBC                            
0001AFBC                            loc_17F70:
0001AFBC 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001AFC0 7000                       		moveq	#0,d0
0001AFC2 4A51                       		tst.w	(a1)
0001AFC4 6600                       		bne.s	loc_17F7E
0001AFC6 303C 0EEE                  		move.w	#cWhite,d0
0001AFCA                            
0001AFCA                            loc_17F7E:
0001AFCA 3280                       		move.w	d0,(a1)
0001AFCC 5328 003E                  		subq.b	#1,$3E(a0)
0001AFD0 6600                       		bne.s	locret_17F8C
0001AFD2 117C 000F 0020             		move.b	#$F,obColType(a0)
0001AFD8                            
0001AFD8                            locret_17F8C:
0001AFD8 4E75                       		rts	
0001AFDA                            ; ===========================================================================
0001AFDA                            
0001AFDA                            loc_17F8E:
0001AFDA 6000 F8B0                  		bra.w	BossDefeated
0001AFDE                            ; ===========================================================================
0001AFDE                            
0001AFDE                            loc_17F92:
0001AFDE 7064                       		moveq	#100,d0
0001AFE0 6100 0000                  		bsr.w	AddPoints
0001AFE4 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001AFEA 4E75                       		rts	
0001AFEC                            ; ===========================================================================
0001AFEC                            
0001AFEC                            loc_17FA0:
0001AFEC 70FE                       		moveq	#-2,d0
0001AFEE 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
0001AFF4 6500                       		bcs.s	loc_17FB6
0001AFF6 317C 1E48 0030             		move.w	#$1E48,$30(a0)
0001AFFC 4268 0010                  		clr.w	obVelX(a0)
0001B000 5240                       		addq.w	#1,d0
0001B002                            
0001B002                            loc_17FB6:
0001B002 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
0001B008 6E00                       		bgt.s	loc_17FCA
0001B00A 317C 0500 0038             		move.w	#$500,$38(a0)
0001B010 4268 0012                  		clr.w	obVelY(a0)
0001B014 5240                       		addq.w	#1,d0
0001B016                            
0001B016                            loc_17FCA:
0001B016 6600                       		bne.s	loc_17FDC
0001B018 317C 0140 0010             		move.w	#$140,obVelX(a0)
0001B01E 317C FE00 0012             		move.w	#-$200,obVelY(a0)
0001B024 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B028                            
0001B028                            loc_17FDC:
0001B028 6000 FF5A                  		bra.w	loc_17F38
0001B02C                            ; ===========================================================================
0001B02C                            
0001B02C                            loc_17FE0:
0001B02C 70FE                       		moveq	#-2,d0
0001B02E 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
0001B034 6500                       		bcs.s	loc_17FF6
0001B036 317C 1E70 0030             		move.w	#$1E70,$30(a0)
0001B03C 4268 0010                  		clr.w	obVelX(a0)
0001B040 5240                       		addq.w	#1,d0
0001B042                            
0001B042                            loc_17FF6:
0001B042 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
0001B048 6E00                       		bgt.s	loc_1800A
0001B04A 317C 04C0 0038             		move.w	#$4C0,$38(a0)
0001B050 4268 0012                  		clr.w	obVelY(a0)
0001B054 5240                       		addq.w	#1,d0
0001B056                            
0001B056                            loc_1800A:
0001B056 6600                       		bne.s	loc_1801A
0001B058 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001B05E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B062 4228 003F                  		clr.b	$3F(a0)
0001B066                            
0001B066                            loc_1801A:
0001B066 6000 FF1C                  		bra.w	loc_17F38
0001B06A                            ; ===========================================================================
0001B06A                            
0001B06A                            loc_1801E:
0001B06A 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
0001B070 6E00                       		bgt.s	loc_1804E
0001B072 317C 0100 0038             		move.w	#$100,$38(a0)
0001B078 317C 0140 0010             		move.w	#$140,obVelX(a0)
0001B07E 317C FF80 0012             		move.w	#-$80,obVelY(a0)
0001B084 4A28 003D                  		tst.b	$3D(a0)
0001B088 6700                       		beq.s	loc_18046
0001B08A E1E8 0010                  		asl	obVelX(a0)
0001B08E E1E8 0012                  		asl	obVelY(a0)
0001B092                            
0001B092                            loc_18046:
0001B092 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B096 6000 FEEC                  		bra.w	loc_17F38
0001B09A                            ; ===========================================================================
0001B09A                            
0001B09A                            loc_1804E:
0001B09A 08E8 0000 0022             		bset	#0,obStatus(a0)
0001B0A0 5428 003F                  		addq.b	#2,$3F(a0)
0001B0A4 1028 003F                  		move.b	$3F(a0),d0
0001B0A8 4EB9 0000 3A32             		jsr	(CalcSine).l
0001B0AE 4A41                       		tst.w	d1
0001B0B0 6A00                       		bpl.s	loc_1806C
0001B0B2 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001B0B8                            
0001B0B8                            loc_1806C:
0001B0B8 E840                       		asr.w	#4,d0
0001B0BA 4840                       		swap	d0
0001B0BC 4240                       		clr.w	d0
0001B0BE D0A8 0030                  		add.l	$30(a0),d0
0001B0C2 4840                       		swap	d0
0001B0C4 3140 0008                  		move.w	d0,obX(a0)
0001B0C8 3028 0012                  		move.w	obVelY(a0),d0
0001B0CC 3238 D00C                  		move.w	(v_player+obY).w,d1
0001B0D0 9268 000C                  		sub.w	obY(a0),d1
0001B0D4 6500                       		bcs.s	loc_180A2
0001B0D6 0441 0048                  		subi.w	#$48,d1
0001B0DA 6500                       		bcs.s	loc_180A2
0001B0DC E240                       		asr.w	#1,d0
0001B0DE 0441 0028                  		subi.w	#$28,d1
0001B0E2 6500                       		bcs.s	loc_180A2
0001B0E4 E240                       		asr.w	#1,d0
0001B0E6 0441 0028                  		subi.w	#$28,d1
0001B0EA 6500                       		bcs.s	loc_180A2
0001B0EC 7000                       		moveq	#0,d0
0001B0EE                            
0001B0EE                            loc_180A2:
0001B0EE 48C0                       		ext.l	d0
0001B0F0 E180                       		asl.l	#8,d0
0001B0F2 4A28 003D                  		tst.b	$3D(a0)
0001B0F6 6700                       		beq.s	loc_180AE
0001B0F8 D080                       		add.l	d0,d0
0001B0FA                            
0001B0FA                            loc_180AE:
0001B0FA D1A8 0038                  		add.l	d0,$38(a0)
0001B0FE 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001B104 6000 FE8E                  		bra.w	loc_17F48
0001B108                            ; ===========================================================================
0001B108                            
0001B108                            loc_180BC:
0001B108 70FE                       		moveq	#-2,d0
0001B10A 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
0001B110 6500                       		bcs.s	loc_180D2
0001B112 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
0001B118 4268 0010                  		clr.w	obVelX(a0)
0001B11C 5240                       		addq.w	#1,d0
0001B11E                            
0001B11E                            loc_180D2:
0001B11E 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
0001B124 6E00                       		bgt.s	loc_180E6
0001B126 317C 00C0 0038             		move.w	#$C0,$38(a0)
0001B12C 4268 0012                  		clr.w	obVelY(a0)
0001B130 5240                       		addq.w	#1,d0
0001B132                            
0001B132                            loc_180E6:
0001B132 6600                       		bne.s	loc_180F2
0001B134 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B138 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001B13E                            
0001B13E                            loc_180F2:
0001B13E 6000 FE44                  		bra.w	loc_17F38
0001B142                            ; ===========================================================================
0001B142                            
0001B142                            loc_180F6:
0001B142 4A28 003D                  		tst.b	$3D(a0)
0001B146 6600                       		bne.s	loc_18112
0001B148 0C69 1EC8 0008             		cmpi.w	#$1EC8,obX(a1)
0001B14E 6D00                       		blt.s	loc_18126
0001B150 0C69 00F0 000C             		cmpi.w	#$F0,obY(a1)
0001B156 6E00                       		bgt.s	loc_18126
0001B158 117C 0032 003C             		move.b	#$32,$3C(a0)
0001B15E                            
0001B15E                            loc_18112:
0001B15E 4A38 FE2D                          tst.b     (v_invinc).w
0001B162 6600                               bne.s   @boss_invinc
0001B164                            
0001B164 1038 F5C6                          move.b   (v_Saved_music),d0
0001B168 6000 0000                          bra.w      @boss_play
0001B16C                            
0001B16C                            @boss_invinc:
0001B16C 103C 0000                          move.b #bgm_Invincible,d0
0001B170                            
0001B170                            @boss_play:
0001B170 4EB8 124A                          jsr PlaySound
0001B174 4238 F7AA                          clr.b    (f_lockscreen).w
0001B178 08E8 0000 0022                     bset    #0,obStatus(a0)
0001B17E 5428 0025                          addq.b    #2,ob2ndRout(a0)
0001B182                            
0001B182                            loc_18126:
0001B182 6000 FE00                  		bra.w	loc_17F38
0001B186                            ; ===========================================================================
0001B186                            
0001B186                            loc_1812A:
0001B186 4A28 003D                  		tst.b	$3D(a0)
0001B18A 6600                       		bne.s	loc_18136
0001B18C 5328 003C                  		subq.b	#1,$3C(a0)
0001B190 6600                       		bne.s	loc_1814E
0001B192                            
0001B192                            loc_18136:
0001B192 4228 003C                  		clr.b	$3C(a0)
0001B196 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001B19C 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001B1A2 4228 003D                  		clr.b	$3D(a0)
0001B1A6 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B1AA                            
0001B1AA                            loc_1814E:
0001B1AA 6000 FDD8                  		bra.w	loc_17F38
0001B1AE                            ; ===========================================================================
0001B1AE                            
0001B1AE                            loc_18152:
0001B1AE 0C78 2030 F72A             		cmpi.w	#$2030,(v_limitright2).w
0001B1B4 6400                       		bcc.s	loc_18160
0001B1B6 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001B1BA 6000                       		bra.s	loc_18166
0001B1BC                            ; ===========================================================================
0001B1BC                            
0001B1BC                            loc_18160:
0001B1BC 4A28 0001                  		tst.b	obRender(a0)
0001B1C0 6A00                       		bpl.s	Obj77_ShipDel
0001B1C2                            
0001B1C2                            loc_18166:
0001B1C2 6000 FDC0                  		bra.w	loc_17F38
0001B1C6                            ; ===========================================================================
0001B1C6                            
0001B1C6                            Obj77_ShipDel:
0001B1C6 4EF9 0000 F8CC             		jmp	(DeleteObject).l
0001B1CC                            ; ===========================================================================
0001B1CC                            
0001B1CC                            Obj77_FaceMain:	; Routine 4
0001B1CC 2268 0034                  		movea.l	$34(a0),a1
0001B1D0 1011                       		move.b	(a1),d0
0001B1D2 B010                       		cmp.b	(a0),d0
0001B1D4 6600                       		bne.s	Obj77_FaceDel
0001B1D6 7000                       		moveq	#0,d0
0001B1D8 1029 0025                  		move.b	ob2ndRout(a1),d0
0001B1DC 7201                       		moveq	#1,d1
0001B1DE 4A28 003D                  		tst.b	$3D(a0)
0001B1E2 6700                       		beq.s	loc_1818C
0001B1E4 720A                       		moveq	#$A,d1
0001B1E6 6000                       		bra.s	loc_181A0
0001B1E8                            ; ===========================================================================
0001B1E8                            
0001B1E8                            loc_1818C:
0001B1E8 4A29 0020                  		tst.b	obColType(a1)
0001B1EC 6600                       		bne.s	loc_18196
0001B1EE 7205                       		moveq	#5,d1
0001B1F0 6000                       		bra.s	loc_181A0
0001B1F2                            ; ===========================================================================
0001B1F2                            
0001B1F2                            loc_18196:
0001B1F2 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001B1F8 6500                       		bcs.s	loc_181A0
0001B1FA 7204                       		moveq	#4,d1
0001B1FC                            
0001B1FC                            loc_181A0:
0001B1FC 1141 001C                  		move.b	d1,obAnim(a0)
0001B200 0C00 000E                  		cmpi.b	#$E,d0
0001B204 6600                       		bne.s	loc_181B6
0001B206 117C 0006 001C             		move.b	#6,obAnim(a0)
0001B20C 4A28 0001                  		tst.b	obRender(a0)
0001B210 6A00                       		bpl.s	Obj77_FaceDel
0001B212                            
0001B212                            loc_181B6:
0001B212 6000                       		bra.s	Obj77_Display
0001B214                            ; ===========================================================================
0001B214                            
0001B214                            Obj77_FaceDel:
0001B214 4EF9 0000 F8CC             		jmp	(DeleteObject).l
0001B21A                            ; ===========================================================================
0001B21A                            
0001B21A                            Obj77_FlameMain:; Routine 6
0001B21A 117C 0007 001C             		move.b	#7,obAnim(a0)
0001B220 2268 0034                  		movea.l	$34(a0),a1
0001B224 1011                       		move.b	(a1),d0
0001B226 B010                       		cmp.b	(a0),d0
0001B228 6600                       		bne.s	Obj77_FlameDel
0001B22A 0C29 000E 0025             		cmpi.b	#$E,ob2ndRout(a1)
0001B230 6600                       		bne.s	loc_181F0
0001B232 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001B238 4A28 0001                  		tst.b	1(a0)
0001B23C 6A00                       		bpl.s	Obj77_FlameDel
0001B23E 6000                       		bra.s	loc_181F0
0001B240                            ; ===========================================================================
0001B240 4A69 0010                  		tst.w	obVelX(a1)
0001B244 6700                       		beq.s	loc_181F0
0001B246 117C 0008 001C             		move.b	#8,obAnim(a0)
0001B24C                            
0001B24C                            loc_181F0:
0001B24C 6000                       		bra.s	Obj77_Display
0001B24E                            ; ===========================================================================
0001B24E                            
0001B24E                            Obj77_FlameDel:
0001B24E 4EF9 0000 F8CC             		jmp	(DeleteObject).l
0001B254                            ; ===========================================================================
0001B254                            
0001B254                            Obj77_Display:
0001B254 43F9 0001 ACE2             		lea	(Ani_Eggman).l,a1
0001B25A 4EB9 0000 C938             		jsr	(AnimateSprite).l
0001B260 2268 0034                  		movea.l	$34(a0),a1
0001B264 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001B26A 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001B270 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001B276 7003                       		moveq	#3,d0
0001B278 C028 0022                  		and.b	obStatus(a0),d0
0001B27C 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B282 8128 0001                  		or.b	d0,obRender(a0)
0001B286 4EF9 0000 F88C             		jmp	(DisplaySprite).l
0001B286 4EF9 0000 F88C             		jmp	(DisplaySprite).l
0001B28C                            		include	"_incObj\73 Boss - Marble.asm"
0001B28C                            ; ---------------------------------------------------------------------------
0001B28C                            ; Object 73 - Eggman (MZ)
0001B28C                            ; ---------------------------------------------------------------------------
0001B28C                            
0001B28C                            BossMarble:
0001B28C 7000                       		moveq	#0,d0
0001B28E 1028 0024                  		move.b	obRoutine(a0),d0
0001B292 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
0001B296 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
0001B29A                            ; ===========================================================================
0001B29A 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
0001B29C 0000                       		dc.w Obj73_ShipMain-Obj73_Index
0001B29E 0000                       		dc.w Obj73_FaceMain-Obj73_Index
0001B2A0 0000                       		dc.w Obj73_FlameMain-Obj73_Index
0001B2A2 0000                       		dc.w Obj73_TubeMain-Obj73_Index
0001B2A4                            
0001B2A4 0200 0200                  Obj73_ObjData:	dc.b 2,	0, $02, $00		; routine number, animation, priority (high and low bytes)
0001B2A8 0401 0200                  		dc.b 4,	1, $02, $00
0001B2AC 0607 0200                  		dc.b 6,	7, $02, $00
0001B2B0 0800 0180                  		dc.b 8,	0, $01, $80
0001B2B4                            ; ===========================================================================
0001B2B4                            
0001B2B4                            Obj73_Main:	; Routine 0
0001B2B4 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001B2BA 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001B2C0 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B2C6 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001B2CC 45FA FFD6                  		lea	Obj73_ObjData(pc),a2
0001B2D0 2248                       		movea.l	a0,a1
0001B2D2 7203                       		moveq	#3,d1
0001B2D4 6000                       		bra.s	Obj73_LoadBoss
0001B2D6                            ; ===========================================================================
0001B2D6                            
0001B2D6                            Obj73_Loop:
0001B2D6 4EB9 0000 FD2E             		jsr	(FindNextFreeObj).l
0001B2DC 6600                       		bne.s	Obj73_ShipMain
0001B2DE 12BC 0073                  		move.b	#id_BossMarble,0(a1)
0001B2E2 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B2E8 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001B2EE                            
0001B2EE                            Obj73_LoadBoss:
0001B2EE 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001B2F4 4229 0025                  		clr.b	ob2ndRout(a1)
0001B2F8 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001B2FC 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001B300 335A 0018                  		move.w	(a2)+,obPriority(a1)
0001B304 237C 0001 AD32 0004        		move.l	#Map_Eggman,obMap(a1)
0001B30C 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001B312 137C 0004 0001             		move.b	#4,obRender(a1)
0001B318 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001B31E 2348 0034                  		move.l	a0,$34(a1)
0001B322 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
0001B326                            
0001B326                            Obj73_ShipMain:	; Routine 2
0001B326 7000                       		moveq	#0,d0
0001B328 1028 0025                  		move.b	ob2ndRout(a0),d0
0001B32C 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
0001B330 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
0001B334 43F9 0001 ACE2             		lea	(Ani_Eggman).l,a1
0001B33A 4EB9 0000 C938             		jsr	(AnimateSprite).l
0001B340 7003                       		moveq	#3,d0
0001B342 C028 0022                  		and.b	obStatus(a0),d0
0001B346 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B34C 8128 0001                  		or.b	d0,obRender(a0)
0001B350 4EF9 0000 F88C             		jmp	(DisplaySprite).l
0001B356                            ; ===========================================================================
0001B356 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
0001B358 0000                       		dc.w loc_183AA-Obj73_ShipIndex
0001B35A 0000                       		dc.w loc_184F6-Obj73_ShipIndex
0001B35C 0000                       		dc.w loc_1852C-Obj73_ShipIndex
0001B35E 0000                       		dc.w loc_18582-Obj73_ShipIndex
0001B360                            ; ===========================================================================
0001B360                            
0001B360                            loc_18302:
0001B360 1028 003F                  		move.b	$3F(a0),d0
0001B364 5428 003F                  		addq.b	#2,$3F(a0)
0001B368 4EB9 0000 3A32             		jsr	(CalcSine).l
0001B36E E440                       		asr.w	#2,d0
0001B370 3140 0012                  		move.w	d0,obVelY(a0)
0001B374 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001B37A 6100 F552                  		bsr.w	BossMove
0001B37E 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001B384 6600                       		bne.s	loc_18334
0001B386 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B38A 4228 0028                  		clr.b	obSubtype(a0)
0001B38E 42A8 0010                  		clr.l	obVelX(a0)
0001B392                            
0001B392                            loc_18334:
0001B392 4EB9 0000 3A0C             		jsr	(RandomNumber).l
0001B398 1140 0034                  		move.b	d0,$34(a0)
0001B39C                            
0001B39C                            loc_1833E:
0001B39C 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001B3A2 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001B3A8 0C28 0004 0025             		cmpi.b	#4,ob2ndRout(a0)
0001B3AE 6400                       		bcc.s	locret_18390
0001B3B0 4A28 0022                  		tst.b	obStatus(a0)
0001B3B4 6B00                       		bmi.s	loc_18392
0001B3B6 4A28 0020                  		tst.b	obColType(a0)
0001B3BA 6600                       		bne.s	locret_18390
0001B3BC 4A28 003E                  		tst.b	$3E(a0)
0001B3C0 6600                       		bne.s	loc_18374
0001B3C2 117C 0028 003E             		move.b	#$28,$3E(a0)
0001B3D2                            
0001B3D2                            loc_18374:
0001B3D2 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001B3D6 7000                       		moveq	#0,d0
0001B3D8 4A51                       		tst.w	(a1)
0001B3DA 6600                       		bne.s	loc_18382
0001B3DC 303C 0EEE                  		move.w	#cWhite,d0
0001B3E0                            
0001B3E0                            loc_18382:
0001B3E0 3280                       		move.w	d0,(a1)
0001B3E2 5328 003E                  		subq.b	#1,$3E(a0)
0001B3E6 6600                       		bne.s	locret_18390
0001B3E8 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B3EE                            
0001B3EE                            locret_18390:
0001B3EE 4E75                       		rts	
0001B3F0                            ; ===========================================================================
0001B3F0                            
0001B3F0                            loc_18392:
0001B3F0 7064                       		moveq	#100,d0
0001B3F2 6100 0000                  		bsr.w	AddPoints
0001B3F6 117C 0004 0025             		move.b	#4,ob2ndRout(a0)
0001B3FC 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001B402 4268 0010                  		clr.w	obVelX(a0)
0001B406 4E75                       		rts	
0001B408                            ; ===========================================================================
0001B408                            
0001B408                            loc_183AA:
0001B408 7000                       		moveq	#0,d0
0001B40A 1028 0028                  		move.b	obSubtype(a0),d0
0001B40E 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
0001B412 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
0001B416 0228 0006 0028             		andi.b	#6,obSubtype(a0)
0001B41C 6000 FF7E                  		bra.w	loc_1833E
0001B420                            ; ===========================================================================
0001B420 0000                       off_183C2:	dc.w loc_183CA-off_183C2
0001B422 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001B424 0000                       		dc.w loc_183CA-off_183C2
0001B426 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001B428                            ; ===========================================================================
0001B428                            
0001B428                            loc_183CA:
0001B428 4A68 0010                  		tst.w	obVelX(a0)
0001B42C 6600                       		bne.s	loc_183FE
0001B42E 7040                       		moveq	#$40,d0
0001B430 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001B436 6700                       		beq.s	loc_183E6
0001B438 6500                       		bcs.s	loc_183DE
0001B43A 4440                       		neg.w	d0
0001B43C                            
0001B43C                            loc_183DE:
0001B43C 3140 0012                  		move.w	d0,obVelY(a0)
0001B440 6000 F48C                  		bra.w	BossMove
0001B444                            ; ===========================================================================
0001B444                            
0001B444                            loc_183E6:
0001B444 317C 0200 0010             		move.w	#$200,obVelX(a0)
0001B44A 317C 0100 0012             		move.w	#$100,obVelY(a0)
0001B450 0828 0000 0022             		btst	#0,obStatus(a0)
0001B456 6600                       		bne.s	loc_183FE
0001B458 4468 0010                  		neg.w	obVelX(a0)
0001B45C                            
0001B45C                            loc_183FE:
0001B45C 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
0001B462 6400                       		bcc.s	Obj73_MakeLava
0001B464 6100 F468                  		bsr.w	BossMove
0001B468 5968 0012                  		subq.w	#4,obVelY(a0)
0001B46C                            
0001B46C                            Obj73_MakeLava:
0001B46C 5328 0034                  		subq.b	#1,$34(a0)
0001B470 6400                       		bcc.s	loc_1845C
0001B472 4EB9 0000 FD18             		jsr	(FindFreeObj).l
0001B478 6600                       		bne.s	loc_1844A
0001B47A 12BC 0014                  		move.b	#id_LavaBall,0(a1) ; load lava ball object
0001B47E 337C 02E8 000C             		move.w	#$2E8,obY(a1)	; set Y	position
0001B484 4EB9 0000 3A0C             		jsr	(RandomNumber).l
0001B48A 0280 0000 FFFF             		andi.l	#$FFFF,d0
0001B490 80FC 0050                  		divu.w	#$50,d0
0001B494 4840                       		swap	d0
0001B496 0640 1878                  		addi.w	#$1878,d0
0001B49A 3340 0008                  		move.w	d0,obX(a1)
0001B49E EE09                       		lsr.b	#7,d1
0001B4A0 337C 00FF 0028             		move.w	#$FF,obSubtype(a1)
0001B4A6                            
0001B4A6                            loc_1844A:
0001B4A6 4EB9 0000 3A0C             		jsr	(RandomNumber).l
0001B4AC 0200 001F                  		andi.b	#$1F,d0
0001B4B0 0600 0040                  		addi.b	#$40,d0
0001B4B4 1140 0034                  		move.b	d0,$34(a0)
0001B4B8                            
0001B4B8                            loc_1845C:
0001B4B8 0828 0000 0022             		btst	#0,obStatus(a0)
0001B4BE 6700                       		beq.s	loc_18474
0001B4C0 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001B4C6 6D00                       		blt.s	locret_1849C
0001B4C8 317C 1910 0030             		move.w	#$1910,$30(a0)
0001B4CE 6000                       		bra.s	loc_18482
0001B4D0                            ; ===========================================================================
0001B4D0                            
0001B4D0                            loc_18474:
0001B4D0 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
0001B4D6 6E00                       		bgt.s	locret_1849C
0001B4D8 317C 1830 0030             		move.w	#$1830,$30(a0)
0001B4DE                            
0001B4DE                            loc_18482:
0001B4DE 4268 0010                  		clr.w	obVelX(a0)
0001B4E2 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001B4E8 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001B4EE 6400                       		bcc.s	loc_18498
0001B4F0 4468 0012                  		neg.w	obVelY(a0)
0001B4F4                            
0001B4F4                            loc_18498:
0001B4F4 5428 0028                  		addq.b	#2,obSubtype(a0)
0001B4F8                            
0001B4F8                            locret_1849C:
0001B4F8 4E75                       		rts	
0001B4FA                            ; ===========================================================================
0001B4FA                            
0001B4FA                            Obj73_MakeLava2:
0001B4FA 6100 F3D2                  		bsr.w	BossMove
0001B4FE 3028 0038                  		move.w	$38(a0),d0
0001B502 0440 022C                  		subi.w	#$22C,d0
0001B506 6E00                       		bgt.s	locret_184F4
0001B508 303C 022C                  		move.w	#$22C,d0
0001B50C 4A68 0012                  		tst.w	obVelY(a0)
0001B510 6700                       		beq.s	loc_184EA
0001B512 4268 0012                  		clr.w	obVelY(a0)
0001B516 317C 0050 003C             		move.w	#$50,$3C(a0)
0001B51C 0868 0000 0022             		bchg	#0,obStatus(a0)
0001B522 4EB9 0000 FD18             		jsr	(FindFreeObj).l
0001B528 6600                       		bne.s	loc_184EA
0001B52A 3368 0030 0008             		move.w	$30(a0),obX(a1)
0001B530 3368 0038 000C             		move.w	$38(a0),obY(a1)
0001B536 0669 0018 000C             		addi.w	#$18,obY(a1)
0001B53C 12BC 0074                  		move.b	#id_BossFire,(a1)	; load lava ball object
0001B540 137C 0001 0028             		move.b	#1,obSubtype(a1)
0001B546                            
0001B546                            loc_184EA:
0001B546 5368 003C                  		subq.w	#1,$3C(a0)
0001B54A 6600                       		bne.s	locret_184F4
0001B54C 5428 0028                  		addq.b	#2,obSubtype(a0)
0001B550                            
0001B550                            locret_184F4:
0001B550 4E75                       		rts	
0001B552                            ; ===========================================================================
0001B552                            
0001B552                            loc_184F6:
0001B552 5368 003C                  		subq.w	#1,$3C(a0)
0001B556 6B00                       		bmi.s	loc_18500
0001B558 6000 F332                  		bra.w	BossDefeated
0001B55C                            ; ===========================================================================
0001B55C                            
0001B55C                            loc_18500:
0001B55C 08E8 0000 0022             		bset	#0,obStatus(a0)
0001B562 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001B568 4268 0010                  		clr.w	obVelX(a0)
0001B56C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B570 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001B576 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001B57A 6600                       		bne.s	locret_1852A
0001B57C 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001B582 4268 0012                  		clr.w	obVelY(a0)
0001B586                            
0001B586                            locret_1852A:
0001B586 4E75                       		rts	
0001B588                            ; ===========================================================================
0001B588                            
0001B588                            loc_1852C:
0001B588 5268 003C                  		addq.w	#1,$3C(a0)
0001B58C 6700                       		beq.s	loc_18544
0001B58E 6A00                       		bpl.s	loc_1854E
0001B590 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
0001B596 6400                       		bcc.s	loc_18544
0001B598 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001B59E 6000                       		bra.s	loc_1857A
0001B5A0                            ; ===========================================================================
0001B5A0                            
0001B5A0                            loc_18544:
0001B5A0 4268 0012                  		clr.w	obVelY(a0)
0001B5A4 4268 003C                  		clr.w	$3C(a0)
0001B5A8 6000                       		bra.s	loc_1857A
0001B5AA                            ; ===========================================================================
0001B5AA                            
0001B5AA                            loc_1854E:
0001B5AA 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001B5B0 6500                       		bcs.s	loc_18566
0001B5B2 6700                       		beq.s	loc_1856C
0001B5B4 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001B5BA 6500                       		bcs.s	loc_1857A
0001B5BC 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B5C0 6000                       		bra.s	loc_1857A
0001B5C2                            ; ===========================================================================
0001B5C2                            
0001B5C2                            loc_18566:
0001B5C2 5168 0012                  		subq.w	#8,obVelY(a0)
0001B5C6 6000                       		bra.s	loc_1857A
0001B5C8                            ; ===========================================================================
0001B5C8                            
0001B5C8                            loc_1856C:
0001B5C8 4268 0012                  		clr.w	obVelY(a0)
0001B5D6                            
0001B5D6                            loc_1857A:
0001B5D6 6100 F2F6                  		bsr.w	BossMove
0001B5DA 6000 FDC0                  		bra.w	loc_1833E
0001B5DE                            ; ===========================================================================
0001B5DE                            
0001B5DE                            loc_18582:
0001B5DE 317C 0500 0010             		move.w	#$500,obVelX(a0)
0001B5E4 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001B5EA 0C78 1960 F72A             		cmpi.w	#$1960,(v_limitright2).w
0001B5F0 6400                       		bcc.s	loc_1859C
0001B5F2 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001B5F6 6000                       		bra.s	loc_185A2
0001B5F8                            ; ===========================================================================
0001B5F8                            
0001B5F8                            loc_1859C:
0001B5F8 4A28 0001                  		tst.b	obRender(a0)
0001B5FC 6A00                       		bpl.s	Obj73_ShipDel
0001B5FE                            
0001B5FE                            loc_185A2:
0001B5FE 6100 F2CE                  		bsr.w	BossMove
0001B602 6000 FD98                  		bra.w	loc_1833E
0001B606                            ; ===========================================================================
0001B606                            
0001B606                            Obj73_ShipDel:
0001B606 4EF9 0000 F8CC             		jmp	(DeleteObject).l
0001B60C                            ; ===========================================================================
0001B60C                            
0001B60C                            Obj73_FaceMain:	; Routine 4
0001B60C 7000                       		moveq	#0,d0
0001B60E 7201                       		moveq	#1,d1
0001B610 2268 0034                  		movea.l	$34(a0),a1
0001B614 1029 0025                  		move.b	ob2ndRout(a1),d0
0001B618 5540                       		subq.w	#2,d0
0001B61A 6600                       		bne.s	loc_185D2
0001B61C 0829 0001 0028             		btst	#1,obSubtype(a1)
0001B622 6700                       		beq.s	loc_185DA
0001B624 4A69 0012                  		tst.w	obVelY(a1)
0001B628 6600                       		bne.s	loc_185DA
0001B62A 7204                       		moveq	#4,d1
0001B62C 6000                       		bra.s	loc_185EE
0001B62E                            ; ===========================================================================
0001B62E                            
0001B62E                            loc_185D2:
0001B62E 5500                       		subq.b	#2,d0
0001B630 6B00                       		bmi.s	loc_185DA
0001B632 720A                       		moveq	#$A,d1
0001B634 6000                       		bra.s	loc_185EE
0001B636                            ; ===========================================================================
0001B636                            
0001B636                            loc_185DA:
0001B636 4A29 0020                  		tst.b	obColType(a1)
0001B63A 6600                       		bne.s	loc_185E4
0001B63C 7205                       		moveq	#5,d1
0001B63E 6000                       		bra.s	loc_185EE
0001B640                            ; ===========================================================================
0001B640                            
0001B640                            loc_185E4:
0001B640 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001B646 6500                       		bcs.s	loc_185EE
0001B648 7204                       		moveq	#4,d1
0001B64A                            
0001B64A                            loc_185EE:
0001B64A 1141 001C                  		move.b	d1,obAnim(a0)
0001B64E 5900                       		subq.b	#4,d0
0001B650 6600                       		bne.s	loc_18602
0001B652 117C 0006 001C             		move.b	#6,obAnim(a0)
0001B658 4A28 0001                  		tst.b	obRender(a0)
0001B65C 6A00                       		bpl.s	Obj73_FaceDel
0001B65E                            
0001B65E                            loc_18602:
0001B65E 6000                       		bra.s	Obj73_Display
0001B660                            ; ===========================================================================
0001B660                            
0001B660                            Obj73_FaceDel:
0001B660 4EF9 0000 F8CC             		jmp	(DeleteObject).l
0001B666                            ; ===========================================================================
0001B666                            
0001B666                            Obj73_FlameMain:; Routine 6
0001B666 117C 0007 001C             		move.b	#7,obAnim(a0)
0001B66C 2268 0034                  		movea.l	$34(a0),a1
0001B670 0C29 0008 0025             		cmpi.b	#8,ob2ndRout(a1)
0001B676 6D00                       		blt.s	loc_1862A
0001B678 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001B67E 4A28 0001                  		tst.b	obRender(a0)
0001B682 6A00                       		bpl.s	Obj73_FlameDel
0001B684 6000                       		bra.s	loc_18636
0001B686                            ; ===========================================================================
0001B686                            
0001B686                            loc_1862A:
0001B686 4A69 0010                  		tst.w	obVelX(a1)
0001B68A 6700                       		beq.s	loc_18636
0001B68C 117C 0008 001C             		move.b	#8,obAnim(a0)
0001B692                            
0001B692                            loc_18636:
0001B692 6000                       		bra.s	Obj73_Display
0001B694                            ; ===========================================================================
0001B694                            
0001B694                            Obj73_FlameDel:
0001B694 4EF9 0000 F8CC             		jmp	(DeleteObject).l
0001B69A                            ; ===========================================================================
0001B69A                            
0001B69A                            Obj73_Display:
0001B69A 43F9 0001 ACE2             		lea	(Ani_Eggman).l,a1
0001B6A0 4EB9 0000 C938             		jsr	(AnimateSprite).l
0001B6A6                            
0001B6A6                            loc_1864A:
0001B6A6 2268 0034                  		movea.l	$34(a0),a1
0001B6AA 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001B6B0 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001B6B6 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001B6BC 7003                       		moveq	#3,d0
0001B6BE C028 0022                  		and.b	obStatus(a0),d0
0001B6C2 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B6C8 8128 0001                  		or.b	d0,obRender(a0)
0001B6CC 4EF9 0000 F88C             		jmp	(DisplaySprite).l
0001B6D2                            ; ===========================================================================
0001B6D2                            
0001B6D2                            Obj73_TubeMain:	; Routine 8
0001B6D2 2268 0034                  		movea.l	$34(a0),a1
0001B6D6 0C29 0008 0025             		cmpi.b	#8,ob2ndRout(a1)
0001B6DC 6600                       		bne.s	loc_18688
0001B6DE 4A28 0001                  		tst.b	obRender(a0)
0001B6E2 6A00                       		bpl.s	Obj73_TubeDel
0001B6E4                            
0001B6E4                            loc_18688:
0001B6E4 217C 0001 AE22 0004        		move.l	#Map_BossItems,obMap(a0)
0001B6EC 317C 246C 0002             		move.w	#$246C,obGfx(a0)
0001B6F2 117C 0004 001A             		move.b	#4,obFrame(a0)
0001B6F8 60AC                       		bra.s	loc_1864A
0001B6FA                            ; ===========================================================================
0001B6FA                            
0001B6FA                            Obj73_TubeDel:
0001B6FA 4EF9 0000 F8CC             		jmp	(DeleteObject).l
0001B6FA 4EF9 0000 F8CC             		jmp	(DeleteObject).l
0001B700                            		include	"_incObj\74 MZ Boss Fire.asm"
0001B700                            ; ---------------------------------------------------------------------------
0001B700                            ; Object 74 - lava that	Eggman drops (MZ)
0001B700                            ; ---------------------------------------------------------------------------
0001B700                            
0001B700                            BossFire:
0001B700 7000                       		moveq	#0,d0
0001B702 1028 0024                  		move.b	obRoutine(a0),d0
0001B706 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
0001B70A 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
0001B70E 4EF9 0000 F88C             		jmp	(DisplaySprite).l
0001B714                            ; ===========================================================================
0001B714 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
0001B716 0000                       		dc.w Obj74_Action-Obj74_Index
0001B718 0000                       		dc.w loc_18886-Obj74_Index
0001B71A 0000                       		dc.w Obj74_Delete3-Obj74_Index
0001B71C                            ; ===========================================================================
0001B71C                            
0001B71C                            Obj74_Main:	; Routine 0
0001B71C 117C 0008 0016             		move.b	#8,obHeight(a0)
0001B722 117C 0008 0017             		move.b	#8,obWidth(a0)
0001B728 217C 0000 D58A 0004        		move.l	#Map_Fire,obMap(a0)
0001B730 317C 0345 0002             		move.w	#$345,obGfx(a0)
0001B736 117C 0004 0001             		move.b	#4,obRender(a0)
0001B73C 317C 0280 0018             		move.w	#$280,obPriority(a0)
0001B742 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001B748 117C 0008 0014             		move.b	#8,obActWid(a0)
0001B74E 5428 0024                  		addq.b	#2,obRoutine(a0)
0001B752 4A28 0028                  		tst.b	obSubtype(a0)
0001B756 6600                       		bne.s	loc_1870A
0001B758 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001B75E 5428 0024                  		addq.b	#2,obRoutine(a0)
0001B762 6000 0000                  		bra.w	loc_18886
0001B766                            ; ===========================================================================
0001B766                            
0001B766                            loc_1870A:
0001B766 117C 001E 0029             		move.b	#$1E,$29(a0)
0001B776                            
0001B776                            Obj74_Action:	; Routine 2
0001B776 7000                       		moveq	#0,d0
0001B778 1028 0025                  		move.b	ob2ndRout(a0),d0
0001B77C 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
0001B780 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
0001B784 4EB9 0000 F878             		jsr	(SpeedToPos).l
0001B78A 43F9 0001 0750             		lea	(Ani_Fire).l,a1
0001B790 4EB9 0000 C938             		jsr	(AnimateSprite).l
0001B796 0C68 02E8 000C             		cmpi.w	#$2E8,obY(a0)
0001B79C 6200                       		bhi.s	Obj74_Delete
0001B79E 4E75                       		rts	
0001B7A0                            ; ===========================================================================
0001B7A0                            
0001B7A0                            Obj74_Delete:
0001B7A0 4EF9 0000 F8CC             		jmp	(DeleteObject).l
0001B7A6                            ; ===========================================================================
0001B7A6 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
0001B7A8 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
0001B7AA 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
0001B7AC 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
0001B7AE                            ; ===========================================================================
0001B7AE                            
0001B7AE                            Obj74_Drop:
0001B7AE 08E8 0001 0022             		bset	#1,obStatus(a0)
0001B7B4 5328 0029                  		subq.b	#1,$29(a0)
0001B7B8 6A00                       		bpl.s	locret_18780
0001B7BA 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001B7C0 4228 0028                  		clr.b	obSubtype(a0)
0001B7C4 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001B7CA 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001B7D0 6100 C634                  		bsr.w	ObjFloorDist
0001B7D4 4A41                       		tst.w	d1
0001B7D6 6A00                       		bpl.s	locret_18780
0001B7D8 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B7DC                            
0001B7DC                            locret_18780:
0001B7DC 4E75                       		rts	
0001B7DE                            ; ===========================================================================
0001B7DE                            
0001B7DE                            Obj74_MakeFlame:
0001B7DE 5568 000C                  		subq.w	#2,obY(a0)
0001B7E2 08E8 0007 0002             		bset	#7,obGfx(a0)
0001B7E8 317C 00A0 0010             		move.w	#$A0,obVelX(a0)
0001B7EE 4268 0012                  		clr.w	obVelY(a0)
0001B7F2 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001B7F8 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001B7FE 117C 0003 0029             		move.b	#3,$29(a0)
0001B804 4EB9 0000 FD2E             		jsr	(FindNextFreeObj).l
0001B80A 6600                       		bne.s	loc_187CA
0001B80C 47D1                       		lea	(a1),a3
0001B80E 45D0                       		lea	(a0),a2
0001B810 7003                       		moveq	#3,d0
0001B812                            
0001B812                            Obj74_Loop:
0001B812 26DA                       		move.l	(a2)+,(a3)+
0001B814 26DA                       		move.l	(a2)+,(a3)+
0001B816 26DA                       		move.l	(a2)+,(a3)+
0001B818 26DA                       		move.l	(a2)+,(a3)+
0001B81A 51C8 FFF6                  		dbf	d0,Obj74_Loop
0001B81E                            
0001B81E 4469 0010                  		neg.w	obVelX(a1)
0001B822 5429 0025                  		addq.b	#2,ob2ndRout(a1)
0001B826                            
0001B826                            loc_187CA:
0001B826 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B82A 4E75                       		rts	
0001B82C                            
0001B82C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B82C                            
0001B82C                            
0001B82C                            Obj74_Duplicate2:
0001B82C 4EB9 0000 FD2E             		jsr	(FindNextFreeObj).l
0001B832 6600                       		bne.s	locret_187EE
0001B834 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B83A 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001B840 12BC 0074                  		move.b	#id_BossFire,(a1)
0001B844 337C 0067 0028             		move.w	#$67,obSubtype(a1)
0001B84A                            
0001B84A                            locret_187EE:
0001B84A 4E75                       		rts	
0001B84C                            ; End of function Obj74_Duplicate2
0001B84C                            
0001B84C                            ; ===========================================================================
0001B84C                            
0001B84C                            Obj74_Duplicate:
0001B84C 6100 C5B8                  		bsr.w	ObjFloorDist
0001B850 4A41                       		tst.w	d1
0001B852 6A00                       		bpl.s	loc_18826
0001B854 3028 0008                  		move.w	obX(a0),d0
0001B858 0C40 1940                  		cmpi.w	#$1940,d0
0001B85C 6E00                       		bgt.s	loc_1882C
0001B85E 3228 0030                  		move.w	$30(a0),d1
0001B862 B240                       		cmp.w	d0,d1
0001B864 6700                       		beq.s	loc_1881E
0001B866 0240 0010                  		andi.w	#$10,d0
0001B86A 0241 0010                  		andi.w	#$10,d1
0001B86E B240                       		cmp.w	d0,d1
0001B870 6700                       		beq.s	loc_1881E
0001B872 61B8                       		bsr.s	Obj74_Duplicate2
0001B874 3168 0008 0032             		move.w	obX(a0),$32(a0)
0001B87A                            
0001B87A                            loc_1881E:
0001B87A 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001B880 4E75                       		rts	
0001B882                            ; ===========================================================================
0001B882                            
0001B882                            loc_18826:
0001B882 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B886 4E75                       		rts	
0001B888                            ; ===========================================================================
0001B888                            
0001B888                            loc_1882C:
0001B888 5428 0024                  		addq.b	#2,obRoutine(a0)
0001B88C 4E75                       		rts	
0001B88E                            ; ===========================================================================
0001B88E                            
0001B88E                            Obj74_FallEdge:
0001B88E 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001B894 0668 0024 0012             		addi.w	#$24,obVelY(a0)	; make flame fall
0001B89A 3028 0008                  		move.w	obX(a0),d0
0001B89E 9068 0032                  		sub.w	$32(a0),d0
0001B8A2 6A00                       		bpl.s	loc_1884A
0001B8A4 4440                       		neg.w	d0
0001B8A6                            
0001B8A6                            loc_1884A:
0001B8A6 0C40 0012                  		cmpi.w	#$12,d0
0001B8AA 6600                       		bne.s	loc_18856
0001B8AC 08A8 0007 0002             		bclr	#7,obGfx(a0)
0001B8B2                            
0001B8B2                            loc_18856:
0001B8B2 6100 C552                  		bsr.w	ObjFloorDist
0001B8B6 4A41                       		tst.w	d1
0001B8B8 6A00                       		bpl.s	locret_1887E
0001B8BA 5328 0029                  		subq.b	#1,$29(a0)
0001B8BE 6700                       		beq.s	Obj74_Delete2
0001B8C0 4268 0012                  		clr.w	obVelY(a0)
0001B8C4 3168 0032 0008             		move.w	$32(a0),obX(a0)
0001B8CA 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001B8D0 08E8 0007 0002             		bset	#7,obGfx(a0)
0001B8D6 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001B8DA                            
0001B8DA                            locret_1887E:
0001B8DA 4E75                       		rts	
0001B8DC                            ; ===========================================================================
0001B8DC                            
0001B8DC                            Obj74_Delete2:
0001B8DC 4EF9 0000 F8CC             		jmp	(DeleteObject).l
0001B8E2                            ; ===========================================================================
0001B8E2                            
0001B8E2                            loc_18886:	; Routine 4
0001B8E2 08E8 0007 0002             		bset	#7,obGfx(a0)
0001B8E8 5328 0029                  		subq.b	#1,$29(a0)
0001B8EC 6600                       		bne.s	Obj74_Animate
0001B8EE 117C 0001 001C             		move.b	#1,obAnim(a0)
0001B8F4 5968 000C                  		subq.w	#4,obY(a0)
0001B8F8 4228 0020                  		clr.b	obColType(a0)
0001B8FC                            
0001B8FC                            Obj74_Animate:
0001B8FC 43F9 0001 0750             		lea	(Ani_Fire).l,a1
0001B902 4EF9 0000 C938             		jmp	(AnimateSprite).l
0001B908                            ; ===========================================================================
0001B908                            
0001B908                            Obj74_Delete3:	; Routine 6
0001B908 4EF9 0000 F8CC             		jmp	(DeleteObject).l
0001B908 4EF9 0000 F8CC             		jmp	(DeleteObject).l
0001B90E                            
0001B90E                            	Obj7A_Delete:
0001B90E 4EF9 0000 F8CC             		jmp	(DeleteObject).l
0001B914                            
0001B914                            		include	"_incObj\7A Boss - Star Light.asm"
0001B914                            ; ---------------------------------------------------------------------------
0001B914                            ; Object 7A - Eggman (SLZ)
0001B914                            ; ---------------------------------------------------------------------------
0001B914                            
0001B914                            BossStarLight:
0001B914 7000                       		moveq	#0,d0
0001B916 1028 0024                  		move.b	obRoutine(a0),d0
0001B91A 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
0001B91E 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
0001B922                            ; ===========================================================================
0001B922 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
0001B924 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
0001B926 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
0001B928 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
0001B92A 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
0001B92C                            
0001B92C 0200 0200                  Obj7A_ObjData:	dc.b 2,	0, $02, $00		; routine number, animation, priority (high and low bytes)
0001B930 0401 0200                  		dc.b 4,	1, $02, $00
0001B934 0607 0200                  		dc.b 6,	7, $02, $00
0001B938 0800 0180                  		dc.b 8,	0, $01, $80
0001B93C                            ; ===========================================================================
0001B93C                            
0001B93C                            Obj7A_Main:
0001B93C 317C 2188 0008             		move.w	#$2188,obX(a0)
0001B942 317C 0228 000C             		move.w	#$228,obY(a0)
0001B948 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001B94E 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001B954 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B95A 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001B960 45FA FFCA                  		lea	Obj7A_ObjData(pc),a2
0001B964 2248                       		movea.l	a0,a1
0001B966 7203                       		moveq	#3,d1
0001B968 6000                       		bra.s	Obj7A_LoadBoss
0001B96A                            ; ===========================================================================
0001B96A                            
0001B96A                            Obj7A_Loop:
0001B96A 4EB9 0000 FD2E             		jsr	(FindNextFreeObj).l
0001B970 6600                       		bne.s	loc_1895C
0001B972 12BC 007A                  		move.b	#id_BossStarLight,0(a1)
0001B976 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B97C 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001B982                            
0001B982                            Obj7A_LoadBoss:
0001B982 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001B988 4229 0025                  		clr.b	ob2ndRout(a1)
0001B98C 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001B990 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001B994 135A 0018                  		move.b	(a2)+,obPriority(a1)
0001B998 237C 0001 AD32 0004        		move.l	#Map_Eggman,obMap(a1)
0001B9A0 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001B9A6 137C 0004 0001             		move.b	#4,obRender(a1)
0001B9AC 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001B9B2 2348 0034                  		move.l	a0,$34(a1)
0001B9B6 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
0001B9BA                            
0001B9BA                            loc_1895C:
0001B9BA 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001B9BE 45E8 002A                  		lea	$2A(a0),a2
0001B9C2 705E                       		moveq	#$5E,d0
0001B9C4 723E                       		moveq	#$3E,d1
0001B9C6                            
0001B9C6                            loc_18968:
0001B9C6 B011                       		cmp.b	(a1),d0
0001B9C8 6600                       		bne.s	loc_18974
0001B9CA 4A29 0028                  		tst.b	obSubtype(a1)
0001B9CE 6700                       		beq.s	loc_18974
0001B9D0 34C9                       		move.w	a1,(a2)+
0001B9D2                            
0001B9D2                            loc_18974:
0001B9D2 D2FC 0040                  		adda.w	#$40,a1
0001B9D6 51C9 FFEE                  		dbf	d1,loc_18968
0001B9DA                            
0001B9DA                            Obj7A_ShipMain:	; Routine 2
0001B9DA 7000                       		moveq	#0,d0
0001B9DC 1028 0025                  		move.b	ob2ndRout(a0),d0
0001B9E0 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
0001B9E4 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
0001B9E8 43F9 0001 ACE2             		lea	(Ani_Eggman).l,a1
0001B9EE 4EB9 0000 C938             		jsr	(AnimateSprite).l
0001B9F4 7003                       		moveq	#3,d0
0001B9F6 C028 0022                  		and.b	obStatus(a0),d0
0001B9FA 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001BA00 8128 0001                  		or.b	d0,obRender(a0)
0001BA04 4EF9 0000 F88C             		jmp	(DisplaySprite).l
0001BA0A                            ; ===========================================================================
0001BA0A 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
0001BA0C 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
0001BA0E 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
0001BA10 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
0001BA12 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
0001BA14 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
0001BA16                            ; ===========================================================================
0001BA16                            
0001BA16                            loc_189B8:
0001BA16 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001BA1C 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
0001BA22 6400                       		bcc.s	loc_189CA
0001BA24 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BA28                            
0001BA28                            loc_189CA:
0001BA28 6100 EEA4                  		bsr.w	BossMove
0001BA2C 1028 003F                  		move.b	$3F(a0),d0
0001BA30 5428 003F                  		addq.b	#2,$3F(a0)
0001BA34 4EB9 0000 3A32             		jsr	(CalcSine).l
0001BA3A EC40                       		asr.w	#6,d0
0001BA3C D068 0038                  		add.w	$38(a0),d0
0001BA40 3140 000C                  		move.w	d0,obY(a0)
0001BA44 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001BA4A 6000                       		bra.s	loc_189FE
0001BA4C                            ; ===========================================================================
0001BA4C                            
0001BA4C                            loc_189EE:
0001BA4C 6100 EE80                  		bsr.w	BossMove
0001BA50 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001BA56 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001BA5C                            
0001BA5C                            loc_189FE:
0001BA5C 0C28 0006 0025             		cmpi.b	#6,ob2ndRout(a0)
0001BA62 6400                       		bcc.s	locret_18A44
0001BA64 4A28 0022                  		tst.b	obStatus(a0)
0001BA68 6B00                       		bmi.s	loc_18A46
0001BA6A 4A28 0020                  		tst.b	obColType(a0)
0001BA6E 6600                       		bne.s	locret_18A44
0001BA70 4A28 003E                  		tst.b	$3E(a0)
0001BA74 6600                       		bne.s	loc_18A28
0001BA76 117C 0020 003E             		move.b	#$20,$3E(a0)
0001BA86                            
0001BA86                            loc_18A28:
0001BA86 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001BA8A 7000                       		moveq	#0,d0
0001BA8C 4A51                       		tst.w	(a1)
0001BA8E 6600                       		bne.s	loc_18A36
0001BA90 303C 0EEE                  		move.w	#cWhite,d0
0001BA94                            
0001BA94                            loc_18A36:
0001BA94 3280                       		move.w	d0,(a1)
0001BA96 5328 003E                  		subq.b	#1,$3E(a0)
0001BA9A 6600                       		bne.s	locret_18A44
0001BA9C 117C 000F 0020             		move.b	#$F,obColType(a0)
0001BAA2                            
0001BAA2                            locret_18A44:
0001BAA2 4E75                       		rts	
0001BAA4                            ; ===========================================================================
0001BAA4                            
0001BAA4                            loc_18A46:
0001BAA4 7064                       		moveq	#100,d0
0001BAA6 6100 0000                  		bsr.w	AddPoints
0001BAAA 117C 0006 0025             		move.b	#6,ob2ndRout(a0)
0001BAB0 117C 0078 003C             		move.b	#$78,$3C(a0)
0001BAB6 4268 0010                  		clr.w	obVelX(a0)
0001BABA 4E75                       		rts	
0001BABC                            ; ===========================================================================
0001BABC                            
0001BABC                            loc_18A5E:
0001BABC 3028 0030                  		move.w	$30(a0),d0
0001BAC0 317C 0200 0010             		move.w	#$200,obVelX(a0)
0001BAC6 0828 0000 0022             		btst	#0,obStatus(a0)
0001BACC 6600                       		bne.s	loc_18A7C
0001BACE 4468 0010                  		neg.w	obVelX(a0)
0001BAD2 0C40 2008                  		cmpi.w	#$2008,d0
0001BAD6 6E00                       		bgt.s	loc_18A88
0001BAD8 6000                       		bra.s	loc_18A82
0001BADA                            ; ===========================================================================
0001BADA                            
0001BADA                            loc_18A7C:
0001BADA 0C40 2138                  		cmpi.w	#$2138,d0
0001BADE 6D00                       		blt.s	loc_18A88
0001BAE0                            
0001BAE0                            loc_18A82:
0001BAE0 0868 0000 0022             		bchg	#0,obStatus(a0)
0001BAE6                            
0001BAE6                            loc_18A88:
0001BAE6 3028 0008                  		move.w	8(a0),d0
0001BAEA 72FF                       		moveq	#-1,d1
0001BAEC 7402                       		moveq	#2,d2
0001BAEE 45E8 002A                  		lea	$2A(a0),a2
0001BAF2 7828                       		moveq	#$28,d4
0001BAF4 4A68 0010                  		tst.w	obVelX(a0)
0001BAF8 6A00                       		bpl.s	loc_18A9E
0001BAFA 4444                       		neg.w	d4
0001BAFC                            
0001BAFC                            loc_18A9E:
0001BAFC 321A                       		move.w	(a2)+,d1
0001BAFE 2641                       		movea.l	d1,a3
0001BB00 082B 0003 0022             		btst	#3,obStatus(a3)
0001BB06 6600                       		bne.s	loc_18AB4
0001BB08 362B 0008                  		move.w	8(a3),d3
0001BB0C D644                       		add.w	d4,d3
0001BB0E 9640                       		sub.w	d0,d3
0001BB10 6700                       		beq.s	loc_18AC0
0001BB12                            
0001BB12                            loc_18AB4:
0001BB12 51CA FFE8                  		dbf	d2,loc_18A9E
0001BB16                            
0001BB16 1142 0028                  		move.b	d2,obSubtype(a0)
0001BB1A 6000 FF0C                  		bra.w	loc_189CA
0001BB1E                            ; ===========================================================================
0001BB1E                            
0001BB1E                            loc_18AC0:
0001BB1E 1142 0028                  		move.b	d2,obSubtype(a0)
0001BB22 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BB26 117C 0028 003C             		move.b	#$28,$3C(a0)
0001BB2C 6000 FEFA                  		bra.w	loc_189CA
0001BB30                            ; ===========================================================================
0001BB30                            
0001BB30                            Obj7A_MakeBall:
0001BB30 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
0001BB36 6600                       		bne.s	loc_18B36
0001BB38 70FF                       		moveq	#-1,d0
0001BB3A 1028 0028                  		move.b	obSubtype(a0),d0
0001BB3E 4880                       		ext.w	d0
0001BB40 6B00                       		bmi.s	loc_18B40
0001BB42 5540                       		subq.w	#2,d0
0001BB44 4440                       		neg.w	d0
0001BB46 D040                       		add.w	d0,d0
0001BB48 43E8 002A                  		lea	$2A(a0),a1
0001BB4C 3031 0000                  		move.w	(a1,d0.w),d0
0001BB50 2440                       		movea.l	d0,a2
0001BB52 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001BB56 723E                       		moveq	#$3E,d1
0001BB58                            
0001BB58                            loc_18AFA:
0001BB58 B0A9 003C                  		cmp.l	$3C(a1),d0
0001BB5C 6700                       		beq.s	loc_18B40
0001BB5E D2FC 0040                  		adda.w	#$40,a1
0001BB62 51C9 FFF4                  		dbf	d1,loc_18AFA
0001BB66                            
0001BB66 2F08                       		move.l	a0,-(sp)
0001BB68 41D2                       		lea	(a2),a0
0001BB6A 4EB9 0000 FD2E             		jsr	(FindNextFreeObj).l
0001BB70 205F                       		movea.l	(sp)+,a0
0001BB72 6600                       		bne.s	loc_18B40
0001BB74 12BC 007B                  		move.b	#id_BossSpikeball,(a1) ; load spiked ball object
0001BB78 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001BB7E 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001BB84 0669 0020 000C             		addi.w	#$20,obY(a1)
0001BB8A 136A 0022 0022             		move.b	obStatus(a2),obStatus(a1)
0001BB90 234A 003C                  		move.l	a2,$3C(a1)
0001BB94                            
0001BB94                            loc_18B36:
0001BB94 5328 003C                  		subq.b	#1,$3C(a0)
0001BB98 6700                       		beq.s	loc_18B40
0001BB9A 6000 FEC0                  		bra.w	loc_189FE
0001BB9E                            ; ===========================================================================
0001BB9E                            
0001BB9E                            loc_18B40:
0001BB9E 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001BBA2 6000 FE84                  		bra.w	loc_189CA
0001BBA6                            ; ===========================================================================
0001BBA6                            
0001BBA6                            loc_18B48:
0001BBA6 5328 003C                  		subq.b	#1,$3C(a0)
0001BBAA 6B00                       		bmi.s	loc_18B52
0001BBAC 6000 ECDE                  		bra.w	BossDefeated
0001BBB0                            ; ===========================================================================
0001BBB0                            
0001BBB0                            loc_18B52:
0001BBB0 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BBB4 4268 0012                  		clr.w	obVelY(a0)
0001BBB8 08E8 0000 0022             		bset	#0,obStatus(a0)
0001BBBE 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001BBC4 4268 0010                  		clr.w	obVelX(a0)
0001BBC8 117C 00E8 003C             		move.b	#-$18,$3C(a0)
0001BBCE 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001BBD2 6600                       		bne.s	loc_18B7C
0001BBD4 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001BBDA                            
0001BBDA                            loc_18B7C:
0001BBDA 6000 FE80                  		bra.w	loc_189FE
0001BBDE                            ; ===========================================================================
0001BBDE                            
0001BBDE                            loc_18B80:
0001BBDE 5228 003C                  		addq.b	#1,$3C(a0)
0001BBE2 6700                       		beq.s	loc_18B90
0001BBE4 6A00                       		bpl.s	loc_18B96
0001BBE6 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001BBEC 6000                       		bra.s	loc_18BC2
0001BBEE                            ; ===========================================================================
0001BBEE                            
0001BBEE                            loc_18B90:
0001BBEE 4268 0012                  		clr.w	obVelY(a0)
0001BBF2 6000                       		bra.s	loc_18BC2
0001BBF4                            ; ===========================================================================
0001BBF4                            
0001BBF4                            loc_18B96:
0001BBF4 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
0001BBFA 6500                       		bcs.s	loc_18BAE
0001BBFC 6700                       		beq.s	loc_18BB4
0001BBFE 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
0001BC04 6500                       		bcs.s	loc_18BC2
0001BC06 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BC0A 6000                       		bra.s	loc_18BC2
0001BC0C                            ; ===========================================================================
0001BC0C                            
0001BC0C                            loc_18BAE:
0001BC0C 5168 0012                  		subq.w	#8,obVelY(a0)
0001BC10 6000                       		bra.s	loc_18BC2
0001BC12                            ; ===========================================================================
0001BC12                            
0001BC12                            loc_18BB4:
0001BC12 4268 0012                          	clr.w    obVelY(a0)
0001BC16 4A38 FE2D                          	tst.b     (v_invinc).w
0001BC1A 6600                               	bne.s   @boss_invinc
0001BC1C                            
0001BC1C 1038 F5C6                          	move.b   (v_Saved_music),d0
0001BC20 6000 0000                          	bra.w      @boss_play
0001BC24                            
0001BC24                            	@boss_invinc:
0001BC24 103C 0000                          	move.b #bgm_Invincible,d0
0001BC28                            
0001BC28                            	@boss_play:
0001BC28 4EB8 124A                          	jsr PlaySound
0001BC2C                            
0001BC2C                            loc_18BC2:
0001BC2C 6000 FE1E                  		bra.w	loc_189EE
0001BC30                            ; ===========================================================================
0001BC30                            
0001BC30                            loc_18BC6:
0001BC30 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001BC36 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001BC3C 0C78 2160 F72A             		cmpi.w	#$2160,(v_limitright2).w
0001BC42 6400                       		bcc.s	loc_18BE0
0001BC44 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001BC48 6000                       		bra.s	loc_18BE8
0001BC4A                            ; ===========================================================================
0001BC4A                            
0001BC4A                            loc_18BE0:
0001BC4A 4A28 0001                  		tst.b	obRender(a0)
0001BC4E 6A00 FCBE                  		bpl.w	Obj7A_Delete
0001BC52                            
0001BC52                            loc_18BE8:
0001BC52 6100 EC7A                  		bsr.w	BossMove
0001BC56 6000 FDD0                  		bra.w	loc_189CA
0001BC5A                            ; ===========================================================================
0001BC5A                            
0001BC5A                            Obj7A_FaceMain:	; Routine 4
0001BC5A 7000                       		moveq	#0,d0
0001BC5C 7201                       		moveq	#1,d1
0001BC5E 2268 0034                  		movea.l	$34(a0),a1
0001BC62 1029 0025                  		move.b	ob2ndRout(a1),d0
0001BC66 0C00 0006                  		cmpi.b	#6,d0
0001BC6A 6B00                       		bmi.s	loc_18C06
0001BC6C 720A                       		moveq	#$A,d1
0001BC6E 6000                       		bra.s	loc_18C1A
0001BC70                            ; ===========================================================================
0001BC70                            
0001BC70                            loc_18C06:
0001BC70 4A29 0020                  		tst.b	obColType(a1)
0001BC74 6600                       		bne.s	loc_18C10
0001BC76 7205                       		moveq	#5,d1
0001BC78 6000                       		bra.s	loc_18C1A
0001BC7A                            ; ===========================================================================
0001BC7A                            
0001BC7A                            loc_18C10:
0001BC7A 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001BC80 6500                       		bcs.s	loc_18C1A
0001BC82 7204                       		moveq	#4,d1
0001BC84                            
0001BC84                            loc_18C1A:
0001BC84 1141 001C                  		move.b	d1,obAnim(a0)
0001BC88 0C00 000A                  		cmpi.b	#$A,d0
0001BC8C 6600                       		bne.s	loc_18C32
0001BC8E 117C 0006 001C             		move.b	#6,obAnim(a0)
0001BC94 4A28 0001                  		tst.b	obRender(a0)
0001BC98 6A00 FC74                  		bpl.w	Obj7A_Delete
0001BC9C                            
0001BC9C                            loc_18C32:
0001BC9C 6000                       		bra.s	loc_18C6C
0001BC9E                            ; ===========================================================================
0001BC9E                            
0001BC9E                            Obj7A_FlameMain:; Routine 6
0001BC9E 117C 0008 001C             		move.b	#8,obAnim(a0)
0001BCA4 2268 0034                  		movea.l	$34(a0),a1
0001BCA8 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001BCAE 6600                       		bne.s	loc_18C56
0001BCB0 4A28 0001                  		tst.b	obRender(a0)
0001BCB4 6A00 FC58                  		bpl.w	Obj7A_Delete
0001BCB8 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001BCBE 6000                       		bra.s	loc_18C6C
0001BCC0                            ; ===========================================================================
0001BCC0                            
0001BCC0                            loc_18C56:
0001BCC0 0C29 0008 0025             		cmpi.b	#8,ob2ndRout(a1)
0001BCC6 6E00                       		bgt.s	loc_18C6C
0001BCC8 0C29 0004 0025             		cmpi.b	#4,ob2ndRout(a1)
0001BCCE 6D00                       		blt.s	loc_18C6C
0001BCD0 117C 0007 001C             		move.b	#7,obAnim(a0)
0001BCD6                            
0001BCD6                            loc_18C6C:
0001BCD6 43F9 0001 ACE2             		lea	(Ani_Eggman).l,a1
0001BCDC 4EB9 0000 C938             		jsr	(AnimateSprite).l
0001BCE2                            
0001BCE2                            loc_18C78:
0001BCE2 2268 0034                  		movea.l	$34(a0),a1
0001BCE6 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001BCEC 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001BCF2 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001BCF8 7003                       		moveq	#3,d0
0001BCFA C028 0022                  		and.b	obStatus(a0),d0
0001BCFE 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001BD04 8128 0001                  		or.b	d0,obRender(a0)
0001BD08 4EF9 0000 F88C             		jmp	(DisplaySprite).l
0001BD0E                            ; ===========================================================================
0001BD0E                            
0001BD0E                            Obj7A_TubeMain:	; Routine 8
0001BD0E 2268 0034                  		movea.l	$34(a0),a1
0001BD12 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001BD18 6600                       		bne.s	loc_18CB8
0001BD1A 4A28 0001                  		tst.b	obRender(a0)
0001BD1E 6A00 FBEE                  		bpl.w	Obj7A_Delete
0001BD22                            
0001BD22                            loc_18CB8:
0001BD22 217C 0001 AE22 0004        		move.l	#Map_BossItems,obMap(a0)
0001BD2A 317C 246C 0002             		move.w	#$246C,obGfx(a0)
0001BD30 117C 0003 001A             		move.b	#3,obFrame(a0)
0001BD36 60AA                       		bra.s	loc_18C78
0001BD36 60AA                       		bra.s	loc_18C78
0001BD38                            		include	"_incObj\7B SLZ Boss Spikeball.asm"
0001BD38                            ; ---------------------------------------------------------------------------
0001BD38                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
0001BD38                            ; ---------------------------------------------------------------------------
0001BD38                            
0001BD38                            BossSpikeball:
0001BD38 7000                       		moveq	#0,d0
0001BD3A 1028 0024                  		move.b	obRoutine(a0),d0
0001BD3E 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
0001BD42 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
0001BD46 3028 0030                  		move.w	$30(a0),d0
0001BD4A 0240 FF80                  		andi.w	#$FF80,d0
0001BD4E 3238 F700                  		move.w	(v_screenposx).w,d1
0001BD52 0441 0080                  		subi.w	#$80,d1
0001BD56 0241 FF80                  		andi.w	#$FF80,d1
0001BD5A 9041                       		sub.w	d1,d0
0001BD5C 6B00 FBB0                  		bmi.w	Obj7A_Delete
0001BD60 0C40 0280                  		cmpi.w	#$280,d0
0001BD64 6200 FBA8                  		bhi.w	Obj7A_Delete
0001BD68 4EF9 0000 F88C             		jmp	(DisplaySprite).l
0001BD6E                            ; ===========================================================================
0001BD6E 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
0001BD70 0000                       		dc.w Obj7B_Fall-Obj7B_Index
0001BD72 0000                       		dc.w loc_18DC6-Obj7B_Index
0001BD74 0000                       		dc.w loc_18EAA-Obj7B_Index
0001BD76 0000                       		dc.w Obj7B_Explode-Obj7B_Index
0001BD78 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
0001BD7A                            ; ===========================================================================
0001BD7A                            
0001BD7A                            Obj7B_Main:	; Routine 0
0001BD7A 217C 0001 3D00 0004        		move.l	#Map_SSawBall,obMap(a0)
0001BD82 317C 0518 0002             		move.w	#$518,obGfx(a0)
0001BD88 117C 0001 001A             		move.b	#1,obFrame(a0)
0001BD8E 0028 0004 0001             		ori.b	#4,obRender(a0)
0001BD94 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001BD9A 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001BDA0 117C 000C 0014             		move.b	#$C,obActWid(a0)
0001BDA6 2268 003C                  		movea.l	$3C(a0),a1
0001BDAA 3169 0008 0030             		move.w	obX(a1),$30(a0)
0001BDB0 3169 000C 0034             		move.w	obY(a1),$34(a0)
0001BDB6 08E8 0000 0022             		bset	#0,obStatus(a0)
0001BDBC 3028 0008                  		move.w	obX(a0),d0
0001BDC0 B069 0008                  		cmp.w	obX(a1),d0
0001BDC4 6E00                       		bgt.s	loc_18D68
0001BDC6 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001BDCC 117C 0002 003A             		move.b	#2,$3A(a0)
0001BDD2                            
0001BDD2                            loc_18D68:
0001BDD2 5428 0024                  		addq.b	#2,obRoutine(a0)
0001BDD6                            
0001BDD6                            Obj7B_Fall:	; Routine 2
0001BDD6 4EB9 0000 F840             		jsr	(ObjectFall).l
0001BDDC 2268 003C                  		movea.l	$3C(a0),a1
0001BDE0 45F9 0000 0000             		lea	(word_19018).l,a2
0001BDE6 7000                       		moveq	#0,d0
0001BDE8 1029 001A                  		move.b	obFrame(a1),d0
0001BDEC 3228 0008                  		move.w	8(a0),d1
0001BDF0 9268 0030                  		sub.w	$30(a0),d1
0001BDF4 6400                       		bcc.s	loc_18D8E
0001BDF6 5440                       		addq.w	#2,d0
0001BDF8                            
0001BDF8                            loc_18D8E:
0001BDF8 D040                       		add.w	d0,d0
0001BDFA 3228 0034                  		move.w	$34(a0),d1
0001BDFE D272 0000                  		add.w	(a2,d0.w),d1
0001BE02 B268 000C                  		cmp.w	obY(a0),d1
0001BE06 6E00                       		bgt.s	locret_18DC4
0001BE08 2268 003C                  		movea.l	$3C(a0),a1
0001BE0C 7202                       		moveq	#2,d1
0001BE0E 0828 0000 0022             		btst	#0,obStatus(a0)
0001BE14 6700                       		beq.s	loc_18DAE
0001BE16 7200                       		moveq	#0,d1
0001BE18                            
0001BE18                            loc_18DAE:
0001BE18 317C 00F0 0028             		move.w	#$F0,obSubtype(a0)
0001BE1E 117C 000A 001F             		move.b	#10,obDelayAni(a0)	; set frame duration to	10 frames
0001BE24 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
0001BE2A 6000 0000                  		bra.w	loc_18FA2
0001BE2E                            ; ===========================================================================
0001BE2E                            
0001BE2E                            locret_18DC4:
0001BE2E 4E75                       		rts	
0001BE30                            ; ===========================================================================
0001BE30                            
0001BE30                            loc_18DC6:	; Routine 4
0001BE30 2268 003C                  		movea.l	$3C(a0),a1
0001BE34 7000                       		moveq	#0,d0
0001BE36 1028 003A                  		move.b	$3A(a0),d0
0001BE3A 9029 003A                  		sub.b	$3A(a1),d0
0001BE3E 6700                       		beq.s	loc_18E2A
0001BE40 6400                       		bcc.s	loc_18DDA
0001BE42 4400                       		neg.b	d0
0001BE44                            
0001BE44                            loc_18DDA:
0001BE44 323C F7E8                  		move.w	#-$818,d1
0001BE48 343C FEEC                  		move.w	#-$114,d2
0001BE4C 0C00 0001                  		cmpi.b	#1,d0
0001BE50 6700                       		beq.s	loc_18E00
0001BE52 323C F6A0                  		move.w	#-$960,d1
0001BE56 343C FF0C                  		move.w	#-$F4,d2
0001BE5A 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
0001BE60 6D00                       		blt.s	loc_18E00
0001BE62 323C F5E0                  		move.w	#-$A20,d1
0001BE66 343C FF80                  		move.w	#-$80,d2
0001BE6A                            
0001BE6A                            loc_18E00:
0001BE6A 3141 0012                  		move.w	d1,obVelY(a0)
0001BE6E 3142 0010                  		move.w	d2,obVelX(a0)
0001BE72 3028 0008                  		move.w	obX(a0),d0
0001BE76 9068 0030                  		sub.w	$30(a0),d0
0001BE7A 6400                       		bcc.s	loc_18E16
0001BE7C 4468 0010                  		neg.w	obVelX(a0)
0001BE80                            
0001BE80                            loc_18E16:
0001BE80 117C 0001 001A             		move.b	#1,obFrame(a0)
0001BE86 317C 0020 0028             		move.w	#$20,obSubtype(a0)
0001BE8C 5428 0024                  		addq.b	#2,obRoutine(a0)
0001BE90 6000 0000                  		bra.w	loc_18EAA
0001BE94                            ; ===========================================================================
0001BE94                            
0001BE94                            loc_18E2A:
0001BE94 45F9 0000 0000             		lea	(word_19018).l,a2
0001BE9A 7000                       		moveq	#0,d0
0001BE9C 1029 001A                  		move.b	obFrame(a1),d0
0001BEA0 343C 0028                  		move.w	#$28,d2
0001BEA4 3228 0008                  		move.w	obX(a0),d1
0001BEA8 9268 0030                  		sub.w	$30(a0),d1
0001BEAC 6400                       		bcc.s	loc_18E48
0001BEAE 4442                       		neg.w	d2
0001BEB0 5440                       		addq.w	#2,d0
0001BEB2                            
0001BEB2                            loc_18E48:
0001BEB2 D040                       		add.w	d0,d0
0001BEB4 3228 0034                  		move.w	$34(a0),d1
0001BEB8 D272 0000                  		add.w	(a2,d0.w),d1
0001BEBC 3141 000C                  		move.w	d1,obY(a0)
0001BEC0 D468 0030                  		add.w	$30(a0),d2
0001BEC4 3142 0008                  		move.w	d2,obX(a0)
0001BEC8 4268 000E                  		clr.w	obY+2(a0)
0001BECC 4268 000A                  		clr.w	obX+2(a0)
0001BED0 5368 0028                  		subq.w	#1,obSubtype(a0)
0001BED4 6600                       		bne.s	loc_18E7A
0001BED6 317C 0020 0028             		move.w	#$20,obSubtype(a0)
0001BEDC 117C 0008 0024             		move.b	#8,obRoutine(a0)
0001BEE2 4E75                       		rts	
0001BEE4                            ; ===========================================================================
0001BEE4                            
0001BEE4                            loc_18E7A:
0001BEE4 0C68 0078 0028             		cmpi.w	#$78,obSubtype(a0)
0001BEEA 6600                       		bne.s	loc_18E88
0001BEEC 117C 0005 001F             		move.b	#5,obDelayAni(a0)
0001BEF2                            
0001BEF2                            loc_18E88:
0001BEF2 0C68 003C 0028             		cmpi.w	#$3C,obSubtype(a0)
0001BEF8 6600                       		bne.s	loc_18E96
0001BEFA 117C 0002 001F             		move.b	#2,obDelayAni(a0)
0001BF00                            
0001BF00                            loc_18E96:
0001BF00 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0001BF04 6E00                       		bgt.s	locret_18EA8
0001BF06 0868 0000 001A             		bchg	#0,obFrame(a0)
0001BF0C 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
0001BF12                            
0001BF12                            locret_18EA8:
0001BF12 4E75                       		rts	
0001BF14                            ; ===========================================================================
0001BF14                            
0001BF14                            loc_18EAA:	; Routine 6
0001BF14 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001BF18 707A                       		moveq	#id_BossStarLight,d0
0001BF1A 7240                       		moveq	#$40,d1
0001BF1C 743E                       		moveq	#$3E,d2
0001BF1E                            
0001BF1E                            loc_18EB4:
0001BF1E B011                       		cmp.b	(a1),d0
0001BF20 6700                       		beq.s	loc_18EC0
0001BF22 D2C1                       		adda.w	d1,a1
0001BF24 51CA FFF8                  		dbf	d2,loc_18EB4
0001BF28                            
0001BF28 6000                       		bra.s	loc_18F38
0001BF2A                            ; ===========================================================================
0001BF2A                            
0001BF2A                            loc_18EC0:
0001BF2A 3029 0008                  		move.w	obX(a1),d0
0001BF2E 3229 000C                  		move.w	obY(a1),d1
0001BF32 3428 0008                  		move.w	obX(a0),d2
0001BF36 3628 000C                  		move.w	obY(a0),d3
0001BF3A 45FA 0000                  		lea	byte_19022(pc),a2
0001BF3E 47FA 0000                  		lea	byte_19026(pc),a3
0001BF42 181A                       		move.b	(a2)+,d4
0001BF44 4884                       		ext.w	d4
0001BF46 D044                       		add.w	d4,d0
0001BF48 181B                       		move.b	(a3)+,d4
0001BF4A 4884                       		ext.w	d4
0001BF4C D444                       		add.w	d4,d2
0001BF4E B440                       		cmp.w	d0,d2
0001BF50 6500                       		bcs.s	loc_18F38
0001BF52 181A                       		move.b	(a2)+,d4
0001BF54 4884                       		ext.w	d4
0001BF56 D044                       		add.w	d4,d0
0001BF58 181B                       		move.b	(a3)+,d4
0001BF5A 4884                       		ext.w	d4
0001BF5C D444                       		add.w	d4,d2
0001BF5E B042                       		cmp.w	d2,d0
0001BF60 6500                       		bcs.s	loc_18F38
0001BF62 181A                       		move.b	(a2)+,d4
0001BF64 4884                       		ext.w	d4
0001BF66 D244                       		add.w	d4,d1
0001BF68 181B                       		move.b	(a3)+,d4
0001BF6A 4884                       		ext.w	d4
0001BF6C D644                       		add.w	d4,d3
0001BF6E B641                       		cmp.w	d1,d3
0001BF70 6500                       		bcs.s	loc_18F38
0001BF72 181A                       		move.b	(a2)+,d4
0001BF74 4884                       		ext.w	d4
0001BF76 D244                       		add.w	d4,d1
0001BF78 181B                       		move.b	(a3)+,d4
0001BF7A 4884                       		ext.w	d4
0001BF7C D644                       		add.w	d4,d3
0001BF7E B243                       		cmp.w	d3,d1
0001BF80 6500                       		bcs.s	loc_18F38
0001BF82 5428 0024                  		addq.b	#2,obRoutine(a0)
0001BF86 4268 0028                  		clr.w	obSubtype(a0)
0001BF8A 4229 0020                  		clr.b	obColType(a1)
0001BF8E 5329 0021                  		subq.b	#1,obColProp(a1)
0001BF92 6600                       		bne.s	loc_18F38
0001BF94 08E9 0007 0022             		bset	#7,obStatus(a1)
0001BF9A 4268 0010                  		clr.w	obVelX(a0)
0001BF9E 4268 0012                  		clr.w	obVelY(a0)
0001BFA2                            
0001BFA2                            loc_18F38:
0001BFA2 4A68 0012                  		tst.w	obVelY(a0)
0001BFA6 6A00                       		bpl.s	loc_18F5C
0001BFA8 4EB9 0000 F840             		jsr	(ObjectFall).l
0001BFAE 3028 0034                  		move.w	$34(a0),d0
0001BFB2 0440 002F                  		subi.w	#$2F,d0
0001BFB6 B068 000C                  		cmp.w	obY(a0),d0
0001BFBA 6E00                       		bgt.s	loc_18F58
0001BFBC 4EB9 0000 F840             		jsr	(ObjectFall).l
0001BFC2                            
0001BFC2                            loc_18F58:
0001BFC2 6000 FF20                  		bra.w	loc_18E7A
0001BFC6                            ; ===========================================================================
0001BFC6                            
0001BFC6                            loc_18F5C:
0001BFC6 4EB9 0000 F840             		jsr	(ObjectFall).l
0001BFCC 2268 003C                  		movea.l	$3C(a0),a1
0001BFD0 45F9 0000 0000             		lea	(word_19018).l,a2
0001BFD6 7000                       		moveq	#0,d0
0001BFD8 1029 001A                  		move.b	obFrame(a1),d0
0001BFDC 3228 0008                  		move.w	obX(a0),d1
0001BFE0 9268 0030                  		sub.w	$30(a0),d1
0001BFE4 6400                       		bcc.s	loc_18F7E
0001BFE6 5440                       		addq.w	#2,d0
0001BFE8                            
0001BFE8                            loc_18F7E:
0001BFE8 D040                       		add.w	d0,d0
0001BFEA 3228 0034                  		move.w	$34(a0),d1
0001BFEE D272 0000                  		add.w	(a2,d0.w),d1
0001BFF2 B268 000C                  		cmp.w	obY(a0),d1
0001BFF6 6ECA                       		bgt.s	loc_18F58
0001BFF8 2268 003C                  		movea.l	$3C(a0),a1
0001BFFC 7202                       		moveq	#2,d1
0001BFFE 4A68 0010                  		tst.w	obVelX(a0)
0001C002 6B00                       		bmi.s	loc_18F9C
0001C004 7200                       		moveq	#0,d1
0001C006                            
0001C006                            loc_18F9C:
0001C006 317C 0000 0028             		move.w	#0,obSubtype(a0)
0001C00C                            
0001C00C                            loc_18FA2:
0001C00C 1341 003A                  		move.b	d1,$3A(a1)
0001C010 1141 003A                  		move.b	d1,$3A(a0)
0001C014 B229 001A                  		cmp.b	obFrame(a1),d1
0001C018 6700                       		beq.s	loc_19008
0001C01A 08A9 0003 0022             		bclr	#3,obStatus(a1)
0001C020 6700                       		beq.s	loc_19008
0001C022 4229 0025                  		clr.b	ob2ndRout(a1)
0001C026 137C 0002 0024             		move.b	#2,obRoutine(a1)
0001C02C 45F8 D000                  		lea	(v_objspace).w,a2
0001C030 3568 0012 0012             		move.w	obVelY(a0),obVelY(a2)
0001C036 446A 0012                  		neg.w	obVelY(a2)
0001C03A 0C29 0001 001A             		cmpi.b	#1,obFrame(a1)
0001C040 6600                       		bne.s	loc_18FDC
0001C042 E0EA 0012                  		asr	obVelY(a2)
0001C046                            
0001C046                            loc_18FDC:
0001C046 08EA 0001 0022             		bset	#1,obStatus(a2)
0001C04C 08AA 0003 0022             		bclr	#3,obStatus(a2)
0001C052 422A 003C                  		clr.b	$3C(a2)
0001C056 2F08                       		move.l	a0,-(sp)
0001C058 41D2                       		lea	(a2),a0
0001C05A 4EB9 0001 5EF6             		jsr	(Sonic_ChkRoll).l
0001C060 205F                       		movea.l	(sp)+,a0
0001C062 157C 0002 0024             		move.b	#2,obRoutine(a2)
0001C072                            
0001C072                            loc_19008:
0001C072 4268 0010                  		clr.w	obVelX(a0)
0001C076 4268 0012                  		clr.w	obVelY(a0)
0001C07A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001C07E 6000 FE64                  		bra.w	loc_18E7A
0001C082                            ; ===========================================================================
0001C082 FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w -8, -$1C, -$2F, -$1C, -8
0001C08C                            		even
0001C08C E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
0001C090                            		even
0001C090 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
0001C094                            		even
0001C094                            ; ===========================================================================
0001C094                            
0001C094                            Obj7B_Explode:	; Routine 8
0001C094 10BC 003F                  		move.b	#id_ExplosionBomb,(a0)
0001C098 4228 0024                  		clr.b	obRoutine(a0)
0001C09C 0C68 0020 0028             		cmpi.w	#$20,obSubtype(a0)
0001C0A2 6700                       		beq.s	Obj7B_MakeFrag
0001C0A4 4E75                       		rts	
0001C0A6                            ; ===========================================================================
0001C0A6                            
0001C0A6                            Obj7B_MakeFrag:
0001C0A6 3168 0034 000C             		move.w	$34(a0),obY(a0)
0001C0AC 7203                       		moveq	#3,d1
0001C0AE 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
0001C0B2                            
0001C0B2                            Obj7B_Loop:
0001C0B2 4EB9 0000 FD18             		jsr	(FindFreeObj).l
0001C0B8 6600                       		bne.s	loc_1909A
0001C0BA 12BC 007B                  		move.b	#id_BossSpikeball,(a1) ; load shrapnel object
0001C0BE 137C 000A 0024             		move.b	#$A,obRoutine(a1)
0001C0C4 237C 0000 0000 0004        		move.l	#Map_BSBall,obMap(a1)
0001C0CC 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001C0D2 337C 0518 0002             		move.w	#$518,obGfx(a1)
0001C0D8 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001C0DE 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001C0E4 335A 0010                  		move.w	(a2)+,obVelX(a1)
0001C0E8 335A 0012                  		move.w	(a2)+,obVelY(a1)
0001C0EC 137C 0098 0020             		move.b	#$98,obColType(a1)
0001C0F2 0029 0004 0001             		ori.b	#4,obRender(a1)
0001C0F8 08E9 0007 0001             		bset	#7,obRender(a1)
0001C0FE 137C 000C 0014             		move.b	#$C,obActWid(a1)
0001C104                            
0001C104                            loc_1909A:
0001C104 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
0001C108                            
0001C108 4E75                       		rts	
0001C10A                            ; ===========================================================================
0001C10A FF00 FCC0                  Obj7B_FragSpeed:dc.w -$100, -$340	; horizontal, vertical
0001C10E FF60 FDC0                  		dc.w -$A0, -$240
0001C112 0100 FCC0                  		dc.w $100, -$340
0001C116 00A0 FDC0                  		dc.w $A0, -$240
0001C11A                            ; ===========================================================================
0001C11A                            
0001C11A                            Obj7B_MoveFrag:	; Routine $A
0001C11A 4EB9 0000 F878             		jsr	(SpeedToPos).l
0001C120 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001C126 3168 000C 0034             		move.w	obY(a0),$34(a0)
0001C12C 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001C132 7004                       		moveq	#4,d0
0001C134 C078 FE0E                  		and.w	(v_vbla_word).w,d0
0001C138 E448                       		lsr.w	#2,d0
0001C13A 1140 001A                  		move.b	d0,obFrame(a0)
0001C13E 4A28 0001                  		tst.b	1(a0)
0001C142 6A00 F7CA                  		bpl.w	Obj7A_Delete
0001C146 4E75                       		rts	
0001C146 4E75                       		rts	
0001C148                            Map_BSBall:	include	"_maps\SLZ Boss Spikeball.asm"
0001C148                            ; ---------------------------------------------------------------------------
0001C148                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001C148                            ; ---------------------------------------------------------------------------
0001C148                            Map_BSBall_internal:
0001C148 0000                       		dc.w @fireball1-Map_BSBall_internal
0001C14A 0000                       		dc.w @fireball2-Map_BSBall_internal
0001C14C 01                         @fireball1:	dc.b 1
0001C14D FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001C152 01                         @fireball2:	dc.b 1
0001C153 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
0001C158                            		even
0001C158                            		even
0001C158                            		include	"_incObj\75 Boss - Spring Yard.asm"
0001C158                            ; ---------------------------------------------------------------------------
0001C158                            ; Object 75 - Eggman (SYZ)
0001C158                            ; ---------------------------------------------------------------------------
0001C158                            
0001C158                            BossSpringYard:
0001C158 7000                       		moveq	#0,d0
0001C15A 1028 0024                  		move.b	obRoutine(a0),d0
0001C15E 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
0001C162 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
0001C166                            ; ===========================================================================
0001C166 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
0001C168 0000                       		dc.w Obj75_ShipMain-Obj75_Index
0001C16A 0000                       		dc.w Obj75_FaceMain-Obj75_Index
0001C16C 0000                       		dc.w Obj75_FlameMain-Obj75_Index
0001C16E 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
0001C170                            
0001C170 0200 0280                  Obj75_ObjData:	dc.b 2,	0, $02, $80		; routine number, animation, priority (high and low bytes)
0001C174 0401 0280                  		dc.b 4,	1, $02, $80
0001C178 0607 0280                  		dc.b 6,	7, $02, $80
0001C17C 0800 0280                  		dc.b 8,	0, $02, $80
0001C180                            ; ===========================================================================
0001C180                            
0001C180                            Obj75_Main:	; Routine 0
0001C180 317C 2DB0 0008             		move.w	#$2DB0,obX(a0)
0001C186 317C 04DA 000C             		move.w	#$4DA,obY(a0)
0001C18C 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001C192 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001C198 117C 000F 0020             		move.b	#$F,obColType(a0)
0001C19E 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001C1A4 45FA FFCA                  		lea	Obj75_ObjData(pc),a2
0001C1A8 2248                       		movea.l	a0,a1
0001C1AA 7203                       		moveq	#3,d1
0001C1AC 6000                       		bra.s	Obj75_LoadBoss
0001C1AE                            ; ===========================================================================
0001C1AE                            
0001C1AE                            Obj75_Loop:
0001C1AE 4EB9 0000 FD2E             		jsr	(FindNextFreeObj).l
0001C1B4 6600                       		bne.s	Obj75_ShipMain
0001C1B6 12BC 0075                  		move.b	#id_BossSpringYard,(a1)
0001C1BA 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001C1C0 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001C1C6                            
0001C1C6                            Obj75_LoadBoss:
0001C1C6 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001C1CC 4229 0025                  		clr.b	ob2ndRout(a1)
0001C1D0 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001C1D4 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001C1D8 335A 0018                  		move.w	(a2)+,obPriority(a1)
0001C1DC 237C 0001 AD32 0004        		move.l	#Map_Eggman,obMap(a1)
0001C1E4 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001C1EA 137C 0004 0001             		move.b	#4,obRender(a1)
0001C1F0 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001C1F6 2348 0034                  		move.l	a0,$34(a1)
0001C1FA 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
0001C1FE                            
0001C1FE                            Obj75_ShipMain:	; Routine 2
0001C1FE 7000                       		moveq	#0,d0
0001C200 1028 0025                  		move.b	ob2ndRout(a0),d0
0001C204 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
0001C208 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
0001C20C 43F9 0001 ACE2             		lea	(Ani_Eggman).l,a1
0001C212 4EB9 0000 C938             		jsr	(AnimateSprite).l
0001C218 7003                       		moveq	#3,d0
0001C21A C028 0022                  		and.b	obStatus(a0),d0
0001C21E 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001C224 8128 0001                  		or.b	d0,obRender(a0)
0001C228 4EF9 0000 F88C             		jmp	(DisplaySprite).l
0001C22E                            ; ===========================================================================
0001C22E 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
0001C232 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
0001C236 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
0001C23A                            ; ===========================================================================
0001C23A                            
0001C23A                            loc_191CC:
0001C23A 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001C240 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
0001C246 6400                       		bcc.s	loc_191DE
0001C248 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C24C                            
0001C24C                            loc_191DE:
0001C24C 1028 003F                  		move.b	$3F(a0),d0
0001C250 5428 003F                  		addq.b	#2,$3F(a0)
0001C254 4EB9 0000 3A32             		jsr	(CalcSine).l
0001C25A E440                       		asr.w	#2,d0
0001C25C 3140 0012                  		move.w	d0,obVelY(a0)
0001C260                            
0001C260                            loc_191F2:
0001C260 6100 E66C                  		bsr.w	BossMove
0001C264 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001C26A 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001C270                            
0001C270                            loc_19202:
0001C270 3028 0008                  		move.w	8(a0),d0
0001C274 0440 2C00                  		subi.w	#$2C00,d0
0001C278 EA48                       		lsr.w	#5,d0
0001C27A 1140 0034                  		move.b	d0,$34(a0)
0001C27E 0C28 0006 0025             		cmpi.b	#6,ob2ndRout(a0)
0001C284 6400                       		bcc.s	locret_19256
0001C286 4A28 0022                  		tst.b	obStatus(a0)
0001C28A 6B00                       		bmi.s	loc_19258
0001C28C 4A28 0020                  		tst.b	obColType(a0)
0001C290 6600                       		bne.s	locret_19256
0001C292 4A28 003E                  		tst.b	$3E(a0)
0001C296 6600                       		bne.s	loc_1923A
0001C298 117C 0020 003E             		move.b	#$20,$3E(a0)
0001C2A8                            
0001C2A8                            loc_1923A:
0001C2A8 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001C2AC 7000                       		moveq	#0,d0
0001C2AE 4A51                       		tst.w	(a1)
0001C2B0 6600                       		bne.s	loc_19248
0001C2B2 303C 0EEE                  		move.w	#cWhite,d0
0001C2B6                            
0001C2B6                            loc_19248:
0001C2B6 3280                       		move.w	d0,(a1)
0001C2B8 5328 003E                  		subq.b	#1,$3E(a0)
0001C2BC 6600                       		bne.s	locret_19256
0001C2BE 117C 000F 0020             		move.b	#$F,obColType(a0)
0001C2C4                            
0001C2C4                            locret_19256:
0001C2C4 4E75                       		rts	
0001C2C6                            ; ===========================================================================
0001C2C6                            
0001C2C6                            loc_19258:
0001C2C6 7064                       		moveq	#100,d0
0001C2C8 6100 0000                  		bsr.w	AddPoints
0001C2CC 117C 0006 0025             		move.b	#6,ob2ndRout(a0)
0001C2D2 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001C2D8 4268 0010                  		clr.w	obVelX(a0)
0001C2DC 4E75                       		rts	
0001C2DE                            ; ===========================================================================
0001C2DE                            
0001C2DE                            loc_19270:
0001C2DE 3028 0030                  		move.w	$30(a0),d0
0001C2E2 317C 0140 0010             		move.w	#$140,obVelX(a0)
0001C2E8 0828 0000 0022             		btst	#0,obStatus(a0)
0001C2EE 6600                       		bne.s	loc_1928E
0001C2F0 4468 0010                  		neg.w	obVelX(a0)
0001C2F4 0C40 2C08                  		cmpi.w	#$2C08,d0
0001C2F8 6E00                       		bgt.s	loc_1929E
0001C2FA 6000                       		bra.s	loc_19294
0001C2FC                            ; ===========================================================================
0001C2FC                            
0001C2FC                            loc_1928E:
0001C2FC 0C40 2D38                  		cmpi.w	#$2D38,d0
0001C300 6D00                       		blt.s	loc_1929E
0001C302                            
0001C302                            loc_19294:
0001C302 0868 0000 0022             		bchg	#0,obStatus(a0)
0001C308 4228 003D                  		clr.b	$3D(a0)
0001C30C                            
0001C30C                            loc_1929E:
0001C30C 0440 2C10                  		subi.w	#$2C10,d0
0001C310 0240 001F                  		andi.w	#$1F,d0
0001C314 0440 001F                  		subi.w	#$1F,d0
0001C318 6A00                       		bpl.s	loc_192AE
0001C31A 4440                       		neg.w	d0
0001C31C                            
0001C31C                            loc_192AE:
0001C31C 5340                       		subq.w	#1,d0
0001C31E 6E00                       		bgt.s	loc_192E8
0001C320 4A28 003D                  		tst.b	$3D(a0)
0001C324 6600                       		bne.s	loc_192E8
0001C326 3238 D008                  		move.w	(v_player+obX).w,d1
0001C32A 0441 2C00                  		subi.w	#$2C00,d1
0001C32E EA41                       		asr.w	#5,d1
0001C330 B228 0034                  		cmp.b	$34(a0),d1
0001C334 6600                       		bne.s	loc_192E8
0001C336 7000                       		moveq	#0,d0
0001C338 1028 0034                  		move.b	$34(a0),d0
0001C33C EB40                       		asl.w	#5,d0
0001C33E 0640 2C10                  		addi.w	#$2C10,d0
0001C342 3140 0030                  		move.w	d0,$30(a0)
0001C346 6100 0000                  		bsr.w	Obj75_FindBlocks
0001C34A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C34E 4268 0028                  		clr.w	obSubtype(a0)
0001C352 4268 0010                  		clr.w	obVelX(a0)
0001C356                            
0001C356                            loc_192E8:
0001C356 6000 FEF4                  		bra.w	loc_191DE
0001C35A                            ; ===========================================================================
0001C35A                            
0001C35A                            loc_192EC:
0001C35A 7000                       		moveq	#0,d0
0001C35C 1028 0028                  		move.b	obSubtype(a0),d0
0001C360 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
0001C364 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
0001C368                            ; ===========================================================================
0001C368 0000                       off_192FA:	dc.w loc_19302-off_192FA
0001C36A 0000                       		dc.w loc_19348-off_192FA
0001C36C 0000                       		dc.w loc_1938E-off_192FA
0001C36E 0000                       		dc.w loc_193D0-off_192FA
0001C370                            ; ===========================================================================
0001C370                            
0001C370                            loc_19302:
0001C370 317C 0180 0012             		move.w	#$180,obVelY(a0)
0001C376 3028 0038                  		move.w	$38(a0),d0
0001C37A 0C40 0556                  		cmpi.w	#$556,d0
0001C37E 6500                       		bcs.s	loc_19344
0001C380 317C 0556 0038             		move.w	#$556,$38(a0)
0001C386 4268 003C                  		clr.w	$3C(a0)
0001C38A 70FF                       		moveq	#-1,d0
0001C38C 3028 0036                  		move.w	$36(a0),d0
0001C390 6700                       		beq.s	loc_1933C
0001C392 2240                       		movea.l	d0,a1
0001C394 137C 00FF 0029             		move.b	#-1,$29(a1)
0001C39A 117C 00FF 0029             		move.b	#-1,$29(a0)
0001C3A0 2348 0034                  		move.l	a0,$34(a1)
0001C3A4 317C 0032 003C             		move.w	#$32,$3C(a0)
0001C3AA                            
0001C3AA                            loc_1933C:
0001C3AA 4268 0012                  		clr.w	obVelY(a0)
0001C3AE 5428 0028                  		addq.b	#2,obSubtype(a0)
0001C3B2                            
0001C3B2                            loc_19344:
0001C3B2 6000 FEAC                  		bra.w	loc_191F2
0001C3B6                            ; ===========================================================================
0001C3B6                            
0001C3B6                            loc_19348:
0001C3B6 5368 003C                  		subq.w	#1,$3C(a0)
0001C3BA 6A00                       		bpl.s	loc_19366
0001C3BC 5428 0028                  		addq.b	#2,obSubtype(a0)
0001C3C0 317C F800 0012             		move.w	#-$800,obVelY(a0)
0001C3C6 4A68 0036                  		tst.w	$36(a0)
0001C3CA 6600                       		bne.s	loc_19362
0001C3CC E0E8 0012                  		asr	obVelY(a0)
0001C3D0                            
0001C3D0                            loc_19362:
0001C3D0 7000                       		moveq	#0,d0
0001C3D2 6000                       		bra.s	loc_1937C
0001C3D4                            ; ===========================================================================
0001C3D4                            
0001C3D4                            loc_19366:
0001C3D4 7000                       		moveq	#0,d0
0001C3D6 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
0001C3DC 6E00                       		bgt.s	loc_1937C
0001C3DE 7002                       		moveq	#2,d0
0001C3E0 0828 0001 003D             		btst	#1,$3D(a0)
0001C3E6 6700                       		beq.s	loc_1937C
0001C3E8 4440                       		neg.w	d0
0001C3EA                            
0001C3EA                            loc_1937C:
0001C3EA D068 0038                  		add.w	$38(a0),d0
0001C3EE 3140 000C                  		move.w	d0,obY(a0)
0001C3F2 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001C3F8 6000 FE76                  		bra.w	loc_19202
0001C3FC                            ; ===========================================================================
0001C3FC                            
0001C3FC                            loc_1938E:
0001C3FC 303C 04DA                  		move.w	#$4DA,d0
0001C400 4A68 0036                  		tst.w	$36(a0)
0001C404 6700                       		beq.s	loc_1939C
0001C406 0440 0018                  		subi.w	#$18,d0
0001C40A                            
0001C40A                            loc_1939C:
0001C40A B068 0038                  		cmp.w	$38(a0),d0
0001C40E 6D00                       		blt.s	loc_193BE
0001C410 317C 0008 003C             		move.w	#8,$3C(a0)
0001C416 4A68 0036                  		tst.w	$36(a0)
0001C41A 6700                       		beq.s	loc_193B4
0001C41C 317C 002D 003C             		move.w	#$2D,$3C(a0)
0001C422                            
0001C422                            loc_193B4:
0001C422 5428 0028                  		addq.b	#2,obSubtype(a0)
0001C426 4268 0012                  		clr.w	obVelY(a0)
0001C42A 6000                       		bra.s	loc_193CC
0001C42C                            ; ===========================================================================
0001C42C                            
0001C42C                            loc_193BE:
0001C42C 0C68 FFC0 0012             		cmpi.w	#-$40,obVelY(a0)
0001C432 6C00                       		bge.s	loc_193CC
0001C434 0668 000C 0012             		addi.w	#$C,obVelY(a0)
0001C43A                            
0001C43A                            loc_193CC:
0001C43A 6000 FE24                  		bra.w	loc_191F2
0001C43E                            ; ===========================================================================
0001C43E                            
0001C43E                            loc_193D0:
0001C43E 5368 003C                  		subq.w	#1,$3C(a0)
0001C442 6E00                       		bgt.s	loc_19406
0001C444 6B00                       		bmi.s	loc_193EE
0001C446 70FF                       		moveq	#-1,d0
0001C448 3028 0036                  		move.w	$36(a0),d0
0001C44C 6700                       		beq.s	loc_193E8
0001C44E 2240                       		movea.l	d0,a1
0001C450 137C 000A 0029             		move.b	#$A,$29(a1)
0001C456                            
0001C456                            loc_193E8:
0001C456 4268 0036                  		clr.w	$36(a0)
0001C45A 6000                       		bra.s	loc_19406
0001C45C                            ; ===========================================================================
0001C45C                            
0001C45C                            loc_193EE:
0001C45C 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
0001C462 6600                       		bne.s	loc_19406
0001C464 4228 0029                  		clr.b	$29(a0)
0001C468 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001C46C 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001C472 6000                       		bra.s	loc_19446
0001C474                            ; ===========================================================================
0001C474                            
0001C474                            loc_19406:
0001C474 7001                       		moveq	#1,d0
0001C476 4A68 0036                  		tst.w	$36(a0)
0001C47A 6700                       		beq.s	loc_19410
0001C47C 7002                       		moveq	#2,d0
0001C47E                            
0001C47E                            loc_19410:
0001C47E 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
0001C484 6700                       		beq.s	loc_19424
0001C486 6D00                       		blt.s	loc_1941C
0001C488 4440                       		neg.w	d0
0001C48A                            
0001C48A                            loc_1941C:
0001C48A 4A68 0036                  		tst.w	$36(a0)
0001C48E D168 0038                  		add.w	d0,$38(a0)
0001C492                            
0001C492                            loc_19424:
0001C492 7000                       		moveq	#0,d0
0001C494 4A68 0036                  		tst.w	$36(a0)
0001C498 6700                       		beq.s	loc_19438
0001C49A 7002                       		moveq	#2,d0
0001C49C 0828 0000 003D             		btst	#0,$3D(a0)
0001C4A2 6700                       		beq.s	loc_19438
0001C4A4 4440                       		neg.w	d0
0001C4A6                            
0001C4A6                            loc_19438:
0001C4A6 D068 0038                  		add.w	$38(a0),d0
0001C4AA 3140 000C                  		move.w	d0,obY(a0)
0001C4AE 3168 0030 0008             		move.w	$30(a0),8(a0)
0001C4B4                            
0001C4B4                            loc_19446:
0001C4B4 6000 FDBA                  		bra.w	loc_19202
0001C4B8                            
0001C4B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C4B8                            
0001C4B8                            
0001C4B8                            Obj75_FindBlocks:
0001C4B8 4268 0036                  		clr.w	$36(a0)
0001C4BC 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001C4C0 703E                       		moveq	#$3E,d0
0001C4C2 7276                       		moveq	#$76,d1
0001C4C4 1428 0034                  		move.b	$34(a0),d2
0001C4C8                            
0001C4C8                            Obj75_FindLoop:
0001C4C8 B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
0001C4CA 6600                       		bne.s	loc_1946A	; if not, branch
0001C4CC B429 0028                  		cmp.b	obSubtype(a1),d2
0001C4D0 6600                       		bne.s	loc_1946A
0001C4D2 3149 0036                  		move.w	a1,$36(a0)
0001C4D6 6000                       		bra.s	locret_19472
0001C4D8                            ; ===========================================================================
0001C4D8                            
0001C4D8                            loc_1946A:
0001C4D8 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
0001C4DC 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
0001C4E0                            
0001C4E0                            locret_19472:
0001C4E0 4E75                       		rts	
0001C4E2                            ; End of function Obj75_FindBlocks
0001C4E2                            
0001C4E2                            ; ===========================================================================
0001C4E2                            
0001C4E2                            loc_19474:
0001C4E2 5368 003C                  		subq.w	#1,$3C(a0)
0001C4E6 6B00                       		bmi.s	loc_1947E
0001C4E8 6000 E3A2                  		bra.w	BossDefeated
0001C4EC                            ; ===========================================================================
0001C4EC                            
0001C4EC                            loc_1947E:
0001C4EC 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C4F0 4268 0012                  		clr.w	obVelY(a0)
0001C4F4 08E8 0000 0022             		bset	#0,obStatus(a0)
0001C4FA 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001C500 4268 0010                  		clr.w	obVelX(a0)
0001C504 317C FFFF 003C             		move.w	#-1,$3C(a0)
0001C50A 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001C50E 6600                       		bne.s	loc_194A8
0001C510 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001C516                            
0001C516                            loc_194A8:
0001C516 6000 FD58                  		bra.w	loc_19202
0001C51A                            ; ===========================================================================
0001C51A                            
0001C51A                            loc_194AC:
0001C51A 5268 003C                  		addq.w	#1,$3C(a0)
0001C51E 6700                       		beq.s	loc_194BC
0001C520 6A00                       		bpl.s	loc_194C2
0001C522 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001C528 6000                       		bra.s	loc_194EE
0001C52A                            ; ===========================================================================
0001C52A                            
0001C52A                            loc_194BC:
0001C52A 4268 0012                  		clr.w	obVelY(a0)
0001C52E 6000                       		bra.s	loc_194EE
0001C530                            ; ===========================================================================
0001C530                            
0001C530                            loc_194C2:
0001C530 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
0001C536 6500                       		bcs.s	loc_194DA
0001C538 6700                       		beq.s	loc_194E0
0001C53A 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
0001C540 6500                       		bcs.s	loc_194EE
0001C542 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C546 6000                       		bra.s	loc_194EE
0001C548                            ; ===========================================================================
0001C548                            
0001C548                            loc_194DA:
0001C548 5168 0012                  		subq.w	#8,obVelY(a0)
0001C54C 6000                       		bra.s	loc_194EE
0001C54E                            ; ===========================================================================
0001C54E                            
0001C54E                            loc_194E0:
0001C54E 4268 0012                  		clr.w    obVelY(a0)
0001C552 4A38 FE2D                          	tst.b     (v_invinc).w
0001C556 6600                               	bne.s   @boss_invinc
0001C558                            
0001C558 1038 F5C6                          	move.b   (v_Saved_music),d0
0001C55C 6000 0000                          	bra.w      @boss_play
0001C560                            
0001C560                            @boss_invinc:
0001C560 103C 0000                          	move.b #bgm_Invincible,d0
0001C564                            
0001C564                            @boss_play:
0001C564 4EB8 124A                          	jsr PlaySound
0001C568                            
0001C568                            loc_194EE:
0001C568 6000 FCF6                  		bra.w	loc_191F2
0001C56C                            ; ===========================================================================
0001C56C                            
0001C56C                            loc_194F2:
0001C56C 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001C572 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001C578 0C78 2D40 F72A             		cmpi.w	#$2D40,(v_limitright2).w
0001C57E 6400                       		bcc.s	loc_1950C
0001C580 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001C584 6000                       		bra.s	loc_19512
0001C586                            ; ===========================================================================
0001C586                            
0001C586                            loc_1950C:
0001C586 4A28 0001                  		tst.b	obRender(a0)
0001C58A 6A00                       		bpl.s	Obj75_ShipDelete
0001C58C                            
0001C58C                            loc_19512:
0001C58C 6100 E340                  		bsr.w	BossMove
0001C590 6000 FCBA                  		bra.w	loc_191DE
0001C594                            ; ===========================================================================
0001C594                            
0001C594                            Obj75_ShipDelete:
0001C594 4EF9 0000 F8CC             		jmp	(DeleteObject).l
0001C59A                            ; ===========================================================================
0001C59A                            
0001C59A                            Obj75_FaceMain:	; Routine 4
0001C59A 7201                       		moveq	#1,d1
0001C59C 2268 0034                  		movea.l	$34(a0),a1
0001C5A0 7000                       		moveq	#0,d0
0001C5A2 1029 0025                  		move.b	ob2ndRout(a1),d0
0001C5A6 303B 0000                  		move.w	off_19546(pc,d0.w),d0
0001C5AA 4EBB 0000                  		jsr	off_19546(pc,d0.w)
0001C5AE 1141 001C                  		move.b	d1,obAnim(a0)
0001C5B2 1010                       		move.b	(a0),d0
0001C5B4 B011                       		cmp.b	(a1),d0
0001C5B6 6600                       		bne.s	Obj75_FaceDelete
0001C5B8 6000                       		bra.s	loc_195BE
0001C5BA                            ; ===========================================================================
0001C5BA                            
0001C5BA                            Obj75_FaceDelete:
0001C5BA 4EF9 0000 F8CC             		jmp	(DeleteObject).l
0001C5C0                            ; ===========================================================================
0001C5C0 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
0001C5C4 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
0001C5C8 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
0001C5CC                            ; ===========================================================================
0001C5CC                            
0001C5CC                            loc_19552:
0001C5CC 720A                       		moveq	#$A,d1
0001C5CE 4E75                       		rts	
0001C5D0                            ; ===========================================================================
0001C5D0                            
0001C5D0                            loc_19556:
0001C5D0 7206                       		moveq	#6,d1
0001C5D2 4E75                       		rts	
0001C5D4                            ; ===========================================================================
0001C5D4                            
0001C5D4                            loc_1955A:
0001C5D4 7000                       		moveq	#0,d0
0001C5D6 1029 0028                  		move.b	obSubtype(a1),d0
0001C5DA 303B 0000                  		move.w	off_19568(pc,d0.w),d0
0001C5DE 4EFB 0000                  		jmp	off_19568(pc,d0.w)
0001C5E2                            ; ===========================================================================
0001C5E2 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
0001C5E6 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
0001C5EA                            ; ===========================================================================
0001C5EA                            
0001C5EA                            loc_19570:
0001C5EA 6000                       		bra.s	loc_19574
0001C5EC                            ; ===========================================================================
0001C5EC                            
0001C5EC                            loc_19572:
0001C5EC 7206                       		moveq	#6,d1
0001C5EE                            
0001C5EE                            loc_19574:
0001C5EE 4A29 0020                  		tst.b	obColType(a1)
0001C5F2 6600                       		bne.s	loc_1957E
0001C5F4 7205                       		moveq	#5,d1
0001C5F6 4E75                       		rts	
0001C5F8                            ; ===========================================================================
0001C5F8                            
0001C5F8                            loc_1957E:
0001C5F8 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001C5FE 6500                       		bcs.s	locret_19588
0001C600 7204                       		moveq	#4,d1
0001C602                            
0001C602                            locret_19588:
0001C602 4E75                       		rts	
0001C604                            ; ===========================================================================
0001C604                            
0001C604                            Obj75_FlameMain:; Routine 6
0001C604 117C 0007 001C             		move.b	#7,obAnim(a0)
0001C60A 2268 0034                  		movea.l	$34(a0),a1
0001C60E 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001C614 6600                       		bne.s	loc_195AA
0001C616 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001C61C 4A28 0001                  		tst.b	1(a0)
0001C620 6A00                       		bpl.s	Obj75_FlameDelete
0001C622 6000                       		bra.s	loc_195B6
0001C624                            ; ===========================================================================
0001C624                            
0001C624                            loc_195AA:
0001C624 4A69 0010                  		tst.w	obVelX(a1)
0001C628 6700                       		beq.s	loc_195B6
0001C62A 117C 0008 001C             		move.b	#8,obAnim(a0)
0001C630                            
0001C630                            loc_195B6:
0001C630 6000                       		bra.s	loc_195BE
0001C632                            ; ===========================================================================
0001C632                            
0001C632                            Obj75_FlameDelete:
0001C632 4EF9 0000 F8CC             		jmp	(DeleteObject).l
0001C638                            ; ===========================================================================
0001C638                            
0001C638                            loc_195BE:
0001C638 43F9 0001 ACE2             		lea	(Ani_Eggman).l,a1
0001C63E 4EB9 0000 C938             		jsr	(AnimateSprite).l
0001C644 2268 0034                  		movea.l	$34(a0),a1
0001C648 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001C64E 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001C654                            
0001C654                            loc_195DA:
0001C654 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001C65A 7003                       		moveq	#3,d0
0001C65C C028 0022                  		and.b	obStatus(a0),d0
0001C660 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001C666 8128 0001                  		or.b	d0,obRender(a0)
0001C66A 4EF9 0000 F88C             		jmp	(DisplaySprite).l
0001C670                            ; ===========================================================================
0001C670                            
0001C670                            Obj75_SpikeMain:; Routine 8
0001C670 217C 0001 AE22 0004        		move.l	#Map_BossItems,obMap(a0)
0001C678 317C 246C 0002             		move.w	#$246C,obGfx(a0)
0001C67E 117C 0005 001A             		move.b	#5,obFrame(a0)
0001C684 2268 0034                  		movea.l	$34(a0),a1
0001C688 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001C68E 6600                       		bne.s	loc_1961C
0001C690 4A28 0001                  		tst.b	obRender(a0)
0001C694 6A00                       		bpl.s	Obj75_SpikeDelete
0001C696                            
0001C696                            loc_1961C:
0001C696 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001C69C 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001C6A2 3028 003C                  		move.w	$3C(a0),d0
0001C6A6 0C29 0004 0025             		cmpi.b	#4,ob2ndRout(a1)
0001C6AC 6600                       		bne.s	loc_19652
0001C6AE 0C29 0006 0028             		cmpi.b	#6,obSubtype(a1)
0001C6B4 6700                       		beq.s	loc_1964C
0001C6B6 4A29 0028                  		tst.b	obSubtype(a1)
0001C6BA 6600                       		bne.s	loc_19658
0001C6BC 0C40 0094                  		cmpi.w	#$94,d0
0001C6C0 6C00                       		bge.s	loc_19658
0001C6C2 5E40                       		addq.w	#7,d0
0001C6C4 6000                       		bra.s	loc_19658
0001C6C6                            ; ===========================================================================
0001C6C6                            
0001C6C6                            loc_1964C:
0001C6C6 4A69 003C                  		tst.w	$3C(a1)
0001C6CA 6A00                       		bpl.s	loc_19658
0001C6CC                            
0001C6CC                            loc_19652:
0001C6CC 4A40                       		tst.w	d0
0001C6CE 6F00                       		ble.s	loc_19658
0001C6D0 5B40                       		subq.w	#5,d0
0001C6D2                            
0001C6D2                            loc_19658:
0001C6D2 3140 003C                  		move.w	d0,$3C(a0)
0001C6D6 E440                       		asr.w	#2,d0
0001C6D8 D168 000C                  		add.w	d0,obY(a0)
0001C6DC 117C 0008 0014             		move.b	#8,obActWid(a0)
0001C6E2 117C 000C 0016             		move.b	#$C,obHeight(a0)
0001C6E8 4228 0020                  		clr.b	obColType(a0)
0001C6EC 2268 0034                  		movea.l	$34(a0),a1
0001C6F0 4A29 0020                  		tst.b	obColType(a1)
0001C6F4 6700                       		beq.s	loc_19688
0001C6F6 4A29 0029                  		tst.b	$29(a1)
0001C6FA 6600                       		bne.s	loc_19688
0001C6FC 117C 0084 0020             		move.b	#$84,obColType(a0)
0001C702                            
0001C702                            loc_19688:
0001C702 6000 FF50                  		bra.w	loc_195DA
0001C706                            ; ===========================================================================
0001C706                            
0001C706                            Obj75_SpikeDelete:
0001C706 4EF9 0000 F8CC             		jmp	(DeleteObject).l
0001C706 4EF9 0000 F8CC             		jmp	(DeleteObject).l
0001C70C                            		include	"_incObj\76 SYZ Boss Blocks.asm"
0001C70C                            ; ---------------------------------------------------------------------------
0001C70C                            ; Object 76 - blocks that Eggman picks up (SYZ)
0001C70C                            ; ---------------------------------------------------------------------------
0001C70C                            
0001C70C                            BossBlock:
0001C70C 7000                       		moveq	#0,d0
0001C70E 1028 0024                  		move.b	obRoutine(a0),d0
0001C712 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
0001C716 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
0001C71A                            ; ===========================================================================
0001C71A 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
0001C71C 0000                       		dc.w Obj76_Action-Obj76_Index
0001C71E 0000                       		dc.w loc_19762-Obj76_Index
0001C720                            ; ===========================================================================
0001C720                            
0001C720                            Obj76_Main:	; Routine 0
0001C720 7800                       		moveq	#0,d4
0001C722 3A3C 2C10                  		move.w	#$2C10,d5
0001C726 7C09                       		moveq	#9,d6
0001C728 43D0                       		lea	(a0),a1
0001C72A 6000                       		bra.s	Obj76_MakeBlock
0001C72C                            ; ===========================================================================
0001C72C                            
0001C72C                            Obj76_Loop:
0001C72C 4EB9 0000 FD18             		jsr	(FindFreeObj).l
0001C732 6600                       		bne.s	Obj76_ExitLoop
0001C734                            
0001C734                            Obj76_MakeBlock:
0001C734 12BC 0076                  		move.b	#id_BossBlock,(a1)
0001C738 237C 0000 0000 0004        		move.l	#Map_BossBlock,obMap(a1)
0001C740 337C 4000 0002             		move.w	#$4000,obGfx(a1)
0001C746 137C 0004 0001             		move.b	#4,obRender(a1)
0001C74C 137C 0010 0014             		move.b	#$10,obActWid(a1)
0001C752 137C 0010 0016             		move.b	#$10,obHeight(a1)
0001C758 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001C75E 3345 0008                  		move.w	d5,obX(a1)	; set x-position
0001C762 337C 0582 000C             		move.w	#$582,obY(a1)
0001C768 3344 0028                  		move.w	d4,obSubtype(a1)
0001C76C 0644 0101                  		addi.w	#$101,d4
0001C770 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
0001C774 5429 0024                  		addq.b	#2,obRoutine(a1)
0001C778 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
0001C77C                            
0001C77C                            Obj76_ExitLoop:
0001C77C 4E75                       		rts	
0001C77E                            ; ===========================================================================
0001C77E                            
0001C77E                            Obj76_Action:	; Routine 2
0001C77E 1028 0029                  		move.b	$29(a0),d0
0001C782 B028 0028                  		cmp.b	obSubtype(a0),d0
0001C786 6700                       		beq.s	Obj76_Solid
0001C788 4A00                       		tst.b	d0
0001C78A 6B00                       		bmi.s	loc_19718
0001C78C                            
0001C78C                            loc_19712:
0001C78C 6100 0000                  		bsr.w	Obj76_Break
0001C790 6000                       		bra.s	Obj76_Display
0001C792                            ; ===========================================================================
0001C792                            
0001C792                            loc_19718:
0001C792 2268 0034                  		movea.l	$34(a0),a1
0001C796 4A29 0021                  		tst.b	obColProp(a1)
0001C79A 67F0                       		beq.s	loc_19712
0001C79C 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001C7A2 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001C7A8 0668 002C 000C             		addi.w	#$2C,obY(a0)
0001C7AE B2C8                       		cmpa.w	a0,a1
0001C7B0 6500                       		bcs.s	Obj76_Display
0001C7B2 3029 0012                  		move.w	obVelY(a1),d0
0001C7B6 48C0                       		ext.l	d0
0001C7B8 E080                       		asr.l	#8,d0
0001C7BA D168 000C                  		add.w	d0,obY(a0)
0001C7BE 6000                       		bra.s	Obj76_Display
0001C7C0                            ; ===========================================================================
0001C7C0                            
0001C7C0                            Obj76_Solid:
0001C7C0 323C 001B                  		move.w	#$1B,d1
0001C7C4 343C 0010                  		move.w	#$10,d2
0001C7C8 363C 0011                  		move.w	#$11,d3
0001C7CC 3828 0008                  		move.w	obX(a0),d4
0001C7D0 4EB9 0001 1C9A             		jsr	(SolidObject).l
0001C7D6                            
0001C7D6                            Obj76_Display:
0001C7D6 4EF9 0000 F88C             		jmp	(DisplaySprite).l
0001C7DC                            ; ===========================================================================
0001C7DC                            
0001C7DC                            loc_19762:	; Routine 4
0001C7DC 4A28 0001                  		tst.b	obRender(a0)
0001C7E0 6A00                       		bpl.s	Obj76_Delete
0001C7E2 4EB9 0000 F840             		jsr	(ObjectFall).l
0001C7E8 4EF9 0000 F88C             		jmp	(DisplaySprite).l
0001C7EE                            ; ===========================================================================
0001C7EE                            
0001C7EE                            Obj76_Delete:
0001C7EE 4EF9 0000 F8CC             		jmp	(DeleteObject).l
0001C7F4                            
0001C7F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C7F4                            
0001C7F4                            
0001C7F4                            Obj76_Break:
0001C7F4 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
0001C7F8 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0001C7FC 7801                       		moveq	#1,d4
0001C7FE 7203                       		moveq	#3,d1
0001C800 7438                       		moveq	#$38,d2
0001C802 5428 0024                  		addq.b	#2,obRoutine(a0)
0001C806 117C 0008 0014             		move.b	#8,obActWid(a0)
0001C80C 117C 0008 0016             		move.b	#8,obHeight(a0)
0001C812 43D0                       		lea	(a0),a1
0001C814 6000                       		bra.s	Obj76_MakeFrag
0001C816                            ; ===========================================================================
0001C816                            
0001C816                            Obj76_LoopFrag:
0001C816 4EB9 0000 FD2E             		jsr	(FindNextFreeObj).l
0001C81C 6600                       		bne.s	loc_197D4
0001C81E                            
0001C81E                            Obj76_MakeFrag:
0001C81E 45D0                       		lea	(a0),a2
0001C820 47D1                       		lea	(a1),a3
0001C822 7603                       		moveq	#3,d3
0001C824                            
0001C824                            loc_197AA:
0001C824 26DA                       		move.l	(a2)+,(a3)+
0001C826 26DA                       		move.l	(a2)+,(a3)+
0001C828 26DA                       		move.l	(a2)+,(a3)+
0001C82A 26DA                       		move.l	(a2)+,(a3)+
0001C82C 51CB FFF6                  		dbf	d3,loc_197AA
0001C830                            
0001C830 335C 0010                  		move.w	(a4)+,obVelX(a1)
0001C834 335C 0012                  		move.w	(a4)+,obVelY(a1)
0001C838 361D                       		move.w	(a5)+,d3
0001C83A D769 0008                  		add.w	d3,obX(a1)
0001C83E 361D                       		move.w	(a5)+,d3
0001C840 D769 000C                  		add.w	d3,obY(a1)
0001C844 1344 001A                  		move.b	d4,obFrame(a1)
0001C848 5244                       		addq.w	#1,d4
0001C84A 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001C84E                            
0001C84E                            loc_197D4:
0001C858                            ; End of function Obj76_Break
0001C858                            
0001C858                            ; ===========================================================================
0001C858 FE80 FE00                  Obj76_FragSpeed:dc.w -$180, -$200
0001C85C 0180 FE00                  		dc.w $180, -$200
0001C860 FF00 FF00                  		dc.w -$100, -$100
0001C864 0100 FF00                  		dc.w $100, -$100
0001C868 FFF8 FFF8                  Obj76_FragPos:	dc.w -8, -8
0001C86C 0010 0000                  		dc.w $10, 0
0001C870 0000 0010                  		dc.w 0,	$10
0001C874 0010 0010                  		dc.w $10, $10
0001C874 0010 0010                  		dc.w $10, $10
0001C878                            Map_BossBlock:	include	"_maps\SYZ Boss Blocks.asm"
0001C878                            ; ---------------------------------------------------------------------------
0001C878                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001C878                            ; ---------------------------------------------------------------------------
0001C878                            Map_BossBlock_internal:
0001C878 0000                       		dc.w @wholeblock-Map_BossBlock_internal
0001C87A 0000                       		dc.w @topleft-Map_BossBlock_internal
0001C87C 0000                       		dc.w @topright-Map_BossBlock_internal
0001C87E 0000                       		dc.w @bottomleft-Map_BossBlock_internal
0001C880 0000                       		dc.w @bottomright-Map_BossBlock_internal
0001C882 02                         @wholeblock:	dc.b 2
0001C883 F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001C888 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001C88D 00                         		dc.b 0
0001C88E 01                         @topleft:	dc.b 1
0001C88F F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001C894 01                         @topright:	dc.b 1
0001C895 F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001C89A 01                         @bottomleft:	dc.b 1
0001C89B F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001C8A0 01                         @bottomright:	dc.b 1
0001C8A1 F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001C8A6                            		even
0001C8A6                            		even
0001C8A6                            
0001C8A6                            loc_1982C:
0001C8A6 4EF9 0000 F8CC             		jmp	(DeleteObject).l
0001C8AC                            
0001C8AC                            		include	"_incObj\82 Eggman - Scrap Brain 2.asm"
0001C8AC                            ; ---------------------------------------------------------------------------
0001C8AC                            ; Object 82 - Eggman (SBZ2)
0001C8AC                            ; ---------------------------------------------------------------------------
0001C8AC                            
0001C8AC                            ScrapEggman:
0001C8AC 7000                       		moveq	#0,d0
0001C8AE 1028 0024                  		move.b	obRoutine(a0),d0
0001C8B2 323B 0000                  		move.w	SEgg_Index(pc,d0.w),d1
0001C8B6 4EFB 1000                  		jmp	SEgg_Index(pc,d1.w)
0001C8BA                            ; ===========================================================================
0001C8BA 0000                       SEgg_Index:	dc.w SEgg_Main-SEgg_Index
0001C8BC 0000                       		dc.w SEgg_Eggman-SEgg_Index
0001C8BE 0000                       		dc.w SEgg_Switch-SEgg_Index
0001C8C0                            
0001C8C0 0200 03                    SEgg_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001C8C3 0400 03                    		dc.b 4,	0, 3
0001C8C6                            ; ===========================================================================
0001C8C6                            
0001C8C6                            SEgg_Main:	; Routine 0
0001C8C6 45FA FFF8                  		lea	SEgg_ObjData(pc),a2
0001C8CA 317C 2160 0008             		move.w	#$2160,obX(a0)
0001C8D0 317C 05A4 000C             		move.w	#$5A4,obY(a0)
0001C8D6 117C 000F 0020             		move.b	#$F,obColType(a0)
0001C8DC 117C 0010 0021             		move.b	#$10,obColProp(a0)
0001C8E2 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001C8E8 4228 0025                  		clr.b	ob2ndRout(a0)
0001C8EC 115A 0024                  		move.b	(a2)+,obRoutine(a0)
0001C8F0 115A 001C                  		move.b	(a2)+,obAnim(a0)
0001C8F4 115A 0018                  		move.b	(a2)+,obPriority(a0)
0001C8F8 217C 0000 0000 0004        		move.l	#Map_SEgg,obMap(a0)
0001C900 317C 0400 0002             		move.w	#$400,obGfx(a0)
0001C906 117C 0004 0001             		move.b	#4,obRender(a0)
0001C90C 08E8 0007 0001             		bset	#7,obRender(a0)
0001C912 117C 0020 0014             		move.b	#$20,obActWid(a0)
0001C918 4EB9 0000 FD2E             		jsr	(FindNextFreeObj).l
0001C91E 6600                       		bne.s	SEgg_Eggman
0001C920 2348 0034                  		move.l	a0,$34(a1)
0001C924 12BC 0082                  		move.b	#id_ScrapEggman,(a1) ; load switch object
0001C928 337C 2130 0008             		move.w	#$2130,obX(a1)
0001C92E 337C 05BC 000C             		move.w	#$5BC,obY(a1)
0001C934 4228 0025                  		clr.b	ob2ndRout(a0)
0001C938 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001C93C 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001C940 135A 0018                  		move.b	(a2)+,obPriority(a1)
0001C944 237C 0000 E0BA 0004        		move.l	#Map_But,obMap(a1)
0001C94C 337C 04A4 0002             		move.w	#$4A4,obGfx(a1)
0001C952 137C 0004 0001             		move.b	#4,obRender(a1)
0001C958 08E9 0007 0001             		bset	#7,obRender(a1)
0001C95E 137C 0010 0014             		move.b	#$10,obActWid(a1)
0001C964 137C 0000 001A             		move.b	#0,obFrame(a1)
0001C96A                            
0001C96A                            SEgg_Eggman:	; Routine 2
0001C96A 7000                       		moveq	#0,d0
0001C96C 1028 0025                  		move.b	ob2ndRout(a0),d0
0001C970 323B 0000                  		move.w	SEgg_EggIndex(pc,d0.w),d1
0001C974 4EBB 1000                  		jsr	SEgg_EggIndex(pc,d1.w)
0001C978 43FA 0000                  		lea	Ani_SEgg(pc),a1
0001C97C 4EB9 0000 C938             		jsr	(AnimateSprite).l
0001C982 4EF9 0000 F88C             		jmp	(DisplaySprite).l
0001C988                            ; ===========================================================================
0001C988 0000                       SEgg_EggIndex:	dc.w SEgg_ChkSonic-SEgg_EggIndex
0001C98A 0000                       		dc.w SEgg_PreLeap-SEgg_EggIndex
0001C98C 0000                       		dc.w SEgg_Leap-SEgg_EggIndex
0001C98E 0000                       		dc.w loc_19934-SEgg_EggIndex
0001C990                            ; ===========================================================================
0001C990                            
0001C990                            SEgg_ChkSonic:
0001C990 3028 0008                  		move.w	obX(a0),d0
0001C994 9078 D008                  		sub.w	(v_player+obX).w,d0
0001C998 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001C99C 6400                       		bcc.s	loc_19934	; if not, branch
0001C99E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C9A2 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001C9A8 117C 0001 001C             		move.b	#1,obAnim(a0)
0001C9AE                            
0001C9AE                            loc_19934:
0001C9AE 4EF9 0000 F878             		jmp	(SpeedToPos).l
0001C9B4                            ; ===========================================================================
0001C9B4                            
0001C9B4                            SEgg_PreLeap:
0001C9B4 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001C9B8 6600                       		bne.s	loc_19954	; if time remains, branch
0001C9BA 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C9BE 117C 0002 001C             		move.b	#2,obAnim(a0)
0001C9C4 5868 000C                  		addq.w	#4,obY(a0)
0001C9C8 317C 000F 003C             		move.w	#15,$3C(a0)
0001C9CE                            
0001C9CE                            loc_19954:
0001C9CE 60DE                       		bra.s	loc_19934
0001C9D0                            ; ===========================================================================
0001C9D0                            
0001C9D0                            SEgg_Leap:
0001C9D0 5368 003C                  		subq.w	#1,$3C(a0)
0001C9D4 6E00                       		bgt.s	loc_199D0
0001C9D6 6600                       		bne.s	loc_1996A
0001C9D8 317C FF04 0010             		move.w	#-$FC,obVelX(a0) ; make Eggman leap
0001C9DE 317C FC40 0012             		move.w	#-$3C0,obVelY(a0)
0001C9E4                            
0001C9E4                            loc_1996A:
0001C9E4 0C68 2132 0008             		cmpi.w	#$2132,obX(a0)
0001C9EA 6E00                       		bgt.s	loc_19976
0001C9EC 4268 0010                  		clr.w	obVelX(a0)
0001C9F0                            
0001C9F0                            loc_19976:
0001C9F0 0668 0024 0012             		addi.w	#$24,obVelY(a0)
0001C9F6 4A68 0012                  		tst.w	obVelY(a0)
0001C9FA 6B00                       		bmi.s	SEgg_FindBlocks
0001C9FC 0C68 0595 000C             		cmpi.w	#$595,obY(a0)
0001CA02 6500                       		bcs.s	SEgg_FindBlocks
0001CA04 317C 5357 0028             		move.w	#$5357,obSubtype(a0)
0001CA0A 0C68 059B 000C             		cmpi.w	#$59B,obY(a0)
0001CA10 6500                       		bcs.s	SEgg_FindBlocks
0001CA12 317C 059B 000C             		move.w	#$59B,obY(a0)
0001CA18 4268 0012                  		clr.w	obVelY(a0)
0001CA1C                            
0001CA1C                            SEgg_FindBlocks:
0001CA1C 3028 0010                  		move.w	obVelX(a0),d0
0001CA20 8068 0012                  		or.w	obVelY(a0),d0
0001CA24 6600                       		bne.s	loc_199D0
0001CA26 43F8 D000                  		lea	(v_objspace).w,a1 ; start at the first object RAM
0001CA2A 703E                       		moveq	#$3E,d0
0001CA2C 7240                       		moveq	#$40,d1
0001CA2E                            
0001CA2E                            SEgg_FindLoop:	
0001CA2E D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001CA30 0C11 0083                  		cmpi.b	#id_FalseFloor,(a1) ; is object a block? (object $83)
0001CA34 57C8 FFF8                  		dbeq	d0,SEgg_FindLoop ; if not, repeat (max	$3E times)
0001CA38                            
0001CA38 6600                       		bne.s	loc_199D0
0001CA3A 337C 474F 0028             		move.w	#$474F,obSubtype(a1) ; set block to disintegrate
0001CA40 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001CA44 117C 0001 001C             		move.b	#1,obAnim(a0)
0001CA4A                            
0001CA4A                            loc_199D0:
0001CA4A 6000 FF62                  		bra.w	loc_19934
0001CA4E                            ; ===========================================================================
0001CA4E                            
0001CA4E                            SEgg_Switch:	; Routine 4
0001CA4E 7000                       		moveq	#0,d0
0001CA50 1028 0025                  		move.b	ob2ndRout(a0),d0
0001CA54 303B 0000                  		move.w	SEgg_SwIndex(pc,d0.w),d0
0001CA58 4EFB 0000                  		jmp	SEgg_SwIndex(pc,d0.w)
0001CA5C                            ; ===========================================================================
0001CA5C 0000                       SEgg_SwIndex:	dc.w loc_199E6-SEgg_SwIndex
0001CA5E 0000                       		dc.w SEgg_SwDisplay-SEgg_SwIndex
0001CA60                            ; ===========================================================================
0001CA60                            
0001CA60                            loc_199E6:
0001CA60 2268 0034                  		movea.l	$34(a0),a1
0001CA64 0C69 5357 0028             		cmpi.w	#$5357,obSubtype(a1)
0001CA6A 6600                       		bne.s	SEgg_SwDisplay
0001CA6C 117C 0001 001A             		move.b	#1,obFrame(a0)
0001CA72 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001CA76                            
0001CA76                            SEgg_SwDisplay:
0001CA76 4EF9 0000 F88C             		jmp	(DisplaySprite).l
0001CA76 4EF9 0000 F88C             		jmp	(DisplaySprite).l
0001CA7C                            		include	"_anim\Eggman - Scrap Brain 2 & Final.asm"
0001CA7C                            ; ---------------------------------------------------------------------------
0001CA7C                            ; Animation script - Eggman (SBZ2)
0001CA7C                            ; ---------------------------------------------------------------------------
0001CA7C 0000                       Ani_SEgg:	dc.w @stand-Ani_SEgg
0001CA7E 0000                       		dc.w @laugh-Ani_SEgg
0001CA80 0000                       		dc.w @jump1-Ani_SEgg
0001CA82 0000                       		dc.w @intube-Ani_SEgg
0001CA84 0000                       		dc.w @running-Ani_SEgg
0001CA86 0000                       		dc.w @jump2-Ani_SEgg
0001CA88 0000                       		dc.w @starjump-Ani_SEgg
0001CA8A 7E00 FF                    @stand:		dc.b $7E, 0, afEnd
0001CA8E 00                         		even
0001CA8E 0601 02FF                  @laugh:		dc.b 6,	1, 2, afEnd
0001CA92 0E03 0404 0000 00FF        @jump1:		dc.b $E, 3, 4, 4, 0, 0,	0, afEnd
0001CA9A 0005 09FF                  @intube:	dc.b 0,	5, 9, afEnd
0001CA9E 0607 0408 04FF             @running:	dc.b 6,	7, 4, 8, 4, afEnd
0001CAA4 0F04 0303 FF               @jump2:		dc.b $F, 4, 3, 3, afEnd
0001CAAA 00                         		even
0001CAAA 7E06 FF                    @starjump:	dc.b $7E, 6, afEnd
0001CAAE 00                         		even
0001CAAE 00                         		even
0001CAAE                            Map_SEgg:	include	"_maps\Eggman - Scrap Brain 2.asm"
0001CAAE                            ; ---------------------------------------------------------------------------
0001CAAE                            ; Sprite mappings - Eggman (SBZ2)
0001CAAE                            ; ---------------------------------------------------------------------------
0001CAAE                            Map_SEgg_internal:
0001CAAE 0000                       		dc.w @stand-Map_SEgg_internal
0001CAB0 0000                       		dc.w @laugh1-Map_SEgg_internal
0001CAB2 0000                       		dc.w @laugh2-Map_SEgg_internal
0001CAB4 0000                       		dc.w @jump1-Map_SEgg_internal
0001CAB6 0000                       		dc.w @jump2-Map_SEgg_internal
0001CAB8 0000                       		dc.w @surprise-Map_SEgg_internal
0001CABA 0000                       		dc.w @starjump-Map_SEgg_internal
0001CABC 0000                       		dc.w @running1-Map_SEgg_internal
0001CABE 0000                       		dc.w @running2-Map_SEgg_internal
0001CAC0 0000                       		dc.w @intube-Map_SEgg_internal
0001CAC2 0000                       		dc.w @cockpit-Map_SEgg_internal
0001CAC4 03                         @stand:		dc.b 3
0001CAC5 FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
0001CACA E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001CACF 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001CAD4 04                         @laugh1:	dc.b 4
0001CAD5 E80D 000E F0               		dc.b $E8, $D, 0, $E, $F0
0001CADA E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001CADF 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001CAE4 FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
0001CAE9 00                         		dc.b 0
0001CAEA 04                         @laugh2:	dc.b 4
0001CAEB E90D 000E F0               		dc.b $E9, $D, 0, $E, $F0
0001CAF0 E90E 0000 F0               		dc.b $E9, $E, 0, 0, $F0
0001CAF5 010F 007F F0               		dc.b 1,	$F, 0, $7F, $F0
0001CAFA FD00 008F E8               		dc.b $FD, 0, 0,	$8F, $E8
0001CAFF 00                         		dc.b 0
0001CB00 04                         @jump1:		dc.b 4
0001CB01 F40F 0820 F0               		dc.b $F4, $F, 8, $20, $F0
0001CB06 F504 0830 10               		dc.b $F5, 4, 8,	$30, $10
0001CB0B 0809 084E F0               		dc.b 8,	9, 8, $4E, $F0
0001CB10 EC0E 0000 F0               		dc.b $EC, $E, 0, 0, $F0
0001CB15 00                         		dc.b 0
0001CB16 04                         @jump2:		dc.b 4
0001CB17 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001CB1C F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
0001CB21 0806 083E F8               		dc.b 8,	6, 8, $3E, $F8
0001CB26 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001CB2B 00                         		dc.b 0
0001CB2C 04                         @surprise:	dc.b 4
0001CB2D E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001CB32 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001CB37 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001CB3C 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001CB41 00                         		dc.b 0
0001CB42 07                         @starjump:	dc.b 7
0001CB43 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001CB48 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001CB4D 0409 0834 00               		dc.b 4,	9, 8, $34, 0
0001CB52 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
0001CB57 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001CB5C F104 0854 10               		dc.b $F1, 4, 8,	$54, $10
0001CB61 F104 0054 E0               		dc.b $F1, 4, 0,	$54, $E0
0001CB66 05                         @running1:	dc.b 5
0001CB67 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001CB6C F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
0001CB71 0409 0834 00               		dc.b 4,	9, 8, $34, 0
0001CB76 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
0001CB7B E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001CB80 06                         @running2:	dc.b 6
0001CB81 EE0F 0820 F0               		dc.b $EE, $F, 8, $20, $F0
0001CB86 EF04 0830 10               		dc.b $EF, 4, 8,	$30, $10
0001CB8B 0905 0844 00               		dc.b 9,	5, 8, $44, 0
0001CB90 0301 0848 F8               		dc.b 3,	1, 8, $48, $F8
0001CB95 0B05 084A E8               		dc.b $B, 5, 8, $4A, $E8
0001CB9A E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0001CB9F 00                         		dc.b 0
0001CBA0 08                         @intube:	dc.b 8
0001CBA1 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC ; Eggman inside tube in Final Zone
0001CBA6 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001CBAB E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001CBB0 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001CBB5 E00D 3EF0 F0               		dc.b $E0, $D, $3E, $F0,	$F0
0001CBBA F00D 3EF0 F0               		dc.b $F0, $D, $3E, $F0,	$F0
0001CBBF 000D 3EF0 F0               		dc.b 0,	$D, $3E, $F0, $F0
0001CBC4 100D 3EF0 F0               		dc.b $10, $D, $3E, $F0,	$F0
0001CBC9 03                         @cockpit:	dc.b 3
0001CBCA EC0D 0056 E4               		dc.b $EC, $D, 0, $56, $E4 ; empty cockpit of Eggmobile in Final Zone
0001CBCF F408 005E 04               		dc.b $F4, 8, 0,	$5E, 4
0001CBD4 EC0D 0061 FC               		dc.b $EC, $D, 0, $61, $FC
0001CBDA 00                         		even
0001CBDA 00                         		even
0001CBDA                            		include	"_incObj\83 SBZ Eggman's Crumbling Floor.asm"
0001CBDA                            ; ---------------------------------------------------------------------------
0001CBDA                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001CBDA                            ; ---------------------------------------------------------------------------
0001CBDA                            
0001CBDA                            FalseFloor:
0001CBDA 7000                       		moveq	#0,d0
0001CBDC 1028 0024                  		move.b	obRoutine(a0),d0
0001CBE0 323B 0000                  		move.w	FFloor_Index(pc,d0.w),d1
0001CBE4 4EFB 1000                  		jmp	FFloor_Index(pc,d1.w)
0001CBE8                            ; ===========================================================================
0001CBE8 0000                       FFloor_Index:	dc.w FFloor_Main-FFloor_Index
0001CBEA 0000                       		dc.w FFloor_ChkBreak-FFloor_Index
0001CBEC 0000                       		dc.w loc_19C36-FFloor_Index
0001CBEE 0000                       		dc.w loc_19C62-FFloor_Index
0001CBF0 0000                       		dc.w loc_19C72-FFloor_Index
0001CBF2 0000                       		dc.w loc_19C80-FFloor_Index
0001CBF4                            ; ===========================================================================
0001CBF4                            
0001CBF4                            FFloor_Main:	; Routine 0
0001CBF4 317C 2080 0008             		move.w	#$2080,obX(a0)
0001CBFA 317C 05D0 000C             		move.w	#$5D0,obY(a0)
0001CC00 117C 0080 0014             		move.b	#$80,obActWid(a0)
0001CC06 117C 0010 0016             		move.b	#$10,obHeight(a0)
0001CC0C 117C 0004 0001             		move.b	#4,obRender(a0)
0001CC12 08E8 0007 0001             		bset	#7,obRender(a0)
0001CC18 7800                       		moveq	#0,d4
0001CC1A 3A3C 2010                  		move.w	#$2010,d5
0001CC1E 7C07                       		moveq	#7,d6
0001CC20 45E8 0030                  		lea	$30(a0),a2
0001CC24                            
0001CC24                            FFloor_MakeBlock:
0001CC24 4EB9 0000 FD18             		jsr	(FindFreeObj).l
0001CC2A 6600                       		bne.s	FFloor_ExitMake
0001CC2C 34C9                       		move.w	a1,(a2)+
0001CC2E 12BC 0083                  		move.b	#id_FalseFloor,(a1) ; load block object
0001CC32 237C 0000 0000 0004        		move.l	#Map_FFloor,obMap(a1)
0001CC3A 337C 4518 0002             		move.w	#$4518,obGfx(a1)
0001CC40 137C 0004 0001             		move.b	#4,obRender(a1)
0001CC46 137C 0010 0014             		move.b	#$10,obActWid(a1)
0001CC4C 137C 0010 0016             		move.b	#$10,obHeight(a1)
0001CC52 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001CC58 3345 0008                  		move.w	d5,obX(a1)	; set X	position
0001CC5C 337C 05D0 000C             		move.w	#$5D0,obY(a1)
0001CC62 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001CC66 137C 0008 0024             		move.b	#8,obRoutine(a1)
0001CC6C 51CE FFB6                  		dbf	d6,FFloor_MakeBlock ; repeat sequence 7 more times
0001CC70                            
0001CC70                            FFloor_ExitMake:
0001CC70 5428 0024                  		addq.b	#2,obRoutine(a0)
0001CC74 4E75                       		rts	
0001CC76                            ; ===========================================================================
0001CC76                            
0001CC76                            FFloor_ChkBreak:; Routine 2
0001CC76 0C68 474F 0028             		cmpi.w	#$474F,obSubtype(a0) ; is object set to disintegrate?
0001CC7C 6600                       		bne.s	FFloor_Solid	; if not, branch
0001CC7E 4228 001A                  		clr.b	obFrame(a0)
0001CC82 5428 0024                  		addq.b	#2,obRoutine(a0) ; next subroutine
0001CC86                            
0001CC86                            FFloor_Solid:
0001CC86 7000                       		moveq	#0,d0
0001CC88 1028 001A                  		move.b	obFrame(a0),d0
0001CC8C 4400                       		neg.b	d0
0001CC8E 4880                       		ext.w	d0
0001CC90 5040                       		addq.w	#8,d0
0001CC92 E940                       		asl.w	#4,d0
0001CC94 383C 2100                  		move.w	#$2100,d4
0001CC98 9840                       		sub.w	d0,d4
0001CC9A 1140 0014                  		move.b	d0,obActWid(a0)
0001CC9E 3144 0008                  		move.w	d4,obX(a0)
0001CCA2 720B                       		moveq	#$B,d1
0001CCA4 D240                       		add.w	d0,d1
0001CCA6 7410                       		moveq	#$10,d2
0001CCA8 7611                       		moveq	#$11,d3
0001CCAA 4EF9 0001 1C9A             		jmp	(SolidObject).l
0001CCB0                            ; ===========================================================================
0001CCB0                            
0001CCB0                            loc_19C36:	; Routine 4
0001CCB0 0428 000E 001E             		subi.b	#$E,obTimeFrame(a0)
0001CCB6 6400                       		bcc.s	FFloor_Solid2
0001CCB8 70FF                       		moveq	#-1,d0
0001CCBA 1028 001A                  		move.b	obFrame(a0),d0
0001CCBE 4880                       		ext.w	d0
0001CCC0 D040                       		add.w	d0,d0
0001CCC2 3030 0030                  		move.w	$30(a0,d0.w),d0
0001CCC6 2240                       		movea.l	d0,a1
0001CCC8 337C 474F 0028             		move.w	#$474F,obSubtype(a1)
0001CCCE 5228 001A                  		addq.b	#1,obFrame(a0)
0001CCD2 0C28 0008 001A             		cmpi.b	#8,obFrame(a0)
0001CCD8 6700                       		beq.s	loc_19C62
0001CCDA                            
0001CCDA                            FFloor_Solid2:
0001CCDA 60AA                       		bra.s	FFloor_Solid
0001CCDC                            ; ===========================================================================
0001CCDC                            
0001CCDC                            loc_19C62:	; Routine 6
0001CCDC 08A8 0003 0022             		bclr	#3,obStatus(a0)
0001CCE2 08B8 0003 D022             		bclr	#3,(v_player+obStatus).w
0001CCE8 6000 FBBC                  		bra.w	loc_1982C
0001CCEC                            ; ===========================================================================
0001CCEC                            
0001CCEC                            loc_19C72:	; Routine 8
0001CCEC 0C68 474F 0028             		cmpi.w	#$474F,obSubtype(a0) ; is object set to disintegrate?
0001CCF2 6700                       		beq.s	FFloor_Break	; if yes, branch
0001CCF4 4EF9 0000 F88C             		jmp	(DisplaySprite).l
0001CCFA                            ; ===========================================================================
0001CCFA                            
0001CCFA                            loc_19C80:	; Routine $A
0001CCFA 4A28 0001                  		tst.b	obRender(a0)
0001CCFE 6A00 FBA6                  		bpl.w	loc_1982C
0001CD02 4EB9 0000 F840             		jsr	(ObjectFall).l
0001CD08 4EF9 0000 F88C             		jmp	(DisplaySprite).l
0001CD0E                            ; ===========================================================================
0001CD0E                            
0001CD0E                            FFloor_Break:
0001CD0E 49FA 0000                  		lea	FFloor_FragSpeed(pc),a4
0001CD12 4BFA 0000                  		lea	FFloor_FragPos(pc),a5
0001CD16 7801                       		moveq	#1,d4
0001CD18 7203                       		moveq	#3,d1
0001CD1A 7438                       		moveq	#$38,d2
0001CD1C 5428 0024                  		addq.b	#2,obRoutine(a0)
0001CD20 117C 0008 0014             		move.b	#8,obActWid(a0)
0001CD26 117C 0008 0016             		move.b	#8,obHeight(a0)
0001CD2C 43D0                       		lea	(a0),a1
0001CD2E 6000                       		bra.s	FFloor_MakeFrag
0001CD30                            ; ===========================================================================
0001CD30                            
0001CD30                            FFloor_LoopFrag:
0001CD30 4EB9 0000 FD2E             		jsr	(FindNextFreeObj).l
0001CD36 6600                       		bne.s	FFloor_BreakSnd
0001CD38                            
0001CD38                            FFloor_MakeFrag:
0001CD38 45D0                       		lea	(a0),a2
0001CD3A 47D1                       		lea	(a1),a3
0001CD3C 7603                       		moveq	#3,d3
0001CD3E                            
0001CD3E                            loc_19CC4:
0001CD3E 26DA                       		move.l	(a2)+,(a3)+
0001CD40 26DA                       		move.l	(a2)+,(a3)+
0001CD42 26DA                       		move.l	(a2)+,(a3)+
0001CD44 26DA                       		move.l	(a2)+,(a3)+
0001CD46 51CB FFF6                  		dbf	d3,loc_19CC4
0001CD4A                            
0001CD4A 335C 0012                  		move.w	(a4)+,obVelY(a1)
0001CD4E 361D                       		move.w	(a5)+,d3
0001CD50 D769 0008                  		add.w	d3,obX(a1)
0001CD54 361D                       		move.w	(a5)+,d3
0001CD56 D769 000C                  		add.w	d3,obY(a1)
0001CD5A 1344 001A                  		move.b	d4,obFrame(a1)
0001CD5E 5244                       		addq.w	#1,d4
0001CD60 51C9 FFCE                  		dbf	d1,FFloor_LoopFrag ; repeat sequence 3 more times
0001CD64                            
0001CD64                            FFloor_BreakSnd:
0001CD6E 4EF9 0000 F88C             		jmp	(DisplaySprite).l
0001CD74                            ; ===========================================================================
0001CD74 0080 0000                  FFloor_FragSpeed:dc.w $80, 0
0001CD78 0120 00C0                  		dc.w $120, $C0
0001CD7C FFF8 FFF8                  FFloor_FragPos:	dc.w -8, -8
0001CD80 0010 0000                  		dc.w $10, 0
0001CD84 0000 0010                  		dc.w 0,	$10
0001CD88 0010 0010                  		dc.w $10, $10
0001CD88 0010 0010                  		dc.w $10, $10
0001CD8C                            Map_FFloor:	include	"_maps\SBZ Eggman's Crumbling Floor.asm"
0001CD8C                            ; ---------------------------------------------------------------------------
0001CD8C                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001CD8C                            ; ---------------------------------------------------------------------------
0001CD8C                            Map_FFloor_internal:
0001CD8C 0000                       		dc.w @wholeblock-Map_FFloor_internal
0001CD8E 0000                       		dc.w @topleft-Map_FFloor_internal
0001CD90 0000                       		dc.w @topright-Map_FFloor_internal
0001CD92 0000                       		dc.w @bottomleft-Map_FFloor_internal
0001CD94 0000                       		dc.w @bottomright-Map_FFloor_internal
0001CD96 01                         @wholeblock:	dc.b 1
0001CD97 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001CD9C 02                         @topleft:	dc.b 2
0001CD9D F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001CDA2 F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001CDA7 00                         		dc.b 0
0001CDA8 02                         @topright:	dc.b 2
0001CDA9 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001CDAE F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001CDB3 00                         		dc.b 0
0001CDB4 02                         @bottomleft:	dc.b 2
0001CDB5 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001CDBA F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001CDBF 00                         		dc.b 0
0001CDC0 02                         @bottomright:	dc.b 2
0001CDC1 F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001CDC6 F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001CDCC 00                         		even
0001CDCC 00                         		even
0001CDCC                            		include	"_incObj\85 Boss - Final.asm"
0001CDCC                            ; ---------------------------------------------------------------------------
0001CDCC                            ; Object 85 - Eggman (FZ)
0001CDCC                            ; ---------------------------------------------------------------------------
0001CDCC                            
0001CDCC                            Obj85_Delete:
0001CDCC 4EF9 0000 F8CC             		jmp	(DeleteObject).l
0001CDD2                            ; ===========================================================================
0001CDD2                            
0001CDD2                            BossFinal:
0001CDD2 7000                       		moveq	#0,d0
0001CDD4 1028 0024                  		move.b	obRoutine(a0),d0
0001CDD8 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001CDDC 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001CDE0                            ; ===========================================================================
0001CDE0 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001CDE2 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001CDE4 0000                       		dc.w loc_1A38E-Obj85_Index
0001CDE6 0000                       		dc.w loc_1A346-Obj85_Index
0001CDE8 0000                       		dc.w loc_1A2C6-Obj85_Index
0001CDEA 0000                       		dc.w loc_1A3AC-Obj85_Index
0001CDEC 0000                       		dc.w loc_1A264-Obj85_Index
0001CDEE                            
0001CDEE 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001CDF4 0001 CAAE                  		dc.l Map_SEgg		; mappings pointer
0001CDF8 25B0 0590 0300             		dc.w $25B0, $590, $300
0001CDFE 0000 0000                  		dc.l Map_EggCyl
0001CE02 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001CE08 0000 0000                  		dc.l Map_FZLegs
0001CE0C 26E0 0596 0470             		dc.w $26E0, $596, $470
0001CE12 0001 CAAE                  		dc.l Map_SEgg
0001CE16 26E0 0596 0400             		dc.w $26E0, $596, $400
0001CE1C 0001 AD32                  		dc.l Map_Eggman
0001CE20 26E0 0596 0400             		dc.w $26E0, $596, $400
0001CE26 0001 AD32                  		dc.l Map_Eggman
0001CE2A                            
0001CE2A                            Obj85_ObjData2:	; routine num, animation, sprite priority (high and low bytes), width, height		
0001CE2A 0200 0200 2019             		dc.b  2, 0, $02, $00, $20, $19
0001CE30 0400 0080 1208             		dc.b  4, 0, $00, $80, $12,   8
0001CE36 0600 0180 0000             		dc.b  6, 0, $01, $80,   0,   0
0001CE3C 0800 0180 0000             		dc.b  8, 0, $01, $80,   0,   0
0001CE42 0A00 0180 2020             		dc.b $A, 0, $01, $80, $20, $20
0001CE48 0C00 0180 0000             		dc.b $C, 0, $01, $80,   0,   0
0001CE4E                            ; ===========================================================================
0001CE4E                            
0001CE4E                            Obj85_Main:	; Routine 0
0001CE4E 45FA FF9E                  		lea	Obj85_ObjData(pc),a2
0001CE52 47FA FFD6                  		lea	Obj85_ObjData2(pc),a3
0001CE56 2248                       		movea.l	a0,a1
0001CE58 7205                       		moveq	#5,d1
0001CE5A 6000                       		bra.s	Obj85_LoadBoss
0001CE5C                            ; ===========================================================================
0001CE5C                            
0001CE5C                            Obj85_Loop:
0001CE5C 4EB9 0000 FD2E             		jsr	(FindNextFreeObj).l
0001CE62 6600                       		bne.s	loc_19E20
0001CE64                            
0001CE64                            Obj85_LoadBoss:
0001CE64 12BC 0085                  		move.b	#id_BossFinal,(a1)
0001CE68 335A 0008                  		move.w	(a2)+,obX(a1)
0001CE6C 335A 000C                  		move.w	(a2)+,obY(a1)
0001CE70 335A 0002                  		move.w	(a2)+,obGfx(a1)
0001CE74 235A 0004                  		move.l	(a2)+,obMap(a1)
0001CE78 135B 0024                  		move.b	(a3)+,obRoutine(a1)
0001CE7C 135B 001C                  		move.b	(a3)+,obAnim(a1)
0001CE80 335B 0018                  		move.w	(a3)+,obPriority(a1)
0001CE84 135B 0014                  			move.b	(a3)+,obActWid(a1)
0001CE88 135B 0016                  		move.b	(a3)+,obHeight(a1)
0001CE8C 137C 0004 0001             		move.b	#4,obRender(a1)
0001CE92 08E8 0007 0001             		bset	#7,obRender(a0)
0001CE98 2348 0034                  		move.l	a0,$34(a1)
0001CE9C 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001CEA0                            
0001CEA0                            loc_19E20:
0001CEA0 45E8 0036                  		lea	$36(a0),a2
0001CEA4 4EB9 0000 FD18             		jsr	(FindFreeObj).l
0001CEAA 6600                       		bne.s	loc_19E5A
0001CEAC 12BC 0086                  		move.b	#id_BossPlasma,(a1) ; load energy ball object
0001CEB0 3489                       		move.w	a1,(a2)
0001CEB2 2348 0034                  		move.l	a0,$34(a1)
0001CEB6 45E8 0038                  		lea	$38(a0),a2
0001CEBA 7400                       		moveq	#0,d2
0001CEBC 7203                       		moveq	#3,d1
0001CEBE                            
0001CEBE                            loc_19E3E:
0001CEBE 4EB9 0000 FD2E             		jsr	(FindNextFreeObj).l
0001CEC4 6600                       		bne.s	loc_19E5A
0001CEC6 34C9                       		move.w	a1,(a2)+
0001CEC8 12BC 0084                  		move.b	#id_EggmanCylinder,(a1) ; load crushing	cylinder object
0001CECC 2348 0034                  		move.l	a0,$34(a1)
0001CED0 1342 0028                  		move.b	d2,obSubtype(a1)
0001CED4 5442                       		addq.w	#2,d2
0001CED6 51C9 FFE6                  		dbf	d1,loc_19E3E
0001CEDA                            
0001CEDA                            loc_19E5A:
0001CEDA 317C 0000 0034             		move.w	#0,$34(a0)
0001CEE0 117C 0004 0021             		move.b	#4,obColProp(a0) ; set number of hits to 8
0001CEE6 317C FFFF 0030             		move.w	#-1,$30(a0)
0001CEEC                            
0001CEEC                            Obj85_Eggman:	; Routine 2
0001CEEC 7000                       		moveq	#0,d0
0001CEEE 1028 0034                  		move.b	$34(a0),d0
0001CEF2 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001CEF6 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001CEFA 4EF9 0000 F88C             		jmp	(DisplaySprite).l
0001CF00                            ; ===========================================================================
0001CF00 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001CF04 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001CF08 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001CF0C 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001CF10                            ; ===========================================================================
0001CF10                            
0001CF10                            loc_19E90:
0001CF10 4AB8 F680                  		tst.l	(v_plc_buffer).w
0001CF14 6600                       		bne.s	loc_19EA2
0001CF16 0C78 2450 F700             		cmpi.w	#$2450,(v_screenposx).w
0001CF1C 6500                       		bcs.s	loc_19EA2
0001CF1E 5428 0034                  		addq.b	#2,$34(a0)
0001CF22                            
0001CF22                            loc_19EA2:
0001CF22 52B8 F636                  		addq.l	#1,(v_random).w
0001CF26 4E75                       		rts	
0001CF28                            ; ===========================================================================
0001CF28                            
0001CF28                            loc_19EA8:
0001CF28 4A68 0030                  		tst.w	$30(a0)
0001CF2C 6A00                       		bpl.s	loc_19F10
0001CF2E 4268 0030                  		clr.w	$30(a0)
0001CF32 4EB9 0000 3A0C             		jsr	(RandomNumber).l
0001CF38 0240 000C                  		andi.w	#$C,d0
0001CF3C 3200                       		move.w	d0,d1
0001CF3E 5441                       		addq.w	#2,d1
0001CF40 4A80                       		tst.l	d0
0001CF42 6A00                       		bpl.s	loc_19EC6
0001CF44 C340                       		exg	d1,d0
0001CF46                            
0001CF46                            loc_19EC6:
0001CF46 43FA 0000                  		lea	word_19FD6(pc),a1
0001CF4A 3031 0000                  		move.w	(a1,d0.w),d0
0001CF4E 3231 1000                  		move.w	(a1,d1.w),d1
0001CF52 3140 0030                  		move.w	d0,$30(a0)
0001CF56 74FF                       		moveq	#-1,d2
0001CF58 3430 0038                  		move.w	$38(a0,d0.w),d2
0001CF5C 2242                       		movea.l	d2,a1
0001CF5E 137C 00FF 0029             		move.b	#-1,$29(a1)
0001CF64 337C FFFF 0030             		move.w	#-1,$30(a1)
0001CF6A 3430 1038                  		move.w	$38(a0,d1.w),d2
0001CF6E 2242                       		movea.l	d2,a1
0001CF70 137C 0001 0029             		move.b	#1,$29(a1)
0001CF76 337C 0000 0030             		move.w	#0,$30(a1)
0001CF7C 317C 0001 0032             		move.w	#1,$32(a0)
0001CF82 4228 0035                  		clr.b	$35(a0)
0001CF90                            
0001CF90                            loc_19F10:
0001CF90 4A68 0032                  		tst.w	$32(a0)
0001CF94 6B00 0000                  		bmi.w	loc_19FA6
0001CF98 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001CF9E 3038 D008                  		move.w	(v_player+obX).w,d0
0001CFA2 9068 0008                  		sub.w	obX(a0),d0
0001CFA6 6500                       		bcs.s	loc_19F2E
0001CFA8 08E8 0000 0022             		bset	#0,obStatus(a0)
0001CFAE                            
0001CFAE                            loc_19F2E:
0001CFAE 323C 002B                  		move.w	#$2B,d1
0001CFB2 343C 0014                  		move.w	#$14,d2
0001CFB6 363C 0014                  		move.w	#$14,d3
0001CFBA 3828 0008                  		move.w	obX(a0),d4
0001CFBE 4EB9 0001 1C9A             		jsr	(SolidObject).l
0001CFC4 4A44                       		tst.w	d4
0001CFC6 6E00                       		bgt.s	loc_19F50
0001CFC8                            
0001CFC8                            loc_19F48:
0001CFC8 4A28 0035                  		tst.b	$35(a0)
0001CFCC 6600                       		bne.s	loc_19F88
0001CFCE 6000                       		bra.s	loc_19F96
0001CFD0                            ; ===========================================================================
0001CFD0                            
0001CFD0                            loc_19F50:
0001CFD0 5E78 F636                  		addq.w	#7,(v_random).w
0001CFD4 0C38 0002 D01C             		cmpi.b	#id_Roll,(v_player+obAnim).w
0001CFDA 66EC                       		bne.s	loc_19F48
0001CFDC 303C 0300                  		move.w	#$300,d0
0001CFE0 0828 0000 0022             		btst	#0,obStatus(a0)
0001CFE6 6600                       		bne.s	loc_19F6A
0001CFE8 4440                       		neg.w	d0
0001CFEA                            
0001CFEA                            loc_19F6A:
0001CFEA 31C0 D010                  		move.w	d0,(v_player+obVelX).w
0001CFEE 4A28 0035                  		tst.b	$35(a0)
0001CFF2 6600                       		bne.s	loc_19F88
0001CFF4 5328 0021                  		subq.b	#1,obColProp(a0)
0001CFF8 117C 00FF 0035             		move.b	#$FF,$35(a0)
0001CFFE 4EB9 0000 0000             		jsr	(BossModeMusic).l ;	play boss damage sound
0001D004                            
0001D004                            loc_19F88:
0001D004 5328 0035                  		subq.b	#1,$35(a0)
0001D008 6700                       		beq.s	loc_19F96
0001D00A 117C 0003 001C             		move.b	#3,obAnim(a0)
0001D010 6000                       		bra.s	loc_19F9C
0001D012                            ; ===========================================================================
0001D012                            
0001D012                            loc_19F96:
0001D012 117C 0001 001C             		move.b	#1,obAnim(a0)
0001D018                            
0001D018                            loc_19F9C:
0001D018 43FA FA62                  		lea	Ani_SEgg(pc),a1
0001D01C 4EF9 0000 C938             		jmp	(AnimateSprite).l
0001D022                            ; ===========================================================================
0001D022                            
0001D022                            loc_19FA6:
0001D022 4A28 0021                  		tst.b	obColProp(a0)
0001D026 6700                       		beq.s	loc_19FBC
0001D028 5428 0034                  		addq.b	#2,$34(a0)
0001D02C 317C FFFF 0030             		move.w	#-1,$30(a0)
0001D032 4268 0032                  		clr.w	$32(a0)
0001D036 4E75                       		rts	
0001D038                            ; ===========================================================================
0001D038                            
0001D038                            loc_19FBC:
0001D038 7064                       			moveq	#100,d0
0001D03A 6100 0000                  			bsr.w	AddPoints
0001D03E 117C 0006 0034             		move.b	#6,$34(a0)
0001D044 317C 25C0 0008             		move.w	#$25C0,obX(a0)
0001D04A 317C 053C 000C             		move.w	#$53C,obY(a0)
0001D050 117C 0014 0016             		move.b	#$14,obHeight(a0)
0001D056 4E75                       		rts	
0001D058                            ; ===========================================================================
0001D058 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001D068                            ; ===========================================================================
0001D068                            
0001D068                            loc_19FE6:
0001D068 70FF                       		moveq	#-1,d0
0001D06A 3028 0036                  		move.w	$36(a0),d0
0001D06E 2240                       		movea.l	d0,a1
0001D070 4A68 0030                  		tst.w	$30(a0)
0001D074 6A00                       		bpl.s	loc_1A000
0001D076 4268 0030                  		clr.w	$30(a0)
0001D07A 137C 00FF 0029             		move.b	#-1,$29(a1)
0001D080 6100                       		bsr.s	loc_1A020
0001D082                            
0001D082                            loc_1A000:
0001D082 700F                       		moveq	#$F,d0
0001D084 C078 FE0E                  		and.w	(v_vbla_word).w,d0
0001D088 6600                       		bne.s	loc_1A00A
0001D08A 6100                       		bsr.s	loc_1A020
0001D08C                            
0001D08C                            loc_1A00A:
0001D08C 4A68 0032                  		tst.w	$32(a0)
0001D090 6700                       		beq.s	locret_1A01E
0001D092 5528 0034                  		subq.b	#2,$34(a0)
0001D096 317C FFFF 0030             		move.w	#-1,$30(a0)
0001D09C 4268 0032                  		clr.w	$32(a0)
0001D0A0                            
0001D0A0                            locret_1A01E:
0001D0A0 4E75                       		rts	
0001D0A2                            ; ===========================================================================
0001D0A2                            
0001D0A2                            loc_1A020:
0001D0AC                            ; ===========================================================================
0001D0AC                            
0001D0AC                            loc_1A02A:
0001D0AC 117C 0030 0014             			move.b	#$30,obActWid(a0)
0001D0B2 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D0B8 4EB9 0000 F878             		jsr	(SpeedToPos).l
0001D0BE 117C 0006 001A             		move.b	#6,obFrame(a0)
0001D0C4 0668 0010 0012             		addi.w	#$10,obVelY(a0)
0001D0CA 0C68 059C 000C             		cmpi.w	#$59C,obY(a0)
0001D0D0 6500                       		bcs.s	loc_1A070
0001D0D2 317C 059C 000C             		move.w	#$59C,obY(a0)
0001D0D8 5428 0034                  		addq.b	#2,$34(a0)
0001D0DC 117C 0020 0014             			move.b	#$20,obActWid(a0)
0001D0E2 317C 0100 0010             		move.w	#$100,obVelX(a0)
0001D0E8 317C FF00 0012             		move.w	#-$100,obVelY(a0)
0001D0EE 5438 F742                  		addq.b	#2,(v_dle_routine).w
0001D0F2                            
0001D0F2                            loc_1A070:
0001D0F2 6000 0000                  		bra.w	loc_1A166
0001D0F6                            ; ===========================================================================
0001D0F6                            
0001D0F6                            loc_1A074:
0001D0F6 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D0FC 117C 0004 001C             		move.b	#4,obAnim(a0)
0001D102 4EB9 0000 F878             		jsr	(SpeedToPos).l
0001D108 0668 0010 0012             		addi.w	#$10,obVelY(a0)
0001D10E 0C68 05A3 000C             		cmpi.w	#$5A3,obY(a0)
0001D114 6500                       		bcs.s	loc_1A09A
0001D116 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001D11C                            
0001D11C                            loc_1A09A:
0001D11C 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001D122 3028 0008                  		move.w	obX(a0),d0
0001D126 9078 D008                  		sub.w	(v_player+obX).w,d0
0001D12A 6A00                       		bpl.s	loc_1A0B4
0001D12C 317C 0500 0010             		move.w	#$500,obVelX(a0)
0001D132 6000 0000                  		bra.w	loc_1A0F2
0001D136                            ; ===========================================================================
0001D136                            
0001D136                            loc_1A0B4:
0001D136 0440 0070                  		subi.w	#$70,d0
0001D13A 6500                       		bcs.s	loc_1A0F2
0001D13C 0468 0100 0010             		subi.w	#$100,obVelX(a0)
0001D142 5140                       		subq.w	#8,d0
0001D144 6500                       		bcs.s	loc_1A0F2
0001D146 0468 0100 0010             		subi.w	#$100,obVelX(a0)
0001D14C 5140                       		subq.w	#8,d0
0001D14E 6500                       		bcs.s	loc_1A0F2
0001D150 0468 0080 0010             		subi.w	#$80,obVelX(a0)
0001D156 5140                       		subq.w	#8,d0
0001D158 6500                       		bcs.s	loc_1A0F2
0001D15A 0468 0080 0010             		subi.w	#$80,obVelX(a0)
0001D160 5140                       		subq.w	#8,d0
0001D162 6500                       		bcs.s	loc_1A0F2
0001D164 0468 0080 0010             		subi.w	#$80,obVelX(a0)
0001D16A 0440 0038                  		subi.w	#$38,d0
0001D16E 6500                       		bcs.s	loc_1A0F2
0001D170 4268 0010                  		clr.w	obVelX(a0)
0001D174                            
0001D174                            loc_1A0F2:
0001D174 0C68 26A0 0008             		cmpi.w	#$26A0,obX(a0)
0001D17A 6500                       		bcs.s	loc_1A110
0001D17C 317C 26A0 0008             		move.w	#$26A0,obX(a0)
0001D182 317C 0240 0010             		move.w	#$240,obVelX(a0)
0001D188 317C FB40 0012             		move.w	#-$4C0,obVelY(a0)
0001D18E 5428 0034                  		addq.b	#2,$34(a0)
0001D192                            
0001D192                            loc_1A110:
0001D192 6000                       		bra.s	loc_1A15C
0001D194                            ; ===========================================================================
0001D194                            
0001D194                            loc_1A112:
0001D194 4EB9 0000 F878             		jsr	(SpeedToPos).l
0001D19A 0C68 26E0 0008             		cmpi.w	#$26E0,obX(a0)
0001D1A0 6500                       		bcs.s	loc_1A124
0001D1A2 4268 0010                  		clr.w	obVelX(a0)
0001D1A6                            
0001D1A6                            loc_1A124:
0001D1A6 0668 0034 0012             		addi.w	#$34,obVelY(a0)
0001D1AC 4A68 0012                  		tst.w	obVelY(a0)
0001D1B0 6B00                       		bmi.s	loc_1A142
0001D1B2 0C68 0592 000C             		cmpi.w	#$592,obY(a0)
0001D1B8 6500                       		bcs.s	loc_1A142
0001D1BA 317C 0592 000C             		move.w	#$592,obY(a0)
0001D1C0 4268 0012                  		clr.w	obVelY(a0)
0001D1C4                            
0001D1C4                            loc_1A142:
0001D1C4 3028 0010                  		move.w	obVelX(a0),d0
0001D1C8 8068 0012                  		or.w	obVelY(a0),d0
0001D1CC 6600                       		bne.s	loc_1A15C
0001D1CE 5428 0034                  		addq.b	#2,$34(a0)
0001D1D2 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001D1D8 117C 0001 0021             		move.b	#1,obColProp(a0)
0001D1DE                            
0001D1DE                            loc_1A15C:
0001D1DE 43FA F89C                  		lea	Ani_SEgg(pc),a1
0001D1E2 4EB9 0000 C938             		jsr	(AnimateSprite).l
0001D1E8                            
0001D1E8                            loc_1A166:
0001D1E8 0C78 2700 F72A             		cmpi.w	#$2700,(v_limitright2).w
0001D1EE 6C00                       		bge.s	loc_1A172
0001D1F0 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001D1F4                            
0001D1F4                            loc_1A172:
0001D1F4 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001D1FA 6C00                       		bge.s	locret_1A190
0001D1FC 323C 001B                  		move.w	#$1B,d1
0001D200 343C 0070                  		move.w	#$70,d2
0001D204 363C 0071                  		move.w	#$71,d3
0001D208 3828 0008                  		move.w	obX(a0),d4
0001D20C 4EF9 0001 1C9A             		jmp	(SolidObject).l
0001D212                            ; ===========================================================================
0001D212                            
0001D212                            locret_1A190:
0001D212 4E75                       		rts	
0001D214                            ; ===========================================================================
0001D214                            
0001D214                            loc_1A192:
0001D214 217C 0001 AD32 0004        		move.l	#Map_Eggman,obMap(a0)
0001D21C 317C 0400 0002             		move.w	#$400,obGfx(a0)
0001D222 117C 0000 001C             		move.b	#0,obAnim(a0)
0001D228 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D22E 4EB9 0000 F878             		jsr	(SpeedToPos).l
0001D234 0C68 0544 000C             		cmpi.w	#$544,obY(a0)
0001D23A 6400                       		bcc.s	loc_1A1D0
0001D23C 317C 0180 0010             		move.w	#$180,obVelX(a0)
0001D242 317C FFE8 0012             		move.w	#-$18,obVelY(a0)
0001D248 117C 000F 0020             		move.b	#$F,obColType(a0)
0001D24E 5428 0034                  		addq.b	#2,$34(a0)
0001D252                            
0001D252                            loc_1A1D0:
0001D252 6000 FF8A                  		bra.w	loc_1A15C
0001D256                            ; ===========================================================================
0001D256                            
0001D256                            loc_1A1D4:
0001D256 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D25C 4EB9 0000 F878             		jsr	(SpeedToPos).l
0001D262 4A68 0030                  		tst.w	$30(a0)
0001D266 6600                       		bne.s	loc_1A1FC
0001D268 4A28 0020                  		tst.b	obColType(a0)
0001D26C 6600                       		bne.s	loc_1A216
0001D26E 317C 001E 0030             		move.w	#$1E,$30(a0)
0001D274 4EB9 0000 0000             		jsr	(BossModeMusic).l ;	play boss damage sound
0001D27A                            
0001D27A                            loc_1A1FC:
0001D27A 5368 0030                  		subq.w	#1,$30(a0)
0001D27E 6600                       		bne.s	loc_1A216
0001D280 4A28 0022                  		tst.b	obStatus(a0)
0001D284 6A00                       		bpl.s	loc_1A210
0001D286 317C 0060 0012             		move.w	#$60,obVelY(a0)
0001D28C 6000                       		bra.s	loc_1A216
0001D28E                            ; ===========================================================================
0001D28E                            
0001D28E                            loc_1A210:
0001D28E 117C 000F 0020             		move.b	#$F,obColType(a0)
0001D294                            
0001D294                            loc_1A216:
0001D294 0C78 2790 D008             		cmpi.w	#$2790,(v_player+obX).w
0001D29A 6D00                       		blt.s	loc_1A23A
0001D29C 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w
0001D2A2 31FC 0000 F602             		move.w	#0,(v_jpadhold2).w
0001D2A8 4278 D020                  		clr.w	(v_player+obInertia).w
0001D2AC 4A68 0012                  		tst.w	obVelY(a0)
0001D2B0 6A00                       		bpl.s	loc_1A248
0001D2B2 31FC 0100 F602             		move.w	#$100,(v_jpadhold2).w
0001D2B8                            
0001D2B8                            loc_1A23A:
0001D2B8 0C78 27E0 D008             		cmpi.w	#$27E0,(v_player+obX).w
0001D2BE 6D00                       		blt.s	loc_1A248
0001D2C0 31FC 27E0 D008             		move.w	#$27E0,(v_player+obX).w
0001D2C6                            
0001D2C6                            loc_1A248:
0001D2C6 0C68 2900 0008             		cmpi.w	#$2900,obX(a0)
0001D2CC 6500                       		bcs.s	loc_1A260
0001D2CE 4A28 0001                  		tst.b	obRender(a0)
0001D2D2 6B00                       		bmi.s	loc_1A260
0001D2D4 11FC 0018 F600             		move.b	#$18,(v_gamemode).w
0001D2DA 6000 FAF0                  		bra.w	Obj85_Delete
0001D2DE                            ; ===========================================================================
0001D2DE                            
0001D2DE                            loc_1A260:
0001D2DE 6000 FEFE                  		bra.w	loc_1A15C
0001D2E2                            ; ===========================================================================
0001D2E2                            
0001D2E2                            loc_1A264:	; Routine 4
0001D2E2 2268 0034                  		movea.l	$34(a0),a1
0001D2E6 1011                       		move.b	(a1),d0
0001D2E8 B010                       		cmp.b	(a0),d0
0001D2EA 6600 FAE0                  		bne.w	Obj85_Delete
0001D2EE 117C 0007 001C             		move.b	#7,obAnim(a0)
0001D2F4 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001D2FA 6C00                       		bge.s	loc_1A280
0001D2FC 6000                       		bra.s	loc_1A2A6
0001D2FE                            ; ===========================================================================
0001D2FE                            
0001D2FE                            loc_1A280:
0001D2FE 4A69 0010                  		tst.w	obVelX(a1)
0001D302 6700                       		beq.s	loc_1A28C
0001D304 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001D30A                            
0001D30A                            loc_1A28C:
0001D30A 43FA D9D6                  		lea	Ani_Eggman(pc),a1
0001D30E 4EB9 0000 C938             		jsr	(AnimateSprite).l
0001D314                            
0001D314                            loc_1A296:
0001D314 2268 0034                  		movea.l	$34(a0),a1
0001D318 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001D31E 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001D324                            
0001D324                            loc_1A2A6:
0001D324 2268 0034                  		movea.l	$34(a0),a1
0001D328 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001D32E 7003                       		moveq	#3,d0
0001D330 C028 0022                  		and.b	obStatus(a0),d0
0001D334 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001D33A 8128 0001                  		or.b	d0,obRender(a0)
0001D33E 4EF9 0000 F88C             		jmp	(DisplaySprite).l
0001D344                            ; ===========================================================================
0001D344                            
0001D344                            loc_1A2C6:	; Routine 6
0001D344 2268 0034                  		movea.l	$34(a0),a1
0001D348 1011                       		move.b	(a1),d0
0001D34A B010                       		cmp.b	(a0),d0
0001D34C 6600 FA7E                  		bne.w	Obj85_Delete
0001D350 0CA9 0001 AD32 0004        		cmpi.l	#Map_Eggman,obMap(a1)
0001D358 6700                       		beq.s	loc_1A2E4
0001D35A 117C 000A 001A             		move.b	#$A,obFrame(a0)
0001D360 60C2                       		bra.s	loc_1A2A6
0001D362                            ; ===========================================================================
0001D362                            
0001D362                            loc_1A2E4:
0001D362 117C 0001 001C             		move.b	#1,obAnim(a0)
0001D368 4A29 0021                  		tst.b	obColProp(a1)
0001D36C 6F00                       		ble.s	loc_1A312
0001D36E 117C 0006 001C             		move.b	#6,obAnim(a0)
0001D374 217C 0001 AD32 0004        		move.l	#Map_Eggman,obMap(a0)
0001D37C 317C 0400 0002             		move.w	#$400,obGfx(a0)
0001D382 43FA D95E                  		lea	Ani_Eggman(pc),a1
0001D386 4EB9 0000 C938             		jsr	(AnimateSprite).l
0001D38C 6000 FF86                  		bra.w	loc_1A296
0001D390                            ; ===========================================================================
0001D390                            
0001D390                            loc_1A312:
0001D390 4A28 0001                  		tst.b	1(a0)
0001D394 6A00 FA36                  		bpl.w	Obj85_Delete
0001D398 6100 D4F2                  		bsr.w	BossDefeated
0001D39C 317C 0100 0018             		move.w	#$100,obPriority(a0)
0001D3A2 117C 0000 001C             		move.b	#0,obAnim(a0)
0001D3A8 217C 0000 0000 0004        		move.l	#Map_FZDamaged,obMap(a0)
0001D3B0 317C 03A0 0002             		move.w	#$3A0,obGfx(a0)
0001D3B6 43FA 0000                  		lea	Ani_FZEgg(pc),a1
0001D3BA 4EB9 0000 C938             		jsr	(AnimateSprite).l
0001D3C0 6000 FF52                  		bra.w	loc_1A296
0001D3C4                            ; ===========================================================================
0001D3C4                            
0001D3C4                            loc_1A346:	; Routine 8
0001D3C4 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D3CA 2268 0034                  		movea.l	$34(a0),a1
0001D3CE 0CA9 0001 AD32 0004        		cmpi.l	#Map_Eggman,obMap(a1)
0001D3D6 6700                       		beq.s	loc_1A35E
0001D3D8 6000 FF4A                  		bra.w	loc_1A2A6
0001D3DC                            ; ===========================================================================
0001D3DC                            
0001D3DC                            loc_1A35E:
0001D3DC 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001D3E2 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001D3E8 4A28 001E                  		tst.b	obTimeFrame(a0)
0001D3EC 6600                       		bne.s	loc_1A376
0001D3EE 117C 0014 001E             		move.b	#$14,obTimeFrame(a0)
0001D3F4                            
0001D3F4                            loc_1A376:
0001D3F4 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0001D3F8 6E00                       		bgt.s	loc_1A38A
0001D3FA 5228 001A                  		addq.b	#1,obFrame(a0)
0001D3FE 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0001D404 6E00 F9C6                  		bgt.w	Obj85_Delete
0001D408                            
0001D408                            loc_1A38A:
0001D408 6000 FF0A                  		bra.w	loc_1A296
0001D40C                            ; ===========================================================================
0001D40C                            
0001D40C                            loc_1A38E:	; Routine $A
0001D40C 117C 000B 001A             		move.b	#$B,obFrame(a0)
0001D412 3038 D008                  		move.w	(v_player+obX).w,d0
0001D416 9068 0008                  		sub.w	obX(a0),d0
0001D41A 6500                       		bcs.s	loc_1A3A6
0001D41C 4A28 0001                  		tst.b	obRender(a0)
0001D420 6A00 F9AA                  		bpl.w	Obj85_Delete
0001D424                            
0001D424                            loc_1A3A6:
0001D424 4EF9 0000 F88C             		jmp	(DisplaySprite).l
0001D42A                            ; ===========================================================================
0001D42A                            
0001D42A                            loc_1A3AC:	; Routine $C
0001D42A 117C 0000 001A             		move.b	#0,obFrame(a0)
0001D430 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D436 2268 0034                  		movea.l	$34(a0),a1
0001D43A 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001D440 6600                       		bne.s	loc_1A3D0
0001D442 0CA9 0001 AD32 0004        		cmpi.l	#Map_Eggman,obMap(a1)
0001D44A 6700 F980                  		beq.w	Obj85_Delete
0001D44E                            
0001D44E                            loc_1A3D0:
0001D44E 6000 FED4                  		bra.w	loc_1A2A6
0001D452                            		
0001D452                            BossModeMusic:
0001D452 0C28 0001 0021             		cmpi.b	#1,obColProp(a0)
0001D458 6600 0000                  		bne.w	NormalMode
0001D45C 4EF9 0000 0000             		jmp	PinchMode
0001D462                            
0001D462                            NormalMode:
0001D462 303C 00AC                  		move.w	#$AC,d0
0001D466 4EB9 0000 1250             		jsr	(PlaySound_Special).l
0001D46C 4E75                       		rts
0001D46E                            
0001D46E                            PinchMode:
0001D46E 303C 0094                  		move.w	#$94,d0
0001D472 4EB9 0000 1250             		jsr	(PlaySound_Special).l
0001D478 303C 00E2                  		move.w	#$E2,d0
0001D47C 4EB9 0000 124A             		jsr	(PlaySound).l
0001D482 4E75                       		rts		
0001D482 4E75                       		rts		
0001D484                            		include	"_anim\FZ Eggman in Ship.asm"
0001D484                            ; ---------------------------------------------------------------------------
0001D484                            ; Animation script - Eggman (FZ)
0001D484                            ; ---------------------------------------------------------------------------
0001D484 0000                       Ani_FZEgg:	dc.w byte_1A3D6-Ani_FZEgg
0001D486 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, afEnd
0001D48A                            		even
0001D48A                            		even
0001D48A                            Map_FZDamaged:	include	"_maps\FZ Damaged Eggmobile.asm"
0001D48A                            ; ---------------------------------------------------------------------------
0001D48A                            ; Sprite mappings - Eggman in broken eggmobile (FZ)
0001D48A                            ; ---------------------------------------------------------------------------
0001D48A                            Map_FZDamaged_internal:
0001D48A 0000                       		dc.w @damage1-Map_FZDamaged_internal
0001D48C 0000                       		dc.w @damage2-Map_FZDamaged_internal
0001D48E 06                         @damage1:	dc.b 6
0001D48F E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001D494 EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001D499 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001D49E FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001D4A3 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001D4A8 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001D4AD 06                         @damage2:	dc.b 6
0001D4AE E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001D4B3 EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001D4B8 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001D4BD FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001D4C2 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001D4C7 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001D4CC                            		even
0001D4CC                            		even
0001D4CC                            Map_FZLegs:	include	"_maps\FZ Eggmobile Legs.asm"
0001D4CC                            ; ---------------------------------------------------------------------------
0001D4CC                            ; Sprite mappings - legs on Eggman's escape ship (FZ)
0001D4CC                            ; ---------------------------------------------------------------------------
0001D4CC                            Map_FZLegs_internal:
0001D4CC 0000                       		dc.w @extended-Map_FZLegs_internal
0001D4CE 0000                       		dc.w @halfway-Map_FZLegs_internal
0001D4D0 0000                       		dc.w @retracted-Map_FZLegs_internal
0001D4D2 02                         @extended:	dc.b 2
0001D4D3 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001D4D8 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001D4DD 03                         @halfway:	dc.b 3
0001D4DE 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001D4E3 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001D4E8 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001D4ED 02                         @retracted:	dc.b 2
0001D4EE 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001D4F3 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001D4F8                            		even
0001D4F8                            		even
0001D4F8                            		include	"_incObj\84 FZ Eggman's Cylinders.asm"
0001D4F8                            ; ---------------------------------------------------------------------------
0001D4F8                            ; Object 84 - cylinder Eggman hides in (FZ)
0001D4F8                            ; ---------------------------------------------------------------------------
0001D4F8                            
0001D4F8                            Obj84_Delete:
0001D4F8 4EF9 0000 F8CC             		jmp	(DeleteObject).l
0001D4FE                            ; ===========================================================================
0001D4FE                            
0001D4FE                            EggmanCylinder:
0001D4FE 7000                       		moveq	#0,d0
0001D500 1028 0024                  		move.b	obRoutine(a0),d0
0001D504 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001D508 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001D50C                            ; ===========================================================================
0001D50C 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001D50E 0000                       		dc.w loc_1A4CE-Obj84_Index
0001D510 0000                       		dc.w loc_1A57E-Obj84_Index
0001D512                            
0001D512 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001D516 2550 0620                  		dc.w $2550, $620
0001D51A 2490 04C0                  		dc.w $2490, $4C0
0001D51E 2510 04C0                  		dc.w $2510, $4C0
0001D522                            ; ===========================================================================
0001D522                            
0001D522                            Obj84_Main:	; Routine
0001D522 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001D526 7000                       		moveq	#0,d0
0001D528 1028 0028                  		move.b	obSubtype(a0),d0
0001D52C D040                       		add.w	d0,d0
0001D52E D2C0                       		adda.w	d0,a1
0001D530 117C 0004 0001             		move.b	#4,obRender(a0)
0001D536 08E8 0007 0001             		bset	#7,obRender(a0)
0001D53C 08E8 0004 0001             		bset	#4,obRender(a0)
0001D542 317C 0300 0002             		move.w	#$300,obGfx(a0)
0001D548 217C 0000 0000 0004        		move.l	#Map_EggCyl,obMap(a0)
0001D550 3159 0008                  		move.w	(a1)+,obX(a0)
0001D554 3151 000C                  		move.w	(a1),obY(a0)
0001D558 3159 0038                  		move.w	(a1)+,$38(a0)
0001D55C 117C 0020 0016             		move.b	#$20,obHeight(a0)
0001D562 117C 0060 0017             		move.b	#$60,obWidth(a0)
0001D568 117C 0020 0014             		move.b	#$20,obActWid(a0)
0001D56E 117C 0060 0016             		move.b	#$60,obHeight(a0)
0001D574 317C 0180 0018             		move.w	#$180,obPriority(a0)
0001D57A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001D57E                            
0001D57E                            loc_1A4CE:	; Routine 2
0001D57E 0C28 0002 0028             		cmpi.b	#2,obSubtype(a0)
0001D584 6F00                       		ble.s	loc_1A4DC
0001D586 08E8 0001 0001             		bset	#1,obRender(a0)
0001D58C                            
0001D58C                            loc_1A4DC:
0001D58C 42A8 003C                  		clr.l	$3C(a0)
0001D590 4A28 0029                  		tst.b	$29(a0)
0001D594 6700                       		beq.s	loc_1A4EA
0001D596 5428 0024                  		addq.b	#2,obRoutine(a0)
0001D59A                            
0001D59A                            loc_1A4EA:
0001D59A 2028 003C                  		move.l	$3C(a0),d0
0001D59E 2228 0038                  		move.l	$38(a0),d1
0001D5A2 D280                       		add.l	d0,d1
0001D5A4 4841                       		swap	d1
0001D5A6 3141 000C                  		move.w	d1,obY(a0)
0001D5AA 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0)
0001D5B0 6600                       		bne.s	loc_1A524
0001D5B2 4A68 0030                  		tst.w	$30(a0)
0001D5B6 6A00                       		bpl.s	loc_1A524
0001D5B8 70F6                       		moveq	#-$A,d0
0001D5BA 0C28 0002 0028             		cmpi.b	#2,obSubtype(a0)
0001D5C0 6F00                       		ble.s	loc_1A514
0001D5C2 700E                       		moveq	#$E,d0
0001D5C4                            
0001D5C4                            loc_1A514:
0001D5C4 D240                       		add.w	d0,d1
0001D5C6 2268 0034                  		movea.l	$34(a0),a1
0001D5CA 3341 000C                  		move.w	d1,obY(a1)
0001D5CE 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001D5D4                            
0001D5D4                            loc_1A524:
0001D5D4 323C 002B                  		move.w	#$2B,d1
0001D5D8 343C 0060                  		move.w	#$60,d2
0001D5DC 363C 0061                  		move.w	#$61,d3
0001D5E0 3828 0008                  		move.w	obX(a0),d4
0001D5E4 4EB9 0001 1C9A             		jsr	(SolidObject).l
0001D5EA 7000                       		moveq	#0,d0
0001D5EC 3228 003C                  		move.w	$3C(a0),d1
0001D5F0 6A00                       		bpl.s	loc_1A550
0001D5F2 4441                       		neg.w	d1
0001D5F4 5141                       		subq.w	#8,d1
0001D5F6 6500                       		bcs.s	loc_1A55C
0001D5F8 5200                       		addq.b	#1,d0
0001D5FA E841                       		asr.w	#4,d1
0001D5FC D041                       		add.w	d1,d0
0001D5FE 6000                       		bra.s	loc_1A55C
0001D600                            ; ===========================================================================
0001D600                            
0001D600                            loc_1A550:
0001D600 0441 0027                  		subi.w	#$27,d1
0001D604 6500                       		bcs.s	loc_1A55C
0001D606 5200                       		addq.b	#1,d0
0001D608 E841                       		asr.w	#4,d1
0001D60A D041                       		add.w	d1,d0
0001D60C                            
0001D60C                            loc_1A55C:
0001D60C 1140 001A                  		move.b	d0,obFrame(a0)
0001D610 3038 D008                  		move.w	(v_player+obX).w,d0
0001D614 9068 0008                  		sub.w	obX(a0),d0
0001D618 6B00                       		bmi.s	loc_1A578
0001D61A 0440 0140                  		subi.w	#$140,d0
0001D61E 6B00                       		bmi.s	loc_1A578
0001D620 4A28 0001                  		tst.b	obRender(a0)
0001D624 6A00 FED2                  		bpl.w	Obj84_Delete
0001D628                            
0001D628                            loc_1A578:
0001D628 4EF9 0000 F88C             		jmp	(DisplaySprite).l
0001D62E                            ; ===========================================================================
0001D62E                            
0001D62E                            loc_1A57E:	; Routine 4
0001D62E 7000                       		moveq	#0,d0
0001D630 1028 0028                  		move.b	obSubtype(a0),d0
0001D634 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001D638 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001D63C 6000 FF5C                  		bra.w	loc_1A4EA
0001D640                            ; ===========================================================================
0001D640 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001D642 0000                       		dc.w loc_1A598-off_1A590
0001D644 0000                       		dc.w loc_1A604-off_1A590
0001D646 0000                       		dc.w loc_1A604-off_1A590
0001D648                            ; ===========================================================================
0001D648                            
0001D648                            loc_1A598:
0001D648 4A28 0029                  		tst.b	$29(a0)
0001D64C 6600                       		bne.s	loc_1A5D4
0001D64E 2268 0034                  		movea.l	$34(a0),a1
0001D652 4A29 0021                  		tst.b	obColProp(a1)
0001D656 6600                       		bne.s	loc_1A5B4
0001D658 6100 D232                  		bsr.w	BossDefeated
0001D65C 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001D664                            
0001D664                            loc_1A5B4:
0001D664 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001D66C 6400                       		bcc.s	locret_1A602
0001D66E 42A8 003C                  		clr.l	$3C(a0)
0001D672 2268 0034                  		movea.l	$34(a0),a1
0001D676 5369 0032                  		subq.w	#1,$32(a1)
0001D67A 4269 0030                  		clr.w	$30(a1)
0001D67E 5528 0024                  		subq.b	#2,obRoutine(a0)
0001D682 4E75                       		rts	
0001D684                            ; ===========================================================================
0001D684                            
0001D684                            loc_1A5D4:
0001D684 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001D68A 6C00                       		bge.s	loc_1A5E4
0001D68C 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001D694                            
0001D694                            loc_1A5E4:
0001D694 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001D69C 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001D6A2 6E00                       		bgt.s	locret_1A602
0001D6A4 4268 003E                  		clr.w	$3E(a0)
0001D6A8 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001D6AE 4228 0029                  		clr.b	$29(a0)
0001D6B2                            
0001D6B2                            locret_1A602:
0001D6B2 4E75                       		rts	
0001D6B4                            ; ===========================================================================
0001D6B4                            
0001D6B4                            loc_1A604:
0001D6B4 08E8 0001 0001             		bset	#1,obRender(a0)
0001D6BA 4A28 0029                  		tst.b	$29(a0)
0001D6BE 6600                       		bne.s	loc_1A646
0001D6C0 2268 0034                  		movea.l	$34(a0),a1
0001D6C4 4A29 0021                  		tst.b	obColProp(a1)
0001D6C8 6600                       		bne.s	loc_1A626
0001D6CA 6100 D1C0                  		bsr.w	BossDefeated
0001D6CE 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001D6D6                            
0001D6D6                            loc_1A626:
0001D6D6 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001D6DE 6400                       		bcc.s	locret_1A674
0001D6E0 42A8 003C                  		clr.l	$3C(a0)
0001D6E4 2268 0034                  		movea.l	$34(a0),a1
0001D6E8 5369 0032                  		subq.w	#1,$32(a1)
0001D6EC 4269 0030                  		clr.w	$30(a1)
0001D6F0 5528 0024                  		subq.b	#2,obRoutine(a0)
0001D6F4 4E75                       		rts	
0001D6F6                            ; ===========================================================================
0001D6F6                            
0001D6F6                            loc_1A646:
0001D6F6 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001D6FC 6D00                       		blt.s	loc_1A656
0001D6FE 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001D706                            
0001D706                            loc_1A656:
0001D706 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001D70E 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001D714 6D00                       		blt.s	locret_1A674
0001D716 4268 003E                  		clr.w	$3E(a0)
0001D71A 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001D720 4228 0029                  		clr.b	$29(a0)
0001D724                            
0001D724                            locret_1A674:
0001D724 4E75                       		rts	
0001D724 4E75                       		rts	
0001D726                            Map_EggCyl:	include	"_maps\FZ Eggman's Cylinders.asm"
0001D726                            ; --------------------------------------------------------------------------------
0001D726                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001D726                            ; --------------------------------------------------------------------------------
0001D726                            
0001D726                            SME_SCUpI:	
0001D726 0000 0000                  		dc.w SME_SCUpI_18-SME_SCUpI, SME_SCUpI_37-SME_SCUpI	
0001D72A 0000 0000                  		dc.w SME_SCUpI_60-SME_SCUpI, SME_SCUpI_93-SME_SCUpI	
0001D72E 0000 0000                  		dc.w SME_SCUpI_D0-SME_SCUpI, SME_SCUpI_112-SME_SCUpI	
0001D732 0000 0000                  		dc.w SME_SCUpI_159-SME_SCUpI, SME_SCUpI_1A0-SME_SCUpI	
0001D736 0000 0000                  		dc.w SME_SCUpI_1E7-SME_SCUpI, SME_SCUpI_22E-SME_SCUpI	
0001D73A 0000 0000                  		dc.w SME_SCUpI_275-SME_SCUpI, SME_SCUpI_2BC-SME_SCUpI	
0001D73E 06                         SME_SCUpI_18:	dc.b 6	
0001D73F A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D744 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D749 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D74E B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D753 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D758 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D75D 08                         SME_SCUpI_37:	dc.b 8	
0001D75E A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D763 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D768 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D76D B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D772 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D777 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D77C D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D781 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D786 0A                         SME_SCUpI_60:	dc.b $A	
0001D787 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D78C B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D791 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D796 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D79B B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D7A0 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D7A5 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D7AA F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D7AF F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D7B4 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D7B9 0C                         SME_SCUpI_93:	dc.b $C	
0001D7BA A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D7BF B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D7C4 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D7C9 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D7CE B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D7D3 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D7D8 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D7DD F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D7E2 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D7E7 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D7EC 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D7F1 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D7F6 0D                         SME_SCUpI_D0:	dc.b $D	
0001D7F7 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D7FC B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D801 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D806 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D80B B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D810 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D815 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D81A F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D81F F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D824 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D829 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D82E 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D833 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D838 0E                         SME_SCUpI_112:	dc.b $E	
0001D839 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D83E B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D843 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D848 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D84D B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D852 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D857 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D85C F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D861 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D866 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D86B 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D870 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D875 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001D87A A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D87F 0E                         SME_SCUpI_159:	dc.b $E	
0001D880 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D885 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D88A B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D88F B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D894 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D899 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D89E D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D8A3 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D8A8 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D8AD 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D8B2 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D8B7 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D8BC 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001D8C1 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D8C6 0E                         SME_SCUpI_1A0:	dc.b $E	
0001D8C7 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D8CC B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D8D1 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D8D6 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D8DB B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D8E0 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D8E5 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D8EA F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D8EF F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D8F4 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D8F9 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D8FE 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D903 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001D908 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D90D 0E                         SME_SCUpI_1E7:	dc.b $E	
0001D90E A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D913 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D918 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D91D B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D922 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D927 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D92C D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D931 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D936 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D93B 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D940 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D945 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D94A 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001D94F A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D954 0E                         SME_SCUpI_22E:	dc.b $E	
0001D955 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D95A B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D95F B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D964 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D969 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D96E D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D973 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D978 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D97D F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D982 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D987 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D98C 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D991 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001D996 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D99B 0E                         SME_SCUpI_275:	dc.b $E	
0001D99C A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D9A1 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D9A6 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D9AB B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D9B0 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D9B5 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D9BA D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D9BF F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D9C4 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D9C9 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D9CE 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D9D3 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D9D8 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001D9DD A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D9E2 02                         SME_SCUpI_2BC:	dc.b 2	
0001D9E3 F804 0068 F0               		dc.b $F8, 4, 0, $68, $F0	
0001D9E8 000C 006A F0               		dc.b 0, $C, 0, $6A, $F0	
0001D9EE 00                         		even
0001D9EE 00                         		even
0001D9EE                            		include	"_incObj\86 FZ Plasma Ball Launcher.asm"
0001D9EE                            ; ---------------------------------------------------------------------------
0001D9EE                            ; Object 86 - energy balls (FZ)
0001D9EE                            ; ---------------------------------------------------------------------------
0001D9EE                            
0001D9EE                            BossPlasma:
0001D9EE 7000                       		moveq	#0,d0
0001D9F0 1028 0024                  		move.b	obRoutine(a0),d0
0001D9F4 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001D9F8 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001D9FC                            ; ===========================================================================
0001D9FC 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001D9FE 0000                       		dc.w Obj86_Generator-Obj86_Index
0001DA00 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001DA02 0000                       		dc.w loc_1A962-Obj86_Index
0001DA04 0000                       		dc.w loc_1A982-Obj86_Index
0001DA06                            ; ===========================================================================
0001DA06                            
0001DA06                            Obj86_Main:	; Routine 0
0001DA06 317C 2588 0008             		move.w	#$2588,obX(a0)
0001DA0C 317C 053C 000C             		move.w	#$53C,obY(a0)
0001DA12 317C 0300 0002             		move.w	#$300,obGfx(a0)
0001DA18 217C 0000 0000 0004        		move.l	#Map_PLaunch,obMap(a0)
0001DA20 117C 0000 001C             		move.b	#0,obAnim(a0)
0001DA26 317C 0180 0018             		move.w	#$180,obPriority(a0)
0001DA2C 117C 0008 0017             		move.b	#8,obWidth(a0)
0001DA32 117C 0008 0016             		move.b	#8,obHeight(a0)
0001DA38 117C 0004 0001             		move.b	#4,obRender(a0)
0001DA3E 08E8 0007 0001             		bset	#7,obRender(a0)
0001DA44 5428 0024                  		addq.b	#2,obRoutine(a0)
0001DA48                            
0001DA48                            Obj86_Generator:; Routine 2
0001DA48 2268 0034                  		movea.l	$34(a0),a1
0001DA4C 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001DA52 6600                       		bne.s	loc_1A850
0001DA54 10BC 003F                  		move.b	#id_ExplosionBomb,(a0)
0001DA58 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001DA5E 4EF9 0000 F88C             		jmp	(DisplaySprite).l
0001DA64                            ; ===========================================================================
0001DA64                            
0001DA64                            loc_1A850:
0001DA64 117C 0000 001C             		move.b	#0,obAnim(a0)
0001DA6A 4A28 0029                  		tst.b	$29(a0)
0001DA6E 6700                       		beq.s	loc_1A86C
0001DA70 5428 0024                  		addq.b	#2,obRoutine(a0)
0001DA74 117C 0001 001C             		move.b	#1,obAnim(a0)
0001DA7A 117C 003E 0028             		move.b	#$3E,obSubtype(a0)
0001DA80                            
0001DA80                            loc_1A86C:
0001DA80 323C 0013                  		move.w	#$13,d1
0001DA84 343C 0008                  		move.w	#8,d2
0001DA88 363C 0011                  		move.w	#$11,d3
0001DA8C 3828 0008                  		move.w	obX(a0),d4
0001DA90 4EB9 0001 1C9A             		jsr	(SolidObject).l
0001DA96 3038 D008                  		move.w	(v_player+obX).w,d0
0001DA9A 9068 0008                  		sub.w	obX(a0),d0
0001DA9E 6B00                       		bmi.s	loc_1A89A
0001DAA0 0440 0140                  		subi.w	#$140,d0
0001DAA4 6B00                       		bmi.s	loc_1A89A
0001DAA6 4A28 0001                  		tst.b	obRender(a0)
0001DAAA 6A00 FA4C                  		bpl.w	Obj84_Delete
0001DAAE                            
0001DAAE                            loc_1A89A:
0001DAAE 43FA 0000                  		lea	Ani_PLaunch(pc),a1
0001DAB2 4EB9 0000 C938             		jsr	(AnimateSprite).l
0001DAB8 4EF9 0000 F88C             		jmp	(DisplaySprite).l
0001DABE                            ; ===========================================================================
0001DABE                            
0001DABE                            Obj86_MakeBalls:; Routine 4
0001DABE 4A28 0029                  		tst.b	$29(a0)
0001DAC2 6700 0000                  		beq.w	loc_1A954
0001DAC6 4228 0029                  		clr.b	$29(a0)
0001DACA D068 0030                  		add.w	$30(a0),d0
0001DACE 0240 001E                  		andi.w	#$1E,d0
0001DAD2 D4C0                       		adda.w	d0,a2
0001DAD4 5868 0030                  		addq.w	#4,$30(a0)
0001DAD8 4268 0032                  		clr.w	$32(a0)
0001DADC 7403                       		moveq	#3,d2
0001DADE                            
0001DADE                            Obj86_Loop:
0001DADE 4EB9 0000 FD2E             		jsr	(FindNextFreeObj).l
0001DAE4 6600 0000                  		bne.w	loc_1A954
0001DAE8 12BC 0086                  		move.b	#id_BossPlasma,(a1)
0001DAEC 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001DAF2 337C 053C 000C             		move.w	#$53C,obY(a1)
0001DAF8 137C 0008 0024             		move.b	#8,obRoutine(a1)
0001DAFE 337C 2300 0002             		move.w	#$2300,obGfx(a1)
0001DB04 237C 0000 0000 0004        		move.l	#Map_Plasma,obMap(a1)
0001DB0C 137C 000C 0016             		move.b	#$C,obHeight(a1)
0001DB12 137C 000C 0017             		move.b	#$C,obWidth(a1)
0001DB18 137C 0000 0020             		move.b	#0,obColType(a1)
0001DB1E 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001DB24 337C 003E 0028             		move.w	#$3E,obSubtype(a1)
0001DB2A 137C 0004 0001             		move.b	#4,obRender(a1)
0001DB30 08E9 0007 0001             		bset	#7,obRender(a1)
0001DB36 2348 0034                  		move.l	a0,$34(a1)
0001DB3A 4EB9 0000 3A0C             		jsr	(RandomNumber).l
0001DB40 3228 0032                  		move.w	$32(a0),d1
0001DB44 C3FC FFB1                  		muls.w	#-$4F,d1
0001DB48 0641 2578                  		addi.w	#$2578,d1
0001DB4C 0240 001F                  		andi.w	#$1F,d0
0001DB50 0440 0010                  		subi.w	#$10,d0
0001DB54 D041                       		add.w	d1,d0
0001DB56 3340 0030                  		move.w	d0,$30(a1)
0001DB5A 5268 0032                  		addq.w	#1,$32(a0)
0001DB5E 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001DB64 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001DB68                            
0001DB68                            loc_1A954:
0001DB68 4A68 0032                  		tst.w	$32(a0)
0001DB6C 6600                       		bne.s	loc_1A95E
0001DB6E 5428 0024                  		addq.b	#2,obRoutine(a0)
0001DB72                            
0001DB72                            loc_1A95E:
0001DB72 6000 FF0C                  		bra.w	loc_1A86C
0001DB76                            ; ===========================================================================
0001DB76                            
0001DB76                            loc_1A962:	; Routine 6
0001DB76 117C 0002 001C             		move.b	#2,obAnim(a0)
0001DB7C 4A68 0038                  		tst.w	$38(a0)
0001DB80 6600                       		bne.s	loc_1A97E
0001DB82 117C 0002 0024             		move.b	#2,obRoutine(a0)
0001DB88 2268 0034                  		movea.l	$34(a0),a1
0001DB8C 337C FFFF 0032             		move.w	#-1,$32(a1)
0001DB92                            
0001DB92                            loc_1A97E:
0001DB92 6000 FEEC                  		bra.w	loc_1A86C
0001DB96                            ; ===========================================================================
0001DB96                            
0001DB96                            loc_1A982:	; Routine 8
0001DB96 7000                       		moveq	#0,d0
0001DB98 1028 0025                  		move.b	ob2ndRout(a0),d0
0001DB9C 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001DBA0 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001DBA4 43FA 0000                  		lea	Ani_Plasma(pc),a1
0001DBA8 4EB9 0000 C938             		jsr	(AnimateSprite).l
0001DBAE 4EF9 0000 F88C             		jmp	(DisplaySprite).l
0001DBB4                            ; ===========================================================================
0001DBB4 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001DBB6 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001DBB8 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001DBBA                            ; ===========================================================================
0001DBBA                            
0001DBBA                            loc_1A9A6:
0001DBBA 3028 0030                  		move.w	$30(a0),d0
0001DBBE 9068 0008                  		sub.w	obX(a0),d0
0001DBC2 E940                       		asl.w	#4,d0
0001DBC4 3140 0010                  		move.w	d0,obVelX(a0)
0001DBC8 317C 00B4 0028             		move.w	#$B4,obSubtype(a0)
0001DBCE 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001DBD2 4E75                       		rts	
0001DBD4                            ; ===========================================================================
0001DBD4                            
0001DBD4                            loc_1A9C0:
0001DBD4 4A68 0010                  		tst.w	obVelX(a0)
0001DBD8 6700                       		beq.s	loc_1A9E6
0001DBDA 4EB9 0000 F878             		jsr	(SpeedToPos).l
0001DBE0 3028 0008                  		move.w	obX(a0),d0
0001DBE4 9068 0030                  		sub.w	$30(a0),d0
0001DBE8 6400                       		bcc.s	loc_1A9E6
0001DBEA 4268 0010                  		clr.w	obVelX(a0)
0001DBEE D168 0008                  		add.w	d0,obX(a0)
0001DBF2 2268 0034                  		movea.l	$34(a0),a1
0001DBF6 5369 0032                  		subq.w	#1,$32(a1)
0001DBFA                            
0001DBFA                            loc_1A9E6:
0001DBFA 117C 0000 001C             		move.b	#0,obAnim(a0)
0001DC00 5368 0028                  		subq.w	#1,obSubtype(a0)
0001DC04 6600                       		bne.s	locret_1AA1C
0001DC06 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001DC0A 117C 0001 001C             		move.b	#1,obAnim(a0)
0001DC10 117C 009A 0020             		move.b	#$9A,obColType(a0)
0001DC16 317C 00B4 0028             		move.w	#$B4,obSubtype(a0)
0001DC1C 7000                       		moveq	#0,d0
0001DC1E 3038 D008                  		move.w	(v_player+obX).w,d0
0001DC22 9068 0008                  		sub.w	obX(a0),d0
0001DC26 3140 0010                  		move.w	d0,obVelX(a0)
0001DC2A 317C 0140 0012             		move.w	#$140,obVelY(a0)
0001DC30                            
0001DC30                            locret_1AA1C:
0001DC30 4E75                       		rts	
0001DC32                            ; ===========================================================================
0001DC32                            
0001DC32                            loc_1AA1E:
0001DC32 4EB9 0000 F878             		jsr	(SpeedToPos).l
0001DC38 0C68 05E0 000C             		cmpi.w	#$5E0,obY(a0)
0001DC3E 6400                       		bcc.s	loc_1AA34
0001DC40 5368 0028                  		subq.w	#1,obSubtype(a0)
0001DC44 6700                       		beq.s	loc_1AA34
0001DC46 4E75                       		rts	
0001DC48                            ; ===========================================================================
0001DC48                            
0001DC48                            loc_1AA34:
0001DC48 2268 0034                  		movea.l	$34(a0),a1
0001DC4C 5369 0038                  		subq.w	#1,$38(a1)
0001DC50 6000 F8A6                  		bra.w	Obj84_Delete
0001DC50 6000 F8A6                  		bra.w	Obj84_Delete
0001DC54                            		include	"_anim\Plasma Ball Launcher.asm"
0001DC54                            ; ---------------------------------------------------------------------------
0001DC54                            ; Animation script - energy ball launcher (FZ)
0001DC54                            ; ---------------------------------------------------------------------------
0001DC54 0000                       Ani_PLaunch:	dc.w @red-Ani_PLaunch
0001DC56 0000                       		dc.w @redsparking-Ani_PLaunch
0001DC58 0000                       		dc.w @whitesparking-Ani_PLaunch
0001DC5A 7E00 FF                    @red:		dc.b $7E, 0, afEnd
0001DC5E 00                         		even
0001DC5E 0100 0200 03FF             @redsparking:	dc.b 1,	0, 2, 0, 3, afEnd
0001DC64                            		even
0001DC64 0101 0201 03FF             @whitesparking:	dc.b 1,	1, 2, 1, 3, afEnd
0001DC6A                            		even
0001DC6A                            		even
0001DC6A                            Map_PLaunch:	include	"_maps\Plasma Ball Launcher.asm"
0001DC6A                            ; ---------------------------------------------------------------------------
0001DC6A                            ; Sprite mappings - energy ball	launcher (FZ)
0001DC6A                            ; ---------------------------------------------------------------------------
0001DC6A                            Map_PLaunch_internal:
0001DC6A 0000                       		dc.w @red-Map_PLaunch_internal
0001DC6C 0000                       		dc.w @white-Map_PLaunch_internal
0001DC6E 0000                       		dc.w @sparking1-Map_PLaunch_internal
0001DC70 0000                       		dc.w @sparking2-Map_PLaunch_internal
0001DC72 01                         @red:		dc.b 1
0001DC73 F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001DC78 01                         @white:		dc.b 1
0001DC79 F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001DC7E 01                         @sparking1:	dc.b 1
0001DC7F F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001DC84 01                         @sparking2:	dc.b 1
0001DC85 F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001DC8A                            		even
0001DC8A                            		even
0001DC8A                            		include	"_anim\Plasma Balls.asm"
0001DC8A                            ; ---------------------------------------------------------------------------
0001DC8A                            ; Animation script - energy balls (FZ)
0001DC8A                            ; ---------------------------------------------------------------------------
0001DC8A 0000                       Ani_Plasma:	dc.w @full-Ani_Plasma
0001DC8C 0000                       		dc.w @short-Ani_Plasma
0001DC8E 0100 0A08 0A01 0A09 0A06+  @full:		dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001DC9D 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001DCAC 0A05 FF                    		dc.b $A, 5, afEnd
0001DCB0 00                         		even
0001DCB0 0006 0501 0507 0501 05FF   @short:		dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	afEnd
0001DCBA                            		even
0001DCBA                            		even
0001DCBA                            Map_Plasma:	include	"_maps\Plasma Balls.asm"
0001DCBA                            ; ---------------------------------------------------------------------------
0001DCBA                            ; Sprite mappings - energy balls (FZ)
0001DCBA                            ; ---------------------------------------------------------------------------
0001DCBA                            Map_Plasma_internal:
0001DCBA 0000                       		dc.w @fuzzy1-Map_Plasma_internal
0001DCBC 0000                       		dc.w @fuzzy2-Map_Plasma_internal
0001DCBE 0000                       		dc.w @white1-Map_Plasma_internal
0001DCC0 0000                       		dc.w @white2-Map_Plasma_internal
0001DCC2 0000                       		dc.w @white3-Map_Plasma_internal
0001DCC4 0000                       		dc.w @white4-Map_Plasma_internal
0001DCC6 0000                       		dc.w @fuzzy3-Map_Plasma_internal
0001DCC8 0000                       		dc.w @fuzzy4-Map_Plasma_internal
0001DCCA 0000                       		dc.w @fuzzy5-Map_Plasma_internal
0001DCCC 0000                       		dc.w @fuzzy6-Map_Plasma_internal
0001DCCE 0000                       		dc.w @blank-Map_Plasma_internal
0001DCD0 02                         @fuzzy1:	dc.b 2
0001DCD1 F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001DCD6 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001DCDB 02                         @fuzzy2:	dc.b 2
0001DCDC F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001DCE1 F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001DCE6 02                         @white1:	dc.b 2
0001DCE7 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001DCEC 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001DCF1 02                         @white2:	dc.b 2
0001DCF2 F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001DCF7 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001DCFC 02                         @white3:	dc.b 2
0001DCFD F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001DD02 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001DD07 02                         @white4:	dc.b 2
0001DD08 F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001DD0D F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001DD12 01                         @fuzzy3:	dc.b 1
0001DD13 F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001DD18 01                         @fuzzy4:	dc.b 1
0001DD19 F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001DD1E 02                         @fuzzy5:	dc.b 2
0001DD1F F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001DD24 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001DD29 02                         @fuzzy6:	dc.b 2
0001DD2A F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001DD2F F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001DD34 00                         @blank:		dc.b 0
0001DD36 00                         		even
0001DD36 00                         		even
0001DD36                            
0001DD36                            		include	"_incObj\3E Prison Capsule.asm"
0001DD36                            ; ---------------------------------------------------------------------------
0001DD36                            ; Object 3E - prison capsule
0001DD36                            ; ---------------------------------------------------------------------------
0001DD36                            
0001DD36                            Prison:
0001DD36 7000                       		moveq	#0,d0
0001DD38 1028 0024                  		move.b	obRoutine(a0),d0
0001DD3C 323B 0000                  		move.w	Pri_Index(pc,d0.w),d1
0001DD40 4EBB 1000                  		jsr	Pri_Index(pc,d1.w)
0001DD60 4EF9 0000 F88C             		jmp	(DisplaySprite).l
0001DD66                            
0001DD66                            	@delete:
0001DD66 4EF9 0000 F8CC             		jmp	(DeleteObject).l
0001DD6C                            ; ===========================================================================
0001DD6C 0000                       Pri_Index:	dc.w Pri_Main-Pri_Index
0001DD6E 0000                       		dc.w Pri_BodyMain-Pri_Index
0001DD70 0000                       		dc.w Pri_Switched-Pri_Index
0001DD72 0000                       		dc.w Pri_Explosion-Pri_Index
0001DD74 0000                       		dc.w Pri_Explosion-Pri_Index
0001DD76 0000                       		dc.w Pri_Explosion-Pri_Index
0001DD78 0000                       		dc.w Pri_Animals-Pri_Index
0001DD7A 0000                       		dc.w Pri_EndAct-Pri_Index
0001DD7C                            
0001DD7C =00000030                  pri_origY:	equ $30		; original y-axis position
0001DD7C                            
0001DD7C 0220 0400                  Pri_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001DD80 040C 0501                  		dc.b 4,	$C, 5, 1
0001DD84 0610 0403                  		dc.b 6,	$10, 4,	3
0001DD88 0810 0305                  		dc.b 8,	$10, 3,	5
0001DD8C                            ; ===========================================================================
0001DD8C                            
0001DD8C                            Pri_Main:	; Routine 0
0001DD8C 217C 0000 0000 0004        		move.l	#Map_Pri,obMap(a0)
0001DD94 317C 049D 0002             		move.w	#$49D,obGfx(a0)
0001DD9A 117C 0004 0001             		move.b	#4,obRender(a0)
0001DDA0 3168 000C 0030             		move.w	obY(a0),pri_origY(a0)
0001DDA6 7000                       		moveq	#0,d0
0001DDA8 1028 0028                  		move.b	obSubtype(a0),d0
0001DDAC E548                       		lsl.w	#2,d0
0001DDAE 43FB 00CC                  		lea	Pri_Var(pc,d0.w),a1
0001DDB2 1159 0024                  		move.b	(a1)+,obRoutine(a0)
0001DDB6 1159 0014                  		move.b	(a1)+,obActWid(a0)
0001DDBA 1159 0018                  		move.b	(a1)+,obPriority(a0)
0001DDBE 3028 0018                  		move.w obPriority(a0),d0 
0001DDC2 E248                       		lsr.w #1,d0 
0001DDC4 0240 0380                  		andi.w #$380,d0 
0001DDC8 3140 0018                  		move.w d0,obPriority(a0)		
0001DDCC 1159 001A                  		move.b	(a1)+,obFrame(a0)
0001DDD0 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001DDD4 6600                       		bne.s	@not02		; if not, branch
0001DDD6                            
0001DDD6 117C 0006 0020             		move.b	#6,obColType(a0)
0001DDDC 117C 0008 0021             		move.b	#8,obColProp(a0)
0001DDE2                            
0001DDE2                            	@not02:
0001DDE2 4E75                       		rts	
0001DDE4                            ; ===========================================================================
0001DDE4                            
0001DDE4                            Pri_BodyMain:	; Routine 2
0001DDE4 0C38 0002 F7A7             		cmpi.b	#2,(v_bossstatus).w
0001DDEA 6700                       		beq.s	@chkopened
0001DDEC 323C 002B                  		move.w	#$2B,d1
0001DDF0 343C 0018                  		move.w	#$18,d2
0001DDF4 363C 0018                  		move.w	#$18,d3
0001DDF8 3828 0008                  		move.w	obX(a0),d4
0001DDFC 4EF9 0001 1C9A             		jmp	(SolidObject).l
0001DE02                            ; ===========================================================================
0001DE02                            
0001DE02                            @chkopened:
0001DE02 4A28 0025                  		tst.b	ob2ndRout(a0)	; has the prison been opened?
0001DE06 6700                       		beq.s	@open		; if yes, branch
0001DE08 4228 0025                  		clr.b	ob2ndRout(a0)
0001DE0C 08B8 0003 D022             		bclr	#3,(v_player+obStatus).w
0001DE12 08F8 0001 D022             		bset	#1,(v_player+obStatus).w
0001DE18                            
0001DE18                            	@open:
0001DE18 117C 0002 001A             		move.b	#2,obFrame(a0)	; use frame number 2 (destroyed	prison)
0001DE1E 4E75                       		rts	
0001DE20                            ; ===========================================================================
0001DE20                            
0001DE20                            Pri_Switched:	; Routine 4
0001DE20 323C 0017                  		move.w	#$17,d1
0001DE24 343C 0008                  		move.w	#8,d2
0001DE28 363C 0008                  		move.w	#8,d3
0001DE2C 3828 0008                  		move.w	obX(a0),d4
0001DE30 4EB9 0001 1C9A             		jsr	(SolidObject).l
0001DE36 43F9 0000 0000             		lea	(Ani_Pri).l,a1
0001DE3C 4EB9 0000 C938             		jsr	(AnimateSprite).l
0001DE42 3168 0030 000C             		move.w	pri_origY(a0),obY(a0)
0001DE48 4A28 0025                  		tst.b	ob2ndRout(a0)	; has prison already been opened?
0001DE4C 6700                       		beq.s	@open2		; if yes, branch
0001DE4E                            
0001DE4E 5068 000C                  		addq.w	#8,obY(a0)
0001DE52 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0001DE58 317C 003C 001E             		move.w	#60,obTimeFrame(a0) ; set time between animal spawns
0001DE5E 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
0001DE62 4238 F7AA                  		clr.b	(f_lockscreen).w ; lock screen position
0001DE66 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock controls
0001DE6C 31FC 0800 F602             		move.w	#(btnR<<8),(v_jpadhold2).w ; make Sonic run to the right
0001DE72 4228 0025                  		clr.b	ob2ndRout(a0)
0001DE76 08B8 0003 D022             		bclr	#3,(v_player+obStatus).w
0001DE7C 08F8 0001 D022             		bset	#1,(v_player+obStatus).w
0001DE82                            
0001DE82                            	@open2:
0001DE82 4E75                       		rts	
0001DE84                            ; ===========================================================================
0001DE84                            
0001DE84                            Pri_Explosion:	; Routine 6, 8, $A
0001DE84 7007                       		moveq	#7,d0
0001DE86 C038 FE0F                  		and.b	(v_vbla_byte).w,d0
0001DE8A 6600                       		bne.s	@noexplosion
0001DE8C 4EB9 0000 FD18             		jsr	(FindFreeObj).l
0001DE92 6600                       		bne.s	@noexplosion
0001DE94 12BC 003F                  		move.b	#id_ExplosionBomb,0(a1) ; load explosion object
0001DE98 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001DE9E 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001DEA4 4EB9 0000 3A0C             		jsr	(RandomNumber).l
0001DEAA 7200                       		moveq	#0,d1
0001DEAC 1200                       		move.b	d0,d1
0001DEAE E409                       		lsr.b	#2,d1
0001DEB0 0441 0020                  		subi.w	#$20,d1
0001DEB4 D369 0008                  		add.w	d1,obX(a1)
0001DEB8 E048                       		lsr.w	#8,d0
0001DEBA E608                       		lsr.b	#3,d0
0001DEBC D169 000C                  		add.w	d0,obY(a1)
0001DEC0                            
0001DEC0                            	@noexplosion:
0001DEC0 5368 001E                  		subq.w	#1,obTimeFrame(a0)
0001DEC4 6700                       		beq.s	@makeanimal
0001DEC6 4E75                       		rts	
0001DEC8                            ; ===========================================================================
0001DEC8                            
0001DEC8                            @makeanimal:
0001DEC8 11FC 0002 F7A7             		move.b	#2,(v_bossstatus).w
0001DECE 117C 000C 0024             		move.b	#$C,obRoutine(a0)	; replace explosions with animals
0001DED4 117C 0006 001A             		move.b	#6,obFrame(a0)
0001DEDA 317C 0096 001E             		move.w	#150,obTimeFrame(a0)
0001DEE0 0668 0020 000C             		addi.w	#$20,obY(a0)
0001DEE6 7C07                       		moveq	#7,d6
0001DEE8 3A3C 009A                  		move.w	#$9A,d5
0001DEEC 78E4                       		moveq	#-$1C,d4
0001DEEE                            
0001DEEE                            	@loop:
0001DEEE 4EB9 0000 FD18             		jsr	(FindFreeObj).l
0001DEF4 6600                       		bne.s	@fail
0001DEF6 12BC 0028                  		move.b	#id_Animals,0(a1) ; load animal object
0001DEFA 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001DF00 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001DF06 D969 0008                  		add.w	d4,obX(a1)
0001DF0A 5E44                       		addq.w	#7,d4
0001DF0C 3345 0036                  		move.w	d5,$36(a1)
0001DF10 5145                       		subq.w	#8,d5
0001DF12 51CE FFDA                  		dbf	d6,@loop	; repeat 7 more	times
0001DF16                            
0001DF16                            	@fail:
0001DF16 4E75                       		rts	
0001DF18                            ; ===========================================================================
0001DF18                            
0001DF18                            Pri_Animals:	; Routine $C
0001DF18 7007                       		moveq	#7,d0
0001DF1A C038 FE0F                  		and.b	(v_vbla_byte).w,d0
0001DF1E 6600                       		bne.s	@noanimal
0001DF20 4EB9 0000 FD18             		jsr	(FindFreeObj).l
0001DF26 6600                       		bne.s	@noanimal
0001DF28 12BC 0028                  		move.b	#id_Animals,0(a1) ; load animal object
0001DF2C 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001DF32 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001DF38 4EB9 0000 3A0C             		jsr	(RandomNumber).l
0001DF3E 0240 001F                  		andi.w	#$1F,d0
0001DF42 5D40                       		subq.w	#6,d0
0001DF44 4A41                       		tst.w	d1
0001DF46 6A00                       		bpl.s	@ispositive
0001DF48 4440                       		neg.w	d0
0001DF4A                            
0001DF4A                            	@ispositive:
0001DF4A D169 0008                  		add.w	d0,obX(a1)
0001DF4E 337C 000C 0036             		move.w	#$C,$36(a1)
0001DF54                            
0001DF54                            	@noanimal:
0001DF54 5368 001E                  		subq.w	#1,obTimeFrame(a0)
0001DF58 6600                       		bne.s	@wait
0001DF5A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001DF5E 317C 00B4 001E             		move.w	#180,obTimeFrame(a0)
0001DF64                            
0001DF64                            	@wait:
0001DF64 4E75                       		rts	
0001DF66                            ; ===========================================================================
0001DF66                            
0001DF66                            Pri_EndAct:	; Routine $E
0001DF66 703E                       		moveq	#$3E,d0
0001DF68 7228                       		moveq	#id_Animals,d1
0001DF6A 7440                       		moveq	#$40,d2
0001DF6C 43F8 D040                  		lea	(v_objspace+$40).w,a1 ; load object RAM
0001DF70                            
0001DF70                            	@findanimal:
0001DF70 B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001DF72 6700                       		beq.s	@found		; if yes, branch
0001DF74 D2C2                       		adda.w	d2,a1		; next object RAM
0001DF76 51C8 FFF8                  		dbf	d0,@findanimal	; repeat $3E times
0001DF7A                            
0001DF7A 4EB9 0001 0FBC             		jsr	(GotThroughAct1).l
0001DF80 4EF9 0000 F8CC             		jmp	(DeleteObject).l
0001DF86                            
0001DF86                            	@found:
0001DF86 4E75                       		rts	
0001DF86 4E75                       		rts	
0001DF88                            		include	"_anim\Prison Capsule.asm"
0001DF88                            ; ---------------------------------------------------------------------------
0001DF88                            ; Animation script - prison capsule
0001DF88                            ; ---------------------------------------------------------------------------
0001DF88 0000                       Ani_Pri:	dc.w @switchflash-Ani_Pri
0001DF8A 0000                       		dc.w @switchflash-Ani_Pri
0001DF8C 0201 03FF                  @switchflash:	dc.b 2,	1, 3, afEnd
0001DF90                            		even
0001DF90                            		even
0001DF90                            Map_Pri:	include	"_maps\Prison Capsule.asm"
0001DF90                            ; ---------------------------------------------------------------------------
0001DF90                            ; Sprite mappings - prison capsule
0001DF90                            ; ---------------------------------------------------------------------------
0001DF90                            Map_Pri_internal:
0001DF90 0000                       		dc.w @capsule-Map_Pri_internal
0001DF92 0000                       		dc.w @switch1-Map_Pri_internal
0001DF94 0000                       		dc.w @broken-Map_Pri_internal
0001DF96 0000                       		dc.w @switch2-Map_Pri_internal
0001DF98 0000                       		dc.w @unusedthing1-Map_Pri_internal
0001DF9A 0000                       		dc.w @unusedthing2-Map_Pri_internal
0001DF9C 0000                       		dc.w @blank-Map_Pri_internal
0001DF9E 07                         @capsule:	dc.b 7
0001DF9F E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001DFA4 E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001DFA9 E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001DFAE F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001DFB3 F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001DFB8 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001DFBD 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001DFC2 01                         @switch1:	dc.b 1
0001DFC3 F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001DFC8 06                         @broken:	dc.b 6
0001DFC9 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001DFCE 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001DFD3 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001DFD8 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001DFDD 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001DFE2 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001DFE7 01                         @switch2:	dc.b 1
0001DFE8 F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001DFED 02                         @unusedthing1:	dc.b 2
0001DFEE E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001DFF3 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001DFF8 01                         @unusedthing2:	dc.b 1
0001DFF9 F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001DFFE 00                         @blank:		dc.b 0
0001E000 00                         		even
0001E000 00                         		even
0001E000                            
0001E000                            		include	"_incObj\sub ReactToItem.asm"
0001E000                            ; ---------------------------------------------------------------------------
0001E000                            ; Subroutine to react to obColType(a0)
0001E000                            ; ---------------------------------------------------------------------------
0001E000                            
0001E000                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E000                            
0001E000                            
0001E000                            ReactToItem:
0001E000 4E71                       		nop	
0001E002 3428 0008                  		move.w	obX(a0),d2	; load Sonic's x-axis position
0001E006 3628 000C                  		move.w	obY(a0),d3	; load Sonic's y-axis position
0001E00A 5142                       		subq.w	#8,d2
0001E00C 7A00                       		moveq	#0,d5
0001E00E 1A28 0016                  		move.b	obHeight(a0),d5	; load Sonic's height
0001E012 5705                       		subq.b	#3,d5
0001E014 9645                       		sub.w	d5,d3
0001E016 0C28 0071 001A             		cmpi.b	#fr_Duck,obFrame(a0) ; is Sonic ducking?
0001E01C 6600                       		bne.s	@notducking	; if not, branch
0001E01E 0643 000C                  		addi.w	#$C,d3
0001E022 7A0A                       		moveq	#$A,d5
0001E024                            
0001E024                            	@notducking:
0001E024 383C 0010                  		move.w	#$10,d4
0001E028 DA45                       		add.w	d5,d5
0001E02A 43F8 D800                  		lea	(v_objspace+$800).w,a1 ; set object RAM start address
0001E02E 3C3C 005F                  		move.w	#$5F,d6
0001E032                            
0001E032                            @loop:
0001E032 4A29 0001                  		tst.b	obRender(a1)
0001E036 6A00                       		bpl.s	@next
0001E038 1029 0020                  		move.b	obColType(a1),d0 ; load collision type
0001E03C 6600                       		bne.s	@proximity	; if nonzero, branch
0001E03E                            
0001E03E                            	@next:
0001E03E 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001E042 51CE FFEE                  		dbf	d6,@loop	; repeat $5F more times
0001E046                            
0001E046 7000                       		moveq	#0,d0
0001E048 4E75                       		rts	
0001E04A                            ; ===========================================================================
0001E04A                            @sizes:		;   width, height
0001E04A 1414                       		dc.b  $14, $14		; $01
0001E04C 0C14                       		dc.b   $C, $14		; $02
0001E04E 140C                       		dc.b  $14,  $C		; $03
0001E050 0410                       		dc.b	4, $10		; $04
0001E052 0C12                       		dc.b   $C, $12		; $05
0001E054 1010                       		dc.b  $10, $10		; $06
0001E056 0606                       		dc.b	6,   6		; $07
0001E058 180C                       		dc.b  $18,  $C		; $08
0001E05A 0C10                       		dc.b   $C, $10		; $09
0001E05C 100C                       		dc.b  $10,  $C		; $0A
0001E05E 0808                       		dc.b	8,   8		; $0B
0001E060 1410                       		dc.b  $14, $10		; $0C
0001E062 1408                       		dc.b  $14,   8		; $0D
0001E064 0E0E                       		dc.b   $E,  $E		; $0E
0001E066 1818                       		dc.b  $18, $18		; $0F
0001E068 2810                       		dc.b  $28, $10		; $10
0001E06A 1018                       		dc.b  $10, $18		; $11
0001E06C 0810                       		dc.b	8, $10		; $12
0001E06E 2070                       		dc.b  $20, $70		; $13
0001E070 4020                       		dc.b  $40, $20		; $14
0001E072 8020                       		dc.b  $80, $20		; $15
0001E074 2020                       		dc.b  $20, $20		; $16
0001E076 0808                       		dc.b	8,   8		; $17
0001E078 0404                       		dc.b	4,   4		; $18
0001E07A 2008                       		dc.b  $20,   8		; $19
0001E07C 0C0C                       		dc.b   $C,  $C		; $1A
0001E07E 0804                       		dc.b	8,   4		; $1B
0001E080 1804                       		dc.b  $18,   4		; $1C
0001E082 2804                       		dc.b  $28,   4		; $1D
0001E084 0408                       		dc.b	4,   8		; $1E
0001E086 0418                       		dc.b	4, $18		; $1F
0001E088 0428                       		dc.b	4, $28		; $20
0001E08A 0420                       		dc.b	4, $20		; $21
0001E08C 1818                       		dc.b  $18, $18		; $22
0001E08E 0C18                       		dc.b   $C, $18		; $23
0001E090 4808                       		dc.b  $48,   8		; $24
0001E092                            ; ===========================================================================
0001E092                            
0001E092                            @proximity:
0001E092 0240 003F                  		andi.w	#$3F,d0
0001E096 D040                       		add.w	d0,d0
0001E098 45FB 00AE                  		lea	@sizes-2(pc,d0.w),a2
0001E09C 7200                       		moveq	#0,d1
0001E09E 121A                       		move.b	(a2)+,d1
0001E0A0 3029 0008                  		move.w	obX(a1),d0
0001E0A4 9041                       		sub.w	d1,d0
0001E0A6 9042                       		sub.w	d2,d0
0001E0A8 6400                       		bcc.s	@outsidex	; branch if not touching
0001E0AA D241                       		add.w	d1,d1
0001E0AC D041                       		add.w	d1,d0
0001E0AE 6500                       		bcs.s	@withinx	; branch if touching
0001E0B0 6000 FF8C                  		bra.w	@next
0001E0B4                            ; ===========================================================================
0001E0B4                            
0001E0B4                            @outsidex:
0001E0B4 6100 0000                  		bsr	React_ChkWaterTag	;TIS
0001E0B8 B044                       		cmp.w	d4,d0
0001E0BA 6200 FF82                  		bhi.w	@next
0001E0BE                            
0001E0BE                            @withinx:
0001E0BE 7200                       		moveq	#0,d1
0001E0C0 121A                       		move.b	(a2)+,d1
0001E0C2 3029 000C                  		move.w	obY(a1),d0
0001E0C6 9041                       		sub.w	d1,d0
0001E0C8 9043                       		sub.w	d3,d0
0001E0CA 6400                       		bcc.s	@outsidey	; branch if not touching
0001E0CC D241                       		add.w	d1,d1
0001E0CE D240                       		add.w	d0,d1
0001E0D0 6500                       		bcs.s	@withiny	; branch if touching
0001E0D2 6000 FF6A                  		bra.w	@next
0001E0D6                            
0001E0D6                            ; ===========================================================================
0001E0D6                            
0001E0D6                            @outsidey:
0001E0D6 6100 0000                  		bsr	React_ChkWaterTag	;TIS
0001E0DA B045                       		cmp.w	d5,d0
0001E0DC 6200 FF60                  		bhi.w	@next
0001E0E0                            
0001E0E0                            @withiny:
0001E0E0                            	@chktype:
0001E0E0 0C38 0004 FE10                     	cmpi.b	#id_SYZ,(v_zone).w   ;TIS is level GHZZ?
0001E0E6 6600 0000                          	bne	NotGHZReact  ;TIS
0001E0EA 1229 0020                          	move.b	obColType(a1),d1 ;TIS load collision type
0001E0EE 0C01 0096                          	cmpi.b	#$96,d1        ;TIS - is collision type $96?
0001E0F2 6700 0000                          	beq	React_WaterTag    ;TIS if yes, branch
0001E0F6 0C01 0094                          	cmpi.b	#$94,d1        ;TIS - is collision type $94?
0001E0FA 6700 0000                          	beq	React_WaterTag    ;TIS if yes, branch
0001E0FE 0C01 0095                          	cmpi.b	#$95,d1        ;TIS - is collision type $95?
0001E102 6700 0000                          	beq	React_WaterTag    ;TIS if yes, branch
0001E106                            NotGHZReact:                      ;TIS
0001E106 1229 0020                  		move.b	obColType(a1),d1 ; load collision type
0001E10A 0201 00C0                  		andi.b	#$C0,d1        ; is obColType $40 or higher?
0001E10E 6700 0000                  		beq.w	React_Enemy    ; if not, branch
0001E112 0C01 00C0                  		cmpi.b	#$C0,d1		; is obColType $C0 or higher?
0001E116 6700 0000                  		beq.w	React_Special	; if yes, branch
0001E11A 4A01                       		tst.b	d1		; is obColType $80-$BF?
0001E11C 6B00 0000                  		bmi.w	React_ChkHurt	; if yes, branch
0001E120                            
0001E120                            ; obColType is $40-$7F (powerups)
0001E120                            
0001E120 1029 0020                  		move.b	obColType(a1),d0
0001E124 0200 003F                  		andi.b	#$3F,d0
0001E128 0C00 0006                  		cmpi.b	#6,d0		; is collision type $46	?
0001E12C 6700                       		beq.s	React_Monitor	; if yes, branch
0001E12E 0C68 005A 0030             		cmpi.w	#90,$30(a0)	; is Sonic invincible?
0001E134 6400 0000                  		bcc.w	@invincible	; if yes, branch
0001E138 5429 0024                  		addq.b	#2,obRoutine(a1) ; advance the object's routine counter
0001E13C                            
0001E13C                            	@invincible:
0001E13C 4E75                       		rts	
0001E13E                            ; ===========================================================================
0001E13E                            
0001E13E                            React_Monitor:
0001E13E 4A68 0012                  		tst.w	obVelY(a0)	; is Sonic moving upwards?
0001E142 6A00                       		bpl.s	@movingdown	; if not, branch
0001E144                            
0001E144 3028 000C                  		move.w	obY(a0),d0
0001E148 0440 0010                  		subi.w	#$10,d0
0001E14C B069 000C                  		cmp.w	obY(a1),d0
0001E150 6500                       		bcs.s	@donothing
0001E152 4468 0012                  		neg.w	obVelY(a0)	; reverse Sonic's vertical speed
0001E156 337C FE80 0012             		move.w	#-$180,obVelY(a1)
0001E15C 4A29 0025                  		tst.b	ob2ndRout(a1)
0001E160 6600                       		bne.s	@donothing
0001E162 5829 0025                  		addq.b	#4,ob2ndRout(a1) ; advance the monitor's routine counter
0001E166 4E75                       		rts	
0001E168                            ; ===========================================================================
0001E168                            
0001E168                            @movingdown:
0001E168 0C28 0002 001C             		cmpi.b	#id_Roll,obAnim(a0) ; is Sonic rolling/jumping?
0001E16E 6600                       		bne.s	@donothing
0001E170 4468 0012                  		neg.w	obVelY(a0)	; reverse Sonic's y-motion
0001E174 5429 0024                  		addq.b	#2,obRoutine(a1) ; advance the monitor's routine counter
0001E178                            
0001E178                            	@donothing:
0001E178 4E75                       		rts	
0001E17A                            ; ===========================================================================
0001E17A                            
0001E17A                            React_Enemy:
0001E17A 4A38 FE2D                  		tst.b	(v_invinc).w	; is Sonic invincible?
0001E17E 6600                       		bne.s	@donthurtsonic	; if yes, branch
0001E180 0C28 001F 001C             		cmpi.b	#id_Spindash,obAnim(a0)	; is Sonic Spin Dashing? 
0001E186 6700 0000                  		beq.w	@donthurtsonic	; if yes, branch
0001E18A 0C28 0002 001C             		cmpi.b	#id_Roll,obAnim(a0) ; is Sonic rolling/jumping?
0001E190 6600 0000                  		bne.w	React_ChkHurt	; if not, branch
0001E194                            
0001E194                            	@donthurtsonic:
0001E194 4A29 0021                  		tst.b	obColProp(a1)
0001E198 6700                       		beq.s	breakenemy
0001E19A                            
0001E19A 4468 0010                  		neg.w	obVelX(a0)	; repel Sonic
0001E19E 4468 0012                  		neg.w	obVelY(a0)
0001E1A2 E0E8 0010                  		asr	obVelX(a0)
0001E1A6 E0E8 0012                  		asr	obVelY(a0)
0001E1AA 137C 0000 0020             		move.b	#0,obColType(a1)
0001E1B0 5329 0021                  		subq.b	#1,obColProp(a1)
0001E1B4 6600                       		bne.s	@flagnotclear
0001E1B6 08E9 0007 0022             		bset	#7,obStatus(a1)
0001E1BC                            
0001E1BC                            	@flagnotclear:
0001E1BC 4E75                       		rts	
0001E1BE                            ; ===========================================================================
0001E1BE                            
0001E1BE                            breakenemy:
0001E1BE 08E9 0007 0022             		bset	#7,obStatus(a1)
0001E1C4 7000                       		moveq	#0,d0
0001E1C6 3038 F7D0                  		move.w	(v_itembonus).w,d0
0001E1CA 5478 F7D0                  		addq.w	#2,(v_itembonus).w ; add 2 to item bonus counter
0001E1CE 0C40 0006                  		cmpi.w	#6,d0
0001E1D2 6500                       		bcs.s	@bonusokay
0001E1D4 7006                       		moveq	#6,d0		; max bonus is lvl6
0001E1D6                            
0001E1D6                            	@bonusokay:
0001E1D6 3340 003E                  		move.w	d0,$3E(a1)
0001E1DA 303B 0000                  		move.w	@points(pc,d0.w),d0
0001E1DE 0C78 0020 F7D0             		cmpi.w	#$20,(v_itembonus).w ; have 16 enemies been destroyed?
0001E1E4 6500                       		bcs.s	@lessthan16	; if not, branch
0001E1E6 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001E1EA 337C 000A 003E             		move.w	#$A,$3E(a1)
0001E1F0                            
0001E1F0                            	@lessthan16:
0001E1F0 6100 0000                  		bsr.w	AddPoints
0001E1F4 12BC 0027                  		move.b	#id_ExplosionItem,0(a1) ; change object to explosion
0001E1F8 137C 0000 0024             		move.b	#0,obRoutine(a1)
0001E1FE 4A68 0012                  		tst.w	obVelY(a0)
0001E202 6B00                       		bmi.s	@bouncedown
0001E204 3028 000C                  		move.w	obY(a0),d0
0001E208 B069 000C                  		cmp.w	obY(a1),d0
0001E20C 6400                       		bcc.s	@bounceup
0001E20E 4468 0012                  		neg.w	obVelY(a0)
0001E212 4E75                       		rts	
0001E214                            ; ===========================================================================
0001E214                            
0001E214                            	@bouncedown:
0001E214 0668 0100 0012             		addi.w	#$100,obVelY(a0)
0001E21A 4E75                       		rts	
0001E21C                            
0001E21C                            	@bounceup:
0001E21C 0468 0100 0012             		subi.w	#$100,obVelY(a0)
0001E222 4E75                       		rts	
0001E224                            
0001E224 000A 0014 0032 0064        @points:	dc.w 10, 20, 50, 100	; points awarded div 10
0001E22C                            
0001E22C                            ; ===========================================================================
0001E22C                            
0001E22C                            React_Caterkiller:
0001E22C 08E9 0007 0022             		bset	#7,obStatus(a1)
0001E232                            
0001E232                            React_ChkHurt:
0001E232 4A38 FE2D                  		tst.b	(v_invinc).w	; is Sonic invincible?
0001E236 6700                       		beq.s	notinvincible	; if not, branch
0001E238                            
0001E238                            	isflashing:
0001E238 70FF                       		moveq	#-1,d0
0001E23A 4E75                       		rts	
0001E23C                            ; ===========================================================================
0001E23C                            
0001E23C                            	notinvincible:
0001E23C 4E71                       		nop	
0001E23E 4A68 0030                  		tst.w	$30(a0)		; is Sonic flashing?
0001E242 66F4                       		bne.s	isflashing	; if yes, branch
0001E244 2449                       		movea.l	a1,a2
0001E246                            
0001E246                            ; End of function ReactToItem
0001E246                            ; continue straight to HurtSonic
0001E246                            
0001E246                            ; ---------------------------------------------------------------------------
0001E246                            ; Hurting Sonic	subroutine
0001E246                            ; ---------------------------------------------------------------------------
0001E246                            
0001E246                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E246                            
0001E246                            
0001E246                            HurtSonic:
0001E246 4A38 FE2C                  		tst.b	(v_shield).w	; does Sonic have a shield?
0001E24A 6600                       		bne.s	@hasshield	; if yes, branch
0001E24C 4A38 F5C8                  		tst.b	(v_rshield).w	; does Sonic have a red shield?
0001E250 6600                       		bne.s	@hasshield	; if yes, branch
0001E252 4A38 F5C9                  		tst.b	(v_gshield).w	; does Sonic have a gold shield?
0001E256 6600                       		bne.s	@hasshield	; if yes, branch
0001E258 4A38 F5CA                  		tst.b	(v_spshield).w	; does Sonic have a silver shield?
0001E25C 6600                       		bne.s	@hasshield	; if yes, branch
0001E25E 4A78 FE20                  		tst.w	(v_rings).w	; does Sonic have any rings?
0001E262 6700 0000                  		beq.w	@norings	; if not, branch
0001E266                            
0001E266 4EB9 0000 FD18             		jsr	(FindFreeObj).l
0001E26C 6600                       		bne.s	@hasshield
0001E26E 12BC 0037                  		move.b	#id_RingLoss,0(a1) ; load bouncing multi rings object
0001E272 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001E278 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001E27E                            
0001E27E                            	@hasshield:
0001E27E 0C38 0001 FE2C             		cmpi.b	#1,(v_shield).w     ; does sonic have a Shield?
0001E284 6600                       		bne.s	@hasrshield        ; if no, check for red shield
0001E286 0C12 006E                  		cmpi.b	#$6E,(a2)     ; was damage caused by electrocuter?
0001E28A 6700 FFAC                  		beq.w	isflashing
0001E28E 0C12 0086                  		cmpi.b	#$86,(a2)     ; was damage caused by Plasma Ball Launcher?
0001E292 6700 FFA4                  		beq.w	isflashing
0001E296                            
0001E296                            	@hasrshield:
0001E296 0C38 0000 F5C8             		cmpi.b	#0,(v_rshield).w     ; does sonic not a Red Shield?
0001E29C 6700                       		beq.s	@hasspshield          ; if yes, check for gray shield
0001E29E 0C12 0014                  		cmpi.b	#$14,(a2)	; was damage caused by lava ball?
0001E2A2 6700 FF94                  		beq.w 	isflashing
0001E2A6 0C12 004C                  		cmpi.b	#$4C,(a2)	; was damage caused by lava geyser?
0001E2AA 6700 FF8C                  		beq.w 	isflashing
0001E2AE 0C12 004D                  		cmpi.b	#$4D,(a2)	; was damage caused by lava geyser?
0001E2B2 6700 FF84                  		beq.w 	isflashing
0001E2B6 0C12 0062                  		cmpi.b	#$62,(a2)	; was damage caused by gargoyle?
0001E2BA 6700 FF7C                  		beq.w 	isflashing
0001E2BE 0C12 0074                  		cmpi.b	#$74,(a2)	; was damage caused by MZ fire boss?
0001E2C2 6700 FF74                  		beq.w 	isflashing
0001E2C6 0C12 0035                  		cmpi.b	#$35,(a2)	; was damage caused by burning grass?
0001E2CA 6700 FF6C                  		beq.w 	isflashing
0001E2CE 0C12 006D                  		cmpi.b	#$6D,(a2)	; was damage caused by flamethrower?
0001E2D2 6700 FF64                  		beq.w 	isflashing
0001E2D6 0C12 0054                  		cmpi.b	#$54,(a2)	; was damage caused by Lava Tag/Magma?
0001E2DA 6700 FF5C                  		beq.w 	isflashing
0001E2DE                            
0001E2DE                            	@hasspshield:
0001E2DE 0C38 0001 F5CA             		cmpi.b	#1,(v_spshield).w     ; does sonic have a sp Shield?
0001E2E4 6600                       		bne.s	@hurtcont           ; if yes, make him invulnerable to metal objects
0001E2E6 0C12 0015                  		cmpi.b	#$15,(a2)	; was damage caused by SBZ Spiked Ball?
0001E2EA 6700 FF4C                  		beq.w 	isflashing
0001E2EE 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ Harpoon?
0001E2F2 6700 FF44                  		beq.w 	isflashing
0001E2F6 0C12 0031                  		cmpi.b	#$31,(a2)	; was damage caused by Chained Stompers?
0001E2FA 6700 FF3C                  		beq.w 	isflashing
0001E2FE 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by Spikes?
0001E302 6700 FF34                  		beq.w 	isflashing
0001E306 0C12 007B                  		cmpi.b	#$7B,(a2)	; was damage caused by SLZ boss spikeball?
0001E30A 6700 FF2C                  		beq.w 	isflashing
0001E30E 0C12 0057                  		cmpi.b	#$57,(a2)	; was damage caused by Spiked Ball & Chain?
0001E312 6700 FF24                  		beq.w 	isflashing
0001E316 0C12 0058                  		cmpi.b	#$58,(a2)	; was damage caused by Big Spiked Ball?
0001E31A 6700 FF1C                  		beq.w 	isflashing
0001E31E 0C12 006A                  		cmpi.b	#$6A,(a2)	; was damage caused by Saws?
0001E322 6700 FF14                  		beq.w 	isflashing
0001E326 0C12 005E                  		cmpi.b	#$5E,(a2)	; was damage caused by Seesaw ball?
0001E32A 6700 FF0C                  		beq.w 	isflashing
0001E32E 0C12 0006                  		cmpi.b	#$06,(a2)	; was damage caused by Mozzietron?
0001E332 6700 FE8A                  		beq.w 	breakenemy
0001E336 0C12 0050                  		cmpi.b	#$50,(a2)	; was damage caused by Yadrin?
0001E33A 6700 FE82                  		beq.w 	breakenemy
0001E33E 0C12 0060                  		cmpi.b	#$60,(a2)	; was damage caused by Orbinaut?
0001E342 6700 FE7A                  		beq.w 	breakenemy
0001E346 0C12 0078                  		cmpi.b	#$78,(a2)	; was damage caused by Catterkiller?
0001E34A 6700 FE72                  		beq.w 	breakenemy
0001E34E 0C12 005F                  		cmpi.b	#$5F,(a2)	; was damage caused by Bomb enemy?
0001E352 6700 FE6A                  		beq.w 	breakenemy
0001E356                            
0001E356                            
0001E356                            	@hurtcont:
0001E356 11FC 0000 FE2C             		move.b	#0,(v_shield).w		; remove shield
0001E35C 11FC 0000 F5C9             		move.b	#0,(v_gshield).w	; remove g shield
0001E362 11FC 0000 F5CA             		move.b	#0,(v_spshield).w	; remove sp shield
0001E368                            		
0001E368 0C38 0000 F5C8             		cmpi.b	#0,(v_rshield).w ; do you have no r shield?
0001E36E 6700                       		beq.s	@hurtcont2	;if not, branch
0001E370 5338 F5C8                  		subq.b	#1,(v_rshield).w
0001E374                            		
0001E374                            	@hurtcont2:
0001E374 117C 0004 0024             		move.b	#4,obRoutine(a0)
0001E37A 4EB9 0001 62E8             		jsr		Sonic_ResetOnFloor
0001E380 08E8 0001 0022             		bset	#1,obStatus(a0)
0001E386 317C FC00 0012             		move.w	#-$400,obVelY(a0) ; make Sonic bounce away from the object
0001E38C 317C FE00 0010             		move.w	#-$200,obVelX(a0)
0001E392 0828 0006 0022             		btst	#6,obStatus(a0)	; is Sonic underwater?
0001E398 6700                       		beq.s	@isdry		; if not, branch
0001E39A                            
0001E39A 317C FE00 0012             		move.w	#-$200,obVelY(a0) ; slower bounce
0001E3A0 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001E3A6                            
0001E3A6                            	@isdry:
0001E3A6 3028 0008                  		move.w	obX(a0),d0
0001E3AA B06A 0008                  		cmp.w	obX(a2),d0
0001E3AE 6500                       		bcs.s	@isleft		; if Sonic is left of the object, branch
0001E3B0 4468 0010                  		neg.w	obVelX(a0)	; if Sonic is right of the object, reverse
0001E3B4                            
0001E3B4                            	@isleft:
0001E3B4 117C 0000 0039             		move.b	#0,f_spindash(a0) ; clear Spin Dash flag 
0001E3BA 317C 0000 0020             		move.w	#0,obInertia(a0) 
0001E3C0 117C 0019 001C             		move.b	#id_Hurt,obAnim(a0) 
0001E3C6 317C 0120 0030             		move.w	#$120,$30(a0)
0001E3CC 0C12 006E                  		cmpi.b	#$6E,(a2)    ; check if you were hurt by Electrocuter
0001E3D0 6700                       		beq.s	@hurtelec       ; if yes, branch
0001E3D2 0C12 0086                  		cmpi.b	#$86,(a2)    ; check if you were hurt by FZ plasma
0001E3D6 6700                       		beq.s	@hurtelec       ; if yes, branch
0001E3D8 317C 0000 0020             		move.w	#0,obInertia(a0)
0001E3DE 117C 0019 001C             		move.b	#id_Hurt,obAnim(a0)
0001E3E4 317C 0078 0030             		move.w	#120,$30(a0)	; set temp invincible time to 2 seconds
0001E3EA 303C 0000                  		move.w	#sfx_Death,d0	; load normal damage sound
0001E3EE 0C12 0036                  		cmpi.b	#id_Spikes,(a2)	; was damage caused by spikes?
0001E3F2 6600                       		bne.s	@sound		; if not, branch
0001E3F4 0C12 0016                  		cmpi.b	#id_Harpoon,(a2) ; was damage caused by LZ harpoon?
0001E3F8 6600                       		bne.s	@sound		; if not, branch
0001E3FA 303C 0000                  		move.w	#sfx_HitSpikes,d0 ; load spikes damage sound
0001E3FE                            
0001E3FE                            	@sound:
0001E3FE 4EB9 0000 1250             		jsr	(PlaySound_Special).l
0001E404 70FF                       		moveq	#-1,d0
0001E406 4E75                       		rts	
0001E408                            
0001E408                            	@hurtelec:
0001E408 117C 0020 001C             		move.b	#id_Hurt2,obAnim(a0)
0001E40E 317C 0078 0030             		move.w	#120,$30(a0)	; set temp invincible time to 2 seconds
0001E414 303C 0000                  		move.w	#sfx_Death,d0	; load normal damage sound
0001E418 0C12 0036                  		cmpi.b	#id_Spikes,(a2)	; was damage caused by spikes?
0001E41C 66E0                       		bne.s	@sound		; if not, branch
0001E41E 0C12 0016                  		cmpi.b	#id_Harpoon,(a2) ; was damage caused by LZ harpoon?
0001E422 66DA                       		bne.s	@sound		; if not, branch
0001E424 303C 0000                  		move.w	#sfx_HitSpikes,d0 ; load spikes damage sound
0001E428                            ; ===========================================================================
0001E428                            
0001E428                            @norings:
0001E428 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug mode	cheat on?
0001E42C 6600 FE50                  		bne.w	@hasshield	; if yes, branch
0001E430                            
0001E430                            ; ---------------------------------------------------------------------------
0001E430                            ; Subroutine to	kill Sonic
0001E430                            ; ---------------------------------------------------------------------------
0001E430                            
0001E430                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E430                            
0001E430                            
0001E430                            KillSonic:
0001E430 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	active?
0001E434 6600 0000                  		bne.w	@dontdie	; if yes, branch
0001E438 31FC 0000 FE20             		move.w	#0,(v_rings).w ; clear rings
0001E43E 11FC 0000 FE2D             		move.b	#0,(v_invinc).w	; remove invincibility
0001E444 11FC 0000 FE2E             		move.b  #0,(v_shoes).w
0001E44A 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0001E450 117C 0006 0024             		move.b	#6,obRoutine(a0)
0001E456 4EB9 0001 62E8             		jsr		Sonic_ResetOnFloor
0001E45C 08E8 0001 0022             		bset	#1,obStatus(a0)
0001E462 317C F900 0012             		move.w	#-$700,obVelY(a0)
0001E468 317C 0000 0010             		move.w	#0,obVelX(a0)
0001E46E 317C 0000 0020             		move.w	#0,obInertia(a0)
0001E474 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001E47A 0C12 0054                  		cmpi.b	#$54,(a2)    ; check if you were killed by lava
0001E47E 6700                       		beq.s	Kill_Lava       ; if yes, branch
0001E480 0C12 006D                  		cmpi.b	#$6D,(a2)    ; check if you were killed by flamethrower
0001E484 6700                       		beq.s	Kill_Lava        ; if yes, branch
0001E486 117C 0018 001C             		move.b	#id_Death,obAnim(a0)
0001E48C 08E8 0007 0002             		bset	#7,obGfx(a0)
0001E492 303C 0000                  		move.w	#sfx_Death,d0	; play normal death sound
0001E496 0C12 0036                  		cmpi.b	#id_Spikes,(a2)	; check	if you were killed by spikes
0001E49A 6600                       		bne.s	@sound
0001E49C 303C 0000                  		move.w	#sfx_HitSpikes,d0 ; play spikes death sound
0001E4A0                            
0001E4A0                            	@sound:
0001E4A0 4EB9 0000 1250             		jsr	(PlaySound_Special).l
0001E4A6                            
0001E4A6                            	@dontdie:
0001E4A6 70FF                       		moveq	#-1,d0
0001E4A8 4E75                       		rts	
0001E4AA                            ; End of function KillSonic
0001E4AA                            Kill_Lava:	
0001E4AA                            	;bset	#7,obGfx(a0)
0001E4AA 117C 0016 001C             	move.b	#$16,$1C(a0)
0001E4B0 303C 00C8                  	move.w	#$C8,d0        ; play death sound
0001E4B4 4EB9 0000 1250                 jsr		(PlaySound_Special).l
0001E4BA                            
0001E4BA                            
0001E4BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E4BA                            
0001E4BA                            
0001E4BA                            React_Special:
0001E4BA 1229 0020                  		move.b	obColType(a1),d1
0001E4BE 0201 003F                  		andi.b	#$3F,d1
0001E4C2 0C01 000B                  		cmpi.b	#$B,d1		; is collision type $CB	?
0001E4C6 6700                       		beq.s	@caterkiller	; if yes, branch
0001E4C8 0C01 000C                  		cmpi.b	#$C,d1		; is collision type $CC	?
0001E4CC 6700                       		beq.s	@yadrin		; if yes, branch
0001E4CE 0C01 0017                  		cmpi.b	#$17,d1		; is collision type $D7	?
0001E4D2 6700                       		beq.s	@D7orE1		; if yes, branch
0001E4D4 0C01 0021                  		cmpi.b	#$21,d1		; is collision type $E1	?
0001E4D8 6700                       		beq.s	@D7orE1		; if yes, branch
0001E4DA 4E75                       		rts	
0001E4DC                            ; ===========================================================================
0001E4DC                            
0001E4DC                            @caterkiller:
0001E4DC 6000 FD4E                  		bra.w	React_Caterkiller
0001E4E0                            ; ===========================================================================
0001E4E0                            
0001E4E0                            @yadrin:
0001E4E0 9A40                       		sub.w	d0,d5
0001E4E2 0C45 0008                  		cmpi.w	#8,d5
0001E4E6 6400                       		bcc.s	@normalenemy
0001E4E8 3029 0008                  		move.w	obX(a1),d0
0001E4EC 5940                       		subq.w	#4,d0
0001E4EE 0829 0000 0022             		btst	#0,obStatus(a1)
0001E4F4 6700                       		beq.s	@noflip
0001E4F6 0440 0010                  		subi.w	#$10,d0
0001E4FA                            
0001E4FA                            	@noflip:
0001E4FA 9042                       		sub.w	d2,d0
0001E4FC 6400                       		bcc.s	@loc_1B13C
0001E4FE 0640 0018                  		addi.w	#$18,d0
0001E502 6500                       		bcs.s	@loc_1B140
0001E504 6000                       		bra.s	@normalenemy
0001E506                            ; ===========================================================================
0001E506                            
0001E506                            	@loc_1B13C:
0001E506 B044                       		cmp.w	d4,d0
0001E508 6200                       		bhi.s	@normalenemy
0001E50A                            
0001E50A                            	@loc_1B140:
0001E50A 6000 FD26                  		bra.w	React_ChkHurt
0001E50E                            ; ===========================================================================
0001E50E                            
0001E50E                            	@normalenemy:
0001E50E 6000 FC6A                  		bra.w	React_Enemy
0001E512                            ; ===========================================================================
0001E512                            
0001E512                            @D7orE1:
0001E512 5229 0021                  		addq.b	#1,obColProp(a1)
0001E516 4E75                       		rts	
0001E518                            ; End of function React_Special
0001E518                            
0001E518                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E518                            
0001E518                            React_ChkWaterTag:
0001E518 0C38 0001 F5C4             		cmpi.b	#1,(v_tagwater).w	;TIS
0001E51E 6600 0000                  		bne	NotWaterTag
0001E522 11FC 0000 F5C4             		move.b	#0,(v_tagwater).w	;TIS
0001E528                            	NotWaterTag:
0001E528 4E75                       		rts
0001E52A                            
0001E52A                            React_WaterTag:
0001E52A 0C38 0001 F5C4             		cmpi.b	#1,(v_tagwater).w	;TIS
0001E530 6700 0000                  		beq	SkipWaterTag
0001E534 11FC 0001 F5C4             		move.b	#1,(v_tagwater).w	;TIS
0001E53A                            	SkipWaterTag:
0001E53A 4E75                       		rts
0001E53A 4E75                       		rts
0001E53C                            
0001E53C                            ; ---------------------------------------------------------------------------
0001E53C                            ; Subroutine to	show the special stage layout
0001E53C                            ; ---------------------------------------------------------------------------
0001E53C                            
0001E53C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E53C                            
0001E53C                            
0001E53C                            SS_ShowLayout:
0001E53C 6100 0000                  		bsr.w	SS_AniWallsRings
0001E540 6100 0000                  		bsr.w	SS_AniItems
0001E544 3F05                       		move.w	d5,-(sp)
0001E546 43F8 8000                  		lea	($FFFF8000).w,a1
0001E54A 1038 F780                  		move.b	(v_ssangle).w,d0
0001E54E 0200 00FC                  		andi.b	#$FC,d0
0001E552 4EB9 0000 3A32             		jsr	(CalcSine).l
0001E558 3800                       		move.w	d0,d4
0001E55A 3A01                       		move.w	d1,d5
0001E55C C9FC 0018                  		muls.w	#$18,d4
0001E560 CBFC 0018                  		muls.w	#$18,d5
0001E564 7400                       		moveq	#0,d2
0001E566 3438 F700                  		move.w	(v_screenposx).w,d2
0001E56A 84FC 0018                  		divu.w	#$18,d2
0001E56E 4842                       		swap	d2
0001E570 4442                       		neg.w	d2
0001E572 0642 FF4C                  		addi.w	#-$B4,d2
0001E576 7600                       		moveq	#0,d3
0001E578 3638 F704                  		move.w	(v_screenposy).w,d3
0001E57C 86FC 0018                  		divu.w	#$18,d3
0001E580 4843                       		swap	d3
0001E582 4443                       		neg.w	d3
0001E584 0643 FF4C                  		addi.w	#-$B4,d3
0001E588 3E3C 000F                  		move.w	#$F,d7
0001E58C                            
0001E58C                            loc_1B19E:
0001E58C 48A7 E000                  		movem.w	d0-d2,-(sp)
0001E590 48A7 C000                  		movem.w	d0-d1,-(sp)
0001E594 4440                       		neg.w	d0
0001E596 C3C2                       		muls.w	d2,d1
0001E598 C1C3                       		muls.w	d3,d0
0001E59A 2C00                       		move.l	d0,d6
0001E59C DC81                       		add.l	d1,d6
0001E59E 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001E5A2 C1C2                       		muls.w	d2,d0
0001E5A4 C3C3                       		muls.w	d3,d1
0001E5A6 D280                       		add.l	d0,d1
0001E5A8 2406                       		move.l	d6,d2
0001E5AA 3C3C 000F                  		move.w	#$F,d6
0001E5AE                            
0001E5AE                            loc_1B1C0:
0001E5AE 2002                       		move.l	d2,d0
0001E5B0 E080                       		asr.l	#8,d0
0001E5B2 32C0                       		move.w	d0,(a1)+
0001E5B4 2001                       		move.l	d1,d0
0001E5B6 E080                       		asr.l	#8,d0
0001E5B8 32C0                       		move.w	d0,(a1)+
0001E5BA D485                       		add.l	d5,d2
0001E5BC D284                       		add.l	d4,d1
0001E5BE 51CE FFEE                  		dbf	d6,loc_1B1C0
0001E5C2                            
0001E5C2 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001E5C6 0643 0018                  		addi.w	#$18,d3
0001E5CA 51CF FFC0                  		dbf	d7,loc_1B19E
0001E5CE                            
0001E5CE 3A1F                       		move.w	(sp)+,d5
0001E5D0 41F9 00FF 0000             		lea	($FF0000).l,a0
0001E5D6 7000                       		moveq	#0,d0
0001E5D8 3038 F704                  		move.w	(v_screenposy).w,d0
0001E5DC 80FC 0018                  		divu.w	#$18,d0
0001E5E0 C0FC 0080                  		mulu.w	#$80,d0
0001E5E4 D1C0                       		adda.l	d0,a0
0001E5E6 7000                       		moveq	#0,d0
0001E5E8 3038 F700                  		move.w	(v_screenposx).w,d0
0001E5EC 80FC 0018                  		divu.w	#$18,d0
0001E5F0 D0C0                       		adda.w	d0,a0
0001E5F2 49F8 8000                  		lea	($FFFF8000).w,a4
0001E5F6 3E3C 000F                  		move.w	#$F,d7
0001E5FA                            
0001E5FA                            loc_1B20C:
0001E5FA 3C3C 000F                  		move.w	#$F,d6
0001E5FE                            
0001E5FE                            loc_1B210:
0001E5FE 7000                       		moveq	#0,d0
0001E600 1018                       		move.b	(a0)+,d0
0001E602 6700                       		beq.s	loc_1B268
0001E604 0C00 004E                  		cmpi.b	#$4E,d0
0001E608 6200                       		bhi.s	loc_1B268
0001E60A 3614                       		move.w	(a4),d3
0001E60C 0643 0120                  		addi.w	#$120,d3
0001E610 0C43 0070                  		cmpi.w	#$70,d3
0001E614 6500                       		blo.s	loc_1B268
0001E616 0C43 01D0                  		cmpi.w	#$1D0,d3
0001E61A 6400                       		bhs.s	loc_1B268
0001E61C 342C 0002                  		move.w	2(a4),d2
0001E620 0642 00F0                  		addi.w	#$F0,d2
0001E624 0C42 0070                  		cmpi.w	#$70,d2
0001E628 6500                       		blo.s	loc_1B268
0001E62A 0C42 0170                  		cmpi.w	#$170,d2
0001E62E 6400                       		bhs.s	loc_1B268
0001E630 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001E636 E748                       		lsl.w	#3,d0
0001E638 4BF5 0000                  		lea	(a5,d0.w),a5
0001E63C 225D                       		movea.l	(a5)+,a1
0001E63E 321D                       		move.w	(a5)+,d1
0001E640 D241                       		add.w	d1,d1
0001E642 D2F1 1000                  		adda.w	(a1,d1.w),a1
0001E646 365D                       		movea.w	(a5)+,a3
0001E648 7200                       		moveq	#0,d1
0001E64A 1219                       		move.b	(a1)+,d1
0001E64C 5301                       		subq.b	#1,d1
0001E64E 6B00                       		bmi.s	loc_1B268
0001E650 4EB9 0000 F9F0             		jsr	(BuildSpr_Normal).l
0001E656                            
0001E656                            loc_1B268:
0001E656 584C                       		addq.w	#4,a4
0001E658 51CE FFA4                  		dbf	d6,loc_1B210
0001E65C                            
0001E65C 41E8 0070                  		lea	$70(a0),a0
0001E660 51CF FF98                  		dbf	d7,loc_1B20C
0001E664                            
0001E664 11C5 F62C                  		move.b	d5,(v_spritecount).w
0001E668 0C05 0050                  		cmpi.b	#$50,d5
0001E66C 6700                       		beq.s	loc_1B288
0001E66E 24BC 0000 0000             		move.l	#0,(a2)
0001E674 4E75                       		rts	
0001E676                            ; ===========================================================================
0001E676                            
0001E676                            loc_1B288:
0001E676 157C 0000 FFFB             		move.b	#0,-5(a2)
0001E67C 4E75                       		rts	
0001E67E                            ; End of function SS_ShowLayout
0001E67E                            
0001E67E                            ; ---------------------------------------------------------------------------
0001E67E                            ; Subroutine to	animate	walls and rings	in the special stage
0001E67E                            ; ---------------------------------------------------------------------------
0001E67E                            
0001E67E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E67E                            
0001E67E                            
0001E67E                            SS_AniWallsRings:
0001E67E 43F9 00FF 400C             		lea	($FF400C).l,a1
0001E684 7000                       		moveq	#0,d0
0001E686 1038 F780                  		move.b	(v_ssangle).w,d0
0001E68A E408                       		lsr.b	#2,d0
0001E68C 0240 000F                  		andi.w	#$F,d0
0001E690 7223                       		moveq	#$23,d1
0001E692                            
0001E692                            loc_1B2A4:
0001E692 3280                       		move.w	d0,(a1)
0001E694 5049                       		addq.w	#8,a1
0001E696 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001E69A                            
0001E69A 43F9 00FF 4005             		lea	($FF4005).l,a1
0001E6A0 5338 FEC2                  		subq.b	#1,(v_ani1_time).w
0001E6A4 6A00                       		bpl.s	loc_1B2C8
0001E6A6 11FC 0007 FEC2             		move.b	#7,(v_ani1_time).w
0001E6AC 5238 FEC3                  		addq.b	#1,(v_ani1_frame).w
0001E6B0 0238 0003 FEC3             		andi.b	#3,(v_ani1_frame).w
0001E6B6                            
0001E6B6                            loc_1B2C8:
0001E6B6 1378 FEC3 01D0             		move.b	(v_ani1_frame).w,$1D0(a1)
0001E6BC 5338 FEC4                  		subq.b	#1,(v_ani2_time).w
0001E6C0 6A00                       		bpl.s	loc_1B2E4
0001E6C2 11FC 0007 FEC4             		move.b	#7,(v_ani2_time).w
0001E6C8 5238 FEC5                  		addq.b	#1,(v_ani2_frame).w
0001E6CC 0238 0001 FEC5             		andi.b	#1,(v_ani2_frame).w
0001E6D2                            
0001E6D2                            loc_1B2E4:
0001E6D2 1038 FEC5                  		move.b	(v_ani2_frame).w,d0
0001E6D6 1340 0138                  		move.b	d0,$138(a1)
0001E6DA 1340 0160                  		move.b	d0,$160(a1)
0001E6DE 1340 0148                  		move.b	d0,$148(a1)
0001E6E2 1340 0150                  		move.b	d0,$150(a1)
0001E6E6 1340 01D8                  		move.b	d0,$1D8(a1)
0001E6EA 1340 01E0                  		move.b	d0,$1E0(a1)
0001E6EE 1340 01E8                  		move.b	d0,$1E8(a1)
0001E6F2 1340 01F0                  		move.b	d0,$1F0(a1)
0001E6F6 1340 01F8                  		move.b	d0,$1F8(a1)
0001E6FA 1340 0200                  		move.b	d0,$200(a1)
0001E6FE 5338 FEC6                  		subq.b	#1,(v_ani3_time).w
0001E702 6A00                       		bpl.s	loc_1B326
0001E704 11FC 0004 FEC6             		move.b	#4,(v_ani3_time).w
0001E70A 5238 FEC7                  		addq.b	#1,(v_ani3_frame).w
0001E70E 0238 0003 FEC7             		andi.b	#3,(v_ani3_frame).w
0001E714                            
0001E714                            loc_1B326:
0001E714 1038 FEC7                  		move.b	(v_ani3_frame).w,d0
0001E718 1340 0168                  		move.b	d0,$168(a1)
0001E71C 1340 0170                  		move.b	d0,$170(a1)
0001E720 1340 0178                  		move.b	d0,$178(a1)
0001E724 1340 0180                  		move.b	d0,$180(a1)
0001E728 5338 FEC0                  		subq.b	#1,(v_ani0_time).w
0001E72C 6A00                       		bpl.s	loc_1B350
0001E72E 11FC 0007 FEC0             		move.b	#7,(v_ani0_time).w
0001E734 5338 FEC1                  		subq.b	#1,(v_ani0_frame).w
0001E738 0238 0007 FEC1             		andi.b	#7,(v_ani0_frame).w
0001E73E                            
0001E73E                            loc_1B350:
0001E73E 43F9 00FF 4016             		lea	($FF4016).l,a1
0001E744 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001E74A 7000                       		moveq	#0,d0
0001E74C 1038 FEC1                  		move.b	(v_ani0_frame).w,d0
0001E750 D040                       		add.w	d0,d0
0001E752 41F0 0000                  		lea	(a0,d0.w),a0
0001E756 3290                       		move.w	(a0),(a1)
0001E758 3368 0002 0008             		move.w	2(a0),8(a1)
0001E75E 3368 0004 0010             		move.w	4(a0),$10(a1)
0001E764 3368 0006 0018             		move.w	6(a0),$18(a1)
0001E76A 3368 0008 0020             		move.w	8(a0),$20(a1)
0001E770 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001E776 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001E77C 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001E782 D0FC 0020                  		adda.w	#$20,a0
0001E786 D2FC 0048                  		adda.w	#$48,a1
0001E78A 3290                       		move.w	(a0),(a1)
0001E78C 3368 0002 0008             		move.w	2(a0),8(a1)
0001E792 3368 0004 0010             		move.w	4(a0),$10(a1)
0001E798 3368 0006 0018             		move.w	6(a0),$18(a1)
0001E79E 3368 0008 0020             		move.w	8(a0),$20(a1)
0001E7A4 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001E7AA 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001E7B0 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001E7B6 D0FC 0020                  		adda.w	#$20,a0
0001E7BA D2FC 0048                  		adda.w	#$48,a1
0001E7BE 3290                       		move.w	(a0),(a1)
0001E7C0 3368 0002 0008             		move.w	2(a0),8(a1)
0001E7C6 3368 0004 0010             		move.w	4(a0),$10(a1)
0001E7CC 3368 0006 0018             		move.w	6(a0),$18(a1)
0001E7D2 3368 0008 0020             		move.w	8(a0),$20(a1)
0001E7D8 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001E7DE 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001E7E4 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001E7EA D0FC 0020                  		adda.w	#$20,a0
0001E7EE D2FC 0048                  		adda.w	#$48,a1
0001E7F2 3290                       		move.w	(a0),(a1)
0001E7F4 3368 0002 0008             		move.w	2(a0),8(a1)
0001E7FA 3368 0004 0010             		move.w	4(a0),$10(a1)
0001E800 3368 0006 0018             		move.w	6(a0),$18(a1)
0001E806 3368 0008 0020             		move.w	8(a0),$20(a1)
0001E80C 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001E812 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001E818 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001E81E D0FC 0020                  		adda.w	#$20,a0
0001E822 D2FC 0048                  		adda.w	#$48,a1
0001E826 4E75                       		rts	
0001E828                            ; End of function SS_AniWallsRings
0001E828                            
0001E828                            ; ===========================================================================
0001E828 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001E838 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001E848 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001E858 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001E868 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001E878 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001E888 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001E898 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001E8A8                            ; ---------------------------------------------------------------------------
0001E8A8                            ; Subroutine to	remove items when you collect them in the special stage
0001E8A8                            ; ---------------------------------------------------------------------------
0001E8A8                            
0001E8A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E8A8                            
0001E8A8                            
0001E8A8                            SS_RemoveCollectedItem:
0001E8A8 45F9 00FF 4400             		lea	($FF4400).l,a2
0001E8AE 303C 001F                  		move.w	#$1F,d0
0001E8B2                            
0001E8B2                            loc_1B4C4:
0001E8B2 4A12                       		tst.b	(a2)
0001E8B4 6700                       		beq.s	locret_1B4CE
0001E8B6 504A                       		addq.w	#8,a2
0001E8B8 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001E8BC                            
0001E8BC                            locret_1B4CE:
0001E8BC 4E75                       		rts	
0001E8BE                            ; End of function SS_RemoveCollectedItem
0001E8BE                            
0001E8BE                            ; ---------------------------------------------------------------------------
0001E8BE                            ; Subroutine to	animate	special	stage items when you touch them
0001E8BE                            ; ---------------------------------------------------------------------------
0001E8BE                            
0001E8BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E8BE                            
0001E8BE                            
0001E8BE                            SS_AniItems:
0001E8BE 41F9 00FF 4400             		lea	($FF4400).l,a0
0001E8C4 3E3C 001F                  		move.w	#$1F,d7
0001E8C8                            
0001E8C8                            loc_1B4DA:
0001E8C8 7000                       		moveq	#0,d0
0001E8CA 1010                       		move.b	(a0),d0
0001E8CC 6700                       		beq.s	loc_1B4E8
0001E8CE E548                       		lsl.w	#2,d0
0001E8D0 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001E8D4 4E91                       		jsr	(a1)
0001E8D6                            
0001E8D6                            loc_1B4E8:
0001E8D6 5048                       		addq.w	#8,a0
0001E8D8                            
0001E8D8                            loc_1B4EA:
0001E8D8 51CF FFEE                  		dbf	d7,loc_1B4DA
0001E8DC                            
0001E8DC 4E75                       		rts	
0001E8DE                            ; End of function SS_AniItems
0001E8DE                            
0001E8DE                            ; ===========================================================================
0001E8DE 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001E8E2 0000 0000                  		dc.l SS_AniBumper
0001E8E6 0000 0000                  		dc.l SS_Ani1Up
0001E8EA 0000 0000                  		dc.l SS_AniReverse
0001E8EE 0000 0000                  		dc.l SS_AniEmeraldSparks
0001E8F2 0000 0000                  		dc.l SS_AniGlassBlock
0001E8F6                            ; ===========================================================================
0001E8F6                            
0001E8F6                            SS_AniRingSparks:
0001E8F6 5328 0002                  		subq.b	#1,2(a0)
0001E8FA 6A00                       		bpl.s	locret_1B530
0001E8FC 117C 0005 0002             		move.b	#5,2(a0)
0001E902 7000                       		moveq	#0,d0
0001E904 1028 0003                  		move.b	3(a0),d0
0001E908 5228 0003                  		addq.b	#1,3(a0)
0001E90C 2268 0004                  		movea.l	4(a0),a1
0001E910 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001E914 1280                       		move.b	d0,(a1)
0001E916 6600                       		bne.s	locret_1B530
0001E918 4290                       		clr.l	(a0)
0001E91A 42A8 0004                  		clr.l	4(a0)
0001E91E                            
0001E91E                            locret_1B530:
0001E91E 4E75                       		rts	
0001E920                            ; ===========================================================================
0001E920 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001E926                            ; ===========================================================================
0001E926                            
0001E926                            SS_AniBumper:
0001E926 5328 0002                  		subq.b	#1,2(a0)
0001E92A 6A00                       		bpl.s	locret_1B566
0001E92C 117C 0007 0002             		move.b	#7,2(a0)
0001E932 7000                       		moveq	#0,d0
0001E934 1028 0003                  		move.b	3(a0),d0
0001E938 5228 0003                  		addq.b	#1,3(a0)
0001E93C 2268 0004                  		movea.l	4(a0),a1
0001E940 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001E944 6600                       		bne.s	loc_1B564
0001E946 4290                       		clr.l	(a0)
0001E948 42A8 0004                  		clr.l	4(a0)
0001E94C 12BC 0025                  		move.b	#$25,(a1)
0001E950 4E75                       		rts	
0001E952                            ; ===========================================================================
0001E952                            
0001E952                            loc_1B564:
0001E952 1280                       		move.b	d0,(a1)
0001E954                            
0001E954                            locret_1B566:
0001E954 4E75                       		rts	
0001E956                            ; ===========================================================================
0001E956 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001E95C                            ; ===========================================================================
0001E95C                            
0001E95C                            SS_Ani1Up:
0001E95C 5328 0002                  		subq.b	#1,2(a0)
0001E960 6A00                       		bpl.s	locret_1B596
0001E962 117C 0005 0002             		move.b	#5,2(a0)
0001E968 7000                       		moveq	#0,d0
0001E96A 1028 0003                  		move.b	3(a0),d0
0001E96E 5228 0003                  		addq.b	#1,3(a0)
0001E972 2268 0004                  		movea.l	4(a0),a1
0001E976 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001E97A 1280                       		move.b	d0,(a1)
0001E97C 6600                       		bne.s	locret_1B596
0001E97E 4290                       		clr.l	(a0)
0001E980 42A8 0004                  		clr.l	4(a0)
0001E984                            
0001E984                            locret_1B596:
0001E984 4E75                       		rts	
0001E986                            ; ===========================================================================
0001E986 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001E98C                            ; ===========================================================================
0001E98C                            
0001E98C                            SS_AniReverse:
0001E98C 5328 0002                  		subq.b	#1,2(a0)
0001E990 6A00                       		bpl.s	locret_1B5CC
0001E992 117C 0007 0002             		move.b	#7,2(a0)
0001E998 7000                       		moveq	#0,d0
0001E99A 1028 0003                  		move.b	3(a0),d0
0001E99E 5228 0003                  		addq.b	#1,3(a0)
0001E9A2 2268 0004                  		movea.l	4(a0),a1
0001E9A6 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001E9AA 6600                       		bne.s	loc_1B5CA
0001E9AC 4290                       		clr.l	(a0)
0001E9AE 42A8 0004                  		clr.l	4(a0)
0001E9B2 12BC 002B                  		move.b	#$2B,(a1)
0001E9B6 4E75                       		rts	
0001E9B8                            ; ===========================================================================
0001E9B8                            
0001E9B8                            loc_1B5CA:
0001E9B8 1280                       		move.b	d0,(a1)
0001E9BA                            
0001E9BA                            locret_1B5CC:
0001E9BA 4E75                       		rts	
0001E9BC                            ; ===========================================================================
0001E9BC 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001E9C2                            ; ===========================================================================
0001E9C2                            
0001E9C2                            SS_AniEmeraldSparks:
0001E9C2 5328 0002                  		subq.b	#1,2(a0)
0001E9C6 6A00                       		bpl.s	locret_1B60C
0001E9C8 117C 0005 0002             		move.b	#5,2(a0)
0001E9CE 7000                       		moveq	#0,d0
0001E9D0 1028 0003                  		move.b	3(a0),d0
0001E9D4 5228 0003                  		addq.b	#1,3(a0)
0001E9D8 2268 0004                  		movea.l	4(a0),a1
0001E9DC 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001E9E0 1280                       		move.b	d0,(a1)
0001E9E2 6600                       		bne.s	locret_1B60C
0001E9E4 4290                       		clr.l	(a0)
0001E9E6 42A8 0004                  		clr.l	4(a0)
0001E9EA 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001E9FA                            
0001E9FA                            locret_1B60C:
0001E9FA 4E75                       		rts	
0001E9FC                            ; ===========================================================================
0001E9FC 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001EA02                            ; ===========================================================================
0001EA02                            
0001EA02                            SS_AniGlassBlock:
0001EA02 5328 0002                  		subq.b	#1,2(a0)
0001EA06 6A00                       		bpl.s	locret_1B640
0001EA08 117C 0001 0002             		move.b	#1,2(a0)
0001EA0E 7000                       		moveq	#0,d0
0001EA10 1028 0003                  		move.b	3(a0),d0
0001EA14 5228 0003                  		addq.b	#1,3(a0)
0001EA18 2268 0004                  		movea.l	4(a0),a1
0001EA1C 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001EA20 1280                       		move.b	d0,(a1)
0001EA22 6600                       		bne.s	locret_1B640
0001EA24 12A8 0004                  		move.b	4(a0),(a1)
0001EA28 4290                       		clr.l	(a0)
0001EA2A 42A8 0004                  		clr.l	4(a0)
0001EA2E                            
0001EA2E                            locret_1B640:
0001EA2E 4E75                       		rts	
0001EA30                            ; ===========================================================================
0001EA30 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001EA3A                            
0001EA3A                            ; ---------------------------------------------------------------------------
0001EA3A                            ; Special stage	layout pointers
0001EA3A                            ; ---------------------------------------------------------------------------
0001EA3A                            SS_LayoutIndex:
0001EA3A 0000 0000                  		dc.l SS_1
0001EA3E 0000 0000                  		dc.l SS_2
0001EA42 0000 0000                  		dc.l SS_3
0001EA46 0000 0000                  		dc.l SS_4
0001EA4A 0000 0000                  		dc.l SS_5
0001EA4E 0000 0000                  		dc.l SS_6
0001EA52                            		even
0001EA52                            
0001EA52                            ; ---------------------------------------------------------------------------
0001EA52                            ; Special stage start locations
0001EA52                            ; ---------------------------------------------------------------------------
0001EA52                            SS_StartLoc:	include	"_inc\Start Location Array - Special Stages.asm"
0001EA52                            ; ---------------------------------------------------------------------------
0001EA52                            ; Special stage start locations
0001EA52                            ; ---------------------------------------------------------------------------
0001EA52                            
0001EA52                            		incbin	"startpos\ss1.bin"
0001EA56                            		incbin	"startpos\ss2.bin"
0001EA5A                            		incbin	"startpos\ss3.bin"
0001EA5E                            		incbin	"startpos\ss4.bin"
0001EA62                            		incbin	"startpos\ss5.bin"
0001EA66                            		incbin	"startpos\ss6.bin"
0001EA6A                            		even
0001EA6A                            		even
0001EA6A                            
0001EA6A                            ; ---------------------------------------------------------------------------
0001EA6A                            ; Subroutine to	load special stage layout
0001EA6A                            ; ---------------------------------------------------------------------------
0001EA6A                            
0001EA6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EA6A                            
0001EA6A                            
0001EA6A                            SS_Load:
0001EA6A 7000                       		moveq	#0,d0
0001EA6C 1038 FE16                  		move.b	(v_lastspecial).w,d0 ; load number of last special stage entered
0001EA70 5238 FE16                  		addq.b	#1,(v_lastspecial).w
0001EA74 0C38 0006 FE16             		cmpi.b	#6,(v_lastspecial).w
0001EA7A 6500                       		blo.s	SS_ChkEmldNum
0001EA7C 11FC 0000 FE16             		move.b	#0,(v_lastspecial).w ; reset if higher than 6
0001EA82                            
0001EA82                            SS_ChkEmldNum:
0001EA82 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all emeralds?
0001EA88 6700                       		beq.s	SS_LoadData	; if yes, branch
0001EA8A 7200                       		moveq	#0,d1
0001EA8C 1238 FE57                  		move.b	(v_emeralds).w,d1
0001EA90 5301                       		subq.b	#1,d1
0001EA92 6500                       		blo.s	SS_LoadData
0001EA94 47F8 FE58                  		lea	(v_emldlist).w,a3 ; check which emeralds you have
0001EA98                            
0001EA98                            SS_ChkEmldLoop:	
0001EA98 B033 1000                  		cmp.b	(a3,d1.w),d0
0001EA9C 6600                       		bne.s	SS_ChkEmldRepeat
0001EA9E 60CA                       		bra.s	SS_Load
0001EAA0                            ; ===========================================================================
0001EAA0                            
0001EAA0                            SS_ChkEmldRepeat:
0001EAA0 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001EAA4                            
0001EAA4                            SS_LoadData:
0001EAA4 E548                       		lsl.w	#2,d0
0001EAA6 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001EAAA 31D9 D008                  		move.w	(a1)+,(v_player+obX).w
0001EAAE 31D9 D00C                  		move.w	(a1)+,(v_player+obY).w
0001EAB2 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001EAB6 43F9 00FF 4000             		lea	($FF4000).l,a1
0001EABC 303C 0000                  		move.w	#0,d0
0001EAC0 4EB9 0000 1888             		jsr	(EniDec).l
0001EAC6 43F9 00FF 0000             		lea	($FF0000).l,a1
0001EACC 303C 0FFF                  		move.w	#$FFF,d0
0001EAD0                            
0001EAD0                            SS_ClrRAM3:
0001EAD0 4299                       		clr.l	(a1)+
0001EAD2 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001EAD6                            
0001EAD6 43F9 00FF 1020             		lea	($FF1020).l,a1
0001EADC 41F9 00FF 4000             		lea	($FF4000).l,a0
0001EAE2 723F                       		moveq	#$3F,d1
0001EAE4                            
0001EAE4                            loc_1B6F6:
0001EAE4 743F                       		moveq	#$3F,d2
0001EAE6                            
0001EAE6                            loc_1B6F8:
0001EAE6 12D8                       		move.b	(a0)+,(a1)+
0001EAE8 51CA FFFC                  		dbf	d2,loc_1B6F8
0001EAEC                            
0001EAEC 43E9 0040                  		lea	$40(a1),a1
0001EAF0 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001EAF4                            
0001EAF4 43F9 00FF 4008             		lea	($FF4008).l,a1
0001EAFA 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001EB00 724D                       		moveq	#$4D,d1
0001EB02                            
0001EB02                            loc_1B714:
0001EB02 22D8                       		move.l	(a0)+,(a1)+
0001EB04 32FC 0000                  		move.w	#0,(a1)+
0001EB08 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001EB0E 32D8                       		move.w	(a0)+,(a1)+
0001EB10 51C9 FFF0                  		dbf	d1,loc_1B714
0001EB14                            
0001EB14 43F9 00FF 4400             		lea	($FF4400).l,a1
0001EB1A 323C 003F                  		move.w	#$3F,d1
0001EB1E                            
0001EB1E                            loc_1B730:
0001EB1E                            
0001EB1E 4299                       		clr.l	(a1)+
0001EB20 51C9 FFFC                  		dbf	d1,loc_1B730
0001EB24                            
0001EB24 4E75                       		rts	
0001EB26                            ; End of function SS_Load
0001EB26                            
0001EB26                            ; ===========================================================================
0001EB26                            
0001EB26                            SS_MapIndex:
0001EB26                            		include	"_inc\Special Stage Mappings & VRAM Pointers.asm"
0001EB26                            ; ---------------------------------------------------------------------------
0001EB26                            ; Special stage	mappings and VRAM pointers
0001EB26                            ; ---------------------------------------------------------------------------
0001EB26 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001EB2A 0142                       	dc.w $142		; VRAM setting
0001EB2C 0000 0000                  	dc.l Map_SSWalls
0001EB30 0142                       	dc.w $142
0001EB32 0000 0000                  	dc.l Map_SSWalls
0001EB36 0142                       	dc.w $142
0001EB38 0000 0000                  	dc.l Map_SSWalls
0001EB3C 0142                       	dc.w $142
0001EB3E 0000 0000                  	dc.l Map_SSWalls
0001EB42 0142                       	dc.w $142
0001EB44 0000 0000                  	dc.l Map_SSWalls
0001EB48 0142                       	dc.w $142
0001EB4A 0000 0000                  	dc.l Map_SSWalls
0001EB4E 0142                       	dc.w $142
0001EB50 0000 0000                  	dc.l Map_SSWalls
0001EB54 0142                       	dc.w $142
0001EB56 0000 0000                  	dc.l Map_SSWalls
0001EB5A 0142                       	dc.w $142
0001EB5C 0000 0000                  	dc.l Map_SSWalls
0001EB60 2142                       	dc.w $2142
0001EB62 0000 0000                  	dc.l Map_SSWalls
0001EB66 2142                       	dc.w $2142
0001EB68 0000 0000                  	dc.l Map_SSWalls
0001EB6C 2142                       	dc.w $2142
0001EB6E 0000 0000                  	dc.l Map_SSWalls
0001EB72 2142                       	dc.w $2142
0001EB74 0000 0000                  	dc.l Map_SSWalls
0001EB78 2142                       	dc.w $2142
0001EB7A 0000 0000                  	dc.l Map_SSWalls
0001EB7E 2142                       	dc.w $2142
0001EB80 0000 0000                  	dc.l Map_SSWalls
0001EB84 2142                       	dc.w $2142
0001EB86 0000 0000                  	dc.l Map_SSWalls
0001EB8A 2142                       	dc.w $2142
0001EB8C 0000 0000                  	dc.l Map_SSWalls
0001EB90 2142                       	dc.w $2142
0001EB92 0000 0000                  	dc.l Map_SSWalls
0001EB96 4142                       	dc.w $4142
0001EB98 0000 0000                  	dc.l Map_SSWalls
0001EB9C 4142                       	dc.w $4142
0001EB9E 0000 0000                  	dc.l Map_SSWalls
0001EBA2 4142                       	dc.w $4142
0001EBA4 0000 0000                  	dc.l Map_SSWalls
0001EBA8 4142                       	dc.w $4142
0001EBAA 0000 0000                  	dc.l Map_SSWalls
0001EBAE 4142                       	dc.w $4142
0001EBB0 0000 0000                  	dc.l Map_SSWalls
0001EBB4 4142                       	dc.w $4142
0001EBB6 0000 0000                  	dc.l Map_SSWalls
0001EBBA 4142                       	dc.w $4142
0001EBBC 0000 0000                  	dc.l Map_SSWalls
0001EBC0 4142                       	dc.w $4142
0001EBC2 0000 0000                  	dc.l Map_SSWalls
0001EBC6 4142                       	dc.w $4142
0001EBC8 0000 0000                  	dc.l Map_SSWalls
0001EBCC 6142                       	dc.w $6142
0001EBCE 0000 0000                  	dc.l Map_SSWalls
0001EBD2 6142                       	dc.w $6142
0001EBD4 0000 0000                  	dc.l Map_SSWalls
0001EBD8 6142                       	dc.w $6142
0001EBDA 0000 0000                  	dc.l Map_SSWalls
0001EBDE 6142                       	dc.w $6142
0001EBE0 0000 0000                  	dc.l Map_SSWalls
0001EBE4 6142                       	dc.w $6142
0001EBE6 0000 0000                  	dc.l Map_SSWalls
0001EBEA 6142                       	dc.w $6142
0001EBEC 0000 0000                  	dc.l Map_SSWalls
0001EBF0 6142                       	dc.w $6142
0001EBF2 0000 0000                  	dc.l Map_SSWalls
0001EBF6 6142                       	dc.w $6142
0001EBF8 0000 0000                  	dc.l Map_SSWalls
0001EBFC 6142                       	dc.w $6142
0001EBFE 0001 0DB0                  	dc.l Map_Bump
0001EC02 023B                       	dc.w $23B
0001EC04 0000 0000                  	dc.l Map_SS_R
0001EC08 0570                       	dc.w $570
0001EC0A 0000 0000                  	dc.l Map_SS_R
0001EC0E 0251                       	dc.w $251
0001EC10 0000 0000                  	dc.l Map_SS_R
0001EC14 0370                       	dc.w $370
0001EC16 0000 0000                  	dc.l Map_SS_Up
0001EC1A 0263                       	dc.w $263
0001EC1C 0000 0000                  	dc.l Map_SS_Down
0001EC20 0263                       	dc.w $263
0001EC22 0000 0000                  	dc.l Map_SS_R
0001EC26 22F0                       	dc.w $22F0
0001EC28 0000 0000                  	dc.l Map_SS_Glass
0001EC2C 0470                       	dc.w $470
0001EC2E 0000 0000                  	dc.l Map_SS_Glass
0001EC32 05F0                       	dc.w $5F0
0001EC34 0000 0000                  	dc.l Map_SS_Glass
0001EC38 65F0                       	dc.w $65F0
0001EC3A 0000 0000                  	dc.l Map_SS_Glass
0001EC3E 25F0                       	dc.w $25F0
0001EC40 0000 0000                  	dc.l Map_SS_Glass
0001EC44 45F0                       	dc.w $45F0
0001EC46 0000 0000                  	dc.l Map_SS_R
0001EC4A 02F0                       	dc.w $2F0
0001EC4C 0101 0DB0                  	dc.l Map_Bump+$1000000	; add frame no.	* $1000000
0001EC50 023B                       	dc.w $23B
0001EC52 0201 0DB0                  	dc.l Map_Bump+$2000000
0001EC56 023B                       	dc.w $23B
0001EC58 0000 0000                  	dc.l Map_SS_R
0001EC5C 0797                       	dc.w $797
0001EC5E 0000 0000                  	dc.l Map_SS_R
0001EC62 07A0                       	dc.w $7A0
0001EC64 0000 0000                  	dc.l Map_SS_R
0001EC68 07A9                       	dc.w $7A9
0001EC6A 0000 0000                  	dc.l Map_SS_R
0001EC6E 0797                       	dc.w $797
0001EC70 0000 0000                  	dc.l Map_SS_R
0001EC74 07A0                       	dc.w $7A0
0001EC76 0000 0000                  	dc.l Map_SS_R
0001EC7A 07A9                       	dc.w $7A9
0001EC7C 0000 BFA8                  	dc.l Map_Ring
0001EC80 2798                       	dc.w $2798
0001EC82 0000 0000                  	dc.l Map_SS_Chaos3
0001EC86 0770                       	dc.w $770
0001EC88 0000 0000                  	dc.l Map_SS_Chaos3
0001EC8C 2770                       	dc.w $2770
0001EC8E 0000 0000                  	dc.l Map_SS_Chaos3
0001EC92 4770                       	dc.w $4770
0001EC94 0000 0000                  	dc.l Map_SS_Chaos3
0001EC98 6770                       	dc.w $6770
0001EC9A 0000 0000                  	dc.l Map_SS_Chaos1
0001EC9E 0770                       	dc.w $770
0001ECA0 0000 0000                  	dc.l Map_SS_Chaos2
0001ECA4 0770                       	dc.w $770
0001ECA6 0000 0000                  	dc.l Map_SS_R
0001ECAA 04F0                       	dc.w $4F0
0001ECAC 0400 BFA8                  	dc.l Map_Ring+$4000000
0001ECB0 2798                       	dc.w $2798
0001ECB2 0500 BFA8                  	dc.l Map_Ring+$5000000
0001ECB6 2798                       	dc.w $2798
0001ECB8 0600 BFA8                  	dc.l Map_Ring+$6000000
0001ECBC 2798                       	dc.w $2798
0001ECBE 0700 BFA8                  	dc.l Map_Ring+$7000000
0001ECC2 2798                       	dc.w $2798
0001ECC4 0000 0000                  	dc.l Map_SS_Glass
0001ECC8 23F0                       	dc.w $23F0
0001ECCA 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001ECCE 23F0                       	dc.w $23F0
0001ECD0 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001ECD4 23F0                       	dc.w $23F0
0001ECD6 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001ECDA 23F0                       	dc.w $23F0
0001ECDC 0000 0000                  	dc.l Map_SS_R+$2000000
0001ECE0 04F0                       	dc.w $4F0
0001ECE2 0000 0000                  	dc.l Map_SS_Glass
0001ECE6 05F0                       	dc.w $5F0
0001ECE8 0000 0000                  	dc.l Map_SS_Glass
0001ECEC 65F0                       	dc.w $65F0
0001ECEE 0000 0000                  	dc.l Map_SS_Glass
0001ECF2 25F0                       	dc.w $25F0
0001ECF4 0000 0000                  	dc.l Map_SS_Glass
0001ECF8 45F0                       	dc.w $45F0
0001ECF8 45F0                       	dc.w $45F0
0001ECFA                            
0001ECFA                            Map_SS_R:	include	"_maps\SS R Block.asm"
0001ECFA                            ; ---------------------------------------------------------------------------
0001ECFA                            ; Sprite mappings - special stage "R" block
0001ECFA                            ; ---------------------------------------------------------------------------
0001ECFA                            Map_SS_R_internal:
0001ECFA 0000                       		dc.w byte_1B912-Map_SS_R_internal
0001ECFC 0000                       		dc.w byte_1B918-Map_SS_R_internal
0001ECFE 0000                       		dc.w byte_1B91E-Map_SS_R_internal
0001ED00 01                         byte_1B912:	dc.b 1
0001ED01 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001ED06 01                         byte_1B918:	dc.b 1
0001ED07 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001ED0C 00                         byte_1B91E:	dc.b 0
0001ED0E 00                         		even
0001ED0E 00                         		even
0001ED0E                            Map_SS_Glass:	include	"_maps\SS Glass Block.asm"
0001ED0E                            ; ---------------------------------------------------------------------------
0001ED0E                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001ED0E                            ; ---------------------------------------------------------------------------
0001ED0E                            Map_SS_Glass_internal:
0001ED0E 0000                       		dc.w byte_1B928-Map_SS_Glass_internal
0001ED10 0000                       		dc.w byte_1B92E-Map_SS_Glass_internal
0001ED12 0000                       		dc.w byte_1B934-Map_SS_Glass_internal
0001ED14 0000                       		dc.w byte_1B93A-Map_SS_Glass_internal
0001ED16 01                         byte_1B928:	dc.b 1
0001ED17 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001ED1C 01                         byte_1B92E:	dc.b 1
0001ED1D F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001ED22 01                         byte_1B934:	dc.b 1
0001ED23 F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001ED28 01                         byte_1B93A:	dc.b 1
0001ED29 F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001ED2E                            		even
0001ED2E                            		even
0001ED2E                            Map_SS_Up:	include	"_maps\SS UP Block.asm"
0001ED2E                            ; ---------------------------------------------------------------------------
0001ED2E                            ; Sprite mappings - special stage "UP" block
0001ED2E                            ; ---------------------------------------------------------------------------
0001ED2E                            Map_SS_Up_internal:
0001ED2E 0000                       		dc.w byte_1B944-Map_SS_Up_internal
0001ED30 0000                       		dc.w byte_1B94A-Map_SS_Up_internal
0001ED32 01                         byte_1B944:	dc.b 1
0001ED33 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001ED38 01                         byte_1B94A:	dc.b 1
0001ED39 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001ED3E                            		even
0001ED3E                            		even
0001ED3E                            Map_SS_Down:	include	"_maps\SS DOWN Block.asm"
0001ED3E                            ; ---------------------------------------------------------------------------
0001ED3E                            ; Sprite mappings - special stage "DOWN" block
0001ED3E                            ; ---------------------------------------------------------------------------
0001ED3E                            Map_SS_Down_internal:
0001ED3E 0000                       		dc.w byte_1B954-Map_SS_Down_internal
0001ED40 0000                       		dc.w byte_1B95A-Map_SS_Down_internal
0001ED42 01                         byte_1B954:	dc.b 1
0001ED43 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001ED48 01                         byte_1B95A:	dc.b 1
0001ED49 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001ED4E                            		even
0001ED4E                            		even
0001ED4E                            		include	"_maps\SS Chaos Emeralds.asm"
0001ED4E                            ; ---------------------------------------------------------------------------
0001ED4E                            ; Sprite mappings - special stage chaos	emeralds
0001ED4E                            ; ---------------------------------------------------------------------------
0001ED4E 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001ED50 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001ED52 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001ED54 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001ED56 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001ED58 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001ED5A 01                         byte_1B96C:	dc.b 1
0001ED5B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001ED60 01                         byte_1B972:	dc.b 1
0001ED61 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0001ED66 01                         byte_1B978:	dc.b 1
0001ED67 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001ED6C 01                         byte_1B97E:	dc.b 1
0001ED6D F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001ED72                            		even
0001ED72                            		even
0001ED72                            
0001ED72                            		include	"_incObj\09 Sonic in Special Stage.asm"
0001ED72                            ; ---------------------------------------------------------------------------
0001ED72                            ; Object 09 - Sonic (special stage)
0001ED72                            ; ---------------------------------------------------------------------------
0001ED72                            
0001ED72                            SonicSpecial:
0001ED72 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
0001ED76 6700                       		beq.s	Obj09_Normal	; if not, branch
0001ED78 6100 0000                  		bsr.w	SS_FixCamera
0001ED7C 6000 0000                  		bra.w	DebugMode
0001ED80                            ; ===========================================================================
0001ED80                            
0001ED80                            Obj09_Normal:
0001ED80 7000                       		moveq	#0,d0
0001ED82 1028 0024                  		move.b	obRoutine(a0),d0
0001ED86 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001ED8A 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001ED8E                            ; ===========================================================================
0001ED8E 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001ED90 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001ED92 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001ED94 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001ED96                            ; ===========================================================================
0001ED96                            
0001ED96                            Obj09_Main:	; Routine 0
0001ED96 5428 0024                  		addq.b	#2,obRoutine(a0)
0001ED9A 117C 000E 0016             		move.b	#$E,obHeight(a0)
0001EDA0 117C 0007 0017             		move.b	#7,obWidth(a0)
0001EDA6 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
0001EDAE 317C 0780 0002             		move.w	#$780,obGfx(a0)
0001EDB4 117C 0004 0001             		move.b	#4,obRender(a0)
0001EDBA 317C 0000 0018             		move.w	#0,obPriority(a0)
0001EDC0 117C 0002 001C             		move.b	#id_Roll,obAnim(a0)
0001EDC6 08E8 0002 0022             		bset	#2,obStatus(a0)
0001EDCC 08E8 0001 0022             		bset	#1,obStatus(a0)
0001EDD2                            
0001EDD2                            Obj09_ChkDebug:	; Routine 2
0001EDD2 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug mode	cheat enabled?
0001EDD6 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001EDD8 0838 0004 F605             		btst	#bitB,(v_jpadpress1).w ; is button B pressed?
0001EDDE 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001EDE0 31FC 0001 FE08             		move.w	#1,(v_debuguse).w ; change Sonic into a ring
0001EDE6                            
0001EDE6                            Obj09_NoDebug:
0001EDE6 117C 0000 0030             		move.b	#0,$30(a0)
0001EDEC 7000                       		moveq	#0,d0
0001EDEE 1028 0022                  		move.b	obStatus(a0),d0
0001EDF2 0240 0002                  		andi.w	#2,d0
0001EDF6 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001EDFA 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001EDFE 4EB9 0001 689A             		jsr	(Sonic_LoadGfx).l
0001EE04 4EF9 0000 F88C             		jmp	(DisplaySprite).l
0001EE0A                            ; ===========================================================================
0001EE0A 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001EE0C 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001EE0E                            ; ===========================================================================
0001EE0E                            
0001EE0E                            Obj09_OnWall:
0001EE0E 6100 0000                  		bsr.w	Obj09_Jump
0001EE12 6100 0000                  		bsr.w	Obj09_Move
0001EE16 6100 0000                  		bsr.w	Obj09_Fall
0001EE1A 6000                       		bra.s	Obj09_Display
0001EE1C                            ; ===========================================================================
0001EE1C                            
0001EE1C                            Obj09_InAir:
0001EE1C 6100 0000                  		bsr.w	nullsub_2
0001EE20 6100 0000                  		bsr.w	Obj09_Move
0001EE24 6100 0000                  		bsr.w	Obj09_Fall
0001EE28                            
0001EE28                            Obj09_Display:
0001EE28 6100 0000                  		bsr.w	Obj09_ChkItems
0001EE2C 6100 0000                  		bsr.w	Obj09_ChkItems2
0001EE30 4EB9 0000 F878             		jsr	(SpeedToPos).l
0001EE36 6100 0000                  		bsr.w	SS_FixCamera
0001EE3A 3038 F780                  		move.w	(v_ssangle).w,d0
0001EE3E D078 F782                  		add.w	(v_ssrotate).w,d0
0001EE42 31C0 F780                  		move.w	d0,(v_ssangle).w
0001EE46 4EB9 0001 6502             		jsr	(Sonic_Animate).l
0001EE4C 4E75                       		rts	
0001EE4E                            
0001EE4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EE4E                            
0001EE4E                            
0001EE4E                            Obj09_Move:
0001EE4E 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
0001EE54 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001EE56 6100 0000                  		bsr.w	Obj09_MoveLeft
0001EE5A                            
0001EE5A                            Obj09_ChkRight:
0001EE5A 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
0001EE60 6700                       		beq.s	loc_1BA78	; if not, branch
0001EE62 6100 0000                  		bsr.w	Obj09_MoveRight
0001EE66                            
0001EE66                            loc_1BA78:
0001EE66 1038 F602                  		move.b	(v_jpadhold2).w,d0
0001EE6A 0200 000C                  		andi.b	#btnL+btnR,d0
0001EE6E 6600                       		bne.s	loc_1BAA8
0001EE70 3028 0020                  		move.w	obInertia(a0),d0
0001EE74 6700                       		beq.s	loc_1BAA8
0001EE76 6B00                       		bmi.s	loc_1BA9A
0001EE78 0440 000C                  		subi.w	#$C,d0
0001EE7C 6400                       		bcc.s	loc_1BA94
0001EE7E 303C 0000                  		move.w	#0,d0
0001EE82                            
0001EE82                            loc_1BA94:
0001EE82 3140 0020                  		move.w	d0,obInertia(a0)
0001EE86 6000                       		bra.s	loc_1BAA8
0001EE88                            ; ===========================================================================
0001EE88                            
0001EE88                            loc_1BA9A:
0001EE88 0640 000C                  		addi.w	#$C,d0
0001EE8C 6400                       		bcc.s	loc_1BAA4
0001EE8E 303C 0000                  		move.w	#0,d0
0001EE92                            
0001EE92                            loc_1BAA4:
0001EE92 3140 0020                  		move.w	d0,obInertia(a0)
0001EE96                            
0001EE96                            loc_1BAA8:
0001EE96 1038 F780                  		move.b	(v_ssangle).w,d0
0001EE9A 0600 0020                  		addi.b	#$20,d0
0001EE9E 0200 00C0                  		andi.b	#$C0,d0
0001EEA2 4400                       		neg.b	d0
0001EEA4 4EB9 0000 3A32             		jsr	(CalcSine).l
0001EEAA C3E8 0020                  		muls.w	obInertia(a0),d1
0001EEAE D3A8 0008                  		add.l	d1,obX(a0)
0001EEB2 C1E8 0020                  		muls.w	obInertia(a0),d0
0001EEB6 D1A8 000C                  		add.l	d0,obY(a0)
0001EEBA 48E7 C000                  		movem.l	d0-d1,-(sp)
0001EEBE 2428 000C                  		move.l	obY(a0),d2
0001EEC2 2628 0008                  		move.l	obX(a0),d3
0001EEC6 6100 0000                  		bsr.w	sub_1BCE8
0001EECA 6700                       		beq.s	loc_1BAF2
0001EECC 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001EED0 93A8 0008                  		sub.l	d1,obX(a0)
0001EED4 91A8 000C                  		sub.l	d0,obY(a0)
0001EED8 317C 0000 0020             		move.w	#0,obInertia(a0)
0001EEDE 4E75                       		rts	
0001EEE0                            ; ===========================================================================
0001EEE0                            
0001EEE0                            loc_1BAF2:
0001EEE0 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001EEE4 4E75                       		rts	
0001EEE6                            ; End of function Obj09_Move
0001EEE6                            
0001EEE6                            
0001EEE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EEE6                            
0001EEE6                            
0001EEE6                            Obj09_MoveLeft:
0001EEE6 08E8 0000 0022             		bset	#0,obStatus(a0)
0001EEEC 3028 0020                  		move.w	obInertia(a0),d0
0001EEF0 6700                       		beq.s	loc_1BB06
0001EEF2 6A00                       		bpl.s	loc_1BB1A
0001EEF4                            
0001EEF4                            loc_1BB06:
0001EEF4 0440 000C                  		subi.w	#$C,d0
0001EEF8 0C40 F800                  		cmpi.w	#-$800,d0
0001EEFC 6E00                       		bgt.s	loc_1BB14
0001EEFE 303C F800                  		move.w	#-$800,d0
0001EF02                            
0001EF02                            loc_1BB14:
0001EF02 3140 0020                  		move.w	d0,obInertia(a0)
0001EF06 4E75                       		rts	
0001EF08                            ; ===========================================================================
0001EF08                            
0001EF08                            loc_1BB1A:
0001EF08 0440 0040                  		subi.w	#$40,d0
0001EF0C 6400                       		bcc.s	loc_1BB22
0001EF0E 4E71                       		nop	
0001EF10                            
0001EF10                            loc_1BB22:
0001EF10 3140 0020                  		move.w	d0,obInertia(a0)
0001EF14 4E75                       		rts	
0001EF16                            ; End of function Obj09_MoveLeft
0001EF16                            
0001EF16                            
0001EF16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EF16                            
0001EF16                            
0001EF16                            Obj09_MoveRight:
0001EF16 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001EF1C 3028 0020                  		move.w	obInertia(a0),d0
0001EF20 6B00                       		bmi.s	loc_1BB48
0001EF22 0640 000C                  		addi.w	#$C,d0
0001EF26 0C40 0800                  		cmpi.w	#$800,d0
0001EF2A 6D00                       		blt.s	loc_1BB42
0001EF2C 303C 0800                  		move.w	#$800,d0
0001EF30                            
0001EF30                            loc_1BB42:
0001EF30 3140 0020                  		move.w	d0,obInertia(a0)
0001EF34 6000                       		bra.s	locret_1BB54
0001EF36                            ; ===========================================================================
0001EF36                            
0001EF36                            loc_1BB48:
0001EF36 0640 0040                  		addi.w	#$40,d0
0001EF3A 6400                       		bcc.s	loc_1BB50
0001EF3C 4E71                       		nop	
0001EF3E                            
0001EF3E                            loc_1BB50:
0001EF3E 3140 0020                  		move.w	d0,obInertia(a0)
0001EF42                            
0001EF42                            locret_1BB54:
0001EF42 4E75                       		rts	
0001EF44                            ; End of function Obj09_MoveRight
0001EF44                            
0001EF44                            
0001EF44                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EF44                            
0001EF44                            
0001EF44                            Obj09_Jump:
0001EF44 1038 F603                  		move.b	(v_jpadpress2).w,d0
0001EF48 0200 0070                  		andi.b	#btnABC,d0	; is A,	B or C pressed?
0001EF4C 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001EF4E 1038 F780                  		move.b	(v_ssangle).w,d0
0001EF52 0200 00FC                  		andi.b	#$FC,d0
0001EF56 4400                       		neg.b	d0
0001EF58 0400 0040                  		subi.b	#$40,d0
0001EF5C 4EB9 0000 3A32             		jsr	(CalcSine).l
0001EF62 C3FC 0680                  		muls.w	#$680,d1
0001EF66 E081                       		asr.l	#8,d1
0001EF68 3141 0010                  		move.w	d1,obVelX(a0)
0001EF6C C1FC 0680                  		muls.w	#$680,d0
0001EF70 E080                       		asr.l	#8,d0
0001EF72 3140 0012                  		move.w	d0,obVelY(a0)
0001EF76 08E8 0001 0022             		bset	#1,obStatus(a0)
0001EF86                            
0001EF86                            Obj09_NoJump:
0001EF86 4E75                       		rts	
0001EF88                            ; End of function Obj09_Jump
0001EF88                            
0001EF88                            
0001EF88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EF88                            
0001EF88                            
0001EF88                            nullsub_2:
0001EF88 4E75                       		rts	
0001EF8A                            ; End of function nullsub_2
0001EF8A                            
0001EF8A                            ; ===========================================================================
0001EF8A                            ; ---------------------------------------------------------------------------
0001EF8A                            ; unused subroutine to limit Sonic's upward vertical speed
0001EF8A                            ; ---------------------------------------------------------------------------
0001EF8A 323C FC00                  		move.w	#-$400,d1
0001EF8E B268 0012                  		cmp.w	obVelY(a0),d1
0001EF92 6F00                       		ble.s	locret_1BBB4
0001EF94 1038 F602                  		move.b	(v_jpadhold2).w,d0
0001EF98 0200 0070                  		andi.b	#btnABC,d0
0001EF9C 6600                       		bne.s	locret_1BBB4
0001EF9E 3141 0012                  		move.w	d1,obVelY(a0)
0001EFA2                            
0001EFA2                            locret_1BBB4:
0001EFA2 4E75                       		rts	
0001EFA4                            ; ---------------------------------------------------------------------------
0001EFA4                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001EFA4                            ; ---------------------------------------------------------------------------
0001EFA4                            
0001EFA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EFA4                            
0001EFA4                            
0001EFA4                            SS_FixCamera:
0001EFA4 3428 000C                  		move.w	obY(a0),d2
0001EFA8 3628 0008                  		move.w	obX(a0),d3
0001EFAC 3038 F700                  		move.w	(v_screenposx).w,d0
0001EFB0 0443 00A0                  		subi.w	#$A0,d3
0001EFB4 6500                       		bcs.s	loc_1BBCE
0001EFB6 9043                       		sub.w	d3,d0
0001EFB8 9178 F700                  		sub.w	d0,(v_screenposx).w
0001EFBC                            
0001EFBC                            loc_1BBCE:
0001EFBC 3038 F704                  		move.w	(v_screenposy).w,d0
0001EFC0 0442 0070                  		subi.w	#$70,d2
0001EFC4 6500                       		bcs.s	locret_1BBDE
0001EFC6 9042                       		sub.w	d2,d0
0001EFC8 9178 F704                  		sub.w	d0,(v_screenposy).w
0001EFCC                            
0001EFCC                            locret_1BBDE:
0001EFCC 4E75                       		rts	
0001EFCE                            ; End of function SS_FixCamera
0001EFCE                            
0001EFCE                            ; ===========================================================================
0001EFCE                            
0001EFCE                            Obj09_ExitStage:
0001EFCE 0678 0040 F782             		addi.w	#$40,(v_ssrotate).w
0001EFD4 0C78 1800 F782             		cmpi.w	#$1800,(v_ssrotate).w
0001EFDA 6600                       		bne.s	loc_1BBF4
0001EFDC 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w
0001EFE2                            
0001EFE2                            loc_1BBF4:
0001EFE2 0C78 3000 F782             		cmpi.w	#$3000,(v_ssrotate).w
0001EFE8 6D00                       		blt.s	loc_1BC12
0001EFEA 31FC 0000 F782             		move.w	#0,(v_ssrotate).w
0001EFF0 31FC 4000 F780             		move.w	#$4000,(v_ssangle).w
0001EFF6 5428 0024                  		addq.b	#2,obRoutine(a0)
0001EFFA 317C 003C 0038             		move.w	#$3C,$38(a0)
0001F000                            
0001F000                            loc_1BC12:
0001F000 3038 F780                  		move.w	(v_ssangle).w,d0
0001F004 D078 F782                  		add.w	(v_ssrotate).w,d0
0001F008 31C0 F780                  		move.w	d0,(v_ssangle).w
0001F00C 4EB9 0001 6502             		jsr	(Sonic_Animate).l
0001F012 4EB9 0001 689A             		jsr	(Sonic_LoadGfx).l
0001F018 6100 FF8A                  		bsr.w	SS_FixCamera
0001F01C 4EF9 0000 F88C             		jmp	(DisplaySprite).l
0001F022                            ; ===========================================================================
0001F022                            
0001F022                            Obj09_Exit2:
0001F022 5368 0038                  		subq.w	#1,$38(a0)
0001F026 6600                       		bne.s	loc_1BC40
0001F028 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w
0001F02E                            
0001F02E                            loc_1BC40:
0001F02E 4EB9 0001 6502             		jsr	(Sonic_Animate).l
0001F034 4EB9 0001 689A             		jsr	(Sonic_LoadGfx).l
0001F03A 6100 FF68                  		bsr.w	SS_FixCamera
0001F03E 4EF9 0000 F88C             		jmp	(DisplaySprite).l
0001F044                            
0001F044                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F044                            
0001F044                            
0001F044                            Obj09_Fall:
0001F044 2428 000C                  		move.l	obY(a0),d2
0001F048 2628 0008                  		move.l	obX(a0),d3
0001F04C 1038 F780                  		move.b	(v_ssangle).w,d0
0001F050 0200 00FC                  		andi.b	#$FC,d0
0001F054 4EB9 0000 3A32             		jsr	(CalcSine).l
0001F05A 3828 0010                  		move.w	obVelX(a0),d4
0001F05E 48C4                       		ext.l	d4
0001F060 E184                       		asl.l	#8,d4
0001F062 C1FC 002A                  		muls.w	#$2A,d0
0001F066 D084                       		add.l	d4,d0
0001F068 3828 0012                  		move.w	obVelY(a0),d4
0001F06C 48C4                       		ext.l	d4
0001F06E E184                       		asl.l	#8,d4
0001F070 C3FC 002A                  		muls.w	#$2A,d1
0001F074 D284                       		add.l	d4,d1
0001F076 D680                       		add.l	d0,d3
0001F078 6100 0000                  		bsr.w	sub_1BCE8
0001F07C 6700                       		beq.s	loc_1BCB0
0001F07E 9680                       		sub.l	d0,d3
0001F080 7000                       		moveq	#0,d0
0001F082 3140 0010                  		move.w	d0,obVelX(a0)
0001F086 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001F08C D481                       		add.l	d1,d2
0001F08E 6100 0000                  		bsr.w	sub_1BCE8
0001F092 6700                       		beq.s	loc_1BCC6
0001F094 9481                       		sub.l	d1,d2
0001F096 7200                       		moveq	#0,d1
0001F098 3141 0012                  		move.w	d1,obVelY(a0)
0001F09C 4E75                       		rts	
0001F09E                            ; ===========================================================================
0001F09E                            
0001F09E                            loc_1BCB0:
0001F09E D481                       		add.l	d1,d2
0001F0A0 6100 0000                  		bsr.w	sub_1BCE8
0001F0A4 6700                       		beq.s	loc_1BCD4
0001F0A6 9481                       		sub.l	d1,d2
0001F0A8 7200                       		moveq	#0,d1
0001F0AA 3141 0012                  		move.w	d1,obVelY(a0)
0001F0AE 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001F0B4                            
0001F0B4                            loc_1BCC6:
0001F0B4 E080                       		asr.l	#8,d0
0001F0B6 E081                       		asr.l	#8,d1
0001F0B8 3140 0010                  		move.w	d0,obVelX(a0)
0001F0BC 3141 0012                  		move.w	d1,obVelY(a0)
0001F0C0 4E75                       		rts	
0001F0C2                            ; ===========================================================================
0001F0C2                            
0001F0C2                            loc_1BCD4:
0001F0C2 E080                       		asr.l	#8,d0
0001F0C4 E081                       		asr.l	#8,d1
0001F0C6 3140 0010                  		move.w	d0,obVelX(a0)
0001F0CA 3141 0012                  		move.w	d1,obVelY(a0)
0001F0CE 08E8 0001 0022             		bset	#1,obStatus(a0)
0001F0D4 4E75                       		rts	
0001F0D6                            ; End of function Obj09_Fall
0001F0D6                            
0001F0D6                            
0001F0D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F0D6                            
0001F0D6                            
0001F0D6                            sub_1BCE8:
0001F0D6 43F9 00FF 0000             		lea	($FF0000).l,a1
0001F0DC 7800                       		moveq	#0,d4
0001F0DE 4842                       		swap	d2
0001F0E0 3802                       		move.w	d2,d4
0001F0E2 4842                       		swap	d2
0001F0E4 0644 0044                  		addi.w	#$44,d4
0001F0E8 88FC 0018                  		divu.w	#$18,d4
0001F0EC C8FC 0080                  		mulu.w	#$80,d4
0001F0F0 D3C4                       		adda.l	d4,a1
0001F0F2 7800                       		moveq	#0,d4
0001F0F4 4843                       		swap	d3
0001F0F6 3803                       		move.w	d3,d4
0001F0F8 4843                       		swap	d3
0001F0FA 0644 0014                  		addi.w	#$14,d4
0001F0FE 88FC 0018                  		divu.w	#$18,d4
0001F102 D2C4                       		adda.w	d4,a1
0001F104 7A00                       		moveq	#0,d5
0001F106 1819                       		move.b	(a1)+,d4
0001F108 6100                       		bsr.s	sub_1BD30
0001F10A 1819                       		move.b	(a1)+,d4
0001F10C 6100                       		bsr.s	sub_1BD30
0001F10E D2FC 007E                  		adda.w	#$7E,a1
0001F112 1819                       		move.b	(a1)+,d4
0001F114 6100                       		bsr.s	sub_1BD30
0001F116 1819                       		move.b	(a1)+,d4
0001F118 6100                       		bsr.s	sub_1BD30
0001F11A 4A05                       		tst.b	d5
0001F11C 4E75                       		rts	
0001F11E                            ; End of function sub_1BCE8
0001F11E                            
0001F11E                            
0001F11E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F11E                            
0001F11E                            
0001F11E                            sub_1BD30:
0001F11E 6700                       		beq.s	locret_1BD44
0001F120 0C04 0028                  		cmpi.b	#$28,d4
0001F124 6700                       		beq.s	locret_1BD44
0001F126 0C04 003A                  		cmpi.b	#$3A,d4
0001F12A 6500                       		bcs.s	loc_1BD46
0001F12C 0C04 004B                  		cmpi.b	#$4B,d4
0001F130 6400                       		bcc.s	loc_1BD46
0001F132                            
0001F132                            locret_1BD44:
0001F132 4E75                       		rts	
0001F134                            ; ===========================================================================
0001F134                            
0001F134                            loc_1BD46:
0001F134 1144 0030                  		move.b	d4,$30(a0)
0001F138 2149 0032                  		move.l	a1,$32(a0)
0001F13C 7AFF                       		moveq	#-1,d5
0001F13E 4E75                       		rts	
0001F140                            ; End of function sub_1BD30
0001F140                            
0001F140                            
0001F140                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F140                            
0001F140                            
0001F140                            Obj09_ChkItems:
0001F140 43F9 00FF 0000             		lea	($FF0000).l,a1
0001F146 7800                       		moveq	#0,d4
0001F148 3828 000C                  		move.w	obY(a0),d4
0001F14C 0644 0050                  		addi.w	#$50,d4
0001F150 88FC 0018                  		divu.w	#$18,d4
0001F154 C8FC 0080                  		mulu.w	#$80,d4
0001F158 D3C4                       		adda.l	d4,a1
0001F15A 7800                       		moveq	#0,d4
0001F15C 3828 0008                  		move.w	obX(a0),d4
0001F160 0644 0020                  		addi.w	#$20,d4
0001F164 88FC 0018                  		divu.w	#$18,d4
0001F168 D2C4                       		adda.w	d4,a1
0001F16A 1811                       		move.b	(a1),d4
0001F16C 6600                       		bne.s	Obj09_ChkCont
0001F16E 4A28 003A                  		tst.b	$3A(a0)
0001F172 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001F176 7800                       		moveq	#0,d4
0001F178 4E75                       		rts	
0001F17A                            ; ===========================================================================
0001F17A                            
0001F17A                            Obj09_ChkCont:
0001F17A 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001F17E 6600                       		bne.s	Obj09_Chk1Up
0001F180 6100 F726                  		bsr.w	SS_RemoveCollectedItem
0001F184 6600                       		bne.s	Obj09_GetCont
0001F186 14BC 0001                  		move.b	#1,(a2)
0001F18A 2549 0004                  		move.l	a1,4(a2)
0001F18E                            
0001F18E                            Obj09_GetCont:
0001F18E 4EB9 0000 BB10             		jsr	(CollectRing).l
0001F194 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; check if you have 50 rings
0001F19A 6500                       		bcs.s	Obj09_NoCont
0001F19C 08F8 0000 FE1B             		bset	#0,(v_lifecount).w
0001F1A2 6600                       		bne.s	Obj09_NoCont
0001F1A4 5238 FE18                  		addq.b	#1,(v_continues).w ; add 1 to number of continues
0001F1B2                            
0001F1B2                            Obj09_NoCont:
0001F1B2 7800                       		moveq	#0,d4
0001F1B4 4E75                       		rts	
0001F1B6                            ; ===========================================================================
0001F1B6                            
0001F1B6                            Obj09_Chk1Up:
0001F1B6 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001F1BA 6600                       		bne.s	Obj09_ChkEmer
0001F1BC 6100 F6EA                  		bsr.w	SS_RemoveCollectedItem
0001F1C0 6600                       		bne.s	Obj09_Get1Up
0001F1C2 14BC 0003                  		move.b	#3,(a2)
0001F1C6 2549 0004                  		move.l	a1,4(a2)
0001F1CA                            
0001F1CA                            Obj09_Get1Up:
0001F1CA 5238 FE12                  		addq.b	#1,(v_lives).w	; add 1 to number of lives
0001F1CE 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update the lives counter
0001F1DC 7800                       		moveq	#0,d4
0001F1DE 4E75                       		rts	
0001F1E0                            ; ===========================================================================
0001F1E0                            
0001F1E0                            Obj09_ChkEmer:
0001F1E0 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001F1E4 6500                       		bcs.s	Obj09_ChkGhost
0001F1E6 0C04 0040                  		cmpi.b	#$40,d4
0001F1EA 6200                       		bhi.s	Obj09_ChkGhost
0001F1EC 6100 F6BA                  		bsr.w	SS_RemoveCollectedItem
0001F1F0 6600                       		bne.s	Obj09_GetEmer
0001F1F2 14BC 0005                  		move.b	#5,(a2)
0001F1F6 2549 0004                  		move.l	a1,4(a2)
0001F1FA                            
0001F1FA                            Obj09_GetEmer:
0001F1FA 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all the emeralds?
0001F200 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001F202 0404 003B                  		subi.b	#$3B,d4
0001F206 7000                       		moveq	#0,d0
0001F208 1038 FE57                  		move.b	(v_emeralds).w,d0
0001F20C 45F8 FE58                  		lea	(v_emldlist).w,a2
0001F210 1584 0000                  		move.b	d4,(a2,d0.w)
0001F214 5238 FE57                  		addq.b	#1,(v_emeralds).w ; add 1 to number of emeralds
0001F218                            
0001F218                            Obj09_NoEmer:
0001F222 7800                       		moveq	#0,d4
0001F224 4E75                       		rts	
0001F226                            ; ===========================================================================
0001F226                            
0001F226                            Obj09_ChkGhost:
0001F226 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001F22A 6600                       		bne.s	Obj09_ChkGhostTag
0001F22C 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001F232                            
0001F232                            Obj09_ChkGhostTag:
0001F232 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001F236 6600                       		bne.s	Obj09_NoGhost
0001F238 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001F23E 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001F240 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001F246                            
0001F246                            Obj09_NoGhost:
0001F246 78FF                       		moveq	#-1,d4
0001F248 4E75                       		rts	
0001F24A                            ; ===========================================================================
0001F24A                            
0001F24A                            Obj09_MakeGhostSolid:
0001F24A 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001F250 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001F252 43F9 00FF 1020             		lea	($FF1020).l,a1
0001F258 723F                       		moveq	#$3F,d1
0001F25A                            
0001F25A                            Obj09_GhostLoop2:
0001F25A 743F                       		moveq	#$3F,d2
0001F25C                            
0001F25C                            Obj09_GhostLoop:
0001F25C 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001F260 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001F262 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001F266                            
0001F266                            Obj09_NoReplace:
0001F266 5249                       		addq.w	#1,a1
0001F268 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001F26C 43E9 0040                  		lea	$40(a1),a1
0001F270 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001F274                            
0001F274                            Obj09_GhostNotSolid:
0001F274 4228 003A                  		clr.b	$3A(a0)
0001F278 7800                       		moveq	#0,d4
0001F27A 4E75                       		rts	
0001F27C                            ; End of function Obj09_ChkItems
0001F27C                            
0001F27C                            
0001F27C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F27C                            
0001F27C                            
0001F27C                            Obj09_ChkItems2:
0001F27C 1028 0030                  		move.b	$30(a0),d0
0001F280 6600                       		bne.s	Obj09_ChkBumper
0001F282 5328 0036                  		subq.b	#1,$36(a0)
0001F286 6A00                       		bpl.s	loc_1BEA0
0001F288 117C 0000 0036             		move.b	#0,$36(a0)
0001F28E                            
0001F28E                            loc_1BEA0:
0001F28E 5328 0037                  		subq.b	#1,$37(a0)
0001F292 6A00                       		bpl.s	locret_1BEAC
0001F294 117C 0000 0037             		move.b	#0,$37(a0)
0001F29A                            
0001F29A                            locret_1BEAC:
0001F29A 4E75                       		rts	
0001F29C                            ; ===========================================================================
0001F29C                            
0001F29C                            Obj09_ChkBumper:
0001F29C 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001F2A0 6600                       		bne.s	Obj09_GOAL
0001F2A2 2228 0032                  		move.l	$32(a0),d1
0001F2A6 0481 00FF 0001             		subi.l	#$FF0001,d1
0001F2AC 3401                       		move.w	d1,d2
0001F2AE 0241 007F                  		andi.w	#$7F,d1
0001F2B2 C2FC 0018                  		mulu.w	#$18,d1
0001F2B6 0441 0014                  		subi.w	#$14,d1
0001F2BA EE4A                       		lsr.w	#7,d2
0001F2BC 0242 007F                  		andi.w	#$7F,d2
0001F2C0 C4FC 0018                  		mulu.w	#$18,d2
0001F2C4 0442 0044                  		subi.w	#$44,d2
0001F2C8 9268 0008                  		sub.w	obX(a0),d1
0001F2CC 9468 000C                  		sub.w	obY(a0),d2
0001F2D0 4EB9 0000 3CC4             		jsr	(CalcAngle).l
0001F2D6 4EB9 0000 3A32             		jsr	(CalcSine).l
0001F2DC C3FC F900                  		muls.w	#-$700,d1
0001F2E0 E081                       		asr.l	#8,d1
0001F2E2 3141 0010                  		move.w	d1,obVelX(a0)
0001F2E6 C1FC F900                  		muls.w	#-$700,d0
0001F2EA E080                       		asr.l	#8,d0
0001F2EC 3140 0012                  		move.w	d0,obVelY(a0)
0001F2F0 08E8 0001 0022             		bset	#1,obStatus(a0)
0001F2F6 6100 F5B0                  		bsr.w	SS_RemoveCollectedItem
0001F2FA 6600                       		bne.s	Obj09_BumpSnd
0001F2FC 14BC 0002                  		move.b	#2,(a2)
0001F300 2028 0032                  		move.l	$32(a0),d0
0001F304 5380                       		subq.l	#1,d0
0001F306 2540 0004                  		move.l	d0,4(a2)
0001F30A                            
0001F30A                            Obj09_BumpSnd:
0001F314                            ; ===========================================================================
0001F314                            
0001F314                            Obj09_GOAL:
0001F314 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001F318 6600                       		bne.s	Obj09_UPblock
0001F31A 5428 0024                  		addq.b	#2,obRoutine(a0) ; run routine "Obj09_ExitStage"
0001F328 4E75                       		rts	
0001F32A                            ; ===========================================================================
0001F32A                            
0001F32A                            Obj09_UPblock:
0001F32A 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001F32E 6600                       		bne.s	Obj09_DOWNblock
0001F330 4A28 0036                  		tst.b	$36(a0)
0001F334 6600 0000                  		bne.w	Obj09_NoGlass
0001F338 117C 001E 0036             		move.b	#$1E,$36(a0)
0001F33E 0838 0006 F783             		btst	#6,($FFFFF783).w
0001F344 6700                       		beq.s	Obj09_UPsnd
0001F346 E1F8 F782                  		asl	(v_ssrotate).w	; increase stage rotation speed
0001F34A 2268 0032                  		movea.l	$32(a0),a1
0001F34E 5389                       		subq.l	#1,a1
0001F350 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001F354                            
0001F354                            Obj09_UPsnd:
0001F35E                            ; ===========================================================================
0001F35E                            
0001F35E                            Obj09_DOWNblock:
0001F35E 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001F362 6600                       		bne.s	Obj09_Rblock
0001F364 4A28 0036                  		tst.b	$36(a0)
0001F368 6600 0000                  		bne.w	Obj09_NoGlass
0001F36C 117C 001E 0036             		move.b	#$1E,$36(a0)
0001F372 0838 0006 F783             		btst	#6,(v_ssrotate+1).w
0001F378 6600                       		bne.s	Obj09_DOWNsnd
0001F37A E0F8 F782                  		asr	(v_ssrotate).w	; reduce stage rotation speed
0001F37E 2268 0032                  		movea.l	$32(a0),a1
0001F382 5389                       		subq.l	#1,a1
0001F384 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001F388                            
0001F388                            Obj09_DOWNsnd:
0001F392                            ; ===========================================================================
0001F392                            
0001F392                            Obj09_Rblock:
0001F392 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001F396 6600                       		bne.s	Obj09_ChkGlass
0001F398 4A28 0037                  		tst.b	$37(a0)
0001F39C 6600 0000                  		bne.w	Obj09_NoGlass
0001F3A0 117C 001E 0037             		move.b	#$1E,$37(a0)
0001F3A6 6100 F500                  		bsr.w	SS_RemoveCollectedItem
0001F3AA 6600                       		bne.s	Obj09_RevStage
0001F3AC 14BC 0004                  		move.b	#4,(a2)
0001F3B0 2028 0032                  		move.l	$32(a0),d0
0001F3B4 5380                       		subq.l	#1,d0
0001F3B6 2540 0004                  		move.l	d0,4(a2)
0001F3BA                            
0001F3BA                            Obj09_RevStage:
0001F3BA 4478 F782                  		neg.w	(v_ssrotate).w	; reverse stage rotation
0001F3C8                            ; ===========================================================================
0001F3C8                            
0001F3C8                            Obj09_ChkGlass:
0001F3C8 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001F3CC 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001F3CE 0C00 002E                  		cmpi.b	#$2E,d0
0001F3D2 6700                       		beq.s	Obj09_Glass
0001F3D4 0C00 002F                  		cmpi.b	#$2F,d0
0001F3D8 6700                       		beq.s	Obj09_Glass
0001F3DA 0C00 0030                  		cmpi.b	#$30,d0
0001F3DE 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001F3E0                            
0001F3E0                            Obj09_Glass:
0001F3E0 6100 F4C6                  		bsr.w	SS_RemoveCollectedItem
0001F3E4 6600                       		bne.s	Obj09_GlassSnd
0001F3E6 14BC 0006                  		move.b	#6,(a2)
0001F3EA 2268 0032                  		movea.l	$32(a0),a1
0001F3EE 5389                       		subq.l	#1,a1
0001F3F0 2549 0004                  		move.l	a1,4(a2)
0001F3F4 1011                       		move.b	(a1),d0
0001F3F6 5200                       		addq.b	#1,d0		; change glass type when touched
0001F3F8 0C00 0030                  		cmpi.b	#$30,d0
0001F3FC 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001F3FE 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001F400                            
0001F400                            Obj09_GlassUpdate:
0001F400 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001F404                            
0001F404                            Obj09_GlassSnd:
0001F40E                            ; ===========================================================================
0001F40E                            
0001F40E                            Obj09_NoGlass:
0001F40E 4E75                       		rts	
0001F410                            ; End of function Obj09_ChkItems2
0001F410                            ; End of function Obj09_ChkItems2
0001F410                            
0001F410                            		include	"_incObj\10.asm"
0001F410                            ; ---------------------------------------------------------------------------
0001F410                            ; Object 10 - After-Image
0001F410                            ; ---------------------------------------------------------------------------
0001F410                            
0001F410                            Obj10:
0001F410 0C38 0018 D01C                   cmpi.b   #id_Death,(v_player+obAnim).w   ; is Sonic using the death animation?
0001F416 6700 0000                        beq.w   AfterimageEnd      ; if yes, delete the After Image
0001F41A                            
0001F41A 7000                             moveq   #0,d0
0001F41C 1028 0024                        move.b   obRoutine(a0),d0
0001F420 323B 0000                        move.w   Afterimage_Index(pc,d0.w),d1
0001F424 4EFB 1000                        jmp	Afterimage_Index(pc,d1.w)
0001F428                            
0001F428                            ; ===========================================================================
0001F428                            ;           Change the length by moving around the "No Afterimage" and "After Image Start/ After Image L Priority" sections.
0001F428                            ; ===========================================================================
0001F428                            Afterimage_Index:
0001F428 0000                             dc.w NoAfterImage-Afterimage_Index
0001F42A 0000                             dc.w NoAfterImage-Afterimage_Index
0001F42C 0000                             dc.w NoAfterImage-Afterimage_Index
0001F42E 0000                             dc.w AfterimageStart-Afterimage_Index
0001F430 0000                             dc.w NoAfterImage-Afterimage_Index
0001F432 0000                             dc.w NoAfterImage-Afterimage_Index
0001F434 0000                             dc.w NoAfterImage-Afterimage_Index
0001F436 0000                             dc.w AfterimageLPrio-Afterimage_Index
0001F438 0000                             dc.w AfterimageEnd-Afterimage_Index
0001F43A                            ; ===========================================================================
0001F43A                            NoAfterImage:
0001F43A 5428 0024                        addq.b   #2,obRoutine(a0)         ; go to next item of index, at the next frame
0001F43E 4E75                             rts
0001F440                            ; ===========================================================================
0001F440                            AfterimageStart:
0001F440 117C 0002 0018                   move.b   #2,obPriority(a0)         ; set sprite priority to 2
0001F446 6000                             bra.s   Afterimage_Show
0001F448                            ; ===========================================================================
0001F448                            AfterimageLPrio:
0001F448 5228 0018                        addq.b   #1,obPriority(a0)         ; set a lower sprite priority
0001F44C                            ; ===========================================================================
0001F44C                            Afterimage_Show:
0001F44C 5428 0024                        addq.b   #2,obRoutine(a0)            ; go to next item of index
0001F450 4EB9 0000 3A0C                   jsr   (RandomNumber).l         ; get a random number
0001F456 0200 0003                        andi.b   #3,d0               ; get a number equal or lower than 2 (0 until 2)
0001F45A 6600                             bne.s   AfterimageException   ; if is not 0, branch
0001F45C 4E75                             rts                        ; if it is 0, then don't show the after-image
0001F45E                            
0001F45E                            AfterimageException:
0001F45E 3178 D002 0002                   move.w   (v_player+obGfx).w,obGfx(a0)      ; copy Sonic map to after-image map
0001F464 1178 D001 0001                    move.b   (v_player+obRender).w,obRender(a0)      ; copy Sonic frame infos (horizontal/vertical mirror, coordinate system......)
0001F46A 2178 D01A 001A                    move.l   (v_player+obFrame).w,obFrame(a0)   ; copy the Sonic animation frame
0001F470 4EF9 0000 F88C                   jmp   DisplaySprite
0001F476                            ; ===========================================================================
0001F476                            AfterimageEnd:
0001F476 4EF9 0000 F8CC                   jmp   DeleteObject
0001F476 4EF9 0000 F8CC                   jmp   DeleteObject
0001F47C                            
0001F47C                            		include	"_inc\AnimateLevelGfx.asm"
0001F47C                            ; ---------------------------------------------------------------------------
0001F47C                            ; Subroutine to	animate	level graphics
0001F47C                            ; ---------------------------------------------------------------------------
0001F47C                            
0001F47C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F47C                            
0001F47C                            
0001F47C                            AnimateLevelGfx:
0001F47C                            		;tst.w	(f_pause).w	; is the game paused?
0001F47C                            		;bne.s	@ispaused	; if yes, branch
0001F47C 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0001F482 6100 0000                  		bsr.w	AniArt_GiantRing
0001F486 7000                       		moveq	#0,d0
0001F488 1038 FE10                  		move.b	(v_zone).w,d0
0001F48C D040                       		add.w	d0,d0
0001F48E 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001F492 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001F496                            
0001F496                            	@ispaused:
0001F496 4E75                       		rts	
0001F498                            
0001F498                            ; ===========================================================================
0001F498 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001F49C 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001F4A0 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001F4A4 0000                       		dc.w AniArt_Ending-AniArt_Index
0001F4A6                            ; ===========================================================================
0001F4A6                            ; ---------------------------------------------------------------------------
0001F4A6                            ; Animated pattern routine - Green Hill
0001F4A6                            ; ---------------------------------------------------------------------------
0001F4A6                            
0001F4A6                            AniArt_GHZ:
0001F4A6                            
0001F4A6                            AniArt_GHZ_Waterfall:
0001F4A6                            
0001F4A6 =00000008                  @size:		equ 8	; number of tiles per frame
0001F4A6                            
0001F4A6 5338 F7B1                  		subq.b	#1,(v_lani0_time).w ; decrement timer
0001F4AA 6A00                       		bpl.s	AniArt_GHZ_Bigflower ; branch if not 0
0001F4AC                            
0001F4AC 11FC 0005 F7B1             		move.b	#5,(v_lani0_time).w ; time to display each frame
0001F4B2 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001F4B8 1038 F7B0                  		move.b	(v_lani0_frame).w,d0
0001F4BC 5238 F7B0                  		addq.b	#1,(v_lani0_frame).w ; increment frame counter
0001F4C0 0240 0001                  		andi.w	#1,d0		; there are only 2 frames
0001F4C4 6700                       		beq.s	@isframe0	; branch if frame 0
0001F4C6 43E9 0100                  		lea	@size*$20(a1),a1 ; use graphics for frame 1
0001F4CA                            
0001F4CA                            	@isframe0:
0001F4D4 323C 0007                  		move.w	#@size-1,d1	; number of 8x8	tiles
0001F4D8 6000 0000                  		bra.w	LoadTiles
0001F4DC                            ; ===========================================================================
0001F4DC                            
0001F4DC                            AniArt_GHZ_Bigflower:
0001F4DC                            
0001F4DC =00000010                  @size:		equ 16	; number of tiles per frame
0001F4DC                            
0001F4DC 5338 F7B3                  		subq.b	#1,(v_lani1_time).w
0001F4E0 6A00                       		bpl.s	AniArt_GHZ_Smallflower
0001F4E2                            
0001F4E2 11FC 000F F7B3             		move.b	#$F,(v_lani1_time).w
0001F4E8 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001F4EE 1038 F7B2                  		move.b	(v_lani1_frame).w,d0
0001F4F2 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w
0001F4F6 0240 0001                  		andi.w	#1,d0
0001F4FA 6700                       		beq.s	@isframe0
0001F4FC 43E9 0200                  		lea	@size*$20(a1),a1
0001F500                            
0001F500                            	@isframe0:
0001F50A 323C 000F                  		move.w	#@size-1,d1
0001F50E 6000 0000                  		bra.w	LoadTiles
0001F512                            ; ===========================================================================
0001F512                            
0001F512                            AniArt_GHZ_Smallflower:
0001F512                            
0001F512 =0000000C                  @size:		equ 12	; number of tiles per frame
0001F512                            
0001F512 5338 F7B5                  		subq.b	#1,(v_lani2_time).w
0001F516 6A00                       		bpl.s	@end
0001F518                            
0001F518 11FC 0007 F7B5             		move.b	#7,(v_lani2_time).w
0001F51E 1038 F7B4                  		move.b	(v_lani2_frame).w,d0
0001F522 5238 F7B4                  		addq.b	#1,(v_lani2_frame).w ; increment frame counter
0001F526 0240 0003                  		andi.w	#3,d0		; there are 4 frames
0001F52A 103B 0000                  		move.b	@sequence(pc,d0.w),d0
0001F52E 0800 0000                  		btst	#0,d0		; is frame 0 or 2? (actual frame, not frame counter)
0001F532 6600                       		bne.s	@isframe1	; if not, branch
0001F534 11FC 007F F7B5             		move.b	#$7F,(v_lani2_time).w ; set longer duration for frames 0 and 2
0001F53A                            
0001F53A                            	@isframe1:
0001F53A EF48                       		lsl.w	#7,d0		; multiply frame num by $80
0001F53C 3200                       		move.w	d0,d1
0001F53E D040                       		add.w	d0,d0
0001F540 D041                       		add.w	d1,d0		; multiply that by 3 (i.e. frame num times 12 * $20)
0001F54C 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001F552 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001F556 323C 000B                  		move.w	#@size-1,d1
0001F55A 6100 0000                  		bsr.w	LoadTiles
0001F55E                            
0001F55E                            @end:
0001F55E 4E75                       		rts	
0001F560                            
0001F560 0001 0201                  @sequence:	dc.b 0,	1, 2, 1
0001F564                            ; ===========================================================================
0001F564                            ; ---------------------------------------------------------------------------
0001F564                            ; Animated pattern routine - Marble
0001F564                            ; ---------------------------------------------------------------------------
0001F564                            
0001F564                            AniArt_MZ:
0001F564                            
0001F564                            AniArt_MZ_Lava:
0001F564                            
0001F564 =00000008                  @size:		equ 8	; number of tiles per frame
0001F564                            
0001F564 5338 F7B1                  		subq.b	#1,(v_lani0_time).w ; decrement timer
0001F568 6A00                       		bpl.s	AniArt_MZ_Magma	; branch if not 0
0001F56A                            
0001F56A 11FC 0011 F7B1             		move.b	#$11,(v_lani0_time).w ; time to display each frame
0001F570 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001F576 7000                       		moveq	#0,d0
0001F578 1038 F7B0                  		move.b	(v_lani0_frame).w,d0
0001F57C 5200                       		addq.b	#1,d0		; increment frame counter
0001F57E 0C00 0003                  		cmpi.b	#3,d0		; there are 3 frames
0001F582 6600                       		bne.s	@frame01or2	; branch if frame 0, 1 or 2
0001F584 7000                       		moveq	#0,d0
0001F586                            
0001F586                            	@frame01or2:
0001F586 11C0 F7B0                  		move.b	d0,(v_lani0_frame).w
0001F58A C0FC 0100                  		mulu.w	#@size*$20,d0
0001F58E D2C0                       		adda.w	d0,a1		; jump to appropriate tile
0001F59A 323C 0007                  		move.w	#@size-1,d1
0001F59E 6100 0000                  		bsr.w	LoadTiles
0001F5A2                            
0001F5A2                            AniArt_MZ_Magma:
0001F5A2 5338 F7B3                  		subq.b	#1,(v_lani1_time).w ; decrement timer
0001F5A6 6A00                       		bpl.s	AniArt_MZ_Torch	; branch if not 0
0001F5A8                            		
0001F5A8 11FC 0001 F7B3             		move.b	#1,(v_lani1_time).w ; time between each gfx change
0001F5AE 7000                       		moveq	#0,d0
0001F5B0 1038 F7B0                  		move.b	(v_lani0_frame).w,d0 ; get surface lava frame number
0001F5B4 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load magma gfx
0001F5BA EE58                       		ror.w	#7,d0		; multiply frame num by $200
0001F5BC D8C0                       		adda.w	d0,a4		; jump to appropriate tile
0001F5C8 7600                       		moveq	#0,d3
0001F5CA 1638 F7B2                  		move.b	(v_lani1_frame).w,d3
0001F5CE 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w ; increment frame counter (unused)
0001F5D2 1638 FE68                  		move.b	(v_oscillate+$A).w,d3 ; get oscillating value
0001F5D6 343C 0003                  		move.w	#3,d2
0001F5DA                            
0001F5DA                            	@loop:
0001F5DA 3003                       		move.w	d3,d0
0001F5DC D040                       		add.w	d0,d0
0001F5DE 0240 001E                  		andi.w	#$1E,d0
0001F5E2 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001F5E8 3033 0000                  		move.w	(a3,d0.w),d0
0001F5EC 47F3 0000                  		lea	(a3,d0.w),a3
0001F5F0 224C                       		movea.l	a4,a1
0001F5F2 323C 001F                  		move.w	#$1F,d1
0001F5F6 4E93                       		jsr	(a3)
0001F5F8 5843                       		addq.w	#4,d3
0001F5FA 51CA FFDE                  		dbf	d2,@loop
0001F5FE 4E75                       		rts	
0001F600                            ; ===========================================================================
0001F600                            
0001F600                            AniArt_MZ_Torch:
0001F600                            
0001F600 =00000006                  @size:		equ 6	; number of tiles per frame
0001F600                            
0001F600 5338 F7B5                  		subq.b	#1,(v_lani2_time).w ; decrement timer
0001F604 6A00 0000                  		bpl.w	@end		; branch if not 0
0001F608                            		
0001F608 11FC 0004 F7B5             		move.b	#4,(v_lani2_time).w ; time to display each frame
0001F60E 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001F614 7000                       		moveq	#0,d0
0001F616 1038 F7B6                  		move.b	(v_lani3_frame).w,d0
0001F61A 5238 F7B6                  		addq.b	#1,(v_lani3_frame).w ; increment frame counter
0001F61E 0238 0003 F7B6             		andi.b	#3,(v_lani3_frame).w ; there are 3 frames
0001F624 C0FC 00C0                  		mulu.w	#@size*$20,d0
0001F628 D2C0                       		adda.w	d0,a1		; jump to appropriate tile
0001F634 323C 0005                  		move.w	#@size-1,d1
0001F638 6000 0000                  		bra.w	LoadTiles
0001F63C                            
0001F63C                            @end:
0001F63C 4E75                       		rts	
0001F63E                            ; ===========================================================================
0001F63E                            ; ---------------------------------------------------------------------------
0001F63E                            ; Animated pattern routine - Scrap Brain
0001F63E                            ; ---------------------------------------------------------------------------
0001F63E                            
0001F63E                            AniArt_SBZ:
0001F63E                            
0001F63E =0000000C                  @size:		equ 12	; number of tiles per frame
0001F63E                            
0001F63E 4A38 F7B4                  		tst.b	(v_lani2_frame).w
0001F642 6700                       		beq.s	@smokepuff	; branch if counter hits 0
0001F644                            		
0001F644 5338 F7B4                  		subq.b	#1,(v_lani2_frame).w ; decrement counter
0001F648 6000                       		bra.s	@chk_smokepuff2
0001F64A                            ; ===========================================================================
0001F64A                            
0001F64A                            @smokepuff:
0001F64A 5338 F7B1                  		subq.b	#1,(v_lani0_time).w ; decrement timer
0001F64E 6A00                       		bpl.s	@chk_smokepuff2 ; branch if not 0
0001F650                            		
0001F650 11FC 0007 F7B1             		move.b	#7,(v_lani0_time).w ; time to display each frame
0001F656 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001F666 1038 F7B0                  		move.b	(v_lani0_frame).w,d0
0001F66A 5238 F7B0                  		addq.b	#1,(v_lani0_frame).w ; increment frame counter
0001F66E 0240 0007                  		andi.w	#7,d0
0001F672 6700                       		beq.s	@untilnextpuff	; branch if frame 0
0001F674 5340                       		subq.w	#1,d0
0001F676 C0FC 0180                  		mulu.w	#@size*$20,d0
0001F67A 43F1 0000                  		lea	(a1,d0.w),a1
0001F67E 323C 000B                  		move.w	#@size-1,d1
0001F682 6000 0000                  		bra.w	LoadTiles
0001F686                            ; ===========================================================================
0001F686                            
0001F686                            @untilnextpuff:
0001F686 11FC 00B4 F7B4             		move.b	#180,(v_lani2_frame).w ; time between smoke puffs (3 seconds)
0001F68C                            
0001F68C                            @clearsky:
0001F68C 323C 0005                  		move.w	#(@size/2)-1,d1
0001F690 6100 0000                  		bsr.w	LoadTiles
0001F694 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001F69A 323C 0005                  		move.w	#(@size/2)-1,d1
0001F69E 6000 0000                  		bra.w	LoadTiles	; load blank tiles for no smoke puff
0001F6A2                            ; ===========================================================================
0001F6A2                            
0001F6A2                            @chk_smokepuff2:
0001F6A2 4A38 F7B5                  		tst.b	(v_lani2_time).w
0001F6A6 6700                       		beq.s	@smokepuff2	; branch if counter hits 0
0001F6A8                            		
0001F6A8 5338 F7B5                  		subq.b	#1,(v_lani2_time).w ; decrement counter
0001F6AC 6000                       		bra.s	@end
0001F6AE                            ; ===========================================================================
0001F6AE                            
0001F6AE                            @smokepuff2:
0001F6AE 5338 F7B3                  		subq.b	#1,(v_lani1_time).w ; decrement timer
0001F6B2 6A00                       		bpl.s	@end		; branch if not 0
0001F6B4                            		
0001F6B4 11FC 0007 F7B3             		move.b	#7,(v_lani1_time).w ; time to display each frame
0001F6BA 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001F6CA 1038 F7B2                  		move.b	(v_lani1_frame).w,d0
0001F6CE 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w ; increment frame counter
0001F6D2 0240 0007                  		andi.w	#7,d0
0001F6D6 6700                       		beq.s	@untilnextpuff2	; branch if frame 0
0001F6D8 5340                       		subq.w	#1,d0
0001F6DA C0FC 0180                  		mulu.w	#@size*$20,d0
0001F6DE 43F1 0000                  		lea	(a1,d0.w),a1
0001F6E2 323C 000B                  		move.w	#@size-1,d1
0001F6E6 6000 0000                  		bra.w	LoadTiles
0001F6EA                            ; ===========================================================================
0001F6EA                            
0001F6EA                            @untilnextpuff2:
0001F6EA 11FC 0078 F7B5             		move.b	#120,(v_lani2_time).w ; time between smoke puffs (2 seconds)
0001F6F0 609A                       		bra.s	@clearsky
0001F6F2                            ; ===========================================================================
0001F6F2                            
0001F6F2                            @end:
0001F6F2 4E75                       		rts	
0001F6F4                            ; ===========================================================================
0001F6F4                            ; ---------------------------------------------------------------------------
0001F6F4                            ; Animated pattern routine - ending sequence
0001F6F4                            ; ---------------------------------------------------------------------------
0001F6F4                            
0001F6F4                            AniArt_Ending:
0001F6F4                            
0001F6F4                            AniArt_Ending_BigFlower:
0001F6F4                            
0001F6F4 =00000010                  @size:		equ 16	; number of tiles per frame
0001F6F4                            
0001F6F4 5338 F7B3                  		subq.b	#1,(v_lani1_time).w ; decrement timer
0001F6F8 6A00                       		bpl.s	AniArt_Ending_SmallFlower ; branch if not 0
0001F6FA                            		
0001F6FA 11FC 0007 F7B3             		move.b	#7,(v_lani1_time).w
0001F700 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001F706 45F8 9400                  		lea	($FFFF9400).w,a2 ; load 2nd big flower from RAM
0001F70A 1038 F7B2                  		move.b	(v_lani1_frame).w,d0
0001F70E 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w ; increment frame counter
0001F712 0240 0001                  		andi.w	#1,d0		; only 2 frames
0001F716 6700                       		beq.s	@isframe0	; branch if frame 0
0001F718 43E9 0200                  		lea	@size*$20(a1),a1
0001F71C 45EA 0200                  		lea	@size*$20(a2),a2
0001F720                            
0001F720                            	@isframe0:
0001F72A 323C 000F                  		move.w	#@size-1,d1
0001F72E 6100 0000                  		bsr.w	LoadTiles
0001F732 224A                       		movea.l	a2,a1
0001F73E 323C 000F                  		move.w	#@size-1,d1
0001F742 6000 0000                  		bra.w	LoadTiles
0001F746                            ; ===========================================================================
0001F746                            
0001F746                            AniArt_Ending_SmallFlower:
0001F746                            
0001F746 =0000000C                  @size:		equ 12	; number of tiles per frame
0001F746                            
0001F746 5338 F7B5                  		subq.b	#1,(v_lani2_time).w ; decrement timer
0001F74A 6A00                       		bpl.s	AniArt_Ending_Flower3 ; branch if not 0
0001F74C                            		
0001F74C 11FC 0007 F7B5             		move.b	#7,(v_lani2_time).w
0001F752 1038 F7B4                  		move.b	(v_lani2_frame).w,d0
0001F756 5238 F7B4                  		addq.b	#1,(v_lani2_frame).w ; increment frame counter
0001F75A 0240 0007                  		andi.w	#7,d0		; max 8 frames
0001F75E 103B 0000                  		move.b	@sequence(pc,d0.w),d0 ; get actual frame num from sequence data
0001F762 EF48                       		lsl.w	#7,d0		; multiply by $80
0001F764 3200                       		move.w	d0,d1
0001F766 D040                       		add.w	d0,d0
0001F768 D041                       		add.w	d1,d0		; multiply by 3
0001F774 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001F77A 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001F77E 323C 000B                  		move.w	#@size-1,d1
0001F782 6000 0000                  		bra.w	LoadTiles
0001F786                            ; ===========================================================================
0001F786 0000 0001 0202 0201        @sequence:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001F78E                            ; ===========================================================================
0001F78E                            
0001F78E                            AniArt_Ending_Flower3:
0001F78E                            
0001F78E =00000010                  @size:		equ 16	; number of tiles per frame
0001F78E                            
0001F78E 5338 F7B9                  		subq.b	#1,(v_lani4_time).w ; decrement timer
0001F792 6A00                       		bpl.s	AniArt_Ending_Flower4 ; branch if not 0
0001F794                            		
0001F794 11FC 000E F7B9             		move.b	#$E,(v_lani4_time).w
0001F79A 1038 F7B8                  		move.b	(v_lani4_frame).w,d0
0001F79E 5238 F7B8                  		addq.b	#1,(v_lani4_frame).w ; increment frame counter
0001F7A2 0240 0003                  		andi.w	#3,d0		; max 4 frames
0001F7A6 103B 0000                  		move.b	AniArt_Ending_Flower3_sequence(pc,d0.w),d0 ; get actual frame num from sequence data
0001F7AA E148                       		lsl.w	#8,d0		; multiply by $100
0001F7AC D040                       		add.w	d0,d0		; multiply by 2
0001F7B8 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001F7BC 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001F7C0 323C 000F                  		move.w	#@size-1,d1
0001F7C4 6000 0000                  		bra.w	LoadTiles
0001F7C8                            ; ===========================================================================
0001F7C8 0001 0201                  AniArt_Ending_Flower3_sequence:	dc.b 0,	1, 2, 1
0001F7CC                            ; ===========================================================================
0001F7CC                            
0001F7CC                            AniArt_Ending_Flower4:
0001F7CC                            
0001F7CC =00000010                  @size:		equ 16	; number of tiles per frame
0001F7CC                            
0001F7CC 5338 F7BB                  		subq.b	#1,(v_lani5_time).w ; decrement timer
0001F7D0 6A00                       		bpl.s	@end		; branch if not 0
0001F7D2                            		
0001F7D2 11FC 000B F7BB             		move.b	#$B,(v_lani5_time).w
0001F7D8 1038 F7BA                  		move.b	(v_lani5_frame).w,d0
0001F7DC 5238 F7BA                  		addq.b	#1,(v_lani5_frame).w ; increment frame counter
0001F7E0 0240 0003                  		andi.w	#3,d0
0001F7E4 103B 00E2                  		move.b	AniArt_Ending_Flower3_sequence(pc,d0.w),d0 ; get actual frame num from sequence data
0001F7E8 E148                       		lsl.w	#8,d0		; multiply by $100
0001F7EA D040                       		add.w	d0,d0		; multiply by 2
0001F7F6 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001F7FA 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001F7FE 323C 000F                  		move.w	#@size-1,d1
0001F802 6000 0000                  		bra.w	LoadTiles
0001F806                            ; ===========================================================================
0001F806                            
0001F806                            @end:
0001F806 4E75                       		rts	
0001F808                            ; ===========================================================================
0001F808                            
0001F808                            AniArt_none:
0001F808 4E75                       		rts	
0001F80A                            
0001F80A                            ; ---------------------------------------------------------------------------
0001F80A                            ; Subroutine to	transfer graphics to VRAM
0001F80A                            
0001F80A                            ; input:
0001F80A                            ;	a1 = source address
0001F80A                            ;	a6 = vdp_data_port ($C00000)
0001F80A                            ;	d1 = number of tiles to load (minus one)
0001F80A                            ; ---------------------------------------------------------------------------
0001F80A                            
0001F80A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F80A                            
0001F80A                            
0001F80A                            LoadTiles:
0001F80A 2C99                       		move.l	(a1)+,(a6)
0001F80C 2C99                       		move.l	(a1)+,(a6)
0001F80E 2C99                       		move.l	(a1)+,(a6)
0001F810 2C99                       		move.l	(a1)+,(a6)
0001F812 2C99                       		move.l	(a1)+,(a6)
0001F814 2C99                       		move.l	(a1)+,(a6)
0001F816 2C99                       		move.l	(a1)+,(a6)
0001F818 2C99                       		move.l	(a1)+,(a6)
0001F81A 51C9 FFEE                  		dbf	d1,LoadTiles
0001F81E 4E75                       		rts	
0001F820                            ; End of function LoadTiles
0001F820                            
0001F820                            ; ===========================================================================
0001F820                            ; ---------------------------------------------------------------------------
0001F820                            ; Animated pattern routine - more Marble Zone
0001F820                            ; ---------------------------------------------------------------------------
0001F820 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001F824 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001F828 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001F82C 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001F830 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001F834 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001F838 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001F83C 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001F840                            ; ===========================================================================
0001F840                            
0001F840                            loc_1C3EE:
0001F840 2C91                       		move.l	(a1),(a6)
0001F842 43E9 0010                  		lea	$10(a1),a1
0001F846 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001F84A 4E75                       		rts	
0001F84C                            ; ===========================================================================
0001F84C                            
0001F84C                            loc_1C3FA:
0001F84C 2029 0002                  		move.l	2(a1),d0
0001F850 1029 0001                  		move.b	1(a1),d0
0001F854 E098                       		ror.l	#8,d0
0001F856 2C80                       		move.l	d0,(a6)
0001F858 43E9 0010                  		lea	$10(a1),a1
0001F85C 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001F860 4E75                       		rts	
0001F862                            ; ===========================================================================
0001F862                            
0001F862                            loc_1C410:
0001F862 2CA9 0002                  		move.l	2(a1),(a6)
0001F866 43E9 0010                  		lea	$10(a1),a1
0001F86A 51C9 FFF6                  		dbf	d1,loc_1C410
0001F86E 4E75                       		rts	
0001F870                            ; ===========================================================================
0001F870                            
0001F870                            loc_1C41E:
0001F870 2029 0004                  		move.l	4(a1),d0
0001F874 1029 0003                  		move.b	3(a1),d0
0001F878 E098                       		ror.l	#8,d0
0001F87A 2C80                       		move.l	d0,(a6)
0001F87C 43E9 0010                  		lea	$10(a1),a1
0001F880 51C9 FFEE                  		dbf	d1,loc_1C41E
0001F884 4E75                       		rts	
0001F886                            ; ===========================================================================
0001F886                            
0001F886                            loc_1C434:
0001F886 2CA9 0004                  		move.l	4(a1),(a6)
0001F88A 43E9 0010                  		lea	$10(a1),a1
0001F88E 51C9 FFF6                  		dbf	d1,loc_1C434
0001F892 4E75                       		rts	
0001F894                            ; ===========================================================================
0001F894                            
0001F894                            loc_1C442:
0001F894 2029 0006                  		move.l	6(a1),d0
0001F898 1029 0005                  		move.b	5(a1),d0
0001F89C E098                       		ror.l	#8,d0
0001F89E 2C80                       		move.l	d0,(a6)
0001F8A0 43E9 0010                  		lea	$10(a1),a1
0001F8A4 51C9 FFEE                  		dbf	d1,loc_1C442
0001F8A8 4E75                       		rts	
0001F8AA                            ; ===========================================================================
0001F8AA                            
0001F8AA                            loc_1C458:
0001F8AA 2CA9 0006                  		move.l	6(a1),(a6)
0001F8AE 43E9 0010                  		lea	$10(a1),a1
0001F8B2 51C9 FFF6                  		dbf	d1,loc_1C458
0001F8B6 4E75                       		rts	
0001F8B8                            ; ===========================================================================
0001F8B8                            
0001F8B8                            loc_1C466:
0001F8B8 2029 0008                  		move.l	8(a1),d0
0001F8BC 1029 0007                  		move.b	7(a1),d0
0001F8C0 E098                       		ror.l	#8,d0
0001F8C2 2C80                       		move.l	d0,(a6)
0001F8C4 43E9 0010                  		lea	$10(a1),a1
0001F8C8 51C9 FFEE                  		dbf	d1,loc_1C466
0001F8CC 4E75                       		rts	
0001F8CE                            ; ===========================================================================
0001F8CE                            
0001F8CE                            loc_1C47C:
0001F8CE 2CA9 0008                  		move.l	8(a1),(a6)
0001F8D2 43E9 0010                  		lea	$10(a1),a1
0001F8D6 51C9 FFF6                  		dbf	d1,loc_1C47C
0001F8DA 4E75                       		rts	
0001F8DC                            ; ===========================================================================
0001F8DC                            
0001F8DC                            loc_1C48A:
0001F8DC 2029 000A                  		move.l	$A(a1),d0
0001F8E0 1029 0009                  		move.b	9(a1),d0
0001F8E4 E098                       		ror.l	#8,d0
0001F8E6 2C80                       		move.l	d0,(a6)
0001F8E8 43E9 0010                  		lea	$10(a1),a1
0001F8EC 51C9 FFEE                  		dbf	d1,loc_1C48A
0001F8F0 4E75                       		rts	
0001F8F2                            ; ===========================================================================
0001F8F2                            
0001F8F2                            loc_1C4A0:
0001F8F2 2CA9 000A                  		move.l	$A(a1),(a6)
0001F8F6 43E9 0010                  		lea	$10(a1),a1
0001F8FA 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001F8FE 4E75                       		rts	
0001F900                            ; ===========================================================================
0001F900                            
0001F900                            loc_1C4AE:
0001F900 2029 000C                  		move.l	$C(a1),d0
0001F904 1029 000B                  		move.b	$B(a1),d0
0001F908 E098                       		ror.l	#8,d0
0001F90A 2C80                       		move.l	d0,(a6)
0001F90C 43E9 0010                  		lea	$10(a1),a1
0001F910 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001F914 4E75                       		rts	
0001F916                            ; ===========================================================================
0001F916                            
0001F916                            loc_1C4C4:
0001F916 2CA9 000C                  		move.l	$C(a1),(a6)
0001F91A 43E9 0010                  		lea	$10(a1),a1
0001F91E 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001F922 4E75                       		rts	
0001F924                            ; ===========================================================================
0001F924                            
0001F924                            loc_1C4D2:
0001F924 2029 000C                  		move.l	$C(a1),d0
0001F928 E198                       		rol.l	#8,d0
0001F92A 1011                       		move.b	0(a1),d0
0001F92C 2C80                       		move.l	d0,(a6)
0001F92E 43E9 0010                  		lea	$10(a1),a1
0001F932 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001F936 4E75                       		rts	
0001F938                            ; ===========================================================================
0001F938                            
0001F938                            loc_1C4E8:
0001F938 3CA9 000E                  		move.w	$E(a1),(a6)
0001F93C 3C91                       		move.w	0(a1),(a6)
0001F93E 43E9 0010                  		lea	$10(a1),a1
0001F942 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001F946 4E75                       		rts	
0001F948                            ; ===========================================================================
0001F948                            
0001F948                            loc_1C4FA:
0001F948 2011                       		move.l	0(a1),d0
0001F94A 1029 000F                  		move.b	$F(a1),d0
0001F94E E098                       		ror.l	#8,d0
0001F950 2C80                       		move.l	d0,(a6)
0001F952 43E9 0010                  		lea	$10(a1),a1
0001F956 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001F95A 4E75                       		rts	
0001F95C                            
0001F95C                            ; ---------------------------------------------------------------------------
0001F95C                            ; Animated pattern routine - giant ring
0001F95C                            ; ---------------------------------------------------------------------------
0001F95C                            
0001F95C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F95C                            
0001F95C                            
0001F95C                            AniArt_GiantRing:
0001F95C                            
0001F95C =0000000E                  @size:		equ 14
0001F95C                            
0001F95C 4A78 F7BE                  		tst.w	(v_gfxbigring).w	; Is there any of the art left to load?
0001F960 6600                       		bne.s	@loadTiles		; If so, get to work
0001F962 4E75                       		rts	
0001F964                            ; ===========================================================================
0001F964                            ; loc_1C518:
0001F964                            @loadTiles:
0001F964 0478 01C0 F7BE             		subi.w	#@size*$20,(v_gfxbigring).w	; Count-down the 14 tiles we're going to load now
0001F96A 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001F970 7000                       		moveq	#0,d0
0001F972 3038 F7BE                  		move.w	(v_gfxbigring).w,d0
0001F976 43F1 0000                  		lea	(a1,d0.w),a1
0001F97A                            		; Turn VRAM address into VDP command
0001F97A 0640 8000                  		addi.w	#$8000,d0
0001F97E E588                       		lsl.l	#2,d0
0001F980 E448                       		lsr.w	#2,d0
0001F982 0040 4000                  		ori.w	#$4000,d0
0001F986 4840                       		swap	d0
0001F988                            		; Send VDP command (write to VRAM at address contained in v_gfxbigring)
0001F988 2D40 0004                  		move.l	d0,4(a6)
0001F98C                            
0001F98C 323C 000D                  		move.w	#@size-1,d1
0001F990 6000 FE78                  		bra.w	LoadTiles
0001F994                            
0001F994                            ; End of function AniArt_GiantRing
0001F994                            ; End of function AniArt_GiantRing
0001F994                            
0001F994                            		include	"_incObj\21 HUD.asm"
0001F994                            ; ---------------------------------------------------------------------------
0001F994                            ; Object 21 - SCORE, TIME, RINGS
0001F994                            ; ---------------------------------------------------------------------------
0001F994                            
0001F994                            HUD:
0001F994 7000                       		moveq	#0,d0
0001F996 1028 0024                  		move.b	obRoutine(a0),d0
0001F99A 323B 0000                  		move.w	HUD_Index(pc,d0.w),d1
0001F99E 4EFB 1000                  		jmp	HUD_Index(pc,d1.w)
0001F9A2                            ; ===========================================================================
0001F9A2 0000                       HUD_Index:	dc.w HUD_Main-HUD_Index
0001F9A4 0000                       		dc.w HUD_Flash-HUD_Index
0001F9A6                            ; ===========================================================================
0001F9A6                            
0001F9A6                            HUD_Main:	; Routine 0
0001F9A6 5428 0024                  		addq.b	#2,obRoutine(a0)
0001F9AA 317C 0090 0008             		move.w	#$90,obX(a0)
0001F9B0 317C 0108 000A             		move.w	#$108,obScreenY(a0)
0001F9B6 217C 0000 0000 0004        		move.l	#Map_HUD,obMap(a0)
0001F9BE 317C 06CA 0002             		move.w	#$6CA,obGfx(a0)
0001F9C4 117C 0000 0001             		move.b	#0,obRender(a0)
0001F9CA 317C 0000 0018             		move.w	#0,obPriority(a0)
0001F9D0                            
0001F9D0                            HUD_Flash:	; Routine 2
0001F9D0 7000                       		moveq	#0,d0
0001F9D2 0838 0003 FE05             		btst	#3,(v_framebyte).w
0001F9D8 6600                       		bne.s	@display
0001F9DA 4A78 FE20                  		tst.w	(v_rings).w	; do you have any rings?
0001F9DE 6600                       		bne.s	@norings	; if so, branch
0001F9E0 5240                       		addq.w	#1,d0		; make ring counter flash red
0001F9E2                            ; ===========================================================================
0001F9E2                            
0001F9E2                            @norings:
0001F9E2 0C38 0009 FE23             		cmpi.b	#9,(v_timemin).w ; have	9 minutes elapsed?
0001F9E8 6600                       		bne.s	@display	; if not, branch
0001F9EA 5440                       		addq.w	#2,d0		; make time counter flash red
0001F9EC                            
0001F9EC                            	@display:
0001F9EC 1140 001A                  		move.b	d0,obFrame(a0)
0001F9F0 4EF9 0000 F88C             		jmp	DisplaySprite
0001F9F0 4EF9 0000 F88C             		jmp	DisplaySprite
0001F9F6                            Map_HUD:	include	"_maps\HUD.asm"
0001F9F6                            ; ---------------------------------------------------------------------------
0001F9F6                            ; Sprite mappings - SCORE, TIME, RINGS
0001F9F6                            ; ---------------------------------------------------------------------------
0001F9F6                            Map_HUD_internal:
0001F9F6 0000                       		dc.w @allyellow-Map_HUD_internal
0001F9F8 0000                       		dc.w @ringred-Map_HUD_internal
0001F9FA 0000                       		dc.w @timered-Map_HUD_internal
0001F9FC 0000                       		dc.w @allred-Map_HUD_internal
0001F9FE 0A                         @allyellow:	dc.b $A
0001F9FF 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001FA04 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001FA09 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001FA0E 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001FA13 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001FA18 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001FA1D A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001FA22 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001FA27 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001FA2C 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001FA31 00                         		dc.b 0
0001FA32 0A                         @ringred:	dc.b $A
0001FA33 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001FA38 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001FA3D 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001FA42 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001FA47 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001FA4C A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001FA51 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001FA56 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001FA5B 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001FA60 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001FA65 00                         		dc.b 0
0001FA66 0A                         @timered:	dc.b $A
0001FA67 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001FA6C 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001FA71 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001FA76 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001FA7B 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001FA80 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001FA85 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001FA8A A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001FA8F 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001FA94 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001FA99 00                         		dc.b 0
0001FA9A 0A                         @allred:	dc.b $A
0001FA9B 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001FAA0 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001FAA5 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001FAAA 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001FAAF 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001FAB4 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001FAB9 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001FABE A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001FAC3 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001FAC8 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001FACE 00                         		even
0001FACE 00                         		even
0001FACE                            
0001FACE                            ; ---------------------------------------------------------------------------
0001FACE                            ; Add points subroutine
0001FACE                            ; ---------------------------------------------------------------------------
0001FACE                            
0001FACE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FACE                            
0001FACE                            
0001FACE                            AddPoints:
0001FACE 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w ; set score counter to update
0001FAD4                            
0001FAD4                            
0001FAD4 47F8 FE26                  			lea     (v_score).w,a3
0001FAD8 D193                       			add.l   d0,(a3)
0001FADA 223C 000F 423F             			move.l  #999999,d1
0001FAE0 B293                       			cmp.l   (a3),d1 ; is score below 999999?
0001FAE2 6200                       			bhi.s   @belowmax ; if yes, branch
0001FAE4 2681                       			move.l  d1,(a3) ; reset score to 999999
0001FAE6                            		@belowmax:
0001FAE6 2013                       			move.l  (a3),d0
0001FAE8 B0B8 FFC0                  			cmp.l   (v_scorelife).w,d0 ; has Sonic got 50000+ points?
0001FAEC 6500                       			blo.s   @noextralife ; if not, branch
0001FAEE                            
0001FAEE 06B8 0000 1388 FFC0        			addi.l  #5000,(v_scorelife).w ; increase requirement by 50000
0001FAF6 4A38 FFF8                  			tst.b   (v_megadrive).w
0001FAFA 6B00                       			bmi.s   @noextralife ; branch if Mega Drive is Japanese
0001FAFC 5238 FE12                  			addq.b  #1,(v_lives).w ; give extra life
0001FB00 5238 FE1C                  			addq.b  #1,(f_lifecount).w
0001FB0E                            
0001FB0E                            @locret_1C6B6:
0001FB0E                            @noextralife:
0001FB0E 4E75                       		rts	
0001FB10                            ; End of function AddPoints
0001FB10                            
0001FB10                            		include	"_inc\HUD_Update.asm"
0001FB10                            ; ---------------------------------------------------------------------------
0001FB10                            ; Subroutine to	update the HUD
0001FB10                            ; ---------------------------------------------------------------------------
0001FB10                            
0001FB10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FB10                            
0001FB10                            hudVRAM:	macro loc
0001FB10                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),d0
0001FB10                            		endm
0001FB10                            
0001FB10                            
0001FB10                            HUD_Update:
0001FB10 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug mode	on?
0001FB14 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001FB18 4A38 FE1F                  		tst.b	(f_scorecount).w ; does the score need updating?
0001FB1C 6700                       		beq.s	@chkrings	; if not, branch
0001FB1E                            
0001FB1E 4238 FE1F                  		clr.b	(f_scorecount).w
0001FB22 203C 5C80 0003             		hudVRAM	$DC80		; set VRAM address
0001FB28 2238 FE26                  		move.l	(v_score).w,d1	; load score
0001FB2C 6100 0000                  		bsr.w	Hud_Score
0001FB30                            
0001FB30                            	@chkrings:
0001FB30 4A38 FE1D                  		tst.b	(f_ringcount).w	; does the ring	counter	need updating?
0001FB34 6700                       		beq.s	@chktime	; if not, branch
0001FB36 6A00                       		bpl.s	@notzero
0001FB38 6100 0000                  		bsr.w	Hud_LoadZero	; reset rings to 0 if Sonic is hit
0001FB3C                            
0001FB3C                            	@notzero:
0001FB3C 4238 FE1D                  		clr.b	(f_ringcount).w
0001FB40 203C 5F40 0003             		hudVRAM	$DF40		; set VRAM address
0001FB46 7200                       		moveq	#0,d1
0001FB48 3238 FE20                  		move.w	(v_rings).w,d1	; load number of rings
0001FB4C 6100 0000                  		bsr.w	Hud_Rings
0001FB50                            
0001FB50                            	@chktime:
0001FB50 4A38 FE1E                  		tst.b	(f_timecount).w	; does the time	need updating?
0001FB54 6700                       		beq.s	@chklives	; if not, branch
0001FB56 4A78 F63A                  		tst.w	(f_pause).w	; is the game paused?
0001FB5A 6600                       		bne.s	@chklives	; if yes, branch
0001FB5C 43F8 FE22                  		lea	(v_time).w,a1
0001FB60 0C99 0009 3B3B             		cmpi.l	#(9*$10000)+(59*$100)+59,(a1)+ ; is the time 9:59:59?
0001FB66 6700                       		beq.s	TimeOver	; if yes, branch
0001FB68                            
0001FB68 5221                       		addq.b	#1,-(a1)	; increment 1/60s counter
0001FB6A 0C11 003C                  		cmpi.b	#60,(a1)	; check if passed 60
0001FB6E 6500                       		bcs.s	@chklives
0001FB70 12BC 0000                  		move.b	#0,(a1)
0001FB74 5221                       		addq.b	#1,-(a1)	; increment second counter
0001FB76 0C11 003C                  		cmpi.b	#60,(a1)	; check if passed 60
0001FB7A 6500                       		bcs.s	@updatetime
0001FB7C 12BC 0000                  		move.b	#0,(a1)
0001FB80 5221                       		addq.b	#1,-(a1)	; increment minute counter
0001FB82 0C11 0009                  		cmpi.b	#9,(a1)		; check if passed 9
0001FB86 6500                       		bcs.s	@updatetime
0001FB88 12BC 0009                  		move.b	#9,(a1)		; keep as 9
0001FB8C                            
0001FB8C                            	@updatetime:
0001FB8C 203C 5E40 0003             		hudVRAM	$DE40
0001FB92 7200                       		moveq	#0,d1
0001FB94 1238 FE23                  		move.b	(v_timemin).w,d1 ; load	minutes
0001FB98 6100 0000                  		bsr.w	Hud_Mins
0001FB9C 203C 5EC0 0003             		hudVRAM	$DEC0
0001FBA2 7200                       		moveq	#0,d1
0001FBA4 1238 FE24                  		move.b	(v_timesec).w,d1 ; load	seconds
0001FBA8 6100 0000                  		bsr.w	Hud_Secs
0001FBAC                            
0001FBAC                            	@chklives:
0001FBAC 4A38 FE1C                  		tst.b	(f_lifecount).w ; does the lives counter need updating?
0001FBB0 6700                       		beq.s	@chkbonus	; if not, branch
0001FBB2 4238 FE1C                  		clr.b	(f_lifecount).w
0001FBB6 6100 0000                  		bsr.w	Hud_Lives
0001FBBA                            
0001FBBA                            	@chkbonus:
0001FBBA 4A38 F7D6                  		tst.b	(f_endactbonus).w ; do time/ring bonus counters need updating?
0001FBBE 6700                       		beq.s	@finish		; if not, branch
0001FBC0 4238 F7D6                  		clr.b	(f_endactbonus).w
0001FBCE 7200                       		moveq	#0,d1
0001FBD0 3238 F7D2                  		move.w	(v_timebonus).w,d1 ; load time bonus
0001FBD4 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001FBD8 7200                       		moveq	#0,d1
0001FBDA 3238 F7D4                  		move.w	(v_ringbonus).w,d1 ; load ring bonus
0001FBDE 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001FBE2                            
0001FBE2                            	@finish:
0001FBE2 4E75                       		rts	
0001FBE4                            ; ===========================================================================
0001FBE4                            
0001FBE4                            TimeOver:
0001FBE4 4238 FE1E                  		clr.b	(f_timecount).w
0001FBE8 41F8 D000                  		lea	(v_player).w,a0
0001FBEC 2448                       		movea.l	a0,a2
0001FBEE 6100 E840                  		bsr.w	KillSonic
0001FBF2 11FC 0001 FE1A             		move.b	#1,(f_timeover).w
0001FBF8 4E75                       		rts	
0001FBFA                            ; ===========================================================================
0001FBFA                            
0001FBFA                            HudDebug:
0001FBFA 6100 0000                  		bsr.w	HudDb_XY
0001FBFE 4A38 FE1D                  		tst.b	(f_ringcount).w	; does the ring	counter	need updating?
0001FC02 6700                       		beq.s	@objcounter	; if not, branch
0001FC04 6A00                       		bpl.s	@notzero
0001FC06 6100 0000                  		bsr.w	Hud_LoadZero	; reset rings to 0 if Sonic is hit
0001FC0A                            
0001FC0A                            	@notzero:
0001FC0A 4238 FE1D                  		clr.b	(f_ringcount).w
0001FC0E 203C 5F40 0003             		hudVRAM	$DF40		; set VRAM address
0001FC14 7200                       		moveq	#0,d1
0001FC16 3238 FE20                  		move.w	(v_rings).w,d1	; load number of rings
0001FC1A 6100 0000                  		bsr.w	Hud_Rings
0001FC1E                            
0001FC1E                            	@objcounter:
0001FC1E 203C 5EC0 0003             		hudVRAM	$DEC0		; set VRAM address
0001FC24 7200                       		moveq	#0,d1
0001FC26 1238 F62C                  		move.b	(v_spritecount).w,d1 ; load "number of objects" counter
0001FC2A 6100 0000                  		bsr.w	Hud_Secs
0001FC2E 4A38 FE1C                  		tst.b	(f_lifecount).w ; does the lives counter need updating?
0001FC32 6700                       		beq.s	@chkbonus	; if not, branch
0001FC34 4238 FE1C                  		clr.b	(f_lifecount).w
0001FC38 6100 0000                  		bsr.w	Hud_Lives
0001FC3C                            
0001FC3C                            	@chkbonus:
0001FC3C 4A38 F7D6                  		tst.b	(f_endactbonus).w ; does the ring/time bonus counter need updating?
0001FC40 6700                       		beq.s	@finish		; if not, branch
0001FC42 4238 F7D6                  		clr.b	(f_endactbonus).w
0001FC50 7200                       		moveq	#0,d1
0001FC52 3238 F7D2                  		move.w	(v_timebonus).w,d1 ; load time bonus
0001FC56 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001FC5A 7200                       		moveq	#0,d1
0001FC5C 3238 F7D4                  		move.w	(v_ringbonus).w,d1 ; load ring bonus
0001FC60 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001FC64                            
0001FC64                            	@finish:
0001FC64 4E75                       		rts	
0001FC66                            ; End of function HUD_Update
0001FC66                            
0001FC66                            ; ---------------------------------------------------------------------------
0001FC66                            ; Subroutine to	load "0" on the	HUD
0001FC66                            ; ---------------------------------------------------------------------------
0001FC66                            
0001FC66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FC66                            
0001FC66                            
0001FC66                            Hud_LoadZero:
0001FC70 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001FC74 343C 0002                  		move.w	#2,d2
0001FC78 6000                       		bra.s	loc_1C83E
0001FC7A                            ; End of function Hud_LoadZero
0001FC7A                            
0001FC7A                            ; ---------------------------------------------------------------------------
0001FC7A                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001FC7A                            ; ---------------------------------------------------------------------------
0001FC7A                            
0001FC7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FC7A                            
0001FC7A                            
0001FC7A                            Hud_Base:
0001FC7A 4DF9 00C0 0000             		lea	($C00000).l,a6
0001FC80 6100 0000                  		bsr.w	Hud_Lives
0001FC8E 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001FC92 343C 000E                  		move.w	#$E,d2
0001FC96                            
0001FC96                            loc_1C83E:
0001FC96 43FA 0000                  		lea	Art_Hud(pc),a1
0001FC9A                            
0001FC9A                            loc_1C842:
0001FC9A 323C 000F                  		move.w	#$F,d1
0001FC9E 101A                       		move.b	(a2)+,d0
0001FCA0 6B00                       		bmi.s	loc_1C85E
0001FCA2 4880                       		ext.w	d0
0001FCA4 EB48                       		lsl.w	#5,d0
0001FCA6 47F1 0000                  		lea	(a1,d0.w),a3
0001FCAA                            
0001FCAA                            loc_1C852:
0001FCAA 2C9B                       		move.l	(a3)+,(a6)
0001FCAC 51C9 FFFC                  		dbf	d1,loc_1C852
0001FCB0                            
0001FCB0                            loc_1C858:
0001FCB0 51CA FFE8                  		dbf	d2,loc_1C842
0001FCB4                            
0001FCB4 4E75                       		rts	
0001FCB6                            ; ===========================================================================
0001FCB6                            
0001FCB6                            loc_1C85E:
0001FCB6 2CBC 0000 0000             		move.l	#0,(a6)
0001FCBC 51C9 FFF8                  		dbf	d1,loc_1C85E
0001FCC0                            
0001FCC0 60EE                       		bra.s	loc_1C858
0001FCC2                            ; End of function Hud_Base
0001FCC2                            
0001FCC2                            ; ===========================================================================
0001FCC2 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001FCCE FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001FCD2                            ; ---------------------------------------------------------------------------
0001FCD2                            ; Subroutine to	load debug mode	numbers	patterns
0001FCD2                            ; ---------------------------------------------------------------------------
0001FCD2                            
0001FCD2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FCD2                            
0001FCD2                            
0001FCD2                            HudDb_XY:
0001FCDC 3238 F700                  		move.w	(v_screenposx).w,d1 ; load camera x-position
0001FCE0 4841                       		swap	d1
0001FCE2 3238 D008                  		move.w	(v_player+obX).w,d1 ; load Sonic's x-position
0001FCE6 6100                       		bsr.s	HudDb_XY2
0001FCE8 3238 F704                  		move.w	(v_screenposy).w,d1 ; load camera y-position
0001FCEC 4841                       		swap	d1
0001FCEE 3238 D00C                  		move.w	(v_player+obY).w,d1 ; load Sonic's y-position
0001FCF2                            ; End of function HudDb_XY
0001FCF2                            
0001FCF2                            
0001FCF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FCF2                            
0001FCF2                            
0001FCF2                            HudDb_XY2:
0001FCF2 7C07                       		moveq	#7,d6
0001FCF4 43F9 0000 0592             		lea	(Art_Text).l,a1
0001FCFA                            
0001FCFA                            HudDb_XYLoop:
0001FCFA E959                       		rol.w	#4,d1
0001FCFC 3401                       		move.w	d1,d2
0001FCFE 0242 000F                  		andi.w	#$F,d2
0001FD02 0C42 000A                  		cmpi.w	#$A,d2
0001FD06 6500                       		bcs.s	loc_1C8B2
0001FD08 5E42                       		addq.w	#7,d2
0001FD0A                            
0001FD0A                            loc_1C8B2:
0001FD0A EB4A                       		lsl.w	#5,d2
0001FD0C 47F1 2000                  		lea	(a1,d2.w),a3
0001FD10 2C9B                       		move.l	(a3)+,(a6)
0001FD12 2C9B                       		move.l	(a3)+,(a6)
0001FD14 2C9B                       		move.l	(a3)+,(a6)
0001FD16 2C9B                       		move.l	(a3)+,(a6)
0001FD18 2C9B                       		move.l	(a3)+,(a6)
0001FD1A 2C9B                       		move.l	(a3)+,(a6)
0001FD1C 2C9B                       		move.l	(a3)+,(a6)
0001FD1E 2C9B                       		move.l	(a3)+,(a6)
0001FD20 4841                       		swap	d1
0001FD22 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001FD26                            
0001FD26 4E75                       		rts	
0001FD28                            ; End of function HudDb_XY2
0001FD28                            
0001FD28                            ; ---------------------------------------------------------------------------
0001FD28                            ; Subroutine to	load rings numbers patterns
0001FD28                            ; ---------------------------------------------------------------------------
0001FD28                            
0001FD28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FD28                            
0001FD28                            
0001FD28                            Hud_Rings:
0001FD28 45F9 0000 0000             		lea	(Hud_100).l,a2
0001FD2E 7C02                       		moveq	#2,d6
0001FD30 6000                       		bra.s	Hud_LoadArt
0001FD32                            ; End of function Hud_Rings
0001FD32                            
0001FD32                            ; ---------------------------------------------------------------------------
0001FD32                            ; Subroutine to	load score numbers patterns
0001FD32                            ; ---------------------------------------------------------------------------
0001FD32                            
0001FD32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FD32                            
0001FD32                            
0001FD32                            Hud_Score:
0001FD32 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001FD38 7C05                       		moveq	#5,d6
0001FD3A                            
0001FD3A                            Hud_LoadArt:
0001FD3A 7800                       		moveq	#0,d4
0001FD3C 43FA 0000                  		lea	Art_Hud(pc),a1
0001FD40                            
0001FD40                            Hud_ScoreLoop:
0001FD40 7400                       		moveq	#0,d2
0001FD42 261A                       		move.l	(a2)+,d3
0001FD44                            
0001FD44                            loc_1C8EC:
0001FD44 9283                       		sub.l	d3,d1
0001FD46 6500                       		bcs.s	loc_1C8F4
0001FD48 5242                       		addq.w	#1,d2
0001FD4A 60F8                       		bra.s	loc_1C8EC
0001FD4C                            ; ===========================================================================
0001FD4C                            
0001FD4C                            loc_1C8F4:
0001FD4C D283                       		add.l	d3,d1
0001FD4E 4A42                       		tst.w	d2
0001FD50 6700                       		beq.s	loc_1C8FE
0001FD52 383C 0001                  		move.w	#1,d4
0001FD56                            
0001FD56                            loc_1C8FE:
0001FD56 4A44                       		tst.w	d4
0001FD58 6700                       		beq.s	loc_1C92C
0001FD5A ED4A                       		lsl.w	#6,d2
0001FD5C 2D40 0004                  		move.l	d0,4(a6)
0001FD60 47F1 2000                  		lea	(a1,d2.w),a3
0001FD64 2C9B                       		move.l	(a3)+,(a6)
0001FD66 2C9B                       		move.l	(a3)+,(a6)
0001FD68 2C9B                       		move.l	(a3)+,(a6)
0001FD6A 2C9B                       		move.l	(a3)+,(a6)
0001FD6C 2C9B                       		move.l	(a3)+,(a6)
0001FD6E 2C9B                       		move.l	(a3)+,(a6)
0001FD70 2C9B                       		move.l	(a3)+,(a6)
0001FD72 2C9B                       		move.l	(a3)+,(a6)
0001FD74 2C9B                       		move.l	(a3)+,(a6)
0001FD76 2C9B                       		move.l	(a3)+,(a6)
0001FD78 2C9B                       		move.l	(a3)+,(a6)
0001FD7A 2C9B                       		move.l	(a3)+,(a6)
0001FD7C 2C9B                       		move.l	(a3)+,(a6)
0001FD7E 2C9B                       		move.l	(a3)+,(a6)
0001FD80 2C9B                       		move.l	(a3)+,(a6)
0001FD82 2C9B                       		move.l	(a3)+,(a6)
0001FD84                            
0001FD84                            loc_1C92C:
0001FD84 0680 0040 0000             		addi.l	#$400000,d0
0001FD8A 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001FD8E                            
0001FD8E 4E75                       		rts	
0001FD90                            
0001FD90                            ; End of function Hud_Score
0001FD90                            ; End of function Hud_Score
0001FD90                            
0001FD90                            ; ---------------------------------------------------------------------------
0001FD90                            ; Subroutine to	load countdown numbers on the continue screen
0001FD90                            ; ---------------------------------------------------------------------------
0001FD90                            
0001FD90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FD90                            
0001FD90                            
0001FD90                            ContScrCounter:
0001FD9A 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0001FDA0 45F9 0000 0000             		lea	(Hud_10).l,a2
0001FDA6 7C01                       		moveq	#1,d6
0001FDA8 7800                       		moveq	#0,d4
0001FDAA 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001FDAE                            
0001FDAE                            ContScr_Loop:
0001FDAE 7400                       		moveq	#0,d2
0001FDB0 261A                       		move.l	(a2)+,d3
0001FDB2                            
0001FDB2                            loc_1C95A:
0001FDB2 9283                       		sub.l	d3,d1
0001FDB4 6500                       		blo.s	loc_1C962
0001FDB6 5242                       		addq.w	#1,d2
0001FDB8 60F8                       		bra.s	loc_1C95A
0001FDBA                            ; ===========================================================================
0001FDBA                            
0001FDBA                            loc_1C962:
0001FDBA D283                       		add.l	d3,d1
0001FDBC ED4A                       		lsl.w	#6,d2
0001FDBE 47F1 2000                  		lea	(a1,d2.w),a3
0001FDC2 2C9B                       		move.l	(a3)+,(a6)
0001FDC4 2C9B                       		move.l	(a3)+,(a6)
0001FDC6 2C9B                       		move.l	(a3)+,(a6)
0001FDC8 2C9B                       		move.l	(a3)+,(a6)
0001FDCA 2C9B                       		move.l	(a3)+,(a6)
0001FDCC 2C9B                       		move.l	(a3)+,(a6)
0001FDCE 2C9B                       		move.l	(a3)+,(a6)
0001FDD0 2C9B                       		move.l	(a3)+,(a6)
0001FDD2 2C9B                       		move.l	(a3)+,(a6)
0001FDD4 2C9B                       		move.l	(a3)+,(a6)
0001FDD6 2C9B                       		move.l	(a3)+,(a6)
0001FDD8 2C9B                       		move.l	(a3)+,(a6)
0001FDDA 2C9B                       		move.l	(a3)+,(a6)
0001FDDC 2C9B                       		move.l	(a3)+,(a6)
0001FDDE 2C9B                       		move.l	(a3)+,(a6)
0001FDE0 2C9B                       		move.l	(a3)+,(a6)
0001FDE2 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001FDE6                            
0001FDE6 4E75                       		rts	
0001FDE8                            ; End of function ContScrCounter
0001FDE8                            
0001FDE8                            ; ===========================================================================
0001FDE8                            
0001FDE8                            		include	"_inc\HUD (part 2).asm"
0001FDE8                            ; ---------------------------------------------------------------------------
0001FDE8                            ; HUD counter sizes
0001FDE8                            ; ---------------------------------------------------------------------------
0001FDE8 0001 86A0                  Hud_100000:	dc.l 100000
0001FDEC 0000 2710                  Hud_10000:	dc.l 10000
0001FDF0 0000 03E8                  Hud_1000:	dc.l 1000
0001FDF4 0000 0064                  Hud_100:	dc.l 100
0001FDF8 0000 000A                  Hud_10:		dc.l 10
0001FDFC 0000 0001                  Hud_1:		dc.l 1
0001FE00                            
0001FE00                            ; ---------------------------------------------------------------------------
0001FE00                            ; Subroutine to	load time numbers patterns
0001FE00                            ; ---------------------------------------------------------------------------
0001FE00                            
0001FE00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FE00                            
0001FE00                            
0001FE00                            Hud_Mins:
0001FE00 45F9 0001 FDFC             		lea	(Hud_1).l,a2
0001FE06 7C00                       		moveq	#0,d6
0001FE08 6000                       		bra.s	loc_1C9BA
0001FE0A                            ; End of function Hud_Mins
0001FE0A                            
0001FE0A                            
0001FE0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FE0A                            
0001FE0A                            
0001FE0A                            Hud_Secs:
0001FE0A 45F9 0001 FDF8             		lea	(Hud_10).l,a2
0001FE10 7C01                       		moveq	#1,d6
0001FE12                            
0001FE12                            loc_1C9BA:
0001FE12 7800                       		moveq	#0,d4
0001FE14 43FA 0000                  		lea	Art_Hud(pc),a1
0001FE18                            
0001FE18                            Hud_TimeLoop:
0001FE18 7400                       		moveq	#0,d2
0001FE1A 261A                       		move.l	(a2)+,d3
0001FE1C                            
0001FE1C                            loc_1C9C4:
0001FE1C 9283                       		sub.l	d3,d1
0001FE1E 6500                       		bcs.s	loc_1C9CC
0001FE20 5242                       		addq.w	#1,d2
0001FE22 60F8                       		bra.s	loc_1C9C4
0001FE24                            ; ===========================================================================
0001FE24                            
0001FE24                            loc_1C9CC:
0001FE24 D283                       		add.l	d3,d1
0001FE26 4A42                       		tst.w	d2
0001FE28 6700                       		beq.s	loc_1C9D6
0001FE2A 383C 0001                  		move.w	#1,d4
0001FE2E                            
0001FE2E                            loc_1C9D6:
0001FE2E ED4A                       		lsl.w	#6,d2
0001FE30 2D40 0004                  		move.l	d0,4(a6)
0001FE34 47F1 2000                  		lea	(a1,d2.w),a3
0001FE38 2C9B                       		move.l	(a3)+,(a6)
0001FE3A 2C9B                       		move.l	(a3)+,(a6)
0001FE3C 2C9B                       		move.l	(a3)+,(a6)
0001FE3E 2C9B                       		move.l	(a3)+,(a6)
0001FE40 2C9B                       		move.l	(a3)+,(a6)
0001FE42 2C9B                       		move.l	(a3)+,(a6)
0001FE44 2C9B                       		move.l	(a3)+,(a6)
0001FE46 2C9B                       		move.l	(a3)+,(a6)
0001FE48 2C9B                       		move.l	(a3)+,(a6)
0001FE4A 2C9B                       		move.l	(a3)+,(a6)
0001FE4C 2C9B                       		move.l	(a3)+,(a6)
0001FE4E 2C9B                       		move.l	(a3)+,(a6)
0001FE50 2C9B                       		move.l	(a3)+,(a6)
0001FE52 2C9B                       		move.l	(a3)+,(a6)
0001FE54 2C9B                       		move.l	(a3)+,(a6)
0001FE56 2C9B                       		move.l	(a3)+,(a6)
0001FE58 0680 0040 0000             		addi.l	#$400000,d0
0001FE5E 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001FE62                            
0001FE62 4E75                       		rts	
0001FE64                            ; End of function Hud_Secs
0001FE64                            
0001FE64                            ; ---------------------------------------------------------------------------
0001FE64                            ; Subroutine to	load time/ring bonus numbers patterns
0001FE64                            ; ---------------------------------------------------------------------------
0001FE64                            
0001FE64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FE64                            
0001FE64                            
0001FE64                            Hud_TimeRingBonus:
0001FE64 45F9 0001 FDF0             		lea	(Hud_1000).l,a2
0001FE6A 7C03                       		moveq	#3,d6
0001FE6C 7800                       		moveq	#0,d4
0001FE6E 43FA 0000                  		lea	Art_Hud(pc),a1
0001FE72                            
0001FE72                            Hud_BonusLoop:
0001FE72 7400                       		moveq	#0,d2
0001FE74 261A                       		move.l	(a2)+,d3
0001FE76                            
0001FE76                            loc_1CA1E:
0001FE76 9283                       		sub.l	d3,d1
0001FE78 6500                       		bcs.s	loc_1CA26
0001FE7A 5242                       		addq.w	#1,d2
0001FE7C 60F8                       		bra.s	loc_1CA1E
0001FE7E                            ; ===========================================================================
0001FE7E                            
0001FE7E                            loc_1CA26:
0001FE7E D283                       		add.l	d3,d1
0001FE80 4A42                       		tst.w	d2
0001FE82 6700                       		beq.s	loc_1CA30
0001FE84 383C 0001                  		move.w	#1,d4
0001FE88                            
0001FE88                            loc_1CA30:
0001FE88 4A44                       		tst.w	d4
0001FE8A 6700                       		beq.s	Hud_ClrBonus
0001FE8C ED4A                       		lsl.w	#6,d2
0001FE8E 47F1 2000                  		lea	(a1,d2.w),a3
0001FE92 2C9B                       		move.l	(a3)+,(a6)
0001FE94 2C9B                       		move.l	(a3)+,(a6)
0001FE96 2C9B                       		move.l	(a3)+,(a6)
0001FE98 2C9B                       		move.l	(a3)+,(a6)
0001FE9A 2C9B                       		move.l	(a3)+,(a6)
0001FE9C 2C9B                       		move.l	(a3)+,(a6)
0001FE9E 2C9B                       		move.l	(a3)+,(a6)
0001FEA0 2C9B                       		move.l	(a3)+,(a6)
0001FEA2 2C9B                       		move.l	(a3)+,(a6)
0001FEA4 2C9B                       		move.l	(a3)+,(a6)
0001FEA6 2C9B                       		move.l	(a3)+,(a6)
0001FEA8 2C9B                       		move.l	(a3)+,(a6)
0001FEAA 2C9B                       		move.l	(a3)+,(a6)
0001FEAC 2C9B                       		move.l	(a3)+,(a6)
0001FEAE 2C9B                       		move.l	(a3)+,(a6)
0001FEB0 2C9B                       		move.l	(a3)+,(a6)
0001FEB2                            
0001FEB2                            loc_1CA5A:
0001FEB2 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001FEB6                            
0001FEB6 4E75                       		rts	
0001FEB8                            ; ===========================================================================
0001FEB8                            
0001FEB8                            Hud_ClrBonus:
0001FEB8 7A0F                       		moveq	#$F,d5
0001FEBA                            
0001FEBA                            Hud_ClrBonusLoop:
0001FEBA 2CBC 0000 0000             		move.l	#0,(a6)
0001FEC0 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001FEC4                            
0001FEC4 60EC                       		bra.s	loc_1CA5A
0001FEC6                            ; End of function Hud_TimeRingBonus
0001FEC6                            
0001FEC6                            ; ---------------------------------------------------------------------------
0001FEC6                            ; Subroutine to	load uncompressed lives	counter	patterns
0001FEC6                            ; ---------------------------------------------------------------------------
0001FEC6                            
0001FEC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FEC6                            
0001FEC6                            
0001FEC6                            Hud_Lives:
0001FEC6 203C 7BA0 0003             		hudVRAM	$FBA0		; set VRAM address
0001FECC 7200                       		moveq	#0,d1
0001FECE 1238 FE12                  		move.b	(v_lives).w,d1	; load number of lives
0001FED2 45F9 0001 FDF8             		lea	(Hud_10).l,a2
0001FED8 7C01                       		moveq	#1,d6
0001FEDA 7800                       		moveq	#0,d4
0001FEDC 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001FEE0                            
0001FEE0                            Hud_LivesLoop:
0001FEE0 2D40 0004                  		move.l	d0,4(a6)
0001FEE4 7400                       		moveq	#0,d2
0001FEE6 261A                       		move.l	(a2)+,d3
0001FEE8                            
0001FEE8                            loc_1CA90:
0001FEE8 9283                       		sub.l	d3,d1
0001FEEA 6500                       		bcs.s	loc_1CA98
0001FEEC 5242                       		addq.w	#1,d2
0001FEEE 60F8                       		bra.s	loc_1CA90
0001FEF0                            ; ===========================================================================
0001FEF0                            
0001FEF0                            loc_1CA98:
0001FEF0 D283                       		add.l	d3,d1
0001FEF2 4A42                       		tst.w	d2
0001FEF4 6700                       		beq.s	loc_1CAA2
0001FEF6 383C 0001                  		move.w	#1,d4
0001FEFA                            
0001FEFA                            loc_1CAA2:
0001FEFA 4A44                       		tst.w	d4
0001FEFC 6700                       		beq.s	Hud_ClrLives
0001FEFE                            
0001FEFE                            loc_1CAA6:
0001FEFE EB4A                       		lsl.w	#5,d2
0001FF00 47F1 2000                  		lea	(a1,d2.w),a3
0001FF04 2C9B                       		move.l	(a3)+,(a6)
0001FF06 2C9B                       		move.l	(a3)+,(a6)
0001FF08 2C9B                       		move.l	(a3)+,(a6)
0001FF0A 2C9B                       		move.l	(a3)+,(a6)
0001FF0C 2C9B                       		move.l	(a3)+,(a6)
0001FF0E 2C9B                       		move.l	(a3)+,(a6)
0001FF10 2C9B                       		move.l	(a3)+,(a6)
0001FF12 2C9B                       		move.l	(a3)+,(a6)
0001FF14                            
0001FF14                            loc_1CABC:
0001FF14 0680 0040 0000             		addi.l	#$400000,d0
0001FF1A 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001FF1E                            
0001FF1E 4E75                       		rts	
0001FF20                            ; ===========================================================================
0001FF20                            
0001FF20                            Hud_ClrLives:
0001FF20 4A46                       		tst.w	d6
0001FF22 67DA                       		beq.s	loc_1CAA6
0001FF24 7A07                       		moveq	#7,d5
0001FF26                            
0001FF26                            Hud_ClrLivesLoop:
0001FF26 2CBC 0000 0000             		move.l	#0,(a6)
0001FF2C 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001FF30 60E2                       		bra.s	loc_1CABC
0001FF32                            ; End of function Hud_Lives
0001FF32                            ; End of function Hud_Lives
0001FF32                            
0001FF32                            Art_Hud:	incbin	"artunc\HUD Numbers.bin" ; 8x16 pixel numbers on HUD
00020232                            		even
00020232                            Art_LivesNums:	incbin	"artunc\Lives Counter Numbers.bin" ; 8x8 pixel numbers on lives counter
00020372                            		even
00020372                            
00020372                            		include	"_incObj\DebugMode.asm"
00020372                            ; ---------------------------------------------------------------------------
00020372                            ; When debug mode is currently in use
00020372                            ; ---------------------------------------------------------------------------
00020372                            
00020372                            DebugMode:
00020372 7000                       		moveq	#0,d0
00020374 1038 FE08                  		move.b	(v_debuguse).w,d0
00020378 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0002037C 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
00020380                            ; ===========================================================================
00020380 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
00020382 0000                       		dc.w Debug_Action-Debug_Index
00020384                            ; ===========================================================================
00020384                            
00020384                            Debug_Main:	; Routine 0
00020384 5438 FE08                  		addq.b	#2,(v_debuguse).w
00020388 31F8 F72C FEF0             		move.w	(v_limittop2).w,(v_limittopdb).w ; buffer level x-boundary
0002038E 31F8 F726 FEF2             		move.w	(v_limitbtm1).w,(v_limitbtmdb).w ; buffer level y-boundary
00020394 31FC 0000 F72C             		move.w	#0,(v_limittop2).w
0002039A 31FC 0720 F726             		move.w	#$720,(v_limitbtm1).w
000203A0 0278 07FF D00C             		andi.w	#$7FF,(v_player+obY).w
000203A6 0278 07FF F704             		andi.w	#$7FF,(v_screenposy).w
000203AC 0278 03FF F70C             		andi.w	#$3FF,(v_bgscreenposy).w
000203B2 117C 0000 001A             		move.b	#0,obFrame(a0)
000203B8 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
000203BE 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is game mode $10 (special stage)?
000203C4 6600                       		bne.s	@islevel	; if not, branch
000203C6                            
000203C6 31FC 0000 F782             		move.w	#0,(v_ssrotate).w ; stop special stage rotating
000203CC 31FC 0000 F780             		move.w	#0,(v_ssangle).w ; make	special	stage "upright"
000203D2 7006                       		moveq	#6,d0		; use 6th debug	item list
000203D4 6000                       		bra.s	@selectlist
000203D6                            ; ===========================================================================
000203D6                            
000203D6                            @islevel:
000203D6 7000                       		moveq	#0,d0
000203D8 1038 FE10                  		move.b	(v_zone).w,d0
000203DC                            
000203DC                            @selectlist:
000203DC 45F9 0000 0000             		lea	(DebugList).l,a2
000203E2 D040                       		add.w	d0,d0
000203E4 D4F2 0000                  		adda.w	(a2,d0.w),a2
000203E8 3C1A                       		move.w	(a2)+,d6
000203EA BC38 FE06                  		cmp.b	(v_debugitem).w,d6 ; have you gone past the last item?
000203EE 6200                       		bhi.s	@noreset	; if not, branch
000203F0 11FC 0000 FE06             		move.b	#0,(v_debugitem).w ; back to start of list
000203F6                            
000203F6                            	@noreset:
000203F6 6100 0000                  		bsr.w	Debug_ShowItem
000203FA 11FC 000C FE0A             		move.b	#12,(v_debugxspeed).w
00020400 11FC 0001 FE0B             		move.b	#1,(v_debugyspeed).w
00020406                            
00020406                            Debug_Action:	; Routine 2
00020406 7006                       		moveq	#6,d0
00020408 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w
0002040E 6700                       		beq.s	@isntlevel
00020410                            
00020410 7000                       		moveq	#0,d0
00020412 1038 FE10                  		move.b	(v_zone).w,d0
00020416                            
00020416                            	@isntlevel:
00020416 45F9 0000 0000             		lea	(DebugList).l,a2
0002041C D040                       		add.w	d0,d0
0002041E D4F2 0000                  		adda.w	(a2,d0.w),a2
00020422 3C1A                       		move.w	(a2)+,d6
00020424 6100 0000                  		bsr.w	Debug_Control
00020428 4EF9 0000 F88C             		jmp	(DisplaySprite).l
0002042E                            
0002042E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002042E                            
0002042E                            
0002042E                            Debug_Control:
0002042E 7800                       		moveq	#0,d4
00020430 323C 0001                  		move.w	#1,d1
00020434 1838 F605                  		move.b	(v_jpadpress1).w,d4
00020438 0244 000F                  		andi.w	#btnDir,d4	; is up/down/left/right	pressed?
0002043C 6600                       		bne.s	@dirpressed	; if yes, branch
0002043E                            
0002043E 1038 F604                  		move.b	(v_jpadhold1).w,d0
00020442 0240 000F                  		andi.w	#btnDir,d0	; is up/down/left/right	held?
00020446 6600                       		bne.s	@dirheld	; if yes, branch
00020448                            
00020448 11FC 000C FE0A             		move.b	#12,(v_debugxspeed).w
0002044E 11FC 000F FE0B             		move.b	#15,(v_debugyspeed).w
00020454 6000 0000                  		bra.w	Debug_ChgItem
00020458                            ; ===========================================================================
00020458                            
00020458                            @dirheld:
00020458 5338 FE0A                  		subq.b	#1,(v_debugxspeed).w
0002045C 6600                       		bne.s	loc_1D01C
0002045E 11FC 0001 FE0A             		move.b	#1,(v_debugxspeed).w
00020464 5238 FE0B                  		addq.b	#1,(v_debugyspeed).w
00020468 6600                       		bne.s	@dirpressed
0002046A 11FC 00FF FE0B             		move.b	#-1,(v_debugyspeed).w
00020470                            
00020470                            @dirpressed:
00020470 1838 F604                  		move.b	(v_jpadhold1).w,d4
00020474                            
00020474                            loc_1D01C:
00020474 7200                       		moveq	#0,d1
00020476 1238 FE0B                  		move.b	(v_debugyspeed).w,d1
0002047A 5241                       		addq.w	#1,d1
0002047C 4841                       		swap	d1
0002047E E881                       		asr.l	#4,d1
00020480 2428 000C                  		move.l	obY(a0),d2
00020484 2628 0008                  		move.l	obX(a0),d3
00020488 0804 0000                  		btst	#bitUp,d4	; is up	being pressed?
0002048C 6700                       		beq.s	loc_1D03C	; if not, branch
0002048E 9481                       		sub.l	d1,d2
00020490 6400                       		bcc.s	loc_1D03C
00020492 7400                       		moveq	#0,d2
00020494                            
00020494                            loc_1D03C:
00020494 0804 0001                  		btst	#bitDn,d4	; is down being	pressed?
00020498 6700                       		beq.s	loc_1D052	; if not, branch
0002049A D481                       		add.l	d1,d2
0002049C 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
000204A2 6500                       		bcs.s	loc_1D052
000204A4 243C 07FF 0000             		move.l	#$7FF0000,d2
000204AA                            
000204AA                            loc_1D052:
000204AA 0804 0002                  		btst	#bitL,d4
000204AE 6700                       		beq.s	loc_1D05E
000204B0 9681                       		sub.l	d1,d3
000204B2 6400                       		bcc.s	loc_1D05E
000204B4 7600                       		moveq	#0,d3
000204B6                            
000204B6                            loc_1D05E:
000204B6 0804 0003                  		btst	#bitR,d4
000204BA 6700                       		beq.s	loc_1D066
000204BC D681                       		add.l	d1,d3
000204BE                            
000204BE                            loc_1D066:
000204BE 2142 000C                  		move.l	d2,obY(a0)
000204C2 2143 0008                  		move.l	d3,obX(a0)
000204C6                            
000204C6                            Debug_ChgItem:
000204C6 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is button A pressed?
000204CC 6700                       		beq.s	@createitem	; if not, branch
000204CE 0838 0005 F605             		btst	#bitC,(v_jpadpress1).w ; is button C pressed?
000204D4 6700                       		beq.s	@nextitem	; if not, branch
000204D6 5338 FE06                  		subq.b	#1,(v_debugitem).w ; go back 1 item
000204DA 6400                       		bcc.s	@display
000204DC DD38 FE06                  		add.b	d6,(v_debugitem).w
000204E0 6000                       		bra.s	@display
000204E2                            ; ===========================================================================
000204E2                            
000204E2                            @nextitem:
000204E2 0838 0006 F605             		btst	#bitA,(v_jpadpress1).w ; is button A pressed?
000204E8 6700                       		beq.s	@createitem	; if not, branch
000204EA 5238 FE06                  		addq.b	#1,(v_debugitem).w ; go forwards 1 item
000204EE BC38 FE06                  		cmp.b	(v_debugitem).w,d6
000204F2 6200                       		bhi.s	@display
000204F4 11FC 0000 FE06             		move.b	#0,(v_debugitem).w ; loop back to first item
000204FA                            
000204FA                            	@display:
000204FA 6000 0000                  		bra.w	Debug_ShowItem
000204FE                            ; ===========================================================================
000204FE                            
000204FE                            @createitem:
000204FE 0838 0005 F605             		btst	#bitC,(v_jpadpress1).w ; is button C pressed?
00020504 6700                       		beq.s	@backtonormal	; if not, branch
00020506 4EB9 0000 FD18             		jsr	(FindFreeObj).l
0002050C 6600                       		bne.s	@backtonormal
0002050E 3368 0008 0008             		move.w	obX(a0),obX(a1)
00020514 3368 000C 000C             		move.w	obY(a0),obY(a1)
0002051A 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0002051E 1368 0001 0001             		move.b	obRender(a0),obRender(a1)
00020524 1368 0001 0022             		move.b	obRender(a0),obStatus(a1)
0002052A 0229 007F 0022             		andi.b	#$7F,obStatus(a1)
00020530 7000                       		moveq	#0,d0
00020532 1038 FE06                  		move.b	(v_debugitem).w,d0
00020536 E748                       		lsl.w	#3,d0
00020538 1372 0004 0028             		move.b	4(a2,d0.w),obSubtype(a1)
0002053E 4E75                       		rts	
00020540                            ; ===========================================================================
00020540                            
00020540                            @backtonormal:
00020540 0838 0004 F605             		btst	#bitB,(v_jpadpress1).w ; is button B pressed?
00020546 6700                       		beq.s	@stayindebug	; if not, branch
00020548 7000                       		moveq	#0,d0
0002054A 31C0 FE08                  		move.w	d0,(v_debuguse).w ; deactivate debug mode
0002054E 21FC 0000 0000 D004        		move.l	#Map_Sonic,(v_player+obMap).w
00020556 31FC 0780 D002             		move.w	#$780,(v_player+obGfx).w
0002055C 11C0 D01C                  		move.b	d0,(v_player+obAnim).w
00020560 3140 000A                  		move.w	d0,obX+2(a0)
00020564 3140 000E                  		move.w	d0,obY+2(a0)
00020568 31F8 FEF0 F72C             		move.w	(v_limittopdb).w,(v_limittop2).w ; restore level boundaries
0002056E 31F8 FEF2 F726             		move.w	(v_limitbtmdb).w,(v_limitbtm1).w
00020574 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; are you in the special stage?
0002057A 6600                       		bne.s	@stayindebug	; if not, branch
0002057C                            
0002057C 4278 F780                  		clr.w	(v_ssangle).w
00020580 31FC 0040 F782             		move.w	#$40,(v_ssrotate).w ; set new level rotation speed
00020586 21FC 0000 0000 D004        		move.l	#Map_Sonic,(v_player+obMap).w
0002058E 31FC 0780 D002             		move.w	#$780,(v_player+obGfx).w
00020594 11FC 0002 D01C             		move.b	#id_Roll,(v_player+obAnim).w
0002059A 08F8 0002 D022             		bset	#2,(v_player+obStatus).w
000205A0 08F8 0001 D022             		bset	#1,(v_player+obStatus).w
000205A6                            
000205A6                            	@stayindebug:
000205A6 4E75                       		rts	
000205A8                            ; End of function Debug_Control
000205A8                            
000205A8                            
000205A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000205A8                            
000205A8                            
000205A8                            Debug_ShowItem:
000205A8 7000                       		moveq	#0,d0
000205AA 1038 FE06                  		move.b	(v_debugitem).w,d0
000205AE E748                       		lsl.w	#3,d0
000205B0 2172 0000 0004             		move.l	(a2,d0.w),obMap(a0) ; load mappings for item
000205B6 3172 0006 0002             		move.w	6(a2,d0.w),obGfx(a0) ; load VRAM setting for item
000205BC 1172 0005 001A             		move.b	5(a2,d0.w),obFrame(a0) ; load frame number for item
000205C2 4E75                       		rts	
000205C4                            ; End of function Debug_ShowItem
000205C4                            ; End of function Debug_ShowItem
000205C4                            		include	"_inc\DebugList.asm"
000205C4                            ; ---------------------------------------------------------------------------
000205C4                            ; Debug	mode item lists
000205C4                            ; ---------------------------------------------------------------------------
000205C4                            DebugList:
000205C4 0000                       	dc.w @GHZ-DebugList
000205C6 0000                       	dc.w @LZ-DebugList
000205C8 0000                       	dc.w @MZ-DebugList
000205CA 0000                       	dc.w @SLZ-DebugList
000205CC 0000                       	dc.w @SYZ-DebugList
000205CE 0000                       	dc.w @SBZ-DebugList
000205D0 0000                       	dc.w @Ending-DebugList
000205D2                            
000205D2                            dbug:	macro map,object,subtype,frame,vram
000205D2                            	dc.l map+(object<<24)
000205D2                            	dc.b subtype,frame
000205D2                            	dc.w vram
000205D2                            	endm
000205D2                            
000205D2                            @GHZ:
000205D2 0000                       	dc.w (@GHZend-@GHZ-2)/8
000205D4                            
000205D4                            ;		mappings	object		subtype	frame	VRAM setting
000205D4 2500 BFA8 0000 27B2        	dbug 	Map_Ring,	id_Rings,	0,	0,	$27B2
000205DC 2600 C76E 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
000205E4 1F00 B388 0000 0400        	dbug	Map_Crab,	id_Crabmeat,	0,	0,	$400
000205EC 2200 B812 0000 0444        	dbug	Map_Buzz,	id_BuzzBomber,	0,	0,	$444
000205F4 2B00 CDEA 0000 047B        	dbug	Map_Chop,	id_Chopper,	0,	0,	$47B
000205FC 3600 F236 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
00020604 1800 9D42 0000 4000        	dbug	Map_Plat_GHZ,	id_BasicPlatform, 0,	0,	$4000
0002060C 3B00 F35C 0000 63D0        	dbug	Map_PRock,	id_PurpleRock,	0,	0,	$63D0
00020614 4001 18F4 0000 04F0        	dbug	Map_Moto,	id_MotoBug,	0,	0,	$4F0
0002061C 4100 FFAA 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
00020624 4201 01D0 0000 249B        	dbug	Map_Newt,	id_Newtron,	0,	0,	$249B
0002062C 4401 04DE 0000 434C        	dbug	Map_Edge,	id_EdgeWalls,	0,	0,	$434C
00020634 7901 A132 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
0002063C 4B00 BFF8 0000 2400        	dbug	Map_GRing,	id_GiantRing,	0,	0,	$2400
00020644 7D01 A2F4 0101 84B6        	dbug	Map_Bonus,	id_HiddenBonus,	1,	1,	$84B6
0002064C                            	@GHZend:
0002064C                            
0002064C                            @LZ:
0002064C 0000                       	dc.w (@LZend-@LZ-2)/8
0002064E                            
0002064E                            ;		mappings	object		subtype	frame	VRAM setting
0002064E 2500 BFA8 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
00020656 2600 C76E 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
0002065E 4100 FFAA 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
00020666 2C00 CE90 0800 2486        	dbug	Map_Jaws,	id_Jaws,	8,	0,	$2486
0002066E 2D00 D07C 0002 84A6        	dbug	Map_Burro,	id_Burrobot,	0,	2,	$84A6
00020676 1601 42A8 0000 03CC        	dbug	Map_Harp,	id_Harpoon,	0,	0,	$3CC
0002067E 1601 42A8 0203 03CC        	dbug	Map_Harp,	id_Harpoon,	2,	3,	$3CC
00020686 3300 E4FA 0000 43DE        	dbug	Map_Push,	id_PushBlock,	0,	0,	$43DE
0002068E 3200 E0BA 0000 0513        	dbug	Map_But,	id_Button,	0,	0,	$513
00020696 3600 F236 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
0002069E 5201 237E 0400 43BC        	dbug	Map_MBlockLZ,	id_MovingBlock,	4,	0,	$43BC
000206A6 6101 44D0 0100 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, 1,	0,	$43E6
000206AE 6101 44D0 1301 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, $13,	1,	$43E6
000206B6 6101 44D0 0500 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, 5,	0,	$43E6
000206BE 6201 4624 0000 443E        	dbug	Map_Gar,	id_Gargoyle,	0,	0,	$443E
000206C6 6101 44D0 2702 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, $27,	2,	$43E6
000206CE 6101 44D0 3003 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, $30,	3,	$43E6
000206D6 6301 4986 7F00 03F6        	dbug	Map_LConv,	id_LabyrinthConvey, $7F, 0,	$3F6
000206DE 6001 41F2 0000 0467        	dbug	Map_Orb,	id_Orbinaut,	0,	0,	$467
000206E6 6401 4CD4 8413 8348        	dbug	Map_Bub,	id_Bubble,	$84,	$13,	$8348
000206EE 6501 4E5C 0202 C259        	dbug	Map_WFall,	id_Waterfall,	2,	2,	$C259
000206F6 6501 4E5C 0909 C259        	dbug	Map_WFall,	id_Waterfall,	9,	9,	$C259
000206FE 0B01 363E 0000 43DE        	dbug	Map_Pole,	id_Pole,	0,	0,	$43DE
00020706 0C01 370E 0200 4328        	dbug	Map_Flap,	id_FlapDoor,	2,	0,	$4328
0002070E 7901 A132 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
00020716                            	@LZend:
00020716                            
00020716                            @MZ:
00020716 0000                       	dc.w (@MZend-@MZ-2)/8
00020718                            
00020718                            ;		mappings	object		subtype	frame	VRAM setting
00020718 2500 BFA8 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
00020720 2600 C76E 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
00020728 2200 B812 0000 0444        	dbug	Map_Buzz,	id_BuzzBomber,	0,	0,	$444
00020730 3600 F236 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
00020738 4100 FFAA 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
00020740 1300 D58A 0000 0345        	dbug	Map_Fire,	id_LavaMaker,	0,	0,	$345
00020748 4601 0B8E 0000 4000        	dbug	Map_Brick,	id_MarbleBrick,	0,	0,	$4000
00020750 6E01 91CE 0400 047E        	dbug	Map_Elec,	id_Electro,	4,	0,	$47E
00020758 6A01 8B86 0200 43B5        	dbug	Map_Saw,	id_Saws,	2,	0,	$43B5
00020760 3300 E4FA 0000 42B8        	dbug	Map_Push,	id_PushBlock,	0,	0,	$42B8
00020768 1E00 AAA0 0400 2302        	dbug	Map_Hog,	id_BallHog,	4,	0,	$2302
00020770 5101 20B2 0000 42B8        	dbug	Map_Smab,	id_SmashBlock,	0,	0,	$42B8
00020778 5201 2328 0000 02B8        	dbug	Map_MBlock,	id_MovingBlock,	0,	0,	$2B8
00020780 5300 A384 0000 62B8        	dbug	Map_CFlo,	id_CollapseFloor, 0,	0,	$62B8
00020788 5401 145A 0000 8680        	dbug	Map_LTag,	id_LavaTag,	0,	0,	$8680
00020790 5501 251C 0000 04B8        	dbug	Map_Bas,	id_Basaran,	0,	0,	$4B8
00020798 7801 9D9E 0000 24FF        	dbug	Map_Cat,	id_Caterkiller,	0,	0,	$24FF
000207A0 7901 A132 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
000207A8                            	@MZend:
000207A8                            
000207A8                            @SLZ:
000207A8 0000                       	dc.w (@SLZend-@SLZ-2)/8
000207AA                            
000207AA                            ;		mappings	object		subtype	frame	VRAM setting
000207AA 2500 BFA8 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
000207B2 2600 C76E 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
000207BA 5901 3066 0000 4000        	dbug	Map_Elev,	id_Elevator,	0,	0,	$4000
000207C2 5300 A384 0002 44E0        	dbug	Map_CFlo,	id_CollapseFloor, 0,	2,	$44E0
000207CA 1800 9DA0 0000 4000        	dbug	Map_Plat_SLZ,	id_BasicPlatform, 0,	0,	$4000
000207D2 5A01 31A0 0000 4000        	dbug	Map_Circ,	id_CirclingPlatform, 0,	0,	$4000
000207DA 5B01 3358 0000 4000        	dbug	Map_Stair,	id_Staircase,	0,	0,	$4000
000207E2 5D01 392C 0000 43A0        	dbug	Map_Fan,	id_Fan,		0,	0,	$43A0
000207EA 5E01 3CBE 0000 0374        	dbug	Map_Seesaw,	id_Seesaw,	0,	0,	$374
000207F2 4100 FFAA 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
000207FA 1300 D58A 0000 0480        	dbug	Map_Fire,	id_LavaMaker,	0,	0,	$480
00020802 1C00 A4A2 0000 44D8        	dbug	Map_Scen,	id_Scenery,	0,	0,	$44D8
0002080A 5F01 3F3C 0000 0400        	dbug	Map_Bomb,	id_Bomb,	0,	0,	$400
00020812 6001 41F2 0000 2429        	dbug	Map_Orb,	id_Orbinaut,	0,	0,	$2429
0002081A 7901 A132 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
00020822                            	@SLZend:
00020822                            
00020822                            @SYZ:
00020822 0000                       	dc.w (@SYZend-@SYZ-2)/8
00020824                            
00020824                            ;		mappings	object		subtype	frame	VRAM setting
00020824 2500 BFA8 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
0002082C 2600 C76E 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
00020834 3600 F236 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
0002083C 4100 FFAA 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
00020844 4301 0430 0000 04B8        	dbug	Map_Roll,	id_Roller,	0,	0,	$4B8
0002084C 1201 0C0C 0000 0000        	dbug	Map_Light,	id_SpinningLight, 0,	0,	0
00020854 4701 0DB0 0000 0380        	dbug	Map_Bump,	id_Bumper,	0,	0,	$380
0002085C 1F00 B388 0000 0400        	dbug	Map_Crab,	id_Crabmeat,	0,	0,	$400
00020864 2200 B812 0000 0444        	dbug	Map_Buzz,	id_BuzzBomber,	0,	0,	$444
0002086C 5001 1B84 0000 247B        	dbug	Map_Yad,	id_Yadrin,	0,	0,	$247B
00020874 1800 9D8E 0000 4000        	dbug	Map_Plat_SYZ,	id_BasicPlatform, 0,	0,	$4000
0002087C 5601 2A26 0000 4000        	dbug	Map_FBlock,	id_FloatingBlock, 0,	0,	$4000
00020884 3200 E0BA 0000 0513        	dbug	Map_But,	id_Button,	0,	0,	$513
0002088C 7801 9D9E 0000 24FF        	dbug	Map_Cat,	id_Caterkiller,	0,	0,	$24FF
00020894 7901 A132 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
0002089C                            	@SYZend:
0002089C                            
0002089C                            @SBZ:
0002089C 0000                       	dc.w (@SBZend-@SBZ-2)/8
0002089E                            
0002089E                            ;		mappings	object		subtype	frame	VRAM setting
0002089E 2500 BFA8 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
000208A6 2600 C76E 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
000208AE 5F01 3F3C 0000 0400        	dbug	Map_Bomb,	id_Bomb,	0,	0,	$400
000208B6 6001 41F2 0000 0429        	dbug	Map_Orb,	id_Orbinaut,	0,	0,	$429
000208BE 7801 9D9E 0000 22B0        	dbug	Map_Cat,	id_Caterkiller,	0,	0,	$22B0
000208C6 1501 2DC2 0702 4391        	dbug	Map_BBall,	id_SwingingPlatform, 7,	2,	$4391
000208CE 6701 8674 E000 C344        	dbug	Map_Disc,	id_RunningDisc,	$E0,	0,	$C344
000208D6 5201 2328 2802 22C0        	dbug	Map_MBlock,	id_MovingBlock,	$28,	2,	$22C0
000208DE 3200 E0BA 0000 0513        	dbug	Map_But,	id_Button,	0,	0,	$513
000208E6 6901 88CE 0300 4492        	dbug	Map_Trap,	id_SpinPlatform, 3,	0,	$4492
000208EE 6901 8928 8300 04DF        	dbug	Map_Spin,	id_SpinPlatform, $83,	0,	$4DF
000208F6 6A01 8B86 0200 43B5        	dbug	Map_Saw,	id_Saws,	2,	0,	$43B5
000208FE 5300 A384 0000 43F5        	dbug	Map_CFlo,	id_CollapseFloor, 0,	0,	$43F5
00020906 5201 2328 3903 4460        	dbug	Map_MBlock,	id_MovingBlock,	$39,	3,	$4460
0002090E 6B01 8F56 0000 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	0,	0,	$22C0
00020916 2A00 A632 0000 42E8        	dbug	Map_ADoor,	id_AutoDoor,	0,	0,	$42E8
0002091E 6B01 8F56 1301 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	$13,	1,	$22C0
00020926 6A01 8B86 0100 43B5        	dbug	Map_Saw,	id_Saws,	1,	0,	$43B5
0002092E 6B01 8F56 2401 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	$24,	1,	$22C0
00020936 6A01 8B86 0402 43B5        	dbug	Map_Saw,	id_Saws,	4,	2,	$43B5
0002093E 6B01 8F56 3401 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	$34,	1,	$22C0
00020946 6C01 9118 0000 44C3        	dbug	Map_VanP,	id_VanishPlatform, 0,	0,	$44C3
0002094E 6D01 0880 6400 83D9        	dbug	Map_Flame,	id_Flamethrower, $64,	0,	$83D9
00020956 6D01 0880 640B 83D9        	dbug	Map_Flame,	id_Flamethrower, $64,	$B,	$83D9
0002095E 6E01 91CE 0400 047E        	dbug	Map_Elec,	id_Electro,	4,	0,	$47E
00020966 7001 9614 0000 42F0        	dbug	Map_Gird,	id_Girder,	0,	0,	$42F0
0002096E 7101 37D2 1100 8680        	dbug	Map_Invis,	id_Invisibarrier, $11,	0,	$8680
00020976 1E00 AAA0 0400 2302        	dbug	Map_Hog,	id_BallHog,	4,	0,	$2302
0002097E 7901 A132 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
00020986                            	@SBZend:
00020986                            
00020986                            @Ending:
00020986 0000                       	dc.w (@Endingend-@Ending-2)/8
00020988                            
00020988                            ;		mappings	object		subtype	frame	VRAM setting
00020988 2500 BFA8 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
00020990 2500 BFA8 0008 27B2        	dbug	Map_Ring,	id_Rings,	0,	8,	$27B2
00020998                            	@Endingend:
00020998                            
00020998                            	even
00020998                            	even
00020998                            		include	"_inc\LevelHeaders.asm"
00020998                            ; ---------------------------------------------------------------------------
00020998                            ; Level Headers
00020998                            ; ---------------------------------------------------------------------------
00020998                            
00020998                            LevelHeaders:
00020998                            
00020998                            lhead:	macro plc1,lvlgfx,plc2,sixteen,twofivesix,music,pal
00020998                            	dc.l (plc1<<24)+lvlgfx
00020998                            	dc.l (plc2<<24)+sixteen
00020998                            	dc.l twofivesix
00020998                            	dc.b 0, music, pal, pal
00020998                            	endm
00020998                            
00020998                            ; 1st PLC, level gfx (unused), 2nd PLC, 16x16 data, 256x256 data,
00020998                            ; music (unused), palette (unused), palette
00020998                            
00020998                            ;		1st PLC				2nd PLC				256x256 data			palette
00020998                            ;				level gfx*			16x16 data			music*
00020998                            
00020998 0000 0000 0000 0000 0000+  	lhead	plcid_GHZ,	Nem_GHZ_2nd,	plcid_GHZ2,	Blk16_GHZ,	Blk256_GHZ,	bgm_GHZ,	palid_GHZ	; Green Hill
000209A8 0000 0000 0000 0000 0000+  	lhead	plcid_LZ,	Nem_LZ,		plcid_LZ2,	Blk16_LZ,	Blk256_LZ,	bgm_LZ,		palid_LZ	; Labyrinth
000209B8 0000 0000 0000 0000 0000+  	lhead	plcid_MZ,	Nem_MZ,		plcid_MZ2,	Blk16_MZ,	Blk256_MZ,	bgm_MZ,		palid_MZ	; Marble
000209C8 0000 0000 0000 0000 0000+  	lhead	plcid_SLZ,	Nem_SLZ,	plcid_SLZ2,	Blk16_SLZ,	Blk256_SLZ,	bgm_SLZ,	palid_SLZ	; Star Light
000209D8 0000 0000 0000 0000 0000+  	lhead	plcid_SYZ,	Nem_SYZ,	plcid_SYZ2,	Blk16_SYZ,	Blk256_SYZ,	bgm_SYZ,	palid_SYZ	; Spring Yard
000209E8 0000 0000 0000 0000 0000+  	lhead	plcid_SBZ,	Nem_SBZ,	plcid_SBZ2,	Blk16_SBZ,	Blk256_SBZ,	bgm_SBZ,	palid_SBZ1	; Scrap Brain
000209F8 0000 0000 0000 0000 0000+  	lhead	0,		Nem_GHZ_2nd,	0,		Blk16_GHZ,	Blk256_GHZ,	bgm_SBZ,	palid_Ending	; Ending
00020A08                            	even
00020A08                            
00020A08                            ;	* music and level gfx are actually set elsewhere, so these values are useless
00020A08                            ;	* music and level gfx are actually set elsewhere, so these values are useless
00020A08                            		include	"_inc\Pattern Load Cues.asm"
00020A08                            ; ---------------------------------------------------------------------------
00020A08                            ; Pattern load cues
00020A08                            ; ---------------------------------------------------------------------------
00020A08                            ArtLoadCues:
00020A08                            
00020A08 0000                       ptr_PLC_Main:		dc.w PLC_Main-ArtLoadCues
00020A0A 0000                       ptr_PLC_Main2:		dc.w PLC_Main2-ArtLoadCues
00020A0C 0000                       ptr_PLC_Explode:	dc.w PLC_Explode-ArtLoadCues
00020A0E 0000                       ptr_PLC_GameOver:	dc.w PLC_GameOver-ArtLoadCues
00020A10                            PLC_Levels:
00020A10 0000                       ptr_PLC_GHZ:		dc.w PLC_GHZ-ArtLoadCues
00020A12 0000                       ptr_PLC_GHZ2:		dc.w PLC_GHZ2-ArtLoadCues
00020A14 0000                       ptr_PLC_LZ:		dc.w PLC_LZ-ArtLoadCues
00020A16 0000                       ptr_PLC_LZ2:		dc.w PLC_LZ2-ArtLoadCues
00020A18 0000                       ptr_PLC_MZ:		dc.w PLC_MZ-ArtLoadCues
00020A1A 0000                       ptr_PLC_MZ2:		dc.w PLC_MZ2-ArtLoadCues
00020A1C 0000                       ptr_PLC_SLZ:		dc.w PLC_SLZ-ArtLoadCues
00020A1E 0000                       ptr_PLC_SLZ2:		dc.w PLC_SLZ2-ArtLoadCues
00020A20 0000                       ptr_PLC_SYZ:		dc.w PLC_SYZ-ArtLoadCues
00020A22 0000                       ptr_PLC_SYZ2:		dc.w PLC_SYZ2-ArtLoadCues
00020A24 0000                       ptr_PLC_SBZ:		dc.w PLC_SBZ-ArtLoadCues
00020A26 0000                       ptr_PLC_SBZ2:		dc.w PLC_SBZ2-ArtLoadCues
00020A28 0000                       ptr_PLC_TitleCard:	dc.w PLC_TitleCard-ArtLoadCues
00020A2A 0000                       ptr_PLC_Boss:		dc.w PLC_Boss-ArtLoadCues
00020A2C 0000                       ptr_PLC_Signpost:	dc.w PLC_Signpost-ArtLoadCues
00020A2E 0000                       ptr_PLC_Warp:		dc.w PLC_Warp-ArtLoadCues
00020A30 0000                       ptr_PLC_SpecialStage:	dc.w PLC_SpecialStage-ArtLoadCues
00020A32                            PLC_Animals:
00020A32 0000                       ptr_PLC_GHZAnimals:	dc.w PLC_GHZAnimals-ArtLoadCues
00020A34 0000                       ptr_PLC_LZAnimals:	dc.w PLC_LZAnimals-ArtLoadCues
00020A36 0000                       ptr_PLC_MZAnimals:	dc.w PLC_MZAnimals-ArtLoadCues
00020A38 0000                       ptr_PLC_SLZAnimals:	dc.w PLC_SLZAnimals-ArtLoadCues
00020A3A 0000                       ptr_PLC_SYZAnimals:	dc.w PLC_SYZAnimals-ArtLoadCues
00020A3C 0000                       ptr_PLC_SBZAnimals:	dc.w PLC_SBZAnimals-ArtLoadCues
00020A3E 0000                       ptr_PLC_SSResult:	dc.w PLC_SSResult-ArtLoadCues
00020A40 0000                       ptr_PLC_Ending:		dc.w PLC_Ending-ArtLoadCues
00020A42 0000                       ptr_PLC_TryAgain:	dc.w PLC_TryAgain-ArtLoadCues
00020A44 0000                       ptr_PLC_EggmanSBZ2:	dc.w PLC_EggmanSBZ2-ArtLoadCues
00020A46 0000                       ptr_PLC_FZBoss:		dc.w PLC_FZBoss-ArtLoadCues
00020A48 0000                       ptr_PLC_Egg:		dc.w PLC_Egg-ArtLoadCues
00020A4A                            
00020A4A                            plcm:	macro gfx,vram
00020A4A                            	dc.l gfx
00020A4A                            	dc.w vram
00020A4A                            	endm
00020A4A                            
00020A4A                            ; ---------------------------------------------------------------------------
00020A4A                            ; Pattern load cues - standard block 1
00020A4A                            ; ---------------------------------------------------------------------------
00020A4A 0000                       PLC_Main:	dc.w ((PLC_Mainend-PLC_Main-2)/6)-1
00020A4C 0000 0000 D800             		plcm	Nem_Lamp, $D800		; lamppost
00020A52 0000 0000 D940             		plcm	Nem_Hud, $D940		; HUD
00020A58 0000 0000 FA80             		plcm	Nem_Lives, $FA80	; lives	counter
00020A5E 0000 0000 F300             		plcm	Nem_Ring, $F300		; rings
00020A64 0000 0000 AC20             		plcm	Nem_Points, $AC20 	; points from enemy
00020A6A                            	PLC_Mainend:
00020A6A                            ; ---------------------------------------------------------------------------
00020A6A                            ; Pattern load cues - standard block 2
00020A6A                            ; ---------------------------------------------------------------------------
00020A6A 0000                       PLC_Main2:	dc.w ((PLC_Main2end-PLC_Main2-2)/6)-1
00020A6C 0000 0000 D000             		plcm	Nem_Monitors, $D000	; monitors
00020A72                            	PLC_Main2end:
00020A72                            ; ---------------------------------------------------------------------------
00020A72                            ; Pattern load cues - explosion
00020A72                            ; ---------------------------------------------------------------------------
00020A72 0000                       PLC_Explode:	dc.w ((PLC_Explodeend-PLC_Explode-2)/6)-1
00020A74 0000 0000 B400             		plcm	Nem_Explode, $B400	; explosion
00020A7A                            	PLC_Explodeend:
00020A7A                            ; ---------------------------------------------------------------------------
00020A7A                            ; Pattern load cues - game/time	over
00020A7A                            ; ---------------------------------------------------------------------------
00020A7A 0000                       PLC_GameOver:	dc.w ((PLC_GameOverend-PLC_GameOver-2)/6)-1
00020A7C 0000 0000 ABC0             		plcm	Nem_GameOver, $ABC0	; game/time over
00020A82                            	PLC_GameOverend:
00020A82                            ; ---------------------------------------------------------------------------
00020A82                            ; Pattern load cues - Green Hill
00020A82                            ; ---------------------------------------------------------------------------
00020A82 0000                       PLC_GHZ:	dc.w ((PLC_GHZ2-PLC_GHZ-2)/6)-1
00020A84 0000 0000 0000             		plcm	Nem_GHZ_1st, 0		; GHZ main patterns
00020A8A 0000 0000 39A0             		plcm	Nem_GHZ_2nd, $39A0	; GHZ secondary	patterns
00020A90 0000 0000 6B00             		plcm	Nem_Stalk, $6B00	; flower stalk
00020A96 0000 0000 7A00             		plcm	Nem_PplRock, $7A00	; purple rock
00020A9C 0000 0000 8000             		plcm	Nem_Crabmeat, $8000	; crabmeat enemy
00020AA2 0000 0000 8880             		plcm	Nem_Mozzietron, $8880	; mozzietron enemy
00020AA8 0000 0000 8F60             		plcm	Nem_Chopper, $8F60	; chopper enemy
00020AAE 0000 0000 9360             		plcm	Nem_Newtron, $9360	; newtron enemy
00020AB4 0000 0000 9E00             		plcm	Nem_Motobug, $9E00	; motobug enemy
00020ABA 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020AC0 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020AC6 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020ACC                            
00020ACC 0000                       PLC_GHZ2:	dc.w ((PLC_GHZ2end-PLC_GHZ2-2)/6)-1
00020ACE 0000 0000 7000             		plcm	Nem_Swing, $7000	; swinging platform
00020AD4 0000 0000 71C0             		plcm	Nem_Bridge, $71C0	; bridge
00020ADA 0000 0000 7300             		plcm	Nem_SpikePole, $7300	; spiked pole
00020AE0 0000 0000 7540             		plcm	Nem_Ball, $7540		; giant	ball
00020AE6 0000 0000 A1E0             		plcm	Nem_GhzWall1, $A1E0	; breakable wall
00020AEC 0000 0000 6980             		plcm	Nem_GhzWall2, $6980	; normal wall
00020AF2                            	PLC_GHZ2end:
00020AF2                            ; ---------------------------------------------------------------------------
00020AF2                            ; Pattern load cues - Labyrinth
00020AF2                            ; ---------------------------------------------------------------------------
00020AF2 0000                       PLC_LZ:		dc.w ((PLC_LZ2-PLC_LZ-2)/6)-1
00020AF4 0000 0000 0000             		plcm	Nem_LZ,0		; LZ main patterns
00020AFA                            		;plcm	Nem_LzBlock1, $3C00	; block
00020AFA                            		;plcm	Nem_LzBlock2, $3E00	; blocks
00020AFA                            		;plcm	Nem_Splash, $4B20	; waterfalls and splash
00020AFA 0000 0000 6000             		plcm	Nem_Water, $6000	; water	surface
00020B00 0000 0000 6200             		plcm	Nem_LzSpikeBall, $6200	; spiked ball
00020B06 0000 0000 6500             		plcm	Nem_FlapDoor, $6500	; flapping door
00020B0C 0000 0000 6900             		plcm	Nem_Bubbles, $6900	; bubbles and numbers
00020B12 0000 0000 7780             		plcm	Nem_LzBlock3, $7780	; block
00020B18 0000 0000 7880             		plcm	Nem_LzDoor1, $7880	; vertical door
00020B1E 0000 0000 7980             		plcm	Nem_Harpoon, $7980	; harpoon
00020B24 0000 0000 94C0             		plcm	Nem_Burrobot, $94C0	; burrobot enemy
00020B2A                            
00020B2A 0000                       PLC_LZ2:	dc.w ((PLC_LZ2end-PLC_LZ2-2)/6)-1
00020B2C 0000 0000 7BC0             		plcm	Nem_LzPole, $7BC0	; pole that breaks
00020B32 0000 0000 7CC0             		plcm	Nem_LzDoor2, $7CC0	; large	horizontal door
00020B38 0000 0000 7EC0             		plcm	Nem_LzWheel, $7EC0	; wheel
00020B3E 0000 0000 5D20             		plcm	Nem_Gargoyle, $5D20	; gargoyle head
00020B44 0000 0000 89E0             		plcm	Nem_LzPlatfm, $89E0	; rising platform
00020B4A 0000 0000 8CE0             		plcm	Nem_Orbinaut, $8CE0	; orbinaut enemy
00020B50 0000 0000 90C0             		plcm	Nem_Jaws, $90C0		; jaws enemy
00020B56 0000 0000 A1E0             		plcm	Nem_LzSwitch, $A1E0	; switch
00020B5C 0000 0000 A000             		plcm	Nem_Cork, $A000		; cork block
00020B62 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020B68 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020B6E 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020B74                            	PLC_LZ2end:
00020B74                            ; ---------------------------------------------------------------------------
00020B74                            ; Pattern load cues - Marble
00020B74                            ; ---------------------------------------------------------------------------
00020B74 0000                       PLC_MZ:		dc.w ((PLC_MZ2-PLC_MZ-2)/6)-1
00020B76 0000 0000 0000             		plcm	Nem_MZ,0		; MZ main patterns
00020B7C 0000 0000 6040             		plcm	Nem_BallHog, $6040	; ball hog enemy
00020B82 0000 0000 68A0             		plcm	Nem_MzFire, $68A0	; fireballs
00020B88 0000 0000 71C0             		plcm	Nem_MzGlass, $71C0	; green	glassy block
00020B8E 0000 0000 75A0             		plcm	Nem_Cutter, $75A0	; pizza	cutter
00020B94 0000 0000 8000             		plcm	Nem_Bomb, $8000
00020B9A 0000 0000 8880             		plcm	Nem_Buzz, $8880		; buzz bomber enemy
00020BA0 0000 0000 8FC0             		plcm	Nem_Electric, $8FC0	; electric orb
00020BA6 0000 0000 9700             		plcm	Nem_Basaran, $9700	; basaran enemy
00020BAC 0000 0000 9C80             		plcm	Nem_Splats, $9C80	; Splats
00020BB2                            
00020BB2 0000                       PLC_MZ2:	dc.w ((PLC_MZ2end-PLC_MZ2-2)/6)-1
00020BB4 0000 0000 7000             		plcm	Nem_Swing, $7000	; swinging platform
00020BBA 0000 0000 5D40             		plcm	Nem_SbzDoor1, $5D40	; door
00020BC0                            		;plcm	Nem_MzSwitch, $A260	; switch
00020BC0 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020BC6 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020BCC 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020BD2 0000 0000 5700             		plcm	Nem_MzBlock, $5700	; green	stone block
00020BD8 0000 0000 A260             		plcm	Nem_SlzWall, $A260	; breakable wall
00020BDE                            	PLC_MZ2end:
00020BDE                            ; ---------------------------------------------------------------------------
00020BDE                            ; Pattern load cues - Star Light
00020BDE                            ; ---------------------------------------------------------------------------
00020BDE 0000                       PLC_SLZ:	dc.w ((PLC_SLZ2-PLC_SLZ-2)/6)-1
00020BE0 0000 0000 0000             		plcm	Nem_SLZ,0		; SLZ main patterns
00020BE6 0000 0000 8000             		plcm	Nem_Bomb, $8000		; bomb enemy
00020BEC 0000 0000 8520             		plcm	Nem_Orbinaut, $8520	; orbinaut enemy
00020BF2 0000 0000 9C80             		plcm	Nem_Splats, $9C80	; Splats
00020BF8 0000 0000 9000             		plcm	Nem_MzFire, $9000	; fireballs
00020BFE 0000 0000 9C00             		plcm	Nem_SlzBlock, $9C00	; block
00020C04 0000 0000 A260             		plcm	Nem_SlzWall, $A260	; breakable wall
00020C0A 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020C10 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020C16 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020C1C                            
00020C1C 0000                       PLC_SLZ2:	dc.w ((PLC_SLZ2end-PLC_SLZ2-2)/6)-1
00020C1E 0000 0000 6E80             		plcm	Nem_Seesaw, $6E80	; seesaw
00020C24 0000 0000 7400             		plcm	Nem_Fan, $7400		; fan
00020C2A 0000 0000 7980             		plcm	Nem_Pylon, $7980	; foreground pylon
00020C30 0000 0000 7B80             		plcm	Nem_SlzSwing, $7B80	; swinging platform
00020C36 0000 0000 9B00             		plcm	Nem_SlzCannon, $9B00	; fireball launcher
00020C3C 0000 0000 9E00             		plcm	Nem_SlzSpike, $9E00	; spikeball
00020C42                            	PLC_SLZ2end:
00020C42                            ; ---------------------------------------------------------------------------
00020C42                            ; Pattern load cues - Spring Yard
00020C42                            ; ---------------------------------------------------------------------------
00020C42 0000                       PLC_SYZ:	dc.w ((PLC_SYZ2-PLC_SYZ-2)/6)-1
00020C44 0000 0000 0000             		plcm	Nem_SYZ,0		; SYZ main patterns
00020C4A                            		;plcm	Nem_Stomper, $5800	; moving platform and stomper
00020C4A                            		;plcm	Nem_SbzDoor1, $5D40	; door
00020C4A 0000 0000 6900             		plcm	Nem_Bubbles, $6900	; bubbles and numbers
00020C50 0000 0000 8880             		plcm	Nem_Buzz, $8880		; buzz bomber enemy
00020C56 0000 0000 8F60             		plcm	Nem_Yadrin, $8F60	; yadrin enemy
00020C5C 0000 0000 9700             		plcm	Nem_Roller, $9700	; roller enemy
00020C62 0000 0000 7B20             		plcm	Nem_FlamePipe, $7B20	; flaming pipe
00020C68 0000 0000 7EA0             		plcm	Nem_SbzFloor, $7EA0	; collapsing floor
00020C6E                            		;plcm	Nem_SbzBlock, $9860	; vanishing block
00020C6E                            
00020C6E 0000                       PLC_SYZ2:	dc.w ((PLC_SYZ2end-PLC_SYZ2-2)/6)-1
00020C70                            		;plcm	Nem_Cater, $5600	; caterkiller enemy
00020C70 0000 0000 7000             		plcm	Nem_Bumper, $7000	; bumper
00020C76 0000 0000 72C0             		plcm	Nem_SyzSpike1, $72C0	; large	spikeball
00020C7C 0000 0000 7740             		plcm	Nem_SyzSpike2, $7740	; small	spikeball
00020C82                            		;plcm	Nem_TrapDoor, $9240	; trapdoor
00020C82 0000 0000 7F20             		plcm	Nem_SbzFloor, $7F20	; collapsing floor
00020C88                            		;plcm	Nem_SpinPform, $9BE0	; small	spinning platform
00020C88 0000 0000 A1E0             		plcm	Nem_LzSwitch, $A1E0	; switch
00020C8E 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020C94 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020C9A 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020CA0                            	PLC_SYZ2end:
00020CA0                            ; ---------------------------------------------------------------------------
00020CA0                            ; Pattern load cues - Scrap Brain
00020CA0                            ; ---------------------------------------------------------------------------
00020CA0 0000                       PLC_SBZ:	dc.w ((PLC_SBZ2-PLC_SBZ-2)/6)-1
00020CA2 0000 0000 0000             		plcm	Nem_SBZ,0		; SBZ main patterns
00020CA8 0000 0000 4B20             		plcm	Nem_Splash, $4B20	; waterfalls and splash
00020CAE                            		;plcm	Nem_Stomper, $5800	; moving platform and stomper
00020CAE                            		;plcm	Nem_SbzDoor1, $5D00	; door
00020CAE                            		;plcm	Nem_Girder, $5E00	; girder
00020CAE 0000 0000 6880             		plcm	Nem_SbzWheel1, $6880	; spot on large	wheel
00020CB4 0000 0000 6900             		plcm	Nem_Bubbles, $6900	; bubbles and numbers
00020CBA                            		;plcm	Nem_SbzWheel2, $6900	; wheel	that grabs Sonic
00020CBA 0000 0000 7220             		plcm	Nem_SyzSpike1, $7220	; large	spikeball
00020CC0 0000 0000 7B20             		plcm	Nem_FlamePipe, $7B20	; flaming pipe
00020CC6 0000 0000 7EA0             		plcm	Nem_SbzFloor, $7EA0	; collapsing floor
00020CCC 0000 0000 9860             		plcm	Nem_SbzBlock, $9860	; vanishing block
00020CD2                            
00020CD2 0000                       PLC_SBZ2:	dc.w ((PLC_SBZ2end-PLC_SBZ2-2)/6)-1
00020CD4                            		;plcm	Nem_Cater, $5600	; caterkiller enemy
00020CD4 0000 0000 8000             		plcm	Nem_Bomb, $8000		; bomb enemy
00020CDA 0000 0000 8C00             		plcm	Nem_SlideFloor, $8C00	; floor	that slides away
00020CE0                            		;plcm	Nem_SbzDoor2, $8DE0	; horizontal door
00020CE0 0000 0000 8FC0             		plcm	Nem_Electric, $8FC0	; electric orb
00020CE6 0000 0000 9240             		plcm	Nem_TrapDoor, $9240	; trapdoor
00020CEC 0000 0000 7F20             		plcm	Nem_SbzFloor, $7F20	; collapsing floor
00020CF2 0000 0000 9BE0             		plcm	Nem_SpinPform, $9BE0	; small	spinning platform
00020CF8 0000 0000 A1E0             		plcm	Nem_LzSwitch, $A1E0	; switch
00020CFE 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020D04 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020D0A 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020D10                            	PLC_SBZ2end:
00020D10                            ; ---------------------------------------------------------------------------
00020D10                            ; Pattern load cues - title card
00020D10                            ; ---------------------------------------------------------------------------
00020D10 0000                       PLC_TitleCard:	dc.w ((PLC_TitleCardend-PLC_TitleCard-2)/6)-1
00020D12 0000 0000 B000             		plcm	Nem_TitleCard, $B000
00020D18                            	PLC_TitleCardend:
00020D18                            ; ---------------------------------------------------------------------------
00020D18                            ; Pattern load cues - act 3 boss
00020D18                            ; ---------------------------------------------------------------------------
00020D18 0000                       PLC_Boss:	dc.w ((PLC_Bossend-PLC_Boss-2)/6)-1
00020D1A 0000 0000 8000             		plcm	Nem_Eggman, $8000	; Eggman main patterns
00020D20 0000 0000 8D80             		plcm	Nem_Weapons, $8D80	; Eggman's weapons
00020D26 0000 0000 93A0             		plcm	Nem_Prison, $93A0	; prison capsule
00020D2C 0000 0000 A300             		plcm	Nem_Bomb, $A300		; bomb enemy ((gets overwritten)
00020D32 0000 0000 A300             		plcm	Nem_SlzSpike, $A300	; spikeball ((SLZ boss)
00020D38 0000 0000 A540             		plcm	Nem_Exhaust, $A540	; exhaust flame
00020D3E                            	PLC_Bossend:
00020D3E                            ; ---------------------------------------------------------------------------
00020D3E                            ; Pattern load cues - act 1/2 signpost
00020D3E                            ; ---------------------------------------------------------------------------
00020D3E 0000                       PLC_Signpost:	dc.w ((PLC_Signpostend-PLC_Signpost-2)/6)-1
00020D40 0000 0000 D000             		plcm	Nem_SignPost, $D000	; signpost
00020D46 0000 0000 96C0             		plcm	Nem_Bonus, $96C0	; hidden bonus points
00020D4C 0000 0000 8C40             		plcm	Nem_BigFlash, $8C40	; giant	ring flash effect
00020D52                            		;plcm	Nem_SSEmerald, $EE00	; emeralds
00020D52                            	PLC_Signpostend:
00020D52                            ; ---------------------------------------------------------------------------
00020D52                            ; Pattern load cues - beta special stage warp effect
00020D52                            ; ---------------------------------------------------------------------------
00020D52                            PLC_Warp:
00020D52                            	PLC_Warpend:
00020D52                            ; ---------------------------------------------------------------------------
00020D52                            ; Pattern load cues - special stage
00020D52                            ; ---------------------------------------------------------------------------
00020D52 0000                       PLC_SpecialStage:	dc.w ((PLC_SpeStageend-PLC_SpecialStage-2)/6)-1
00020D54 0000 0000 0000             		plcm	Nem_SSBgCloud, 0	; bubble and cloud background
00020D5A 0000 0000 0A20             		plcm	Nem_SSBgFish, $A20	; bird and fish	background
00020D60 0000 0000 2840             		plcm	Nem_SSWalls, $2840	; walls
00020D66 0000 0000 4760             		plcm	Nem_Bumper, $4760	; bumper
00020D6C 0000 0000 4A20             		plcm	Nem_SSGOAL, $4A20	; GOAL block
00020D72 0000 0000 4C60             		plcm	Nem_SSUpDown, $4C60	; UP and DOWN blocks
00020D78 0000 0000 5E00             		plcm	Nem_SSRBlock, $5E00	; R block
00020D7E 0000 0000 6E00             		plcm	Nem_SS1UpBlock, $6E00	; 1UP block
00020D84 0000 0000 7E00             		plcm	Nem_SSEmStars, $7E00	; emerald collection stars
00020D8A 0000 0000 8E00             		plcm	Nem_SSRedWhite, $8E00	; red and white	block
00020D90 0000 0000 9E00             		plcm	Nem_SSGhost, $9E00	; ghost	block
00020D96 0000 0000 AE00             		plcm	Nem_SSWBlock, $AE00	; W block
00020D9C 0000 0000 BE00             		plcm	Nem_SSGlass, $BE00	; glass	block
00020DA2 0000 0000 EE00             		plcm	Nem_SSEmerald, $EE00	; emeralds
00020DA8                            		;plcm	Nem_SSZone1, $F2E0	; ZONE 1 block
00020DA8                            		;plcm	Nem_SSZone2, $F400	; ZONE 2 block
00020DA8                            		;plcm	Nem_SSZone3, $F520	; ZONE 3 block
00020DA8                            	PLC_SpeStageend:
00020DA8                            		;plcm	Nem_SSZone4, $F2E0	; ZONE 4 block
00020DA8                            		;plcm	Nem_SSZone5, $F400	; ZONE 5 block
00020DA8                            		;plcm	Nem_SSZone6, $F520	; ZONE 6 block
00020DA8                            ; ---------------------------------------------------------------------------
00020DA8                            ; Pattern load cues - GHZ animals
00020DA8                            ; ---------------------------------------------------------------------------
00020DA8 0000                       PLC_GHZAnimals:	dc.w ((PLC_GHZAnimalsend-PLC_GHZAnimals-2)/6)-1
00020DAA 0000 0000 B000             		plcm	Nem_Rabbit, $B000	; rabbit
00020DB0 0000 0000 B240             		plcm	Nem_Flicky, $B240	; flicky
00020DB6                            	PLC_GHZAnimalsend:
00020DB6                            ; ---------------------------------------------------------------------------
00020DB6                            ; Pattern load cues - LZ animals
00020DB6                            ; ---------------------------------------------------------------------------
00020DB6 0000                       PLC_LZAnimals:	dc.w ((PLC_LZAnimalsend-PLC_LZAnimals-2)/6)-1
00020DB8 0000 0000 B000             		plcm	Nem_BlackBird, $B000	; blackbird
00020DBE 0000 0000 B240             		plcm	Nem_Seal, $B240		; seal
00020DC4                            	PLC_LZAnimalsend:
00020DC4                            ; ---------------------------------------------------------------------------
00020DC4                            ; Pattern load cues - MZ animals
00020DC4                            ; ---------------------------------------------------------------------------
00020DC4 0000                       PLC_MZAnimals:	dc.w ((PLC_MZAnimalsend-PLC_MZAnimals-2)/6)-1
00020DC6 0000 0000 B000             		plcm	Nem_Squirrel, $B000	; squirrel
00020DCC 0000 0000 B240             		plcm	Nem_Seal, $B240		; seal
00020DD2                            	PLC_MZAnimalsend:
00020DD2                            ; ---------------------------------------------------------------------------
00020DD2                            ; Pattern load cues - SLZ animals
00020DD2                            ; ---------------------------------------------------------------------------
00020DD2 0000                       PLC_SLZAnimals:	dc.w ((PLC_SLZAnimalsend-PLC_SLZAnimals-2)/6)-1
00020DD4 0000 0000 B000             		plcm	Nem_Pig, $B000		; pig
00020DDA 0000 0000 B240             		plcm	Nem_Flicky, $B240	; flicky
00020DE0                            	PLC_SLZAnimalsend:
00020DE0                            ; ---------------------------------------------------------------------------
00020DE0                            ; Pattern load cues - SYZ animals
00020DE0                            ; ---------------------------------------------------------------------------
00020DE0 0000                       PLC_SYZAnimals:	dc.w ((PLC_SYZAnimalsend-PLC_SYZAnimals-2)/6)-1
00020DE2 0000 0000 B000             		plcm	Nem_Pig, $B000		; pig
00020DE8 0000 0000 B240             		plcm	Nem_Chicken, $B240	; chicken
00020DEE                            	PLC_SYZAnimalsend:
00020DEE                            ; ---------------------------------------------------------------------------
00020DEE                            ; Pattern load cues - SBZ animals
00020DEE                            ; ---------------------------------------------------------------------------
00020DEE 0000                       PLC_SBZAnimals:	dc.w ((PLC_SBZAnimalsend-PLC_SBZAnimals-2)/6)-1
00020DF0 0000 0000 B000             		plcm	Nem_Rabbit, $B000		; rabbit
00020DF6 0000 0000 B240             		plcm	Nem_Chicken, $B240	; chicken
00020DFC                            	PLC_SBZAnimalsend:
00020DFC                            ; ---------------------------------------------------------------------------
00020DFC                            ; Pattern load cues - special stage results screen
00020DFC                            ; ---------------------------------------------------------------------------
00020DFC 0000                       PLC_SSResult:dc.w ((PLC_SpeStResultend-PLC_SSResult-2)/6)-1
00020DFE 0000 0000 A820             		plcm	Nem_ResultEm, $A820	; emeralds
00020E04 0000 0000 AA20             		plcm	Nem_MiniSonic, $AA20	; mini Sonic
00020E0A                            	PLC_SpeStResultend:
00020E0A                            ; ---------------------------------------------------------------------------
00020E0A                            ; Pattern load cues - ending sequence
00020E0A                            ; ---------------------------------------------------------------------------
00020E0A 0000                       PLC_Ending:	dc.w ((PLC_Endingend-PLC_Ending-2)/6)-1
00020E0C 0000 0000 0000             		plcm	Nem_GHZ_1st,0		; GHZ main patterns
00020E12 0000 0000 39A0             		plcm	Nem_GHZ_2nd, $39A0	; GHZ secondary	patterns
00020E18 0000 0000 6B00             		plcm	Nem_Stalk, $6B00	; flower stalk
00020E1E                            		;plcm	Nem_EndFlower, $7400	; flowers
00020E1E 0000 0000 78A0             		plcm	Nem_EndEm, $78A0	; emeralds
00020E24 0000 0000 7C20             		plcm	Nem_EndSonic, $7C20	; Sonic
00020E2A 0000 0000 AA60             		plcm	Nem_Rabbit, $AA60	; rabbit
00020E30 0000 0000 ACA0             		plcm	Nem_Chicken, $ACA0	; chicken
00020E36 0000 0000 AE60             		plcm	Nem_BlackBird, $AE60	; blackbird
00020E3C 0000 0000 B0A0             		plcm	Nem_Seal, $B0A0		; seal
00020E42 0000 0000 B260             		plcm	Nem_Pig, $B260		; pig
00020E48 0000 0000 B4A0             		plcm	Nem_Flicky, $B4A0	; flicky
00020E4E 0000 0000 B660             		plcm	Nem_Squirrel, $B660	; squirrel
00020E54 0000 0000 B8A0             		plcm	Nem_EndStH, $B8A0	; "SONIC THE HEDGEHOG"
00020E5A                            	PLC_Endingend:
00020E5A                            ; ---------------------------------------------------------------------------
00020E5A                            ; Pattern load cues - "TRY AGAIN" and "END" screens
00020E5A                            ; ---------------------------------------------------------------------------
00020E5A 0000                       PLC_TryAgain:	dc.w ((PLC_TryAgainend-PLC_TryAgain-2)/6)-1
00020E5C 0000 0000 78A0             		plcm	Nem_EndEm, $78A0	; emeralds
00020E62 0000 0000 7C20             		plcm	Nem_TryAgain, $7C20	; Eggman
00020E68 0000 0000 B400             		plcm	Nem_CreditText, $B400	; credits alphabet
00020E6E                            	PLC_TryAgainend:
00020E6E                            ; ---------------------------------------------------------------------------
00020E6E                            ; Pattern load cues - Eggman on SBZ 2
00020E6E                            ; ---------------------------------------------------------------------------
00020E6E 0000                       PLC_EggmanSBZ2:	dc.w ((PLC_EggmanSBZ2end-PLC_EggmanSBZ2-2)/6)-1
00020E70 0000 0000 A300             		plcm	Nem_SbzBlock, $A300	; block
00020E76 0000 0000 8000             		plcm	Nem_Sbz2Eggman, $8000	; Eggman
00020E7C 0000 0000 9400             		plcm	Nem_LzSwitch, $9400	; switch
00020E82                            	PLC_EggmanSBZ2end:
00020E82                            ; ---------------------------------------------------------------------------
00020E82                            ; Pattern load cues - final boss
00020E82                            ; ---------------------------------------------------------------------------
00020E82 0000                       PLC_FZBoss:	dc.w ((PLC_FZBossend-PLC_FZBoss-2)/6)-1
00020E84 0000 0000 7400             		plcm	Nem_FzEggman, $7400	; Eggman after boss
00020E8A 0000 0000 6000             		plcm	Nem_FzBoss, $6000	; FZ boss
00020E90 0000 0000 8000             		plcm	Nem_Eggman, $8000	; Eggman main patterns
00020E96 0000 0000 8E00             		plcm	Nem_Sbz2Eggman, $8E00	; Eggman without ship
00020E9C 0000 0000 A540             		plcm	Nem_Exhaust, $A540	; exhaust flame
00020EA2                            	PLC_FZBossend:
00020EA2                            ; ---------------------------------------------------------------------------
00020EA2                            ; Pattern load cues - Eggman
00020EA2                            ; ---------------------------------------------------------------------------
00020EA2 0005                       PLC_Egg:	dc.w ((PLC_Bossend-PLC_Boss-2)/6)-1
00020EA4 0000 0000 8000             		plcm	Nem_Eggman, $8000	; Eggman main patterns
00020EAA 0000 0000 8D80             		plcm	Nem_Weapons, $8D80	; Eggman's weapons
00020EB0 0000 0000 93A0             		plcm	Nem_Prison, $93A0	; prison capsule
00020EB6 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020EBC 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020EC2 0000 0000 A540             		plcm	Nem_Exhaust, $A540	; exhaust flame
00020EC8                            	PLC_Eggend:
00020EC8                            		even
00020EC8                            ; ---------------------------------------------------------------------------
00020EC8                            ; Pattern load cue IDs
00020EC8                            ; ---------------------------------------------------------------------------
00020EC8 =00000000                  plcid_Main:		equ (ptr_PLC_Main-ArtLoadCues)/2	; 0
00020EC8 =00000001                  plcid_Main2:		equ (ptr_PLC_Main2-ArtLoadCues)/2	; 1
00020EC8 =00000002                  plcid_Explode:		equ (ptr_PLC_Explode-ArtLoadCues)/2	; 2
00020EC8 =00000003                  plcid_GameOver:		equ (ptr_PLC_GameOver-ArtLoadCues)/2	; 3
00020EC8 =00000004                  plcid_GHZ:		equ (ptr_PLC_GHZ-ArtLoadCues)/2		; 4
00020EC8 =00000005                  plcid_GHZ2:		equ (ptr_PLC_GHZ2-ArtLoadCues)/2	; 5
00020EC8 =00000006                  plcid_LZ:		equ (ptr_PLC_LZ-ArtLoadCues)/2		; 6
00020EC8 =00000007                  plcid_LZ2:		equ (ptr_PLC_LZ2-ArtLoadCues)/2		; 7
00020EC8 =00000008                  plcid_MZ:		equ (ptr_PLC_MZ-ArtLoadCues)/2		; 8
00020EC8 =00000009                  plcid_MZ2:		equ (ptr_PLC_MZ2-ArtLoadCues)/2		; 9
00020EC8 =0000000A                  plcid_SLZ:		equ (ptr_PLC_SLZ-ArtLoadCues)/2		; $A
00020EC8 =0000000B                  plcid_SLZ2:		equ (ptr_PLC_SLZ2-ArtLoadCues)/2	; $B
00020EC8 =0000000C                  plcid_SYZ:		equ (ptr_PLC_SYZ-ArtLoadCues)/2		; $C
00020EC8 =0000000D                  plcid_SYZ2:		equ (ptr_PLC_SYZ2-ArtLoadCues)/2	; $D
00020EC8 =0000000E                  plcid_SBZ:		equ (ptr_PLC_SBZ-ArtLoadCues)/2		; $E
00020EC8 =0000000F                  plcid_SBZ2:		equ (ptr_PLC_SBZ2-ArtLoadCues)/2	; $F
00020EC8 =00000010                  plcid_TitleCard:	equ (ptr_PLC_TitleCard-ArtLoadCues)/2	; $10
00020EC8 =00000011                  plcid_Boss:		equ (ptr_PLC_Boss-ArtLoadCues)/2	; $11
00020EC8 =00000012                  plcid_Signpost:		equ (ptr_PLC_Signpost-ArtLoadCues)/2	; $12
00020EC8 =00000013                  plcid_Warp:		equ (ptr_PLC_Warp-ArtLoadCues)/2	; $13
00020EC8 =00000014                  plcid_SpecialStage:	equ (ptr_PLC_SpecialStage-ArtLoadCues)/2 ; $14
00020EC8 =00000015                  plcid_GHZAnimals:	equ (ptr_PLC_GHZAnimals-ArtLoadCues)/2	; $15
00020EC8 =00000016                  plcid_LZAnimals:	equ (ptr_PLC_LZAnimals-ArtLoadCues)/2	; $16
00020EC8 =00000017                  plcid_MZAnimals:	equ (ptr_PLC_MZAnimals-ArtLoadCues)/2	; $17
00020EC8 =00000018                  plcid_SLZAnimals:	equ (ptr_PLC_SLZAnimals-ArtLoadCues)/2	; $18
00020EC8 =00000019                  plcid_SYZAnimals:	equ (ptr_PLC_SYZAnimals-ArtLoadCues)/2	; $19
00020EC8 =0000001A                  plcid_SBZAnimals:	equ (ptr_PLC_SBZAnimals-ArtLoadCues)/2	; $1A
00020EC8 =0000001B                  plcid_SSResult:		equ (ptr_PLC_SSResult-ArtLoadCues)/2	; $1B
00020EC8 =0000001C                  plcid_Ending:		equ (ptr_PLC_Ending-ArtLoadCues)/2	; $1C
00020EC8 =0000001D                  plcid_TryAgain:		equ (ptr_PLC_TryAgain-ArtLoadCues)/2	; $1D
00020EC8 =0000001E                  plcid_EggmanSBZ2:	equ (ptr_PLC_EggmanSBZ2-ArtLoadCues)/2	; $1E
00020EC8 =0000001F                  plcid_FZBoss:		equ (ptr_PLC_FZBoss-ArtLoadCues)/2	; $1F
00020EC8 =00000020                  plcid_Egg:		equ (ptr_PLC_Egg-ArtLoadCues)/2	; $11
00020EC8 =00000020                  plcid_Egg:		equ (ptr_PLC_Egg-ArtLoadCues)/2	; $11
00020EC8                            
00021000                            			dcb.b	$300,$FF
00021300                            	Nem_SegaLogo:	incbin	"artnem\Sega Logo (JP1).bin" ; large Sega logo
00021770                            			even
00021770                            	Eni_SegaLogo:	incbin	"tilemaps\Sega Logo (JP1).bin" ; large Sega logo (mappings)
0002186C                            			even
0002186C                            Eni_Title:	incbin	"tilemaps\Title Screen.bin" ; title screen foreground (mappings)
0002194C                            		even
0002194C                            Nem_TitleFg:	incbin	"artnem\Title Screen Foreground.bin"
00022DB8                            		even
00022DB8                            Nem_TitleSonic:	incbin	"artnem\Title Screen Sonic.bin"
00024852                            		even
00024852                            Nem_TitleTM:	incbin	"artnem\Title Screen TM.bin"
00024886                            		even
00024886                            Eni_JapNames:	incbin	"tilemaps\Hidden Japanese Credits.bin" ; Japanese credits (mappings)
00024944                            		even
00024944                            Nem_JapNames:	incbin	"artnem\Hidden Japanese Credits.bin"
00024DEC                            		even
00024DEC                            
00024DEC                            Map_Sonic:	include	"_maps\Sonic.asm"
00024DEC                            ; --------------------------------------------------------------------------------
00024DEC                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00024DEC                            ; --------------------------------------------------------------------------------
00024DEC                            
00024DEC                            SME_Lx_Kl:	
00024DEC 0000 0000                  		dc.w SME_Lx_Kl_142-SME_Lx_Kl, SME_Lx_Kl_143-SME_Lx_Kl	
00024DF0 0000 0000                  		dc.w SME_Lx_Kl_158-SME_Lx_Kl, SME_Lx_Kl_186-SME_Lx_Kl	
00024DF4 0000 0000                  		dc.w SME_Lx_Kl_1B9-SME_Lx_Kl, SME_Lx_Kl_1CE-SME_Lx_Kl	
00024DF8 0000 0000                  		dc.w SME_Lx_Kl_1DE-SME_Lx_Kl, SME_Lx_Kl_1EE-SME_Lx_Kl	
00024DFC 0000 0000                  		dc.w SME_Lx_Kl_203-SME_Lx_Kl, SME_Lx_Kl_20E-SME_Lx_Kl	
00024E00 0000 0000                  		dc.w SME_Lx_Kl_21E-SME_Lx_Kl, SME_Lx_Kl_22E-SME_Lx_Kl	
00024E04 0000 0000                  		dc.w SME_Lx_Kl_23E-SME_Lx_Kl, SME_Lx_Kl_253-SME_Lx_Kl	
00024E08 0000 0000                  		dc.w SME_Lx_Kl_263-SME_Lx_Kl, SME_Lx_Kl_287-SME_Lx_Kl	
00024E0C 0000 0000                  		dc.w SME_Lx_Kl_2A1-SME_Lx_Kl, SME_Lx_Kl_2AC-SME_Lx_Kl	
00024E10 0000 0000                  		dc.w SME_Lx_Kl_2BC-SME_Lx_Kl, SME_Lx_Kl_2D1-SME_Lx_Kl	
00024E14 0000 0000                  		dc.w SME_Lx_Kl_2DC-SME_Lx_Kl, SME_Lx_Kl_2EC-SME_Lx_Kl	
00024E18 0000 0000                  		dc.w SME_Lx_Kl_306-SME_Lx_Kl, SME_Lx_Kl_320-SME_Lx_Kl	
00024E1C 0000 0000                  		dc.w SME_Lx_Kl_33F-SME_Lx_Kl, SME_Lx_Kl_354-SME_Lx_Kl	
00024E20 0000 0000                  		dc.w SME_Lx_Kl_364-SME_Lx_Kl, SME_Lx_Kl_37E-SME_Lx_Kl	
00024E24 0000 0000                  		dc.w SME_Lx_Kl_393-SME_Lx_Kl, SME_Lx_Kl_3A3-SME_Lx_Kl	
00024E28 0000 0000                  		dc.w SME_Lx_Kl_3BD-SME_Lx_Kl, SME_Lx_Kl_3D2-SME_Lx_Kl	
00024E2C 0000 0000                  		dc.w SME_Lx_Kl_3DD-SME_Lx_Kl, SME_Lx_Kl_3E8-SME_Lx_Kl	
00024E30 0000 0000                  		dc.w SME_Lx_Kl_402-SME_Lx_Kl, SME_Lx_Kl_417-SME_Lx_Kl	
00024E34 0000 0000                  		dc.w SME_Lx_Kl_422-SME_Lx_Kl, SME_Lx_Kl_432-SME_Lx_Kl	
00024E38 0000 0000                  		dc.w SME_Lx_Kl_442-SME_Lx_Kl, SME_Lx_Kl_461-SME_Lx_Kl	
00024E3C 0000 0000                  		dc.w SME_Lx_Kl_480-SME_Lx_Kl, SME_Lx_Kl_495-SME_Lx_Kl	
00024E40 0000 0000                  		dc.w SME_Lx_Kl_4A5-SME_Lx_Kl, SME_Lx_Kl_4BF-SME_Lx_Kl	
00024E44 0000 0000                  		dc.w SME_Lx_Kl_4D4-SME_Lx_Kl, SME_Lx_Kl_4E4-SME_Lx_Kl	
00024E48 0000 0000                  		dc.w SME_Lx_Kl_4FE-SME_Lx_Kl, SME_Lx_Kl_509-SME_Lx_Kl	
00024E4C 0000 0000                  		dc.w SME_Lx_Kl_514-SME_Lx_Kl, SME_Lx_Kl_51F-SME_Lx_Kl	
00024E50 0000 0000                  		dc.w SME_Lx_Kl_52A-SME_Lx_Kl, SME_Lx_Kl_535-SME_Lx_Kl	
00024E54 0000 0000                  		dc.w SME_Lx_Kl_540-SME_Lx_Kl, SME_Lx_Kl_54B-SME_Lx_Kl	
00024E58 0000 0000                  		dc.w SME_Lx_Kl_556-SME_Lx_Kl, SME_Lx_Kl_56B-SME_Lx_Kl	
00024E5C 0000 0000                  		dc.w SME_Lx_Kl_57B-SME_Lx_Kl, SME_Lx_Kl_58B-SME_Lx_Kl	
00024E60 0000 0000                  		dc.w SME_Lx_Kl_59B-SME_Lx_Kl, SME_Lx_Kl_5B0-SME_Lx_Kl	
00024E64 0000 0000                  		dc.w SME_Lx_Kl_5C0-SME_Lx_Kl, SME_Lx_Kl_5D0-SME_Lx_Kl	
00024E68 0000 0000                  		dc.w SME_Lx_Kl_5E0-SME_Lx_Kl, SME_Lx_Kl_5EB-SME_Lx_Kl	
00024E6C 0000 0000                  		dc.w SME_Lx_Kl_5F6-SME_Lx_Kl, SME_Lx_Kl_601-SME_Lx_Kl	
00024E70 0000 0000                  		dc.w SME_Lx_Kl_60C-SME_Lx_Kl, SME_Lx_Kl_617-SME_Lx_Kl	
00024E74 0000 0000                  		dc.w SME_Lx_Kl_622-SME_Lx_Kl, SME_Lx_Kl_62D-SME_Lx_Kl	
00024E78 0000 0000                  		dc.w SME_Lx_Kl_638-SME_Lx_Kl, SME_Lx_Kl_64D-SME_Lx_Kl	
00024E7C 0000 0000                  		dc.w SME_Lx_Kl_65D-SME_Lx_Kl, SME_Lx_Kl_668-SME_Lx_Kl	
00024E80 0000 0000                  		dc.w SME_Lx_Kl_678-SME_Lx_Kl, SME_Lx_Kl_68D-SME_Lx_Kl	
00024E84 0000 0000                  		dc.w SME_Lx_Kl_69D-SME_Lx_Kl, SME_Lx_Kl_6A8-SME_Lx_Kl	
00024E88 0000 0000                  		dc.w SME_Lx_Kl_6B8-SME_Lx_Kl, SME_Lx_Kl_6C8-SME_Lx_Kl	
00024E8C 0000 0000                  		dc.w SME_Lx_Kl_6D8-SME_Lx_Kl, SME_Lx_Kl_706-SME_Lx_Kl	
00024E90 0000 0000                  		dc.w SME_Lx_Kl_734-SME_Lx_Kl, SME_Lx_Kl_744-SME_Lx_Kl	
00024E94 0000 0000                  		dc.w SME_Lx_Kl_754-SME_Lx_Kl, SME_Lx_Kl_764-SME_Lx_Kl	
00024E98 0000 0000                  		dc.w SME_Lx_Kl_77E-SME_Lx_Kl, SME_Lx_Kl_78E-SME_Lx_Kl	
00024E9C 0000 0000                  		dc.w SME_Lx_Kl_79E-SME_Lx_Kl, SME_Lx_Kl_7B8-SME_Lx_Kl	
00024EA0 0000 0000                  		dc.w SME_Lx_Kl_7D2-SME_Lx_Kl, SME_Lx_Kl_7E7-SME_Lx_Kl	
00024EA4 0000 0000                  		dc.w SME_Lx_Kl_7FC-SME_Lx_Kl, SME_Lx_Kl_811-SME_Lx_Kl	
00024EA8 0000 0000                  		dc.w SME_Lx_Kl_826-SME_Lx_Kl, SME_Lx_Kl_82C-SME_Lx_Kl	
00024EAC 0000 0000                  		dc.w SME_Lx_Kl_832-SME_Lx_Kl, SME_Lx_Kl_838-SME_Lx_Kl	
00024EB0 0000 0000                  		dc.w SME_Lx_Kl_83E-SME_Lx_Kl, SME_Lx_Kl_844-SME_Lx_Kl	
00024EB4 0000 0000                  		dc.w SME_Lx_Kl_84A-SME_Lx_Kl, SME_Lx_Kl_850-SME_Lx_Kl	
00024EB8 0000 0000                  		dc.w SME_Lx_Kl_860-SME_Lx_Kl, SME_Lx_Kl_866-SME_Lx_Kl	
00024EBC 0000 0000                  		dc.w SME_Lx_Kl_871-SME_Lx_Kl, SME_Lx_Kl_877-SME_Lx_Kl	
00024EC0 0000 0000                  		dc.w SME_Lx_Kl_882-SME_Lx_Kl, SME_Lx_Kl_888-SME_Lx_Kl	
00024EC4 0000 0000                  		dc.w SME_Lx_Kl_89D-SME_Lx_Kl, SME_Lx_Kl_8C1-SME_Lx_Kl	
00024EC8 0000 0000                  		dc.w SME_Lx_Kl_8DB-SME_Lx_Kl, SME_Lx_Kl_8EB-SME_Lx_Kl	
00024ECC 0000 0000                  		dc.w SME_Lx_Kl_8F6-SME_Lx_Kl, SME_Lx_Kl_90B-SME_Lx_Kl	
00024ED0 0000 0000                  		dc.w SME_Lx_Kl_920-SME_Lx_Kl, SME_Lx_Kl_935-SME_Lx_Kl	
00024ED4 0000 0000                  		dc.w SME_Lx_Kl_963-SME_Lx_Kl, SME_Lx_Kl_973-SME_Lx_Kl	
00024ED8 0000 0000                  		dc.w SME_Lx_Kl_983-SME_Lx_Kl, SME_Lx_Kl_98E-SME_Lx_Kl	
00024EDC 0000 0000                  		dc.w SME_Lx_Kl_98F-SME_Lx_Kl, SME_Lx_Kl_9B8-SME_Lx_Kl	
00024EE0 0000 0000                  		dc.w SME_Lx_Kl_9DC-SME_Lx_Kl, SME_Lx_Kl_9F1-SME_Lx_Kl	
00024EE4 0000 0000                  		dc.w SME_Lx_Kl_A01-SME_Lx_Kl, SME_Lx_Kl_A11-SME_Lx_Kl	
00024EE8 0000 0000                  		dc.w SME_Lx_Kl_A21-SME_Lx_Kl, SME_Lx_Kl_A2C-SME_Lx_Kl	
00024EEC 0000 0000                  		dc.w SME_Lx_Kl_A3C-SME_Lx_Kl, SME_Lx_Kl_A4C-SME_Lx_Kl	
00024EF0 0000 0000                  		dc.w SME_Lx_Kl_A5C-SME_Lx_Kl, SME_Lx_Kl_A6C-SME_Lx_Kl	
00024EF4 0000 0000                  		dc.w SME_Lx_Kl_A81-SME_Lx_Kl, SME_Lx_Kl_AAA-SME_Lx_Kl	
00024EF8 0000 0000                  		dc.w SME_Lx_Kl_ABF-SME_Lx_Kl, SME_Lx_Kl_AD4-SME_Lx_Kl	
00024EFC 0000 0000                  		dc.w SME_Lx_Kl_AEE-SME_Lx_Kl, SME_Lx_Kl_B08-SME_Lx_Kl	
00024F00 0000 0000                  		dc.w SME_Lx_Kl_B13-SME_Lx_Kl, SME_Lx_Kl_B2D-SME_Lx_Kl	
00024F04 0000 0000                  		dc.w SME_Lx_Kl_B3D-SME_Lx_Kl, SME_Lx_Kl_B57-SME_Lx_Kl	
00024F08 0000 0000                  		dc.w SME_Lx_Kl_B62-SME_Lx_Kl, SME_Lx_Kl_B72-SME_Lx_Kl	
00024F0C 0000 0000                  		dc.w SME_Lx_Kl_B82-SME_Lx_Kl, SME_Lx_Kl_B92-SME_Lx_Kl	
00024F10 0000 0000                  		dc.w SME_Lx_Kl_B9D-SME_Lx_Kl, SME_Lx_Kl_BAD-SME_Lx_Kl	
00024F14 0000 0000                  		dc.w SME_Lx_Kl_BE5-SME_Lx_Kl, SME_Lx_Kl_C04-SME_Lx_Kl	
00024F18 0000 0000                  		dc.w SME_Lx_Kl_C14-SME_Lx_Kl, SME_Lx_Kl_C38-SME_Lx_Kl	
00024F1C 0000 0000                  		dc.w SME_Lx_Kl_C43-SME_Lx_Kl, SME_Lx_Kl_C58-SME_Lx_Kl	
00024F20 0000 0000                  		dc.w SME_Lx_Kl_C68-SME_Lx_Kl, SME_Lx_Kl_C78-SME_Lx_Kl	
00024F24 0000 0000                  		dc.w SME_Lx_Kl_C8D-SME_Lx_Kl, SME_Lx_Kl_C93-SME_Lx_Kl	
00024F28 0000 0000                  		dc.w SME_Lx_Kl_C99-SME_Lx_Kl, SME_Lx_Kl_C9F-SME_Lx_Kl	
00024F2C 0000                       		dc.w SME_Lx_Kl_CA5-SME_Lx_Kl	
00024F2E 00                         SME_Lx_Kl_142:	dc.b 0	
00024F2F 04                         SME_Lx_Kl_143:	dc.b 4	
00024F30 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
00024F35 F40D 0003 F0               		dc.b $F4, $D, 0, 3, $F0	
00024F3A 0408 000B F0               		dc.b 4, 8, 0, $B, $F0	
00024F3F 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8	
00024F44 09                         SME_Lx_Kl_158:	dc.b 9	
00024F45 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
00024F4A 0408 0003 F0               		dc.b 4, 8, 0, 3, $F0	
00024F4F 0C08 0006 F8               		dc.b $C, 8, 0, 6, $F8	
00024F54 F401 0009 F0               		dc.b $F4, 1, 0, 9, $F0	
00024F59 FC00 000B 00               		dc.b $FC, 0, 0, $B, 0	
00024F5E F400 000C 08               		dc.b $F4, 0, 0, $C, 8	
00024F63 FC00 000D F8               		dc.b $FC, 0, 0, $D, $F8	
00024F68 FC00 000E 08               		dc.b $FC, 0, 0, $E, 8	
00024F6D F404 000F F8               		dc.b $F4, 4, 0, $F, $F8	
00024F72 0A                         SME_Lx_Kl_186:	dc.b $A	
00024F73 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
00024F78 0408 0003 F0               		dc.b 4, 8, 0, 3, $F0	
00024F7D 0C08 0006 F8               		dc.b $C, 8, 0, 6, $F8	
00024F82 F401 0009 F0               		dc.b $F4, 1, 0, 9, $F0	
00024F87 FC00 000B 00               		dc.b $FC, 0, 0, $B, 0	
00024F8C F400 000C 08               		dc.b $F4, 0, 0, $C, 8	
00024F91 FC00 000D 08               		dc.b $FC, 0, 0, $D, 8	
00024F96 F400 000E F8               		dc.b $F4, 0, 0, $E, $F8	
00024F9B F400 000F 00               		dc.b $F4, 0, 0, $F, 0	
00024FA0 FC00 0010 F8               		dc.b $FC, 0, 0, $10, $F8	
00024FA5 04                         SME_Lx_Kl_1B9:	dc.b 4	
00024FA6 EC0B 0000 F0               		dc.b $EC, $B, 0, 0, $F0	
00024FAB F400 000C 08               		dc.b $F4, 0, 0, $C, 8	
00024FB0 FC00 100D 08               		dc.b $FC, 0, $10, $D, 8	
00024FB5 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8	
00024FBA 03                         SME_Lx_Kl_1CE:	dc.b 3	
00024FBB EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00024FC0 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
00024FC5 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
00024FCA 03                         SME_Lx_Kl_1DE:	dc.b 3	
00024FCB EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00024FD0 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
00024FD5 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
00024FDA 04                         SME_Lx_Kl_1EE:	dc.b 4	
00024FDB EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00024FE0 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
00024FE5 0C04 000C 00               		dc.b $C, 4, 0, $C, 0	
00024FEA 0C00 000E F8               		dc.b $C, 0, 0, $E, $F8	
00024FEF 02                         SME_Lx_Kl_203:	dc.b 2	
00024FF0 F40B 0000 F0               		dc.b $F4, $B, 0, 0, $F0	
00024FF5 0401 000C 08               		dc.b 4, 1, 0, $C, 8	
00024FFA 03                         SME_Lx_Kl_20E:	dc.b 3	
00024FFB FC06 0000 F0               		dc.b $FC, 6, 0, 0, $F0	
00025000 FC02 0006 00               		dc.b $FC, 2, 0, 6, 0	
00025005 0405 0009 08               		dc.b 4, 5, 0, 9, 8	
0002500A 03                         SME_Lx_Kl_21E:	dc.b 3	
0002500B FC06 0000 F0               		dc.b $FC, 6, 0, 0, $F0	
00025010 FC02 0006 00               		dc.b $FC, 2, 0, 6, 0	
00025015 0405 0009 08               		dc.b 4, 5, 0, 9, 8	
0002501A 03                         SME_Lx_Kl_22E:	dc.b 3	
0002501B F40B 0000 F0               		dc.b $F4, $B, 0, 0, $F0	
00025020 EC08 000C F0               		dc.b $EC, 8, 0, $C, $F0	
00025025 FC02 000F 08               		dc.b $FC, 2, 0, $F, 8	
0002502A 04                         SME_Lx_Kl_23E:	dc.b 4	
0002502B 0408 0000 F0               		dc.b 4, 8, 0, 0, $F0	
00025030 0C08 0003 F8               		dc.b $C, 8, 0, 3, $F8	
00025035 EC0A 0006 F0               		dc.b $EC, $A, 0, 6, $F0	
0002503A F400 000F 08               		dc.b $F4, 0, 0, $F, 8	
0002503F 03                         SME_Lx_Kl_253:	dc.b 3	
00025040 EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0	
00025045 0408 0009 F0               		dc.b 4, 8, 0, 9, $F0	
0002504A 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
0002504F 07                         SME_Lx_Kl_263:	dc.b 7	
00025050 FB09 0000 ED               		dc.b $FB, 9, 0, 0, $ED	
00025055 FB06 0006 05               		dc.b $FB, 6, 0, 6, 5	
0002505A 0B04 000C ED               		dc.b $B, 4, 0, $C, $ED	
0002505F F300 000E F5               		dc.b $F3, 0, 0, $E, $F5	
00025064 EB05 000F FD               		dc.b $EB, 5, 0, $F, $FD	
00025069 EB00 0013 F5               		dc.b $EB, 0, 0, $13, $F5	
0002506E F300 0014 ED               		dc.b $F3, 0, 0, $14, $ED	
00025073 05                         SME_Lx_Kl_287:	dc.b 5	
00025074 FC0E 0000 F5               		dc.b $FC, $E, 0, 0, $F5	
00025079 F400 000C F5               		dc.b $F4, 0, 0, $C, $F5	
0002507E EC05 000D FD               		dc.b $EC, 5, 0, $D, $FD	
00025083 EC00 0011 F5               		dc.b $EC, 0, 0, $11, $F5	
00025088 F400 0012 ED               		dc.b $F4, 0, 0, $12, $ED	
0002508D 02                         SME_Lx_Kl_2A1:	dc.b 2	
0002508E FD0A 0000 F5               		dc.b $FD, $A, 0, 0, $F5	
00025093 ED09 0009 F5               		dc.b $ED, 9, 0, 9, $F5	
00025098 03                         SME_Lx_Kl_2AC:	dc.b 3	
00025099 F30F 0000 F0               		dc.b $F3, $F, 0, 0, $F0	
0002509E EB0C 0010 F0               		dc.b $EB, $C, 0, $10, $F0	
000250A3 0500 0014 10               		dc.b 5, 0, 0, $14, $10	
000250A8 04                         SME_Lx_Kl_2BC:	dc.b 4	
000250A9 EB09 0000 F5               		dc.b $EB, 9, 0, 0, $F5	
000250AE FB09 0006 ED               		dc.b $FB, 9, 0, 6, $ED	
000250B3 FB06 000C 05               		dc.b $FB, 6, 0, $C, 5	
000250B8 0B04 0012 ED               		dc.b $B, 4, 0, $12, $ED	
000250BD 02                         SME_Lx_Kl_2D1:	dc.b 2	
000250BE EC09 0000 F6               		dc.b $EC, 9, 0, 0, $F6	
000250C3 FC0E 0006 EE               		dc.b $FC, $E, 0, 6, $EE	
000250C8 03                         SME_Lx_Kl_2DC:	dc.b 3	
000250C9 ED09 0000 F6               		dc.b $ED, 9, 0, 0, $F6	
000250CE FD06 0006 F6               		dc.b $FD, 6, 0, 6, $F6	
000250D3 FD00 000C 06               		dc.b $FD, 0, 0, $C, 6	
000250D8 05                         SME_Lx_Kl_2EC:	dc.b 5	
000250D9 FD0C 0000 F6               		dc.b $FD, $C, 0, 0, $F6	
000250DE 0509 0004 F6               		dc.b 5, 9, 0, 4, $F6	
000250E3 F500 000A EE               		dc.b $F5, 0, 0, $A, $EE	
000250E8 ED01 000B F6               		dc.b $ED, 1, 0, $B, $F6	
000250ED ED05 000D FE               		dc.b $ED, 5, 0, $D, $FE	
000250F2 05                         SME_Lx_Kl_306:	dc.b 5	
000250F3 EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
000250F8 EC06 0006 04               		dc.b $EC, 6, 0, 6, 4	
000250FD FC08 000C EC               		dc.b $FC, 8, 0, $C, $EC	
00025102 0409 000F F4               		dc.b 4, 9, 0, $F, $F4	
00025107 1400 0015 FC               		dc.b $14, 0, 0, $15, $FC	
0002510C 06                         SME_Lx_Kl_320:	dc.b 6	
0002510D ED09 0000 ED               		dc.b $ED, 9, 0, 0, $ED	
00025112 ED01 0006 05               		dc.b $ED, 1, 0, 6, 5	
00025117 FD0C 0008 ED               		dc.b $FD, $C, 0, 8, $ED	
0002511C 0509 000C F5               		dc.b 5, 9, 0, $C, $F5	
00025121 FD05 0012 0D               		dc.b $FD, 5, 0, $12, $D	
00025126 F500 0016 15               		dc.b $F5, 0, 0, $16, $15	
0002512B 04                         SME_Lx_Kl_33F:	dc.b 4	
0002512C EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
00025131 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
00025136 FE0D 0008 F6               		dc.b $FE, $D, 0, 8, $F6	
0002513B 0E08 0010 FE               		dc.b $E, 8, 0, $10, $FE	
00025140 03                         SME_Lx_Kl_354:	dc.b 3	
00025141 ED0F 0000 EF               		dc.b $ED, $F, 0, 0, $EF	
00025146 ED03 0010 0F               		dc.b $ED, 3, 0, $10, $F	
0002514B 0D0C 0014 F7               		dc.b $D, $C, 0, $14, $F7	
00025150 05                         SME_Lx_Kl_364:	dc.b 5	
00025151 EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
00025156 EC05 0006 04               		dc.b $EC, 5, 0, 6, 4	
0002515B FC0D 000A F4               		dc.b $FC, $D, 0, $A, $F4	
00025160 0C08 0012 F4               		dc.b $C, 8, 0, $12, $F4	
00025165 1404 0015 FC               		dc.b $14, 4, 0, $15, $FC	
0002516A 04                         SME_Lx_Kl_37E:	dc.b 4	
0002516B EC09 0000 ED               		dc.b $EC, 9, 0, 0, $ED	
00025170 EC01 0006 05               		dc.b $EC, 1, 0, 6, 5	
00025175 FC0D 0008 F5               		dc.b $FC, $D, 0, 8, $F5	
0002517A 0C08 0010 FD               		dc.b $C, 8, 0, $10, $FD	
0002517F 03                         SME_Lx_Kl_393:	dc.b 3	
00025180 ED0F 0000 ED               		dc.b $ED, $F, 0, 0, $ED	
00025185 ED03 0010 0D               		dc.b $ED, 3, 0, $10, $D	
0002518A 0D0C 0014 F5               		dc.b $D, $C, 0, $14, $F5	
0002518F 05                         SME_Lx_Kl_3A3:	dc.b 5	
00025190 ED09 0000 EE               		dc.b $ED, 9, 0, 0, $EE	
00025195 ED01 0006 06               		dc.b $ED, 1, 0, 6, 6	
0002519A FD00 0008 EE               		dc.b $FD, 0, 0, 8, $EE	
0002519F FD0D 0009 F6               		dc.b $FD, $D, 0, 9, $F6	
000251A4 0D08 0011 FE               		dc.b $D, 8, 0, $11, $FE	
000251A9 04                         SME_Lx_Kl_3BD:	dc.b 4	
000251AA F307 0000 ED               		dc.b $F3, 7, 0, 0, $ED	
000251AF EB09 0008 FD               		dc.b $EB, 9, 0, 8, $FD	
000251B4 FB04 000E FD               		dc.b $FB, 4, 0, $E, $FD	
000251B9 0309 0010 FD               		dc.b 3, 9, 0, $10, $FD	
000251BE 02                         SME_Lx_Kl_3D2:	dc.b 2	
000251BF F407 0000 ED               		dc.b $F4, 7, 0, 0, $ED	
000251C4 EC0B 0008 FD               		dc.b $EC, $B, 0, 8, $FD	
000251C9 02                         SME_Lx_Kl_3DD:	dc.b 2	
000251CA F40A 0000 FD               		dc.b $F4, $A, 0, 0, $FD	
000251CF F406 0009 ED               		dc.b $F4, 6, 0, 9, $ED	
000251D4 05                         SME_Lx_Kl_3E8:	dc.b 5	
000251D5 E900 0000 04               		dc.b $E9, 0, 0, 0, 4	
000251DA F10C 0001 F4               		dc.b $F1, $C, 0, 1, $F4	
000251DF F100 0005 EC               		dc.b $F1, 0, 0, 5, $EC	
000251E4 F90E 0006 EC               		dc.b $F9, $E, 0, 6, $EC	
000251E9 F902 0012 0C               		dc.b $F9, 2, 0, $12, $C	
000251EE 04                         SME_Lx_Kl_402:	dc.b 4	
000251EF F306 0000 EC               		dc.b $F3, 6, 0, 0, $EC	
000251F4 EB09 0006 FC               		dc.b $EB, 9, 0, 6, $FC	
000251F9 FB04 000C FC               		dc.b $FB, 4, 0, $C, $FC	
000251FE 0309 000E FC               		dc.b 3, 9, 0, $E, $FC	
00025203 02                         SME_Lx_Kl_417:	dc.b 2	
00025204 F306 0000 ED               		dc.b $F3, 6, 0, 0, $ED	
00025209 F30B 0006 FD               		dc.b $F3, $B, 0, 6, $FD	
0002520E 03                         SME_Lx_Kl_422:	dc.b 3	
0002520F F408 0000 ED               		dc.b $F4, 8, 0, 0, $ED	
00025214 FC0D 0003 ED               		dc.b $FC, $D, 0, 3, $ED	
00025219 FC01 000B 0D               		dc.b $FC, 1, 0, $B, $D	
0002521E 03                         SME_Lx_Kl_432:	dc.b 3	
0002521F F407 0000 ED               		dc.b $F4, 7, 0, 0, $ED	
00025224 EC00 0008 FD               		dc.b $EC, 0, 0, 8, $FD	
00025229 F40A 0009 FD               		dc.b $F4, $A, 0, 9, $FD	
0002522E 06                         SME_Lx_Kl_442:	dc.b 6	
0002522F FC06 0000 EE               		dc.b $FC, 6, 0, 0, $EE	
00025234 EC04 0006 F6               		dc.b $EC, 4, 0, 6, $F6	
00025239 F404 0008 EE               		dc.b $F4, 4, 0, 8, $EE	
0002523E F40A 000A FE               		dc.b $F4, $A, 0, $A, $FE	
00025243 0C00 0013 FE               		dc.b $C, 0, 0, $13, $FE	
00025248 FC00 0014 16               		dc.b $FC, 0, 0, $14, $16	
0002524D 06                         SME_Lx_Kl_461:	dc.b 6	
0002524E FC06 0000 EF               		dc.b $FC, 6, 0, 0, $EF	
00025253 E408 0006 F7               		dc.b $E4, 8, 0, 6, $F7	
00025258 EC04 0009 FF               		dc.b $EC, 4, 0, 9, $FF	
0002525D F404 000B EF               		dc.b $F4, 4, 0, $B, $EF	
00025262 F40A 000D FF               		dc.b $F4, $A, 0, $D, $FF	
00025267 0C00 0016 FF               		dc.b $C, 0, 0, $16, $FF	
0002526C 04                         SME_Lx_Kl_480:	dc.b 4	
0002526D FB06 0000 EF               		dc.b $FB, 6, 0, 0, $EF	
00025272 F304 0006 EF               		dc.b $F3, 4, 0, 6, $EF	
00025277 EB0A 0008 FF               		dc.b $EB, $A, 0, 8, $FF	
0002527C 0304 0011 FF               		dc.b 3, 4, 0, $11, $FF	
00025281 03                         SME_Lx_Kl_495:	dc.b 3	
00025282 E90F 0000 F5               		dc.b $E9, $F, 0, 0, $F5	
00025287 F102 0010 ED               		dc.b $F1, 2, 0, $10, $ED	
0002528C 0908 0013 ED               		dc.b 9, 8, 0, $13, $ED	
00025291 05                         SME_Lx_Kl_4A5:	dc.b 5	
00025292 FC06 0000 EE               		dc.b $FC, 6, 0, 0, $EE	
00025297 EC08 0006 F6               		dc.b $EC, 8, 0, 6, $F6	
0002529C F404 0009 EE               		dc.b $F4, 4, 0, 9, $EE	
000252A1 F40D 000B FE               		dc.b $F4, $D, 0, $B, $FE	
000252A6 0408 0013 FE               		dc.b 4, 8, 0, $13, $FE	
000252AB 04                         SME_Lx_Kl_4BF:	dc.b 4	
000252AC FC06 0000 EF               		dc.b $FC, 6, 0, 0, $EF	
000252B1 F404 0006 EF               		dc.b $F4, 4, 0, 6, $EF	
000252B6 EC0A 0008 FF               		dc.b $EC, $A, 0, 8, $FF	
000252BB 0404 0011 FF               		dc.b 4, 4, 0, $11, $FF	
000252C0 03                         SME_Lx_Kl_4D4:	dc.b 3	
000252C1 EB0F 0000 F0               		dc.b $EB, $F, 0, 0, $F0	
000252C6 0B08 0010 F0               		dc.b $B, 8, 0, $10, $F0	
000252CB EB01 0013 0F               		dc.b $EB, 1, 0, $13, $F	
000252D0 05                         SME_Lx_Kl_4E4:	dc.b 5	
000252D1 FB06 0000 EF               		dc.b $FB, 6, 0, 0, $EF	
000252D6 EB0A 0006 FF               		dc.b $EB, $A, 0, 6, $FF	
000252DB F304 000F EF               		dc.b $F3, 4, 0, $F, $EF	
000252E0 0304 0011 FF               		dc.b 3, 4, 0, $11, $FF	
000252E5 0B00 0013 FF               		dc.b $B, 0, 0, $13, $FF	
000252EA 02                         SME_Lx_Kl_4FE:	dc.b 2	
000252EB EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
000252F0 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
000252F5 02                         SME_Lx_Kl_509:	dc.b 2	
000252F6 FE0E 0000 EC               		dc.b $FE, $E, 0, 0, $EC	
000252FB EE09 000C F4               		dc.b $EE, 9, 0, $C, $F4	
00025300 02                         SME_Lx_Kl_514:	dc.b 2	
00025301 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025306 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
0002530B 02                         SME_Lx_Kl_51F:	dc.b 2	
0002530C EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025311 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00025316 02                         SME_Lx_Kl_52A:	dc.b 2	
00025317 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
0002531C FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00025321 02                         SME_Lx_Kl_535:	dc.b 2	
00025322 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025327 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
0002532C 02                         SME_Lx_Kl_540:	dc.b 2	
0002532D EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025332 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00025337 02                         SME_Lx_Kl_54B:	dc.b 2	
00025338 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
0002533D FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00025342 04                         SME_Lx_Kl_556:	dc.b 4	
00025343 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
00025348 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
0002534D FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
00025352 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
00025357 03                         SME_Lx_Kl_56B:	dc.b 3	
00025358 F60F 0000 F6               		dc.b $F6, $F, 0, 0, $F6	
0002535D EE02 0010 EE               		dc.b $EE, 2, 0, $10, $EE	
00025362 EE08 0013 F6               		dc.b $EE, 8, 0, $13, $F6	
00025367 03                         SME_Lx_Kl_57B:	dc.b 3	
00025368 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
0002536D EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
00025372 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
00025377 03                         SME_Lx_Kl_58B:	dc.b 3	
00025378 FE0E 0000 F6               		dc.b $FE, $E, 0, 0, $F6	
0002537D EE0D 000C EE               		dc.b $EE, $D, 0, $C, $EE	
00025382 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
00025387 04                         SME_Lx_Kl_59B:	dc.b 4	
00025388 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
0002538D EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
00025392 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
00025397 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
0002539C 03                         SME_Lx_Kl_5B0:	dc.b 3	
0002539D FE0E 0000 F6               		dc.b $FE, $E, 0, 0, $F6	
000253A2 EE0D 000C EE               		dc.b $EE, $D, 0, $C, $EE	
000253A7 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000253AC 03                         SME_Lx_Kl_5C0:	dc.b 3	
000253AD EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
000253B2 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
000253B7 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
000253BC 03                         SME_Lx_Kl_5D0:	dc.b 3	
000253BD EE0D 0000 EE               		dc.b $EE, $D, 0, 0, $EE	
000253C2 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
000253C7 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000253CC 02                         SME_Lx_Kl_5E0:	dc.b 2	
000253CD F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
000253D2 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
000253D7 02                         SME_Lx_Kl_5EB:	dc.b 2	
000253D8 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
000253DD F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
000253E2 02                         SME_Lx_Kl_5F6:	dc.b 2	
000253E3 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
000253E8 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
000253ED 02                         SME_Lx_Kl_601:	dc.b 2	
000253EE F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
000253F3 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
000253F8 02                         SME_Lx_Kl_60C:	dc.b 2	
000253F9 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
000253FE F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025403 02                         SME_Lx_Kl_617:	dc.b 2	
00025404 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00025409 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
0002540E 02                         SME_Lx_Kl_622:	dc.b 2	
0002540F F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00025414 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025419 02                         SME_Lx_Kl_62D:	dc.b 2	
0002541A F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
0002541F F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025424 04                         SME_Lx_Kl_638:	dc.b 4	
00025425 FA06 0000 EE               		dc.b $FA, 6, 0, 0, $EE	
0002542A F204 0006 EE               		dc.b $F2, 4, 0, 6, $EE	
0002542F EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00025434 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE	
00025439 03                         SME_Lx_Kl_64D:	dc.b 3	
0002543A EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
0002543F 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
00025444 F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
00025449 02                         SME_Lx_Kl_65D:	dc.b 2	
0002544A F207 0000 EE               		dc.b $F2, 7, 0, 0, $EE	
0002544F EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00025454 03                         SME_Lx_Kl_668:	dc.b 3	
00025455 EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
0002545A 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
0002545F F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
00025464 04                         SME_Lx_Kl_678:	dc.b 4	
00025465 FA06 0000 EE               		dc.b $FA, 6, 0, 0, $EE	
0002546A F204 0006 EE               		dc.b $F2, 4, 0, 6, $EE	
0002546F EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00025474 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE	
00025479 03                         SME_Lx_Kl_68D:	dc.b 3	
0002547A EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
0002547F 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
00025484 F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
00025489 02                         SME_Lx_Kl_69D:	dc.b 2	
0002548A F207 0000 EE               		dc.b $F2, 7, 0, 0, $EE	
0002548F EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00025494 03                         SME_Lx_Kl_6A8:	dc.b 3	
00025495 EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
0002549A 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
0002549F F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
000254A4 03                         SME_Lx_Kl_6B8:	dc.b 3	
000254A5 F00B 0000 FB               		dc.b $F0, $B, 0, 0, $FB	
000254AA 1008 000C FB               		dc.b $10, 8, 0, $C, $FB	
000254AF F806 000F EB               		dc.b $F8, 6, 0, $F, $EB	
000254B4 03                         SME_Lx_Kl_6C8:	dc.b 3	
000254B5 F00B 0000 FB               		dc.b $F0, $B, 0, 0, $FB	
000254BA 1008 000C FB               		dc.b $10, 8, 0, $C, $FB	
000254BF F806 000F EB               		dc.b $F8, 6, 0, $F, $EB	
000254C4 09                         SME_Lx_Kl_6D8:	dc.b 9	
000254C5 1008 0000 FB               		dc.b $10, 8, 0, 0, $FB	
000254CA F806 0003 EB               		dc.b $F8, 6, 0, 3, $EB	
000254CF 1000 0009 F3               		dc.b $10, 0, 0, 9, $F3	
000254D4 0001 000A FB               		dc.b 0, 1, 0, $A, $FB	
000254D9 0001 000C 03               		dc.b 0, 1, 0, $C, 3	
000254DE 0001 000E 0B               		dc.b 0, 1, 0, $E, $B	
000254E3 F001 0010 FB               		dc.b $F0, 1, 0, $10, $FB	
000254E8 F001 0012 03               		dc.b $F0, 1, 0, $12, 3	
000254ED F001 0014 0B               		dc.b $F0, 1, 0, $14, $B	
000254F2 09                         SME_Lx_Kl_706:	dc.b 9	
000254F3 1008 0000 FB               		dc.b $10, 8, 0, 0, $FB	
000254F8 F806 0003 EB               		dc.b $F8, 6, 0, 3, $EB	
000254FD 1000 0009 F0               		dc.b $10, 0, 0, 9, $F0	
00025502 0001 000A FB               		dc.b 0, 1, 0, $A, $FB	
00025507 0001 000C 03               		dc.b 0, 1, 0, $C, 3	
0002550C 0001 000E 0B               		dc.b 0, 1, 0, $E, $B	
00025511 F001 0010 FB               		dc.b $F0, 1, 0, $10, $FB	
00025516 F001 0012 03               		dc.b $F0, 1, 0, $12, 3	
0002551B F001 0014 0B               		dc.b $F0, 1, 0, $14, $B	
00025520 03                         SME_Lx_Kl_734:	dc.b 3	
00025521 F20F 0000 F5               		dc.b $F2, $F, 0, 0, $F5	
00025526 0201 0010 ED               		dc.b 2, 1, 0, $10, $ED	
0002552B EA0C 0012 F5               		dc.b $EA, $C, 0, $12, $F5	
00025530 03                         SME_Lx_Kl_744:	dc.b 3	
00025531 F40B 0000 EF               		dc.b $F4, $B, 0, 0, $EF	
00025536 EC07 000C 07               		dc.b $EC, 7, 0, $C, 7	
0002553B EC04 0014 F7               		dc.b $EC, 4, 0, $14, $F7	
00025540 03                         SME_Lx_Kl_754:	dc.b 3	
00025541 F30F 0000 F4               		dc.b $F3, $F, 0, 0, $F4	
00025546 EB0C 0010 F4               		dc.b $EB, $C, 0, $10, $F4	
0002554B 0300 0014 EC               		dc.b 3, 0, 0, $14, $EC	
00025550 05                         SME_Lx_Kl_764:	dc.b 5	
00025551 F10E 0000 F7               		dc.b $F1, $E, 0, 0, $F7	
00025556 090C 000C EF               		dc.b 9, $C, 0, $C, $EF	
0002555B F901 0010 EF               		dc.b $F9, 1, 0, $10, $EF	
00025560 1104 0012 F7               		dc.b $11, 4, 0, $12, $F7	
00025565 E908 0014 F7               		dc.b $E9, 8, 0, $14, $F7	
0002556A 03                         SME_Lx_Kl_77E:	dc.b 3	
0002556B ED0E 0000 EE               		dc.b $ED, $E, 0, 0, $EE	
00025570 ED02 000C 0E               		dc.b $ED, 2, 0, $C, $E	
00025575 0509 000F F6               		dc.b 5, 9, 0, $F, $F6	
0002557A 03                         SME_Lx_Kl_78E:	dc.b 3	
0002557B ED0E 0000 EE               		dc.b $ED, $E, 0, 0, $EE	
00025580 ED02 000C 0E               		dc.b $ED, 2, 0, $C, $E	
00025585 0509 000F F6               		dc.b 5, 9, 0, $F, $F6	
0002558A 05                         SME_Lx_Kl_79E:	dc.b 5	
0002558B 0509 0000 F6               		dc.b 5, 9, 0, 0, $F6	
00025590 ED02 0006 0E               		dc.b $ED, 2, 0, 6, $E	
00025595 0500 0009 0E               		dc.b 5, 0, 0, 9, $E	
0002559A ED06 000A FE               		dc.b $ED, 6, 0, $A, $FE	
0002559F ED06 0010 EE               		dc.b $ED, 6, 0, $10, $EE	
000255A4 05                         SME_Lx_Kl_7B8:	dc.b 5	
000255A5 ED02 0000 0E               		dc.b $ED, 2, 0, 0, $E	
000255AA 0509 0003 F6               		dc.b 5, 9, 0, 3, $F6	
000255AF 0800 0009 0E               		dc.b 8, 0, 0, 9, $E	
000255B4 ED06 000A FE               		dc.b $ED, 6, 0, $A, $FE	
000255B9 ED06 0010 EE               		dc.b $ED, 6, 0, $10, $EE	
000255BE 04                         SME_Lx_Kl_7D2:	dc.b 4	
000255BF F00E 0000 E9               		dc.b $F0, $E, 0, 0, $E9	
000255C4 0808 000C F9               		dc.b 8, 8, 0, $C, $F9	
000255C9 E808 000F F1               		dc.b $E8, 8, 0, $F, $F1	
000255CE F002 0012 09               		dc.b $F0, 2, 0, $12, 9	
000255D3 04                         SME_Lx_Kl_7E7:	dc.b 4	
000255D4 E60B 0000 F3               		dc.b $E6, $B, 0, 0, $F3	
000255D9 0608 000C F3               		dc.b 6, 8, 0, $C, $F3	
000255DE F602 000F 0B               		dc.b $F6, 2, 0, $F, $B	
000255E3 EE02 0012 EB               		dc.b $EE, 2, 0, $12, $EB	
000255E8 04                         SME_Lx_Kl_7FC:	dc.b 4	
000255E9 EA0F 0000 EA               		dc.b $EA, $F, 0, 0, $EA	
000255EE F202 0010 0A               		dc.b $F2, 2, 0, $10, $A	
000255F3 0A00 0013 02               		dc.b $A, 0, 0, $13, 2	
000255F8 0A00 0014 0A               		dc.b $A, 0, 0, $14, $A	
000255FD 04                         SME_Lx_Kl_811:	dc.b 4	
000255FE E80F 0000 ED               		dc.b $E8, $F, 0, 0, $ED	
00025603 0808 0010 F5               		dc.b 8, 8, 0, $10, $F5	
00025608 F801 0013 0D               		dc.b $F8, 1, 0, $13, $D	
0002560D F001 0015 E5               		dc.b $F0, 1, 0, $15, $E5	
00025612 01                         SME_Lx_Kl_826:	dc.b 1	
00025613 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025618 01                         SME_Lx_Kl_82C:	dc.b 1	
00025619 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
0002561E 01                         SME_Lx_Kl_832:	dc.b 1	
0002561F F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025624 01                         SME_Lx_Kl_838:	dc.b 1	
00025625 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
0002562A 01                         SME_Lx_Kl_83E:	dc.b 1	
0002562B F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025630 01                         SME_Lx_Kl_844:	dc.b 1	
00025631 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025636 01                         SME_Lx_Kl_84A:	dc.b 1	
00025637 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
0002563C 03                         SME_Lx_Kl_850:	dc.b 3	
0002563D F00A 0000 F0               		dc.b $F0, $A, 0, 0, $F0	
00025642 080C 0009 F0               		dc.b 8, $C, 0, 9, $F0	
00025647 F002 000D 08               		dc.b $F0, 2, 0, $D, 8	
0002564C 01                         SME_Lx_Kl_860:	dc.b 1	
0002564D F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025652 02                         SME_Lx_Kl_866:	dc.b 2	
00025653 F40E 0000 EC               		dc.b $F4, $E, 0, 0, $EC	
00025658 F402 000C 0C               		dc.b $F4, 2, 0, $C, $C	
0002565D 01                         SME_Lx_Kl_871:	dc.b 1	
0002565E F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025663 02                         SME_Lx_Kl_877:	dc.b 2	
00025664 EC0B 0000 F4               		dc.b $EC, $B, 0, 0, $F4	
00025669 0C08 000C F4               		dc.b $C, 8, 0, $C, $F4	
0002566E 01                         SME_Lx_Kl_882:	dc.b 1	
0002566F F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025674 04                         SME_Lx_Kl_888:	dc.b 4	
00025675 ED09 0000 F0               		dc.b $ED, 9, 0, 0, $F0	
0002567A FD0E 0006 F0               		dc.b $FD, $E, 0, 6, $F0	
0002567F F501 0012 E8               		dc.b $F5, 1, 0, $12, $E8	
00025684 F500 0014 08               		dc.b $F5, 0, 0, $14, 8	
00025689 07                         SME_Lx_Kl_89D:	dc.b 7	
0002568A ED09 0000 F0               		dc.b $ED, 9, 0, 0, $F0	
0002568F FD0D 0006 F0               		dc.b $FD, $D, 0, 6, $F0	
00025694 0D04 000E 00               		dc.b $D, 4, 0, $E, 0	
00025699 F500 0010 E8               		dc.b $F5, 0, 0, $10, $E8	
0002569E F500 0011 08               		dc.b $F5, 0, 0, $11, 8	
000256A3 0D00 0012 F8               		dc.b $D, 0, 0, $12, $F8	
000256A8 FD00 0013 E8               		dc.b $FD, 0, 0, $13, $E8	
000256AD 05                         SME_Lx_Kl_8C1:	dc.b 5	
000256AE F502 0000 F0               		dc.b $F5, 2, 0, 0, $F0	
000256B3 F50B 0003 F8               		dc.b $F5, $B, 0, 3, $F8	
000256B8 ED08 000F F0               		dc.b $ED, 8, 0, $F, $F0	
000256BD F501 0012 E8               		dc.b $F5, 1, 0, $12, $E8	
000256C2 ED00 0014 08               		dc.b $ED, 0, 0, $14, 8	
000256C7 03                         SME_Lx_Kl_8DB:	dc.b 3	
000256C8 F50B 0000 F8               		dc.b $F5, $B, 0, 0, $F8	
000256CD ED03 000C F0               		dc.b $ED, 3, 0, $C, $F0	
000256D2 ED04 0010 F8               		dc.b $ED, 4, 0, $10, $F8	
000256D7 02                         SME_Lx_Kl_8EB:	dc.b 2	
000256D8 0C08 0000 F8               		dc.b $C, 8, 0, 0, $F8	
000256DD EC0F 0003 F0               		dc.b $EC, $F, 0, 3, $F0	
000256E2 04                         SME_Lx_Kl_8F6:	dc.b 4	
000256E3 F402 0000 F8               		dc.b $F4, 2, 0, 0, $F8	
000256E8 F402 0003 00               		dc.b $F4, 2, 0, 3, 0	
000256ED F402 0006 08               		dc.b $F4, 2, 0, 6, 8	
000256F2 0C08 0009 F8               		dc.b $C, 8, 0, 9, $F8	
000256F7 04                         SME_Lx_Kl_90B:	dc.b 4	
000256F8 F404 0000 03               		dc.b $F4, 4, 0, 0, 3	
000256FD FC0D 0002 F8               		dc.b $FC, $D, 0, 2, $F8	
00025702 0C08 000A F8               		dc.b $C, 8, 0, $A, $F8	
00025707 0C00 000D 10               		dc.b $C, 0, 0, $D, $10	
0002570C 04                         SME_Lx_Kl_920:	dc.b 4	
0002570D EC08 0800 E8               		dc.b $EC, 8, 8, 0, $E8	
00025712 F402 0803 00               		dc.b $F4, 2, 8, 3, 0	
00025717 F40F 0806 E0               		dc.b $F4, $F, 8, 6, $E0	
0002571C EC00 0016 00               		dc.b $EC, 0, 0, $16, 0	
00025721 09                         SME_Lx_Kl_935:	dc.b 9	
00025722 F402 0000 00               		dc.b $F4, 2, 0, 0, 0	
00025727 EC0C 0003 E8               		dc.b $EC, $C, 0, 3, $E8	
0002572C F407 0007 E0               		dc.b $F4, 7, 0, 7, $E0	
00025731 0C00 080F F8               		dc.b $C, 0, 8, $F, $F8	
00025736 F400 0010 F0               		dc.b $F4, 0, 0, $10, $F0	
0002573B F402 0011 F8               		dc.b $F4, 2, 0, $11, $F8	
00025740 0400 0014 F0               		dc.b 4, 0, 0, $14, $F0	
00025745 0C00 0015 F0               		dc.b $C, 0, 0, $15, $F0	
0002574A FC00 0016 F0               		dc.b $FC, 0, 0, $16, $F0	
0002574F 03                         SME_Lx_Kl_963:	dc.b 3	
00025750 EC0E 0800 E8               		dc.b $EC, $E, 8, 0, $E8	
00025755 040D 080C E0               		dc.b 4, $D, 8, $C, $E0	
0002575A 0C00 1814 00               		dc.b $C, 0, $18, $14, 0	
0002575F 03                         SME_Lx_Kl_973:	dc.b 3	
00025760 F40F 0000 E8               		dc.b $F4, $F, 0, 0, $E8	
00025765 0401 0010 E0               		dc.b 4, 1, 0, $10, $E0	
0002576A EC0C 0012 E8               		dc.b $EC, $C, 0, $12, $E8	
0002576F 02                         SME_Lx_Kl_983:	dc.b 2	
00025770 F40F 0000 E8               		dc.b $F4, $F, 0, 0, $E8	
00025775 EC0C 0010 E8               		dc.b $EC, $C, 0, $10, $E8	
0002577A 00                         SME_Lx_Kl_98E:	dc.b 0	
0002577B 08                         SME_Lx_Kl_98F:	dc.b 8	
0002577C E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0	
00025781 E801 0004 10               		dc.b $E8, 1, 0, 4, $10	
00025786 F002 0006 F8               		dc.b $F0, 2, 0, 6, $F8	
0002578B F001 0009 00               		dc.b $F0, 1, 0, 9, 0	
00025790 F001 000B 08               		dc.b $F0, 1, 0, $B, 8	
00025795 0006 000D 00               		dc.b 0, 6, 0, $D, 0	
0002579A 0801 0013 F8               		dc.b 8, 1, 0, $13, $F8	
0002579F 1000 0015 10               		dc.b $10, 0, 0, $15, $10	
000257A4 07                         SME_Lx_Kl_9B8:	dc.b 7	
000257A5 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0	
000257AA E801 0004 10               		dc.b $E8, 1, 0, 4, $10	
000257AF F002 0006 F8               		dc.b $F0, 2, 0, 6, $F8	
000257B4 F001 0009 00               		dc.b $F0, 1, 0, 9, 0	
000257B9 F001 000B 08               		dc.b $F0, 1, 0, $B, 8	
000257BE 0006 000D 00               		dc.b 0, 6, 0, $D, 0	
000257C3 0801 0013 10               		dc.b 8, 1, 0, $13, $10	
000257C8 04                         SME_Lx_Kl_9DC:	dc.b 4	
000257C9 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0	
000257CE F00A 0004 F8               		dc.b $F0, $A, 0, 4, $F8	
000257D3 E801 000D 10               		dc.b $E8, 1, 0, $D, $10	
000257D8 0809 000F F0               		dc.b 8, 9, 0, $F, $F0	
000257DD 03                         SME_Lx_Kl_9F1:	dc.b 3	
000257DE F40D 0800 FC               		dc.b $F4, $D, 8, 0, $FC	
000257E3 FC00 0808 F4               		dc.b $FC, 0, 8, 8, $F4	
000257E8 040C 0809 F4               		dc.b 4, $C, 8, 9, $F4	
000257ED 03                         SME_Lx_Kl_A01:	dc.b 3	
000257EE F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
000257F3 FC05 0008 EC               		dc.b $FC, 5, 0, 8, $EC	
000257F8 0408 000C FC               		dc.b 4, 8, 0, $C, $FC	
000257FD 03                         SME_Lx_Kl_A11:	dc.b 3	
000257FE F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
00025803 040C 0008 F4               		dc.b 4, $C, 0, 8, $F4	
00025808 FC00 000C F4               		dc.b $FC, 0, 0, $C, $F4	
0002580D 02                         SME_Lx_Kl_A21:	dc.b 2	
0002580E F40A 0000 F0               		dc.b $F4, $A, 0, 0, $F0	
00025813 F40A 0800 08               		dc.b $F4, $A, 8, 0, 8	
00025818 03                         SME_Lx_Kl_A2C:	dc.b 3	
00025819 F40D 0800 F4               		dc.b $F4, $D, 8, 0, $F4	
0002581E 040C 0808 FC               		dc.b 4, $C, 8, 8, $FC	
00025823 FC00 080C 14               		dc.b $FC, 0, 8, $C, $14	
00025828 03                         SME_Lx_Kl_A3C:	dc.b 3	
00025829 F40D 0800 F4               		dc.b $F4, $D, 8, 0, $F4	
0002582E FC05 0808 14               		dc.b $FC, 5, 8, 8, $14	
00025833 0408 080C FC               		dc.b 4, 8, 8, $C, $FC	
00025838 03                         SME_Lx_Kl_A4C:	dc.b 3	
00025839 F40D 0000 F4               		dc.b $F4, $D, 0, 0, $F4	
0002583E FC00 0008 14               		dc.b $FC, 0, 0, 8, $14	
00025843 040C 0009 FC               		dc.b 4, $C, 0, 9, $FC	
00025848 03                         SME_Lx_Kl_A5C:	dc.b 3	
00025849 F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
0002584E FC05 0008 EC               		dc.b $FC, 5, 0, 8, $EC	
00025853 0408 000C FC               		dc.b 4, 8, 0, $C, $FC	
00025858 04                         SME_Lx_Kl_A6C:	dc.b 4	
00025859 E90B 0000 F4               		dc.b $E9, $B, 0, 0, $F4	
0002585E 1100 000C FC               		dc.b $11, 0, 0, $C, $FC	
00025863 0900 000D FC               		dc.b 9, 0, 0, $D, $FC	
00025868 0900 000E 04               		dc.b 9, 0, 0, $E, 4	
0002586D 08                         SME_Lx_Kl_A81:	dc.b 8	
0002586E E909 0000 F4               		dc.b $E9, 9, 0, 0, $F4	
00025873 F901 0006 04               		dc.b $F9, 1, 0, 6, 4	
00025878 0900 0008 FC               		dc.b 9, 0, 0, 8, $FC	
0002587D 1100 0009 FC               		dc.b $11, 0, 0, 9, $FC	
00025882 F901 000A FC               		dc.b $F9, 1, 0, $A, $FC	
00025887 F900 000C F4               		dc.b $F9, 0, 0, $C, $F4	
0002588C 0100 000D F4               		dc.b 1, 0, 0, $D, $F4	
00025891 0900 000E 04               		dc.b 9, 0, 0, $E, 4	
00025896 04                         SME_Lx_Kl_AAA:	dc.b 4	
00025897 F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8	
0002589C 0005 000C 08               		dc.b 0, 5, 0, $C, 8	
000258A1 F800 0010 08               		dc.b $F8, 0, 0, $10, 8	
000258A6 F000 0011 F8               		dc.b $F0, 0, 0, $11, $F8	
000258AB 04                         SME_Lx_Kl_ABF:	dc.b 4	
000258AC F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8	
000258B1 0005 000C 08               		dc.b 0, 5, 0, $C, 8	
000258B6 F800 0010 08               		dc.b $F8, 0, 0, $10, 8	
000258BB F000 0011 F8               		dc.b $F0, 0, 0, $11, $F8	
000258C0 05                         SME_Lx_Kl_AD4:	dc.b 5	
000258C1 E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4	
000258C6 F001 0009 0C               		dc.b $F0, 1, 0, 9, $C	
000258CB 0009 000B F4               		dc.b 0, 9, 0, $B, $F4	
000258D0 1004 0011 F4               		dc.b $10, 4, 0, $11, $F4	
000258D5 0000 0013 EC               		dc.b 0, 0, 0, $13, $EC	
000258DA 05                         SME_Lx_Kl_AEE:	dc.b 5	
000258DB E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4	
000258E0 E801 0009 0C               		dc.b $E8, 1, 0, 9, $C	
000258E5 0009 000B F4               		dc.b 0, 9, 0, $B, $F4	
000258EA 1004 0011 F4               		dc.b $10, 4, 0, $11, $F4	
000258EF 0000 0013 EC               		dc.b 0, 0, 0, $13, $EC	
000258F4 02                         SME_Lx_Kl_B08:	dc.b 2	
000258F5 ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3	
000258FA 050D 0009 EB               		dc.b 5, $D, 0, 9, $EB	
000258FF 05                         SME_Lx_Kl_B13:	dc.b 5	
00025900 0505 0000 EB               		dc.b 5, 5, 0, 0, $EB	
00025905 ED02 0004 F3               		dc.b $ED, 2, 0, 4, $F3	
0002590A F503 0007 FB               		dc.b $F5, 3, 0, 7, $FB	
0002590F ED03 000B 03               		dc.b $ED, 3, 0, $B, 3	
00025914 ED00 000F FB               		dc.b $ED, 0, 0, $F, $FB	
00025919 03                         SME_Lx_Kl_B2D:	dc.b 3	
0002591A EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3	
0002591F 0408 0009 F3               		dc.b 4, 8, 0, 9, $F3	
00025924 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3	
00025929 05                         SME_Lx_Kl_B3D:	dc.b 5	
0002592A 0D00 0000 EB               		dc.b $D, 0, 0, 0, $EB	
0002592F F503 0001 F3               		dc.b $F5, 3, 0, 1, $F3	
00025934 F503 0005 FB               		dc.b $F5, 3, 0, 5, $FB	
00025939 F503 0009 03               		dc.b $F5, 3, 0, 9, 3	
0002593E ED08 000D F3               		dc.b $ED, 8, 0, $D, $F3	
00025943 02                         SME_Lx_Kl_B57:	dc.b 2	
00025944 ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3	
00025949 050D 0009 EB               		dc.b 5, $D, 0, 9, $EB	
0002594E 03                         SME_Lx_Kl_B62:	dc.b 3	
0002594F F50B 0000 F3               		dc.b $F5, $B, 0, 0, $F3	
00025954 0501 000C EB               		dc.b 5, 1, 0, $C, $EB	
00025959 ED08 000E F3               		dc.b $ED, 8, 0, $E, $F3	
0002595E 03                         SME_Lx_Kl_B72:	dc.b 3	
0002595F EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3	
00025964 0408 0009 F3               		dc.b 4, 8, 0, 9, $F3	
00025969 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3	
0002596E 03                         SME_Lx_Kl_B82:	dc.b 3	
0002596F F50B 0000 F3               		dc.b $F5, $B, 0, 0, $F3	
00025974 0501 000C EB               		dc.b 5, 1, 0, $C, $EB	
00025979 ED08 000E F3               		dc.b $ED, 8, 0, $E, $F3	
0002597E 02                         SME_Lx_Kl_B92:	dc.b 2	
0002597F EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00025984 FC0E 0006 F0               		dc.b $FC, $E, 0, 6, $F0	
00025989 03                         SME_Lx_Kl_B9D:	dc.b 3	
0002598A E80D 2000 EC               		dc.b $E8, $D, $20, 0, $EC	
0002598F E801 2008 0C               		dc.b $E8, 1, $20, 8, $C	
00025994 F80B 200A F4               		dc.b $F8, $B, $20, $A, $F4	
00025999 0B                         SME_Lx_Kl_BAD:	dc.b $B	
0002599A E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC	
0002599F E801 0008 0C               		dc.b $E8, 1, 0, 8, $C	
000259A4 1000 000A F4               		dc.b $10, 0, 0, $A, $F4	
000259A9 0808 000B F4               		dc.b 8, 8, 0, $B, $F4	
000259AE 1000 000E 04               		dc.b $10, 0, 0, $E, 4	
000259B3 F800 000F FC               		dc.b $F8, 0, 0, $F, $FC	
000259B8 F800 0010 F4               		dc.b $F8, 0, 0, $10, $F4	
000259BD F800 0011 04               		dc.b $F8, 0, 0, $11, 4	
000259C2 0000 0012 FC               		dc.b 0, 0, 0, $12, $FC	
000259C7 0000 0013 04               		dc.b 0, 0, 0, $13, 4	
000259CC 0000 0014 F4               		dc.b 0, 0, 0, $14, $F4	
000259D1 06                         SME_Lx_Kl_BE5:	dc.b 6	
000259D2 E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC	
000259D7 E801 0008 0C               		dc.b $E8, 1, 0, 8, $C	
000259DC F809 000A F4               		dc.b $F8, 9, 0, $A, $F4	
000259E1 1000 0010 F4               		dc.b $10, 0, 0, $10, $F4	
000259E6 0808 0011 F4               		dc.b 8, 8, 0, $11, $F4	
000259EB 1000 0014 04               		dc.b $10, 0, 0, $14, 4	
000259F0 03                         SME_Lx_Kl_C04:	dc.b 3	
000259F1 EB09 0000 F4               		dc.b $EB, 9, 0, 0, $F4	
000259F6 FB0E 0006 EC               		dc.b $FB, $E, 0, 6, $EC	
000259FB 0301 0012 0C               		dc.b 3, 1, 0, $12, $C	
00025A00 07                         SME_Lx_Kl_C14:	dc.b 7	
00025A01 F801 0000 0C               		dc.b $F8, 1, 0, 0, $C	
00025A06 080C 0002 F4               		dc.b 8, $C, 0, 2, $F4	
00025A0B F801 0006 FC               		dc.b $F8, 1, 0, 6, $FC	
00025A10 F000 0008 FC               		dc.b $F0, 0, 0, 8, $FC	
00025A15 F801 0009 EC               		dc.b $F8, 1, 0, 9, $EC	
00025A1A F002 000B F4               		dc.b $F0, 2, 0, $B, $F4	
00025A1F F002 000E 04               		dc.b $F0, 2, 0, $E, 4	
00025A24 02                         SME_Lx_Kl_C38:	dc.b 2	
00025A25 F00F 0000 EC               		dc.b $F0, $F, 0, 0, $EC	
00025A2A F802 0010 0C               		dc.b $F8, 2, 0, $10, $C	
00025A2F 04                         SME_Lx_Kl_C43:	dc.b 4	
00025A30 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00025A35 F800 000C EC               		dc.b $F8, 0, 0, $C, $EC	
00025A3A F008 000E F4               		dc.b $F0, 8, 0, $E, $F4	
00025A3F 0000 0011 EC               		dc.b 0, 0, 0, $11, $EC	
00025A44 03                         SME_Lx_Kl_C58:	dc.b 3	
00025A45 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00025A4A F801 000C EC               		dc.b $F8, 1, 0, $C, $EC	
00025A4F F008 000E F4               		dc.b $F0, 8, 0, $E, $F4	
00025A54 03                         SME_Lx_Kl_C68:	dc.b 3	
00025A55 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00025A5A F008 000C F4               		dc.b $F0, 8, 0, $C, $F4	
00025A5F F801 000F EC               		dc.b $F8, 1, 0, $F, $EC	
00025A64 04                         SME_Lx_Kl_C78:	dc.b 4	
00025A65 0002 0000 F4               		dc.b 0, 2, 0, 0, $F4	
00025A6A F803 0003 FC               		dc.b $F8, 3, 0, 3, $FC	
00025A6F F803 0007 04               		dc.b $F8, 3, 0, 7, 4	
00025A74 F802 000B 0C               		dc.b $F8, 2, 0, $B, $C	
00025A79 01                         SME_Lx_Kl_C8D:	dc.b 1	
00025A7A F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00025A7F 01                         SME_Lx_Kl_C93:	dc.b 1	
00025A80 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00025A85 01                         SME_Lx_Kl_C99:	dc.b 1	
00025A86 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00025A8B 01                         SME_Lx_Kl_C9F:	dc.b 1	
00025A8C F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00025A91 02                         SME_Lx_Kl_CA5:	dc.b 2	
00025A92 F80B 0000 F4               		dc.b $F8, $B, 0, 0, $F4	
00025A97 F802 000C 0C               		dc.b $F8, 2, 0, $C, $C	
00025A9C                            		even
00025A9C                            		even
00025A9C                            SonicDynPLC:	include	"_maps\Sonic - Dynamic Gfx Script.asm"
00025A9C                            ; --------------------------------------------------------------------------------
00025A9C                            ; Dynamic Pattern Loading Cues - output from SonMapEd - Sonic 1 format; --------------------------------------------------------------------------------
00025A9C                            
00025A9C                            SME_vJmm3:	
00025A9C 0000 0000                  		dc.w SME_vJmm3_142-SME_vJmm3, SME_vJmm3_143-SME_vJmm3	
00025AA0 0000 0000                  		dc.w SME_vJmm3_14C-SME_vJmm3, SME_vJmm3_15F-SME_vJmm3	
00025AA4 0000 0000                  		dc.w SME_vJmm3_174-SME_vJmm3, SME_vJmm3_17D-SME_vJmm3	
00025AA8 0000 0000                  		dc.w SME_vJmm3_184-SME_vJmm3, SME_vJmm3_18B-SME_vJmm3	
00025AAC 0000 0000                  		dc.w SME_vJmm3_194-SME_vJmm3, SME_vJmm3_199-SME_vJmm3	
00025AB0 0000 0000                  		dc.w SME_vJmm3_1A0-SME_vJmm3, SME_vJmm3_1A7-SME_vJmm3	
00025AB4 0000 0000                  		dc.w SME_vJmm3_1AE-SME_vJmm3, SME_vJmm3_1B7-SME_vJmm3	
00025AB8 0000 0000                  		dc.w SME_vJmm3_1BE-SME_vJmm3, SME_vJmm3_1CD-SME_vJmm3	
00025ABC 0000 0000                  		dc.w SME_vJmm3_1D8-SME_vJmm3, SME_vJmm3_1DF-SME_vJmm3	
00025AC0 0000 0000                  		dc.w SME_vJmm3_1E6-SME_vJmm3, SME_vJmm3_1EF-SME_vJmm3	
00025AC4 0000 0000                  		dc.w SME_vJmm3_1F4-SME_vJmm3, SME_vJmm3_1FB-SME_vJmm3	
00025AC8 0000 0000                  		dc.w SME_vJmm3_206-SME_vJmm3, SME_vJmm3_211-SME_vJmm3	
00025ACC 0000 0000                  		dc.w SME_vJmm3_21E-SME_vJmm3, SME_vJmm3_227-SME_vJmm3	
00025AD0 0000 0000                  		dc.w SME_vJmm3_22E-SME_vJmm3, SME_vJmm3_239-SME_vJmm3	
00025AD4 0000 0000                  		dc.w SME_vJmm3_242-SME_vJmm3, SME_vJmm3_249-SME_vJmm3	
00025AD8 0000 0000                  		dc.w SME_vJmm3_254-SME_vJmm3, SME_vJmm3_25D-SME_vJmm3	
00025ADC 0000 0000                  		dc.w SME_vJmm3_262-SME_vJmm3, SME_vJmm3_267-SME_vJmm3	
00025AE0 0000 0000                  		dc.w SME_vJmm3_272-SME_vJmm3, SME_vJmm3_27B-SME_vJmm3	
00025AE4 0000 0000                  		dc.w SME_vJmm3_280-SME_vJmm3, SME_vJmm3_287-SME_vJmm3	
00025AE8 0000 0000                  		dc.w SME_vJmm3_28E-SME_vJmm3, SME_vJmm3_29B-SME_vJmm3	
00025AEC 0000 0000                  		dc.w SME_vJmm3_2A8-SME_vJmm3, SME_vJmm3_2B1-SME_vJmm3	
00025AF0 0000 0000                  		dc.w SME_vJmm3_2B8-SME_vJmm3, SME_vJmm3_2C3-SME_vJmm3	
00025AF4 0000 0000                  		dc.w SME_vJmm3_2CC-SME_vJmm3, SME_vJmm3_2D3-SME_vJmm3	
00025AF8 0000 0000                  		dc.w SME_vJmm3_2DE-SME_vJmm3, SME_vJmm3_2E3-SME_vJmm3	
00025AFC 0000 0000                  		dc.w SME_vJmm3_2E8-SME_vJmm3, SME_vJmm3_2ED-SME_vJmm3	
00025B00 0000 0000                  		dc.w SME_vJmm3_2F2-SME_vJmm3, SME_vJmm3_2F7-SME_vJmm3	
00025B04 0000 0000                  		dc.w SME_vJmm3_2FC-SME_vJmm3, SME_vJmm3_301-SME_vJmm3	
00025B08 0000 0000                  		dc.w SME_vJmm3_306-SME_vJmm3, SME_vJmm3_30F-SME_vJmm3	
00025B0C 0000 0000                  		dc.w SME_vJmm3_316-SME_vJmm3, SME_vJmm3_31D-SME_vJmm3	
00025B10 0000 0000                  		dc.w SME_vJmm3_324-SME_vJmm3, SME_vJmm3_32D-SME_vJmm3	
00025B14 0000 0000                  		dc.w SME_vJmm3_334-SME_vJmm3, SME_vJmm3_33B-SME_vJmm3	
00025B18 0000 0000                  		dc.w SME_vJmm3_342-SME_vJmm3, SME_vJmm3_347-SME_vJmm3	
00025B1C 0000 0000                  		dc.w SME_vJmm3_34C-SME_vJmm3, SME_vJmm3_351-SME_vJmm3	
00025B20 0000 0000                  		dc.w SME_vJmm3_356-SME_vJmm3, SME_vJmm3_35B-SME_vJmm3	
00025B24 0000 0000                  		dc.w SME_vJmm3_360-SME_vJmm3, SME_vJmm3_365-SME_vJmm3	
00025B28 0000 0000                  		dc.w SME_vJmm3_36A-SME_vJmm3, SME_vJmm3_373-SME_vJmm3	
00025B2C 0000 0000                  		dc.w SME_vJmm3_37A-SME_vJmm3, SME_vJmm3_37F-SME_vJmm3	
00025B30 0000 0000                  		dc.w SME_vJmm3_386-SME_vJmm3, SME_vJmm3_38F-SME_vJmm3	
00025B34 0000 0000                  		dc.w SME_vJmm3_396-SME_vJmm3, SME_vJmm3_39B-SME_vJmm3	
00025B38 0000 0000                  		dc.w SME_vJmm3_3A2-SME_vJmm3, SME_vJmm3_3A9-SME_vJmm3	
00025B3C 0000 0000                  		dc.w SME_vJmm3_3B0-SME_vJmm3, SME_vJmm3_3C3-SME_vJmm3	
00025B40 0000 0000                  		dc.w SME_vJmm3_3D6-SME_vJmm3, SME_vJmm3_3DD-SME_vJmm3	
00025B44 0000 0000                  		dc.w SME_vJmm3_3E4-SME_vJmm3, SME_vJmm3_3EB-SME_vJmm3	
00025B48 0000 0000                  		dc.w SME_vJmm3_3F6-SME_vJmm3, SME_vJmm3_3FD-SME_vJmm3	
00025B4C 0000 0000                  		dc.w SME_vJmm3_404-SME_vJmm3, SME_vJmm3_40F-SME_vJmm3	
00025B50 0000 0000                  		dc.w SME_vJmm3_41A-SME_vJmm3, SME_vJmm3_423-SME_vJmm3	
00025B54 0000 0000                  		dc.w SME_vJmm3_42C-SME_vJmm3, SME_vJmm3_435-SME_vJmm3	
00025B58 0000 0000                  		dc.w SME_vJmm3_43E-SME_vJmm3, SME_vJmm3_441-SME_vJmm3	
00025B5C 0000 0000                  		dc.w SME_vJmm3_444-SME_vJmm3, SME_vJmm3_447-SME_vJmm3	
00025B60 0000 0000                  		dc.w SME_vJmm3_44A-SME_vJmm3, SME_vJmm3_44D-SME_vJmm3	
00025B64 0000 0000                  		dc.w SME_vJmm3_450-SME_vJmm3, SME_vJmm3_453-SME_vJmm3	
00025B68 0000 0000                  		dc.w SME_vJmm3_45A-SME_vJmm3, SME_vJmm3_45D-SME_vJmm3	
00025B6C 0000 0000                  		dc.w SME_vJmm3_462-SME_vJmm3, SME_vJmm3_465-SME_vJmm3	
00025B70 0000 0000                  		dc.w SME_vJmm3_46A-SME_vJmm3, SME_vJmm3_46D-SME_vJmm3	
00025B74 0000 0000                  		dc.w SME_vJmm3_476-SME_vJmm3, SME_vJmm3_485-SME_vJmm3	
00025B78 0000 0000                  		dc.w SME_vJmm3_490-SME_vJmm3, SME_vJmm3_497-SME_vJmm3	
00025B7C 0000 0000                  		dc.w SME_vJmm3_49C-SME_vJmm3, SME_vJmm3_4A5-SME_vJmm3	
00025B80 0000 0000                  		dc.w SME_vJmm3_4AE-SME_vJmm3, SME_vJmm3_4B7-SME_vJmm3	
00025B84 0000 0000                  		dc.w SME_vJmm3_4CA-SME_vJmm3, SME_vJmm3_4D1-SME_vJmm3	
00025B88 0000 0000                  		dc.w SME_vJmm3_4D8-SME_vJmm3, SME_vJmm3_4DD-SME_vJmm3	
00025B8C 0000 0000                  		dc.w SME_vJmm3_4DE-SME_vJmm3, SME_vJmm3_4EF-SME_vJmm3	
00025B90 0000 0000                  		dc.w SME_vJmm3_4FE-SME_vJmm3, SME_vJmm3_507-SME_vJmm3	
00025B94 0000 0000                  		dc.w SME_vJmm3_50E-SME_vJmm3, SME_vJmm3_515-SME_vJmm3	
00025B98 0000 0000                  		dc.w SME_vJmm3_51C-SME_vJmm3, SME_vJmm3_51F-SME_vJmm3	
00025B9C 0000 0000                  		dc.w SME_vJmm3_526-SME_vJmm3, SME_vJmm3_52D-SME_vJmm3	
00025BA0 0000 0000                  		dc.w SME_vJmm3_534-SME_vJmm3, SME_vJmm3_53B-SME_vJmm3	
00025BA4 0000 0000                  		dc.w SME_vJmm3_544-SME_vJmm3, SME_vJmm3_555-SME_vJmm3	
00025BA8 0000 0000                  		dc.w SME_vJmm3_55E-SME_vJmm3, SME_vJmm3_567-SME_vJmm3	
00025BAC 0000 0000                  		dc.w SME_vJmm3_572-SME_vJmm3, SME_vJmm3_57D-SME_vJmm3	
00025BB0 0000 0000                  		dc.w SME_vJmm3_582-SME_vJmm3, SME_vJmm3_58D-SME_vJmm3	
00025BB4 0000 0000                  		dc.w SME_vJmm3_594-SME_vJmm3, SME_vJmm3_59F-SME_vJmm3	
00025BB8 0000 0000                  		dc.w SME_vJmm3_5A4-SME_vJmm3, SME_vJmm3_5AB-SME_vJmm3	
00025BBC 0000 0000                  		dc.w SME_vJmm3_5B2-SME_vJmm3, SME_vJmm3_5B9-SME_vJmm3	
00025BC0 0000 0000                  		dc.w SME_vJmm3_5BE-SME_vJmm3, SME_vJmm3_5C5-SME_vJmm3	
00025BC4 0000 0000                  		dc.w SME_vJmm3_5DC-SME_vJmm3, SME_vJmm3_5E9-SME_vJmm3	
00025BC8 0000 0000                  		dc.w SME_vJmm3_5F0-SME_vJmm3, SME_vJmm3_5FF-SME_vJmm3	
00025BCC 0000 0000                  		dc.w SME_vJmm3_604-SME_vJmm3, SME_vJmm3_60D-SME_vJmm3	
00025BD0 0000 0000                  		dc.w SME_vJmm3_614-SME_vJmm3, SME_vJmm3_61B-SME_vJmm3	
00025BD4 0000 0000                  		dc.w SME_vJmm3_624-SME_vJmm3, SME_vJmm3_627-SME_vJmm3	
00025BD8 0000 0000                  		dc.w SME_vJmm3_62A-SME_vJmm3, SME_vJmm3_62D-SME_vJmm3	
00025BDC 0000                       		dc.w SME_vJmm3_630-SME_vJmm3	
00025BDE 00                         SME_vJmm3_142:	dc.b 0	
00025BDF 0420 0070 0320 0B20 0E     SME_vJmm3_143:	dc.b 4, $20, 0, $70, 3, $20, $B, $20, $E	
00025BE8 0920 0020 0B20 0E10 0300+  SME_vJmm3_14C:	dc.b 9, $20, 0, $20, $B, $20, $E, $10, 3, 0, 8, 0, 9, 0, 6, 0, $A, $10, $1D	
00025BFB 0A20 0020 0B20 0E10 0300+  SME_vJmm3_15F:	dc.b $A, $20, 0, $20, $B, $20, $E, $10, 3, 0, 8, 0, 9, 0, $A, 0, $1F, 0, $26, 0, $32	
00025C10 04B6 C606 D200 0920 0E     SME_vJmm3_174:	dc.b 4, $B6, $C6, 6, $D2, 0, 9, $20, $E	
00025C19 0350 1150 1720 0E          SME_vJmm3_17D:	dc.b 3, $50, $11, $50, $17, $20, $E	
00025C20 0350 2050 1720 0E          SME_vJmm3_184:	dc.b 3, $50, $20, $50, $17, $20, $E	
00025C27 0450 2050 1710 2700 0E     SME_vJmm3_18B:	dc.b 4, $50, $20, $50, $17, $10, $27, 0, $E	
00025C30 02B6 D316 DF               SME_vJmm3_194:	dc.b 2, $B6, $D3, $16, $DF	
00025C35 0356 E126 E736 EA          SME_vJmm3_199:	dc.b 3, $56, $E1, $26, $E7, $36, $EA	
00025C3C 0356 E126 E736 EE          SME_vJmm3_1A0:	dc.b 3, $56, $E1, $26, $E7, $36, $EE	
00025C43 03B6 F226 FE27 01          SME_vJmm3_1A7:	dc.b 3, $B6, $F2, $26, $FE, $27, 1	
00025C4A 0420 0B20 0E87 0A07 13     SME_vJmm3_1AE:	dc.b 4, $20, $B, $20, $E, $87, $A, 7, $13	
00025C53 0380 2920 0B20 0E          SME_vJmm3_1B7:	dc.b 3, $80, $29, $20, $B, $20, $E	
00025C5A 0750 3A50 4010 4600 3530+  SME_vJmm3_1BE:	dc.b 7, $50, $3A, $50, $40, $10, $46, 0, $35, $30, $36, 0, $34, 0, $33	
00025C69 05B0 4800 3530 3600 3400+  SME_vJmm3_1CD:	dc.b 5, $B0, $48, 0, $35, $30, $36, 0, $34, 0, $33	
00025C74 0380 5A57 0400 09          SME_vJmm3_1D8:	dc.b 3, $80, $5A, $57, 4, 0, 9	
00025C7B 03F7 1437 2407 28          SME_vJmm3_1DF:	dc.b 3, $F7, $14, $37, $24, 7, $28	
00025C82 0450 5450 6350 6910 6F     SME_vJmm3_1E6:	dc.b 4, $50, $54, $50, $63, $50, $69, $10, $6F	
00025C8B 0250 54B0 71               SME_vJmm3_1EF:	dc.b 2, $50, $54, $B0, $71	
00025C90 0357 0457 2907 2F          SME_vJmm3_1F4:	dc.b 3, $57, 4, $57, $29, 7, $2F	
00025C97 0530 7D50 8100 3310 3430+  SME_vJmm3_1FB:	dc.b 5, $30, $7D, $50, $81, 0, $33, $10, $34, $30, $36	
00025CA2 0550 8750 8D20 9350 9600+  SME_vJmm3_206:	dc.b 5, $50, $87, $50, $8D, $20, $93, $50, $96, 0, $9C	
00025CAD 0650 8710 9D30 9F50 A330+  SME_vJmm3_211:	dc.b 6, $50, $87, $10, $9D, $30, $9F, $50, $A3, $30, $A9, 0, $AD	
00025CBA 0450 AE10 B470 B620 BE     SME_vJmm3_21E:	dc.b 4, $50, $AE, $10, $B4, $70, $B6, $20, $BE	
00025CC3 03F9 7539 8539 89          SME_vJmm3_227:	dc.b 3, $F9, $75, $39, $85, $39, $89	
00025CCA 0550 C130 C770 CB20 D310+  SME_vJmm3_22E:	dc.b 5, $50, $C1, $30, $C7, $70, $CB, $20, $D3, $10, $D6	
00025CD5 0450 C110 D870 DA20 E2     SME_vJmm3_239:	dc.b 4, $50, $C1, $10, $D8, $70, $DA, $20, $E2	
00025CDE 03F9 8D39 9D39 A1          SME_vJmm3_242:	dc.b 3, $F9, $8D, $39, $9D, $39, $A1	
00025CE5 0550 8710 9D00 9370 E520+  SME_vJmm3_249:	dc.b 5, $50, $87, $10, $9D, 0, $93, $70, $E5, $20, $ED	
00025CF0 0470 F050 F810 FE51 00     SME_vJmm3_254:	dc.b 4, $70, $F0, $50, $F8, $10, $FE, $51, 0	
00025CF9 0270 F0B1 06               SME_vJmm3_25D:	dc.b 2, $70, $F0, $B1, 6	
00025CFE 0281 1858 F9               SME_vJmm3_262:	dc.b 2, $81, $18, $58, $F9	
00025D03 0508 FF39 0009 04B9 0529+  SME_vJmm3_267:	dc.b 5, 8, $FF, $39, 0, 9, 4, $B9, 5, $29, $11	
00025D0E 0451 1251 2111 2751 29     SME_vJmm3_272:	dc.b 4, $51, $12, $51, $21, $11, $27, $51, $29	
00025D17 0251 12B1 2F               SME_vJmm3_27B:	dc.b 2, $51, $12, $B1, $2F	
00025D1C 0329 1479 1719 1F          SME_vJmm3_280:	dc.b 3, $29, $14, $79, $17, $19, $1F	
00025D23 0370 F001 0681 3B          SME_vJmm3_287:	dc.b 3, $70, $F0, 1, 6, $81, $3B	
00025D2A 0651 4411 4A11 4C81 4E01+  SME_vJmm3_28E:	dc.b 6, $51, $44, $11, $4A, $11, $4C, $81, $4E, 1, $57, 1, $58	
00025D37 0651 4421 5911 5C11 5E81+  SME_vJmm3_29B:	dc.b 6, $51, $44, $21, $59, $11, $5C, $11, $5E, $81, $60, 1, $57	
00025D44 0451 6911 6F81 7111 7A     SME_vJmm3_2A8:	dc.b 4, $51, $69, $11, $6F, $81, $71, $11, $7A	
00025D4D 03F9 A529 B529 B8          SME_vJmm3_2B1:	dc.b 3, $F9, $A5, $29, $B5, $29, $B8	
00025D54 0551 7C21 8211 8571 8721+  SME_vJmm3_2B8:	dc.b 5, $51, $7C, $21, $82, $11, $85, $71, $87, $21, $8F	
00025D5F 0451 7C11 9281 9411 9D     SME_vJmm3_2C3:	dc.b 4, $51, $7C, $11, $92, $81, $94, $11, $9D	
00025D68 03F9 BB29 CB19 CE          SME_vJmm3_2CC:	dc.b 3, $F9, $BB, $29, $CB, $19, $CE	
00025D6F 0551 4481 9F11 5E11 A801+  SME_vJmm3_2D3:	dc.b 5, $51, $44, $81, $9F, $11, $5E, $11, $A8, 1, $57	
00025D7A 0251 AAB1 B0               SME_vJmm3_2DE:	dc.b 2, $51, $AA, $B1, $B0	
00025D7F 02B7 3057 3C               SME_vJmm3_2E3:	dc.b 2, $B7, $30, $57, $3C	
00025D84 0250 54B1 BC               SME_vJmm3_2E8:	dc.b 2, $50, $54, $B1, $BC	
00025D89 0257 3CB7 42               SME_vJmm3_2ED:	dc.b 2, $57, $3C, $B7, $42	
00025D8E 0251 AAB1 C8               SME_vJmm3_2F2:	dc.b 2, $51, $AA, $B1, $C8	
00025D93 0257 3CB7 4E               SME_vJmm3_2F7:	dc.b 2, $57, $3C, $B7, $4E	
00025D98 0250 54B1 D4               SME_vJmm3_2FC:	dc.b 2, $50, $54, $B1, $D4	
00025D9D 0257 3CB7 5A               SME_vJmm3_301:	dc.b 2, $57, $3C, $B7, $5A	
00025DA2 0451 E011 E6B1 E801 F4     SME_vJmm3_306:	dc.b 4, $51, $E0, $11, $E6, $B1, $E8, 1, $F4	
00025DAB 03F8 7128 8128 84          SME_vJmm3_30F:	dc.b 3, $F8, $71, $28, $81, $28, $84	
00025DB2 0351 F511 FBB1 FD          SME_vJmm3_316:	dc.b 3, $51, $F5, $11, $FB, $B1, $FD	
00025DB9 03B8 BD78 C901 F4          SME_vJmm3_31D:	dc.b 3, $B8, $BD, $78, $C9, 1, $F4	
00025DC0 0451 E012 09B2 0B01 F4     SME_vJmm3_324:	dc.b 4, $51, $E0, $12, 9, $B2, $B, 1, $F4	
00025DC9 03B8 D178 DD01 F4          SME_vJmm3_32D:	dc.b 3, $B8, $D1, $78, $DD, 1, $F4	
00025DD0 0351 F511 FBB2 17          SME_vJmm3_334:	dc.b 3, $51, $F5, $11, $FB, $B2, $17	
00025DD7 0378 E5B8 ED01 F4          SME_vJmm3_33B:	dc.b 3, $78, $E5, $B8, $ED, 1, $F4	
00025DDE 0252 23B2 29               SME_vJmm3_342:	dc.b 2, $52, $23, $B2, $29	
00025DE3 0258 87B8 8D               SME_vJmm3_347:	dc.b 2, $58, $87, $B8, $8D	
00025DE8 0251 12B2 35               SME_vJmm3_34C:	dc.b 2, $51, $12, $B2, $35	
00025DED 0258 87B8 99               SME_vJmm3_351:	dc.b 2, $58, $87, $B8, $99	
00025DF2 0252 23B2 41               SME_vJmm3_356:	dc.b 2, $52, $23, $B2, $41	
00025DF7 0258 87B8 A5               SME_vJmm3_35B:	dc.b 2, $58, $87, $B8, $A5	
00025DFC 0251 12B2 4D               SME_vJmm3_360:	dc.b 2, $51, $12, $B2, $4D	
00025E01 0258 87B8 B1               SME_vJmm3_365:	dc.b 2, $58, $87, $B8, $B1	
00025E06 0452 5912 5FB2 6102 6D     SME_vJmm3_36A:	dc.b 4, $52, $59, $12, $5F, $B2, $61, 2, $6D	
00025E0F 03B9 2129 2D59 30          SME_vJmm3_373:	dc.b 3, $B9, $21, $29, $2D, $59, $30	
00025E16 0272 6EB2 76               SME_vJmm3_37A:	dc.b 2, $72, $6E, $B2, $76	
00025E1B 03B9 3629 4259 45          SME_vJmm3_37F:	dc.b 3, $B9, $36, $29, $42, $59, $45	
00025E22 0452 5912 82B2 8402 6D     SME_vJmm3_386:	dc.b 4, $52, $59, $12, $82, $B2, $84, 2, $6D	
00025E2B 03B9 4B29 5759 5A          SME_vJmm3_38F:	dc.b 3, $B9, $4B, $29, $57, $59, $5A	
00025E32 0272 6EB2 90               SME_vJmm3_396:	dc.b 2, $72, $6E, $B2, $90	
00025E37 03B9 6029 6C59 6F          SME_vJmm3_39B:	dc.b 3, $B9, $60, $29, $6C, $59, $6F	
00025E3E 03B4 EE24 FA54 FD          SME_vJmm3_3A2:	dc.b 3, $B4, $EE, $24, $FA, $54, $FD	
00025E45 03B5 0325 0F55 12          SME_vJmm3_3A9:	dc.b 3, $B5, 3, $25, $F, $55, $12	
00025E4C 0925 1E55 2105 3715 1815+  SME_vJmm3_3B0:	dc.b 9, $25, $1E, $55, $21, 5, $37, $15, $18, $15, $1A, $15, $1C, $14, $EE, $14, $F2, $14, $F6	
00025E5F 0925 2D55 3005 3615 2715+  SME_vJmm3_3C3:	dc.b 9, $25, $2D, $55, $30, 5, $36, $15, $27, $15, $29, $15, $2B, $15, 3, $15, 7, $15, $B	
00025E72 03F6 6416 7436 76          SME_vJmm3_3D6:	dc.b 3, $F6, $64, $16, $74, $36, $76	
00025E79 03B6 8176 8D16 95          SME_vJmm3_3DD:	dc.b 3, $B6, $81, $76, $8D, $16, $95	
00025E80 03F5 3835 4805 4C          SME_vJmm3_3E4:	dc.b 3, $F5, $38, $35, $48, 5, $4C	
00025E87 05B5 4D35 5915 5D15 5F25+  SME_vJmm3_3EB:	dc.b 5, $B5, $4D, $35, $59, $15, $5D, $15, $5F, $25, $61	
00025E92 03B5 6425 7055 73          SME_vJmm3_3F6:	dc.b 3, $B5, $64, $25, $70, $55, $73	
00025E99 03B5 7925 8555 88          SME_vJmm3_3FD:	dc.b 3, $B5, $79, $25, $85, $55, $88	
00025EA0 0555 9425 9A05 AD55 8E55+  SME_vJmm3_404:	dc.b 5, $55, $94, $25, $9A, 5, $AD, $55, $8E, $55, $64	
00025EAB 0525 A355 A605 AC55 9D55+  SME_vJmm3_40F:	dc.b 5, $25, $A3, $55, $A6, 5, $AC, $55, $9D, $55, $79	
00025EB6 04B5 BA25 C625 C925 CC     SME_vJmm3_41A:	dc.b 4, $B5, $BA, $25, $C6, $25, $C9, $25, $CC	
00025EBF 04B5 AE25 CF25 D225 D5     SME_vJmm3_423:	dc.b 4, $B5, $AE, $25, $CF, $25, $D2, $25, $D5	
00025EC8 04F5 D825 E805 EB05 EC     SME_vJmm3_42C:	dc.b 4, $F5, $D8, $25, $E8, 5, $EB, 5, $EC	
00025ED1 04F5 ED25 FD16 0016 02     SME_vJmm3_435:	dc.b 4, $F5, $ED, $25, $FD, $16, 0, $16, 2	
00025EDA 01F2 9C                    SME_vJmm3_43E:	dc.b 1, $F2, $9C	
00025EDD 01F6 2B                    SME_vJmm3_441:	dc.b 1, $F6, $2B	
00025EE0 01F2 AC                    SME_vJmm3_444:	dc.b 1, $F2, $AC	
00025EE3 01F6 3B                    SME_vJmm3_447:	dc.b 1, $F6, $3B	
00025EE6 01F2 BC                    SME_vJmm3_44A:	dc.b 1, $F2, $BC	
00025EE9 01F6 4B                    SME_vJmm3_44D:	dc.b 1, $F6, $4B	
00025EEC 01F2 CC                    SME_vJmm3_450:	dc.b 1, $F2, $CC	
00025EEF 0386 5B36 7A26 7E          SME_vJmm3_453:	dc.b 3, $86, $5B, $36, $7A, $26, $7E	
00025EF6 01F2 DC                    SME_vJmm3_45A:	dc.b 1, $F2, $DC	
00025EF9 02B2 EC22 F8               SME_vJmm3_45D:	dc.b 2, $B2, $EC, $22, $F8	
00025EFE 01F2 FB                    SME_vJmm3_462:	dc.b 1, $F2, $FB	
00025F01 02B3 0B23 17               SME_vJmm3_465:	dc.b 2, $B3, $B, $23, $17	
00025F06 01F3 1A                    SME_vJmm3_46A:	dc.b 1, $F3, $1A	
00025F09 0453 2AB3 3018 1508 17     SME_vJmm3_46D:	dc.b 4, $53, $2A, $B3, $30, $18, $15, 8, $17	
00025F12 0753 3C73 4213 4A03 4C08+  SME_vJmm3_476:	dc.b 7, $53, $3C, $73, $42, $13, $4A, 3, $4C, 8, $1A, 8, $19, 8, $18	
00025F21 0528 1BB8 1E28 2A18 2D08+  SME_vJmm3_485:	dc.b 5, $28, $1B, $B8, $1E, $28, $2A, $18, $2D, 8, $2F	
00025F2C 03B8 3038 3C18 40          SME_vJmm3_490:	dc.b 3, $B8, $30, $38, $3C, $18, $40	
00025F33 0220 0EF4 88               SME_vJmm3_497:	dc.b 2, $20, $E, $F4, $88	
00025F38 0427 6627 6927 6C20 0E     SME_vJmm3_49C:	dc.b 4, $27, $66, $27, $69, $27, $6C, $20, $E	
00025F41 0413 4D73 4F23 5703 5A     SME_vJmm3_4A5:	dc.b 4, $13, $4D, $73, $4F, $23, $57, 3, $5A	
00025F4A 0423 5B23 5EF3 6108 42     SME_vJmm3_4AE:	dc.b 4, $23, $5B, $23, $5E, $F3, $61, 8, $42	
00025F53 0928 5338 5678 4303 6408+  SME_vJmm3_4B7:	dc.b 9, $28, $53, $38, $56, $78, $43, 3, $64, 8, $4B, $28, $4F, 8, $4D, 8, $4E, 8, $52	
00025F66 03B3 7173 7D00 71          SME_vJmm3_4CA:	dc.b 3, $B3, $71, $73, $7D, 0, $71	
00025F6D 03F8 5B18 6B38 6D          SME_vJmm3_4D1:	dc.b 3, $F8, $5B, $18, $6B, $38, $6D	
00025F74 02F8 0138 11               SME_vJmm3_4D8:	dc.b 2, $F8, 1, $38, $11	
00025F79 00                         SME_vJmm3_4DD:	dc.b 0	
00025F7A 0839 E219 EF29 E619 E919+  SME_vJmm3_4DE:	dc.b 8, $39, $E2, $19, $EF, $29, $E6, $19, $E9, $19, $EC, $59, $F7, $19, $FD, 9, $FF	
00025F8B 0739 E219 EF29 E619 E919+  SME_vJmm3_4EF:	dc.b 7, $39, $E2, $19, $EF, $29, $E6, $19, $E9, $19, $EC, $5A, 0, $1A, 6	
00025F9A 0439 E289 E619 EF59 F1     SME_vJmm3_4FE:	dc.b 4, $39, $E2, $89, $E6, $19, $EF, $59, $F1	
00025FA3 0373 9D03 A533 A6          SME_vJmm3_507:	dc.b 3, $73, $9D, 3, $A5, $33, $A6	
00025FAA 0373 8533 8D23 91          SME_vJmm3_50E:	dc.b 3, $73, $85, $33, $8D, $23, $91	
00025FB1 0376 9736 9F06 A3          SME_vJmm3_515:	dc.b 3, $76, $97, $36, $9F, 6, $A3	
00025FB8 0183 94                    SME_vJmm3_51C:	dc.b 1, $83, $94	
00025FBB 0376 9736 9F06 A3          SME_vJmm3_51F:	dc.b 3, $76, $97, $36, $9F, 6, $A3	
00025FC2 0373 8533 8D23 91          SME_vJmm3_526:	dc.b 3, $73, $85, $33, $8D, $23, $91	
00025FC9 0373 9D03 A533 A6          SME_vJmm3_52D:	dc.b 3, $73, $9D, 3, $A5, $33, $A6	
00025FD0 0373 AA33 B223 B6          SME_vJmm3_534:	dc.b 3, $73, $AA, $33, $B2, $23, $B6	
00025FD7 04B3 B903 C603 C503 C7     SME_vJmm3_53B:	dc.b 4, $B3, $B9, 3, $C6, 3, $C5, 3, $C7	
00025FE0 0856 1113 C303 C503 C613+  SME_vJmm3_544:	dc.b 8, $56, $11, $13, $C3, 3, $C5, 3, $C6, $13, $BF, 6, 5, 6, 6, 3, $C7	
00025FF1 04B3 DA33 E603 EA03 EB     SME_vJmm3_555:	dc.b 4, $B3, $DA, $33, $E6, 3, $EA, 3, $EB	
00025FFA 04B3 C833 D403 D803 D9     SME_vJmm3_55E:	dc.b 4, $B3, $C8, $33, $D4, 3, $D8, 3, $D9	
00026003 0583 EC13 F553 F713 FD03+  SME_vJmm3_567:	dc.b 5, $83, $EC, $13, $F5, $53, $F7, $13, $FD, 3, $FF	
0002600E 0584 0014 0953 F713 FD03+  SME_vJmm3_572:	dc.b 5, $84, 0, $14, 9, $53, $F7, $13, $FD, 3, $FF	
00026019 0284 0B74 14               SME_vJmm3_57D:	dc.b 2, $84, $B, $74, $14	
0002601E 0534 9824 9C34 9F34 A304+  SME_vJmm3_582:	dc.b 5, $34, $98, $24, $9C, $34, $9F, $34, $A3, 4, $A7	
00026029 0384 1C24 2514 28          SME_vJmm3_58D:	dc.b 3, $84, $1C, $24, $25, $14, $28	
00026030 0504 A834 A934 AD34 B124+  SME_vJmm3_594:	dc.b 5, 4, $A8, $34, $A9, $34, $AD, $34, $B1, $24, $B5	
0002603B 0284 2A74 33               SME_vJmm3_59F:	dc.b 2, $84, $2A, $74, $33	
00026040 03B7 DF17 EB27 ED          SME_vJmm3_5A4:	dc.b 3, $B7, $DF, $17, $EB, $27, $ED	
00026047 0384 1C24 3B14 3E          SME_vJmm3_5AB:	dc.b 3, $84, $1C, $24, $3B, $14, $3E	
0002604E 03B7 F017 FC27 FE          SME_vJmm3_5B2:	dc.b 3, $B7, $F0, $17, $FC, $27, $FE	
00026055 0254 40B4 46               SME_vJmm3_5B9:	dc.b 2, $54, $40, $B4, $46	
0002605A 0374 5214 5AB4 5C          SME_vJmm3_5BE:	dc.b 3, $74, $52, $14, $5A, $B4, $5C	
00026061 0B74 6814 7004 7924 7504+  SME_vJmm3_5C5:	dc.b $B, $74, $68, $14, $70, 4, $79, $24, $75, 4, $78, 4, $73, 4, $72, 4, $74, 4, $85, 4, $87, 4, $83	
00026078 0674 7A14 7054 8204 7924+  SME_vJmm3_5DC:	dc.b 6, $74, $7A, $14, $70, $54, $82, 4, $79, $24, $75, 4, $78	
00026085 0354 C9B4 CF10 6D          SME_vJmm3_5E9:	dc.b 3, $54, $C9, $B4, $CF, $10, $6D	
0002608C 0714 C334 C514 BE04 BD14+  SME_vJmm3_5F0:	dc.b 7, $14, $C3, $34, $C5, $14, $BE, 4, $BD, $14, $B8, $24, $BA, $24, $C0	
0002609B 02F4 DB24 EB               SME_vJmm3_5FF:	dc.b 2, $F4, $DB, $24, $EB	
000260A0 04B6 A416 B026 B206 B1     SME_vJmm3_604:	dc.b 4, $B6, $A4, $16, $B0, $26, $B2, 6, $B1	
000260A9 03B6 B516 C126 C3          SME_vJmm3_60D:	dc.b 3, $B6, $B5, $16, $C1, $26, $C3	
000260B0 03B9 D129 DD19 E0          SME_vJmm3_614:	dc.b 3, $B9, $D1, $29, $DD, $19, $E0	
000260B7 0427 6F37 7237 7627 7A     SME_vJmm3_61B:	dc.b 4, $27, $6F, $37, $72, $37, $76, $27, $7A	
000260C0 01F7 7E                    SME_vJmm3_624:	dc.b 1, $F7, $7E	
000260C3 01F7 8E                    SME_vJmm3_627:	dc.b 1, $F7, $8E	
000260C6 01F7 9E                    SME_vJmm3_62A:	dc.b 1, $F7, $9E	
000260C9 01F7 AE                    SME_vJmm3_62D:	dc.b 1, $F7, $AE	
000260CC 01F7 BE                    SME_vJmm3_630:	dc.b 1, $F7, $BE	
000260D0 00                         		even
000260D0 00                         		even
000260D0                            
000260D0                            ; ---------------------------------------------------------------------------
000260D0                            ; Uncompressed graphics	- Sonic
000260D0                            ; ---------------------------------------------------------------------------
000260D0                            Art_Sonic:	incbin	"artunc\Sonic.bin"	; Sonic
0003C6D0                            		even
0003C6D0                            ; ---------------------------------------------------------------------------
0003C6D0                            ; Compressed graphics - various
0003C6D0                            ; ---------------------------------------------------------------------------
0003C6D0                            Unc_GShield:	incbin	"artunc\Gold Shield.bin"
0003CA30                            		even
0003CA30                            Unc_RedShield:	incbin	"artunc\Red Shield.bin"
0003CD90                            		even
0003CD90                            Unc_SpShield:	incbin	"artunc\Gray Shield.bin"
0003D0F0                            		even
0003D0F0                            Unc_Shield:	incbin	"artunc\Shield.bin"
0003D450                            		even
0003D450                            Unc_Stars:	incbin	"artunc\Invincibility Stars.bin"
0003D8D0                            		even
0003D8D0                            
0003D8D0                            Map_SSWalls:	include	"_maps\SS Walls.asm"
0003D8D0                            ; ---------------------------------------------------------------------------
0003D8D0                            ; Sprite mappings - walls of the special stage
0003D8D0                            ; ---------------------------------------------------------------------------
0003D8D0                            Map_SSWalls_internal:
0003D8D0 0000                       		dc.w byte_2C584-Map_SSWalls_internal
0003D8D2 0000                       		dc.w byte_2C58A-Map_SSWalls_internal
0003D8D4 0000                       		dc.w byte_2C590-Map_SSWalls_internal
0003D8D6 0000                       		dc.w byte_2C596-Map_SSWalls_internal
0003D8D8 0000                       		dc.w byte_2C59C-Map_SSWalls_internal
0003D8DA 0000                       		dc.w byte_2C5A2-Map_SSWalls_internal
0003D8DC 0000                       		dc.w byte_2C5A8-Map_SSWalls_internal
0003D8DE 0000                       		dc.w byte_2C5AE-Map_SSWalls_internal
0003D8E0 0000                       		dc.w byte_2C5B4-Map_SSWalls_internal
0003D8E2 0000                       		dc.w byte_2C5BA-Map_SSWalls_internal
0003D8E4 0000                       		dc.w byte_2C5C0-Map_SSWalls_internal
0003D8E6 0000                       		dc.w byte_2C5C6-Map_SSWalls_internal
0003D8E8 0000                       		dc.w byte_2C5CC-Map_SSWalls_internal
0003D8EA 0000                       		dc.w byte_2C5D2-Map_SSWalls_internal
0003D8EC 0000                       		dc.w byte_2C5D8-Map_SSWalls_internal
0003D8EE 0000                       		dc.w byte_2C5DE-Map_SSWalls_internal
0003D8F0 01                         byte_2C584:	dc.b 1
0003D8F1 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0003D8F6 01                         byte_2C58A:	dc.b 1
0003D8F7 F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
0003D8FC 01                         byte_2C590:	dc.b 1
0003D8FD F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
0003D902 01                         byte_2C596:	dc.b 1
0003D903 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
0003D908 01                         byte_2C59C:	dc.b 1
0003D909 F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
0003D90E 01                         byte_2C5A2:	dc.b 1
0003D90F F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
0003D914 01                         byte_2C5A8:	dc.b 1
0003D915 F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
0003D91A 01                         byte_2C5AE:	dc.b 1
0003D91B F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
0003D920 01                         byte_2C5B4:	dc.b 1
0003D921 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
0003D926 01                         byte_2C5BA:	dc.b 1
0003D927 F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
0003D92C 01                         byte_2C5C0:	dc.b 1
0003D92D F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
0003D932 01                         byte_2C5C6:	dc.b 1
0003D933 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
0003D938 01                         byte_2C5CC:	dc.b 1
0003D939 F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
0003D93E 01                         byte_2C5D2:	dc.b 1
0003D93F F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
0003D944 01                         byte_2C5D8:	dc.b 1
0003D945 F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
0003D94A 01                         byte_2C5DE:	dc.b 1
0003D94B F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
0003D950                            		even
0003D950                            		even
0003D950                            
0003D950                            ; ---------------------------------------------------------------------------
0003D950                            ; Compressed graphics - special stage
0003D950                            ; ---------------------------------------------------------------------------
0003D950                            Nem_SSWalls:	incbin	"artnem\Special Walls.bin" ; special stage walls
0003E288                            		even
0003E288                            Eni_SSBg1:	incbin	"tilemaps\SS Background 1.bin" ; special stage background (mappings)
0003E3BC                            		even
0003E3BC                            Nem_SSBgFish:	incbin	"artnem\Special Birds & Fish.bin" ; special stage birds and fish background
0003F04C                            		even
0003F04C                            Eni_SSBg2:	incbin	"tilemaps\SS Background 2.bin" ; special stage background (mappings)
0003F34C                            		even
0003F34C                            Nem_SSBgCloud:	incbin	"artnem\Special Clouds.bin" ; special stage clouds background
0003F840                            		even
0003F840                            Nem_SSGOAL:	incbin	"artnem\Special GOAL.bin" ; special stage GOAL block
0003F92E                            		even
0003F92E                            Nem_SSRBlock:	incbin	"artnem\Special R.bin"	; special stage R block
0003F9FE                            		even
0003F9FE                            Nem_SS1UpBlock:	incbin	"artnem\Special 1UP.bin" ; special stage 1UP block
0003FAF4                            		even
0003FAF4                            Nem_SSEmStars:	incbin	"artnem\Special Emerald Twinkle.bin" ; special stage stars from a collected emerald
0003FB52                            		even
0003FB52                            Nem_SSRedWhite:	incbin	"artnem\Special Red-White.bin" ; special stage red/white block
0003FBE4                            		even
0003FBE4                            Nem_SSZone1:	incbin	"artnem\Special ZONE1.bin" ; special stage ZONE1 block
0003FCA6                            		even
0003FCA6                            Nem_SSZone2:	incbin	"artnem\Special ZONE2.bin" ; ZONE2 block
0003FD74                            		even
0003FD74                            Nem_SSZone3:	incbin	"artnem\Special ZONE3.bin" ; ZONE3 block
0003FE40                            		even
0003FE40                            Nem_SSZone4:	incbin	"artnem\Special ZONE4.bin" ; ZONE4 block
0003FF08                            		even
0003FF08                            Nem_SSZone5:	incbin	"artnem\Special ZONE5.bin" ; ZONE5 block
0003FFD2                            		even
0003FFD2                            Nem_SSZone6:	incbin	"artnem\Special ZONE6.bin" ; ZONE6 block
000400A2                            		even
000400A2                            Nem_SSUpDown:	incbin	"artnem\Special UP-DOWN.bin" ; special stage UP/DOWN block
00040296                            		even
00040296                            Nem_SSEmerald:	incbin	"artnem\Special Emeralds.bin" ; special stage chaos emeralds
000403FE                            		even
000403FE                            Nem_SSGhost:	incbin	"artnem\Special Ghost.bin" ; special stage ghost block
000404AE                            		even
000404AE                            Nem_SSWBlock:	incbin	"artnem\Special W.bin"	; special stage W block
00040588                            		even
00040588                            Nem_SSGlass:	incbin	"artnem\Special Glass.bin" ; special stage destroyable glass block
0004060C                            		even
0004060C                            Nem_ResultEm:	incbin	"artnem\Special Result Emeralds.bin" ; chaos emeralds on special stage results screen
0004078A                            		even
0004078A                            ; ---------------------------------------------------------------------------
0004078A                            ; Compressed graphics - GHZ stuff
0004078A                            ; ---------------------------------------------------------------------------
0004078A                            Nem_Stalk:	incbin	"artnem\GHZ Flower Stalk.bin"
000407EC                            		even
000407EC                            Nem_Swing:	incbin	"artnem\GHZ Swinging Platform.bin"
00040906                            		even
00040906                            Nem_Bridge:	incbin	"artnem\GHZ Bridge.bin"
00040A24                            		even
00040A24                            Nem_GhzUnkBlock:incbin	"artnem\Unused - GHZ Block.bin"
00040A6C                            		even
00040A6C                            Nem_Ball:	incbin	"artnem\GHZ Giant Ball.bin"
00040C0A                            		even
00040C0A                            Nem_Spikes:	incbin	"artnem\Spikes.bin"
00040C86                            		even
00040C86                            Nem_GhzLog:	incbin	"artnem\Unused - GHZ Log.bin"
00040E9A                            		even
00040E9A                            Nem_SpikePole:	incbin	"artnem\GHZ Spiked Log.bin"
00040FC6                            		even
00040FC6                            Nem_PplRock:	incbin	"artnem\GHZ Purple Rock.bin"
0004111A                            		even
0004111A                            Nem_GhzWall1:	incbin	"artnem\GHZ Breakable Wall.bin"
000411CA                            		even
000411CA                            Nem_GhzWall2:	incbin	"artnem\GHZ Edge Wall.bin"
0004122A                            		even
0004122A                            ; ---------------------------------------------------------------------------
0004122A                            ; Compressed graphics - LZ stuff
0004122A                            ; ---------------------------------------------------------------------------
0004122A                            Nem_Water:	incbin	"artnem\LZ Water Surface.bin"
00041302                            		even
00041302                            Nem_Splash:	incbin	"artnem\LZ Water & Splashes.bin"
00041AF6                            		even
00041AF6                            Nem_LzSpikeBall:incbin	"artnem\LZ Spiked Ball & Chain.bin"
00041C88 00                         		even
00041C88                            Nem_FlapDoor:	incbin	"artnem\LZ Flapping Door.bin"
00041DF2                            		even
00041DF2                            Nem_Bubbles:	incbin	"artnem\LZ Bubbles & Countdown.bin"
00042432 00                         		even
00042432                            Nem_LzBlock3:	incbin	"artnem\LZ 32x16 Block.bin"
000424D4 00                         		even
000424D4                            Nem_LzDoor1:	incbin	"artnem\LZ Vertical Door.bin"
00042558                            		even
00042558                            Nem_Harpoon:	incbin	"artnem\LZ Harpoon.bin"
000426B4                            		even
000426B4                            Nem_LzPole:	incbin	"artnem\LZ Breakable Pole.bin"
0004273A                            		even
0004273A                            Nem_LzDoor2:	incbin	"artnem\LZ Horizontal Door.bin"
000428A8                            		even
000428A8                            Nem_LzWheel:	incbin	"artnem\LZ Wheel.bin"
00042D8A                            		even
00042D8A                            Nem_Gargoyle:	incbin	"artnem\LZ Gargoyle & Fireball.bin"
00042EFA                            		even
00042EFA                            Nem_LzBlock2:	incbin	"artnem\LZ Blocks.bin"
000431B2                            		even
000431B2                            Nem_LzPlatfm:	incbin	"artnem\LZ Rising Platform.bin"
000432F8                            		even
000432F8                            Nem_Cork:	incbin	"artnem\LZ Cork.bin"
00043422                            		even
00043422                            Nem_LzBlock1:	incbin	"artnem\LZ 32x32 Block.bin"
000435A8 00                         		even
000435A8                            ; ---------------------------------------------------------------------------
000435A8                            ; Compressed graphics - MZ stuff
000435A8                            ; ---------------------------------------------------------------------------
000435A8                            Nem_MzMetal:	incbin	"artnem\MZ Metal Blocks.bin"
00043836                            		even
00043836                            Nem_MzSwitch:	incbin	"artnem\MZ Switch.bin"
000438F4                            		even
000438F4                            Nem_MzGlass:	incbin	"artnem\MZ Green Glass Block.bin"
000439CC                            		even
000439CC                            Nem_UnkGrass:	incbin	"artnem\Unused - Grass.bin"
00043A20                            		even
00043A20                            Nem_MzFire:	incbin	"artnem\Fireballs.bin"
00043D3E 00                         		even
00043D3E                            Nem_Lava:	incbin	"artnem\MZ Lava.bin"
00044654                            		even
00044654                            Nem_MzBlock:	incbin	"artnem\MZ Green Pushable Block.bin"
000447EA                            		even
000447EA                            Nem_MzUnkBlock:	incbin	"artnem\Unused - MZ Background.bin"
00044872                            		even
00044872                            ; ---------------------------------------------------------------------------
00044872                            ; Compressed graphics - SLZ stuff
00044872                            ; ---------------------------------------------------------------------------
00044872                            Nem_Seesaw:	incbin	"artnem\SLZ Seesaw.bin"
00044AAE                            		even
00044AAE                            Nem_SlzSpike:	incbin	"artnem\SLZ Little Spikeball.bin"
00044BF4                            		even
00044BF4                            Nem_Fan:	incbin	"artnem\SLZ Fan.bin"
00044E38                            		even
00044E38                            Nem_SlzWall:	incbin	"artnem\SLZ Breakable Wall.bin"
00044ED4 00                         		even
00044ED4                            Nem_Pylon:	incbin	"artnem\SLZ Pylon.bin"
00044FB6                            		even
00044FB6                            Nem_SlzSwing:	incbin	"artnem\SLZ Swinging Platform.bin"
00045198                            		even
00045198                            Nem_SlzBlock:	incbin	"artnem\SLZ 32x32 Block.bin"
000452A4                            		even
000452A4                            Nem_SlzCannon:	incbin	"artnem\SLZ Cannon.bin"
00045348                            		even
00045348                            ; ---------------------------------------------------------------------------
00045348                            ; Compressed graphics - SYZ stuff
00045348                            ; ---------------------------------------------------------------------------
00045348                            Nem_Bumper:	incbin	"artnem\SYZ Bumper.bin"
000454D8                            		even
000454D8                            Nem_SyzSpike2:	incbin	"artnem\SYZ Small Spikeball.bin"
0004553A                            		even
0004553A                            Nem_LzSwitch:	incbin	"artnem\Switch.bin"
0004560A 00                         		even
0004560A                            Nem_SyzSpike1:	incbin	"artnem\SYZ Large Spikeball.bin"
00045898                            		even
00045898                            ; ---------------------------------------------------------------------------
00045898                            ; Compressed graphics - SBZ stuff
00045898                            ; ---------------------------------------------------------------------------
00045898                            Nem_SbzWheel1:	incbin	"artnem\SBZ Running Disc.bin"
000458EC                            		even
000458EC                            Nem_SbzWheel2:	incbin	"artnem\SBZ Junction Wheel.bin"
00045B88                            		even
00045B88                            Nem_Cutter:	incbin	"artnem\SBZ Pizza Cutter.bin"
00045D78                            		even
00045D78                            Nem_Stomper:	incbin	"artnem\SBZ Stomper.bin"
00045F16                            		even
00045F16                            Nem_SpinPform:	incbin	"artnem\SBZ Spinning Platform.bin"
00046246                            		even
00046246                            Nem_TrapDoor:	incbin	"artnem\SBZ Trapdoor.bin"
00046424                            		even
00046424                            Nem_SbzFloor:	incbin	"artnem\SBZ Collapsing Floor.bin"
0004647C                            		even
0004647C                            Nem_Electric:	incbin	"artnem\SBZ Electrocuter.bin"
0004662E 00                         		even
0004662E                            Nem_SbzBlock:	incbin	"artnem\SBZ Vanishing Block.bin"
0004672C                            		even
0004672C                            Nem_FlamePipe:	incbin	"artnem\SBZ Flaming Pipe.bin"
000468BA                            		even
000468BA                            Nem_SbzDoor1:	incbin	"artnem\SBZ Small Vertical Door.bin"
00046954                            		even
00046954                            Nem_SlideFloor:	incbin	"artnem\SBZ Sliding Floor Trap.bin"
000469AC                            		even
000469AC                            Nem_SbzDoor2:	incbin	"artnem\SBZ Large Horizontal Door.bin"
00046AA8                            		even
00046AA8                            Nem_Girder:	incbin	"artnem\SBZ Crushing Girder.bin"
00046BBE                            		even
00046BBE                            ; ---------------------------------------------------------------------------
00046BBE                            ; Compressed graphics - enemies
00046BBE                            ; ---------------------------------------------------------------------------
00046BBE                            Nem_BallHog:	incbin	"artnem\Enemy Ball Hog.bin"
00047006 00                         		even
00047006                            Nem_Crabmeat:	incbin	"artnem\Enemy Crabmeat.bin"
000474F6 00                         		even
000474F6                            Nem_Mozzietron:	incbin	"artnem\Enemy Mozzietron.bin"
000477DA 00                         		even
000477DA                            Nem_Buzz:	incbin	"artnem\Enemy Buzz Bomber.bin"
00047B4E 00                         		even
00047B4E                            Nem_UnkExplode:	incbin	"artnem\Unused - Explosion.bin"
00047D36                            		even
00047D36                            Nem_Burrobot:	incbin	"artnem\Enemy Burrobot.bin"
00048464 00                         		even
00048464                            Nem_Chopper:	incbin	"artnem\Enemy Chopper.bin"
000486EC 00                         		even
000486EC                            Nem_Jaws:	incbin	"artnem\Enemy Jaws.bin"
00048988 00                         		even
00048988                            Nem_Roller:	incbin	"artnem\Enemy Roller.bin"
00048F5C                            		even
00048F5C                            Nem_Motobug:	incbin	"artnem\Enemy Motobug.bin"
000491EE                            		even
000491EE                            Nem_Newtron:	incbin	"artnem\Enemy Newtron.bin"
00049838 00                         		even
00049838                            Nem_Yadrin:	incbin	"artnem\Enemy Yadrin.bin"
00049C74                            		even
00049C74                            Nem_Basaran:	incbin	"artnem\Enemy Basaran.bin"
00049F82 00                         		even
00049F82                            Nem_Splats:	incbin	"artnem\Enemy Splats.bin"
0004A1E2                            		even
0004A1E2                            Nem_Bomb:	incbin	"artnem\Enemy Bomb.bin"
0004A4E0                            		even
0004A4E0                            Nem_Orbinaut:	incbin	"artnem\Enemy Orbinaut.bin"
0004A70C 00                         		even
0004A70C                            Nem_Cater:	incbin	"artnem\Enemy Caterkiller.bin"
0004A89A                            		even
0004A89A                            ; ---------------------------------------------------------------------------
0004A89A                            ; Compressed graphics - various
0004A89A                            ; ---------------------------------------------------------------------------
0004A89A                            Nem_TitleCard:	incbin	"artnem\Title Cards.bin"
0004AEE8 00                         		even
0004AEE8                            Nem_Hud:	incbin	"artnem\HUD.bin"	; HUD (rings, time, score)
0004B060 00                         		even
0004B060                            Nem_Lives:	incbin	"artnem\HUD - Life Counter Icon.bin"
0004B184                            		even
0004B184                            Nem_Ring:	incbin	"artnem\Rings.bin"
0004B2D8 00                         		even
0004B2D8                            Nem_Monitors:	incbin	"artnem\Monitors.bin"
0004B7D2 00                         		even
0004B7D2                            Nem_Explode:	incbin	"artnem\Explosion.bin"
0004BE46                            		even
0004BE46                            Nem_Points:	incbin	"artnem\Points.bin"	; points from destroyed enemy or object
0004BEE0 00                         		even
0004BEE0                            Nem_GameOver:	incbin	"artnem\Game Over.bin"	; game over / time over
0004C072                            		even
0004C072                            Nem_HSpring:	incbin	"artnem\Spring Horizontal.bin"
0004C190 00                         		even
0004C190                            Nem_VSpring:	incbin	"artnem\Spring Vertical.bin"
0004C27C                            		even
0004C27C                            Nem_SignPost:	incbin	"artnem\Signpost.bin"	; end of level signpost
0004C7F4 00                         		even
0004C7F4                            Nem_Lamp:	incbin	"artnem\Lamppost.bin"
0004C8DE                            		even
0004C8DE                            Nem_BigFlash:	incbin	"artnem\Giant Ring Flash.bin"
0004CA52                            		even
0004CA52                            Nem_Bonus:	incbin	"artnem\Hidden Bonuses.bin" ; hidden bonuses at end of a level
0004CDDA 00                         		even
0004CDDA                            ; ---------------------------------------------------------------------------
0004CDDA                            ; Compressed graphics - continue screen
0004CDDA                            ; ---------------------------------------------------------------------------
0004CDDA                            Nem_ContSonic:	incbin	"artnem\Continue Screen Sonic.bin"
0004D08A                            		even
0004D08A                            Nem_MiniSonic:	incbin	"artnem\Continue Screen Stuff.bin"
0004D2C4                            		even
0004D2C4                            ; ---------------------------------------------------------------------------
0004D2C4                            ; Compressed graphics - animals
0004D2C4                            ; ---------------------------------------------------------------------------
0004D2C4                            Nem_Rabbit:	incbin	"artnem\Animal Rabbit.bin"
0004D41C                            		even
0004D41C                            Nem_Chicken:	incbin	"artnem\Animal Chicken.bin"
0004D578                            		even
0004D578                            Nem_BlackBird:	incbin	"artnem\Animal Blackbird.bin"
0004D6F4                            		even
0004D6F4                            Nem_Seal:	incbin	"artnem\Animal Seal.bin"
0004D810                            		even
0004D810                            Nem_Pig:	incbin	"artnem\Animal Pig.bin"
0004D98A                            		even
0004D98A                            Nem_Flicky:	incbin	"artnem\Animal Flicky.bin"
0004DAC4                            		even
0004DAC4                            Nem_Squirrel:	incbin	"artnem\Animal Squirrel.bin"
0004DC20                            		even
0004DC20                            ; ---------------------------------------------------------------------------
0004DC20                            ; Compressed graphics - primary patterns and block mappings
0004DC20                            ; ---------------------------------------------------------------------------
0004DC20                            Blk16_GHZ:	incbin	"map16\GHZ.bin"
0004E622                            		even
0004E622                            Nem_GHZ_1st:	incbin	"artnem\8x8 - GHZ1.bin"	; GHZ primary patterns
0004FECA                            		even
0004FECA                            Nem_GHZ_2nd:	incbin	"artnem\8x8 - GHZ2.bin"	; GHZ secondary patterns
0005145A                            		even
0005145A                            Blk256_GHZ:	incbin	"map256\GHZ.bin"
00053844                            		even
00053844                            Blk16_TS:	incbin	"map16\TS.bin"
00053AC8                            		even
00053AC8                            Nem_TS_1st:	incbin	"artnem\8x8 - TS1.bin"	; GHZ primary patterns
00054C06                            		even
00054C06                            Blk256_TS:	incbin	"map256\TS.bin"
000557B4                            		even
000557B4                            Blk16_LZ:	incbin	"map16\LZ.bin"
00056A30                            		even
00056A30                            Nem_LZ:		incbin	"artnem\8x8 - LZ.bin"	; LZ primary patterns
00059F02                            		even
00059F02                            Blk256_LZ:	incbin	"map256\LZ.bin"
0005D3C0                            		even
0005D3C0                            Blk16_MZ:	incbin	"map16\MZ.bin"
0005DBC8                            		even
0005DBC8                            Nem_MZ:		incbin	"artnem\8x8 - MZ.bin"	; MZ primary patterns
000605C0                            		even
000605C0                            		incbin	"map256\MZ (JP1).bin"
0006253A                            		even
0006253A                            Blk16_SLZ:	incbin	"map16\SLZ.bin"
00062BBC                            		even
00062BBC                            Nem_SLZ:	incbin	"artnem\8x8 - SLZ.bin"	; SLZ primary patterns
00066626                            		even
00066626                            Blk256_SLZ:	incbin	"map256\SLZ.bin"
00068A30                            		even
00068A30                            Blk16_SYZ:	incbin	"map16\SYZ.bin"
000695B6                            		even
000695B6                            Nem_SYZ:	incbin	"artnem\8x8 - SYZ.bin"	; SYZ primary patterns
0006C9A6                            		even
0006C9A6                            Blk256_SYZ:	incbin	"map256\SYZ.bin"
0006DD56                            		even
0006DD56                            Blk16_SBZ:	incbin	"map16\SBZ.bin"
0006E950                            		even
0006E950                            Nem_SBZ:	incbin	"artnem\8x8 - SBZ.bin"	; SBZ primary patterns
00071192                            		even
00071192                            		incbin	"map256\SBZ (JP1).bin"
00071D1E                            		even
00071D1E                            ; ---------------------------------------------------------------------------
00071D1E                            ; Compressed graphics - bosses and ending sequence
00071D1E                            ; ---------------------------------------------------------------------------
00071D1E                            Nem_Eggman:	incbin	"artnem\Boss - Main.bin"
0007259A 00                         		even
0007259A                            Nem_Weapons:	incbin	"artnem\Boss - Weapons.bin"
00072884                            		even
00072884                            Nem_Prison:	incbin	"artnem\Prison Capsule.bin"
00073108                            		even
00073108                            Nem_Sbz2Eggman:	incbin	"artnem\Boss - Eggman in SBZ2 & FZ.bin"
00073934                            		even
00073934                            Nem_FzBoss:	incbin	"artnem\Boss - Final Zone.bin"
00074102 00                         		even
00074102                            Nem_FzEggman:	incbin	"artnem\Boss - Eggman after FZ Fight.bin"
00074682                            		even
00074682                            Nem_Exhaust:	incbin	"artnem\Boss - Exhaust Flame.bin"
000747A2                            		even
000747A2                            Nem_EndEm:	incbin	"artnem\Ending - Emeralds.bin"
000749AA 00                         		even
000749AA                            Nem_EndSonic:	incbin	"artnem\Ending - Sonic.bin"
00075B88                            		even
00075B88                            Nem_TryAgain:	incbin	"artnem\Ending - Try Again.bin"
000764CC                            		even
000764CC                            		even
000764CC                            Kos_EndFlowers:	incbin	"artkos\Flowers at Ending.bin" ; ending sequence animated flowers
00076A5C                            		even
00076A5C                            Nem_EndFlower:	incbin	"artnem\Ending - Flowers.bin"
00076CE4                            		even
00076CE4                            Nem_CreditText:	incbin	"artnem\Ending - Credits.bin"
000772E2                            		even
000772E2                            Nem_EndStH:	incbin	"artnem\Ending - StH Logo.bin"
0007756A                            		even
0007756A                            
0007756A FFFF FFFF FFFF FFFF FFFF+  		dcb.b $40,$FF
000775AA                            ; ---------------------------------------------------------------------------
000775AA                            ; Collision data
000775AA                            ; ---------------------------------------------------------------------------
000775AA                            AngleMap:	incbin	"collide\Angle Map.bin"
000776AA                            		even
000776AA                            CollArray1:	incbin	"collide\Collision Array (Normal).bin"
000786AA                            		even
000786AA                            CollArray2:	incbin	"collide\Collision Array (Rotated).bin"
000796AA                            		even
000796AA                            Col_GHZ:	incbin	"collide\GHZ.bin"	; GHZ index
00079868 00                         		even
00079868                            Col_LZ:		incbin	"collide\LZ.bin"	; LZ index
00079B26                            		even
00079B26                            Col_MZ:		incbin	"collide\MZ.bin"	; MZ index
00079CA0 00                         		even
00079CA0                            Col_SLZ:	incbin	"collide\SLZ.bin"	; SLZ index
00079E94                            		even
00079E94                            Col_SYZ:	incbin	"collide\SYZ.bin"	; SYZ index
0007A080 00                         		even
0007A080                            Col_SBZ:	incbin	"collide\SBZ.bin"	; SBZ index
0007A250 00                         		even
0007A250                            ; ---------------------------------------------------------------------------
0007A250                            ; Special Stage layouts
0007A250                            ; ---------------------------------------------------------------------------
0007A250                            SS_1:		incbin	"sslayout\1.bin"
0007A4CA                            		even
0007A4CA                            SS_2:		incbin	"sslayout\2.bin"
0007A8DC                            		even
0007A8DC                            SS_3:		incbin	"sslayout\3.bin"
0007AC38                            		even
0007AC38                            SS_4:		incbin	"sslayout\4.bin"
0007B112                            		even
0007B112                            	SS_5:		incbin	"sslayout\5 (JP1).bin"
0007B5C2                            			even
0007B5C2                            	SS_6:		incbin	"sslayout\6 (JP1).bin"
0007B8B4                            		even
0007B8B4                            ; ---------------------------------------------------------------------------
0007B8B4                            ; Animated uncompressed graphics
0007B8B4                            ; ---------------------------------------------------------------------------
0007B8B4                            Art_GhzWater:	incbin	"artunc\GHZ Waterfall.bin"
0007BAB4                            		even
0007BAB4                            Art_GhzFlower1:	incbin	"artunc\GHZ Flower Large.bin"
0007BEB4                            		even
0007BEB4                            Art_GhzFlower2:	incbin	"artunc\GHZ Flower Small.bin"
0007C334                            		even
0007C334                            Art_MzLava1:	incbin	"artunc\MZ Lava Surface.bin"
0007C634                            		even
0007C634                            Art_MzLava2:	incbin	"artunc\MZ Lava.bin"
0007CC34                            		even
0007CC34                            Art_MzTorch:	incbin	"artunc\MZ Background Torch.bin"
0007CF34                            		even
0007CF34                            Art_SbzSmoke:	incbin	"artunc\SBZ Background Smoke.bin"
0007D9B4                            		even
0007D9B4                            
0007D9B4                            ; ---------------------------------------------------------------------------
0007D9B4                            ; Level	layout index
0007D9B4                            ; ---------------------------------------------------------------------------
0007D9B4                            Level_Index:
0007D9B4                            		; GHZ
0007D9B4 0000 0000 0000             		dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
0007D9BA 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
0007D9C0 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
0007D9C6 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
0007D9CC                            		; LZ
0007D9CC 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
0007D9D2 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
0007D9D8 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
0007D9DE 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
0007D9E4                            		; MZ
0007D9E4 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
0007D9EA 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
0007D9F0 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
0007D9F6 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
0007D9FC                            		; SLZ
0007D9FC 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0007DA02 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0007DA08 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0007DA0E 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
0007DA14                            		; SYZ
0007DA14 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
0007DA1A 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
0007DA20 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
0007DA26 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
0007DA2C                            		; SBZ
0007DA2C 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
0007DA32 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
0007DA38 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
0007DA3E 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
0007DA44                            		; Ending
0007DA44 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0007DA4A 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0007DA50 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0007DA56 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0007DA5C                            
0007DA5C                            Level_GHZ1:	incbin	"levels\ghz1.bin"
0007DC8E                            		even
0007DC8E 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
0007DC92                            Level_GHZ2:	incbin	"levels\ghz2.bin"
0007DDB4                            		even
0007DDB4 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
0007DDB8                            Level_GHZ3:	incbin	"levels\ghz3.bin"
0007E03A                            		even
0007E03A                            Level_GHZbg:	incbin	"levels\ghzbg.bin"
0007E07C                            		even
0007E07C 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
0007E080 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
0007E084                            
0007E084                            Level_LZ1:	incbin	"levels\lz1.bin"
0007E146                            		even
0007E146                            Level_LZbg:	incbin	"levels\lzbg.bin"
0007E248                            		even
0007E248 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
0007E24C                            Level_LZ2:	incbin	"levels\lz2.bin"
0007E2E6                            		even
0007E2E6 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
0007E2EA                            Level_LZ3:	incbin	"levels\lz3.bin"
0007E404                            		even
0007E404 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
0007E408                            Level_SBZ3:	incbin	"levels\sbz3.bin"
0007E4C2                            		even
0007E4C2 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
0007E4C6                            
0007E4C6                            Level_MZ1:	incbin	"levels\mz1.bin"
0007E5B8                            		even
0007E5B8                            Level_MZ1bg:	incbin	"levels\mz1bg.bin"
0007E6DA                            		even
0007E6DA                            Level_MZ2:	incbin	"levels\mz2.bin"
0007E7CC                            		even
0007E7CC                            Level_MZ2bg:	incbin	"levels\mz2bg.bin"
0007E8EE                            		even
0007E8EE 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
0007E8F2                            Level_MZ3:	incbin	"levels\mz3.bin"
0007E964                            		even
0007E964                            Level_MZ3bg:	incbin	"levels\mz3bg.bin"
0007EA86                            		even
0007EA86 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
0007EA8A 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
0007EA8E                            
0007EA8E                            Level_SLZ1:	incbin	"levels\slz1.bin"
0007EBA0                            		even
0007EBA0                            Level_SLZbg:	incbin	"levels\slzbg.bin"
0007EC1A                            		even
0007EC1A                            Level_SLZ2:	incbin	"levels\slz2.bin"
0007ED0A                            		even
0007ED0A                            Level_SLZ3:	incbin	"levels\slz3.bin"
0007EE24                            		even
0007EE24 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
0007EE28                            
0007EE28                            Level_SYZ1:	incbin	"levels\syz1.bin"
0007EF2C                            		even
0007EF2C                            		incbin	"levels\syzbg (JP1).bin"
0007EF66                            		even
0007EF66 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
0007EF6A                            Level_SYZ2:	incbin	"levels\syz2.bin"
0007F06E                            		even
0007F06E 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
0007F072                            Level_SYZ3:	incbin	"levels\syz3.bin"
0007F1CC 00                         		even
0007F1CC 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
0007F1D0 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
0007F1D4                            
0007F1D4                            Level_SBZ1:	incbin	"levels\sbz1.bin"
0007F2F6                            		even
0007F2F6                            Level_SBZ1bg:	incbin	"levels\sbz1bg.bin"
0007F334                            		even
0007F334                            Level_SBZ2:	incbin	"levels\sbz2.bin"
0007F476                            		even
0007F476                            Level_SBZ2bg:	incbin	"levels\sbz2bg.bin"
0007F5E0                            		even
0007F5E0 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
0007F5E4 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
0007F5E8                            Level_End:	incbin	"levels\ending.bin"
0007F618 00                         		even
0007F618 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
0007F61C                            
0007F61C                            
0007F61C                            Art_BigRing:	incbin	"artunc\Giant Ring.bin"
0008025C                            		even
0008025C                            
00080300                            
00080300                            ; ---------------------------------------------------------------------------
00080300                            ; Sprite locations index
00080300                            ; ---------------------------------------------------------------------------
00080300                            ObjPos_Index:
00080300                            		; GHZ
00080300 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080304 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080308 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008030C 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080310                            		; LZ
00080310 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080314 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080318 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008031C 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080320                            		; MZ
00080320 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080324 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080328 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008032C 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080330                            		; SLZ
00080330 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080334 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080338 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008033C 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080340                            		; SYZ
00080340 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080344 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080348 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008034C 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080350                            		; SBZ
00080350 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080354 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080358 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008035C 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080360                            		; Ending
00080360 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080364 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080368 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008036C 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080370                            		; --- Put extra object data here. ---
00080370                            ObjPosLZPlatform_Index:
00080370 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
00080374 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
00080378 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
0008037C 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
00080380                            ObjPosSBZPlatform_Index:
00080380 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
00080384 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
00080388 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
0008038C 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
00080390 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
00080396                            ObjPos_GHZ1:	incbin	"objpos\ghz1.bin"
000809F6                            		even
000809F6                            ObjPos_GHZ2:	incbin	"objpos\ghz2.bin"
00080E4C                            		even
00080E4C                            		incbin	"objpos\ghz3 (JP1).bin"
0008105C                            		even
0008105C                            		incbin	"objpos\lz1 (JP1).bin"
00081092                            		even
00081092                            ObjPos_LZ2:	incbin	"objpos\lz2.bin"
000813D4                            		even
000813D4                            		incbin	"objpos\lz3 (JP1).bin"
00081998                            		even
00081998                            ObjPos_SBZ3:	incbin	"objpos\sbz3.bin"
00082028                            		even
00082028                            ObjPos_LZ1pf1:	incbin	"objpos\lz1pf1.bin"
0008205A                            		even
0008205A                            ObjPos_LZ1pf2:	incbin	"objpos\lz1pf2.bin"
0008208C                            		even
0008208C                            ObjPos_LZ2pf1:	incbin	"objpos\lz2pf1.bin"
000820BE                            		even
000820BE                            ObjPos_LZ2pf2:	incbin	"objpos\lz2pf2.bin"
000820F0                            		even
000820F0                            ObjPos_LZ3pf1:	incbin	"objpos\lz3pf1.bin"
0008213A                            		even
0008213A                            ObjPos_LZ3pf2:	incbin	"objpos\lz3pf2.bin"
00082178                            		even
00082178                            		incbin	"objpos\mz1 (JP1).bin"
0008275A                            		even
0008275A                            ObjPos_MZ2:	incbin	"objpos\mz2.bin"
00082A84                            		even
00082A84                            ObjPos_MZ3:	incbin	"objpos\mz3.bin"
00082C6A                            		even
00082C6A                            ObjPos_SLZ1:	incbin	"objpos\slz1.bin"
0008319E                            		even
0008319E                            ObjPos_SLZ2:	incbin	"objpos\slz2.bin"
0008360C                            		even
0008360C                            ObjPos_SLZ3:	incbin	"objpos\slz3.bin"
00083BEE                            		even
00083BEE                            ObjPos_SYZ1:	incbin	"objpos\syz1.bin"
00083C48                            		even
00083C48                            ObjPos_SYZ2:	incbin	"objpos\syz2.bin"
00083C72                            		even
00083C72                            		incbin	"objpos\syz3 (JP1).bin"
00083CA2                            		even
00083CA2                            		incbin	"objpos\sbz1 (JP1).bin"
00083CEA                            		even
00083CEA                            ObjPos_SBZ2:	incbin	"objpos\sbz2.bin"
00083D14                            		even
00083D14                            ObjPos_FZ:	incbin	"objpos\fz.bin"
00083D38                            		even
00083D38                            ObjPos_SBZ1pf1:	incbin	"objpos\sbz1pf1.bin"
00083D6A                            		even
00083D6A                            ObjPos_SBZ1pf2:	incbin	"objpos\sbz1pf2.bin"
00083D9C                            		even
00083D9C                            ObjPos_SBZ1pf3:	incbin	"objpos\sbz1pf3.bin"
00083DCE                            		even
00083DCE                            ObjPos_SBZ1pf4:	incbin	"objpos\sbz1pf4.bin"
00083E00                            		even
00083E00                            ObjPos_SBZ1pf5:	incbin	"objpos\sbz1pf5.bin"
00083E32                            		even
00083E32                            ObjPos_SBZ1pf6:	incbin	"objpos\sbz1pf6.bin"
00083E6A                            		even
00083E6A                            ObjPos_End:	incbin	"objpos\ending.bin"
00083FC6                            		even
00083FC6 FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
00083FCC                            
00083FCC                            		dcb.b $63C,$FF
00084608                            		;dcb.b ($10000-(*%$10000))-(EndOfRom-SoundDriver),$FF
00084608                            
00084608                            SoundDriver:	include "s1.sounddriver.asm"
00084608                            ; ---------------------------------------------------------------------------
00084608                            ; Modified (early?) SMPS 68k Type 1b
00084608                            ; ---------------------------------------------------------------------------
00084608                            ; Go_SoundTypes:
00084608 0000 0000                  Go_SoundPriorities:	dc.l SoundPriorities
0008460C                            ; Go_SoundD0:
0008460C 0000 0000                  Go_SpecSoundIndex:	dc.l SpecSoundIndex
00084610 0000 0000                  Go_MusicIndex:		dc.l MusicIndex
00084614 0000 0000                  Go_SoundIndex:		dc.l SoundIndex
00084618                            ; off_719A0:
00084618 0000 0000                  Go_SpeedUpIndex:	dc.l SpeedUpIndex
0008461C 0000 0000                  Go_PSGIndex:		dc.l PSG_Index
00084620                            ; ---------------------------------------------------------------------------
00084620                            ; PSG instruments used in music
00084620                            ; ---------------------------------------------------------------------------
00084620                            PSG_Index:
00084620 0000 0000 0000 0000 0000+  		dc.l PSG1, PSG2, PSG3
0008462C 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
00084638 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
00084644                            PSG1:		incbin	"sound/psg/psg1.bin"
0008465B                            PSG2:		incbin	"sound/psg/psg2.bin"
00084662                            PSG3:		incbin	"sound/psg/psg3.bin"
00084673                            PSG4:		incbin	"sound/psg/psg4.bin"
0008467E                            PSG6:		incbin	"sound/psg/psg6.bin"
0008468D                            PSG5:		incbin	"sound/psg/psg5.bin"
000846B7                            PSG7:		incbin	"sound/psg/psg7.bin"
000846D3                            PSG8:		incbin	"sound/psg/psg8.bin"
000846FB                            PSG9:		incbin	"sound/psg/psg9.bin"
0008470C                            ; ---------------------------------------------------------------------------
0008470C                            ; New tempos for songs during speed shoes
0008470C                            ; ---------------------------------------------------------------------------
0008470C                            ; DANGER! several songs will use the first few bytes of MusicIndex as their main
0008470C                            ; tempos while speed shoes are active. If you don't want that, you should add
0008470C                            ; their "correct" sped-up main tempos to the list.
0008470C                            ; byte_71A94:
0008470C                            SpeedUpIndex:
0008470C 07                         		dc.b 7		; GHZ
0008470D 72                         		dc.b $72	; LZ
0008470E 73                         		dc.b $73	; MZ
0008470F 26                         		dc.b $26	; SLZ
00084710 15                         		dc.b $15	; SYZ
00084711 08                         		dc.b 8		; SBZ
00084712 FF                         		dc.b $FF	; Invincibility
00084713 05                         		dc.b 5		; Extra Life
00084714                            		;dc.b ?		; Special Stage
00084714                            		;dc.b ?		; Title Screen
00084714                            		;dc.b ?		; Ending
00084714                            		;dc.b ?		; Boss
00084714                            		;dc.b ?		; FZ
00084714                            		;dc.b ?		; Sonic Got Through
00084714                            		;dc.b ?		; Game Over
00084714                            		;dc.b ?		; Continue Screen
00084714                            		;dc.b ?		; Credits
00084714                            		;dc.b ?		; Drowning
00084714                            		;dc.b ?		; Get Emerald
00084714                            
00084714                            ; ---------------------------------------------------------------------------
00084714                            ; Music	Pointers
00084714                            ; ---------------------------------------------------------------------------
00084714                            MusicIndex:
00084714 0000 0000                  ptr_mus81:	dc.l Music81
00084718 0000 0000                  ptr_mus82:	dc.l Music82
0008471C 0000 0000                  ptr_mus83:	dc.l Music83
00084720 0000 0000                  ptr_mus84:	dc.l Music84
00084724 0000 0000                  ptr_mus85:	dc.l Music85
00084728 0000 0000                  ptr_mus86:	dc.l Music86
0008472C 0000 0000                  ptr_mus87:	dc.l Music87
00084730 0000 0000                  ptr_mus88:	dc.l Music88
00084734 0000 0000                  ptr_mus89:	dc.l Music89
00084738 0000 0000                  ptr_mus8A:	dc.l Music8A
0008473C 0000 0000                  ptr_mus8B:	dc.l Music8B
00084740 0000 0000                  ptr_mus8C:	dc.l Music8C
00084744 0000 0000                  ptr_mus8D:	dc.l Music8D
00084748 0000 0000                  ptr_mus8E:	dc.l Music8E
0008474C 0000 0000                  ptr_mus8F:	dc.l Music8F
00084750 0000 0000                  ptr_mus90:	dc.l Music90
00084754 0000 0000                  ptr_mus91:	dc.l Music91
00084758 0000 0000                  ptr_mus92:	dc.l Music92
0008475C 0000 0000                  ptr_mus93:	dc.l Music93
00084760 0000 0000                  ptr_mus94:	dc.l Music94
00084764 0000 0000                  ptr_mus95:	dc.l Music95
00084768 0000 0000                  ptr_mus96:	dc.l Music96
0008476C 0000 0000                  ptr_mus97:	dc.l Music97
00084770 0000 0000                  ptr_mus98:	dc.l Music98
00084774                            ptr_musend
00084774                            ; ---------------------------------------------------------------------------
00084774                            ; Priority of sound. New music or SFX must have a priority higher than or equal
00084774                            ; to what is stored in v_sndprio or it won't play. If bit 7 of new priority is
00084774                            ; set ($80 and up), the new music or SFX will not set its priority -- meaning
00084774                            ; any music or SFX can override it (as long as it can override whatever was
00084774                            ; playing before). Usually, SFX will only override SFX, special SFX ($D0-$DF)
00084774                            ; will only override special SFX and music will only override music.
00084774                            ; ---------------------------------------------------------------------------
00084774                            ; SoundTypes:
00084774                            SoundPriorities:
00084774 9090 9090 9090 9090 9090+  		dc.b     $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $81
00084783 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $90
00084793 8070 7070 7070 7070 7070+  		dc.b $80,$70,$70,$70,$70,$70,$70,$70,$70,$70,$68,$70,$70,$70,$60,$70	; $A0
000847A3 7060 7060 7070 7070 7070+  		dc.b $70,$60,$70,$60,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$7F	; $B0
000847B3 6070 7070 7070 7070 7070+  		dc.b $60,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70	; $C0
000847C3 8080 8080 8080 8080 8080+  		dc.b $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80	; $D0
000847D3 9090 9090 90               		dc.b $90,$90,$90,$90,$90                                            	; $E0
000847D8                            
000847D8                            ; ---------------------------------------------------------------------------
000847D8                            ; Subroutine to update music more than once per frame
000847D8                            ; (Called by horizontal & vert. interrupts)
000847D8                            ; ---------------------------------------------------------------------------
000847D8                            
000847D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000847D8                            
000847D8                            ; sub_71B4C:
000847D8                            UpdateMusic:
000847D8 33FC 0100 00A1 1100        		stopZ80
000847E0 4E71                       		nop	
000847E2 4E71                       		nop	
000847E4 4E71                       		nop	
000847E6                            ; loc_71B5A:
000847E6                            @updateloop:
000847E6 0839 0000 00A1 1100        		btst	#0,(z80_bus_request).l		; Is the z80 busy?
000847EE 66F6                       		bne.s	@updateloop			; If so, wait
000847F0                            
000847F0 0839 0007 00A0 1FFD        		btst	#7,(z80_dac_status).l		; Is DAC accepting new samples?
000847F8 6700                       		beq.s	@driverinput			; Branch if yes
000847FA 33FC 0000 00A1 1100        		startZ80
00084802 4E71                       		nop	
00084804 4E71                       		nop	
00084806 4E71                       		nop	
00084808 4E71                       		nop	
0008480A 4E71                       		nop	
0008480C 60CA                       		bra.s	UpdateMusic
0008480E                            ; ===========================================================================
0008480E                            ; loc_71B82:
0008480E                            @driverinput:
0008480E 4DF9 00FF F000             		lea	(v_snddriver_ram&$FFFFFF).l,a6
00084814 422E 000E                  		clr.b	f_voice_selector(a6)
00084818 4A2E 0003                  		tst.b	f_pausemusic(a6)		; is music paused?
0008481C 6600 0000                  		bne.w	PauseMusic			; if yes, branch
00084820 532E 0001                  		subq.b	#1,v_main_tempo_timeout(a6)	; Has main tempo timer expired?
00084824 6600                       		bne.s	@skipdelay
00084826 4EBA 0000                  		jsr	TempoWait(pc)
0008482A                            ; loc_71B9E:
0008482A                            @skipdelay:
0008482A 102E 0004                  		move.b	v_fadeout_counter(a6),d0
0008482E 6700                       		beq.s	@skipfadeout
00084830 4EBA 0000                  		jsr	DoFadeOut(pc)
00084834                            ; loc_71BA8:
00084834                            @skipfadeout:
00084834 4A2E 0024                  		tst.b	f_fadein_flag(a6)
00084838 6700                       		beq.s	@skipfadein
0008483A 4EBA 0000                  		jsr	DoFadeIn(pc)
0008483E                            ; loc_71BB2:
0008483E                            @skipfadein:
0008483E                            		; DANGER! The following line only checks v_soundqueue0 and v_soundqueue1, breaking v_soundqueue2.
0008483E 4A6E 000A                  		tst.w	v_soundqueue0(a6)	; is a music or sound queued for played?
00084842 6700                       		beq.s	@nosndinput		; if not, branch
00084844 4EBA 0000                  		jsr	CycleSoundQueue(pc)
00084848                            ; loc_71BBC:
00084848                            @nosndinput:
00084848 0C2E 0080 0009             		cmpi.b	#$80,v_sound_id(a6)	; is song queue set for silence (empty)?
0008484E 6700                       		beq.s	@nonewsound		; If yes, branch
00084850 4EBA 0000                  		jsr	PlaySoundID(pc)
00084854                            ; loc_71BC8:
00084854                            @nonewsound:
00084854 4A38 C901                  		tst.b	($FFFFC901).w
00084858 6700                       		beq.s	@cont
0008485A 5338 C901                  		subq.b	#1,($FFFFC901).w
0008485E                            		
0008485E                            @cont:
0008485E 4BEE 0040                  		lea	v_music_dac_track(a6),a5
00084862 4A15                       		tst.b	(a5)			; Is DAC track playing? (TrackPlaybackControl)
00084864 6A00                       		bpl.s	@dacdone		; Branch if not
00084866 4EBA 0000                  		jsr	DACUpdateTrack(pc)
0008486A                            ; loc_71BD4:
0008486A                            @dacdone:
0008486A 422E 0008                  		clr.b	f_updating_dac(a6)
0008486E 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
00084870                            ; loc_71BDA:
00084870                            @bgmfmloop:
00084870 DAFC 0030                  		adda.w	#TrackSz,a5
00084874 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00084876 6A00                       		bpl.s	@bgmfmnext		; Branch if not
00084878 4EBA 0000                  		jsr	FMUpdateTrack(pc)
0008487C                            ; loc_71BE6:
0008487C                            @bgmfmnext:
0008487C 51CF FFF2                  		dbf	d7,@bgmfmloop
00084880                            
00084880 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7 ; 3 PSG tracks
00084882                            ; loc_71BEC:
00084882                            @bgmpsgloop:
00084882 DAFC 0030                  		adda.w	#TrackSz,a5
00084886 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00084888 6A00                       		bpl.s	@bgmpsgnext		; Branch if not
0008488A 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
0008488E                            ; loc_71BF8:
0008488E                            @bgmpsgnext:
0008488E 51CF FFF2                  		dbf	d7,@bgmpsgloop
00084892                            
00084892 1D7C 0080 000E             		move.b	#$80,f_voice_selector(a6)			; Now at SFX tracks
00084898 7E02                       		moveq	#((v_sfx_fm_tracks_end-v_sfx_fm_tracks)/TrackSz)-1,d7	; 3 FM tracks (SFX)
0008489A                            ; loc_71C04:
0008489A                            @sfxfmloop:
0008489A DAFC 0030                  		adda.w	#TrackSz,a5
0008489E 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000848A0 6A00                       		bpl.s	@sfxfmnext		; Branch if not
000848A2 4EBA 0000                  		jsr	FMUpdateTrack(pc)
000848A6                            ; loc_71C10:
000848A6                            @sfxfmnext:
000848A6 51CF FFF2                  		dbf	d7,@sfxfmloop
000848AA                            
000848AA 7E02                       		moveq	#((v_sfx_psg_tracks_end-v_sfx_psg_tracks)/TrackSz)-1,d7 ; 3 PSG tracks (SFX)
000848AC                            ; loc_71C16:
000848AC                            @sfxpsgloop:
000848AC DAFC 0030                  		adda.w	#TrackSz,a5
000848B0 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000848B2 6A00                       		bpl.s	@sfxpsgnext		; Branch of not
000848B4 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
000848B8                            ; loc_71C22:
000848B8                            @sfxpsgnext:
000848B8 51CF FFF2                  		dbf	d7,@sfxpsgloop
000848BC                            		
000848BC 1D7C 0040 000E             		move.b	#$40,f_voice_selector(a6) ; Now at special SFX tracks
000848C2 DAFC 0030                  		adda.w	#TrackSz,a5
000848C6 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000848C8 6A00                       		bpl.s	@specfmdone		; Branch if not
000848CA 4EBA 0000                  		jsr	FMUpdateTrack(pc)
000848CE                            ; loc_71C38:
000848CE                            @specfmdone:
000848CE DAFC 0030                  		adda.w	#TrackSz,a5
000848D2 4A15                       		tst.b	(a5)			; Is track playing (TrackPlaybackControl)
000848D4 6A00                       		bpl.s	DoStartZ80		; Branch if not
000848D6 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
000848DA                            ; loc_71C44:
000848DA                            DoStartZ80:
000848DA 33FC 0000 00A1 1100        		startZ80
000848E2 0838 0006 FFF8             		btst #6,(v_megadrive).w ; is Megadrive PAL?
000848E8 6700                       		beq.s @end ; if not, branch
000848EA 0C38 0005 F015             		cmpi.b #$5,(v_palmuscounter).w ; 5th frame?
000848F0 6600                       		bne.s @end ; if not, branch
000848F2 11FC 0000 F015             		move.b #$0,(v_palmuscounter).w ; reset counter
000848F8 6000 FEDE                  		bra.w UpdateMusic ; run sound driver again
000848FC                            
000848FC                            	@end:
000848FC 5238 F015                  		addq.b #$1,(v_palmuscounter).w ; add 1 to frame count
00084900 4E75                       		rts
00084902                            ; End of function UpdateMusic
00084902                            
00084902                            
00084902                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084902                            
00084902                            ; sub_71C4E: UpdateDAC:
00084902                            DACUpdateTrack:
00084902 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5)	; Has DAC sample timeout expired?
00084906 6600                       		bne.s	@locret				; Return if not
00084908 1D7C 0080 0008             		move.b	#$80,f_updating_dac(a6)		; Set flag to indicate this is the DAC
0008490E                            ;DACDoNext:
0008490E 286D 0004                  		movea.l	TrackDataPointer(a5),a4	; DAC track data pointer
00084912                            ; loc_71C5E:
00084912                            @sampleloop:
00084912 7A00                       		moveq	#0,d5
00084914 1A1C                       		move.b	(a4)+,d5	; Get next SMPS unit
00084916 0C05 00E0                  		cmpi.b	#$E0,d5		; Is it a coord. flag?
0008491A 6500                       		blo.s	@notcoord	; Branch if not
0008491C 4EBA 0000                  		jsr	CoordFlag(pc)
00084920 60F0                       		bra.s	@sampleloop
00084922                            ; ===========================================================================
00084922                            ; loc_71C6E:
00084922                            @notcoord:
00084922 4A05                       		tst.b	d5			; Is it a sample?
00084924 6A00                       		bpl.s	@gotduration		; Branch if not (duration)
00084926 1B45 0010                  		move.b	d5,TrackSavedDAC(a5)	; Store new sample
0008492A 1A1C                       		move.b	(a4)+,d5		; Get another byte
0008492C 6A00                       		bpl.s	@gotduration		; Branch if it is a duration
0008492E 534C                       		subq.w	#1,a4			; Put byte back
00084930 1B6D 000F 000E             		move.b	TrackSavedDuration(a5),TrackDurationTimeout(a5) ; Use last duration
00084936 6000                       		bra.s	@gotsampleduration
00084938                            ; ===========================================================================
00084938                            ; loc_71C84:
00084938                            @gotduration:
00084938 4EBA 0000                  		jsr	SetDuration(pc)
0008493C                            ; loc_71C88:
0008493C                            @gotsampleduration:
0008493C 2B4C 0004                  		move.l	a4,TrackDataPointer(a5) ; Save pointer
00084940 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00084944 6600                       		bne.s	@locret			; Return if yes
00084946 7000                       		moveq	#0,d0
00084948 102D 0010                  		move.b	TrackSavedDAC(a5),d0	; Get sample
0008494C 0C00 0080                  		cmpi.b	#$80,d0			; Is it a rest?
00084950 6700                       		beq.s	@locret			; Return if yes
00084952 0800 0003                  		btst	#3,d0			; Is bit 3 set (samples between $88-$8F)?
00084956 6600                       		bne.s	@timpani		; Various timpani
00084958 13C0 00A0 1FFF             		move.b	d0,(z80_dac_sample).l
0008495E                            ; locret_71CAA:
0008495E                            @locret:
0008495E 4E75                       		rts	
00084960                            ; ===========================================================================
00084960                            ; loc_71CAC:
00084960                            @timpani:
00084960 0400 0088                  		subi.b	#$88,d0		; Convert into an index
00084964 103B 0000                  		move.b	DAC_sample_rate(pc,d0.w),d0
00084968                            		; Warning: this affects the raw pitch of sample $83, meaning it will
00084968                            		; use this value from then on.
00084968 13C0 00A0 00EA             		move.b	d0,(z80_dac3_pitch).l
0008496E 13FC 0083 00A0 1FFF        		move.b	#$83,(z80_dac_sample).l	; Use timpani
00084976 4E75                       		rts	
00084978                            ; End of function DACUpdateTrack
00084978                            
00084978                            ; ===========================================================================
00084978                            ; Note: this only defines rates for samples $88-$8D, meaning $8E-$8F are invalid.
00084978                            ; Also, $8C-$8D are so slow you may want to skip them.
00084978                            ; byte_71CC4:
00084978 171A 2122 FFFF             DAC_sample_rate: dc.b $17, $1A, $21, $22, $FF, $FF
0008497E                            
0008497E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008497E                            
0008497E                            ; sub_71CCA:
0008497E                            FMUpdateTrack:
0008497E 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5) ; Update duration timeout
00084982 6600                       		bne.s	@notegoing		; Branch if it hasn't expired
00084984 0895 0004                  		bclr	#4,(a5)			; Clear 'do not attack next note' bit (TrackPlaybackControl)
00084988 4EBA 0000                  		jsr	FMDoNext(pc)
0008498C 4EBA 0000                  		jsr	FMPrepareNote(pc)
00084990 6000 0000                  		bra.w	FMNoteOn
00084994                            ; ===========================================================================
00084994                            ; loc_71CE0:
00084994                            @notegoing:
00084994 4EBA 0000                  		jsr	NoteTimeoutUpdate(pc)
00084998 4EBA 0000                  		jsr	DoModulation(pc)
0008499C 6000 0000                  		bra.w	FMUpdateFreq
000849A0                            ; End of function FMUpdateTrack
000849A0                            
000849A0                            
000849A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000849A0                            
000849A0                            ; sub_71CEC:
000849A0                            FMDoNext:
000849A0 286D 0004                  		movea.l	TrackDataPointer(a5),a4 ; Track data pointer
000849A4 0895 0001                  		bclr	#1,(a5)			; Clear 'track at rest' bit (TrackPlaybackControl)
000849A8                            ; loc_71CF4:
000849A8                            @noteloop:
000849A8 7A00                       		moveq	#0,d5
000849AA 1A1C                       		move.b	(a4)+,d5	; Get byte from track
000849AC 0C05 00E0                  		cmpi.b	#$E0,d5		; Is this a coord. flag?
000849B0 6500                       		blo.s	@gotnote	; Branch if not
000849B2 4EBA 0000                  		jsr	CoordFlag(pc)
000849B6 60F0                       		bra.s	@noteloop
000849B8                            ; ===========================================================================
000849B8                            ; loc_71D04:
000849B8                            @gotnote:
000849B8 4EBA 0000                  		jsr	FMNoteOff(pc)
000849BC 4A05                       		tst.b	d5		; Is this a note?
000849BE 6A00                       		bpl.s	@gotduration	; Branch if not
000849C0 4EBA 0000                  		jsr	FMSetFreq(pc)
000849C4 1A1C                       		move.b	(a4)+,d5	; Get another byte
000849C6 6A00                       		bpl.s	@gotduration	; Branch if it is a duration
000849C8 534C                       		subq.w	#1,a4		; Otherwise, put it back
000849CA 6000 0000                  		bra.w	FinishTrackUpdate
000849CE                            ; ===========================================================================
000849CE                            ; loc_71D1A:
000849CE                            @gotduration:
000849CE 4EBA 0000                  		jsr	SetDuration(pc)
000849D2 6000 0000                  		bra.w	FinishTrackUpdate
000849D6                            ; End of function FMDoNext
000849D6                            
000849D6                            
000849D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000849D6                            
000849D6                            ; sub_71D22:
000849D6                            FMSetFreq:
000849D6 0405 0080                  		subi.b	#$80,d5			; Make it a zero-based index
000849DA 6700                       		beq.s	TrackSetRest
000849DC DA2D 0008                  		add.b	TrackTranspose(a5),d5	; Add track transposition
000849E0 0245 007F                  		andi.w	#$7F,d5			; Clear high byte and sign bit
000849E4 E34D                       		lsl.w	#1,d5
000849E6 41FA 0000                  		lea	FMFrequencies(pc),a0
000849EA 3C30 5000                  		move.w	(a0,d5.w),d6
000849EE 3B46 0010                  		move.w	d6,TrackFreq(a5)	; Store new frequency
000849F2 4E75                       		rts	
000849F4                            ; End of function FMSetFreq
000849F4                            
000849F4                            
000849F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000849F4                            
000849F4                            ; sub_71D40:
000849F4                            SetDuration:
000849F4 1005                       		move.b	d5,d0
000849F6 122D 0002                  		move.b	TrackTempoDivider(a5),d1	; Get dividing timing
000849FA                            ; loc_71D46:
000849FA                            @multloop:
000849FA 5301                       		subq.b	#1,d1
000849FC 6700                       		beq.s	@donemult
000849FE D005                       		add.b	d5,d0
00084A00 60F8                       		bra.s	@multloop
00084A02                            ; ===========================================================================
00084A02                            ; loc_71D4E:
00084A02                            @donemult:
00084A02 1B40 000F                  		move.b	d0,TrackSavedDuration(a5)	; Save duration
00084A06 1B40 000E                  		move.b	d0,TrackDurationTimeout(a5)	; Save duration timeout
00084A0A 4E75                       		rts	
00084A0C                            ; End of function SetDuration
00084A0C                            
00084A0C                            ; ===========================================================================
00084A0C                            ; loc_71D58:
00084A0C                            TrackSetRest:
00084A0C 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
00084A10 426D 0010                  		clr.w	TrackFreq(a5)	; Clear frequency
00084A14                            
00084A14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084A14                            
00084A14                            ; sub_71D60:
00084A14                            FinishTrackUpdate:
00084A14 2B4C 0004                  		move.l	a4,TrackDataPointer(a5)	; Store new track position
00084A18 1B6D 000F 000E             		move.b	TrackSavedDuration(a5),TrackDurationTimeout(a5)	; Reset note timeout
00084A1E 0815 0004                  		btst	#4,(a5)				; Is track set to not attack note? (TrackPlaybackControl)
00084A22 6600                       		bne.s	@locret				; If so, branch
00084A24 1B6D 0013 0012             		move.b	TrackNoteTimeoutMaster(a5),TrackNoteTimeout(a5)	; Reset note fill timeout
00084A2A 422D 000C                  		clr.b	TrackVolEnvIndex(a5)		; Reset PSG volume envelope index (even on FM tracks...)
00084A2E 0815 0003                  		btst	#3,(a5)				; Is modulation on? (TrackPlaybackControl)
00084A32 6700                       		beq.s	@locret				; If not, return (TrackPlaybackControl)
00084A34 206D 0014                  		movea.l	TrackModulationPtr(a5),a0	; Modulation data pointer
00084A38 1B58 0018                  		move.b	(a0)+,TrackModulationWait(a5)	; Reset wait
00084A3C 1B58 0019                  		move.b	(a0)+,TrackModulationSpeed(a5)	; Reset speed
00084A40 1B58 001A                  		move.b	(a0)+,TrackModulationDelta(a5)	; Reset delta
00084A44 1018                       		move.b	(a0)+,d0			; Get steps
00084A46 E208                       		lsr.b	#1,d0				; Halve them
00084A48 1B40 001B                  		move.b	d0,TrackModulationSteps(a5)	; Then store
00084A4C 426D 001C                  		clr.w	TrackModulationVal(a5)		; Reset frequency change
00084A50                            ; locret_71D9C:
00084A50                            @locret:
00084A50 4E75                       		rts	
00084A52                            ; End of function FinishTrackUpdate
00084A52                            
00084A52                            
00084A52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084A52                            
00084A52                            ; sub_71D9E: NoteFillUpdate
00084A52                            NoteTimeoutUpdate:
00084A52 4A2D 0012                  		tst.b	TrackNoteTimeout(a5)	; Is note fill on?
00084A56 6700                       		beq.s	@locret
00084A58 532D 0012                  		subq.b	#1,TrackNoteTimeout(a5)	; Update note fill timeout
00084A5C 6600                       		bne.s	@locret				; Return if it hasn't expired
00084A5E 08D5 0001                  		bset	#1,(a5)				; Put track at rest (TrackPlaybackControl)
00084A62 4A2D 0001                  		tst.b	TrackVoiceControl(a5)		; Is this a psg track?
00084A66 6B00 0000                  		bmi.w	@psgnoteoff			; If yes, branch
00084A6A 4EBA 0000                  		jsr	FMNoteOff(pc)
00084A6E 584F                       		addq.w	#4,sp				; Do not return to caller
00084A70 4E75                       		rts	
00084A72                            ; ===========================================================================
00084A72                            ; loc_71DBE:
00084A72                            @psgnoteoff:
00084A72 4EBA 0000                  		jsr	PSGNoteOff(pc)
00084A76 584F                       		addq.w	#4,sp		; Do not return to caller
00084A78                            ; locret_71DC4:
00084A78                            @locret:
00084A78 4E75                       		rts	
00084A7A                            ; End of function NoteTimeoutUpdate
00084A7A                            
00084A7A                            
00084A7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084A7A                            
00084A7A                            ; sub_71DC6:
00084A7A                            DoModulation:
00084A7A 584F                       		addq.w	#4,sp				; Do not return to caller (but see below)
00084A7C 0815 0003                  		btst	#3,(a5)				; Is modulation active? (TrackPlaybackControl)
00084A80 6700                       		beq.s	@locret				; Return if not
00084A82 4A2D 0018                  		tst.b	TrackModulationWait(a5)	; Has modulation wait expired?
00084A86 6700                       		beq.s	@waitdone			; If yes, branch
00084A88 532D 0018                  		subq.b	#1,TrackModulationWait(a5)	; Update wait timeout
00084A8C 4E75                       		rts	
00084A8E                            ; ===========================================================================
00084A8E                            ; loc_71DDA:
00084A8E                            @waitdone:
00084A8E 532D 0019                  		subq.b	#1,TrackModulationSpeed(a5)	; Update speed
00084A92 6700                       		beq.s	@updatemodulation		; If it expired, want to update modulation
00084A94 4E75                       		rts	
00084A96                            ; ===========================================================================
00084A96                            ; loc_71DE2:
00084A96                            @updatemodulation:
00084A96 206D 0014                  		movea.l	TrackModulationPtr(a5),a0	; Get modulation data
00084A9A 1B68 0001 0019             		move.b	1(a0),TrackModulationSpeed(a5)	; Restore modulation speed
00084AA0 4A2D 001B                  		tst.b	TrackModulationSteps(a5)	; Check number of steps
00084AA4 6600                       		bne.s	@calcfreq			; If nonzero, branch
00084AA6 1B68 0003 001B             		move.b	3(a0),TrackModulationSteps(a5)	; Restore from modulation data
00084AAC 442D 001A                  		neg.b	TrackModulationDelta(a5)	; Negate modulation delta
00084AB0 4E75                       		rts	
00084AB2                            ; ===========================================================================
00084AB2                            ; loc_71DFE:
00084AB2                            @calcfreq:
00084AB2 532D 001B                  		subq.b	#1,TrackModulationSteps(a5)	; Update modulation steps
00084AB6 1C2D 001A                  		move.b	TrackModulationDelta(a5),d6	; Get modulation delta
00084ABA 4886                       		ext.w	d6
00084ABC DC6D 001C                  		add.w	TrackModulationVal(a5),d6	; Add cumulative modulation change
00084AC0 3B46 001C                  		move.w	d6,TrackModulationVal(a5)	; Store it
00084AC4 DC6D 0010                  		add.w	TrackFreq(a5),d6		; Add note frequency to it
00084AC8 594F                       		subq.w	#4,sp		; In this case, we want to return to caller after all
00084ACA                            ; locret_71E16:
00084ACA                            @locret:
00084ACA 4E75                       		rts	
00084ACC                            ; End of function DoModulation
00084ACC                            
00084ACC                            
00084ACC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084ACC                            
00084ACC                            ; sub_71E18:
00084ACC                            FMPrepareNote:
00084ACC 0815 0001                  		btst	#1,(a5)			; Is track resting? (TrackPlaybackControl)
00084AD0 6600                       		bne.s	locret_71E48		; Return if so
00084AD2 3C2D 0010                  		move.w	TrackFreq(a5),d6	; Get current note frequency
00084AD6 6700                       		beq.s	FMSetRest		; Branch if zero
00084AD8                            ; loc_71E24:
00084AD8                            FMUpdateFreq:
00084AD8 102D 001E                  		move.b	TrackDetune(a5),d0 	; Get detune value
00084ADC 4880                       		ext.w	d0
00084ADE DC40                       		add.w	d0,d6			; Add note frequency
00084AE0 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00084AE4 6600                       		bne.s	locret_71E48		; Return if so
00084AE6 3206                       		move.w	d6,d1
00084AE8 E049                       		lsr.w	#8,d1
00084AEA 103C 00A4                  		move.b	#$A4,d0			; Register for upper 6 bits of frequency
00084AEE 4EBA 0000                  		jsr	WriteFMIorII(pc)
00084AF2 1206                       		move.b	d6,d1
00084AF4 103C 00A0                  		move.b	#$A0,d0			; Register for lower 8 bits of frequency
00084AF8 4EBA 0000                  		jsr	WriteFMIorII(pc)	; (It would be better if this were a jmp)
00084AFC                            ; locret_71E48:
00084AFC                            locret_71E48:
00084AFC 4E75                       		rts	
00084AFE                            ; ===========================================================================
00084AFE                            ; loc_71E4A:
00084AFE                            FMSetRest:
00084AFE 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
00084B02 4E75                       		rts	
00084B04                            ; End of function FMPrepareNote
00084B04                            
00084B04                            ; ===========================================================================
00084B04                            ; loc_71E50:
00084B04                            PauseMusic:
00084B04 6B00                       		bmi.s	@unpausemusic		; Branch if music is being unpaused
00084B06 0C2E 0002 0003             		cmpi.b	#2,f_pausemusic(a6)
00084B0C 6700 0000                  		beq.w	@unpausedallfm
00084B10 1D7C 0002 0003             		move.b	#2,f_pausemusic(a6)
00084B16 7602                       		moveq	#2,d3
00084B18 103C 00B4                  		move.b	#$B4,d0		; Command to set AMS/FMS/panning
00084B1C 7200                       		moveq	#0,d1		; No panning, AMS or FMS
00084B1E                            ; loc_71E6A:
00084B1E                            @killpanloop:
00084B1E 4EBA 0000                  		jsr	WriteFMI(pc)
00084B22 4EBA 0000                  		jsr	WriteFMII(pc)
00084B26 5200                       		addq.b	#1,d0
00084B28 51CB FFF4                  		dbf	d3,@killpanloop
00084B2C                            
00084B2C 7602                       		moveq	#2,d3
00084B2E 7028                       		moveq	#$28,d0		; Key on/off register
00084B30                            ; loc_71E7C:
00084B30                            @noteoffloop:
00084B30 1203                       		move.b	d3,d1		; FM1, FM2, FM3
00084B32 4EBA 0000                  		jsr	WriteFMI(pc)
00084B36 5801                       		addq.b	#4,d1		; FM4, FM5, FM6
00084B38 4EBA 0000                  		jsr	WriteFMI(pc)
00084B3C 51CB FFF2                  		dbf	d3,@noteoffloop
00084B40                            
00084B40 4EBA 0000                  		jsr	PSGSilenceAll(pc)
00084B44 6000 FD94                  		bra.w	DoStartZ80
00084B48                            ; ===========================================================================
00084B48                            ; loc_71E94:
00084B48                            @unpausemusic:
00084B48 422E 0003                  		clr.b	f_pausemusic(a6)
00084B4C 7630                       		moveq	#TrackSz,d3
00084B4E 4BEE 0040                  		lea	v_music_fmdac_tracks(a6),a5
00084B52 7806                       		moveq	#((v_music_fmdac_tracks_end-v_music_fmdac_tracks)/TrackSz)-1,d4	; 6 FM + 1 DAC tracks
00084B54                            ; loc_71EA0:
00084B54                            @bgmfmloop:
00084B54 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
00084B58 6700                       		beq.s	@bgmfmnext		; Branch if not
00084B5A 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00084B5E 6600                       		bne.s	@bgmfmnext		; Branch if yes
00084B60 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
00084B64 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
00084B68 4EBA 0000                  		jsr	WriteFMIorII(pc)
00084B6C                            ; loc_71EB8:
00084B6C                            @bgmfmnext:
00084B6C DAC3                       		adda.w	d3,a5
00084B6E 51CC FFE4                  		dbf	d4,@bgmfmloop
00084B72                            
00084B72 4BEE 0220                  		lea	v_sfx_fm_tracks(a6),a5
00084B76 7802                       		moveq	#((v_sfx_fm_tracks_end-v_sfx_fm_tracks)/TrackSz)-1,d4	; 3 FM tracks (SFX)
00084B78                            ; loc_71EC4:
00084B78                            @sfxfmloop:
00084B78 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
00084B7C 6700                       		beq.s	@sfxfmnext		; Branch if not
00084B7E 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00084B82 6600                       		bne.s	@sfxfmnext		; Branch if yes
00084B84 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
00084B88 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
00084B8C 4EBA 0000                  		jsr	WriteFMIorII(pc)
00084B90                            ; loc_71EDC:
00084B90                            @sfxfmnext:
00084B90 DAC3                       		adda.w	d3,a5
00084B92 51CC FFE4                  		dbf	d4,@sfxfmloop
00084B96                            
00084B96 4BEE 0340                  		lea	v_spcsfx_track_ram(a6),a5
00084B9A 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
00084B9E 6700                       		beq.s	@unpausedallfm		; Branch if not
00084BA0 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00084BA4 6600                       		bne.s	@unpausedallfm		; Branch if yes
00084BA6 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
00084BAA 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
00084BAE 4EBA 0000                  		jsr	WriteFMIorII(pc)
00084BB2                            ; loc_71EFE:
00084BB2                            @unpausedallfm:
00084BB2 6000 FD26                  		bra.w	DoStartZ80
00084BB6                            
00084BB6                            ; ---------------------------------------------------------------------------
00084BB6                            ; Subroutine to	play a sound or	music track
00084BB6                            ; ---------------------------------------------------------------------------
00084BB6                            
00084BB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084BB6                            
00084BB6                            ; Sound_Play:
00084BB6                            CycleSoundQueue:
00084BB6 2079 0008 4608             		movea.l	(Go_SoundPriorities).l,a0
00084BBC 43EE 000A                  		lea	v_soundqueue0(a6),a1	; load music track number
00084BC0 1616                       		move.b	v_sndprio(a6),d3	; Get priority of currently playing SFX
00084BC2 7802                       		moveq	#2,d4			; Number of queues-1 (v_soundqueue0, v_soundqueue1, v_soundqueue2)
00084BC4                            ; loc_71F12:
00084BC4                            @inputloop:
00084BC4 1011                       		move.b	(a1),d0			; move track number to d0
00084BC6 1200                       		move.b	d0,d1
00084BC8 4219                       		clr.b	(a1)+			; Clear entry
00084BCA 0400 0081                  		subi.b	#bgm__First,d0		; Make it into 0-based index
00084BCE 6500                       		bcs.s	@nextinput		; If negative (i.e., it was $80 or lower), branch
00084BD0 0C2E 0080 0009             		cmpi.b	#$80,v_sound_id(a6)	; Is v_sound_id a $80 (silence/empty)?
00084BD6 6700                       		beq.s	@havesound		; If yes, branch
00084BD8 1D41 000A                  		move.b	d1,v_soundqueue0(a6)	; Put sound into v_soundqueue0
00084BDC 6000                       		bra.s	@nextinput
00084BDE                            ; ===========================================================================
00084BDE                            ; loc_71F2C:
00084BDE                            @havesound:
00084BDE 0240 007F                  		andi.w	#$7F,d0			; Clear high byte and sign bit
00084BE2 1430 0000                  		move.b	(a0,d0.w),d2		; Get sound type
00084BE6 B403                       		cmp.b	d3,d2			; Is it a lower priority sound?
00084BE8 6500                       		blo.s	@nextinput		; Branch if yes
00084BEA 1602                       		move.b	d2,d3			; Store new priority
00084BEC 1D41 0009                  		move.b	d1,v_sound_id(a6)	; Queue sound for play
00084BF0                            ; loc_71F3E:
00084BF0                            @nextinput:
00084BF0 51CC FFD2                  		dbf	d4,@inputloop
00084BF4                            
00084BF4 4A03                       		tst.b	d3			; We don't want to change sound priority if it is negative
00084BF6 6B00                       		bmi.s	@locret
00084BF8 1C83                       		move.b	d3,v_sndprio(a6)	; Set new sound priority
00084BFA                            ; locret_71F4A:
00084BFA                            @locret:
00084BFA 4E75                       		rts	
00084BFC                            ; End of function CycleSoundQueue
00084BFC                            
00084BFC                            
00084BFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084BFC                            
00084BFC                            ; Sound_ChkValue:
00084BFC                            PlaySoundID:
00084BFC 7E00                       		moveq	#0,d7
00084BFE 1E2E 0009                  		move.b	v_sound_id(a6),d7
00084C02 6700 0000                  		beq.w	StopAllSound
00084C06 6A00                       		bpl.s	@locret			; If >= 0, return (not a valid sound, bgm or command)
00084C08 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; reset	music flag
00084C0E                            		; DANGER! Music ends at $93, yet this checks until $9F; attempting to
00084C0E                            		; play sounds $94-$9F will cause a crash! Remove the '+$C' to fix this.
00084C0E                            		; See LevSel_NoCheat for more.
00084C0E 0C07 0000                  		cmpi.b	#bgm__Last,d7	; Is this music ($81-$9F)?
00084C12 6300 0000                  		bls.w	Sound_PlayBGM		; Branch if yes
00084C16 0C07 00A0                  		cmpi.b	#sfx__First,d7		; Is this after music but before sfx? (redundant check)
00084C1A 6500 0000                  		blo.w	@locret			; Return if yes
00084C1E 0C07 0000                  		cmpi.b	#sfx__Last,d7		; Is this sfx ($A0-$CF)?
00084C22 6300 0000                  		bls.w	Sound_PlaySFX		; Branch if yes
00084C26 0C07 00D0                  		cmpi.b	#spec__First,d7		; Is this after sfx but before special sfx? (redundant check)
00084C2A 6500 0000                  		blo.w	@locret			; Return if yes
00084C2E 0C07 00D1                  		cmpi.b	#$D1,d7
00084C32 6500 0000                  		bcs.w	Sound_PlaySpecial
00084C36 0C07 00DF                  		cmp.b	#$DF,d7
00084C3A 6F00 0000                  		ble.w	Sound_D1toDF
00084C3E 0C07 00E0                  		cmpi.b	#flg__First,d7		; Is this after special sfx but before $E0?
00084C42 6500 0000                  		blo.w	@locret			; Return if yes
00084C46 0C07 0000                  		cmpi.b	#flg__Last,d7		; Is this $E0-$E4?
00084C4A 6300                       		bls.s	Sound_E0toE4		; Branch if yes
00084C4C                            ; locret_71F8C:
00084C4C                            @locret:
00084C4C 4E75                       		rts	
00084C4E                            ; ===========================================================================
00084C4E                            
00084C4E                            Sound_E0toE4:
00084C4E 0407 00E0                  		subi.b	#flg__First,d7
00084C52 E54F                       		lsl.w	#2,d7
00084C54 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
00084C58                            ; ===========================================================================
00084C58                            
00084C58                            Sound_ExIndex:
00084C58 6000 0000                  ptr_flgE0:	bra.w	FadeOutMusic		; $E0
00084C5C 6000 0000                  ptr_flgE1:	bra.w	PlaySegaSound		; $E1
00084C60 6000 0000                  ptr_flgE2:	bra.w	SpeedUpMusic		; $E2
00084C64 6000 0000                  ptr_flgE3:	bra.w	SlowDownMusic		; $E3
00084C68 6000 0000                  ptr_flgE4:	bra.w	StopAllSound		; $E4
00084C6C                            ptr_flgend
00084C6C                            ; ===========================================================================
00084C6C                            ; ---------------------------------------------------------------------------
00084C6C                            ; Play "Say-gaa" PCM sound
00084C6C                            ; ---------------------------------------------------------------------------
00084C6C                            ; Sound_E1: PlaySega:
00084C6C                            PlaySegaSound:
00084C6C 13FC 0088 00A0 1FFF        		move.b	#$88,(z80_dac_sample).l	; Queue Sega PCM
00084C74 33FC 0000 00A1 1100        		startZ80
00084C7C 323C 0011                  		move.w	#$11,d1
00084C80                            ; loc_71FC0:
00084C80                            @busyloop_outer:
00084C80 303C FFFF                  		move.w	#-1,d0
00084C84                            ; loc_71FC4:
00084C84                            @busyloop:
00084C84 4E71                       		nop	
00084C86 51C8 FFFC                  		dbf	d0,@busyloop
00084C8A                            
00084C8A 51C9 FFF4                  		dbf	d1,@busyloop_outer
00084C8E                            
00084C8E 584F                       		addq.w	#4,sp	; Tamper return value so we don't return to caller
00084C90 4E75                       		rts	
00084C92                            ; ===========================================================================
00084C92                            ; ---------------------------------------------------------------------------
00084C92                            ; Play music track $81-$9F
00084C92                            ; ---------------------------------------------------------------------------
00084C92                            ; Sound_81to9F:
00084C92                            Sound_PlayBGM:
00084C92 0C07 0000                  		cmpi.b	#bgm_ExtraLife,d7	; is the "extra life" music to be played?
00084C96 6600                       		bne.s	@bgmnot1up		; if not, branch
00084C98 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is a 1-up music playing?
00084C9C 6600 0000                  		bne.w	@locdblret		; if yes, branch
00084CA0 4BEE 0040                  		lea	v_music_track_ram(a6),a5
00084CA4 7009                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d0	; 1 DAC + 6 FM + 3 PSG tracks
00084CA6                            ; loc_71FE6:
00084CA6                            @clearsfxloop:
00084CA6 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00084CAA DAFC 0030                  		adda.w	#TrackSz,a5
00084CAE 51C8 FFF6                  		dbf	d0,@clearsfxloop
00084CB2                            
00084CB2 4BEE 0220                  		lea	v_sfx_track_ram(a6),a5
00084CB6 7005                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d0	; 3 FM + 3 PSG tracks (SFX)
00084CB8                            ; loc_71FF8:
00084CB8                            @cleartrackplayloop:
00084CB8 0895 0007                  		bclr	#7,(a5)			; Clear 'track is playing' bit (TrackPlaybackControl)
00084CBC DAFC 0030                  		adda.w	#TrackSz,a5
00084CC0 51C8 FFF6                  		dbf	d0,@cleartrackplayloop
00084CC4                            
00084CC4 4216                       		clr.b	v_sndprio(a6)		; Clear priority
00084CC6 204E                       		movea.l	a6,a0
00084CC8 43EE 03A0                  		lea	v_1up_ram_copy(a6),a1
00084CCC 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; Backup $220 bytes: all variables and music track data
00084CD0                            ; loc_72012:
00084CD0                            @backupramloop:
00084CD0 22D8                       		move.l	(a0)+,(a1)+
00084CD2 51C8 FFFC                  		dbf	d0,@backupramloop
00084CD6                            
00084CD6 1D7C 0080 0027             		move.b	#$80,f_1up_playing(a6)
00084CDC 4216                       		clr.b	v_sndprio(a6)		; Clear priority again (?)
00084CDE 6000                       		bra.s	@bgm_loadMusic
00084CE0                            ; ===========================================================================
00084CE0                            ; loc_72024:
00084CE0                            @bgmnot1up:
00084CE0 422E 0027                  		clr.b	f_1up_playing(a6)
00084CE4 422E 0026                  		clr.b	v_fadein_counter(a6)
00084CE8                            ; loc_7202C:
00084CE8                            @bgm_loadMusic:
00084CE8 4EBA 0000                  		jsr	InitMusicPlayback(pc)
00084CEC 2879 0008 4618             		movea.l	(Go_SpeedUpIndex).l,a4
00084CF2 0407 0081                  		subi.b	#bgm__First,d7
00084CF6 1D74 7000 0029             		move.b	(a4,d7.w),v_speeduptempo(a6)
00084CFC 2879 0008 4610             		movea.l	(Go_MusicIndex).l,a4
00084D02 E54F                       		lsl.w	#2,d7
00084D04 2874 7000                  		movea.l	(a4,d7.w),a4		; a4 now points to (uncompressed) song data
00084D08 7000                       		moveq	#0,d0
00084D0A 3014                       		move.w	(a4),d0			; load voice pointer
00084D0C D08C                       		add.l	a4,d0			; It is a relative pointer
00084D0E 2D40 0018                  		move.l	d0,v_voice_ptr(a6)
00084D12 102C 0005                  		move.b	5(a4),d0		; load tempo
00084D16 1D40 0028                  		move.b	d0,v_tempo_mod(a6)
00084D1A                            		;tst.b	f_speedup(a6)
00084D1A                            		;beq.s	@nospeedshoes
00084D1A                            		;move.b	v_speeduptempo(a6),d0
00084D1A                            ; loc_72068:
00084D1A                            ;@nospeedshoes:
00084D1A 1D40 0002                  		move.b	d0,v_main_tempo(a6)
00084D1E 1D40 0001                  		move.b	d0,v_main_tempo_timeout(a6)
00084D22 7200                       		moveq	#0,d1
00084D24 264C                       		movea.l	a4,a3
00084D26 5C4C                       		addq.w	#6,a4			; Point past header
00084D28 7E00                       		moveq	#0,d7
00084D2A 1E2B 0002                  		move.b	2(a3),d7		; load number of FM+DAC tracks
00084D2E 6700 0000                  		beq.w	@bgm_fmdone		; branch if zero
00084D32 5307                       		subq.b	#1,d7
00084D34 123C 00C0                  		move.b	#$C0,d1			; Default AMS+FMS+Panning
00084D38 182B 0004                  		move.b	4(a3),d4		; load tempo dividing timing
00084D3C 7C30                       		moveq	#TrackSz,d6
00084D3E 1A3C 0001                  		move.b	#1,d5			; Note duration for first "note"
00084D42 43EE 0040                  		lea	v_music_fmdac_tracks(a6),a1
00084D46 45FA 0000                  		lea	FMDACInitBytes(pc),a2
00084D4A                            ; loc_72098:
00084D4A                            @bmg_fmloadloop:
00084D4A 08D1 0007                  		bset	#7,(a1)				; Initial playback control: set 'track playing' bit (TrackPlaybackControl)
00084D4E 135A 0001                  		move.b	(a2)+,TrackVoiceControl(a1)	; Voice control bits
00084D52 1344 0002                  		move.b	d4,TrackTempoDivider(a1)
00084D56 1346 000D                  		move.b	d6,TrackStackPointer(a1)	; set "gosub" (coord flag F8h) stack init value
00084D5A 1341 000A                  		move.b	d1,TrackAMSFMSPan(a1)		; Set AMS/FMS/Panning
00084D5E 1345 000E                  		move.b	d5,TrackDurationTimeout(a1)	; Set duration of first "note"
00084D62 7000                       		moveq	#0,d0
00084D64 301C                       		move.w	(a4)+,d0			; load DAC/FM pointer
00084D66 D08B                       		add.l	a3,d0				; Relative pointer
00084D68 2340 0004                  		move.l	d0,TrackDataPointer(a1)	; Store track pointer
00084D6C 335C 0008                  		move.w	(a4)+,TrackTranspose(a1)	; load FM channel modifier
00084D70 D2C6                       		adda.w	d6,a1
00084D72 51CF FFD6                  		dbf	d7,@bmg_fmloadloop
00084D76                            		
00084D76 0C2B 0007 0002             		cmpi.b	#7,2(a3)	; Are 7 FM tracks defined?
00084D7C 6600                       		bne.s	@silencefm6
00084D7E 702B                       		moveq	#$2B,d0		; DAC enable/disable register
00084D80 7200                       		moveq	#0,d1		; Disable DAC
00084D82 4EBA 0000                  		jsr	WriteFMI(pc)
00084D86 6000 0000                  		bra.w	@bgm_fmdone
00084D8A                            ; ===========================================================================
00084D8A                            ; loc_720D8:
00084D8A                            @silencefm6:
00084D8A 7028                       		moveq	#$28,d0		; Key on/off register
00084D8C 7206                       		moveq	#6,d1		; Note off on all operators of channel 6
00084D8E 4EBA 0000                  		jsr	WriteFMI(pc)
00084D92 103C 0042                  		move.b	#$42,d0		; TL for operator 1 of FM6
00084D96 727F                       		moveq	#$7F,d1		; Total silence
00084D98 4EBA 0000                  		jsr	WriteFMII(pc)
00084D9C 103C 004A                  		move.b	#$4A,d0		; TL for operator 3 of FM6
00084DA0 727F                       		moveq	#$7F,d1		; Total silence
00084DA2 4EBA 0000                  		jsr	WriteFMII(pc)
00084DA6 103C 0046                  		move.b	#$46,d0		; TL for operator 2 of FM6
00084DAA 727F                       		moveq	#$7F,d1		; Total silence
00084DAC 4EBA 0000                  		jsr	WriteFMII(pc)
00084DB0 103C 004E                  		move.b	#$4E,d0		; TL for operator 4 of FM6
00084DB4 727F                       		moveq	#$7F,d1		; Total silence
00084DB6 4EBA 0000                  		jsr	WriteFMII(pc)
00084DBA 103C 00B6                  		move.b	#$B6,d0		; AMS/FMS/panning of FM6
00084DBE 123C 00C0                  		move.b	#$C0,d1		; Stereo
00084DC2 4EBA 0000                  		jsr	WriteFMII(pc)
00084DC6                            ; loc_72114:
00084DC6                            @bgm_fmdone:
00084DC6 7E00                       		moveq	#0,d7
00084DC8 1E2B 0003                  		move.b	3(a3),d7	; Load number of PSG tracks
00084DCC 6700                       		beq.s	@bgm_psgdone	; branch if zero
00084DCE 5307                       		subq.b	#1,d7
00084DD0 43EE 0190                  		lea	v_music_psg_tracks(a6),a1
00084DD4 45FA 0000                  		lea	PSGInitBytes(pc),a2
00084DD8                            ; loc_72126:
00084DD8                            @bgm_psgloadloop:
00084DD8 08D1 0007                  		bset	#7,(a1)				; Initial playback control: set 'track playing' bit (TrackPlaybackControl)
00084DDC 135A 0001                  		move.b	(a2)+,TrackVoiceControl(a1)	; Voice control bits
00084DE0 1344 0002                  		move.b	d4,TrackTempoDivider(a1)
00084DE4 1346 000D                  		move.b	d6,TrackStackPointer(a1)	; set "gosub" (coord flag F8h) stack init value
00084DE8 1345 000E                  		move.b	d5,TrackDurationTimeout(a1)	; Set duration of first "note"
00084DEC 7000                       		moveq	#0,d0
00084DEE 301C                       		move.w	(a4)+,d0			; load PSG channel pointer
00084DF0 D08B                       		add.l	a3,d0				; Relative pointer
00084DF2 2340 0004                  		move.l	d0,TrackDataPointer(a1)	; Store track pointer
00084DF6 335C 0008                  		move.w	(a4)+,TrackTranspose(a1)	; load PSG modifier
00084DFA 101C                       		move.b	(a4)+,d0			; load redundant byte
00084DFC 135C 000B                  		move.b	(a4)+,TrackVoiceIndex(a1)	; Initial PSG tone
00084E00 D2C6                       		adda.w	d6,a1
00084E02 51CF FFD4                  		dbf	d7,@bgm_psgloadloop
00084E06                            ; loc_72154:
00084E06                            @bgm_psgdone:
00084E06 43EE 0220                  		lea	v_sfx_track_ram(a6),a1
00084E0A 7E05                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d7	; 6 SFX tracks
00084E0C                            ; loc_7215A:
00084E0C                            @sfxstoploop:
00084E0C 4A11                       		tst.b	(a1)		; Is SFX playing? (TrackPlaybackControl)
00084E0E 6A00 0000                  		bpl.w	@sfxnext	; Branch if not
00084E12 7000                       		moveq	#0,d0
00084E14 1029 0001                  		move.b	TrackVoiceControl(a1),d0 ; Get voice control bits
00084E18 6B00                       		bmi.s	@sfxpsgchannel		; Branch if this is a PSG channel
00084E1A 5500                       		subq.b	#2,d0			; SFX can't have FM1 or FM2
00084E1C E508                       		lsl.b	#2,d0			; Convert to index
00084E1E 6000                       		bra.s	@gotchannelindex
00084E20                            ; ===========================================================================
00084E20                            ; loc_7216E:
00084E20                            @sfxpsgchannel:
00084E20 E608                       		lsr.b	#3,d0		; Convert to index
00084E22                            ; loc_72170:
00084E22                            @gotchannelindex:
00084E22 41FA 0000                  		lea	SFX_BGMChannelRAM(pc),a0
00084E26 2070 0000                  		movea.l	(a0,d0.w),a0
00084E2A 08D0 0002                  		bset	#2,(a0)		; Set 'SFX is overriding' bit (TrackPlaybackControl)
00084E2E                            ; loc_7217C:
00084E2E                            @sfxnext:
00084E2E D2C6                       		adda.w	d6,a1
00084E30 51CF FFDA                  		dbf	d7,@sfxstoploop
00084E34                            
00084E34 4A6E 0340                  		tst.w	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX being played?
00084E38 6A00                       		bpl.s	@checkspecialpsg				; Branch if not
00084E3A 08EE 0002 0100             		bset	#2,v_music_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00084E40                            ; loc_7218E:
00084E40                            @checkspecialpsg:
00084E40 4A6E 0370                  		tst.w	v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Is special SFX being played?
00084E44 6A00                       		bpl.s	@sendfmnoteoff					; Branch if not
00084E46 08EE 0002 01F0             		bset	#2,v_music_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00084E4C                            ; loc_7219A:
00084E4C                            @sendfmnoteoff:
00084E4C 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
00084E50 7805                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d4	; 6 FM tracks
00084E52                            ; loc_721A0:
00084E52                            @fmnoteoffloop:
00084E52 4EBA 0000                  		jsr	FMNoteOff(pc)
00084E56 DAC6                       		adda.w	d6,a5
00084E58 51CC FFF8                  		dbf	d4,@fmnoteoffloop		; run all FM tracks
00084E5C 7802                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d4 ; 3 PSG tracks
00084E5E                            ; loc_721AC:
00084E5E                            @psgnoteoffloop:
00084E5E 4EBA 0000                  		jsr	PSGNoteOff(pc)
00084E62 DAC6                       		adda.w	d6,a5
00084E64 51CC FFF8                  		dbf	d4,@psgnoteoffloop		; run all PSG tracks
00084E68                            ; loc_721B6:
00084E68                            @locdblret:
00084E68 584F                       		addq.w	#4,sp	; Tamper with return value to not return to caller
00084E6A 4E75                       		rts	
00084E6C                            ; ===========================================================================
00084E6C                            ; byte_721BA:
00084E6C 0600 0102 0405 06          FMDACInitBytes:	dc.b 6,	0, 1, 2, 4, 5, 6	; first byte is for DAC; then notice the 0, 1, 2 then 4, 5, 6; this is the gap between parts I and II for YM2612 port writes
00084E74 00                         		even
00084E74                            ; byte_721C2:
00084E74 80A0 C0                    PSGInitBytes:	dc.b $80, $A0, $C0	; Specifically, these configure writes to the PSG port for each channel
00084E78 00                         		even
00084E78                            ; ===========================================================================
00084E78                            ; ---------------------------------------------------------------------------
00084E78                            ; Play Spin Dash sound effect
00084E78                            ; ---------------------------------------------------------------------------
00084E78                            Sound_D1toDF:
00084E78 4A2E 0027                  		tst.b	$27(a6)
00084E7C 6600 0000                  		bne.w	loc_722C6
00084E80 4A2E 0004                  		tst.b	4(a6)
00084E84 6600 0000                  		bne.w	loc_722C6
00084E88 4A2E 0024                  		tst.b	$24(a6)
00084E8C 6600 0000                  		bne.w	loc_722C6
00084E90 4238 C900                  		clr.b	($FFFFC900).w
00084E94 0C07 00D5                  		cmp.b	#$D5,d7		; is this the Spin Dash sound?
00084E98 6600                       		bne.s	@cont3	; if not, branch
00084E9A 3F00                       		move.w	d0,-(sp)
00084E9C 1038 C902                  		move.b	($FFFFC902).w,d0	; store extra frequency
00084EA0 4A38 C901                  		tst.b	($FFFFC901).w	; is the Spin Dash timer active?
00084EA4 6600                       		bne.s	@cont1		; if it is, branch
00084EA6 103C 00FF                  		move.b	#-1,d0		; otherwise, reset frequency (becomes 0 on next line)
00084EAA                            		
00084EAA                            @cont1:
00084EAA 5200                       		addq.b	#1,d0
00084EAC 0C00 000C                  		cmp.b	#$C,d0		; has the limit been reached?
00084EB0 6400                       		bcc.s	@cont2		; if it has, branch
00084EB2 11C0 C902                  		move.b	d0,($FFFFC902).w	; otherwise, set new frequency
00084EB6                            		
00084EB6                            @cont2:
00084EB6 11FC 0001 C900             		move.b	#1,($FFFFC900).w	; set flag
00084EBC 11FC 003C C901             		move.b	#60,($FFFFC901).w	; set timer
00084EC2 301F                       		move.w	(sp)+,d0
00084EC4                            		
00084EC4                            @cont3:	
00084EC4 2079 0008 4614             		movea.l	(Go_SoundIndex).l,a0
00084ECA 0407 00A0                  		sub.b	#$A0,d7
00084ECE 6000                       		bra.s	SoundEffects_Common
00084ED0                            ; ---------------------------------------------------------------------------
00084ED0                            ; Play normal sound effect
00084ED0                            ; ---------------------------------------------------------------------------
00084ED0                            ; Sound_A0toCF:
00084ED0                            Sound_PlaySFX:
00084ED0 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is 1-up playing?
00084ED4 6600 0000                  		bne.w	loc_722C6		; Exit is it is
00084ED8 4A2E 0004                  		tst.b	v_fadeout_counter(a6)	; Is music being faded out?
00084EDC 6600 0000                  		bne.w	loc_722C6		; Exit if it is
00084EE0 4A2E 0024                  		tst.b	f_fadein_flag(a6)	; Is music being faded in?
00084EE4 6600 0000                  		bne.w	loc_722C6		; Exit if it is
00084EE8 4238 C900                  		clr.b	($FFFFC900).w
00084EEC 0C07 0000                  		cmpi.b	#sfx_Ring,d7		; is ring sound	effect played?
00084EF0 6600                       		bne.s	Sound_notB5		; if not, branch
00084EF2 4A2E 002B                  		tst.b	v_ring_speaker(a6)	; Is the ring sound playing on right speaker?
00084EF6 6600                       		bne.s	loc_721EE		; Branch if not
00084EF8 1E3C 0000                  		move.b	#sfx_RingLeft,d7	; play ring sound in left speaker
00084EFC                            
00084EFC                            loc_721EE:
00084EFC 086E 0000 002B             		bchg	#0,v_ring_speaker(a6)	; change speaker
00084F02                            
00084F02                            Sound_notB5:
00084F02 0C07 0000                  		cmpi.b	#sfx_Push,d7		; is "pushing" sound played?
00084F06 6600                       		bne.s	Sound_notA7		; if not, branch
00084F08 4A2E 002C                  		tst.b	f_push_playing(a6)	; Is pushing sound already playing?
00084F0C 6600 0000                  		bne.w	locret_722C4			; Return if not
00084F10 1D7C 0080 002C             		move.b	#$80,f_push_playing(a6)	; Mark it as playing
00084F16                            		
00084F16                            Sound_notA7:
00084F16 2079 0008 4614             		movea.l	(Go_SoundIndex).l,a0
00084F1C 0407 00A0                  		subi.b	#sfx__First,d7		; Make it 0-based
00084F20                            
00084F20                            SoundEffects_Common:		
00084F20 E54F                       		lsl.w	#2,d7			; Convert sfx ID into index
00084F22 2670 7000                  		movea.l	(a0,d7.w),a3		; SFX data pointer
00084F26 224B                       		movea.l	a3,a1
00084F28 7200                       		moveq	#0,d1
00084F2A 3219                       		move.w	(a1)+,d1		; Voice pointer
00084F2C D28B                       		add.l	a3,d1			; Relative pointer
00084F2E 1A19                       		move.b	(a1)+,d5		; Dividing timing	
00084F30                            		; DANGER! there is a missing 'moveq	#0,d7' here, without which SFXes whose
00084F30                            		; index entry is above $3F will cause a crash. This is actually the same way that
00084F30                            		; this bug is fixed in Ristar's driver.
00084F30 7E00                       		moveq	#0,d7	
00084F32 1E19                       		move.b	(a1)+,d7	; Number of tracks (FM + PSG)
00084F34 5307                       		subq.b	#1,d7
00084F36 7C30                       		moveq	#TrackSz,d6
00084F38                            
00084F38                            loc_72228:
00084F38 7600                       		moveq	#0,d3
00084F3A 1629 0001                  		move.b	1(a1),d3	; Channel assignment bits
00084F3E 1803                       		move.b	d3,d4
00084F40 6B00                       		bmi.s	loc_72244	; Branch if PSG
00084F42 5543                       		subq.w	#2,d3		; SFX can only have FM3, FM4 or FM5
00084F44 E54B                       		lsl.w	#2,d3
00084F46 4BFA 0000                  		lea	SFX_BGMChannelRAM(pc),a5
00084F4A 2A75 3000                  		movea.l	(a5,d3.w),a5
00084F4E 08D5 0002                  		bset	#2,(a5)		; Mark music track as being overridden (TrackPlaybackControl)
00084F52 6000                       		bra.s	loc_7226E
00084F54                            ; ===========================================================================
00084F54                            
00084F54                            loc_72244:
00084F54 E64B                       		lsr.w	#3,d3
00084F56 4BFA 0000                  		lea	SFX_BGMChannelRAM(pc),a5
00084F5A 2A75 3000                  		movea.l	(a5,d3.w),a5
00084F5E 08D5 0002                  		bset	#2,(a5)			; Mark music track as being overridden (TrackPlaybackControl)
00084F62 0C04 00C0                  		cmpi.b	#$C0,d4			; Is this PSG 3?
00084F66 6600                       		bne.s	loc_7226E	; Branch if not
00084F68 1004                       		move.b	d4,d0
00084F6A 0000 001F                  		ori.b	#$1F,d0			; Command to silence PSG 3
00084F6E 13C0 00C0 0011             		move.b	d0,(psg_input).l
00084F74 0840 0005                  		bchg	#5,d0			; Command to silence noise channel
00084F78 13C0 00C0 0011             		move.b	d0,(psg_input).l
00084F7E                            
00084F7E                            loc_7226E:
00084F7E 4BFA 0000                  		lea	SFX_SFXChannelRAM(pc),a5
00084F82 2A75 3000                  		movea.l	(a5,d3.w),a5
00084F86 244D                       		movea.l	a5,a2
00084F88 700B                       		moveq	#(TrackSz/4)-1,d0	; $30 bytes
00084F8A                            
00084F8A                            loc_72276:
00084F8A 429A                       		clr.l	(a2)+
00084F8C 51C8 FFFC                  		dbf	d0,loc_72276
00084F90                            
00084F90 3A99                       		move.w	(a1)+,(a5)			; Initial playback control bits (TrackPlaybackControl)
00084F92 1B45 0002                  		move.b	d5,TrackTempoDivider(a5)	; Initial voice control bits
00084F96 7000                       		moveq	#0,d0
00084F98 3019                       		move.w	(a1)+,d0			; Track data pointer
00084F9A D08B                       		add.l	a3,d0				; Relative pointer
00084F9C 2B40 0004                  		move.l	d0,TrackDataPointer(a5)	; Store track pointer
00084FA0 3B59 0008                  		move.w	(a1)+,8(a5)
00084FA4 4A38 C900                  		tst.b	($FFFFC900).w	; is the Spin Dash sound playing?
00084FA8 6700                       		beq.s	@cont		; if not, branch
00084FAA 3F00                       		move.w	d0,-(sp)
00084FAC 1038 C902                  		move.b	($FFFFC902).w,d0
00084FB0 D12D 0008                  		add.b	d0,8(a5)
00084FB4 301F                       		move.w	(sp)+,d0
00084FB6                            		
00084FB6                            @cont:
00084FB6 1B7C 0001 000E             		move.b	#1,$E(a5)
00084FBC 1B46 000D                  		move.b	d6,TrackStackPointer(a5)	; set "gosub" (coord flag F8h) stack init value
00084FC0 4A04                       		tst.b	d4				; Is this a PSG channel?
00084FC2 6B00                       		bmi.s	loc_722A8		; Branch if yes
00084FC4 1B7C 00C0 000A             		move.b	#$C0,TrackAMSFMSPan(a5)	; AMS/FMS/Panning
00084FCA 2B41 0020                  		move.l	d1,TrackVoicePtr(a5)		; Voice pointer
00084FCE                            
00084FCE                            loc_722A8:
00084FCE 51CF FF68                  		dbf	d7,loc_72228
00084FD2                            
00084FD2 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX being played?
00084FD6 6A00                       		bpl.s	loc_722B8				; Branch if not
00084FD8 08EE 0002 0340             		bset	#2,v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00084FDE                            
00084FDE                            loc_722B8:
00084FDE 4A2E 0310                  		tst.b	v_sfx_psg3_track+TrackPlaybackControl(a6)	; Is SFX being played?
00084FE2 6A00                       		bpl.s	locret_722C4						; Branch if not
00084FE4 08EE 0002 0370             		bset	#2,v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00084FEA                            
00084FEA                            locret_722C4:
00084FEA 4E75                       		rts	
00084FEC                            ; ===========================================================================
00084FEC                            
00084FEC                            loc_722C6:
00084FEC 4216                       		clr.b	v_sndprio(a6)	; Clear priority
00084FEE 4E75                       		rts	
00084FF0                            ; ===========================================================================
00084FF0                            ; ---------------------------------------------------------------------------
00084FF0                            ; RAM addresses for FM and PSG channel variables used by the SFX
00084FF0                            ; ---------------------------------------------------------------------------
00084FF0                            ; dword_722CC: BGMChannelRAM:
00084FF0                            SFX_BGMChannelRAM:
00084FF0 00FF F0D0                  		dc.l (v_snddriver_ram+v_music_fm3_track)&$FFFFFF
00084FF4 0000 0000                  		dc.l 0
00084FF8 00FF F100                  		dc.l (v_snddriver_ram+v_music_fm4_track)&$FFFFFF
00084FFC 00FF F130                  		dc.l (v_snddriver_ram+v_music_fm5_track)&$FFFFFF
00085000 00FF F190                  		dc.l (v_snddriver_ram+v_music_psg1_track)&$FFFFFF
00085004 00FF F1C0                  		dc.l (v_snddriver_ram+v_music_psg2_track)&$FFFFFF
00085008 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF	; Plain PSG3
0008500C 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF	; Noise
00085010                            ; dword_722EC: SFXChannelRAM:
00085010                            SFX_SFXChannelRAM:
00085010 00FF F220                  		dc.l (v_snddriver_ram+v_sfx_fm3_track)&$FFFFFF
00085014 0000 0000                  		dc.l 0
00085018 00FF F250                  		dc.l (v_snddriver_ram+v_sfx_fm4_track)&$FFFFFF
0008501C 00FF F280                  		dc.l (v_snddriver_ram+v_sfx_fm5_track)&$FFFFFF
00085020 00FF F2B0                  		dc.l (v_snddriver_ram+v_sfx_psg1_track)&$FFFFFF
00085024 00FF F2E0                  		dc.l (v_snddriver_ram+v_sfx_psg2_track)&$FFFFFF
00085028 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF	; Plain PSG3
0008502C 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF	; Noise
00085030                            ; ===========================================================================
00085030                            ; ---------------------------------------------------------------------------
00085030                            ; Play GHZ waterfall sound
00085030                            ; ---------------------------------------------------------------------------
00085030                            ; Sound_D0toDF:
00085030                            Sound_PlaySpecial:
00085030 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is 1-up playing?
00085034 6600 0000                  		bne.w	@locret			; Return if so
00085038 4A2E 0004                  		tst.b	v_fadeout_counter(a6)	; Is music being faded out?
0008503C 6600 0000                  		bne.w	@locret			; Exit if it is
00085040 4A2E 0024                  		tst.b	f_fadein_flag(a6)	; Is music being faded in?
00085044 6600 0000                  		bne.w	@locret			; Exit if it is
00085048 2079 0008 460C             		movea.l	(Go_SpecSoundIndex).l,a0
0008504E 0407 00D0                  		subi.b	#spec__First,d7		; Make it 0-based
00085052 E54F                       		lsl.w	#2,d7
00085054 2670 7000                  		movea.l	(a0,d7.w),a3
00085058 224B                       		movea.l	a3,a1
0008505A 7000                       		moveq	#0,d0
0008505C 3019                       		move.w	(a1)+,d0			; Voice pointer
0008505E D08B                       		add.l	a3,d0				; Relative pointer
00085060 2D40 0020                  		move.l	d0,v_special_voice_ptr(a6)	; Store voice pointer
00085064 1A19                       		move.b	(a1)+,d5			; Dividing timing
00085066                            		; DANGER! there is a missing 'moveq	#0,d7' here, without which special SFXes whose
00085066                            		; index entry is above $3F will cause a crash. This instance was not fixed in Ristar's driver.
00085066 7E00                       		moveq	#0,d7	
00085068 1E19                       		move.b	(a1)+,d7			; Number of tracks (FM + PSG)
0008506A 5307                       		subq.b	#1,d7
0008506C 7C30                       		moveq	#TrackSz,d6
0008506E                            ; loc_72348:
0008506E                            @sfxloadloop:
0008506E 1829 0001                  		move.b	1(a1),d4					; Voice control bits
00085072 6B00                       		bmi.s	@sfxoverridepsg					; Branch if PSG
00085074 08EE 0002 0100             		bset	#2,v_music_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
0008507A 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
0008507E 6000                       		bra.s	@sfxinitpsg
00085080                            ; ===========================================================================
00085080                            ; loc_7235A:
00085080                            @sfxoverridepsg:
00085080 08EE 0002 01F0             		bset	#2,v_music_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00085086 4BEE 0370                  		lea	v_spcsfx_psg3_track(a6),a5
0008508A                            ; loc_72364:
0008508A                            @sfxinitpsg:
0008508A 244D                       		movea.l	a5,a2
0008508C 700B                       		moveq	#(TrackSz/4)-1,d0	; $30 bytes
0008508E                            ; loc_72368:
0008508E                            @clearsfxtrackram:
0008508E 429A                       		clr.l	(a2)+
00085090 51C8 FFFC                  		dbf	d0,@clearsfxtrackram
00085094                            
00085094 3A99                       		move.w	(a1)+,(a5)			; Initial playback control bits & voice control bits (TrackPlaybackControl)
00085096 1B45 0002                  		move.b	d5,TrackTempoDivider(a5)
0008509A 7000                       		moveq	#0,d0
0008509C 3019                       		move.w	(a1)+,d0			; Track data pointer
0008509E D08B                       		add.l	a3,d0				; Relative pointer
000850A0 2B40 0004                  		move.l	d0,TrackDataPointer(a5)	; Store track pointer
000850A4 3B59 0008                  		move.w	(a1)+,TrackTranspose(a5)	; load FM/PSG channel modifier
000850A8 1B7C 0001 000E             		move.b	#1,TrackDurationTimeout(a5)	; Set duration of first "note"
000850AE 1B46 000D                  		move.b	d6,TrackStackPointer(a5)	; set "gosub" (coord flag F8h) stack init value
000850B2 4A04                       		tst.b	d4				; Is this a PSG channel?
000850B4 6B00                       		bmi.s	@sfxpsginitdone			; Branch if yes
000850B6 1B7C 00C0 000A             		move.b	#$C0,TrackAMSFMSPan(a5)	; AMS/FMS/Panning
000850BC                            ; loc_72396:
000850BC                            @sfxpsginitdone:
000850BC 51CF FFB0                  		dbf	d7,@sfxloadloop
000850C0                            
000850C0 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is track playing?
000850C4 6A00                       		bpl.s	@doneoverride					; Branch if not
000850C6 08EE 0002 0340             		bset	#2,v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
000850CC                            ; loc_723A6:
000850CC                            @doneoverride:
000850CC 4A2E 0310                  		tst.b	v_sfx_psg3_track+TrackPlaybackControl(a6)	; Is track playing?
000850D0 6A00                       		bpl.s	@locret						; Branch if not
000850D2 08EE 0002 0370             		bset	#2,v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
000850D8 0004 001F                  		ori.b	#$1F,d4						; Command to silence channel
000850DC 13C4 00C0 0011             		move.b	d4,(psg_input).l
000850E2 0844 0005                  		bchg	#5,d4			; Command to silence noise channel
000850E6 13C4 00C0 0011             		move.b	d4,(psg_input).l
000850EC                            ; locret_723C6:
000850EC                            @locret:
000850EC 4E75                       		rts	
000850EE                            ; End of function PlaySoundID
000850EE                            
000850EE                            ; ===========================================================================
000850EE                            ; ---------------------------------------------------------------------------
000850EE                            ; Unused RAM addresses for FM and PSG channel variables used by the Special SFX
000850EE                            ; ---------------------------------------------------------------------------
000850EE                            ; The first block would have been used for overriding the music tracks
000850EE                            ; as they have a lower priority, just as they are in Sound_PlaySFX
000850EE                            ; The third block would be used to set up the Special SFX
000850EE                            ; The second block, however, is for the SFX tracks, which have a higher priority
000850EE                            ; and would be checked for if they're currently playing
000850EE                            ; If they are, then the third block would be used again, this time to mark
000850EE                            ; the new tracks as 'currently playing'
000850EE                            
000850EE                            ; These were actually used in Moonwalker's driver (and other SMPS 68k Type 1a drivers)
000850EE                            
000850EE                            ; BGMFM4PSG3RAM:
000850EE                            ;SpecSFX_BGMChannelRAM:
000850EE 00FF F100                  		dc.l (v_snddriver_ram+v_music_fm4_track)&$FFFFFF
000850F2 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF
000850F6                            ; SFXFM4PSG3RAM:
000850F6                            ;SpecSFX_SFXChannelRAM:
000850F6 00FF F250                  		dc.l (v_snddriver_ram+v_sfx_fm4_track)&$FFFFFF
000850FA 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF
000850FE                            ; SpecialSFXFM4PSG3RAM:
000850FE                            ;SpecSFX_SpecSFXChannelRAM:
000850FE 00FF F340                  		dc.l (v_snddriver_ram+v_spcsfx_fm4_track)&$FFFFFF
00085102 00FF F370                  		dc.l (v_snddriver_ram+v_spcsfx_psg3_track)&$FFFFFF
00085106                            
00085106                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085106                            
00085106                            ; Snd_FadeOut1: Snd_FadeOutSFX: FadeOutSFX:
00085106                            StopSFX:
00085106 4216                       		clr.b	v_sndprio(a6)		; Clear priority
00085108 4BEE 0220                  		lea	v_sfx_track_ram(a6),a5
0008510C 7E05                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d7	; 3 FM + 3 PSG tracks (SFX)
0008510E                            ; loc_723EA:
0008510E                            @trackloop:
0008510E 4A15                       		tst.b	(a5)		; Is track playing? (TrackPlaybackControl)
00085110 6A00 0000                  		bpl.w	@nexttrack	; Branch if not
00085114 0895 0007                  		bclr	#7,(a5)		; Stop track (TrackPlaybackControl)
00085118 7600                       		moveq	#0,d3
0008511A 162D 0001                  		move.b	TrackVoiceControl(a5),d3	; Get voice control bits
0008511E 6B00                       		bmi.s	@trackpsg			; Branch if PSG
00085120 4EBA 0000                  		jsr	FMNoteOff(pc)
00085124 0C03 0004                  		cmpi.b	#4,d3						; Is this FM4?
00085128 6600                       		bne.s	@getfmpointer					; Branch if not
0008512A 4A2E 0340                  		tst.b	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX playing?
0008512E 6A00                       		bpl.s	@getfmpointer					; Branch if not
00085130                            		; DANGER! there is a missing 'movea.l	a5,a3' here, without which the
00085130                            		; code is broken. It is dangerous to do a fade out when a GHZ waterfall
00085130                            		; is playing its sound!
00085130 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
00085134 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1	; Get special voice pointer
00085138 6000                       		bra.s	@gotfmpointer
0008513A                            ; ===========================================================================
0008513A                            ; loc_72416:
0008513A                            @getfmpointer:
0008513A 5503                       		subq.b	#2,d3		; SFX only has FM3 and up
0008513C E50B                       		lsl.b	#2,d3
0008513E 41FA FEB0                  		lea	SFX_BGMChannelRAM(pc),a0
00085142 264D                       		movea.l	a5,a3
00085144 2A70 3000                  		movea.l	(a0,d3.w),a5
00085148 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Get music voice pointer
0008514C                            ; loc_72428:
0008514C                            @gotfmpointer:
0008514C 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00085150 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00085154 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00085158 4EBA 0000                  		jsr	SetVoice(pc)
0008515C 2A4B                       		movea.l	a3,a5
0008515E 6000                       		bra.s	@nexttrack
00085160                            ; ===========================================================================
00085160                            ; loc_7243C:
00085160                            @trackpsg:
00085160 4EBA 0000                  		jsr	PSGNoteOff(pc)
00085164 41EE 0370                  		lea	v_spcsfx_psg3_track(a6),a0
00085168 0C03 00E0                  		cmpi.b	#$E0,d3			; Is this a noise channel:
0008516C 6700                       		beq.s	@gotpsgpointer		; Branch if yes
0008516E 0C03 00C0                  		cmpi.b	#$C0,d3			; Is this PSG 3?
00085172 6700                       		beq.s	@gotpsgpointer		; Branch if yes
00085174 E60B                       		lsr.b	#3,d3
00085176 41FA FE78                  		lea	SFX_BGMChannelRAM(pc),a0
0008517A 2070 3000                  		movea.l	(a0,d3.w),a0
0008517E                            ; loc_7245A:
0008517E                            @gotpsgpointer:
0008517E 0890 0002                  		bclr	#2,(a0)				; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00085182 08D0 0001                  		bset	#1,(a0)				; Set 'track at rest' bit (TrackPlaybackControl)
00085186 0C28 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a0)	; Is this a noise channel?
0008518C 6600                       		bne.s	@nexttrack			; Branch if not
0008518E 13E8 001F 00C0 0011        		move.b	TrackPSGNoise(a0),(psg_input).l ; Set noise type
00085196                            ; loc_72472:
00085196                            @nexttrack:
00085196 DAFC 0030                  		adda.w	#TrackSz,a5
0008519A 51CF FF72                  		dbf	d7,@trackloop
0008519E                            
0008519E 4E75                       		rts	
000851A0                            ; End of function StopSFX
000851A0                            
000851A0                            
000851A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000851A0                            
000851A0                            ; Snd_FadeOut2: FadeOutSFX2: FadeOutSpecialSFX:
000851A0                            StopSpecialSFX:
000851A0 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
000851A4 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000851A6 6A00                       		bpl.s	@fadedfm		; Branch if not
000851A8 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
000851AC 0815 0002                  		btst	#2,(a5)			; Is SFX overriding? (TrackPlaybackControl)
000851B0 6600                       		bne.s	@fadedfm		; Branch if not
000851B2 4EBA 0000                  		jsr	SendFMNoteOff(pc)
000851B6 4BEE 0100                  		lea	v_music_fm4_track(a6),a5
000851BA 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
000851BE 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
000851C2 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000851C4 6A00                       		bpl.s	@fadedfm		; Branch if not
000851C6 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
000851CA 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
000851CE 4EBA 0000                  		jsr	SetVoice(pc)
000851D2                            ; loc_724AE:
000851D2                            @fadedfm:
000851D2 4BEE 0370                  		lea	v_spcsfx_psg3_track(a6),a5
000851D6 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000851D8 6A00                       		bpl.s	@fadedpsg		; Branch if not
000851DA 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
000851DE 0815 0002                  		btst	#2,(a5)			; Is SFX overriding? (TrackPlaybackControl)
000851E2 6600                       		bne.s	@fadedpsg		; Return if not
000851E4 4EBA 0000                  		jsr	SendPSGNoteOff(pc)
000851E8 4BEE 01F0                  		lea	v_music_psg3_track(a6),a5
000851EC 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
000851F0 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
000851F4 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000851F6 6A00                       		bpl.s	@fadedpsg		; Return if not
000851F8 0C2D 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a5)	; Is this a noise channel?
000851FE 6600                       		bne.s	@fadedpsg			; Return if not
00085200 13ED 001F 00C0 0011        		move.b	TrackPSGNoise(a5),(psg_input).l ; Set noise type
00085208                            ; locret_724E4:
00085208                            @fadedpsg:
00085208 4E75                       		rts	
0008520A                            ; End of function StopSpecialSFX
0008520A                            
0008520A                            ; ===========================================================================
0008520A                            ; ---------------------------------------------------------------------------
0008520A                            ; Fade out music
0008520A                            ; ---------------------------------------------------------------------------
0008520A                            ; Sound_E0:
0008520A                            FadeOutMusic:
0008520A 4EBA FEFA                  		jsr	StopSFX(pc)
0008520E 4EBA FF90                  		jsr	StopSpecialSFX(pc)
00085212 1D7C 0003 0006             		move.b	#3,v_fadeout_delay(a6)			; Set fadeout delay to 3
00085218 1D7C 0028 0004             		move.b	#$28,v_fadeout_counter(a6)		; Set fadeout counter
0008521E 422E 0040                  		clr.b	v_music_dac_track+TrackPlaybackControl(a6)	; Stop DAC track
00085222 422E 002A                  		clr.b	f_speedup(a6)				; Disable speed shoes tempo
00085226 4E75                       		rts	
00085228                            
00085228                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085228                            
00085228                            ; sub_72504:
00085228                            DoFadeOut:
00085228 102E 0006                  		move.b	v_fadeout_delay(a6),d0	; Has fadeout delay expired?
0008522C 6700                       		beq.s	@continuefade		; Branch if yes
0008522E 532E 0006                  		subq.b	#1,v_fadeout_delay(a6)
00085232 4E75                       		rts	
00085234                            ; ===========================================================================
00085234                            ; loc_72510:
00085234                            @continuefade:
00085234 532E 0004                  		subq.b	#1,v_fadeout_counter(a6)	; Update fade counter
00085238 6700 0000                  		beq.w	StopAllSound			; Branch if fade is done
0008523C 1D7C 0003 0006             		move.b	#3,v_fadeout_delay(a6)		; Reset fade delay
00085242 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
00085246 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
00085248                            ; loc_72524:
00085248                            @fmloop:
00085248 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
0008524A 6A00                       		bpl.s	@nextfm			; Branch if not
0008524C 522D 0009                  		addq.b	#1,TrackVolume(a5)	; Increase volume attenuation
00085250 6A00                       		bpl.s	@sendfmtl		; Branch if still positive
00085252 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00085256 6000                       		bra.s	@nextfm
00085258                            ; ===========================================================================
00085258                            ; loc_72534:
00085258                            @sendfmtl:
00085258 4EBA 0000                  		jsr	SendVoiceTL(pc)
0008525C                            ; loc_72538:
0008525C                            @nextfm:
0008525C DAFC 0030                  		adda.w	#TrackSz,a5
00085260 51CF FFE6                  		dbf	d7,@fmloop
00085264                            
00085264 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7	; 3 PSG tracks
00085266                            ; loc_72542:
00085266                            @psgloop:
00085266 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00085268 6A00                       		bpl.s	@nextpsg		; branch if not
0008526A 522D 0009                  		addq.b	#1,TrackVolume(a5)	; Increase volume attenuation
0008526E 0C2D 0010 0009             		cmpi.b	#$10,TrackVolume(a5)	; Is it greater than $F?
00085274 6500                       		blo.s	@sendpsgvol		; Branch if not
00085276 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
0008527A 6000                       		bra.s	@nextpsg
0008527C                            ; ===========================================================================
0008527C                            ; loc_72558:
0008527C                            @sendpsgvol:
0008527C 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Store new volume attenuation
00085280 4EBA 0000                  		jsr	SetPSGVolume(pc)
00085284                            ; loc_72560:
00085284                            @nextpsg:
00085284 DAFC 0030                  		adda.w	#TrackSz,a5
00085288 51CF FFDC                  		dbf	d7,@psgloop
0008528C                            
0008528C 4E75                       		rts	
0008528E                            ; End of function DoFadeOut
0008528E                            
0008528E                            
0008528E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008528E                            
0008528E                            ; sub_7256A:
0008528E                            FMSilenceAll:
0008528E 7602                       		moveq	#2,d3		; 3 FM channels for each YM2612 parts
00085290 7028                       		moveq	#$28,d0		; FM key on/off register
00085292                            ; loc_7256E:
00085292                            @noteoffloop:
00085292 1203                       		move.b	d3,d1
00085294 4EBA 0000                  		jsr	WriteFMI(pc)
00085298 5801                       		addq.b	#4,d1		; Move to YM2612 part 1
0008529A 4EBA 0000                  		jsr	WriteFMI(pc)
0008529E 51CB FFF2                  		dbf	d3,@noteoffloop
000852A2                            
000852A2 7040                       		moveq	#$40,d0		; Set TL on FM channels...
000852A4 727F                       		moveq	#$7F,d1		; ... to total attenuation...
000852A6 7802                       		moveq	#2,d4		; ... for all 3 channels...
000852A8                            ; loc_72584:
000852A8                            @channelloop:
000852A8 7603                       		moveq	#3,d3		; ... for all operators on each channel...
000852AA                            ; loc_72586:
000852AA                            @channeltlloop:
000852AA 4EBA 0000                  		jsr	WriteFMI(pc)	; ... for part 0...
000852AE 4EBA 0000                  		jsr	WriteFMII(pc)	; ... and part 1.
000852B2 5840                       		addq.w	#4,d0		; Next TL operator
000852B4 51CB FFF4                  		dbf	d3,@channeltlloop
000852B8                            
000852B8 0400 000F                  		subi.b	#$F,d0		; Move to TL operator 1 of next channel
000852BC 51CC FFEA                  		dbf	d4,@channelloop
000852C0                            
000852C0 4E75                       		rts	
000852C2                            ; End of function FMSilenceAll
000852C2                            
000852C2                            ; ===========================================================================
000852C2                            ; ---------------------------------------------------------------------------
000852C2                            ; Stop music
000852C2                            ; ---------------------------------------------------------------------------
000852C2                            ; Sound_E4: StopSoundAndMusic:
000852C2                            StopAllSound:
000852C2 702B                       		moveq	#$2B,d0		; Enable/disable DAC
000852C4 123C 0080                  		move.b	#$80,d1		; Enable DAC
000852C8 4EBA 0000                  		jsr	WriteFMI(pc)
000852CC 7027                       		moveq	#$27,d0		; Timers, FM3/FM6 mode
000852CE 7200                       		moveq	#0,d1		; FM3/FM6 normal mode, disable timers
000852D0 4EBA 0000                  		jsr	WriteFMI(pc)
000852D4 204E                       		movea.l	a6,a0
000852D6                            		; DANGER! This should be clearing all variables and track data, but misses the last $10 bytes of v_spcsfx_psg3_track.
000852D6                            		; Remove the '-$10' to fix this.
000852D6 303C 00E7                  		move.w	#((v_spcsfx_track_ram_end-v_startofvariables)/4)-1,d0	; Clear $390 bytes: all variables and most track data
000852DA                            ; loc_725B6:
000852DA                            @clearramloop:
000852DA 4298                       		clr.l	(a0)+
000852DC 51C8 FFFC                  		dbf	d0,@clearramloop
000852E0                            
000852E0 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; set music to $80 (silence)
000852E6 4EBA FFA6                  		jsr	FMSilenceAll(pc)
000852EA 6000 0000                  		bra.w	PSGSilenceAll
000852EE                            
000852EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000852EE                            
000852EE                            ; sub_725CA:
000852EE                            InitMusicPlayback:
000852EE 204E                       		movea.l	a6,a0
000852F0                            		; Save several values
000852F0 1216                       		move.b	v_sndprio(a6),d1
000852F2 142E 0027                  		move.b	f_1up_playing(a6),d2
000852F6 162E 002A                  		move.b	f_speedup(a6),d3
000852FA 182E 0026                  		move.b	v_fadein_counter(a6),d4
000852FE                            		; DANGER! Only v_soundqueue0 and v_soundqueue1 are backed up, once again breaking v_soundqueue2
000852FE 3A2E 000A                  		move.w	v_soundqueue0(a6),d5
00085302 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; Clear $220 bytes: all variables and music track data
00085306                            ; loc_725E4:
00085306                            @clearramloop:
00085306 4298                       		clr.l	(a0)+
00085308 51C8 FFFC                  		dbf	d0,@clearramloop
0008530C                            
0008530C                            		; Restore the values saved above
0008530C 1C81                       		move.b	d1,v_sndprio(a6)
0008530E 1D42 0027                  		move.b	d2,f_1up_playing(a6)
00085312 1D43 002A                  		move.b	d3,f_speedup(a6)
00085316 1D44 0026                  		move.b	d4,v_fadein_counter(a6)
0008531A 3D45 000A                  		move.w	d5,v_soundqueue0(a6)
0008531E 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; set music to $80 (silence)
00085324                            		; DANGER! This silences ALL channels, even the ones being used
00085324                            		; by SFX, and not music! @sendfmnoteoff does this already, and
00085324                            		; doesn't affect SFX channels, either.
00085324                            		; This should be replaced with an 'rts'.
00085324 4EBA FF68                  		jsr	FMSilenceAll(pc)
00085328 6000 0000                  		bra.w	PSGSilenceAll
0008532C                            		; DANGER! InitMusicPlayback, and Sound_PlayBGM for that matter,
0008532C                            		; don't do a very good job of setting up the music tracks.
0008532C                            		; Tracks that aren't defined in a music file's header don't have
0008532C                            		; their channels defined, meaning @sendfmnoteoff won't silence
0008532C                            		; hardware properly. In combination with removing the above
0008532C                            		; calls to FMSilenceAll/PSGSilenceAll, this will cause hanging
0008532C                            		; notes.
0008532C                            		; To fix this, I suggest using this code, instead of an 'rts':
0008532C                            		;lea	v_music_track_ram+TrackVoiceControl(a6),a1
0008532C                            		;lea	FMDACInitBytes(pc),a2
0008532C                            		;moveq	#((v_music_fmdac_tracks_end-v_music_fmdac_tracks)/TrackSz)-1,d1		; 7 DAC/FM tracks
0008532C                            		;bsr.s	@writeloop
0008532C                            		;lea	PSGInitBytes(pc),a2
0008532C                            		;moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d1	; 3 PSG tracks
0008532C                            
0008532C                            ;@writeloop:
0008532C                            		;move.b	(a2)+,(a1)		; Write track's channel byte
0008532C                            		;lea	TrackSz(a1),a1		; Next track
0008532C                            		;dbf	d1,@writeloop		; Loop for all DAC/FM/PSG tracks
0008532C                            
0008532C                            		;rts
0008532C                            	
0008532C                            ; End of function InitMusicPlayback
0008532C                            
0008532C                            
0008532C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008532C                            
0008532C                            ; sub_7260C:
0008532C                            TempoWait:
0008532C 1D6E 0002 0001             		move.b	v_main_tempo(a6),v_main_tempo_timeout(a6)	; Reset main tempo timeout
00085332 41EE 004E                  		lea	v_music_track_ram+TrackDurationTimeout(a6),a0	; note timeout
00085336 7030                       		moveq	#TrackSz,d0
00085338 7209                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d1		; 1 DAC + 6 FM + 3 PSG tracks
0008533A                            ; loc_7261A:
0008533A                            @tempoloop:
0008533A 5210                       		addq.b	#1,(a0)	; Delay note by 1 frame
0008533C D0C0                       		adda.w	d0,a0	; Advance to next track
0008533E 51C9 FFFA                  		dbf	d1,@tempoloop
00085342                            
00085342 4E75                       		rts	
00085344                            ; End of function TempoWait
00085344                            
00085344                            ; ===========================================================================
00085344                            ; ---------------------------------------------------------------------------
00085344                            ; Speed	up music
00085344                            ; ---------------------------------------------------------------------------
00085344                            ; Sound_E2:
00085344                            SpeedUpMusic:
00085344 4A2E 0027                  		tst.b	f_1up_playing(a6)
00085348 6600                       		bne.s	@speedup_1up
0008534A 1D6E 0029 0002             		move.b	v_speeduptempo(a6),v_main_tempo(a6)
00085350 1D6E 0029 0001             		move.b	v_speeduptempo(a6),v_main_tempo_timeout(a6)
00085356 1D7C 0080 002A             		move.b	#$80,f_speedup(a6)
0008535C 4E75                       		rts	
0008535E                            ; ===========================================================================
0008535E                            ; loc_7263E:
0008535E                            @speedup_1up:
0008535E 1D6E 03C9 03A2             		move.b	v_1up_ram_copy+v_speeduptempo(a6),v_1up_ram_copy+v_main_tempo(a6)
00085364 1D6E 03C9 03A1             		move.b	v_1up_ram_copy+v_speeduptempo(a6),v_1up_ram_copy+v_main_tempo_timeout(a6)
0008536A 1D7C 0080 03CA             		move.b	#$80,v_1up_ram_copy+f_speedup(a6)
00085370 4E75                       		rts	
00085372                            ; ===========================================================================
00085372                            ; ---------------------------------------------------------------------------
00085372                            ; Change music back to normal speed
00085372                            ; ---------------------------------------------------------------------------
00085372                            ; Sound_E3:
00085372                            SlowDownMusic:
00085372 4A2E 0027                  		tst.b	f_1up_playing(a6)
00085376 6600                       		bne.s	@slowdown_1up
00085378 1D6E 0028 0002             		move.b	v_tempo_mod(a6),v_main_tempo(a6)
0008537E 1D6E 0028 0001             		move.b	v_tempo_mod(a6),v_main_tempo_timeout(a6)
00085384 422E 002A                  		clr.b	f_speedup(a6)
00085388 4E75                       		rts	
0008538A                            ; ===========================================================================
0008538A                            ; loc_7266A:
0008538A                            @slowdown_1up:
0008538A 1D6E 03C8 03A2             		move.b	v_1up_ram_copy+v_tempo_mod(a6),v_1up_ram_copy+v_main_tempo(a6)
00085390 1D6E 03C8 03A1             		move.b	v_1up_ram_copy+v_tempo_mod(a6),v_1up_ram_copy+v_main_tempo_timeout(a6)
00085396 422E 03CA                  		clr.b	v_1up_ram_copy+f_speedup(a6)
0008539A 4E75                       		rts	
0008539C                            
0008539C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008539C                            
0008539C                            ; sub_7267C:
0008539C                            DoFadeIn:
0008539C 4A2E 0025                  		tst.b	v_fadein_delay(a6)	; Has fadein delay expired?
000853A0 6700                       		beq.s	@continuefade		; Branch if yes
000853A2 532E 0025                  		subq.b	#1,v_fadein_delay(a6)
000853A6 4E75                       		rts	
000853A8                            ; ===========================================================================
000853A8                            ; loc_72688:
000853A8                            @continuefade:
000853A8 4A2E 0026                  		tst.b	v_fadein_counter(a6)	; Is fade done?
000853AC 6700                       		beq.s	@fadedone		; Branch if yes
000853AE 532E 0026                  		subq.b	#1,v_fadein_counter(a6)	; Update fade counter
000853B2 1D7C 0002 0025             		move.b	#2,v_fadein_delay(a6)	; Reset fade delay
000853B8 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
000853BC 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
000853BE                            ; loc_7269E:
000853BE                            @fmloop:
000853BE 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000853C0 6A00                       		bpl.s	@nextfm			; Branch if not
000853C2 532D 0009                  		subq.b	#1,TrackVolume(a5)	; Reduce volume attenuation
000853C6 4EBA 0000                  		jsr	SendVoiceTL(pc)
000853CA                            ; loc_726AA:
000853CA                            @nextfm:
000853CA DAFC 0030                  		adda.w	#TrackSz,a5
000853CE 51CF FFEE                  		dbf	d7,@fmloop
000853D2 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7		; 3 PSG tracks
000853D4                            ; loc_726B4:
000853D4                            @psgloop:
000853D4 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000853D6 6A00                       		bpl.s	@nextpsg		; Branch if not
000853D8 532D 0009                  		subq.b	#1,TrackVolume(a5)	; Reduce volume attenuation
000853DC 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Get value
000853E0 0C06 0010                  		cmpi.b	#$10,d6			; Is it is < $10?
000853E4 6500                       		blo.s	@sendpsgvol		; Branch if yes
000853E6 7C0F                       		moveq	#$F,d6			; Limit to $F (maximum attenuation)
000853E8                            ; loc_726C8:
000853E8                            @sendpsgvol:
000853E8 4EBA 0000                  		jsr	SetPSGVolume(pc)
000853EC                            ; loc_726CC:
000853EC                            @nextpsg:
000853EC DAFC 0030                  		adda.w	#TrackSz,a5
000853F0 51CF FFE2                  		dbf	d7,@psgloop
000853F4 4E75                       		rts	
000853F6                            ; ===========================================================================
000853F6                            ; loc_726D6:
000853F6                            @fadedone:
000853F6 08AE 0002 0040             		bclr	#2,v_music_dac_track+TrackPlaybackControl(a6)	; Clear 'SFX overriding' bit
000853FC 422E 0024                  		clr.b	f_fadein_flag(a6)				; Stop fadein
00085400 4E75                       		rts	
00085402                            ; End of function DoFadeIn
00085402                            
00085402                            ; ===========================================================================
00085402                            ; loc_726E2:
00085402                            FMNoteOn:
00085402 0815 0001                  		btst	#1,(a5)		; Is track resting? (TrackPlaybackControl)
00085406 6600                       		bne.s	@locret		; Return if so
00085408 0815 0002                  		btst	#2,(a5)		; Is track being overridden? (TrackPlaybackControl)
0008540C 6600                       		bne.s	@locret		; Return if so
0008540E 7028                       		moveq	#$28,d0		; Note on/off register
00085410 122D 0001                  		move.b	TrackVoiceControl(a5),d1 ; Get channel bits
00085414 0001 00F0                  		ori.b	#$F0,d1		; Note on on all operators
00085418 6000 0000                  		bra.w	WriteFMI
0008541C                            ; ===========================================================================
0008541C                            ; locret_726FC:
0008541C                            @locret:
0008541C 4E75                       		rts	
0008541E                            
0008541E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008541E                            
0008541E                            ; sub_726FE:
0008541E                            FMNoteOff:
0008541E 0815 0004                  		btst	#4,(a5)		; Is 'do not attack next note' set? (TrackPlaybackControl)
00085422 6600                       		bne.s	locret_72714	; Return if yes
00085424 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
00085428 6600                       		bne.s	locret_72714	; Return if yes
0008542A                            ; loc_7270A:
0008542A                            SendFMNoteOff:
0008542A 7028                       		moveq	#$28,d0		; Note on/off register
0008542C 122D 0001                  		move.b	TrackVoiceControl(a5),d1 ; Note off to this channel
00085430 6000 0000                  		bra.w	WriteFMI
00085434                            ; ===========================================================================
00085434                            
00085434                            locret_72714:
00085434 4E75                       		rts	
00085436                            ; End of function FMNoteOff
00085436                            
00085436                            ; ===========================================================================
00085436                            ; loc_72716:
00085436                            WriteFMIorIIMain:
00085436 0815 0002                  		btst	#2,(a5)		; Is track being overriden by sfx? (TrackPlaybackControl)
0008543A 6600                       		bne.s	@locret		; Return if yes
0008543C 6000 0000                  		bra.w	WriteFMIorII
00085440                            ; ===========================================================================
00085440                            ; locret_72720:
00085440                            @locret:
00085440 4E75                       		rts	
00085442                            
00085442                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085442                            
00085442                            ; sub_72722:
00085442                            WriteFMIorII:
00085442 082D 0002 0001             		btst	#2,TrackVoiceControl(a5)	; Is this bound for part I or II?
00085448 6600                       		bne.s	WriteFMIIPart			; Branch if for part II
0008544A D02D 0001                  		add.b	TrackVoiceControl(a5),d0	; Add in voice control bits
0008544E                            ; End of function WriteFMIorII
0008544E                            
0008544E                            
0008544E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008544E                            
0008544E                            ; The reason I think this is an *early* SMPS 68k Type 1b
0008544E                            ; is because this subroutine is the one from Type 1a:
0008544E                            ; other Type 1b drivers have a newer, optimised version.
0008544E                            ; The driver itself is Type 1b, with this odd exception.
0008544E                            
0008544E                            ; sub_7272E:
0008544E                            WriteFMI:
0008544E 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
00085454 0802 0007                  		btst	#7,d2		; Is FM busy?
00085458 66F4                       		bne.s	WriteFMI	; Loop if so
0008545A 13C0 00A0 4000             		move.b	d0,(ym2612_a0).l
00085460 4E71                       		nop	
00085462 4E71                       		nop	
00085464 4E71                       		nop	
00085466                            ; loc_72746:
00085466                            @waitloop:
00085466 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
0008546C 0802 0007                  		btst	#7,d2		; Is FM busy?
00085470 66F4                       		bne.s	@waitloop	; Loop if so
00085472                            
00085472 13C1 00A0 4001             		move.b	d1,(ym2612_d0).l
00085478 4E75                       		rts	
0008547A                            ; End of function WriteFMI
0008547A                            
0008547A                            ; ===========================================================================
0008547A                            ; loc_7275A:
0008547A                            WriteFMIIPart:
0008547A 142D 0001                  		move.b	TrackVoiceControl(a5),d2 ; Get voice control bits
0008547E 0882 0002                  		bclr	#2,d2			; Clear chip toggle
00085482 D002                       		add.b	d2,d0			; Add in to destination register
00085484                            
00085484                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085484                            
00085484                            ; sub_72764:
00085484                            WriteFMII:
00085484 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
0008548A 0802 0007                  		btst	#7,d2		; Is FM busy?
0008548E 66F4                       		bne.s	WriteFMII	; Loop if so
00085490 13C0 00A0 4002             		move.b	d0,(ym2612_a1).l
00085496 4E71                       		nop	
00085498 4E71                       		nop	
0008549A 4E71                       		nop	
0008549C                            ; loc_7277C:
0008549C                            @waitloop:
0008549C 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
000854A2 0802 0007                  		btst	#7,d2		; Is FM busy?
000854A6 66F4                       		bne.s	@waitloop	; Loop if so
000854A8                            
000854A8 13C1 00A0 4003             		move.b	d1,(ym2612_d1).l
000854AE 4E75                       		rts	
000854B0                            ; End of function WriteFMII
000854B0                            
000854B0                            ; ===========================================================================
000854B0                            ; ---------------------------------------------------------------------------
000854B0                            ; FM Note Values: b-0 to a#8
000854B0                            ; ---------------------------------------------------------------------------
000854B0                            ; word_72790: FM_Notes:
000854B0                            FMFrequencies:
000854B0 025E 0284 02AB 02D3 02FE+  	dc.w $025E,$0284,$02AB,$02D3,$02FE,$032D,$035C,$038F,$03C5,$03FF,$043C,$047C
000854C8 0A5E 0A84 0AAB 0AD3 0AFE+  	dc.w $0A5E,$0A84,$0AAB,$0AD3,$0AFE,$0B2D,$0B5C,$0B8F,$0BC5,$0BFF,$0C3C,$0C7C
000854E0 125E 1284 12AB 12D3 12FE+  	dc.w $125E,$1284,$12AB,$12D3,$12FE,$132D,$135C,$138F,$13C5,$13FF,$143C,$147C
000854F8 1A5E 1A84 1AAB 1AD3 1AFE+  	dc.w $1A5E,$1A84,$1AAB,$1AD3,$1AFE,$1B2D,$1B5C,$1B8F,$1BC5,$1BFF,$1C3C,$1C7C
00085510 225E 2284 22AB 22D3 22FE+  	dc.w $225E,$2284,$22AB,$22D3,$22FE,$232D,$235C,$238F,$23C5,$23FF,$243C,$247C
00085528 2A5E 2A84 2AAB 2AD3 2AFE+  	dc.w $2A5E,$2A84,$2AAB,$2AD3,$2AFE,$2B2D,$2B5C,$2B8F,$2BC5,$2BFF,$2C3C,$2C7C
00085540 325E 3284 32AB 32D3 32FE+  	dc.w $325E,$3284,$32AB,$32D3,$32FE,$332D,$335C,$338F,$33C5,$33FF,$343C,$347C
00085558 3A5E 3A84 3AAB 3AD3 3AFE+  	dc.w $3A5E,$3A84,$3AAB,$3AD3,$3AFE,$3B2D,$3B5C,$3B8F,$3BC5,$3BFF,$3C3C,$3C7C
00085570                            
00085570                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085570                            
00085570                            ; sub_72850:
00085570                            PSGUpdateTrack:
00085570 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5)	; Update note timeout
00085574 6600                       		bne.s	@notegoing
00085576 0895 0004                  		bclr	#4,(a5)				; Clear 'do not attack note' bit (TrackPlaybackControl)
0008557A 4EBA 0000                  		jsr	PSGDoNext(pc)
0008557E 4EBA 0000                  		jsr	PSGDoNoteOn(pc)
00085582 6000 0000                  		bra.w	PSGDoVolFX
00085586                            ; ===========================================================================
00085586                            ; loc_72866:
00085586                            @notegoing:
00085586 4EBA F4CA                  		jsr	NoteTimeoutUpdate(pc)
0008558A 4EBA 0000                  		jsr	PSGUpdateVolFX(pc)
0008558E 4EBA F4EA                  		jsr	DoModulation(pc)
00085592 4EBA 0000                  		jsr	PSGUpdateFreq(pc)	; It would be better if this were a jmp and the rts was removed
00085596 4E75                       		rts
00085598                            ; End of function PSGUpdateTrack
00085598                            
00085598                            
00085598                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085598                            
00085598                            ; sub_72878:
00085598                            PSGDoNext:
00085598 0895 0001                  		bclr	#1,(a5)				; Clear 'track at rest' bit (TrackPlaybackControl)
0008559C 286D 0004                  		movea.l	TrackDataPointer(a5),a4	; Get track data pointer
000855A0                            ; loc_72880:
000855A0                            @noteloop:
000855A0 7A00                       		moveq	#0,d5
000855A2 1A1C                       		move.b	(a4)+,d5	; Get byte from track
000855A4 0C05 00E0                  		cmpi.b	#$E0,d5		; Is it a coord. flag?
000855A8 6500                       		blo.s	@gotnote	; Branch if not
000855AA 4EBA 0000                  		jsr	CoordFlag(pc)
000855AE 60F0                       		bra.s	@noteloop
000855B0                            ; ===========================================================================
000855B0                            ; loc_72890:
000855B0                            @gotnote:
000855B0 4A05                       		tst.b	d5		; Is it a note?
000855B2 6A00                       		bpl.s	@gotduration	; Branch if not
000855B4 4EBA 0000                  		jsr	PSGSetFreq(pc)
000855B8 1A1C                       		move.b	(a4)+,d5	; Get another byte
000855BA 4A05                       		tst.b	d5		; Is it a duration?
000855BC 6A00                       		bpl.s	@gotduration	; Branch if yes
000855BE 534C                       		subq.w	#1,a4		; Put byte back
000855C0 6000 F452                  		bra.w	FinishTrackUpdate
000855C4                            ; ===========================================================================
000855C4                            ; loc_728A4:
000855C4                            @gotduration:
000855C4 4EBA F42E                  		jsr	SetDuration(pc)
000855C8 6000 F44A                  		bra.w	FinishTrackUpdate
000855CC                            ; End of function PSGDoNext
000855CC                            
000855CC                            
000855CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000855CC                            
000855CC                            ; sub_728AC:
000855CC                            PSGSetFreq:
000855CC 0405 0081                  		subi.b	#$81,d5		; Convert to 0-based index
000855D0 6500                       		bcs.s	@restpsg	; If $80, put track at rest
000855D2 DA2D 0008                  		add.b	TrackTranspose(a5),d5 ; Add in channel transposition
000855D6 0245 007F                  		andi.w	#$7F,d5		; Clear high byte and sign bit
000855DA E34D                       		lsl.w	#1,d5
000855DC 41FA 0000                  		lea	PSGFrequencies(pc),a0
000855E0 3B70 5000 0010             		move.w	(a0,d5.w),TrackFreq(a5)	; Set new frequency
000855E6 6000 F42C                  		bra.w	FinishTrackUpdate
000855EA                            ; ===========================================================================
000855EA                            ; loc_728CA:
000855EA                            @restpsg:
000855EA 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
000855EE 3B7C FFFF 0010             		move.w	#-1,TrackFreq(a5)	; Invalidate note frequency
000855F4 4EBA F41E                  		jsr	FinishTrackUpdate(pc)
000855F8 6000 0000                  		bra.w	PSGNoteOff
000855FC                            ; End of function PSGSetFreq
000855FC                            
000855FC                            
000855FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000855FC                            
000855FC                            ; sub_728DC:
000855FC                            PSGDoNoteOn:
000855FC 3C2D 0010                  		move.w	TrackFreq(a5),d6	; Get note frequency
00085600 6B00                       		bmi.s	PSGSetRest		; If invalid, branch
00085602                            ; End of function PSGDoNoteOn
00085602                            
00085602                            
00085602                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085602                            
00085602                            ; sub_728E2:
00085602                            PSGUpdateFreq:
00085602 102D 001E                  		move.b	TrackDetune(a5),d0	; Get detune value
00085606 4880                       		ext.w	d0
00085608 DC40                       		add.w	d0,d6		; Add to frequency
0008560A 0815 0002                  		btst	#2,(a5)		; Is track being overridden? (TrackPlaybackControl)
0008560E 6600                       		bne.s	@locret		; Return if yes
00085610 0815 0001                  		btst	#1,(a5)		; Is track at rest? (TrackPlaybackControl)
00085614 6600                       		bne.s	@locret		; Return if yes
00085616 102D 0001                  		move.b	TrackVoiceControl(a5),d0 ; Get channel bits
0008561A 0C00 00E0                  		cmpi.b	#$E0,d0		; Is it a noise channel?
0008561E 6600                       		bne.s	@notnoise	; Branch if not
00085620 103C 00C0                  		move.b	#$C0,d0		; Use PSG 3 channel bits
00085624                            ; loc_72904:
00085624                            @notnoise:
00085624 3206                       		move.w	d6,d1
00085626 0201 000F                  		andi.b	#$F,d1		; Low nibble of frequency
0008562A 8001                       		or.b	d1,d0		; Latch tone data to channel
0008562C E84E                       		lsr.w	#4,d6		; Get upper 6 bits of frequency
0008562E 0206 003F                  		andi.b	#$3F,d6		; Send to latched channel
00085632 13C0 00C0 0011             		move.b	d0,(psg_input).l
00085638 13C6 00C0 0011             		move.b	d6,(psg_input).l
0008563E                            ; locret_7291E:
0008563E                            @locret:
0008563E 4E75                       		rts	
00085640                            ; End of function PSGUpdateFreq
00085640                            
00085640                            ; ===========================================================================
00085640                            ; loc_72920:
00085640                            PSGSetRest:
00085640 08D5 0001                  		bset	#1,(a5)	; Set 'track at rest' bit (TrackPlaybackControl)
00085644 4E75                       		rts	
00085646                            
00085646                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085646                            
00085646                            ; sub_72926:
00085646                            PSGUpdateVolFX:
00085646 4A2D 000B                  		tst.b	TrackVoiceIndex(a5)	; Test PSG tone
0008564A 6700 0000                  		beq.w	locret_7298A		; Return if it is zero
0008564E                            ; loc_7292E:
0008564E                            PSGDoVolFX:	; This can actually be made a bit more efficient, see the comments for more
0008564E 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Get volume
00085652 7000                       		moveq	#0,d0
00085654 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Get PSG tone
00085658 6700                       		beq.s	SetPSGVolume
0008565A 2079 0008 461C             		movea.l	(Go_PSGIndex).l,a0
00085660 5340                       		subq.w	#1,d0
00085662 E548                       		lsl.w	#2,d0
00085664 2070 0000                  		movea.l	(a0,d0.w),a0
00085668 102D 000C                  		move.b	TrackVolEnvIndex(a5),d0	; Get volume envelope index		; move.b	TrackVolEnvIndex(a5),d0
0008566C 1030 0000                  		move.b	(a0,d0.w),d0			; Volume envelope value			; addq.b	#1,TrackVolEnvIndex(a5)
00085670 522D 000C                  		addq.b	#1,TrackVolEnvIndex(a5)	; Increment volume envelope index	; move.b	(a0,d0.w),d0
00085674 0800 0007                  		btst	#7,d0				; Is volume envelope value negative?	; <-- makes this line redundant
00085678 6700                       		beq.s	@gotflutter			; Branch if not				; but you gotta make this one a bpl
0008567A 0C00 0080                  		cmpi.b	#$80,d0				; Is it the terminator?			; Since this is the only check, you can take the optimisation a step further:
0008567E 6700                       		beq.s	VolEnvHold			; If so, branch				; Change the previous beq (bpl) to a bmi and make it branch to VolEnvHold to make these last two lines redundant
00085680                            ; loc_72960:
00085680                            @gotflutter:
00085680 DC40                       		add.w	d0,d6		; Add volume envelope value to volume
00085682 0C06 0010                  		cmpi.b	#$10,d6		; Is volume $10 or higher?
00085686 6500                       		blo.s	SetPSGVolume	; Branch if not
00085688 7C0F                       		moveq	#$F,d6		; Limit to silence and fall through
0008568A                            ; End of function PSGUpdateVolFX
0008568A                            
0008568A                            
0008568A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008568A                            
0008568A                            ; sub_7296A:
0008568A                            SetPSGVolume:
0008568A 0815 0001                  		btst	#1,(a5)		; Is track at rest? (TrackPlaybackControl)
0008568E 6600                       		bne.s	locret_7298A	; Return if so
00085690 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
00085694 6600                       		bne.s	locret_7298A	; Return if so
00085696 0815 0004                  		btst	#4,(a5)		; Is track set to not attack next note? (TrackPlaybackControl)
0008569A 6600                       		bne.s	PSGCheckNoteTimeout ; Branch if yes
0008569C                            ; loc_7297C:
0008569C                            PSGSendVolume:
0008569C 8C2D 0001                  		or.b	TrackVoiceControl(a5),d6 ; Add in track selector bits
000856A0 0606 0010                  		addi.b	#$10,d6			; Mark it as a volume command
000856A4 13C6 00C0 0011             		move.b	d6,(psg_input).l
000856AA                            
000856AA                            locret_7298A:
000856AA 4E75                       		rts	
000856AC                            ; ===========================================================================
000856AC                            ; loc_7298C: PSGCheckNoteFill:
000856AC                            PSGCheckNoteTimeout:
000856AC 4A2D 0013                  		tst.b	TrackNoteTimeoutMaster(a5)	; Is note timeout on?
000856B0 67EA                       		beq.s	PSGSendVolume			; Branch if not
000856B2 4A2D 0012                  		tst.b	TrackNoteTimeout(a5)		; Has note timeout expired?
000856B6 66E4                       		bne.s	PSGSendVolume			; Branch if not
000856B8 4E75                       		rts	
000856BA                            ; End of function SetPSGVolume
000856BA                            
000856BA                            ; ===========================================================================
000856BA                            ; loc_7299A: FlutterDone:
000856BA                            VolEnvHold:
000856BA 532D 000C                  		subq.b	#1,TrackVolEnvIndex(a5)	; Decrement volume envelope index
000856BE 4E75                       		rts	
000856C0                            
000856C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000856C0                            
000856C0                            ; sub_729A0:
000856C0                            PSGNoteOff:
000856C0 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
000856C4 6600                       		bne.s	locret_729B4	; Return if so
000856C6                            ; loc_729A6:
000856C6                            SendPSGNoteOff:
000856C6 102D 0001                  		move.b	TrackVoiceControl(a5),d0	; PSG channel to change
000856CA 0000 001F                  		ori.b	#$1F,d0				; Maximum volume attenuation
000856CE 13C0 00C0 0011             		move.b	d0,(psg_input).l
000856D4                            		; DANGER! If InitMusicPlayback doesn't silence all channels, there's the
000856D4                            		; risk of music accidentally playing noise because it can't detect if
000856D4                            		; the PSG4/noise channel needs muting on track initialisation.
000856D4                            		; S&K's driver fixes it by doing this:
000856D4 0C00 00DF                  		cmpi.b	#$DF,d0				; Are stopping PSG3?
000856D8 6600                       		bne.s	locret_729B4
000856DA 13FC 00FF 00C0 0011        		move.b	#$FF,(psg_input).l		; If so, stop noise channel while we're at it
000856E2                            
000856E2                            locret_729B4:
000856E2 4E75                       		rts	
000856E4                            ; End of function PSGNoteOff
000856E4                            
000856E4                            
000856E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000856E4                            
000856E4                            ; sub_729B6:
000856E4                            PSGSilenceAll:
000856E4 41F9 00C0 0011             		lea	(psg_input).l,a0
000856EA 10BC 009F                  		move.b	#$9F,(a0)	; Silence PSG 1
000856EE 10BC 00BF                  		move.b	#$BF,(a0)	; Silence PSG 2
000856F2 10BC 00DF                  		move.b	#$DF,(a0)	; Silence PSG 3
000856F6 10BC 00FF                  		move.b	#$FF,(a0)	; Silence noise channel
000856FA 4E75                       		rts	
000856FC                            ; End of function PSGSilenceAll
000856FC                            
000856FC                            ; ===========================================================================
000856FC                            ; word_729CE:
000856FC                            PSGFrequencies:
000856FC 0356 0326 02F9 02CE 02A5+  		dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A
0008570C 021A 01FB 01DF 01C4 01AB+  		dc.w $21A, $1FB, $1DF, $1C4, $1AB, $193, $17D, $167
0008571C 0153 0140 012E 011D 010D+  		dc.w $153, $140, $12E, $11D, $10D,  $FE,  $EF,  $E2
0008572C 00D6 00C9 00BE 00B4 00A9+  		dc.w  $D6,  $C9,  $BE,  $B4,  $A9,  $A0,  $97,  $8F
0008573C 0087 007F 0078 0071 006B+  		dc.w  $87,  $7F,  $78,  $71,  $6B,  $65,  $5F,  $5A
0008574C 0055 0050 004B 0047 0043+  		dc.w  $55,  $50,  $4B,  $47,  $43,  $40,  $3C,  $39
0008575C 0036 0033 0030 002D 002B+  		dc.w  $36,  $33,  $30,  $2D,  $2B,  $28,  $26,  $24
0008576C 0022 0020 001F 001D 001B+  		dc.w  $22,  $20,  $1F,  $1D,  $1B,  $1A,  $18,  $17
0008577C 0016 0015 0013 0012 0011+  		dc.w  $16,  $15,  $13,  $12,  $11,    0
00085788                            
00085788                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085788                            
00085788                            ; sub_72A5A:
00085788                            CoordFlag:
00085788 0445 00E0                  		subi.w	#$E0,d5
0008578C E54D                       		lsl.w	#2,d5
0008578E 4EFB 5000                  		jmp	coordflagLookup(pc,d5.w)
00085792                            ; End of function CoordFlag
00085792                            
00085792                            ; ===========================================================================
00085792                            ; loc_72A64:
00085792                            coordflagLookup:
00085792 6000 0000                  		bra.w	cfPanningAMSFMS		; $E0
00085796                            ; ===========================================================================
00085796 6000 0000                  		bra.w	cfDetune		; $E1
0008579A                            ; ===========================================================================
0008579A 6000 0000                  		bra.w	cfSetCommunication	; $E2
0008579E                            ; ===========================================================================
0008579E 6000 0000                  		bra.w	cfJumpReturn		; $E3
000857A2                            ; ===========================================================================
000857A2 6000 0000                  		bra.w	cfFadeInToPrevious	; $E4
000857A6                            ; ===========================================================================
000857A6 6000 0000                  		bra.w	cfSetTempoDivider	; $E5
000857AA                            ; ===========================================================================
000857AA 6000 0000                  		bra.w	cfChangeFMVolume	; $E6
000857AE                            ; ===========================================================================
000857AE 6000 0000                  		bra.w	cfHoldNote		; $E7
000857B2                            ; ===========================================================================
000857B2 6000 0000                  		bra.w	cfNoteTimeout		; $E8
000857B6                            ; ===========================================================================
000857B6 6000 0000                  		bra.w	cfChangeTransposition	; $E9
000857BA                            ; ===========================================================================
000857BA 6000 0000                  		bra.w	cfSetTempo		; $EA
000857BE                            ; ===========================================================================
000857BE 6000 0000                  		bra.w	cfSetTempoDividerAll	; $EB
000857C2                            ; ===========================================================================
000857C2 6000 0000                  		bra.w	cfChangePSGVolume	; $EC
000857C6                            ; ===========================================================================
000857C6 6000 0000                  		bra.w	cfClearPush		; $ED
000857CA                            ; ===========================================================================
000857CA 6000 0000                  		bra.w	cfStopSpecialFM4	; $EE
000857CE                            ; ===========================================================================
000857CE 6000 0000                  		bra.w	cfSetVoice		; $EF
000857D2                            ; ===========================================================================
000857D2 6000 0000                  		bra.w	cfModulation		; $F0
000857D6                            ; ===========================================================================
000857D6 6000 0000                  		bra.w	cfEnableModulation	; $F1
000857DA                            ; ===========================================================================
000857DA 6000 0000                  		bra.w	cfStopTrack		; $F2
000857DE                            ; ===========================================================================
000857DE 6000 0000                  		bra.w	cfSetPSGNoise		; $F3
000857E2                            ; ===========================================================================
000857E2 6000 0000                  		bra.w	cfDisableModulation	; $F4
000857E6                            ; ===========================================================================
000857E6 6000 0000                  		bra.w	cfSetPSGTone		; $F5
000857EA                            ; ===========================================================================
000857EA 6000 0000                  		bra.w	cfJumpTo		; $F6
000857EE                            ; ===========================================================================
000857EE 6000 0000                  		bra.w	cfRepeatAtPos		; $F7
000857F2                            ; ===========================================================================
000857F2 6000 0000                  		bra.w	cfJumpToGosub		; $F8
000857F6                            ; ===========================================================================
000857F6 6000 0000                  		bra.w	cfOpF9			; $F9
000857FA                            ; ===========================================================================
000857FA                            ; loc_72ACC:
000857FA                            cfPanningAMSFMS:
000857FA 121C                       		move.b	(a4)+,d1		; New AMS/FMS/panning value
000857FC 4A2D 0001                  		tst.b	TrackVoiceControl(a5)	; Is this a PSG track?
00085800 6B00                       		bmi.s	locret_72AEA		; Return if yes
00085802 102D 000A                  		move.b	TrackAMSFMSPan(a5),d0	; Get current AMS/FMS/panning
00085806 0200 0037                  		andi.b	#$37,d0			; Retain bits 0-2, 3-4 if set
0008580A 8200                       		or.b	d0,d1			; Mask in new value
0008580C 1B41 000A                  		move.b	d1,TrackAMSFMSPan(a5)	; Store value
00085810 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
00085814 6000 FC20                  		bra.w	WriteFMIorIIMain
00085818                            ; ===========================================================================
00085818                            
00085818                            locret_72AEA:
00085818 4E75                       		rts	
0008581A                            ; ===========================================================================
0008581A                            ; loc_72AEC: cfAlterNotes:
0008581A                            cfDetune:
0008581A 1B5C 001E                  		move.b	(a4)+,TrackDetune(a5)	; Set detune value
0008581E 4E75                       		rts	
00085820                            ; ===========================================================================
00085820                            ; loc_72AF2: cfUnknown1:
00085820                            cfSetCommunication:
00085820 1D5C 0007                  		move.b	(a4)+,v_communication_byte(a6)	; Set otherwise unused communication byte to parameter
00085824 4E75                       		rts	
00085826                            ; ===========================================================================
00085826                            ; loc_72AF8:
00085826                            cfJumpReturn:
00085826 7000                       		moveq	#0,d0
00085828 102D 000D                  		move.b	TrackStackPointer(a5),d0 ; Track stack pointer
0008582C 2875 0000                  		movea.l	(a5,d0.w),a4		; Set track return address
00085830 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)		; Set 'popped' value to zero
00085838 544C                       		addq.w	#2,a4			; Skip jump target address from gosub flag
0008583A 5800                       		addq.b	#4,d0			; Actually 'pop' value
0008583C 1B40 000D                  		move.b	d0,TrackStackPointer(a5) ; Set new stack pointer
00085840 4E75                       		rts	
00085842                            ; ===========================================================================
00085842                            ; loc_72B14:
00085842                            cfFadeInToPrevious:
00085842 204E                       		movea.l	a6,a0
00085844 43EE 03A0                  		lea	v_1up_ram_copy(a6),a1
00085848 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; $220 bytes to restore: all variables and music track data
0008584C                            ; loc_72B1E:
0008584C                            @restoreramloop:
0008584C 20D9                       		move.l	(a1)+,(a0)+
0008584E 51C8 FFFC                  		dbf	d0,@restoreramloop
00085852                            
00085852 08EE 0002 0040             		bset	#2,v_music_dac_track+TrackPlaybackControl(a6)	; Set 'SFX overriding' bit
00085858 264D                       		movea.l	a5,a3
0008585A 1C3C 0028                  		move.b	#$28,d6
0008585E 9C2E 0026                  		sub.b	v_fadein_counter(a6),d6			; If fade already in progress, this adjusts track volume accordingly
00085862 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
00085864 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
00085868                            ; loc_72B3A:
00085868                            @fmloop:
00085868 0815 0007                  		btst	#7,(a5)		; Is track playing? (TrackPlaybackControl)
0008586C 6700                       		beq.s	@nextfm		; Branch if not
0008586E 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
00085872 DD2D 0009                  		add.b	d6,TrackVolume(a5) ; Apply current volume fade-in
00085876 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
0008587A 6600                       		bne.s	@nextfm		; Branch if yes
0008587C 7000                       		moveq	#0,d0
0008587E 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Get voice
00085882 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
00085886 4EBA 0000                  		jsr	SetVoice(pc)
0008588A                            ; loc_72B5C:
0008588A                            @nextfm:
0008588A DAFC 0030                  		adda.w	#TrackSz,a5
0008588E 51CF FFD8                  		dbf	d7,@fmloop
00085892                            
00085892 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7	; 3 PSG tracks
00085894                            ; loc_72B66:
00085894                            @psgloop:
00085894 0815 0007                  		btst	#7,(a5)		; Is track playing? (TrackPlaybackControl)
00085898 6700                       		beq.s	@nextpsg	; Branch if not
0008589A 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
0008589E 4EBA FE20                  		jsr	PSGNoteOff(pc)
000858A2 DD2D 0009                  		add.b	d6,TrackVolume(a5)	; Apply current volume fade-in
000858A6                            ; loc_72B78:
000858A6                            @nextpsg:
000858A6 DAFC 0030                  		adda.w	#TrackSz,a5
000858AA 51CF FFE8                  		dbf	d7,@psgloop
000858AE                            		
000858AE 2A4B                       		movea.l	a3,a5
000858B0 1D7C 0080 0024             		move.b	#$80,f_fadein_flag(a6)		; Trigger fade-in
000858B6 1D7C 0028 0026             		move.b	#$28,v_fadein_counter(a6)	; Fade-in delay
000858BC 422E 0027                  		clr.b	f_1up_playing(a6)
000858C0 33FC 0000 00A1 1100        		startZ80
000858C8 504F                       		addq.w	#8,sp		; Tamper return value so we don't return to caller
000858CA 4E75                       		rts	
000858CC                            ; ===========================================================================
000858CC                            ; loc_72B9E:
000858CC                            cfSetTempoDivider:
000858CC 1B5C 0002                  		move.b	(a4)+,TrackTempoDivider(a5)	; Set tempo divider on current track
000858D0 4E75                       		rts	
000858D2                            ; ===========================================================================
000858D2                            ; loc_72BA4: cfSetVolume:
000858D2                            cfChangeFMVolume:
000858D2 101C                       		move.b	(a4)+,d0		; Get parameter
000858D4 D12D 0009                  		add.b	d0,TrackVolume(a5)	; Add to current volume
000858D8 6000 0000                  		bra.w	SendVoiceTL
000858DC                            ; ===========================================================================
000858DC                            ; loc_72BAE: cfPreventAttack:
000858DC                            cfHoldNote:
000858DC 08D5 0004                  		bset	#4,(a5)		; Set 'do not attack next note' bit (TrackPlaybackControl)
000858E0 4E75                       		rts	
000858E2                            ; ===========================================================================
000858E2                            ; loc_72BB4: cfNoteFill
000858E2                            cfNoteTimeout:
000858E2 1B54 0012                  		move.b	(a4),TrackNoteTimeout(a5)		; Note fill timeout
000858E6 1B5C 0013                  		move.b	(a4)+,TrackNoteTimeoutMaster(a5)	; Note fill master
000858EA 4E75                       		rts	
000858EC                            ; ===========================================================================
000858EC                            ; loc_72BBE: cfAddKey:
000858EC                            cfChangeTransposition:
000858EC 101C                       		move.b	(a4)+,d0		; Get parameter
000858EE D12D 0008                  		add.b	d0,TrackTranspose(a5)	; Add to transpose value
000858F2 4E75                       		rts	
000858F4                            ; ===========================================================================
000858F4                            ; loc_72BC6:
000858F4                            cfSetTempo:
000858F4 1D54 0002                  		move.b	(a4),v_main_tempo(a6)		; Set main tempo
000858F8 1D5C 0001                  		move.b	(a4)+,v_main_tempo_timeout(a6)	; And reset timeout (!)
000858FC 4E75                       		rts	
000858FE                            ; ===========================================================================
000858FE                            ; loc_72BD0: cfSetTempoMod:
000858FE                            cfSetTempoDividerAll:
000858FE 41EE 0040                  		lea	v_music_track_ram(a6),a0
00085902 101C                       		move.b	(a4)+,d0			; Get new tempo divider
00085904 7230                       		moveq	#TrackSz,d1
00085906 7409                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d2	; 1 DAC + 6 FM + 3 PSG tracks
00085908                            ; loc_72BDA:
00085908                            @trackloop:
00085908 1140 0002                  		move.b	d0,TrackTempoDivider(a0)	; Set track's tempo divider
0008590C D0C1                       		adda.w	d1,a0
0008590E 51CA FFF8                  		dbf	d2,@trackloop
00085912                            
00085912 4E75                       		rts	
00085914                            ; ===========================================================================
00085914                            ; loc_72BE6: cfChangeVolume:
00085914                            cfChangePSGVolume:
00085914 101C                       		move.b	(a4)+,d0		; Get volume change
00085916 D12D 0009                  		add.b	d0,TrackVolume(a5)	; Apply it
0008591A 4E75                       		rts	
0008591C                            ; ===========================================================================
0008591C                            ; loc_72BEE:
0008591C                            cfClearPush:
0008591C 422E 002C                  		clr.b	f_push_playing(a6)	; Allow push sound to be played once more
00085920 4E75                       		rts	
00085922                            ; ===========================================================================
00085922                            ; loc_72BF4:
00085922                            cfStopSpecialFM4:
00085922 0895 0007                  		bclr	#7,(a5)		; Stop track (TrackPlaybackControl)
00085926 0895 0004                  		bclr	#4,(a5)		; Clear 'do not attack next note' bit (TrackPlaybackControl)
0008592A 4EBA FAF2                  		jsr	FMNoteOff(pc)
0008592E 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is SFX using FM4?
00085932 6B00                       		bmi.s	@locexit					; Branch if yes
00085934 264D                       		movea.l	a5,a3
00085936 4BEE 0100                  		lea	v_music_fm4_track(a6),a5
0008593A 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
0008593E 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00085942 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00085946 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
0008594A 4EBA 0000                  		jsr	SetVoice(pc)
0008594E 2A4B                       		movea.l	a3,a5
00085950                            ; loc_72C22:
00085950                            @locexit:
00085950 504F                       		addq.w	#8,sp		; Tamper with return value so we don't return to caller
00085952 4E75                       		rts	
00085954                            ; ===========================================================================
00085954                            ; loc_72C26:
00085954                            cfSetVoice:
00085954 7000                       		moveq	#0,d0
00085956 101C                       		move.b	(a4)+,d0		; Get new voice
00085958 1B40 000B                  		move.b	d0,TrackVoiceIndex(a5)	; Store it
0008595C 0815 0002                  		btst	#2,(a5)			; Is SFX overriding this track? (TrackPlaybackControl)
00085960 6600 0000                  		bne.w	locret_72CAA		; Return if yes
00085964 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Music voice pointer
00085968 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating a music track?
0008596C 6700                       		beq.s	SetVoice		; If yes, branch
0008596E 226D 0020                  		movea.l	TrackVoicePtr(a5),a1	; SFX track voice pointer
00085972 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating a SFX track?
00085976 6B00                       		bmi.s	SetVoice		; If yes, branch
00085978 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1 ; Special SFX voice pointer
0008597C                            
0008597C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008597C                            
0008597C                            ; sub_72C4E:
0008597C                            SetVoice:
0008597C 5340                       		subq.w	#1,d0
0008597E 6B00                       		bmi.s	@havevoiceptr
00085980 323C 0019                  		move.w	#25,d1
00085984                            ; loc_72C56:
00085984                            @voicemultiply:
00085984 D2C1                       		adda.w	d1,a1
00085986 51C8 FFFC                  		dbf	d0,@voicemultiply
0008598A                            ; loc_72C5C:
0008598A                            @havevoiceptr:
0008598A 1219                       		move.b	(a1)+,d1		; feedback/algorithm
0008598C 1B41 001F                  		move.b	d1,TrackFeedbackAlgo(a5) ; Save it to track RAM
00085990 1801                       		move.b	d1,d4
00085992 103C 00B0                  		move.b	#$B0,d0			; Command to write feedback/algorithm
00085996 4EBA FAAA                  		jsr	WriteFMIorII(pc)
0008599A 45FA 0000                  		lea	FMInstrumentOperatorTable(pc),a2
0008599E 7600                       		moveq	#(FMInstrumentOperatorTable_End-FMInstrumentOperatorTable)-1,d3		; Don't want to send TL yet
000859A0                            ; loc_72C72:
000859A0                            @sendvoiceloop:
000859A0 101A                       		move.b	(a2)+,d0
000859A2 1219                       		move.b	(a1)+,d1
000859A4 4EBA FA9C                  		jsr	WriteFMIorII(pc)
000859A8 51CB FFF6                  		dbf	d3,@sendvoiceloop
000859AC                            
000859AC 7A03                       		moveq	#3,d5
000859AE 0244 0007                  		andi.w	#7,d4			; Get algorithm
000859B2 183B 4000                  		move.b	FMSlotMask(pc,d4.w),d4	; Get slot mask for algorithm
000859B6 162D 0009                  		move.b	TrackVolume(a5),d3	; Track volume attenuation
000859BA                            ; loc_72C8C:
000859BA                            @sendtlloop:
000859BA 101A                       		move.b	(a2)+,d0
000859BC 1219                       		move.b	(a1)+,d1
000859BE E20C                       		lsr.b	#1,d4		; Is bit set for this operator in the mask?
000859C0 6400                       		bcc.s	@sendtl		; Branch if not
000859C2 D203                       		add.b	d3,d1		; Include additional attenuation
000859C4                            ; loc_72C96:
000859C4                            @sendtl:
000859C4 4EBA FA7C                  		jsr	WriteFMIorII(pc)
000859C8 51CD FFF0                  		dbf	d5,@sendtlloop
000859CC                            		
000859CC 103C 00B4                  		move.b	#$B4,d0			; Register for AMS/FMS/Panning
000859D0 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Value to send
000859D4 4EBA FA6C                  		jsr	WriteFMIorII(pc) 	; (It would be better if this were a jmp)
000859D8                            
000859D8                            locret_72CAA:
000859D8 4E75                       		rts	
000859DA                            ; End of function SetVoice
000859DA                            
000859DA                            ; ===========================================================================
000859DA                            ; byte_72CAC:
000859DA 0808 0808 0A0E 0E0F        FMSlotMask:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
000859E2                            
000859E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000859E2                            
000859E2                            ; sub_72CB4:
000859E2                            SendVoiceTL:
000859E2 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
000859E6 6600                       		bne.s	@locret		; Return if so
000859E8 7000                       		moveq	#0,d0
000859EA 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
000859EE 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
000859F2 4A2E 000E                  		tst.b	f_voice_selector(a6)
000859F6 6700                       		beq.s	@gotvoiceptr
000859F8                            		; DANGER! This uploads the wrong voice! It should have been a5 instead
000859F8                            		; of a6!
000859F8 226D 0020                  		movea.l	TrackVoicePtr(a5),a1
000859FC 4A2E 000E                  		tst.b	f_voice_selector(a6)
00085A00 6B00                       		bmi.s	@gotvoiceptr
00085A02 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1
00085A06                            ; loc_72CD8:
00085A06                            @gotvoiceptr:
00085A06 5340                       		subq.w	#1,d0
00085A08 6B00                       		bmi.s	@gotvoice
00085A0A 323C 0019                  		move.w	#25,d1
00085A0E                            ; loc_72CE0:
00085A0E                            @voicemultiply:
00085A0E D2C1                       		adda.w	d1,a1
00085A10 51C8 FFFC                  		dbf	d0,@voicemultiply
00085A14                            ; loc_72CE6:
00085A14                            @gotvoice:
00085A14 D2FC 0015                  		adda.w	#21,a1				; Want TL
00085A18 45FA 0000                  		lea	FMInstrumentTLTable(pc),a2
00085A1C 102D 001F                  		move.b	TrackFeedbackAlgo(a5),d0	; Get feedback/algorithm
00085A20 0240 0007                  		andi.w	#7,d0				; Want only algorithm
00085A24 183B 00B4                  		move.b	FMSlotMask(pc,d0.w),d4		; Get slot mask
00085A28 162D 0009                  		move.b	TrackVolume(a5),d3		; Get track volume attenuation
00085A2C 6B00                       		bmi.s	@locret				; If negative, stop
00085A2E 7A00                       		moveq	#(FMInstrumentTLTable_End-FMInstrumentTLTable)-1,d5
00085A30                            ; loc_72D02:
00085A30                            @sendtlloop:
00085A30 101A                       		move.b	(a2)+,d0
00085A32 1219                       		move.b	(a1)+,d1
00085A34 E20C                       		lsr.b	#1,d4		; Is bit set for this operator in the mask?
00085A36 6400                       		bcc.s	@senttl		; Branch if not
00085A38 D203                       		add.b	d3,d1		; Include additional attenuation
00085A3A 6500                       		bcs.s	@senttl		; Branch on overflow
00085A3C 4EBA FA04                  		jsr	WriteFMIorII(pc)
00085A40                            ; loc_72D12:
00085A40                            @senttl:
00085A40 51CD FFEE                  		dbf	d5,@sendtlloop
00085A44                            ; locret_72D16:
00085A44                            @locret:
00085A44 4E75                       		rts	
00085A46                            ; End of function SendVoiceTL
00085A46                            
00085A46                            ; ===========================================================================
00085A46                            ; byte_72D18:
00085A46                            FMInstrumentOperatorTable:
00085A46 30                         		dc.b  $30		; Detune/multiple operator 1
00085A47 38                         		dc.b  $38		; Detune/multiple operator 3
00085A48 34                         		dc.b  $34		; Detune/multiple operator 2
00085A49 3C                         		dc.b  $3C		; Detune/multiple operator 4
00085A4A 50                         		dc.b  $50		; Rate scalling/attack rate operator 1
00085A4B 58                         		dc.b  $58		; Rate scalling/attack rate operator 3
00085A4C 54                         		dc.b  $54		; Rate scalling/attack rate operator 2
00085A4D 5C                         		dc.b  $5C		; Rate scalling/attack rate operator 4
00085A4E 60                         		dc.b  $60		; Amplitude modulation/first decay rate operator 1
00085A4F 68                         		dc.b  $68		; Amplitude modulation/first decay rate operator 3
00085A50 64                         		dc.b  $64		; Amplitude modulation/first decay rate operator 2
00085A51 6C                         		dc.b  $6C		; Amplitude modulation/first decay rate operator 4
00085A52 70                         		dc.b  $70		; Secondary decay rate operator 1
00085A53 78                         		dc.b  $78		; Secondary decay rate operator 3
00085A54 74                         		dc.b  $74		; Secondary decay rate operator 2
00085A55 7C                         		dc.b  $7C		; Secondary decay rate operator 4
00085A56 80                         		dc.b  $80		; Secondary amplitude/release rate operator 1
00085A57 88                         		dc.b  $88		; Secondary amplitude/release rate operator 3
00085A58 84                         		dc.b  $84		; Secondary amplitude/release rate operator 2
00085A59 8C                         		dc.b  $8C		; Secondary amplitude/release rate operator 4
00085A5A                            FMInstrumentOperatorTable_End
00085A5A                            ; byte_72D2C:
00085A5A                            FMInstrumentTLTable:
00085A5A 40                         		dc.b  $40		; Total level operator 1
00085A5B 48                         		dc.b  $48		; Total level operator 3
00085A5C 44                         		dc.b  $44		; Total level operator 2
00085A5D 4C                         		dc.b  $4C		; Total level operator 4
00085A5E                            FMInstrumentTLTable_End
00085A5E                            ; ===========================================================================
00085A5E                            ; loc_72D30:
00085A5E                            cfModulation:
00085A5E 08D5 0003                  		bset	#3,(a5)				; Turn on modulation (TrackPlaybackControl)
00085A62 2B4C 0014                  		move.l	a4,TrackModulationPtr(a5)	; Save pointer to modulation data
00085A66 1B5C 0018                  		move.b	(a4)+,TrackModulationWait(a5)	; Modulation delay
00085A6A 1B5C 0019                  		move.b	(a4)+,TrackModulationSpeed(a5)	; Modulation speed
00085A6E 1B5C 001A                  		move.b	(a4)+,TrackModulationDelta(a5)	; Modulation delta
00085A72 101C                       		move.b	(a4)+,d0			; Modulation steps...
00085A74 E208                       		lsr.b	#1,d0				; ... divided by 2...
00085A76 1B40 001B                  		move.b	d0,TrackModulationSteps(a5)	; ... before being stored
00085A7A 426D 001C                  		clr.w	TrackModulationVal(a5)		; Total accumulated modulation frequency change
00085A7E 4E75                       		rts	
00085A80                            ; ===========================================================================
00085A80                            ; loc_72D52:
00085A80                            cfEnableModulation:
00085A80 08D5 0003                  		bset	#3,(a5)		; Turn on modulation (TrackPlaybackControl)
00085A84 4E75                       		rts	
00085A86                            ; ===========================================================================
00085A86                            ; loc_72D58:
00085A86                            cfStopTrack:
00085A86 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00085A8A 0895 0004                  		bclr	#4,(a5)			; Clear 'do not attack next note' bit (TrackPlaybackControl)
00085A8E 4A2D 0001                  		tst.b	TrackVoiceControl(a5)	; Is this a PSG track?
00085A92 6B00                       		bmi.s	@stoppsg		; Branch if yes
00085A94 4A2E 0008                  		tst.b	f_updating_dac(a6)	; Is this the DAC we are updating?
00085A98 6B00 0000                  		bmi.w	@locexit		; Exit if yes
00085A9C 4EBA F980                  		jsr	FMNoteOff(pc)
00085AA0 6000                       		bra.s	@stoppedchannel
00085AA2                            ; ===========================================================================
00085AA2                            ; loc_72D74:
00085AA2                            @stoppsg:
00085AA2 4EBA FC1C                  		jsr	PSGNoteOff(pc)
00085AA6                            ; loc_72D78:
00085AA6                            @stoppedchannel:
00085AA6 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating SFX?
00085AAA 6A00 0000                  		bpl.w	@locexit		; Exit if not
00085AAE 4216                       		clr.b	v_sndprio(a6)		; Clear priority
00085AB0 7000                       		moveq	#0,d0
00085AB2 102D 0001                  		move.b	TrackVoiceControl(a5),d0 ; Get voice control bits
00085AB6 6B00                       		bmi.s	@getpsgptr		; Branch if PSG
00085AB8 41FA F536                  		lea	SFX_BGMChannelRAM(pc),a0
00085ABC 264D                       		movea.l	a5,a3
00085ABE 0C00 0004                  		cmpi.b	#4,d0			; Is this FM4?
00085AC2 6600                       		bne.s	@getpointer		; Branch if not
00085AC4 4A2E 0340                  		tst.b	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX playing?
00085AC8 6A00                       		bpl.s	@getpointer		; Branch if not
00085ACA 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
00085ACE 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1	; Get voice pointer
00085AD2 6000                       		bra.s	@gotpointer
00085AD4                            ; ===========================================================================
00085AD4                            ; loc_72DA8:
00085AD4                            @getpointer:
00085AD4 5500                       		subq.b	#2,d0		; SFX can only use FM3 and up
00085AD6 E508                       		lsl.b	#2,d0
00085AD8 2A70 0000                  		movea.l	(a0,d0.w),a5
00085ADC 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00085ADE 6A00                       		bpl.s	@novoiceupd		; Branch if not
00085AE0 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Get voice pointer
00085AE4                            ; loc_72DB8:
00085AE4                            @gotpointer:
00085AE4 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX overriding' bit (TrackPlaybackControl)
00085AE8 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00085AEC 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00085AF0 4EBA FE8A                  		jsr	SetVoice(pc)
00085AF4                            ; loc_72DC8:
00085AF4                            @novoiceupd:
00085AF4 2A4B                       		movea.l	a3,a5
00085AF6 6000                       		bra.s	@locexit
00085AF8                            ; ===========================================================================
00085AF8                            ; loc_72DCC:
00085AF8                            @getpsgptr:
00085AF8 41EE 0370                  		lea	v_spcsfx_psg3_track(a6),a0
00085AFC 4A10                       		tst.b	(a0)		; Is track playing? (TrackPlaybackControl)
00085AFE 6A00                       		bpl.s	@getchannelptr	; Branch if not
00085B00 0C00 00E0                  		cmpi.b	#$E0,d0		; Is it the noise channel?
00085B04 6700                       		beq.s	@gotchannelptr	; Branch if yes
00085B06 0C00 00C0                  		cmpi.b	#$C0,d0		; Is it PSG 3?
00085B0A 6700                       		beq.s	@gotchannelptr	; Branch if yes
00085B0C                            ; loc_72DE0:
00085B0C                            @getchannelptr:
00085B0C 41FA F4E2                  		lea	SFX_BGMChannelRAM(pc),a0
00085B10 E608                       		lsr.b	#3,d0
00085B12 2070 0000                  		movea.l	(a0,d0.w),a0
00085B16                            ; loc_72DEA:
00085B16                            @gotchannelptr:
00085B16 0890 0002                  		bclr	#2,(a0)				; Clear 'SFX overriding' bit (TrackPlaybackControl)
00085B1A 08D0 0001                  		bset	#1,(a0)				; Set 'track at rest' bit (TrackPlaybackControl)
00085B1E 0C28 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a0)	; Is this a noise pointer?
00085B24 6600                       		bne.s	@locexit			; Branch if not
00085B26 13E8 001F 00C0 0011        		move.b	TrackPSGNoise(a0),(psg_input).l ; Set noise tone
00085B2E                            ; loc_72E02:
00085B2E                            @locexit:
00085B2E 504F                       		addq.w	#8,sp		; Tamper with return value so we don't go back to caller
00085B30 4E75                       		rts	
00085B32                            ; ===========================================================================
00085B32                            ; loc_72E06:
00085B32                            cfSetPSGNoise:
00085B32 1B7C 00E0 0001             		move.b	#$E0,TrackVoiceControl(a5)	; Turn channel into noise channel
00085B38 1B5C 001F                  		move.b	(a4)+,TrackPSGNoise(a5)	; Save noise tone
00085B3C 0815 0002                  		btst	#2,(a5)				; Is track being overridden? (TrackPlaybackControl)
00085B40 6600                       		bne.s	@locret				; Return if yes
00085B42 13EC FFFF 00C0 0011        		move.b	-1(a4),(psg_input).l		; Set tone
00085B4A                            ; locret_72E1E:
00085B4A                            @locret:
00085B4A 4E75                       		rts	
00085B4C                            ; ===========================================================================
00085B4C                            ; loc_72E20:
00085B4C                            cfDisableModulation:
00085B4C 0895 0003                  		bclr	#3,(a5)		; Disable modulation (TrackPlaybackControl)
00085B50 4E75                       		rts	
00085B52                            ; ===========================================================================
00085B52                            ; loc_72E26:
00085B52                            cfSetPSGTone:
00085B52 1B5C 000B                  		move.b	(a4)+,TrackVoiceIndex(a5)	; Set current PSG tone
00085B56 4E75                       		rts	
00085B58                            ; ===========================================================================
00085B58                            ; loc_72E2C:
00085B58                            cfJumpTo:
00085B58 101C                       		move.b	(a4)+,d0	; High byte of offset
00085B5A E148                       		lsl.w	#8,d0		; Shift it into place
00085B5C 101C                       		move.b	(a4)+,d0	; Low byte of offset
00085B5E D8C0                       		adda.w	d0,a4		; Add to current position
00085B60 534C                       		subq.w	#1,a4		; Put back one byte
00085B62 4E75                       		rts	
00085B64                            ; ===========================================================================
00085B64                            ; loc_72E38:
00085B64                            cfRepeatAtPos:
00085B64 7000                       		moveq	#0,d0
00085B66 101C                       		move.b	(a4)+,d0			; Loop index
00085B68 121C                       		move.b	(a4)+,d1			; Repeat count
00085B6A 4A35 0024                  		tst.b	TrackLoopCounters(a5,d0.w)	; Has this loop already started?
00085B6E 6600                       		bne.s	@loopexists			; Branch if yes
00085B70 1B81 0024                  		move.b	d1,TrackLoopCounters(a5,d0.w)	; Initialize repeat count
00085B74                            ; loc_72E48:
00085B74                            @loopexists:
00085B74 5335 0024                  		subq.b	#1,TrackLoopCounters(a5,d0.w)	; Decrease loop's repeat count
00085B78 66DE                       		bne.s	cfJumpTo			; If nonzero, branch to target
00085B7A 544C                       		addq.w	#2,a4				; Skip target address
00085B7C 4E75                       		rts	
00085B7E                            ; ===========================================================================
00085B7E                            ; loc_72E52:
00085B7E                            cfJumpToGosub:
00085B7E 7000                       		moveq	#0,d0
00085B80 102D 000D                  		move.b	TrackStackPointer(a5),d0	; Current stack pointer
00085B84 5900                       		subq.b	#4,d0				; Add space for another target
00085B86 2B8C 0000                  		move.l	a4,(a5,d0.w)			; Put in current address (*before* target for jump!)
00085B8A 1B40 000D                  		move.b	d0,TrackStackPointer(a5)	; Store new stack pointer
00085B8E 60C8                       		bra.s	cfJumpTo
00085B90                            ; ===========================================================================
00085B90                            ; loc_72E64:
00085B90                            cfOpF9:
00085B90 103C 0088                  		move.b	#$88,d0		; D1L/RR of Operator 3
00085B94 123C 000F                  		move.b	#$F,d1		; Loaded with fixed value (max RR, 1TL)
00085B98 4EBA F8B4                  		jsr	WriteFMI(pc)
00085B9C 103C 008C                  		move.b	#$8C,d0		; D1L/RR of Operator 4
00085BA0 123C 000F                  		move.b	#$F,d1		; Loaded with fixed value (max RR, 1TL)
00085BA4 6000 F8A8                  		bra.w	WriteFMI
00085BA8                            ; ===========================================================================
00085BA8                            
00085BA8                            Kos_Z80:
00085BA8                            		incbin	"sound\z80.bin", 0, $15
00085BBD 00                         		dc.b ((SegaPCM&$FF8000)/$8000)&1						; Least bit of bank ID (bit 15 of address)
00085BBE                            		incbin	"sound\z80.bin", $16, 6
00085BC4 00                         		dc.b ((SegaPCM&$FF8000)/$8000)>>1						; ... the remaining bits of bank ID (bits 16-23)
00085BC5                            		incbin	"sound\z80.bin", $1D, $93
00085C58 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$7F00)>>8)|$80				; Pointer to Sega PCM, relative to start of ROM bank (i.e., little_endian($8000 + SegaPCM&$7FFF)
00085C5A                            		incbin	"sound\z80.bin", $B2, 1
00085C5B 0000                       		dc.w (((SegaPCM_End-SegaPCM)&$FF)<<8)+(((SegaPCM_End-SegaPCM)&$FF00)>>8)	; ... the size of the Sega PCM (little endian)
00085C5D                            		incbin	"sound\z80.bin", $B5, $16AB
000872FE                            		even
000872FE                            
000872FE                            Music81:	incbin	"sound/music/Mus81 - GHZ.bin"
00088622 00                         		even
00088622                            Music82:	incbin	"sound/music/Mus82 - LZ.bin"
00089EAA                            		even
00089EAA                            Music83:	incbin	"sound/music/Mus83 - MZ.bin"
0009182A 00                         		even
0009182A                            Music84:	incbin	"sound/music/Mus84 - SLZ.bin"
0009303E 00                         		even
0009303E                            Music85:	incbin	"sound/music/Mus85 - SYZ.bin"
00093DE4                            		even
00093DE4                            Music86:	incbin	"sound/music/Mus86 - SBZ.bin"
0009519C                            		even
0009519C                            Music87:	incbin	"sound/music/Mus87 - Invincibility.bin"
00095A94 00                         		even
00095A94                            Music88:	include	"sound/music/Mus88 - Extra Life.asm"
00095A94                            extralifejingle_Header:
00095A94                            	smpsHeaderStartSong 1
00095A96 0703                       	smpsHeaderChan      $07, $03
00095A98 0100                       	smpsHeaderTempo     $01, $00
00095A9A                            
00095A9E 0000 0000                  	smpsHeaderFM        extralifejingle_FM1,	$00, $00
00095AA2 0000 0000                  	smpsHeaderFM        extralifejingle_FM2,	$00, $00
00095AA6 0000 0000                  	smpsHeaderFM        extralifejingle_FM3,	$00, $00
00095AAA 0000 0000                  	smpsHeaderFM        extralifejingle_FM4,	$00, $00
00095AAE 0000 0000                  	smpsHeaderFM        extralifejingle_FM5,	$00, $00
00095AB2 0000 0000                  	smpsHeaderFM        extralifejingle_FM6,	$00, $00
00095AC8                            
00095AC8                            ; DAC Data
00095AC8                            extralifejingle_DAC:
00095AC8 807F 55                    	dc.b	nRst, $7F, $55
00095ACB E4                         	smpsFade
00095ACC                            ; PSG1 Data
00095ACC                            extralifejingle_PSG1:
00095ACC                            ; PSG2 Data
00095ACC                            extralifejingle_PSG2:
00095ACC                            ; PSG3 Data
00095ACC                            extralifejingle_PSG3:
00095ACC F2                         	smpsStop
00095ACD                            
00095ACD                            ; FM1 Data
00095ACD                            extralifejingle_FM1:
00095ACD EF00                       	smpsSetvoice        $00
00095ACF E616                       	smpsAlterVol        $16
00095AD1 E0C0                       	smpsPan             panCenter, $00
00095AD3 A61A BC13 BB12 B913 B60D+  	dc.b	nCs3, $1A, nB4, $13, nBb4, $12, nAb4, $13, nF4, $0D, nG3, $2C
00095ADF AC06 800C                  	dc.b	nG3, $06, nRst, $0C
00095AE3 F2                         	smpsStop
00095AE4                            
00095AE4                            ; FM2 Data
00095AE4                            extralifejingle_FM2:
00095AE4 EF01                       	smpsSetvoice        $01
00095AE6 E616                       	smpsAlterVol        $16
00095AE8 E0C0                       	smpsPan             panCenter, $00
00095AEA B61A AD13 AB12 AA13 A60D+  	dc.b	nF4, $1A, nAb3, $13, nFs3, $12, nF3, $13, nCs3, $0D, nA2, $2C
00095AF6 A206 800C                  	dc.b	nA2, $06, nRst, $0C
00095AFA F2                         	smpsStop
00095AFB                            
00095AFB                            ; FM3 Data
00095AFB                            extralifejingle_FM3:
00095AFB EF01                       	smpsSetvoice        $01
00095AFD E616                       	smpsAlterVol        $16
00095AFF E0C0                       	smpsPan             panCenter, $00
00095B01 AD0D BC13 B9B7 B60C B20D+  	dc.b	nAb3, $0D, nB4, $13, nAb4, nFs4, nF4, $0C, nCs4, $0D, nC4, $2C
00095B0D B106 800C                  	dc.b	nC4, $06, nRst, $0C
00095B11 F2                         	smpsStop
00095B12                            
00095B12                            ; FM4 Data
00095B12                            extralifejingle_FM4:
00095B12 EF02                       	smpsSetvoice        $02
00095B14 E0C0                       	smpsPan             panCenter, $00
00095B16 8001                       	dc.b	nRst, $01
00095B18 E616                       	smpsAlterVol        $16
00095B1A BE0C B913 ABAA A60C A20D+  	dc.b	nCs5, $0C, nAb4, $13, nFs3, nF3, nCs3, $0C, nA2, $0D, nE5, $2C
00095B26 C106 800C                  	dc.b	nE5, $06, nRst, $0C
00095B2A F2                         	smpsStop
00095B2B                            
00095B2B                            ; FM5 Data
00095B2B                            extralifejingle_FM5:
00095B2B EF03                       	smpsSetvoice        $03
00095B2D E602                       	smpsAlterVol        $02
00095B2F E0C0                       	smpsPan             panCenter, $00
00095B31 8001                       	dc.b	nRst, $01
00095B33 EF05                       	smpsSetvoice        $05
00095B35 E60A                       	smpsAlterVol        $0A
00095B37 E780 0CC8 06B2 07B9 06C7+  	dc.b	smpsNoAttack, nRst, $0C, nB5, $06, nCs4, $07, nAb4, $06, nBb5, nCs4, $07
00095B43 B706 C5C8 B607 C206 B2BE+  	dc.b	nFs4, $06, nAb5, nB5, nF4, $07, nF5, $06, nCs4, nCs5, $07, nA5
00095B4F 06BD C1C4 07BD 06C1 C407+  	dc.b	$06, nC5, nE5, nG5, $07, nC5, $06, nE5, nG5, $07, nC5, $06
00095B5B C1C4 80                    	dc.b	nE5, nG5, nRst
00095B5E F2                         	smpsStop
00095B5F                            
00095B5F                            ; FM6 Data
00095B5F                            extralifejingle_FM6:
00095B5F EF04                       	smpsSetvoice        $04
00095B61 E607                       	smpsAlterVol        $07
00095B63 E0C0                       	smpsPan             panCenter, $00
00095B65 8001                       	dc.b	nRst, $01
00095B67 EF06                       	smpsSetvoice        $06
00095B69 E6F9                       	smpsAlterVol        $F9
00095B6B A658 A72C A70C 80          	dc.b	nCs3, $58, nD3, $2C, nD3, $0C, nRst
00095B72 F2                         	smpsStop
00095B73                            
00095B73                            extralifejingle_Voices:
00095B73                            ;	Voice $00
00095B73                            ;	$3A
00095B73                            ;	$34, $73, $74, $31, 	$1F, $1F, $1F, $1F, 	$1F, $1F, $1F, $1F
00095B73                            ;	$00, $00, $00, $00, 	$03, $03, $03, $05, 	$22, $22, $22, $00
00095B73                            	smpsVcAlgorithm     $02
00095B73                            	smpsVcFeedback      $07
00095B73                            	smpsVcUnusedBits    $00
00095B73                            	smpsVcDetune        $03, $07, $07, $03
00095B73                            	smpsVcCoarseFreq    $01, $04, $03, $04
00095B73                            	smpsVcRateScale     $00, $00, $00, $00
00095B73                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00095B73                            	smpsVcAmpMod        $00, $00, $00, $00
00095B73                            	smpsVcDecayRate1    $1F, $1F, $1F, $1F
00095B73                            	smpsVcDecayRate2    $00, $00, $00, $00
00095B73                            	smpsVcDecayLevel    $00, $00, $00, $00
00095B73                            	smpsVcReleaseRate   $05, $03, $03, $03
00095B8C                            
00095B8C                            ;	Voice $01
00095B8C                            ;	$3A
00095B8C                            ;	$34, $73, $74, $31, 	$1F, $1F, $1F, $1F, 	$1F, $1F, $1F, $1F
00095B8C                            ;	$00, $00, $00, $00, 	$03, $03, $03, $05, 	$22, $22, $22, $00
00095B8C                            	smpsVcAlgorithm     $02
00095B8C                            	smpsVcFeedback      $07
00095B8C                            	smpsVcUnusedBits    $00
00095B8C                            	smpsVcDetune        $03, $07, $07, $03
00095B8C                            	smpsVcCoarseFreq    $01, $04, $03, $04
00095B8C                            	smpsVcRateScale     $00, $00, $00, $00
00095B8C                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00095B8C                            	smpsVcAmpMod        $00, $00, $00, $00
00095B8C                            	smpsVcDecayRate1    $1F, $1F, $1F, $1F
00095B8C                            	smpsVcDecayRate2    $00, $00, $00, $00
00095B8C                            	smpsVcDecayLevel    $00, $00, $00, $00
00095B8C                            	smpsVcReleaseRate   $05, $03, $03, $03
00095BA5                            
00095BA5                            ;	Voice $02
00095BA5                            ;	$3A
00095BA5                            ;	$34, $73, $74, $31, 	$1F, $1F, $1F, $1F, 	$1F, $1F, $1F, $1F
00095BA5                            ;	$00, $00, $00, $00, 	$03, $03, $03, $05, 	$22, $22, $22, $00
00095BA5                            	smpsVcAlgorithm     $02
00095BA5                            	smpsVcFeedback      $07
00095BA5                            	smpsVcUnusedBits    $00
00095BA5                            	smpsVcDetune        $03, $07, $07, $03
00095BA5                            	smpsVcCoarseFreq    $01, $04, $03, $04
00095BA5                            	smpsVcRateScale     $00, $00, $00, $00
00095BA5                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00095BA5                            	smpsVcAmpMod        $00, $00, $00, $00
00095BA5                            	smpsVcDecayRate1    $1F, $1F, $1F, $1F
00095BA5                            	smpsVcDecayRate2    $00, $00, $00, $00
00095BA5                            	smpsVcDecayLevel    $00, $00, $00, $00
00095BA5                            	smpsVcReleaseRate   $05, $03, $03, $03
00095BBE                            
00095BBE                            ;	Voice $03
00095BBE                            ;	$00
00095BBE                            ;	$01, $0E, $00, $00, 	$1E, $1E, $1E, $1D, 	$1A, $1C, $10, $10
00095BBE                            ;	$00, $00, $00, $00, 	$FD, $FE, $F8, $F8, 	$1A, $25, $05, $00
00095BBE                            	smpsVcAlgorithm     $00
00095BBE                            	smpsVcFeedback      $00
00095BBE                            	smpsVcUnusedBits    $00
00095BBE                            	smpsVcDetune        $00, $00, $00, $00
00095BBE                            	smpsVcCoarseFreq    $00, $00, $0E, $01
00095BBE                            	smpsVcRateScale     $00, $00, $00, $00
00095BBE                            	smpsVcAttackRate    $1D, $1E, $1E, $1E
00095BBE                            	smpsVcAmpMod        $00, $00, $00, $00
00095BBE                            	smpsVcDecayRate1    $10, $10, $1C, $1A
00095BBE                            	smpsVcDecayRate2    $00, $00, $00, $00
00095BBE                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
00095BBE                            	smpsVcReleaseRate   $08, $08, $0E, $0D
00095BD7                            
00095BD7                            ;	Voice $04
00095BD7                            ;	$03
00095BD7                            ;	$66, $40, $40, $31, 	$1F, $1F, $1F, $1C, 	$0E, $05, $02, $01
00095BD7                            ;	$01, $00, $04, $06, 	$AA, $6A, $16, $18, 	$2A, $1A, $20, $00
00095BD7                            	smpsVcAlgorithm     $03
00095BD7                            	smpsVcFeedback      $00
00095BD7                            	smpsVcUnusedBits    $00
00095BD7                            	smpsVcDetune        $03, $04, $04, $06
00095BD7                            	smpsVcCoarseFreq    $01, $00, $00, $06
00095BD7                            	smpsVcRateScale     $00, $00, $00, $00
00095BD7                            	smpsVcAttackRate    $1C, $1F, $1F, $1F
00095BD7                            	smpsVcAmpMod        $00, $00, $00, $00
00095BD7                            	smpsVcDecayRate1    $01, $02, $05, $0E
00095BD7                            	smpsVcDecayRate2    $06, $04, $00, $01
00095BD7                            	smpsVcDecayLevel    $01, $01, $06, $0A
00095BD7                            	smpsVcReleaseRate   $08, $06, $0A, $0A
00095BF0                            
00095BF0                            ;	Voice $05
00095BF0                            ;	$34
00095BF0                            ;	$33, $7E, $01, $74, 	$9B, $1F, $5F, $1F, 	$14, $07, $07, $08
00095BF0                            ;	$00, $00, $00, $00, 	$F6, $E4, $F7, $F7, 	$19, $71, $00, $00
00095BF0                            	smpsVcAlgorithm     $04
00095BF0                            	smpsVcFeedback      $06
00095BF0                            	smpsVcUnusedBits    $00
00095BF0                            	smpsVcDetune        $07, $00, $07, $03
00095BF0                            	smpsVcCoarseFreq    $04, $01, $0E, $03
00095BF0                            	smpsVcRateScale     $00, $01, $00, $02
00095BF0                            	smpsVcAttackRate    $1F, $1F, $1F, $1B
00095BF0                            	smpsVcAmpMod        $00, $00, $00, $00
00095BF0                            	smpsVcDecayRate1    $08, $07, $07, $14
00095BF0                            	smpsVcDecayRate2    $00, $00, $00, $00
00095BF0                            	smpsVcDecayLevel    $0F, $0F, $0E, $0F
00095BF0                            	smpsVcReleaseRate   $07, $07, $04, $06
00095C09                            
00095C09                            ;	Voice $06
00095C09                            ;	$30
00095C09                            ;	$01, $00, $00, $01, 	$9F, $1F, $1F, $5C, 	$0F, $0D, $10, $14
00095C09                            ;	$08, $18, $05, $08, 	$6F, $00, $0F, $18, 	$15, $1F, $19, $00
00095C09                            	smpsVcAlgorithm     $00
00095C09                            	smpsVcFeedback      $06
00095C09                            	smpsVcUnusedBits    $00
00095C09                            	smpsVcDetune        $00, $00, $00, $00
00095C09                            	smpsVcCoarseFreq    $01, $00, $00, $01
00095C09                            	smpsVcRateScale     $01, $00, $00, $02
00095C09                            	smpsVcAttackRate    $1C, $1F, $1F, $1F
00095C09                            	smpsVcAmpMod        $00, $00, $00, $00
00095C09                            	smpsVcDecayRate1    $14, $10, $0D, $0F
00095C09                            	smpsVcDecayRate2    $08, $05, $18, $08
00095C09                            	smpsVcDecayLevel    $01, $00, $00, $06
00095C09                            	smpsVcReleaseRate   $08, $0F, $00, $0F
00095C22                            
00095C22                            
00095C22                            		even
00095C22                            Music89:	incbin	"sound/music/Mus89 - Special Stage.bin"
0009647A 00                         		even
0009647A                            Music8A:	incbin	"sound/music/Mus8A - Title Screen.bin"
0009699A                            		even
0009699A                            Music8B:	incbin	"sound/music/Mus8B - Ending.bin"
00096C5C 00                         		even
00096C5C                            Music8C:	incbin	"sound/music/Mus8C - Boss.bin"
00097AB4                            		even
00097AB4                            Music8D:	incbin	"sound/music/Mus8D - FZ.bin"
00097D00 00                         		even
00097D00                            Music8E:	incbin	"sound/music/Mus8E - Sonic Got Through.bin"
00098036 00                         		even
00098036                            Music8F:	incbin	"sound/music/Mus8F - Game Over.bin"
000981E2 00                         		even
000981E2                            Music90:	incbin	"sound/music/Mus90 - Continue Screen.bin"
000983F0 00                         		even
000983F0                            Music91:	incbin	"sound/music/Mus91 - Credits.bin"
000986D4 00                         		even
000986D4                            Music92:	incbin	"sound/music/Mus92 - Drowning.bin"
00098E04 00                         		even
00098E04                            Music93:	incbin	"sound/music/Mus93 - Get Emerald.bin"
00098ED2                            		even
00098ED2                            Music94:	incbin	"sound/music/Mus94 - Final Boss Pinch.bin"
00099340 00                         		even
00099340                            Music95:		incbin	"sound/music/Mus95 - Seaside Front.bin"
00099E36                            		even
00099E36                            Music96:		incbin	"sound/music/Mus96 - TTZ BF US.bin"
0009AA18                            		even
0009AA18                            Music97:		incbin	"sound/music/Mus97 - Granada Game Over.bin"
0009BD1E 00                         		even
0009BD1E                            Music98:		include	"sound/music/Mus98 - Options Theme.asm"
0009BD1E                            PasswordEntry_Header:
0009BD1E                            	smpsHeaderStartSong 3
0009BD20 0603                       	smpsHeaderChan      $06, $03
0009BD22 0105                       	smpsHeaderTempo     $01, $05
0009BD24                            
0009BD28 0000 0013                  	smpsHeaderFM        PasswordEntry_FM1,	$00, $13
0009BD2C 0000 F40B                  	smpsHeaderFM        PasswordEntry_FM2,	$F4, $0B
0009BD30 0000 000F                  	smpsHeaderFM        PasswordEntry_FM3,	$00, $0F
0009BD34 0000 000F                  	smpsHeaderFM        PasswordEntry_FM4,	$00, $0F
0009BD38 0000 001D                  	smpsHeaderFM        PasswordEntry_FM5,	$00, $1D
0009BD4E                            
0009BD4E                            ; FM1 Data
0009BD4E                            PasswordEntry_FM1:
0009BD4E EF00                       	smpsSetvoice        $00
0009BD55                            
0009BD55                            PasswordEntry_Jump00:
0009BD55 CD30 CED0 D010 CE08 CD10+  	dc.b	nE6, $30, nF6, nG6, nG6, $10, nF6, $08, nE6, $10, nF6, $08
0009BD61 C930 CBCD CE10 CD08 CB10+  	dc.b	nC6, $30, nD6, nE6, nF6, $10, nE6, $08, nD6, $10, nE6, $08
0009BD6D C960 C830 C4C6 C210 C6C9+  	dc.b	nC6, $60, nB5, $30, nG5, nA5, nF5, $10, nA5, nC6, nB5, $30
0009BD79 C918 CB                    	dc.b	nC6, $18, nD6
0009BD7C F6FF D7                    	smpsJump            PasswordEntry_Jump00
0009BD7F                            
0009BD7F                            ; FM2 Data
0009BD7F                            PasswordEntry_FM2:
0009BD7F EF01                       	smpsSetvoice        $01
0009BD81                            
0009BD81                            PasswordEntry_Jump03:
0009BD81 B118 1818 10AC 08B1 1818+  	dc.b	nC4, $18, $18, $18, $10, nG3, $08, nC4, $18, $18, $18, nB3
0009BD8D AEAE AEAE 10B5 08AE 1818+  	dc.b	nA3, nA3, nA3, nA3, $10, nE4, $08, nA3, $18, $18, $18, nG3
0009BD99 AAAA AAAA 1008 B518 1818+  	dc.b	nF3, nF3, nF3, nF3, $10, $08, nE4, $18, $18, $18, $10, $08
0009BDA5 AC18 1818 1008 1818 AEB0   	dc.b	nG3, $18, $18, $18, $10, $08, $18, $18, nA3, nB3
0009BDAF F6FF D0                    	smpsJump            PasswordEntry_Jump03
0009BDB2                            
0009BDB2                            ; FM3 Data
0009BDB2                            PasswordEntry_FM3:
0009BDB2 E080                       	smpsPan             panLeft, $00
0009BDB4 EF02                       	smpsSetvoice        $02
0009BDB6                            
0009BDB6                            PasswordEntry_Jump02:
0009BDB6 C104 8014 C408 8010 C208+  	dc.b	nE5, $04, nRst, $14, nG5, $08, nRst, $10, nF5, $08, nRst, $10
0009BDC2 C204 8014 C104 8014 C104+  	dc.b	nF5, $04, nRst, $14, nE5, $04, nRst, $14, nE5, $04, nRst, $0C
0009BDCE C204 8014 C21C 8004 C404+  	dc.b	nF5, $04, nRst, $14, nF5, $1C, nRst, $04, nG5, $04, nRst, $14
0009BDDA C408 8010 C204 8014 C204+  	dc.b	nG5, $08, nRst, $10, nF5, $04, nRst, $14, nF5, $04, nRst, $14
0009BDE6 C108 8010 C104 800C C204+  	dc.b	nE5, $08, nRst, $10, nE5, $04, nRst, $0C, nF5, $04, nRst, $14
0009BDF2 C21C 8004 C108 8010 C108+  	dc.b	nF5, $1C, nRst, $04, nE5, $08, nRst, $10, nE5, $08, nRst, $10
0009BDFE BF08 8010 C20C 800C C408+  	dc.b	nD5, $08, nRst, $10, nF5, $0C, nRst, $0C, nG5, $08, nRst, $10
0009BE0A C408 8010 BF08 8010 BF0C+  	dc.b	nG5, $08, nRst, $10, nD5, $08, nRst, $10, nD5, $0C, nRst, $0C
0009BE16 BA08 8010 BD0C 800C BD0C+  	dc.b	nA4, $08, nRst, $10, nC5, $0C, nRst, $0C, nC5, $0C, nRst, $0C
0009BE22 BD0C 800C BF08 8010 BF08+  	dc.b	nC5, $0C, nRst, $0C, nD5, $08, nRst, $10, nD5, $08, nRst, $10
0009BE2E BF08 8010 BF08 8010        	dc.b	nD5, $08, nRst, $10, nD5, $08, nRst, $10
0009BE36 F6FF 7E                    	smpsJump            PasswordEntry_Jump02
0009BE39                            
0009BE39                            ; FM4 Data
0009BE39                            PasswordEntry_FM4:
0009BE39 E040                       	smpsPan             panRight, $00
0009BE3B EF02                       	smpsSetvoice        $02
0009BE3D                            
0009BE3D                            PasswordEntry_Jump01:
0009BE3D C404 8014 C104 8014 BF04+  	dc.b	nG5, $04, nRst, $14, nE5, $04, nRst, $14, nD5, $04, nRst, $14
0009BE49 BF04 8014 BD04 8014 BD04+  	dc.b	nD5, $04, nRst, $14, nC5, $04, nRst, $14, nC5, $04, nRst, $0C
0009BE55 BF04 8014 BF18 8008 C104+  	dc.b	nD5, $04, nRst, $14, nD5, $18, nRst, $08, nE5, $04, nRst, $14
0009BE61 C104 8014 BF04 8014 BF04+  	dc.b	nE5, $04, nRst, $14, nD5, $04, nRst, $14, nD5, $04, nRst, $14
0009BE6D BD04 8014 BD04 800C BF04+  	dc.b	nC5, $04, nRst, $14, nC5, $04, nRst, $0C, nD5, $04, nRst, $14
0009BE79 BF1C 8004 C408 8010 C408+  	dc.b	nD5, $1C, nRst, $04, nG5, $08, nRst, $10, nG5, $08, nRst, $10
0009BE85 C208 8010 BF08 8010 BF08+  	dc.b	nF5, $08, nRst, $10, nD5, $08, nRst, $10, nD5, $08, nRst, $10
0009BE91 BF08 8010 BC08 8010 BC0C+  	dc.b	nD5, $08, nRst, $10, nB4, $08, nRst, $10, nB4, $0C, nRst, $0C
0009BE9D BD08 8010 BA08 8010 BA08+  	dc.b	nC5, $08, nRst, $10, nA4, $08, nRst, $10, nA4, $08, nRst, $10
0009BEA9 BA08 8010 BC08 8010 BC08+  	dc.b	nA4, $08, nRst, $10, nB4, $08, nRst, $10, nB4, $08, nRst, $10
0009BEB5 BC08 8010 BC08 8010        	dc.b	nB4, $08, nRst, $10, nB4, $08, nRst, $10
0009BEBD F6FF 7E                    	smpsJump            PasswordEntry_Jump01
0009BEC0                            
0009BEC0                            ; FM5 Data
0009BEC0                            PasswordEntry_FM5:
0009BEC0 EF00                       	smpsSetvoice        $00
0009BEC2 E1FB                       	smpsAlterNote       $FB
0009BEC4 800C                       	dc.b	nRst, $0C
0009BEC6 F6FE 8D                    	smpsJump            PasswordEntry_Jump00
0009BEC9                            
0009BEC9                            ; PSG1 Data
0009BEC9                            PasswordEntry_PSG1:
0009BEC9 C410 C908 CD10 D038 C410+  	dc.b	nG5, $10, nC6, $08, nE6, $10, nG6, $38, nG5, $10, nC6, $08
0009BED5 CD10 D038 C410 C908 CD10+  	dc.b	nE6, $10, nG6, $38, nG5, $10, nC6, $08, nE6, $10, nG6, $38
0009BEE1 C410 C908 CD10 D038 C410+  	dc.b	nG5, $10, nC6, $08, nE6, $10, nG6, $38, nG5, $10, nC6, $08
0009BEED CD10 D038 C410 C808 CB10+  	dc.b	nE6, $10, nG6, $38, nG5, $10, nB5, $08, nD6, $10, nG6, $38
0009BEF9 C210 C608 C910 CE18 C908+  	dc.b	nF5, $10, nA5, $08, nC6, $10, nF6, $18, nC6, $08, nA5, $10
0009BF05 C208 C410 C808 CB10 D018+  	dc.b	nF5, $08, nG5, $10, nB5, $08, nD6, $10, nG6, $18, nD6, $08
0009BF11 C810 C408                  	dc.b	nB5, $10, nG5, $08
0009BF15 F6FF B2                    	smpsJump            PasswordEntry_PSG1
0009BF18                            
0009BF18                            ; PSG2 Data
0009BF18                            PasswordEntry_PSG2:
0009BF18 E1FF                       	smpsAlterNote       $FF
0009BF1A 800C                       	dc.b	nRst, $0C
0009BF1C F6FF AB                    	smpsJump            PasswordEntry_PSG1
0009BF1F                            
0009BF1F                            ; PSG3 Data
0009BF1F                            PasswordEntry_PSG3:
0009BF1F F502                       	smpsPSGvoice        fTone_02
0009BF21 F3E7                       	smpsPSGform         $E7
0009BF23 C508 80C5 C508 80C5 C508+  	dc.b	nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5
0009BF2F C508 80C5 C508 80C5 C508+  	dc.b	nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5
0009BF3B C508 80C5 C508 C5          	dc.b	nAb5, $08, nRst, nAb5, nAb5, $08, nAb5
0009BF42 F503                       	smpsPSGvoice        fTone_03
0009BF44 C5                         	dc.b	nAb5
0009BF45 F6FF D8                    	smpsJump            PasswordEntry_PSG3
0009BF48                            
0009BF48                            ; DAC Data
0009BF48                            PasswordEntry_DAC:
0009BF48 8118 8281 8210 8108 8118+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $18, dSnare, dKick
0009BF54 0880 0881 8210 8108        	dc.b	$08, nRst, $08, dKick, dSnare, $10, dKick, $08
0009BF5C F700 03FF E8               	smpsLoop            $00, $03, PasswordEntry_DAC
0009BF61 8118 8281 8210 8108 8118+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $18, dSnare, dKick
0009BF6D 0880 0881 8210 8208        	dc.b	$08, nRst, $08, dKick, dSnare, $10, dSnare, $08
0009BF75                            
0009BF75                            PasswordEntry_Loop00:
0009BF75 8118 8281 8210 8108 8118+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $18, dSnare, dKick
0009BF81 0880 0881 8210 8108        	dc.b	$08, nRst, $08, dKick, dSnare, $10, dKick, $08
0009BF89 F700 03FF E8               	smpsLoop            $00, $03, PasswordEntry_Loop00
0009BF8E 8118 8281 8210 8108 8108+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $08, nRst, $08
0009BF9A 8182 8182 8282 8889 898A   	dc.b	dKick, dSnare, dKick, dSnare, dSnare, dSnare, dHiTimpani, dMidTimpani, dMidTimpani, dLowTimpani
0009BFA4 F6FF A2                    	smpsJump            PasswordEntry_DAC
0009BFA7                            
0009BFA7                            PasswordEntry_Voices:
0009BFA7                            ;	Voice $00
0009BFA7                            ;	$04
0009BFA7                            ;	$02, $01, $01, $00, 	$1F, $10, $1F, $12, 	$09, $03, $0B, $04
0009BFA7                            ;	$03, $00, $00, $05, 	$EF, $FF, $2F, $0F, 	$1C, $80, $19, $80
0009BFA7                            	smpsVcAlgorithm     $04
0009BFA7                            	smpsVcFeedback      $00
0009BFA7                            	smpsVcUnusedBits    $00
0009BFA7                            	smpsVcDetune        $00, $00, $00, $00
0009BFA7                            	smpsVcCoarseFreq    $00, $01, $01, $02
0009BFA7                            	smpsVcRateScale     $00, $00, $00, $00
0009BFA7                            	smpsVcAttackRate    $12, $1F, $10, $1F
0009BFA7                            	smpsVcAmpMod        $00, $00, $00, $00
0009BFA7                            	smpsVcDecayRate1    $04, $0B, $03, $09
0009BFA7                            	smpsVcDecayRate2    $05, $00, $00, $03
0009BFA7                            	smpsVcDecayLevel    $00, $02, $0F, $0E
0009BFA7                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009BFC0                            
0009BFC0                            ;	Voice $01
0009BFC0                            ;	$39
0009BFC0                            ;	$03, $61, $40, $00, 	$1F, $5F, $5F, $5F, 	$10, $11, $09, $09
0009BFC0                            ;	$06, $00, $00, $00, 	$C8, $F8, $F8, $F8, 	$1E, $24, $20, $80
0009BFC0                            	smpsVcAlgorithm     $01
0009BFC0                            	smpsVcFeedback      $07
0009BFC0                            	smpsVcUnusedBits    $00
0009BFC0                            	smpsVcDetune        $00, $04, $06, $00
0009BFC0                            	smpsVcCoarseFreq    $00, $00, $01, $03
0009BFC0                            	smpsVcRateScale     $01, $01, $01, $00
0009BFC0                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009BFC0                            	smpsVcAmpMod        $00, $00, $00, $00
0009BFC0                            	smpsVcDecayRate1    $09, $09, $11, $10
0009BFC0                            	smpsVcDecayRate2    $00, $00, $00, $06
0009BFC0                            	smpsVcDecayLevel    $0F, $0F, $0F, $0C
0009BFC0                            	smpsVcReleaseRate   $08, $08, $08, $08
0009BFD9                            
0009BFD9                            ;	Voice $02
0009BFD9                            ;	$2C
0009BFD9                            ;	$41, $00, $23, $00, 	$1F, $1F, $1F, $1F, 	$08, $0A, $0B, $0A
0009BFD9                            ;	$04, $05, $00, $05, 	$45, $56, $85, $86, 	$14, $82, $18, $82
0009BFD9                            	smpsVcAlgorithm     $04
0009BFD9                            	smpsVcFeedback      $05
0009BFD9                            	smpsVcUnusedBits    $00
0009BFD9                            	smpsVcDetune        $00, $02, $00, $04
0009BFD9                            	smpsVcCoarseFreq    $00, $03, $00, $01
0009BFD9                            	smpsVcRateScale     $00, $00, $00, $00
0009BFD9                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009BFD9                            	smpsVcAmpMod        $00, $00, $00, $00
0009BFD9                            	smpsVcDecayRate1    $0A, $0B, $0A, $08
0009BFD9                            	smpsVcDecayRate2    $05, $00, $05, $04
0009BFD9                            	smpsVcDecayLevel    $08, $08, $05, $04
0009BFD9                            	smpsVcReleaseRate   $06, $05, $06, $05
0009BFF2                            
0009BFF2                            
0009BFF2                            		even		
0009BFF2                            ; ---------------------------------------------------------------------------
0009BFF2                            ; Sound	effect pointers
0009BFF2                            ; ---------------------------------------------------------------------------
0009BFF2                            SoundIndex:
0009BFF2 0000 0000                  ptr_sndA0:	dc.l SoundA0
0009BFF6 0000 0000                  ptr_sndA1:	dc.l SoundA1
0009BFFA 0000 0000                  ptr_sndA2:	dc.l SoundA2
0009BFFE 0000 0000                  ptr_sndA3:	dc.l SoundA3
0009C002 0000 0000                  ptr_sndA4:	dc.l SoundA4
0009C006 0000 0000                  ptr_sndA5:	dc.l SoundA5
0009C00A 0000 0000                  ptr_sndA6:	dc.l SoundA6
0009C00E 0000 0000                  ptr_sndA7:	dc.l SoundA7
0009C012 0000 0000                  ptr_sndA8:	dc.l SoundA8
0009C016 0000 0000                  ptr_sndA9:	dc.l SoundA9
0009C01A 0000 0000                  ptr_sndAA:	dc.l SoundAA
0009C01E 0000 0000                  ptr_FireShield:	dc.l SoundAB
0009C022 0000 0000                  ptr_sndAC:	dc.l SoundAC
0009C026 0000 0000                  ptr_sndAD:	dc.l SoundAD
0009C02A 0000 0000                  ptr_sndAE:	dc.l SoundAE
0009C02E 0000 0000                  ptr_sndAF:	dc.l SoundAF
0009C032 0000 0000                  ptr_sndB0:	dc.l SoundB0
0009C036 0000 0000                  ptr_sndB1:	dc.l SoundB1
0009C03A 0000 0000                  ptr_sndB2:	dc.l SoundB2
0009C03E 0000 0000                  ptr_sndB3:	dc.l SoundB3
0009C042 0000 0000                  ptr_sndB4:	dc.l SoundB4
0009C046 0000 0000                  ptr_sndB5:	dc.l SoundB5
0009C04A 0000 0000                  ptr_sndB6:	dc.l SoundB6
0009C04E 0000 0000                  ptr_sndB7:	dc.l SoundB7
0009C052 0000 0000                  ptr_sndB8:	dc.l SoundB8
0009C056 0000 0000                  ptr_sndB9:	dc.l SoundB9
0009C05A 0000 0000                  ptr_sndBA:	dc.l SoundBA
0009C05E 0000 0000                  ptr_sndBB:	dc.l SoundBB
0009C062 0000 0000                  ptr_sndBC:	dc.l SoundBC
0009C066 0000 0000                  ptr_sndBD:	dc.l SoundBD
0009C06A 0000 0000                  ptr_sndBE:	dc.l SoundBE
0009C06E 0000 0000                  ptr_sndBF:	dc.l SoundBF
0009C072 0000 0000                  ptr_sndC0:	dc.l SoundC0
0009C076 0000 0000                  ptr_sndC1:	dc.l SoundC1
0009C07A 0000 0000                  ptr_sndC2:	dc.l SoundC2
0009C07E 0000 0000                  ptr_sndC3:	dc.l SoundC3
0009C082 0000 0000                  ptr_sndC4:	dc.l SoundC4
0009C086 0000 0000                  ptr_sndC5:	dc.l SoundC5
0009C08A 0000 0000                  ptr_sndC6:	dc.l SoundC6
0009C08E 0000 0000                  ptr_sndC7:	dc.l SoundC7
0009C092 0000 0000                  ptr_sndC8:	dc.l SoundC8
0009C096 0000 0000                  ptr_sndC9:	dc.l SoundC9
0009C09A 0000 0000                  ptr_sndCA:	dc.l SoundCA
0009C09E 0000 0000                  ptr_sndCB:	dc.l SoundCB
0009C0A2 0000 0000                  ptr_sndCC:	dc.l SoundCC
0009C0A6 0000 0000                  ptr_sndCD:	dc.l SoundCD
0009C0AA 0000 0000                  ptr_sndCE:	dc.l SoundCE
0009C0AE 0000 0000                  ptr_sndCF:	dc.l SoundCF
0009C0B2                            ptr_sndend
0009C0B2                            ; ---------------------------------------------------------------------------
0009C0B2                            ; Special sound effect pointers
0009C0B2                            ; ---------------------------------------------------------------------------
0009C0B2                            SpecSoundIndex:
0009C0B2 0000 0000                  ptr_sndD0:	dc.l SoundD0
0009C0B6 0000 0000                  ptr_sndD1:	dc.l SoundD1
0009C0BA 0000 0000                  ptr_sndD2:	dc.l SoundD2
0009C0BE 0000 0000                  ptr_sndD3:	dc.l SoundD3
0009C0C2 0000 0000                  ptr_sndD4:	dc.l SoundD4
0009C0C6 0000 0000                  ptr_sndD5:	dc.l SoundD5
0009C0CA                            ptr_specend
0009C0CA                            SoundA0:	include	"sound/sfx/Jump.asm"
0009C0CA                            SndA0_Jump_Header:
0009C0CA                            	smpsHeaderStartSong 1
0009C0CC 01                         	smpsHeaderTempoSFX  $01
0009C0CD 01                         	smpsHeaderChanSFX   $01
0009C0CE                            
0009C0D4                            
0009C0D4                            ; PSG2 Data
0009C0D4                            SndA0_Jump_PSG2:
0009C0D4 F500                       	smpsPSGvoice        $00
0009C0D6 9E05                       	dc.b	nF2, $05
0009C0DD A315                       	dc.b	nBb2, $15
0009C0DF F2                         	smpsStop
0009C0E0                            
0009C0E0                            ; Song seems to not use any FM voices
0009C0E0                            SndA0_Jump_Voices:
0009C0E0                            SndA0_Jump_Voices:
0009C0E0                            		even
0009C0E0                            SoundA1:	incbin	"sound/sfx/SndA1 - Lamppost.bin"
0009C10A                            		even
0009C10A                            SoundA2:	include	"sound/sfx/DrowningSound.asm"
0009C10A                            SndDF_Header:
0009C10A                            	smpsHeaderStartSong 3
0009C10C 01                         	smpsHeaderTempoSFX  $01
0009C10D 01                         	smpsHeaderChanSFX   $01
0009C10E                            
0009C114                            
0009C114                            ; FM5 Data
0009C114                            SndDF_FM5:
0009C114 EF00                       	smpsSetvoice        $00
0009C116                            
0009C116                            SndDF_Loop00:
0009C116 F800 00                    	smpsCall            SndDF_Call00
0009C119 E905                       	smpsAlterPitch $05
0009C11B E608                       	smpsFMAlterVol      $08
0009C11D F701 03FF F5               	smpsLoop            $01, $03, SndDF_Loop00
0009C122 E9EC                       	smpsAlterPitch $EC
0009C124 E6E0                       	smpsFMAlterVol      $E0
0009C126 F2                         	smpsStop
0009C127                            
0009C127                            SndDF_Call00:
0009C127 9902                       	dc.b	nC2, $02
0009C129 E901                       	smpsAlterPitch $01
0009C12B F700 0AFF F8               	smpsLoop            $00, $0A, SndDF_Call00
0009C130 E9F6                       	smpsAlterPitch $F6
0009C132 E3                         	smpsReturn
0009C133                            
0009C133                            SndDF_Voices:
0009C133                            ;	Voice $00
0009C133                            ;	$07
0009C133                            ;	$04, $04, $05, $04, 	$1F, $1F, $15, $15, 	$00, $00, $00, $00
0009C133                            ;	$00, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$7F, $7F, $80, $80
0009C133                            	smpsVcAlgorithm     $07
0009C133                            	smpsVcFeedback      $00
0009C133                            	smpsVcUnusedBits    $00
0009C133                            	smpsVcDetune        $00, $00, $00, $00
0009C133                            	smpsVcCoarseFreq    $04, $05, $04, $04
0009C133                            	smpsVcRateScale     $00, $00, $00, $00
0009C133                            	smpsVcAttackRate    $15, $15, $1F, $1F
0009C133                            	smpsVcAmpMod        $00, $00, $00, $00
0009C133                            	smpsVcDecayRate1    $00, $00, $00, $00
0009C133                            	smpsVcDecayRate2    $00, $00, $00, $00
0009C133                            	smpsVcDecayLevel    $01, $01, $01, $01
0009C133                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C14C                            		even
0009C14C                            SoundA3:	incbin	"sound/sfx/SndA3 - Death.bin"
0009C17E                            		even
0009C17E                            SoundA4:	incbin	"sound/sfx/SndA4 - Skid.bin"
0009C1C2 00                         		even
0009C1C2                            SoundA5:	include	"sound/sfx/LargeRingBox.asm"
0009C1C2                            SndD2_Header:
0009C1C2                            	smpsHeaderStartSong 3
0009C1C4 01                         	smpsHeaderTempoSFX  $01
0009C1C5 01                         	smpsHeaderChanSFX   $01
0009C1C6                            
0009C1CC                            
0009C1CC                            ; FM4 Data
0009C1CC                            SndD2_FM4:
0009C1CC EF00                       	smpsSetvoice        $00
0009C1D3 C645                       	dc.b	nA5, $45
0009C1D5 F2                         	smpsStop
0009C1D6                            
0009C1D6                            SndD2_Voices:
0009C1D6                            ;	Voice $00
0009C1D6                            ;	$04
0009C1D6                            ;	$27, $02, $07, $47, 	$1F, $1F, $1F, $1F, 	$07, $0A, $07, $0D
0009C1D6                            ;	$00, $0B, $00, $0B, 	$1F, $0F, $1F, $0F, 	$1F, $80, $23, $80
0009C1D6                            	smpsVcAlgorithm     $04
0009C1D6                            	smpsVcFeedback      $00
0009C1D6                            	smpsVcUnusedBits    $00
0009C1D6                            	smpsVcDetune        $04, $00, $00, $02
0009C1D6                            	smpsVcCoarseFreq    $07, $07, $02, $07
0009C1D6                            	smpsVcRateScale     $00, $00, $00, $00
0009C1D6                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C1D6                            	smpsVcAmpMod        $00, $00, $00, $00
0009C1D6                            	smpsVcDecayRate1    $0D, $07, $0A, $07
0009C1D6                            	smpsVcDecayRate2    $0B, $00, $0B, $00
0009C1D6                            	smpsVcDecayLevel    $00, $01, $00, $01
0009C1D6                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C1F0 00                         		even
0009C1F0                            SoundA6:	incbin	"sound/sfx/SndA6 - Hit Spikes.bin"
0009C220                            		even
0009C220                            SoundA7:	incbin	"sound/sfx/SndA7 - Push Block.bin"
0009C250                            		even
0009C250                            SoundA8:	incbin	"sound/sfx/SndA8 - SS Goal.bin"
0009C284                            		even
0009C284                            SoundA9:	incbin	"sound/sfx/SndA9 - SS Item.bin"
0009C296                            		even
0009C296                            SoundAA:	include	"sound/sfx/Splash.asm"
0009C296                            SndA2_Header:
0009C296                            	smpsHeaderStartSong 3
0009C298 01                         	smpsHeaderTempoSFX  $01
0009C299 02                         	smpsHeaderChanSFX   $02
0009C29A                            
0009C2A6                            
0009C2A6                            ; FM3 Data
0009C2A6                            SndA2_FM3:
0009C2A6 EF00                       	smpsSetvoice        $00
0009C2AD 8106                       	dc.b	nC0, $06
0009C2AF                            
0009C2AF                            SndA2_Loop00:
0009C2AF 810E                       	dc.b	nC0, $0E
0009C2B1 E60E                       	smpsAlterVol      $0E
0009C2B3 F700 04FF F8               	smpsLoop            $00, $04, SndA2_Loop00
0009C2B8 F2                         	smpsStop
0009C2B9                            
0009C2B9                            ; FM4 Data
0009C2B9                            SndA2_FM4:
0009C2B9 EF01                       	smpsSetvoice        $01
0009C2BB A606 14                    	dc.b	nCs3, $06, $14
0009C2BE F2                         	smpsStop
0009C2BF                            
0009C2BF                            SndA2_Voices:
0009C2BF                            ;	Voice $00
0009C2BF                            ;	$F9
0009C2BF                            ;	$21, $30, $10, $32, 	$1C, $1F, $1F, $10, 	$05, $18, $09, $02
0009C2BF                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0C, $06, $04, $80
0009C2BF                            	smpsVcAlgorithm     $01
0009C2BF                            	smpsVcFeedback      $07
0009C2BF                            	smpsVcUnusedBits    $03
0009C2BF                            	smpsVcDetune        $03, $01, $03, $02
0009C2BF                            	smpsVcCoarseFreq    $02, $00, $00, $01
0009C2BF                            	smpsVcRateScale     $00, $00, $00, $00
0009C2BF                            	smpsVcAttackRate    $10, $1F, $1F, $1C
0009C2BF                            	smpsVcAmpMod        $00, $00, $00, $00
0009C2BF                            	smpsVcDecayRate1    $02, $09, $18, $05
0009C2BF                            	smpsVcDecayRate2    $05, $10, $1F, $0B
0009C2BF                            	smpsVcDecayLevel    $02, $04, $02, $01
0009C2BF                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C2D8                            
0009C2D8                            ;	Voice $01
0009C2D8                            ;	$00
0009C2D8                            ;	$00, $03, $02, $00, 	$D9, $DF, $1F, $1F, 	$12, $11, $14, $0F
0009C2D8                            ;	$0A, $00, $0A, $0D, 	$FF, $FF, $FF, $FF, 	$22, $07, $27, $80
0009C2D8                            	smpsVcAlgorithm     $00
0009C2D8                            	smpsVcFeedback      $00
0009C2D8                            	smpsVcUnusedBits    $00
0009C2D8                            	smpsVcDetune        $00, $00, $00, $00
0009C2D8                            	smpsVcCoarseFreq    $00, $02, $03, $00
0009C2D8                            	smpsVcRateScale     $00, $00, $03, $03
0009C2D8                            	smpsVcAttackRate    $1F, $1F, $1F, $19
0009C2D8                            	smpsVcAmpMod        $00, $00, $00, $00
0009C2D8                            	smpsVcDecayRate1    $0F, $14, $11, $12
0009C2D8                            	smpsVcDecayRate2    $0D, $0A, $00, $0A
0009C2D8                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0009C2D8                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C2F2 00                         		even
0009C2F2                            SoundAB:	include	"sound/sfx/FireShield.asm"
0009C2F2                            Sound_3E_Header:
0009C2F2                            	smpsHeaderStartSong 3
0009C2F4 01                         	smpsHeaderTempoSFX  $01
0009C2F5 01                         	smpsHeaderChanSFX   $01
0009C2F6                            
0009C2FC                            
0009C2FC                            ; FM5 Data
0009C2FC                            Sound_3E_3F_40_41_FM5:
0009C2FC EF00                       	smpsSetvoice        $00
0009C2FE A305 E7A4 26               	dc.b	nBb2, $05, smpsNoAttack, nB2, $26
0009C303 F2                         	smpsStop
0009C304                            
0009C304                            Sound_3E_Voices:
0009C304                            ;	Voice $00
0009C304                            ;	$0C
0009C304                            ;	$01, $21, $31, $31, 	$1E, $0C, $0E, $1C, 	$0A, $00, $04, $00
0009C304                            ;	$08, $12, $08, $0C, 	$FF, $0F, $BF, $0F, 	$03, $80, $0D, $80
0009C304                            	smpsVcAlgorithm     $04
0009C304                            	smpsVcFeedback      $01
0009C304                            	smpsVcUnusedBits    $00
0009C304                            	smpsVcDetune        $03, $03, $02, $00
0009C304                            	smpsVcCoarseFreq    $01, $01, $01, $01
0009C304                            	smpsVcRateScale     $00, $00, $00, $00
0009C304                            	smpsVcAttackRate    $1C, $0E, $0C, $1E
0009C304                            	smpsVcAmpMod        $00, $00, $00, $00
0009C304                            	smpsVcDecayRate1    $00, $04, $00, $0A
0009C304                            	smpsVcDecayRate2    $0C, $08, $12, $08
0009C304                            	smpsVcDecayLevel    $00, $0B, $00, $0F
0009C304                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C31D                            
0009C31D                            
0009C31E 00                         		even
0009C31E                            SoundAC:	incbin	"sound/sfx/SndAC - Hit Boss.bin"
0009C352                            		even
0009C352                            SoundAD:	incbin	"sound/sfx/SndAD - Get Bubble.bin"
0009C388                            		even
0009C388                            SoundAE:	include	"sound/sfx/Fireball.asm"
0009C388                            Sound_70_Header:
0009C388                            	smpsHeaderStartSong 3
0009C38A 01                         	smpsHeaderTempoSFX  $01
0009C38B 02                         	smpsHeaderChanSFX   $02
0009C38C                            
0009C398                            
0009C398                            ; FM5 Data
0009C398                            Sound_70_FM5:
0009C398 EF00                       	smpsSetvoice        $00
0009C39A 8001                       	dc.b	nRst, $01
0009C3A1 8306 8502                  	dc.b	nD0, $06, nE0, $02
0009C3A5 F2                         	smpsStop
0009C3A6                            
0009C3A6                            ; PSG3 Data
0009C3A6                            Sound_70_PSG3:
0009C3A6 F500                       	smpsPSGvoice        sTone_0D
0009C3A8 800B                       	dc.b	nRst, $0B
0009C3AA F3E7                       	smpsPSGform         $E7
0009C3AC C501 E7                    	dc.b	(nMaxPSG1-$D)&$FF, $01, smpsNoAttack
0009C3AF                            
0009C3AF                            Sound_70_Loop00:
0009C3AF 02                         	dc.b	$02
0009C3B0 EC01                       	smpsPSGAlterVol     $01
0009C3B2 E7                         	dc.b	smpsNoAttack
0009C3B3 F700 10FF F8               	smpsLoop            $00, $10, Sound_70_Loop00
0009C3B8 F2                         	smpsStop
0009C3B9                            
0009C3B9                            Sound_70_Voices:
0009C3B9                            ;	Voice $00
0009C3B9                            ;	$FA
0009C3B9                            ;	$02, $03, $00, $05, 	$12, $11, $0F, $13, 	$05, $18, $09, $02
0009C3B9                            ;	$06, $0F, $06, $02, 	$1F, $2F, $4F, $2F, 	$2F, $1A, $0E, $80
0009C3B9                            	smpsVcAlgorithm     $02
0009C3B9                            	smpsVcFeedback      $07
0009C3B9                            	smpsVcUnusedBits    $03
0009C3B9                            	smpsVcDetune        $00, $00, $00, $00
0009C3B9                            	smpsVcCoarseFreq    $05, $00, $03, $02
0009C3B9                            	smpsVcRateScale     $00, $00, $00, $00
0009C3B9                            	smpsVcAttackRate    $13, $0F, $11, $12
0009C3B9                            	smpsVcAmpMod        $00, $00, $00, $00
0009C3B9                            	smpsVcDecayRate1    $02, $09, $18, $05
0009C3B9                            	smpsVcDecayRate2    $02, $06, $0F, $06
0009C3B9                            	smpsVcDecayLevel    $02, $04, $02, $01
0009C3B9                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C3D2                            
0009C3D2                            
0009C3D2                            		even
0009C3D2                            SoundAF:	incbin	"sound/sfx/SndAF - Shield.bin"
0009C400                            		even
0009C400                            SoundB0:	incbin	"sound/sfx/SndB0 - Saw.bin"
0009C432                            		even
0009C432                            SoundB1:	incbin	"sound/sfx/SndB1 - Electric.bin"
0009C45E                            		even
0009C45E                            SoundB2:	incbin	"sound/sfx/SndB2 - Drown Death.bin"
0009C4AE                            		even
0009C4AE                            SoundB3:	incbin	"sound/sfx/SndB3 - Flamethrower.bin"
0009C4F8                            		even
0009C4F8                            SoundB4:	incbin	"sound/sfx/SndB4 - Bumper.bin"
0009C554                            		even
0009C554                            SoundB5:	incbin	"sound/sfx/SndB5 - Ring.bin"
0009C582                            		even
0009C582                            SoundB6:	include	"sound/sfx/Spikes.asm"
0009C582                            SpikesSFX_Header:
0009C582                            	smpsHeaderStartSong 3
0009C584 01                         	smpsHeaderTempoSFX  $01
0009C585 02                         	smpsHeaderChanSFX   $02
0009C586                            
0009C592                            
0009C592                            ; FM6 Data
0009C592                            SndB7_FM4:
0009C592 EF01                       	smpsSetvoice        $01
0009C599 B105                       	dc.b	nC4, $05
0009C59B F1                         	smpsModOn
0009C59C E10A                       	smpsAlterNote       $0A
0009C59E E601                       	smpsAlterVol        $01
0009C5A0 F2                         	smpsStop
0009C5A1                            
0009C5A1                            ; FM5 Data
0009C5A1                            SndB7_FM5:
0009C5A1 8005                       	dc.b	nRst, $05			 
0009C5A3 EF00                       	smpsSetvoice        $00
0009C5A5 DB01 8001 DB11             	dc.b	nFs7, $01, nRst, $01, nFs7, $11
0009C5AB F2                         	smpsStop
0009C5AC                            
0009C5AC                            SndB7_Voices:
0009C5AC                            ;	Voice $00
0009C5AC                            ;	$34
0009C5AC                            ;	$09, $0F, $01, $D7, 	$1F, $1F, $1F, $1F, 	$0C, $11, $09, $0F
0009C5AC                            ;	$0A, $0E, $0D, $0E, 	$35, $1A, $55, $3A, 	$0C, $80, $0F, $80
0009C5AC                            	smpsVcAlgorithm     $04
0009C5AC                            	smpsVcFeedback      $06
0009C5AC                            	smpsVcUnusedBits    $00
0009C5AC                            	smpsVcDetune        $0D, $00, $00, $00
0009C5AC                            	smpsVcCoarseFreq    $07, $01, $0F, $09
0009C5AC                            	smpsVcRateScale     $00, $00, $00, $00
0009C5AC                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C5AC                            	smpsVcAmpMod        $00, $00, $00, $00
0009C5AC                            	smpsVcDecayRate1    $0F, $09, $11, $0C
0009C5AC                            	smpsVcDecayRate2    $0E, $0D, $0E, $0A
0009C5AC                            	smpsVcDecayLevel    $03, $05, $01, $03
0009C5AC                            	smpsVcReleaseRate   $0A, $05, $0A, $05
0009C5C5                            
0009C5C5                            ;	Voice $01
0009C5C5                            ;	$FA
0009C5C5                            ;	$21, $3A, $19, $30, 	$1F, $1F, $1F, $1F, 	$05, $18, $09, $02
0009C5C5                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0E, $07, $04, $80
0009C5C5                            	smpsVcAlgorithm     $02
0009C5C5                            	smpsVcFeedback      $07
0009C5C5                            	smpsVcUnusedBits    $03
0009C5C5                            	smpsVcDetune        $03, $01, $03, $02
0009C5C5                            	smpsVcCoarseFreq    $00, $09, $0A, $01
0009C5C5                            	smpsVcRateScale     $00, $00, $00, $00
0009C5C5                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C5C5                            	smpsVcAmpMod        $00, $00, $00, $00
0009C5C5                            	smpsVcDecayRate1    $02, $09, $18, $05
0009C5C5                            	smpsVcDecayRate2    $05, $10, $1F, $0B
0009C5C5                            	smpsVcDecayLevel    $02, $04, $02, $01
0009C5C5                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C5DE                            		even
0009C5DE                            SoundB7:	incbin	"sound/sfx/SndB7 - Rumbling.bin"
0009C61A                            		even
0009C61A                            SoundB8:	include	"sound/sfx/ScoreTallying.asm"
0009C61A                            SndBD_Header:
0009C61A                            	smpsHeaderStartSong 3
0009C61C 01                         	smpsHeaderTempoSFX  $01
0009C61D 01                         	smpsHeaderChanSFX   $01
0009C61E                            
0009C624                            
0009C624                            ; FM6 Data
0009C624                            SndBD_FM3:
0009C624 EF00                       	smpsSetvoice        $00
0009C626                            
0009C626                            SndBD_Loop00:
0009C626 C009                       	dc.b	nEb5, $09
0009C628 F700 08FF FA               	smpsLoop            $00, $08, SndBD_Loop00
0009C62D F2                         	smpsStop
0009C62E                            
0009C62E                            SndBD_Voices:
0009C62E                            ;	Voice $00
0009C62E                            ;	$02
0009C62E                            ;	$02, $51, $20, $01, 	$1E, $1E, $1E, $1E, 	$10, $0A, $14, $13
0009C62E                            ;	$01, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$24, $0E, $1F, $80
0009C62E                            	smpsVcAlgorithm     $02
0009C62E                            	smpsVcFeedback      $00
0009C62E                            	smpsVcUnusedBits    $00
0009C62E                            	smpsVcDetune        $00, $02, $05, $00
0009C62E                            	smpsVcCoarseFreq    $01, $00, $01, $02
0009C62E                            	smpsVcRateScale     $00, $00, $00, $00
0009C62E                            	smpsVcAttackRate    $1E, $1E, $1E, $1E
0009C62E                            	smpsVcAmpMod        $00, $00, $00, $00
0009C62E                            	smpsVcDecayRate1    $13, $14, $0A, $10
0009C62E                            	smpsVcDecayRate2    $00, $00, $00, $01
0009C62E                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0009C62E                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C648 00                         		even
0009C648                            SoundB9:	include	"sound/sfx/BreakFloor.asm"
0009C648                            Sound_59_Header:
0009C648                            	smpsHeaderStartSong 3
0009C64A 01                         	smpsHeaderTempoSFX  $01
0009C64B 04                         	smpsHeaderChanSFX   $04
0009C64C                            
0009C664                            
0009C664                            ; FM3 Data
0009C664                            Sound_59_FM3:
0009C664 E040                       	smpsPan             panRight, $00
0009C666 8002                       	dc.b	nRst, $02
0009C668 F600 00                    	smpsJump            Sound_59_FM4
0009C66B                            
0009C66B                            ; FM5 Data
0009C66B                            Sound_59_FM5:
0009C66B E080                       	smpsPan             panLeft, $00
0009C66D 8001                       	dc.b	nRst, $01
0009C66F                            
0009C66F                            ; FM4 Data
0009C66F                            Sound_59_FM4:
0009C66F EF00                       	smpsSetvoice        $00
0009C676 8110                       	dc.b	nC0, $10
0009C678 F2                         	smpsStop
0009C679                            
0009C679                            ; PSG3 Data
0009C679                            Sound_59_PSG3:
0009C67E F3E7                       	smpsPSGform         $E7
0009C680                            
0009C680                            Sound_59_Loop00:
0009C680 B018 E7                    	dc.b	nB3, $18, smpsNoAttack
0009C683 EC03                       	smpsPSGAlterVol     $03
0009C685 F700 05FF F7               	smpsLoop            $00, $05, Sound_59_Loop00
0009C68A F2                         	smpsStop
0009C68B                            
0009C68B                            Sound_59_Voices:
0009C68B                            ;	Voice $00
0009C68B                            ;	$F9
0009C68B                            ;	$21, $30, $10, $32, 	$1F, $1F, $1F, $1F, 	$05, $18, $09, $02
0009C68B                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0E, $07, $04, $80
0009C68B                            	smpsVcAlgorithm     $01
0009C68B                            	smpsVcFeedback      $07
0009C68B                            	smpsVcUnusedBits    $03
0009C68B                            	smpsVcDetune        $03, $01, $03, $02
0009C68B                            	smpsVcCoarseFreq    $02, $00, $00, $01
0009C68B                            	smpsVcRateScale     $00, $00, $00, $00
0009C68B                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C68B                            	smpsVcAmpMod        $00, $00, $00, $00
0009C68B                            	smpsVcDecayRate1    $02, $09, $18, $05
0009C68B                            	smpsVcDecayRate2    $05, $10, $1F, $0B
0009C68B                            	smpsVcDecayLevel    $02, $04, $02, $01
0009C68B                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C6A4                            
0009C6A4                            
0009C6A4                            		even
0009C6A4                            SoundBA:	incbin	"sound/sfx/SndBA - SS Glass.bin"
0009C6CC                            		even
0009C6CC                            SoundBB:	incbin	"sound/sfx/SndBB - Door.bin"
0009C6F8                            		even
0009C6F8                            SoundBC:	include	"sound/sfx/DashRelease.asm"
0009C6F8                            Sound_B6_Header:
0009C6F8                            	smpsHeaderStartSong 3
0009C6FA 01                         	smpsHeaderTempoSFX  $01
0009C6FB 02                         	smpsHeaderChanSFX   $02
0009C6FC                            
0009C708                            
0009C708                            ; FM5 Data
0009C708                            Sound_B6_FM5:
0009C708 EF00                       	smpsSetvoice        $00
0009C70F CD0F                       	dc.b	nE6, $0F
0009C711 F2                         	smpsStop
0009C712                            
0009C712                            ; PSG3 Data
0009C712                            Sound_B6_PSG3:
0009C712 F507                       	smpsPSGvoice        sTone_1D
0009C714 8006                       	dc.b	nRst, $06
0009C71B F3E7                       	smpsPSGform         $E7
0009C71D CD4F                       	dc.b	nE6, $4F
0009C71F F2                         	smpsStop
0009C720                            
0009C720                            Sound_B6_Voices:
0009C720                            ;	Voice $00
0009C720                            ;	$3D
0009C720                            ;	$09, $03, $00, $00, 	$1F, $1F, $1F, $1F, 	$10, $0C, $0C, $0C
0009C720                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$09, $84, $92, $8E
0009C720                            	smpsVcAlgorithm     $05
0009C720                            	smpsVcFeedback      $07
0009C720                            	smpsVcUnusedBits    $00
0009C720                            	smpsVcDetune        $00, $00, $00, $00
0009C720                            	smpsVcCoarseFreq    $00, $00, $03, $09
0009C720                            	smpsVcRateScale     $00, $00, $00, $00
0009C720                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C720                            	smpsVcAmpMod        $00, $00, $00, $00
0009C720                            	smpsVcDecayRate1    $0C, $0C, $0C, $10
0009C720                            	smpsVcDecayRate2    $05, $10, $1F, $0B
0009C720                            	smpsVcDecayLevel    $02, $04, $02, $01
0009C720                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C739                            
0009C739                            
0009C73A 00                         		even
0009C73A                            SoundBD:	incbin	"sound/sfx/SndBD - ChainStomp.bin"
0009C78E                            		even
0009C78E                            SoundBE:	incbin	"sound/sfx/SndBE - Roll.bin"
0009C7C8                            		even
0009C7C8                            SoundBF:	incbin	"sound/sfx/SndBF - Get Continue.bin"
0009C83A                            		even
0009C83A                            SoundC0:	incbin	"sound/sfx/SndC0 - Basaran Flap.bin"
0009C868                            		even
0009C868                            SoundC1:	incbin	"sound/sfx/SndC1 - Break Item.bin"
0009C8A2                            		even
0009C8A2                            SoundC2:	include	"sound/sfx/DrowningWarning.asm"
0009C8A2                            SndC1_Header:
0009C8A2                            	smpsHeaderStartSong 3
0009C8A4 01                         	smpsHeaderTempoSFX  $01
0009C8A5 01                         	smpsHeaderChanSFX   $01
0009C8A6                            
0009C8AC                            
0009C8AC                            ; FM4 Data
0009C8AC                            SndC1_FM4:
0009C8AC EF00                       	smpsSetvoice        $00
0009C8AE D506 40                    	dc.b	nC7, $06, $40
0009C8B1 F2                         	smpsStop
0009C8B2                            
0009C8B2                            SndC1_Voices:
0009C8B2                            ;	Voice $00
0009C8B2                            ;	$38
0009C8B2                            ;	$01, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$09, $09, $09, $0B
0009C8B2                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$5C, $22, $27, $80
0009C8B2                            	smpsVcAlgorithm     $00
0009C8B2                            	smpsVcFeedback      $07
0009C8B2                            	smpsVcUnusedBits    $00
0009C8B2                            	smpsVcDetune        $00, $00, $00, $00
0009C8B2                            	smpsVcCoarseFreq    $00, $00, $00, $01
0009C8B2                            	smpsVcRateScale     $00, $00, $00, $00
0009C8B2                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C8B2                            	smpsVcAmpMod        $00, $00, $00, $00
0009C8B2                            	smpsVcDecayRate1    $0B, $09, $09, $09
0009C8B2                            	smpsVcDecayRate2    $00, $00, $00, $00
0009C8B2                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0009C8B2                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C8CC 00                         		even
0009C8CC                            SoundC3:	incbin	"sound/sfx/SndC3 - Giant Ring.bin"
0009C946                            		even
0009C946                            SoundC4:	incbin	"sound/sfx/SndC4 - Bomb.bin"
0009C96E                            		even
0009C96E                            SoundC5:	include	"sound/sfx/Cash Register.asm"
0009C96E                            Sound_B0_Header:
0009C96E                            	smpsHeaderStartSong 3
0009C970 01                         	smpsHeaderTempoSFX  $01
0009C971 03                         	smpsHeaderChanSFX   $03
0009C972                            
0009C984                            
0009C984                            ; FM5 Data
0009C984                            Sound_B0_FM5:
0009C984 EF00                       	smpsSetvoice        $00
0009C986 8A08 8002 8A08             	dc.b	nA0, $08, nRst, $02, nA0, $08
0009C98C F2                         	smpsStop
0009C98D                            
0009C98D                            ; FM4 Data
0009C98D                            Sound_B0_FM4:
0009C98D EF01                       	smpsSetvoice        $01
0009C98F 8012 C655                  	dc.b	nRst, $12, nA5, $55
0009C993 F2                         	smpsStop
0009C994                            
0009C994                            ; FM3 Data
0009C994                            Sound_B0_FM3:
0009C994 EF02                       	smpsSetvoice        $02
0009C996 8002 C205 0405 04          	dc.b	nRst, $02, nF5, $05, $04, $05, $04
0009C99D F2                         	smpsStop
0009C99E                            
0009C99E                            Sound_B0_Voices:
0009C99E                            ;	Voice $00
0009C99E                            ;	$3B
0009C99E                            ;	$03, $02, $03, $06, 	$18, $1A, $1A, $96, 	$17, $0E, $0A, $10
0009C99E                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $28, $39, $80
0009C99E                            	smpsVcAlgorithm     $03
0009C99E                            	smpsVcFeedback      $07
0009C99E                            	smpsVcUnusedBits    $00
0009C99E                            	smpsVcDetune        $00, $00, $00, $00
0009C99E                            	smpsVcCoarseFreq    $06, $03, $02, $03
0009C99E                            	smpsVcRateScale     $02, $00, $00, $00
0009C99E                            	smpsVcAttackRate    $16, $1A, $1A, $18
0009C99E                            	smpsVcAmpMod        $00, $00, $00, $00
0009C99E                            	smpsVcDecayRate1    $10, $0A, $0E, $17
0009C99E                            	smpsVcDecayRate2    $00, $00, $00, $00
0009C99E                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0009C99E                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C9B7                            
0009C9B7                            ;	Voice $01
0009C9B7                            ;	$04
0009C9B7                            ;	$37, $72, $77, $49, 	$1F, $1F, $1F, $1F, 	$07, $0A, $07, $0D
0009C9B7                            ;	$00, $0B, $00, $0B, 	$1F, $0F, $1F, $0F, 	$23, $80, $23, $80
0009C9B7                            	smpsVcAlgorithm     $04
0009C9B7                            	smpsVcFeedback      $00
0009C9B7                            	smpsVcUnusedBits    $00
0009C9B7                            	smpsVcDetune        $04, $07, $07, $03
0009C9B7                            	smpsVcCoarseFreq    $09, $07, $02, $07
0009C9B7                            	smpsVcRateScale     $00, $00, $00, $00
0009C9B7                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C9B7                            	smpsVcAmpMod        $00, $00, $00, $00
0009C9B7                            	smpsVcDecayRate1    $0D, $07, $0A, $07
0009C9B7                            	smpsVcDecayRate2    $0B, $00, $0B, $00
0009C9B7                            	smpsVcDecayLevel    $00, $01, $00, $01
0009C9B7                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C9D0                            
0009C9D0                            ;	Voice $02
0009C9D0                            ;	$3C
0009C9D0                            ;	$0F, $00, $00, $00, 	$1F, $1A, $18, $1C, 	$17, $11, $1A, $0E
0009C9D0                            ;	$00, $0F, $14, $10, 	$1F, $9F, $9F, $2F, 	$07, $80, $26, $8C
0009C9D0                            	smpsVcAlgorithm     $04
0009C9D0                            	smpsVcFeedback      $07
0009C9D0                            	smpsVcUnusedBits    $00
0009C9D0                            	smpsVcDetune        $00, $00, $00, $00
0009C9D0                            	smpsVcCoarseFreq    $00, $00, $00, $0F
0009C9D0                            	smpsVcRateScale     $00, $00, $00, $00
0009C9D0                            	smpsVcAttackRate    $1C, $18, $1A, $1F
0009C9D0                            	smpsVcAmpMod        $00, $00, $00, $00
0009C9D0                            	smpsVcDecayRate1    $0E, $1A, $11, $17
0009C9D0                            	smpsVcDecayRate2    $10, $14, $0F, $00
0009C9D0                            	smpsVcDecayLevel    $02, $09, $09, $01
0009C9D0                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C9E9                            
0009C9E9                            
0009C9EA 00                         		even
0009C9EA                            SoundC6:	incbin	"sound/sfx/SndC6 - Ring Loss.bin"
0009CA2C                            		even
0009CA2C                            SoundC7:	incbin	"sound/sfx/SndC7 - Chain Rising.bin"
0009CA5A                            		even
0009CA5A                            SoundC8:	incbin	"sound/sfx/SndC8 - Burning.bin"
0009CA6C                            		even
0009CA6C                            SoundC9:	incbin	"sound/sfx/SndC9 - Hidden Bonus.bin"
0009CA9A                            		even
0009CA9A                            SoundCA:	incbin	"sound/sfx/SndCA - Enter SS.bin"
0009CAC8                            		even
0009CAC8                            SoundCB:	incbin	"sound/sfx/SndCB - Wall Smash.bin"
0009CB14                            		even
0009CB14                            SoundCC:	include	"sound/sfx/Spring.asm"
0009CB14                            Spring_Header:
0009CB14                            	smpsHeaderStartSong 1
0009CB16 01                         	smpsHeaderTempoSFX  $01
0009CB17 01                         	smpsHeaderChanSFX   $01
0009CB18                            
0009CB1E                            
0009CB1E                            ; FM6 Data
0009CB1E                            Spring_FM6:
0009CB1E EF00                       	smpsSetvoice        $00
0009CB20 8001                       	dc.b	nRst, $01
0009CB27 B006                       	dc.b	nB3, $06
0009CB29 F4                         	smpsModOff
0009CB2A EF01                       	smpsSetvoice        $01
0009CB2C                            
0009CB2C                            Spring_Loop00:
0009CB2C BD02                       	dc.b	nC5, $02
0009CB2E E601                       	smpsAlterVol      $01
0009CB30 E7                         	dc.b	smpsNoAttack
0009CB31 F700 19FF F7               	smpsLoop            $00, $19, Spring_Loop00
0009CB36 F2                         	smpsStop
0009CB37                            
0009CB37                            Spring_Voices:
0009CB37                            ;	Voice $00
0009CB37                            ;	$20
0009CB37                            ;	$36, $35, $30, $31, 	$DF, $DF, $9F, $9F, 	$07, $06, $09, $06
0009CB37                            ;	$07, $06, $06, $08, 	$2F, $1F, $1F, $FF, 	$16, $30, $13, $80
0009CB37                            	smpsVcAlgorithm     $00
0009CB37                            	smpsVcFeedback      $04
0009CB37                            	smpsVcUnusedBits    $00
0009CB37                            	smpsVcDetune        $03, $03, $03, $03
0009CB37                            	smpsVcCoarseFreq    $01, $00, $05, $06
0009CB37                            	smpsVcRateScale     $02, $02, $03, $03
0009CB37                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009CB37                            	smpsVcAmpMod        $00, $00, $00, $00
0009CB37                            	smpsVcDecayRate1    $06, $09, $06, $07
0009CB37                            	smpsVcDecayRate2    $08, $06, $06, $07
0009CB37                            	smpsVcDecayLevel    $0F, $01, $01, $02
0009CB37                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CB50                            
0009CB50                            ;	Voice $01
0009CB50                            ;	$20
0009CB50                            ;	$31, $33, $30, $31, 	$9F, $9F, $9F, $9F, 	$07, $06, $09, $06
0009CB50                            ;	$07, $06, $06, $08, 	$2F, $1F, $1F, $FF, 	$19, $23, $11, $80
0009CB50                            	smpsVcAlgorithm     $00
0009CB50                            	smpsVcFeedback      $04
0009CB50                            	smpsVcUnusedBits    $00
0009CB50                            	smpsVcDetune        $03, $03, $03, $03
0009CB50                            	smpsVcCoarseFreq    $01, $00, $03, $01
0009CB50                            	smpsVcRateScale     $02, $02, $02, $02
0009CB50                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009CB50                            	smpsVcAmpMod        $00, $00, $00, $00
0009CB50                            	smpsVcDecayRate1    $06, $09, $06, $07
0009CB50                            	smpsVcDecayRate2    $08, $06, $06, $07
0009CB50                            	smpsVcDecayLevel    $0F, $01, $01, $02
0009CB50                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CB6A 00                         		even
0009CB6A                            SoundCD:	include	"sound/sfx/Beep.asm"
0009CB6A                            Snd99_Header:
0009CB6A                            	smpsHeaderStartSong 3
0009CB6C 01                         	smpsHeaderTempoSFX  $01
0009CB6D 01                         	smpsHeaderChanSFX   $01
0009CB6E                            
0009CB74                            
0009CB74                            ; FM4 Data
0009CB74                            Snd99_FM4:
0009CB74 EF00                       	smpsSetvoice        $00
0009CB76 B502                       	dc.b	nE4, $02
0009CB78 F2                         	smpsStop
0009CB79                            
0009CB79                            Snd99_Voices:
0009CB79                            ;	Voice $00
0009CB79                            ;	$07
0009CB79                            ;	$0A, $0A, $0A, $0A, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
0009CB79                            ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$88, $88, $88, $88
0009CB79                            	smpsVcAlgorithm     $07
0009CB79                            	smpsVcFeedback      $00
0009CB79                            	smpsVcUnusedBits    $00
0009CB79                            	smpsVcDetune        $00, $00, $00, $00
0009CB79                            	smpsVcCoarseFreq    $0A, $0A, $0A, $0A
0009CB79                            	smpsVcRateScale     $00, $00, $00, $00
0009CB79                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009CB79                            	smpsVcAmpMod        $00, $00, $00, $00
0009CB79                            	smpsVcDecayRate1    $00, $00, $00, $00
0009CB79                            	smpsVcDecayRate2    $00, $00, $00, $00
0009CB79                            	smpsVcDecayLevel    $00, $00, $00, $00
0009CB79                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CB92                            		even
0009CB92                            SoundCE:	incbin	"sound/sfx/SndCE - Ring Left Speaker.bin"
0009CBC0                            		even
0009CBC0                            SoundCF:	include	"sound/sfx/Signpost.asm"
0009CBC0                            SignpostCD_Header:
0009CBC0                            	smpsHeaderStartSong 3
0009CBC2 01                         	smpsHeaderTempoSFX  $01
0009CBC3 02                         	smpsHeaderChanSFX   $02
0009CBC4                            
0009CBD0                            
0009CBD0                            ; FM5 Data
0009CBD0                            Snd9D_FM5:
0009CBD0 8004                       	dc.b	nRst, $04
0009CBD2                            
0009CBD2                            ; FM4 Data
0009CBD2                            Snd9D_FM4:
0009CBD2 EF00                       	smpsSetvoice        $00
0009CBD4                            
0009CBD4                            Snd9D_Loop00:
0009CBD4 B405                       	dc.b	nEb4, $05
0009CBD6 E604                       	smpsFMAlterVol      $04
0009CBD8 F700 08FF F8               	smpsLoop            $00, $08, Snd9D_Loop00
0009CBDD F2                         	smpsStop
0009CBDE                            
0009CBDE                            Snd9D_Voices:
0009CBDE                            ;	Voice $00
0009CBDE                            ;	$F4
0009CBDE                            ;	$06, $04, $0F, $0E, 	$1F, $1F, $1F, $1F, 	$00, $00, $0B, $0B
0009CBDE                            ;	$00, $00, $05, $08, 	$0F, $0F, $FF, $FF, 	$0C, $85, $00, $80
0009CBDE                            	smpsVcAlgorithm     $04
0009CBDE                            	smpsVcFeedback      $06
0009CBDE                            	smpsVcUnusedBits    $03
0009CBDE                            	smpsVcDetune        $00, $00, $00, $00
0009CBDE                            	smpsVcCoarseFreq    $0E, $0F, $04, $06
0009CBDE                            	smpsVcRateScale     $00, $00, $00, $00
0009CBDE                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009CBDE                            	smpsVcAmpMod        $00, $00, $00, $00
0009CBDE                            	smpsVcDecayRate1    $0B, $0B, $00, $00
0009CBDE                            	smpsVcDecayRate2    $08, $05, $00, $00
0009CBDE                            	smpsVcDecayLevel    $0F, $0F, $00, $00
0009CBDE                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CBF8 00                         		even
0009CBF8                            SoundD0:	incbin	"sound/sfx/SndD0 - Waterfall.bin"
0009CC32                            		even
0009CC32                            SoundD1:	include	"sound/sfx/Lightning Shield.asm"
0009CC32                            Sound_41_Header:
0009CC32                            	smpsHeaderStartSong 3
0009CC34 01                         	smpsHeaderTempoSFX  $01
0009CC35 01                         	smpsHeaderChanSFX   $01
0009CC36                            
0009CC3C                            	
0009CC3C                            Sound41_FM5:
0009CC3C EF00                       	smpsSetvoice        $00
0009CC3E A305 E7A4 26               	dc.b	nBb2, $05, smpsNoAttack, nB2, $26
0009CC43 F2                         	smpsStop
0009CC44                            
0009CC44                            Sound_41_Voices:
0009CC44                            ;	Voice $00
0009CC44                            ;	$36
0009CC44                            ;	$07, $10, $0E, $0C, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
0009CC44                            ;	$00, $0D, $0D, $0E, 	$0F, $0F, $0F, $0F, 	$17, $80, $80, $80
0009CC44                            	smpsVcAlgorithm     $06
0009CC44                            	smpsVcFeedback      $06
0009CC44                            	smpsVcUnusedBits    $00
0009CC44                            	smpsVcDetune        $00, $00, $01, $00
0009CC44                            	smpsVcCoarseFreq    $0C, $0E, $00, $07
0009CC44                            	smpsVcRateScale     $00, $00, $00, $00
0009CC44                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009CC44                            	smpsVcAmpMod        $00, $00, $00, $00
0009CC44                            	smpsVcDecayRate1    $00, $00, $00, $00
0009CC44                            	smpsVcDecayRate2    $0E, $0D, $0D, $00
0009CC44                            	smpsVcDecayLevel    $00, $00, $00, $00
0009CC44                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CC5D                            
0009CC5D                            
0009CC5E 00                         		even
0009CC5E                            SoundD2:	include	"sound/sfx/CD_Charge.asm"
0009CC5E                            Snd9B_Header:
0009CC5E                            	smpsHeaderStartSong 3
0009CC60 01                         	smpsHeaderTempoSFX  $01
0009CC61 01                         	smpsHeaderChanSFX   $01
0009CC62                            
0009CC68                            
0009CC68                            ; FM5 Data
0009CC68                            Snd9B_FM5:
0009CC68 EF00                       	smpsSetvoice        $00
0009CC6A 8001                       	dc.b	nRst, $01
0009CC71 CA25                       	dc.b	nCs6, $25
0009CC73 F4                         	smpsModOff
0009CC74                            
0009CC74                            Snd9B_Loop00:
0009CC74 E7                         	dc.b	smpsNoAttack
0009CC75 E601                       	smpsFMAlterVol      $01
0009CC77 D102                       	dc.b	nAb6, $02
0009CC79 F700 2AFF F7               	smpsLoop            $00, $2A, Snd9B_Loop00
0009CC7E F2                         	smpsStop
0009CC7F                            
0009CC7F                            Snd9B_Voices:
0009CC7F                            ;	Voice $00
0009CC7F                            ;	$3C
0009CC7F                            ;	$00, $44, $02, $02, 	$1F, $1F, $1F, $15, 	$00, $1F, $00, $00
0009CC7F                            ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$0D, $80, $28, $80
0009CC7F                            	smpsVcAlgorithm     $04
0009CC7F                            	smpsVcFeedback      $07
0009CC7F                            	smpsVcUnusedBits    $00
0009CC7F                            	smpsVcDetune        $00, $00, $04, $00
0009CC7F                            	smpsVcCoarseFreq    $02, $02, $04, $00
0009CC7F                            	smpsVcRateScale     $00, $00, $00, $00
0009CC7F                            	smpsVcAttackRate    $15, $1F, $1F, $1F
0009CC7F                            	smpsVcAmpMod        $00, $00, $00, $00
0009CC7F                            	smpsVcDecayRate1    $00, $00, $1F, $00
0009CC7F                            	smpsVcDecayRate2    $00, $00, $00, $00
0009CC7F                            	smpsVcDecayLevel    $00, $00, $00, $00
0009CC7F                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CC98                            
0009CC98                            
0009CC98                            		even		
0009CC98                            SoundD3:	incbin	"sound/sfx/Peelout_Release.bin"
0009CD30                            		even
0009CD30                            SoundD4:	incbin	"sound/sfx/Peelout_Stop.bin"
0009CD3C                            		even				
0009CD3C                            SoundD5:	incbin	"sound/sfx/Spindash.bin"
0009CD78                            		even			
0009CD78                            		; Don't let Sega sample cross $8000-byte boundary
0009CD78                            		; (DAC driver doesn't switch banks automatically)
000A0000                            SegaPCM:	incbin	"sound/dac/sega.pcm"
000A6978                            SegaPCM_End
000A6978                            		even
000A6978                            
000A6978                            
000A6978                            
000A6978                            
000A6978                            			include "_inc\Sonic 2 Options.asm"
000A6978                            ; ---------------------------------------------------------------------------
000A6978                            ; Common menu screen subroutine for transferring text to RAM
000A6978                            
000A6978                            ; ARGUMENTS:
000A6978                            ; d0 = starting art tile
000A6978                            ; a1 = data source
000A6978                            ; a2 = destination
000A6978                            ;
000A6978                            ; ---------------------------------------------------------------------------
000A6978                            MenuScreen:
000A6978 103C 0000                  		move.b	#bgm_Fade,d0
000A697C 4EB8 1250                  		jsr	PlaySound_Special ; fade out music
000A6980 4EB8 2182                  		jsr	PaletteFadeOut
000A6984 46FC 2700                  		move	#$2700,sr
000A6988 3038 F60C                  		move.w	($FFFFF60C).w,d0
000A698C 0200 00BF                  		andi.b	#$BF,d0
000A6990 33C0 00C0 0004             		move.w	d0,($00C00004).l
000A6996 4EB8 1180                  		jsr	ClearScreen
000A699A 4DF9 00C0 0004             		lea		($00C00004).l,a6
000A69A0 3CBC 8004                  		move.w	#$8004,(a6)
000A69A4 3CBC 8230                  		move.w	#$8230,(a6)
000A69A8 3CBC 8407                  		move.w	#$8407,(a6)
000A69AC 3CBC 8230                  		move.w	#$8230,(a6)
000A69B0 3CBC 8700                  		move.w	#$8700,(a6)
000A69B4 3CBC 8C81                  		move.w	#$8C81,(a6)
000A69B8 3CBC 9001                  		move.w	#$9001,(a6)
000A69BC                            
000A69BC                            
000A69BC 43F8 D000                  		lea	(v_objspace).w,a1
000A69C0 7000                       		moveq	#0,d0
000A69C2 323C 07FF                  		move.w	#$7FF,d1
000A69C6                            
000A69C6                            MenuScreen_ClrObjRam:
000A69C6 22C0                       		move.l	d0,(a1)+
000A69C8 51C9 FFFC                  		dbf		d1,MenuScreen_ClrObjRam
000A69CC                            
000A69CC                            ; ===========================================================================
000A69CC                            
000A69CC 31FC C800 C8FC             		ResetDMAQueue
000A69D2                            
000A69DC 41F9 0000 0000             		lea		(Nem_MenuFont).l,a0
000A69E2 4EB8 12FE                  		jsr	NemDec
000A69F0 41F9 0000 0000             		lea		(Nem_MenuBox).l,a0
000A69F6 4EB8 12FE                  		jsr	NemDec
000A69FA 43F9 00FF 0000             		lea	($FF0000).l,a1
000A6A00 41F9 0000 0000             		lea	(Eni_MenuBg).l,a0 ; load SONIC/MILES mappings
000A6A06 303C 6000                  		move.w	#$6000,d0
000A6A0A 4EB8 1888                  		jsr	EniDec
000A6A0E                            
000A6A0E 43F9 00FF 0000 203C 6000+  		copyTilemap	$FF0000,$E000,$27,$1B
000A6A22                            
000A6A22 6100 0000                  		bsr.w	MenuScreen_Options	; if yes, branch
000A6A26                            
000A6A26                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000A6A26                            
000A6A26                            ; sub_8FBE:
000A6A26                            MenuScreenTextToRAM:
000A6A26 7200                       		moveq	#0,d1
000A6A28 1219                       		move.b	(a1)+,d1
000A6A2A                            
000A6A2A                            MenuScreenTextToRAM_Cont:
000A6A2A 1019                       		move.b	(a1)+,d0
000A6A2C 34C0                       		move.w	d0,(a2)+
000A6A2E 51C9 FFFA                  		dbf	d1,MenuScreenTextToRAM_Cont
000A6A32 4E75                       		rts
000A6A34                            ; End of function MenuScreenTextToRAM
000A6A34                            
000A6A34                            ; ===========================================================================
000A6A34                            ; loc_8FCC:
000A6A34                            MenuScreen_Options:
000A6A34 43F9 00FF 0000             		lea	(v_256x256).l,a1
000A6A3A 41F9 0000 0000             		lea	(Eni_MenuBox).l,a0
000A6A40 303C 0070                  		move.w	#$70,d0
000A6A44 4EB8 1888                  		jsr	EniDec
000A6A48 43F9 00FF 0160             		lea	(v_256x256+$160).l,a1
000A6A4E 41F9 0000 0000             		lea	(Eni_MenuBox).l,a0
000A6A54 303C 2070                  		move.w	#$2070,d0
000A6A58 4EB8 1888                  		jsr	EniDec
000A6A5C 4238 FF8C                  		clr.b	(Options_menu_box).w
000A6A60 6100 0000                  		bsr.w	OptionScreen_DrawSelected
000A6A64 5238 FF8C                  		addq.b	#1,(Options_menu_box).w
000A6A68 6100 0000                  		bsr.w	OptionScreen_DrawUnselected
000A6A6C 5238 FF8C                  		addq.b	#1,(Options_menu_box).w
000A6A70 6100 0000                  		bsr.w	OptionScreen_DrawUnselected
000A6A74 4238 FF8C                  		clr.b	(Options_menu_box).w
000A6A78 4238 F711                  		clr.b	($FFFFF711).w		
000A6A7C 4278 F7F0                  		clr.w	($FFFFF7F0).w					 
000A6A80                            ;-------------------------------------------------------------------------------
000A6A80 4278 F7B8                  		clr.w	($FFFFF7B8).w
000A6A84 45F9 0000 0000             		lea		(Anim_SonicMilesBG).l,a2
000A6A8A 6100 0000                  		bsr.w	Dynamic_Menu
000A6A8E                            ;-------------------------------------------------------------------------------
000A6A8E 7014                       		moveq	#palid_Options,d0
000A6A90 4EB8 242C                  		jsr		PalLoad1
000A6A94 103C 0098                  		move.b	#$98,d0
000A6A98 4EB8 1250                  		jsr	PlaySound_Special ; play options music
000A6A9C 42B8 F700                  		clr.l	(v_screenposx).w
000A6AA0 42B8 F704                  		clr.l	(v_screenposy).w
000A6AA4 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
000A6AAA 4EB8 3A00                  		jsr	WaitForVBla
000A6AAE 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
000A6AB2 0000 0040                  		ori.b	#$40,d0
000A6AB6 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
000A6ABC 4EB8 20DC                  		jsr	PaletteFadeIn
000A6AC0                            ; loc_9060:
000A6AC0                            OptionScreen_Main:
000A6AC0 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
000A6AC6 4EB8 3A00                  		jsr	WaitForVBla		
000A6ACA 4EB8 10A2                  		jsr	ReadJoypads			
000A6ACE 46FC 2700                  		move	#$2700,sr
000A6AD2 6100 0000                  		bsr.w	OptionScreen_DrawUnselected
000A6AD6 6100 0000                  		bsr.w	OptionScreen_Controls			
000A6ADA 6100 0000                  		bsr.w	OptionScreen_DrawSelected
000A6ADE 46FC 2300                  		move	#$2300,sr
000A6AE2 45F9 0000 0000             		lea		(Anim_SonicMilesBG).l,a2		
000A6AE8 6100 0000                  		bsr.w	Dynamic_Menu		
000A6AEC 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; check if Start is pressed
000A6AF2                            
000A6AF2 6600                       		bne.s	OptionScreen_Select		; if yes, branch
000A6AF4 60CA                       		bra.s	OptionScreen_Main
000A6AF6                            ; ===========================================================================
000A6AF6                            ; loc_909A:
000A6AF6                            OptionScreen_Select:
000A6AF6 1038 FF8C                  		move.b	(Options_menu_box).w,d0
000A6AFA 6600                       		bne.s	OptionScreen_Select_Not1P
000A6AFC 7000                       		moveq	#0,d0
000A6AFE 31FC 0000 FE10             		move.w	#(id_GHZ<<8),(v_zone).w	; green_hill_zone_act_1
000A6B04 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
000A6B08 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
000A6B0C 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
000A6B10 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
000A6B16 21FC 0000 1388 FFC0        		move.l	#$1388,(v_scorelife).w ; extra life is awarded at 50000 points
000A6B1E 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; => Level (Zone play mode)
000A6B24 4E75                       		rts
000A6B26                            ; ===========================================================================
000A6B26                            ; loc_90B6:
000A6B26                            OptionScreen_Select_Not1P:
000A6B26 5300                       		subq.b	#1,d0
000A6B28 6600                       		bne.s	OptionScreen_Select_Other
000A6B2A 6094                       		bra.s	OptionScreen_Main
000A6B2C                            ; ===========================================================================
000A6B2C                            ; loc_90D8:
000A6B2C                            OptionScreen_Select_Other:
000A6B2C 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; => SegaScreen
000A6B32 4E75                       		rts
000A6B34                            
000A6B34                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000A6B34                            
000A6B34                            ;sub_90E0:
000A6B34                            OptionScreen_Controls:
000A6B34 7400                       		moveq	#0,d2
000A6B36 1438 FF8C                  		move.b	(Options_menu_box).w,d2			
000A6B3A 1038 F605                  		move.b	(v_jpadpress1).w,d0		; Ctrl_1_Press
000A6B3E 0800 0000                  		btst	#0,d0			; is up pressed?
000A6B42 6700                       		beq.s	Option_Controls_Down	; if not, branch
000A6B44 5302                       		subq.b	#1,d2					; move up 1 selection
000A6B46 6400                       		bcc.s	Option_Controls_Down
000A6B48 143C 0002                  		move.b	#2,d2
000A6B4C                            
000A6B4C                            Option_Controls_Down:
000A6B4C 0800 0001                  		btst	#1,d0			; is down pressed?
000A6B50 6700                       		beq.s	Option_Controls_Refresh	; if not, branch
000A6B52 5202                       		addq.b	#1,d2					; move down 1 selection
000A6B54 0C02 0003                  		cmpi.b	#3,d2
000A6B58 6500                       		blo.s	Option_Controls_Refresh
000A6B5A 7400                       		moveq	#0,d2
000A6B5C                            
000A6B5C                            Option_Controls_Refresh:
000A6B5C 11C2 FF8C                  		move.b	d2,(Options_menu_box).w
000A6B60 E54A                       		lsl.w	#2,d2
000A6B62 163B 2000                  		move.b	OptionScreen_Choices(pc,d2.w),d3 ; number of choices for the option
000A6B66 227B 2000                  		movea.l	OptionScreen_Choices(pc,d2.w),a1 ; location where the choice is stored (in RAM)
000A6B6A 3411                       		move.w	(a1),d2
000A6B6C 0800 0002                  		btst	#2,d0				; is left pressed?
000A6B70 6700                       		beq.s	Option_Controls_Right		; if not, branch
000A6B72 5302                       		subq.b	#1,d2						; subtract 1 from sound test
000A6B74 6400                       		bcc.s	Option_Controls_Right
000A6B76 1403                       		move.b	d3,d2
000A6B78                            
000A6B78                            Option_Controls_Right:
000A6B78 0800 0003                  		btst	#3,d0			; is right pressed?
000A6B7C 6700                       		beq.s	Option_Controls_Button_A	; if not, branch
000A6B7E 5202                       		addq.b	#1,d2						; add 1 to sound test
000A6B80 B403                       		cmp.b	d3,d2
000A6B82 6300                       		bls.s	Option_Controls_Button_A
000A6B84 7400                       		moveq	#0,d2
000A6B86                            
000A6B86                            Option_Controls_Button_A:
000A6B86 0800 0006                  		btst	#6,d0				; is button A pressed?
000A6B8A 6700                       		beq.s	Option_Controls_Refresh2	; if not, branch
000A6B8C 0602 0010                  		addi.b	#$10,d2						; add $10 to sound test
000A6B90 B403                       		cmp.b	d3,d2
000A6B92 6300                       		bls.s	Option_Controls_Refresh2
000A6B94 7400                       		moveq	#0,d2
000A6B96                            
000A6B96                            Option_Controls_Refresh2:
000A6B96 3282                       		move.w	d2,(a1)
000A6B98                            
000A6B98                            Option_Controls_NoMove:
000A6B98 4E75                       		rts
000A6B9A                            ; End of function OptionScreen_Controls
000A6B9A                            
000A6B9A                            ; ===========================================================================
000A6B9A                            ; word_917A:
000A6B9A                            OptionScreen_Choices:
000A6B9A 09FF FFBE                  		dc.l ($A-1)<<24|($FFFFBE&$FFFFFF)
000A6B9E 01FF FF8A                  		dc.l (2-1)<<24|($FFFF8A&$FFFFFF)
000A6BA2 01FF FF84                  		dc.l (2-1)<<24|($FFFF84&$FFFFFF)
000A6BA6                            		even
000A6BA6                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000A6BA6                            
000A6BA6                            
000A6BA6                            OptionScreen_DrawSelected:
000A6BA6 6100 0000                  		bsr.w	loc_9268
000A6BAA 7200                       		moveq	#0,d1
000A6BAC 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000A6BB0 E749                       		lsl.w	#3,d1
000A6BB2 47F9 0000 0000             		lea	(OptScrBoxData).l,a3
000A6BB8 47F3 1000                  		lea	(a3,d1.w),a3
000A6BBC 303C 6000                  		move.w	#$6000,d0
000A6BC0 45F9 FFFF 0030             		lea	($FFFF0030).l,a2
000A6BC6 225B                       		movea.l	(a3)+,a1
000A6BC8 6100 FE5C                  		bsr.w	MenuScreenTextToRAM
000A6BCC 45F9 FFFF 00B6             		lea	($FFFF00B6).l,a2
000A6BD2 7200                       		moveq	#0,d1
000A6BD4 0C38 0002 FF8C             		cmpi.b	#2,(Options_menu_box).w
000A6BDA 6700                       		beq.s	loc_9186
000A6BDC 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000A6BE0 E549                       		lsl.w	#2,d1
000A6BE2 43FA FFB6                  		lea	OptionScreen_Choices(pc),a1
000A6BE6 2271 1000                  		movea.l	(a1,d1.w),a1
000A6BEA 3211                       		move.w	(a1),d1
000A6BEC E549                       		lsl.w	#2,d1
000A6BEE                            
000A6BEE                            loc_9186:		
000A6BEE 2274 1000                  		movea.l	(a4,d1.w),a1
000A6BF2 6100 FE32                  		bsr.w	MenuScreenTextToRAM
000A6BF6                            		;cmpi.b	#2,(Options_menu_box).w
000A6BF6                            		;bne.s	loc2_9186
000A6BF6                            		;lea	($FFFF00C2).l,a2
000A6BF6                            		;bsr.w	loc_9296
000A6BF6                            
000A6BF6                            loc2_9186:		
000A6BF6 43F9 00FF 0000             		lea	(v_256x256).l,a1
000A6BFC 201B                       		move.l	(a3)+,d0
000A6BFE 7215                       		moveq	#$15,d1
000A6C00 7407                       		moveq	#7,d2
000A6C02 4EF8 12D4                  		jmp	TilemapToVRAM
000A6C06                            ; ===========================================================================
000A6C06                            
000A6C06                            OptionScreen_DrawUnselected:
000A6C06 6100 0000                  		bsr.w	loc_9268
000A6C0A 7200                       		moveq	#0,d1
000A6C0C 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000A6C10 E749                       		lsl.w	#3,d1
000A6C12 47F9 0000 0000             		lea	(OptScrBoxData).l,a3
000A6C18 47F3 1000                  		lea	(a3,d1.w),a3
000A6C1C 7000                       		moveq	#0,d0
000A6C1E 45F9 FFFF 0190             		lea	($FFFF0190).l,a2
000A6C24 225B                       		movea.l	(a3)+,a1
000A6C26 6100 FDFE                  		bsr.w	MenuScreenTextToRAM
000A6C2A 45F9 FFFF 0216             		lea	($FFFF0216).l,a2
000A6C30 7200                       		moveq	#0,d1
000A6C32 0C38 0002 FF8C             		cmpi.b	#2,(Options_menu_box).w
000A6C38 6700                       		beq.s	loc2_91F8
000A6C3A 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000A6C3E E549                       		lsl.w	#2,d1
000A6C40 43FA FF58                  		lea	OptionScreen_Choices(pc),a1
000A6C44 2271 1000                  		movea.l	(a1,d1.w),a1
000A6C48 3211                       		move.w	(a1),d1
000A6C4A E549                       		lsl.w	#2,d1
000A6C4C                            
000A6C4C                            loc2_91F8		
000A6C4C 2274 1000                  		movea.l	(a4,d1.w),a1
000A6C50 6100 FDD4                  		bsr.w	MenuScreenTextToRAM
000A6C54                            		;cmpi.b	#2,(Options_menu_box).w
000A6C54                            		;bne.s	loc3_91F8
000A6C54                            		;lea	($FFFF0222).l,a2
000A6C54                            		;bsr.w	loc_9296
000A6C54                            
000A6C54                            loc3_91F8		
000A6C54 43F9 FFFF 0160             		lea	($FFFF0160).l,a1
000A6C5A 201B                       		move.l	(a3)+,d0
000A6C5C 7215                       		moveq	#$15,d1
000A6C5E 7407                       		moveq	#7,d2
000A6C60 4EF8 12D4                  		jmp	TilemapToVRAM
000A6C64                            ; ===========================================================================
000A6C64                            
000A6C64                            loc_9268:
000A6C64 49F9 0000 0000             		lea	(off_92D2).l,a4
000A6C6A 4A38 FFF8                  		tst.b	(v_megadrive).w
000A6C6E 6A00                       		bpl.s	loc2_9268
000A6C70 49F9 0000 0000             		lea	(off_92DE).l,a4
000A6C76                            
000A6C76                            loc2_9268:
000A6C76 4A38 FF8C                  		tst.b	(Options_menu_box).w
000A6C7A 6700                       		beq.s	loc3_9268
000A6C7C 49F9 0000 0000             		lea	(off_92EA).l,a4
000A6C82                            
000A6C82                            loc3_9268:
000A6C82 0C38 0002 FF8C             		cmpi.b	#2,(Options_menu_box).w
000A6C88 6600                       		bne.s	loc4_9268		; rts
000A6C8A 49F9 0000 0000             		lea	(off_92F2).l,a4
000A6C90                            
000A6C90                            loc4_9268:
000A6C90 4E75                       		rts
000A6C92                            ; ===========================================================================
000A6C92                            
000A6C92                            loc_9296:
000A6C92 4E75                       		rts
000A6C94                            
000A6C94                            Dynamic_Menu:
000A6C94 47F8 F7B8                  	lea	($FFFFF7B8).w,a3
000A6C98                            
000A6C98                            loc_3FF30:
000A6C98 3C1A                       	move.w	(a2)+,d6	; loop counter. We start off with 00 the first time.
000A6C9A                            
000A6C9A                            loc_3FF32:
000A6C9A 5313                       	subq.b	#1,(a3)		; decrement timer
000A6C9C 6400                       	bcc.s	loc_3FF78	; if time remains, branch ahead
000A6C9E 7000                       	moveq	#0,d0
000A6CA0 102B 0001                  	move.b	1(a3),d0	; load animation counter from animation data table
000A6CA4 B02A 0006                  	cmp.b	6(a2),d0
000A6CA8 6500                       	blo.s	loc_3FF48
000A6CAA 7000                       	moveq	#0,d0
000A6CAC 1740 0001                  	move.b	d0,1(a3)	; set animation counter
000A6CB0                            
000A6CB0                            loc_3FF48:
000A6CB0 522B 0001                  	addq.b	#1,1(a3)	; increment animation counter
000A6CB4 1692                       	move.b	(a2),(a3)	; set timer
000A6CB6 6A00                       	bpl.s	loc_3FF56
000A6CB8 D040                       	add.w	d0,d0
000A6CBA 16B2 0009                  	move.b	9(a2,d0.w),(a3)
000A6CBE                            
000A6CBE                            loc_3FF56:
000A6CBE 1032 0008                  	move.b	8(a2,d0.w),d0
000A6CC2 EB48                       	lsl.w	#5,d0
000A6CC4 342A 0004                  	move.w	4(a2),d2
000A6CC8 2212                       	move.l	(a2),d1
000A6CCA 0281 00FF FFFF             	andi.l	#$FFFFFF,d1		; Filter out the first byte, which contains the first PLC ID, leaving the address of the zone's art in d0
000A6CD0 D280                       	add.l	d0,d1
000A6CD2 7600                       	moveq	#0,d3
000A6CD4 162A 0007                  	move.b	7(a2),d3
000A6CD8 E94B                       	lsl.w	#4,d3
000A6CDA 4EB9 0000 1426             	jsr	(QueueDMATransfer).l	; Use d1, d2, and d3 to locate the decompressed art and ready for transfer to VRAM
000A6CE0                            
000A6CE0                            loc_3FF78:
000A6CE0 102A 0006                  	move.b	6(a2),d0
000A6CE4 4A12                       	tst.b	(a2)
000A6CE6 6A00                       	bpl.s	loc_3FF82
000A6CE8 D000                       	add.b	d0,d0
000A6CEA                            
000A6CEA                            loc_3FF82:
000A6CEA 5200                       	addq.b	#1,d0
000A6CEC 0240 00FE                  	andi.w	#$FE,d0
000A6CF0 45F2 0008                  	lea	8(a2,d0.w),a2
000A6CF4 544B                       	addq.w	#2,a3
000A6CF6 51CE FFA2                  	dbf	d6,loc_3FF32
000A6CFA 4E75                       	rts
000A6CFC                            ; ------------------------------------------------------------------------
000A6CFC                            ; MENU ANIMATION SCRIPT
000A6CFC                            ; ------------------------------------------------------------------------
000A6CFC                            ;word_87C6:
000A6CFC                            Anim_SonicMilesBG:
000A6CFC 0000                       	dc.w   0
000A6CFE                            ; Sonic/Miles animated background
000A6CFE 0000 0000                  	dc.l $FF<<24|Sonic_Miles_Spr
000A6D02 0020                       	dc.w $20
000A6D04 06                         	dc.b 6
000A6D05 0A                         	dc.b $A
000A6D06 00C7                       	dc.b   0,$C7    ; "SONIC"
000A6D08 0A05                       	dc.b  $A,  5	; 2
000A6D0A 1405                       	dc.b $14,  5	; 4
000A6D0C 1EC7                       	dc.b $1E,$C7	; "TAILS"
000A6D0E 1405                       	dc.b $14,  5	; 8
000A6D10 0A05                       	dc.b  $A,  5	; 10	
000A6D12                            ; ===========================================================================
000A6D12                            ; off_92BA:
000A6D12                            OptScrBoxData:
000A6D12                            
000A6D12 0000 0000                  		dc.l TextOptScr_PlayerSelect
000A6D16 4192                       		dc.w $4192
000A6D18 0003                       		dc.w 3
000A6D1A 0000 0000                  		dc.l TextOptScr_LivesSystem
000A6D1E 4592                       		dc.w $4592
000A6D20 0003                       		dc.w 3
000A6D22 0000 0000                  		dc.l TextOptScr_SoundTest
000A6D26 4992                       		dc.w $4992
000A6D28 0003                       		dc.w 3
000A6D2A                            
000A6D2A                            off_92D2:
000A6D2A 0000 0000                  		dc.l TextOptScr_Default
000A6D2E 0000 0000                  		dc.l TextOptScr_Original
000A6D32 0000 0000                  		dc.l TextOptScr_Beta
000A6D36 0000 0000                  		dc.l TextOptScr_Midnight
000A6D3A 0000 0000                  		dc.l TextOptScr_C2
000A6D3E 0000 0000                  		dc.l TextOptScr_Clackers
000A6D42 0000 0000                  		dc.l TextOptScr_RHS
000A6D46 0000 0000                  		dc.l TextOptScr_Socket
000A6D4A 0000 0000                  		dc.l TextOptScr_Cringe
000A6D4E 0000 0000                  		dc.l TextOptScr_Dark		
000A6D52                            off_92DE:
000A6D52 0000 0000                  		dc.l TextOptScr_Default
000A6D56 0000 0000                  		dc.l TextOptScr_Original
000A6D5A 0000 0000                  		dc.l TextOptScr_Beta
000A6D5E 0000 0000                  		dc.l TextOptScr_Midnight
000A6D62 0000 0000                  		dc.l TextOptScr_C2
000A6D66 0000 0000                  		dc.l TextOptScr_Clackers
000A6D6A 0000 0000                  		dc.l TextOptScr_RHS
000A6D6E 0000 0000                  		dc.l TextOptScr_Socket
000A6D72 0000 0000                  		dc.l TextOptScr_Cringe
000A6D76 0000 0000                  		dc.l TextOptScr_Dark	
000A6D7A                            off_92EA:
000A6D7A 0000 0000                  		dc.l TextOptScr_On
000A6D7E 0000 0000                  		dc.l TextOptScr_Off
000A6D82                            off_92F2:
000A6D82 0000 0000                  		dc.l TextOptScr_Null
000A6D86 0000 0000                  		dc.l TextOptScr_Null2
000A6D8A                            ; ===========================================================================
000A6D8A                            
000A6EA9                            ; ============================================================================
000A6EA9                            
000A6EA9                            Sonic_Miles_Spr:incbin  "artunc/Sonic and Miles text.bin"
000A73AA 00                         		even
000A73AA                            Eni_MenuBg:    incbin    "tilemaps/menubgeni.bin"
000A7556                            		even
000A7556                            Nem_MenuFont:    incbin    "artnem/Standard font.bin"
000A7AC0                            		even
000A7AC0                            Nem_MenuBox:    incbin   "artnem/Menu Box.bin"
000A7B40                            		even
000A7B40                            Eni_MenuBox:    incbin    "tilemaps/menuboxeni.bin"
000A7B6C                            		even
000A7B6C                            		even
000A7B6C                            
000A7B6C                            SHC2022:    incbin "SHC22_Full_Sonic12.bin"
001253F0                                        even
001253F0                            
001253F0                            Art_Dust:	incbin	artunc\spindust.bin
00126D30                            
00126D30                            ; ===============================================================
00126D30                            ; ---------------------------------------------------------------
00126D30                            ; Error handling module
00126D30                            ; ---------------------------------------------------------------
00126D30                             
00126D30 4EBA 0000                  BusError:   jsr ErrorHandler(pc)
00126D34 4255 5320 4552 524F 5200           dc.b    "BUS ERROR",0           ; text
00126D3E 01                                 dc.b    1               ; extended stack frame
00126D40 00                                 even
00126D40                             
00126D40 4EBA 0000                  AddressError:   jsr ErrorHandler(pc)
00126D44 4144 4452 4553 5320 4552+          dc.b    "ADDRESS ERROR",0       ; text
00126D52 01                                 dc.b    1               ; extended stack frame
00126D54 00                                 even
00126D54                             
00126D54 4EBA 0000                  IllegalInstr:   jsr ErrorHandler(pc)
00126D58 494C 4C45 4741 4C20 494E+          dc.b    "ILLEGAL INSTRUCTION",0     ; text
00126D6C 00                                 dc.b    0               ; extended stack frame
00126D6E 00                                 even
00126D6E                             
00126D6E 4EBA 0000                  ZeroDivide: jsr ErrorHandler(pc)
00126D72 5A45 524F 2044 4956 4944+          dc.b    "ZERO DIVIDE",0         ; text
00126D7E 00                                 dc.b    0               ; extended stack frame
00126D80 00                                 even
00126D80                             
00126D80 4EBA 0000                  ChkInstr:   jsr ErrorHandler(pc)
00126D84 4348 4B20 494E 5354 5255+          dc.b    "CHK INSTRUCTION",0         ; text
00126D94 00                                 dc.b    0               ; extended stack frame
00126D96 00                                 even
00126D96                             
00126D96 4EBA 0000                  TrapvInstr: jsr ErrorHandler(pc)
00126D9A 5452 4150 5620 494E 5354+          dc.b    "TRAPV INSTRUCTION",0       ; text
00126DAC 00                                 dc.b    0               ; extended stack frame
00126DAE 00                                 even
00126DAE                             
00126DAE 4EBA 0000                  PrivilegeViol:  jsr ErrorHandler(pc)
00126DB2 5052 4956 494C 4547 4520+          dc.b    "PRIVILEGE VIOLATION",0     ; text
00126DC6 00                                 dc.b    0               ; extended stack frame
00126DC8 00                                 even
00126DC8                             
00126DC8 4EBA 0000                  Trace:      jsr ErrorHandler(pc)
00126DCC 5452 4143 4500                     dc.b    "TRACE",0           ; text
00126DD2 00                                 dc.b    0               ; extended stack frame
00126DD4 00                                 even
00126DD4                             
00126DD4 4EBA 0000                  Line1010Emu:    jsr ErrorHandler(pc)
00126DD8 4C49 4E45 2031 3031 3020+          dc.b    "LINE 1010 EMULATOR",0      ; text
00126DEB 00                                 dc.b    0               ; extended stack frame
00126DEC                                    even
00126DEC                             
00126DEC 4EBA 0000                  Line1111Emu:    jsr ErrorHandler(pc)
00126DF0 4C49 4E45 2031 3131 3120+          dc.b    "LINE 1111 EMULATOR",0      ; text
00126E03 00                                 dc.b    0               ; extended stack frame
00126E04                                    even
00126E04                             
00126E04 4EBA 0000                  ErrorExcept:    jsr ErrorHandler(pc)
00126E08 4552 524F 5220 4558 4345+          dc.b    "ERROR EXCEPTION",0         ; text
00126E18 00                                 dc.b    0               ; extended stack frame
00126E1A 00                                 even
00126E1A                             
00126E1A                            ErrorHandler:   incbin  "ErrorHandler.bin"
001275FE                            
001275FE                            ; end of 'ROM'
001275FE                            		even
001275FE                            EndOfRom:
001275FE                            
001275FE                            
